[
  {
    "title": "时隔十天，终于拿到了 New Bing 体验资格",
    "url": "https://www.v2ex.com/t/917107",
    "summary": "vsitebon: <p>那天，New Bing 开始排队后，我几乎第一时间就预约了，想不到等到今天才排上；前几天就已经借过别人的 New Bing 来使用了，确实很惊艳，不过也会出现参考文献乱编的情况，感觉还是要再修炼一下提问的艺术。</p>\n<p>之前的预约帖子： <a href=\"https://v2ex.com/t/914134#reply81\" rel=\"nofollow\">https://v2ex.com/t/914134#reply81</a></p>",
    "publish_time": "2023-02-18 08:05:59",
    "source": {
      "name": "v2ex_hot",
      "desc": "v2ex 最热主题",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/v2ex.png"
    }
  },
  {
    "title": "今天还在刷 V2EX 的，是不是都是周六还要工作的可怜虫",
    "url": "https://www.v2ex.com/t/917154",
    "summary": "holydancer: <p>我承认，我是。</p>",
    "publish_time": "2023-02-18 13:37:46",
    "source": {
      "name": "v2ex_hot",
      "desc": "v2ex 最热主题",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/v2ex.png"
    }
  },
  {
    "title": "GitHub 疑似解封",
    "url": "https://www.v2ex.com/t/917108",
    "summary": "zbzzh: <p>gfw 似乎临时关闭了对 github, steam 的 sni 阻断，目前测试非常丝滑</p>",
    "publish_time": "2023-02-18 08:21:59",
    "source": {
      "name": "v2ex_hot",
      "desc": "v2ex 最热主题",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/v2ex.png"
    }
  },
  {
    "title": "把双显示器升级成单显示器 LG C2，太舒服了",
    "url": "https://www.v2ex.com/t/917110",
    "summary": "privater: <p>按照 Reddit 的教程，通过 hammerspoon 开启了系统内自动休眠和开启，不用再折腾 TV 遥控器。</p>\n<p>买了 USB-C 转 HDMI 2.1 转接头，按照最新教程顺利开启 4K@100hz 刷新。</p>\n<p><a href=\"https://imgse.com/i/pSqgByF\" rel=\"nofollow\"><img alt=\"pSqgByF.jpg\" class=\"embedded_image\" rel=\"noreferrer\" src=\"https://s1.ax1x.com/2023/02/17/pSqgByF.jpg\" /></a></p>\n<p><a href=\"https://imgse.com/i/pSqgDL4\" rel=\"nofollow\"><img alt=\"pSqgDL4.jpg\" class=\"embedded_image\" rel=\"noreferrer\" src=\"https://s1.ax1x.com/2023/02/17/pSqgDL4.jpg\" /></a></p>",
    "publish_time": "2023-02-18 08:40:18",
    "source": {
      "name": "v2ex_hot",
      "desc": "v2ex 最热主题",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/v2ex.png"
    }
  },
  {
    "title": "打算建立一个博客写点文章，有推荐的么",
    "url": "https://www.v2ex.com/t/917124",
    "summary": "freepoint: <ul>\n<li>\n<p>某宝有代为部署的，100 手工费，域名服务器自己买！</p>\n</li>\n<li>\n<p>关于服务器: 境内第一年 128 ，续费 510/年；国外 /年 46 美金（固定费用以后不涨价），也有更好的 93 美金一年的。</p>\n</li>\n</ul>\n<p><strong>有建站的朋友欢迎聊一聊。</strong></p>",
    "publish_time": "2023-02-18 10:42:33",
    "source": {
      "name": "v2ex_hot",
      "desc": "v2ex 最热主题",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/v2ex.png"
    }
  },
  {
    "title": "go websocket rps, cpu, latency 全面测评",
    "url": "https://www.v2ex.com/t/917122",
    "summary": "Nazz: <p>本来想测试四款<code>websocket package</code>的, 但是<code>gobwas/ws</code>数据太异常还是不放了. 今天测试的三个库分别是</p>\n<ul>\n<li><a href=\"https://github.com/gorilla/websocket\" rel=\"nofollow\">gorilla/websocket</a></li>\n<li><a href=\"https://github.com/nhooyr/websocket\" rel=\"nofollow\">nhooyr/websocket</a></li>\n<li><a href=\"https://github.com/lxzan/gws\" rel=\"nofollow\">lxzan/gws</a></li>\n</ul>\n<p>测试代码地址: <a href=\"https://github.com/lxzan/go-websocket-testing\" rel=\"nofollow\">github</a></p>\n<h3>Env</h3>\n<p><img alt=\"env\" class=\"embedded_image\" rel=\"noreferrer\" src=\"https://raw.githubusercontent.com/lxzan/go-websocket-testing/main/assets/pictures/env.png\" /></p>\n<h3>WebSocket Protocol</h3>\n<p>正确性高于性能, 首先测试一下<code>WebSocket</code>协议. 每个包基本都是用的默认配置，为了节省时间，本项测试关闭了压缩.\n可以看到，尽管 gorilla/websocket 和 nhooyr/websocket 宣称通过了所有 autobahn-testsuite 测试，但可能还需要开发者额外写一些代码.</p>\n<ul>\n<li>命令</li>\n</ul>\n<pre><code class=\"language-bash\">docker run -it --rm \\\n  -v ${PWD}/config:/config \\\n  -v ${PWD}/reports:/reports \\\n  crossbario/autobahn-testsuite \\\n  wstest -m fuzzingclient -s /config/fuzzingclient.json\n</code></pre>\n<ul>\n<li>结果</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>package</th>\n<th>Pass</th>\n<th>Info</th>\n<th>Non-Strict</th>\n<th>Unclean</th>\n<th>Failed</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>lxzan/gws</td>\n<td>294</td>\n<td>3</td>\n<td>4</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>gorilla/websocket</td>\n<td>223</td>\n<td>3</td>\n<td>0</td>\n<td>85</td>\n<td>75</td>\n</tr>\n<tr>\n<td>nhooyr/websocket</td>\n<td>173</td>\n<td>3</td>\n<td>0</td>\n<td>0</td>\n<td>125</td>\n</tr>\n</tbody></table><p><img alt=\"testsuite\" class=\"embedded_image\" rel=\"noreferrer\" src=\"https://raw.githubusercontent.com/lxzan/go-websocket-testing/main/assets/pictures/testsuite.png\" /></p>\n<h3>RPS</h3>\n<pre><code class=\"language-bash\">// 1000 connections, 500 messages/second, 1000 Byte Payload\ntcpkali -c 1000 --connect-rate 500 -r 500 -T 30s -f assets/1K.txt --ws 127.0.0.1:${port}/connect\n</code></pre>\n<ul>\n<li>gws</li>\n</ul>\n<pre><code>Destination: [127.0.0.1]:8000\nInterface lo address [127.0.0.1]:0\nUsing interface lo to connect to [127.0.0.1]:8000\nRamped up to 1000 connections.\nTotal data sent:     12919.8 MiB (13547411965 bytes)\nTotal data received: 12854.5 MiB (13478908970 bytes)\nBandwidth per channel: 7.178⇅ Mbps (897.2 kBps)\nAggregate bandwidth: 3594.175↓, 3612.441↑ Mbps\nPacket rate estimate: 316194.9↓, 581166.7↑ (3↓, 2↑ TCP MSS/op)\nTest duration: 30.0017 s.\n</code></pre>\n<ul>\n<li>gorilla</li>\n</ul>\n<pre><code>Destination: [127.0.0.1]:8001\nInterface lo address [127.0.0.1]:0\nUsing interface lo to connect to [127.0.0.1]:8001\nRamped up to 1000 connections.\nTotal data sent:     7077.0 MiB (7420776528 bytes)\nTotal data received: 7089.8 MiB (7434174595 bytes)\nBandwidth per channel: 3.961⇅ Mbps (495.1 kBps)\nAggregate bandwidth: 1982.319↓, 1978.746↑ Mbps\nPacket rate estimate: 272613.9↓, 173441.2↑ (2↓, 12↑ TCP MSS/op)\nTest duration: 30.0019 s.\n</code></pre>\n<ul>\n<li>nhooyr</li>\n</ul>\n<pre><code>Destination: [127.0.0.1]:8002\nInterface lo address [127.0.0.1]:0\nUsing interface lo to connect to [127.0.0.1]:8002\nRamped up to 1000 connections.\nTotal data sent:     5103.5 MiB (5351431830 bytes)\nTotal data received: 5140.6 MiB (5390317539 bytes)\nBandwidth per channel: 2.856⇅ Mbps (357.0 kBps)\nAggregate bandwidth: 1437.359↓, 1426.990↑ Mbps\nPacket rate estimate: 135048.1↓, 124004.1↑ (1↓, 14↑ TCP MSS/op)\nTest duration: 30.0012 s.\n</code></pre>\n<h3>Latency</h3>\n<ul>\n<li>1000 connections, 100 messages/second, 1000 Byte Payload</li>\n</ul>\n<p><img alt=\"gorilla\" class=\"embedded_image\" rel=\"noreferrer\" src=\"https://raw.githubusercontent.com/lxzan/go-websocket-testing/main/assets/pictures/1K/gorilla.png\" /></p>\n<p><img alt=\"nhooyr\" class=\"embedded_image\" rel=\"noreferrer\" src=\"https://raw.githubusercontent.com/lxzan/go-websocket-testing/main/assets/pictures/1K/nhooyr.png\" /></p>\n<p><img alt=\"gws\" class=\"embedded_image\" rel=\"noreferrer\" src=\"https://raw.githubusercontent.com/lxzan/go-websocket-testing/main/assets/pictures/1K/gws.png\" /></p>\n<pre><code>  PID   USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND\n  18305 caster    20   0  720780  38116   7332 S 248.8   1.0  24:29.55 gorilla-linux-amd64\n  18325 caster    20   0  720952  52544   7180 S 161.1   1.3  15:57.80 gws-linux-amd64\n  18346 caster    20   0  721460  50064   7364 R 311.3   1.3  20:49.94 nhooyr-linux-amd64\n</code></pre>\n<ul>\n<li>10000 connections, 10 messages/second, 1000 Byte Payload</li>\n</ul>\n<p><img alt=\"gorilla\" class=\"embedded_image\" rel=\"noreferrer\" src=\"https://raw.githubusercontent.com/lxzan/go-websocket-testing/main/assets/pictures/10K/gorilla.png\" /></p>\n<p><img alt=\"nhooyr\" class=\"embedded_image\" rel=\"noreferrer\" src=\"https://raw.githubusercontent.com/lxzan/go-websocket-testing/main/assets/pictures/10K/nhooyr.png\" /></p>\n<p><img alt=\"gws\" class=\"embedded_image\" rel=\"noreferrer\" src=\"https://raw.githubusercontent.com/lxzan/go-websocket-testing/main/assets/pictures/10K/gws.png\" /></p>\n<pre><code>  PID   USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND\n  19430 caster    20   0 1070196 395408   6924 S 294.0   9.9   3:44.56 gws-linux-amd64\n  19618 caster    20   0  930480 267108   7268 S 313.0   6.7   9:01.10 gorilla-linux-amd64\n  20939 caster    20   0 1067980 372916   7236 R 455.8   9.3  12:12.72 nhooyr-linux-amd64\n</code></pre>\n<h3>Final Result</h3>\n<p>可以看到, 除了内存, 每一项都是</p>\n<pre><code>gws &gt; gorilla &gt;&gt; nhooyr\n</code></pre>",
    "publish_time": "2023-02-18 10:34:46",
    "source": {
      "name": "v2ex_hot",
      "desc": "v2ex 最热主题",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/v2ex.png"
    }
  },
  {
    "title": "如何正确理解通货膨胀？",
    "url": "https://www.v2ex.com/t/917150",
    "summary": "iyaozhen: 直观上，现在的 100 块，能买 100 个馒头，再过 10 年，只能买 50 个馒头了。这就是说的钱放着不动就会贬值（通货膨胀）<br /><br />所以很多人说要拿着钱去投资，去买一些资产（房子、商铺）。但我做了这些操作通货膨胀就消失了？那我买沪深 300 、房子就一定会赚嘛？<br /><br />或者说作为普通人是不是可以不关心什么通货膨胀。如果你想钱生钱就是要去投资，就有可能亏（ 100 块变 90 块），和通货膨胀本身没啥关系？我不操作 100 块还是 100 块？",
    "publish_time": "2023-02-18 13:15:07",
    "source": {
      "name": "v2ex_hot",
      "desc": "v2ex 最热主题",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/v2ex.png"
    }
  }
]