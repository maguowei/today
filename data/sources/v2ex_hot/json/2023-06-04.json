[
  {
    "title": "价位 4000 的戴尔 ultrasharp27 寸 4k 显示器和价位 1600 的红米 4k 显示器差别在哪",
    "url": "https://www.v2ex.com/t/945602",
    "summary": "tempw: <p>非专业人士，想知道具体差别。只知道都是 27 寸 4K 的。最近想买显示器。</p>",
    "publish_time": "2023-06-04 09:16:09",
    "source": {
      "name": "v2ex_hot",
      "desc": "v2ex 最热主题",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/v2ex.png"
    }
  },
  {
    "title": "不知不觉买了一堆便宜 VPS，买服务器居然会成瘾",
    "url": "https://www.v2ex.com/t/945609",
    "summary": "vincent7245: <p>买服务器居然也会上瘾，看到有便宜的就想买，不知不觉手里已经囤了一堆了。</p>\n<table>\n<thead>\n<tr>\n<th>服务商</th>\n<th>配置</th>\n<th>费用</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>腾讯轻量无忧</td>\n<td>1C2G</td>\n<td>190/年</td>\n<td>备案的网站、笔记、Bitwarden 、Gitea</td>\n</tr>\n<tr>\n<td>腾讯云首单优惠</td>\n<td>2C4G</td>\n<td>158 马上到期了</td>\n<td>闲置</td>\n</tr>\n<tr>\n<td>狗云香港</td>\n<td>1C1G</td>\n<td>100/ 年</td>\n<td>魔法、建站</td>\n</tr>\n<tr>\n<td>狗云香港</td>\n<td>1C1G</td>\n<td>100/年</td>\n<td>魔法</td>\n</tr>\n<tr>\n<td>野草云</td>\n<td>2C8G</td>\n<td>266/年</td>\n<td>开发测试环境</td>\n</tr>\n<tr>\n<td>racknerd</td>\n<td>2C3G</td>\n<td>$32/年</td>\n<td>邮箱服务、魔法</td>\n</tr>\n<tr>\n<td>racknerd</td>\n<td>1C 0.5G</td>\n<td>$10/年</td>\n<td>魔法</td>\n</tr>\n</tbody></table><p>除了国内的腾讯云轻量，其他的服务器负载很低，几户算是闲置了，还能再搭建什么服务让其物尽其用呢。</p>",
    "publish_time": "2023-06-04 10:13:25",
    "source": {
      "name": "v2ex_hot",
      "desc": "v2ex 最热主题",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/v2ex.png"
    }
  },
  {
    "title": "被 Manager 批评了，但是我觉得我做得对，怎么办",
    "url": "https://www.v2ex.com/t/945593",
    "summary": "Mikawa: <p>这周被老板喷了，有点难受，不知道是不是我做错了，发出来请老哥看一看</p>\n<p>我是去年跳槽进的现在公司，进去不久 Manager 分了个活给我，让我做一块小东西（一个通用的技术需求），因为不算绩效，所以可以自己折腾。我在开工的时候拉了个会和组里其他人过了下设计，就开始做了。</p>\n<p>那个活我当时打算拿 node 写个 CLI 就行，但是实际写完之后发现还有些可以做的，需要在 CLI 里加个命令，本地起个 UI ，类似 Prisma 那样，就开了个 nextjs 的应用，和 CLI 放在同一个仓库，把那个仓库改成了 monorepo ，后面因为循环引用，就把 cli 里的一块逻辑提出来了。</p>\n<p>上面这些坑挖了不久，我就因为被其他原因 block ，暂停这个 CLI 的开发，最近打算继续做，就在周会上提了下。</p>\n<p>我 Manger 刚好打算对另一个新成立的组输出些东西，就找我要了仓库，说看一下。实际是打算把我做的和他手下另一个做这块的人做的东西缝一下，提供给他们组。</p>\n<p>分支是周四发的，周五晚上他在微信群里 @全体，说不要把代码写的过于复杂，过度包装，还用了个抽象的比喻，我也没多想，就没管，也没想是说谁。</p>\n<p>结果第二天打开工作 im ，发现老板给我留言批评我，说我过度包装了，让我把 monorepo 合回去，并且说“他以为可以分分钟给出去，最后他自己写了，这些功能几个文件就搞定了 balabala”，最后说这也不是什么大事，让我不要担心之类的</p>\n<p>我一直觉得我和老板脑回路对不上，平时他带了好几个组，所以不常会和他一起交流设计，但是一旦开始讨论，意见几乎必然相左。平时都是在设计的时候意见不一致，这次是实际发生的事情，一步一步有迹可循，所以我直接给他说了我为什么这么做</p>\n<p>昨天晚上他看到我的消息，还是说我做的不对，s 说我是在乱叠包装、杀蚊子用大炮，他自己写就几个文件，别人还可以改 balabala</p>\n<p>刚刚醒了看到他昨天晚上的消息，人有点麻，完全没办法沟通，去年跳槽就是希望去外企工作氛围能轻松一些，结果老板完全没办法沟通。</p>\n<p>总之我把我为什么这么做再详细讲了下，并且给他抗议他不经过我，直接扒代码，扒不出来就说我过度包装的行为，让他后续有这种例子叫上我</p>",
    "publish_time": "2023-06-04 06:13:01",
    "source": {
      "name": "v2ex_hot",
      "desc": "v2ex 最热主题",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/v2ex.png"
    }
  },
  {
    "title": "ios+WeChat 组合每次点开都要转圈 1-2 分钟",
    "url": "https://www.v2ex.com/t/945599",
    "summary": "ruoyutx: <p>点开 app 就是连接中，获取中，算了下时间，足足两分钟。wechat 用户。严重影响使用。如若圈圈没有转完。你点扫码，是无网络情况下的。也就是无法扫码。这就蛋疼了。坐个车，师傅等了我两分钟扫码！</p>\n<p>另外你们用的微信还是 wechat ？有没有和我一样的情况。抛开网络文字，流量，wifi 都试过了</p>\n<p>转圈情况长年有，但是这两天敏感日子特别严重</p>",
    "publish_time": "2023-06-04 08:51:53",
    "source": {
      "name": "v2ex_hot",
      "desc": "v2ex 最热主题",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/v2ex.png"
    }
  },
  {
    "title": "购买软路由是否真的有必要？",
    "url": "https://www.v2ex.com/t/945653",
    "summary": "willwon1: <p>曾经作为刚入门的选手购买过 R2S ，体验不可谓不糟糕</p>\n<p>软路由最大的需求应该都是为了翻墙，但是软路由在这方便做的其实并不好，本人软路由节点是自己搭建的，稳定性是有的，但是就算是这样软路由总是会碰见各种各样的问题</p>\n<p>1.经常莫名其妙重启，不是到是不是性能差的原因,R2S 对我的反馈就是一个字折腾、\n2.国内外自动分流，在我打游戏的时候总是要切到后台，否则游戏延迟就爆炸\n3.软路由当网关的模式下，配置错误一个问题，直接炸掉，只能恢复出厂设置，真的糟糕\n4.软路由旁路由的模式下，手机设备代理到软路由也总是会碰到各种各样的问题，IOS 验证码加载不出来，最糟糕的一点家里本来的带宽 500 兆，挂上软路由直接掉到 200 兆，R2S 性能不够，只能在 WiFi 设置下手动删除代理\n5.在绝大多数人机场都是限速的情况，就算自己搭建，100 兆的翻墙带宽和 500 兆的翻墙带宽，是否在体验上真正有本质的区别，这里打个问号？</p>\n<p>这里讨论是否有必要购买软路由，打个比方，家里闲置的 ios 或者 Android ，芯片性能一定超过软路由太多，功耗也十分的低，在 ios 和 Android 开启代理软件，要上网的设备设置下 WiFi 的代理到移动设备，是不是已经可以替代软路由了？ 而且体验更佳，不会出现各种莫名其妙的问题。</p>",
    "publish_time": "2023-06-04 12:56:23",
    "source": {
      "name": "v2ex_hot",
      "desc": "v2ex 最热主题",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/v2ex.png"
    }
  },
  {
    "title": "用 Go 基于 epoll 实现一个最小化 IO 库",
    "url": "https://www.v2ex.com/t/945616",
    "summary": "RememberCurry: <p>目前 Go 圈有很多款异步的网络框架:</p>\n<ul>\n<li><a href=\"https://github.com/tidwall/evio\" rel=\"nofollow\">https://github.com/tidwall/evio</a></li>\n<li><a href=\"https://github.com/lesismal/nbio\" rel=\"nofollow\">https://github.com/lesismal/nbio</a></li>\n<li><a href=\"https://github.com/panjf2000/gnet\" rel=\"nofollow\">https://github.com/panjf2000/gnet</a></li>\n<li><a href=\"https://github.com/cloudwego/netpoll\" rel=\"nofollow\">https://github.com/cloudwego/netpoll</a></li>\n<li>.......</li>\n</ul>\n<p>排名不分先后。</p>\n<p>这里面最早的实现是 evio 。evio 也存在一些问题，之前也写过<a href=\"https://www.syst.top/posts/go/evio/\" rel=\"nofollow\">evio</a>文章介绍过。 其他比如 nbio 和 gnet 也写过一些源码分析。</p>\n<p>为什么会出现这些框架？之前也提到过，由于标准库 netpoll 的一些特性:</p>\n<ul>\n<li>一个 conn 一个 goroutine 导致利用率低</li>\n<li>用户无法感知 conn 状态</li>\n<li>.....</li>\n</ul>\n<p>这些框架在应用层上做了很多优化，比如:Worker Pool,Buffer,Ring Buffer,NoCopy......。</p>\n<p>都分析了好几篇的代码了，那么咋么说也得自己动手搞一个来达成学习目的。</p>\n<p>没错，这就是<a href=\"https://github.com/wuqinqiang/easyio\" rel=\"nofollow\">easyio</a>的由来。</p>\n<p>它是一个最小化的 IO 框架，只实现最核心的部分，加起来不超过 500 行代码。</p>\n<p>也没有用户端上层应用的优化，且目前只实现了 linux 的 epoll ，以及只能运行 tcp 协议。</p>\n<p>简单的 demo ，</p>\n<p>服务端:</p>\n<pre><code class=\"language-go\">\npackage main\n\nimport (\n\"context\"\n\"fmt\"\n\"os\"\n\"os/signal\"\n\"syscall\"\n\n\"github.com/wuqinqiang/easyio\"\n)\n\nvar _ easyio.EventHandler = (*Handler)(nil)\n\ntype Handler struct{}\n\ntype EasyioKey struct{}\n\ntype Message struct{ Msg string }\n\nvar CtxKey EasyioKey\n\nfunc (h Handler) OnOpen(c easyio.Conn) context.Context {\nreturn context.WithValue(context.Background(), CtxKey, Message{Msg: \"helloword\"})\n}\n\nfunc (h Handler) OnRead(ctx context.Context, c easyio.Conn) {\n_, ok := ctx.Value(CtxKey).(Message)\nif !ok {\nreturn\n}\nvar b = make([]byte, 100)\n_, err := c.Read(b)\nif err != nil {\nfmt.Println(\"err:\", err)\n}\nfmt.Println(\"[Handler] read data:\", string(b))\n\nif _, err = c.Write(b); err != nil {\npanic(err)\n}\n}\n\nfunc (h Handler) OnClose(_ context.Context, c easyio.Conn) {\nfmt.Println(\"[Handler] closed\", c.Fd())\n}\n\nfunc main() {\ne := easyio.New(\"tcp\", \":8090\",easyio.WithNumPoller(4), easyio.WithEventHandler(Handler{}))\n\nif err := e.Start(); err != nil {\npanic(err)\n}\n\ndefer e.Stop()\n\nc := make(chan os.Signal, 1)\nsignal.Notify(c, syscall.SIGTERM, syscall.SIGQUIT, syscall.SIGINT)\n&lt;-c\n}\n\n</code></pre>\n<p>上面的代码，初始化一个 easyio ，启动一个 tcp 服务，监听端口 8090 ，options 里面设置 epoll 的数量，以及设置事件处理器。</p>\n<p>当一个新连接到来时会回调 OnOpen 函数，此时你可以设置自定义的 ctx ，那么当对应连接读事件到来 OnRead 回调，你可以拿到之前设置的 ctx ，调用 conn.Read 读取数据，且通过 Write 向对端写数据。</p>\n<p>这里需要注意的是，一个连接如果数据没读完，当 OnRead 执行结束，下一轮会继续触发回调代码，因为底层 epoll 采用的是 LT 触发方式。</p>\n<p>简单的客户端</p>\n<pre><code class=\"language-go\">package main\n\nimport (\n\"fmt\"\n\"net\"\n\"os\"\n\"os/signal\"\n\"syscall\"\n)\n\nfunc main() {\nconn, err := net.Dial(\"tcp\", \":8090\")\nif err != nil {\npanic(err)\n}\nn, err := conn.Write([]byte(\"hello world\"))\nif err != nil {\npanic(err)\n}\n\ngo func() {\nb := make([]byte, 100)\nif n, err = conn.Read(b); err != nil {\npanic(err)\n}\nfmt.Println(\"read data:\", n, string(b))\n}()\n\ndefer conn.Close()\n\nch := make(chan os.Signal, 1)\nsignal.Notify(ch, syscall.SIGHUP, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT)\n\n&lt;-ch\n}\n</code></pre>\n<p>源码地址:<a href=\"https://github.com/wuqinqiang/easyio\" rel=\"nofollow\">https://github.com/wuqinqiang/easyio</a></p>",
    "publish_time": "2023-06-04 10:22:40",
    "source": {
      "name": "v2ex_hot",
      "desc": "v2ex 最热主题",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/v2ex.png"
    }
  },
  {
    "title": "想买一辆公路车",
    "url": "https://www.v2ex.com/t/945630",
    "summary": "jonty: 1.用于通勤，上班大概 10 公里左右的路程<br />2.周末休闲骑行健身<br />3.希望对小白友好，不容易出现无法骑行问题，小毛病可以接受<br /><br />目前看下来有推荐斯特拉 95 ，希望价位最高不超过 4.5k 。本身对公路车各种组件都不熟悉，所以希望是能直接买到的整车，各位 V 友们有推荐的车型吗？",
    "publish_time": "2023-06-04 11:24:20",
    "source": {
      "name": "v2ex_hot",
      "desc": "v2ex 最热主题",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/v2ex.png"
    }
  },
  {
    "title": "生而为人，不是任小米随便支配的猪狗！",
    "url": "https://www.v2ex.com/t/945694",
    "summary": "callme110: <p>准备入职小米了，结果在星球里看到了这个帖子....求证真假。。。。。</p>\n<p>算是骨灰级的米粉和员工了。一大早就被拉去开大会，一种不详的预感强烈来袭，职场不成文规定：好事单独聊，坏事开大会。果然，上来就被告知，“从今天开始，上班时间强制至少 11.5 个小时”。\n我以为是有大项目要做，谁知道理由竟是隔壁部门的打卡数据比我们的漂亮，荒唐又可笑。轻飘一句话抹杀了员工 3.5 个小时的自由时间。加班费只字未提，连起码得加班餐也没有，只撂下一句冷冰冰的威胁，“不够点的，直接优化”。\n随意践踏员工的基本权益也就算了，竟然敢视《劳动法》为无物，蔑视政府的权威，这天下还没有改姓雷吧。真想问问小米的法律底线到底在哪？\n小米是什么时候变成这个样子的呢？\n记得在做小米 6 的时候，领导一句话，全体员工连轴转，一个月无休，上班时间没有低于 12 个小时的，大部分员工都没有怨言。因为大家知道，特殊时期就要牟足劲的干，最终交给公司和用户一份满意的答案。小米 6 也成了至今无法超越的经典。而后的每一次 miui 改版或者新机发布前总有那么一段时间需要加班加点，哪怕没有加班费，那怕给了调休的机会也没用。无所谓，就算是个人也有忙的时候，何况偌大的公司呢。\n那个时候的小米有种自上而下的情怀，而现在却成了从头到脚的威胁。\n人的精力就像弹簧，张弛有度才能更加持久，一味地强拉硬拽最后只会松弛。领导难道不明白这个道理？不是！一切不过是领导之间的内耗和无意义的攀比，为了所谓的面子数据，人为制造努力奋斗的假象，欺上瞒下，真的是无能又可笑。但凡有点正事干，也不会天天盯着考勤查，黔驴技穷。就这企业文化能造出好车？我信你个球，麻烦你先做到最基本的遵纪守法吧。</p>\n<p>最后说一句，想裁员就直接送大礼包，别刷这些下三滥！麻辣隔壁的！</p>",
    "publish_time": "2023-06-04 16:43:23",
    "source": {
      "name": "v2ex_hot",
      "desc": "v2ex 最热主题",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/v2ex.png"
    }
  },
  {
    "title": "拿驾驶证 8 年了，今年打算买车，但担心驾校学的都忘光了怎么办？",
    "url": "https://www.v2ex.com/t/945656",
    "summary": "WhoCanBeRich: <p>是不是可以找个教练先再学一下驾驶？</p>\n<p>自己的车技真的很一般，家里也没车，现在对车就非常陌生。</p>",
    "publish_time": "2023-06-04 13:21:09",
    "source": {
      "name": "v2ex_hot",
      "desc": "v2ex 最热主题",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/v2ex.png"
    }
  }
]