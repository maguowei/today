[
  {
    "title": "Java 21：下一个LTS版本，提供了虚拟线程、记录模式和模式匹配",
    "url": "https://www.infoq.cn/article/zIiqcmU8hiGhmuSAhzwb",
    "summary": "<p>Oracle<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2023-September/008267.html\">发布</a>\"Java编程语言和虚拟机的<a href=\"https://openjdk.org/projects/jdk/21/\">第21个版本</a>\"。这是自2021年<a href=\"https://openjdk.java.net/projects/jdk/17/\">JDK 17</a>\"发布以来的第一个长期支持（LTS）版本。最终的特性集包括以下15个JEP：</p><p>JEP 430：<a href=\"https://openjdk.org/jeps/430\">字符串模板（预览版）</a>\"JEP 431：<a href=\"https://openjdk.org/jeps/431\">有序集合</a>\"JEP 439：<a href=\"https://openjdk.org/jeps/439\">分代式ZGC</a>\"JEP 440：<a href=\"https://openjdk.org/jeps/440\">记录模式</a>\"JEP 441：<a href=\"https://openjdk.org/jeps/441\">switch模式匹配</a>\"JEP 442：<a href=\"https://openjdk.org/jeps/442\">外部函数&amp;内存API（第三个预览版）</a>\"JEP 443：<a href=\"https://openjdk.org/jeps/443\">未命名模式和变量（预览版）</a>\"JEP 444：<a href=\"https://openjdk.org/jeps/444\">虚拟线程</a>\"JEP 445：<a href=\"https://openjdk.org/jeps/445\">未命名类和实例的Main方法（预览版）</a>\"JEP 446：<a href=\"https://openjdk.org/jeps/446\">作用域值（预览版）</a>\"JEP 448：<a href=\"https://openjdk.org/jeps/448\">向量API（第六轮孵化）</a>\"JEP 449：<a href=\"https://openjdk.org/jeps/449\">弃用Windows 32-bit x86移植，为删除做准备</a>\"JEP 451：<a href=\"https://openjdk.org/jeps/451\">准备禁用代理的动态加载</a>\"JEP 452：<a href=\"https://openjdk.org/jeps/452\">密钥封装机制API</a>\"JEP 453：<a href=\"https://openjdk.org/jeps/453\">结构化并发（预览版）</a>\"</p><p>&nbsp;</p><p>其中有三个——虚拟线程、记录模式和switch模式匹配——已经完成了各自的预览，现已最终确定。</p><p>&nbsp;</p><p>如下图所示，<a href=\"https://blogs.oracle.com/java/post/the-arrival-of-java-21\">JDK 21的特性开发节奏</a>\"和前两个LTS版本（即JDK 17和JDK 11）以及以前其他的JDK版本类似。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5e/5e28b9cf23b68349be8968b4c84da2d1.png\" /></p><p></p><p>&nbsp;</p><p>Azul副首席执行官<a href=\"https://www.linkedin.com/in/siritter/\">Simon Ritter</a>\"告诉InfoQ：</p><p></p><p></p><blockquote>JDK 21将是OpenJDK发行版的下一个长期支持（LTS）版本。这一点很重要，因为许多企业用户在生产环境中都只使用这样的版本。长远来看，将会有大量的用户采用。然而，大部分用户在部署前会等待6到12个月，以便新特性可以经历更多真实世界的测试，发现的Bug得以修复。&nbsp;JDK 21包含了许多新特性，涵盖了平台的各个方面：语言、库、JVM和工具。&nbsp;JDK 21最突出的特性也许是虚拟线程，它从预览特性变成了完整特性。对于使用一请求一线程模型的应用程序来说，这是提高性能和可扩展性的理想选择，因为线程在等待IO上花费了大量的时间。作为Loom项目的一部分，开发人员对这个特性可谓期待已久。&nbsp;对于开发人员，该版本提供了各种与模式匹配有关的语言级特性。记录模式和switch模式匹配都成了完整特性。还有一个小而强大的特性是未命名模式和变量。向量API（用于数值密集型计算）和外部函数&amp;内存API（Panama项目的一部分）将继续以孵化器的形式开发。&nbsp;看下自JDK 17以来的新特性总表就会知道，这个新的Java LTS版本对开发人员和最终用户将会很有吸引力。</blockquote><p></p><p>&nbsp;</p><p>下面我们将进一步探讨下其中的一些JEP，提供一些JDK 21的资源，并预测下JDK 22中可能包含哪些特性。</p><p>&nbsp;</p><p></p><h4>虚拟线程</h4><p></p><p></p><p>JEP 444（<a href=\"https://openjdk.org/jeps/444\">虚拟线程</a>\"）根据前两轮预览的反馈最终确定了这个特性：JEP 436（<a href=\"https://openjdk.org/jeps/436\">虚拟线程第二次预览</a>\"）在JDK 20中交付；JEP 425（<a href=\"https://openjdk.org/jeps/425\">虚拟线程第一次预览</a>\"）在JDK 19中交付。该特性为Java平台提供了虚拟线程。这种轻量级的线程可以显著减少编写、维护和观测高吞吐量并发应用程序的工作量。JEP 436最重要的变化是，虚拟线程现在完全支持<a href=\"https://openjdk.org/jeps/8303683#Thread-local-variables\">线程本地变量</a>\"，取消了不使用这些变量的选项。要了解关于JEP 444的更多细节，可以阅读<a href=\"https://www.infoq.com/news/2023/04/virtual-threads-arrives-jdk21/\">InfoQ的这篇新闻报道</a>\"以及&nbsp;<a href=\"https://www.linkedin.com/in/jos%C3%A9-paumard-2458ba5/\">José Paumard</a>\"（Oracle Java平台组Java开发大使）提供的JEP Café<a href=\"https://inside.java/2022/06/08/jepcafe11/\">截屏视频</a>\"。</p><p>&nbsp;</p><p></p><h4>记录模式</h4><p></p><p></p><p>在Amber项目的支持下，JEP 440（<a href=\"https://openjdk.org/jeps/440\">记录模式</a>\"）最终确定了这一特性，并根据前两轮<a href=\"https://openjdk.java.net/jeps/12\">预览</a>\"的反馈进行了增强：JEP 432（<a href=\"https://openjdk.org/jeps/432\">记录模式第二次预览</a>\"）在JDK 20中交付；JEP 405（<a href=\"https://openjdk.org/jeps/405\">记录模式第一次预览</a>\"）在JDK 19中交付。该特性通过记录模式增强了语言解构记录值的能力。记录模式可以与类型模式结合使用，以“实现强大的声明式可组合数据导航和处理形式”。最近，类型模式通过JEP 420（<a href=\"https://openjdk.java.net/jeps/420\">switch模式匹配第二次预览</a>\"，在JDK 18中交付）和JEP 406（<a href=\"https://openjdk.java.net/jeps/406\">switch模式匹配第一次预览</a>\"，在JDK 17中交付）进行了扩展，已可用于switchcase标签。JEP 432最重要的变化是删除了在增强型for语句头中使用记录模式的支持。要了解关于JEP 440的更多细节，可以阅读<a href=\"https://www.infoq.com/news/2023/05/java-gets-boost-with-record/\">InfoQ的这篇新闻报道</a>\"。</p><p>&nbsp;</p><p></p><h4>Switch模式匹配</h4><p></p><p></p><p>也是在Amber项目的支持下，JEP 441（<a href=\"https://openjdk.org/jeps/441\">switch模式匹配</a>\"）最终确定了这个特性，并根据前四轮预览的反馈进行了增强：JEP 433（<a href=\"https://openjdk.org/jeps/433\">switch模式匹配第四次预览</a>\"）在JDK 20中交付；JEP 427（<a href=\"https://openjdk.org/jeps/427\">switch模式匹配第三次预览</a>\"）在JDK 19中交付；JEP 420（<a href=\"https://openjdk.java.net/jeps/420\">switch模式匹配第二次预览</a>\"）在JDK 18中交付；JEP 406（<a href=\"https://openjdk.java.net/jeps/406\">switch模式匹配第一次预览</a>\"）在JDK 17中交付。该特性通过在switch表达式和语句中使用模式匹配增强了该语言。要了解关于JEP 441的更多细节，可以阅读<a href=\"https://www.infoq.com/news/2023/07/tranforming-java-pattern/\">InfoQ的这篇新闻报道</a>\"。</p><p>&nbsp;</p><p></p><h4>未命名类和实例的Main方法（预览）</h4><p></p><p></p><p>JEP 445（<a href=\"https://openjdk.org/jeps/445\">未命名类和实例的Main方法预览</a>\"）之前称为灵活的Main方法和匿名Main类（预览）和隐式类与增强Main方法（预览）。它提出“改进Java语言，使学生可以编写他们的第一个程序，而不需要了解为大型程序设计的语言特性。”该JEP延续了Oracle Java语言架构师<a href=\"https://www.linkedin.com/in/briangoetz/\">Brian Goetz</a>\"在2022年9月发表的博文<a href=\"https://openjdk.org/projects/amber/design-notes/on-ramp\">Paving the on-ramp</a>\"。Oracle技术顾问<a href=\"https://www.linkedin.com/in/gavin-bierman-a0173075/\">Gavin Bierman</a>\"已经发布了<a href=\"https://cr.openjdk.org/~gbierman/jep445/jep445-20230502/specs/unnamed-classes-instance-main-methods-jls.html\">规范文档</a>\"的初稿供Java社区审查。要了解关于JEP 445的更多细节，可以阅读<a href=\"https://www.infoq.com/news/2023/05/beginner-friendly-java/\">InfoQ的这篇新闻报道</a>\"。</p><p>&nbsp;</p><p></p><h4>RoadTo21</h4><p></p><p></p><p>Java开发关系团队——<a href=\"https://www.linkedin.com/in/billy-korando-129b8197/\">Billy Korando</a>\"、<a href=\"https://www.linkedin.com/in/ana-maria-mihalceanu-1508/\">Ana-Maria Mihalceanu</a>\"、<a href=\"https://www.linkedin.com/in/jos%C3%A9-paumard-2458ba5/\">José Paumard</a>\"&nbsp;和<a href=\"https://nipafx.dev/nicolai-parlog/\">Nicolai Parlog</a>\"——提供了一系列时长约20分钟的视频教程，代号为#RoadTo21，其中介绍了更多关于JDK 21特性的细节：</p><p><a href=\"https://inside.java/2023/09/17/roadto21-pattern-matching/\">Java 21带来了完整的模式匹配</a>\"，由Parlog提供<a href=\"https://inside.java/2023/09/13/roadto21-security/\">Java 21安全性</a>\"，由Mihalceanu提供<a href=\"https://inside.java/2023/09/10/roadto21-api/\">Java 21 API变化</a>\"，由Paumard提供<a href=\"https://inside.java/2023/09/06/roadto21-performance/\">Java 21工具增强：全面改进</a>\"，由Mihalceanu提供<a href=\"https://inside.java/2023/09/03/roadto21-performance/\">Java 21 JVM和GC改进</a>\"，由Korando提供<a href=\"https://inside.java/2023/08/30/roadto21-virtualthreads/\">Java 21新特性：虚拟线程</a>\"，由Paumard提供<a href=\"https://inside.java/2023/08/27/roadto21-upgrade/\">从Java 17升级到Java 21</a>\"，由Parlog提供</p><p>&nbsp;</p><p></p><h4>JDK 21发布会</h4><p></p><p></p><p><a href=\"https://dev.java/community/java-21-launch/\">JDK 21发布会</a>\"于2023年9月19日UTC时间13:00-21:00进行了直播，由Parlog、Mihalceanu和Korando主持。这次活动邀请了众多嘉宾，并进行了Java First Java Always专题讨论，探讨JDK 21的特性。整个过程在拉斯维加斯的Oracle CloudWorld进行了实况直播。</p><p>&nbsp;</p><p>专题讨论小组的成员包括：Oracle开发关系高级总监<a href=\"https://www.linkedin.com/in/sharatchander/\">Sharat Chander</a>\"、Oracle Java平台组软件开发高级副总裁<a href=\"https://www.linkedin.com/in/georgessaab/\">Georges Saab</a>\"；Oracle开发关系副总裁<a href=\"https://www.linkedin.com/in/chadarimura/\">Chad Arimura</a>\"；Oracle编程语言设计师<a href=\"https://www.linkedin.com/in/dansmithjava/\">Daniel Smith</a>\"。</p><p>&nbsp;</p><p>该小组发布了四份公告：一个新的<a href=\"https://dev.java/playground/\">Java Playground</a>\"，基于JShell实用程序，可用于编写和执行Java代码；Java社区现在可以向<a href=\"https://dev.java/\">dev.java</a>\"网站<a href=\"https://dev.java/authors/\">提供内容</a>\"了；一个新的<a href=\"https://github.com/java\">Java Developer Relations</a>\" Github存储库；JDK 11将至少支持到2032年。</p><p>&nbsp;</p><p></p><h4>JDK 22</h4><p></p><p></p><p>目前，JDK 22中会包含哪些JEP尚不确定。但是，根据最近提交的JEP草案和建议最终某项特性的JEP候选，我们已经可以推测出哪些JEP有可能包含在JDK 22中。</p><p>&nbsp;</p><p>JEP 454（<a href=\"https://openjdk.org/jeps/454\">外部函数&amp;内存API</a>\"）建议在两轮孵化和三轮预览后最终确定该特性：JEP 412（<a href=\"https://openjdk.org/jeps/412\">外部函数&amp;内存API第一轮孵化</a>\"）在JDK 17中交付；JEP 419（<a href=\"https://openjdk.org/jeps/419\">外部函数&amp;内存API第二轮孵化</a>\"）在JDK 18中交付；JEP 424（<a href=\"https://openjdk.org/jeps/424\">外部函数&amp;内存API第一次预览</a>\"）在JDK 19中交付；JEP 434（<a href=\"https://openjdk.org/jeps/434\">外部函数&amp;内存API第二次预览</a>\"）在JDK 20中交付；JEP 442（<a href=\"https://openjdk.org/jeps/442\">外部函数&amp;内存API第三次预览</a>\"）将在即将发布的JDK 21 GA版本中交付。自上一个版本以来的改进包括：新增清单属性Enable-Native-Access，使可执行JAR文件中的代码可以调用受限方法，而无需使用--enable-native-access标识；允许客户端以编程方式构建C函数描述符，避免使用特定于平台的常量；改进对本地内存可变长数组的支持；在本地字符串中支持多字符集。</p><p>&nbsp;</p><p>在<a href=\"https://openjdk.org/projects/panama/\">Panama项目</a>\"的支持下，JEP草案8315945（<a href=\"https://openjdk.org/jeps/8315945\">向量API第七轮孵化</a>\"）包含了针对前六轮孵化反馈的增强：JEP 448（<a href=\"https://openjdk.org/jeps/448\">向量API第六轮孵化</a>\"）将在即将发布的JDK 21 GA版本中交付；JEP 438（<a href=\"https://openjdk.org/jeps/438\">向量API第五轮孵化</a>\"）在JDK 20中交付；JEP 426（<a href=\"https://openjdk.org/jeps/426\">向量API第四轮孵化</a>\"）在JDK 19中交付；JEP 417（<a href=\"https://openjdk.java.net/jeps/417\">向量API第三轮孵化</a>\"）在 JDK 18中交付；JEP 414（<a href=\"https://openjdk.java.net/jeps/414\">向量API第二轮孵化</a>\"）在JDK 17中交付；JEP 338（<a href=\"https://openjdk.java.net/jeps/338\">向量API第一轮孵化</a>\"）在JDK 16中作为<a href=\"https://openjdk.java.net/jeps/11\">孵化器模块</a>\"交付。JEP 448最重要的变化包括增强<a href=\"https://docs.oracle.com/en/graalvm/enterprise/20/docs/reference-manual/compiler/#graalvm-compiler\">JVM编译器接口</a>\"（JVMCI）以支持向量API值。</p><p>&nbsp;</p><p>JEP草案8277163（<a href=\"https://openjdk.java.net/jeps/8277163\">值对象预览</a>\"）建议创建值对象，它们是无标识值类，用于指定其实例的行为。该草案与JEP 401（<a href=\"https://openjdk.java.net/jeps/401\">空限制值对象存储预览</a>\"）相关，并将继续为实现<a href=\"https://openjdk.java.net/projects/valhalla/\">Valhalla项目</a>\"做出贡献。</p><p>&nbsp;</p><p><a href=\"https://www.linkedin.com/in/dansmithjava/\">Daniel Smith</a>\"是Oracle的编程语言设计师。他<a href=\"https://mail.openjdk.org/pipermail/valhalla-spec-observers/2023-August/002320.html\">更新</a>\"了JEP 401（<a href=\"https://openjdk.java.net/jeps/401\">空限制值对象存储预览</a>\"），以便与Oracle的最新设计思想“在语言和类文件中表达扁平化（flattenability）”保持一致。该提案最初名为Primitive Classes（预览版），支持值对象（见<a href=\"https://openjdk.org/jeps/8277163\">JEP Draft 8277163</a>\"）的空限制存储，即在字段和数组组件中将它们初始化为类的初始实例，并拒绝空值写入尝试。</p><p>&nbsp;</p><p>JEP草案8311828（<a href=\"https://openjdk.org/jeps/8311828\">未命名模式和变量</a>\"）建议在上一轮预览的基础上最终确定该特性：JEP 443（<a href=\"https://openjdk.org/jeps/443\">未命名模式和变量预览</a>\"）在JDK 21中交付。这个JEP将“使用未命名模式（可以匹配记录组件，而不需要说明组件的名称或类型）和未命名变量（可以初始化，但不能使用）来增强语言。”两者都用下划线字符表示，如r instanceof _(int x, int y)和r instanceof _。</p><p>&nbsp;</p><p>根据Oracle Java平台组首席架构师<a href=\"https://www.linkedin.com/in/markreinhold\">Mark Reinhold</a>\"的建议，<a href=\"https://jdk.java.net/22/\">JDK 22</a>\"的正式发布日期暂定为2024年3月19日。其特性预计将于2023年12月初冻结。要了解关于其他JEP草案和候选的更多细节，可以阅读<a href=\"https://www.infoq.com/news/2023/09/java-21-so-far/\">InfoQ的这篇详细报道</a>\"。</p><p>&nbsp;</p><p>JDK 21现在已经可以<a href=\"https://jdk.java.net/21/\">从Oracle官网上下载</a>\"，其他供应商的二进制文件预计也将很快提供。</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/09/java21-released/\">https://www.infoq.com/news/2023/09/java21-released/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/cR6cA98S1jv7e8KHGfpy\">Java 近期新闻：JCP 25 周年、外部函数 &amp; 内存 API、Eclipse Epicyro</a>\"</p><p><a href=\"https://www.infoq.cn/article/ThrjTB6kHMdXmjIPeaEv\">JVM 语言比较研究：Java、Kotlin 和 Scala 的利与弊</a>\"</p><p><a href=\"https://www.infoq.cn/article/QB87kOkWjf6jXxODkd9T\">Java 21：最新进展一览</a>\"</p>",
    "publish_time": "2023-10-12 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]