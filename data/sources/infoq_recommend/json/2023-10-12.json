[
  {
    "title": "Java 21：下一个LTS版本，提供了虚拟线程、记录模式和模式匹配",
    "url": "https://www.infoq.cn/article/zIiqcmU8hiGhmuSAhzwb",
    "summary": "<p>Oracle<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2023-September/008267.html\">发布</a>\"Java编程语言和虚拟机的<a href=\"https://openjdk.org/projects/jdk/21/\">第21个版本</a>\"。这是自2021年<a href=\"https://openjdk.java.net/projects/jdk/17/\">JDK 17</a>\"发布以来的第一个长期支持（LTS）版本。最终的特性集包括以下15个JEP：</p><p>JEP 430：<a href=\"https://openjdk.org/jeps/430\">字符串模板（预览版）</a>\"JEP 431：<a href=\"https://openjdk.org/jeps/431\">有序集合</a>\"JEP 439：<a href=\"https://openjdk.org/jeps/439\">分代式ZGC</a>\"JEP 440：<a href=\"https://openjdk.org/jeps/440\">记录模式</a>\"JEP 441：<a href=\"https://openjdk.org/jeps/441\">switch模式匹配</a>\"JEP 442：<a href=\"https://openjdk.org/jeps/442\">外部函数&amp;内存API（第三个预览版）</a>\"JEP 443：<a href=\"https://openjdk.org/jeps/443\">未命名模式和变量（预览版）</a>\"JEP 444：<a href=\"https://openjdk.org/jeps/444\">虚拟线程</a>\"JEP 445：<a href=\"https://openjdk.org/jeps/445\">未命名类和实例的Main方法（预览版）</a>\"JEP 446：<a href=\"https://openjdk.org/jeps/446\">作用域值（预览版）</a>\"JEP 448：<a href=\"https://openjdk.org/jeps/448\">向量API（第六轮孵化）</a>\"JEP 449：<a href=\"https://openjdk.org/jeps/449\">弃用Windows 32-bit x86移植，为删除做准备</a>\"JEP 451：<a href=\"https://openjdk.org/jeps/451\">准备禁用代理的动态加载</a>\"JEP 452：<a href=\"https://openjdk.org/jeps/452\">密钥封装机制API</a>\"JEP 453：<a href=\"https://openjdk.org/jeps/453\">结构化并发（预览版）</a>\"</p><p>&nbsp;</p><p>其中有三个——虚拟线程、记录模式和switch模式匹配——已经完成了各自的预览，现已最终确定。</p><p>&nbsp;</p><p>如下图所示，<a href=\"https://blogs.oracle.com/java/post/the-arrival-of-java-21\">JDK 21的特性开发节奏</a>\"和前两个LTS版本（即JDK 17和JDK 11）以及以前其他的JDK版本类似。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5e/5e28b9cf23b68349be8968b4c84da2d1.png\" /></p><p></p><p>&nbsp;</p><p>Azul副首席执行官<a href=\"https://www.linkedin.com/in/siritter/\">Simon Ritter</a>\"告诉InfoQ：</p><p></p><p></p><blockquote>JDK 21将是OpenJDK发行版的下一个长期支持（LTS）版本。这一点很重要，因为许多企业用户在生产环境中都只使用这样的版本。长远来看，将会有大量的用户采用。然而，大部分用户在部署前会等待6到12个月，以便新特性可以经历更多真实世界的测试，发现的Bug得以修复。&nbsp;JDK 21包含了许多新特性，涵盖了平台的各个方面：语言、库、JVM和工具。&nbsp;JDK 21最突出的特性也许是虚拟线程，它从预览特性变成了完整特性。对于使用一请求一线程模型的应用程序来说，这是提高性能和可扩展性的理想选择，因为线程在等待IO上花费了大量的时间。作为Loom项目的一部分，开发人员对这个特性可谓期待已久。&nbsp;对于开发人员，该版本提供了各种与模式匹配有关的语言级特性。记录模式和switch模式匹配都成了完整特性。还有一个小而强大的特性是未命名模式和变量。向量API（用于数值密集型计算）和外部函数&amp;内存API（Panama项目的一部分）将继续以孵化器的形式开发。&nbsp;看下自JDK 17以来的新特性总表就会知道，这个新的Java LTS版本对开发人员和最终用户将会很有吸引力。</blockquote><p></p><p>&nbsp;</p><p>下面我们将进一步探讨下其中的一些JEP，提供一些JDK 21的资源，并预测下JDK 22中可能包含哪些特性。</p><p>&nbsp;</p><p></p><h4>虚拟线程</h4><p></p><p></p><p>JEP 444（<a href=\"https://openjdk.org/jeps/444\">虚拟线程</a>\"）根据前两轮预览的反馈最终确定了这个特性：JEP 436（<a href=\"https://openjdk.org/jeps/436\">虚拟线程第二次预览</a>\"）在JDK 20中交付；JEP 425（<a href=\"https://openjdk.org/jeps/425\">虚拟线程第一次预览</a>\"）在JDK 19中交付。该特性为Java平台提供了虚拟线程。这种轻量级的线程可以显著减少编写、维护和观测高吞吐量并发应用程序的工作量。JEP 436最重要的变化是，虚拟线程现在完全支持<a href=\"https://openjdk.org/jeps/8303683#Thread-local-variables\">线程本地变量</a>\"，取消了不使用这些变量的选项。要了解关于JEP 444的更多细节，可以阅读<a href=\"https://www.infoq.com/news/2023/04/virtual-threads-arrives-jdk21/\">InfoQ的这篇新闻报道</a>\"以及&nbsp;<a href=\"https://www.linkedin.com/in/jos%C3%A9-paumard-2458ba5/\">José Paumard</a>\"（Oracle Java平台组Java开发大使）提供的JEP Café<a href=\"https://inside.java/2022/06/08/jepcafe11/\">截屏视频</a>\"。</p><p>&nbsp;</p><p></p><h4>记录模式</h4><p></p><p></p><p>在Amber项目的支持下，JEP 440（<a href=\"https://openjdk.org/jeps/440\">记录模式</a>\"）最终确定了这一特性，并根据前两轮<a href=\"https://openjdk.java.net/jeps/12\">预览</a>\"的反馈进行了增强：JEP 432（<a href=\"https://openjdk.org/jeps/432\">记录模式第二次预览</a>\"）在JDK 20中交付；JEP 405（<a href=\"https://openjdk.org/jeps/405\">记录模式第一次预览</a>\"）在JDK 19中交付。该特性通过记录模式增强了语言解构记录值的能力。记录模式可以与类型模式结合使用，以“实现强大的声明式可组合数据导航和处理形式”。最近，类型模式通过JEP 420（<a href=\"https://openjdk.java.net/jeps/420\">switch模式匹配第二次预览</a>\"，在JDK 18中交付）和JEP 406（<a href=\"https://openjdk.java.net/jeps/406\">switch模式匹配第一次预览</a>\"，在JDK 17中交付）进行了扩展，已可用于switchcase标签。JEP 432最重要的变化是删除了在增强型for语句头中使用记录模式的支持。要了解关于JEP 440的更多细节，可以阅读<a href=\"https://www.infoq.com/news/2023/05/java-gets-boost-with-record/\">InfoQ的这篇新闻报道</a>\"。</p><p>&nbsp;</p><p></p><h4>Switch模式匹配</h4><p></p><p></p><p>也是在Amber项目的支持下，JEP 441（<a href=\"https://openjdk.org/jeps/441\">switch模式匹配</a>\"）最终确定了这个特性，并根据前四轮预览的反馈进行了增强：JEP 433（<a href=\"https://openjdk.org/jeps/433\">switch模式匹配第四次预览</a>\"）在JDK 20中交付；JEP 427（<a href=\"https://openjdk.org/jeps/427\">switch模式匹配第三次预览</a>\"）在JDK 19中交付；JEP 420（<a href=\"https://openjdk.java.net/jeps/420\">switch模式匹配第二次预览</a>\"）在JDK 18中交付；JEP 406（<a href=\"https://openjdk.java.net/jeps/406\">switch模式匹配第一次预览</a>\"）在JDK 17中交付。该特性通过在switch表达式和语句中使用模式匹配增强了该语言。要了解关于JEP 441的更多细节，可以阅读<a href=\"https://www.infoq.com/news/2023/07/tranforming-java-pattern/\">InfoQ的这篇新闻报道</a>\"。</p><p>&nbsp;</p><p></p><h4>未命名类和实例的Main方法（预览）</h4><p></p><p></p><p>JEP 445（<a href=\"https://openjdk.org/jeps/445\">未命名类和实例的Main方法预览</a>\"）之前称为灵活的Main方法和匿名Main类（预览）和隐式类与增强Main方法（预览）。它提出“改进Java语言，使学生可以编写他们的第一个程序，而不需要了解为大型程序设计的语言特性。”该JEP延续了Oracle Java语言架构师<a href=\"https://www.linkedin.com/in/briangoetz/\">Brian Goetz</a>\"在2022年9月发表的博文<a href=\"https://openjdk.org/projects/amber/design-notes/on-ramp\">Paving the on-ramp</a>\"。Oracle技术顾问<a href=\"https://www.linkedin.com/in/gavin-bierman-a0173075/\">Gavin Bierman</a>\"已经发布了<a href=\"https://cr.openjdk.org/~gbierman/jep445/jep445-20230502/specs/unnamed-classes-instance-main-methods-jls.html\">规范文档</a>\"的初稿供Java社区审查。要了解关于JEP 445的更多细节，可以阅读<a href=\"https://www.infoq.com/news/2023/05/beginner-friendly-java/\">InfoQ的这篇新闻报道</a>\"。</p><p>&nbsp;</p><p></p><h4>RoadTo21</h4><p></p><p></p><p>Java开发关系团队——<a href=\"https://www.linkedin.com/in/billy-korando-129b8197/\">Billy Korando</a>\"、<a href=\"https://www.linkedin.com/in/ana-maria-mihalceanu-1508/\">Ana-Maria Mihalceanu</a>\"、<a href=\"https://www.linkedin.com/in/jos%C3%A9-paumard-2458ba5/\">José Paumard</a>\"&nbsp;和<a href=\"https://nipafx.dev/nicolai-parlog/\">Nicolai Parlog</a>\"——提供了一系列时长约20分钟的视频教程，代号为#RoadTo21，其中介绍了更多关于JDK 21特性的细节：</p><p><a href=\"https://inside.java/2023/09/17/roadto21-pattern-matching/\">Java 21带来了完整的模式匹配</a>\"，由Parlog提供<a href=\"https://inside.java/2023/09/13/roadto21-security/\">Java 21安全性</a>\"，由Mihalceanu提供<a href=\"https://inside.java/2023/09/10/roadto21-api/\">Java 21 API变化</a>\"，由Paumard提供<a href=\"https://inside.java/2023/09/06/roadto21-performance/\">Java 21工具增强：全面改进</a>\"，由Mihalceanu提供<a href=\"https://inside.java/2023/09/03/roadto21-performance/\">Java 21 JVM和GC改进</a>\"，由Korando提供<a href=\"https://inside.java/2023/08/30/roadto21-virtualthreads/\">Java 21新特性：虚拟线程</a>\"，由Paumard提供<a href=\"https://inside.java/2023/08/27/roadto21-upgrade/\">从Java 17升级到Java 21</a>\"，由Parlog提供</p><p>&nbsp;</p><p></p><h4>JDK 21发布会</h4><p></p><p></p><p><a href=\"https://dev.java/community/java-21-launch/\">JDK 21发布会</a>\"于2023年9月19日UTC时间13:00-21:00进行了直播，由Parlog、Mihalceanu和Korando主持。这次活动邀请了众多嘉宾，并进行了Java First Java Always专题讨论，探讨JDK 21的特性。整个过程在拉斯维加斯的Oracle CloudWorld进行了实况直播。</p><p>&nbsp;</p><p>专题讨论小组的成员包括：Oracle开发关系高级总监<a href=\"https://www.linkedin.com/in/sharatchander/\">Sharat Chander</a>\"、Oracle Java平台组软件开发高级副总裁<a href=\"https://www.linkedin.com/in/georgessaab/\">Georges Saab</a>\"；Oracle开发关系副总裁<a href=\"https://www.linkedin.com/in/chadarimura/\">Chad Arimura</a>\"；Oracle编程语言设计师<a href=\"https://www.linkedin.com/in/dansmithjava/\">Daniel Smith</a>\"。</p><p>&nbsp;</p><p>该小组发布了四份公告：一个新的<a href=\"https://dev.java/playground/\">Java Playground</a>\"，基于JShell实用程序，可用于编写和执行Java代码；Java社区现在可以向<a href=\"https://dev.java/\">dev.java</a>\"网站<a href=\"https://dev.java/authors/\">提供内容</a>\"了；一个新的<a href=\"https://github.com/java\">Java Developer Relations</a>\" Github存储库；JDK 11将至少支持到2032年。</p><p>&nbsp;</p><p></p><h4>JDK 22</h4><p></p><p></p><p>目前，JDK 22中会包含哪些JEP尚不确定。但是，根据最近提交的JEP草案和建议最终某项特性的JEP候选，我们已经可以推测出哪些JEP有可能包含在JDK 22中。</p><p>&nbsp;</p><p>JEP 454（<a href=\"https://openjdk.org/jeps/454\">外部函数&amp;内存API</a>\"）建议在两轮孵化和三轮预览后最终确定该特性：JEP 412（<a href=\"https://openjdk.org/jeps/412\">外部函数&amp;内存API第一轮孵化</a>\"）在JDK 17中交付；JEP 419（<a href=\"https://openjdk.org/jeps/419\">外部函数&amp;内存API第二轮孵化</a>\"）在JDK 18中交付；JEP 424（<a href=\"https://openjdk.org/jeps/424\">外部函数&amp;内存API第一次预览</a>\"）在JDK 19中交付；JEP 434（<a href=\"https://openjdk.org/jeps/434\">外部函数&amp;内存API第二次预览</a>\"）在JDK 20中交付；JEP 442（<a href=\"https://openjdk.org/jeps/442\">外部函数&amp;内存API第三次预览</a>\"）将在即将发布的JDK 21 GA版本中交付。自上一个版本以来的改进包括：新增清单属性Enable-Native-Access，使可执行JAR文件中的代码可以调用受限方法，而无需使用--enable-native-access标识；允许客户端以编程方式构建C函数描述符，避免使用特定于平台的常量；改进对本地内存可变长数组的支持；在本地字符串中支持多字符集。</p><p>&nbsp;</p><p>在<a href=\"https://openjdk.org/projects/panama/\">Panama项目</a>\"的支持下，JEP草案8315945（<a href=\"https://openjdk.org/jeps/8315945\">向量API第七轮孵化</a>\"）包含了针对前六轮孵化反馈的增强：JEP 448（<a href=\"https://openjdk.org/jeps/448\">向量API第六轮孵化</a>\"）将在即将发布的JDK 21 GA版本中交付；JEP 438（<a href=\"https://openjdk.org/jeps/438\">向量API第五轮孵化</a>\"）在JDK 20中交付；JEP 426（<a href=\"https://openjdk.org/jeps/426\">向量API第四轮孵化</a>\"）在JDK 19中交付；JEP 417（<a href=\"https://openjdk.java.net/jeps/417\">向量API第三轮孵化</a>\"）在 JDK 18中交付；JEP 414（<a href=\"https://openjdk.java.net/jeps/414\">向量API第二轮孵化</a>\"）在JDK 17中交付；JEP 338（<a href=\"https://openjdk.java.net/jeps/338\">向量API第一轮孵化</a>\"）在JDK 16中作为<a href=\"https://openjdk.java.net/jeps/11\">孵化器模块</a>\"交付。JEP 448最重要的变化包括增强<a href=\"https://docs.oracle.com/en/graalvm/enterprise/20/docs/reference-manual/compiler/#graalvm-compiler\">JVM编译器接口</a>\"（JVMCI）以支持向量API值。</p><p>&nbsp;</p><p>JEP草案8277163（<a href=\"https://openjdk.java.net/jeps/8277163\">值对象预览</a>\"）建议创建值对象，它们是无标识值类，用于指定其实例的行为。该草案与JEP 401（<a href=\"https://openjdk.java.net/jeps/401\">空限制值对象存储预览</a>\"）相关，并将继续为实现<a href=\"https://openjdk.java.net/projects/valhalla/\">Valhalla项目</a>\"做出贡献。</p><p>&nbsp;</p><p><a href=\"https://www.linkedin.com/in/dansmithjava/\">Daniel Smith</a>\"是Oracle的编程语言设计师。他<a href=\"https://mail.openjdk.org/pipermail/valhalla-spec-observers/2023-August/002320.html\">更新</a>\"了JEP 401（<a href=\"https://openjdk.java.net/jeps/401\">空限制值对象存储预览</a>\"），以便与Oracle的最新设计思想“在语言和类文件中表达扁平化（flattenability）”保持一致。该提案最初名为Primitive Classes（预览版），支持值对象（见<a href=\"https://openjdk.org/jeps/8277163\">JEP Draft 8277163</a>\"）的空限制存储，即在字段和数组组件中将它们初始化为类的初始实例，并拒绝空值写入尝试。</p><p>&nbsp;</p><p>JEP草案8311828（<a href=\"https://openjdk.org/jeps/8311828\">未命名模式和变量</a>\"）建议在上一轮预览的基础上最终确定该特性：JEP 443（<a href=\"https://openjdk.org/jeps/443\">未命名模式和变量预览</a>\"）在JDK 21中交付。这个JEP将“使用未命名模式（可以匹配记录组件，而不需要说明组件的名称或类型）和未命名变量（可以初始化，但不能使用）来增强语言。”两者都用下划线字符表示，如r instanceof _(int x, int y)和r instanceof _。</p><p>&nbsp;</p><p>根据Oracle Java平台组首席架构师<a href=\"https://www.linkedin.com/in/markreinhold\">Mark Reinhold</a>\"的建议，<a href=\"https://jdk.java.net/22/\">JDK 22</a>\"的正式发布日期暂定为2024年3月19日。其特性预计将于2023年12月初冻结。要了解关于其他JEP草案和候选的更多细节，可以阅读<a href=\"https://www.infoq.com/news/2023/09/java-21-so-far/\">InfoQ的这篇详细报道</a>\"。</p><p>&nbsp;</p><p>JDK 21现在已经可以<a href=\"https://jdk.java.net/21/\">从Oracle官网上下载</a>\"，其他供应商的二进制文件预计也将很快提供。</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/09/java21-released/\">https://www.infoq.com/news/2023/09/java21-released/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/cR6cA98S1jv7e8KHGfpy\">Java 近期新闻：JCP 25 周年、外部函数 &amp; 内存 API、Eclipse Epicyro</a>\"</p><p><a href=\"https://www.infoq.cn/article/ThrjTB6kHMdXmjIPeaEv\">JVM 语言比较研究：Java、Kotlin 和 Scala 的利与弊</a>\"</p><p><a href=\"https://www.infoq.cn/article/QB87kOkWjf6jXxODkd9T\">Java 21：最新进展一览</a>\"</p>",
    "publish_time": "2023-10-12 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "如果连安全都保证不了，谈什么释放云上数据价值？",
    "url": "https://www.infoq.cn/article/Sjz8HyiGNv03Y73JSEuB",
    "summary": "<p>过去，发明往往是凭直觉或猜测推动的。比如在牛顿那个时代，苹果掉到头上触发了对万有引力的思考。但如今，大量的数据可以在很大程度上指导我们做决策，创造新产品和服务。比如在医疗领域，借助有价值的数据，医生可以为病人做定制化的医疗方案，以期达到最佳治疗效果；再比如电商或者旅游App首页为用户量身定做的首页商品推荐，这些背后都有数据的功劳。可以说，数据已经是现代发明和创新之源。​</p><p>&nbsp;</p><p>但随着云计算、大数据等新兴技术的风起云涌，数据的管理变得越来越复杂，稍有不慎，就会造成严重的数据泄漏事件，给企业业务带来影响。例如，2017年某打车软件发生数据泄露事件，导致5700万用户的数据被泄露，这次事件使其股票在第二天就下跌了约6%；2019年某酒店集团遭遇数据泄露，导致5亿用户信息被黑客获取。这次事件对其信誉和业务造成了严重的影响，公司股价也因此下跌。</p><p>&nbsp;</p><p>可见，一次安全事件可能会给企业带来巨大的经济损失、声誉损失，甚至可能影响到企业的生存。</p><p>&nbsp;</p><p>日前，亚马逊云科技召开“安全无忧 释放数据价值”大会，亚马逊云科技大中华区产品部总经理陈晓建在会上提出，在数字经济时代，如何在确保数据安全的前提下有效发挥数据资产的商业价值，成为企业数字化亟需解决的问题。</p><p>&nbsp;</p><p>陈晓建表示，亚马逊云科技认为企业要想安全释放数据价值需解决4大挑战，分别是业务数据的识别、数据可见、数据协作以及安全数据的可操作。</p><p></p><h2>释放数据价值面临哪些挑战？</h2><p></p><p>&nbsp;</p><p>一、识别敏感数据，应对合规方面的挑战</p><p>&nbsp;</p><p>当前，全球各地连续出台隐私保护法案，或者强化隐私保护的相关法案，比如欧盟的GDPR、美国的ADPPA、 中国的《个人信息保护法》、《数据出境安全评估办法》等，对个人数据、敏感数据的定义和使用提出了具体要求。</p><p>&nbsp;</p><p>亚马逊云科技为客户提供敏感数据保护解决方案（Sensitive Data Protection on Amazon Web Services，SDP），客户可以在自己账号内部署使用，利用机器学习、模式匹配等方式自动识别敏感数据，允许客户创建数据目录、使用内置或定制数据识别规则定义敏感数据类型。该解决方案还提供中心化的管理平台，客户可通过网页应用程序对敏感数据资产进行可视化管理。通过敏感数据保护解决方案，客户可以加速实现业务数据合规，为下一步释放数据价值铺平道路。特别适用于两种场景，一是存量数据多且分散，需要使用这个方案来发现四处分散的数据。二是对于数据类型不好判断的情况下，可以使用这个方案自动根据合规要求来识别，提高准确率。</p><p>&nbsp;</p><p>二、数据可见：让数据安全有效地发现、共享和协作</p><p>&nbsp;</p><p>陈晓建指出，数据可见是企业内不同角色高效挖掘数据价值的前提，数据可见是不同治理模式高效协同的基础。</p><p>&nbsp;</p><p>在数据团队和业务团队协作方式上，集中式和联邦式是比较常见的两种类型。集中式：负责治理运营的人主要集中在数据团队并负责所有治理工作，集中式方式能够实现快速的决策和高效的执行。这种结构较为简单，易于实施和控制。更适合刚开始数据分析之旅和小型组织的客户。</p><p>&nbsp;</p><p>联邦式：总的治理原则/政策有特定团队负责，但负责治理运营的人可以分散在各业务线，这样业务部门拥有自己的数据，并在组织的监督下做出决策，以满足其特定需求和目标。适合多BU的中大型企业或跨国企业。两种类型的协作方式都需要多个角色高效协同，特别是联邦式治理更是对“数据可见”需求迫切。亚马逊云科技在去年推出一项全新的数据管理服务Amazon DataZone，让每个人都能看见数据，解锁数据。它可以让客户更快、更轻松地对存储在亚马逊云科技、客户本地和第三方来源的数据进行编目、发现、共享和治理，同时确保数据访问发生在正确的权限和正确的情境之下，从而发现、使用数据，通过数据进行协作来获得洞察。</p><p>&nbsp;</p><p>三、多方协作，实现数据安全地共享和分析</p><p>&nbsp;</p><p>企业之间需要产业上下游数据协作来快速创新，同时需要在保障安全和创造价值之间寻求平衡，在实际的场景中，数据协作的所有参与者都需要面对数据保护与业务价值安全之间的权衡。现在有一些企业实现数据协作的方式是向合作伙伴提供数据副本，并依赖合同协议防止滥用。但是，显而易见，这样的方式仍然发生了数据移动，依然存在数据误用和泄漏的风险。为此，亚马逊云科技推出了Amazon Clean Rooms，实现了匹配、分析和协作彼此的数据，而不需要移动或者暴露原始数据，安全地实现数据分析协作。同时Amazon Data Exchange产品，可以使客户能够轻松在云上找到、订阅和使用第三方数据。Amazon Data Exchange已经可以提供超过3500种的第三方数据，数据来源包括金融，天气，地理空间，健康医疗等等非常多的行业和领域。</p><p>&nbsp;</p><p>四、安全日志统一管理及分析</p><p>&nbsp;</p><p>企业在短时间内做到整合安全厂商是有挑战和难度的，亚马逊云科技在安全数据的可操作性方面建立一个安全数据湖Amazon Security Lake，统一管理来自不同厂商的日志，并且让这些日志可被用来进行安全事件的分析。Amazon Security Lake可以自动将来自多云、本地和第三方的安全数据集中到一个专门构建的数据湖中。并且使用OCSF统一格式，将日志分层管理，并实现自动加密管理。</p><p>&nbsp;</p><p>陈晓建表示，数据分析与安全一直是亚马逊云科技投入的方向，致力于通过合适的工具产品与解决方案，与合作伙伴一起，为亚马逊云科技的用户提供价值。</p>",
    "publish_time": "2023-10-12 10:28:32",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Unity首席执行官离职，开发者：还是不够解气，也很难再建立起信任",
    "url": "https://www.infoq.cn/article/dmhHhqRbPy9Uaao9DW3E",
    "summary": "<p>Unity 首席执行官离职，但这对于对该公司感到沮丧的游戏开发者来说可能并不重要。</p><p>&nbsp;</p><p>上个月早些时候，Unity 宣布将改变其定价模式，一旦达到一定的收入和下载阈值，游戏开发商就需要按每次安装支付费用。定价政策一出，瞬间激起了开发者们的声讨。游戏开发者们和开发商们谴责这些变化，他们认为这些变化即使不会把开发商们搞破产了，也会给使用该引擎的独立开发者带来财务风险。</p><p>&nbsp;</p><p>在呼吁 Unity 扭转新定价政策的呼声中，一些开发者还希望解雇 Riccitiello，因为他作为公司的首席执行官，制定了极其不受欢迎的定价政策，必然会成为众矢之的。</p><p>&nbsp;</p><p>当地时间10月10日，John Riccitiello 宣布他将辞去Unity的首席执行官职务。Riccitiello 曾担任 Electronic Arts 的最高职位，值得注意的是，当时该公司就被评为来美国最差劲的公司，并且在游戏货币化方面提出了一些有争议的想法&nbsp;，他将立即从CEO的职位上下课，但将继续作为员工留在Unity直至 2024 年 4 月。</p><p>&nbsp;</p><p>在“犯了众怒”后，Unity改变了最新的定价条款，加之CEO的离职，算是暂时平息了开发商们的怒火。但人们对 Unity 的态度并没有显著地转变为积极，因为许多人仍然不信任该公司，并且仍在寻找可替代的游戏引擎。</p><p>&nbsp;</p><p>“Riccitiello 离开是件好事吗？是的，”Necrosoft Games 总监布兰登·谢菲尔德 (Brandon Sheffield) 说道，他撰写了第一批谴责 Unity 最初价格变化的文章之一。</p><p>&nbsp;</p><p>Unity 论坛对 Riccitiello 的离职反应不一。一些人称赞这一决定是恢复信任的良好第一步，而另一些人则认为此举是安抚股东而非 Unity 客户的一种方式。事实上，自定价变更公告以来，Unity 的股价已大幅下跌，而且根据公司文件，Unity 尚未实现盈利。</p><p>&nbsp;</p><p>“Riccitiello的离开并没有给我们带来太大的影响。他的离开并没有真正改变任何东西，”&nbsp;Garry's Mod和Rust的创建者 Garry Newman 说道。“我无法想象他们可以做什么才能让我再次信任他们作为合作伙伴。我现在的感觉仍然是，Unity 是一种我们需要努力摆脱的‘毒品’。”</p>",
    "publish_time": "2023-10-12 10:45:22",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "比5G提速10倍！华为发布全球首个全系列5.5G解决方案",
    "url": "https://www.infoq.cn/article/yoZlQYchUWXhaMN8U1iE",
    "summary": "<p>10月11日，在2023全球移动宽带论坛（Global MBB Forum 2023）期间，华为无线网络产品线总裁曹明发布了全球首个全系列5G-A（即5.5G）产品解决方案。该系列产品解决方案将通过宽带、多频、多天线、智能、绿色等方面的创新，提供十倍网络能力。</p><p></p><p>曹明表示：“5G-A正当其时，支撑新体验、新联接、新业务的发展。华为5G-A全系列产品解决方案使能网络能力十倍提升，整网谱效、能效和运维效率最优，助力运营商向5G-A高效平滑演进。”</p><p></p><p>5.5G是5G和6G之间的过渡阶段，是在5G业务规模不断增长，数字化、智能化不断提速的趋势下，面向2025年到2030年规划的通信技术，是对5G应用场景的增强和扩展。具体看，5.5G在下行和上行传输速率上对比5G有望提升10倍，网络接入速率达到10Gbps（10G比特每秒，换算成下载速率为每秒1.25G），同时保障毫秒级时延。</p><p></p><p>按照国际标准组织3GPP定义，5G到6G间共存在R15到R20 六个技术标准，其中R15到R17作为5G标准的第一阶段，R18到R20作为5G标准的第二阶段。2021年4月，5G国际标准制定组织3GPP已正式将R18协议版本定义为5.5G，标志着5G演进的需求已经成为业界共识。在国内，中国IMT—2020（5G）推进组和运营商积极投入5.5G的创新研究及测试验证，已经从关键技术创新逐步走向面向应用场景的跨产业合作创新阶段。</p><p></p><p>华为方面称，经过两年产业界的共同探索和努力，5.5G已经取得了三大关键进展：首先，5.5G标准化节奏已经明确，持续丰富5.5G的技术内涵；其次，5.5G已经取得了一系列关键技术突破，超大带宽和超大规模天线阵列已验证万兆能力；第三，物联技术全景清晰，5.5G所支持的NB-IoT、RedCap和Passive IoT三类物联技术跨步向前，已具备收编所有物联的能力。</p><p></p><p>5.5G已经进入新的阶段，产业界需要在标准、频谱、产业链、生态和应用五个方面共同做好准备：一、持续完备5.5G标准，推动关键技术研究；二、做好频谱准备，充分利用好Sub100GHz的频谱资源，为5.5G构筑超大带宽频谱；三、做好产品准备，共同催熟端管芯产业链，打造万兆能力网络和万兆体验终端；四、做好生态准备，通过产业协作做好面向场景的准备与规划，共同促进5.5G生态繁荣；五、做好应用准备，产业界上下游需共同探索，为百花齐放的应用发展提供肥沃的土壤。</p>",
    "publish_time": "2023-10-12 11:18:50",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]