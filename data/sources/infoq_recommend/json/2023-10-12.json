[
  {
    "title": "Java 21：下一个LTS版本，提供了虚拟线程、记录模式和模式匹配",
    "url": "https://www.infoq.cn/article/zIiqcmU8hiGhmuSAhzwb",
    "summary": "<p>Oracle<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2023-September/008267.html\">发布</a>\"Java编程语言和虚拟机的<a href=\"https://openjdk.org/projects/jdk/21/\">第21个版本</a>\"。这是自2021年<a href=\"https://openjdk.java.net/projects/jdk/17/\">JDK 17</a>\"发布以来的第一个长期支持（LTS）版本。最终的特性集包括以下15个JEP：</p><p>JEP 430：<a href=\"https://openjdk.org/jeps/430\">字符串模板（预览版）</a>\"JEP 431：<a href=\"https://openjdk.org/jeps/431\">有序集合</a>\"JEP 439：<a href=\"https://openjdk.org/jeps/439\">分代式ZGC</a>\"JEP 440：<a href=\"https://openjdk.org/jeps/440\">记录模式</a>\"JEP 441：<a href=\"https://openjdk.org/jeps/441\">switch模式匹配</a>\"JEP 442：<a href=\"https://openjdk.org/jeps/442\">外部函数&amp;内存API（第三个预览版）</a>\"JEP 443：<a href=\"https://openjdk.org/jeps/443\">未命名模式和变量（预览版）</a>\"JEP 444：<a href=\"https://openjdk.org/jeps/444\">虚拟线程</a>\"JEP 445：<a href=\"https://openjdk.org/jeps/445\">未命名类和实例的Main方法（预览版）</a>\"JEP 446：<a href=\"https://openjdk.org/jeps/446\">作用域值（预览版）</a>\"JEP 448：<a href=\"https://openjdk.org/jeps/448\">向量API（第六轮孵化）</a>\"JEP 449：<a href=\"https://openjdk.org/jeps/449\">弃用Windows 32-bit x86移植，为删除做准备</a>\"JEP 451：<a href=\"https://openjdk.org/jeps/451\">准备禁用代理的动态加载</a>\"JEP 452：<a href=\"https://openjdk.org/jeps/452\">密钥封装机制API</a>\"JEP 453：<a href=\"https://openjdk.org/jeps/453\">结构化并发（预览版）</a>\"</p><p>&nbsp;</p><p>其中有三个——虚拟线程、记录模式和switch模式匹配——已经完成了各自的预览，现已最终确定。</p><p>&nbsp;</p><p>如下图所示，<a href=\"https://blogs.oracle.com/java/post/the-arrival-of-java-21\">JDK 21的特性开发节奏</a>\"和前两个LTS版本（即JDK 17和JDK 11）以及以前其他的JDK版本类似。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5e/5e28b9cf23b68349be8968b4c84da2d1.png\" /></p><p></p><p>&nbsp;</p><p>Azul副首席执行官<a href=\"https://www.linkedin.com/in/siritter/\">Simon Ritter</a>\"告诉InfoQ：</p><p></p><p></p><blockquote>JDK 21将是OpenJDK发行版的下一个长期支持（LTS）版本。这一点很重要，因为许多企业用户在生产环境中都只使用这样的版本。长远来看，将会有大量的用户采用。然而，大部分用户在部署前会等待6到12个月，以便新特性可以经历更多真实世界的测试，发现的Bug得以修复。&nbsp;JDK 21包含了许多新特性，涵盖了平台的各个方面：语言、库、JVM和工具。&nbsp;JDK 21最突出的特性也许是虚拟线程，它从预览特性变成了完整特性。对于使用一请求一线程模型的应用程序来说，这是提高性能和可扩展性的理想选择，因为线程在等待IO上花费了大量的时间。作为Loom项目的一部分，开发人员对这个特性可谓期待已久。&nbsp;对于开发人员，该版本提供了各种与模式匹配有关的语言级特性。记录模式和switch模式匹配都成了完整特性。还有一个小而强大的特性是未命名模式和变量。向量API（用于数值密集型计算）和外部函数&amp;内存API（Panama项目的一部分）将继续以孵化器的形式开发。&nbsp;看下自JDK 17以来的新特性总表就会知道，这个新的Java LTS版本对开发人员和最终用户将会很有吸引力。</blockquote><p></p><p>&nbsp;</p><p>下面我们将进一步探讨下其中的一些JEP，提供一些JDK 21的资源，并预测下JDK 22中可能包含哪些特性。</p><p>&nbsp;</p><p></p><h4>虚拟线程</h4><p></p><p></p><p>JEP 444（<a href=\"https://openjdk.org/jeps/444\">虚拟线程</a>\"）根据前两轮预览的反馈最终确定了这个特性：JEP 436（<a href=\"https://openjdk.org/jeps/436\">虚拟线程第二次预览</a>\"）在JDK 20中交付；JEP 425（<a href=\"https://openjdk.org/jeps/425\">虚拟线程第一次预览</a>\"）在JDK 19中交付。该特性为Java平台提供了虚拟线程。这种轻量级的线程可以显著减少编写、维护和观测高吞吐量并发应用程序的工作量。JEP 436最重要的变化是，虚拟线程现在完全支持<a href=\"https://openjdk.org/jeps/8303683#Thread-local-variables\">线程本地变量</a>\"，取消了不使用这些变量的选项。要了解关于JEP 444的更多细节，可以阅读<a href=\"https://www.infoq.com/news/2023/04/virtual-threads-arrives-jdk21/\">InfoQ的这篇新闻报道</a>\"以及&nbsp;<a href=\"https://www.linkedin.com/in/jos%C3%A9-paumard-2458ba5/\">José Paumard</a>\"（Oracle Java平台组Java开发大使）提供的JEP Café<a href=\"https://inside.java/2022/06/08/jepcafe11/\">截屏视频</a>\"。</p><p>&nbsp;</p><p></p><h4>记录模式</h4><p></p><p></p><p>在Amber项目的支持下，JEP 440（<a href=\"https://openjdk.org/jeps/440\">记录模式</a>\"）最终确定了这一特性，并根据前两轮<a href=\"https://openjdk.java.net/jeps/12\">预览</a>\"的反馈进行了增强：JEP 432（<a href=\"https://openjdk.org/jeps/432\">记录模式第二次预览</a>\"）在JDK 20中交付；JEP 405（<a href=\"https://openjdk.org/jeps/405\">记录模式第一次预览</a>\"）在JDK 19中交付。该特性通过记录模式增强了语言解构记录值的能力。记录模式可以与类型模式结合使用，以“实现强大的声明式可组合数据导航和处理形式”。最近，类型模式通过JEP 420（<a href=\"https://openjdk.java.net/jeps/420\">switch模式匹配第二次预览</a>\"，在JDK 18中交付）和JEP 406（<a href=\"https://openjdk.java.net/jeps/406\">switch模式匹配第一次预览</a>\"，在JDK 17中交付）进行了扩展，已可用于switchcase标签。JEP 432最重要的变化是删除了在增强型for语句头中使用记录模式的支持。要了解关于JEP 440的更多细节，可以阅读<a href=\"https://www.infoq.com/news/2023/05/java-gets-boost-with-record/\">InfoQ的这篇新闻报道</a>\"。</p><p>&nbsp;</p><p></p><h4>Switch模式匹配</h4><p></p><p></p><p>也是在Amber项目的支持下，JEP 441（<a href=\"https://openjdk.org/jeps/441\">switch模式匹配</a>\"）最终确定了这个特性，并根据前四轮预览的反馈进行了增强：JEP 433（<a href=\"https://openjdk.org/jeps/433\">switch模式匹配第四次预览</a>\"）在JDK 20中交付；JEP 427（<a href=\"https://openjdk.org/jeps/427\">switch模式匹配第三次预览</a>\"）在JDK 19中交付；JEP 420（<a href=\"https://openjdk.java.net/jeps/420\">switch模式匹配第二次预览</a>\"）在JDK 18中交付；JEP 406（<a href=\"https://openjdk.java.net/jeps/406\">switch模式匹配第一次预览</a>\"）在JDK 17中交付。该特性通过在switch表达式和语句中使用模式匹配增强了该语言。要了解关于JEP 441的更多细节，可以阅读<a href=\"https://www.infoq.com/news/2023/07/tranforming-java-pattern/\">InfoQ的这篇新闻报道</a>\"。</p><p>&nbsp;</p><p></p><h4>未命名类和实例的Main方法（预览）</h4><p></p><p></p><p>JEP 445（<a href=\"https://openjdk.org/jeps/445\">未命名类和实例的Main方法预览</a>\"）之前称为灵活的Main方法和匿名Main类（预览）和隐式类与增强Main方法（预览）。它提出“改进Java语言，使学生可以编写他们的第一个程序，而不需要了解为大型程序设计的语言特性。”该JEP延续了Oracle Java语言架构师<a href=\"https://www.linkedin.com/in/briangoetz/\">Brian Goetz</a>\"在2022年9月发表的博文<a href=\"https://openjdk.org/projects/amber/design-notes/on-ramp\">Paving the on-ramp</a>\"。Oracle技术顾问<a href=\"https://www.linkedin.com/in/gavin-bierman-a0173075/\">Gavin Bierman</a>\"已经发布了<a href=\"https://cr.openjdk.org/~gbierman/jep445/jep445-20230502/specs/unnamed-classes-instance-main-methods-jls.html\">规范文档</a>\"的初稿供Java社区审查。要了解关于JEP 445的更多细节，可以阅读<a href=\"https://www.infoq.com/news/2023/05/beginner-friendly-java/\">InfoQ的这篇新闻报道</a>\"。</p><p>&nbsp;</p><p></p><h4>RoadTo21</h4><p></p><p></p><p>Java开发关系团队——<a href=\"https://www.linkedin.com/in/billy-korando-129b8197/\">Billy Korando</a>\"、<a href=\"https://www.linkedin.com/in/ana-maria-mihalceanu-1508/\">Ana-Maria Mihalceanu</a>\"、<a href=\"https://www.linkedin.com/in/jos%C3%A9-paumard-2458ba5/\">José Paumard</a>\"&nbsp;和<a href=\"https://nipafx.dev/nicolai-parlog/\">Nicolai Parlog</a>\"——提供了一系列时长约20分钟的视频教程，代号为#RoadTo21，其中介绍了更多关于JDK 21特性的细节：</p><p><a href=\"https://inside.java/2023/09/17/roadto21-pattern-matching/\">Java 21带来了完整的模式匹配</a>\"，由Parlog提供<a href=\"https://inside.java/2023/09/13/roadto21-security/\">Java 21安全性</a>\"，由Mihalceanu提供<a href=\"https://inside.java/2023/09/10/roadto21-api/\">Java 21 API变化</a>\"，由Paumard提供<a href=\"https://inside.java/2023/09/06/roadto21-performance/\">Java 21工具增强：全面改进</a>\"，由Mihalceanu提供<a href=\"https://inside.java/2023/09/03/roadto21-performance/\">Java 21 JVM和GC改进</a>\"，由Korando提供<a href=\"https://inside.java/2023/08/30/roadto21-virtualthreads/\">Java 21新特性：虚拟线程</a>\"，由Paumard提供<a href=\"https://inside.java/2023/08/27/roadto21-upgrade/\">从Java 17升级到Java 21</a>\"，由Parlog提供</p><p>&nbsp;</p><p></p><h4>JDK 21发布会</h4><p></p><p></p><p><a href=\"https://dev.java/community/java-21-launch/\">JDK 21发布会</a>\"于2023年9月19日UTC时间13:00-21:00进行了直播，由Parlog、Mihalceanu和Korando主持。这次活动邀请了众多嘉宾，并进行了Java First Java Always专题讨论，探讨JDK 21的特性。整个过程在拉斯维加斯的Oracle CloudWorld进行了实况直播。</p><p>&nbsp;</p><p>专题讨论小组的成员包括：Oracle开发关系高级总监<a href=\"https://www.linkedin.com/in/sharatchander/\">Sharat Chander</a>\"、Oracle Java平台组软件开发高级副总裁<a href=\"https://www.linkedin.com/in/georgessaab/\">Georges Saab</a>\"；Oracle开发关系副总裁<a href=\"https://www.linkedin.com/in/chadarimura/\">Chad Arimura</a>\"；Oracle编程语言设计师<a href=\"https://www.linkedin.com/in/dansmithjava/\">Daniel Smith</a>\"。</p><p>&nbsp;</p><p>该小组发布了四份公告：一个新的<a href=\"https://dev.java/playground/\">Java Playground</a>\"，基于JShell实用程序，可用于编写和执行Java代码；Java社区现在可以向<a href=\"https://dev.java/\">dev.java</a>\"网站<a href=\"https://dev.java/authors/\">提供内容</a>\"了；一个新的<a href=\"https://github.com/java\">Java Developer Relations</a>\" Github存储库；JDK 11将至少支持到2032年。</p><p>&nbsp;</p><p></p><h4>JDK 22</h4><p></p><p></p><p>目前，JDK 22中会包含哪些JEP尚不确定。但是，根据最近提交的JEP草案和建议最终某项特性的JEP候选，我们已经可以推测出哪些JEP有可能包含在JDK 22中。</p><p>&nbsp;</p><p>JEP 454（<a href=\"https://openjdk.org/jeps/454\">外部函数&amp;内存API</a>\"）建议在两轮孵化和三轮预览后最终确定该特性：JEP 412（<a href=\"https://openjdk.org/jeps/412\">外部函数&amp;内存API第一轮孵化</a>\"）在JDK 17中交付；JEP 419（<a href=\"https://openjdk.org/jeps/419\">外部函数&amp;内存API第二轮孵化</a>\"）在JDK 18中交付；JEP 424（<a href=\"https://openjdk.org/jeps/424\">外部函数&amp;内存API第一次预览</a>\"）在JDK 19中交付；JEP 434（<a href=\"https://openjdk.org/jeps/434\">外部函数&amp;内存API第二次预览</a>\"）在JDK 20中交付；JEP 442（<a href=\"https://openjdk.org/jeps/442\">外部函数&amp;内存API第三次预览</a>\"）将在即将发布的JDK 21 GA版本中交付。自上一个版本以来的改进包括：新增清单属性Enable-Native-Access，使可执行JAR文件中的代码可以调用受限方法，而无需使用--enable-native-access标识；允许客户端以编程方式构建C函数描述符，避免使用特定于平台的常量；改进对本地内存可变长数组的支持；在本地字符串中支持多字符集。</p><p>&nbsp;</p><p>在<a href=\"https://openjdk.org/projects/panama/\">Panama项目</a>\"的支持下，JEP草案8315945（<a href=\"https://openjdk.org/jeps/8315945\">向量API第七轮孵化</a>\"）包含了针对前六轮孵化反馈的增强：JEP 448（<a href=\"https://openjdk.org/jeps/448\">向量API第六轮孵化</a>\"）将在即将发布的JDK 21 GA版本中交付；JEP 438（<a href=\"https://openjdk.org/jeps/438\">向量API第五轮孵化</a>\"）在JDK 20中交付；JEP 426（<a href=\"https://openjdk.org/jeps/426\">向量API第四轮孵化</a>\"）在JDK 19中交付；JEP 417（<a href=\"https://openjdk.java.net/jeps/417\">向量API第三轮孵化</a>\"）在 JDK 18中交付；JEP 414（<a href=\"https://openjdk.java.net/jeps/414\">向量API第二轮孵化</a>\"）在JDK 17中交付；JEP 338（<a href=\"https://openjdk.java.net/jeps/338\">向量API第一轮孵化</a>\"）在JDK 16中作为<a href=\"https://openjdk.java.net/jeps/11\">孵化器模块</a>\"交付。JEP 448最重要的变化包括增强<a href=\"https://docs.oracle.com/en/graalvm/enterprise/20/docs/reference-manual/compiler/#graalvm-compiler\">JVM编译器接口</a>\"（JVMCI）以支持向量API值。</p><p>&nbsp;</p><p>JEP草案8277163（<a href=\"https://openjdk.java.net/jeps/8277163\">值对象预览</a>\"）建议创建值对象，它们是无标识值类，用于指定其实例的行为。该草案与JEP 401（<a href=\"https://openjdk.java.net/jeps/401\">空限制值对象存储预览</a>\"）相关，并将继续为实现<a href=\"https://openjdk.java.net/projects/valhalla/\">Valhalla项目</a>\"做出贡献。</p><p>&nbsp;</p><p><a href=\"https://www.linkedin.com/in/dansmithjava/\">Daniel Smith</a>\"是Oracle的编程语言设计师。他<a href=\"https://mail.openjdk.org/pipermail/valhalla-spec-observers/2023-August/002320.html\">更新</a>\"了JEP 401（<a href=\"https://openjdk.java.net/jeps/401\">空限制值对象存储预览</a>\"），以便与Oracle的最新设计思想“在语言和类文件中表达扁平化（flattenability）”保持一致。该提案最初名为Primitive Classes（预览版），支持值对象（见<a href=\"https://openjdk.org/jeps/8277163\">JEP Draft 8277163</a>\"）的空限制存储，即在字段和数组组件中将它们初始化为类的初始实例，并拒绝空值写入尝试。</p><p>&nbsp;</p><p>JEP草案8311828（<a href=\"https://openjdk.org/jeps/8311828\">未命名模式和变量</a>\"）建议在上一轮预览的基础上最终确定该特性：JEP 443（<a href=\"https://openjdk.org/jeps/443\">未命名模式和变量预览</a>\"）在JDK 21中交付。这个JEP将“使用未命名模式（可以匹配记录组件，而不需要说明组件的名称或类型）和未命名变量（可以初始化，但不能使用）来增强语言。”两者都用下划线字符表示，如r instanceof _(int x, int y)和r instanceof _。</p><p>&nbsp;</p><p>根据Oracle Java平台组首席架构师<a href=\"https://www.linkedin.com/in/markreinhold\">Mark Reinhold</a>\"的建议，<a href=\"https://jdk.java.net/22/\">JDK 22</a>\"的正式发布日期暂定为2024年3月19日。其特性预计将于2023年12月初冻结。要了解关于其他JEP草案和候选的更多细节，可以阅读<a href=\"https://www.infoq.com/news/2023/09/java-21-so-far/\">InfoQ的这篇详细报道</a>\"。</p><p>&nbsp;</p><p>JDK 21现在已经可以<a href=\"https://jdk.java.net/21/\">从Oracle官网上下载</a>\"，其他供应商的二进制文件预计也将很快提供。</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/09/java21-released/\">https://www.infoq.com/news/2023/09/java21-released/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/cR6cA98S1jv7e8KHGfpy\">Java 近期新闻：JCP 25 周年、外部函数 &amp; 内存 API、Eclipse Epicyro</a>\"</p><p><a href=\"https://www.infoq.cn/article/ThrjTB6kHMdXmjIPeaEv\">JVM 语言比较研究：Java、Kotlin 和 Scala 的利与弊</a>\"</p><p><a href=\"https://www.infoq.cn/article/QB87kOkWjf6jXxODkd9T\">Java 21：最新进展一览</a>\"</p>",
    "publish_time": "2023-10-12 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "如果连安全都保证不了，谈什么释放云上数据价值？",
    "url": "https://www.infoq.cn/article/Sjz8HyiGNv03Y73JSEuB",
    "summary": "<p>过去，发明往往是凭直觉或猜测推动的。比如在牛顿那个时代，苹果掉到头上触发了对万有引力的思考。但如今，大量的数据可以在很大程度上指导我们做决策，创造新产品和服务。比如在医疗领域，借助有价值的数据，医生可以为病人做定制化的医疗方案，以期达到最佳治疗效果；再比如电商或者旅游App首页为用户量身定做的首页商品推荐，这些背后都有数据的功劳。可以说，数据已经是现代发明和创新之源。​</p><p>&nbsp;</p><p>但随着云计算、大数据等新兴技术的风起云涌，数据的管理变得越来越复杂，稍有不慎，就会造成严重的数据泄漏事件，给企业业务带来影响。例如，2017年某打车软件发生数据泄露事件，导致5700万用户的数据被泄露，这次事件使其股票在第二天就下跌了约6%；2019年某酒店集团遭遇数据泄露，导致5亿用户信息被黑客获取。这次事件对其信誉和业务造成了严重的影响，公司股价也因此下跌。</p><p>&nbsp;</p><p>可见，一次安全事件可能会给企业带来巨大的经济损失、声誉损失，甚至可能影响到企业的生存。</p><p>&nbsp;</p><p>日前，亚马逊云科技召开“安全无忧 释放数据价值”大会，亚马逊云科技大中华区产品部总经理陈晓建在会上提出，在数字经济时代，如何在确保数据安全的前提下有效发挥数据资产的商业价值，成为企业数字化亟需解决的问题。</p><p>&nbsp;</p><p>陈晓建表示，亚马逊云科技认为企业要想安全释放数据价值需解决4大挑战，分别是业务数据的识别、数据可见、数据协作以及安全数据的可操作。</p><p></p><h2>释放数据价值面临哪些挑战？</h2><p></p><p>&nbsp;</p><p>一、识别敏感数据，应对合规方面的挑战</p><p>&nbsp;</p><p>当前，全球各地连续出台隐私保护法案，或者强化隐私保护的相关法案，比如欧盟的GDPR、美国的ADPPA、 中国的《个人信息保护法》、《数据出境安全评估办法》等，对个人数据、敏感数据的定义和使用提出了具体要求。</p><p>&nbsp;</p><p>亚马逊云科技为客户提供敏感数据保护解决方案（Sensitive Data Protection on Amazon Web Services，SDP），客户可以在自己账号内部署使用，利用机器学习、模式匹配等方式自动识别敏感数据，允许客户创建数据目录、使用内置或定制数据识别规则定义敏感数据类型。该解决方案还提供中心化的管理平台，客户可通过网页应用程序对敏感数据资产进行可视化管理。通过敏感数据保护解决方案，客户可以加速实现业务数据合规，为下一步释放数据价值铺平道路。特别适用于两种场景，一是存量数据多且分散，需要使用这个方案来发现四处分散的数据。二是对于数据类型不好判断的情况下，可以使用这个方案自动根据合规要求来识别，提高准确率。</p><p>&nbsp;</p><p>二、数据可见：让数据安全有效地发现、共享和协作</p><p>&nbsp;</p><p>陈晓建指出，数据可见是企业内不同角色高效挖掘数据价值的前提，数据可见是不同治理模式高效协同的基础。</p><p>&nbsp;</p><p>在数据团队和业务团队协作方式上，集中式和联邦式是比较常见的两种类型。集中式：负责治理运营的人主要集中在数据团队并负责所有治理工作，集中式方式能够实现快速的决策和高效的执行。这种结构较为简单，易于实施和控制。更适合刚开始数据分析之旅和小型组织的客户。</p><p>&nbsp;</p><p>联邦式：总的治理原则/政策有特定团队负责，但负责治理运营的人可以分散在各业务线，这样业务部门拥有自己的数据，并在组织的监督下做出决策，以满足其特定需求和目标。适合多BU的中大型企业或跨国企业。两种类型的协作方式都需要多个角色高效协同，特别是联邦式治理更是对“数据可见”需求迫切。亚马逊云科技在去年推出一项全新的数据管理服务Amazon DataZone，让每个人都能看见数据，解锁数据。它可以让客户更快、更轻松地对存储在亚马逊云科技、客户本地和第三方来源的数据进行编目、发现、共享和治理，同时确保数据访问发生在正确的权限和正确的情境之下，从而发现、使用数据，通过数据进行协作来获得洞察。</p><p>&nbsp;</p><p>三、多方协作，实现数据安全地共享和分析</p><p>&nbsp;</p><p>企业之间需要产业上下游数据协作来快速创新，同时需要在保障安全和创造价值之间寻求平衡，在实际的场景中，数据协作的所有参与者都需要面对数据保护与业务价值安全之间的权衡。现在有一些企业实现数据协作的方式是向合作伙伴提供数据副本，并依赖合同协议防止滥用。但是，显而易见，这样的方式仍然发生了数据移动，依然存在数据误用和泄漏的风险。为此，亚马逊云科技推出了Amazon Clean Rooms，实现了匹配、分析和协作彼此的数据，而不需要移动或者暴露原始数据，安全地实现数据分析协作。同时Amazon Data Exchange产品，可以使客户能够轻松在云上找到、订阅和使用第三方数据。Amazon Data Exchange已经可以提供超过3500种的第三方数据，数据来源包括金融，天气，地理空间，健康医疗等等非常多的行业和领域。</p><p>&nbsp;</p><p>四、安全日志统一管理及分析</p><p>&nbsp;</p><p>企业在短时间内做到整合安全厂商是有挑战和难度的，亚马逊云科技在安全数据的可操作性方面建立一个安全数据湖Amazon Security Lake，统一管理来自不同厂商的日志，并且让这些日志可被用来进行安全事件的分析。Amazon Security Lake可以自动将来自多云、本地和第三方的安全数据集中到一个专门构建的数据湖中。并且使用OCSF统一格式，将日志分层管理，并实现自动加密管理。</p><p>&nbsp;</p><p>陈晓建表示，数据分析与安全一直是亚马逊云科技投入的方向，致力于通过合适的工具产品与解决方案，与合作伙伴一起，为亚马逊云科技的用户提供价值。</p>",
    "publish_time": "2023-10-12 10:28:32",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Unity首席执行官离职，开发者：还是不够解气，也很难再建立起信任",
    "url": "https://www.infoq.cn/article/dmhHhqRbPy9Uaao9DW3E",
    "summary": "<p>Unity 首席执行官离职，但这对于对该公司感到沮丧的游戏开发者来说可能并不重要。</p><p>&nbsp;</p><p>上个月早些时候，Unity 宣布将改变其定价模式，一旦达到一定的收入和下载阈值，游戏开发商就需要按每次安装支付费用。定价政策一出，瞬间激起了开发者们的声讨。游戏开发者们和开发商们谴责这些变化，他们认为这些变化即使不会把开发商们搞破产了，也会给使用该引擎的独立开发者带来财务风险。</p><p>&nbsp;</p><p>在呼吁 Unity 扭转新定价政策的呼声中，一些开发者还希望解雇 Riccitiello，因为他作为公司的首席执行官，制定了极其不受欢迎的定价政策，必然会成为众矢之的。</p><p>&nbsp;</p><p>当地时间10月10日，John Riccitiello 宣布他将辞去Unity的首席执行官职务。Riccitiello 曾担任 Electronic Arts 的最高职位，值得注意的是，当时该公司就被评为来美国最差劲的公司，并且在游戏货币化方面提出了一些有争议的想法&nbsp;，他将立即从CEO的职位上下课，但将继续作为员工留在Unity直至 2024 年 4 月。</p><p>&nbsp;</p><p>在“犯了众怒”后，Unity改变了最新的定价条款，加之CEO的离职，算是暂时平息了开发商们的怒火。但人们对 Unity 的态度并没有显著地转变为积极，因为许多人仍然不信任该公司，并且仍在寻找可替代的游戏引擎。</p><p>&nbsp;</p><p>“Riccitiello 离开是件好事吗？是的，”Necrosoft Games 总监布兰登·谢菲尔德 (Brandon Sheffield) 说道，他撰写了第一批谴责 Unity 最初价格变化的文章之一。</p><p>&nbsp;</p><p>Unity 论坛对 Riccitiello 的离职反应不一。一些人称赞这一决定是恢复信任的良好第一步，而另一些人则认为此举是安抚股东而非 Unity 客户的一种方式。事实上，自定价变更公告以来，Unity 的股价已大幅下跌，而且根据公司文件，Unity 尚未实现盈利。</p><p>&nbsp;</p><p>“Riccitiello的离开并没有给我们带来太大的影响。他的离开并没有真正改变任何东西，”&nbsp;Garry's Mod和Rust的创建者 Garry Newman 说道。“我无法想象他们可以做什么才能让我再次信任他们作为合作伙伴。我现在的感觉仍然是，Unity 是一种我们需要努力摆脱的‘毒品’。”</p>",
    "publish_time": "2023-10-12 10:45:22",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "比5G提速10倍！华为发布全球首个全系列5.5G解决方案",
    "url": "https://www.infoq.cn/article/yoZlQYchUWXhaMN8U1iE",
    "summary": "<p>10月11日，在2023全球移动宽带论坛（Global MBB Forum 2023）期间，华为无线网络产品线总裁曹明发布了全球首个全系列5G-A（即5.5G）产品解决方案。该系列产品解决方案将通过宽带、多频、多天线、智能、绿色等方面的创新，提供十倍网络能力。</p><p></p><p>曹明表示：“5G-A正当其时，支撑新体验、新联接、新业务的发展。华为5G-A全系列产品解决方案使能网络能力十倍提升，整网谱效、能效和运维效率最优，助力运营商向5G-A高效平滑演进。”</p><p></p><p>5.5G是5G和6G之间的过渡阶段，是在5G业务规模不断增长，数字化、智能化不断提速的趋势下，面向2025年到2030年规划的通信技术，是对5G应用场景的增强和扩展。具体看，5.5G在下行和上行传输速率上对比5G有望提升10倍，网络接入速率达到10Gbps（10G比特每秒，换算成下载速率为每秒1.25G），同时保障毫秒级时延。</p><p></p><p>按照国际标准组织3GPP定义，5G到6G间共存在R15到R20 六个技术标准，其中R15到R17作为5G标准的第一阶段，R18到R20作为5G标准的第二阶段。2021年4月，5G国际标准制定组织3GPP已正式将R18协议版本定义为5.5G，标志着5G演进的需求已经成为业界共识。在国内，中国IMT—2020（5G）推进组和运营商积极投入5.5G的创新研究及测试验证，已经从关键技术创新逐步走向面向应用场景的跨产业合作创新阶段。</p><p></p><p>华为方面称，经过两年产业界的共同探索和努力，5.5G已经取得了三大关键进展：首先，5.5G标准化节奏已经明确，持续丰富5.5G的技术内涵；其次，5.5G已经取得了一系列关键技术突破，超大带宽和超大规模天线阵列已验证万兆能力；第三，物联技术全景清晰，5.5G所支持的NB-IoT、RedCap和Passive IoT三类物联技术跨步向前，已具备收编所有物联的能力。</p><p></p><p>5.5G已经进入新的阶段，产业界需要在标准、频谱、产业链、生态和应用五个方面共同做好准备：一、持续完备5.5G标准，推动关键技术研究；二、做好频谱准备，充分利用好Sub100GHz的频谱资源，为5.5G构筑超大带宽频谱；三、做好产品准备，共同催熟端管芯产业链，打造万兆能力网络和万兆体验终端；四、做好生态准备，通过产业协作做好面向场景的准备与规划，共同促进5.5G生态繁荣；五、做好应用准备，产业界上下游需共同探索，为百花齐放的应用发展提供肥沃的土壤。</p>",
    "publish_time": "2023-10-12 11:18:50",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "论Oracle兼容性，我们需要做什么",
    "url": "https://www.infoq.cn/article/a3f02b90f06bea7186c38fe17",
    "summary": "<p>作者介绍：王海峰，数据库系统架构师，YashanDB SQL开发负责人，10年以上数据库内核技术开发经验。</p><p></p><p>Oracle兼容性是目前国产数据库的关键任务之一，其直接影响到商业迁移的成本和竞争力。</p><p></p><p>我们经常发现，部分国产数据库声称与 Oracle兼容性高达90%，但在实际迁移过程中，仍需要频繁地修改业务应用的代码。为何实现与Oracle高兼容度的数据库产品如此困难？其中一个重要原因是Oracle兼容性不仅是模仿，而是一个非常复杂和工程量庞大的逆向工程。其技术实现的复杂性以及多如牛毛的细节，足以让多数“年轻”的数据库团队望洋兴叹。</p><p></p><p>YashanDB作为一款从核心理论到关键系统均为原创的数据库产品，从构建初期就具备了技术优势，在Oracle兼容性实现上，敢于亮剑并充分发挥工匠精神，不断打磨，努力构筑一个真正形神兼备的数据库产品。以下将从YashanDB SQL引擎技术、Oracle兼容性的开发原则等方面，阐述YashanDB如何解决Oracle兼容性的开发难题以及如何实现与Oracle的原生兼容。</p><p></p><p></p><h2>强可扩展性的自主SQL引擎</h2><p></p><p>SQL的本质在于理解用户编写SQL语句的意图，将其转成高效执行计划，然后操作和管理数据库执行要求的算子，返回对应结果集。其过程需要实现编译、优化、执行3步曲。</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/11/119fa1217d92beef4a3f350173f2e65c.png\" /></p><p>图 1 SQL 3步曲</p><p></p><p>对于YashanDB的SQL引擎来说，为了快速实现Oracle兼容性，从架构实现上采取了有效的方法：通过对SQL语法、函数、数据类型、存储过程语法、高级包、优化规则、执行算子等各个维度进行抽象和归纳，在SQL引擎的各个功能阶段提供功能注册点。由于全链路的代码都是自主研发，我们可以在框架内通过扩展功能注册点来快速添加各种兼容性功能，对于部分涉及调整框架的需求，也能够确保整个架构的稳定性。</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1d/1d9a74e5ebba2b1d643130416072ec88.png\" /></p><p>图2 YashanDB SQL引擎关键技术</p><p></p><p>解析器（LAXER/PARSER）：YashanDB全新实现了词法解析器和语法解释器，通过对注册关键字的定界，精准地生成符合查询语义的抽象语法树。语法树以高效的表达式符号作为基本组成单元，为后续环节提供输入。不同于其他数据库，YashanDB没有采用开源组件进行抽象语法树的编译，主要从语法支持的灵活度、语法编译生成语法树的高效性以及开发者开发和调试的易用性等角度考虑。</p><p></p><p>优化器（OPTIMIZER）：YashanDB的SQL引擎为了达到极致性能，同时支持了行列两类算子分别满足低时延短事务和大数据查询场景的差异化需求。在优化器方面，我们面临着一个更具挑战性的任务：需要实现面向差异化代价模型的行列混合评估、行列统一的并行优化框架以及面向特定模型的动态优化规则。由于没有现成的道路可走，我们选择自主研发，为YashanDB打造一款适合高速查询优化的优化器。</p><p></p><p>高效的执行引擎（EXECUTOR）：YashanDB同时涵盖了低时延段事务的TP场景和海量数据查询的AP场景，所以火山、向量化、并行化的执行引擎技术应运而生。</p><p></p><p>Oracle已经建立了一套成熟且卓越的技术体系，要想做到完全兼容，不仅需要投入大量的人力、物力和时间，还需要深入理解其内部运作原理和实现细节。以Oracle 19c为例，在SQL层主要功能罗列如下：</p><p>语法和常见功能函数；结构化数据类型；JSON、XML等半结构化数据及功能；查询加速提升，如OLAP、并行处理、结果集缓存等；如UDT、高级包、存储过程、触发器等各种高级特性；安全、加密和审计；工具生态上大量的衍生工具和中间件等。</p><p>数据库是一个极其复杂的软件工程产品，不能简单地视为一个无需调整即可直接复用的通用组件。时至今日，SQL标准仍在不断发展，ISO/IEC 9075:2023等新标准不断涌现。对于国产数据库厂商而言，在Oracle兼容方面需保持务实的态度，将重点放在核心功能的实现上，对其保持高度的兼容性与稳定性。正是因为自主研发打造的SQL引擎，我们不仅能够在Oracle兼容性方面持续追求全面兼容的目标，更重要的是可以将我们的创新理论更好地融入到SQL架构中，将有界计算、向量化、多模等技术天然融合、持续演进。</p><p></p><p>YashanDB从设计之初，就定下Oracle全面兼容的目标。目前已从四个层面实现了高度的Oracle兼容性：</p><p>语法兼容层面：目前主流的DQL、DML、HINT语法、PL/SQL语法已全面兼容；语义兼容层面：SQL语义保持一致，包含语法对应的语义实现、对象管理和事务处理等；高级特性兼容层面：1）PL/SQL对象如存储过程、UDF、UDP、触发器、JOB等全面兼容；2）JSON、GIS等新型数据类型功能兼容，提供等价替换方案；3）安全、加密和审计全面兼容；4）查询加速提升能力同步构建；生态兼容层面：提供AWR/RMAN/开发者工具等能力。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/60/6084b2a9e11abc725424af7bd023ec67.png\" /></p><p>图3 Oracle四层生态兼容</p><p></p><p></p><h2>Oracle兼容性的开发原则</h2><p></p><p>下面将以语法兼容层面的数据类型、SQL语法功能、部分高级特性角度，详细阐述YashanDB在Oracle兼容性上面临的挑战和应对的开发原则。</p><p></p><h3>数据类型</h3><p></p><p>数据类型兼容方面，YashanDB与Oracle高度兼容，其功能表现差异很小，主要包含数值类型组、字符串类型组、时间类型组和其他类型：</p><p></p><p>数值类型组：Oracle几乎所有数值类型均使用NUMBER来实现，为了应对这一挑战，YashanDB实现了一个极其高效的NUMBER类型，用户在Oracle数据库上定义的数值类型可以无缝迁移到YashanDB。此外，为了进一步提高存取和计算效率，YashanDB增加了各种C语言原生类型，如TINYINT、BIGINT、FLOAT、DOUBLE等，在表字段设计上可以提供更多灵活的选择，如果原生类型可以满足用户的表字段设计，那么建议调整为原生类型；</p><p></p><p>字符串类型组：精心打造CHAR、VARCHAR、NCHAR、NVARCHAR等各类字符串类型，追求细节层面的功能表现。在字符串类型规格、运算能力、隐式转换能力、空串表达以及字符集支持等各方面均做到易用、易理解、易维护的较高水准。YashanDB始终坚持既定的功能设计原则，以易于接受和理解的方式设计产品的功能表现。</p><p>实例1：Oracle的VARCHAR类型必须通过配置字符串的EXTEND模式才可以将VARCHAR扩展到32K，否则规格只有4K；YashanDB的VARCHAR类型直接支持提供最大规格；实例2：空串和NULL的等价处理上，Oracle的主体规则是空串视为NULL，但在少量表达式处理上，存在一些细节上的差异，这个差异有可能是历史兼容或者BUG导致的；YashanDB目前坚持空串按NULL处理；实例3：关注字符串类型转换时由于字符集不同带来的技术挑战。</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/59/59a011c033d066a43d25bba4083fd87a.png\" /></p><p>图 4 不同字符集的技术挑战</p><p></p><p>时间类型组：当前YashanDB提供了DATE、TIMESTAMP、YM-INTERVAL、DS-INTERVAL等类型用于满足迁移和设计要求。在该特性开发上，面临的技术挑战主要是时间类型的格式符处理非常灵活和不同场景下时间类型的优化选择；</p><p></p><p>二进制数据和大对象数据：随着信息系统的发展，对二进制数据和大对象数据的需求也日益增长，YashanDB在二进制类型、CLOB/BLOB/NCLOB等大对象类型做了大力的开发。在这些数据类型上，针对性地开发了查询加速结构、函数运算和空间管理等特性，以提升对象存取和运算效率。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/96/964a6db9bfc9a4ce71fdd6b17778ee13.png\" /></p><p>图 5 LOB类型的技术细节</p><p></p><p>此外，在数据库预置的数据类型基础上，提供了UDT自定义类型便于用户灵活的指定和扩展。YashanDB的UDT可以用于PL/SQL语言中，也可以直接作为表的列字段类型形成嵌套表。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/cd/cdb4c6691a9b0f443b4d9868c95bed59.png\" /></p><p>图 6 UDT类型的技术挑战</p><p></p><p></p><h3>SQL语法能力和内置功能</h3><p></p><p>Oracle兼容性的主体部分是最广为人知的SQL语法能力和内置功能。以Oracle 12C为例，SQL语句主要是以SQL:2011核心，YashanDB已基本实现了这个层级的SQL语法语义兼容。</p><p></p><p>SQL语法功能实现上，YashanDB的DML/DQL已经包括运算符、FILTER、内连接、外连接、半连接、反半连接、分组、聚合、排序、集合、层次查询、子查询等能力，用户在Oracle上实现的SQL语句，几乎可以不用调整直接在YashanDB上运行。我们严格遵循语法语义要求，在语义获取上不断地比对Oracle、DB2、PostgreSQL、MySQL等数据库的功能表现，以确保生成严谨的、经得起推敲的产品。同时内部通过混沌测试工程，不断构造非法或者复杂的SQL语句进行测试。</p><p></p><p>内置功能方面，我们也在不断丰富和扩展，例如字符串函数、数学函数、时间函数、窗口函数等，这些都是出厂阶段数据库携带的内置功能特性，可以极大地扩展各数据类型的运算能力。在DDL层面，YashanDB已经实现普通表、分区表、临时表、全局索引、函数索引、系统视图、物化视图、序列和同义词等常见功能。</p><p></p><h3>高级特性</h3><p></p><p>数据库的高级特性往往涉及到较高的技术挑战，如UDF(用户自定义函数)、JAVA UDF、C UDF、存储过程、高级包、UDT、触发器、JOB、DBLINK等。我们在借鉴Oracle已有实现能力基础上，追寻技术上的自主独立，寻求符合YashanDB技术架构落地的方案，从功能特性的细节角度，提炼并遵循了一系列的实现原则。</p><p></p><p>JAVA UDF方案：Oracle为了实现这一特性，直接将JVM集成到内核中；由于Oracle采用多进程架构，一旦用户编写的UDF存在异常，影响范围有限，可以重新启动进程。然而，由于YashanDB采用多线程架构，一旦用户要运行的代码出现异常，对我们来说是毁灭性的冲击。所以，我们需要设计一个沙箱进程，由该进程负责拉起JVM执行用户UDF。虽然这种架构会需要如协议交互和进程管理的额外工作，但对于实现技术路线的自主性和独立性是必要的。</p><p></p><p>PL/SQL语言的功能：这是Oracle绑定很多用户应用的锁链，为了降低用户应用迁移成本，YashanDB实现了大部分的PL/SQL语句，如声明、赋值、控制、跳转、循环、游标处理、SQL语句、动态SQL以及异常处理等。同时提供了全面的过程体对象，如存储过程、UDP、UDT、触发器等供用户使用。以UDT 自定义类型为例，YashanDB提供了RECORD、OBJECT、VARRAY、NESTED TABLE多种形态，支持方法的声明、支持将嵌套表形态。近期在某基金的核心交易处理系统中，完美地解决NESTED TABLE变量参与BULK导入的业务移植功能。随着应用场景的不断丰富和复杂化，存储过程的功能也将不断完善和优化。</p><p></p><p>DBLINK功能：YashanDB提供了从YashanDB到YashanDB，YashanDB到Oracle，Oracle到YashanDB的远端访问和事务能力，在这个功能点上，存在很多技术细节需要攻克，如异构数据库间数据类型、字符集的映射，计划和表达式如何进行远端下推，复杂SQL的拆分，远端事务管理，复杂DML语句联动等。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/71/71365962d25cd7a87884f6e8a02e4477.png\" /></p><p>图 7 DBLINK</p><p></p><p>除了SQL功能角度，YashanDB还从以下方面完善Oracle兼容性要求，包含统计信息，收集基于列的统计和直方图信息；计划优化规则；常用字符集支持，UTF8、GBK、UTF16、18030等常见字符集支持；安全、审计与加密；导入导出工具支持；JDBC/ODBC驱动等。由于文章篇幅原因，将不一一展开讲解，敬请期待后续的系列技术文章。</p><p></p><p></p><h2>写在最后</h2><p></p><p>在过去的几十年时间里，Oracle数据库凭借出色的产品能力与硬核的技术实力始终处于领先地位，使得国内诸多关键行业的企业级应用深度依赖Oracle。</p><p></p><p>数据库和应用的不兼容，会导致用户需要付出极大的迁移成本，带来的直接后果就是难以形成规模化复制。面对业务的痛点与需求，YashanDB坚定选择Oracle的高度兼容性，以最大程度降低应用迁移的成本与风险，助力用户真正降本提质增效。在实现Oracle兼容性的目标上，我们以这些方法努力探索：</p><p></p><p>特性对标。寻求适合我们技术架构的落地方案；提炼实现原则。从功能特性角度，摸清实现细节，从细节中提炼特性的实现原则；兼容不是抄袭、不能盲从。甄别Oracle的特性规格和特性实现BUG；在YashanDB开发过程不断汇总实现细节上的典型案例，同时编写开发指导文档提供用户避免踩坑；预留扩展路线，为后续技术竞争力落地做好铺垫。</p><p></p><p>我们将始终以用户需求为导向，以技术创新为驱动力，在真实场景中反复打磨锤炼，持续完善兼容性能力，助力用户实现国产数据库平滑迁移。</p>",
    "publish_time": "2023-10-12 11:29:01",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "蔚来自研芯片“杨戬”将在10月量产;smart将搭载英伟达智驾芯片;比亚迪腾势N7推出高快智驾包|汽车科技资讯",
    "url": "https://www.infoq.cn/article/ygAztxqvp8IrWbrzJl9T",
    "summary": "<p></p><h3>smart 将搭载英伟达智驾芯片</h3><p></p><p></p><p>近日，在 smart 举办研发灵感开放日上，研发团队透露，针对 smart 明年的新车型会有大幅提升，智驾方案将由 Mobileye 提供专为自研，而智驾芯片供应商则更换为<a href=\"https://www.infoq.cn/article/e95bPU2tu1o9eGQqmQvP\">英伟达</a>\"。2024 年，smart 将会推出搭载 Smart Pilot Assist3.0 版本的全新车型，会采用全新的 Orin N 芯片，功能方面将实现目前主流的城市 NOA 智驾领航辅助。智舱硬件则升级为 AMD V2000 芯片和 AMOLED 屏幕。发布时间有可能将在明年第三季度，定价上也将超越目前现有车型。</p><p></p><h3>蔚来自研芯片“杨戬”将在 10 月量产</h3><p></p><p></p><p>近日，<a href=\"https://xie.infoq.cn/article/f8d4fce72ac42fa3cf523dbd3\">蔚来</a>\"在上海举办 NIO IN 2023 蔚来创新科技日上宣布，首款自研芯片——激光雷达主控芯片“杨戬”将在 10 月量产。据悉，“杨戬”芯片型号为 NX6031，是蔚来智能硬件团队发布的第一颗自研芯片，8 核 64 位处理器，提供了强大的计算支撑，并且加配 8 通道 9bit 的 ADC，采样率高达 1GHz，可高效捕获激光雷达传感器的原始数据。该芯片降低 50% 的功耗，延迟降低 30%，同时还实现了降本。“杨戬”可使蔚来单车激光雷达成本下降数百元，一年左右可收回研发成本。</p><p></p><h3>国内首个纯视觉城市 NOA 辅助驾驶将于四季度量产</h3><p></p><p></p><p>近日举行的第六届全球智能汽车产业大会期间，<a href=\"https://www.infoq.cn/article/SiCGAR1IbeD44EU141b1\">百度</a>\"集团发布了百度 Apollo 纯视觉高级辅助驾驶产品，将于今年第四季度实现量产落地。据介绍，这是目前国内首个支持城市场景的纯视觉智驾方案，也是纯视觉技术路线在国内首次应用，可用于高速、城市、泊车等全域场景。百度官方称，在<a href=\"https://www.infoq.cn/article/EW0alWL1AfMtLrEBFdJf\">文心</a>\"大模型技术加持下，百度地图落地行业首个地图生成大模型，实现了“地图制图成本降低 95%”，构建了端到端车道网络新范式，“显著提升”地图的全流程制作技术。</p><p></p><h3>比亚迪腾势 N7 推出高快智驾包</h3><p></p><p></p><p>在近日晚间举办的腾势 N7 智能沟通会上，比亚迪推出了基于“天神之眼”高阶智能驾驶辅助系统的腾势 Pilot“高快智驾包”，腾势 N7 选装价格为 15000 元，其中新客户选装限时可享 12000 元的价格，9 月 26 日 24 点之前提车的老客户加装则可享 10000 元的价格。</p><p></p><p>据了解，高快智驾包采用 NVIDIA DRIVE Orin 系统级芯片，能提供 254 TOPS 的高算力，接入 33 颗高性能智驾感知部件，配备 2 颗超远距高精度激光雷达，搭载前双目 8 百万像素摄像头，该选装包拥有自动泊车、高速 NOA (高速导航辅助驾驶)等多项驾驶辅助功能。</p><p></p><h3>特斯拉通过 OTA 软件更新大幅提高摄像头拍照质量</h3><p></p><p></p><p>10 月 8 日消息，<a href=\"https://www.infoq.cn/article/7mmOH015JtTNBVklVLTS\">特斯拉</a>\"通过 OTA 软件更新，大幅提高了其现有电动汽车上配备 HW3 硬件的摄像头拍照质量。通过最新的 2023.32 Tesla 软件更新，特斯拉车辆周围摄像头的图像渲染质量得到了极大改善，尤其是在低光环境下。值得一提的是，这次更新是针对配备 Autopilot / Full Self-Driving 硬件 3.0（HW3）的特斯拉汽车。特斯拉在较新的汽车上采用了 HW4 硬件，升级了摄像头硬件。从这一点也可以看出，HW3 还是有很多进步的空间，可能最终能够实现马斯克承诺的 FSD 功能。</p>",
    "publish_time": "2023-10-12 12:00:53",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]