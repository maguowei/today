[
  {
    "title": "深圳国际金融科技大赛「区块链助力可持续发展」",
    "url": "https://www.infoq.cn/article/p9BoDdRq3qs4cgSD90z7",
    "summary": "<p><img alt=\"\" src=\"https://static001.infoq.cn/resource/image/53/yy/5328a6308eaa72f04ca54b711a67feyy.jpg\" /></p>",
    "publish_time": "2022-09-29 01:18:25",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "REST 如何站到了自己的对立面？",
    "url": "https://www.infoq.cn/article/jfkZ7LHF1HbONN2sPOyw",
    "summary": "<p>&nbsp;</p><p>&nbsp;</p><p></p><blockquote>我对那些将任何基于HTTP的接口都称为REST API的人感到失望。今天的示例是一个SocialSite REST API。这就是一个RPC，它尖叫着。它展示的耦合太多了，应该给它一个X评级。&nbsp;需要做些什么才能使REST架构风格清楚地认识到超文本是一种约束呢？换句话说，如果应用程序的状态引擎（以及API）不是由超文本驱动的，那么它就不是RESTful的，也就不是REST API。是否有一些破损的手册需要修复呢？&nbsp;——Roy Fielding，术语REST的创造者<a href=\"https://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven\">REST API必须是超文本驱动的</a>\"</blockquote><p></p><p>&nbsp;</p><p><a href=\"https://xie.infoq.cn/article/abaa53f80114223d2940f439d\">REST</a>\"肯定是计算机编程史上最被广泛滥用的技术术语了。我想不出还有能与之媲美的了。</p><p>&nbsp;</p><p>今天，当人们使用REST这个术语时，他们几乎总是在讨论基于JSON的HTTP API。比如当你看到一篇关于REST的招聘启事，或者一家公司在讨论<a href=\"https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md\">REST准则</a>\"时，他们很少会提到超文本或超媒体，相反他们会提到JSON、GraphQL(!)等等。只有少数顽固的人才会抱怨：但这些JSON API不是RESTful 的！</p><p>&nbsp;</p><p>在本文中，我将会介绍REST<a href=\"https://james-iry.blogspot.com/2009/05/brief-incomplete-and-mostly-wrong.html\">简短、不完整，且大多是错误的</a>\"历史，以及我们如何走到如今的境地：REST的含义几乎完全被颠倒过来了，变成了与RPC相同的含义，而最初两者的含义是可以拿来对比的。</p><p></p><h2>REST从何而来？</h2><p></p><p>&nbsp;</p><p>REST一词是表征状态转移（REpresentational State Transfer）的缩写，来自<a href=\"https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm\">Fielding博士论文的第5章</a>\"。Fielding 描述了万维网（当时是全新的）的网络架构，并将其与其他可能的网络架构，特别是RPC风格的网络架构进行了对比。</p><p>&nbsp;</p><p>重要的是，在他写这篇论文的时候（1999-2000）还没有JSON API。他描述的是当时的网络：人们“浏览网页”时，HTML通过HTTP交换。此时，JSON还没有被创建出来，直至十年后JSON才被广泛采用。</p><p>&nbsp;</p><p>REST描述了一种网络架构，它是根据API上的约束来定义的，只有满足这些约束才能被视为RESTful API。这个语言是学术性的，这导致人们对该主题有了困惑，但它足够清楚，大多数开发人员都应该能够理解它。</p><p></p><h4>REST的关键：统一接口&amp;HATEOAS</h4><p></p><p></p><h4>&nbsp;</h4><p></p><p>REST中有许多约束和概念。但我认为，与其他可能的网络架构相比，REST有一个关键的思想，也是REST最具定义性和最显著的特征，那就是被称为<a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer#Uniform_interface\">统一接口（Uniform Interface）</a>\"的约束。更具体地说，在这个概念中，<a href=\"https://htmx.org/essays/hateoas/\">超媒体作为应用状态引擎（Hypermedia As The Engine of Application State，HATEOAS）</a>\"，用Fielding话说就是超媒体约束。</p><p>&nbsp;</p><p>为了理解这个统一接口约束，让我们考虑两个返回银行账户信息的HTTP响应。第一个是HTML的（超文本），第二个是JSON的：</p><p></p><h5>HTML响应</h5><p></p><p><code lang=\"null\">HTTP/1.1 200 OK\n\n    \n        </code></p><div><code lang=\"null\">Account number: 12345</code></div><code lang=\"null\">\n        <div>Balance: $100.00 USD</div>\n        <div>Links:\n            <a href=\"https://www.infoq.cn/accounts/12345/deposits\">deposits</a>\n            <a href=\"https://www.infoq.cn/accounts/12345/withdrawals\">withdrawals</a>\n            <a href=\"https://www.infoq.cn/accounts/12345/transfers\">transfers</a>\n            <a href=\"https://www.infoq.cn/accounts/12345/close-requests\">close-requests</a>\n        </div>\n    \n</code><p></p><p>&nbsp;</p><p></p><h5>JSON响应</h5><p></p><p><code lang=\"null\">HTTP/1.1 200 OK\n{\n    \"account_number\": 12345,\n    \"balance\": {\n        \"currency\": \"usd\",\n        \"value\": 100.00\n     },\n     \"status\": \"good\"\n}</code></p><p>&nbsp;</p><p>&nbsp;</p><p>这两个响应的关键区别，以及HTML响应是RESTful的、而JSON响应不是的原因就是：HTML响应完全是自描述的。</p><p>&nbsp;</p><p>收到该响应的超媒体客户端不知道银行帐户是什么、余额是什么等信息，它只知道如何通过HTML 呈现超媒体。</p><p>&nbsp;</p><p>除了通过HTML本身可发现的URL和超媒体控件（链接和表单），客户端对与该数据相关的API端点一无所知。如果资源的状态发生了变化，使得在该资源上允许的可用操作发生了变化（例如，如果帐户透支），那么HTML响应也将发生变化，并显示新的可用操作集。客户端将呈现这个新的HTML，完全不知道“透支”是什么意思，甚至根本不知道银行账户是什么。</p><p>&nbsp;</p><p>正是通过这种方式，超文本成为了应用程序的状态引擎：HTML响应“携带”了所有必要的API信息，以便在其内部直接与系统交互。</p><p>&nbsp;</p><p>现在，将其与第二个JSON响应进行对比。</p><p>&nbsp;</p><p>在JSON响应的案例中，消息不是自描述的。相反，客户端必须要知道如何解释 status 字段以显示合适的用户界面。此外，客户端必须要根据“带外”的信息（即URL、参数等信息等，这些信息来自响应之外的另一个信息源，如swagger API文档）以了解该帐户上可用的操作。</p><p>&nbsp;</p><p>JSON响应不是自描述的，并且也不会对超媒体中的资源状态进行编码。因此，它不符合REST统一接口约束，因此它不是RESTful的。&nbsp;</p><p></p><h4>发明者：RESTful API必须是超媒体驱动的</h4><p></p><p>&nbsp;</p><p>在<a href=\"https://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven\">《Rest API必须是超媒体驱动》</a>\"的一文中，Fielding 表示：</p><p>&nbsp;</p><p></p><blockquote>输入REST API时，除了初始的URI（书签）和一组适合目标受众的标准化媒体类型（即任何可能使用该API的客户端都能理解的）之外，应该没有任何先验知识。从那时起，所有应用程序状态转换都必须由客户端选择服务端所提供的选项来驱动，这些选项存在于接收到的表示中，或者暗含于用户对这些表示的操作。</blockquote><p></p><p>&nbsp;</p><p>因此，在RESTful系统中，你应该能够通过单个URL进入系统，并且从那时起，系统内的所有导航和操作都应该完全通过自描述的超媒体所提供，例如HTML中的链接和表单。除了入口点之外，在合适的RESTful系统中，API客户端不应该需要任何与API相关的附加信息。</p><p>&nbsp;</p><p>这就是RESTful系统令人难以置信的灵活性的源头：因为所有响应都是自描述的，并且对所有当前可用的操作都进行了编码。所以不需要担心利用API进行版本控制。</p><p>&nbsp;</p><p>事实上，你甚至不需要记录它！如果情况发生了变化，超媒体的响应也会发生变化，仅此而已。对于构建分布式系统来说，这也是一个非常灵活且创新的概念。</p><p></p><h4>行业：不，RESTful API是JSON的</h4><p></p><p>&nbsp;</p><p>今天，大多数Web开发人员和大多数公司都会将第二个示例称为RESTful API。他们甚至可能不会将第一个响应视为API响应，认为它只是HTML。（可怜的HTML，得不到任何尊重。）</p><p>&nbsp;</p><p>API总是JSON的，或者如果你喜欢的话，它可能是Protobuf之类的，对吗？错！</p><p>&nbsp;</p><p>第一个响应才是一个API响应，实际上，它是一个RESTful响应！而第二个响应是远程过程调用（RPC）风格的API。客户端和服务端是耦合的，就像Fielding在2008年抱怨的SocialSite API一样：客户端需要对其正在使用的资源有更多的了解，这些知识必须来自于JSON响应本身之外的其他来源。</p><p>&nbsp;</p><p>这个API在本质上几乎与REST相反。我们将这种风格的API称为“伪REST”（pseduoREST）。</p><p></p><h3>REST是如何成为“伪REST”的</h3><p></p><p>&nbsp;</p><p>现在，我们到底是如何走到这个地步的：显然不是RESTful的API，被行业中99.9%的人称为RESTful的。</p><p>&nbsp;</p><p>这是个有趣的故事。Roy Fielding在2000年发表了他的论文。大约在同一时间，<a href=\"https://en.wikipedia.org/wiki/XML-RPC\">XML-RPC</a>\"，一种受RPC启发的显式协议发布了，并开始成为一种使用 HTTP 构建API的方法。XML-RPC是微软一个名为<a href=\"https://en.wikipedia.org/wiki/SOAP\">SOAP</a>\"的大型项目中的一部分。XML-RPC源于RPC风格协议的悠久传统，主要来自企业界，并引入了许多静态类型和早期的XML极繁主义。</p><p>&nbsp;</p><p>此时出现的还有<a href=\"https://en.wikipedia.org/wiki/Ajax_(programming)\">AJAX</a>\"，即异步JavaScript和XML。</p><p>&nbsp;</p><p>请注意这里的XML。众所周知，AJAX允许浏览器在后台向服务端发出HTTP请求，并直接用JavaScript处理响应，为Web编程开辟了一个全新的世界。问题是：这些请求应该是什么样子的呢？它们显然是XML。看，名字里就写着呢，而这个全新的SOAP/XML-RPC标准就出来了。也许这是正确的做法？&nbsp;</p><p></p><h5>也许REST能用于Web服务？</h5><p></p><p>&nbsp;</p><p>一些人注意到，Web具有Fielding所描述的这种不同的架构，并开始询问REST而不是SOAP是否应该成为连接被称为“Web服务”的首选机制。事实证明，Web是极其灵活的，并且正在不断成长为帮派杀手，因此，也许同样的网络架构，REST，在浏览器以及人们可以很好地使用的API上都能运行得很好。</p><p>&nbsp;</p><p>这听起来似乎很有道理，尤其是当XML是API的格式时：XML看起来确实非常像HTML，不是吗？你可以想象一个XML API满足所有的RESTful约束，包括统一接口。所以人们也开始探索这条路线。</p><p>&nbsp;</p><p>在这一切发生的同时，另一项重要的技术也正在诞生：<a href=\"https://www.json.org/json-en.html\">JSON</a>\"</p><p>&nbsp;</p><p>JSON（字面上）就是从JavaScript到SOAP/RPC-XML的Java：简单、动态和容易。现在JSON是大多数Web API的主要格式，这在当时人们很难相信它，实际上JSON也是花了很长一段时间才流行起来。直到2008年，关于API开发的讨论还主要是围绕XML，而不是JSON。&nbsp;</p><p></p><h4>形式化 REST API</h4><p></p><p>&nbsp;</p><p>2008年，Martin Fowler发表了一篇文章，推广了<a href=\"https://martinfowler.com/articles/richardsonMaturityModel.html\">Richardson成熟度模型</a>\"（Richardson Maturity Model，RMM），该模型用于确定给定API的RESTful程度。</p><p>&nbsp;</p><p>该模型提出了四个“层次”，第一个层次是Plain Old XML，即POX沼泽。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/bf/bf4a9a8671a5c596ad637e83dd4f5d27.png\" /></p><p></p><p>&nbsp;</p><p>因此，一个API可以被认为是更“成熟”的REST API，需要采用以下的思想：</p><p>&nbsp;</p><p>层级1：资源（例如，资源感知URL布局，与XML-RPC中的不透明URL布局形成了对比）层级2：HTTP动词（正确使用 GET 、 POST 、 DELETE 等）层级3：超媒体控件（例如链接）</p><p>&nbsp;</p><p>层级3是统一接口的所在，这就是为什么这个层级被认为是最成熟和真正的“REST的荣耀”（Glory of REST）的原因。</p><p></p><h4>“REST”赢了，但走歪了</h4><p></p><p>&nbsp;</p><p>不幸的是，此时对于REST这个术语，发生了两件事：</p><p>&nbsp;</p><p>大家都改用JSON了大家都还停留在RMM的层级2</p><p>&nbsp;</p><p>JSON迅速接管了Web服务/API的世界，因为SOAP/XML-RPC被过度设计了。JSON很简单，“刚刚好”，并且易于阅读和理解。</p><p>&nbsp;</p><p>有了这一改变，Web开发世界最终摆脱了<a href=\"https://en.wikipedia.org/wiki/Jakarta_EE\">J2EE思维模式</a>\"的束缚，将SOAP/XML-RPC降级为企业专属事务。</p><p>&nbsp;</p><p>由于REST方法不像SOAP/XML-RPC那样依赖于XML，并且由于它没有对端点强加太多的形式，因此REST自然成为了JSON所接管的地方，并且它很快就做到了。</p><p>&nbsp;</p><p>在这一关键变化期间，有一点变得越来越清楚了：大多数的JSON API都停留在了RMM的层次2上。</p><p>&nbsp;</p><p>一些人通过在响应中加入超媒体控件来将其提升到了层级3，但几乎所有这些API仍然需要发布文档，这表明“REST的荣耀”还没有实现。</p><p>&nbsp;</p><p>JSON作为响应格式也应该是一个强烈的暗示：JSON显然不是超文本。你可以在其上添加超媒体控件，但这并不是自然而然的。XML至少看起来有点像HTML，所以你可以用它创建超媒体。</p><p>&nbsp;</p><p>JSON只是……数据。添加超媒体控件是笨拙的、非标准化的，并且很少能以统一接口约束所描述的方式使用。</p><p>&nbsp;</p><p>尽管存在这些困难，REST这一术语仍然存在：REST与SOAP相反，JSON API不是SOAP，因此JSON API就是REST。</p><p>&nbsp;</p><p>我们就是这么走到这一步的。</p><p></p><h4>REST之战</h4><p></p><p>&nbsp;</p><p>尽管在JSON API世界中从未始终如一地实现真正的RESTful API，但对于正在创建的pseudoREST API是否是“RESTful”的争论还有很多：关于URL布局的争论、关于HTTP动词是否适用于给定动作的争论、关于媒体类型的激烈争论等等。</p><p>&nbsp;</p><p>那时候我还年轻，整个事情让我感到不透明和疏远，所以我几乎放弃了REST的整个思想：这是人们在互联网上争权夺利的东西。</p><p>&nbsp;</p><p>我很少看到有人提到（或者，即使提到，我也不理解）统一接口的概念，以及它对RESTful系统的重要性。直到我创建了<a href=\"https://intercoolerjs.org/\">intercooler.js</a>\"，一些聪明的人开始告诉我它是RESTful的，我才再次对这个思想产生了兴趣。</p><p>&nbsp;</p><p>RESTful？这是一个JSON API，前端库怎么可能是RESTful的呢？</p><p>&nbsp;</p><p>所以我仔细研究了一下，以全新的眼光重新阅读了Fielding的论文，然后发现不仅intercooler是RESTful的，而且我处理的所有“RESTful”JSON API都不是RESTful！</p><p>&nbsp;</p><p>于是，我开始了无聊至极的网络浏览：</p><p>&nbsp;</p><p><a href=\"https://intercoolerjs.org/2016/01/18/rescuing-rest.html\">从API的寒冬中拯救REST</a>\"<a href=\"https://intercoolerjs.org/2016/02/17/api-churn-vs-security.html\">API流失/安全性权衡</a>\"<a href=\"https://intercoolerjs.org/2016/05/08/hatoeas-is-for-humans.html\">HATEOAS是为人类设计的</a>\"<a href=\"https://intercoolerjs.org/2020/01/14/taking-html-seriously\">认真对待HTML</a>\"<a href=\"https://htmx.org/essays/hypermedia-apis-vs-data-apis/\">超媒体API与数据API</a>\"<a href=\"https://htmx.org/essays/hateoas/\">HATEOAS</a>\"<a href=\"https://htmx.org/essays/hypermedia-driven-applications/\">超媒体驱动的应用程序</a>\"&nbsp;</p><p></p><h3>REST如今的状态</h3><p></p><p>&nbsp;</p><p>最终，大多数人厌倦了在JSON API中添加超媒体控件并放弃了。虽然这些控件在某些特定的情况下（例如分页）可以很好地运行，但它们从未实现REST在面向人类的互联网中所需要的实用性。</p><p>&nbsp;</p><p>事情变成了这种中间态的“伪REST”（pseudoREST）状态，REST慢慢地在RMM的层级1或层级2巩固了它作为JSON API的意义。但我们始终有可能突破到层级3，从而再创REST的荣耀。</p><p>&nbsp;</p><p>然后，单页面应用程序（Single Page Applications，SPA）出现了。</p><p>&nbsp;</p><p>当SPA出现时，Web开发完全脱离了原始的底层RESTful架构。SPA应用程序的整个网络架构转移到了JSON RPC格式。此外，由于这些应用程序的复杂性，开发人员分别专注于前端和后端。</p><p>&nbsp;</p><p>前端开发人员显然没有做任何的RESTful工作：他们使用JavaScript，构建DOM对象，并在需要时调用AJAX API。与早期的Web相比，这更像是一种富客户端创作。</p><p>&nbsp;</p><p>后端工程师在一定程度上仍然关心网络架构，他们继续使用“REST”术语来描述他们正在做的事情。</p><p>&nbsp;</p><p>尽管他们做了一些事情，比如为他们的RESTful API发布了洋洋洒洒的文档，或者<a href=\"https://www.infoq.com/articles/no-more-mvc-frameworks/\">抱怨RESTful API的流失</a>\"，但如果他们真地创建了RESTful API，这些事情就不会发生了。</p><p>&nbsp;</p><p>最后，在2010年代的后期，人们受够了：REST（即使是伪REST形式）根本无法满足日益复杂的SPA应用程序的需求。应用程序越来越像富客户端，富客户端问题需要富客户端的解决方案，而不是退化的超媒体客户端解决方案。</p><p>&nbsp;</p><p>当<a href=\"https://en.wikipedia.org/wiki/GraphQL\">GraphQL</a>\"发布时，大坝就真的决堤了。</p><p>&nbsp;</p><p>GraphQL是最不RESTful的：你绝对需要文档才能理解如何使用使用GraphQL API。客户端和服务端的耦合非常紧密。这其中没有原生超媒体控件，它提供了模式，并且在许多方面感觉很像是XML-RPC的更新和精简版本。</p><p>&nbsp;</p><p>在这里，我想说：没关系。在很多情况下，人们真的非常喜欢GraphQL，如果你正在构建一个富客户端风格的应用程序，那么这很有意义:</p><p>&nbsp;</p><p></p><blockquote>这个问题的简单答案是，HATEOAS并不适合大多数的现代API用例。这就是为什么在将近20年之后，HATEOAS仍然没有在开发人员中得到广泛的采用。另一方面，GraphQL能像野火一样蔓延，是因为它解决了现实世界中的问题。&nbsp;<a href=\"https://techblog.commercetools.com/graphql-and-rest-level-3-hateoas-70904ff1f9cf\">GraphQL和REST层级3（HATEOAS）</a>\"</blockquote><p></p><p>&nbsp;</p><p>所以GraphQL不是REST，它没有声称是REST，也不想成为REST。</p><p>&nbsp;</p><p>但直到今天，绝大多数的开发人员和公司仍继续会使用术语REST来描述他们正在构建的东西，即使他们兴奋地将GraphQL功能添加到了他们的API中。</p><p></p><h3>对于这种情况，我们能做些什么？</h3><p></p><p>&nbsp;</p><p>不幸的是，<a href=\"https://news.ycombinator.com/item?id=32073545\">voidfunc</a>\"可能是对的：</p><p>&nbsp;</p><p></p><blockquote>你可以随心所欲地敲击这个标志，但这场战斗很久之前就输了。REST只是人们用于HTTP+JSON RPC的常用术语。</blockquote><p></p><p>&nbsp;</p><p>我们将继续把明显不是RESTful JSON的API称为REST，因为现在大家都这么称呼。</p><p>&nbsp;</p><p>尽管我抨击地越来越用力，但50年后，Global Omni Corp仍然会为他们RESTful JSON API的swagger文档v138做宣传。</p><p>&nbsp;</p><p>情况虽然无望，但也并不严重。无论如何，在这里有机会向新一代的Web开发人员解释REST，特别是统一接口，这些开发人员可能在他们最初的环境中从未听说过这些概念，他们认为REST = JSON API。</p><p>&nbsp;</p><p>人们已经感觉到有些地方出了问题。也许REST，真正、实际的REST，而不是伪REST（pseudoREST），解决这个问题的部分答案。至少REST背后的思想很有趣，值得了解，就像基础的软件工程知识一样。</p><p>&nbsp;</p><p>这里还有一个更大的要点：即使是一群相对聪明的人（早期的Web开发人员），在互联网的帮助下，对术语REST有一个非常明确的（有时甚至是学术的）规范，也不能在20年的时间里始终保持它的含义与原始的一致。</p><p>&nbsp;</p><p>如果我们能把这么离谱的错误弄清楚，我们还会在什么地方出错呢?</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://htmx.org/essays/how-did-rest-come-to-mean-the-opposite-of-rest/\">https://htmx.org/essays/how-did-rest-come-to-mean-the-opposite-of-rest/</a>\"</p>",
    "publish_time": "2022-09-29 07:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "雪花啤酒数字化进行时，独家揭秘其转型框架与底层逻辑",
    "url": "https://www.infoq.cn/article/t4kD2pO5729VljDuILYN",
    "summary": "<p>当下，千行百业无一不在数字化转型的趋势中逐浪前行，华润雪花啤酒也不例外。</p><p></p><p>雪花啤酒做数字化，在前期筹备阶段，仅顶层设计、战略规划就花了 9 个月时间，此后也在不断复盘和迭代，这足以说明，在数字化转型这件事上，“想清楚”和制定可落地的规划是多么关键。</p><p></p><p>《行知数字中国》<a href=\"https://www.infoq.cn/video/pF9AomjyXJyx3XKFchYr\">第四期</a>\"，InfoQ 邀请到华润雪花啤酒数字化负责人郭华，首次对外界深入分享雪花啤酒数字化转型背后的战略部署和相关思考。</p><p></p><h2>用数字化武装自己</h2><p></p><p></p><p>在国内啤酒市场，雪花啤酒在销量上已经领先十多年，在解决了“数量”问题之后，如何更好地实现“质量发展”，变成一家既有数量规模、市场地位，同时具备品牌声誉且盈利能力强悍的企业，是近些年雪花啤酒一直在努力的方向。</p><p></p><p>2017 年，雪花啤酒总经理侯孝海提出 9 年“3+3+3”企业战略，每 3 年为一阶段，分 3 步走。其中，第一个 3 年是积蓄动能、建立基础，第二个 3 年是在高端市场试水而战，实现规模性的增长，第三个 3 年便是决胜高端。</p><p></p><p>而 2022 年，正是华润啤酒“3+3+3”企业发展战略第二阶段的收官之年。</p><p></p><p>在这样的目标和背景之下，无论是雪花啤酒的生产方式、供应链的营运的方式，还是营销的方式，都在发生剧烈变化。这一系列变化的其中一个迫切诉求是，有没有好的数字化工具和数字化能力，去武装这些队伍。</p><p></p><p>“就是我们生产一瓶酒的人，卖出一瓶酒的人，有没有能力去武装自己，武装到牙齿，去跟非常强大的竞争对手去对抗。”雪花啤酒数字化负责人郭华表示，对雪花啤酒来说，数字化转型是一件水到渠成的事情，因为几乎每一个职能、每一个领域都有非常明确的数字化诉求。</p><p></p><p></p><h2>光顶层设计就花了9个月</h2><p></p><p></p><p>于雪花啤酒而言，数字化转型的意义，是为其进攻高端市场注入新动能。</p><p></p><p>为此，在做变革战略规划的时候，必须找出制约雪花啤酒高端策略发展的因素有哪些。由于“苦信息化水平久矣”，雪花啤酒内部在2017年的一次“大讨论”中就得出过一个结论，信息化水平制约了公司的发展。</p><p></p><p>2019年年底，雪花啤酒开始启动信息化升级顶层设计规划项目，这是雪花啤酒数字化转型工作的核心。而在启动之前的前期筹备阶段，雪花啤酒大概花费 9 个月的时间，在内部通过工作坊的形式进行集中讨论和规划。</p><p></p><p>据郭华介绍，在信息化升级顶层设计的筹备阶段，内部设立了顶层设计项目组，底下也会划分很多“专业组”，把生产、供应链、营销、人力**、财务、行政等****职能部门分别设置专业组。**研讨方式是先在专业组内部有一些调研和细节的讨论分解，然后汇总到项目组，汇总之后，又会再分解，分解完讨论接着再汇总......就这样，通过不断的自上而下、以及自下而上的讨论，形成一些初稿，有了初稿之后，接着做整体的方向的确定。</p><p></p><p>实际上，从调研参与到汇报，基本上每个部门都会参与进来，包括讨论、设计以及确认等等。此外，战略项目的构建还有同步建立的“虚拟组织”在起作用，比如信息化升级委员会，所有管理团队、包括区域总经理都在其中。</p><p></p><p>尽管是个虚拟组织，但它对于项目的推动很关键，并且涉及到汇报机制。比如郭华作为常设的执行组长负责组织具体工作，他的汇报对象本质上是面向整个公司而不只是面向 CEO 一个人。因此他会在信息化升级委员会做不定期汇报，用这样的方式来在公司核心团队的层面去做一些讨论，让大家尽可能达成共识并推动项目落地，也可以借此同步进展和结果。</p><p></p><h3>转型框架</h3><p></p><p></p><p>经过反复研讨和推导，雪花啤酒明确了平台赋能、数据驱动、智慧运营的****三年建设总目标，并以五化三集中一核四平台为转型框架，全面推进数字化战略落地。</p><p></p><p>平台赋能，可分为技术平台和业务平台，技术平台为沉淀业务能力提供升级的技术载体，同时配合IT治理提升IT项目建设效率和质量；业务平台以业务和流程标准化的推动为前提，逐步沉淀成为平台型应用（个人能力--部门能力--公司能力），提供各方可共用的中心化业务能力（产品中心、订单中心、物流中心、会员中心等），并具备对外开放或对接的能力；</p><p></p><p>数据驱动，首先以数据标准化为前提，加强系统集成、促成数据快速、准确、自动地流动（正确的数据在正确的时间以正确的方式传递给正确的人和设备）；其次通过业务的全面线上化减少不必要的人为干预和低效，以数据驱动流程，提高决策的时效性、准确性，提升雪花啤酒自身配置资源的效率；</p><p></p><p>至于智慧运营，则是以业务应用平台化和数据驱动为前提，进一步加强生产、仓储、物流、订单交付、终端营销、消费者运营关键环节的智能化新技术应用，运营高度自动化和智能高效****地配置各类内外部资源；同时结合管理和组织能力提升，从业务价值链整体上提高雪花这个主体对外部环境的变化响应的能力（产品快速研发和低成本试错、小批量定制生产、全渠道订单交付、营销千人千面等）；</p><p></p><p>远大目标的背后，雪花啤酒还定了更具体的转型框架：五化三集中，一核四平台。</p><p></p><h4>五化三集中</h4><p></p><p>五化，指的是供应协同化、生产智能化、渠道可视化、终端精益化以及营销数字化。</p><p></p><p>供应协同化更多是指雪花啤酒跟其供应商、承运商以及上游的合作伙伴，需要在计划、物流、生产能力等各方面做到高效协同。</p><p></p><p>雪花啤酒原来有98家工厂，经过这几年的产能优化目前仍有65家。规模如此之大，生产就必须往充分智能化的目标发展。这些工厂被分成基地工厂、主力工厂、特色工厂，其覆盖的领域，生产的产品和定位是不一样的，**但是它们的共性需求都是需要极大地提高生产效率和柔性能力，迈向智能工厂、黑灯工厂——**把产线上的人效、可比成本、质量一致性，用更好的、更自动化的、以及更智能化的手段解决。</p><p></p><p>渠道可视化，是为了解决资源的高效配置难题，目标是让雪花啤酒的产品组合、价格营销策略、营销政策能够非常合理地配置到每一个经销商和终端。</p><p></p><p>“雪花啤酒的渠道链条非常长，是一家典型的深度分销公司，大约有好几万家经销商，在册的终端数量达500多万，覆盖数亿消费者，这个渠道链条如果完全是混沌的，也就是说大概知道从产成品的仓库里出了多少东西，知道它的流向，但是不知道它的流速，也不知道它的大概的细分的流量，就意味着你对下游的供应链是失控的，也意味着资源配置不是很合理，是大水漫灌，没有办法去滴灌，那么销售费用、营销政策和很多投放也会不精准，也会导致在产品交付和资金的周转方面，会变得相对低效。”郭华阐述道。</p><p></p><p>终端精益化，指的是需要精细化经营终端销售。不能为了拉动销售，用牺牲价格、牺牲利润的方式进行终端销售，而是用合理的成本和资源，尽可能取得利益最大化。“资源要精益，费用要精益，政策要精益，渠道营销要精益，市场活动也同样要精益。”</p><p></p><p>营销数字化，指更好地触达客户，只有充分数字化，才能更精准地进行资源投放，触达目标客户。</p><p></p><p>以2022年为例，雪花啤酒在生产和采购领域的工作策略就是主要围绕供应协同化和生产智能化展开。</p><p></p><p>数字化采购方面主抓供应协同，郭华表示，实际上雪花啤酒的大宗原料和一些包装物的采购所占用的成本比例非常大，约束也是非常大，因此，采购上怎么跟上游供应商协同是个很关键的问题。为此**，雪花啤酒以SRM（供应商关系管理）+CMS（合同管理系统）为核心，打通各系统信息孤岛，推进供应协同平台建设**，上半年实现从“采购需求、寻源、招标、合同、订单执行、发票、支付、对账、评价”全业务流程线上化，提升集采和商城采购业务水平。</p><p></p><p>生产领域要打造智能化试点标杆工厂，以工业互联网和SCADA（数据采集与监视控制系统）为基础，通过集成或内化工厂应用系统，2022年在蚌埠工厂实现雪花啤酒生产智能的信息系统布局，使工厂具备供应协同和营销协同的快速反应能力，并逐步形成雪花啤酒的智能制造标准方案。</p><p></p><p>三集中，指管理集中，信息集中，操作集中。三集中的目的主要是把事务性的工作用更少的人、用数字化的工具来解决，把人的精力释放出来，去做一些比较难而复杂的事情。比如“职能共享”，近几年雪花啤酒在大力推进人力资源的共享、财务的共享，也包括业务的共享如订单和客服的共享。</p><p></p><h4>一核四平台</h4><p></p><p>一核指的是企业运营要围绕消费者，以消费者为核心。郭华强调，这里所说的消费者的定义是广义的，它既包括雪花啤酒的渠道客户和用户，也包括真正意义上消费雪花啤酒产品的消费者。</p><p></p><p>“toB、toC，甚至toE，内部的员工也是我们的客户，你一定是站在他们的立场上要去解决他们的诉求，要有服务的理念，要有业务经营围绕他们为核心去运转的模式，这里也有大量的数字化诉求，比如说内部的沟通效率、办公效率、组织效率，这些效率效能的问题要解决，都是非常大的一些诉求。”</p><p></p><p>而要完成上述诉求和要求，雪花啤酒认为需要四个平台去支持，包括技术平台、业务平台、治理平台和数据平台。</p><p></p><h2>不靠“堆人”解决问题</h2><p></p><p></p><p>转型涉及多个领域和板块，谈到如何把控各个领域的进展，郭华表示打造有执行力和专业度的队伍很重要。</p><p></p><p>“其实我们这几年做的最多的一件事情就是去打造和打磨我们这个组织。”郭华以 IT 团队为例，原来 200 多号 IT 人分散在 16 个区域公司，没有形成合力。团队各自在做相同的事情，没有很好地分工，这意味着组织是没有纵深的。</p><p></p><p>因此在2019年的顶层设计里，雪花啤酒提出了这样一个组织发展策略：控总量、调结构、建纵深、补缺口。</p><p></p><p>所谓的控总量，意思是给人员规模设上限，不靠“堆人”去解决问题。同时，按人员技能大幅调整结构，调整团队结构，也调整人员的能力结构。雪花啤酒 IT 板块最初是一个丁字型组织，人员结构不合理，大量的人在做运维、做基础设施，做一些保障性的工作，但在智能制造、信息安全等多个领域都缺乏相关人才。</p><p></p><p>建纵深，则是指业务和 IT 团队之间，得有一个系统的打法，从而做到高效运转。最后是补缺口，找出既重要又紧急的核心能力，想办法尽早补上短板。</p><p></p><p>另外，雪花啤酒还搭建了IT 三支柱组织架构：总部为COE（专家中心），打造解决方案能力；成都成立 IT 交付中心，涵盖研发、测试、部署、运维等环节；区域的员工则大幅度转型，转成 BP 团队，主要负责需求管理、本地项目的落地、数据运营等事项。</p><p></p><p>据悉，直到 2020 年年底，雪花啤酒 IT 职能仍存在大量缺口，各项工作大量依赖乙方资源。尔后，成都团队经过 2021 年一年的打造，目前有了相对完整的框架、分工、全链条交付能力。对数据、物流、研发等关键岗位进行了“补缺口”，因此雪花啤酒所必需的 IT 各项职能目前已没有出现比较大的或明显的空白地带。</p><p></p><p>如今，总部、成都 IT 交付中心、区域三支柱协同协作日渐增多，每个季度都有大量的区域走访，比较有效地获得了区域 IT 需求、问题等反馈，联动和协同工作方式初步形成。</p><p></p><p>不过，当下雪花啤酒各业务领域的信息化建设工作量依然很大，系统需求层出不穷。“IT的管理和运营模式需要调整，产品制、侧重业务响应的团队才能跟上业务的需求。**但从项目型模式转向产品型的团队模式，对能力的要求差距还很大。**个人和团队专业能力仍需大幅提升；其次，公司产销分离对 IT 系统的挑战会很大，除阶段任务外，如供应链等业务领域会有深刻的、持续的变化，对协同效率要求更高、对服务响应要求更快、对数据质量要求更精，系统也会受到更大的压力。”</p><p></p><p>后续， IT 部门的目标是逐步成为雪花啤酒的数据运营中心，无限靠近业务，通过数据、算法、模型去赋能业务执行，驱动业务指标客观反映业务情况，IT 系统不单单是技术和工具，要变成业务的生产力和要素。</p><p></p><h2>关于量化结果</h2><p></p><p></p><p>整体来看，雪花啤酒信息化顶层设计的落地执行，从系统角度统计有 43 个项目并行开展，经过 2020、2021 两年的集中建设推进，**目前已大幅度推行业务线上化，开展重点业务系统的攻坚战，完成渠道销量、销售费用、终端业务员管理等系统的全国覆盖，**信息化基础得到全面加强。</p><p></p><p>不过这一切才刚刚开始，郭华表示，雪花啤酒距离数字化转型成功还差很远，“只能说我们在过去几年，一步一个脚印地去做了所思考和设计的东西，比较扎实地去做了，并取得一些阶段性的成果，但是离成功两个字还比较远。”</p><p></p><p>对于数字化转型需要长期投入这件事，应该没有人存疑。而如果把转型对业务带来的价值进行量化，对任何企业来说都是一个挑战。</p><p></p><p>尤其在起步阶段做量化会比较困难，但郭华认为，越是难以量化的东西，就越是要试图去量化。一方面是别人需要你的答案，另一方面，需要说服自己才能说服别人。“从我们的角度，在一些数字化或者说类似转型的工作推动之前，这个沟通宣传以及战略推动的工作是非常重要的。”</p><p></p><p>就雪花啤酒来说，郭华表示内部会从项目的层面去做一些效果量化分析和总结回顾，比如统计产销平衡效率、订单交付率、自助下单率、订单满足率、财务报帐效率，和行政办公的流程效率等等，各个领域板块都有成本和效率指标。</p><p></p><p>但若把数字化转型工作做一个整体的、系统性的量化评估，目前对雪花啤酒来说还是一个需要深入研究的课题。</p><p></p><p>“我希望先做 IT 整体的数字化和量化，再反推到业务的数字化和量化，然后呈现出整体的 ROI（投资回报率）。”郭华表示，下一步可以往数字化工作对整体销售指标的直接贡献维度去试着量化。</p><p></p><h2>写在最后</h2><p></p><p></p><p>回到三年前的起点，再去看那张顶层设计的规划蓝图，郭华认为雪花啤酒在数字化过程中做得比较好的一点是，“基本上想到的事都做了”，争取“一张蓝图绘到底”。</p><p></p><p>“我们没有出现很多企业在规划层面的叫‘规划是张纸’，画完就放在一边了（的情况）。”各个项目建设基本都在按计划推进，节奏也许没有完全符合预期，但基本没有“掉链子”不做。</p><p></p><p>顶层蓝图设计并非一蹴而就，其会随着实践而做出调整。比如目前虽然各领域都取得了阶段性的建设成果，职能、生产、营运领域基本按规划方案推进，但营销领域的推进进度及业务应用效果不足。郭华指出，当时的设计可能由于某些问题没想清楚、或者跟规划落地的联系不足而存在瑕疵，内部在两年后便对营销领域顶层设计规划蓝图做出修编。</p><p></p><p>“我们希望这个顶层设计除了有爆发期，有集中讨论的阶段，还可以做到一年一迭代，一年一修编。”</p><p></p><p>花费大半年时间去做战略规划，在很多人看来都是不小的时间成本。但郭华认为，“80% 到 90% 的学费都是因为认知不到位造成的”，**无论是做规划还是做项目，或是做任何一件落地的事情之前，一定不要吝啬在前期花时间。**因为，后面要扭转失误的成本，往往要比在前期解决认知问题难得多。</p><p></p><p>采访嘉宾介绍</p><p>郭华，华润雪花啤酒数字化负责人，带领团队开展信息系统建设与数字化转型工作，并主导了雪花啤酒战略举措之信息化升级，推动建设、实施ERP、CRM、S&amp;OP（产销协同）、STTS（产品数字化及追溯）、渠道终端订单协同系统、渠道进销存、SFA（销售自动化）、TPM（渠道促销管理）、消费者粉丝营销、消费者调研、财务&amp;人力资源共享等大量项目。</p>",
    "publish_time": "2022-09-29 07:30:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "最小可行架构注意事项：必须考虑分布式处理和数据的位置",
    "url": "https://www.infoq.cn/article/fZLExlYK75df4w4ShBLf",
    "summary": "<p>云应用程序让开发人员很容易就相信资源的位置不再那么重要，只要你需要的资源都在云端，这种观点在很大程度上是对的。</p><p>&nbsp;</p><p>但如果是一个移动应用程序，特别是一个依赖了遗留数据存储中的数据的应用程序，那么资源（包括数据）的位置就会变得非常重要。</p><p>&nbsp;</p><p>由于移动应用程序日益成为人们与软件系统交互的首选方式，因此资源的位置是开发人员必须时刻考虑的东西。</p><p>&nbsp;</p><p>在本系列之前的<a href=\"https://www.infoq.cn/article/FRA66pvNbWwJpcOTBC95\">文章</a>\"中，我们介绍了最小可行架构（Minimum Viable Architecture，MVA）的概念，并描述了MVA如何改变你对使用架构框架、模式和策略的看法。</p><p>&nbsp;</p><p>在本文中，我们将探讨与分布式计算工作负载及其相关数据有关的模式和策略，同时讨论涉及分布式时（几乎总会如此）MVA必须考虑的问题。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4b/4b29b5e1ebf19be4286159b29a38ae26.png\" /></p><p></p><p>&nbsp;</p><p>对于用户和开发人员来说，最令人沮丧的一个问题可以用一句话来概括：“它在我的机器上运行良好……”有时候，这些问题与机器配置有关，开发人员的硬件/软件配置与用户不一样。总的来说，这些问题相对容易诊断，因为配置是静态的，通过比较两个环境就可以很容易地找出问题所在。</p><p>&nbsp;</p><p>与应用程序逻辑或数据分布相关的问题更为棘手，而且往往是间歇性的。原因分布式问题通常只在较高的负载下才会出现，所以除非开发人员能够在他们的环境中模拟真实的负载，否则他们很难发现问题。光纤网络的速度可以在很长一段时间内隐藏许多分布式问题，直到网络容量饱和，应用程序的性能开始对开发者所做的架构决策变得更加敏感（通常是隐式的）。在这种情况下，开发者很容易责怪网络，而不是他们自己对分布式问题的忽视。</p><p></p><h2>分布式存在什么大问题</h2><p></p><p>&nbsp;</p><p>在这个光纤网络时代以及全球分布式云数据和云处理的背景下，我们还没有摆脱对应用程序在哪里运行和数据在哪里存储的担忧吗？简单地说，还没有。即使数据与应用程序存储在相同的数据中心里，也会出现分布式问题，而全球分布只会加剧这个问题。我们来看看影响应用程序架构的两种不同的分布方式：分布式应用程序逻辑（代码）和分布式数据。</p><p></p><h4>分布式MVA应用程序逻辑</h4><p></p><p>&nbsp;</p><p>现今的应用程序是高度可移植的，这意味着它们可以相对容易地从一个计算环境转移到另一个计算环境，可以使用可移植语言，也可以使用虚拟机或容器。那么，为什么移动代码运行环境是架构需要关注的一个问题呢？</p><p>&nbsp;</p><p>即使应用程序代码是可移植的，即使容器隐藏了底层的计算环境，底层物理机器仍然可能绊倒粗心的人。时间戳就是一个简单的例子。应用程序通常基于底层硬件的配置来设置时间戳。如果一个应用程序运行在亚洲，另一个在北美，那么亚洲应用程序可以从北美应用程序的角度来创建时间戳，因为亚洲应用程序和北美应用程序位于国际日期变更线的两侧。这可能会导致错误和失败，导致整个应用程序崩溃，或导致依赖时间的计算产生奇怪的结果，比如隔夜银行资金利息。当使用数据库服务器DATE函数设置时间戳，而这些服务器位于与应用程序不同的时区时，也会出现类似的问题，因为记录的日期将根据服务器的位置来确定。</p><p>&nbsp;</p><p>如果应用程序是由在世界各地的服务器上运行的微服务所组成的，那么问题就更难被发现了。在这种情况下，时间戳中使用的时区难以预测。</p><p>&nbsp;</p><p>解决这个问题的一个办法是使用一个全球一致的时间，无论在什么地方，对于所有人来说都是相同的（就像<a href=\"https://en.wikipedia.org/wiki/Celestial_navigation\">水手在导航中使用UTC</a>\"一样）。是否创建和使用这样的服务是一个重要的架构决策。使用UTC并不能解决与公共日期/时间相关的所有问题，但这是一个良好的开端。剩下的一些问题，包括日期/时间戳是否真的需要时间组件（并不是所有的应用程序都需要时间组件，而且对某些应用程序来说，使用时间组件会让人感到困惑）、日期和时间应该如何显示在屏幕上和报告中（它应该是本地日期/时间还是UTC日期/时间？），等等。你仍然有一些重要的问题需要解决，但至少可以基于对记录日期/时间达成的共识来做出这些决定。</p><p>&nbsp;</p><p>一个更微妙的问题来自服务间通信。当所有的服务都运行在相同的物理环境中，从运行时间来看，服务间通信的“成本”非常低，换句话说，通信延迟很低。如果这些服务被移动，不再位于同一台机器上，甚至很可能不在同一地方，那么通信延迟可能会出现不可预测的跳跃，因为服务调用可能需要穿越网络、桥接器和路由器，每一次穿越都增加了往返时间。与时间戳一样，当负载均衡器试图平衡计算负载并无意中增加通信延迟时，这个问题就会加剧。</p><p></p><h4>分布式MVA数据</h4><p></p><p>&nbsp;</p><p>正如《<a href=\"https://www.infoq.cn/article/0dJ52ivjyHhxc2YYfgxW\">InfoQ 2022 年趋势报告：架构与设计篇</a>\"》所指出的那样：</p><p>&nbsp;</p><p></p><blockquote>数据+架构是指软件架构更多地适应数据……我们看到了一个变化，从只在系统存储或传输层考虑数据，到数据成为系统定义的一个元素。</blockquote><p></p><p>&nbsp;</p><p>数据的位置是大多数MVA的关键考虑因素。在采用分布式应用程序逻辑的同时保持数据集中，这可能是因为MVP所需的大多数数据位于集中的遗留数据存储中，这很可能会产生延迟和吞吐量问题，导致系统可能难以满足质量属性要求（QAR），比如性能或可伸缩性。</p><p>&nbsp;</p><p>正如我们在<a href=\"https://www.infoq.cn/article/FRA66pvNbWwJpcOTBC95\">前一篇文章</a>\"中所说的，团队在开发阶段的MVA架构决策关注产品如何满足QAR。数据持久化问题产生了许多最重要的QAR，特别是那些与产品如何存储和查询数据相关的QAR。</p><p>&nbsp;</p><p>为了满足这些QAR，团队必须对数据的特征（结构化或非结构化）做出决策。他们还需要选择合适的数据存储技术（如SQL DBMS、NoSQL DBMS等）。这些决策几乎总是涉及数据将位于何处，至少与应用程序代码的位置有关（例如，在同一台服务器上、在同一数据中心的另一台服务器上、在不同数据中心或在商业云平台上，因此没有固定或已知的位置）。</p><p>&nbsp;</p><p>从很多方面来看，我们可以将分布式数据想象成分布式处理，但有一个重要的区别——如果远程服务调用返回的消息很大，我们需要特别加以考虑。我们以一个在远程服务器上查询数据库的应用程序为例，查询返回大量的数据行，需要在应用程序中进行进一步分析。通过网络传输大量数据，无论速度多快，都是低效的。更好的方法是使用位于与数据库相同机器上的视图、存储过程或远程服务，以便在数据相同的位置进行尽可能多的处理，从而减少由此产生的网络流量。这样做可以减少延迟和不必要的信息处理，大大提高性能。</p><p>&nbsp;</p><p>消除不必要的数据传输对环境也有好处。通过消除不必要的处理过程，应用程序对应的碳排放将大大减少。<a href=\"https://principles.green/\">绿色软件工程的一些原则</a>\"会考虑数据和处理过程所处的位置，这不仅是为了提升应用程序的效率，减少碳排放，也是考虑到了数据中心有多环保。</p><p>&nbsp;</p><p>在某些情况下，将数据存放在哪里可能不能完全由团队做出决定，因为有些数据可能已经存在于遗留的数据存储中，但对于新数据，他们仍然需要做出选择。他们还必须解决与跨不同来源的数据访问延迟相关的问题，因为他们需要在提供查询、分析和准备报告时聚合新数据和遗留数据。</p><p>&nbsp;</p><p>基于微服务的架构还会产生一些与数据相关的问题。从最简单的角度来看，每个微服务都有自己的数据存储。如果微服务及其客户端和数据都是分布式的，那么由于存在网络延迟和带宽约束等因素，性能可能会受到影响。</p><p>&nbsp;</p><p>我们以SQL中的连接操作为例，连接操作通常发生在单台服务器上，从一个或多个实体（表）返回一组数据。如果这些实体是微服务，那就意味着需要迭代多个微服务，以便将所有相关数据拉取到一起。如果这些微服务是分布式的，那么调用开销和延迟将比SQL数据库的情况严重得多。从解耦的角度来看，“一个微服务一个数据存储”的方法很好，但不幸的是，它失去了关系数据库的一些优势（关系数据库让数据聚合变成一项相对简单的任务）。与许多架构决策一样，我们需要在松耦合、性能和可集成性之间做出权衡。</p><p>&nbsp;</p><p>例如，为了减少性能和数据集成问题，我们可以将具有相似职责的微服务分组在同一个有界域内，并将数据存储的所有权分配给每组微服务（有时称为“组件”）。此外，利用数据网格将数据视为随时可用的可靠产品，这是一种通过有界域<a href=\"https://www.infoq.com/data-mesh/\">组织数据</a>\"的有效方法，确保数据和处理具有相同的分布方式。</p><p>&nbsp;</p><p>另一种方法可能是为所有跨服务的报告使用单独的数据库，只为事务性工作负载使用服务独有的数据存储。首先是捕获数据，然后决定如何分析数据，有时这也叫作“读时Schema与写时Schema”。如果系统的利益相关者可以接受营业结束后（Close-of-Business）报告而不是实时报告，则可以用异步的方式更新报告数据库。这比较适合不需要实时分析的软件系统，如商业保险系统，但不适合证券交易系统或银行收银台应用程序。</p><p>&nbsp;</p><p>无论MVA数据存储的设计和分布是怎样的，我们都应该尽量将处理定位在尽可能接近数据的位置。出于类似的原因，经常被同时访问的数据应该放在同一位置，以避免网络流量和延迟开销。</p><p>&nbsp;</p><p>例如，如果你使用多个托管在商业云平台上的无服务器函数作为移动应用程序MVA的一部分，那么你可能会面临满足性能QAR的挑战。需要频繁访问本地数据的无服务器函数需要在本地数据中心和托管无服务器函数的数据中心之间建立非常快速的网络连接，以便向移动用户提供快速响应——这几乎是不可能的。将无服务器函数转移到本地或将数据转移到商业云平台上会更有效。</p><p></p><h2>MVA应该考虑哪些分布式决策</h2><p></p><p>&nbsp;</p><p>我们提到的关注点可以归结为团队在考虑MVA时应该回答的几个关键问题。</p><p>&nbsp;</p><p>应用程序或服务是否需要重新放置，或者它们必须在特定的环境中运行？数据可以动态重新放置吗，还是必须驻留在特定的数据存储位置？例如，一些国家制定了法律要求，规定公民的数据不能存储在境外。或者，因为一些技术原因导致数据无法迁移，例如需要与应用程序同在一个位置。这些限制意味着你可能会被迫接受比理想情况更大程度的分布式。某些服务或应用程序必须与其他服务或特定的数据存储放在同一个位置吗？如果负载均衡器自动移动数据或处理过程，QAR会受到影响吗？一般来说，负载均衡器的工作方式通常会影响应用程序满足QAR的方式，因此与负载均衡相关的决策往往在架构层面具有重要意义。</p><p>&nbsp;</p><p>这并不是一个详尽的清单。通过分析数据和处理的交互方式，以及这些交互可能如何影响系统满足QAR的能力，团队可以提出更多的问题。</p><p></p><h2>结论</h2><p></p><p>&nbsp;</p><p>我们会很容易地认为采用云技术可以避免处理和数据的分布式问题，但在某种程度上，它让问题变得更加困难，因为我们更难以看到在云端真正发生了什么。云计算让团队认为计算资源是由一个巨大的同质池组成的，但实际上，底层的物理硬件和软件就像隐藏的浅滩，而团队必须通过这些浅滩。认真思考数据和处理的分布式问题将帮助他们找到解决方法。</p><p>&nbsp;</p><p>作者简介：</p><p>Kurt Bittner拥有30多年在短时间反馈驱动周期内交付软件的经验。他帮助各种各样的组织采用了敏捷软件交付实践，包括大型银行、保险、制造和零售组织，以及大型政府机构。他曾为甲骨文、惠普、IBM和微软等大型软件交付企业工作过或与之合作过，也是Forrester Research的前科技行业分析师。他的重点是帮助企业建立强大的、自组织的、高性能的团队，提供客户喜爱的解决方案。他是四本软件开发相关主题书籍的作者，其中包括《The Nexus Framework for Scaling Scrum》。他在科罗拉多州的博尔德市工作，目前担任Scrum.org的企业解决方案副总裁。</p><p>&nbsp;</p><p>Pierre Pureur是一名经验丰富的软件架构师，拥有广泛的创新和应用程序开发背景，浸淫于广泛的金融服务行业，拥有广泛的咨询经验和全面的技术基础设施知识。他过去的工作包括担任一家大型金融服务公司的首席企业架构师，领导大型架构团队，管理大型并发应用程序开发项目，指导创新计划，以及制定战略和业务计划。他是“Continuous Architecture in Practice: Scalable Software Architecture in the Age of Agility and DevOps”（2021年出版）和“Continuous Architecture: Sustainable Architecture in an Agile and Cloud-Centric World”（2015年出版）等书的合著者，并发表了许多关于该主题的文章，并在多个软件架构大会上发表了演讲。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/mva-distributed/\">Location, Location, Location: MVA Considerations for Distributed Processing and Data</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/FRA66pvNbWwJpcOTBC95\">最小可行产品与最小可行架构</a>\"</p><p><a href=\"https://www.infoq.cn/article/6Oq5xWvfSb3l8sGmIGfX\">将 MVP 和&nbsp;MVA&nbsp;应用于遗留应用程序</a>\"</p><p><a href=\"https://www.infoq.cn/article/D6BFm1CKtiHNSmvqfcre\">最小可行架构实践：构建家庭保险聊天机器人</a>\"</p>",
    "publish_time": "2022-09-29 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]