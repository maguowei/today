[
  {
    "title": "深圳国际金融科技大赛「区块链助力可持续发展」",
    "url": "https://www.infoq.cn/article/p9BoDdRq3qs4cgSD90z7",
    "summary": "<p><img alt=\"\" src=\"https://static001.infoq.cn/resource/image/53/yy/5328a6308eaa72f04ca54b711a67feyy.jpg\" /></p>",
    "publish_time": "2022-09-29 01:18:25",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "REST 如何站到了自己的对立面？",
    "url": "https://www.infoq.cn/article/jfkZ7LHF1HbONN2sPOyw",
    "summary": "<p>&nbsp;</p><p>&nbsp;</p><p></p><blockquote>我对那些将任何基于HTTP的接口都称为REST API的人感到失望。今天的示例是一个SocialSite REST API。这就是一个RPC，它尖叫着。它展示的耦合太多了，应该给它一个X评级。&nbsp;需要做些什么才能使REST架构风格清楚地认识到超文本是一种约束呢？换句话说，如果应用程序的状态引擎（以及API）不是由超文本驱动的，那么它就不是RESTful的，也就不是REST API。是否有一些破损的手册需要修复呢？&nbsp;——Roy Fielding，术语REST的创造者<a href=\"https://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven\">REST API必须是超文本驱动的</a>\"</blockquote><p></p><p>&nbsp;</p><p><a href=\"https://xie.infoq.cn/article/abaa53f80114223d2940f439d\">REST</a>\"肯定是计算机编程史上最被广泛滥用的技术术语了。我想不出还有能与之媲美的了。</p><p>&nbsp;</p><p>今天，当人们使用REST这个术语时，他们几乎总是在讨论基于JSON的HTTP API。比如当你看到一篇关于REST的招聘启事，或者一家公司在讨论<a href=\"https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md\">REST准则</a>\"时，他们很少会提到超文本或超媒体，相反他们会提到JSON、GraphQL(!)等等。只有少数顽固的人才会抱怨：但这些JSON API不是RESTful 的！</p><p>&nbsp;</p><p>在本文中，我将会介绍REST<a href=\"https://james-iry.blogspot.com/2009/05/brief-incomplete-and-mostly-wrong.html\">简短、不完整，且大多是错误的</a>\"历史，以及我们如何走到如今的境地：REST的含义几乎完全被颠倒过来了，变成了与RPC相同的含义，而最初两者的含义是可以拿来对比的。</p><p></p><h2>REST从何而来？</h2><p></p><p>&nbsp;</p><p>REST一词是表征状态转移（REpresentational State Transfer）的缩写，来自<a href=\"https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm\">Fielding博士论文的第5章</a>\"。Fielding 描述了万维网（当时是全新的）的网络架构，并将其与其他可能的网络架构，特别是RPC风格的网络架构进行了对比。</p><p>&nbsp;</p><p>重要的是，在他写这篇论文的时候（1999-2000）还没有JSON API。他描述的是当时的网络：人们“浏览网页”时，HTML通过HTTP交换。此时，JSON还没有被创建出来，直至十年后JSON才被广泛采用。</p><p>&nbsp;</p><p>REST描述了一种网络架构，它是根据API上的约束来定义的，只有满足这些约束才能被视为RESTful API。这个语言是学术性的，这导致人们对该主题有了困惑，但它足够清楚，大多数开发人员都应该能够理解它。</p><p></p><h4>REST的关键：统一接口&amp;HATEOAS</h4><p></p><p></p><h4>&nbsp;</h4><p></p><p>REST中有许多约束和概念。但我认为，与其他可能的网络架构相比，REST有一个关键的思想，也是REST最具定义性和最显著的特征，那就是被称为<a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer#Uniform_interface\">统一接口（Uniform Interface）</a>\"的约束。更具体地说，在这个概念中，<a href=\"https://htmx.org/essays/hateoas/\">超媒体作为应用状态引擎（Hypermedia As The Engine of Application State，HATEOAS）</a>\"，用Fielding话说就是超媒体约束。</p><p>&nbsp;</p><p>为了理解这个统一接口约束，让我们考虑两个返回银行账户信息的HTTP响应。第一个是HTML的（超文本），第二个是JSON的：</p><p></p><h5>HTML响应</h5><p></p><p><code lang=\"null\">HTTP/1.1 200 OK\n\n    \n        </code></p><div><code lang=\"null\">Account number: 12345</code></div><code lang=\"null\">\n        <div>Balance: $100.00 USD</div>\n        <div>Links:\n            <a href=\"https://www.infoq.cn/accounts/12345/deposits\">deposits</a>\n            <a href=\"https://www.infoq.cn/accounts/12345/withdrawals\">withdrawals</a>\n            <a href=\"https://www.infoq.cn/accounts/12345/transfers\">transfers</a>\n            <a href=\"https://www.infoq.cn/accounts/12345/close-requests\">close-requests</a>\n        </div>\n    \n</code><p></p><p>&nbsp;</p><p></p><h5>JSON响应</h5><p></p><p><code lang=\"null\">HTTP/1.1 200 OK\n{\n    \"account_number\": 12345,\n    \"balance\": {\n        \"currency\": \"usd\",\n        \"value\": 100.00\n     },\n     \"status\": \"good\"\n}</code></p><p>&nbsp;</p><p>&nbsp;</p><p>这两个响应的关键区别，以及HTML响应是RESTful的、而JSON响应不是的原因就是：HTML响应完全是自描述的。</p><p>&nbsp;</p><p>收到该响应的超媒体客户端不知道银行帐户是什么、余额是什么等信息，它只知道如何通过HTML 呈现超媒体。</p><p>&nbsp;</p><p>除了通过HTML本身可发现的URL和超媒体控件（链接和表单），客户端对与该数据相关的API端点一无所知。如果资源的状态发生了变化，使得在该资源上允许的可用操作发生了变化（例如，如果帐户透支），那么HTML响应也将发生变化，并显示新的可用操作集。客户端将呈现这个新的HTML，完全不知道“透支”是什么意思，甚至根本不知道银行账户是什么。</p><p>&nbsp;</p><p>正是通过这种方式，超文本成为了应用程序的状态引擎：HTML响应“携带”了所有必要的API信息，以便在其内部直接与系统交互。</p><p>&nbsp;</p><p>现在，将其与第二个JSON响应进行对比。</p><p>&nbsp;</p><p>在JSON响应的案例中，消息不是自描述的。相反，客户端必须要知道如何解释 status 字段以显示合适的用户界面。此外，客户端必须要根据“带外”的信息（即URL、参数等信息等，这些信息来自响应之外的另一个信息源，如swagger API文档）以了解该帐户上可用的操作。</p><p>&nbsp;</p><p>JSON响应不是自描述的，并且也不会对超媒体中的资源状态进行编码。因此，它不符合REST统一接口约束，因此它不是RESTful的。&nbsp;</p><p></p><h4>发明者：RESTful API必须是超媒体驱动的</h4><p></p><p>&nbsp;</p><p>在<a href=\"https://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven\">《Rest API必须是超媒体驱动》</a>\"的一文中，Fielding 表示：</p><p>&nbsp;</p><p></p><blockquote>输入REST API时，除了初始的URI（书签）和一组适合目标受众的标准化媒体类型（即任何可能使用该API的客户端都能理解的）之外，应该没有任何先验知识。从那时起，所有应用程序状态转换都必须由客户端选择服务端所提供的选项来驱动，这些选项存在于接收到的表示中，或者暗含于用户对这些表示的操作。</blockquote><p></p><p>&nbsp;</p><p>因此，在RESTful系统中，你应该能够通过单个URL进入系统，并且从那时起，系统内的所有导航和操作都应该完全通过自描述的超媒体所提供，例如HTML中的链接和表单。除了入口点之外，在合适的RESTful系统中，API客户端不应该需要任何与API相关的附加信息。</p><p>&nbsp;</p><p>这就是RESTful系统令人难以置信的灵活性的源头：因为所有响应都是自描述的，并且对所有当前可用的操作都进行了编码。所以不需要担心利用API进行版本控制。</p><p>&nbsp;</p><p>事实上，你甚至不需要记录它！如果情况发生了变化，超媒体的响应也会发生变化，仅此而已。对于构建分布式系统来说，这也是一个非常灵活且创新的概念。</p><p></p><h4>行业：不，RESTful API是JSON的</h4><p></p><p>&nbsp;</p><p>今天，大多数Web开发人员和大多数公司都会将第二个示例称为RESTful API。他们甚至可能不会将第一个响应视为API响应，认为它只是HTML。（可怜的HTML，得不到任何尊重。）</p><p>&nbsp;</p><p>API总是JSON的，或者如果你喜欢的话，它可能是Protobuf之类的，对吗？错！</p><p>&nbsp;</p><p>第一个响应才是一个API响应，实际上，它是一个RESTful响应！而第二个响应是远程过程调用（RPC）风格的API。客户端和服务端是耦合的，就像Fielding在2008年抱怨的SocialSite API一样：客户端需要对其正在使用的资源有更多的了解，这些知识必须来自于JSON响应本身之外的其他来源。</p><p>&nbsp;</p><p>这个API在本质上几乎与REST相反。我们将这种风格的API称为“伪REST”（pseduoREST）。</p><p></p><h3>REST是如何成为“伪REST”的</h3><p></p><p>&nbsp;</p><p>现在，我们到底是如何走到这个地步的：显然不是RESTful的API，被行业中99.9%的人称为RESTful的。</p><p>&nbsp;</p><p>这是个有趣的故事。Roy Fielding在2000年发表了他的论文。大约在同一时间，<a href=\"https://en.wikipedia.org/wiki/XML-RPC\">XML-RPC</a>\"，一种受RPC启发的显式协议发布了，并开始成为一种使用 HTTP 构建API的方法。XML-RPC是微软一个名为<a href=\"https://en.wikipedia.org/wiki/SOAP\">SOAP</a>\"的大型项目中的一部分。XML-RPC源于RPC风格协议的悠久传统，主要来自企业界，并引入了许多静态类型和早期的XML极繁主义。</p><p>&nbsp;</p><p>此时出现的还有<a href=\"https://en.wikipedia.org/wiki/Ajax_(programming)\">AJAX</a>\"，即异步JavaScript和XML。</p><p>&nbsp;</p><p>请注意这里的XML。众所周知，AJAX允许浏览器在后台向服务端发出HTTP请求，并直接用JavaScript处理响应，为Web编程开辟了一个全新的世界。问题是：这些请求应该是什么样子的呢？它们显然是XML。看，名字里就写着呢，而这个全新的SOAP/XML-RPC标准就出来了。也许这是正确的做法？&nbsp;</p><p></p><h5>也许REST能用于Web服务？</h5><p></p><p>&nbsp;</p><p>一些人注意到，Web具有Fielding所描述的这种不同的架构，并开始询问REST而不是SOAP是否应该成为连接被称为“Web服务”的首选机制。事实证明，Web是极其灵活的，并且正在不断成长为帮派杀手，因此，也许同样的网络架构，REST，在浏览器以及人们可以很好地使用的API上都能运行得很好。</p><p>&nbsp;</p><p>这听起来似乎很有道理，尤其是当XML是API的格式时：XML看起来确实非常像HTML，不是吗？你可以想象一个XML API满足所有的RESTful约束，包括统一接口。所以人们也开始探索这条路线。</p><p>&nbsp;</p><p>在这一切发生的同时，另一项重要的技术也正在诞生：<a href=\"https://www.json.org/json-en.html\">JSON</a>\"</p><p>&nbsp;</p><p>JSON（字面上）就是从JavaScript到SOAP/RPC-XML的Java：简单、动态和容易。现在JSON是大多数Web API的主要格式，这在当时人们很难相信它，实际上JSON也是花了很长一段时间才流行起来。直到2008年，关于API开发的讨论还主要是围绕XML，而不是JSON。&nbsp;</p><p></p><h4>形式化 REST API</h4><p></p><p>&nbsp;</p><p>2008年，Martin Fowler发表了一篇文章，推广了<a href=\"https://martinfowler.com/articles/richardsonMaturityModel.html\">Richardson成熟度模型</a>\"（Richardson Maturity Model，RMM），该模型用于确定给定API的RESTful程度。</p><p>&nbsp;</p><p>该模型提出了四个“层次”，第一个层次是Plain Old XML，即POX沼泽。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/bf/bf4a9a8671a5c596ad637e83dd4f5d27.png\" /></p><p></p><p>&nbsp;</p><p>因此，一个API可以被认为是更“成熟”的REST API，需要采用以下的思想：</p><p>&nbsp;</p><p>层级1：资源（例如，资源感知URL布局，与XML-RPC中的不透明URL布局形成了对比）层级2：HTTP动词（正确使用 GET 、 POST 、 DELETE 等）层级3：超媒体控件（例如链接）</p><p>&nbsp;</p><p>层级3是统一接口的所在，这就是为什么这个层级被认为是最成熟和真正的“REST的荣耀”（Glory of REST）的原因。</p><p></p><h4>“REST”赢了，但走歪了</h4><p></p><p>&nbsp;</p><p>不幸的是，此时对于REST这个术语，发生了两件事：</p><p>&nbsp;</p><p>大家都改用JSON了大家都还停留在RMM的层级2</p><p>&nbsp;</p><p>JSON迅速接管了Web服务/API的世界，因为SOAP/XML-RPC被过度设计了。JSON很简单，“刚刚好”，并且易于阅读和理解。</p><p>&nbsp;</p><p>有了这一改变，Web开发世界最终摆脱了<a href=\"https://en.wikipedia.org/wiki/Jakarta_EE\">J2EE思维模式</a>\"的束缚，将SOAP/XML-RPC降级为企业专属事务。</p><p>&nbsp;</p><p>由于REST方法不像SOAP/XML-RPC那样依赖于XML，并且由于它没有对端点强加太多的形式，因此REST自然成为了JSON所接管的地方，并且它很快就做到了。</p><p>&nbsp;</p><p>在这一关键变化期间，有一点变得越来越清楚了：大多数的JSON API都停留在了RMM的层次2上。</p><p>&nbsp;</p><p>一些人通过在响应中加入超媒体控件来将其提升到了层级3，但几乎所有这些API仍然需要发布文档，这表明“REST的荣耀”还没有实现。</p><p>&nbsp;</p><p>JSON作为响应格式也应该是一个强烈的暗示：JSON显然不是超文本。你可以在其上添加超媒体控件，但这并不是自然而然的。XML至少看起来有点像HTML，所以你可以用它创建超媒体。</p><p>&nbsp;</p><p>JSON只是……数据。添加超媒体控件是笨拙的、非标准化的，并且很少能以统一接口约束所描述的方式使用。</p><p>&nbsp;</p><p>尽管存在这些困难，REST这一术语仍然存在：REST与SOAP相反，JSON API不是SOAP，因此JSON API就是REST。</p><p>&nbsp;</p><p>我们就是这么走到这一步的。</p><p></p><h4>REST之战</h4><p></p><p>&nbsp;</p><p>尽管在JSON API世界中从未始终如一地实现真正的RESTful API，但对于正在创建的pseudoREST API是否是“RESTful”的争论还有很多：关于URL布局的争论、关于HTTP动词是否适用于给定动作的争论、关于媒体类型的激烈争论等等。</p><p>&nbsp;</p><p>那时候我还年轻，整个事情让我感到不透明和疏远，所以我几乎放弃了REST的整个思想：这是人们在互联网上争权夺利的东西。</p><p>&nbsp;</p><p>我很少看到有人提到（或者，即使提到，我也不理解）统一接口的概念，以及它对RESTful系统的重要性。直到我创建了<a href=\"https://intercoolerjs.org/\">intercooler.js</a>\"，一些聪明的人开始告诉我它是RESTful的，我才再次对这个思想产生了兴趣。</p><p>&nbsp;</p><p>RESTful？这是一个JSON API，前端库怎么可能是RESTful的呢？</p><p>&nbsp;</p><p>所以我仔细研究了一下，以全新的眼光重新阅读了Fielding的论文，然后发现不仅intercooler是RESTful的，而且我处理的所有“RESTful”JSON API都不是RESTful！</p><p>&nbsp;</p><p>于是，我开始了无聊至极的网络浏览：</p><p>&nbsp;</p><p><a href=\"https://intercoolerjs.org/2016/01/18/rescuing-rest.html\">从API的寒冬中拯救REST</a>\"<a href=\"https://intercoolerjs.org/2016/02/17/api-churn-vs-security.html\">API流失/安全性权衡</a>\"<a href=\"https://intercoolerjs.org/2016/05/08/hatoeas-is-for-humans.html\">HATEOAS是为人类设计的</a>\"<a href=\"https://intercoolerjs.org/2020/01/14/taking-html-seriously\">认真对待HTML</a>\"<a href=\"https://htmx.org/essays/hypermedia-apis-vs-data-apis/\">超媒体API与数据API</a>\"<a href=\"https://htmx.org/essays/hateoas/\">HATEOAS</a>\"<a href=\"https://htmx.org/essays/hypermedia-driven-applications/\">超媒体驱动的应用程序</a>\"&nbsp;</p><p></p><h3>REST如今的状态</h3><p></p><p>&nbsp;</p><p>最终，大多数人厌倦了在JSON API中添加超媒体控件并放弃了。虽然这些控件在某些特定的情况下（例如分页）可以很好地运行，但它们从未实现REST在面向人类的互联网中所需要的实用性。</p><p>&nbsp;</p><p>事情变成了这种中间态的“伪REST”（pseudoREST）状态，REST慢慢地在RMM的层级1或层级2巩固了它作为JSON API的意义。但我们始终有可能突破到层级3，从而再创REST的荣耀。</p><p>&nbsp;</p><p>然后，单页面应用程序（Single Page Applications，SPA）出现了。</p><p>&nbsp;</p><p>当SPA出现时，Web开发完全脱离了原始的底层RESTful架构。SPA应用程序的整个网络架构转移到了JSON RPC格式。此外，由于这些应用程序的复杂性，开发人员分别专注于前端和后端。</p><p>&nbsp;</p><p>前端开发人员显然没有做任何的RESTful工作：他们使用JavaScript，构建DOM对象，并在需要时调用AJAX API。与早期的Web相比，这更像是一种富客户端创作。</p><p>&nbsp;</p><p>后端工程师在一定程度上仍然关心网络架构，他们继续使用“REST”术语来描述他们正在做的事情。</p><p>&nbsp;</p><p>尽管他们做了一些事情，比如为他们的RESTful API发布了洋洋洒洒的文档，或者<a href=\"https://www.infoq.com/articles/no-more-mvc-frameworks/\">抱怨RESTful API的流失</a>\"，但如果他们真地创建了RESTful API，这些事情就不会发生了。</p><p>&nbsp;</p><p>最后，在2010年代的后期，人们受够了：REST（即使是伪REST形式）根本无法满足日益复杂的SPA应用程序的需求。应用程序越来越像富客户端，富客户端问题需要富客户端的解决方案，而不是退化的超媒体客户端解决方案。</p><p>&nbsp;</p><p>当<a href=\"https://en.wikipedia.org/wiki/GraphQL\">GraphQL</a>\"发布时，大坝就真的决堤了。</p><p>&nbsp;</p><p>GraphQL是最不RESTful的：你绝对需要文档才能理解如何使用使用GraphQL API。客户端和服务端的耦合非常紧密。这其中没有原生超媒体控件，它提供了模式，并且在许多方面感觉很像是XML-RPC的更新和精简版本。</p><p>&nbsp;</p><p>在这里，我想说：没关系。在很多情况下，人们真的非常喜欢GraphQL，如果你正在构建一个富客户端风格的应用程序，那么这很有意义:</p><p>&nbsp;</p><p></p><blockquote>这个问题的简单答案是，HATEOAS并不适合大多数的现代API用例。这就是为什么在将近20年之后，HATEOAS仍然没有在开发人员中得到广泛的采用。另一方面，GraphQL能像野火一样蔓延，是因为它解决了现实世界中的问题。&nbsp;<a href=\"https://techblog.commercetools.com/graphql-and-rest-level-3-hateoas-70904ff1f9cf\">GraphQL和REST层级3（HATEOAS）</a>\"</blockquote><p></p><p>&nbsp;</p><p>所以GraphQL不是REST，它没有声称是REST，也不想成为REST。</p><p>&nbsp;</p><p>但直到今天，绝大多数的开发人员和公司仍继续会使用术语REST来描述他们正在构建的东西，即使他们兴奋地将GraphQL功能添加到了他们的API中。</p><p></p><h3>对于这种情况，我们能做些什么？</h3><p></p><p>&nbsp;</p><p>不幸的是，<a href=\"https://news.ycombinator.com/item?id=32073545\">voidfunc</a>\"可能是对的：</p><p>&nbsp;</p><p></p><blockquote>你可以随心所欲地敲击这个标志，但这场战斗很久之前就输了。REST只是人们用于HTTP+JSON RPC的常用术语。</blockquote><p></p><p>&nbsp;</p><p>我们将继续把明显不是RESTful JSON的API称为REST，因为现在大家都这么称呼。</p><p>&nbsp;</p><p>尽管我抨击地越来越用力，但50年后，Global Omni Corp仍然会为他们RESTful JSON API的swagger文档v138做宣传。</p><p>&nbsp;</p><p>情况虽然无望，但也并不严重。无论如何，在这里有机会向新一代的Web开发人员解释REST，特别是统一接口，这些开发人员可能在他们最初的环境中从未听说过这些概念，他们认为REST = JSON API。</p><p>&nbsp;</p><p>人们已经感觉到有些地方出了问题。也许REST，真正、实际的REST，而不是伪REST（pseudoREST），解决这个问题的部分答案。至少REST背后的思想很有趣，值得了解，就像基础的软件工程知识一样。</p><p>&nbsp;</p><p>这里还有一个更大的要点：即使是一群相对聪明的人（早期的Web开发人员），在互联网的帮助下，对术语REST有一个非常明确的（有时甚至是学术的）规范，也不能在20年的时间里始终保持它的含义与原始的一致。</p><p>&nbsp;</p><p>如果我们能把这么离谱的错误弄清楚，我们还会在什么地方出错呢?</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://htmx.org/essays/how-did-rest-come-to-mean-the-opposite-of-rest/\">https://htmx.org/essays/how-did-rest-come-to-mean-the-opposite-of-rest/</a>\"</p>",
    "publish_time": "2022-09-29 07:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "雪花啤酒数字化进行时，独家揭秘其转型框架与底层逻辑",
    "url": "https://www.infoq.cn/article/t4kD2pO5729VljDuILYN",
    "summary": "<p>当下，千行百业无一不在数字化转型的趋势中逐浪前行，华润雪花啤酒也不例外。</p><p></p><p>雪花啤酒做数字化，在前期筹备阶段，仅顶层设计、战略规划就花了 9 个月时间，此后也在不断复盘和迭代，这足以说明，在数字化转型这件事上，“想清楚”和制定可落地的规划是多么关键。</p><p></p><p>《行知数字中国》<a href=\"https://www.infoq.cn/video/pF9AomjyXJyx3XKFchYr\">第四期</a>\"，InfoQ 邀请到华润雪花啤酒数字化负责人郭华，首次对外界深入分享雪花啤酒数字化转型背后的战略部署和相关思考。</p><p></p><h2>用数字化武装自己</h2><p></p><p></p><p>在国内啤酒市场，雪花啤酒在销量上已经领先十多年，在解决了“数量”问题之后，如何更好地实现“质量发展”，变成一家既有数量规模、市场地位，同时具备品牌声誉且盈利能力强悍的企业，是近些年雪花啤酒一直在努力的方向。</p><p></p><p>2017 年，雪花啤酒总经理侯孝海提出 9 年“3+3+3”企业战略，每 3 年为一阶段，分 3 步走。其中，第一个 3 年是积蓄动能、建立基础，第二个 3 年是在高端市场试水而战，实现规模性的增长，第三个 3 年便是决胜高端。</p><p></p><p>而 2022 年，正是华润啤酒“3+3+3”企业发展战略第二阶段的收官之年。</p><p></p><p>在这样的目标和背景之下，无论是雪花啤酒的生产方式、供应链的营运的方式，还是营销的方式，都在发生剧烈变化。这一系列变化的其中一个迫切诉求是，有没有好的数字化工具和数字化能力，去武装这些队伍。</p><p></p><p>“就是我们生产一瓶酒的人，卖出一瓶酒的人，有没有能力去武装自己，武装到牙齿，去跟非常强大的竞争对手去对抗。”雪花啤酒数字化负责人郭华表示，对雪花啤酒来说，数字化转型是一件水到渠成的事情，因为几乎每一个职能、每一个领域都有非常明确的数字化诉求。</p><p></p><p></p><h2>光顶层设计就花了9个月</h2><p></p><p></p><p>于雪花啤酒而言，数字化转型的意义，是为其进攻高端市场注入新动能。</p><p></p><p>为此，在做变革战略规划的时候，必须找出制约雪花啤酒高端策略发展的因素有哪些。由于“苦信息化水平久矣”，雪花啤酒内部在2017年的一次“大讨论”中就得出过一个结论，信息化水平制约了公司的发展。</p><p></p><p>2019年年底，雪花啤酒开始启动信息化升级顶层设计规划项目，这是雪花啤酒数字化转型工作的核心。而在启动之前的前期筹备阶段，雪花啤酒大概花费 9 个月的时间，在内部通过工作坊的形式进行集中讨论和规划。</p><p></p><p>据郭华介绍，在信息化升级顶层设计的筹备阶段，内部设立了顶层设计项目组，底下也会划分很多“专业组”，把生产、供应链、营销、人力**、财务、行政等****职能部门分别设置专业组。**研讨方式是先在专业组内部有一些调研和细节的讨论分解，然后汇总到项目组，汇总之后，又会再分解，分解完讨论接着再汇总......就这样，通过不断的自上而下、以及自下而上的讨论，形成一些初稿，有了初稿之后，接着做整体的方向的确定。</p><p></p><p>实际上，从调研参与到汇报，基本上每个部门都会参与进来，包括讨论、设计以及确认等等。此外，战略项目的构建还有同步建立的“虚拟组织”在起作用，比如信息化升级委员会，所有管理团队、包括区域总经理都在其中。</p><p></p><p>尽管是个虚拟组织，但它对于项目的推动很关键，并且涉及到汇报机制。比如郭华作为常设的执行组长负责组织具体工作，他的汇报对象本质上是面向整个公司而不只是面向 CEO 一个人。因此他会在信息化升级委员会做不定期汇报，用这样的方式来在公司核心团队的层面去做一些讨论，让大家尽可能达成共识并推动项目落地，也可以借此同步进展和结果。</p><p></p><h3>转型框架</h3><p></p><p></p><p>经过反复研讨和推导，雪花啤酒明确了平台赋能、数据驱动、智慧运营的****三年建设总目标，并以五化三集中一核四平台为转型框架，全面推进数字化战略落地。</p><p></p><p>平台赋能，可分为技术平台和业务平台，技术平台为沉淀业务能力提供升级的技术载体，同时配合IT治理提升IT项目建设效率和质量；业务平台以业务和流程标准化的推动为前提，逐步沉淀成为平台型应用（个人能力--部门能力--公司能力），提供各方可共用的中心化业务能力（产品中心、订单中心、物流中心、会员中心等），并具备对外开放或对接的能力；</p><p></p><p>数据驱动，首先以数据标准化为前提，加强系统集成、促成数据快速、准确、自动地流动（正确的数据在正确的时间以正确的方式传递给正确的人和设备）；其次通过业务的全面线上化减少不必要的人为干预和低效，以数据驱动流程，提高决策的时效性、准确性，提升雪花啤酒自身配置资源的效率；</p><p></p><p>至于智慧运营，则是以业务应用平台化和数据驱动为前提，进一步加强生产、仓储、物流、订单交付、终端营销、消费者运营关键环节的智能化新技术应用，运营高度自动化和智能高效****地配置各类内外部资源；同时结合管理和组织能力提升，从业务价值链整体上提高雪花这个主体对外部环境的变化响应的能力（产品快速研发和低成本试错、小批量定制生产、全渠道订单交付、营销千人千面等）；</p><p></p><p>远大目标的背后，雪花啤酒还定了更具体的转型框架：五化三集中，一核四平台。</p><p></p><h4>五化三集中</h4><p></p><p>五化，指的是供应协同化、生产智能化、渠道可视化、终端精益化以及营销数字化。</p><p></p><p>供应协同化更多是指雪花啤酒跟其供应商、承运商以及上游的合作伙伴，需要在计划、物流、生产能力等各方面做到高效协同。</p><p></p><p>雪花啤酒原来有98家工厂，经过这几年的产能优化目前仍有65家。规模如此之大，生产就必须往充分智能化的目标发展。这些工厂被分成基地工厂、主力工厂、特色工厂，其覆盖的领域，生产的产品和定位是不一样的，**但是它们的共性需求都是需要极大地提高生产效率和柔性能力，迈向智能工厂、黑灯工厂——**把产线上的人效、可比成本、质量一致性，用更好的、更自动化的、以及更智能化的手段解决。</p><p></p><p>渠道可视化，是为了解决资源的高效配置难题，目标是让雪花啤酒的产品组合、价格营销策略、营销政策能够非常合理地配置到每一个经销商和终端。</p><p></p><p>“雪花啤酒的渠道链条非常长，是一家典型的深度分销公司，大约有好几万家经销商，在册的终端数量达500多万，覆盖数亿消费者，这个渠道链条如果完全是混沌的，也就是说大概知道从产成品的仓库里出了多少东西，知道它的流向，但是不知道它的流速，也不知道它的大概的细分的流量，就意味着你对下游的供应链是失控的，也意味着资源配置不是很合理，是大水漫灌，没有办法去滴灌，那么销售费用、营销政策和很多投放也会不精准，也会导致在产品交付和资金的周转方面，会变得相对低效。”郭华阐述道。</p><p></p><p>终端精益化，指的是需要精细化经营终端销售。不能为了拉动销售，用牺牲价格、牺牲利润的方式进行终端销售，而是用合理的成本和资源，尽可能取得利益最大化。“资源要精益，费用要精益，政策要精益，渠道营销要精益，市场活动也同样要精益。”</p><p></p><p>营销数字化，指更好地触达客户，只有充分数字化，才能更精准地进行资源投放，触达目标客户。</p><p></p><p>以2022年为例，雪花啤酒在生产和采购领域的工作策略就是主要围绕供应协同化和生产智能化展开。</p><p></p><p>数字化采购方面主抓供应协同，郭华表示，实际上雪花啤酒的大宗原料和一些包装物的采购所占用的成本比例非常大，约束也是非常大，因此，采购上怎么跟上游供应商协同是个很关键的问题。为此**，雪花啤酒以SRM（供应商关系管理）+CMS（合同管理系统）为核心，打通各系统信息孤岛，推进供应协同平台建设**，上半年实现从“采购需求、寻源、招标、合同、订单执行、发票、支付、对账、评价”全业务流程线上化，提升集采和商城采购业务水平。</p><p></p><p>生产领域要打造智能化试点标杆工厂，以工业互联网和SCADA（数据采集与监视控制系统）为基础，通过集成或内化工厂应用系统，2022年在蚌埠工厂实现雪花啤酒生产智能的信息系统布局，使工厂具备供应协同和营销协同的快速反应能力，并逐步形成雪花啤酒的智能制造标准方案。</p><p></p><p>三集中，指管理集中，信息集中，操作集中。三集中的目的主要是把事务性的工作用更少的人、用数字化的工具来解决，把人的精力释放出来，去做一些比较难而复杂的事情。比如“职能共享”，近几年雪花啤酒在大力推进人力资源的共享、财务的共享，也包括业务的共享如订单和客服的共享。</p><p></p><h4>一核四平台</h4><p></p><p>一核指的是企业运营要围绕消费者，以消费者为核心。郭华强调，这里所说的消费者的定义是广义的，它既包括雪花啤酒的渠道客户和用户，也包括真正意义上消费雪花啤酒产品的消费者。</p><p></p><p>“toB、toC，甚至toE，内部的员工也是我们的客户，你一定是站在他们的立场上要去解决他们的诉求，要有服务的理念，要有业务经营围绕他们为核心去运转的模式，这里也有大量的数字化诉求，比如说内部的沟通效率、办公效率、组织效率，这些效率效能的问题要解决，都是非常大的一些诉求。”</p><p></p><p>而要完成上述诉求和要求，雪花啤酒认为需要四个平台去支持，包括技术平台、业务平台、治理平台和数据平台。</p><p></p><h2>不靠“堆人”解决问题</h2><p></p><p></p><p>转型涉及多个领域和板块，谈到如何把控各个领域的进展，郭华表示打造有执行力和专业度的队伍很重要。</p><p></p><p>“其实我们这几年做的最多的一件事情就是去打造和打磨我们这个组织。”郭华以 IT 团队为例，原来 200 多号 IT 人分散在 16 个区域公司，没有形成合力。团队各自在做相同的事情，没有很好地分工，这意味着组织是没有纵深的。</p><p></p><p>因此在2019年的顶层设计里，雪花啤酒提出了这样一个组织发展策略：控总量、调结构、建纵深、补缺口。</p><p></p><p>所谓的控总量，意思是给人员规模设上限，不靠“堆人”去解决问题。同时，按人员技能大幅调整结构，调整团队结构，也调整人员的能力结构。雪花啤酒 IT 板块最初是一个丁字型组织，人员结构不合理，大量的人在做运维、做基础设施，做一些保障性的工作，但在智能制造、信息安全等多个领域都缺乏相关人才。</p><p></p><p>建纵深，则是指业务和 IT 团队之间，得有一个系统的打法，从而做到高效运转。最后是补缺口，找出既重要又紧急的核心能力，想办法尽早补上短板。</p><p></p><p>另外，雪花啤酒还搭建了IT 三支柱组织架构：总部为COE（专家中心），打造解决方案能力；成都成立 IT 交付中心，涵盖研发、测试、部署、运维等环节；区域的员工则大幅度转型，转成 BP 团队，主要负责需求管理、本地项目的落地、数据运营等事项。</p><p></p><p>据悉，直到 2020 年年底，雪花啤酒 IT 职能仍存在大量缺口，各项工作大量依赖乙方资源。尔后，成都团队经过 2021 年一年的打造，目前有了相对完整的框架、分工、全链条交付能力。对数据、物流、研发等关键岗位进行了“补缺口”，因此雪花啤酒所必需的 IT 各项职能目前已没有出现比较大的或明显的空白地带。</p><p></p><p>如今，总部、成都 IT 交付中心、区域三支柱协同协作日渐增多，每个季度都有大量的区域走访，比较有效地获得了区域 IT 需求、问题等反馈，联动和协同工作方式初步形成。</p><p></p><p>不过，当下雪花啤酒各业务领域的信息化建设工作量依然很大，系统需求层出不穷。“IT的管理和运营模式需要调整，产品制、侧重业务响应的团队才能跟上业务的需求。**但从项目型模式转向产品型的团队模式，对能力的要求差距还很大。**个人和团队专业能力仍需大幅提升；其次，公司产销分离对 IT 系统的挑战会很大，除阶段任务外，如供应链等业务领域会有深刻的、持续的变化，对协同效率要求更高、对服务响应要求更快、对数据质量要求更精，系统也会受到更大的压力。”</p><p></p><p>后续， IT 部门的目标是逐步成为雪花啤酒的数据运营中心，无限靠近业务，通过数据、算法、模型去赋能业务执行，驱动业务指标客观反映业务情况，IT 系统不单单是技术和工具，要变成业务的生产力和要素。</p><p></p><h2>关于量化结果</h2><p></p><p></p><p>整体来看，雪花啤酒信息化顶层设计的落地执行，从系统角度统计有 43 个项目并行开展，经过 2020、2021 两年的集中建设推进，**目前已大幅度推行业务线上化，开展重点业务系统的攻坚战，完成渠道销量、销售费用、终端业务员管理等系统的全国覆盖，**信息化基础得到全面加强。</p><p></p><p>不过这一切才刚刚开始，郭华表示，雪花啤酒距离数字化转型成功还差很远，“只能说我们在过去几年，一步一个脚印地去做了所思考和设计的东西，比较扎实地去做了，并取得一些阶段性的成果，但是离成功两个字还比较远。”</p><p></p><p>对于数字化转型需要长期投入这件事，应该没有人存疑。而如果把转型对业务带来的价值进行量化，对任何企业来说都是一个挑战。</p><p></p><p>尤其在起步阶段做量化会比较困难，但郭华认为，越是难以量化的东西，就越是要试图去量化。一方面是别人需要你的答案，另一方面，需要说服自己才能说服别人。“从我们的角度，在一些数字化或者说类似转型的工作推动之前，这个沟通宣传以及战略推动的工作是非常重要的。”</p><p></p><p>就雪花啤酒来说，郭华表示内部会从项目的层面去做一些效果量化分析和总结回顾，比如统计产销平衡效率、订单交付率、自助下单率、订单满足率、财务报帐效率，和行政办公的流程效率等等，各个领域板块都有成本和效率指标。</p><p></p><p>但若把数字化转型工作做一个整体的、系统性的量化评估，目前对雪花啤酒来说还是一个需要深入研究的课题。</p><p></p><p>“我希望先做 IT 整体的数字化和量化，再反推到业务的数字化和量化，然后呈现出整体的 ROI（投资回报率）。”郭华表示，下一步可以往数字化工作对整体销售指标的直接贡献维度去试着量化。</p><p></p><h2>写在最后</h2><p></p><p></p><p>回到三年前的起点，再去看那张顶层设计的规划蓝图，郭华认为雪花啤酒在数字化过程中做得比较好的一点是，“基本上想到的事都做了”，争取“一张蓝图绘到底”。</p><p></p><p>“我们没有出现很多企业在规划层面的叫‘规划是张纸’，画完就放在一边了（的情况）。”各个项目建设基本都在按计划推进，节奏也许没有完全符合预期，但基本没有“掉链子”不做。</p><p></p><p>顶层蓝图设计并非一蹴而就，其会随着实践而做出调整。比如目前虽然各领域都取得了阶段性的建设成果，职能、生产、营运领域基本按规划方案推进，但营销领域的推进进度及业务应用效果不足。郭华指出，当时的设计可能由于某些问题没想清楚、或者跟规划落地的联系不足而存在瑕疵，内部在两年后便对营销领域顶层设计规划蓝图做出修编。</p><p></p><p>“我们希望这个顶层设计除了有爆发期，有集中讨论的阶段，还可以做到一年一迭代，一年一修编。”</p><p></p><p>花费大半年时间去做战略规划，在很多人看来都是不小的时间成本。但郭华认为，“80% 到 90% 的学费都是因为认知不到位造成的”，**无论是做规划还是做项目，或是做任何一件落地的事情之前，一定不要吝啬在前期花时间。**因为，后面要扭转失误的成本，往往要比在前期解决认知问题难得多。</p><p></p><p>采访嘉宾介绍</p><p>郭华，华润雪花啤酒数字化负责人，带领团队开展信息系统建设与数字化转型工作，并主导了雪花啤酒战略举措之信息化升级，推动建设、实施ERP、CRM、S&amp;OP（产销协同）、STTS（产品数字化及追溯）、渠道终端订单协同系统、渠道进销存、SFA（销售自动化）、TPM（渠道促销管理）、消费者粉丝营销、消费者调研、财务&amp;人力资源共享等大量项目。</p>",
    "publish_time": "2022-09-29 07:30:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "最小可行架构注意事项：必须考虑分布式处理和数据的位置",
    "url": "https://www.infoq.cn/article/fZLExlYK75df4w4ShBLf",
    "summary": "<p>云应用程序让开发人员很容易就相信资源的位置不再那么重要，只要你需要的资源都在云端，这种观点在很大程度上是对的。</p><p>&nbsp;</p><p>但如果是一个移动应用程序，特别是一个依赖了遗留数据存储中的数据的应用程序，那么资源（包括数据）的位置就会变得非常重要。</p><p>&nbsp;</p><p>由于移动应用程序日益成为人们与软件系统交互的首选方式，因此资源的位置是开发人员必须时刻考虑的东西。</p><p>&nbsp;</p><p>在本系列之前的<a href=\"https://www.infoq.cn/article/FRA66pvNbWwJpcOTBC95\">文章</a>\"中，我们介绍了最小可行架构（Minimum Viable Architecture，MVA）的概念，并描述了MVA如何改变你对使用架构框架、模式和策略的看法。</p><p>&nbsp;</p><p>在本文中，我们将探讨与分布式计算工作负载及其相关数据有关的模式和策略，同时讨论涉及分布式时（几乎总会如此）MVA必须考虑的问题。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4b/4b29b5e1ebf19be4286159b29a38ae26.png\" /></p><p></p><p>&nbsp;</p><p>对于用户和开发人员来说，最令人沮丧的一个问题可以用一句话来概括：“它在我的机器上运行良好……”有时候，这些问题与机器配置有关，开发人员的硬件/软件配置与用户不一样。总的来说，这些问题相对容易诊断，因为配置是静态的，通过比较两个环境就可以很容易地找出问题所在。</p><p>&nbsp;</p><p>与应用程序逻辑或数据分布相关的问题更为棘手，而且往往是间歇性的。原因分布式问题通常只在较高的负载下才会出现，所以除非开发人员能够在他们的环境中模拟真实的负载，否则他们很难发现问题。光纤网络的速度可以在很长一段时间内隐藏许多分布式问题，直到网络容量饱和，应用程序的性能开始对开发者所做的架构决策变得更加敏感（通常是隐式的）。在这种情况下，开发者很容易责怪网络，而不是他们自己对分布式问题的忽视。</p><p></p><h2>分布式存在什么大问题</h2><p></p><p>&nbsp;</p><p>在这个光纤网络时代以及全球分布式云数据和云处理的背景下，我们还没有摆脱对应用程序在哪里运行和数据在哪里存储的担忧吗？简单地说，还没有。即使数据与应用程序存储在相同的数据中心里，也会出现分布式问题，而全球分布只会加剧这个问题。我们来看看影响应用程序架构的两种不同的分布方式：分布式应用程序逻辑（代码）和分布式数据。</p><p></p><h4>分布式MVA应用程序逻辑</h4><p></p><p>&nbsp;</p><p>现今的应用程序是高度可移植的，这意味着它们可以相对容易地从一个计算环境转移到另一个计算环境，可以使用可移植语言，也可以使用虚拟机或容器。那么，为什么移动代码运行环境是架构需要关注的一个问题呢？</p><p>&nbsp;</p><p>即使应用程序代码是可移植的，即使容器隐藏了底层的计算环境，底层物理机器仍然可能绊倒粗心的人。时间戳就是一个简单的例子。应用程序通常基于底层硬件的配置来设置时间戳。如果一个应用程序运行在亚洲，另一个在北美，那么亚洲应用程序可以从北美应用程序的角度来创建时间戳，因为亚洲应用程序和北美应用程序位于国际日期变更线的两侧。这可能会导致错误和失败，导致整个应用程序崩溃，或导致依赖时间的计算产生奇怪的结果，比如隔夜银行资金利息。当使用数据库服务器DATE函数设置时间戳，而这些服务器位于与应用程序不同的时区时，也会出现类似的问题，因为记录的日期将根据服务器的位置来确定。</p><p>&nbsp;</p><p>如果应用程序是由在世界各地的服务器上运行的微服务所组成的，那么问题就更难被发现了。在这种情况下，时间戳中使用的时区难以预测。</p><p>&nbsp;</p><p>解决这个问题的一个办法是使用一个全球一致的时间，无论在什么地方，对于所有人来说都是相同的（就像<a href=\"https://en.wikipedia.org/wiki/Celestial_navigation\">水手在导航中使用UTC</a>\"一样）。是否创建和使用这样的服务是一个重要的架构决策。使用UTC并不能解决与公共日期/时间相关的所有问题，但这是一个良好的开端。剩下的一些问题，包括日期/时间戳是否真的需要时间组件（并不是所有的应用程序都需要时间组件，而且对某些应用程序来说，使用时间组件会让人感到困惑）、日期和时间应该如何显示在屏幕上和报告中（它应该是本地日期/时间还是UTC日期/时间？），等等。你仍然有一些重要的问题需要解决，但至少可以基于对记录日期/时间达成的共识来做出这些决定。</p><p>&nbsp;</p><p>一个更微妙的问题来自服务间通信。当所有的服务都运行在相同的物理环境中，从运行时间来看，服务间通信的“成本”非常低，换句话说，通信延迟很低。如果这些服务被移动，不再位于同一台机器上，甚至很可能不在同一地方，那么通信延迟可能会出现不可预测的跳跃，因为服务调用可能需要穿越网络、桥接器和路由器，每一次穿越都增加了往返时间。与时间戳一样，当负载均衡器试图平衡计算负载并无意中增加通信延迟时，这个问题就会加剧。</p><p></p><h4>分布式MVA数据</h4><p></p><p>&nbsp;</p><p>正如《<a href=\"https://www.infoq.cn/article/0dJ52ivjyHhxc2YYfgxW\">InfoQ 2022 年趋势报告：架构与设计篇</a>\"》所指出的那样：</p><p>&nbsp;</p><p></p><blockquote>数据+架构是指软件架构更多地适应数据……我们看到了一个变化，从只在系统存储或传输层考虑数据，到数据成为系统定义的一个元素。</blockquote><p></p><p>&nbsp;</p><p>数据的位置是大多数MVA的关键考虑因素。在采用分布式应用程序逻辑的同时保持数据集中，这可能是因为MVP所需的大多数数据位于集中的遗留数据存储中，这很可能会产生延迟和吞吐量问题，导致系统可能难以满足质量属性要求（QAR），比如性能或可伸缩性。</p><p>&nbsp;</p><p>正如我们在<a href=\"https://www.infoq.cn/article/FRA66pvNbWwJpcOTBC95\">前一篇文章</a>\"中所说的，团队在开发阶段的MVA架构决策关注产品如何满足QAR。数据持久化问题产生了许多最重要的QAR，特别是那些与产品如何存储和查询数据相关的QAR。</p><p>&nbsp;</p><p>为了满足这些QAR，团队必须对数据的特征（结构化或非结构化）做出决策。他们还需要选择合适的数据存储技术（如SQL DBMS、NoSQL DBMS等）。这些决策几乎总是涉及数据将位于何处，至少与应用程序代码的位置有关（例如，在同一台服务器上、在同一数据中心的另一台服务器上、在不同数据中心或在商业云平台上，因此没有固定或已知的位置）。</p><p>&nbsp;</p><p>从很多方面来看，我们可以将分布式数据想象成分布式处理，但有一个重要的区别——如果远程服务调用返回的消息很大，我们需要特别加以考虑。我们以一个在远程服务器上查询数据库的应用程序为例，查询返回大量的数据行，需要在应用程序中进行进一步分析。通过网络传输大量数据，无论速度多快，都是低效的。更好的方法是使用位于与数据库相同机器上的视图、存储过程或远程服务，以便在数据相同的位置进行尽可能多的处理，从而减少由此产生的网络流量。这样做可以减少延迟和不必要的信息处理，大大提高性能。</p><p>&nbsp;</p><p>消除不必要的数据传输对环境也有好处。通过消除不必要的处理过程，应用程序对应的碳排放将大大减少。<a href=\"https://principles.green/\">绿色软件工程的一些原则</a>\"会考虑数据和处理过程所处的位置，这不仅是为了提升应用程序的效率，减少碳排放，也是考虑到了数据中心有多环保。</p><p>&nbsp;</p><p>在某些情况下，将数据存放在哪里可能不能完全由团队做出决定，因为有些数据可能已经存在于遗留的数据存储中，但对于新数据，他们仍然需要做出选择。他们还必须解决与跨不同来源的数据访问延迟相关的问题，因为他们需要在提供查询、分析和准备报告时聚合新数据和遗留数据。</p><p>&nbsp;</p><p>基于微服务的架构还会产生一些与数据相关的问题。从最简单的角度来看，每个微服务都有自己的数据存储。如果微服务及其客户端和数据都是分布式的，那么由于存在网络延迟和带宽约束等因素，性能可能会受到影响。</p><p>&nbsp;</p><p>我们以SQL中的连接操作为例，连接操作通常发生在单台服务器上，从一个或多个实体（表）返回一组数据。如果这些实体是微服务，那就意味着需要迭代多个微服务，以便将所有相关数据拉取到一起。如果这些微服务是分布式的，那么调用开销和延迟将比SQL数据库的情况严重得多。从解耦的角度来看，“一个微服务一个数据存储”的方法很好，但不幸的是，它失去了关系数据库的一些优势（关系数据库让数据聚合变成一项相对简单的任务）。与许多架构决策一样，我们需要在松耦合、性能和可集成性之间做出权衡。</p><p>&nbsp;</p><p>例如，为了减少性能和数据集成问题，我们可以将具有相似职责的微服务分组在同一个有界域内，并将数据存储的所有权分配给每组微服务（有时称为“组件”）。此外，利用数据网格将数据视为随时可用的可靠产品，这是一种通过有界域<a href=\"https://www.infoq.com/data-mesh/\">组织数据</a>\"的有效方法，确保数据和处理具有相同的分布方式。</p><p>&nbsp;</p><p>另一种方法可能是为所有跨服务的报告使用单独的数据库，只为事务性工作负载使用服务独有的数据存储。首先是捕获数据，然后决定如何分析数据，有时这也叫作“读时Schema与写时Schema”。如果系统的利益相关者可以接受营业结束后（Close-of-Business）报告而不是实时报告，则可以用异步的方式更新报告数据库。这比较适合不需要实时分析的软件系统，如商业保险系统，但不适合证券交易系统或银行收银台应用程序。</p><p>&nbsp;</p><p>无论MVA数据存储的设计和分布是怎样的，我们都应该尽量将处理定位在尽可能接近数据的位置。出于类似的原因，经常被同时访问的数据应该放在同一位置，以避免网络流量和延迟开销。</p><p>&nbsp;</p><p>例如，如果你使用多个托管在商业云平台上的无服务器函数作为移动应用程序MVA的一部分，那么你可能会面临满足性能QAR的挑战。需要频繁访问本地数据的无服务器函数需要在本地数据中心和托管无服务器函数的数据中心之间建立非常快速的网络连接，以便向移动用户提供快速响应——这几乎是不可能的。将无服务器函数转移到本地或将数据转移到商业云平台上会更有效。</p><p></p><h2>MVA应该考虑哪些分布式决策</h2><p></p><p>&nbsp;</p><p>我们提到的关注点可以归结为团队在考虑MVA时应该回答的几个关键问题。</p><p>&nbsp;</p><p>应用程序或服务是否需要重新放置，或者它们必须在特定的环境中运行？数据可以动态重新放置吗，还是必须驻留在特定的数据存储位置？例如，一些国家制定了法律要求，规定公民的数据不能存储在境外。或者，因为一些技术原因导致数据无法迁移，例如需要与应用程序同在一个位置。这些限制意味着你可能会被迫接受比理想情况更大程度的分布式。某些服务或应用程序必须与其他服务或特定的数据存储放在同一个位置吗？如果负载均衡器自动移动数据或处理过程，QAR会受到影响吗？一般来说，负载均衡器的工作方式通常会影响应用程序满足QAR的方式，因此与负载均衡相关的决策往往在架构层面具有重要意义。</p><p>&nbsp;</p><p>这并不是一个详尽的清单。通过分析数据和处理的交互方式，以及这些交互可能如何影响系统满足QAR的能力，团队可以提出更多的问题。</p><p></p><h2>结论</h2><p></p><p>&nbsp;</p><p>我们会很容易地认为采用云技术可以避免处理和数据的分布式问题，但在某种程度上，它让问题变得更加困难，因为我们更难以看到在云端真正发生了什么。云计算让团队认为计算资源是由一个巨大的同质池组成的，但实际上，底层的物理硬件和软件就像隐藏的浅滩，而团队必须通过这些浅滩。认真思考数据和处理的分布式问题将帮助他们找到解决方法。</p><p>&nbsp;</p><p>作者简介：</p><p>Kurt Bittner拥有30多年在短时间反馈驱动周期内交付软件的经验。他帮助各种各样的组织采用了敏捷软件交付实践，包括大型银行、保险、制造和零售组织，以及大型政府机构。他曾为甲骨文、惠普、IBM和微软等大型软件交付企业工作过或与之合作过，也是Forrester Research的前科技行业分析师。他的重点是帮助企业建立强大的、自组织的、高性能的团队，提供客户喜爱的解决方案。他是四本软件开发相关主题书籍的作者，其中包括《The Nexus Framework for Scaling Scrum》。他在科罗拉多州的博尔德市工作，目前担任Scrum.org的企业解决方案副总裁。</p><p>&nbsp;</p><p>Pierre Pureur是一名经验丰富的软件架构师，拥有广泛的创新和应用程序开发背景，浸淫于广泛的金融服务行业，拥有广泛的咨询经验和全面的技术基础设施知识。他过去的工作包括担任一家大型金融服务公司的首席企业架构师，领导大型架构团队，管理大型并发应用程序开发项目，指导创新计划，以及制定战略和业务计划。他是“Continuous Architecture in Practice: Scalable Software Architecture in the Age of Agility and DevOps”（2021年出版）和“Continuous Architecture: Sustainable Architecture in an Agile and Cloud-Centric World”（2015年出版）等书的合著者，并发表了许多关于该主题的文章，并在多个软件架构大会上发表了演讲。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/mva-distributed/\">Location, Location, Location: MVA Considerations for Distributed Processing and Data</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/FRA66pvNbWwJpcOTBC95\">最小可行产品与最小可行架构</a>\"</p><p><a href=\"https://www.infoq.cn/article/6Oq5xWvfSb3l8sGmIGfX\">将 MVP 和&nbsp;MVA&nbsp;应用于遗留应用程序</a>\"</p><p><a href=\"https://www.infoq.cn/article/D6BFm1CKtiHNSmvqfcre\">最小可行架构实践：构建家庭保险聊天机器人</a>\"</p>",
    "publish_time": "2022-09-29 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "不要让框架影响你最初的架构设计",
    "url": "https://www.infoq.cn/article/uYAwX5gSTmUPdVo6wWNs",
    "summary": "<p>在之前的文章中，我们探讨了决策如何成为软件系统架构设计的基础。“<a href=\"https://www.infoq.cn/article/qscls78Qb229FLsOylas?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjQ0MTQ4OTIsImZpbGVHVUlEIjoiaE5HdlBNTU1yeThJVUdGUyIsImlhdCI6MTY2NDQxNDU5MiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.q7FjX8gxZ0WfuLuakL5tXIDFPw90RKDAVylC18kDIkQ\">软件架构可能不是你想象的那个样子</a>\"”一文认为，软件架构描述的是决策而非结构；而“为<a href=\"https://www.infoq.cn/article/m2coyTtgoNAB0IspVGBY?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjQ0MTQ4OTIsImZpbGVHVUlEIjoiaE5HdlBNTU1yeThJVUdGUyIsImlhdCI6MTY2NDQxNDU5MiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.q7FjX8gxZ0WfuLuakL5tXIDFPw90RKDAVylC18kDIkQ\">什么需要关注软件架构</a>\"”一文则指出，进一步挖掘架构中隐含的决策，并迫使这些决策变成显式的，有助于开发团队利用他们从冲刺和迭代中获得的经验数据做出更好、更明智的决策。</p><p></p><p>在团队所做的架构决策中，最重要的是选择他们将要使用的框架，将要引入的模式以及将要使用的策略。对其中每一项的好处和局限性的考量将影响团队的决策和系统最终的架构。</p><p></p><p>框架、模式、策略可以帮助团队更快地设计出应用程序的最小可行架构（MVA），但在使用它们时，团队需要考虑一些可能出现的问题，以免在创建完 MVA 后发现框架、模式和策略做了一些不恰当的隐式决策，而不得不大量进行重写。要进一步了解 MVA，可以读下“<a href=\"https://www.infoq.cn/article/FRA66pvNbWwJpcOTBC95?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjQ0MTQ4OTIsImZpbGVHVUlEIjoiaE5HdlBNTU1yeThJVUdGUyIsImlhdCI6MTY2NDQxNDU5MiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.q7FjX8gxZ0WfuLuakL5tXIDFPw90RKDAVylC18kDIkQ\">最小可行产品与最小可行架构</a>\"”和“<a href=\"https://www.infoq.cn/article/D6BFm1CKtiHNSmvqfcre?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjQ0MTQ4OTIsImZpbGVHVUlEIjoiaE5HdlBNTU1yeThJVUdGUyIsImlhdCI6MTY2NDQxNDU5MiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.q7FjX8gxZ0WfuLuakL5tXIDFPw90RKDAVylC18kDIkQ\">最小可行架构实践：构建家庭保险聊天机器人</a>\"”这两篇文章。</p><p></p><h2>软件框架</h2><p></p><p>软件框架是抽象、可扩展的代码库，开发人员可以把它们应用于特定的目的。没有软件框架，现代软件系统都没法构建，因为它们让开发人员可以专注于增加价值的特性，而不用开发每个系统都需要的所有辅助性软件。框架可以大幅提升生产力，但也是有代价的，代价就是必须按框架要求的方式工作，这可能会起到副作用，如隐蔽的安全漏洞或架构缺陷。</p><p></p><p>不要让框架接管你的应用程序。框架会有接管应用程序的倾向，有时候甚至会影响开发团队看待问题的方式。例如，团队使用了规则引擎框架，它在处理基于数据的决策逻辑时非常强大，但我们也看到，为了使用框架提供的一些吸引人的特性，团队开始将应用程序的所有东西都改造成规则。如此一来就会错过一些更简单、更直接的解决问题的方式。</p><p></p><p>理解框架替你做的决策。在软件架构场景中，框架有替你做架构决策的效果。大多数框架的问题是，它们所做的架构决策是隐式的，不透明。系统也许能接受这些决策，也许不能接受；这就需要你自己做好功课，确定框架是否适合。你甚至需要使用这个框架构建系统的某个关键部分，以此来验证它是否满足系统的 QAR。</p><p></p><p>例如，你可以使用一个开源、可重用的框架（如 Spring 框架）来开发各种 Java 应用程序，它已经成为 Java 社区中非常流行的框架。由于这个框架很大，而且相当复杂，所以开发人员需要接受相当数量的培训并具备丰富的经验才能有效地使用它。</p><p></p><p>Spring Boot 是 Spring 框架的一个扩展，初级水平的开发人员就可以使用它快速创建独立的生产级应用程序。Spring Boot 开发效率高是因为它做了许多设计决策，它选择了“最佳”配置（Spring Boot 设计人员的说法），使用了 Spring 平台和第三方库。</p><p></p><p>选择一个像 Spring Boot 这样的框架可以大大加速应用程序开发和实现，但是开发人员有必要深入了解框架代替他们做出的“隐藏”决策，因为应用程序是需要持续演进的，随时可能需要调整甚或逆转这些决策。在 Spring Boot 中，这些决策包括使用哪些默认配置，需要安装哪些包来提供应用程序需要的依赖。</p><p></p><p>定期关注框架的发展。和任何代码一样，框架也会有固有的缺陷，包括可能已存在多年但未被发现的安全漏洞。和组织自己管理的代码不同，框架常常依赖外部力量完成升级，比如其他公司或开源项目的维护者。当框架有新版本发布时，组织需要将使用该框架的应用程序升级到最新版本。使用框架的旧版本是安全漏洞的主要来源，它们可能带来不为人所注意的重大风险。</p><p></p><p>不要因为大公司在使用就选择一个框架。有些人在选择框架时会落入这样的陷阱：因为有一些知名的大公司在使用这个框架，甚或是开发了这个框架，所以它必然很好。毫无疑问，它在某些方面确实很好，但那家大公司面对的场景和挑战与你可能并不相同。无论你决定是否评估该框架的质量属性，你都是在做一个架构层面的决策。这时，最好是相信你自己的数据，而不是其他人所做的工作。</p><p></p><p>不要让团队的技能衰退。因为框架是以一种透明的方式来处理复杂的问题，所以，使用框架的开发人员就会丧失甚至永远无法培养起理解或开发被框架接管的那部分代码的能力。结果就是，他们可能不理解他们在选择一个特定的框架时自然做出的架构选择。</p><p></p><p>因此，使用框架不能代替合理的架构设计；做架构决策的开发人员必须了解框架所做的权衡，以及在什么情况下，那些权衡将无法接受。关于这方面的知识，有些可以从同其他使用该框架的开发人员的交流中获得，它们了解框架所做的假设，以及这些假设会带来什么局限。也许从社区获得的知识就可以帮我们将某些框架排除在考虑范围之外，但对于任何框架的终极测试都是根据质量属性需求（QAR）来测试系统。</p><p></p><p>计划好替换框架。如果不得不替换框架，如框架出现了你不希望看到的变化，或者即将到达生命周期的终点 / 不再支持，那么理解选择该框架时所作的决策就尤其重要。框架变化不定，如果没有计划好框架过时后如何替换，那么开发团队将面临成本高昂的重写或替换。即使是商业框架也可能走到生命周期的终点，因为并购或是不断变化的商业条件。了解使用替代框架调整系统的成本始终是架构决策的一项重要内容。</p><p></p><p>编程语言已经成了隐藏的框架。将编程语言视为一种框架，这个值得花点时间来说一下。起初，高级语言的功能只比底层硬件抽象多一点点，但它们的范围逐步扩大，到现在，几乎所有的现代语言都包含了大量处理某些问题的库，有些甚至对处理某些问题的库做了专门优化。即使是像 COBOL 这种相对“古老”的语言，也让使用它们的程序员认识到，如果语言可以有效地解决某类问题，就可以节省时间和精力，如果不能，就会增加工作量，而且会导致某种无法解决的问题（例如使用 COBOL 解决矩阵代数问题）。编程语言的选择是一个团队可以做出的最具架构意义的决策之一。</p><p></p><p>生态系统代表框架的极端情况像亚马逊云科技（AWS）或微软 Azure 这样的生态系统提供了可以完美协同的完整框架族。在选择这样的生态系统时，团队隐式做了大量的决策，关于他们的工作方式，以及他们的系统解决各种问题的方式。</p><p></p><p>我们关于框架的所有观点都适用于生态系统，但到了一个很极端的程度：团队需要了解生态系统及其框架所做的决策，因为放弃该生态系统另选一个的代价将是大量的重写应用程序。在应用程序开发的早期，你需要确定自己是否已经准备好做出这样的承诺。</p><p></p><p>关于生态系统，我们需要考虑的一点是，供应商的终极目标是将生态系统的用户留在生态系统内。为此，迁移到一个不同的生态系统而又不大量的重写应用程序几乎是不可能的。一旦决定加入一个生态系统，组织还需要警惕使用生态系统的成本随着时间的推移上升，因为供应商知道，离开生态系统的成本非常高。不应该认为入门级的价格会永远持续下去。</p><p></p><h2>模式</h2><p></p><p><a href=\"https://en.wikipedia.org/wiki/Architectural_pattern\">模式</a>\"是可重用、已证明有效的解决方案，旨在解决特定场景下常见的软件设计问题。架构模式可以看作是架构设计决策包，在使用一个模式时需要完全理解这些决策。理解该解决方案的适用场景至关重要。在合适的场景中使用模式会很有效。它们让开发人员可以利用已经在用的合理的设计方法，更快速地构建出更好的软件。也许，更重要的是，如果模式定义和描述以为大部分 IT 从业者所接受，那么它们就可以提供一种有用的通用语言，来描述软件挑战以及克服挑战的潜在方法。</p><p></p><p>模式可能比你最初想的要难用。模式通常”只是“概念性的；也就是说，它们没有用代码实现，仅仅是算法性质的。这不是说它们缺乏价值，因为有时候，有一个看问题的新方法是制定出优秀解决方案的关键。但是，因为模式只是概念性的，所以一般来说，用代码实现它们有时候相当具有挑战性；模式是通用的，为的是可重用；实例化模式，创建适用于特定场景的设计需要相当的经验。</p><p></p><p>此外，如果未能充分隔离问题的话，当模式运用不恰当时，就可能会导致非必要的复杂架构设计和费解的应用程序代码；模式越是通用，潜在的问题就越不可能隔离，这反过来降低了模式的通用性和可重用性。此外，模式可能并未考虑它们提供的解决方案对部分 QAR 的影响，如可扩展性或性能，可能需要辅以适当的策略来解决这种不足。提出诸如“它有帮助吗？”、“它有用吗？”和“它可测试吗？”这样的问题，有助于评估一个模式的潜在用途。</p><p></p><p>模式也做决策。理解与特定模式相关的设计决策，以及在实现模式时需要做出的决策，是成功使用一种模式的关键因素。就像在<a href=\"https://www.infoq.cn/article/qscls78Qb229FLsOylas?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjQ0MTQ4OTIsImZpbGVHVUlEIjoiaE5HdlBNTU1yeThJVUdGUyIsImlhdCI6MTY2NDQxNDU5MiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.q7FjX8gxZ0WfuLuakL5tXIDFPw90RKDAVylC18kDIkQ\">之前的文章</a>\"中提到的那样，架构的本质是对产品的技术方面进行定义和限制的一系列决策。不管团队采用什么方法，这些决策都存在。使用一种模式的结果就是团队做出了大量设计决策，有意的或是默许的。</p><p></p><p>例如，分层架构模式是一个在软件架构师、设计人员和开发人员中间非常流行的模式。它将软件系统分成多个单元（“层”），每个层都可以单独开发和演进，层与层之间的交互降至最低。模式本身并没有规定应该使用哪一层，以及应该实现多少层。它也没有指定应该使用什么技术实现这些层，层与层之间如何交互，或者应用程序代码应该如何打包并运行。该模式经常实现为 4 层架构（展现层、业务逻辑层、数据访问层、数据存储层），代码则打包在 3 层中（展示层、应用程序层、数据层），如图 1 所示。</p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/articles/frameworks-require-decisions/en/resources/1Layered_Architecture-1658154149807.jpg\" /></p><p>分层架构模式实现示例</p><p></p><p>不过，诸如多少逻辑层（layer）、多少物理层（tier）或者应该使用什么技术这样的决策留给了实现团队，他们要根据自己需要满足的 QAR 来做出。因此，使用这个模式可能会产生不同的系统设计，这由上述决策决定。</p><p></p><p>在模式的概念和实现之间，有些东西可能会丢失。不单是模式会如此，但使用模式放大了这个问题：在分层架构模式中，层次本身似乎非常清晰，但在写好的代码中就几乎没什么东西能实际地区分或硬性划分层了，可执行代码中更是如此；层只是开发人员头脑中的一个概念。因此，通常很难测试应用程序开发是否严格遵守了这个模式。如果对团队而言严格遵守模式很重要，就要发明一种方法来评估模式遵守情况。</p><p></p><h2>策略</h2><p></p><p><a href=\"https://resources.sei.cmu.edu/asset_files/TechnicalReport/2003_005_001_14213.pdf\">策略</a>\"是实现一个或多个质量属性需求的决策。它们比模式更具体，比实现更简单，但可能产生需要处理的副作用。它们提供了满足 QAR 的有效方法，以软件架构师和工程师多年来获得的知识和经验为基础。</p><p></p><p>务必选择恰当的架构策略。事实证明，架构策略的选择和应用是处理特定质量属性需求的有效方法。架构策略是一个知名的设计理念，这来自卡内基梅隆大学软件工程学院（SEI/CMU）的研究，最初是为了解决架构模式存在的一些不足。一个架构策略是一个影响系统实现一个或多个质量属性需求的决策。通常（遗憾的是并非总是如此），决策会分门别类地记录在文档中，为的是促进这些知识在架构师之间重用。</p><p></p><p>例如，数据分发是一种有效可扩展性策略。数据分发涉及针对具体的服务进行数据分区，根据某些标准划分数据库行，如客户标识。这个策略应该用于处理大型工作负载时可能遇到问题的特定数据库。首先关注数据库可扩展性是处理特定可扩展性需求的好方法，因为数据库通常是软件系统中最难扩展的组件。</p><p></p><p>架构策略帮你解决质量属性需求。功能性需求通常有很好的文档记录，并且经过了业务干系人的仔细审核，而 QAR 可能没有那么好的文档记录，也没有经过那么仔细的审核。它们可能只是通过一个简单的列表提供出来，只有一页。它们没有经过仔细审核，往往都是用一些陈词滥调进行描述，如“必须可扩展”、“必须高可用”。</p><p></p><p>然而，我们的观点是，QAR 推动了架构设计。我们需要确保架构决策能满足质量属性。这些决策常常是折中方法，因为一个可以更好地实现某一项 QAR 的决策可能对实现其他的 QAR 存在不良的影响。准确理解 QAR 和需要做出的权衡是妥善设计系统架构最为重要的前提条件之一。架构决策常常是以找出可以平衡竞争性 QAR 最不坏的方法为目标。每一个决策都可能有副作用，在某种程度上使决策失效。没有所谓的“正确答案”，只有“对于特定场景已足够”的决策。这些决策可以利用架构策略来实现，在使用策略实现它们之前，完全理解决策很重要。还有一点也很重要，就是要时刻记住持续架构原则 #3“延迟设计决策，直到它们绝对必要”，切忌用不必要的策略进行过度设计。</p><p></p><h2>小结</h2><p></p><p>在真正需要之前，不要对任何特定的框架、模式或策略过多投入。相反，要利用 MVA 的概念做出实现 MVP 所需的最少决策，了解正在做出的每一项决策，然后由自己决定那些决策是否适合实现你的 QAR。</p><p></p><p>在某种程度上，可以将框架、模式和策略进行组合。例如，可以用 Spring Boot 开发使用了分层架构模式的软件系统的某些部分。如果模式没有考虑它提供的解决方案对某些 QAR 的影响，则可以使用策略来处理模式的不足。不过，你要时刻记住，不管是框架还是模式，它们替你做的那些决策，其中有一些在你试图组合框架和模式时可能会相互冲突。</p><p></p><p>随着你演进 MVP，增量地采用框架、模式和策略，满足产品增量演进的需求即可。涉及生态系统的决策尤其要谨慎，因为那是些不从头再来就很难逆转的决策。而且，自始至终都不要忘记自己的目标，要验证关于框架、模式和策略的假设是否有效，你决定使用它们的决策是否有助于满足你的 QAR。</p><p></p><p>作者介绍：</p><p></p><p>Kurt Bittner 拥有超过 30 年短周期交付软件的经验。他帮助过许多采用敏捷软件交付实践的组织，包括大型银行、保险、制造和零售企业，以及大型政府机构。他曾为大型软件交付企业工作，包括甲骨文、惠普、IBM 和微软，并曾是 Forrester Research 公司的技术行业分析师。他的重点领域是帮助组织建立强大、自组织的高效团队，交付受客户欢迎的解决方案。他撰写了 4 本与软件开发相关的书，包括《Nexus 规模化 Scrum 框架》。他现居科罗拉多州博尔德市，并担任 Scrum.org 的企业解决方案副总裁。</p><p></p><p>Pierre Pureur 是一位经验丰富的软件架构师，拥有丰富的创新和应用程序开发背景、广泛的金融服务行业经验、广泛的咨询经验和全面的技术基础设施知识。他曾担任一家大型金融服务公司的首席企业架构师，领导大型架构团队，管理大型并发应用程序开发项目，指导创新计划，以及制定战略和业务计划。他是“Continuous Architecture in Practice: Scalable Software Architecture in the Age of Agility and DevOps”（2021 出版）和“Continuous Architecture: Sustainable Architecture in an Agile and Cloud-Centric World”（2015 出版）的合著者，并发表了许多文章，以及曾在多个软件架构会议上发表相关演讲。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/frameworks-require-decisions/\">https://www.infoq.com/articles/frameworks-require-decisions/</a>\"</p>",
    "publish_time": "2022-09-29 09:36:47",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Istio 正式成为 CNCF 孵化项目",
    "url": "https://www.infoq.cn/article/tfJtw1pWmbEIFNSxDK8q",
    "summary": "<p>在今年4月，<a href=\"https://www.infoq.cn/article/1bm54C5umd9jjhhLIA5k\">谷歌</a>\"提议将 Istio 捐赠给 CNCF，该想法得到了社区众多开发者的关注和支持。经过近半年的尽职调查，9月28日，<a href=\"https://www.cncf.io/blog/2022/09/28/istio-sails-into-the-cloud-native-computing-foundation/\">CNCF正式宣布</a>\"技术监督委员会(TOC) 已投票用过将<a href=\"https://www.infoq.cn/article/zkpH5KTc2wKM1X9KFy2C\">Istio</a>\"作为 CNCF 孵化项目。</p><p>&nbsp;</p><p>Istio 服务网格在逻辑上分为数据平面和控制平面。数据平面由一组智能 Envoy 代理组成，最常部署为 Sidecar。这些代理调解和控制微服务之间的所有网络通信。控制平面则管理和配置代理以路由流量。</p><p>&nbsp;</p><p>近期，Istio 宣布引入全新的无 sidecar 数据平面模式<a href=\"https://www.infoq.cn/article/x9fTDSQNkQdpp0QWtrSs\">Ambient Mesh</a>\"，通过将数据平面功能从 sidecar 容器转移到网络基础设施来解决常见的操作挑战。Ambient mesh 已经作为一项实验性功能发布，目前正在社区开发中。Istio 也将继续支持 sidecar 部署模式，这两种模式将无缝互通。</p><p>&nbsp;</p><p>Istio 始于 2016 年，最初由 Google、IBM 以及构建Envoy 代理的 Lyft 团队共同开发。2018年6月，Istio 发布了1.0版本，2019 年，Istio 成为整个GitHub 中<a href=\"https://octoverse.github.com/2019/#:~:text=istio/istio\">增长速度第四快的开源项目</a>\"。如今，已经有190 多家公司承诺使用 Istio，其中 20 多家供应商为其 Kubernetes 平台提供托管的 Istio 产品或插件。</p><p>&nbsp;</p><p>CNCF 介绍了 Istio 当前的主要成绩：</p><p>&nbsp;</p><p>来自 15 家公司的 85 名维护者&gt;8,800 名个人捐款者&gt;40,000 个 Pull request&gt;20,000 issue&gt; 超过 260 个版本&gt;33,000 颗 GitHub star&gt;8,500 名 Slack 成员</p><p>&nbsp;</p><p>根据介绍，当前 Istio 社区重要的贡献来自：</p><p></p><p>技术公司和云计算厂商，包括红帽、思科、VMware、英特尔、华为、腾讯、阿里巴巴和 DaoCloud为将 Istio 解决方案推向市场而成立的公司，包括 Tetrate、Aspen Mesh 和 Solo.ioIstio 的终端用户，包括 Auto Trader UK、Salesforce、SAP 和 Yahoo!</p><p>&nbsp;</p><p>“我们很高兴将谷歌的行业定义的云原生项目堆栈——Kubernetes、Istio 和 Knative，统一到 CNCF 中。”&nbsp;谷歌云的开发者关系主管兼 Istio 指导委员会成员 Craig Box 表示，“我们团队一直致力于围绕 Kubernetes Gateway API 将服务网格社区聚集在一起，我们期待着看到并推动 CNCF 项目之间更多的此类合作。这对 Istio 及其社区来说是一个重要的里程碑，我们很高兴能在项目的发展中迈出下一步。”</p><p>&nbsp;</p><p>华为云首席技术官 Bruno Zhang表示，“Istio 是云原生生态系统中的重要开源项目之一。华为云于 2018 年开始为 Istio 贡献。通过互联网、金融、汽车等多个行业的用例，Istio 展示了其在企业数字化和应用现代化方面的潜力。我很高兴看到 Istio 项目被 CNCF 接纳。我们将继续为 Istio 做出贡献，并与 CNCF 合作，促进社区和更多行业的使用案例。”&nbsp;</p><p></p><p>参考链接：</p><p>https://www.cncf.io/blog/2022/09/28/istio-sails-into-the-cloud-native-computing-foundation/</p>",
    "publish_time": "2022-09-29 10:04:58",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "《2022 元宇宙行业人才发展报告》出炉：C语言、Java等底层技术是硬通货，相关岗位平均月薪1.8万元",
    "url": "https://www.infoq.cn/article/uKVmglLJtPzMtxUs4uEd",
    "summary": "<p><a href=\"https://www.infoq.cn/article/falV4GjWtHUixPIMkh9V\">元宇宙</a>\"（Metaverse）是近两年最火的概念之一。所谓元宇宙，指的是人类运用数字技术构建的，由现实世界映射或超越现实世界，可与现实世界交互的虚拟世界，具备新型社会体系的数字生活空间。</p><p></p><p>近日，智联招聘正式发布《2022 元宇宙行业人才发展报告》（以下简称“报告”），深度解析元宇宙领域职场现状。报告显示，仅3成职场人对元宇宙比较了解；2022元宇宙相关岗位平均薪资18515元/月，深度学习岗平均月薪39971元，位居榜首；VR/AR人才需求占据半壁江山，元宇宙社交紧随其后；C语言、Java等底层技术是硬通货，3D建模、特效设计技能至关重要。</p><p></p><h2>仅 3 成职场人对元宇宙比较了解</h2><p></p><p></p><p>报告发现，仅 30.2% 受访者对元宇宙行业比较了解，26.0%的受访者表示完全不了解。值得注意的是，5.5%的受访者认为其是短期概念炒作、8.1%的受访者认为有 点圈钱的趋势，这表明元宇宙的发展也伴随着质疑的声音。而从性别层面来看，男性对行业的了解程度相对较高，“了解一点、比较了解”的比例高达 78.6%。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8d/8d7c33a87df6b2a80ca56ae9f33bd0c5.png\" /></p><p></p><p>此外，调研数据显示，80.8%受访者愿意从事元宇宙行业。Z 世代的这一比例更高，分别有 89.8%的 95 后、81.0%的 00 后愿意从事元宇宙行业。</p><p></p><h2>2022 元宇宙相关岗位平均薪资 18515 元/月</h2><p></p><p></p><p>智联招聘数据显示，2022 年 1-7 月全平台元宇宙相关岗位的平均招聘薪酬为 18515 元/月。薪资 TOP20 岗位中，<a href=\"https://xie.infoq.cn/article/e0b04fae7a26d4648103649d6\">深度学习</a>\"、机器学习、数据架构师、移动开发、机器视觉等岗位，平均薪酬均超过 3 万元，深度学习更以 39971 元/月位列榜首。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b0/b0b974f55f97bb4cb7b39901da9a0941.png\" /></p><p></p><p>从技能层面看，不同技能的平均薪酬略有差别。研发岗中，要求掌握“模式识别” (属人工智能技术范畴，包括语音识别、指纹识别、数字水印等)技能的岗位平均招聘薪酬达 39546 元/月，远超第二名“音视频编解码”(33015 元/月)。薪资 TOP 10 技能中 有 8 种技能平均招聘薪酬超过 3 万元/月，足见以人工智能等底层技术为支撑的元宇宙发展 “钱”景。此外，技术岗对求职者的要求不仅限于编程、算法等技能，还需要熟悉更多开 发环境，复合型人才更“吃香”。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/7a/7a1ea5485a8d2bf69d9655778b0eae20.png\" /></p><p></p><h2>VR/AR 人才需求占据半壁江山</h2><p></p><p></p><p>报告指出，\"元宇宙之心 MetaverseHub\"发布的《2022 年中国元宇宙最具创新力企业》榜单均为主营业务从事元宇宙的企业，分析他们的招聘岗位分布，能进一步了解元宇宙企业的岗位特征。</p><p></p><p>数据显示，招聘体量较大的细分领域包括 VR/AR、<a href=\"https://xie.infoq.cn/article/ecafc9fa4d48466af53763fb0\">元宇宙社交</a>\"、游戏、虚拟人、 数藏平台，今年 1-7 月，这些细分领域的招聘职位数占比分别为 57.5%、32.7%、4.9%、 3%、1.9%。技术上起步更早的 VR/AR、受资本青睐和投注的元宇宙社交，占据元宇宙产 业优先发展的半壁江山，游戏、虚拟人、数藏平台等“后起之秀”的发展同样不容小觑。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/32/329900690574d250e89d19e9df645737.png\" /></p><p></p><p>具体而言，在元宇宙各细分领域招聘 TOP10 岗位中，VR/AR 企业以软件及硬件研发工程师为主，包括算法工程师、Java、硬件工程师等。整体 VR/AR 企业招聘岗位中，软件、硬件工程师占 2 成。游戏、虚拟人、元宇宙社交领域都对游戏/设计人才需求高，如 U3D(游戏开 发引擎)、游戏设计开发、3D 设计师等。</p><p></p><p>元宇宙社交企业招聘 TOP 榜不乏游戏岗，与游戏具有趣味性和亲和力、能快速缩短社交链路、直击用户心智等优势相关。数藏平台则对运营人才需求量大，作为 NFT 的本土化发展形态，数藏平台更多在运行数字藏品的宣传和售卖，因此客服、社区运营、用户运营等岗位占比超过 3 成。</p><p></p><h2>C语言、Java等底层技术是硬通货</h2><p></p><p></p><p>报告显示，在元宇宙相关岗位中，研发、视觉/交互/设计分别以 38.3%、17.9%的占比占据主力，其次为产品(7.5%)、运维/测试(7.1%)、运营(3.3%)等。</p><p></p><p>从细分岗位看，U3D(游戏开发引擎)职位占比最高，为 12.1%。U3D 是基于虚拟引擎进行游戏开发的岗位，也支持 VR/AR 相关应用的开发，前景广阔，人才需求相对较高。UE4 同样基于虚拟引擎，侧重于端游及高端手游，但岗位技能要求较高，有一定求职门槛。</p><p></p><p>具体技术方面，研发岗位中招聘方所看中的技能排行前列的为 C/C++、Unity3D(U3D)、Java、Python，基本为程序员“通用技 术”。而设计岗则更需要 3DMAX、MAYA、UE4、3D 建模等方面的人才。可见，掌握编程及设计的“程序语言”，就找到了元宇宙的入门密码。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6b/6bae8461dfe65fe32bb27ece85e175b6.png\" /></p><p></p>",
    "publish_time": "2022-09-29 10:38:15",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "“羊了个羊”背后的国产3D引擎Cocos：这绝不是团队最高光的时刻",
    "url": "https://www.infoq.cn/article/JMWaHRtAde7c6batjHxU",
    "summary": "<p>嘉宾 ｜林顺、王庆利、凌华彬</p><p>编辑 ｜赵钰莹</p><p></p><p>最近的一款微信小游戏“羊了个羊”把不少人虐得“死去活来”。</p><p>&nbsp;</p><p>微信官方小程序数据显示，9月14日有2600万用户参与了挑战，短时间内涌入的玩家过多导致游戏服务器两天崩了三次。</p><p>&nbsp;</p><p>随后，公司紧急发布招聘启事，广泛吸纳“Go服务器端开发工程师”和“CocosCreator 客户端开发工程师”，这表明该游戏底层基于<a href=\"https://www.infoq.cn/article/TCTl*c2rT89t1jCWK24C\">Cocos引擎</a>\"。</p><p>&nbsp;</p><p>根据媒体爆料，该游戏背后的研发人员只有三个，三个人就能完整开发这样一款小游戏也让Cocos引擎再次吸引了业内的广泛关注。</p><p>&nbsp;</p><p>当然，这绝不是Cocos引擎最高光的一次，毕竟其曾一举推动中国手游市场崛起，众多现象级游戏《捕鱼达人》、《梦幻西游》、《开心消消乐》均基于Cocos引擎，而且是<a href=\"https://www.cocos.com/\">国内首个支持任天堂 Switch 平台的 3D 商业引擎</a>\"。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/22/22b0a8217c3632d96061b09c2dd00c3d.png\" /></p><p></p><p>近日，InfoQ有幸采访到了Cocos CEO林顺、引擎团队技术负责人凌华彬、XR团队技术负责人王庆利，一起聊聊这款成立第一天就开源，支撑了众多现象级游戏的商业引擎，其背后的技术团队过去及现在都做了哪些思考。</p><p></p><h2>“羊了个羊”背后的技术，Cocos十年前就具备了</h2><p></p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/80/e1/80a2f5cbdcd1e1510a73c1fc836b92e1.jpg\" /></p><p></p><p>“其实，我们在2011年引擎的最初版本，就足以支撑‘羊了个羊’这样一款游戏的运行”。</p><p>&nbsp;</p><p>说这话的是凌华彬。多年前，他在法国开发HTML5应用时被推荐使用了 Cocos2d-html5这样一款中国引擎，回国后就毫不犹豫地加入了Cocos团队。</p><p></p><p>这句话也没有夸大的成分。因为2011年前后，Cocos引擎就支撑起了另一款现象级游戏——捕鱼达人的走红。</p><p>&nbsp;</p><p>Cocos 引擎的前身是阿根廷人 Ricardo Quesada 在 2008 年推出的用于 iOS 平台的 Cocos2d-iPhone。2010 年，当时的<a href=\"https://qcon.infoq.cn/2022/shanghai/track/1462\">王哲（Cocos创始人，QCon上海专题出品人）</a>\"和林顺在联通沃 Phone 操作系统团队，当时团队看到一个需求，有些开发者在开发了 iOS 游戏后，想要移植到安卓平台，但当时并没有好用的移动跨平台游戏引擎。他们选择加入 Cocos 社区，创建了跨平台的 Cocos2d-x 引擎分支，并开源了出来。</p><p></p><p>随着捕鱼达人的爆火及其开源的定位，<a href=\"https://www.cocos.com/products#Cocos2d-x\">Cocos2d-X</a>\"被越来越多的开发者熟知。</p><p>&nbsp;</p><p>2015年之前，Cocos&nbsp;的主要特色是具备优秀的兼容性、跨平台、高性能、轻量化，并且当时非常具有远见地投资了安卓生态，大大降低了跨平台手机游戏的开发门槛，也催生了绝大多数中国当前的 Top 游戏公司，可以说促进了中国手游的崛起。在2014年的统计中，其在应用商店 Top 1000 的头部手游里占有率达到了70%。</p><p>&nbsp;</p><p>直到今天，其跨平台的特性依旧被开发者称赞不已。“羊了个羊”由于使用了 Cocos 进行开发，能够同时打包成不同平台的版本，包括原生/小游戏/Web端等，大大降低了开发不同平台版本的时间，使得其在继小游戏之后，可以迅速发布APP版本，目前APP版本在TaTap的预约已经突破10万。</p><p>&nbsp;</p><p>在“羊了个羊”爆火之后，林顺也带着团队与对方交流过，这样一款现象级游戏的诞生与很多非技术的因素有关，因为早在这之前，Cocos的官方线上商店中也出现过一款玩法与之相似的游戏，但就是没火。</p><p>&nbsp;</p><p>Cocos作为游戏引擎能做的就是提供一个好的技术保障，比如不同平台的加载性能和画面表现等。“羊了个羊”走红之后，与Cocos Creator直接合作的平台很快就看到了该游戏上架，没有直接合作的平台也在两三天内陆续上线，还出现了3D等各种版本，这都是引擎层设施成熟的表现。此外，Cocos的商店中上线了大量与之相关的模版、设计、玩法等内容，“单纯从开发角度来看，未来开发同样一款游戏几个小时就可以搞定“，林顺在采访中表示。</p><p>&nbsp;</p><p>如果Cocos的目标只是支撑几个现象级的游戏，或许技术迭代也就止步于十年前了。即便如此，好像也没有什么问题，2D在今天依旧存在广阔的应用空间，但他们想做的是一款世界级的游戏引擎。</p><p>&nbsp;</p><p>于是，整个团队开始探索3D化，这也让他们遇到了第一次低谷。</p><p></p><h2>数次尝试、重写，造就国内首个支持 Switch 平台的 3D 商业引擎</h2><p></p><p>&nbsp;</p><p>今年7月份，Cocos 宣布Cocos Creator for Nintendo Switch 版本正式开放申请，Cocos 也成为国内首个支持任天堂 Switch 平台的 3D 商业引擎。</p><p>&nbsp;</p><p>做3D引擎，这是Cocos过去数年的技术执念，而执念往往是需要历经艰难才可以达到的。</p><p>&nbsp;</p><p>2015年，顺风顺水惯了的Cocos第一次开始尝试3D化，想在 2D 的基础上去做 3D 引擎，然而两者的核心机制有根本性的不同，当时的引擎和编辑器设计还比较传统，技术上碰壁不少。雪上加霜的是，其竞争对手——跨平台游戏引擎 Unity 也正式开始大举进军移动市场。</p><p>&nbsp;</p><p>整个团队迅速调整路线，进入第二阶段，尝试打造一个现代的编辑器，并于2016年推出了 Cocos Creator，引擎的架构也彻底更新成了数据驱动、组件式的现代架构。</p><p>&nbsp;</p><p>在<a href=\"https://www.cocos.com/products#CocosCreator\">Cocos Creator</a>\"的基础上，团队于2017年重新开始挑战3D，将整个 3D 引擎底层从零开始重新搭建，2019 年发布了 3D 化的引擎分支，2021 年正式将 2D 和 3D 合并发布 Cocos Creator 3.0。最终经过五年的积累，才达到今天 Cocos Creator 3.6 的阶段——一个完全现代化的 3D 引擎。</p><p><img src=\"https://static001.infoq.cn/resource/image/03/60/035641da8b3b29edb320e0cfd951dd60.gif\" /></p><p></p><p>在Cocos引擎团队看来，3.6版本是十分重要的里程碑版本，相较于前一版进行了多个方面的大幅进化，比如：</p><p>&nbsp;</p><p>性能优化：原生化，2D &amp; 3D 性能的全面提升<a href=\"https://qcon.infoq.cn/2022/shanghai/track/1462\">渲染表现力提升</a>\"：CSM 级联阴影、GGX 反射卷积图、Surface Shader 材质定制、各向异性光照产品驱动开发：编辑器预览，粒子噪声图，动画嵌入播放器，多语言编辑器</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/41/f6/41cdd1d00dddfde958d16df3a4fe78f6.gif\" /></p><p>3.6版本中的CSM 级联阴影演示</p><p>更多功能请访问：<a href=\"https://www.cocos.com/cocos-creator-3-6#10231\">https://www.cocos.com/cocos-creator-3-6#10231</a>\"</p><p>&nbsp;</p><p>在这个过程中，最难的是“开着飞机换引擎”，重构面临的技术挑战巨大，不仅目标难度高，还需要保障切换顺畅，也就是在保证兼容性的基础上完成升级。此外，团队还需要把酷炫功能做到足够好用，比如编辑器预览功能在3.1版本中就做过，但因为体验不好关闭了，3.6版本又进行了重新优化。</p><p>&nbsp;</p><p>时间周期跨度最大的则是原生化。2021年夏天，团队就开始讨论原生化的技术方案，做了三四种预案，针对不同的技术方向设置了不同的原生切分层级。随后的一年时间，团队开始了原生层的重写，进行了多个阶段和多个模块的重构，并且逐阶段进行大量的测试验证，原生层代码增加了两倍多。</p><p>&nbsp;</p><p>然而到更上层的2D性能优化时，团队最先感受到的就是挫败感，因为性能出现了大幅度的倒退。团队又开始针对各种性能热点做大量的分析和验证，逐步提升到远超之前的性能表现。</p><p>&nbsp;</p><p>“其实，也有一些重构的尝试最终以失败告终，没有进入到版本中。但我们相信引擎的研发就是充满挑战和失败的，但我们会不断尝试新的方式，持续迭代。”</p><p>&nbsp;</p><p>在开发过程中，团队积极听取用户的反馈，比如接触到一位 3D MMO 的 CP有很多更高级的需求，尤其是粒子、地形方面，团队临时调整了优先级，将这些需求排进去。同时为了更好地满足用户需求，引入了产品角色把控需求分析和解决方案设计，并且跟踪到实现的验收和交付，这种方式保障了实现的功能切实满足用户需求。</p><p>&nbsp;</p><p>这些层面的优化不仅让Cocos引擎的性能大幅提升，并且给引擎带来了更高的天花板，在跨 Web 和 Native 两个层面都尽量用原生的方式来实现，Web 端使用 JS，Native 端使用 C++，预料到做好统一很困难，所以团队采用了渐进式的方式来实现。</p><p>&nbsp;</p><p>至于为什么选择在这个时间点做这件事情，凌华彬在采访中表示，未来Cocos引擎会承载更多重度的游戏和元宇宙应用场景，比如开放世界、大地形、复杂的桌面级渲染管线。同时，Web 端也会开始使用 WebGPU，团队使用 Wasm 技术将原生的 WebGPU 管线编译到 Web 端运行，大大统一了 Web 和 Native 的渲染器实现，原生化是这一切的基石。</p><p>&nbsp;</p><p>如此所说，我们是时候考虑元宇宙时代的到来，游戏引擎可以在其中做些什么事情了。</p><p></p><h2>元宇宙的未来，Cocos的探索不止于游戏</h2><p></p><p>&nbsp;</p><p>“游戏引擎是元宇宙时代重要的基础设施，而XR则是非常重要的入口”，林顺在采访中表示。</p><p>&nbsp;</p><p>不久前，Cocos面向开发者推出了Cocos CreatorXR 社区版，在开发者社区引发了激烈讨论，有开发者表示终于等到了XR版本，也有的惊讶于Cocos在研究XR技术，甚至还有开发者当天就跑通了开发流程。在开发者社区经过一段时间的试用后，Cocos 上周发布了<a href=\"https://www.cocos.com/xr#10316\">Cocos CreatorXR 正式版</a>\"，并且还对首批试用企业提供技术对接。</p><p>&nbsp;</p><p>采访中，王庆利表示，很多开发者会在意当前XR版本支持哪些设备，是否有预览功能以便能快速上手运行，目前该版本已支持包括 Rokid Air、Meta Quest2、Huawei VR Glass、Pico Neo3、Monado 等多个品牌的设备兼容适配，未来也会根据开发者的反馈进行更新。</p><p>&nbsp;</p><p>如今， <a href=\"https://qcon.infoq.cn/2022/shanghai/track/1437\">VR/AR 品牌全面开花</a>\"，而各家均有各自的开发 SDK 和交互方式，对于开发者来说，适配各家设备是一项极其繁琐且耗时耗力的工作。Cocos 引擎的 \" 一次开发跨平台部署 \" 将大幅提高适配效率。</p><p>&nbsp;</p><p>此外，Cocos CreatorXR 智能支持 GLES3、GLES2、Vulkan1.0、Vulkan1.1 等渲染后端，XR 应用启动时将根据打包选项采用当前设备适配的最佳图形 API；而基于 Web 端预览功能，开发者可以在 Web 端使用鼠标、键盘模拟头戴显示器、手柄控制器等组件，快速测试优化 XR 内容。</p><p>&nbsp;</p><p>在刚刚结束的<a href=\"https://www.worldaic.com.cn/\">2022 世界人工智能大会（WAIC）</a>\"的现场，Cocos 基于现有的能力打造的线上版「元生无界」，让与会者初体验了元宇宙时代的参会方式。</p><p>&nbsp;</p><p>「元生无界」大世界包含张江区域和临港区域，实现了虚拟角色创建、线上参会、空间互动、社交语聊等相关功能。根据会议门票指引，用户可前往会堂大厅中的会议室进行线上参会。 进入大会议室入座后，可以切换沉浸视角、真实视角(角色第一视角）进行观看。&nbsp;</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/92/0b/92e26a83139c114a2a7868591dc49b0b.gif\" /></p><p></p><p>XR 产业历经多年的发展，VR 已形成一定的内容生态，我们已经看到该技术在教育、游戏等方向的尝试，确实可以让开发者与设备正向跑起来。</p><p>&nbsp;</p><p>但 AR 却几乎处于起步状态。 如全球最火的 AR 游戏《Pokemon GO》，虽然收入已超过 60 亿美元，但用户并非为了 AR 买单，好在我们也看到了其在工业展览设计等领域的应用。</p><p>&nbsp;</p><p>未来，Cocos会与合作伙伴一起去为元宇宙的不同场景提供解决方案或者是模板，持续提升该领域内容的生产效率，提升整体的内容品质。</p><p>&nbsp;</p><p>“我们希望可以做好元宇宙时代的国产基础设施，进而促进整个行业的发展。最终希望能够提供一个集策划、开发、打包等工具链一体化的云服务。”</p><p>&nbsp;</p><p>而在元宇宙世界成型之前，Cocos团队会先带着众多开发者及他们优秀的创意一起出海。</p><p></p><h2>从立足全球开源到带着开发者出海</h2><p></p><p>&nbsp;</p><p>从落地第一天起，Cocos引擎就选择开源，在全球范围内获得了广泛受众，并在无形中推动了整个手游行业的发展。</p><p>&nbsp;</p><p>全球化的服务能力和开源氛围吸引了王庆利、凌华彬等一大批优秀工程师的加入，而这个决定在林顺看来是过去多年最正确的选择之一。</p><p>&nbsp;</p><p>开源让Cocos足够中立，并得以站在更广阔的空间以全球化的视角看待自己所做的事情，虽然会带来额外的成本投入，毕竟海外市场与国内市场在研发运营和社区生态维护层面存在差异，但这也让整个团队的技术体系得以与世界接轨。</p><p>&nbsp;</p><p>“这其实是一个很重要的选择，当然有些人觉得可能我并不想这么做，毕竟这不一定能让我获得最好的商业回报。”</p><p>&nbsp;</p><p>通过开源，Cocos引擎的代码获得了大量社区优秀技术专家的贡献，也让整个团队有机会接触到海外优秀的企业，并与之建立合作关系，这在Cocos的国际化方面起到了非常正向的作用。</p><p>&nbsp;</p><p>如今，Cocos带着更广大的开发者和他们优秀的想法一起出海。采访中，林顺表示，首先，Cocos针对海外平台同样提供了跨平台部署的能力，这也是Cocos一直坚持的基础保障；其次，不同的针对开发者在做的不同内容，Cocos可以提供很多本地化的服务，比如多语言插件，更好地将内容针对不同的平台做部署；最后，Cocos与海外顶尖的技术企业保持着良好的合作关系，以Google为例，Cocos和Google长期以来一直保持着密切的合作，特别是在全球化方面的支持。近期又在增强Web端服务方面达成了新的合作，针对用户在 Web端的变现需求，Google 将官方制作服务于 Cocos 开发者的Google AdSense插件，届时开发者只需要简单勾选即可一键集成，体验到无缝连接的Web端变现服务。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f1/f117dcbb9bf069ebc6cf7fba54ad77a0.png\" /></p><p>v3.6 提供了内置的多语言工具 Localization Editor（L10n）示例</p><p></p><h2>未来规划</h2><p></p><p>&nbsp;</p><p>在编辑器内核层面，团队接下来会在资源管线、引擎容器、场景数据三个方向进行优化。</p><p>&nbsp;</p><p>在技术层面，Cocos依旧会将游戏作为主要方向，不断完善工具链及3D基础设施，以应对越来越高的自动化要求，并在此基础上联合合作伙伴提供更加完善的服务。</p><p>&nbsp;</p><p>在生态层面，Cocos今天已经从游戏引擎变成一款3D通用渲染引擎，生态不仅包含游戏，也包含车机、虚拟偶像、元宇宙等各种方向。除了服务好各行各业的不同诉求，Cocos将针对不同行业及场景提供对应的解决方案，帮助大家更高效的进行内容创作。</p><p>&nbsp;</p><p>在XR层面，团队的主要目标是让开发者更方便、低成本、高效地使用XR；将元宇宙涉及的相关工具进行集合打通；在不同设备上的运行状态更加轻量化和低功耗。</p><p>&nbsp;</p><p>“游戏引擎是基础设施，未来我们希望可以触达更广阔的行业，支持更多的开发者创作出无与伦比的精彩内容，这是我们永远期待且满怀热忱的事情。”</p><p>&nbsp;</p><p>在11月25日-26日的<a href=\"https://qcon.infoq.cn/2022/shanghai?utm_source=infoq&amp;utm_medium=conference\">QCon全球软件开发大会（上海站）</a>\"上，我们特别设置了【走向元宇宙：实时渲染】专场，由Cocos创始人王哲担任出品人。实时渲染是图形数据的实时计算和输出，它是元宇宙的重要基础技术之一——元宇宙中有精美的场景，有大量的模型交互，逼真实时地呈现这一切至关重要。</p><p></p><p>如果你对这一话题感兴趣，欢迎访问<a href=\"https://qcon.infoq.cn/2022/shanghai?utm_source=infoq&amp;utm_medium=conference\">大会官网</a>\"或扫描下方二维码购票，感兴趣的同学也可联系票务经理：+86 18514549229。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/49/1f/49b939bca965521e71f16ef6c29f3f1f.jpg\" /></p><p></p><p></p><p>&nbsp;</p>",
    "publish_time": "2022-09-29 13:40:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "开发者有话说｜谢谢当年那个埋下对科技热爱的种子那个少年",
    "url": "https://www.infoq.cn/article/74cd1225ec4d3eb2a923506b2",
    "summary": "<p></p><h2>再次遇到命题作文</h2><p></p><p>本次主题——阅经千帆，依然少年。看到这个题目，思绪拉回良久，脑海一直在想：少年时期的我是否就注定了会走向开发者这条路呢？如今我已出走十年，是否依旧热血呢？</p><p></p><p>每次一到<a href=\"https://xie.infoq.cn/article/5e1e13326b5b1afbb1ec95c9a\">主题征文</a>\"的时候，就仿佛回到了高中时期的命题作文。想起那一个个被考试支配的考场，绞尽脑汁才能完成 800 字以上的“文章”，试卷提交的瞬间才如释重负。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/be/bea6aed5cb51a7ec8255aba155cb7c7c.jpeg\" /></p><p></p><p>时隔多年，我早已经忘记高中语文老师教给我应付考试的“八股文”的写法，可是我却忘不了那个当年埋下对电脑热爱的少年。</p><p></p><p>也是在那个下午。</p><p></p><p></p><h2>第一次接触到愤怒的小鸟的下午</h2><p></p><p></p><blockquote>亲爱的读者朋友们，请允许我来介绍一下我的成长历程，讲讲自己为啥会坚定走上程序员这个行业。</blockquote><p></p><p></p><p>你是否也像我一样，从小来自农村，貌似一直都是村里成绩最好的孩子，小学和初中的奖状拿到自豪，如众心捧月般骄傲地走进了全县最好高中，爸妈在那个暑假奖励给你当时电视广告最多的步步高音乐手机，现在脑海里还能回想伴随宋慧乔出场的那个魔性的“daling...”的手机背景铃声。</p><p></p><p>我是 2011 年进入的高中，身边的牛人众多，一度没有了以往被班主任和身边人围绕的感觉，平平无奇。</p><p></p><p>在我只能拿着我的音乐手机听歌的日子里，某天下午第一次接触了同桌的 ipod Touch，没想到 MP4 还可以这样玩，屏幕是可以如此顺溜。</p><p></p><p>下课后看着他玩当时最火的 Angry Bird 的时候，最期待的莫过于能让我玩一把。那是我第一次从同桌嘴里听到了乔布斯，心想能做出这么好产品的人一定是个牛人。（求知若渴，虚心若愚，致敬永远怀念的乔帮主！）</p><p><img src=\"https://static001.geekbang.org/infoq/6e/6ed50b8895fe23afa279360f11f4e9a9.jpeg\" /></p><p>从那以后，我更加无心学习，一心就没有放在读书上，高中成绩一度垫底。但我开始喜欢上了电脑报，约着和另一个同学一人买一期轮番着买，交换着看，每次在那上面看到有好的教程或者软件破解方法，我就回家跟着教程捣鼓。捣鼓久了之后，亲戚朋友也知道了我特别会清理电脑（后面进入大学也是帮同学装软件、装系统、清理垃圾）。</p><p></p><p>还记得那时候电脑坏了请人来维修，几乎的方法都是重装系统，每次重装就要花 40-50 块。后面我就开始跟着教程自己捣鼓着大白菜、虽然不懂 BIOS，但是我知道进入它很重要，而且每个电脑进入的方式还不同，但是可以上网查，也试着看懂那个蓝色界面上都是什么意思，怎么选择。</p><p></p><p>后面身边的同学一个个都开始用上了 MP4（台电、爱国者）。下定决心想要买一台自己的，我开始省钱，最终在同学的推荐和自己内心热爱的怂恿下，我跑遍了市区的电脑城去询问，还借了同学一点钱，才得以买下一台蓝魔 W10，即使买了不敢在家里玩，但至今还记得玩极速飙车 5 在重力感应模式下那个偏着身体的样子。</p><p><img src=\"https://static001.geekbang.org/infoq/7f/7f432051ff21544c80d0ad579567e217.jpeg\" /></p><p></p><p>如你所看到那般，这样的我没有高中逆袭的故事。我也想考好大学，可是事已至此，没有努力过，哪有好结果。印象中最深的一句抄在自己周记的本子上，“梦想对于我如同内裤，明明有但是不能逢人就能展示”。</p><p></p><p></p><h2>失败又怎么样，还不如埋头苦干</h2><p></p><p>2013 年 7 月，还记得出成绩的那天，踩着分数线过，几乎没有可挑选的余地，我只跟我爸说明了专业只想计算机。但是失败的人又怎么能一切如愿，那个学校的计算机学院分数线我也没达到，最后被调剂到了理学院，学习了数学，庆幸的是数学是计算机科学的前置，也算跟电脑相关了，我没有再选择的余地。</p><p></p><p>虽然说在理学院的学习跟我想象中的计算机专业能做游戏、做系统完全不一样，但是也只能跟着课程安排逐个学习：大一都是基础性的课程，大多与数学相关；大二我们才开始接触计算机的部分课程，虽然也学习了计算机导论、C++程序设计、数据结构、计算机组成原理...。</p><p></p><p>但是老师的讲课水平实在不敢恭维，给我们上数据结构课的老师都是临时安排顶班上课的（原有的老师出国深造去了），这个老师自己都对数据结构云里雾里，有一次一个知识点能在课堂上纠结 40 分钟，直到到下课也没解决，这门课全班都是低分，我们只知道数据结构有用，但就是不知道怎么用。</p><p></p><p>所以很多时候我都是找图书馆看书，网上自己找资料，看视频，也有几个值得自己记录的瞬间：</p><p>还记得我第一个 C++ 代码输出 HelloWorld 的喜悦当大家还在 Windows 开发的时候，我捣鼓上了双系统，并认识了 Linux，老师仍在用 VC 6.0 开发的时候，已经选择在 VIM 捣鼓 g++，在此感谢侯捷老师，但遗憾的是并没有对 C++ 产生兴趣，可能还是指针没搞懂之后慢慢接触了 Java，并感谢 Java 课程设计老师给出的班级最高分，毕竟我是第一个在增删改查的基础上加了图形界面毕业设计的外卖系统让老师成功的点下了第一单，只可惜没有做支付系统，不然还可以小赚评审老师的一笔打赏（调皮一下）</p><p></p><p>现在看来，当初的这些经历跟现在的学生比不足一谈。当年会写冒泡排序，会在几个热门框架下实现增删改查就能找到工作，毕业那会确实也有几个 Offer，但是实在是名不见经传的小公司，跑到好学校参加好公司宣讲连简历都过不去，所以当时并不满足此。</p><p></p><p>我也想投好的企业，我也想毕业拿高薪，来我们学校的计算机水平就决定了来的企业上限。当时各大培训机构就盯准了我们这类学校搞培训班，利用大家都有的毕业失业焦虑，给予包就业的足够安心，班里大部分学生都选择了参加尚学堂（他们在学院租了教室上课更方便），少部分去了其他机构。</p><p></p><p>考虑到这价格不菲的培训费和本身不服输的精神，我决定考研，没有给自己留过后路，失败一次大不了可以再来一次。一直在失败，但失败又怎么样，还不如埋头苦干。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/44/447ffff3a97f9656181a45e9c2378105.jpeg\" /></p><p></p><p>后面考研的两次经历写成了这篇文章：<a href=\"https://mp.weixin.qq.com/s/Y--wxCoo7jsE4Lu152nL0A\">考研两年和读研一年我都有哪些体会</a>\"，现在再看这篇文章写的很乱，但很感谢那个选择不断坚持着的自己。</p><p></p><p></p><h2>犯错又怎么样，还不如敢于承担</h2><p></p><p>行文至此，你应该猜到了我该说说职场里的体会了，但是算上实习也才工作一年多，根本没法总结一篇让自己满意的经历，在这就长话短说吧。</p><p></p><p>初入职场，别怕犯错</p><p>初入职场，上手开发的时候谁都有可能面临难题，在你面对新的需求毫无头绪的时候，千万别不好意思，先上网找解决方案，找不到答案大胆询问前辈。职场里再也没有人会像老师那样教你，一切都要主动，别怕犯错。</p><p></p><p>与其埋怨，不如多做</p><p>我记得去年年底的时候有个同组的开发同事离职，组长把之前的他未开发完的任务交给我。我还才刚刚转正没几个月，也不敢说不接任务，谁能想到接下来发现是个烂摊子。看着他写着稀烂的代码，核心函数都只写了个架子，都没有实现功能。</p><p></p><p>每天在吐槽，但这个任务迟迟没有完成，review 挨领导骂的时候还有点小埋怨。被挨骂后我的组长过来开导我，给我指导代码怎么实现的思路，完成功能之后，还顺带把这个任务优化了一下——提升了速度，美化了界面，用户也认可这次优化。也是那次在职场上得到了第一次的夸奖，表扬我进步很快。</p><p></p><p>之后，就开始学会了职场中的埋怨并没有用，与其抱怨，还不如多做点，做出成果才是利人利己。</p><p></p><p>降低逾期，找准平衡</p><p>最后，我想说的我进入职场的一个心态——降低逾期，找准平衡。</p><p></p><p>来到大城市，偶然发现同一批入职的小伙伴可能就是本地人，她不上班可以回家灵活就业，你不上班房租都交不起，你会羡慕；别的同学去了大厂，拿着你几个月才能到达的工资、比你高几倍的年终奖，你会羡慕；老家的同学买房买车，你只能每天挤着地铁公交，你会羡慕......</p><p></p><p>不是所有人都能含着金钥匙，也不是总能找到“钱多事少离家近”的工作。的确，公司会有很多不好，可能需要经常加班，项目也没有那么高大上。</p><p></p><p>但是选择做程序员，有机会选择就业城市，今后也有机会转行（技术转管理和其他方向比比皆是）；我还能吹着空调，坐在电脑前写代码、写博客、学技术、看文章。</p><p></p><p>这就是我的降低逾期的心态，找准平衡。只有平常心才会让心安。就像此时我花了两天时间平静的完成这篇文章。我可能不知道自己最喜欢什么，但是我会选择让自己不做最苦的那个。</p><p></p><p></p><h2>出走十年，再看那个少年</h2><p></p><p>如果说，少年读书时期能教会我什么，那一定是坚持热爱的勇气：</p><p></p><p>因为热爱科技，才会在那个高中时代不读书的少年，执着于要买一个能玩愤怒的小鸟的平板因为热爱电脑，才会喜欢折腾装软件，努力成为了计算机专业的学生，即使至今技术都不是很厉害因为热爱文字，才会喜欢写博客文章，不断看书，即使至今都没找到自己文字的特点，但还在坚持写作</p><p></p><p>出走十年，那个少年仍然平凡；出走十年，那个少年还在探索。</p><p></p><p>仅以此文致敬——当初不放弃的少年，请未来继续加油！</p>",
    "publish_time": "2022-09-29 14:20:08",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "万科分拆万物云今日上市，算法博士参与敲钟，AI技术能否颠覆传统物业？",
    "url": "https://www.infoq.cn/article/zijfOa2ZMW3MPUqVFAOJ",
    "summary": "<p></p><blockquote>万物云上市当天，共有六人共同敲钟，其中一人为技术高管 — 万物云数据与技术中心算法负责人袁戟。这在一定程度上反映出，这家物业管理服务商希望带上更多的技术底色。近年来，物业管理行业越来越重视用AI、大数据、云等技术赋能，智慧物业渐成发展趋势。</blockquote><p></p><p></p><h2>万物云正式登陆港交所，技术高管参与敲钟</h2><p></p><p></p><p>9月29日，万科集团分拆的物业管理服务商万物云于港交所上市。</p><p></p><p>据了解，万物云此次 IPO 吸引的基石投资人包括淡马锡、瑞银资管、中国诚通控股以及旗下的中国国有企业混合所有制改革基金、润晖投资、HHLR基金及YHG投资、Athos资本等。</p><p></p><p>招股书显示，万物云是一家物业管理服务提供商，建立了包括以下三大业务板块的业务模式：社区空间居住消费服务，商企和城市空间综合服务，AIoT及BPaaS解决方案服务。根据弗若斯特沙利文的资料，按基础物业管理服务收入计，该公司于2021年在中国物业管理服务市场中排名第一，占有4.28%的市场份额。</p><p></p><p>业绩方面，招股书显示，万物云2019年、2020年、2021年营收分别为139.27亿元、181.45亿元、237亿元。2022年第一季度，万物云营收为68.48亿元，上年同期的营收为47.48亿元。</p><p></p><p>万物云董事长朱保全解释，万物云的定位与阿里云、华为云、腾讯云等以“云”命名的厂商不同，阿里云等做的都是底层的IaaS，而非具体的云的运营。万物云不做<a href=\"https://www.infoq.cn/article/2017/04/IaaS-enterprises-rigid-demand\">IaaS</a>\"层，反而会在这些云的基础上构建基于城市服务、工单管理的云服务。万物云有自身的独特之处，比如包含线下服务、人工运营、硬件施工能力等。不同于上述“云”的外包服务，万物云希望重点打造一个一体化的服务。</p><p></p><p>上市当天，万物云深圳战区前介专家杨鑫、万物梁行总部产品技术负责人兼超高层首席陈惠荣、科物业荔景大厦项目管家谢燕玉、万物云总部法务负责人袁嘉妮、万物云数据与技术中心算法负责人袁戟博士、万物为家首席合伙人周珂锐共同敲钟。</p><p></p><p>值得一提的是，作为敲钟人之一的袁戟曾在InfoQ今年 8 月举办的 QCon 全球软件开发大会广州站，担任<a href=\"https://qcon.infoq.cn/2022/guangzhou/track/1391\">《人工智能前沿应用》</a>\"专题出品人，并在采访中分享了他对于算法模型的底层创新的观点。</p><p></p><p>据悉，万物云DTC-机器智能产品部组建一年以来，在德国慕尼黑工业大学（Technische&nbsp;Universitaet&nbsp;Muenchen）博士袁戟的带领下以云端视觉、边端视觉以及运筹优化三个方向作为主要研究方向，开展算法研发工作，为万物云远程运营、智慧工地、城区巡航（无人机）、河道治理等其他应用和场景赋予AI能力，并通过智慧工单、保洁和运维的智能调度等算法实现AI能力的沉淀。本组共有成员32人，其中博士1人，硕士率超50%，部分具有海外留学背景。近一年时间内，该团队结合公司业务实践和前沿算法，已录用论文4篇。</p><p></p><p>近日，袁戟博士带领的技术团队发表了一篇题为《基于深度学习的情感分析》的技术研究文章，以下为全文。本文作者是陈佳木、袁戟、吴远津。</p><p></p><p>对社区舆论的研究可以为物业管理提供有价值的信息。比如基于住这儿的论坛或者企业微信的聊天记录做情感分析可以帮助管理者更高效的了解用户意见，从而衍生出其他广泛的应用。然而，自然语言处理（NLP）遇到的挑战让情感分析的效率和准确性都受到了影响。</p><p></p><p>而<a href=\"https://xie.infoq.cn/article/2cfbb1675503d1fa5ba410e40\">深度学习模型</a>\"是解决NLP问题的一个有前景的方案。本研究尝试基于物业服务的场景，用深度学习解决情感分析。在数据集上使用term frequency-inverse document frequency （TF-IDF）和词嵌入( word embedding)模型，对不同模型的输入特征的实验结果进行比较。为了让普遍的读者更容易了解本研究，首先介绍下深度学习和情感分析。</p><p></p><h2>基于深度学习的情感分析</h2><p></p><p></p><h4>深度学习（Deep learning）</h4><p></p><p></p><p><a href=\"https://www.infoq.cn/article/j2HBHBDR1YFQtbiEjEMu\">深度学习</a>\"采用多层方法处理神经网络的隐藏层。在传统的机器学习方法中，特征是手动定义和提取的，或者通过使用特征选择方法。而在深度学习模型中，特征是自动学习和提取的，实现了更好的准确性和性能。分类器模型的超参数也是自动测量的。下图显示了两种方法之间情感极性分类的差异：传统机器学习（支持向量机（SVM）、贝叶斯网络或决策树）和深度学习。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/08/0814bb6acce86424ef09db5e19ac5208.png\" /></p><p></p><p>深度神经网络（Deep Neural Networks (DNN)）</p><p></p><p>深度神经网络是具有两层以上的神经网络，其中部分是隐藏层。深度神经网络使用复杂的数学建模以多种不同的方式处理数据。神经网络是输出作为输入函数的可调模型，它由若干层组成：输入层，包括输入数据；隐藏层，包括称为神经元的处理节点；以及输出层，包括一个或多个神经元，其输出是网络输出。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a6/a6a7712774bab6fc3b6d9eb2feffec94.png\" /></p><p></p><p>卷积神经网络（Convolutional Neural Networks (CNN)）</p><p></p><p>卷积神经网络是一种特殊类型的前馈神经网络，最初用于计算机视觉、推荐系统和自然语言处理等领域。它是基于深度神经网络架构，通常由卷积和池化层或子采样层组成，以向完全连接的分类层提供输入。卷积层过滤其输入以提取特征；可以组合多个滤波器的输出。合并或子采样层降低了特征的分辨率，这可以提高CNN对噪声和失真的鲁棒性。完全连接的层执行分类任务。</p><p></p><p>CNN架构示例如下图所示。输入数据经过预处理，以重新形成嵌入矩阵。该图显示了由四个卷积层和两个最大池层处理的输入嵌入矩阵。前两个卷积层具有用于训练不同特征的64和32个滤波器；然后是最大池层，用于降低输出的复杂性并防止数据过度拟合。第三和第四卷积层分别具有16个和8个滤波器，其后面还跟随最大池层。最后一层是一个完全连接的层，将高度8的向量减少为输出向量1，假设有两个类要预测（正、负）。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/09/097252d831182b9837389143926b9d97.png\" /></p><p></p><p>递归神经网络 （Recurrent Neural Networks (RNN)）</p><p></p><p>递归神经网络（RNN）的神经元之间连接形成有向循环，从而在RNN内创建反馈回路。RNN的主要功能是基于有向循环捕获的内部存储器处理顺序信息。与传统的神经网络不同，RNN可以记住之前的信息计算，并可以通过将其应用于输入序列中的下一个元素来重用它。一种特殊类型的RNN是LSTM，它能够使用长存储器作为隐藏层中激活函数的输入。</p><p></p><p>下图是LSTM架构。对输入数据进行预处理，以重塑嵌入矩阵的数据（该过程类似于CNN所述的过程）。下一层是LSTM，包括200个单元。最后一层是完全连接的层，包括128个用于文本分类的单元。最后一层使用sigmoid激活函数将高度128的向量减少为1的输出向量，假设有两类要预测（正、负）。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b7/b77aabcf501e1ffba15eab32229fedb3.png\" /></p><p></p><h4>情感分析 （Sentiment Analysis）</h4><p></p><p></p><p>情感分析是提取实体信息并自动识别该实体的任何主观性的过程。目的是确定用户生成的文本是否传达了他们的正面、负面或中性意见。情感分类可以在三个提取级别上进行：方面或特征级别、句子级别和文档级别。目前，有三种方法来解决情感分析问题:基于词典的技术(Lexicon-based)，基于机器学习的技术(Machine-learning-based)，以及混合方法(The hybrid approaches)。</p><p></p><p>基于词典的技术首次用于情感分析。它们分为两种方法：基于词典的方法和基于语料库的方法。在前一种类型中，情感分类是通过使用术语词典来执行的，例如在SentiWordNet和WordNet中找到的术语。而基于语料库的情感分析是依赖于对文档集合内容的统计分析，使用基于k近邻（k-NN）、Conditional Random Field（CRF）和隐马尔可夫模型（HMM）等的技术。</p><p></p><p>针对情感分析基于机器学习的技术可分为两类：传统模型和深度学习模型。传统模型指的是经典的机器学习技术，如朴素贝叶斯分类器、最大熵分类器或支持向量机（SVM）。这些算法的输入包括词汇特征、基于情感词汇的特征、词类或形容词和副词。这些模型的精度取决于选择的特征。深度学习模型可以提供比传统模型更好的结果。不同类型的深度学习模型可用于情绪分析，包括CNN、DNN和RNN。这种方法在文档级、句子级或方面级解决分类问题。</p><p></p><p>混合方法结合了基于词典和机器学习的方法。情感词汇通常在大多数策略中起着关键作用。下图说明了基于深度学习的情感分析方法的分类。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/de/decbfb4ab7751868cddb1e5e4f54b67b.png\" /></p><p></p><p>情感分析，无论是通过深度学习还是传统的机器学习进行，都需要在用于分类模型之前清理文本训练数据。企业微信文本通常包含空白、标点符号、非字符、转发、“@”和停止词。这些字符可以使用诸如BeautifulSoup之类的库删除，因为它们不包含任何对情感分析有用的信息。清理后，文本可以被分解为单个单词，通过词元化将其转换为基本形式，然后使用单词嵌入或术语频率逆文档频率（TF-IDF）等方法将其转换成数字向量。</p><p></p><p>词嵌入是一种用于语言建模和特征学习的技术，每个单词都映射到实值向量，使得具有相似含义的单词具有相似的表示。可以使用神经网络进行价值学习。一种常用的单词嵌入系统是Word2vec（GloVe, 或Gensim），它包含skip-gram 和 continuous bag-of-words (CBOW)。这两种模型都是基于单词出现在彼此附近的概率。Skip gram可以从一个单词开始，并预测可能围绕它的单词。Continuous bag-of-words通过预测基于特定上下文词可能出现的词来逆转这种情况。</p><p></p><p>TF-IDF是反映一个词对集合或语料库中的文档的重要性的统计度量。该度量考虑目标文档中单词的频率以及语料库中其他文档中的频率。目标文档中单词的频率越高，在其他文档中的频率越低，其重要性越大。Scikit-learn库中的矢量器类通常用于计算TF-IDF。</p><p></p><p>词嵌入和TF-IDF都被用作NLP中深度学习算法的输入特征。情感分析任务将原始数据集合转换为连续实数向量。</p><p></p><p>有不同类型的任务，如客观或主观分类、极性情绪检测和基于特征或方面的情感分析。单词和短语的主观性可能取决于其上下文，客观文档可能包含主观句子。基于aspect level的情感分析是指对实体的特定方面（例如，价值、房间、位置、清洁度或服务）表达的情感。极性和强度是情感分析评分的两个组成部分。极性表示情绪是消极的、中性的还是积极的。强度表示情感的相对强度。</p><p></p><p>数据集：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/70/70adf033039eea1e51f8602360b7a9ab.png\" /></p><p></p><p>试验结果：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/01/01f7bcfd6aa43b910d83baff219f833a.png\" /></p><p></p><p>使用Keras和Tensorflow框架进行测试。在数据集上应用DNN、CNN和RNN模型进行实验，分析这些算法使用词嵌入和TF-IDF特征提取的性能。</p><p></p><p>在所有实验中，都为代码配置了参数，例如回声=5，批量大小=4096，k倍=10。</p><p></p><p>使用准确度、AUC和F分数评估所有实验评估模型性能。由于F分数来自召回率和准确率，因此还显示了这两个指标。</p><p></p><p>使用TF-IDF和单词嵌入的深度学习模型的准确度值：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e7/e72f737d0c25d7704d387df292046bbf.png\" /></p><p></p><p>使用TF-IDF和词嵌入DNN、CNN和RNN模型的recall值：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/21/21f4471ae56eebd6c4544927e8d3fd0f.png\" /></p><p></p><p>使用TF-IDF和词嵌入的DNN、CNN和RNN模型的精度值：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/25/2532537cdff4319a57a82854cd4a3959.png\" /></p><p></p><p>使用TF-IDF和词嵌入的DNN、CNN和RNN模型的F分数值：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/da/dac3ca180eb34209de87c3b041d3f812.png\" /></p><p></p><p>使用TF-IDF和词嵌入的DNN、CNN和RNN模型的AUC值：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/17/1783ff2381fd860f5f16abe60da9c5b2.png\" /></p><p></p><p>使用TF-IDF（左）和字嵌入（右）比较RNN的所有分数：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8c/8c334ff85870367c6ab973dbd5006c9c.png\" /></p><p></p><h4>结论</h4><p></p><p></p><p>使用词嵌入和TF-IDF进行情感分析。使用词嵌入和TF-IDF进行情感分析。对企微聊天记录的数据集进行了实验，以评估DNN、CNN和RNN模型。这些信息，结合实验结果，为我们提供了将深度学习模型应用于情感分析以及将这些模型与文本预处理技术相结合的广阔前景。</p><p></p><p>通过分析，DNN、CNN和混合方法是情感极性分析最广泛使用的模型。另一个结论是，在这些研究中，CNN、RNN和LSTM等常用技术在不同数据集上进行了单独测试，但缺乏对它们的比较分析。此外，大多数论文中给出的结果是在可靠性方面给出的，没有考虑计算时间。</p><p></p><p>通过研究不同类型的数据集、特征提取技术和深度学习模型的影响，特别关注情绪极性分析问题。结果表明，在进行情感分析时，深度学习技术与单词嵌入相结合比TF-IDF更好。实验还表明，CNN优于其他模型，在准确性和CPU运行时间之间提供了良好的平衡。对于大多数数据集，RNN可靠性略高于CNN可靠性，但其计算时间要长得多。研究得出的最后一个结论是，算法的有效性在很大程度上取决于数据集的特征，因此，为了覆盖更大的特征多样性，可以方便地使用更多的数据集测试深度学习方法。</p><p></p><p>基于此研究为基础，我们将重点探索混合方法，利用多个模型和技术相结合，以提高单个模型或技术实现的情感分类精度，并降低计算成本。扩大比较研究，包括新方法和新类型的数据。并将使用几种类型的数据评估混合模型的可靠性和处理时间。如状态、评论和帖子等的内容。还计划解决aspect情绪分析的问题，以便通过将用户情感与特定功能或主题相关联来更深入地了解用户。这对像我们这样提供服务的公司来说非常重要，因为从用户那里获得详细的反馈，从而知道其服务或产品的哪些方面应该改进，是提升我们服务质量和满意度的高效方法之一。</p>",
    "publish_time": "2022-09-29 15:02:47",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "数智底座必备能力四：社会化的连接集成，助力产业互联",
    "url": "https://www.infoq.cn/article/S7MV4izDZEjRDr9TX4ia",
    "summary": "<p></p><blockquote>当前，全球企业都将数智化作为实现转型升级的关键路径，通过推进数智化，成为数智企业迈向高质量发展。企业希望能快速创新，快速组装及调整各类创新业务，能敏捷响应需求更快的业务及迭代，能承受大流量的冲击而保持韧性，能更好的连接外部资源及能力，扩展业务边界及运营；能更好的沉淀数据资产，并基于数据及智能产生价值，产业龙头企业能构建产业互联网，柔性扩展，产业链价值重塑，资源有效配置。所有的这些，需要一个数智化新底座。通过统一的数智化底座，企业可以将技术、业务、数据深度融合，落地数智化转型，实现提质增效，迈向商业创新，成就高质量发展。那么，构建企业数智化新底座，需要具备哪些能力？<a href=\"https://www.infoq.cn/article/HK73Zd1lHwFNR6aFga00\">轻松驾驭新技术</a>\"、<a href=\"https://www.infoq.cn/article/21Jp2xK1AlTE0gYGBxVJ\">中台化的架构</a>\"、<a href=\"https://www.infoq.cn/article/UzktAiP9d1L9JQMQyiBP\">快速构建创新应用</a>\"、对外连接与集成。接下来我们将通过四篇文章陆续为您揭开谜底！&nbsp;</blockquote><p></p><p>&nbsp;</p><p></p><p>如果说之前的市场，是谁家抢的资源多，谁就能独占鳌头；那么在社会化商业时代，是谁家能将手头现有的资源价值最大化，谁才能长久发展。</p><p></p><p>在这个时代里，企业不再单打独斗，而是选择了“抱团取暖”。他们或连接企业上下游，或整合企业内外部所有资源，或结合多个产业链构建产业、生态平台，通过这些方式将现有资源价值最大化，继而创造出更大的商业价值。但是，问题也随之而来......</p><p></p><h2>社会化商业时代，企业面临的难题与挑战</h2><p></p><p></p><p>企业要想实现产业互联，首先要精进“内功”，即打通企业内部的横向业务集成。打个比方，如果你企业内部有超过 5 套以上的异构信息系统，那么首先需要解决的就是这些系统间的互联互通。</p><p></p><p>其次要修炼“外功”：在内部信息系统已经实现业务横向集成的条件下，企业需要与外部生态如供应商、用户等构建连接，在这个过程中，企业基本都会遇到本地私有云异构系统和公有云 SARS 之间，或者云与云之间的互联互通、数据同步等问题。</p><p></p><p>比如人力资源领域，员工信息、薪资待遇等比较敏感的信息，企业一般倾向于采用私有云部署，而像招聘等对外应用肯定以公有云为主，这其中就会涉及到如何将公有云与私有云结合。</p><p></p><p>毫不夸张地说，哪家企业能先解决这些云下异构系统之间、云上与云下、云和云之间的连接问题，它就能在这场竞争中抢占先机！因此，对于新一代 IT 架构来说，连接与集成能力都愈发重要。</p><p></p><p>但是，目前大多数企业都无法具备这种能力，原因如下：</p><p></p><p>第一，企业没有统一的数据标准。</p><p>拿比较常见“物料”来说，PRM 设计的时候需要有物料，生产制造的时候需要物料，甚至售后维修里也会有物料备品、备件等需求，这些套装、软件都来自于不同的厂商，都采用不同的技术规范、数据规范制作而成，如果没有解决这种数据标准化的问题，那么就无法做到内部异构信息系统的横向集成。</p><p></p><p>第二，企业没有明确的集成规范。</p><p>有的系统使用的是 WebService 规范，而有的系统使用的则是 API 接口，这对后续的集成都造成了一定困难。</p><p></p><p>第三，含有多个端到端接口的集成系统不符合 SOA 架构。</p><p>比如，a 系统是前台的系统，当它的系统进行报错的时候，a 系统可能通过接口又调用了 b 系统和 c 系统。当前端业务人员处理问题时，他会先去排查 a 系统，然后 a、b、c 系统就像踢皮球一样将这个错误传来传去，最终也无法说清究竟是谁的问题，这对运维造成了极大的挑战。</p><p></p><p>那么，如果有一种架构，可以实现跨环境、跨云、跨系统、跨组织之间的相互集成、互联互通，并支撑多云环境下的社会化场景落地，就可以解决当下大多数企业的燃眉之急，这种架构就是混合云架构。</p><p></p><h2>混合云集成，让连接集成更简单</h2><p></p><p></p><p>据 Forrester 咨询发布的《Forrester 咨询混合云主题思想领导力报告》中显示，在面向 300 余位中大型政企数字化负责人展开调研后，有超过 60% 的受访企业至少使用一个专有云和一个公有云平台，这代表混合多云已经成为企业常态化的选择。</p><p></p><p>看来，不少企业已经清晰地认识到，在这个时代，没有一种策略放之四海皆准。如果想要紧跟趋势，构建一个符合自身企业实际业务需求，能够灵活交付应用生命周期，并可以容纳专有云、行业云、公有云、本地数据中心等云上和云下多样化环境的混合云平台至关重要。然而，这种异构架构的复杂性却给企业带来了诸多困难与挑战，比如：</p><p></p><p>（1）安全问题</p><p>一旦你的本地私有云环境去和公有云做集成和连接，就代表本地系统的端口要开放到外网和公有云上，对于一些如证券、银行、通信等重点行业或者一般行业的薪资、人力档案等重点信息来说，如何保证其安全稳定性是重中之重。</p><p></p><p>（2）并发问题</p><p>当把本地系统的端口开放到公网时，无可避免的会出现一个问题，即端口的调用是可以被控制的。这种情况下，如果出现异常的、非法的、高频的访问，企业内部的系统可能会直接面临崩溃，这对一些企业来说将是致命的打击。</p><p></p><p>（3）云厂商之间没有统一的标准规范</p><p>对于复杂的混合云形态，如果私有平台云和公有云平台均是由一家云厂商提供，虽然会有比较强的线上线下配合能力，但同时也会被厂家“锁定”，出现一定的局限性；若分别由不同的云厂商提供，面对不同的标准规范，配合力、软件质量都会有一定的折扣，一些需要紧密配合的高级能力就会丢失。当然，这一点需要所有云厂商共同的努力，道阻且长，行则将至。</p><p></p><p>目前，随着企业对于云计算的认知逐渐深入，混合云集成已经到了特别重要的阶段，如何真正意义上做到云上云下一体化，让消息、数据、服务等在混合云的架构基础上做到有效构建是所有企业应该考虑的问题。</p><p></p><p>而自从 2000 年初，用友就陆续发版了门户 /ESB/IDM/MDM 等集成中间件，在当前阶段，用友面向混合云集成需求及集成中间件的经验，在用友 BIP 内植入 YonLinker 集成网关，提供面向接口协议的技术连接器，和开箱即用的业务连接器，全方位打通了云上云下用户、基础档案、认证等能力。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e3/e389299bd6e46657987a6a8d48191548.png\" /></p><p></p><p>面对本地云下的集成环境，用友 iuap 可以提供全套的集成解决方案、产品以及自身 20 余年的经验去支持本地系统间的横向集成；对于云上和云下之间，用友会帮助客户在本地的云平台和公有云之间做数据标准、基础数据、接口等方面的协同；在云和云之间，用友正大力发展细分领域的生态，按照统一的数据、集成标准去打通云和云之间的集成。</p><p></p><p>并且对于上述提到的并发问题，用友会在本地系统里布置一个 API 网关进行垄断限流，其可以提供 API 的完整生命周期管理，包括创建、维护、发布、运行、下线等，出厂预置云 ERP、智能财务、数字人力、敏捷供应链、智慧采购、智能制造、数字营销、数智研发、数字项目、数智资产及智慧协同等产品服务，最后通过网关的鉴权、限流、熔断、路由、安全策略、监控预警等机制保障 API 连接和开放的安全可靠。</p><p></p><p>至于安全问题，用友则采用生态合作、加密链路传输、加密存储、数据分级管理等一整套的安全措施，来满足其对安全性的苛刻要求。</p><p></p><h2>社会化架构，支撑数智化的产业协同</h2><p></p><p></p><p>回到最开始说的社会化商业时代，就像前端有前端架构、存储有存储架构一样，社会化时代也有专属于它的“社会化架构”， 社会化架构是以企业、企业群为基本模型，构建了包括社会级、企业群级 / 产业链级、企业级、组织级的社会化多级数字化建模，将 ERP 时代的企业级动态建模平台升维为 BIP 时代的社会级数字化建模平台，租户、用户、组织、权限、流程、主数据等一系列模型从企业级跃升到社会级，支撑业务和管理突破企业边界，通过连接、共享、交易、协同，实现社会级商业创新，落地产业互联网。</p><p></p><p>以央国企为首的大型企业成为产业互联的首批探索者。中建五局作为国内建筑行业龙头企业、全球规模最大的投资建设集团之一，也在其中。2020 年，中建五局全面启动了数智化升级，最终目标是要建成“数字五局”。即实现企业管控集约化、资源配置高效化、业务管理精益化和生态互联协同化。</p><p></p><p>对于中建五局这样的全产业链集团、产业链链主企业来说，由于业务涉及从项目规划、设计、施工到运营的全过程，所以上下游产业链较长、参建方众多、参与单个项目的劳务队也数量很多，因此每一个环节形成的数据不能跟随项目的推进而流动，比如采购信息不对称、售后服务不及时、垫资周期长等，以至于产业链的数字化也出现了严重的孤岛问题，导致整体效率低。</p><p></p><p>随着全面数智化的深入，中建五局以平台优先、业务逐步推进为原则，基于用友 iuap 平台构建了企业业务中台、数据中台、智能中台、低代码开发平台和连接集成平台，打造了企业数智化转型的技术底座，也为生态协同提供了强有力的平台支撑。通过连接集成平台，实现企业内外数据互联，通过数据中台、数据湖技术体系解决了企业内严重的数据孤岛问题。</p><p></p><p>中建五局基于社会化商业架构的用友 BIP 构建了丰富的业务应用，高效连接企业的下游客户，实现了与上游供应商的电子合同、订单、结算单、出租单的协同管理，从而真正打通了企业内部业务、管理与外部商业世界的连接。</p><p></p><p>同时，结合先进的多租户数据隔离机制，通过企业群数智化建模，构建了建筑产业互联网，在行业客户的需求和供给之间搭建了桥梁，实现了在产业链级别的互通互联、业务协同，让数据连接真实有效。</p><p></p><p>盘活产业链的上下游，实现产业间的互联互通、高效协同至关重要。可是，在这个过程中，如何界定“权限”问题，是每家企业转型路上的“拦路虎”。</p><p></p><p>何为权限问题？具体来讲：在一个产业或者生态平台上，集成了与该产业相关的各个链条上的企业，那么如何在保证企业间相互隔离的同时，还可以实现将有价值的资源共享？换句话说，平台应有能力确定哪些东西是企业需要“保密”的，哪些东西是大家可以“共享”的，这是在社会化架构下企业急需解决的问题。</p><p></p><p>破局之道，在于企业需要有统一的数据标准，或者说，企业需要做好主数据管理。</p><p></p><p>作为企业业务的主干数据，主数据是企业数字化建设的数据基石。而主数据管理，则是为了落地主数据标准体系和管理规范，解决企业异构系统主数据的治理问题，从而在数据层面上保证主数据一致性、准确性、完整性、共享性以及时效性。</p><p></p><p>一般来说，主数据分为两种类型，一种是类似于人员组织、客户、供应商、税号等的通用数据；另外一种数据是分行业的重点数据，比如制造业的重点数据是物料、产品，服务业的重点数据是项目，汽车行业的重点数据是零配件、五金等板材，医药行业的重点数据则是中药、西药、中成药等。</p><p></p><p>而用友，凭借着多年全行业全领域的 ERP 经验，对于上述这种人财物产供销方面的主数据处理可以说是它的“老本行”。</p><p></p><p>用友 iuap 的连接集成平台云主数据，可以帮助企业快速且零风险地上线主数据管理功能。它将主数据从各个操作及分析型应用系统中分离出来，使其成为一个集中的、独立于企业中各种其他应用的核心资源，从而使得企业的核心信息得以重用并确保各个应用间的核心数据的一致性，包括主数据管理系统、主数据标准体系、主数据管理规范。</p><p></p><p>并且，主数据还提供了模型管理、数据维护、数据的清洗和数据的开放共享功能。主数据系统通过模型驱动来管理，通过 Web 可视化界面零开发的实现主数据模型的落地，通过元模型理念、规则模型、UI 模型、流程模型、权限模型来实现对主数据模型的管理。最终保证企业内相关主题域和业务系统之间主数据的实时性、完整性和有效性，并达到流程贯通和统计口径一致。</p><p></p><p>做好主数据管理，企业就有了一整套可用于生成和维护企业主数据的规范、技术和方案，这对在上下游协同过程中如何建立统一的话语体系起到了强大推力，也为最终实现产业互联打下了良好基础。</p><p></p><h2>写在最后</h2><p></p><p></p><p>作为企业数智化新底座用友 iuap 的核心平台之一，连接集成平台 YonLinker 提供了开放和集成的能力，支持云内集成和云间集成，支持企业内业务集成和生态链间集成，可有效解决企业的账号集成、门户集成、数据集成、 服务集成、设备集成、流程集成方面应用需求，使企业能在公有云、混合云、私有云以及多云之间互联互通。在今天，所有企业都应该意识到，应用服务彼此互通、生态彼此共享就意味着合作共赢。而帮助企业实现产业互联、提高了连接集成能力的平台，也就越发不可替代。</p>",
    "publish_time": "2022-09-29 15:08:35",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "资源重组和试错成本巨大？企业可能需要一份“产业资源地图”",
    "url": "https://www.infoq.cn/article/iqfk6OvNdQmV1xxTWO03",
    "summary": "<p>“前方100米请直行……”毫无疑问，在大数据时代，地图导航的出现方便了人们的出行生活，可以引导人们去任何想去的地方。回想20年前，想从北京CBD前往海淀中关村，对很多人来说还需要凭借个人的经验才能轻车熟路。这些碎片化的经验存在于不同开车人的脑中，很难被复制和使用。而地图导航的出现，表面上带来的是出行方式的改变，背后其实是一个数字化知识体系的构建。</p><p></p><p>企业<a href=\"https://www.infoq.cn/topic/1160\">数字化转型</a>\"的进程中，面临着远比出行场景更加复杂的问题。在大数据时代下，社会正在发生着前所未有的变革，企业的产品、工作流程、商业模式、组织架构都在被打碎、被重构。伴随这一变革的是各类资源的重新组合与试错，企业在这个资源重新匹配的过程中面临着前所未有的困惑与挑战。比如，如何寻找企业成长的“第二曲线”？如何构建和利用数据资产打破效率、效果、效能三者之间的“不可能三角”？</p><p></p><p>为了解决以上的问题，企业需要对市场各类技术、产业、资本、人才资源做精准的识别、有效地评估以及高效的匹配分析，并用各类相关数据做辅助决策。简单讲，企业要有一张能够描述各各类市场资源的“地图”，对碎片化的产业知识做整合、对各类资源的匹配做系统化的“路由”分析。</p><p></p><p>这里所说的<a href=\"https://www.infoq.cn/article/S7MV4izDZEjRDr9TX4ia\">产业资源</a>\"“地图”，并不是地理意义上的地图，而是产业资源之间相互关联、相互合作的“高维度”空间地图。</p><p></p><p>那么，这个“高维度”的地图是什么？面对这样“高维度”的地图，用户如何才能理解、调用、形成自己的洞察并辅助决策？带着这些问题，InfoQ日前采访了中数智源创始人滕放，和他探讨了产业图谱的来龙去脉。</p><p></p><h2>产业图谱是实现产业资源高效匹配的“数据基础设施”</h2><p></p><p></p><p>“&nbsp;‘产业图谱’这个概念最早是我们2015年在做产业链分析时创造出来的，最初提出这个概念是为了描述构建‘产业节点之间基于潜在合作关系所形成的复杂网络’。后来，市场上使用的人越来越多，大家逐步把它理解为——由一些产业节点名称以及其相对应的代表性企业的图谱化展示。”滕放在解释什么是产业图谱时说道。</p><p></p><p>他表示，中数智源如今挖掘出的产业节点颗粒度已经足够细致，量级上达到了2800万，所构成的复杂网络的边数也达到了几十亿条。</p><p></p><p>为什么要把产业节点颗粒度做得这么细致？滕放认为，主要是出于两个原因：“第一，我们希望构建一个产业分析的‘元系统’，尽可能地把人能够理解的技术概念、产业概念都包括进来，这样才能满足用户对产业、对世界“千人千面”的分析视角；第二，随着科技的发展，越来越多的新技术、新能力融入到商业模式中，从而创造出新的产业机会。我们需要对这些新的概念，新的技术形成有效的识别能力。”</p><p></p><p>事物的发展并不是一蹴而就的，产业图谱的创建也不是突发奇想的。滕放告诉InfoQ：“我们能够走到这个方向，还要感谢北京三板，也就是现在的北交所。在2015年和当时的‘三板’接触时，对方就提出过需要一个针对新经济的企业分类体系。因为企业的估值、评估在很大程度上和分类有关，而原有的分类体系并不能很好地体现科技型企业所处赛道的差异性。所以，在深度挖掘这个需求的过程中，让我萌发了要构建产业分析‘元系统’的想法。”</p><p></p><p>如今回头再看，产业图谱的推出既是一个偶然，也是一个时代的必然产物。当大家都在被这个时代的不确定性所困扰时，滕放一直在寻找这个时代确定性的问题，并把它作为商业的切入点。</p><p></p><p>“在经济转型和<a href=\"https://www.infoq.cn/article/RrLI7cd76WIkeGPUm0vv\">数字化</a>\"发展的大背景下，我们看到所有的资源都在进行重新组合，以求得价值的最大化释放。而数据作为新的生产要素，它的加入使得这些组合逻辑变得更加复杂。资源组合的成本，并没有因为数据时代的来临而降低，这是制约我们所有企业发展的共性问题。”滕放表示。</p><p></p><p>“一方面，资源的组合存在着试错的成分，很多新技术、新模式并没有前车之鉴，所有的市场参与者都是在实践中学习成长的，试错成本不可避免。另一方面，资源的分布也和之前大有不同。原来大型企业更容易产生突破与创新，而如今新的技术、新的模式往往存在于百万级的科创企业中。因此，市场上的每次资源匹配都伴随着巨大的搜索、沟通、分析，以及交易成本。”滕放解释道。</p><p></p><p>用他的话说，产业图谱就像是一张描绘产业资源分布的“地图”，产业节点对应的是地图上的每个POI、每个楼宇、每个饭馆、每个公园等等，不仅如此，POI之间的“距离”也是需要度量的。</p><p></p><p>滕放说到：“在‘地图’上，我们为每家企业、每个专利、每个投资机构都做了向量化处理和映射。这样就可以系统化地解决快速查询，以及任何两个产业节点、两个企业之间合作匹配的问题。”</p><p></p><h2>围绕“概念”和“关系”，构建共性知识底座</h2><p></p><p></p><p>针对产业图谱的构建，市场上也有着不同的理解和路径。其中一种做法是基于市场上已经有的研究报告来挖掘。滕放最早也尝试过这条路径，但是很快就否定了这种做法。</p><p></p><p>滕放以<a href=\"https://xie.infoq.cn/article/91e77706a6897c89af490963a\">新能源汽车</a>\"举例道：“当我们每个人看待一个产业时，往往受限于个人的主观认知。比如：当我们谈论新能源汽车时，会有‘电动车’和‘燃料电池汽车’的区别。由于每个人的知识结构不同，对于相同的概念所理解的深度和广度也会不同。虽然市场上各家机构的研究报告有一定的权威性，但是他们对概念的定义不一定符合每个人的需求和统计口径。研究的目的不在于‘求同’，而是找到属于自己的个性化洞察。因此如何有效地区分‘事实’与‘观点’是我们做产业图谱时首先要考虑的问题。”</p><p></p><p>“产业图谱的价值是为用户提供了一种最大化地满足个性化产业透视需求，并组织相关的数据，形成个性化洞察的能力。这种能力本身是产业分析所需要的共性知识底座。”滕放说道。</p><p></p><p>当然，最关键的问题还是：如何确才能构建这种“共性知识底座”？</p><p></p><p>“我们当时读了很多哲学相关的数据，就是要思考知识到底是什么？后来，受罗素的原子论的启发，我们创造了‘产业原子’这样的概念。我们认为，一个知识体系本质上只包含两部分——概念和关系。所有的知识都是基于概念和关系构建的。我们正是按照这个思路，逐步构建了反映产业之间关系的‘共性知识底座’。”滕放解释道。</p><p></p><p>所谓产业原子，在滕放看来，它是一个概念，是一个技术节点，或者是一种商业模式，它来源于很多背景语料知识，如专利文献、企业描述、产品描述、商标、软件著作权等信息。</p><p></p><p>“我们将一个产业词所涉及的所有信息都抽离出来，通过词法/语法分析模型、实体识别模型，<a href=\"https://xie.infoq.cn/article/34eee23768ff21cc30cbfbbec\">深度挖掘</a>\"等方法形成人们可以理解的概念，这就是‘产业原子’，然后通过计算任何两个概念之间能够合作的可能性，以此形成的网络，这就是‘产业图谱’。”滕放说道。</p><p></p><h2>让产业图谱的价值最大化，要理解“人机共生”</h2><p></p><p></p><p>值得注意的是，在产业图谱的构建和使用过程中，企业还需要更深刻地去理解什么是“<a href=\"https://www.infoq.cn/article/rCh6a5jPD60gHMBxhMxb\">人机共生</a>\"”。</p><p></p><p>产业图谱的目的不是取代“人”，而是辅助用户做决策。形象地讲，就是要给人提供一个数据+智能的“导航器”。市场在理解这个定位时，往往会落入一种是简单的“二元论”思维，把人的智能和机器智能对立起来。在<a href=\"https://xie.infoq.cn/article/639489bbd1fc7badd37cd30f1\">商业智能</a>\"领域的实践中，他们彼此更多是相互支撑，相互成就的关系。</p><p></p><p>在产业分析领域有三个核心的问题，其中两个问题的答案是机器智能远远强于人的智能，另一个问题则是机器智能不如人的智能。具体来看，在对各类产业、技术、资本资源的识别以及匹配方面，机器智能有明显的优势；而在评估资源好坏性质方面，人则更能有效地做综合的评估。机器智能可以把评估所需要的数据做好整理，等待“人”做最终的判断。</p><p></p><p>“我们在知识的最低层面进行勾画，这种勾画带来的是‘高维度’的数据，我们会把每个企业、每个专利、甚至是它们所涉及到的概念之间的关系都放在一个‘高维度’的空间里做映射，这种数据放在机器里，机器很容易理解，但是人脑不行。”滕放强调。</p><p></p><p>因此，为了有效地实现“人机共生”，滕放在产业设计中进行了大量的数据降维和个性化处理。对此，他总结了三个经验：</p><p></p><p>第一，高效的可视化展示。用数据和图例来表示知识，让用户对数据内容能够做到一目了然；</p><p></p><p>第二，给用户提供个性化的知识探索路径。每个用户探索知识的入口和深度都不一样，好的产品需要给用户足够的个性化选择能力；</p><p></p><p>第三，把高维度的数据降维。需要针对使用场景给高维度数据做降维处理。不管是用可视化做降维，还是把中间分析结果提炼出来做降维，用户需要一个利用低维度数据重新构建个性化知识的过程。</p><p></p><p>总之，“人机共生”是人工智能未来的一个重要的发展方向。我们既要能把智能装到机器里，又要能够把智能装到人脑中。在滕放看来，产业图谱是目前解决产业资源匹配效率问题的一个起点，而未来，在这张“地图”的基础上，一定会产生更多更好的智能应用产品。</p><p></p><h4>嘉宾介绍</h4><p></p><p></p><p>滕放，&nbsp;中数智源（北京）科技有限公司创始人兼 CEO；北京因果树网络科技有限公司创始合伙人；长期价值创造者，连续创业者，拥有中美科技公司创业及成功退出经验；产业图谱/产业大脑/金融科技领域引领者；作为大数据和知识图谱专家参与 2019 年国家自然科学基金项目“基于产业图谱的区域产业关联效应趋势预测研究”；作为大数据和知识图谱专家参与 2019 年国家自然科学基金项目“我国产业链战略安全研究”；&nbsp;北京欧美同学会理事；中信改革发展基金会金融实验室专家；2016 年“全球创新青年导师”；2017 年 “中关村十大年度人物“；MBA + CFA + xGoogler。</p>",
    "publish_time": "2022-09-29 15:44:47",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "可读+可写+可拥有？你对Web 3.0的理解可能错了",
    "url": "https://www.infoq.cn/article/a7ls8rH7EoAweEdLcNfO",
    "summary": "<p></p><blockquote>编者按：&nbsp;今年，Web&nbsp;3.0 火出天际。业界对这个概念的探讨纷纷展开，目前比较普遍的共识是，相对&nbsp;Web&nbsp;1.0&nbsp;的“只读”和&nbsp;Web&nbsp;2.0&nbsp;的“可读+可写”，Web&nbsp;3.0&nbsp;是既“可读+可写”又“可拥有”。&nbsp;但是，联易融副总裁沈旸对此却提出了不同的观点。在他看来，只读、读写、读写权这类划分方式没有谈到技术的本质，确切来说，Web&nbsp;3.0&nbsp;是一个可编程的、比较平等的价值交换体系。</blockquote><p></p><p></p><p>本期《超级连麦》，我们邀请到了联易融副总裁沈旸，和极客邦科技创始人兼&nbsp;CEO&nbsp;霍太稳（Kevin），InfoQ&nbsp;极客传媒数字化主编高玉娴，一起聊聊<a href=\"https://www.infoq.cn/topic/1160\">数字经济时代</a>\"的“新基建”——Web&nbsp;3.0。内容有删减，感兴趣的同学可进入“霍太稳视频号”观看直播回放。</p><p></p><h2>Web&nbsp;3.0&nbsp;是可编程、平等的价值交换体系</h2><p></p><p></p><h4>请您给&nbsp;Web&nbsp;3.0&nbsp;下一个定义，它和&nbsp;Web&nbsp;1.0、Web&nbsp;2.0&nbsp;的区别在哪里？</h4><p></p><p>&nbsp;</p><p>沈旸：Web&nbsp;1.0&nbsp;是可读，以前叫门户网站。Web&nbsp;2.0&nbsp;是可读可写，相当于是互联网社交媒体。现在大部分国外认为&nbsp;Web&nbsp;3.0&nbsp;叫可读可写加可拥有。但是，我认为这些定义都可能是错的。为什么这么讲？因为可读可写它只是个概念，没有谈到技术的本质。</p><p>&nbsp;</p><p>我们看一下，Web&nbsp;1.0&nbsp;和&nbsp;Web&nbsp;2.0&nbsp;之间并没有明显的技术的代差，或者明显的时间点。比如，2000&nbsp;年以前，在社交网络之前就有&nbsp;BBS，它也是可读可写的，而且在&nbsp;BBS&nbsp;里面的交流，比现在所谓的社交软件要自由，从这个角度上讲，可读可写它并不是一个界限。另一方面，从<a href=\"https://xie.infoq.cn/article/18253c47d260f5998fea077f3\">数据库</a>\"的角度上讲，数据库自诞生以来，天生就是可读可写的，而不是在&nbsp;2000&nbsp;年以前只可读，2000年以后才可写。</p><p>&nbsp;</p><p>我们看到Web&nbsp;1.0&nbsp;和&nbsp;Web&nbsp;2.0&nbsp;的真正区别，大家可以看到一个很明显的例子，在&nbsp;2003&nbsp;年之前所有的互联网公司都不赚钱，一个门户网站上顶多挂三四个广告，挂太多就会影响网站的体验，所以互联网公司的广告收入是有限的。</p><p>&nbsp;</p><p>真正赚到钱的是谷歌，它通过大数据的架构能够做到千人千面的匹配，用户在搜索的时候就会给他们推送相应的广告，每个人可以看到不同的广告。</p><p>&nbsp;</p><p>如果把这个区别跟企业数据化相比是什么概念？在&nbsp;2000&nbsp;年左右，真正赚钱的公司，一定是&nbsp;IBM、思科、微软、SAP、Oracle&nbsp;这样做企业信息化的公司。如果把这种公司跟谷歌这样的公司相比，就会看到企业数字化的数据是非常有价值的，比如，一个企业的订单数据、财务数据实际上它的量没那么大，但是价值就非常高。这是因为东西多了以后就值钱，就跟在河里淘沙一样。企业需要河里淘沙的技术，也就是大数据的技术。</p><p>&nbsp;</p><p>因此，我认为&nbsp;Web&nbsp;1.0&nbsp;跟&nbsp;Web&nbsp;2.0&nbsp;的最大的区别是<a href=\"https://xie.infoq.cn/article/83e82b122c7484bb5603d40c4\">大数据</a>\"的技术。</p><p>&nbsp;</p><p>为什么现在又提&nbsp;Web&nbsp;3.0 ？虽然很多人把所谓的区块链、数字货币都扯在&nbsp;Web&nbsp;3.0&nbsp;里面，但是我觉得这两年谈&nbsp;Web&nbsp;3.0&nbsp;是因为大家对&nbsp;Web&nbsp;2.0&nbsp;的环境已经有相当大的不满。在&nbsp;Web&nbsp;2.0&nbsp;的环境下，互联网巨头能够通过大数据的体系赚非常多的钱，但是他们对数据的处理并不是特别透明。</p><p>&nbsp;</p><p>于是，大家希望有一个更公平的平台，就叫&nbsp;Web&nbsp;3.0。我认为&nbsp;Web&nbsp;3.0&nbsp;是一个叫可编程的、比较平等的价值交换体系。因为在Web&nbsp;2.0里面，所有的交易是取决于平台，所有的交易的规则是由平台来提供的，不是你个人提供的。</p><p></p><h4>您能梳理下&nbsp;Web 1.0&nbsp;-&nbsp;Web 5.0&nbsp;的整个推演历程吗？</h4><p></p><p>&nbsp;</p><p>沈旸：Web&nbsp;1.0&nbsp;叫信息共享，具体包括BBS也好，在门户网站看文章也好，这些都叫信息共享，信息共享拿走的是你的时间。</p><p>&nbsp;</p><p>Web&nbsp;2.0&nbsp;叫内容交互，首先同样也要拿走你的时间，但是在拿走你的时间以后，还要拿走你的数据。大家知道&nbsp;Web&nbsp;1.0&nbsp;里面不太可能会记录个人的数据，但是在&nbsp;Web&nbsp;2.0&nbsp;时代，尤其在进入手机&nbsp;APP&nbsp;时代之后，个人的数据要被互联网平台进行收集、利用，去做千人千面的分析。</p><p>&nbsp;</p><p>Web&nbsp;3.0&nbsp;叫价值交换，就是拿走你的身家，比如你不幸被一些项目忽悠去炒币了，或者去NFT里面被“割韭菜”了，那么，最终直接拿走就是你的身家。我提示大家一下，什么是有价值的东西？有价值一定是要有现金流的产出，它是一个资产，无论是在链上的、虚拟的，还是实物的，它一定要给你带来正向的现金流。比如，一个烂尾楼给你带来不了正向现金流，它就不是一个资产，也无法带给你价值。</p><p>&nbsp;</p><p>Web&nbsp;4.0&nbsp;叫<a href=\"https://xie.infoq.cn/article/2a87bf727081efbf85797f206\">脑机接口</a>\"，具体来看，2003&nbsp;年的时候，脑机接口就是把自己头发剃光戴一个导电的帽子涂上导电液，大概脑袋上有&nbsp;64&nbsp;个电极，然后从大脑里面获取非常微弱的脑电波，比如别人问你问题，通过脑电波就能判断你是否兴奋，或者是否说谎。</p><p>&nbsp;</p><p>Web&nbsp;5.0&nbsp;叫<a href=\"https://www.infoq.cn/article/9E9Dcq9kv6eNAKpSOj8b\">人机融合</a>\"，就是拿走你的肉身，而且这每个环节，它是有相互的逻辑，有时间点的一个关系。</p><p>&nbsp;</p><p>现在脑电的发展更迅速，它甚至能探出你在脑袋中想象出的一行字，大家知道一旦有足够的数据，它发展速度会是非线性的增长，最终状态叫人机融合。AI&nbsp;能模拟意识，如果我的&nbsp;AI&nbsp;足够强，是可以替代我今天晚上完成直播的，因为我想讲的内容，要么在我的文章里，要么我在过去给别人讲过，我的&nbsp;AI&nbsp;通过学习这些内容是可以帮助我直播的。</p><p>&nbsp;</p><p>但是如果我的&nbsp;AI&nbsp;越来越聪明，它是能够能帮我做生活中的一切。这时，当一个人想长生不老的时候会想：我的意识是不是可以不放在现在肉身里，放在机器的世界里面也可行？因为&nbsp;AI&nbsp;能够模拟你&nbsp;99.99%&nbsp;的结果。</p><p></p><h2>Web&nbsp;3.0如何影响企业数字化</h2><p></p><p></p><h4>Web&nbsp;3.0&nbsp;和数字化之间是什么样的关系？</h4><p></p><p></p><p>沈旸：<a href=\"https://www.infoq.cn/article/kJiii51Dg5p5OA6PLTPV\">从&nbsp;Web&nbsp;1.0到&nbsp;Web&nbsp;5.0&nbsp;</a>\"之间的时间点来看，大家可能会明白&nbsp;Web&nbsp;3.0&nbsp;处于一个什么样的位置，Web&nbsp;1.0&nbsp;是&nbsp;1993&nbsp;年互联网开始起来的时期，Web&nbsp;2.0&nbsp;是&nbsp;2003&nbsp;年，典型就是谷歌发表三篇特别牛的论文，后面整个互联网体系都是基于这三篇论文发展的。Web&nbsp;2.0&nbsp;积攒了大量的数据，让AI的技术越来越好。</p><p>&nbsp;</p><p>但是现在的大数据或者画像，只是一个非常片面的画像。比如，京东记录的用户画像，它只记录了用户在京东上购物买东西的画像；美团记录的画像，可能只记录了用户晚餐时的画像；携程记录的画像，也只是用户去哪儿旅游的画像，其实还有很多线下的画像是缺失的，比如用户的作息是什么，喜欢什么时候跑步，喜欢去什么地方。</p><p>&nbsp;</p><p>互联网的平台，虽然收集了大量用户的数据，但是这些数据是非常片面的，只是一个维度上面的，这些数据是不足以让&nbsp;AI&nbsp;诞生出来的。</p><p>&nbsp;</p><p>如果要达到&nbsp;AI&nbsp;诞生的程度怎么办？那么一定要有个人数据，个人要对数据有拥有权，在互联网上每个平台的数据要归于自己。当个人的数据积累得越来越多时，就会形成非常完整的画像。</p><p>&nbsp;</p><p>企业也是一样，之前只有大型企业才有非常不错的数字化，而一些小型企业，过了两年三年再去找公司之前的样子，根本找不出来，因为已经没有历史的印象了。</p><p>&nbsp;</p><p>今天，我们为什么要做这个事情？因为只有把这个事情做得足够深，我们才能到&nbsp;Web&nbsp;4.0&nbsp;的AI阶段，通过个人完备的数据画像，产生非常逼真的虚拟数字人，让他能够通过图灵测试。</p><p>&nbsp;</p><p>这时数据要归个人所有，再通过脑机接口把个人的意识记录下来。那么到了&nbsp;Web&nbsp;5.0&nbsp;时代，通过意识的崛起，就能够真正复制个人了，人类跟计算机就能够很好地融合在一起。</p><p>&nbsp;</p><p>大家可以看到，Web&nbsp;3.0&nbsp;为什么重要？Web&nbsp;3.0&nbsp;跟<a href=\"https://www.infoq.cn/article/RrLI7cd76WIkeGPUm0vv\">数字化</a>\"的相关性很强，而且我认为&nbsp;Web&nbsp;3.0&nbsp;就是数字化跟价值交换相结合起来的。因为&nbsp;Web&nbsp;3.0&nbsp;要把数据从单一维度的互联网平台里面解放出来，放到真正属于个人或者企业的数字画像中，形成个人或者企业在虚拟世界中的完整画像。</p><p>&nbsp;</p><p>我们现在的数字化是远远不够的，比如，虽然记录一个企业有所谓的&nbsp;ERP、CRM，但是对个人来说，今天手机上所有东西都不属于自己，APP一卸载这东西就没有了，每个人拥有的只有照片、视频，但是照片跟视频它本质上不是一个数字化的东西，它并不是一个结构化的数据，最后还是要把它解析为一个信息。</p><p></p><h4>Web&nbsp;3.0&nbsp;的基础设施到底有哪些，又如何去推动和影响实体经济的数字化的转型？</h4><p></p><p>&nbsp;</p><p>沈旸：我们公司是做供应链金融的，涉及的一些场景跟&nbsp;Web&nbsp;3.0&nbsp;稍微有点类似。</p><p>&nbsp;</p><p>第一点，大部分金融的场景是一对一的。比如你去买保险，保险公司会给你的概率对赌，当你想买车险或者其他的保险，都是跟你的概率对赌。概率是一个信息，就是你的信息，比如说你的身体状况，你的健康状况，通过这些信息做出一个保单出来，这笔交易就是价值的评估。</p><p>&nbsp;</p><p>第二点，对你的价值评估是否能够转让？是否能够交换出去？怎么样去交换出去？我觉得这是&nbsp;Web&nbsp;3.0&nbsp;的一个例子，大家知道小公司跟大公司做生意，大公司一般会有账期，你要先给我们干活，我再给你们付款，账期里面包括债务、票据等，这笔钱在以前如果想被转让出去，比如卖给第三方，卖给另外一个银行，卖给另外一个理财公司，卖给另外一个信托，它是不可编程的，都是大家拍脑袋决策的。</p><p>&nbsp;</p><p>我再举另外一个例子，极客时间大家知道卖得很好，但是怎么去激发第三方的合作伙伴，或者广大的极客们去推广极客时间，你要给他们佣金吗？比如说每个人有自己的单独推荐码，推荐出去要记录下来，记录下来以后要放在CRM里面，要放在电子合同里面。当极客邦收到款的时候，要跟自己内部的一个电子合同挂钩，电子合同就不再是一个双方的电子合同，推荐人的电子合同也要加在这个电子合同里面，如果我们再把一个更复杂的软件项目放在里面，还要计算它的成本。</p><p>&nbsp;</p><p>这就是一个典型的可编程的价值交换体系，如果把分成放在可编程的环境里面，只要是有人帮我推荐出去，就都可以给他分成，而且是非常清楚可以查询的，同时还要有信用担保。</p><p>&nbsp;</p><p>如果这个东西能做下去，很多东西都能够做价值交换，Web&nbsp;3.0&nbsp;就会被描述得更好，包括公司的边界可能也会被打破，未来销售量可能&nbsp;20%&nbsp;都不是公司的销售人员卖出去的，如果说你的价值体系做得非常棒，你不需要有专职的销售，可能&nbsp;80%&nbsp;的销售人员都是市场上的各方面最专业的人，他们去帮你做推荐与营销，最终形成一个共赢的体系。</p><p>&nbsp;</p><p>霍太稳：未来的世界一定是一个开放的世界，无论是一个技术，还是一个模式，只有在具体的场景里面才能发挥它的价值，对于我们数字化的人才也是如此。</p><p></p><h2>Web&nbsp;3.0&nbsp;时代需要什么人才</h2><p></p><p></p><h4>Web&nbsp;3.0&nbsp;时代，企业会需要什么样的核心人才？</h4><p></p><p>&nbsp;</p><p>霍太稳：Web&nbsp;3.0&nbsp;本来就是在数字经济时代的概念，在数字化时代是非常需要复合型的人才的，我们业界也经常流传着这样一句话——要让<a href=\"https://www.infoq.cn/article/h8I3yhi8JkLffu25C2Cd\">数字人才</a>\"业务化，让业务人才数字化。这和今天分享的&nbsp;Web&nbsp;3.0&nbsp;概念可以连接，比如说我是一个程序员，我要想在数字化时代有更多的价值时，是需要去了解&nbsp;Web&nbsp;3.0&nbsp;技术的，去了解&nbsp;Web&nbsp;3.0&nbsp;能够在应用在哪些业务场景中，同时还能够为企业创造更大的价值。</p><p>&nbsp;</p><p>如果说我是一个业务人员，可能我需要去想一想，Web&nbsp;3.0&nbsp;到底是什么，怎么才能够把它应用到现在的业务场景里面，比如如何才能让百万的产品的规模到上亿级规模。</p><p>&nbsp;</p><p>在&nbsp;Web&nbsp;3.0&nbsp;时代，企业对人才的需求一定是复合型的，技术人才需要多懂一些业务，业务人才也需要多懂一些技术，这就变成了一个双向奔赴的过程。</p><p>&nbsp;</p><p>沈旸：我对&nbsp;Web&nbsp;3.0&nbsp;定义是可编程的价值交换体系。这就要求数字化人才——第一，要懂技术，哪怕不编程，但是你也得懂得技术的一些本质，要从技术的角度要找到本质，要能够把它解释清楚。</p><p>&nbsp;</p><p>第二，你一定要知道哪些东西是概念，哪些东西是技术的本质。你一定要找到跟价值有关的业务，比如哪些业务能赚钱、业务要做到多少量、业务做到怎么样。</p><p>&nbsp;</p><p>但是，价值比业务更广泛、更深层，比如，某某电商公司卖了一万亿的产品，但是一个电商公司在内部有很多组织、很多体系，每个组织的价值是什么？每个环节的价值是什么？链条合作伙伴的价值是什么？在技术上我们还需要判断，什么样的技术应该自己做？什么样的技术应该找合作伙伴去做？如果说真的产生&nbsp;Web&nbsp;3.0，那区别一定是因为有了隐私计算，有了个人数据保护法，更多的小企业跟大平台要走向一个公平对等的位置上。</p><p>&nbsp;</p><p>我觉得如果清楚这两点，一方面从价值去看，剖析整个公司，第二个从技术上看行业、看部门、看竞争对手是否会有本质的区别。有时会有一些颠覆性的技术会让行业变得跟以前不一样，那么，这些技术是不是出现了？如果出现了你该怎么做？业务架构应该怎么改？这些都是值得大家去探索的，这两点应该是新时代数字化人才最值得关注的两点。</p><p></p><h4>对于技术人员来说，具体需要掌握哪些技能？</h4><p></p><p>&nbsp;</p><p>沈旸：目前有几种技术跟&nbsp;Web&nbsp;3.0&nbsp;有比较强的关系。</p><p>&nbsp;</p><p>第一，<a href=\"https://www.infoq.cn/topic/opensource\">开源</a>\"。开源不是一种技术而是一种理念，或者说是一种新的生产方式。因为开源能让信息变得更透明，比如区块链或者比特币为什么会那么火？如果它代码不开源，我相信是不可能火的。</p><p>&nbsp;</p><p>第二，<a href=\"https://www.infoq.cn/article/lqSvRZ7AB3NtjYpH79Rk\">分布式技术</a>\"。这项技术确实是&nbsp;Web&nbsp;3.0&nbsp;里面一个较核心的体系。在&nbsp;Web&nbsp;2.0&nbsp;里面所谓的分布式，还是带有一点集中的味道，比如一个互联网公司巨头，虽然用了分布式架构，但是分布式上所有的节点都是自己的，跟别人没关系。</p><p>&nbsp;</p><p>未来的分布式是跨企业的，它跟联盟链可能会有点类似，但是未来更多的是在技术和架构上要做到联盟的作用，包括隐私计算也要用在这里面。因为大家虽然联合，但是有些数据不能做到&nbsp;100%&nbsp;的共享，所以隐私计算是个很重要的点。</p><p>&nbsp;</p><p>第三，电子合同。因为所有的交易是围绕着合同来的，在&nbsp;ToB&nbsp;里面是合同，在&nbsp;ToC&nbsp;里面是发票。当发票或者合同一旦电子化了以后，是不是能够加入更多的信息？在&nbsp;ToB的合同里面，是不是能把介绍商机的中间人放在我的电子合同里？在&nbsp;ToC&nbsp;的发票里面，是不是能把渠道的信息放在发票里？</p><p>&nbsp;</p><p>如果可以的话，这就非常类似于智能合约。当我们做到电子化时，就可以纳入更多的载体，可以有两个合同，三个合同，四个合同，甚至有互相依赖的关系，可以用类似于智能合约的电子合同来制约，我觉得在国内这个领域是未来前景跟发展空间最大的一部分。</p><p></p><h2>Web&nbsp;3.0可能带来技术和性能的倒退</h2><p></p><p></p><h4>有人觉得Web&nbsp;3.0&nbsp;在国内落地限制比较多，您是怎么考虑这个问题的？</h4><p></p><p>&nbsp;</p><p>沈旸：我反而觉得国内限制可能没有那么多，因为如果大家仅仅把&nbsp;Web&nbsp;3.0&nbsp;跟区块链技术连接起来，或者跟数字货币连接起来，那么在国内落地是比较难的。但是数字货币不等于是&nbsp;Web&nbsp;3.0，因为&nbsp;Web&nbsp;3.0&nbsp;是一个可编程的价值交换体系，价值交换体系不等于是数字货币。</p><p>&nbsp;</p><p>区块链是有一些天生的瓶颈的。在区块链里面有个“不可能三角”，也就是性能、分布式还有安全，三个里面只能取两个，比如，比特币它牺牲了性能，但是保证了分布式和安全。但是很多联盟链为了达到性能的要求，牺牲中心化，甚至还有很多区块链存在一些伪概念，我觉得NFT也算是一个比较伪的概念。</p><p>&nbsp;</p><p>比特币比较好的一个思想是，它在链上完成了一个闭环，比如这个节点是你挖的矿，你就要告诉大家，而且其他节点是可以帮你认证的，在链上是可以完成认证的环节。但是很多区块链的其他的场景，比如食品溯源，无非是拿手机拍摄照片，而把数据上链，只是把数据存到一个所谓的分布式数据库里面去，因为没有人能告诉大家这个摄像头拍摄的食品是真的还是假的，或者摄像头是不是PS的，这些是无法在链上完成闭环的。</p><p></p><h4>Web&nbsp;3.0&nbsp;可能会给企业带来什么样的风险？企业又应该做怎样的准备？</h4><p></p><p></p><p>沈旸：Web&nbsp;3.0&nbsp;它带来的不一定是风险，有可能是技术上的倒退。区块链、比特币起来以后，以前大家都习惯了一百万并发，或者一千万并发，到了比特币里面之后变成每秒只交易7笔，这是在技术上、性能上的倒退。</p><p>&nbsp;</p><p>在&nbsp;Web&nbsp;3.0&nbsp;里面，如果说所有的公司都能遵守数据安全法，或者用户所有的行为都能遵守<a href=\"https://www.infoq.cn/article/bJN929Myd2VdLepSOgD2\">数据安全</a>\"，反而会导致现在很多互联网的应用场景变得不可行，在技术上甚至有可能会倒退。比如一旦采用了隐私计算，或者分布式数据共享以后，它的性能可能就没有以前关起门来自己处理这些数据的效率高，它在效率上甚至可能会有一定的损失。但是它会带来两个优势：第一，公平；第二，针对个体或者小企业可以产生更完整的数据画像。</p><p></p><h4>企业如何在&nbsp;Web&nbsp;3.0&nbsp;时代既不盲目跟风，又抓住时代机会呢？</h4><p></p><p></p><p>沈旸：在数字化行业里面，大家认为贝壳数字化的案例是非常不错的，因为原来房产中介领域是很难被数字化的，没有人愿意协同，没有人愿意合作。当你拿了一个房源，是你卖掉的，你就可以赚到，然后可能存在你辛辛苦苦维护的房源被别人卖掉的现象。在以前的模式里面，中介之间是互相防着的，这会导致中介之间做不了太多的生意。</p><p>&nbsp;</p><p>贝壳做的一件事是什么？就是把内部不同岗位的价值给衡量出来了。比如，有的人就是擅长跟客户维护关系；有的人就比较擅长抓住学区房的逻辑，善于做交易。在贝壳的逻辑里面，它把这些逻辑都拆成跟价值及其相关的环节以后，可以非常清楚地量化价值，比如，维护房源的人员占10%，交易可以占到10%，给房子拍照片的人可以占到10%，然后它就可以开始扩大规模了。</p><p>&nbsp;</p><p>在企业中，这种思想也可以运用。比如，公司今天招一个人进来，能够非常清楚看到这个人是有价值还是没价值的。如果他不擅长做这个环节，就把他放到另外一个环节，各个环节都轮岗以后，如果他还找不到自己的位置，那么这个人可能不太适合这个公司。</p><p>&nbsp;</p><p>整个组织，整个业务是能够非常清晰地以价值的方式往前去做滚动，你可以回想一下当自己的公司、自己的部门想扩张的时候，是否能够像贝壳一样，把这些环节想得那么清楚？如果说你能把它都想清楚了，这就是&nbsp;Web&nbsp;3.0&nbsp;在你们公司内部的一个雏形，它是一个初级的阶段，因为它还不能编程，但是未来如果再加入编程的逻辑，加入更多的变量，事情就会变得非常有意思。</p><p>&nbsp;</p><p>总之，我们不要把自己的思维局限在区块链、数字货币的这种技术方向上，所有能帮助我们实现价值交换的技术，我觉得都是属于&nbsp;Web&nbsp;3.0&nbsp;的范畴之内。</p><p></p><h4>嘉宾介绍</h4><p></p><p></p><p>沈旸，现任联易融副总裁，在咨询，交付，IT管理和研发管理等领域有丰富的经验。</p><p>&nbsp;</p><p>曾任神州数码集团股份有限公司副总裁兼CIO，云基地负责人，主要负责数字化转型、云基地建设和技术运营、营销私域运营等工作，领导云基础架构、区块链、量子应用、智能运维、分布式数据库、开源ERP等领域的开发管理和交付工作。</p><p>&nbsp;</p><p>在加入神州数码之前，曾在SAP工作十年，在SAP美国担任咨询技术架构师，领导数据分析，EPM（企业绩效管理）和GRC（治理，风险与合规）领域的国际专业服务团队。曾为150多家世界500强客户提供过数字化转型咨询服务。</p><p>&nbsp;</p><p>沈旸个人公众号「信息化与数字化」关注企业信息化战略，数字化转型，开源，SaaS，企业产品选型，ERP咨询与实践，技术与商业运营等领域。</p><p>&nbsp;</p><p>霍太稳，极客邦科技创始人兼&nbsp;CEO，InfoQ&nbsp;中国创始人，极客时间创始人，TGO&nbsp;鲲鹏会发起人。2007&nbsp;年创立&nbsp;InfoQ&nbsp;中国，2014&nbsp;年创立极客邦科技，2015&nbsp;年发起&nbsp;TGO&nbsp;鲲鹏会，2017&nbsp;年创立在线职业教育学习品牌极客时间，2019&nbsp;年开创极客时间企业版，拓展企业服务市场。</p>",
    "publish_time": "2022-09-29 16:23:38",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "DevOps 已死，平台工程才是未来",
    "url": "https://www.infoq.cn/article/7porVp7qVF03BVc2tDd6",
    "summary": "<p>开发者不想做运维，对DevOps来说不是个好事情。</p><p>&nbsp;</p><p>最近，除了Scott Carey发表了一篇<a href=\"https://www.infoq.cn/article/FfBlx8SYkV9hDBsgolqu\">调查文章</a>\"，软件工程师兼 DevOps 评论员 Sid Palas 也在推特上写道，“DevOps 已死，平台工程才是未来。开发者不想跟基础设施打交道，企业在发展过程中又需要控制自己的基础设施。只有平台工程，能将这两个相互矛盾的命题统一起来。”</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ec/ecc0570d6865dbe6cdb2827e6e5db4cf.jpeg\" /></p><p></p><p>&nbsp;</p><p>开发人员对于“谁构建，谁运维”的范式存在很大的<a href=\"https://www.reddit.com/r/devops/comments/wusvc9/devs_dont_want_to_do_ops/\">分歧</a>\"，一些开发人员认为他们接管运维任务是有益的，甚至有时是必要的，但也有一些开发人员根本不想接触运维。</p><p>&nbsp;</p><p>Luca Galante 是平台工程社区的主要贡献者和 Humanitec 的产品负责人，他就该主题进行了一次非正式的 Twitter 民意调查。他收到的回复很好地说明了这种分歧，41.8% 的受访者赞同“谁构建，谁运维”，42.1% 的受访者表示不同意，16.1% 的受访者表示无所谓。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e8/e8d560f73202300af98ed314852b5e71.jpeg\" /></p><p></p><p>&nbsp;</p><p>这也是因为 DevOps 增加了开发人员的认知负担，迫使许多团队重新在自动化带来的自由与认知负担之间进行权衡。事实上两者极难平衡。</p><p>&nbsp;</p><p>因此最近平台工程越来越受到关注。<a href=\"https://platformcon.com/\">PlatformCon</a>\"是第一个面向平台工程师的会议，吸引了超过 6,000 名与会者。Gartner 在其2022 年软件工程炒作周期中<a href=\"https://twitter.com/TheMarkONeill/status/1557531379746881536\">添加了平台工程</a>\"。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e2/e22c83ec34dfdbd6cabb4dc6527a41b0.png\" /></p><p></p><p>&nbsp;</p><p>那什么是<a href=\"https://platformengineering.org/blog/what-is-platform-engineering\">平台工程</a>\"？</p><p>&nbsp;</p><p>按照Luca Galante的说法，它是“设计和构建工具链和工作流的学科，为云原生时代的工程组织提供自助服务功能。平台工程师提供的集成产品通常被称为‘内部开发者平台（Internal Developer Platform）’，涵盖了应用程序整个生命周期的运维需求。”</p><p>&nbsp;</p><p>内部开发者平台往往由大量 API、工具、服务、知识和支持所构成，目的是为开发人员提供代码生产部署所必需的一切助力。至于平台本身，则由公司专门的专家团队或所有者负责维护。</p><p>&nbsp;</p><p>它为工程团队实现了真正的 DevOps&nbsp;理念，附带了推荐的工具和内置的最佳安全实践，减少了认知负担，同时保留了开发人员在需要时进行维护的自由。这也就是为什么我们说“DevOps 已死，平台工程才是未来”的原因。</p>",
    "publish_time": "2022-09-29 16:54:23",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Docker 之父：Go、Rust 为什么会成为云原生的主导语言？",
    "url": "https://www.infoq.cn/article/MwasczNiyzIY7VCNlwo1",
    "summary": "<p>&nbsp;</p><p></p><blockquote>Docker公司CTO Justin Cormack 在InfoQ的会议上与Docker 公司创始人、Docker之父 Solomon Hykes、Vitess联合创始人Sougoumarane&nbsp;、Krustlet&nbsp;主要作者 Matt Butcher等人一起探讨了等各大云原生项目在最开始为何选择了 Go 和 Rust 语言，并对云原生项目如何选择编程语言提出了几点建议。&nbsp;我们将本次大咖们的对话进行了编译，希望对大家有所启发。</blockquote><p></p><p>&nbsp;</p><p>&nbsp;</p><p>Cormack：大家好，我是Justin Cormack，<a href=\"https://xie.infoq.cn/article/e3150f7115f5b9f8d1b4ee4b9\">Docker</a>\"公司的CTO。另外，我也是云原生计算基金会技术监督委员会的一员。</p><p>&nbsp;</p><p>我一直在关注编程语言的发展，以及这些语言如何改变我们的工作方式。在云原生计算基金会中，我们总共拥有42个已毕业和正在孵化的项目，其中26个项目主要由<a href=\"https://www.infoq.cn/article/Et5Tz8NElyYf3WyUKXC9\">Go</a>\"编写而成。因此，我想聊聊Go为什么能够占据主导地位、云原生领域还有哪些新语言正在涌现，以及云原生这一路的发展历程。</p><p>&nbsp;</p><p>这些项目中，最具历史影响力的当然是Docker，而在我于2015年加入Docker时，Go已经成为公司内广泛采用的一种成熟语言。下面要请出Docker公司创始人Solomon Hykes，由他本人介绍当初为什么要选择Go，以及他们为何看好当时仍显青涩的Go、而非Python。</p><p>&nbsp;</p><p></p><h2>Go 语言的使用情况</h2><p></p><p></p><h4>Docker 为什么选择 Go？</h4><p></p><p></p><p>Hykes：我们需要面向的并不是Java 或 Python平台，而是Linux平台，这是一方面。另一方面，老实说，选择 Go也有个人直觉的因素在里面。我们之前都是用Python和C编写分布式系统的开发人员，对Python在实际生产中的应用已经非常熟悉了，所以大家都很讨厌Python的类型问题。最终，这些本该被早点发现的问题就暴露在运行时中，再也没法更改。</p><p>&nbsp;</p><p>此外，我们还想重新创建一套轻量化线程系统。这项工作已经推进一段时间了，当时我们会经常用到gevent和Greenlets之类的库和框架，而 Go 内置有goroutines，虽属于同类工具但表现更好，具备C语言的类型化优势。所以，在我们这些开发分布式系统的 C 和 Python 程序员来看，Go 真的是一个完美选项。</p><p>&nbsp;</p><p>Cormack：那你当时为什么不选择<a href=\"https://xie.infoq.cn/article/af9b09cb6a18d89be02fa3583\">C</a>\"语言呢？</p><p>&nbsp;</p><p>Hykes：我从来就没考虑过用C语言。</p><p>&nbsp;</p><p>Python属于默认选项，毕竟我们已经在用了，而在我们关注的每项指标上，Go 都表现得更好。其一，它能编译为独立的二进制文件；其二，它正好适配我们的编程模型；其三，我们特别想培养起一个庞大的开源贡献者社区。我们设想中的 Docker 不仅会是款成功的工具，还会是个成功的开源项目，因此语言的选择对于后期建立社区非常重要。比方说，我们得保证选择的语言有足够高的人气，保证语言本身不会成为理解源代码、贡献新代码的障碍。Go的好处就是它的语法比较平易近人，会写C或者Python的人肯定能很快上手Go。</p><p>&nbsp;</p><p>总之，Go不像Haskell或者Lisp那么激进，它会继续遵循主流编程语言中的种种普遍性约定。这当然是个巨大的优势，能让新人们更容易地为项目做出贡献。</p><p></p><h4>Vitess 又为何选择Go？</h4><p></p><p>&nbsp;</p><p>Cormack：Hykes曾在采访中提到过，当时他很认真地研究了 Go 的现有生态系统，正是 Vitess 项目（现为云原生计算基金会项目）让他下定了决心。Vitess 是当时 YouTube 上的一个项目，用于支撑 YouTube 快速增长的视频业务。为此，我还专门跟 Vitess 创始人之一的Sougoumarane 聊过他选择Go语言的原因。</p><p>&nbsp;</p><p>Sougoumarane：其实，当时的Go可以算是意外入选。</p><p>&nbsp;</p><p>2010年刚开始准备启动这个项目时，我们的主要选项是Python、Java和C++，当时能想到的也就这三个选项。考虑 Python 是因为 YouTube 本身就是用Python编写的，但它的问题也让我们记忆犹新——它不是那种系统编程语言，执行效率不够理想，所以没法满足我们构建高效代理的需求。</p><p>&nbsp;</p><p>那么，接下来就只剩下 Java 和 C++了。我对 Java 不怎么熟悉，而且跟Java有关的回忆一点也不美好。我也说不上来为什么，可能跟我之前遇到的人有关吧，反正我也不太认可Java。另一位创始人 Mike 则明确反对 C++，他说自己用 C++ 写不出高水平的软件。</p><p>&nbsp;</p><p>我们选择Go语言有几个原因，还有个有趣的解释是大家一时兴起，如果我们使用Go并且项目失败了，我们可以将其归咎于此。实际上，那时候最打动我们的是Go语言的作者，也就是Rob、Russ、Ian和Robert Griesemer。</p><p>&nbsp;</p><p>那时候Go才诞生不久，所以我们必须得看看它的作者是什么水平。在深入研究了这几位之后，我们意识到他们的价值观、思想甚至是哲学理念都非常成熟，而且跟我们处理问题的思路颇为相似——既不太理论化，也不太过守旧，他们是在以非常务实且平衡的态度解决问题。当时谷歌内部甚至出现了那种不太好的风气，就是工程师们开始对复杂性过分迷恋，总觉得复杂的才是好的。但Go语言的创始团队不一样，他们坚持认为简单的才是好的。我很喜欢这样，我喜欢他们的想法。</p><p>&nbsp;</p><p>后来，我把我们的难题告诉了Dmitry Vyukov。我们一共有八个CPU，但当时的Go运行时只能用上其中六个。我跟他讲，如果他能把运行时优化一下，把剩下两个也用上，那我们就选Go。</p><p>&nbsp;</p><p>他自己鼓捣了大概两个月，然后拿出了设计方案和原型实现。我们试了一下，确实能用上全部八个CPU。问题得到解决，他挽救了我们这个项目。如果他没能成功，我们可能早就放弃Go了。</p><p>&nbsp;</p><p>这其实跟Go自身的设计无关，只是我们当时确实面对现实压力，必须找到靠谱的解决方案。Vyukov的解决方案恢复了我们对Go的信心，之后我们就坚定地在Go这条路上走了下去，再没有丝毫犹豫。</p><p>&nbsp;</p><p>Cormack：Hykes和Sougoumarane都在为自己的新项目寻找合适的语言，一种面向云原生的系统语言。他们俩也都意识到了社区的重要意义。对Sougoumarane来说，他构想的社区就是Go创造者和希望让这种语言愈发强大的群体。而对Hykes来说，他构想的就是Docker社区，吸引众多成员在这里用Go语言实现容器化。</p><p>&nbsp;</p><p>2012年末，负责 NATS 项目的 Derek Collison 在 Twitter 上提到，Go将在未来两年内成为系统和云原生领域的主导语言。当时人们对此普遍抱有怀疑，但事实却证实了他的猜测。那个时候，Docker 和 Kubernetes 已经先后亮相，采用量也迎来了爆炸式增长。我问过他当时为什么会做出这样的断言。</p><p>&nbsp;</p><p></p><h4>Go为什么能成为云原生主导语言？</h4><p></p><p>&nbsp;</p><p>Collison：最初 <a href=\"https://www.infoq.cn/article/F2FxqSmQrduE1iTUk_ju\">NATS </a>\"项目是用Ruby语言编写的，跟<a href=\"https://www.infoq.cn/article/2017/06/Microsoft-Cloud-Foundry\">Cloud Foundry</a>\"一样。其实从开发的角度来看，我一直倾向于在系统建立完成后只使用一种语言进行后续开发。时至今日，我仍然觉得Ruby是种很棒的语言。我们尝试使用Ruby VM和各种依赖项部署生产系统，而且依靠事件机器高效执行异步操作，但最终没能成功。</p><p>&nbsp;</p><p>2012年，我们创办了Apcera，而且需要将NATS作为Apcera平台的控制平面寻址发现与遥测系统，这就是Continuum。我不想再用Ruby了，所以想试试当时的新语言Go，好像刚推出0.52版本吧。当然，我们也考虑过相对年轻的Node.js，但它还是比 Go 老了点。所以，我们最终决定给“年轻人”个机会。</p><p>&nbsp;</p><p>后来我们慢慢熟悉了Go生态系统，并发现了Go很多当初决策时可能并没注意到的独特优势。刚开始，大家只是希望用 Go 回避掉在Ruby生态中部署生产系统的痛苦经历。而Node，虽然它有npm，但在本质上仍然是个虚拟机，拥有相应的包管理系统，所以只能围绕它执行所有包。Go则不同，它有能够提供准静态可执行文件。当时我们已经有了完整的静态可执行文件，只需要稍加调整就能使用。这很重要，意味着我们的部署可以作为SCP方法。另外，goroutines和并发模型对我们也很有吸引力。</p><p>&nbsp;</p><p>对我来说，另一个重要的决定因素是，我们已经在TIBCO上花了很长时间并设计出了一套具有类似功能的系统，所以我们在TIBCO项目中继续使用C语言。我个人也一直非常喜欢C，它用起来虽然困难重重，但离机器更近，或者说离“解空间”更近其实挺有乐趣的。我也学过Rust。今年假期，我打算抽时间学学Zig。以后我可能要彻底告别C语言编程了，但我还是很喜欢C。</p><p>&nbsp;</p><p>言归正传，当时我们需要把80%～90%原本放置在栈上的用例，透明转移到堆中。这件事在C里很难实现，需要耗费大量时间和精力，但在Go里却几乎没有难度。这事对我无异于当头棒喝，原来自己在C中费尽心力才搞成的效果，在Go中根本就不是问题。</p><p>&nbsp;</p><p>当然，那时候的Go只是0.52版本，还有很多自己的问题：垃圾收集器非常原始，标记和清除功能也很粗糙等等。但我觉得这些都无所谓，因为可以在架构设计上把大部分东西都放在栈上。这样在运行经过栈时，代码就会在Go中自动升级，不用再像TIBCO的C代码库那样强加转变。可以说，静态可执行文件和真栈让我下定决心选择了Go。</p><p>&nbsp;</p><p>当然，Go的并发性也很出色。现在回顾整个生态，go-funk的影响其实要比人们想象中大得多。如今所有开发者都在以同样的方式处理问题，使用现成的Go Vet、pprof和其他测试工具。这样哪怕有一天我暂时离开项目，那后面再回来的时候也能很快搞清楚这是在干什么。即使是其他人编写的Go代码，搞清其中的逻辑和意图也要比Haskell或者Caml简单得多。哪怕是在Ruby中，如果隔几个月再看之前编写的代码，也往往需要一个小时左右才能找回当初的思路。总之，Go就是这样一种对新人特别友好、适合快速上手的语言，我觉得这一点非常、非常重要。</p><p>&nbsp;</p><p></p><h2>Rust的使用情况</h2><p></p><p>&nbsp;</p><p>Cormack：我们已经聊了很多关于Go当初如何在云原生生态系统中迈出了第一步。最近，我们看到 <a href=\"https://www.infoq.cn/article/o2QRFPElEpOgvLPe5qzI\">Rust</a>\" 项目开始快速腾飞，其他一些语言也风头正劲。我跟 Matt Butcher 聊了聊他为什么要选择Rust。他最早其实是Go程序员，还构建了<a href=\"https://www.infoq.cn/article/CWYP83MXqg1O75G9LHHm\">Helm</a>\"等项目。但最近，他开始在新项目里用Rust了。</p><p>&nbsp;</p><p>Butcher：Ryan Levick 是Rust语言的核心维护者之一。我们开始选择语言时，他正好也在微软工作。那会儿他刚加入我们Slack频道，并提到“听说你正打算开发一款Clippy风格的Rust程序。”基本上，哪里有想要学习Rust的人，哪里就有Ryan的身影和热情的指导。他不光分享基础知识，也会提供学习资源，并简要回答一些常见问题。很快，部门中就有七、八个人决定试试Rust，形势就这么转变了。</p><p>&nbsp;</p><p>我们之所以决定用 Rust 来编写 Krustlet，是因为当时我们想构建一款 Kubernetes 控制器。其实最初我们并没有刻意选择Rust，只是随手一用，之后的新项目就逐渐默认用Rust、而非Go了。</p><p>&nbsp;</p><p></p><h4>Krustlet 为什么选择 Rust？</h4><p></p><p>&nbsp;</p><p>Cormack：你为什么要用 Rust 编写 <a href=\"https://www.infoq.cn/article/OUMc77Mjsl67M39LQGTg\">Krustlet</a>\"？</p><p>&nbsp;</p><p>Butcher：主要是我们当时想搞一个WebAssembly运行时，当时最好的WebAssembly运行时要么是面向 JavaScript 生态用 C 或 C++ 编写的，要么就是用 Rust 编写的。我们当时打算用Wasmtime，也就是 WASI 规范的参考实现，它是用Rust编写的。我们研究了一下，发现可以把它编译成库，然后用链接到 Go。</p><p>&nbsp;</p><p>从这里开始，大家逐渐开始研究 Rust。有人喜欢它的泛型，有人喜欢它的kube.rs crate库。不久之后，人人都迷上了Rust。木已成舟，整个 Krustlet 也就只能都用 Rust 编写了。其实 Rust最初只有一个用途，就是用于开发 WebAssemblyl 运行时，但它跟我们的需求太贴合了，所以最后成了正确的语言选项。顺着这种习惯，我们后面开始用 Rust 编写其他项目，而且越用越觉得顺手、舒心。</p><p>&nbsp;</p><p></p><h2>其他语言情况如何？</h2><p></p><p></p><h4>WebAssembly与Zig</h4><p></p><p>&nbsp;</p><p>Cormack：Collison 在面向边缘位置开发轻量级语言时，也经历了类似的过程。我们讨论过要不要使用WebAssembly，也考虑过 Zig。</p><p>&nbsp;</p><p>Collison：大多数新型生态系统都采取类似的设计方法，即标准库不但要能扩展，还得足够完善。就连相对年轻的低级语言Zig也在标准库身上下了不少功夫，让它尽可能充实。</p><p>&nbsp;</p><p>Cormack：甚至连 C++ 都打算引入 HTTP 和 TLS 了，但估计还得十年才能实现。</p><p>&nbsp;</p><p>Collison：我不知道自己的职业生涯还能持续多久，但我可以自信地说，我再也不会用C或者C++编程了。没错，现在更好的语言选项太多了。</p><p>&nbsp;</p><p>另外我觉得，未来的边缘计算没准会让云计算也相形见绌。云计算很快就会沦为现在的大型机——仍然存在，但已经没人在乎了。没人会跟大型机直接交互，它们单纯成了生活中的背景。未来，谁在执行同等任务时耗费的能量和资源更少，谁就是老大。</p><p>&nbsp;</p><p>我觉得 .NET 和 Java 业务还会继续存在，特别是在数据中心或者云环境下，但真正有活力的一代，应该会是C、Rust、Zig，以及速度极快的 Wasm 或者其他 JavaScript 引擎，它们可能更松散，也可能会出现MicroPython、CircuitPython之类更轻量化的语言。没准到时候TinyGo会大放异彩呢，至少我觉得有希望。</p><p></p><h4>Q编程语言</h4><p></p><p>&nbsp;</p><p>Cormack：Hykes现在仍然是 Go 的铁粉和忠诚用户，但他也希望Go语言能再多一点变化。</p><p>&nbsp;</p><p>Hykes：我还在用Go。其实我不是那种热衷尝试最新语言的人，我更习惯于长期使用相同的语言工具。没错，我们当初的选择可能确实推动了Go以及后来YAML的普及，但这并不能说明谁就一定比谁更好。</p><p>&nbsp;</p><p>以YAML为例，我不是说它不好，而是它有点被过度使用了。比如我们目前正在开发的新项目Dagger就是用Go编写的，而且具备可配置和可定制功能。之所以不选择 YAML 或者 JSON，单纯是因为它们不支持我们想要表达的功能。这时候我们建立了<a href=\"https://www.infoq.cn/article/HuPteeF2p0W08k*gTVHe\">Q语言</a>\"。</p><p>&nbsp;</p><p>其实最早我们在初代原型中使用的是HCL，毕竟Terraform和其他HashiCorp工具用的都是HCL。我觉得Q语言只是个内部项目，是从库衍生出来的，可供大家在自己的工具中使用。Q语言有着非常严重的局限性，甚至可以说它的作用与特定工具紧密关联，在最初设计上根本就不属于能广泛适应多种工具的独立语言。但另一方面，Q语言确实是一种语言，能够解决实际问题。正如Go当初能解决特定问题一样，Q也完美匹配我们的现实需求。</p><p>&nbsp;</p><p>Q更像是YAML的一种替代品，我对它的未来非常看好，Q应该能在不少云原生配置场景中取代YAML。</p><p>&nbsp;</p><p></p><h2>云原生项目如何选择编程语言</h2><p></p><p>&nbsp;</p><p>Cormack：首先就是，一定要认清社区的重要意义。当我们考虑使用一种新的语言，并规划它的功能特性和构建方式时，种种判断都应以社区为基准。</p><p>&nbsp;</p><p>第二，一定要给项目以社区，想清楚自己希望整个社区以怎样的方式使用正在开发的语言和工具。这就是典型的问题导向了，在云原生领域，很多人会提出明确的要求，例如静态二进制文件，这些要求能帮助他们轻松分发代码、或者让代码在生产环境中轻松运行。总之，一定要把这些需求跟当前设计匹配起来，这种立足新领域进行思考的机会非常宝贵，能帮我们判断自己正在使用的工具或者语言到底合不合适，并决定是否有必要做出更改。</p><p>&nbsp;</p><p>性能对云原生用例同样非常重要。有趣的是，语言的性能水平其实是有弹性的。Sougoumarane在开发YouTube的时候也有这样一段真实经历：随着他们对性能的要求越来越严苛，Go也一直在更新并努力满足这些需求，所以直到最后Go语言也没有拖过性能的后腿。所以请牢记一点：语言会随着用户的改变而发展，会随着采用率的提升而完善，由此发展出庞大的生态系统。这些非常重要，足以决定一种语言的命运。</p><p>&nbsp;</p><p>还有最后一点，就是如今人们学习新语言的方式越来越多样。有些人会拉长思考周期，在真正下定决心前用好几年时间来慢慢实验。也有些人会主动试水，通过实践尝试新语言的工作效果和其中的机会空间。总之，新语言的学习过程对程序员们来说越来越重要。我们都在不断学习新的编程语言，借此探索并更新自己看待和解决问题的思路。</p><p>&nbsp;</p><p>所以，当我们进入一个新领域或者打算尝试一个新想法时，首先想到的就是哪种编程语言最切合需求、自己想要建立什么样的社区？这个问题的答案，往往会决定项目的未来。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/presentations/languages-cloud-native/?itm_source=infoq&amp;itm_medium=videos_homepage&amp;itm_campaign=videos_row1\">https://www.infoq.com/presentations/languages-cloud-native</a>\"</p><p>&nbsp;</p>",
    "publish_time": "2022-09-29 17:51:58",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "抖音背后的生产线是怎样炼成的？",
    "url": "https://www.infoq.cn/article/6irymI0sWswJxqAPhOTv",
    "summary": "<p>近日，飞书项目负责人洪涛在媒体分享会上透漏了飞书项目的现状以及未来规划。据他透漏目前飞书项目已签约了 100 余家企业客户，包括理想汽车、安克创新、Keep、猎聘等。此外，飞书项目之后还会考虑向传统制造业以及中小微企业甚至个人延伸。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/25/57/25dcd929ccd01b05341f0f5148643257.jpg\" /></p><p></p><p>飞书项目是“飞书 Office”与“飞书 People”两大核心产品线之外的产品矩阵，主要面向产品研发团队。</p><p>&nbsp;</p><p></p><h4>源于抖音，飞书项目是如何诞生的？</h4><p></p><p>&nbsp;</p><p>今年 5 月 25 日，飞书产品负责人沈学良在飞书发布会上正式发布了飞书项目，这是一款面向大型产研团队的项目管理工具，也是抖音高速成长背后的生产线。</p><p>&nbsp;</p><p>彼时，他曾谈到作为国民级现象的应用，抖音产品背后也存在着诸多挑战。其中，产研团队的挑战最为紧迫，主要表现为：</p><p>&nbsp;</p><p>第一，工具的割裂。抖音团队没有统一的项目管理工具，比如产品、设计、研发、测试等，每个角色拥有不同的工具。可以说，这些工具大多是由业务团队负责人所按照个人喜好所挑选，工具之间数据并没有打通，要靠大量的会议和点对点的沟通来拉齐信息。</p><p>&nbsp;</p><p>第二，复杂流程和多角色协同。以抖音为例，需求从开始提出到完成结束，需要经历相当复杂的流程。</p><p>&nbsp;</p><p>第三，新人学习成本高。抖音团队的大规模扩张，使每一个入职的新人都需要快速熟悉、了解内部开发流程。</p><p>&nbsp;</p><p>为了解决以上产研团队面临的问题，抖音团队内部开始孵化代号为 Meego 的工具，也就是现在的飞书项目。2018 年 10 月，Meego 第一版完成。据洪涛回忆，从写下第一行代码到第一个版本，只花了大概不到半个月时间；2020 年 8 月，这一工具开始在字节内部应用，基本覆盖字节所有的 App；2021 年 3、4 月份，飞书团队和洪涛团队进行整合，并确定了飞书项目这个名字。也是从这时候开始，飞书项目尝试扩展外部客户。</p><p>&nbsp;</p><p>“通过邀约制度，我们选择了飞书头部的客户进行共创。2022 年 5 月，外部客户需求成立，并且带给飞书新的输入，融入产品之中。”</p><p>&nbsp;</p><p>从飞书项目的诞生可以看出，从 2018 年到 2022 年，飞书项目在字节内部总共经历了四年打磨，并成功支持了抖音产研团队的相关管理、迭代工作。“对于抖音这样的超大型应用，团队分工和协作极其复杂，不仅需要科学的管理机制，还需要强力的工具和平台。飞书项目在其中扮演了非常重要的角色。”</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/66/44/66efbefde56ae310349bff74f6f64e44.jpg\" /></p><p></p><p>那么，飞书项目究竟凭借什么帮助抖音团队进行项目的快速迭代呢？对此，抖音项目负责人介绍了三点具体原因。</p><p>&nbsp;</p><p></p><h4>流程是突破口</h4><p></p><p>&nbsp;</p><p>“如果要满足项目快速迭代的需求，那么对于不同的工作内容，应该采用适合其工作流的流程；对于不同的业务线团队，也应该采用适合其协同方式的流程”，也就是说，流程是团队的项目管理中的核心点，同时也成为管理工具的突破口所在。</p><p>&nbsp;</p><p>因此，在飞书项目里，正是把复杂的项目抽象、沉淀为标准的节点流。这样，协作的 SOP 就能通过工具去呈现和进一步沉淀，对于产研团队来说，也能够遵循统一的流程协作，从而达到信息的高效流通。</p><p>&nbsp;</p><p>举例来看，飞书项目上可以创建需求类型模板，并进行可视化的呈现，使得抖音项目内成员能够一目了然项目流程规划。</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/71/62/7190e06c68738e9784c34408acd08562.png\" /></p><p></p><p>同时，在需求流程的编排上，飞书项目也可以引入综合评审节点，让由抖音各业务线负责人组成的委员会对关键需求进行投票决策，从而降低流程中的开发风险。</p><p>&nbsp;</p><p>除此之外，对于探索型需求，飞书项目能够在流程的编排上，尽可能减少依赖和等待，让流程节点多一些并行。这样一来，飞书项目的工作流管理功能，能够支持抖音团队在不同场景下的流程管理需求。</p><p>&nbsp;</p><p></p><h4>信息传递是关键</h4><p></p><p>&nbsp;</p><p>在一个大型组织中，如何高效的进行信息传递是一件有挑战但又很关键的事情。这其中，既要保障关键信息能传递到位，又要降低信噪比。为了保证这一点的实现，飞书项目又做了哪些设计呢？</p><p>&nbsp;</p><p>首先，飞书项目中为需求配置了一个跨线影响模块的字段。它会作为一个创建需求时的必要的填写项由产品经理来完成；</p><p>&nbsp;</p><p>其次，通过飞书项目上注册需求创建事件的webhook，捕获这个空间下所有需求创建的消息，进而通过解析相关需求信息，判断哪些人员进行参与；</p><p>&nbsp;</p><p>再次，通过飞书项目的open api能力，自动触发跨线影响评估的审核流程；</p><p>&nbsp;</p><p>最后，通过飞书项目节点到达事件的webhook，捕捉到需求启动、实验结论产出等关键流程节点；然后将其中的关键信息进行解析、汇总，通过飞书机器人分发给参与需求决策的关键角色。</p><p>&nbsp;</p><p></p><h4>提升研发效率用数据说话</h4><p></p><p>&nbsp;</p><p>“字节文化的另一个特点就是数据驱动，用数据说话。抖音的一个需求不知道做得好不好，那就开个 AB 实验观察下数据。”抖音团队负责人也提到，对团队内的项目情况进行复盘时，飞书项目的图表功能就发挥了重要作用。比如，在图表功能中，能够清晰地看到双月的需求吞吐情况、Bug数量、解决速度等等。</p><p>&nbsp;</p><p>值得注意的是，除了图表功能的直观，飞书项目同时还服务于抖音大团队的效率度量。众所周知，对于复杂的工程来说，效率度量的定义非常广，并且抖音下各个业务团队的需求流程是不一样的，从效率的角度出发也不尽相同。这里，飞书项目的解决办法是构建了一个数据平台，用于管理这些度量中的标准概念，同时完成数据采集、清洗和指标呈现的过程。其中，数据采集工作，同样也是利用了飞书项目提供的open api能力。</p><p>&nbsp;</p><p></p><h4>写在最后</h4><p></p><p>&nbsp;</p><p>诞生于字节内部的飞书项目主要适配于互联网科技行业的产研团队，但飞书项目的负责人洪涛提及，飞书项目的可能性却不局限于此。据他介绍，目前飞书项目除了在抖音团队中成功打样之外，还在大型游戏的开发中进行了落地应用，“目前上海游戏圈 F4 公司，三家都在使用飞书项目。”</p><p>&nbsp;</p><p>除了互联网和游戏行业，飞书项目在新能源汽车、消费电子等行业也有实践案例。据称，理想汽车使用飞书项目，仅产研排期场景就提效 50%，积累了上万条项目管理数据。除此之外，据洪涛透漏，飞书项目未来也将尝试在制造业中进行应用，至于结果如何，尚且需要时间来验证。</p>",
    "publish_time": "2022-09-29 18:08:49",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]