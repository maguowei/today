[
  {
    "title": "Java近期新闻：JDK 20的JEP提升为Targeted状态，AWS推出Lambda SnapStart特性",
    "url": "https://www.infoq.cn/article/ZYvBqLEPNaY4FvJjyopx",
    "summary": "<p></p><h4>OpenJDK</h4><p></p><p>JEP 432，<a href=\"https://openjdk.org/jeps/432\">记录模式（第二次预览）</a>\"，已从JDK 20的Proposed to Target状态<a href=\"https://twitter.com/OpenJDK/status/1597674326425096192?cxt=HHwWgMCi1biViqwsAAAA\">提升</a>\"为Target状态。该JEP更新自JEP 405，<a href=\"https://openjdk.org/jeps/405\">记录模式（预览版）</a>\"，更新包括：增加了对通用记录模式类型参数推断的支持；增加了对记录模式出现在增强for语句条件判断中的支持；并删除了对命名记录模式的支持。</p><p>&nbsp;</p><p>JEP 433，<a href=\"https://openjdk.org/jeps/433\">switch模式匹配（第四次预览）</a>\"，已从JDK 20的Proposed to Target状态<a href=\"https://twitter.com/OpenJDK/status/1597674334771810304?cxt=HHwWgMCo7faViqwsAAAA\">提升</a>\"为Target状态。该JEP更新自JEP 427，<a href=\"https://openjdk.org/jeps/427\">switch模式模式匹配（第三次预览</a>\"），更新包括： 简化了switch标签语法；现在， switch表达式和语句以及支持模式的其他构造体都支持泛型类型模式和记录模式的类型参数推断。</p><p>&nbsp;</p><p>JEP 434，<a href=\"https://openjdk.org/jeps/434\">外部函数和内存API（第二次预览）</a>\"，已从JDK 20的Proposed to Target状态<a href=\"https://twitter.com/OpenJDK/status/1597674343168757760?cxt=HHwWgMCitbWWiqwsAAAA\">提升</a>\"为Target状态。该JEP在<a href=\"https://openjdk.java.net/projects/panama/\">Panama</a>\"项目的支持下不断演进：JEP 424，<a href=\"https://openjdk.org/jeps/424?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2Njc5NTcwNzQsImZpbGVHVUlEIjoiSm5mVnpmNG5ZdThBcDFsdyIsImlhdCI6MTY2Nzk1Njc3NCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NTA5NTIwOX0.9fQ4yI44wd5QQLZv8_85Xhtv4-M8HKKZQzqwaeEbaM4\">外部函数和内存API（预览）</a>\"，在JDK 19中交付；JEP 419，<a href=\"https://openjdk.org/jeps/419?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2Njc5NTcwNzQsImZpbGVHVUlEIjoiSm5mVnpmNG5ZdThBcDFsdyIsImlhdCI6MTY2Nzk1Njc3NCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NTA5NTIwOX0.9fQ4yI44wd5QQLZv8_85Xhtv4-M8HKKZQzqwaeEbaM4\">外部函数和内存API（第二个孵化器版本）</a>\"，在JDK 18中交付；以及JEP 412，<a href=\"https://openjdk.org/jeps/412?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2Njc5NTcwNzQsImZpbGVHVUlEIjoiSm5mVnpmNG5ZdThBcDFsdyIsImlhdCI6MTY2Nzk1Njc3NCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NTA5NTIwOX0.9fQ4yI44wd5QQLZv8_85Xhtv4-M8HKKZQzqwaeEbaM4\">外部函数和内存API（孵化器）</a>\"在JDK 17中交付。该JEP提议基于反馈进行改进，并在JDK 20中提供第二次预览。更新包括：统一了 MemorySegment 和 MemoryAddress 接口，即，内存地址由零长度的内存段建模；并且增强了MemoryLayout 密封接口，以便于与JEP 427，<a href=\"https://openjdk.org/jeps/427?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2Njc5NTcwNzQsImZpbGVHVUlEIjoiSm5mVnpmNG5ZdThBcDFsdyIsImlhdCI6MTY2Nzk1Njc3NCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NTA5NTIwOX0.9fQ4yI44wd5QQLZv8_85Xhtv4-M8HKKZQzqwaeEbaM4\">switch中的模式匹配（第三次预览）</a>\"一起使用。</p><p>&nbsp;</p><p>JEP 429，<a href=\"https://openjdk.org/jeps/429\">作用域值（孵化器）</a>\"，已从JDK 20的Candidate状态<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2022-November/007225.html\">提升</a>\"为Proposed to Target状态。这个<a href=\"https://openjdk.java.net/jeps/11\">正在孵化</a>\"的JEP，最初名为范围局部变量（孵化器，Extent-Local Variables），由<a href=\"https://wiki.openjdk.java.net/display/loom/Main\">Loom项目</a>\"赞助，提议在线程内部和线程之间共享不可变数据。这优于线程局部变量，尤其是在使用大量虚拟线程时。</p><p>&nbsp;</p><p>JEP 436，<a href=\"https://openjdk.org/jeps/436\">虚拟线程（第二次预览</a>\"），已从JDK 20的Candidate状态<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2022-November/007223.html\">提升</a>\"为建议Proposed to Target状态。在<a href=\"https://wiki.openjdk.org/display/loom/Main\">Loom项目</a>\"的支持下，该JEP基于JDK 19中提供的JEP 425，<a href=\"https://openjdk.org/jeps/425\">虚拟线程（预览版）</a>\"，提出了第二次的预览，以便有时间为该功能的演进提供更多的反馈和经验。需要注意的是，除了少量在JDK19中被固化的JEP 425 API外，本预览版本没有进行任何更改，因此没有在第二次预览中提出。</p><p>&nbsp;</p><p>JEP 437，<a href=\"https://openjdk.org/jeps/437\">结构化并发（第二个孵化器）</a>\"，在JDK 20中从Candidate状态<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2022-November/007224.html\">提升</a>\"为Proposed to Target状态。该JEP也是在<a href=\"https://wiki.openjdk.org/display/loom/Main\">Loom项目</a>\"的支持下，提议基于从JDK 19中提供的JEP 428，<a href=\"https://openjdk.org/jeps/428\">结构化并发（孵化器）</a>\"中重新孵化该特性，以便有时间提供更多的反馈和经验。唯一的变化是更新了 StructuredTaskScope 类，以支持在任务作用域中创建的线程继承作用域值。这简化了跨线程不可变数据的共享。</p><p>&nbsp;</p><p>这三个JEP的审查将于2022年12月6日结束。</p><p>&nbsp;</p><p></p><h4>JDK 20</h4><p></p><p>JDK20<a href=\"https://jdk.java.net/20/\">早期访问构建版本</a>\"中的第<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-20%2B26\">26</a>\"版也已于上周发布，其中包括对第25版各种<a href=\"https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2020%20and%20%22resolved%20in%20build%22%20%3D%20b23%20order%20by%20component%2C%20subcomponent\">问题</a>\"的修复和<a href=\"https://github.com/openjdk/jdk/compare/jdk-20%2B22...jdk-20%2B23\">更新</a>\"。有关该版本的更多详细信息，请参阅<a href=\"https://jdk.java.net/20/release-notes\">发</a>\"<a href=\"https://jdk.java.net/20/release-notes\">布</a>\"<a href=\"https://jdk.java.net/20/release-notes\">说明</a>\"。</p><p>&nbsp;</p><p>对于<a href=\"https://openjdk.java.net/projects/jdk/20/\">JDK 20</a>\"，鼓励开发人员通过<a href=\"https://bugreport.java.com/bugreport/\">Java缺陷数据库</a>\"报告缺陷。</p><p>&nbsp;</p><p></p><h4>JavaFX 20</h4><p></p><p>JavaFX 20<a href=\"https://jdk.java.net/javafx20/\">早期访问构建版本</a>\"中的<a href=\"https://github.com/openjdk/jfx/releases/tag/20%2B10\">第10版</a>\"已提供给Java社区。JavaFX专为使用JDK 20早期访问构建版本而设计，应用程序开发人员可以在JDK 20上使用JavaFX 20构建和测试其应用程序。</p><p>&nbsp;</p><p></p><h4>Spring框架</h4><p></p><p><a href=\"https://spring.io/projects/spring-integration\">Spring Integration</a>\"&nbsp;6.0已<a href=\"https://spring.io/blog/2022/11/29/spring-integration-6-0-goes-ga\">发布</a>\"，其特性包括：JDK 17和Jakarta EE 9基线；支持GraalVM和Spring AOT引擎的原生镜像；具有千分尺和千分尺跟踪的可观测性仪器；以及对Jakarta EE 10的支持。有关该版本的更多详细信息，请参阅<a href=\"https://docs.spring.io/spring-integration/docs/current/reference/html/whats-new.html#whats-new\">最新动态页面</a>\"。</p><p>&nbsp;</p><p><a href=\"https://spring.io/projects/spring-vault\">Spring Vault</a>\" 3.0也已<a href=\"https://spring.io/blog/2022/11/28/spring-vault-3-0-goes-ga\">发布</a>\"，其特点包括：JDK 17基线；支持额外的HTTP客户端，包括响应式JDK HTTP客户端；并支持使用版本化密钥/值机密引擎的Vault存储库。有关该版本的更多详细信息，请参阅<a href=\"https://github.com/spring-projects/spring-vault/wiki/Spring-Vault-3.0-Release-Notes\">发布说明</a>\"。</p><p>&nbsp;</p><p><a href=\"https://spring.io/projects/spring-cloud\">Spring Cloud</a>\"&nbsp;2022.0.0的<a href=\"https://spring.io/blog/2022/12/02/spring-cloud-2022-0-0-release-candidate-3-codename-kilburn-has-been-released\">第三个候选版本</a>\"，代号为Kilburn，已向Java社区提供。该版本提供了对Spring Cloud子项目RC3版本的更新，如：Spring Cloud OpenFeign 4.0.0、Spring Cloud Commons 4.0.0、SpringCloud Function 4.0.0和Spring Cloud Starter Build 2022.0.0。但是，由于Spring Cloud CLI、Spring Cloud for Cloud Foundry和Spring Cloud Sleuth等子项目的移除，也引入了一些破坏性的更改。Spring Cloud 2022.0.0-RC3要求Spring Boot 3.0.0。有关该版本的更多详细信息，请参阅<a href=\"https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2022.0-Release-Notes\">发布说明</a>\"。</p><p>&nbsp;</p><p></p><h4>亚马逊云科技</h4><p></p><p>在最近的<a href=\"https://reinvent.awsevents.com/\">re:Invent</a>\"大会上，亚马逊云服务为其<a href=\"http://aws.amazon.com/lambda/\">AWS Lambda</a>\"项目<a href=\"https://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart/\">推出了</a>\"一项新特性<a href=\"http://docs.aws.amazon.com/lambda/latest/dg/snapstart.html\">Lambda SnapStart</a>\"，旨在减少Java函数的冷启动，并加速Lambda函数。<a href=\"https://quarkus.io/blog/quarkus-support-for-aws-lambda-snapstart/\">Quarkus</a>\"和<a href=\"https://micronaut.io/2022/11/28/leveraging-aws-lambda-snapstart-with-the-micronaut-framework/\">Micronaut</a>\"已经实现了对Lambda SnapStart的支持。更多详细信息请参阅<a href=\"https://www.infoq.cn/theme/164\">InfoQ的新闻报道</a>\"和亚马逊云科技<a href=\"https://aws.amazon.com/blogs/compute/reducing-java-cold-starts-on-aws-lambda-functions-with-snapstart/\">博客文章</a>\"。</p><p>&nbsp;</p><p></p><h4>Quarkus</h4><p></p><p>红帽（Red Hat）<a href=\"https://quarkus.io/blog/quarkus-2-14-2-final-released/\">发布</a>\"了Quarkus 2.14.2和2.13.5版本，主要修复了CVE-2022-4116漏洞，CVE-2022-4116是Dev UI配置编辑器中的一个漏洞，容易受到本地主机驱动攻击，导致远程代码执行。该版本还加强了对跨源资源共享（CORS）的处理，包括在CORS请求因来源无效而被拒绝时将 200 OK 更改为 403 FORBIDEN 。有关这些版本的更多详细信息，请参阅<a href=\"https://github.com/quarkusio/quarkus/releases/tag/2.14.2.Final\">2.14.2版</a>\"和<a href=\"https://github.com/quarkusio/quarkus/releases/tag/2.13.5.Final\">2.13.5版</a>\"的发布说明。</p><p>&nbsp;</p><p>在通往Quarkus 2.15.0的道路上，<a href=\"https://github.com/quarkusio/quarkus/releases/tag/2.15.0.CR1\">第一个候选版本</a>\"也提供了新特性，比如：与Quarkus CRaC/Firecracker的集成；将gRPC扩展迁移到新的Vert.x gRPC实现；使用Panache扩展支持在REST数据中根据命名查询进行过滤；以及对GraalVM 22.3.0、Mandrel 2.13和SmallRye GraphQL 1.9.0的依赖项升级。</p><p>&nbsp;</p><p></p><h4>Apache Camel</h4><p></p><p><a href=\"https://camel.apache.org/\">Apache Camel</a>\"&nbsp;3.18.4已<a href=\"https://camel.apache.org/blog/2022/12/RELEASE-3.18.4/\">发布</a>\"，对Spring Boot 2.7.6和HyperSQL DB 2.7.1进行了27个bug修复、改进和依赖项升级。有关该版本的更多详细信息，请参阅<a href=\"https://camel.apache.org/releases/release-3.18.4/\">发布说明</a>\"。</p><p>&nbsp;</p><p></p><h4>JHipster</h4><p></p><p>在<a href=\"https://www.jhipster.tech/\">JHipster</a>\"，已经开始将平台升级到Spring Boot 3.0。Okta的开发人员倡导者、Java Champion和JHipster开发团队成员<a href=\"https://www.linkedin.com/in/mraible/\">Matt Raible</a>\"提供了团队迄今为止遇到的问题的<a href=\"https://twitter.com/mraible/status/1597248481596706816?cxt=HHwWgMDUuYHCyKosAAAA\">最新情况</a>\"，即：<a href=\"https://github.com/reactor/BlockHound/blob/master/README.md\">BlockHound</a>\"需要一个新的<a href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html\">WebFlux</a>\"的入口；健康检查在Elasticsearch 8+中不起作用；MongoDB和WebFlux与JUnit和MongoDB驱动程序4.2+死锁。有关这些问题的更多详细信息，请参阅此GitHub<a href=\"https://github.com/jhipster/generator-jhipster/pull/19791\">拉取请求</a>\"。</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/12/java-news-roundup-nov28-2022/\">https://www.infoq.com/news/2022/12/java-news-roundup-nov28-2022/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/ATGFHsJa5HqNroEuNBLd\">对话Spring大神：Spring 生态系统的新时代来了！</a>\"</p><p><a href=\"https://www.infoq.cn/article/GGdb3Y7cO9Pw2Bf8NfIW\">Java 新闻汇总：Spring 发布，Resilience4j，Open Liberty，GlassFish，Kotlin 1.8-Beta</a>\"</p>",
    "publish_time": "2022-12-22 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "端云协同：万物智能化的未来，怎么“来”？",
    "url": "https://www.infoq.cn/article/58dW6BKuNZVUrJg4xmur",
    "summary": "<p>随着云计算、云原生的发展，大家逐渐意识到充分利用云端能力的优势赋能终端，打造端云协同的一体化服务，才是最终实现万物智能化未来的解决之道。现如今，端云协同已经成为开发社区竞相研究的前沿技术方向，OPPO 作为全球领先的智能终端企业，也积极地展开了探索。</p><p></p><p>在 12 月 14 日举办的 OPPO 2022未来科技大会（OPPO INNO DAY 2022）上，<a href=\"https://www.infoq.cn/article/JZw9tHzimGleWBq65lN6\">OPPO </a>\"发布了三大核心技术之一的安第斯智能云，致力于“让终端更智能”。在先前的 QCon 2022 全球软件开发大会（上海站），InfoQ 编辑对 OPPO 云服务中心高级总监韩建飞进行了采访，与他聊了聊端云协同相关的那些事儿，包括行业发展的现状以及未来的展望。</p><p>&nbsp;</p><p>以下是视频采访的全部内容，为方便读者查看，视频下方也附上了文字内容。</p><p></p><p></p><p>采访记者：InfoQ 资深编辑鲁冬雪</p><p>采访嘉宾：OPPO 云服务中心高级总监韩建飞</p><p>嘉宾简介：2019 年加入 OPPO，负责计算、网络、研发效能及云监控的开发管理工作，先后服务于中兴通讯、京东等公司。入职 OPPO 后完成了 OPPO 全球混合云的建设及全公司上云的战略。在云计算领域有丰富的研发管理和实践经验。</p><p>&nbsp;</p><p>InfoQ：您是如何定义“端云协同”的？端云协同技术核心要解决什么问题？</p><p>&nbsp;</p><p>韩建飞：当前终端行业面临的主要问题仍是硬件成本与用户体验之间无法达到平衡。在这种情况下，面对端侧的算力、空间、性能瓶颈，通过云侧计算、网络、存储能力，与端侧深度协同，进而提升端侧体验，是目前端云协同演进和发展的关键方向之一。在这一过程中，端云协同需要解决的最核心的问题在于，如何解决网络传输带来的时间损耗，为用户带来无感的产品体验。</p><p></p><p>OPPO作为一家领先的智能终端企业，在端云协同技术上有着深厚的技术积累。目前，我们正在研究和主要解决的问题是，在智能终端厂商设备计算和存储性能受限的情况下，如何通过云端的能力赋能终端；在网络传输延迟越来越低的情况下，如何通过云端，为终端用户带来无缝一致的一站式服务体验。</p><p>&nbsp;</p><p>InfoQ：端云协同赛道当前现状如何，将会往哪个方向或者趋势演进？</p><p>&nbsp;</p><p>韩建飞：在我看来，端云协同技术将会朝着两个方向演进，这两个方向既相互独立，又相互交织。第一，通过端云协同技术，扩展手机等智能终端的存储空间、计算能力和智能服务，在影像、AI、网络加速、云应用等方向赋能智能终端，为用户带来产品体验的整体提升；第二，通过端云协同技术，建设一云多端的生态服务体系，以多端融合、数据共享等方式，消弭用户在泛终端使用场景的割裂体验。基于此，OPPO将着力推动端云协同技术的演进与发展，构建数据共享与泛终端联动的万物互融生态体验。</p><p>&nbsp;</p><p>InfoQ：目前私有云、公有云、边缘云、混合云的发展分别对端云协同技术的演进有何影响？企业如何进行上云选型？</p><p>&nbsp;</p><p>韩建飞：业内其实基本形成了共识：无论是私有云、公有云、边缘云还是混合云，均可以支撑端云协同技术的发展，以何种云服务的形态上云，主要还是取决于企业的业务需求。</p><p></p><p>以 OPPO 为例，自一开始，OPPO 便坚定地选择了混合云基础设施的建设与发展路径。为什么 OPPO 会选择混合云？第一，ColorOS 在全球有逾5亿的月活用户，为了更好地为国内庞大的用户群提供服务，OPPO 在国内选择了自建私有云；另一方面，受海外政策和相关条例，以及运营策略的影响，OPPO 在海外选择了公有云。基于私有云和公有云，OPPO 构建了混合云基础设施，推动端云协同技术在业务场景落地。总的来说，OPPO 的混合云基础设施为业务场景服务，在满足业务发展的同时，实现了成本和效率的平衡。</p><p>&nbsp;</p><p>InfoQ：OPPO 混合云平台有何特点？在技术实现上有什么创新？</p><p>&nbsp;</p><p>韩建飞：OPPO 通过混合云基础设施构建了一套一体化平台，带来了全球一致的业务服务和运营体验。在技术实现上，OPPO 的产品线业务、中间件、数据库、网关、大数据实时及离线计算等均全量运行在容器上，基于此，OPPO 构建了独特的混合云实施策略，平台特点包括：</p><p>统一管理：多套异构云资源统一管理；公有云无缝切换，降低迁移成本；安全合规：一致的安全管控策略；无缝的网络策略融合；统一的组网模型；敏捷灵活：可利用公有云按需秒级计费特点；可支撑大规模临时紧急需求；海外快速开服；无感基础设施交付周期；常规算力下沉自建基础设施；统一架构：一致的混合云技术；降低运维管理复杂度；一致体验：统一技术架构交付；一致的业务使用体验；平台透明无感适配，统一API；可降低技术服务门槛。</p><p>&nbsp;</p><p>InfoQ：混合云的在端云协同技术中占据着什么样的地位？承担着怎样的角色？混合云基础架构的建设对于端云协同技术的发展有何作用？</p><p>&nbsp;</p><p>韩建飞：以 OPPO 的混合云基础设施建设为例，OPPO 自 2019 年开始，着力构建混合云基础设施，通过近 3 年来的努力，为 ColorOS 的 5 亿月活用户提供全球统一的混合云基础设施平台。为此，OPPO 制定了全球 8+N 可用区的目标，在全球主要的八大区域搭建自由的混合云基础设施，同时配合 N 各小区域的辅助性基础设施建设，实现公司内部系统的全面云化。</p><p></p><p>在混合云基础设施构建完成后，OPPO 基于底层技术能力构建了为全球用户提供端云协同服务的业务场景。在为庞大用户提供产业和服务的过程中，混合云基础设施是<a href=\"https://www.infoq.cn/article/HHPHzeKSlWI5vW8U3kpD\"> OPPO </a>\"业务全球化的关键技术底座，也是推动端云协同技术业务落地的关键技术支撑。</p><p>&nbsp;</p><p>InfoQ：据了解，关于端云协同，OPPO 目前在做很多事，比如 AIoT、音视频、一站式应用开发等等，所以有几个围绕这几个领域的问题想要问一下。</p><p>&nbsp;</p><p>Q1：您是如何定义 AIoT 的？AIoT 在工业领域有哪些主要的应用场景？OPPO 现在在该领域做了哪些探索？您觉得 AIoT 的落地应用，最难的部分是什么？有什么好的经验可以分享给大家？</p><p>&nbsp;</p><p>韩建飞：AIoT 可以从 IoT 生成的海量数据中挖掘更多的价值，用以改善业务及其服务。基于 AI 能力，IoT设备收集到的大数据，将更好地进行分析、推理与决策，而无需人工干预。AIoT 在工业领域落地的场景有很多，比如供应链智能管理、生产线智能监控、智能诊断、智能维护，工厂的智能管理、产品质量控制和智能故障诊断等，在这些场景中，目前在业内也不乏成功的落地案例。</p><p></p><p>在 AIoT 的落地过程中，OPPO 面临的最大的难题是，作为一家智能终端企业，需要去连接各种不同类型的设备，而在不同的设备之间，复杂的协议适配不仅是 OPPO，同时也是整个行业面临的关键阻力之一。在自有 IoT 设备的连接上，OPPO 有一套自研协议；在与不同厂商设备的连接过程中，OPPO 更希望的是通过统一规范进行连接。基于此，<a href=\"https://www.infoq.cn/article/vkHROQzRXNkX5uooNGgl\">OPPO</a>\" 积极加入了相关生态，希望可以实现不同设备间的统一连接。</p><p></p><p>以 OPPO 智能家居的场景探索为例，智能家居落地的难点之一，在于不同设备生态之间的隔阂，无法实现互联互通，而近年来的标准协议如 Matter 等，为互联互通带来了一丝希望。在这一领域，OPPO 仍处于探索状态，从现有经验看来，通过标准协议拥抱开放生态，不失为 AIoT 应用落地的关键路径之一。</p><p>&nbsp;</p><p>Q2：如今大多数音视频厂商主攻的技术主要有 RTC、IM 以及 CDN，OPPO 在这三方面做了哪些探索？“端云协同”又是如何赋能咱们业务的呢？</p><p>&nbsp;</p><p>韩建飞：在音视频技术领域，OPPO 起步得相对较晚，业界已有相当多成熟的技术方案可借鉴。基于此，OPPO 选择了 RTC + CDN 结合的方式，以满足 OPPO 在音视频领域的业务需求。之所以选择 RTC，是因为 RTC 在传输过程中时延极短，与 CDN 相互配合，可以让各个地区的用户，均能快速感受到音视频传输的实时性与便捷性。</p><p></p><p>端云协同在 OPPO 的业务场景中具有较多的应用，如远程协同、语音通话、语音共享、游戏互动以至于云游戏等业务场景，端云协同技术为 OPPO 的相关业务场景带来了窄带高清、低延迟的交互体验。</p><p>&nbsp;</p><p>Q3：一站式应用开发，有的人认为注重“一站式”的广度重要，也有人说注重“应用开发”的深度重要，那 OPPO 又是如何定义一站式应用开发的呢？目前 OPPO 一站式移动应用开发平台有哪些技术突破？</p><p>&nbsp;</p><p>韩建飞：无论是从广度还是深度上，OPPO 移动应用开发平台都达到了一个很好的平衡状态。目前，OPPO 移动应用开发平台是一个主要服务于内部互联网业务场景的一站式平台，为内部开发者提供 toolkit、热更新、云控、日志打捞、自升级、UIkit、网络库等中间件能力，并结合研发云提供上架、运营等服务。</p><p></p><p>在端云协同的场景下，OPPO 移动应用开发平台仍具有非常大的延展和想象空间，通过移动应用开发平台，更好地实现数据流转和设备融合，并在此基础上，为开发者和应用生态带来更加便捷高效的一站式服务。</p><p>&nbsp;</p><p>Q4：从 AIoT、音视频+、一站式应用开发等场景来看，从 0 到 1 构建端云协同，行业里面临的技术难点分别是什么？</p><p>&nbsp;</p><p>韩建飞：从发展趋势来看，端云协同即将迎来飞速发展期，网络从 2G 进化至 5G，端侧与云侧之间的传输速度加快。在网络传输速度大幅提升之后，云侧的无限算力和存储资源将为终端的发展带来新的生机。</p><p>具体地说，面对端侧与云侧之间的网络传输延迟问题，是推动端云协同技术发展和演进的关键探索方向。在解决这一问题之后，OPPO 以至于智能终端行业，将为用户提供更为无缝一致的交互体验。</p><p>&nbsp;</p><p>Q5：像 AIoT、音视频+等各个领域都在做“端云协同”，那数据安全问题要如何解决呢？</p><p>&nbsp;</p><p>韩建飞：在安全方面，业内已经形成了一些较为完备的解决方案，如数据安全（图形、音视频等）隐私保护、用户安全密钥、全链路加密等安全隐私保护体系。</p><p></p><p>ColorOS 在全球拥有超过5亿月活用户，在这一用户基础上，OPPO 首要满足的是各个地域的隐私安全和规避地缘政治的相关风险。以端云数据加密为例，OPPO 拥有全链路安全认证，可以在用户授权的情况下，加密访问部分用户数据，让用户即使在数据上云的情况下，也能享受全面的、坚实的安全隐私保护。</p><p>&nbsp;</p><p>InfoQ：关于端云协同技术的未来，您有什么看法？您理想中的“端云协同”是怎样的？</p><p>&nbsp;</p><p>韩建飞：通过端云协同技术的持续演进与发展，以云赋能终端，最终为用户提供端云融合的一致性服务与体验，让云成为整个终端的全新生产力。</p><p>&nbsp;</p>",
    "publish_time": "2022-12-22 09:45:02",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "红帽发布《中国企业数字化转型图谱》，六大方向探索转型下一步",
    "url": "https://www.infoq.cn/article/o9d0Fy2UxUVwagIw9Muq",
    "summary": "<p>前不久，2022 Red Hat Summit：Connect（红帽论坛）中国站召开。会上，红帽全球副总裁兼大中华区总裁曹衡康发表了《探索数字化转型的下一步》主题演讲，分析了数字化转型面临的机遇与挑战，以及红帽对未来趋势的分析和建议，并发布了《中国企业数字化转型图谱》，为企业数字化转型提供方向参考。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/90/907a23733c3dbd9de08ca07000322442.png\" /></p><p></p><p>&nbsp;</p><p>《中国企业数字化转型图谱》包含开放混合云架构、云原生应用现代化、自动化、开放性学习组织、开源赋能、信息化+产业化六大方向，是红帽通过与众多企业沟通以及对整体趋势的感知梳理而成。其中，这六大方向彼此相关但又互相独立，企业可根据实际需要选择单一或者多个维度切入，红帽在这个过程中也会向企业输出自己的技术和经验。</p><p>&nbsp;</p><p>以多云管理为例，由于不同云平台之间运营方式的不同导致操作人员在管理多云环境时会有不一致的感觉，红帽的所有产品和技术栈都做到了很好的向下兼容，操作人员通过红帽的平台可以享受到一致化的体验而不会受到底层设施的干扰，降低复杂性的同时也在降低成本，运维人员也不需要考虑大环境的兼容问题。</p><p>&nbsp;</p><p>此外，红帽已经将这种兼容性从多云环境，也就是公有云、私有云、本地云扩展到了边缘侧，OT管理也可以通过红帽一致性的IT管理方式或者两化融合的方式进行。</p><p>&nbsp;</p><p>曹衡康介绍，对于正在进行数字化转型的企业来说，红帽所能做的远不只是提供开源技术，还包括开源的文化、开放的思维的培养。目前，红帽正在中国市场重点推进三项工作来帮助企业加速数字化转型：</p><p>&nbsp;</p><p>建立数字化转型开放领导力思维工作坊，主要面向企业IT经理、CIO、CTO、CDO等管理层。红帽的专家会和他们共同探讨如何把开放思维、开放领导力、开放组织、开放文化导入到整个数字化转型过程。组建开放创新训练营，主要面向产品经理、业务分析师、技术运维等人员。红帽之前有开放创新实验室。在这个实验室里客户通过4-12周的时间来探索如何把开源技术与自己的业务结合，以帮助解决业务问题。开放创新训练营是开放创新实验室的先导，通常会用一天甚至半天的时间来跟客户来探索如何进行创新。红帽技术专家面对面+技术体验营，主要面向技术经理、应用开发人员、运维人员。由红帽的技术专家跟客户的技术专家一起，来体验如何使用红帽技术和市场上的其他开源技术解决业务问题。</p><p>&nbsp;</p><p>对很多企业而言，当前在数字化转型层面强调的是速度和质量。在这个前提下，曹衡康表示下一代技术底座最重要的特点首先是兼容，因为这不是一家厂商就能做到的事情，包括架构、应用、网络各个方向，所以兼容性非常重要，红帽过去三十年与全球5000多家硬件厂商、4000多家软件厂商均进行了认证兼容。</p><p>&nbsp;</p><p>其次，开放性。为什么很多企业会选择开源技术，因为这在一定程度上代表着创新，开源技术源自全球各地优秀的工程师们，而红帽将这些优秀的技术变成了企业级生产可用的产品，开放就是最大的创新。</p><p>&nbsp;</p><p>再次，敏捷性。数字化转型需要非常敏捷，这也是云原生应用开发模式得以流行的重要原因之一。以金融企业为例，消费者提出的需求可能几周之内就要把应用微服务开发完成。</p><p>&nbsp;</p><p>然后是便利性。平台移动要足够便利，任何环境下的体验要保持一致，管理要保持一致性，只需要一套方法和工具就可以管理所有的基础环境。</p><p>&nbsp;</p><p>最后是自动化。数字化转型很重要的底层技术服务就是自动化程度要足够高，这也是疫情造成数字化转型加速的原因之一，企业需要更自动化的技术辅助完成转型过程。在红帽看来，自动化是一个综合的体系，通常由多种产品与Ansible协作完成，自动化的成果如今已遍布各行各业，比如工业领域的一些专有、封闭的软件逐渐解耦为一个开放的体系，除提高生产效率之外，这也会催生更多新的应用场景。红帽也相信通过这种开放式的变化未来能带来更多场景的爆发以及行业革新。</p><p>&nbsp;</p><p>最后，《中国企业数字化转型图谱》是一个开放的、不断演进的、与生态伙伴共建的图谱。红帽在其中会发挥连接、支撑体系的作用，共同往下一步演进，让其真正变成所谓的未来愿景，并与更多国内的企业一起推出本土化解决方案，未来有更多机会与本土合作伙伴一起发布成果。</p><p>&nbsp;</p><p>&nbsp;</p>",
    "publish_time": "2022-12-22 11:02:39",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "云原生时代，18岁的NGINX过时了吗？",
    "url": "https://www.infoq.cn/article/q00BxoNTXC1Qgobjyzs6",
    "summary": "<p>如今，全球半数以上（55%） 的网站都基于 NGINX 运行，差不多相同比例 (53.7%) 的中国网站在 NGINX 开源版上运行。作为最受欢迎的网络服务器，NGINX自发布到现在已经有18年了，它现在有什么样的发展规划呢？</p><p>&nbsp;</p><p>近日，NGINX Sprint China 2022大会于线上举行，F5 NGINX 讲解了NGINX在云原生下的产品路线图，宣布推出NGINX Kubernetes Gateway以及MARA参考架构1.0版本，并且HTTP3 和 QUIC也将合并到下一个版本中。“如果有人说原先的 NGINX 产品系列已经过时，那我只能说你并没有密切关注我们的动向”，F5 NGINX总经理Rob Whiteley在主题演讲中这样说道。</p><p>&nbsp;</p><p></p><h2>NGINX的进化</h2><p></p><p>&nbsp;</p><p>在数字化技术的推动下，应用现代化正成为产业发展的趋势与共识。F5中国区软件事业部总经理章澍分享了NGINX认为的，从传统应用向现代化应用发展过程中将会历经的三次浪潮：第一次浪潮实现了应用的大规模并发和扩展，而如今正在经历的第二次浪潮，其特征是实现应用解耦为微服务并通过 API 连接。这波浪潮将极大地推动自动化技术的发展，感知可控、随需而变的应用也将应运而生。也就是说，在不远的将来，全世界会迎来以感知可控、无人工干预的自适应应用为标志的第三次浪潮。</p><p>&nbsp;</p><p></p><h3>NGINX的诞生</h3><p></p><p>&nbsp;</p><p>NGINX 于 2004 年推出。在早期的互联网时代，随着Web 2.0的兴起，用户数量呈几何级数增长，互联网不再是单纯的浏览Web页面，逐渐开始进行交互，应用程序的逻辑也变的更复杂，从简单的表单提交，到即时通信和在线实时互动。这种用户体量的上升以及互动请求的增加，也给服务器带来了压力。</p><p>&nbsp;</p><p>NGINX 的诞生也是为了实现大规模的并发和扩展，相当多的企业看到了NGINX 的性能优势并开始使用它。 Igor Sysoev 于2011 年辞去了在 Rambler 的工作，并创立了 NGINX, Inc.。几年后，NGINX Plus 发布了，这是一个带有一些附加功能的版本，并且在商业上取得了巨大的成功。2019年， NGINX, Inc. 被F5 Networks 以 6.7 亿美元收购。</p><p>&nbsp;</p><p>NGINX采用异步模式，且轻量级，采用 C 进行编写，在性能上的出色表现是击败Apache网络服务器的关键。但 NGINX 取得成功，却不仅仅是因为NGINX是一个网络服务器，它还具备负载均衡器、反向代理、邮件代理和HTTP 缓存等功能，提供了构建安全、可靠的 Web 应用程序所需的几乎所有方面的能力。</p><p>&nbsp;</p><p>比如，在2000年代早期，一台硬件负载均衡服务器动辄从十几万到几十万不等，因此当服务规模不大时，直接采购硬件负载均衡服务器对于很多中小公司并不划算，而通过 Web 服务器的反向代理的方式却是当时比较经济的方式。一般 Web 服务器都有反向代理功能，NGINX 则是其中典型代表。</p><p>&nbsp;</p><p>在此基础上，NGINX 和NGINX Plus平台又由多个分散的同类最佳工具组成，当它们串联使用时，可以以各种“风格”进行部署，以满足企业的多种需求，从而成为了市场占有率第一的网络服务器。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/05/05ef09d260d8dedb97765a7afb1c996e.png\" /></p><p></p><p>&nbsp;</p><p></p><h3>云原生时代的NGINX</h3><p></p><p>&nbsp;</p><p>如果说互联网的崛起导致应用的大规模并发和扩展，是我们经历的第一次浪潮，那么微服务和容器化的兴起，也可以算作是我们正在经历的第二次浪潮。</p><p>&nbsp;</p><p>在第二波浪潮下，企业更关注于 Kubernetes和容器的部署，但Kubernetes缺乏生产环境中的应用所需的应用交付、可观察性以及安全防护功能，因此一个好的生产级 Kubernetes平台需要进行深思熟虑的定制和调整。</p><p>&nbsp;</p><p>NGINX 2021 年的社区调查显示，2/3的人都已经或打算在生产环境中使用 Kubernetes，但是都有着对于自身知识技能以及对于 Kubernetes 的复杂性、安全防护和扩展性的担忧。为了构建坚实的 Kubernetes基础，NGINX通过添加 Ingress controller、WAF、服务网格以及一些其他云原生项目，提供了云原生的、Kubernetes 友好的开源和商业解决方案，来提升应用程序的扩展性、可见性、安全性......</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2a/2a97e705a53f1715fddef365149c7e6a.png\" /></p><p></p><p>&nbsp;</p><p>另一方面，微服务和应用的数量在快速增长，微服务之间以及集群内外之间的 API 数量也不断增加。一般来说，微服务之间的内部API 调用次数通常是应用到客户端之间的外部API调用次数的 10 倍或者更多。随着应用环境的扩张，复杂的环境可能有成百上千个 API，更复杂的 API 身份验证、授权、路由、整形和生命周期管理等问题就会随之而来，所以在云原生时代，网关功能更为重要。</p><p>&nbsp;</p><p>NGINX提供了API Gateway、Ingress Controller、Service Mesh<a href=\"https://www.nginx-cn.net/blog/how-do-i-choose-api-gateway-vs-ingress-controller-vs-service-mesh/\">多种选择</a>\"。其中，作为被普遍使用的反向代理工具，基于 NGINX 实现的 NGINX Ingress 也成为了 Kubernetes 集群中最广泛使用的Ingress网关。目前NGINX Ingress主要有两个版本，其中一个是 Kubernetes 社区所开发和维护的 NGINX Ingress Controller (kubernetes/ingress-NGINX)。而F5 NGINX 也开发和维护了 NGINX Ingress Controller (NGINXinc/kubernetes-ingress)，在数据平面上添加一些高级功能或商业支持。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/45/459e50686f328cbfad84536785642854.png\" /></p><p></p><p>&nbsp;</p><p>然而，开源版本和NGINX维护的版本之间存在一定差异，这也让用户感到困惑。为了消除这种困惑，NGINX基于 Kubernetes API Gateway SIG 参考架构，于今年早些时候推出了 NGINX Kubernetes Gateway。NGINX Kubernetes Gateway 由 Ingress controller 发展而来，是一种基于 Gateway API 规范内测版的新兴技术。Gateway API 终将取代 Kubernetes 架构中的 Ingress Controller，为了与云原生趋势保持一致，NGINX表示已决定将之前仅在开源版本中提供的 NGINX Kubernetes Gateway 作为下阶段的 Kubernetes 网络开发重点。</p><p>&nbsp;</p><p></p><h3>现代应用参考架构MARA</h3><p></p><p>&nbsp;</p><p>云原生基础设施和基于微服务的设计，能够高容错、松耦合，使得开发可快速迭代，让企业可以用敏捷的方式支持数字化转型。然而利用云原生构建现代化应用并不容易，“部署 Kubernetes 有很多不同的方法——网络、安全、身份验证，甚至像 API 网关这样的东西。对于大多数刚起步的企业来说，这还是比较复杂。” F5 NGINX总经理<a href=\"https://www.linkedin.com/in/rwhiteley/\">Rob Whiteley</a>\"在接受媒体采访时曾说。“如果没有很好地理解，很容易陷入错误的配置状态。”</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/24/24a53b5a2a139712b080308e0fcc6ff2.png\" /></p><p></p><p>&nbsp;</p><p>&nbsp;</p><p>“我们意识到，我们可以制作一个模版作为企业参考架构：给出真正的操作代码，而不是纸上的概念。”Whiteley说。因此，MARA诞生了。这种思路类似于构建一个“黄金镜像”，让用户从列表中自动拉取、组装和预集成所有脚本，然后通过一个命令进行部署。并且F5希望开发人员只需单击几下就能够在几分钟内配置和部署好一个Kubernetes 环境，形成一个完整并稳定可靠的开发环境。</p><p>&nbsp;</p><p>总之，MARA 是一个悉心设计的“稳定可靠、经过测试且可以部署到在 Kubernetes 环境中运行的实时生产应用”解决方案。该模块化架构集成了创建生产级云原生环境所需的一切——安全性、日志记录、网络、应用服务器、配置和 YAML 管理等。</p><p>&nbsp;</p><p>即使平台能够集成所有这些功能，但要完全满足生产环境要求还需要更多的工作。经过不断实验并探索如何帮助核心开发人员更高效、更轻松地部署现代应用，NGINX在去年的&nbsp;<a href=\"https://www.nginx-cn.net/blog/nginx-sprint-2-0-clear-vision-fresh-code-new-commitments-to-open-source/#mara\">Sprint&nbsp;</a>\"大会上宣布推出了MARA<a href=\"https://www.nginx-cn.net/blog/new-open-source-modern-apps-reference-architecture/\">参考架构</a>\"，一个现代应用的开源架构和部署模型。在今年的NGINX Sprint 上，Rob Whiteley 也在主题演讲中宣布了即将推出MARA 1.0<a href=\"https://www.nginx.com/blog/announcing-version-1-0-0-nginx-modern-apps-reference-architecture/\">版本</a>\"。</p><p>&nbsp;</p><p>在发布时，MARA 预配置了多种选择，使用<a href=\"https://www.elastic.co/log-monitoring\">Elastic</a>\"进行日志管理，使用<a href=\"https://prometheus.io/\">Prometheus</a>\"和<a href=\"https://grafana.com/\">Grafana</a>\"进行监控和仪表板，使用<a href=\"https://aws.amazon.com/?utm_content=inline-mention\">Amazon Web Services</a>\"的<a href=\"https://aws.amazon.com/eks/\">Elastic Kubernetes Service</a>\"&nbsp;(EKS) 作为部署目标，使用<a href=\"https://spinnaker.io/\">Spinnaker</a>\"进行持续交付，以及TLS<a href=\"https://cert-manager.io/docs/\">的证书管理器</a>\"，以及中间层的许多 NGINX 产品。</p><p>&nbsp;</p><p>另外，微服务相对单体服务，其故障定位难度完全不是一个等级，因此要使微服务监控和可观察性更上一层楼，就需要引入优秀的APM系统。CNCF管理的OpenTelemetry项目 （由OpenTracing 和 OpenCensus合并而成），它以一种综合的方式生成追踪、日志和指标，也成为了目前服务监控可观察性统一方案。MARA 1.0 版本也选择了<a href=\"https://www.nginx-cn.net/blog/integrating-opentelemetry-modern-apps-reference-architecture-progress-report/\">集成</a>\"OpenTelemetry，实现日分布式跟踪、指标收集等功能，这也是<a href=\"https://www.nginx-cn.net/blog/announcing-version-1-0-0-nginx-modern-apps-reference-architecture/\">1.0版本</a>\"中的一个重要变化。</p><p>&nbsp;</p><p></p><h2>NGINX的开源演进：兼顾稳定和高性能</h2><p></p><p>&nbsp;</p><p>NGINX作为纯C实现的软件，源码质量很高。创始人<a href=\"https://en.wikipedia.org/wiki/Igor_Sysoev\">Igor Sysoev</a>\"最开始也只专注于解决C10K问题，并一个人写了几乎所有的代码，独自管理到2011年。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0d/0d54b61c09ebe4fac6574f4d83862a40.png\" /></p><p></p><p>&nbsp;</p><p>2017年，当时的NGINX 首席执行官接受媒体采访时介绍说，这个轻量级软件，核心代码一直<a href=\"https://www.zdnet.com/home-and-office/networking/nginx-and-the-future-of-the-web-server/\">少于</a>\" 200,000 行。同时，开源版本依赖很少，仅有非常少的库，如Openssl、glib。这也是它高性能的原因之一。“性能为王”是它击败Apache网络服务器的原因，其模块化机制也始终可以让NGINX关注于可以为工程师提供“灵活度”，这也是让它在Web网关服务器领域中一直领先地位的原因。</p><p>&nbsp;</p><p>但云原生的到来正在改变 API 网关的角色，也给NGINX带来了新的挑战。很多其他API 网关解决方案都是基于NGINX 搭建的，比如开源和商用的 Kong API 网关以及开源的 OpenResty等，这些软件在敏捷开发行业很火。</p><p>&nbsp;</p><p>虽然这进一步验证了 NGINX 核心技术在这个领域的可用性，但也让人们思考NGINX在云原生技术下的优势。但相对来讲，NGINX使用C语言，代码空间封闭；而新兴的一些软件使用Lua，虽然可以随时编写功能插件，但通过解析String并立即返回调用函数，这样导致其代码空间是完全开放的。所以从这一点来说，NGINX的设计更加安全稳定。而传统行业也比一些敏捷行业更注重安全稳定的性能，所以NGINX仍然是传统行业的首选。就像Rob Whiteley在主题演讲中提到的那样，“开源安全性是开发人员的首要考虑事项”。</p><p>&nbsp;</p><p>他表示，“数以千计的企业正在生产环境中运行 NGINX 开源软件——这是一件好事，因为这充分表明了公司们对我们开源版本的高度信任，我们将带着这份信任再接再厉。对于核心 NGINX 开源版软件，我们一直在不断添加新特性和功能，并支持更多操作系统平台。在即将发布的下个版本中，我们将通过 HTTP3 和 QUIC 这两大功能来保障 Web 应用以及流量的安全性和可扩展性。”</p><p>&nbsp;</p><p>在 NGINX 的设计中，后端服务以静态配置文件的形式记录，里面使用了一些优化过的静态哈希表设计，因此性能也非常好。但在微服务时代，后端服务的 IP 发生变化的时候，都需更改配置文件，静态配置的方式也给网关实现“连接复用”增加了难度，而基于UDP的HTTP3 和 QUIC协议则可以实现跨IP迁移。各种网络技术实际上早已经成熟，但NGINX更多考虑的是稳定性，因此在QUIC第一份规范草案提交给 IETF 的五年之后，NGINX才选择合并QUIC到当前版本中。</p><p>&nbsp;</p><p>这同时说明NGINX也一直在跟进网络世界的重大变化。例如，NGINX 于 2015 年 9 月开始支持 HTTP/2，距协议修订标准化仅几个月。HTTP/2 服务器推送支持也于 2018 年推出，现在HTTP /3和QUIC也终于要实现到 NGINX 中。</p><p>&nbsp;</p><p>在开源崛起和迈向成功的过程中，NGINX 在这一二十年里发挥了至关重要的作用。现在，通过NGINX在云原生领域的重大发布，我们也可以看出NGINX一直在努力提升自身的竞争力，用Rob Whiteley的话来说，就是“NGINX 要想十年后还能广受欢迎，就需要不断做出改进......对自己的开源工作反躬自省，跟上开源运动的持续发展。”</p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://www.nginx-cn.net/blog/future-of-nginx-getting-back-to-open-source-roots/\">https://www.NGINX-cn.net/blog/future-of-NGINX-getting-back-to-open-source-roots/</a>\"</p><p><a href=\"https://www.nginx-cn.net/blog/5-things-to-know-about-nginx-kubernetes-gateway/\">https://www.NGINX-cn.net/blog/5-things-to-know-about-NGINX-kubernetes-gateway/</a>\"</p><p><a href=\"https://www.bilibili.com/video/BV1wh41187De/\">https://www.bilibili.com/video/BV1wh41187De/</a>\"</p><p><a href=\"https://thenewstack.io/nginxs-reference-architecture-for-kubernetes-microservices/\">https://thenewstack.io/NGINXs-reference-architecture-for-kubernetes-microservices/</a>\"</p><p><a href=\"https://mp.weixin.qq.com/s/UPaA6uRTVn2Nu2qJKA9soQ\">https://mp.weixin.qq.com/s/UPaA6uRTVn2Nu2qJKA9soQ</a>\"</p><p><a href=\"https://www.nginx.com/blog/our-roadmap-quic-http-3-support-nginx/\">https://www.NGINX.com/blog/our-roadmap-quic-http-3-support-NGINX/</a>\"</p>",
    "publish_time": "2022-12-22 11:04:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "数据烟囱亟需打破，云原生融合数据库雪中送炭｜解读云原生数据库的 2022",
    "url": "https://www.infoq.cn/article/BkVptJA3JSK5cf14RN3e",
    "summary": "<p>作者 | 郑思宇</p><p>采访嘉宾 |<a href=\"https://mp.weixin.qq.com/s?__biz=MzU1NDA4NjU2MA==&amp;mid=2247557818&amp;idx=1&amp;sn=b05c906938e2645bfaba7cdca23911a1&amp;chksm=fbeb5b75cc9cd263515dbd3e95ac770302709b1b3d43c5355bd4e9ba018e632db30d6792e9d5&amp;scene=27#wechat_redirect\">&nbsp;矩阵起源创始人及 CEO 王龙</a>\"</p><p></p><p></p><blockquote>据 Gartner 预测，到 2025 年，基于云原生平台的数字化业务比例将达到 95%，将带来云原生数据库市场的快速增长。毫无疑问，云原生数据库即将成为云上数据库使用的标准范式。云原生数据库使得传统数据库得以充分结合云服务的免运维、高弹性、高可扩展、高可用、高性价比优势，又顺应了云端应用大爆发的历史趋势，在过去几年成为 IT 领域的大热门方向，但总体仍处于高速发展的早期阶段。过去一年中，企业对于云原生数据库的使用有哪些需求？云原生数据库厂商又该如何满足这些需求？我们将带你回顾 2022 年云原生数据库领域的重要动态以及技术进展。在本文写作过程中，特此感谢矩阵起源创始人及 CEO 王龙提供的宝贵观点与洞察。&nbsp;&nbsp;</blockquote><p></p><p></p><h1>云原生数据库领域的挑战和进展</h1><p></p><p></p><h3>知易行难，数据库从云服务到云原生还有很长的过程</h3><p></p><p></p><p>在过去相当长的一段时间里，云服务中被使用最多的是虚拟机，也就是物理服务器在云端的虚拟化服务。IT 用户享受到的好处是最朴素的自服务、免运维、高可用、高弹性、高可扩展性和按使用付费，当然这些都只是在虚拟机和 OS 层面（Infrastructrue as a service）。</p><p></p><p>为了更好地满足数据库用户的需求，云厂商开始提供数据库服务（Database as a service，DBaas）。为了降低开发成本和用户的学习难度及应用迁移门槛，最早的 DBaaS 大多是基于 IaaS 的数据库运维自动化，本质是传统数据库系统平移到云端的一种全托管服务，用户看到的和使用的数据库，除了在访问 OS 层面有所限制，其他并无二致。</p><p></p><p>在云计算（IaaS）成为趋势并逐渐成为 IT 行业的标准基础设施之后，上述这种做法导致的问题便浮出水面：</p><p></p><p>问题一：数据本身的爆炸式增长，数据库无论在物理环境还是云端虚拟环境，都需要具备更高的扩展性和更强悍的性能。传统数据库的架构由于受限于历史原因，本身具有的缺陷和瓶颈在云端则更加明显。例如，进行性能优化和执行调度时，传统数据库在资源有上限的物理环境中更在意资源的使用率，并且需要投入大量精力来考虑 RTO 和 RPO，那么整个系统就会因此增加复杂度。然而，这种复杂度在云端是没必要的，并且会造成巨大的资源浪费和开发投入。</p><p></p><p>问题二：随着数字化程度的进一步加深，业务敏捷度也成为 IT 系统最关注的核心指标之一，数据库的弹性能力是支撑应用和业务敏捷度最重要的基础能力。基于物理环境设计的传统数据库，即使平移到云端，也无法充分利用云端计算和存储资源的高弹性能力。例如物理环境和云端环境的硬件特性，包括但不限于吞吐量、读写特性、资源部署时间、资源回收时间以及消耗成本，都是不同的。如果没有考虑到这些不同点，就会严重影响数据库实际的弹性能力。</p><p></p><p>问题三：由于大多数用户在数据库上的预算增长超过其他组件的增长，使其更加看重数据库服务的性价比。然而，多云部署日益流行的今天，每个云厂商的定价策略，计算、存储和网络资源的计价方式和能力表现都有或多或少的差异。如果仅仅将一个传统数据库平移上云，很难基于这些复杂的因素做出最优的判断决策，也无法达到最优性价比。</p><p></p><p>因此，用户和市场都需要一款能充分利用云端的计算、存储和网络资源特性，具备真正的高弹性、高可用和高性价比优势的数据库，这就是云原生数据库发展的最核心驱动力。要实现这样的目的，一个基于云环境精心设计、打磨的技术架构是不可或缺的。这就需要长期持续的投入，才能对云环境足够的了解并对数据库生态充分适应。</p><p></p><h3>需求多样，云原生数据库需要跟上现代软件应用的步伐</h3><p></p><p></p><p>曾经有一种说法是“软件吞噬世界”，暂且不管这种说法是否正确，但物理世界愈发数字化是一个正在发生的事实。过去数十年，数字化的加速催生了数以亿级的软件，包括手机 App、SaaS 等等，这些软件对数据库提出了各种各样的需求，也驱动全球出现了多达数百种不同的数据库。</p><p></p><p>十几年前，我们就知道数字化进程的一大阻碍就是数据烟囱（Data Silo），其严重制约了企业的智能化和创新能力，并以几何级数提高了企业利用数据的门槛和成本，一直以来都是企业信息化部门最头痛的顽疾之一。然而，随着云计算、软件应用和数据库的蓬勃发展，非但没有使这个顽疾得到缓解，反而变得愈发严重。为了解决这个问题，在过去数年中，IT 从业者做了多种尝试。</p><p></p><p>第一种，简单粗暴地投入最强硬件，搭载一款数据库支持所有软件应用。目前，这种方式已经越来越少见了，因为纯硬件的纵向扩展能力是有限的，而软件应用的组合和变化是无穷的，大部分客户无法负担成本变成了最主要的阻碍。</p><p></p><p>第二种，整合多种集中式和分布式数据库系统，使用统一界面给数据和应用开发者提供各种能力和服务，并隐藏其底层管理运维的复杂度，这种方式常常被称作“数据中台”和“数据底座”。</p><p></p><p>基于过往多年的实践，虽然证明这种形式在某些领域和客户群体中是有其价值的，但在某些场景下便会出现局限性：一方面，当后台需要整合的数据库系统过多，又或者前台的应用变化过快、过于复杂时，它的运维、管理和开发成本增长会陷入失控，且相比第一种方案会带来数据实时处理性能的瓶颈；另一方面，当用户需求相对较小和简单时，使用这种方案又会过于臃肿和复杂，投入产出不成正比。</p><p></p><p>第三种，一些成熟的数据库厂商退而求其次，如果不能一蹴而就地整合这么多数据库系统，那么可以尝试在现有成熟数据库系统中添加新的能力，来减轻一小部分数据烟囱带来的痛苦。</p><p></p><p>湖仓一体、批流融合、HTAP 等都是这种思路下的产物，但融合的挑战也是巨大的。拿 HTAP 举例，由于 TP 和 AP 数据库在过去默认就是服务两个不同的应用团队，由不同的数据库管理团队来维护，因此对安全性、资源共享和性能隔离等都有各自的需求。当融合在一起的时候，想要性能完全隔离，就应该使用完全独立的计算和存储资源；想要资源利用最大化，就应该使用共享计算和存储资源；同时想要获得更低的处理时延，就应该只存一份数据；想要各自都有读写极致性能，就应该存多份数据...... 这里有太多矛盾的技术点，要想找到平衡点来解决上述提到的技术矛盾是一件不容易的事情。</p><p></p><p>当然第三种尝试还有很多其他类型的方案，这里就不一一列举了。在 2022 年，我们也注意到有众多云原生数据库厂商在朝着这个方向演进：</p><p></p><p>Snowflake 在其年度用户大会 Snowflake Summit 2022 上，宣布推出 Unistore 存储引擎，使得用户在 Snowflake 平台上运行 OLAP 的同时也可以确保数据的完整性和一致性，而这是 OLTP 的核心特性之一。在 2022 re:Invent 大会中，亚马逊云科技发布了一个新服务——“Zero ETL”，其在后台打通了 Aurora 数据库和 Redshift 数据仓库。用户无需自己开发 ETL，就可以轻松地进行数据分析和机器学习，这更像是数据中台和 HTAP 的结合体。最近刚刚完成 F 轮融资的 SingleStore，也号称其数据库系统能在云上通过结合事务和分析工作负载，消除了性能瓶颈和数据移动，以支持数据密集要求苛刻的工作负载。国内初创公司矩阵起源提出的“HSTAP”更为彻底， 将 HTAP 进行了重新定义，融入了串联 AP 和 TP 的 Streaming 能力，并完全重新开发了一款云原生的融合性数据库。目标是让企业只用一款数据库，就能覆盖大中小应用系统的的 TP 和 AP 需求，并能用最高性价比的方式建设好数据中台。</p><p></p><h3>放眼未来，云原生数据库还需要关注基础设施和软件应用的新动向</h3><p></p><p></p><p>在基础设施层面，其能力也在不断演进。<a href=\"https://www.infoq.cn/theme/124\">《2021 InfoQ 年度技术盘点与展望》</a>\"的“架构篇”里提到。在 2021 年，各个云服务商都在不断拓展 Serverless 产品线的能力。在 Web 应用、微服务、事件处理和批处理任务等场景，Serverless 正在成为最流行的架构。在 2022 年，这个趋势依旧在延续，并且还在不断深化，代表企业有亚马逊云科技、阿里云等，这也意味着 Serverless 已经从概念和愿景逐步演进至落地实践。</p><p></p><p>Serverless 能更好的提供计算资源的弹性和可扩展性，从而提高应用系统的性价比。对于计算成本占比较多的数据库系统来说，是一个不可忽略的重要技术趋势。同时，能否利用好 Serverless 服务也是架构是否云原生的重要指标之一。相比之下，国外企业的上云速度与规模快于国内，其已经累计了大量的云上数据以及应用场景，可以帮助数据库厂商打磨云原生数据库能力。以 Snowflake 为代表的云原生数据库，目前已经到达了收获的阶段，在 Snowflake 公布的 2023 财年第三季度的财务数据显示，Snowflake 第三财季的总营收为 5.57 亿美元，同比增长 67%。而在国内，Serverless 在数据库中还没有得到大规模应用。</p><p></p><p>离商用化尚有距离的 CXL 也是云厂商关注的热点技术趋势，此外，GPU、FPGA 等异构芯片在云端的使用也在加速增长，这些对数据库的技术演进也会有较大影响。</p><p></p><p>在软件应用方面，智能制造、机器人、自动驾驶和元宇宙等新应用还在不断成长之中，数据库厂商也需要关注这些领域的需求增长和变化。这些应用场景相关的图数据库、区块链数据库、时序数据库等也在持续迭代。</p><p></p><h1>云原生数据库值得关注的其他方向</h1><p></p><p></p><p>虽然云原生数据库所带来的价值不言而喻，但坦白讲，其也很难形成一统天下的局面。</p><p></p><p>对于金融、政府这类对于合规安全有较高要求或者定制化需求较多的客户来说，私有化数据库部署的需求还是普遍存在的，但这也并不意味着云原生数据库的增长空间会被挤压。随着数字经济时代的到来，金融、政府等机构还有很多个性化的业务依旧需要部署在云上。</p><p></p><p>那么在这种情况下，混合云架构是很多企业的首选，据 Cisco 发布的报告显示，在全球混合云趋势调查中，82% 的受访者目前使用混合多云架构来支撑其应用程序，并表示混合多云架构能够使组织实现更敏捷和高扩展性的开发环境，同时加速业务敏捷性和创新。</p><p></p><p>云原生数据库厂商若想帮助这些企业管理好数据，让他们更好地进行降本增效、实现创新，就要求数据库架构既能能兼容不同的公有云，也能够进行私有化部署，并且还要保障云上和云下的用户体验一致，数据可以自由的、低成本流动。这就对云原生数据库提出了更高的要求，既能充分利用云上的资源及其特性，也能高效地利用私有数据中心的资源及其特性。从这个角度来看，数据库云原生的下一步或许会是异构云原生，即数据库无论部署在公有云、私有云、物理服务器上都要有统一的技术架构并且共享调度数据和资源。</p><p></p><p>除此以外，DB 和 AI 的结合也是一些团队正在研究的方向，主要分为 AI for DB 以及 DB for AI 两类。</p><p></p><p>第一种模式是 AI for DB，即利用 AI 算法帮助 Database 提升产品能力。比如通过分析数据库日志或者视图，得出数据库的性能表现，然后去动态地调整数据库参数，来达到优化数据库性能的目的。此外，还可以在数据库中利用一些 AI 算法来进行内核优化、运维优化等。</p><p></p><p>另一种模式是 DB for AI，即在非结构化数据日益增多的情况下，为分布式数据库提供 AI 分析的能力。目前来看，由于传统的应用开发工程师、数据分析师与 AI 工程师在企业是分割开的，后者还处于探索阶段。但相信随着数据库人才与 AI 人才的交流，共性的需求会变得越来越多，比如如何对数据做预处理、做初步的建模等等，待这些知识融合到一定程度时，必然会出现一个系统来满足他们的需求。</p><p></p><h1>云原生数据库的选型建议</h1><p></p><p></p><p>虽然国内数据库的发展相比国外起步得要晚一些，但凭借着后发优势、业务环境等因素，国内数据库市场也逐渐呈现出百花齐放的态势，粗略判断，目前云原生数据库数量已达到几十甚至上百种。</p><p></p><p>因此，企业在进行选型时，首先要考虑清楚自身选择云原生数据库的驱动力是什么，既要让云原生数据库的特性与自己的业务类型相结合，又要与自己的团队能力进行匹配，是更看重低运维自治，还是更看重资源的弹性扩展，或者更看重性价比，需求不同往往会做出不同的选择。为了避免踩坑，也需要考虑厂商的技术实力和周边生态支持的能力。</p><p></p><p>其次，企业在选型时还要做好中长期的规划，绝对不要低估数据烟囱对未来业务的影响。随着企业的发展和数据规模的不断攀升，数据库带来的成本增长会远超于业务应用的成本。如果提前做好规划，在数据库的选型与后续建设中就可以做到游刃有余，将来的数字化道路就会事半功倍。比如，由<a href=\"https://www.infoq.cn/article/Dm4VbCIzLpDADad7GIPy\">矩阵起源打造的新一代超融合异构云原生数据库 MatrixOne</a>\"，便可以帮助用户降低数据的使用难度，提供极简的使用体验，让企业可以将精力从繁杂的技术细节中释放出来，最终达到降本增效的目标。</p><p></p><h1>写在最后</h1><p></p><p></p><p>回顾这一年，云原生数据库领域依然在稳健高速的发展中。云原生数据库依然还需要时间来达到成熟，但无论是使用创新架构来更好地使用云上资源，还是融合多种能力更好地服务数据应用，各云原生数据库厂商都在沿着帮助客户降本增效的初心，持续进化中。</p><p></p><p>采访嘉宾：</p><p>王龙，矩阵起源（Matrix Origin）创始人及 CEO。曾任职腾讯云副总裁，管理数百人的大数据和人工智能团队，从零构建腾讯云 to B 大数据人工智能产品矩阵和商业化体系，三年内完成产品线从百万到十亿级收入的飞跃。王龙之前在美国硅谷和德国慕尼黑工作过，也在北京上海有过创业经历。他具有多年跨国企业级产品建设和商业化经验，对于云计算、大数据、人工智能和多个行业应用场景有着丰富经验和深刻认识。</p>",
    "publish_time": "2022-12-22 13:28:20",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "TAPD 思享汇 | 鱼快创领：多场景软硬件一体化的敏捷项目管理实践",
    "url": "https://www.infoq.cn/article/Wi1qNwfy65FVNz4aadDy",
    "summary": "<p>鱼快创领从成立到成长，需要从 0-1 搭建起覆盖全面的项目管理体系，为软硬一体的产品矩阵服务。通过引入 TAPD，并结合自身项目管理的实际需求，鱼快完成了敏捷管理实践落地与体系构建，并不断拓展出更多场景的项目管理功能需求与实践。</p>\n<h1>演讲大纲</h1>\n<ul>\n<li>鱼快在项目管理过程中面临的痛点</li>\n<li>从产品、项目和团队三个维度搭建软硬件一体化管理体系</li>\n<li>鱼快使用 TAPD 的收益</li>\n</ul>\n<h1>观众收益</h1>\n<ul>\n<li>如何利用TAPD 实现项目从“人治”到“工具治”再到“流程治”的转变</li>\n<li>项目组合管理助力软硬件一体化解决方案落地</li>\n</ul>",
    "publish_time": "2022-12-22 14:39:43",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "TAPD 思享汇 | 创维 VR：敏捷研发过程中的管理实践",
    "url": "https://www.infoq.cn/article/9UFVaoLmabMU2ROxMM70",
    "summary": "<p>创维 VR 产品线在 VR 快速研发迭代过程中遇到了软硬件一体化研发管理的挑战，通过引入 TAPD 这一工具，创维完成了研发流程的闭环升级，实现了研发流程标准化、研发管理的精细化及研发效率的提升。</p>\n<h1>演讲大纲</h1>\n<p>创维 VR 软硬件开发流程框架及挑战<br />\n创维 VR 软硬件一体化研发解决方案<br />\nTAPD 对创维 VR 软硬件一体化研发的价值</p>\n<h1>观众收益</h1>\n<ul>\n<li>VR 软硬件一体化项目研发过程中的挑战与解决思路</li>\n<li>TAPD+创维 VR 的项目管理场景实践</li>\n</ul>",
    "publish_time": "2022-12-22 14:39:51",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "TAPD 思享汇 | 元年科技：敏捷项目管理如何帮助我们提升研发质量",
    "url": "https://www.infoq.cn/article/C6qMiKc2B2N18XqLU98I",
    "summary": "<p>元年科技在高速发展中遇到了研发管理瓶颈，需要完整的研发流程管理。使用 TAPD 后，元年科技完成了研发流程的闭环落地，并通过 TAPD 的 API 量化质量管理，推动了产品研发的质量改进。</p>\n<h1>演讲大纲</h1>\n<ul>\n<li>元年科技开发流程框架及 TAPD 使用场景概览</li>\n<li>元年科技使用 TAPD 的重点功能场景解剖</li>\n<li>元年科技如何进行量化质量管理，高效交付业务价值</li>\n</ul>\n<h1>观众收益</h1>\n<ul>\n<li>TAPD 的基础功能在日常开发流程中的应用</li>\n<li>TAPD API 在实际工作中的使用</li>\n</ul>",
    "publish_time": "2022-12-22 14:39:55",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "倚天 710 ARM 芯片的 Python+AI 算力优化技术实践",
    "url": "https://www.infoq.cn/article/M3OtpBbNjpjKrxe9oqtF",
    "summary": "<p></p><blockquote>在刚刚结束的 PyCon China 2022 大会上，龙蜥社区开发者朱宏林分享了主题为《ARM 芯片的 Python+AI 算力优化》的技术演讲。本文为演讲内容整理。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d2/d262d2a68dff07cc01f965942ac6174b.png\" /></p><p></p><p>我们的场景是 ARM 平台的和 AI 相关的任务，主要的目标是进行性能优化，具体来说我们首先关注的是深度学习推理任务（inference task），主要原因也是来自于业务需求。</p><p></p><p>这里说的 ARM 平台不是我们理解的终端设备，比如手机之类的，而是指服务端平台。在大家印象中，AI 任务，特别是深度学习的程序一般是跑在 GPU 或者 x86 的 CPU 上，出于功耗、成本、性能等因素的考虑，云厂商逐步开始建设 ARM 架构的服务平台，这是一个趋势。当然 ARM 平台还不是很成熟，许多软件还无法成功跑起来，更不要说提升性能了。</p><p></p><p>我们想要吸引一部分用户将AI应用从原先的 x86 平台上迁移到 ARM 平台上。这就要求 ARM 平台能提供更好的性能，或者更好的性价比。所以说如何整合 Python+AI 的相关软件使其发挥最好的性能成为了我们关注的重点。</p><p></p><p>下文的分享整体分为两部分，一部分是介绍我们进行的优化工作，主要是跟矩阵乘法相关的优化，第二部分是关于 Python AI 应用在 ARM 云平台-倚天 710 上的最佳实践。</p><p></p><h3>一、优化工作介绍</h3><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/bc/bc21f069a16f32b6e693f840a141a575.png\" /></p><p></p><p>前面说我们的优化是和矩阵乘法相关的，那首先需要说明为什么我们会关注到这个。</p><p></p><p>这里有一个绕不开的场景就是深度学习，不管是前几年知名的 <a href=\"https://www.infoq.cn/article/wjca3csPbWSIO56jaHM7\">AlphaGo</a>\"，还是当前火热的 <a href=\"https://www.infoq.cn/article/AWWsrfb54zTvglZ0I5qS\">ChatGPT</a>\"，都用到了大量深度学习的技术，深度学习本身只是AI的一个分支，但却影响广泛，不容忽视。所以我们从深度学习开始切入，从当前最广泛使用的深度学习框架，TensorFlow 和 PyTorch 开始。此外，我们还需要结合硬件场景，即前面说到的 ARM 服务端平台，对于阿里云来说就是结合倚天 710 芯片。</p><p></p><p>深度学习的实现中包含大量的矩阵乘法，甚至有文章直接写出矩阵乘法是深度学习的核心。举个例子，我们熟知的卷积操作，实际上经过一系列的转换后，输入特征和卷积核会被转换为两个矩阵，然后进行矩阵乘法，输出的结果再解码成特征图，就完成了卷积。除此以外，全连接层也由矩阵乘法实现，当前流行的 Transformers 结构，被包括 ChatGPT 在内的各类 NLP 模型所使用，也包含大量矩阵乘法操作。</p><p></p><p>我们可以看一些例子：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b1/b1439f063c4f669e3dea5609c3f4008b.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/70/708c1aab9985ebe152bc649baa6259d3.png\" /></p><p></p><p>可以看到，像 AlexNet、ResNet-50 之类的模型，在进行推理时，大约 90% 计算耗时在执行矩阵乘法。即使对矩阵乘法做一些微小的优化，影响也是很广泛的。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2c/2c347884950b9886d8b3fdab6ecc9569.png\" /></p><p></p><p>我们前面说的矩阵乘法，更准确的叫法是 GEMM，通用矩阵乘法，其实还包含系数和累加操作。但是时间复杂度仍然是 MNK 级别，主要还在于 AB 两个矩阵相乘。直观来看，深度学习涉及的矩阵乘法计算量很大，比如常见的卷积操作可能就涉及 5000 万次计算，所以优化就显得很有必要，右下图是最朴素的三层循环迭代法，这种做法通常非常慢，计算机科学家做了许多努力，从优化内存布局和利用向量指令出发，能够将性能提升 10 倍以上。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5c/5cfb5550c903977671c1b4e953025889.png\" /></p><p></p><p>内存布局主要分两步，第一步是对矩阵进行分块，即对于一个超大的矩阵，我们并不是一个一个按顺序计算，而是将矩阵切分为一个一个小块，分小块计算。第二步是对分出的小块，内部的元素序列进行重排，例如原来是按行排列的矩阵，那可能第一行四个计算好了，就需要取第二行的前四个，但是要取第二行就需要指针移动很长的距离，很容易造成 cache 不命中，于是需要重排，使得他们在内存上连续。优化内存布局主要目的是为了增加 cache 命中率，减少访存次数。</p><p></p><p>其次是利用向量化指令，类似 AVX 对于 x86 设备，NEON 对于 ARM 设备。向量化指令本质上是为了同时对多个数据进行计算，例如我们要对四组数据分别进行乘法，那么常规情况下需要执行四次，如果将它们对应放入向量寄存器中，只需要一条向量化指令，就可以同时得出四个结果，计算效率得到提升。当然这个是需要硬件支持。</p><p></p><p>因为 AI 推理大量使用了矩阵乘法，如今也有许多硬件对矩阵运算进行了加速：</p><p></p><p>NVIDIA Volta 架构引入了tensor core，可以高效地以混合精度处理矩阵乘Intel AMX(Advanced Matrix Extensions) 通过脉动阵列在硬件层面支持矩阵乘ARM SME(Scalable Matrix Extension) 支持向量外积运算，加速矩阵乘</p><p></p><p>目前市面上尚没有可以大规模使用的支持 AMX 或者 SME 的硬件，在这个阶段我们应该如何优化 CPU 上的 AI 推理算力呢？我们首先要了解 BF16 数据类型。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5b/5bd11daf4525bcd0b3bbd780fa9428be.png\" /></p><p></p><p>BF16(全称 Brain Floating Point)，是由 Google Brain 开发设计的 16 位浮点数格式。</p><p></p><p>相比传统的 FP16 位浮点数，BF16 拥有和 FP32 一样的取值范围，但是精度较差。但对于深度学习来说，较低的精度并不显著影响结果，而较低的表示范围则会显著影响模型训练的好坏。</p><p></p><p>此外，BF16 还具有转换方便的特点，BF16 和 FP32 的互转只需要截断或填充尾数即可。</p><p></p><p>使用 BF16 还可以节约一半的内存，紧凑的内存表示通常意味着更高的计算吞吐。</p><p></p><p>最后，我们也有了硬件指令支持，可以直接对 BF16 数据进行操作。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4c/4cd53658678aed043fdc6978d89d7325.png\" /></p><p></p><p>需要说明的是 BF16 的扩展包含在 ARMv8.6 设备上，当然<a href=\"https://www.infoq.cn/article/fWqoFNWr5SCpFd0r41tJ\">倚天 710</a>\" 是 ARMv9 的指令集，同样支持。</p><p>我们主要通过 BFMMLA 来进行矩阵乘法计算，例如对于包含 128bit 的向量寄存器的设备来说：</p><p></p><p>输入 A: 大小为 2*4 的 BF16 矩阵，按行存储输入 B: 大小为 4*2 的 BF16 矩阵，按列存储输出 C: 大小为 2*2 的 FP32 矩阵</p><p></p><p>BFMMLA 单指令完成 16 次乘法和 16 次加法，计算吞吐非常高。</p><p></p><p>当然这时候如果我们需要 C 是 BF16 类型的话，就需要应用转换指令，例如向量化指令 BFCVT，加速转换过程。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1c/1c1123b0e9bd929248c289d7978e488f.png\" /></p><p></p><p>我们的目标还是给 tensorflow 和 pytorch 用户提供加速，这是整体的流程图，对于一个 AI 推理任务，实际上不论是 TensorFlow 还是 PyTorch 都不会自己直接去计算，而是叫个专门的计算后端，在 ARM 主要是两个，一个是 ARM Compute Library，另一个是 OpenBLAS，他们之间的关系如右图。</p><p></p><p>TensorFlow 在最近的版本中开始采用 oneDNN + ACL 作为计算后端，oneDNN 也是一层皮，实际的计算仍然是 ACL。用户实际上只需要设置一个环境变量，就可以在不该动代码的情况下获得 BF16 加速。这个改进是由 ARM 公司的研发人员首先完成了。具体操作例子如下：</p><p><code lang=\"null\"># 假设 resnet.py 包含用户写的模型推理的代码\nDNNL_DEFAULT_FPMATH_MODE=BF16 python3 resnet.py</code></p><p></p><p>PyTorch的情况比较复杂，PyTorch 支持 OneDNN + ACL，但无法很好的发挥性能，同时 PyTorch 支持 OpenBLAS 后端，因此可以通过 OpenBLAS 来享受 ARM bf16 扩展带来的性能收益。</p><p></p><p>OpenBLAS 的 BF16 的 GEMM 优化是由龙蜥社区理事单位阿里巴巴贡献的，于此同时，我们为了方便用户使用，也在 PyTorch 中加入了一个API，用户在模型执行前添加一行torch.set_float32_fast_math_mode(\"BF16\")，就可以获得 BF16 加速，不必修改其他代码（需要说明，这个api还没有合入PyTorch，所以目前要使用我们提供的pytorch镜像才可以获得）。操作例子如下：</p><p></p><p><code lang=\"null\"># ...\n\n# 在模型执行前设置fast math mode\ntorch.set_float32_fast_math_mode(\"BF16\")\n# ...\n# 执行模型\npred = model(x)\n# ...</code></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6e/6ea8308267b3b3425480e5ef8b0d2169.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/77/77c881a6c84ce7460707199bdc36f4fc.png\" /></p><p></p><p>之后是一些性能测试的展示，我们测试了 OpenBLAS 纯矩阵计算的性能对比。分别记录了 GFLOPS 和执行时间两个指标。</p><p></p><p>然后测试 TensorFlow 和 PyTorch 的性能对比，在对比中，我们可以看到，得益于 BF16 扩展，最新的 ECS ARM 平台上的性能优于 x86 平台（g7）。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/25/254f6be7cb1280b5ba4b33d085891598.png\" /></p><p></p><h3>二、Python AI应用在ARM云平台-倚天710上的最佳实践</h3><p></p><p></p><p>现在介绍一下在 ARM 平台，特别是倚天 710 的用户，使用 TensorFlow 或 PyTorch 的最佳实践。</p><p></p><p>要知道软件版本的选择十分重要，随意选择 tensorflow 或者 pytorch 包可能遭遇：</p><p></p><p>未适配 ARM 架构，安装失败软件未适配 BF16 扩展或者环境参数有误，无法发挥硬件的全部算力，性能打折需要精心选择计算后端，例如目前 pytorch下OpenBLAS 较快</p><p></p><p>在 TensorFlow 上，我们可以选择最新的两个官方版本， 2.10.1 或者 2.11.0（最新版本），才能够获得 ACL 的 BF16 加速。用户也可以选择阿里云的镜像，这个和 pip 安装的其实是一样的，没有区别。</p><p></p><p>对于 PyTorch 用户，官方版本只有在最新的 1.13.0 才能够获得 ACL 加速，但是正如前面所说的，实际性能并不突出。阿里云则提供了带最新 OpenBLAS 的 PyTorch，在 docker 拉取时标注 torch_openblas 就可以获得。此外，我们也提供了modelzoo 镜像，包含模型的测试代码和验证代码。</p><p>目前我们仍然在进行相关的工作，期待后续能为大家提供更加完善的镜像。欢迎大家入群一起探索相关技术。</p><p></p><p>AI SIG 主页地址：<a href=\"https://openanolis.cn/sig/AI_SIG\">https://openanolis.cn/sig/AI_SIG</a>\"</p>",
    "publish_time": "2022-12-22 14:45:27",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]