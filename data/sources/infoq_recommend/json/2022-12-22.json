[
  {
    "title": "Java近期新闻：JDK 20的JEP提升为Targeted状态，AWS推出Lambda SnapStart特性",
    "url": "https://www.infoq.cn/article/ZYvBqLEPNaY4FvJjyopx",
    "summary": "<p></p><h4>OpenJDK</h4><p></p><p>JEP 432，<a href=\"https://openjdk.org/jeps/432\">记录模式（第二次预览）</a>\"，已从JDK 20的Proposed to Target状态<a href=\"https://twitter.com/OpenJDK/status/1597674326425096192?cxt=HHwWgMCi1biViqwsAAAA\">提升</a>\"为Target状态。该JEP更新自JEP 405，<a href=\"https://openjdk.org/jeps/405\">记录模式（预览版）</a>\"，更新包括：增加了对通用记录模式类型参数推断的支持；增加了对记录模式出现在增强for语句条件判断中的支持；并删除了对命名记录模式的支持。</p><p>&nbsp;</p><p>JEP 433，<a href=\"https://openjdk.org/jeps/433\">switch模式匹配（第四次预览）</a>\"，已从JDK 20的Proposed to Target状态<a href=\"https://twitter.com/OpenJDK/status/1597674334771810304?cxt=HHwWgMCo7faViqwsAAAA\">提升</a>\"为Target状态。该JEP更新自JEP 427，<a href=\"https://openjdk.org/jeps/427\">switch模式模式匹配（第三次预览</a>\"），更新包括： 简化了switch标签语法；现在， switch表达式和语句以及支持模式的其他构造体都支持泛型类型模式和记录模式的类型参数推断。</p><p>&nbsp;</p><p>JEP 434，<a href=\"https://openjdk.org/jeps/434\">外部函数和内存API（第二次预览）</a>\"，已从JDK 20的Proposed to Target状态<a href=\"https://twitter.com/OpenJDK/status/1597674343168757760?cxt=HHwWgMCitbWWiqwsAAAA\">提升</a>\"为Target状态。该JEP在<a href=\"https://openjdk.java.net/projects/panama/\">Panama</a>\"项目的支持下不断演进：JEP 424，<a href=\"https://openjdk.org/jeps/424?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2Njc5NTcwNzQsImZpbGVHVUlEIjoiSm5mVnpmNG5ZdThBcDFsdyIsImlhdCI6MTY2Nzk1Njc3NCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NTA5NTIwOX0.9fQ4yI44wd5QQLZv8_85Xhtv4-M8HKKZQzqwaeEbaM4\">外部函数和内存API（预览）</a>\"，在JDK 19中交付；JEP 419，<a href=\"https://openjdk.org/jeps/419?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2Njc5NTcwNzQsImZpbGVHVUlEIjoiSm5mVnpmNG5ZdThBcDFsdyIsImlhdCI6MTY2Nzk1Njc3NCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NTA5NTIwOX0.9fQ4yI44wd5QQLZv8_85Xhtv4-M8HKKZQzqwaeEbaM4\">外部函数和内存API（第二个孵化器版本）</a>\"，在JDK 18中交付；以及JEP 412，<a href=\"https://openjdk.org/jeps/412?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2Njc5NTcwNzQsImZpbGVHVUlEIjoiSm5mVnpmNG5ZdThBcDFsdyIsImlhdCI6MTY2Nzk1Njc3NCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NTA5NTIwOX0.9fQ4yI44wd5QQLZv8_85Xhtv4-M8HKKZQzqwaeEbaM4\">外部函数和内存API（孵化器）</a>\"在JDK 17中交付。该JEP提议基于反馈进行改进，并在JDK 20中提供第二次预览。更新包括：统一了 MemorySegment 和 MemoryAddress 接口，即，内存地址由零长度的内存段建模；并且增强了MemoryLayout 密封接口，以便于与JEP 427，<a href=\"https://openjdk.org/jeps/427?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2Njc5NTcwNzQsImZpbGVHVUlEIjoiSm5mVnpmNG5ZdThBcDFsdyIsImlhdCI6MTY2Nzk1Njc3NCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NTA5NTIwOX0.9fQ4yI44wd5QQLZv8_85Xhtv4-M8HKKZQzqwaeEbaM4\">switch中的模式匹配（第三次预览）</a>\"一起使用。</p><p>&nbsp;</p><p>JEP 429，<a href=\"https://openjdk.org/jeps/429\">作用域值（孵化器）</a>\"，已从JDK 20的Candidate状态<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2022-November/007225.html\">提升</a>\"为Proposed to Target状态。这个<a href=\"https://openjdk.java.net/jeps/11\">正在孵化</a>\"的JEP，最初名为范围局部变量（孵化器，Extent-Local Variables），由<a href=\"https://wiki.openjdk.java.net/display/loom/Main\">Loom项目</a>\"赞助，提议在线程内部和线程之间共享不可变数据。这优于线程局部变量，尤其是在使用大量虚拟线程时。</p><p>&nbsp;</p><p>JEP 436，<a href=\"https://openjdk.org/jeps/436\">虚拟线程（第二次预览</a>\"），已从JDK 20的Candidate状态<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2022-November/007223.html\">提升</a>\"为建议Proposed to Target状态。在<a href=\"https://wiki.openjdk.org/display/loom/Main\">Loom项目</a>\"的支持下，该JEP基于JDK 19中提供的JEP 425，<a href=\"https://openjdk.org/jeps/425\">虚拟线程（预览版）</a>\"，提出了第二次的预览，以便有时间为该功能的演进提供更多的反馈和经验。需要注意的是，除了少量在JDK19中被固化的JEP 425 API外，本预览版本没有进行任何更改，因此没有在第二次预览中提出。</p><p>&nbsp;</p><p>JEP 437，<a href=\"https://openjdk.org/jeps/437\">结构化并发（第二个孵化器）</a>\"，在JDK 20中从Candidate状态<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2022-November/007224.html\">提升</a>\"为Proposed to Target状态。该JEP也是在<a href=\"https://wiki.openjdk.org/display/loom/Main\">Loom项目</a>\"的支持下，提议基于从JDK 19中提供的JEP 428，<a href=\"https://openjdk.org/jeps/428\">结构化并发（孵化器）</a>\"中重新孵化该特性，以便有时间提供更多的反馈和经验。唯一的变化是更新了 StructuredTaskScope 类，以支持在任务作用域中创建的线程继承作用域值。这简化了跨线程不可变数据的共享。</p><p>&nbsp;</p><p>这三个JEP的审查将于2022年12月6日结束。</p><p>&nbsp;</p><p></p><h4>JDK 20</h4><p></p><p>JDK20<a href=\"https://jdk.java.net/20/\">早期访问构建版本</a>\"中的第<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-20%2B26\">26</a>\"版也已于上周发布，其中包括对第25版各种<a href=\"https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2020%20and%20%22resolved%20in%20build%22%20%3D%20b23%20order%20by%20component%2C%20subcomponent\">问题</a>\"的修复和<a href=\"https://github.com/openjdk/jdk/compare/jdk-20%2B22...jdk-20%2B23\">更新</a>\"。有关该版本的更多详细信息，请参阅<a href=\"https://jdk.java.net/20/release-notes\">发</a>\"<a href=\"https://jdk.java.net/20/release-notes\">布</a>\"<a href=\"https://jdk.java.net/20/release-notes\">说明</a>\"。</p><p>&nbsp;</p><p>对于<a href=\"https://openjdk.java.net/projects/jdk/20/\">JDK 20</a>\"，鼓励开发人员通过<a href=\"https://bugreport.java.com/bugreport/\">Java缺陷数据库</a>\"报告缺陷。</p><p>&nbsp;</p><p></p><h4>JavaFX 20</h4><p></p><p>JavaFX 20<a href=\"https://jdk.java.net/javafx20/\">早期访问构建版本</a>\"中的<a href=\"https://github.com/openjdk/jfx/releases/tag/20%2B10\">第10版</a>\"已提供给Java社区。JavaFX专为使用JDK 20早期访问构建版本而设计，应用程序开发人员可以在JDK 20上使用JavaFX 20构建和测试其应用程序。</p><p>&nbsp;</p><p></p><h4>Spring框架</h4><p></p><p><a href=\"https://spring.io/projects/spring-integration\">Spring Integration</a>\"&nbsp;6.0已<a href=\"https://spring.io/blog/2022/11/29/spring-integration-6-0-goes-ga\">发布</a>\"，其特性包括：JDK 17和Jakarta EE 9基线；支持GraalVM和Spring AOT引擎的原生镜像；具有千分尺和千分尺跟踪的可观测性仪器；以及对Jakarta EE 10的支持。有关该版本的更多详细信息，请参阅<a href=\"https://docs.spring.io/spring-integration/docs/current/reference/html/whats-new.html#whats-new\">最新动态页面</a>\"。</p><p>&nbsp;</p><p><a href=\"https://spring.io/projects/spring-vault\">Spring Vault</a>\" 3.0也已<a href=\"https://spring.io/blog/2022/11/28/spring-vault-3-0-goes-ga\">发布</a>\"，其特点包括：JDK 17基线；支持额外的HTTP客户端，包括响应式JDK HTTP客户端；并支持使用版本化密钥/值机密引擎的Vault存储库。有关该版本的更多详细信息，请参阅<a href=\"https://github.com/spring-projects/spring-vault/wiki/Spring-Vault-3.0-Release-Notes\">发布说明</a>\"。</p><p>&nbsp;</p><p><a href=\"https://spring.io/projects/spring-cloud\">Spring Cloud</a>\"&nbsp;2022.0.0的<a href=\"https://spring.io/blog/2022/12/02/spring-cloud-2022-0-0-release-candidate-3-codename-kilburn-has-been-released\">第三个候选版本</a>\"，代号为Kilburn，已向Java社区提供。该版本提供了对Spring Cloud子项目RC3版本的更新，如：Spring Cloud OpenFeign 4.0.0、Spring Cloud Commons 4.0.0、SpringCloud Function 4.0.0和Spring Cloud Starter Build 2022.0.0。但是，由于Spring Cloud CLI、Spring Cloud for Cloud Foundry和Spring Cloud Sleuth等子项目的移除，也引入了一些破坏性的更改。Spring Cloud 2022.0.0-RC3要求Spring Boot 3.0.0。有关该版本的更多详细信息，请参阅<a href=\"https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2022.0-Release-Notes\">发布说明</a>\"。</p><p>&nbsp;</p><p></p><h4>亚马逊云科技</h4><p></p><p>在最近的<a href=\"https://reinvent.awsevents.com/\">re:Invent</a>\"大会上，亚马逊云服务为其<a href=\"http://aws.amazon.com/lambda/\">AWS Lambda</a>\"项目<a href=\"https://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart/\">推出了</a>\"一项新特性<a href=\"http://docs.aws.amazon.com/lambda/latest/dg/snapstart.html\">Lambda SnapStart</a>\"，旨在减少Java函数的冷启动，并加速Lambda函数。<a href=\"https://quarkus.io/blog/quarkus-support-for-aws-lambda-snapstart/\">Quarkus</a>\"和<a href=\"https://micronaut.io/2022/11/28/leveraging-aws-lambda-snapstart-with-the-micronaut-framework/\">Micronaut</a>\"已经实现了对Lambda SnapStart的支持。更多详细信息请参阅<a href=\"https://www.infoq.cn/theme/164\">InfoQ的新闻报道</a>\"和亚马逊云科技<a href=\"https://aws.amazon.com/blogs/compute/reducing-java-cold-starts-on-aws-lambda-functions-with-snapstart/\">博客文章</a>\"。</p><p>&nbsp;</p><p></p><h4>Quarkus</h4><p></p><p>红帽（Red Hat）<a href=\"https://quarkus.io/blog/quarkus-2-14-2-final-released/\">发布</a>\"了Quarkus 2.14.2和2.13.5版本，主要修复了CVE-2022-4116漏洞，CVE-2022-4116是Dev UI配置编辑器中的一个漏洞，容易受到本地主机驱动攻击，导致远程代码执行。该版本还加强了对跨源资源共享（CORS）的处理，包括在CORS请求因来源无效而被拒绝时将 200 OK 更改为 403 FORBIDEN 。有关这些版本的更多详细信息，请参阅<a href=\"https://github.com/quarkusio/quarkus/releases/tag/2.14.2.Final\">2.14.2版</a>\"和<a href=\"https://github.com/quarkusio/quarkus/releases/tag/2.13.5.Final\">2.13.5版</a>\"的发布说明。</p><p>&nbsp;</p><p>在通往Quarkus 2.15.0的道路上，<a href=\"https://github.com/quarkusio/quarkus/releases/tag/2.15.0.CR1\">第一个候选版本</a>\"也提供了新特性，比如：与Quarkus CRaC/Firecracker的集成；将gRPC扩展迁移到新的Vert.x gRPC实现；使用Panache扩展支持在REST数据中根据命名查询进行过滤；以及对GraalVM 22.3.0、Mandrel 2.13和SmallRye GraphQL 1.9.0的依赖项升级。</p><p>&nbsp;</p><p></p><h4>Apache Camel</h4><p></p><p><a href=\"https://camel.apache.org/\">Apache Camel</a>\"&nbsp;3.18.4已<a href=\"https://camel.apache.org/blog/2022/12/RELEASE-3.18.4/\">发布</a>\"，对Spring Boot 2.7.6和HyperSQL DB 2.7.1进行了27个bug修复、改进和依赖项升级。有关该版本的更多详细信息，请参阅<a href=\"https://camel.apache.org/releases/release-3.18.4/\">发布说明</a>\"。</p><p>&nbsp;</p><p></p><h4>JHipster</h4><p></p><p>在<a href=\"https://www.jhipster.tech/\">JHipster</a>\"，已经开始将平台升级到Spring Boot 3.0。Okta的开发人员倡导者、Java Champion和JHipster开发团队成员<a href=\"https://www.linkedin.com/in/mraible/\">Matt Raible</a>\"提供了团队迄今为止遇到的问题的<a href=\"https://twitter.com/mraible/status/1597248481596706816?cxt=HHwWgMDUuYHCyKosAAAA\">最新情况</a>\"，即：<a href=\"https://github.com/reactor/BlockHound/blob/master/README.md\">BlockHound</a>\"需要一个新的<a href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html\">WebFlux</a>\"的入口；健康检查在Elasticsearch 8+中不起作用；MongoDB和WebFlux与JUnit和MongoDB驱动程序4.2+死锁。有关这些问题的更多详细信息，请参阅此GitHub<a href=\"https://github.com/jhipster/generator-jhipster/pull/19791\">拉取请求</a>\"。</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/12/java-news-roundup-nov28-2022/\">https://www.infoq.com/news/2022/12/java-news-roundup-nov28-2022/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/ATGFHsJa5HqNroEuNBLd\">对话Spring大神：Spring 生态系统的新时代来了！</a>\"</p><p><a href=\"https://www.infoq.cn/article/GGdb3Y7cO9Pw2Bf8NfIW\">Java 新闻汇总：Spring 发布，Resilience4j，Open Liberty，GlassFish，Kotlin 1.8-Beta</a>\"</p>",
    "publish_time": "2022-12-22 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "端云协同：万物智能化的未来，怎么“来”？",
    "url": "https://www.infoq.cn/article/58dW6BKuNZVUrJg4xmur",
    "summary": "<p>随着云计算、云原生的发展，大家逐渐意识到充分利用云端能力的优势赋能终端，打造端云协同的一体化服务，才是最终实现万物智能化未来的解决之道。现如今，端云协同已经成为开发社区竞相研究的前沿技术方向，OPPO 作为全球领先的智能终端企业，也积极地展开了探索。</p><p></p><p>在 12 月 14 日举办的 OPPO 2022未来科技大会（OPPO INNO DAY 2022）上，<a href=\"https://www.infoq.cn/article/JZw9tHzimGleWBq65lN6\">OPPO </a>\"发布了三大核心技术之一的安第斯智能云，致力于“让终端更智能”。在先前的 QCon 2022 全球软件开发大会（上海站），InfoQ 编辑对 OPPO 云服务中心高级总监韩建飞进行了采访，与他聊了聊端云协同相关的那些事儿，包括行业发展的现状以及未来的展望。</p><p>&nbsp;</p><p>以下是视频采访的全部内容，为方便读者查看，视频下方也附上了文字内容。</p><p></p><p></p><p>采访记者：InfoQ 资深编辑鲁冬雪</p><p>采访嘉宾：OPPO 云服务中心高级总监韩建飞</p><p>嘉宾简介：2019 年加入 OPPO，负责计算、网络、研发效能及云监控的开发管理工作，先后服务于中兴通讯、京东等公司。入职 OPPO 后完成了 OPPO 全球混合云的建设及全公司上云的战略。在云计算领域有丰富的研发管理和实践经验。</p><p>&nbsp;</p><p>InfoQ：您是如何定义“端云协同”的？端云协同技术核心要解决什么问题？</p><p>&nbsp;</p><p>韩建飞：当前终端行业面临的主要问题仍是硬件成本与用户体验之间无法达到平衡。在这种情况下，面对端侧的算力、空间、性能瓶颈，通过云侧计算、网络、存储能力，与端侧深度协同，进而提升端侧体验，是目前端云协同演进和发展的关键方向之一。在这一过程中，端云协同需要解决的最核心的问题在于，如何解决网络传输带来的时间损耗，为用户带来无感的产品体验。</p><p></p><p>OPPO作为一家领先的智能终端企业，在端云协同技术上有着深厚的技术积累。目前，我们正在研究和主要解决的问题是，在智能终端厂商设备计算和存储性能受限的情况下，如何通过云端的能力赋能终端；在网络传输延迟越来越低的情况下，如何通过云端，为终端用户带来无缝一致的一站式服务体验。</p><p>&nbsp;</p><p>InfoQ：端云协同赛道当前现状如何，将会往哪个方向或者趋势演进？</p><p>&nbsp;</p><p>韩建飞：在我看来，端云协同技术将会朝着两个方向演进，这两个方向既相互独立，又相互交织。第一，通过端云协同技术，扩展手机等智能终端的存储空间、计算能力和智能服务，在影像、AI、网络加速、云应用等方向赋能智能终端，为用户带来产品体验的整体提升；第二，通过端云协同技术，建设一云多端的生态服务体系，以多端融合、数据共享等方式，消弭用户在泛终端使用场景的割裂体验。基于此，OPPO将着力推动端云协同技术的演进与发展，构建数据共享与泛终端联动的万物互融生态体验。</p><p>&nbsp;</p><p>InfoQ：目前私有云、公有云、边缘云、混合云的发展分别对端云协同技术的演进有何影响？企业如何进行上云选型？</p><p>&nbsp;</p><p>韩建飞：业内其实基本形成了共识：无论是私有云、公有云、边缘云还是混合云，均可以支撑端云协同技术的发展，以何种云服务的形态上云，主要还是取决于企业的业务需求。</p><p></p><p>以 OPPO 为例，自一开始，OPPO 便坚定地选择了混合云基础设施的建设与发展路径。为什么 OPPO 会选择混合云？第一，ColorOS 在全球有逾5亿的月活用户，为了更好地为国内庞大的用户群提供服务，OPPO 在国内选择了自建私有云；另一方面，受海外政策和相关条例，以及运营策略的影响，OPPO 在海外选择了公有云。基于私有云和公有云，OPPO 构建了混合云基础设施，推动端云协同技术在业务场景落地。总的来说，OPPO 的混合云基础设施为业务场景服务，在满足业务发展的同时，实现了成本和效率的平衡。</p><p>&nbsp;</p><p>InfoQ：OPPO 混合云平台有何特点？在技术实现上有什么创新？</p><p>&nbsp;</p><p>韩建飞：OPPO 通过混合云基础设施构建了一套一体化平台，带来了全球一致的业务服务和运营体验。在技术实现上，OPPO 的产品线业务、中间件、数据库、网关、大数据实时及离线计算等均全量运行在容器上，基于此，OPPO 构建了独特的混合云实施策略，平台特点包括：</p><p>统一管理：多套异构云资源统一管理；公有云无缝切换，降低迁移成本；安全合规：一致的安全管控策略；无缝的网络策略融合；统一的组网模型；敏捷灵活：可利用公有云按需秒级计费特点；可支撑大规模临时紧急需求；海外快速开服；无感基础设施交付周期；常规算力下沉自建基础设施；统一架构：一致的混合云技术；降低运维管理复杂度；一致体验：统一技术架构交付；一致的业务使用体验；平台透明无感适配，统一API；可降低技术服务门槛。</p><p>&nbsp;</p><p>InfoQ：混合云的在端云协同技术中占据着什么样的地位？承担着怎样的角色？混合云基础架构的建设对于端云协同技术的发展有何作用？</p><p>&nbsp;</p><p>韩建飞：以 OPPO 的混合云基础设施建设为例，OPPO 自 2019 年开始，着力构建混合云基础设施，通过近 3 年来的努力，为 ColorOS 的 5 亿月活用户提供全球统一的混合云基础设施平台。为此，OPPO 制定了全球 8+N 可用区的目标，在全球主要的八大区域搭建自由的混合云基础设施，同时配合 N 各小区域的辅助性基础设施建设，实现公司内部系统的全面云化。</p><p></p><p>在混合云基础设施构建完成后，OPPO 基于底层技术能力构建了为全球用户提供端云协同服务的业务场景。在为庞大用户提供产业和服务的过程中，混合云基础设施是<a href=\"https://www.infoq.cn/article/HHPHzeKSlWI5vW8U3kpD\"> OPPO </a>\"业务全球化的关键技术底座，也是推动端云协同技术业务落地的关键技术支撑。</p><p>&nbsp;</p><p>InfoQ：据了解，关于端云协同，OPPO 目前在做很多事，比如 AIoT、音视频、一站式应用开发等等，所以有几个围绕这几个领域的问题想要问一下。</p><p>&nbsp;</p><p>Q1：您是如何定义 AIoT 的？AIoT 在工业领域有哪些主要的应用场景？OPPO 现在在该领域做了哪些探索？您觉得 AIoT 的落地应用，最难的部分是什么？有什么好的经验可以分享给大家？</p><p>&nbsp;</p><p>韩建飞：AIoT 可以从 IoT 生成的海量数据中挖掘更多的价值，用以改善业务及其服务。基于 AI 能力，IoT设备收集到的大数据，将更好地进行分析、推理与决策，而无需人工干预。AIoT 在工业领域落地的场景有很多，比如供应链智能管理、生产线智能监控、智能诊断、智能维护，工厂的智能管理、产品质量控制和智能故障诊断等，在这些场景中，目前在业内也不乏成功的落地案例。</p><p></p><p>在 AIoT 的落地过程中，OPPO 面临的最大的难题是，作为一家智能终端企业，需要去连接各种不同类型的设备，而在不同的设备之间，复杂的协议适配不仅是 OPPO，同时也是整个行业面临的关键阻力之一。在自有 IoT 设备的连接上，OPPO 有一套自研协议；在与不同厂商设备的连接过程中，OPPO 更希望的是通过统一规范进行连接。基于此，<a href=\"https://www.infoq.cn/article/vkHROQzRXNkX5uooNGgl\">OPPO</a>\" 积极加入了相关生态，希望可以实现不同设备间的统一连接。</p><p></p><p>以 OPPO 智能家居的场景探索为例，智能家居落地的难点之一，在于不同设备生态之间的隔阂，无法实现互联互通，而近年来的标准协议如 Matter 等，为互联互通带来了一丝希望。在这一领域，OPPO 仍处于探索状态，从现有经验看来，通过标准协议拥抱开放生态，不失为 AIoT 应用落地的关键路径之一。</p><p>&nbsp;</p><p>Q2：如今大多数音视频厂商主攻的技术主要有 RTC、IM 以及 CDN，OPPO 在这三方面做了哪些探索？“端云协同”又是如何赋能咱们业务的呢？</p><p>&nbsp;</p><p>韩建飞：在音视频技术领域，OPPO 起步得相对较晚，业界已有相当多成熟的技术方案可借鉴。基于此，OPPO 选择了 RTC + CDN 结合的方式，以满足 OPPO 在音视频领域的业务需求。之所以选择 RTC，是因为 RTC 在传输过程中时延极短，与 CDN 相互配合，可以让各个地区的用户，均能快速感受到音视频传输的实时性与便捷性。</p><p></p><p>端云协同在 OPPO 的业务场景中具有较多的应用，如远程协同、语音通话、语音共享、游戏互动以至于云游戏等业务场景，端云协同技术为 OPPO 的相关业务场景带来了窄带高清、低延迟的交互体验。</p><p>&nbsp;</p><p>Q3：一站式应用开发，有的人认为注重“一站式”的广度重要，也有人说注重“应用开发”的深度重要，那 OPPO 又是如何定义一站式应用开发的呢？目前 OPPO 一站式移动应用开发平台有哪些技术突破？</p><p>&nbsp;</p><p>韩建飞：无论是从广度还是深度上，OPPO 移动应用开发平台都达到了一个很好的平衡状态。目前，OPPO 移动应用开发平台是一个主要服务于内部互联网业务场景的一站式平台，为内部开发者提供 toolkit、热更新、云控、日志打捞、自升级、UIkit、网络库等中间件能力，并结合研发云提供上架、运营等服务。</p><p></p><p>在端云协同的场景下，OPPO 移动应用开发平台仍具有非常大的延展和想象空间，通过移动应用开发平台，更好地实现数据流转和设备融合，并在此基础上，为开发者和应用生态带来更加便捷高效的一站式服务。</p><p>&nbsp;</p><p>Q4：从 AIoT、音视频+、一站式应用开发等场景来看，从 0 到 1 构建端云协同，行业里面临的技术难点分别是什么？</p><p>&nbsp;</p><p>韩建飞：从发展趋势来看，端云协同即将迎来飞速发展期，网络从 2G 进化至 5G，端侧与云侧之间的传输速度加快。在网络传输速度大幅提升之后，云侧的无限算力和存储资源将为终端的发展带来新的生机。</p><p>具体地说，面对端侧与云侧之间的网络传输延迟问题，是推动端云协同技术发展和演进的关键探索方向。在解决这一问题之后，OPPO 以至于智能终端行业，将为用户提供更为无缝一致的交互体验。</p><p>&nbsp;</p><p>Q5：像 AIoT、音视频+等各个领域都在做“端云协同”，那数据安全问题要如何解决呢？</p><p>&nbsp;</p><p>韩建飞：在安全方面，业内已经形成了一些较为完备的解决方案，如数据安全（图形、音视频等）隐私保护、用户安全密钥、全链路加密等安全隐私保护体系。</p><p></p><p>ColorOS 在全球拥有超过5亿月活用户，在这一用户基础上，OPPO 首要满足的是各个地域的隐私安全和规避地缘政治的相关风险。以端云数据加密为例，OPPO 拥有全链路安全认证，可以在用户授权的情况下，加密访问部分用户数据，让用户即使在数据上云的情况下，也能享受全面的、坚实的安全隐私保护。</p><p>&nbsp;</p><p>InfoQ：关于端云协同技术的未来，您有什么看法？您理想中的“端云协同”是怎样的？</p><p>&nbsp;</p><p>韩建飞：通过端云协同技术的持续演进与发展，以云赋能终端，最终为用户提供端云融合的一致性服务与体验，让云成为整个终端的全新生产力。</p><p>&nbsp;</p>",
    "publish_time": "2022-12-22 09:45:02",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]