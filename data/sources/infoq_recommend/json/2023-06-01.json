[
  {
    "title": "微软全新Azure应用服务计划，提升性能与扩展能力",
    "url": "https://www.infoq.cn/article/gbwNW5kVIMRx1aZvg9sI",
    "summary": "<p>微软最近宣布在 Azure 应用服务（Azure App Service）的 Premium v3 (Pv3) 服务层推出两项新产品，并于 Isolated v2 服务层进行了扩展。</p><p></p><p><a href=\"https://azure.microsoft.com/en-us/products/app-service\">Azure 应用服务</a>\"是一个基于 HTTP 的服务，可托管使用 .NET、.NET Core、Java、Ruby、Node.js、PHP 和 Python 等语言编写的 Web 应用程序、REST API 和移动后端。此外，它还提供自动缩放和高可用性、支持 Windows 和 Linux 两种操作系统，并支持从 GitHub、Azure DevOps 或任何 Git 存储库的自动化部署。</p><p></p><p>目前，应用服务可支持 Pv3 服务层，为企业提供了一系列新的面向内存优化的 P*mv3 计划，其中包括 P1mv3、P2mv3、P3mv3 等。这些计划在带来了内存配置增加的灵活性的同时，不需要额外的核心费用。此外，这些计划的虚拟核心数从 P1mv3 的两个核心、16GB RAM（相较 P1v3 的两个核心、8GB RAM）到 P5mv3 的32个核心、256GB RAM 不等。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d2/d20322f5b2548e6c2561f2e822ef3e4b.png\" /></p><p>来源：<a href=\"https://learn.microsoft.com/en-us/azure/app-service/app-service-configure-premium-tier\">https://learn.microsoft.com/en-us/azure/app-service/app-service-configure-premium-tier</a>\"</p><p></p><p>除了面向内存优化的计划外，Premium v3 还可提供一种性价比较高的 P0v3 计划。据微软称，与标准计划或 Premium v2 (Pv2) 计划相比，P0v3 计划在近似的月租费用下提供了显见更高的性能。此外，该公司还<a href=\"https://azure.microsoft.com/nl-nl/blog/new-azure-app-service-plans-fuel-greater-choice-and-savings/\">表示</a>\"，P0v3 计划可允许客户使用&nbsp;<a href=\"https://azure.microsoft.com/en-us/pricing/offers/savings-plan-compute/#benefits-and-features\">Azure 节省计划</a>\"和预留实例 (RI) 定价，这些定价仅适用于 Premium v3 服务层，可为客户节省高达55%的费用，比按使用量计费的计划更为划算。</p><p></p><p>此外，Azure 应用服务的成本管理<a href=\"https://learn.microsoft.com/en-us/azure/app-service/overview-manage-costs#production-workloads\">文档</a>\"提到：</p><p></p><p></p><blockquote>事实上，Premium V3 (最高的非隔离层) 是以成本效益最高的方式为您的应用程序提供大规模服务的方式。为了进一步节省成本，您可以在&nbsp;<a href=\"https://learn.microsoft.com/en-us/azure/app-service/overview-manage-costs#azure-reservations\">Premium V3 预留实例</a>\"上获得更进一步的折扣。</blockquote><p></p><p></p><p>除了 Premium 计划外，微软还为对安全性和合规性要求更为严格的企业提供了<a href=\"https://learn.microsoft.com/en-us/azure/app-service/environment/overview\">应用服务环境</a>\"&nbsp;(ASE)，这一环境允许客户对其应用程序网络的进出流量进行精确控制。与共享的多租户服务不同，应用服务环境专门用于托管来自单个客户的应用程序，且其背后是 Isolated v2 (Iv2) 计划。</p><p></p><p>Isolated v2 (Iv2) 计划现已扩展了三种新的计划：I4v2、I5v2 和 I6v2，其计算选项从16个虚拟核心和64 GB 内存到多达64个虚拟核心和256 GB 内存不等。</p><p></p><p>Azure 应用服务的定价和可用性详情可参见其<a href=\"https://azure.microsoft.com/en-us/pricing/details/app-service/windows/\">定价页面</a>\"。此外，微软在 Premium V3 的<a href=\"https://learn.microsoft.com/en-us/azure/app-service/app-service-configure-premium-tier#premiumv3-availability\">相关文档</a>\"中指出，其可用性将不断扩展至更多的 Azure 区域。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/04/new-azure-app-service-plans/\">Microsoft Offers More App Service Plans Choices</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/HdhHwuPQk4FCdPBpmdlP\">Azure CTO： Rust 已登陆 Windows 11 内核</a>\"</p><p><a href=\"https://www.infoq.cn/article/4114G9FlqZFEyTzQ53mq\">微软发布Azure Cosmos DB for PostgreSQL</a>\"</p><p></p>",
    "publish_time": "2023-06-01 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "社交泛娱乐出海作战地图",
    "url": "https://www.infoq.cn/article/IN02LFpmjr3Wdk8G7d2T",
    "summary": "<p>在企业出海从粗放式走向精细化的趋势下，企业对海外目标群体、交互方式、运营和服务等方面有更具体、更细颗粒度的认知需求，以便更快、更稳地做好本地化运营和服务。</p>\n<p>为了满足企业的精细化出海需求，融云重磅推出<a href=\"https://www.infoq.cn/form/?id=1604&amp;utm_source=wz&amp;sign=iq_6475a2839c791\">《社交泛娱乐出海作战地图》</a>（下文“出海作战地图”）。“出海作战地图”包括<strong>“出海动因＆历程”“重点市场布局”“重点赛道突围”“痛点与挑战”“出海从０到1”</strong>五大模块。你可以从这五大板块中了解到：</p>\n<ul>\n<li>首次出海，如何选择海外第一站？</li>\n<li>有哪些创新技术可以帮助企业出海？</li>\n<li>怎么制定海外本地化战略？</li>\n<li>如何选择更高效、更具性价比的海外营销方案？</li>\n<li>海外安全合规风险如何提前规避？</li>\n<li>……</li>\n</ul>\n<p>针对<strong>东南亚、中东、非洲、拉美、欧美 5 大重点市场的 64 个国家</strong>，“出海作战地图”从<strong>经济&amp;人口、政策环境、互联网基础、宗教文化、市场机会与赛道</strong>等方面帮助出海人体系化梳理出海思路。</p>\n<p>值得注意的是，“出海作战地图”还针对<strong>约会交友、社区、音频社交、视频社交、游戏社交、虚拟社交及 AIGC 新技术</strong>带来的新业态，对社交泛娱乐重点赛道进行了微观层面的详细拆解。</p>\n<p><a href=\"https://www.infoq.cn/form/?id=1604&amp;utm_source=wz&amp;sign=iq_6475a2839c791\">《出海作战地图》</a>还凝结了 200+ 位出海实战家的宝贵经验，从赛道/品类选择、目标地区适配、用户增长、变现模式、本地化运营、跨国团队管理等方面全方位呈现了“出海从 0 到 1”的实用方法论。</p>\n<p>更多精彩内容，点击“<a href=\"https://www.infoq.cn/form/?id=1604&amp;utm_source=wz&amp;sign=iq_6475a2839c791\">下载</a>”即可<strong>免费获取</strong>完整<strong>纸质版</strong>《社交泛娱乐出海作战地图》！</p>",
    "publish_time": "2023-06-01 09:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "一图在手出海不愁！完整纸质版《社交泛娱乐出海作战地图》免费领！",
    "url": "https://www.infoq.cn/article/Mk1N15ZlcNXYLpXqHe3e",
    "summary": "<p>经过近几年的发展，如今的互联网出海已经是截然不同的命题。从粗放到精细，企业出海的风浪越来越猛烈。</p><p></p><p>如何契合自己的基因选择出海赛道和地区？</p><p>如何打造有获客抓手的独特出海产品？</p><p>如何在海外拿下第一个客户？</p><p>……</p><p></p><p>融合200+实战家一线宝贵经验，融云近期重磅推出了<a href=\"http://gk.link/a/124t0\">《社交泛娱乐出海作战地图》</a>\"（下简称“出海作战地图”），通过“出海动因＆历程”“重点市场布局”“重点赛道突围”“痛点与挑战”“出海从０到1”五大模块，帮助出海人体系化梳理思路。</p><p></p><p>比白皮书形式更精炼省流，比知识类信息更实用有效，《出海作战地图》是社交泛娱乐出海不可多得的宝藏工具。出品方融云特别为InfoQ粉丝开通了免费申领通道，扫描下方二维码即可获取完整纸质版地图！</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/2d/cd/2d119be38638eb2dcbc2652170972acd.png\" /></p><p></p><p>《出海作战地图》纸质版实物长约1米，折叠起来方便携带，展开贴挂醒目亮眼，使用场景十分丰富。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/e4/8b/e48414b22b020103e43bbde58c11ac8b.png\" /></p><p>实物图全景图</p><p><img src=\"https://static001.infoq.cn/resource/image/a6/b2/a62d1393byy4e4fc80646695e12fbdb2.jpg\" /></p><p>实物图折叠版</p><p>在内容上，它通过5个模块体系化地对社交泛娱乐出海进行了全局知识梳理，具体又内含7个赛道、64个国家的产品和市场分析。并且，出海开发者面对的痛点挑战和从0到1实用指南模块的内容也具有操作性和借鉴意义。</p><p></p><p>BTW，《出海作战地图》将在6月2日于广州举办的“<a href=\"https://xie.infoq.cn/article/b15b07a4492f903b56ba93d32\">WICC · 社交泛娱乐出海嘉年华</a>\"”进行线下首发，感兴趣的朋友可以移步融云的官方公众号【融云全球互联网通信云】回复【WICC】报名，现场参会的同学也可以领取纸质版地图。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/cd/11/cdfe558d129c1ce57736c49e84ec9811.png\" /></p><p></p><h1>竞争不留余地，出海从哪下手？</h1><p></p><p></p><p>针对东南亚、中东、非洲、拉美、欧美5大重点市场的64个国家，《出海作战地图》从经济&amp;人口、政策环境、互联网基础、宗教文化、市场机会与赛道等方面进行了全要素宏观层面分析。</p><p></p><p>针对约会交友、社区、音频社交、视频社交、游戏社交、虚拟社交及AIGC新技术带来的新业态，《出海作战地图》对社交泛娱乐重点赛道进行了微观层面的详细拆解。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/f0/9e/f0903dbe3c965e51f4da26965700b49e.png\" /></p><p></p><p>二者结合，为出海人打造建立全局认知的第一知识图谱。</p><p></p><p>产业的发展总是遵循从粗放到精细，从岁月静好到卷生卷死的发展路径，这适用于几乎所有市场的所有品类。</p><p></p><p>普世的、基础的社交需求已经被先入为主的国际巨头解决，机会缝隙只存在于更聚焦、更复杂的需求，比如更细分的目标群体、创新的交互方式、升级的运营和服务。</p><p></p><p>明确产品定位，饱和赛道寻找用户未被满足的细分需求作为进入点，勇于集中资源打穿市场，是在巨头林立的竞争局势中立足的关键。</p><p></p><p>利用好新技术带动的产业浪潮，则是当前的另一条显性路径。在这方面，AI绘画工具<a href=\"https://www.midjourney.com/\">Midjourney</a>\"提供了一个参考思路。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/50/fb/505cba91a42ab4e5af574a2e34ec4ffb.png\" /></p><p></p><p>这个只有11人的团队做出的产品，上线不到一年已经实现了近1500万用户和1亿美元营收，成了谈论AIGC无法绕开的代表性公司。</p><p></p><p>不同于自建网站或App，它在实时社区Discord中以频道的形式提供服务。</p><p></p><p>1.5亿月活的Discord，对Midjourney来说首先是一个流量充沛的绝佳获客渠道。</p><p></p><p>其次，在Discord完整的社区生态上，Midjourney将即时交流的社交体验与AIGC服务相结合，频道更像是一个AI绘画的大型社交场所，也让它在庞大的用户需求中快速迭代产品。</p><p></p><p>这是实时社区Discord体验的神奇之处，也是融云超级群这个构建类Discord实时社区第一选择PaaS产品的灵活之处。</p><p></p><h1>Think Global, Act Local</h1><p></p><p></p><p>“相当于中国的哪一年？”</p><p></p><p>当我们讨论出海地区的发展阶段，这是一个最常被提及的问题。</p><p></p><p>这其实自带了一种心理暗示、前提假设，认为某个地区的发展曲线与中国一样，我们已经创造和见证的故事可以在别处如期上演。可事实并非如此，具体到某一个赛道、某一群用户的生意，事情就会变得复杂起来，既有市场相对成熟的模式复制到一个新兴市场里往往行不通。</p><p></p><p>这一点，从<a href=\"http://gk.link/a/124t0\">《出海作战地图》</a>\"对东南亚市场的梳理分析就清晰可见。作为一个多语言、多民族、多宗教信仰的地区，东南亚复杂的文化环境让本地化变得更加困难。如果带着简单的“降维打击”心态落地东南亚，可想而知只会“碰一鼻子灰”。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/37/5f/3731dafe7caff6b55833a13fd09c235f.png\" /></p><p></p><p>每个市场、每个群体都呈现出不一样的发展阶段和动态需求，所有看似有效的成熟攻略，都只是“刻舟求剑”。</p><p></p><p>我们在国内互联网产品、用户体验和运营等方面积累的经验，要放置于当地与具体市场进行碰撞融合，甚至形成新业态。</p><p></p><p>比如，电商与短视频在中国代表着移动互联网两个不同阶段的潮水流向，而在东南亚几乎是并驾齐驱。电商的爆发期叠加了短视频直播的红利期，电商出海就要更多考虑如何有效利用这些媒体的红利。这样的本地化问题，贯穿于业务发展的全程。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/31/f7/3137533b9cyy817cc0332633429f4bf7.png\" /></p><p></p><p>根据《出海作战地图》的梳理，数据合规和本地化治理、交互体验、政治宗教文化、底层技术和服务等本地化难题，共同讲述着全球化=无数细微本地化叠加的现实挑战。</p><p></p><h1>善用专业服务，避免无谓出血点</h1><p></p><p></p><p>今年聊出海，Temu是一个不容忽视的品牌。它在美国超级碗豪掷1400万美元投放了一条30秒的广告，“Shop Like a Billionaire”的广告词像帮我砍一刀一样迅速传播。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/20/21/20e9489fcb0b1ca19956afdae9c1f221.png\" /></p><p></p><p>略微反常识的是，鲜少在美国上演的低价策略居然收效不错。据Sensor Tower统计，美国应用商店2023年3月前三周下载量排名，Temu居首位。</p><p></p><p>在极致性价比的产品战略下，Temu迅速超过了亚马逊、沃尔玛等本土电商。可见，看似稳固的市场格局里，也并没有巨头把知名度彻底转变为忠诚度。</p><p></p><p>不过，Temu的表现绝不仅仅得益于低价策略和社交裂变营销方式，底层其实是包括仓储物流、中国制造、交易平台等组成的整体生态正在走向世界。可以说，如果没有产业链的成熟，Temu和Shein的成功都将无法如此顺利。</p><p></p><p>所以，业务扩张的局限绝对不仅仅在于业务本身，还会囿于产业资源、生态和秩序。而在社交泛娱乐领域，这一点目前可谓“天时”已备。</p><p></p><p>在中国工程师红利的影响下，社交泛娱乐出海经历了几轮迭代，如今已经形成了相对完整的生态链条，迸发出蓬勃的势能。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/2d/e4/2d4f75d7302efb75c4f5d1a7ecfae2e4.png\" /></p><p></p><p><a href=\"http://gk.link/a/124t0\">《出海作战地图》</a>\"梳理了社交泛娱乐涉及到的主要三方服务，强调把专业的事情交给专业的人，利用好经过时间和场景考验的三方服务，避免在这些要害处造成无谓失血点。</p><p></p><p>以出海必须面对的通信网络难题为例，中东语聊房产品OHLA的CTO沈翔曾分享，语聊房出海会遇到一些国内想象不到的问题，网络环境就是关卡之一。“在中东，可能两个相隔仅10公里的用户，就会面对网络环境的巨大差异。”</p><p></p><p>OHLA的选择，就是把复杂的通信问题交给融云来处理。正如蜻蜓游戏总经理何杰在融云“社交泛娱乐出海赋能会”上所说，“一定要懂得借力，充分利用融云三方服务的专业性。”</p><p></p><p>他还从成本角度更直白地算了一笔账，像IM、RTC这样的必备通信能力，如果自研，前期开发、测试以及上线后的运维等各种问题会非常多。“几千台服务器，几十个运维人员，不光是经济成本，管理的成本也会非常高。”</p><p></p><p>而融云从2016年便伴随中国开发者的出海步伐开启全球化布局，在重点地区积累了丰富的服务经验，其全新升级的全球通信网SD-CAN V4，可以通过多链路、多协议、智能竞速、动态混淆、智能心跳、网络记忆及多地区统一调度等手段来完成不同地区的调度优化，形成了庞大、无拥塞的全球网络。</p><p></p><p>再说合规问题，流量规模、占用用户时间成为社交泛娱乐商业形态的基本盘，持续合规地获取、留存用户的能力决定了应用生命线的长短。这不仅考验出海创业者的认知和资源整合能力，对应变能力也是一种挑战，毕竟像iOS更新隐私规则这样的行业性变革也不是偶尔有之的小概率事件。</p><p></p><p>《出海作战地图》以知识产权合规、海外运营法务合规、苹果/GP商店合规、数据隐私合规、产品内容合规、海外广告买量及变现合规几大方面呈现安全合规全景图，基本上囊括了业务开展在合规方面的所有问题，你可以对照地图一一检查自己的业务。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/2f/f1/2fdefcf7cd941243a6d035effb1e65f1.png\" /></p><p></p><p>包含以上难点在内，《出海作战地图》还从赛道/品类选择、目标地区适配、用户增长、变现模式、本地化运营、跨国团队管理等方面全方位呈现了“出海从0 到1”的实用方法论。</p><p></p><p>当然，市场浩瀚如烟，一张地图很难做到尽善尽美，但我觉得，它只要能激发你一点灵感和新思路，那就值得！点击<a href=\"http://gk.link/a/124t0\">此处</a>\"或扫描下方二维码，立刻免费获取完整纸质版《社交泛娱乐出海作战地图》！</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/42/1f/42b7fae9fb0dd8cda3132280c381801f.png\" /></p><p></p><p></p><p></p><p>&nbsp;</p><p>&nbsp;</p>",
    "publish_time": "2023-06-01 09:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "QCon金融行业闭门会：数据治理是管理问题，还是技术问题？",
    "url": "https://www.infoq.cn/article/2SKxCHfga7XBmatYS0oW",
    "summary": "<p>在5月26日，<a href=\"https://qcon.infoq.cn/2023/guangzhou/schedule\">QCon全球开发者大会（广州站）</a>\"顺利落地，在现场，InfoQ 特别策划了五场闭门会，主题分别为《企业在 LLM、AIGC 浪潮下的研发探索》《DevOps vs 平台工程，必要性和 ROI 探讨》《破解成本优化后的稳定性问题》《业务出海之架构、合规、运营》《金融行业数据治理经验分享》，本文为《金融行业数据治理经验分享》研讨纪要整理～</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/71/71ac65d4f2dca76a9f3343485e4acd06.jpeg\" /></p><p></p><p>出席此次闭门会参会嘉宾如下：</p><p>主持人：Yolanda&nbsp;InfoQ&nbsp;极客传媒总经理</p><p>李杨，平安资管科技平台交易系统团队开发组负责人王劲，数果智能创始人兼&nbsp;CEO&nbsp;周程伟，链融科技CTO，TGO&nbsp;深圳会员李龙，众安国际Fundamental&nbsp;Tech&nbsp;VP</p><p></p><h4>针对不同监管部门发布的不同标准，你们如何应对？</h4><p></p><p>李龙提到，首先是内部需要有理解监管，而且为业务目标共同努力的联合团队；第二点，需要实时了解监管动态；第三，落地的时候，需要充分的保护好企业，进行相关证明材料、法律意见的存档，例如数据跨境风险，在监管政策上，内地和香港的政策有一定差异，这里的数据处理和合规风险需要非常慎重，留好记录，确保业务合规开展。</p><p>&nbsp;</p><p>李杨指出，保险投资公司与银行有一些不同之处，他服务对象包括平安集团的保险资金以及第三方资金。由于可能涉及大规模的投资交易，监管机构担心某些操作造成不正常市场波动，为遵守监管要求，将风控措施嵌入到内部系统中。公司内部风控要求会更加严格，以避免违反监管规定。</p><p>&nbsp;</p><p>他们还有内部评级和事中监控系统，用于监控交易员执行交易时是否触发监管或者内部的一些要求。如果超过设置的某些阈值，系统会提醒交易员。一般来说公司的要求会高于监管既定的阈值以避免引起不必要的风险。与此同时，我们公司注重合规文化，常常进行合规宣传以及相应的学习。</p><p>&nbsp;</p><p>周程伟谈到不同监管部门存在不同的标准，尤其在跨境交易方面。然而，国内监管机构的标准在逻辑上是一致的，且核心逻辑是非标和综合规则。虽然不同行业可能存在一些差异。随着监管对金融科技的加强，进行某些操作变得越来越困难，需要大量的沟通和解释。在个人信息保护方面，涉及敏感信息的处理更加严格。另外，金融领域的监管目前还没有明确分工，但企业需要建立合规和数据管理体系。</p><p>&nbsp;</p><p>王劲也发表了自己的观点，他认为“作为乙方单位，我们在为甲方提供服务时，也感受到金融监管对数据安全和个人隐私的重视程度，尤其在与银行和其他金融机构合作时。监管部门对APP数据采集的要求非常高，包括数据分析和分类的明确要求，以及加密算法保护用户身份证、电话和银行卡等敏感信息。在数据分析过程中，数据脱敏是常用的方法，确保数据的安全性和隐私性。整个行业对数据安全和隐私的要求越来越严格，不仅限于金融领域，包括央企在内的各个行业也高度重视数据资产的安全。</p><p></p><h4>如何解决数据孤岛？</h4><p></p><p>&nbsp;</p><p>李杨率先谈到：很多企业声称正在进行数字化转型，解决数据孤岛和数据联通的问题，但实际上数字化转型对于任何企业来说都是较大的挑战。“我认为数据孤岛是必然会产生的，并且会持续存在。业务部门往往相对独立，构建了各自的业务系统，导致出现隔离和数据孤岛的问题。”他认为解决数据孤岛问题是一项困难的任务，特别是在组织不够痛时。他也指出数据孤岛问题可能永远存在，只能不同企业缓解的程度不一样。无法完全解决，处于on the way的状态。因为组织架构和业务系统支持的效率等因素影响着解决该问题的难度。他认为企业应该建立统一的数据中心和数据服务中台，以提高数据的一致性和故障处理能力。</p><p>&nbsp;</p><p>王劲谈到，数据治理在数据资源和数据库方面并不是最新的概念，而是从数仓时代开始逐渐形成的。然而，许多公司在进行数据治理时存在一个重要问题，就是过于关注治理而忽视了从业务出发的重要性。数据治理必须回归到业务场景，并从一个业务场景的角度全面治理数据，否则即使在数据层面上取得了一些成果，也无法解决实际业务问题。因此，数据治理需要由业务牵头，并将技术服务于业务需求。另外，关注数据指标是实现数据治理的关键，指标是离业务最近的，通过围绕指标展开数据治理，将指标相关的数据汇总起来，可以解决数据孤岛、数据质量等问题。</p><p>&nbsp;</p><p>周程伟提到了数据孤岛的问题正在逐渐变好，解决数据孤岛是一个动态变化的过程。于此同时，他也谈到，规范化的产品研发和数据管理流程可以解决现有问题。管理科学和数据质量是需要解决的关键问题，但在传统企业中很难做到完美。</p><p>&nbsp;</p><p>李龙则强调了数据与组织架构的关系。他认为数据的最终形态取决于组织架构，他强调数据的统一口径和标准，并指出数据科学部门的独立性和与业务部门的协作。同时他也认为CEO和CTO在解决数据与组织架构问题上起关键作用，必须通过合理的设计来解决这个问题。他还提到了众安保险和数据科学应用中心的数据团队在公司文化中的重要性，以及数据在业务增量中的作用。</p><p>&nbsp;</p><p></p><h4>数据质量参差不齐，大家如何解决？</h4><p></p><p>&nbsp;</p><p>王劲认为数据质量的关键在于回归到业务平台。从业务角度出发，大家需要确定基于特定场景和业务的数据指标体系，进行梳理和定义。通过分析，将整个数据链路串联起来，并在每个节点实现管控和监控。数据质量参差不齐的情况下，出现故障或问题往往需要花费大量时间和资源进行排查。因此，确保数据质量需要建立一个闭环的监督体系，以业务为中心，实现数据活动和关键节点的快速定位。在技术层面上，可以采用多数据源的比对和检查，以及监控系统的建立。此外，指标的偏离度和数据的准确性、及时性、完整性也是数据质量的重要考虑因素。</p><p>&nbsp;</p><p>李杨谈到数据治理涉及数据质量、数据标准和数据安全。其中，数据质量指标包括一致性、完备性、完整性、及时性和有效性等。通过交叉验证和调度平台生成数据质量报告，满足对数据质量的要求和监控。从技术层面来看，实现并不复杂，通过调度和手工制定规则来完成。然而，我们需要确保能够清楚地收集业务关心的数据指标，并生成及时准确的数据指标，这是一个比较重要但也比较困难的任务。另外，数据分为OLAP和OLTP对于OLTP型数据，对数据的及时性监控更为重要。现有的基础设施能否满足对OLTP型数据质量的监控是一个难点。</p><p>&nbsp;</p><p>王劲在这里提出了疑问，他认为在考虑数据质量时，不能仅从技术角度出发，而应该从业务结果的角度去倒推。数据质量问题是与业务密切相关的，例如，如果每天的交易量应该达到1000亿，但实际只有800亿，这涉及到了数据质量的问题。数据的质量与业务是紧密相连的，不能将其分开看待。</p><p>&nbsp;</p><p>李龙最后谈到，在进行原始数据定义和口径梳理时，需要意识到不同部门可能有不同的口径定义。建模团队应该能够发现这些不同的口径，并将其整合起来，避免分析过程中的冲突和重复。这一点非常重要。在这个基础上，通过数据质量的监控规则和机制来保证数据的准确性。同时，业务部门也应自觉地发现问题，并促使解决。数据团队在此过程中扮演着收口的角色，不是简单地新增数据，而是通过识别相同数据中的不同问题，避免冗余。</p><p>&nbsp;</p><p>活动推荐：</p><p>2023 年 9 月 3 - 5 日，在北京·富力万丽酒店，<a href=\"https://qcon.infoq.cn/202309/beijing/\"> QCon 全球软件开发大会（北京站）</a>\"已开启，现已开启售票，提前订票，可享受7折早鸟价，购票参会可以直接电话 / 微信联系票务经理 18514549229。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e2/e2cc6621bc634e6d3fcacee922604626.jpeg\" /></p><p></p>",
    "publish_time": "2023-06-01 11:23:23",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "设计模式详解之策略模式",
    "url": "https://www.infoq.cn/article/0f0f1b453827b2c5ccb624ade",
    "summary": "<p>作者：刘文慧</p><p></p><p></p><blockquote>策略模式是一种应用广泛的行为型模式，核心思想是对算法进行封装，委派给不同对象来管理，本文将着眼于策略模式进行分享。</blockquote><p></p><p></p><p></p><h1>一、概述</h1><p></p><p></p><p>我们在进行软件开发时要想实现可维护、可扩展，就需要尽量复用代码，并且降低代码的耦合度，而设计模式就是一种可以提高代码可复用性、可维护性、可扩展性以及可读性的解决方案。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2c/2c43fd4658dc701e2fd3454a7b9ef25b.png\" /></p><p></p><p>大家熟知的23种设计模式，可以分为创建型模式、结构型模式和行为型模式三大类。其中，行为型模式可用于描述程序中多个类和多个对象如何协作完成复杂的任务，涉及不同对象间的职责分配、算法的抽象化。策略模式是一种应用广泛的行为型模式，本文将着眼于策略模式进行学习分享。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d8/d805432b933071c16e18bbb7f6c340cc.png\" /></p><p></p><p></p><h1>二、基本概念</h1><p></p><p></p><p>策略模式的核心思想是对算法进行封装，委派给不同对象来管理。这样，我们就可以定义一系列算法，将每个算法封装到具有公共接口的一系列具体策略类中，从而使它们可以灵活替换，并让算法可以在不影响到客户端的情况下发生变化。同时，策略模式仅仅封装算法（包括添加、删除），但其并不决定在何时使用何种算法，算法的选择由客户端来决定。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8f/8f84a735c560abc5c71773d8cd935541.png\" /></p><p></p><p>比如，我们旅游时可以选择的出行策略有很多种：自行车、汽车、火车、飞机，每种出行策略都有各自的使用方法，只要能到目的地，我们可以随意更换各种策略。再比如我们去逛商场，商场会有很多促销活动：满减、返利等，这些促销方式本质上都是一些算法，而算法本身也是一种策略，随时都可以互相替换，针对同一件商品，今天满500减50、明天满300返100购物券，这些策略之间同样可以互换。</p><p></p><p>那么，我们应该如何使用策略模式呢？下面将从结构和使用步骤两个层面，对策略模式进行概念性介绍。</p><p></p><p></p><h2>2.1 结构</h2><p></p><p></p><p>策略模式包含三种类，分别是抽象策略类、具体策略类、环境类，它们各自负责完成特定任务，并且相互之间存在紧密的联系。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0d/0d393a8aa06e63280dd2fb6394675d73.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b3/b345cd0fb7722573433afc4230e35d3a.png\" /></p><p></p><h2>2.2 使用</h2><p></p><p></p><p>有了上述的基本概念，我们将策略模式的使用步骤概括为：</p><p></p><p>step1：创建抽象策略类，为具体策略定义好一个公共接口；step2：创建具体策略类，其通过接口来实现抽象策略类，同时封装了具体的算法；step3：创建环境类，持有一个抽象策略类的引用，提供给客户端调用。</p><p></p><p></p><h1>三、使用示例</h1><p></p><p></p><p>除了双11购物狂欢节，每年都会打造很多其他的促销活动。试想一下，如果每种大促活动都使用一种促销模式，未免太过枯燥，于用户、商家、平台而言都不友好。因此，为了提升用户购买体验、突出商家营销特点，需要面向不同大促活动使用不同的策略进行促销。这里以促销策略为例，简单分析策略模式如何使用。</p><p></p><p></p><h2>3.1 代码实现</h2><p></p><p></p><p><code lang=\"text\">//step1:定义抽象策略角色（Strategy）：所有促销活动的共同接口\npublic interface Strategy {  \n    void show();\n}\n​\n//step2:定义具体策略角色（Concrete Strategy）：不同类型的具体促销策略\n//618大促活动 A\npublic class ConcreteStrategyA implements Strategy {\n    @Override\n    public void show() {\n        System.out.println(\"618大促\");\n    }\n}\n​\n//99大促活动 B\npublic class ConcreteStrategyB implements Strategy {\n    @Override\n    public void show() {\n        System.out.println(\"99大促\");\n    }\n}\n​\n//双11大促活动 C\npublic class ConcreteStrategyC implements Strategy {\n    @Override\n    public void show() {\n        System.out.println(\"双11大促\");\n    }\n}\n​\n//step3:定义环境角色（Context）：把促销活动推送给用户，这里可理解为淘宝平台\npublic class Context{\n    //持有抽象策略的引用\n    private Strategy myStrategy;\n    //生成构造方法，让平台根据传入的参数（type）选择促销活动\n    public Context(Strategy strategyType) {\n        this.myStrategy = strategyType;\n    }\n    //向用户展示促销活动\n    public void taoPlatformShow(String time) {\n        System.out.println(time + \"的促销策略是:\");\n        myStrategy.show();\n    }\n}\n​\n//step4:客户端调用,需事先明确所有每种策略类如何使用\npublic class StrategyPattern{\n  public static void main(String[] args){\n        Context_TaoPlatform context;\n    \n        String time1 = \"9月\";\n        Strategy strategyB = new ConcreteStrategyB();\n        context = new Context(strategyB);\n        context.taoPlatformShow(time1);\n    \n        String time2 = \"11月\";\n        Strategy strategyC = new ConcreteStrategyC();\n        context = new Context(strategyC);\n        context.taoPlatformShow(time2);\n    \n        String time3 = \"6月\";\n        Strategy strategyA = new ConcreteStrategyA();\n        context = new Context(strategyA);\n        context.taoPlatformShow(time3);\n  }   \n}</code></p><p></p><p></p><h2>3.2 结果输出</h2><p></p><p></p><p><code lang=\"text\">9月的促销策略是：\n99大促\n11月的促销策略是：\n双11大促\n6月的促销策略是：\n618大促</code></p><p></p><p></p><h2>3.3 UML图</h2><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/17/170a1b20f7352bc7d952f9a874470619.png\" /></p><p></p><p></p><h2>3.4 与简单工厂模式的区别</h2><p></p><p></p><p>从上面的代码示例及类图可以看出来，策略模式和上一篇文章中介绍的简单工厂模式很像，两者主要区别在于Context类和工厂类。为了方便对比，我们把这两个类的代码单独拎出来看看：</p><p></p><p><code lang=\"text\">public class Context_TaoPlatform{\n    //持有抽象策略的引用\n    private Strategy myStrategy;\n    //生成构造方法，让平台根据传入的参数（type）选择促销活动\n    public TaoPlatform(Strategy strategyType) {\n        this.myStrategy = strategyType;\n    }\n    //向用户展示促销活动\n    public void taoPlatformShow(String time) {\n        System.out.println(time + \"的促销策略是:\");\n        myStrategy.show();\n    }\n}</code></p><p></p><p><code lang=\"text\">public class Factory{\n    public static Shirt exhibit(String ShirtName){\n        switch(ShirtName){\n            case \"女款衬衫\":\n                return new WomenShirt();\n            case \"男款衬衫\":\n                return new MenShirt();\n            default:\n                return null;\n        }\n    }\n}</code></p><p></p><p>首先看一下接收参数：工厂类Factory中的exhibit()方法接收字符串，返回一个Shirt对象；环境类Context_TaoPlatform初始化时需要接收一个Strategy对象。也就是说：工厂类中是根据接收的条件创建一个相应的对象，而Context类接收的是一个对象，可以调用方法去执行此对象的方法。</p><p></p><p>举个例子：笔有很多种，假设有一个工厂专门负责生产不同用途的笔。</p><p></p><p>工厂模式：根据用户给出的目的来生产不同用途的笔，如：要写毛笔字就生产毛笔、要写钢笔字就生产钢笔。即根据用户给出的某种属性，生产能做出相应行为的一种对象返回给用户，重点在于创建何种对象。</p><p></p><p>策略模式：用工厂生产的笔去出做对应的行为，如：用毛笔写毛笔字、用钢笔写钢笔字。即根据用户给出的某种对象，执行相应的方法，重点在于选择何种行为。</p><p></p><p></p><h1>四、JDK源码赏析</h1><p></p><p></p><p>这里以Comparator比较器为例，通过分析其源码实现来深入理策略模式。</p><p></p><p>在JDK中，我们调用数组工具类Arrays的一个排序方法sort()时，可以使用默认的排序规则（升序），也可以自定义一种排序的规则，即自定义实现升序或降序的排序。源码如下：</p><p></p><p><code lang=\"text\">public class Arrays{\n    public static  void sort(T[] a, Comparator<!--? super T--> c) {\n        if (c == null) {\n            //若没有传入Comparator接口的实现类对象，调用默认的升序排序方法\n            sort(a);\n        } else {\n            if (LegacyMergeSort.userRequested)\n                //jdk5及之前的传统归并排序，新版本中LegacyMergeSort.userRequested默认false\n                legacyMergeSort(a, c);\n            else\n                //改进后的归并排序\n                TimSort.sort(a, 0, a.length, c, null, 0, 0);\n        }\n    }\n}</code></p><p></p><p>此时我们需要传入两个参数：一个是待排序的数组，另一个则是Comparator接口的实现类对象。其中，Comparator接口是一种函数式接口，该接口中定义了一个抽象方法int compare(T o1, T o2)，用于定义具体的排序规则。这里Comparator接口就是策略模式中的抽象策略接口，它定义了一个排序算法，而具体策略（具体的排序算法）将由用户来定义，那么Arrays就是一个环境类，sort() 方法可以传入一个策略c ，让Arrays根据这个策略进行排序任务。</p><p></p><p><code lang=\"text\">public class demo {\n    public static void main(String[] args) {\n​\n        Integer[] data = {12, 2, 3, 2, 4, 5, 1};\n        // 实现降序排序\n        Arrays.sort(data, new Comparator() {\n             // 排序策略 降序\n            public int compare(Integer o1, Integer o2) {\n                return o2 - o1;\n            }\n        });\n        System.out.println(Arrays.toString(data)); //[12, 5, 4, 3, 2, 2, 1]\n    }\n}</code></p><p></p><p>在上面这个测试类中，我们在调用Arrays.sort()方法时，第二个参数传递的是Comparator接口的子实现类对象。由此可见，Comparator充当的是抽象策略角色，而具体的子实现类充当的是具体策略角色，环境角色类  Arrays应该持有抽象策略的引用来调用。那么，Arrays.sort()方法究竟有没有使用Comparator子实现类中的compare()方法？下面再看看TimSort.sort()方法，源码如下：</p><p></p><p><code lang=\"text\">class TimSort {\n    static  void sort(T[] a, int lo, int hi, Comparator<!--? super T--> c,\n                         T[] work, int workBase, int workLen) {\n        assert c != null &amp;&amp; a != null &amp;&amp; lo &gt;= 0 &amp;&amp; lo &lt;= hi &amp;&amp; hi &lt;= a.length;\n​\n        int nRemaining  = hi - lo;\n        if (nRemaining &lt; 2)\n            return;  // Arrays of size 0 and 1 are always sorted\n​\n        // If array is small, do a \"mini-TimSort\" with no merges\n        if (nRemaining &lt; MIN_MERGE) {\n            int initRunLen = countRunAndMakeAscending(a, lo, hi, c);\n            binarySort(a, lo, hi, lo + initRunLen, c);\n            return;\n        }\n        ...\n    }   \n        \n    private static  int countRunAndMakeAscending(T[] a, int lo, int hi,Comparator<!--? super T--> c) {\n        assert lo &lt; hi;\n        int runHi = lo + 1;\n        if (runHi == hi)\n            return 1;\n​\n        // Find end of run, and reverse range if descending\n        if (c.compare(a[runHi++], a[lo]) &lt; 0) { // Descending\n            while (runHi &lt; hi &amp;&amp; c.compare(a[runHi], a[runHi - 1]) &lt; 0)\n                runHi++;\n            reverseRange(a, lo, runHi);\n        } else {                              // Ascending\n            while (runHi &lt; hi &amp;&amp; c.compare(a[runHi], a[runHi - 1]) &gt;= 0)\n                runHi++;\n        }\n        return runHi - lo;\n    }\n}</code></p><p></p><p>上面的代码最后会执行到countRunAndMakeAscending()方法中，在执行判断语句时调用了compare()方法。那么如果只用了compare()方法，在调用Arrays.sort()方法时只要传具体compare()重写方法的类对象。</p><p></p><p></p><h1>五、优缺点及适用场景</h1><p></p><p></p><p></p><h2>5.1 优点</h2><p></p><p></p><p>具体策略类之间可自由切换，由于具体策略类都实现同一个抽象策略接口，所以它们之间可以自由切换。支持“开闭原则”，扩展增加一个新策略时只需添加一个具体策略类即可，基本不需要改变原有的代码。避免使用多重条件选择语句（if else），充分体现面向对象设计思想。</p><p></p><p></p><h2>5.2 缺点</h2><p></p><p></p><p>客户端必须知道所有的具体策略类，并理解不同具体策略的区别、自行决定使用哪一个策略类。策略模式将产生很多具体策略类，在一定程度上增加了系统中类的个数（可通过使用享元模式在一定程度上减少对象数量）。</p><p></p><p></p><h2>5.3 适用场景</h2><p></p><p></p><p>一个系统需要动态地在几种算法中选择一种时，可将每个算法封装到具体策略类中。一个类定义了多种行为，并且这些行为在这个类的操作中以多个条件语句的形式出现，可将每个条件分支移入它们各自的策略类中以代替这些条件语句，就能避免使用难以维护的多重条件选择语句，并体现面向对象涉及的概念。系统中各算法彼此完全独立，且要求对客户隐藏具体算法的实现细节，提高算法的保密性与安全性。多个类只区别在表现行为不同，可以使用策略模式，在运行时动态选择具体要执行的行为。</p><p></p><p></p><h1>六、总结</h1><p></p><p></p><p>策略模式是一个比较容易理解和使用的设计模式，它仅封装算法，方便新算法插入系统中、老算法从系统中退休。本文在分析策略模式的缺点时提到，策略模式并不决定在何时使用何种算法，算法选择由客户端来决定，虽然这在一定程度上提高了系统的灵活性，但客户端需要理解所有具体策略类之间的区别，以便选择合适的算法，增加了客户端的使用难度。</p><p></p><p>策略模式和工厂模式有一定相似之处，在于它们的模式结构，因此有时候会让人混淆不清。实际上，这两者之间存在较多差异：工厂模式是创建型模式，作用是创建对象，它关注对象如何创建，主要解决的是资源的统一分发，将对象的创建完全独立出来，让对象的创建和具体的使用客户无关；策略模式是行为型模式，作用是让一个对象在许多行为中选择一种行为，它关注行为如何封装，通过定义策略族来实现策略的灵活切换与扩展，并让策略的变化独立于使用策略的客户。</p><p></p><p>另外，很多场景下策略模式和工厂模式可以结合使用，共同发挥优势起到相辅相成的作用。比如，策略模式的缺点之一是用户必须清楚所有的具体策略算法，这样具体策略难免暴露出去，并且要由上层模块初始化，这与迪米特法则相悖（最少知识原则），而上层模块和底层模之间的解耦，可以让工厂模式来完成。两者结合之后，对于上层模块而言不需要知道每种具体策略，只要通过Context就可以实现策略模式。</p>",
    "publish_time": "2023-06-01 11:34:34",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "用大模型自动做笔记、提取PPT、整理访谈，阿里云AI新产品“通义听悟”开放公测",
    "url": "https://www.infoq.cn/article/4cPPoYQh4LjQxQ2LG3P2",
    "summary": "<p>6月1日，阿里云宣布通义大模型进展，聚焦音视频内容的AI新品“通义听悟”正式上线，开放公测。公测期间，用户可领取100小时以上听悟免费转写时长。</p><p></p><p>继史无前例的大降价后，阿里云送出人人都能用上的AI“大礼包”。此前国内语音厂商AI转写定价达19.8元每小时，而听悟用户可通过每日登陆等多种任务领取免费转写时长。公测期间，阿里云官方微博、微信及各大平台社区还会发放大量20小时转写口令码，用户获得的福利权益可累加，一年内有效，免费时长可高达100小时以上，市场价值上千元。</p><p></p><p>据悉，通义听悟接入了通义千问大模型的理解与摘要能力，可成为用户工作学习中的得力AI助手，帮助随时随地高效完成对音视频内容的转写、检索、摘要和整理，比如用大模型自动做笔记、整理访谈、提取PPT等。</p><p>&nbsp;</p><p>“换一种方式，让音视频可以被轻松阅读、整理和分享。”阿里云CTO周靖人介绍，听悟是一款工作学习AI助手，它瞄准具有高知识附加值的音视频内容场景，比如开会、上课、访谈、培训、面试、直播、看视频、听播客等，能通过大模型等最新AI技术快速提炼和沉淀知识。&nbsp;&nbsp;&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6e/6e269340cdae42e9f79d59040c6ca661.png\" /></p><p></p><p>据悉，听悟融合了十多项AI功能，可以全面提升知识从音视频向图文形态转化的效率。除了“听力好”，能高准确度生成会议记录、区分不同发言人，这个AI助手“悟性也高”，大模型可以一秒给音视频划分章节并形成摘要、总结全文及每个发言人观点、整理关注重点和待办事项。大模型一键提取PPT、针对多个音视频内容向AI提问、概括特定段落等功能近期也将上线。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/41/41b1ea1eed6865d127861616b096d901.png\" /></p><p>通义听悟可自动为音视频生成全文摘要、章节概括、发言总结</p><p>&nbsp;</p><p>针对一些细分场景，听悟还设置了不少“宝藏功能”：打开Chrome插件，外语学习者和听障人士可以借助双语悬浮字幕条随时随地看无字幕视频，日程冲突时，听悟还可成为职场人士的“开会替身”，在静音情况下入会AI可代为记录会议、整理要点；转写结果可下载为字幕文件，方便新媒体从业者视频后期制作；听悟梳理的问答回顾可以让记者、分析师、律师、HR等群体整理访谈更高效。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/63/63cc804911ab4a5514effaf2a17078ce.png\" /></p><p>通义听悟Chrome插件将在近期对所有用户开放下载</p><p>&nbsp;</p><p>此外，听悟与阿里云盘打通，一键就能转写云盘上的音视频内容，公测期间注册的听悟用户后续还将获得更大的阿里云盘存储空间，在云盘内在线播放视频时也可自动出字幕。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/35/35581c4b0552ebc37aceb535cefc31bd.png\" /></p><p>通义听悟支持一键导入阿里云盘音视频文件</p><p>&nbsp;</p><p>周靖人介绍，听悟集成了阿里最先进的语音和语言技术。其内置阿里新一代工业级语音识别模型，识别准确率在多个权威中文数据集上名列第一；融合自研语音语义多模态说话人算法，能对10人以上说话场景进行角色区分；接入通义千问大模型后，能够对上万字的音视频内容进行摘要总结，事实准确与要点完备性国内领先，支持跨多音视频内容的精准问答理解。</p><p>&nbsp;</p><p>据了解，听悟除个人版本外，还有企业应用。此前，听悟企业版已在阿里集团内部被广泛使用，帮助减少了大量会议记录和整理的工作，受到好评。同时，听悟的能力也可嵌进各类音视频平台，形成实时字幕、智能摘要等，典型应用如钉钉的“钉闪记”背后便集成了听悟。未来听悟还将在夸克APP、阿里云盘等端口提供服务。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/7b/7b64431ec8ca1562311e7a5980f48a04.png\" /></p><p>“钉闪记”背后集成通义听悟</p>",
    "publish_time": "2023-06-01 11:36:50",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]