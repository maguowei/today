[
  {
    "title": "亚马逊Aurora支持PostgreSQL 14",
    "url": "https://www.infoq.cn/article/RLPcEcQQNxVTVRTXkhcT",
    "summary": "<p>最近，亚马逊宣布Aurora PostgreSQL支持PostgreSQL 14。新版本增加了性能改进和新功能，包括支持SCRAM加密机制。</p><p>&nbsp;</p><p>PostgreSQL 14包括对并行查询、高并发工作负载、分区表、逻辑复制和Vacuuming等方面的改进。14.3版本增加了一些新功能，比如在客户端断开连接时关闭空闲会话或取消长时间运行的查询。PostgreSQL 14的其他改进包括支持<a href=\"https://www.cybertec-postgresql.com/en/multiranges-in-postgresql-14/\">多范围</a>\"、可以表示非连续的数据范围，以及在存储过程中使用OUT参数返回数据。</p><p>&nbsp;</p><p>新的Aurora版本增加了对SCRAM加密机制的支持，这是默认密码加密算法MD5的一个替代方案。SCRAM也已经被移植到以前的Aurora PostgreSQL版本（10、11、12、13），亚马逊云科技建议在新的集群中使用SCRAM而不是MD5。</p><p>&nbsp;</p><p>Aurora PostgreSQL提供了连续备份、多达15个读副本、多区域复制以及在无服务器模式下运行的选项。按需自动伸缩配置已在去年4月推出，现在与PostgreSQL 14也兼容。</p><p>&nbsp;</p><p>现有的集群可以升级到PostgreSQL 14。后续的小版本升级可以在不停机的情况下进行，因为亚马逊最近发布了<a href=\"https://aws.amazon.com/it/about-aws/whats-new/2022/06/amazon-aurora-postgresql-compatible-edition-supports-zero-downtime-patching/\">零停机补丁</a>\"（ZDP），可以在数据库重启时保留客户端连接。</p><p>&nbsp;</p><p>社区中最初对选择14.3版本有一些担忧，不过亚马逊从14.4中反向移植了一些最新的修复，包括针对CONCURRENTLY问题的修复。为了简化发布过程，Aurora的主要版本和次要版本将和PostgreSQL社区版本保持一致，并加入第三个数字表示补丁。</p><p>&nbsp;</p><p>亚马逊云科技首席应用科学家Murat Demirbas最近写了一篇关于亚马逊Aurora解耦架构的文章。这个高吞吐量的云原生关系数据库的新版本包括Babelfish for Aurora PostgreSQL 2.1的新特性，支持在PostgreSQL上运行Microsoft SQL Server应用程序。14.3是自2021年初推出这项托管服务以来的第三个主要版本：Aurora在去年引入了对PostgreSQL 12和PostgreSQL 13的支持，发布周期明显比MySQL版本短。</p><p>&nbsp;</p><p>亚马逊Aurora并不是第一个兼容PostgreSQL 14的托管服务：亚马逊RDS也支持它，其他供应商也已经添加了支持，包括Azure Flexible Server PostgreSQL和Azure Hyperscale（Citus）。</p><p>&nbsp;</p><p>PostgreSQL 14在Aurora支持的所有地区都可用，引擎版本之间没有价格差异。</p><p>&nbsp;</p><p>原文链接：<a href=\"https://www.infoq.com/news/2022/07/amazon-aurora-postgresql-14/\">Amazon Aurora Supports PostgreSQL 14</a>\"</p>",
    "publish_time": "2022-07-20 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "中国程序员平均薪酬23790美元，上榜全球开发者薪酬最低国家名单",
    "url": "https://www.infoq.cn/article/zIl5JYDhBlwwzAmZZaaA",
    "summary": "<p></p><p>纵观美国、欧盟、印度等国家和地区的平均开发者薪酬，可以在一定程度上反映软件工程类职位在各发达及发展中国家当前的发展情况。</p><p></p><h2>哪个国家的软件工程师收入最高？</h2><p></p><p>哪个国家的软件工程师收入最高？美国位列榜首，以色列和其他几个欧洲国家则紧随其后。</p><p></p><h2>薪酬榜单前三位：美国、瑞士、以色列</h2><p></p><p>丹麦、加拿大和挪威紧随其后，同样位列前十的还有澳大利亚、英国、德国和瑞典。</p><p></p><p></p><p></p><h2>各国软件工程平均薪酬</h2><p></p><p>那么纵观全球，软件工程师的平均薪酬又是什么水平？</p><p></p><p>软件工程师薪酬最高的是美国、以色列和几个欧洲国家。但具体岗位在同一国家内，往往也存在着很大差异，毕竟大城市的开发公司开出的报酬往往要比偏远地区高得多。</p><p></p><p>下面来看本次调查中岗位收入最高的几个国家：</p><p></p><p></p><p></p><p>那世界其他地区情况如何？哪些国家的软件工程师薪酬最低？</p><p></p><p>以下是开发者薪酬最低的各国家/地区榜单。</p><p></p><p>如大家所见，像尼日利亚这样的发展中国家薪酬最低，平均年薪仅为 7255 美元。作为西方企业的技术外包大户，印度的软件工程平均年薪也仅为 7725 美元。东欧国家的开发者工资同样远不及西方同行：在波兰，开发者的平均年收入为 22740 美元，乌克兰则为 22348 美元。中国开发者平均薪酬为 23790 美元。</p><p></p><p></p><p></p><h2>哪个国家对软件工程师需求最大？</h2><p></p><p>总体来看，软件开发已经成为全球范围内最受欢迎的职业。</p><p></p><p>根据 PageGroup 公布的数据，目前对软件开发者需求最旺的国家是加拿大、澳大利亚、俄罗斯、瑞典和新西兰。由于这些国家的开发者供求严重失衡，因此薪酬也往往更高。</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/22/22d6fd9acc2483dc5fedab8967f01a6e.png\" /></p><p></p><p></p><h2>美国软件工程平均薪酬</h2><p></p><p>美国软件开发者的平均薪酬为每年 110140 美元，折合月薪 9178 美元。初级开发者的平均工资为每年 69354 美元，折合月薪 5779 美元。另一方面，高级开发者的平均年薪则高达 104188 美元，折合月薪 8682 美元。</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c3/c371697dd18d1fec746a181797ee8c27.png\" /></p><p></p><p></p><p>数据来源：美国劳工统计局</p><p></p><p>可以看到，美国的软件工程岗位薪酬同样呈现出巨大分化，旧金山湾区的夸张工资显著提高了全国平均水平。</p><p></p><p>各州和城市之间往往待遇差距极大，以下为美国软件工程薪酬最高的州和城市：</p><p></p><h3>美国各州软件工程薪酬水平</h3><p></p><p>不出所料，加利福尼亚州成为软件工程师薪酬最高的州，平均年薪高达 146770 美元；华盛顿州排名第二，马里兰州则位列第三。</p><p></p><p></p><p></p><h3>美国各城市软件工程薪酬水平</h3><p></p><p>美国软件工程薪酬最高的城市包括圣何塞（167420 美元）、旧金山（158320 美元）和西雅图（148200 美元）。 有趣的是，相当一部分非超大型城市给出的待遇也相差不大，例如在佛蒙特州南部和俄勒冈州东部的非大都市区，软件开发者仍然能够拿到 133050 美元和 125310 美元的年薪。</p><p></p><p>大都市工资水平</p><p></p><p></p><p></p><p>收入最高的非大都市区</p><p></p><p></p><p></p><h3>美国各编程语言对应的软件工程薪酬</h3><p></p><p>如果按编程语言来划分，那么其中某些语言对应的薪酬明显比其他语言更高。Go 和 Python 在后端语言的人气榜中名列前茅，但请注意，这里所指的仅是平均薪酬。根据开发者的所在地区的不同，工资可能也会存在巨大差异。</p><p></p><p>Go 成为薪酬最高的语言，平均年薪为 120577 美元。Ruby 位列第二，平均年薪为 119558 美元。Python 平均年薪为 114904 美元。Java 平均年薪为 112013 美元。JavaScript 开发者在美国一般能拿到 111922 美元年薪。Android 开发者的平均年薪为 109377 美元。iOS 开发者的平均年薪略低于 Android，为 108783 美元。Rust 紧随其后，年薪为 108744 美元。C 语言平均年薪为 101734 美元。PHP 平均年薪为 92867 美元。在各语言中，SQL 的平均年薪最低，仅为 85845 美元。</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/26/26bc0fc17ad768c16b044461131c3393.jpeg\" /></p><p></p><p></p><h3>美国不同软件工程职位对应的薪酬水平</h3><p></p><p>具体职位对于技术人才的年薪也有很大影响。软件开发者的平均年薪为 110140 美元，而程序员的平均年薪则为 105310 美元。</p><p>软件开发者及软件质量保证分析师/测试人员的平均薪酬为 110140 美元。软件与 Web 开发者、程序员及测试人员紧随其后，为 105310 美元。计算机类职业的整体平均年薪为 91250 美元。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f2/f25bc4e639150ee8bf1f22efa878b519.png\" /></p><p></p><p>数据来源：美国劳工统计局</p><p></p><h2>欧洲软件工程平均薪酬水平</h2><p></p><p>那么欧洲软件开发者的平均薪酬是个什么水平？虽然不及美国，但良好的社会福利和生活成本往往能够抵消大部分收入差异。</p><p></p><p>总体来看，东欧与西欧国家的收入水平存在很大区别。西欧开发者的年收入至少在 40000 美元以上，而东欧开发者的期望收入仅高于 20000 美元。南区开发者的薪酬同样低于北欧开发者，西班牙、意大利、葡萄牙和希腊的开发者预期年薪约在 21314 美元至 36323 美元之间。</p><p></p><p></p><p></p><h2>瑞士软件工程平均薪酬水平</h2><p></p><p>瑞士软件开发者的平均年薪为 97518 美元，折合月薪 8126 美元。</p><p></p><p>瑞士初级软件开发者的平均年薪为 89643 美元，折合月薪 7470 美元。高级软件开发者的平均年薪为 127693 美元，折合月薪 10641 美元。</p><p></p><p>一般来看，身在大城市的开发者拿到的年薪往往更高。在瑞士，苏黎世的开发者平均年薪为 110123 美元，折合月薪 9176 美元。</p><p></p><p>按编程语言来划分，薪酬水平同样有所区别：</p><p>在瑞士，SQL 开发者的年薪最高，为 108868 美元。Golang 平均年薪为 108827 美元。Rust 位列第三，平均年薪可达 108308 美元。Android 开发的平均年薪为 104256 美元。Python 开发者的平均年薪为 100315 美元。iOS 开发者的平均年薪为 96161 美元。Ruby 开发者平均年薪为 93280 美元。Java 开发者的平均年薪为 91706 美元。PHP 开发者的平均年薪为 88131 美元。在瑞士，JavaScript 开发者的平均年薪为 80285 美元。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/be/e7/be3dcc814b3d2231318d7eb299b297e7.jpg\" /></p><p></p><p></p><p></p><h3>英国软件工程平均薪酬水平</h3><p></p><p></p><p>英国开发者的平均年薪为 55275 美元，折合月薪 4606 美元。</p><p></p><p>但伦敦的软件开发者生活要滋润得多，年薪快速上扬至 73993 美元，折合月薪 6166 美元。</p><p></p><p>英国初级软件开发者的平均年薪为 38644 美元，折合月薪 3222 美元。高级开发者的平均年薪为 77603 美元，折合月薪 6466 美元。</p><p></p><p>英国开发者的收入同样因编程语言而异。例如，Ruby 开发者的平均年薪就远高于 PHP 和 SQL。</p><p>在英国，Ruby 开发者的平均年薪为 85354 美元。Golang 开发者的平均年薪为 79726 美元，Rust 则为 73593 美元。iOS 开发者的平均年薪为 73147 美元。Python 开发者的平均年薪为 67570 美元。Java 开发者的平均年薪为 46774 美元。Android 开发者的平均年薪为 44112 美元。JavaScript 开发者的平均年薪为 42924 美元。SQL 开发者的平均年薪在榜单中居末，为 39973 美元；PHP 开发者则年薪垫底，仅为36832美元。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/c0/5b/c03cc1b56d6fcc85edc773e8e272825b.jpg\" /></p><p></p><p></p><h3>德国软件工程平均薪水平</h3><p></p><p></p><p>德国软件开发者的平均年薪为 52913 美元，折合月薪 4409 美元。</p><p></p><p>初级开发者的的平均年薪为 51188 美元，折合月薪 4265 美元。高级开发者的平均年薪为 78194 美元，折合月薪 6516 美元。</p><p></p><p>同样的，德国各城市间的软件开发薪酬也有很大区别。柏林的软件开发者年薪一般可达到 65524 美元，而慕尼黑工资水平更高，每年可达 66880 美元。</p><p></p><p>至于按编程语言划分，德国薪酬最高的语言为 Golang 和 Ruby，对应的年薪分别为 65533 美元和 63616 美元。</p><p>Golang 开发者的平均年薪为 65533 美元，Ruby 则为 63616 美元。Rust 开发者的平均年薪位列第三，为 62827 美元。iOS 开发者的平均年薪为 62586 美元。PHP 开发者的平均年薪为 59020 美元。Android 开发者的平均年薪为 56572 美元。在德国，SQL 开发者的平均年薪为 56391 美元。JavaScript 开发者的平均年薪为 55000 美元，Python 开发者年薪则为 52535 美元。位列榜单最末的为 Java，开发者平均年薪为 52404 美元。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/82/b5/8259aeded1283eb73793c59382c954b5.jpg\" /></p><p></p><p></p><h2>法国软件工程平均薪酬水平</h2><p></p><p>在法国，软件开发者的平均年薪为 43849 美元，折合月薪 3654 美元。</p><p></p><p>高级开发者的年薪为 59024 美元，折合月薪 4918 美元。初级开发者的平均年薪为 36523 美元，折合月薪 3043 美元。在巴黎，软件开发者的平均年薪为 50693 美元。</p><p></p><p>按编程语言划分，Golang 成为对应年薪最高的语言，为 50622 美元。Ruby 位列第二，排在最末的则是 PHP 和 Java。</p><p>Golang 语言的平均年薪一马当先，为 50622 美元。Ruby 开发者的平均年薪为 48581 美元。SQL 开发者的平均年薪为 47619 美元。Python 位列第四，开发者的平均年薪为 46964 美元。JavaScript 开发者的平均年薪为 45644 美元。iOS 开发者的平均年薪略高于 Android，为 43501 美元；Android 开发者则为 42020 美元。PHP 开发者的平均年薪为 40566 美元，Java 位列最末，为 40160 美元。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b5/b5d2b28f31ecb83fad1c2110e1c8e0ed.jpeg\" /></p><p></p><p></p><h2>其他高收入国家的平均薪酬</h2><p></p><p>下面，我们结合当地生活成本，看看软件开发者们在其他高收入国家过得怎么样：</p><p></p><h3>以色列软件工程平均薪酬水平</h3><p></p><p>在以色列，软件开发者的平均年薪为 71559 美元，折合月薪 5963 美元。初级开发者年薪为 69851 美元，折合月薪 5820 美元；高级开发者平均年薪则为 114751 美元，折合月薪 9562 美元。特拉维夫的软件开发者，一般能够拿到 90788 美元年薪，折合月薪 7565 美元。</p><p></p><p>按编程语言划分，Golang 和 Python 分别凭借 109702 美元与 83369 美元的年薪名列前茅。PHP 对应年薪较低，而且令人意外的是 Ruby 在以色列也不怎么吃香，分别为 64573 美元和 64525 美元。</p><p>Golang 开发者的平均年薪为 109702 美元。Python 开发者的平均年薪为 83369 美元。移动开发者在榜单中占得第三与第四，Android 开发者的平均年薪为 78558 美元，iOS 开发者的平均年薪则为 76692 美元。Java 开发者的平均年薪为 74251 美元。JavaScript 开发者的平均年薪为 72028 美元。在以色列，SQL 开发者的平均年薪为 65770 美元。在以色列，PHP 和 Ruby 成为平均年薪最低的编程语言，分别为 64573 美元和64525美元和 64525 美元。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a2/a218dcff6c3c7da6cae3209c24999e95.jpeg\" /></p><p></p><p></p><h3>日本软件工程平均薪酬水平</h3><p></p><p>在日本，开发者的平均年薪为 36024 美元，折合月薪 3002 美元。东京的软件开发者平均薪酬略高，年薪可达 45552 美元，折合月薪 3796 美元。初级开发者年薪为 26553 美元，折合月薪 2212 美元。高级软件开发者的平均年薪则为 53773 美元，折合月薪 4481 美元。</p><p></p><p>按编程语言划分，iOS 开发者的平均年薪最高，Ruby 位居第二。SQL 和 Java 则成为日本国内收入最低的两种语言。</p><p>iOS 开发者的平均年薪为 72194 美元，在榜单中一马当先。Ruby 开发者的平均年薪为 53128 美元，Golang 开发者的平均年薪则为 51652 美元。在日本，Android 开发者的平均年薪为 38730 美元。Python 开发者的平均年薪为 36021 美元，JavaScript 开发者的平均年薪则为 33859 美元。PHP 开发者的平均年薪为 33625 美元。SQL 与 Java 开发者的平均年薪位列最末，分别为 31815 美元与 23623 美元。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/93/a3/93ccb9d752227e4aac13605535caf2a3.jpg\" /></p><p></p><p></p><h3>印度软件工程平均薪酬水平</h3><p></p><p>印度软件开发者的平均年薪为 7725 美元，折合月薪 643 美元。新德里的开发者工资略高，年薪为 10211 美元，折合月薪 851 美元。初级开发者的平均年薪为 5488 美元，折合月薪 457 美元。而高级开发者的平均年薪为 11999 美元，折合月薪 1000 美元。</p><p></p><p>Ruby 是印度最受欢迎的编程语言，平均年薪可达 12372 美元。Android 开发者则年薪垫底，仅为 5181 美元。完整列表如下：</p><p>Ruby 在印度成为最受欢迎的编程语言，开发者的平均年薪为 12372 美元。Golang 在榜单中位列第二，开发者的平均年薪为 10446 美元。Java 开发者的平均年薪为 9519 美元。iOS 开发者的平均年薪为 8577 美元。JavaScript 开发者的平均年薪为 8429 美元。Python 开发者的平均年薪为 7506 美元，PHP 开发者的平均年薪则为 3717 美元。SQL 开发者的平均年薪为 5688 美元。在印度，Android 开发者的平均年薪为 5181 美元，成为本次榜单中排名最末的语言。</p><p><img src=\"https://static001.infoq.cn/resource/image/d6/62/d6fca8bd546d43b4d2e59b41e9bd9e62.jpg\" /></p><p></p><p></p><p></p><p></p><h3>菲律宾软件工程平均薪酬水平</h3><p></p><p></p><p>在菲律宾，软件开发者的平均年薪为 7936 美元，折合月薪 661 美元。初级开发者年薪为 5256 美元，折合月薪为 438 美元。高级软件开发者的平均年薪则可达到 13164 美元，折合月薪 1097 美元。在马尼拉，平均工资更高一些，年薪可达 8772 美元、折合月薪 731 美元。</p><p></p><p>按编程语言划分，菲律宾对 Java 最是青眼有加，平均年薪为 10833 美元。iOS 开发者的平均年薪最低，仅为 3059 美元。</p><p>Java 在菲律宾最受欢迎，开发者的平均年薪为 10833 美元。Golang 开发者的平均年薪位列第二，为 9928 美元。在菲律宾，Python 开发者的平均年薪为 8888 美元。PHP 开发者的平均年薪为 8748 美元。Ruby 开发者的平均年薪为 6742 美元。SQL 开发者的平均年薪为 6698 美元。Android 开发者的平均年薪为 6338 美元。JavaScript 开发者的平均年薪为 5409 美元，iOS 开发者则为 3059 美元，位列榜单最末两位。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/56/5b/569e61f7514ea8e31faf7b80ce36yy5b.jpg\" /></p><p></p><p></p><p></p><h4>尼日利亚软件工程平均薪酬水平</h4><p></p><p>尼日利亚软件开发者的平均年薪为 7255 美元。其中初级开发者的平均年薪为 1453 美元，折合月薪 121 美元。高级软件开发者年薪则可达到 14182 美元，折合月薪 1181 美元。</p><p></p><p>有趣的是，首都阿布贾的开发者收入反而略低于全国平均水平，年薪为 5808 美元，折合月薪 484 美元。</p><p></p><p>按编程语言划分，Ruby 开发者的平均年薪最高，为 12110 美元；而 PHP 与 JavaScript 开发者的年薪则排在最末。</p><p>在尼日利亚，Ruby 开发者的平均年薪为 12110 美元。Golang 开发者的平均年薪为 7266 美元。Python 开发者的平均年薪为 7225 美元，SQL 开发者的平均年薪则为 5650 美元。iOS 开发者的平均年薪为 4844 美元。Java 开发者的平均年薪为 4640 美元。Android 与 PHP 开发者的平均年薪分别为 3875 美元和 3482 美元。JavaScript 开发者的平均年薪为 2830 美元。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/87/87e2804b4e5b94ed63a981beec1342ee.jpeg\" /></p><p></p><p></p><h2>全球各城市软件工程平均薪酬水平</h2><p></p><p>放眼全球不同城市，美国各市在软件工程师薪酬方面可谓一骑绝尘。圣何塞又是美国本土开发者收入最高的城市，平均年薪高达 167420 美元。旧金山紧随其后，为 158320 美元。在本次比较中，尼日利亚阿布贾的软件开发者薪酬最低，仅为 5808 美元。下面来看我们整理出的各城市薪酬摘要：</p><p>圣何塞平均薪酬最高，为 167420 美元。旧金山紧随其后，软件开发者在这里的预期年薪可达 158320 美元。华盛顿州西雅图市平均年薪为 148200 美元，排名第三。马里兰州巴尔的摩以 137510 美元排名第四。圣克鲁斯也汇聚着众多高薪开发人才，这里软件者的平均年薪为 134680 美元。华盛顿特区排名第五，平均年薪为 133850 美元。纽约排名第六，开发者平均年薪为 133620 美元。加利福尼亚州圣迭戈排名第七，平均年薪为 133580 美元。加州纳帕市位列第八，平均年薪为 131930 美元。加州萨克拉门托开发者也能拿到 130690 美元的平均年薪。瑞士苏黎世排名第十，软件开发者的平均年薪为 110123 美元。特拉维夫的开发者同样幸福感爆表，平均年薪可达 90788 美元。在伦敦，软件开发者平均年薪为 73993 美元。慕尼黑的软件开发者薪酬略胜柏林一筹，平均年薪为 66880 美元；柏林方面则为 65524 美元。东京的软件开发者平均年薪为 45552 美元。到了新德里，情况急转直下，软件开发者的平均年薪仅为 10211 美元。在菲律宾的马尼拉，软件开发者的平均年薪为 8772 美元。到尼日利亚的阿布贾，开发者的平均年薪只有可怜的 5808 美元。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4c/4cf8e04449c9e70ef7d1ed3691fee905.jpeg\" /></p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/70/7029d71282a1f307dee023375c88b1c7.jpeg\" /></p><p></p><p></p><h2>各编程语言平均薪酬水平</h2><p></p><p>那么，哪种编程语言的总体薪酬最高？下面来看按语言划分的软件工程师平均年薪。Golang 和 Ruby 总体占据优势，而 JavaScript 和 PHP 则市场表现疲软。</p><p></p><p>在我们的比较中，各编程语言十国平均薪酬汇总为：</p><p></p><p></p><p></p><h3>Golang</h3><p></p><p></p><p></p><h3>Ruby</h3><p></p><p></p><p></p><h3>Python</h3><p></p><p></p><p></p><h3>Java</h3><p></p><p></p><p></p><h3>JavaScript</h3><p></p><p></p><p></p><h3>Android</h3><p></p><p></p><p></p><h3>iOS</h3><p></p><p></p><p></p><h3>SQL</h3><p></p><p></p><p></p><h3>PHP</h3><p></p><p></p><p></p><h2>各国初级软件工程师平均薪酬水平</h2><p></p><p>纵观各国初级软件工程师的平均薪酬，我们发现一些原本整体工资较高的国家，排名反而有所下滑。例如，美国在这份榜单中仅位列第三，而瑞士和以色列一举反超。德国的初级软件开发者薪酬高于英国、法国和日本，而尼日利亚的初级开发者年薪也超越了印度和菲律宾。</p><p></p><p></p><p></p><h2>各国高级软件工程师平均薪酬水平</h2><p></p><p>那高级软件开发者的待遇如何？以下是按国家划分的高级软件开发者平均年薪。</p><p></p><p>瑞士再次位居榜首，以色列排名第二，美国排名第三。德国高级开发者收入略高于英国，而英国的高级软件工程师又高于法国和日本。在发展中国家中，尼日利亚处于相对领先，而印度则排在最后。</p><p></p><p></p><p></p><h2>结 语</h2><p></p><p>到这里，我们就了解了世界各国软件工程师们的平均收入水平。</p><p></p><p>如大家所见，各国的软件开发者之间存在着巨大的收入差异。但结合当地生活成本来看，软件开发仍是当今世界最炙手可热、最能创造财富的职业之一。</p><p></p><p>原文链接：</p><p></p><p>https://codesubmit.io/blog/software-engineer-salary-by-country/</p>",
    "publish_time": "2022-07-20 09:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "开源大佬从谷歌离职：在Go语言项目上停滞不前，要去更小的企业寻求变革",
    "url": "https://www.infoq.cn/article/D0yXCPMBfUm9hTfRu8o0",
    "summary": "<p></p><p>编译｜核子可乐，燕珊</p><p></p><p>当地时间7月18日，谷歌 Go 语言项目负责人 Steve Francia <a href=\"https://spf13.com/p/spf13-google/\">宣布</a>\"辞去职务。 Steve Francia 在圈内名气很高，他既曾是知名开源项目 Docker 和 MongoDB 的核心负责人，另外还是spf13-vim、Hugo、Cobra、Viper等开源项目的作者。</p><p></p><p>Steve Francia 在 2016 年 9 月宣布加入 G他曾带领MongoDB、Docker走向辉煌，并且是Hugo、Cobra、Viper 和 spf13-vim 等开源项目的作者。o 团队，至今已有 6 年，这次决定离职是因为感到自己在 Go 项目上“停滞不前”，已经很久没有学习，所以接下来他要把精力放在数据科学和机器学习领域，并选择加盟美国对冲基金投资公司 Two Sigma。Two Sigma以使用包括人工智能、机器学习、分布式计算等多种科技方法管理投资策略著称。</p><p></p><p>从 TIOBE Index 对 Go 语言的使用情况统计来看，Go 语言近几年的发展是比较稳定的。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/77/775db8ba7e41d9021c159a3b6873b688.png\" /></p><p></p><p>在 Francia 加入团队的时候， Go 语言仍是个小众语言，经过这几年的发展，目前已经能跻身主流企业级语言的阵营。根据 StackOverflow 2022 年度开发者调查，不管是最受欢迎语言还是高薪语言排行榜中，Go 均名列前十。</p><p></p><p>Francia 擅长运营开源项目，在加入 Go 团队之前，他先后在 MongoDB 和 Docker 工作。期间，MongoDB 从一个默默无闻的 30 人创业公司成长为世界上最受欢迎的数据库之一。离开MongoDB 后，Francia 又留意到 Docker，于是便加入进来并负责其战略和运营，帮助指导 Docker 参与到 OCI（容器运行时标准）和 CNCF （云原生计算基金会）生态。</p><p></p><p>离开 Go 之后，Francia 仍会在数据科学和机器学习领域探索开源合作机会。Francia 强调，他对 Go 团队过去 6 年来取得的种种成就感到自豪，也对 Go 语言的未来充满期待。如果想要进一步了解 Francia 离开的原因、接下来要做什么、在谷歌的时光里他最怀念什么，不妨来看看他的自述，以下内容摘自 Francia 所写的博文：</p><p></p><h4>Go：我这十年的热情所系</h4><p></p><p>十年之前，我第一次接触Go，并立刻爱上了这种简单而优雅的语言。Go让我再次找回了当初学习编程时的热情，于是我不顾一切地使用Go，并慢慢建立起Hugo、Cobra、Viper等多个工具库。</p><p></p><p>这份热情也驱使我加入到Go社区。我曾经在第一届Gophercon、第一届Gotham Go和第一届Gopherfest大会上发言。我还记得Gophercon首届大会的前夜，我跟Bill Kennedy坐在房间里，把所有的袋子堆放到Erik和Brian脚下。而在第二届Gophercon会前，Brian和Erik又邀请我跟Mark Bates一起主持圆桌。我们很快就成了亲密好友，并一起参与和主持了接下来的几场Gotham Go和Gophercons大会。</p><p></p><p>凭借这段经历，我跟Go团队的几位成员有了点交情，最终也给自己争取到了加入其中的机会。</p><p></p><h4>Go语言进军主流企业应用</h4><p></p><p>我加入Go团队的时间是六年前，当时的想法就是把Go从小众语言打造成主流企业级语言。现在回头看看，我们应该是完成、甚至超越了这个既定目标。</p><p></p><p>刚加入Go团队的时候，大家的主要关注点和路线图集中在解决谷歌内部用户的需求上。我则认为应当解决全球用户群体的当前及未来需求。在达成共识之后，大家开始着力发现并解决Go语言在开发者体验方面的短板。</p><p></p><p>我参与的第一个项目就体现出了这种侧重点的变化。在我的主导下，Go团队决定推进两年一次的Go用户调查，这是目前全球规模最大的开发者调查之一。过去六年以来，这项调查给Go发展路线图带来了巨大的推动作用。来自用户的直接反馈，让团队决定在Go语言中添加模块和泛型，旨在解决Go在企业应用中的两大核心障碍。</p><p></p><p>根据企业用户的反馈，我们对Go品牌也进行了重大更新。于是Go.dev正式发布，成为所有Go网络资产的集中平台，涵盖30多个案例研究、重要用例、学习中心和Go工具包发现门户等。</p><p></p><p>我们还交付了VSCode Go和Gopls，显著改善了Go开发者的使用体验。我们根据Go用户确定的用例改进了说明文档和语言教程，完善了Go的安装流程，并建立起Go工作区以推进多个模块项目。</p><p></p><p>为了顺利进军全球，我们开始积极接纳世界各地的社区和贡献者。我们尽力把 Go 推向尽可能多的国家/地区，包括中国，并先后举办了多场开发者研讨会。Go项目也由此从谷歌员工主导，变成了由社区贡献者主导。为了持续改进，我们也对Go项目的行为准则做出调整，确保Go社区始终保持热情和友好。我们在50多个国家/地区，建立起由近200场会议维系的庞大的Go开发者网络。</p><p></p><p>过去六年中，Go用户的整体规模增长了约10倍，用户使用频率也从偶尔使用变成日常使用。如今，Go已经被广泛视为一种主流企业级语言。另外，Go也成为一种强有力的云计算语言，有超过四分之三的CNCF项目是用Go编写的。</p><p></p><p>我有幸在协助团队和社区方面发挥了一点作用，也见证了大家如何通过不懈努力一步步推动Go获得了如今的江湖地位。</p><p></p><h4>为何选择离开</h4><p></p><p>既然有这么多精彩而美好的回忆，我为什么又选择离去？其实随着之前几个Go版本的发布，想要离去的感觉也变得愈发强烈。在当初刚刚加入时，我疯狂消化着谷歌和Go带来的知识盛宴。但如今，我很久没有学习新东西了。虽然我仍然喜欢团队和当前手上的工作，可这种停滞不前的感觉实在让人难以接受。</p><p></p><p>随着具有里程碑意义的Go 1.18版本的发布，我感到自己在Go团队的使命已经完成。我想要探索人生的下一阶段该往何处去，所以我列出了一份简短的清单，希望自己的下一个选择能够：</p><p></p><p>继续与杰出的队友合作继续和善良的队友合作获得学习新技能的机会开辟新的行业道路在数据科学和机器学习领域探索开源合作机会在相对较小的企业中任职，可以进行一些变革经过几个月的找寻，我相信自己发现了能够满足以上所有要求的新职位。</p><p></p><h4>答案：Two Sigma</h4><p></p><p>回顾整个职业生涯，我有幸能站在众多行业的创新前沿。我领导的团队为MongoDB设计出开创性的用户体验，我曾带领Docker的核心工程团队，开发出全球领先的静态网站生成器Hugo，又打造出促成CLI应用程序复兴的流行框架Cobra。在Go语言之后，我将把精力集中在数据科学和机器学习身上。</p><p></p><p>最终，我找到了自己的新归宿——Two Sigma。过去二十年来，他们一直身处数据科学、分布式计算和机器学习创新的最前沿，并对开源进行了深入投资。</p><p></p><p>通过与Matt Greenwood、David Palaitis、Jason Bigler及Two Sigma的其他几位同事的交流，我感受到了他们推动机器学习和数据科学向前发展的潜力。也许我将再一次站在又一轮范式转变的最前沿，这也让我有了当初刚刚接触MongoDB、Docker和Go时的兴奋和热情。</p><p></p><p>参考链接：</p><p><a href=\"https://spf13.com/p/spf13-google/\">https://spf13.com/p/spf13-google/</a>\"</p><p><a href=\"https://spf13.com/p/im-joining-the-go-team-at-google/\">https://spf13.com/p/im-joining-the-go-team-at-google/</a>\"</p><p></p><p>延展阅读：<a href=\"https://www.infoq.cn/article/eMLshYbKJTEIEiMVzwBJ\">《解读 Go 语言的 2021：稳定为王》</a>\"</p>",
    "publish_time": "2022-07-20 15:53:27",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "好大夫APP离线消息推送系统演进之路",
    "url": "https://www.infoq.cn/article/ZQItMitRldI4QXQTOCNa",
    "summary": "<p></p><h2>一、背景</h2><p></p><p></p><p>移动互联网蓬勃发展的今天，大部分手机 APP 都提供了消息推送功能，推送技术将传统靠“主动拉\"获取信息的方式变成了信息主动寻找用户的方式，这更适合在移动网络中满足用户个性化信息的需求。好大夫APP推送功能主要应用于医患交流和订阅类关系的消息通知场景，基于医患交流的特殊性，用户更加看重消息的送达率和即时性。所以，<a href=\"https://www.infoq.cn/article/EC81WU3BXLS77zxLRxVV\">好大夫</a>\"离线消息推送系统的演进之路，其实质就是通过建设稳定、高效的消息推送系统，不断提升和保障推送服务的可用性和推送消息的送达率。</p><p></p><h2>二、系统高可用性建设之路</h2><p></p><p></p><h3>1、服务雏形 -- 推送工具</h3><p></p><p></p><p>我们常说的一个词叫做：“迭代”，通常叫做“小步试错，快速迭代”，这正好也与好大夫离线消息推送系统的演化过程相对应。在初始阶段，推送服务也是本着“先完成，再完美”的实践原则落地。</p><p></p><p>最初，消息推送只是简单得被视为一个通知类工具，在医患交流过程中提醒接收方查看新的讯息，工作流程大致如下图所示：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b9/b9733d8666b918eb2ac009d084da7838.png\" /></p><p></p><p>初代推送服务也是为满足上述需求而设计，由PHP语言实现，推送<a href=\"https://www.infoq.cn/article/ZESNdLWpvj8gWf0hdrJA\">架构</a>\"设计非常简单，如图：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/65/65581b083bceef7489054a40550cc192.png\" /></p><p></p><p>如果我们以面向功能实现的角度看待上面设计，那么足以实现当时业务的需求。但随着好大夫业务的发展及对服务质量要求的不断提升，尤其近年来，医生问诊线上服务的回复效率成为衡量医生服务质量的关键性指标之一，患者对医生的回复更是满怀期待，所以，消息提醒服务的稳定性及可靠性越来越被医生和患者所看重，在如此背景下，上面简易的推送设计其中隐藏的诸多问题便随之暴露无遗，引发用户大量投诉。</p><p></p><p>随着各类投诉问题纷至沓来，同时在生产实践中，我们也发现很多需要改善的地方，大概汇总如下：</p><p></p><p>API接口调用失败时消息无重试机制，会导致该条消息丢失iOS证书每年都需定期更新，且线上线下配置不一致，每次更换都需投入开发和测试资源“个推服务”不支持离线推送(注：当时不支持)，导致安卓用户接收推送消息体验极差安卓机型众多，某些机型数字角标功能未进行适配，用户体验较差线上线下用户数据隔离性较差，测试消息偶尔被误发到线上用户PHP环境稳定性问题、测试调试问题等推送没有配置消息回执，消息是否真正触达用户客户端，无从感知无消息统计，每日推送下发量，各业务推送使用情况，推送消息到达率、点击率一概不知服务没有配备相关的监控告警，服务故障无法即时介入，及时止损缺乏数据支撑，消息推送问题排查困难，用户投诉问题处理起来相当棘手... ...</p><p></p><p>等等以上问题亟待解决，这在当时那个阶段是我们不得不面对的挑战，为彻底解决上述问题，我们下定决心将推送服务进行重构。</p><p></p><p>当然，这部分内容仅作为经验之谈和对过去的总结，也是希望诸位读者能够避而远之。</p><p></p><h3>2、服务进化 -- 推送系统</h3><p></p><p></p><h4>2.1 需求梳理</h4><p></p><p>在大张旗鼓得进行服务重构时，我们认为随着公司业务发展，提升推送服务的稳定性已然成为重构目标中的重中之重。在<a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651126148&amp;idx=2&amp;sn=3f47cc3e18a950b64793d01f8f8f995d&amp;chksm=bdb901d78ace88c1e07c0a79214a1a64d0571e812fec74c2a03c204076fadaca02db09ba648c&amp;scene=27#wechat_redirect\">重构</a>\"前，结合业务场景重新审视消息推送这一基础服务，我们不仅要解决历史遗留性问题，更要从边缘性服务的历史地位中将其划分出来，将消息推送作为一个完整系统看待，而不仅仅是一个工具类。</p><p></p><p>那么，何为系统？“系统是由相互作用相互依赖的若干组成部分结合而成的，具有特定功能的有机整体” -- 钱学森。换句话说，为了提供更加稳定、可靠、高效的消息推送服务，推送系统除了要保障将消息准确有效地下发到用户之外，我们又抽象出基础功能、用户体验和运营服务三个层面，赋予了它更多的职能。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/07/07d2b12f91c89213a84ff75adbbaf69d.png\" /></p><p></p><p></p><blockquote>反思：如果继续将推送当成一个工具使用会有什么后果？如果只把推送当做一个工具，缺乏对消息推送的管理意识，只管将业务触发的消息统统下发，那么随着时间的推移，业务逻辑的累积，势必会导致很多无意义的消息和用户无感的内容频繁推给用户，最终导致用户不堪重负主动关闭通知权限，甚至会直接卸载App，从而流式用户。所以，我们希望通过新推送系统的重构来避免上述问题，实现从消息推送发起到最终用户是否收到、是否点击进行全方位的数据分析，同时实现服务稳定性监控，以及通过消息点击率的数据走势最终体现出用户偏好，使产品的迭代优化更具目的性和可观测性。</blockquote><p></p><p></p><h4>2.2 技术选型</h4><p></p><p></p><p>在明确了需求之后，我们选择技术生态更为健全的 <a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651123400&amp;idx=4&amp;sn=343768565bc742dca305e861c1f48e80&amp;chksm=bdb9169b8ace9f8d2064290192681c5714566de4515b3378611e64b9f88294326bfbe9576842&amp;scene=27#wechat_redirect\">Java </a>\"体系作为初始环境，再之后更为关键的一步便是推送技术选型。结合旧有推送服务的运营经验，我们在推送技术选型时依据“能直接依赖厂商服务则直接依赖”的原则，制定了如下推送方案。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/06/06c43d9a72e0177138e815f0f4fb9b41.png\" /></p><p></p><p>在做前期调研时，我们都会了解到诸如极光推送、个推、友盟、百度云等第三方推送服务，通过简单嵌入一个SDK即可实现消息推送功能。这里有人可能会问：“直接使用第三方推送服务，不仅开发成本低，而且成熟稳定，还提供了完善的后台功能，为什么不拿来直接使用呢？”</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e1/e18e7978dc954f2d63d3a954fd589c25.png\" /></p><p></p><p>正如上图对比分析，第三方服务虽然接入更加便捷，开发成本低，但是基于服务稳定性和<a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651126617&amp;idx=4&amp;sn=6adc07cc97a9095502965ca60c7ac354&amp;chksm=bdb9030a8ace8a1c1de53dcfdf8fc87881ecc2712cb29104bfa511f2cbb44176a5b9017d3507&amp;scene=27#wechat_redirect\">数据安全</a>\"两个方面，我们还是选择了直接对接厂商服务的技术方案。</p><p></p><p></p><blockquote>Tip：为什么厂商推送服务更加稳定？这里主要指安卓端，由于国内对 Google 限制， 导致了Android GCM推送服务在国内不可用， 所以国内的终端厂商大部分移除了 GCM 模块，然后推出各自系统级别的推送服务， 例如小米系统的 MIPush， 华为系统HuaWeiPush， 魅族系统的 FlyMePush 等。作为定制系统的手机厂商， 从系统级别进行了推送支持。厂商推送的进程为系统常驻进程，这个进程不会被系统回收，而且一键清除也不会关闭，所以稳定。而第三方服务，例如百度推送，作为非手机厂商的推送，它的核心原理是多个App共享一个长链接，只要有一个App存活那么推送就可以正常发送，这种全家桶式的推送服务由于集成用户多，相互唤醒概率较大，以此实现长连接的保活，实现相对稳定的推送服务。</blockquote><p></p><p></p><p>此时我们还需要考虑另外两个问题：</p><p></p><p>1、灵活程度：如果确认是第三方服务不支持的功能或Bug导致用户投诉，而版本迭代修复需要较长周期，那么在此期间，我们该如何处理用户投诉？&nbsp;例如，我们在使用友盟服务给小米设备推送时期，因其不支持红米设备，面对红米设备用户的投诉只能将小米厂商服务纳入推送体系中来，但是已发行的客户端版本依旧面临用户投诉的挑战。</p><p></p><p>2、成本问题：若重度依赖第三方服务，随着企业业务深入发展，第三方提供的免费版本注定将不再适用，转向高级付费版本势必成为必然选择，那么企业是否愿意承担其高额开支？&nbsp;例如，友盟免费通道为众多APP共享通道，其发布QPS有最大限制，所以如果使用免费通道，受多方影响，我们势必会面临被限流的问题且不受控制。限流会导致推送消息发布失败或延迟，给用户带去不好的体验。此时第三方则会提供VIP独享通道的解决方案。</p><p></p><p>由于安卓机型种类繁多，各家厂商服务一次性全部接入的工作量巨大。所以为了兼容小众机型，全家桶式的推送服务我们依然需要引入，同时作为兜底的推送渠道使用。在调研第三方推送服务时，各家服务简要对比如下（仅供参考）：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/cb/cb63b44efc56325bbcd308abb79d7bbe.png\" /></p><p></p><p>注：第三方服务也是在不断升级迭代的，有些历史问题可能已经随着版本升级得到有效解决，详情请查阅最新官方文档。</p><p></p><p>综上所述，我们最终采用“尽量直接对接厂商服务，第三方服务兜底”的策略来支撑推送服务（第三方服务采用友盟推送）。于是，便形成了如下的推送基础架构模型：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/fe/fe49e786557a88f953e110fb5d3f9f48.png\" /></p><p></p><h4>2.3 推送通道高可用性优化</h4><p></p><p>当然，很容易发现上述基础模型中各类机型都是单通道发送，并无高可用性相关设计。在生产实践中，我们遇到过两次推送故障，分别如下：</p><p></p><p>1、厂商服务故障：华为厂商API服务突然异常，期间导致<a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651043381&amp;idx=1&amp;sn=5ab5b6f50159bdc4735c04e164f94dce&amp;chksm=bdbe4e668ac9c770a757d4249e240d52dd5efc5a29ce5ec8e23fba3c1028cc79d727b075dc4a&amp;scene=27#wechat_redirect\">华为</a>\"推送全部失败。事后反馈是由于华为推送灰度上线异常导致。</p><p></p><p>2、机房网络故障：好大夫线上机房通往海外链路网络异常，导致请求APNS服务失败，期间iOS设备的消息推送全部失效，机房运维人员手动将电信出口切换至联通出口后服务恢复正常。</p><p>以上故障如果没有经过生产实践，很难在系统设计初就将其考虑进来，为实现推送系统的高可用性，我们在基础模型上衍生出了链路备份的演进策略，具体如下图：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/73/7304a5a68e4f583effcedf07d8b36e68.png\" /></p><p></p><p>在优化通往海外APNS服务的链路时，我们利用阿里云机房多地部署的优势实现iOS推送的多出口，同时支持流量按比例实时调配，发送失败时支持多通道自动切换重试。而在解决安卓推送厂商通道故障或异常的问题时，我们则使用友盟自建通道作为其他厂商备份通道的方式，尽可能的保障消息可达。</p><p></p><h4>2.4 如何保障推送消息不丢失</h4><p></p><p></p><p>在互联网环境中充斥着很多低概率事件，如\"网络故障\"、“机器故障”及“自然灾害”等等。然而，小概率事件并非零概率事件。一旦发生，如果应对不善，突如其来的“黑天鹅”事件也会导致系统性风险、产生严重后果。原有的推送架构在系统防御性方面的设计不足，如遇网络波动等情形时，接口调用失败便会导致推送消息丢失。</p><p></p><p>所以，在好大夫推送系统高可用建设中，我们面临的另一个挑战就是——“如何尽可能的保障推送消息不丢失?\" 答案是 ——“消息队列”，通过使用消息队列不仅提升了系统整体吞吐量，而且嫁接使用了消息队列中间件的稳定性和失败重试功能。</p><p></p><p></p><blockquote>说明：消息队列作为公司级中间件应用，其稳定性要求高达99.99%以上，围绕消息队列中间件稳定性我们做了大量相关工作和资源投入，如补偿机制、重试机制、吞吐量等，以及覆盖范围更加全面的监控告警等等，这里不再展开叙述。</blockquote><p></p><p></p><p>写到这里，好大夫离线消息推送系统已经进一步演化为一个相对比较成熟稳定的微服务系统，其核心架构大致如下：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e7/e73aa47f2715fda1536c30ec38a3b6c9.png\" /></p><p></p><h4>2.5 其他优化</h4><p></p><p></p><p>“魔鬼存在于细节之中（Devils in the details)”，对于推送系统的优化，重构只是最粗粒度的手段，而实际上更多的优化往往是去深挖暗藏的细节。在细节优化过程中，我们也投入了相当一部分精力，大致简述如下：</p><p></p><p>全面升级APNS推送服务，采用p8 Token的授权方式取缔了原有p12证书授权方式，达到token过期自动刷新的效果，不再需要每个周期都投入资源进行证书的更新替换使用开源Pushy服务进行iOS推送服务，提升苹果推送稳定性及性能安卓端推送与各厂商合作，对重点业务推送申请定制高优先级通道，iOS侧则通过支持时间敏感型通知，保障消息稳定高效的触达用户，同时在强提醒方面(如铃声、震动、呼吸灯等)给予用户更优体验升级各端推送SDK版本，使主流终端机型对消息内容的限制大幅提升，如苹果由最初128b提升至4k，华为由2k升至4k支持单发、群发机制，可以一次给一个或者多个用户推送消息彻底解决好大夫APP之间推送差异化问题，如医生版华为机型使用华为推送，而患者端华为机型却使用友盟推送的混乱问题实现推送消息生命周期，从推送消息触发，到厂商下发，再到终端接收，以及最后的用户点击行为全过程链路串联及可视化Tips: 判断推送消息是否接收实现方案安卓端通过接入各大厂商消息回执功能实现，iOS侧由于APNS服务不支持回执功能，所以巧妙采用APNS通知服务扩展（Notification Service Extension）实时记录并上报推送消息接收日志，从而实现类似于安卓端消息回执的能力</p><p></p><h2>三、系统稳定性运营建设之路</h2><p></p><p></p><p>从唯物辩证法来看，推动新事物的产生和发展，从根本上讲就是不断认识矛盾、解决矛盾的过程。同样，对好大夫离线消息推送系统而言，在可用性建设告一段落之后，新的矛盾和问题也便随之浮出了水面。在生产实践过程中，我们又遇到了很多新的问题，譬如：</p><p></p><p>华为推送AccessToken获取失败导致华为通道推送失败，等到用户投诉时才开始人工介入排查每日各业务推送量级是多少？消息成功率、到达率、点击率又是什么样？都处于黑盒状态用户投诉推送收不到的相关问题时，如何快速定位问题根因？</p><p></p><p>《韩非子》中有句至理名言：“圣人见微以知著，见端以知末，故见象箸而怖，知天下不足也”，借指运用以小见大、见微知著的目光看待问题。同样，关于推送系统提到的上述三个问题，我们也可轻易看出其实质隐含的问题：</p><p></p><p>[x]&nbsp;系统缺乏监控告警[x]&nbsp;无确切的数据统计和分析，缺失系统画像[x]&nbsp;缺失故障排查诊断类辅助工具</p><p></p><h4>3.1 系统监控告警建设</h4><p></p><p></p><p></p><blockquote>离开了监控系统，我们就没法辨别一个服务是不是在正常提供服务；没有一套设计周全的监控体系，就如同蒙着眼睛狂奔；监控系统是服务运维中不可或缺的一部分。—— 《Google SRE 解密》</blockquote><p></p><p></p><p>当然，这里并不是想要打造一款监控系统，对于微服务应用本身更为关键的是如何提炼出关键性指标来监控服务的运行质量，Google SRE 建议我们，在实践时，应该思考从用户最关心的方面入手，对于消息推送系统而言，有以下两个方面对用户影响最大。</p><p></p><p>消息下发失败率消息触达时延</p><p></p><p>所以，针对以上两个方面，我们设计了以下告警项(仅展示部分供参考)来监测推送服务的稳定性，同时结合告警系统的on-call机制，随时有值班人员第一时间做出应急响应，及时干预止损。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/20/208b119366f6f1347503b4c0ab70b06d.png\" /></p><p></p><h4>3.2 系统可观测性建设</h4><p></p><p>一个正在运行的系统除了提供业务功能，产生业务数据的同时还会产生很多“运行时”数据，我们可以将这些运行时数据分为：Metrics，tracing和logging。</p><p></p><p></p><blockquote>Logging：用于记录离散的事件，包含程序执行到某一点或某一阶段的详细信息.Metrics：可聚合的数据，且通常是固定类型的时序数据，包括 Counter、Gauge、Histogram 等.Tracing：记录单个请求的处理流程，其中包括服务调用和处理时长等信息.</blockquote><p></p><p></p><p>系统画像建设实际上就是基于Metrics，tracing和logging数据，通过一些度量分析和可视化工具对以上三类数据做收集、处理和分析展示，从而达到服务的“可视化”，以便让研发、测试、运维和技术管理者能拥有服务的全局视角，在一个管理后台中看到多个或单个应用的相关信息。感兴趣的同学可以参考之前的系列文章：《<a href=\"http://mp.weixin.qq.com/s?__biz=MzUxOTg4NDAxMg==&amp;mid=2247484061&amp;idx=1&amp;sn=2b74a7ad1962eede684f08be413ccf54&amp;chksm=f9f39f1ece84160876e2adeb21bdf6598a438028136e65cf81da4c39711c0fed4f5a8edae4f6&amp;scene=21#wechat_redirect\">SRE实战(01) 初识+探索SRE如何推进好大夫在线技术债务改造</a>\"》，《<a href=\"http://mp.weixin.qq.com/s?__biz=MzUxOTg4NDAxMg==&amp;mid=2247484092&amp;idx=1&amp;sn=9062ca796bc66d38814d1082a673e2a3&amp;chksm=f9f39f3fce8416299e47b52801884e010d58a03a894c3ce1f71db14074872998b3c050638f40&amp;scene=21#wechat_redirect\">解构服务风险治理》</a>\"。</p><p></p><p>好大夫离线消息推送系统的服务画像也是基于上述原理实现，我们采用的是&nbsp;Prometheus + Grafana + Clickhouse&nbsp;的技术体系（参考：《<a href=\"http://mp.weixin.qq.com/s?__biz=MzUxOTg4NDAxMg==&amp;mid=2247484114&amp;idx=1&amp;sn=5310b804f730e69c49c0c81554c762db&amp;chksm=f9f39f51ce841647c771da181f01af4c24f0fc791f216089ce49a073ebcb1467396d6df4454a&amp;scene=21#wechat_redirect\">SRE实战(02)Clickhouse在好大夫服务治理中的落地应用</a>\"》），以全局到局部的设计思路分别绘制了以下画像：</p><p></p><p>No1、画像首页</p><p></p><p>主要从全局视角提供一个聚合页面，含推送系统本身的基础数据以及各端推送相关数据，如接口时延、推送达到率、点击率等。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/de/de1f859b112deee552967fa737c1c2d7.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/87/876a8d9cecf80e6e9d15e0ea605abf47.png\" /></p><p></p><p>No2、终端分类分析</p><p></p><p>根据设备分类进行详细分析，如首页中发现医生版APP安卓端推送送达率较低，那么本页即可具体分析是华为、小米、VIVO还是OPPO导致，以及低的原因是否为通知栏开关关闭。</p><p></p><p></p><blockquote>经数据分析，用户主动将消息通知栏开关关闭是影响消息到达率的一个关键因素，所以引导用户打开APP通知栏开关是提升消息到达率很关键的一项优化措施。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/54/54ce4d9332df240f0b572dd8f934227b.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b5/b558617e2f910402c0f57da4f0cc5dd6.png\" /></p><p></p><p>继续深入，还可根据消息回执Code分布进行更加详细的根因分析：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/df/dffcf97400378d1795fbc562a8359527.png\" /></p><p></p><p>No3、长期趋势分析</p><p></p><p>长期趋势是对各项指标的长期统计，用于某段历史的回溯查验。数据存储主要是应用了Clickhouse的稀疏索引能力，从而实现在数据量巨大时仍可查询显示长期范围内的数据趋势，我们可对任何需要长期关注的指标进行类似处理，部分截图如下：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e0/e02d35348713b43860c2ce8172a050b5.png\" /></p><p></p><p>No4、服务风险分析</p><p></p><p>风险画像主要用于对服务面临的威胁、存在的脆弱性、现有防护措施及综合作用带来风险的发生可能性进行评估。我们主要梳理了一些可能会影响服务稳定性及业务使用合理性的指标进行综合考量。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/67/677f6266464898913440647cb800bd23.png\" /></p><p></p><p>No5、服务异常分析</p><p>服务异常表示应用程序当前不能正常提供服务，例如接口异常、队列消费者挂掉等等，如图：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/35/358ec7738f3745465ecdd63a97cda69f.png\" /></p><p></p><p>若厂商API接口服务异常，则可继续深入进行根因分析，以苹果推送为例如下：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/91/911a03e47eea489d5ef94350e5290201.png\" /></p><p></p><p>No6、iOS出口流量分析</p><p></p><p>因APNS服务部署在国外，为避免运营商网络问题，我们使用了多个出口进行对外链路请求，所以需对各链路健康状态及流量配比进行实时监控，从而专门绘制此图：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/75/7577aaabfba453ab49eb1d05fc4b1478.png\" /></p><p></p><p>No7、JMX画像&amp;No8.资源画像</p><p></p><p>基础资源画像略，可参考Grafana官方提供的 expoter 实现。</p><p></p><p>No 8、推送周报</p><p></p><p>移动互联时代，每天守在PC端盯着Dashboard查看是不现实的。所以我们会定期将关键指标绘制为周报的形式，以手机图片尺寸发布至工作群便于随时随地查看，部分截图如下，仅做参考：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/93/93b485b2dca80ebb6c42e0dc88a6171e.png\" /></p><p></p><p>No 9、其他</p><p></p><p>当然，我们也初步探索了对消息点击的分析，通过点击分析挖掘用户对各业务的关注度, 以及活跃用户APP版本分布等有用信息：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ce/cee5d968655e5e385f2f31f03a27b70f.png\" /></p><p></p><h4>3.3 故障诊断平台建设</h4><p></p><p></p><p>故障诊断的目标是确定某功能不能按预期工作的原因以及如何解决该问题。在日常工作中，出于种种原因依然会收到用户关于消息推送相关的建议和投诉，而排查问题往往是由运营侧反馈到开发侧，开发查完再解释给运营，来回沟通不仅效率低，而且大多数时候是重复性问题占用开发资源。为解决该类问题，我们设计了推送故障诊断平台专为运营服务，主要实现了如下功能：</p><p></p><p>获取用户近期推送概况查看设备信息及在线状态查看设备通知栏开关状态及历史变更指定设备给用户发送测试消息指定用户发送测试消息(用户多设备登录场景)查看近期推送消息内容详情查看推送消息链路详情</p><p></p><p>模型示例如图：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/14/141359000368e681fb17a79212662d6a.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/7a/7a80cbd22eaa4c52a5584a9871865cea.png\" /></p><p></p><p>在日常处理推送相关的意见建议或投诉时，可以通过故障诊断平台进行“一键诊断”，以快速定位并解决问题，使用门槛几乎为0，大大提升了运营和测试同学的工作效率，得到好评。</p><p></p><h2>四、总结</h2><p></p><p></p><p>“不积跬步无以至千里，不积小流无以成江海”。好大夫离线消息推送系统也是在生产实践中不断积累，由最初简单的一个通知工具演进为目前相对复杂的系统工程。作为好大夫业务发展背景下的一个终端运营产物，我们分别从技术和运营角度看待。</p><p></p><p>从技术角度看，历经可用性建设及稳定性运营建设两个阶段，目前基本满足了用户需求。</p><p></p><p>从运营角度看，消息推送是我们可以与用户直接进行有效交互的渠道和手段，属于用户激活方式中不可或缺的重要一环，切记谨慎使用，除功能性推送外，在不造成用户打扰的同时要尽可能的减少营销通知类推送，尽可能的结合用户偏好做到精准推送。同时，要意识到推送并不是一个工具，将消息推到设备即完成使命，更要关注后续数据的转化，并结合转化结果不断迭代产品方案，这样才能最大化利用推送这一利器。</p><p></p><h2>五、后续规划</h2><p></p><p></p><p></p><blockquote>从Android8到iOS15已经进入了推送博弈红海阶段，未来开发者面临通知服务的多项挑战。厂商通道通过通知分类逐步推进通知限额，通知作为历来被粗放漫灌的触达能力亟待回归 ROI(投资回报率)本质，解决成本问题。与以往对送达率的一味追求不同，未来考验怎么用更少的通知发送，更弱的用户打扰度，获取更高的用户积极反馈。</blockquote><p></p><p></p><p>长期以来，开发者在通知场景中主要关注送达率，历史中不乏通过流氓进程、频繁自启、链式唤起等手段一味追求高送达率。近些年，更多开发者尤其是行业TOP级产品将目标转向了点击率和实际业务正反馈（如唤起率）。这对通知运营提出了更高的要求：业务更加关注推送通知所带来的业务效果，用户体验更是重中之重。所以，未来好大夫推送服务的发力点大概如下：</p><p></p><p>去繁从简：梳理现有推送，进行合理化评估，如推送时段、频率是否合理等；交互优化：丰富、优化推送消息的交互及展示效果，提升用户体验；提升转化：引入转化率统计分析，重点关注消息着陆页设计等。</p><p></p><p>参考文献：</p><p></p><p>iOS10通知扩展之Notification Service Extension(https://www.jianshu.com/p/fd6d7906010d)；划重点｜iOS15正式发布， 全新的通知推送系统，你必须要知道！(https://www.bilibili.com/read/cv13818550)Metrics, tracing, and logging(https://peter.bourgon.org/blog/2017/02/21/metrics-tracing-and-logging.html)</p>",
    "publish_time": "2022-07-20 16:09:52",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "我踩过了 TypeScript 的坑，只想告诉你快来",
    "url": "https://www.infoq.cn/article/ds994KySqo868U3e8s4N",
    "summary": "<p>嘉宾 ｜ 许侃</p><p>编辑 ｜ 贾亚宁</p><p></p><p>用过 TypeScript 的开发者往往都会不约而同地直呼“真香”，但是我们也无法忽略 TypeScript 诸如学习曲线较陡和开发成本较高等阻碍。因此如何高效地使用和掌握 TypeScript，使其在中大型的项目中发挥最好的作用一直是大家讨论的热点话题。</p><p></p><p>本次我们邀请了 FreeWheel 的 Tech Lead 许侃老师，请他来分享对于 TypeScript 的应用和思考，同时许侃也是已经上线的 QCon+ 案例研习社「<a href=\"https://time.geekbang.org/qconplus/detail/100091377\">TypeScript 在中大型项目中的落地实践</a>\"」专题的出品人，带队来分享 TypeScript 的最佳实践。</p><p></p><h3>TypeScript 适用场景</h3><p></p><p></p><p>许侃：从我们组的切换体验来看，TypeScript 主要是在大规模协作中保证了代码质量，很多错误可以在本地开发环境中被及时发现。因此对于 TypeScript 的适用场景，我个人觉得：对于 3 人以上的团队如果有一个公共项目需要协作开发，那么选择 TypeScript 利大于弊，付出一定的类型定义成本和团队学习成本，可以长久地降低维护成本和提升代码质量。</p><p></p><p>另一种比较合适的场景则是团队内部的公共包，一来公共包的业务场景相对稳定，因此固定下来接口等类型定义相对来说不会有什么争议；二来通过暴露清晰的类型定义可以帮助调用方降低适配成本。</p><p></p><p>不适合的场景则因人而异，比如有人会觉得任何项目都应该用类型约束的 TypeScript 来撰写，有人则觉得 JavaScript 已经足够完成一些小型任务，不必非得“杀鸡用牛刀”。我的建议是：根据场景来选。如果时间紧、任务重，先上 JavaScript 一定是更合适的选择，类型欠缺之类的“债务”完全可以后面再去弥补。另一种就是小项目，代码少且意图足够清晰，搭配合适的单元测试一样可以保证高质量。</p><p></p><p>这里想谈一个比较现实的问题。很多 TypeScript 的拥趸者经常对 TypeScript 本身的上手成本避而不谈，这对于 TypeScript 的发展并不是一个好的事情。任何一项技术都是有其优缺点的，TypeScript 本身的上手成本恰恰是很多团队迟迟下不了决心的门槛。这个时候需要的是尽可能用一些可重复的实践经历来告诉还没采用的人——这条路的坑我们已经蹚过了，如果你们有意向，欢迎来试试。这也是当初我作为出品人做 TypeScript 案例研习社的初心之一，只有能落地的实践，才经得起时间的考验。</p><p></p><h3>使用 TypeScript 重构</h3><p></p><p></p><p>许侃：重构这件事本身其实业界也有很多讨论，推荐大家去阅读软件行业巨擘 Martin Fowler 老爷子的《重构》。首先作者鼎鼎大名自不必说，其次这次第二版使用的样例语言正是 JavaScript，对于前端工程师而言阅读体验会更为友好。</p><p></p><p>‍关于使用 TypeScript 去做重构，我们团队积累的实际经验分享一下：</p><p></p><p>在开始逐步向 TypeScript 迁移的过程中，要格外注意每次重构后的自动化测试结果：一方面花一定时间去补充自动化测试提升代码覆盖率，另一方面用这些测试结果来验证重构没有对业务造成非预期的影响。这里需要提一下：FreeWheel 是一家 ToB 的公司，任何一点业务代码的改动都比较敏感，需要大量的自动化测试来保证不会影响已有产品的功能。历史上积累的大量测试案例给了团队很大信心进行重构，也最大程度地规避了重构带来的风险。把公共部分的代码优先抽出来进行 TypeScript 化，这部分的界限足够清晰，接口定义很容易确定下来。然后通过给公共代码撰写单元测试来保证多种业务的使用场景都能得到覆盖。业务需求优先，避免同一时期在同一块代码里添加新业务和进行代码重构。这算是一种控制变量的思路，也是降低重构风险的一个好办法。从团队领导的角度而言，分配任务的时候就需要明确分清楚这块；从实际代码提交的成员角度来说，就需要把手头的提交至少明确地分成两次独立的提交——第一次完成业务需求和完善测试，第二次再用 TypeScript 去重构。其他的细节部分，可以参考 TypeScript 案例研习社中陈芸老师分享的内容，从两个不同的案例方向进行了详细介绍，相信能给你带来更大的启发。</p><p></p><h3>老项目继续用 JavaScript 重构</h3><p></p><p></p><p>许侃：代码迁移在我们团队内还有另一种表现形式——产品层面的变更。这也引发了我们团队内部继续使用 JavaScript 重构还是迁移到 TypeScript 的讨论。</p><p></p><p>产品层面的变更，主要是指随着时间迁移，产品面临几大变化——需要更换统一的前端 UI（组件行为层面和前端展示效果层面）；需要调整一些产品功能来更好地服务客户需求（下线一些已有功能和增强一些已知功能）。对于一些老的项目，我们还是采用了迁移到更新的 JavaScript 版本的思路。主要是：</p><p></p><p>先把需要迁移的代码独立到一个仓库里，避免对原始仓库的干扰。为了保留代码提交历史，可以考虑 git filter-branch 等命令来做一个通用脚本；其次通过自动化工具对整体代码进行一次改写，尽量升级到最新的语法。这里面复杂的情况可以用到 AST 工具，简单的则可以通过 magic-string 等 JavaScript 库写脚本来进行直接替换；然后搭配上最新的 prettier、eslint、husky 等配置，让团队成员不需要操心代码风格，同时尽可能让社区通行的工程实践能在项目里落地；最后要做好 CI 脚本的检查，有些同事可能会绕过 eslint 等检查，需要让 CI 站好“最后一班岗”，尽可能把问题在代码合并前得到暴露和解决。</p><p></p><h3>TypeScript 无意取代 JavaScript</h3><p></p><p></p><p>许侃：从趋势而言，TypeScript 的路一定会越来越宽，但是并不能完全超过或取代 JavaScript。</p><p></p><p>TypeScript 在前端中大型项目协作上的优势，目前确实没有对手，这意味着这块的基本盘只会越来越稳固，同时逐步侵占目前尚未迁移到 TypeScript 的项目的空间。但正如前面所言，JavaScript 永远是第一选择，只有能活下来的项目才有机会去考虑偿还“类型债务”。另一方面，选用 TypeScript 所希望达到的较高项目质量、较低文档维护成本等愿景，前端社区一样有着其他的选择，前端社区极度繁荣和活跃，作为开发者选择让自己最高效的工具即可，不必拘泥于 TypeScript。</p><p></p><p>另外想聊个题外话，最近 TypeScript 团队在 TC39 提出了一个将类型标注应用到现在的 JavaScript 代码的提案。大意是引入一种新的语法，会被 JavaScript 运行时忽略，但是 TypeScript、Flow 等 JavaScript 的超集或方言可以利用这个来继续提供类型检查等能力，但是免去了开发过程中的构建过程。提案本身刚刚进入了 Stage 1 阶段，未来可期。可以看出 TypeScript 团队一直在思考如何更好地服务 JavaScript 构筑起来的世界（而不是取代），所以就让 TypeScript 的归 TypeScript，JavaScript 的归 JavaScript 吧。</p><p></p><h3>团队 Leader 在推广 TypeScript 重构中的角色</h3><p></p><p></p><p>许侃：团队 Leader 其实可以做的事情很多，从我的个人经验总结来看，主要是以下三部分：</p><p></p><h5>1. 明确定位，做好预期管理</h5><p></p><p>如果团队成员对于 TypeScript 不太熟悉，那么需要先培养 TypeScript 的氛围，让“星星之火可以燎原”。实操下来可以是团队内部的 TypeScript 分享，让熟悉 TypeScript 的同事把这门语言介绍给全团队的同事。同时在团队内部明确 TypeScript 的价值和意义，给予一定的资源支持（学习 TypeScript 的资源、适配 TypeScript 的开发时间等），让团队成员有明确的预期。</p><p></p><h5>2. 总结沉淀，完成抛砖引玉</h5><p></p><p>如果团队有了一定的经验，那么就需要及时对迁移过程进行总结。一方面让团队成员来总结做得好的和可以继续提升的部分，通过可量化的数据来认可 TypeScript 对重构 / 迁移的作用；另一方面把这一总结落地到文字 / 幻灯片等产出里，因为公司内肯定还有没开始迁移的团队，以抛砖引玉的心态去做好分享，让 TypeScript 为公司带来更大的作用。如果这一过程做得足够好，你会发现自身团队的技术影响力也得到了显著提升。</p><p></p><h5>3. 有先有后，不搞一蹴而就</h5><p></p><p>另外需要明确 TypeScript 中打算采用的技术的优先级。这话可能有点绕，解释一下主要是先把基础类型搭建起来，不要太拘泥于立马上手高级类型和“类型体操”，软件工程的核心在于不断迭代；另外对于 tsconfig 的配置也尽量以精简为主，有必要再去用更细致的控制功能，因为这门语言还在持续更新发展，一味求新求准往往容易丢失注意力，导致把该早点做的事情给安排到了靠后的位置；另外关于 tsc 和新的 compiler 的选择，优先上手 tsc，等到团队接受了 TypeScript 并形成了良好的协作氛围再考虑采用其他性能更优的 compiler 去减少开发时间并提升开发效率。因为 tsc 的支持一定是官方做得最好的，在项目早期用一个相对省心的 compiler 可以让团队把更多精力放在整个项目的完成上。这和软件工程先保证交付，再考虑卓越的思路也是一脉相承的。</p><p></p><h3>积累技术势能</h3><p></p><p></p><p>许侃：我从两个角度来分享一下：</p><p></p><h5>1. 理念角度，需要明确一点“you own your own career”</h5><p></p><p>翻译过来是对自己的职业生涯负责。技术成长对于职业生涯本身不是一个硬性要求，但对于想要在技术这条路继续前进、想要不被技术浪潮落下的同学来说，最好的便是保持对技术的敏感度、对技术的热忱，不断学习和精进。</p><p></p><h5>2. 实操角度，程序员本质上还是“手艺人”</h5><p></p><p>手艺能否精进靠的是经年累月的不断积累。所谓“台上一分钟，台下十年功”。对于打算走技术路线的人来说，一定要保证自己时常写一写代码来练手。很多新技术都是“新瓶装旧酒”，打好基础对于掌握新技术会取得事半功倍的效果。</p><p></p><p>所谓“闻道有先后，术业有专攻”，保持谦虚谨慎的态度，多向身边人和社区学习，这个时代学习技术的门槛越来越低，但学习技术的审慎态度要保持。</p><p></p><p>最后，如果你对我们团队做的事情有兴趣，欢迎联系：kxu@apac.freewheel.com</p><p></p><p></p><h4>嘉宾介绍</h4><p></p><p></p><p>许侃  FreeWheel Tech Lead，《云原生应用架构：微服务开发最佳实战》作者之一，多项美国专利作者，InfoQ 文章作者，有多年开发和项目管理经验。目前专注于云原生在前后端落地的实践和数据可视化方向的探索。</p>",
    "publish_time": "2022-07-20 16:11:06",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "美国国土安全部警告： Log4j漏洞要十余年才能修完",
    "url": "https://www.infoq.cn/article/dgtBz83S440xuJRitRcc",
    "summary": "<p>美国网络安全审查委员会发布首份报告指出，去年年底曝光的 Log4j 漏洞已成为“流行病”，将在未来十年甚至更长时间持续引发风险。</p><p>&nbsp;</p><p>美国总统拜登在 2021 年创建网络安全审查委员会（类似于国家运输安全委员会），由国土安全部负责。其目的是对网络事件进行审查，检查根本原因，并在必要时提出建议，改革联邦政府内的网络安全方法。</p><p>&nbsp;</p><p>\"这个事件还没有结束，仍然存在重大风险。网络防御者必须保持警惕。\"美国国土安全部负责政策的副部长兼小组主席 Rob Silvers 在上周三的电话会议上表示。</p><p>&nbsp;</p><p>该报告耗时五个月，对大约 80 个组织进行了访谈，并与行业、各国政府和安全专家接触，以获取信息。其中提出了 19 项建议，以供各实体在 Log4j 漏洞威胁下采用。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ad/add79bddef3e2ee2d0e89f3cd9cf6948.png\" /></p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5e/5eab0aca09be758b4aee133a2d44275e.png\" /></p><p></p><p>&nbsp;</p><p>谷歌安全工程副总裁兼委员会副主席希瑟·阿德金斯（Heather Adkins）希望此次研究结果能够给社区带来启发，其中的结论并不让人意外，也具有实践指导意义，还表示他们鼓励提高网络社区的安全标准，特别是开发者“资源匮乏”且主要是志愿者的开源领域。</p><p>&nbsp;</p><p>完整报告地址 ：</p><p><a href=\"https://www.cisa.gov/sites/default/files/publications/CSRB-Report-on-Log4-July-11-2022_508.pdf\">https://www.cisa.gov/sites/default/files/publications/CSRB-Report-on-Log4-July-11-2022_508.pdf</a>\"</p>",
    "publish_time": "2022-07-20 17:27:13",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "OpenResty XRay如何分析和解决 B 站重大线上事故",
    "url": "https://www.infoq.cn/article/uLYqvf9GJMyVOG9GmD0f",
    "summary": "<p>B 站近日发表了一篇关于去年那场大事故的回顾文章<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;mid=2247487272&amp;idx=1&amp;sn=038a30ce61706c97e3397eee982b1486&amp;scene=21#wechat_redirect\">《2021.07.13 我们是这样崩的》</a>\"，本文将从 OpenResty 的角度还原此事件的解决过程。</p><p></p><p>去年，OpenResty Inc. 团队使用商业产品 OpenResty XRay 的动态追踪技术介入 B 站文章中所描述的重大线上事故后，在很短的时间内定位了导致 B 站线上服务不可用的问题根源，并帮助解决重大线上事故。</p><p></p><h2>事故描述</h2><p></p><p></p><h4>背景</h4><p></p><p>B 站基于开源 OpenResty 开发了他们的内部网关系统。</p><p></p><h4>事故现场</h4><p></p><p>B 站当时所有线上服务器的 OpenResty 进程总是占用 CPU 100%，但不能处理任何请求。重启无法恢复，回滚他们最近的业务代码变更也无法恢复。所有服务器都有这个问题。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a0/a08be222bf35d477ab1391e0652d087c.png\" /></p><p></p><p>B 站是我们的 OpenResty XRay 产品的商业客户。OpenResty XRay 是一款基于动态追踪技术的系统故障排查和性能优化软件。事故发生一段时间后，B 站的运维团队联系到我们，希望我们能帮助分析线上的一个严重问题。</p><p></p><h2>事故分析过程</h2><p></p><p>我们首先通过线上由 OpenResty XRay 产品自动采样的 C 语言级别 CPU 火焰图，确定了他们的 OpenResty 的 nginx 进程的几乎所有 CPU 时间都花费在执行 Lua 代码上面。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/60/60e70fb821239d93440c11c92540fb54.png\" /></p><p></p><p>出于对客户的隐私保护和数据安全，这张图里只显示了 OpenResty 开源软件里的函数帧，隐去了 B 站自己的 Lua 代码相关的信息。</p><p></p><p>然后我们再通过 OpenResty XRay 自动采样的 Lua 语言级别的 CPU 火焰图确认了几乎所有的 CPU 时间都花费在了单条 Lua 代码路径上。看起来是那条 Lua 代码路径发生了死循环。我们的 Lua CPU 火焰图定位的 Lua 代码路径可以精确到代码行级别。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/dd/dd0a9030b5985edbcd018b0240d8e76b.png\" /></p><p>同样地，我们只保留了不敏感的开源代码的函数帧。</p><p></p><p>B 站原文中提到的 Lua 火焰图就是 OpenResty XRay 在 B 站生产服务器上采样有问题的 OpenResty 服务进程得到的。</p><p></p><p>OpenResty XRay 在 B 站线上生成火焰图也就花费了几十秒到几分钟的时间，因为使用 100% 非侵入的动态追踪技术，整个过程不需要对 B 站的进程和应用进行任何修改。</p><p></p><p>根据 Lua 火焰图最终确认根源问题是 B 站的业务往配置元数据写入了个字符串类型的权重 0 值的坏数据（即 “0”），而 OpenResty 的 lua-resty-balancer 库的 Lua API 期望的是数值类型的权重值，从而导致了无限递归和无限循环。</p><p></p><p>LuaJIT 的即时（ JIT）编译器在这里并没有 bug。之所以最初怀疑是 JIT 编译器的问题是因为对应的 Lua 代码路径乍一看并没有任何问题，同时 B 站另一个业务团队未告知的操作也对线上服务产生了影响。字符串 0 和数值 0 的区别是非常微妙的。最终我们排除了 JIT 编译器的 bug 可能性，确定了字符串 0 这个问题根源。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e9/e93250b4b54d885c5411fa817d0fcc57.png\" /></p><p></p><h2>事故后续修复和加固</h2><p></p><p>B 站在业务层面确保不会再有字符串类型的上游服务器的权重值被写入配置数据。</p><p></p><p>OpenResty XRay 新版也提供了打印 Lua 调用栈上所有局部变量的值的新功能，可以让类似问题被更快更直接地定位。</p><p></p><p>我们事后也对开源 OpenResty 的 lua-resty-balancer 库针对这种 API 误用进行特别加固，确保任何误传的字符串类型的权重值总是会被强制转成数值类型。</p><p></p><h2>结语</h2><p></p><p>事故最终得到完美解决。除了 B 站，<a href=\"https://openresty.com.cn/cn/xray/?src=wechat-blog\">OpenResty XRay</a>\" 也曾经成功地帮助 Zoom、微软、去哪儿网等很多公司在线上定位和优化了很多线上问题，包括从高 CPU 波峰到高内存使用，再到内存泄漏、异常的请求延时、高硬盘 IO 等各种问题。</p><p></p><p>OpenResty XRay 目前可以自动针对 OpenResty、Nginx、LuaJIT、PHP、Python、Perl、Go、PostgreSQL、Redis 等各种不同的开源软件以及运行在这些开源软件之上的客户业务代码进行深入的分析和监控。未来我们还会陆续加入对更多技术栈的支持，包括Java、Ruby等。用户使用 OpenResty XRay，可以快速发现和精准定位各种性能问题、功能问题和安全问题， 从而保证应用的稳定性。</p><p></p><p>OpenResty XRay 中使用的 Lua 语言级别的 CPU 火焰图工具在这里有<a href=\"https://blog.openresty.com.cn/cn/lua-cpu-flame-graph/?src=wechat-blog\">中文教程</a>\"介绍。OpenResty XRay 使用的是增强过的私有动态追踪技术，感兴趣的同学可以参考我年初时写的系列文章：<a href=\"https://blog.openresty.com/en/ylang-intro-part1/\">《Ylang: Universal Language for eBPF, Stap+, GDB, and More》</a>\"。</p><p></p><p>关于作者</p><p>章亦春是开源项目 OpenResty® 的创始人，同时也是 OpenResty Inc. 公司的创始人和 CEO。他贡献了许多 Nginx 的第三方模块，大量 Nginx 和 LuaJIT 核心补丁，并且设计了 OpenResty XRay、OpenResty Edge 和 OpenResty Showman 等产品。</p>",
    "publish_time": "2022-07-20 17:33:23",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "微软再次调整应用商店的开源政策",
    "url": "https://www.infoq.cn/article/gQGMrWGOoKtdMgHGUtYF",
    "summary": "<p>7月18日消息，微软再次调整了其商店政策，删除了原本的封禁商业开源条款。</p><p>&nbsp;</p><p>6 月 16 日，<a href=\"https://web.archive.org/web/20220702074228/https://docs.microsoft.com/en-us/windows/uwp/publish/store-policies\">微软更新了</a>\"Microsoft 应用商店的政策。修订后的政策还在第 10.8.7 节表示：</p><p></p><blockquote>Not attempt to profit from open-source or other software that is otherwise generally available for free, nor be priced irrationally high relative to the features and functionality provided by your product.</blockquote><p></p><p>&nbsp;</p><p>即“禁止在商店中对开源或其他通常可免费获得的软件收取费用”，同时商店将不允许过度收费或设置不合理的高价，也就是避免有人倒卖免费软件。</p><p>&nbsp;</p><p>微软的这一决策会影响一些开发者，在政策生效前夕，SFC（软件自由保护协会）在自己的官方博客发表文章，对微软进行了谴责，认为禁止在 Microsoft 应用商店上销售开源软件是不可接受的。微软应用商店总经理 Giorgio Sardo 回应说，他们将推迟执行该政策，而且微软需要澄清其修订草案背后的意图。</p><p>&nbsp;</p><p>在原本的生效日期（7月16日）后两天，Giorgio Sardo 在推特上再次出面表示，已经对应用商店政策做了优化，即删除了第 10.8.7 节中提到的开放源代码定价条款，同时，为了强调微软的实际意图，在第 11.2 节中添加了指向微软在线侵权报告表的链接。“我们致力于建立一个开放的商店，让开发者有足够的选择和灵活性。微软商店里有很多很棒的免费和付费 OSS 应用，我们期待并欢迎更多项目加入。”</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/81/81c63f7bf0d6d6457236182ca4a49577.png\" /></p><p></p><p>&nbsp;</p><p>了解更多：</p><p><a href=\"https://www.infoq.cn/article/MrFuSrVBjxNW840RRFuB\">微软开始封禁 App Store 中的商业开源 ，7 月 16 日生效？！</a>\"</p>",
    "publish_time": "2022-07-20 18:04:57",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "基于云原生的VR一体化应用的探索与实践",
    "url": "https://www.infoq.cn/article/2gFgYpmd80mh5VI12r7s",
    "summary": "<p><strong>直播简介</strong><br />\n数字空间的核心是 VR 数据采集、算法处理、交互应用。基于云服务，可快速搭建及部署上百个算法模块，实现云计算特性容器化、弹性算力扩缩容，极大提升 VR 处理效率。<br />\n随着数字空间在房产交易、家装家居、文旅会展等不同领域的规模化落地，VR 技术正面临更大的挑战，例如，VR 渲染可视化、跨平台兼容、内存敏感、性能瓶颈、webgl 编程门槛等。<br />\n本期内容将带你走进数字空间，展现如视如何借助云原生的能力构建如视开放平台，加速各行业对数字空间的深度应用。</p>\n<p><strong>听众受益</strong></p>\n<p>了解 VR 及 3D 相关技术<br />\n了解如视相关 VR 产品技术方案<br />\n了解云原生 VR 应用搭建<br />\n了解如视开放平台相关解决方案</p>\n<p><strong>适合人群</strong></p>\n<p>全行业空间数字化（转型）负责人 / 团队 / 开发者<br />\n三维重建 /VR/3D/WebGL 技术从业者 / 开发者</p>",
    "publish_time": "2022-07-20 20:21:53",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "持续发酵的可组装技术，如何引领企业级PaaS平台的未来？",
    "url": "https://www.infoq.cn/article/HFCr7OAxDIRFyNPOYhfD",
    "summary": "<p>被列为2022 年十二大战略技术趋势之一的可组装技术究竟是个啥？我们将和金蝶中国苍穹平台与技术规划部首席专家 彭璐，一起探讨了可组装技术的发展趋势和落地实践！</p>",
    "publish_time": "2022-07-20 20:42:16",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]