[
  {
    "title": "容器编排器生态：Swarm、Kubernetes、Nomad 并非仅有产品，但是最有生命力三个",
    "url": "https://www.infoq.cn/article/MeAAslt9z7vHWhNy4YyS",
    "summary": "<p></p><blockquote>尽管复杂，Kubernetes仍然是目前最流行的编排器，但 HashiCorp 在 Nomad 上的成功也表明，Kubernetes的替代方案还有发展空间。&nbsp;有些用户仍然热衷于Docker Swarm的简单性，但它的未来存在不确定性，其他替代方案看上去已经基本被放弃了。现在的生态似乎主要围绕着Swarm、Kubernetes 和 Nomad 这三个玩家，但容器编排仍然是一个相对不那么成熟的领域。十年前，这种技术几乎还不存在，现在仍在快速发展。容器编排领域可能还会出现许多令人兴奋的新想法和新发展。</blockquote><p></p><p>&nbsp;</p><p>本文最初发布于LWN.net。</p><p>&nbsp;</p><p><a href=\"https://lwn.net/Articles/902049/\">Docker及其他容器引擎</a>\"可以从许多方面简化服务端应用程序的部署，但许多应用程序不只包含一个容器。随着部署的应用程序和服务增加，管理一组容器的难度越来越大，一类名为容器编排器的工具由此发展了起来，截至目前最著名的是<a href=\"https://kubernetes.io/\">Kubernetes</a>\"，容器编排的历史以它为界也分成了前后两段。</p><p>&nbsp;</p><p>在享受容器带来的便利的同时，我们也要做好一些权衡取舍。如果一个人严格遵守Docker“<a href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#decouple-applications\">每个服务都应有自己的容器</a>\"”的理念，那么最终他将运行海量的容器。即使是一个访问数据库的简单Web界面也可能需要为数据库服务器和应用程序运行单独的容器，它可能还包括一个单独的Web服务器容器用于提供静态文件服务、一个单独的代理服务器容器用于终止SSL/TLS连接、一个键/值存储容器充当缓存，或者一个辅助应用程序容器用于处理后台作业及计划任务。</p><p>&nbsp;</p><p>一位管理员如果负责了数个这样的系统，很快就会发现需要一个工具来简化自己的工作，这就是容器编排器的用途所在了。</p><p>&nbsp;</p><p>容器编排器是一个工具，它可以将一组容器当成一个单元来管理。编排器让你可以将多台服务器合并成一个集群，并自动在集群节点之间分配容器工作负载，而不是单独在一台服务器操作。</p><p></p><p></p><h2>Docker Compose 和 Swarm</h2><p></p><p>&nbsp;</p><p><a href=\"https://github.com/docker/compose\">Docker Compose</a>\" 称不上是一个不完全的编排器，但这是Docker第一次尝试创建一个工具来简化多容器应用程序的管理。Compose读取一个YAML文件，通常命名为docker-compose.yml，并使用 Docker API创建文件中声明的资源；Compose还会为所有资源添加标签，以便在创建完成后把它们当成一个组来管理。实际上，它是Docker命令行接口（CLI，可操作容器组）的一个替代方案。Compose文件可以定义三类资源：</p><p>&nbsp;</p><p>服务（services)：声明要启动的容器，其中每一条都相当于一个docker&nbsp;run命令。网络（networks）：声明可以附加到容器（Compose文件中定义的）的网络，其中每一条相当于一个docker&nbsp;network&nbsp;create命令。卷（volumes）：&nbsp;定义可以附加到容器的命名卷。在Docker术语中，卷是可以挂在到容器的持久存储。命名卷由Docker daemon管理。其中每一条相当于一个docker&nbsp;volume&nbsp;create命令。</p><p>&nbsp;</p><p>网络和卷可以直接连接到Docker所在主机的网络和文件系统，也可以通过<a href=\"https://docs.docker.com/engine/extend/legacy_plugins/\">插件</a>\"提供。网络插件可以帮我们实现像将容器连接到VPN这样的事情；卷插件可以帮我们将卷存储在一台NFS服务器或一个对象存储服务上。</p><p>&nbsp;</p><p>在管理多容器应用程序方面，Compose提供了一种方便许多的方式，但在最初的版本中，它只能工作在单台主机上，创建的所有容器也运行在相同的机器上。为了让它能够覆盖多台主机，Docker在2016年推出了Swarm mode。实际上，这是Docker第二个带有“Swarm”字样的产品——2014年的一款产品实现了一种完全不同的、跨多台主机运行容器的方式，但Docker已经不再维护，它被 SwarmKit 所取代，后者是Docker Swarm当前版本的基础。</p><p>&nbsp;</p><p>Swarm mode包含在Docker中，无需安装其他软件。创建集群很简单，只需在初始节点上运行docker swarm init，然后在每个要添加的节点上运行docker swarm join。Swarm集群包含两种类型的节点。管理节点提供了一个API，用于启动集群中的容器，并使用基于<a href=\"https://raft.github.io/\">Raft一致性算法</a>\"的协议互相通信，在所有管理节点间同步集群状态。工作节点完成运行容器的具体工作。这些集群可以到多大我们并不是很确定，Docker的文档说一个集群的管理节点不应超过7个，但并没有说明工作节点的数量限制。跨节点桥接容器网络功能是自带的，但跨节点共享存储不是，需要借助第三方卷插件来提供跨节点的共享持久存储。</p><p>&nbsp;</p><p>服务使用Compose文件部署到Swarm上。Swarm扩展了Compose模式，为每个服务添加了一个deploy键，用于指定该服务应该运行多少实例以及应该在哪些节点上运行。遗憾的是，这导致了Compose和Swarm的分化，进而导致了一些混乱，因为对于像CPU和内存配额这样的选项，它们提供了不同的指定方式。</p><p>&nbsp;</p><p>在这段时期内，为了避免歧义，用于Swarm的文件被称作“栈文件”，而不是Compose文件；所幸，在Swarm和Compose的当前版本中，这些差异似乎已经被抹平。如果引用的栈文件和Compose文件截然不同，那多半是从网上搜来的。现在，Compose格式已经有了一个开放的规范，并且它自己的GitHub社区也提供了参考实现。</p><p>&nbsp;</p><p>Swarm的未来还存在一定的不确定性。它曾是Docker Cloud服务的基础，但<a href=\"https://web.archive.org/web/20200611102535/http://success.docker.com/article/cloud-migration\">该服务2018年突然关闭了</a>\"；它也曾被认为是Docker企业版的关键特性，但那个产品自此卖给了另外一家公司，它现在的名称为Mirantis&nbsp;Kubernetes&nbsp;Engine。与此同时，Compose的最新版本已经具备向亚马逊和微软托管服务部署容器的能力。一直没有弃用声明，但记忆中也没有任何其他类型的公告。在Docker的网站上搜索“Swarm”这个词，也只能够搜到过去一些曾提及它的信息。</p><p>&nbsp;</p><p></p><h2>Kubernetes</h2><p></p><p>&nbsp;</p><p>Kubernetes （有时候称为k8s）项目的灵感来自谷歌内部的一个工具<a href=\"https://kubernetes.io/blog/2015/04/borg-predecessor-to-kubernetes/\">Borg</a>\"。Kubernetes可以在多达数千个节点的集群上管理资源并协调工作负载的运行；它在容器编排领域的统治地位就像谷歌在搜索领域的地位一样。2014年，谷歌希望与Docker合作开发Kubernetes，但Docker决定走自己的路，继续开发Swarm。然而，Kubernetes在<a href=\"https://www.cncf.io/certification\">云原生计算基金会</a>\"（CNCF）的主持下发展壮大。截至2017年，Kubernetes已经变得如此流行，以至于Docker也宣布将其集成到自己的产品中。</p><p>&nbsp;</p><p>除了受欢迎之外，Kubernetes主要以其复杂性而闻名。手动配置一个新集群是一项非常复杂的任务，除了Kubernetes之外，管理员还需要选择并配置多个第三方组件。和Linux内核需要结合额外的软件形成完整的操作系统一样，Kubernetes只是一个编排器，它需要结合其他的软件才能组成一个完整的集群。它需要一个容器引擎来运行容器；它还需要网络插件以及持久卷插件。</p><p>&nbsp;</p><p><a href=\"https://containerjournal.com/topics/container-ecosystems/kubernetes-distribution-what-it-is-and-what-it-isnt/\">Kubernetes发行版</a>\"的存在填补了这一空白。和Linux发行版一样，Kubernetes发行版也将Kubernetes与安装程序以及精心挑选的第三方组件捆绑在一起。不同发行版的存在是为了满足不同的细分市场；似乎每个具有一定规模的公司都有自己的发行版和/或托管服务，以迎合企业的需求。minikube项目让开发人员可以轻松地在本地搭建一个试验环境。和Linux发行版不同，Kubernetes发行版经过了CNCF的一致性认证；为了得到认证，每个发行版都必须实现基本的功能，这样它们才能使用“Certified Kubernetes”标识。</p><p>&nbsp;</p><p>一个Kubernetes集群包含多个软件组件。集群中的每个节点都运行着一个名为kubelet的代理，用于维护集群的成员关系并从它接收工作。它还运行着一个容器引擎和kube-proxy，后者负责与在其他节点上运行的容器进行网络通信。</p><p>&nbsp;</p><p>维护集群状态的组件以及决定资源分配的组件合称为控制平面——这包括一个名为<a href=\"https://etcd.io/\">etcd</a>\"的分布式键值存储，一个给集群节点分配工作的调度器，一个或多个响应集群状态变化的控制器进程，负责触发所需的操作，使集群的状态符合预期。用户和集群节点通过Kubernetes&nbsp;API Server与控制平面交互。要实现修改，用户会通过API Server设定期望的集群状态，而kubelet会向控制器进程报告每个集群节点的实际状态。</p><p>&nbsp;</p><p>Kubernetes在一个名为pod的抽象中运行容器，其中可以包含一个或多个容器，不过，并不建议在一个pod中运行多个服务的容器。相反，一个pod通常只有一个提供服务的主容器，可能会有一个或多个“边”容器负责从运行服务的主容器中收集指标或日志。一个pod中的所有容器都将调度到同一台机器上，共享同一个网络命名空间——在同一pod中运行的容器可以通过loopback接口相互通信。每个pod在集群中都有自己独一无二的IP地址。运行在不同pod中的容器可以使用它们的集群IP地址相互通信。</p><p>&nbsp;</p><p>Pod指定一组要运行的容器，但pod的定义并没有说明在哪里运行这些容器，或者是运行多长时间——没有这些信息，Kubernetes就会在集群上的随便什么地方启动容器，但不会在它们退出时重启，而且，如果控制平面判断其他工作负载需要它们占用的资源，Kubernetes可能会终止它们。为此，pod很少单独使用；取而代之，pod的定义通常是封装在用于定义持久服务的Deployment对象中。和Compose及Swarm一样，由Kubernetes管理的对象是在YAML中声明的；对于Kubernetes，YAML声明是通过 kubectl 工具提交到集群的。</p><p>&nbsp;</p><p>除了pod和Deployment之外，Kubernetes还可以管理许多其他类型的对象，如负载均衡器和授权策略。它支持的API清单还在不断增长，根据Kubernetes的版本以及集群运行的哪个发行版会有所不同。<a href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/\">自定义资源</a>\"可以用于向集群添加API，用于管理额外的对象类型。例如，<a href=\"https://kubevirt.io/\">KubeVirt</a>\"添加的API使Kubernetes可以运行虚拟机。可以通过<a href=\"https://jamesdefabia.github.io/docs/user-guide/kubectl/kubectl_api-versions/\">kubectl&nbsp;api-versions</a>\"命令查看特定集群支持的完整API清单。</p><p>&nbsp;</p><p>和Compose不同，这些对象中的每一种都是在单独的YAML文档中声明的，虽然多个YAML文档可以内联到一个文件中，并用“---”隔开（参加<a href=\"https://kubernetes.io/docs/concepts/cluster-administration/manage-deployment/#organizing-resource-configurations\">Kubernetes文档</a>\"）。一个复杂的应用程序可能包含许多对象，它们的定义分散在多个文件中；在维护这样一个应用程序时，保持所有这些定义彼此同步会非常繁琐。为了简化这项工作，有些Kubernetes管理员转而采用像<a href=\"https://jsonnet.org/articles/kubernetes.html\">Jsonnet</a>\"这样的模板工具。</p><p>&nbsp;</p><p><a href=\"https://helm.sh/\">Helm</a>\"让模板工具更上一层楼。和Kubernetes类似，Helm也是在CNCF的主持下开发的；它号称是“Kubernetes包管理器”。Helm从一套名为chart的模板和变量声明生成Kubernetes的YAML配置。它使用的模板语言不同于Ansible使用的<a href=\"https://jinja.palletsprojects.com/en/3.1.x/\">Jinja</a>\"模板，但看上去非常相似；熟悉<a href=\"https://docs.ansible.com/ansible/latest/user_guide/playbooks_reuse_roles.html\">Ansible Roles</a>\"的人看到Helm Charts也会感觉很熟悉。</p><p>&nbsp;</p><p>Helm Charts集可以发布到<a href=\"https://helm.sh/docs/topics/chart_repository/\">Helm存储库</a>\"；<a href=\"https://artifacthub.io/\">Artifact Hub</a>\"提供了一个很大的公共Helm存储库目录。管理员可以将这些存储库添加到他们的Helm配置中，使用已经编制好的Heml chart将流行应用的预打包版本部署到集群上。Helm的最新版本还支持向容器注册中心推送或从注册中心拉取chart，为管理员提供了一个选型，让他们可以将chart和容器镜像存储在一起。</p><p>&nbsp;</p><p>Kubernetes的增长势头还没有任何减缓的趋势。按照设计，它可以管理任何类型的资源；这种灵活性（已为KubeVirt虚拟机控制器所证明）使得，即使容器化工作负载最终不再流行，Kubernetes仍然有继续存在的价值。开发有序进行，新的主版本定期发布。版本支持周期为1年；似乎没有长期支持版本。集群可以升级，但有人喜欢新建一个集群，并将服务迁移过去。</p><p>&nbsp;</p><p></p><h2>Nomad</h2><p></p><p>&nbsp;</p><p><a href=\"https://www.hashicorp.com/products/nomad\">Nomad</a>\"是HashiCorp推出的一个编排器，号称是一个比Kubernetes更简单的替代方案。和Docker及Kubernetes类似，Nomad是一个开源项目。它包含一个名为nomad的二进制文件，可以用于启动一个名为代理的守护进程。它还提供了一个CLI，用于和代理通信。根据配置方式不同，代理进程可以在两种模式下运行。在服务器模式下运行的代理可以接受作业，并为它们分配集群资源。在客户端模式下运行的代理会接收作业，运行它们，并将作业状态报告给服务器。代理还可以在开发模式下运行，同时承担客户端和服务器的角色，成为一个用于测试目的的单节点集群。</p><p>&nbsp;</p><p>创建Nomad集群相当简单。在Nomad最基本的操作模式中，必须启动初始服务器代理，然后使用nomad&nbsp;server&nbsp;join命令向集群添加额外的节点。HashiCorp还提供了Consul，这是一个通用的服务网格和发现工具。虽然Nomad可以单独使用，但最好是和Consul搭配使用。Nomad代理可以使用Consul自动发现并加入一个集群，它还可以执行健康检查，提供DNS记录，并为集群上运行的服务提供HTTPS代理。</p><p>&nbsp;</p><p>Nomad支持复杂的集群拓扑。每个集群被划分成一个或多个“数据中心”。和Swarm类似，同一数据中心中的服务器代理使用一种基于Raft的协议相互通信；这种协议有严格的延迟要求，但多个数据中心可以用gossip协议连接起来，从而使信息可以在集群中传播，而又不需要每个服务器与其他服务器保持直接连接。从用户的角度来看，以这种方式连接起来的数据中心就和一个集群一样。这种架构让Nomad在扩展到大量集群时颇有优势。按照官方说法，Kubernetes最多支持5000个节点和3万个容器，而Nomad的文档中提到了一个有1万多节点的集群示例和一个有20万容器的集群示例。</p><p>&nbsp;</p><p>和Kubernetes类似，Nomad并没有包含一个容器引擎或运行时，它使用任务驱动器来运行作业。它包含使用Docker和Podman来运行容器的任务驱动器；社区提供了面向其他容器引擎的驱动器。Nomad的野心也不限于容器，这点也和Kubernetes类似。它还提供了面向其他工作负载类型的任务驱动器，包括在主机上运行命令的fork/exec驱动器，运行虚拟机的QEMU驱动器，启动Java应用程序的Java驱动器。社区支持的任务驱动器可以将Nomad连接到其他类型的工作负载。</p><p>&nbsp;</p><p>与Docker或Kubernetes不同，Nomad不使用YAML，而是使用<a href=\"https://github.com/hashicorp/hcl\">HashiCorp配置语言</a>\"（HCL）。HCL最初是为HashiCorp的另一个项目创建的，用于配置名为<a href=\"https://www.terraform.io/\">Terraform</a>\"的云资源。虽然在其他地方的应用有限，但HashiCorp的整个产品线都在使用HCL。用HCL编写的文档很容易转换成JSON，但它的目标是提供一种比JSON更便捷、比YAML更不容易出错的语法。</p><p>&nbsp;</p><p>HashiCorp提供的相当于Helm的产品是Nomad Pack。和Helm类似，Nomad Pack会处理一个满是模板和变量声明的目录，生成作业配置。Nomad还有一个预打包应用程序的社区注册中心，但其选择空间比Helm的Artifact Hub要小很多。</p><p>&nbsp;</p><p>Nomad不像Kubernetes那么受欢迎。和Swarm一样，它的开发似乎主要是由其创建者推动的；尽管有许多大公司部署了HashiCorp，但HashiCorp仍然是Nomad相关社区的中心。目前看来，该项目似乎不太可能获得足够的发展势头，进而从母公司独立出来。对用户来说，与Docker在Swarm上做的工作相比，HashiCorp对Nomad的开发和推广或许更有保证。</p><p></p><h2>小结</h2><p></p><p>&nbsp;</p><p>Swarm、Kubernetes和Nomad并不是仅有的容器编排器，但它们是其中最有生命力的三个。<a href=\"https://mesos.apache.org/\">Apache Mesos</a>\"也可以用来运行容器，但它在2021年就几乎被封存了；<a href=\"https://dcos.io/\">DC/OS</a>\"基于Mesos，但很像Docker企业版，支持其开发的公司现在也专注于Kubernetes。其他大多数容器编排项目，如OpenShift和Rancher，实际上只是增强（和认证）的Kubernetes发行版，即使它们的名字中没有 Kubernetes。</p><p>&nbsp;</p><p>尽管 Kubernetes 非常复杂，它仍然是目前最流行的编排器，但HashiCorp在Nomad上的成功表明，替代方案也还有它的发展空间。有些用户仍然热衷于Docker Swarm的简单性，但它的未来存在不确定性。至此，其他替代方案看上去已经基本被放弃了。现在的生态似乎主要围绕着这三个玩家，但容器编排仍然是一个相对不那么成熟的领域。十年前，这种技术几乎还不存在，而它现在仍在快速发展。容器编排领域可能还会出现许多令人兴奋的新想法和新发展。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://lwn.net/SubscriberLink/905164/e1f4d4c1ce35f8b9/\">The container orchestrator landscape</a>\"</p>",
    "publish_time": "2022-11-18 07:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Tensorflow新一轮迭代路线图：更好的XLA编译和分布式计算",
    "url": "https://www.infoq.cn/article/0LoWyKuYdXlCdWkNEyPV",
    "summary": "<p>谷歌<a href=\"https://blog.tensorflow.org/2022/10/building-the-future-of-tensorflow.html\">宣布</a>\"TensorFlow开发的下一轮迭代。TensorFlow是由谷歌开发并在七年前<a href=\"https://github.com/tensorflow\">开源</a>\"的机器学习平台，现在是GitHub上star数量最多的项目之一。另外一个方案是<a href=\"https://pytorch.org/\">Pytorch</a>\"，它是由Facebook开发和开源的ML平台。未来几个<a href=\"https://www.infoq.cn/topic/TensorFlow\">TensorFlow</a>\"发布版本的开发路线图将基于四个支柱，分别是快捷与扩展性、机器学习应用、部署就绪和简单性。</p><p></p><p>对于快捷和可扩展的支柱来说，开发工作将主要关注XLA编译，因为谷歌认为XLA将成为深度学习编译器的行业标准。其目标是使模型训练和推理工作流程在CPU和GPU上更快地执行。开发也将关注分布式计算方面：借助<a href=\"https://www.tensorflow.org/guide/dtensor_overview\">DTensor</a>\"，模型将能够在多个设备上进行训练，以解锁未来超大型模型的训练和部署。此外，性能也很重要，所以谷歌将对算法性能的优化进行投资，如<a href=\"https://en.wikipedia.org/wiki/Mixed-precision_arithmetic\">mixed-precision</a>\"和<a href=\"https://www.rambus.com/blogs/reduced-precision-computation-for-neural-network-training/\">reduced-precision</a>\"计算，以提高在GPU和TPU上的速度。</p><p></p><p>对于机器学习应用支柱，谷歌将投资<a href=\"https://github.com/keras-team/keras-cv\">KerasCV</a>\"和<a href=\"https://github.com/keras-team/keras-nlp\">KerasNLP</a>\"包，这些包是为应用CV和NLP使用场景设计的，包括大量的预训练模型。该支柱也将以开发者资源为基础：对于流行的和可应用的机器学习场景添加更多的代码样例、指南和文档，以降低机器学习的进入门槛。</p><p></p><p>对于部署就绪支柱，努力的方向主要在于更便利地将模型导出到移动端、边缘端、服务后端以及JavaScript中。尤其是，将模型导出到<a href=\"https://www.tensorflow.org/lite\">TFLite</a>\"和<a href=\"https://www.tensorflow.org/js\">TF.js</a>\"将会更易于调用。C++原生API正处于开发阶段，它会更易于部署使用<a href=\"https://github.com/google/jax\">JAX</a>\"和TensorFlow Serving开发的模型，并使用TFlite和TF.js部署到移动端和web中。</p><p></p><p><a href=\"https://numpy.org/\">NumPy</a>\"&nbsp;API和更便利的调试体验将是第四个支柱的核心特征，即简单性。Tensorflow将采用NumPy API的数值标准，以使其更加一致和易于理解。Tensorflow还会实现更好的调试器功能，以最大限度地减少开发人员解决问题的时间。</p><p></p><p>谷歌承诺，新的Tensorflow版本将100%向后兼容，这样，工程师可以立即采用最新的版本，而不用担心现有的代码库会出现问题。</p><p></p><p>Tensorflow新功能的预览版计划在2023年第二季度推出，生产版本计划在同一年推出。关于路线图和相关更新的更多信息可以参阅<a href=\"https://blog.tensorflow.org/\">官方博客</a>\"。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/10/google-tensorflow-roadmap/\">Google’s Tensorflow Roadmap Includes Better XLA Compilation and Distributed Computing</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/8OADODV0EZZ72TMrDvTz\">使用&nbsp;TensorFlow.NET 构建神经网络</a>\"</p>",
    "publish_time": "2022-11-18 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "AI 算法在智能搜索领域的经验分享",
    "url": "https://www.infoq.cn/article/vALgJcNQM9ue2IQN7l5H",
    "summary": "<h2>听众受益</h2>\n<ul>\n<li>了解搜索和推荐的根本区别</li>\n<li>了解搜索功能实现的基本流程和功能模块以及各模块的关键技术点</li>\n<li>了解搜索功能召回和精排部分的建模方法和基于场景的思考</li>\n</ul>",
    "publish_time": "2022-11-18 08:51:02",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "社交网络分析方法在恶性舆论事件分析中的应用",
    "url": "https://www.infoq.cn/article/yiqJ3WXw0LoCV8qRpxzK",
    "summary": "<h2>议题概要</h2>\n<p>近年来域外社交平台涌现污名化中国的舆论事件，事件背后的组织与个人对事件的发酵与传播起着推波助澜的作用。本议题以域外抵制2022年北京冬奥会为例，以百分点数据科学基础平台为实现工具，介绍如何利用社交网络分析与机器学习分类算法，分析挖掘参与话题用户的角色作用，并识别异常机器人用户，实现恶意话题中的用户类型精准定位。</p>\n<p>暗流涌动的污名化舆论中，“看不见的手”究竟是谁？谁在张扬推动？谁在暗中勾连？本次分享将为大家揭秘，社交网络分析如何对舆论事件层层拆解，定位关键。</p>\n<h2>听众受益</h2>\n<p>•了解社交网络分析基本原理<br />\n•了解如何识别社媒用户在社群中的角色作用<br />\n•了解如何使用百分点数据科学基础平台实现社交网络分析与可视化过程</p>",
    "publish_time": "2022-11-18 08:58:44",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "马斯克称Twitter将专注“硬核软件工程”：要么加班，要么走人",
    "url": "https://www.infoq.cn/article/J8E4r5V4UBAFmmzFvV9f",
    "summary": "<p>据<a href=\"https://www.washingtonpost.com/technology/2022/11/16/musk-twitter-email-ultimatum-termination/\">外媒报道</a>\"，马斯克在当地时间周三凌晨向 Twitter 员工发送一封电子邮件，要求员工在周四下午 5 点之前做出选择——要么接受“极其硬核”的 Twitter 2.0 计划，接受长时间、高强度的工作；要么拿着三个月薪资的遣散费走人。</p><p></p><p>在这封名为“岔路口”的邮件中，马斯克写道：</p><p></p><p></p><blockquote>展望未来，要想建立一个突破性的 Twitter 2.0，并在竞争日益激烈的世界中取得成功，我们需要“极其硬核”。这也意味着，需要长时间、高强度的工作，只有优异的表现才算及格。Twitter 将更加以工程为导向。设计和产品管理仍将非常重要，并向我汇报，但那些编写出色代码的人将构成我们团队的大多数，并具有最大的影响力。从本质上来讲，Twitter 是一家软件和服务器公司，所以我认为这是有道理的。如果你确定你想成为新的 Twitter 的一员，请点击这个链接。在美国东部时间明天(周四)下午 5 点前，任何没有这样做的人都将获得 3 个月的遣散费。无论你做出什么决定，都要感谢你为 Twitter 成功所做的努力。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/dd/dd7c75cb2d0995907f740a980250a182.jpeg\" /></p><p></p><p>对于这封邮件，网友 Jez Wyke 批评道：马斯克需要具备更好的管理和领导能力，任何需要做的事情，都要给足够的时间和资源，毕竟员工不是你的个人财产。</p><p></p><h2>马斯克的“硬核软件工程”愿景</h2><p></p><p></p><p>这并不是马斯克第一次强调“硬核”。早在今年 5 月份，他就曾在 Twitter 上表示，一旦他成功收购 Twitter，公司就将超级专注于“硬核软件工程”、设计、信息安全和服务器硬件。当时“UML 之父”Grady Booch 还曾质问马斯克，“硬核软件工程”究竟是什么意思。Grady Booch 是 IBM Rational 的首席科学家，其在软件架构、软件工程和软件建模方面有杰出贡献，并在国际上享有盛名。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/db/db8a0af1acedcaf9e0d995b9b088cdff.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6c/6c8fd6c231c54520a7e8a5ca1117e851.png\" /></p><p></p><p>在讨论马斯克的“硬核软件工程”之前，或许应该先聊聊什么是软件工程。</p><p></p><p>现在的软件开发早已告别了单兵作战的时代，一些中大型软件都是团队的集体智慧产出。而软件工程则是团队协作的基石，区别于传统的项目管理，软件工程是一项复杂的知识工程。比如现代软件开发都建立在 Apache 和 Linux 基金会的众多开源项目之上，成千上万的软件工程师通过集体协作，编写了上亿行代码，最终才诞生了这些伟大的项目。大批程序员通过精细化分工协作，达到高效的工作和高质量产出。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/72/722eaaf5960b997cef7511f7474bda12.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d4/d40f33708c0ac0f1a295951936de2bc4.png\" /></p><p></p><p>作为软件工程实践最成功的公司之一，谷歌内部曾有声音认为“软件工程是随着时间的推移而集成的编程”。不过，时间对程序的影响是一个没有固定答案的问题，代码的预期寿命无论是几分钟，还是数十年，都能找到合理的解释。对于一个假定只有 1 小时寿命的程序来说，开发者不太可能需要适应新版本的底层库、操作系统、硬件或语言版本。因此，这个短寿的程序实际上只是一个编程问题。如果开发者想延长程序的寿命，就需要对程序做出改变。在十年或更长的时间里，大多数程序的依赖关系，无论是隐式的还是显式的，都可能会发生变化。就需要做出的决策的复杂性及其风险而言，软件工程与编程不同，进一步来说，编程只是软件工程的重要组成部分。</p><p></p><p>正如 Jorge Luis Borges 所说：没有什么是建立在石头上的。一切都建立在沙子上，但我们必须把沙子当作石头来建造。</p><p></p><p>在现代软件工程的基础上，马斯克加了“硬核”二字，让一切都变了味儿。</p><p></p><p>从马斯克的各种言论里，可以推测他所认为的“硬核软件工程”，在某种程度上等同于长时间、高强度的工作。毕竟在接手 Twitter 后，马斯克不止一次强调工时问题。</p><p></p><p>据 CNBC 11 月初报道，在没有明确加班费的情况下，马斯克要求 Twitter 的部分员工“997”，即每周工作 7 天，每天工作 12 小时。11 月 9 日，马斯克又向全体 Twitter 员工发送电子邮件，要求员工停止远程办公，每周在岗时间至少 40 小时。</p><p></p><p>马斯克曾在一条推文回复中强调，他对员工职业道德的期望是极端的，但相比对自己的要求来说，还是低了很多。他在前几天举行的第 29 届年度巴伦投资大会上称，收购 Twitter 后，自己的工作时长从每周 70-80 小时增加到 120 小时（平均每天 17 个小时以上）。他在另一场采访中更是强调，“我尽我所能工作——从早到晚，一周 7 天。”</p><p></p><p>一位程序员网友对此评论说：“我从事过高压项目，如果要从所有这些项目中吸取一个教训，那就是在编码方面，更长的工作时间会导致负生产力，因为你必须在后面进行更多测试、修复更多（最初未检测到的）错误。在我看来，管理层也有责任确保你的员工保持理智和健康——显然马斯克不这么认为。”</p><p></p><h2>Twitter 的软件是不断迭代出来的</h2><p></p><p></p><p>从 2006 年建立到现在，Twitter 历经多轮<a href=\"https://www.infoq.cn/article/twitter-architecture-evolution\">技术迭代</a>\"，解决过无数类似“失败之鲸”的故障，从而让系统变得庞大而稳固，在此同时，软件工程的复杂性也在不断增加。</p><p></p><p>在创办初期，Twitter的架构非常简单，当时创始人 Jack Dorsey 考虑过用 Python、C 和 OCaml 编写软件。不过机缘巧合，他找到了 Ruby on Rails 的核心贡献者 Florian Weber，所以 Twitter 选择了用 RoR 实现。</p><p><img src=\"https://static001.infoq.cn/resource/image/72/99/729bb950c1a43d2d96ee7cd9eaf47f99.png\" /></p><p>随着 Twitter 用户规模不断增长，其 Ruby on Rails 部署规模已经是世界第一，最多时机器达到 3000 台。但所有逻辑都在 Monorail 中，当时有超过 200 名工程师往里面 check in 代码，导致系统效率低下，延迟长，难以加入新功能。</p><p></p><p>随后，Twitter 开始对系统进行拆分，并用 Scala 重写了服务器。经过进一步分解，Monorail 逐渐被分离出来，整个系统从 Ruby 平台迁移到 JVM 上。单机 QPS 处理能力从 200~300 提高到 10000~20000，延迟减小到 1/3；减少了 90% 资源使用。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/d8/da/d8569ccc559aa77fbac0ee345cc8d0da.png\" /></p><p></p><p>在经历了多轮系统拆分后，2015 年，Twitter 已经搭建起完整的工程生态，软件工程的复杂度跟十年前已经不可同日而语。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b6/b6bdb0015d203c36b5ce3bd2697f85a8.png\" /></p><p></p><p>像 Twitter 这样的规模少有其他公司能够达到。在达到这样的规模之前，必然经历过艰辛的拓荒之路，背后更是无数“技术天才”不断地钻研和付出。</p><p></p><p>知名开发者 Dan Luu 发帖称，Twitter在基础设施方面，做了非常多的“硬核”工作，而在较为年轻的企业中，这些工作大多会以“云”或开源项目的形式被外包出去。他举例称，很多人可能不知道，Twitter 公司也有自己的内核团队，在设计低功耗服务器时，Twitter的团队能让服务器达到让英特尔都惊讶的功率范围；在 gRPC 出现之前，Twitter 就开始研究RPC了，所以他们构建了 Finagle；Twitter 的内部数据库 Manhattan 的延迟非常低，导致 Twitter 尝试迁移到云并切换到某些云数据库时还曾因此出现问题....</p><p></p><p>在马斯克接手后，Twitter 的软件工程重心或将再次进行转移，毕竟他理解的软件工程，貌似和大家理解的不是一回事儿。而这些人才也不被珍惜地“清理”了出去。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/13/1334486c250124cd43bfea4d6f3689cd.png\" /></p><p></p><p>本周早些时候，马斯克还质疑 Twitter App 在渲染主页时间线时，会执行 1000 多个性能低下的<a href=\"https://www.infoq.cn/article/Gw50bZHLrreF9GAVJJDc\">批量 RPC</a>\"，导致运行速度过慢。对于这个说法，Twitter 软件工程师 Eric Frohnhoefer 站了出来，押上自己的职业生涯跟马斯克正面对决：“我参与 Android 版 Twitter 的开发有大概 6 年了，我敢说这种论断是错的。”很快，Eric Frohnhoefer 就遭到了解雇，一些站队 Eric Frohnhoefer 的工程师如首席软件工程师 Yao Yue、软件工程师 Sasha Solomon 和后端工程师 Nick Morgan 也纷纷被解雇。</p><p></p><p>对于这些因意见不合而被解雇的工程师们，马斯克还阴阳怪气道：“我为解雇这些天才而道歉。他们的巨大才能无疑将在其他地方发挥巨大作用。”</p>",
    "publish_time": "2022-11-18 10:23:32",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "面向基础软件领域，ReScript编程语言中文文档正式上线",
    "url": "https://www.infoq.cn/article/yL6WxAPUzoZDL42dMgFb",
    "summary": "<p></p><h2>ReScript是什么？</h2><p></p><p><a href=\"https://rescript-lang.org/\">ReScript</a>\"是由&nbsp;IDEA讲席科学家<a href=\"https://www.infoq.cn/article/z7Fo6dZC408iguGJiDzN\">张宏波</a>\"于2015年设计的一门静态函数式语言，由国人主导设计研发，且目前已成为了在国际上有一定影响力的通用程序语言。</p><p>&nbsp;</p><p>ReScript起源于OCaml，能被编译成高质量、可读性强的JavaScript代码，其性能在同类型语言中<a href=\"https://unsafeperform.io/blog/2022-07-02-a_small_benchmark_for_functional_languages_targeting_web_browsers/\">遥遥领先</a>\"，ReScript本身也被用于<a href=\"https://ocaml.org/\">OCaml官方网站</a>\"的搭建。</p><p>&nbsp;</p><p>ReScript语言有着相对活跃的国际化<a href=\"https://forum.rescript-lang.org/\">社区</a>\"。这门程序语言曾被多个业界巨头使用，如Meta用于<a href=\"https://www.messenger.com/\">Messenger</a>\" 和Chats，Google用于<a href=\"https://github.com/WebAssembly/spec\">WebAssembly spec</a>\"；此外，ReScript在全球范围也具有一定的影响力，曾被欧洲、澳洲、北美、亚洲甚至中东的数百家公司采用，如欧洲的Wolt、 澳洲的TinyMCE、韩国的GreenLabs、印度的Porter以色列的AT&amp;T等等。截止目前，ReScript全球累计下载量近3百万，每周平均下载量约1.5万次。</p><p>&nbsp;</p><p>ReScript社区在线下也有过比较积极的交流，在疫情前曾分别在维也纳，芝加哥共召开过三次ReScript全球开发者大会。此外，ReScript编译器本身的贡献也非常多元化，除了原作者张宏波本人以外，有来自世界各地近300名的贡献者，目前累计约1.4万多次提交。其核心开发人员中也不乏业界权威如<a href=\"https://github.com/cristianoc\">Cristiano</a>\"、著名的静态分析软件<a href=\"https://fbinfer.com/\">Infer</a>\"的作者。 ReScript作者在加入IDEA之前，因其在社区的特殊贡献成为Meta在中国大陆的唯一一名特聘软件工程师。</p><p>&nbsp;</p><p>ReScript社区还具有多元化的特点，目前社区已经贡献了英文官方文档并被翻译成韩语、葡萄牙语等多国语言。ReScript作者离开Meta后致力于中文社区的推广，开设了国内首门以ReScript语言来实现的程序语言理论和实践公开课程。同时，为了让国内开发者更方便地学习和入门这门语言，在社区众多志愿者的帮助下，完成了中文文档的首次发布。</p><p>&nbsp;</p><p>本次 ReScript 中文文档上线，不仅能够降低该语言对于国内开发者的学习门槛，还能为之后中文社区的建设夯实基础。欢迎广大开发者使用 ReScript 做出更多技术性尝试，一起为我国的基础软件领域发展添砖加瓦。</p><p>&nbsp;</p><p>文档主页：<a href=\"https://link.zhihu.com/?target=https%3A//rescript-idea.github.io/\">https://rescript-idea.github.io/</a>\"</p><p>ReScript语言中文手册：<a href=\"https://link.zhihu.com/?target=https%3A//rescript-idea.github.io/docs-cn/manual/latest/introduction\">https://rescript-idea.github.io/docs-cn/manual/latest/introduction</a>\"</p><p></p><h2>为什么选择ReScript？</h2><p></p><p>&nbsp;</p><p>开发者所使用的<a href=\"https://www.infoq.cn/article/Bz4RgtSyra8c94CY2HCg\">编程语言</a>\"除了会影响日常所写的代码，还会塑造这门语言的使用者在编写程序时的思维方式，甚至也会影响到其在开发软件以及设计架构时的思维方式。</p><p>&nbsp;</p><p>另外一方面，软件开发所选择的程序语言会影响代码的可靠性、安全性和性能，从长远来看也影响开发者阅读代码的流畅度，以及对现有代码进行重构和扩展的复杂度。</p><p>&nbsp;</p><p>ReScript采用了过去几十年业界和学术界一些关键语言特性的优雅组合，使其具备了效率、表达能力和实用性的良好平衡。</p><p>&nbsp;</p><p>ReScript具有两大亮点，一是类型系统：在程序执行之前，编译器会检查数据的类型和对其进行的计算是否相匹配。对于出现类型不匹配情况的程序，类型系统会进行报错，而不会在执行程序的过程中出现未定义行为或者程序崩溃的情况。这有助于帮助语言的使用者及时排查出程序中可能存在的bug，从而提升程序的可靠性和稳定性。</p><p>&nbsp;</p><p>另一大亮点是ReScript可以沿用当前<a href=\"https://www.infoq.cn/article/CSRgKxyZK0XNK9ZARYEp\">JavaScript</a>\"的生态，ML语系很多方言设计的很优雅，但是当需要做工业应用的时候往往因为缺乏完善的第三方库而让人望而却步。ReScript得益于和JavaScript共用运行时，使得业界可以快捷方便地拿来作为主要工具语言开发工业级应用，而不会产生大量的额外负担。</p><p>&nbsp;</p><p>ReScript曾被著名程序员Paul Biggar（连续创业者: CircleCI、Darklang的创始人，程序语言专业博士）认为是可能是JS平台上最好的编程语言。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/45/4545556c76c6bd08956d09cac09f5009.png\" /></p><p></p><p>&nbsp;</p><p>虽然同赛道的<a href=\"https://www.infoq.cn/article/ds994KySqo868U3e8s4N\"> TypeScript</a>\" 搭配孪生项目 VsCode已经占据了绝大部分市场份额，但由于设计思路上更具远见，在未来，ReScript 仍然有机会可以成为国产基础软件的一个突破。</p><p></p><h2>未来ReScript将如何发展？</h2><p></p><p></p><p>ReScript是由国人主导设计的一门编程语言，未来它的发展将立足中国，拥抱世界，努力培养一个开放，多元化的社区。</p><p>&nbsp;</p><p>在语言本身发展方面，ReScript将加速和TypeScript的整合，提高和TypeScript的互操作。同时，由于ReScript的类型系统的可靠性，ReScript也将聚焦去实现一些TypeScript不能做到的事情，如将更多的类型信息用于代码优化，对多后端如WebAssembly的探索。</p><p></p><h2>首个以ReScript语言实现的程序语言理论与实践公开课上线</h2><p></p><p>&nbsp;</p><p>程序语言与编译器的<a href=\"https://qcon.infoq.cn/2022/shanghai/track/1435\">设计与实现</a>\"体现了计算机科学中的最核心的思想和技术，并且和业界新兴的技术领域，如人工智能加速芯片、云计算、物联网等都有着非常重要的联系。但目前在国内一直存在缺少优质教学资源、入门难、领域人才稀缺的问题。</p><p>&nbsp;</p><p>最近，IDEA基础软件中心在bilibili平台推出由张宏波亲自讲授的《程序语言理论与实践公开课》，这是首个以Rescript语言进行教授的编程语言课程。</p><p>&nbsp;</p><p>这门公开课的制作团队曾深度参与过哈佛、耶鲁、宾大相关课程的制作。课程以理论与实践相结合的方式讲授编程语言最核心内容填补了国内该教学领域的空白，意在培养更多学生及业界同行对基础软件相关领域的兴趣，为国内基础软件行业贡献一份力量。</p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://idea.edu.cn/dii.html\">https://idea.edu.cn/dii.html</a>\"</p><p><a href=\"https://bobzhang.github.io/courses/\">https://bobzhang.github.io/courses/</a>\"</p><p><a href=\"https://space.bilibili.com/1453436642/video\">https://space.bilibili.com/1453436642/video</a>\"</p><p><a href=\"https://www.zhihu.com/column/c_96822072\">https://www.zhihu.com/column/c_96822072</a>\"</p><p>&nbsp;</p><p>&nbsp;</p>",
    "publish_time": "2022-11-18 10:23:56",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]