[
  {
    "title": "互联网人加入传统行业需有敬畏之心｜第五期完整版（下）",
    "url": "https://www.infoq.cn/article/BsEVgfPMQG0u83qTjlzt",
    "summary": "<p>《行知数字中国》第五期，InfoQ邀请到麦当劳中国首席信息官，对外界深入分享他眼中的“数字化金拱门”。在他看来，企业进行数字化的过程很重要的一点是：转换思考问题的角度。</p>\n<p>本视频为第五期完整版的（下）集。精剪版可进入《行知数字中国》视频栏目专辑查看。</p>",
    "publish_time": "2022-12-12 09:56:02",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "异构混排在 vivo 互联网的技术实践",
    "url": "https://www.infoq.cn/article/Om6jCm9eyAXS1Ar36hbi",
    "summary": "<p></p><blockquote>本文根据沈技毅老师在“2022 vivo开发者大会\"现场演讲内容整理而成。</blockquote><p></p><p></p><p>混排层负责将多个异构队列的结果如广告、游戏、自然量等进行融合，需要在上下游和业务多重限制下取得最优解，相对复杂和难以控制。本文主要从业务、模型等角度介绍了 <a href=\"https://xie.infoq.cn/article/271120ed39217cb81a2cc38c9\">vivo </a>\"广告策略团队在信息流和应用商店混排上的一些探索和思考。</p><p></p><h2>一、背景介绍</h2><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/46/46a6962527a2da6c49878f23906e222a.png\" /></p><p></p><p>首先介绍一下什么是混排。所谓混排，如图所示就是需要在保障用户体验前提下，通过对不同队列中的异构内容进行合理混合，实现收益最优，更好的服务广告主和用户。</p><p></p><p>混排的核心挑战体现在：</p><p>不同队列 item 建模目标不同，难以直接对比。比如有的队列按照 ctr 建模，有的队列按照 ecpm 建模，无法直接对比。候选队列常受到大量产品规则约束，常见的有比如间隔位的约束、保量、首位等约束。由于候选队列由上游各方精排算法产生，由于业务限制混排时往往不能修改候选队列的序，也就是需要实现保序混排。</p><p></p><p>本次介绍的主要是<a href=\"https://xie.infoq.cn/article/5d2c6c0dc4282ea2d9e4a75e9\"> vivo</a>\" 信息流和商店场景的混排实践。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/03/030bd6f8407d1a83d74f7bb00aee9520.png\" /></p><p></p><p><a href=\"https://xie.infoq.cn/article/2fc79f1433f12212fd6d7e6da\">vivo </a>\"的信息流场景，包括像浏览器、i视频、负一屏等，他的特点是场景众多，下拉深度较高，广告形式多样，用户个性化需求较强。而对于商店场景，是一个整体偏垂直的场景，</p><p></p><p>它涉及到广告、游戏、自然量多方均衡，需要在保量和用户体验等严格要求下，取得综合最优解。后续我们将对这 2 个场景的特点展开逐一介绍。</p><p></p><p></p><h2>二、信息流混排实践</h2><p></p><p></p><h4>2.1 信息流混排介绍</h4><p></p><p>我们开始介绍下信息流场景的混排实践。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6a/6a0e373687aa1a22f18d68083d574635.png\" /></p><p></p><p>对于信息流场景来说，如下图所示，混排侧所主要解决的问题是内容队列与广告队列的混排问题。也就是如何在平衡好用户体验和广告主利益的情况下，将广告插入到合适的位置。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/52/525a99c2171f8a7b1e80627e3deb81ae.png\" /></p><p></p><p>对于传统信息流媒体来说早期的主要混排方式可能主要是以固定位模板为主。也就是运营人工定下广告与内容的插入关系，简单直接。</p><p></p><p>但也带来了三个明显的问题：</p><p>用户方来说，广告在偏好场景与非偏好场景同等概率出现，有损用户体验。业务方的角度出发，流量未精准投放，业务服务效率低，广告主体验差。平台方，资源错配导致平台资源浪费。</p><p></p><h4>2.2 业界方案调研</h4><p></p><p>接下来介绍下业界常见的几种解决方案。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/cc/cc738324b77cffa08f644d8cb21b579c.png\" /></p><p></p><p>以某职场社交平台的方案为例。它将优化目标设定为在用户体验价值大于一定值的前提下最优化营收价值。对于待插入广告，将用户体验货币化，与商业化价值加权衡量整体价值。</p><p></p><p>如果整体价值大于用户体验价值时投放广告内容，否则投放产品内容。此外在投放时还会根据右图所示考虑间隔等约束。</p><p></p><p>他的方法简单直接，很多团队采用类似的方案取得较好效果。但该方案只考虑单一 item 价值，未考虑 item 间相互影响，缺乏长期收益的考虑。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/40/40d79b51cccab77746be1916ba4bd611.png\" /></p><p></p><p>接下来介绍的是某小视频的方案，他们采用强化学习的方法进行混排。该方案将信息流混排问题抽象为序列插入问题，将不同广告对于不同槽位的插入情况抽象为不同 action，通过强化学习进行选择。在考虑奖励设计时融合了广告价值（如收入等）与用户体验价值（比如下滑与离开）。通过调节超参对两者进行平衡。</p><p></p><p>但是该方案对工程依赖较高且论文中已离线测试为主，缺乏线上的分析。并且该模型只考虑单广告插入，未考虑多广告情况。</p><p></p><p>具体到 vivo 信息流场景的迭代，混排迭代包括固定位混排，Qlearning&nbsp;混排和深度解空间型混排三个阶段。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/40/40f1d027b3ab78ac69a87726082d7248.png\" /></p><p></p><p>整体思路是希望在 Qlearning 阶段通过简单的强化学习方案累积样本，快速探索收益。后续升级为深度学习方案。</p><p></p><h4>2.3 Qlearning 混排</h4><p></p><p><img src=\"https://static001.geekbang.org/infoq/43/43c0cdcde5ef6516ceba03caaae54e11.png\" /></p><p></p><p>上面是强化学习的基本流程，强化学习最大的特点是在交互中学习。Agent 在与环境的交互中根据获得的奖励或惩罚不断的学习知识，更加适应环境。state，reward 和 action 是强化学习中最为关键的三个要素，后续详细展开。</p><p></p><p>vivo 信息流的 Qlearning 混排机制有什么好处呢？首先它会考虑全页面收益，并考虑长期收益，符合多刷场景诉求。此外 Qlearning 模型可以小步快跑，积累样本同时，快速验证效果。</p><p></p><p>当前整体系统架构，混排系统位于 adx 后，接收到内容队列与广告队列后，通过 Qlearning&nbsp;模型下发调权系数，对广告进行调权，叠加业务策略后，生成融合队列。而用户行为也会触发 Qlearning 模型更新。</p><p></p><p>Qlearning 模型运行原理如图，首先初始化 qtable，然后选择一个 action，根据 action 所得到的 reward 进行 qtable 的更新，而在损失函数既考虑短期收益也考虑长期收益。</p><p></p><p>在 vivo 的实践中，在奖励设计上，我们综合考虑时长等用户体验指标与广告价值，两者进行平滑后，通过超参进行权衡。在动作设计上，一期采用数值型的方式，生成广告调权系数，作用于广告精排得分，与内容侧进行混合，从而实现混排。</p><p></p><p>在状态设计上包含用户特征、上下文特征、内容侧特征和广告侧特征四个部分。像统计特征和上下文特征等对 Qlearning 模型有较大影响。</p><p></p><p>在 vivo 信息流场景中，Qlearning 混排取得了较好的效果，已经覆盖绝大部分场景。</p><p></p><h4>2.4 深度位置型混排</h4><p></p><p><img src=\"https://static001.geekbang.org/infoq/0e/0e6debc8b0fbeb4ea223f7a07cbba096.png\" /></p><p></p><p>Qlearning 混排存在一定的局限性：</p><p>Qtable 结构简单，信息容量小。Qlearning 模型可使用特征有限，难以对如行为序列等细致化建模。当前 Qlearning 混排依赖于上游打分，上游打分波动，会引发效果震荡。</p><p></p><p>为了解决 Qlearning 的问题，我们研发了深度位置型混排。在混排机制上由原本的数值型升级为直接生成位置的位置型混排，而在模型本身我们由 Qlearning 升级成了深度学习。</p><p></p><p>这带来 3 个好处：</p><p>与上游打分解耦，大大提高混排稳定性；深度网络，可容纳信息量大；能够考虑页面间item相互作用。</p><p></p><p>我们整体模型架构为业界主流类似双塔 dqn 的模型架构，左塔主要传入的一些 state 信息包括用户属性、行为等，右塔传入 action 信息也就是解空间排列基础信息。值得一提的是我们会将上一刷的解作为特征融入到当前模型中。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/11/1138ae4f3d91c550a3680fb0d1c1e091.png\" /></p><p></p><p>新的解空间模型 action 空间更大，天花板更高。但稀疏 action 难以学习充分，易导致预估不准。为了解决这个问题，我们在线上增加小流量随机实验，提高稀疏动作命中率，丰富样本多样性。</p><p></p><p>序列特征作为模型最为重要的特征之一，也是强化学习模型刻画 state 的重要特征之一，我们对序列做了一些优化。在序列 attention 模块，为了解决用户历史兴趣与待插入广告的匹配程度，我们通过 transformer 刻画用户行为序列信息；之后通过待插入广告与序列 attention 操作，刻画匹配程度。此外在序列 match 模块，我们引入先验信息，产生强交叉特征，对 attention 进行补充；对于 match 权值通过 CTR、是否命中、时间权重、TF-IDF 等方式进行信息提取。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/31/313c4f015a086f41ec5890be4fa6aa64.png\" /></p><p></p><p></p><h2>三、应用商店混排</h2><p></p><p></p><h4>3.1 商店混排介绍</h4><p></p><p>接下来我们介绍应用商店混排模块。</p><p><img src=\"https://static001.geekbang.org/infoq/f5/f5ee595d19a05bdf521f081d0da4c4bf.png\" /></p><p></p><p>商店混排的核心问题是实现广告队列与游戏队列的混排。而就像图中所示广告与游戏排序分定义方式不同，难以直接对比。此外联运游戏回收周期长， LTV 难以估准，即使全部按照 ecpm 排序也较难保证效果。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/28/28048aff5dc75a2845aef2477f26b790.png\" /></p><p></p><p>梳理下应用商店面临的核心挑战：</p><p>涉及业务方较多，需在满足用户体验、广告、游戏三方要求情况下实现综合最优。商店混排往往有保量等相关诉求，保量无法关联到整体收益，追求整体收益势必改变保量的结果，并产生相互冲突。如何在既满足保量的情况下，又实现整体最优？不同于信息流，商店为高成本消费场景，用户行为稀疏。很多用户很长时间内才会有一次下载行为。游戏 LTV 预估是行业的难题，如何在混排侧为游戏 LTV 提供一定的容错空间？</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/42/4202ea95f4098ff1f364f320693201ec.png\" /></p><p></p><p>回到 vivo 应用商店混排，整体迭代包含固定位混排、PID 保量、带约束混排、混排精细化分流 4 个阶段。</p><p></p><h4>3.2 PID保量</h4><p></p><p><img src=\"https://static001.geekbang.org/infoq/21/21c3e2d0d43c43f6cd77771db2fbb0c6.png\" /></p><p></p><p>首先介绍 PID 的方案，PID 最开始来源于自动化领域。初期为了相应业务侧诉求，参考业界主流方案，通过对广告和游戏进行保量，初步实现混排能力。但方案较为简单，且 PID 难以关联到收益目标，难以实现收益最优。</p><p></p><h4>3.3 带约束混排</h4><p></p><p><img src=\"https://static001.geekbang.org/infoq/77/776fa6417b622d06559d015199400dcc.png\" /></p><p></p><p>保量和收益最大化存在一定程度的冲突，满足保量约束下，如何实现业务综合收益最优是最大难点。</p><p></p><p>vivo 商店混排采取流量拆分微调的思路，在 PID 保量后接重排，综合考虑用户体验、广告收入、游戏价值三者的平衡点。针对重排与 PID 保量冲突，重排只对部分位置生效，使得在部分流量如首屏下能够进行收益的探索，而又能满足保量需求。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/36/361e9fec7b71cb747a825be58fe92a41.png\" /></p><p></p><p>在重排层我们一开始考虑沿用信息流的混排方案，使用强化学习进行混排。但是存在 2 个问题：</p><p>重排只对首刷生效，缺乏常规强化学习的状态转移。商店场景对比信息流场景涉及业务方较多，如何考虑用户体验、广告收入、游戏价值三方的权衡 是一个更为复杂的问题。</p><p></p><p>为了适应商店场景的特点，我们做了一些适配和优化：</p><p>首先对于 loss。有别于传统强化学习，由于商店场景行为稀疏且只对首屏生效，缺乏状态转移，我们将 gamma 置为 0，整体变为类似监督学习的状态，提高系统稳定性。在 reward 的设计上我们综合考虑了整个页面游戏收入、广告收入和用户体验等多方因素实现收益最优。在 action 设计上一期仍然使用数值型方案。</p><p></p><p>该版本在 vivo 商店混排取得较好效果，已经全量。</p><p></p><h4>3.4 混排精细化分流</h4><p></p><p><img src=\"https://static001.geekbang.org/infoq/be/be60c3f3c8132f81ba8a711a05714def.png\" /></p><p></p><p>在带约束重排基础上，我们思考能否进一步进行优化。</p><p>首先重排候选集由 PID 保量产生，非全局最优。其次候选集为全广告或全游戏时，当前重排无生效空间（这块线上占比过半）。</p><p></p><p>那么如何满足保量下更进一步实现收益最优？</p><p></p><p>我们开始尝试混排精细化分流，对于部分分支去除保量限制，进行约束放开。使得 PID 聚焦于满足保量等业务诉求，模型聚焦探索更优空间。</p><p></p><p>当前版本，当一个请求到来时，我们会根据分流模块判断是否为高质量流量，对于高质量流量通过混排模型探索收益，对于低质量流量采用 PID 进行保量，并将最终结果融合。这样重排策略能在部分流量对全请求生效，整体的保量也在正常范围。</p><p></p><p>目前我们当前尝试过的分流方式有商业价值分流、游戏偏好分流、广告位分流、体验机制分流等。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/3f/3fecaacc1347cb34f0992092d0145cdb.png\" /></p><p></p><p>具体到重排模型上，我们也做了一些迭代。当前重排层，数值型模型存在一些问题：</p><p>数值型混排依赖于上游打分，上游偏差变化影响混排模型准确性。未考虑上文信息和位置信息等 listwise 因素的影响。</p><p></p><p>为了解决问题：</p><p>我们采用采用生成式模型替代数值型模型，直接生成混排结果，与上游打分解耦。借鉴 context-dnn 思想，我们采用 context-aware 方式，在生成方式和 label 设计中融入上下文影响。</p><p></p><p>该模型在实验流量上收益对比原模型更为明显，且不受上游打分影响，更为稳定。</p><p></p><p></p><h2>四、未来展望</h2><p></p><p></p><p>关于未来的展望，包括 4 个方面：</p><p>模型优化：深度优化混排，更精细化建模，融入更多实时反馈信号，提升模型效果，更为个性化建模。跨场景联动：尝试跨场景联动混排等方案，实现最优兑换比，与全场景最优。统一范式：各场景统一建立序列生成和序列评估的统一混排范式。端上混排：尝试端上混排，更为及时捕获用户兴趣，提升用户体验。</p><p></p><p>异构混排在 vivo 互联网的探索过程中遇到了较多的挑战，也取得了一定的收益。</p>",
    "publish_time": "2022-12-12 11:02:32",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "编程神器Copilot被官司搞怕了？月收费19美元的商业版将提供辩护服务，最高索赔50万美元",
    "url": "https://www.infoq.cn/article/509czSmTf7Qrv2TocrAu",
    "summary": "<p></p><blockquote><a href=\"https://www.infoq.cn/article/93kD4l5m0pye7k5CrKRT\">Copilot</a>\" 的商业化“虽迟但到”。</blockquote><p></p><p></p><h2>GitHub 推出商业版 Copilot</h2><p></p><p></p><p>据外媒 theRegister 报道，GitHub 旗下的 AI 编程神器 Copilot 现已推出商业版本，每月收费 19 美元（约合 133 元人民币）。与普通版本的区别在于，商业版能够过滤掉公共源代码，并确保其底层机器学习模型不是从互联网上直接摘抄代码自动补全建议。</p><p></p><p>Copilot 产品管理高级总监 Shuyin Zhao 在博文中解释道，“您可以轻松设置策略控制，代表组织对用户强制执行公共代码匹配设置。”</p><p></p><p>据 GitHub 介绍，大约 1% 的 Copilot 代码建议可能包含超过 150 个字符的代码片段，这与训练集中的代码完全一致，而这些代码就是根据各类软件许可，从公共在线源代码中挑选出来的。</p><p></p><p>为了避免滥用公共代码带来的风险， GitHub 早在今年 6 月就推出了面向个人用户的<a href=\"https://www.infoq.cn/article/weSmeUflc2RhAVvoR5Xt\">正式版 Copilot</a>\"，定价为每月 10 美元（约合 70 元人民币）。开发人员可以在 Visual Studio Code、JetBrains IDE、Neovim 等集成开发环境中编程时使用，Copilot 甚至可以建议复杂的算法以及样板代码并协助进行单元测试。</p><p></p><p>如今推出的商业版 Copilot 主要面向企业用户，虽然与面向个人用户的正式版 Copilot 在功能上存在交集，但定位并不一样。商业版 Copilot 面向的是拥有GitHub Enterprise Cloud 许可证的客户，负责为客户提供集中的许可证管理，主要解决大型开发者团队的使用和付费管理需求。</p><p></p><p>商业版 Copilot 承诺，无论数据来自公共代码仓库、私有代码仓库、非 GitHub 代码仓库或者是本地文件，都“不会保留代码片段，也不会存储或共享客户的代码”。所以从理论上讲，企业客户可以完全放心，企业的机密商业算法绝不会被发送至 GitHub 并用于 Copilot AI 的产品改进。</p><p></p><p>但商业版 Copilot 仍然会传输“使用数据”，与编辑操作相关的事件（例如接受或取消补全），错误，以及延迟和功能使用情况等数据，其中包括假名标识符等潜在的个人数据。</p><p></p><h2>经历过诉讼风波后，Copilot将为代码建议提供辩护和索赔</h2><p></p><p></p><p>虽然商业版 Copilot 做出了不收集代码建议的承诺，但还不清楚是否会继续收集其他数据来改善后续代码补全效果。此外，客户也会对 Copilot 的代码合规性感到担忧——Copilot 的代码建议很可能会将引发版权纠纷甚至是软件许可索赔。</p><p></p><p>毕竟这类事件已经发生过一次了。</p><p></p><p>今年 6 月，律师兼开发者 Matthew Butterick 写了一篇关于 GitHub Copilot 法律问题的文章，该文直指 Copilot 对开源许可证处理不当的问题。Butterick 在一份新闻稿中指出，Copilot 从一开始就明显存在法律问题。“作为拥有多年经验的开源程序员，我在第一次试用时就感受到了其中的问题。而且相信其他很多开发者也跟我一样，发现 Copilot 不对劲。结合自身法律背景，我觉得有必要拿起法律武器支持开源社区。”</p><p></p><p>11 月，BUtterick 宣布对 Copilot 提起<a href=\"https://www.infoq.cn/article/kxgaToQYC9Ura5L4GeuR\">诉讼</a>\"，诉讼指出，被告方使用公共 GitHub 代码仓库进行 Copilot 训练，这侵犯了众多开发人员在各类开源软件许可上的合法权利。该诉讼已提交到美国加州北区地方法院，要求法院批准 90 亿美元的法定损害赔偿金。</p><p></p><p>GitHub 显然也意识到了这种不确定性法律风险对企业客户信心的影响，因此对商业版 Copilot 产品特定条款中的 Copilot 输出约定做出调整，借此避免企业客户受到侵权索赔。</p><p></p><p>GitHub 在企业客户协议中提到：“GitHub 将为您辩护，以免无关第三方宣称您使用 GitHub Copilot 的行为涉嫌盗用商业机密，或直接侵犯了第三方的专利、版权、商标或其他知识产权，最高金额为 50 万美元、或您在索赔前 12 个月内支付的 GitHub Copilot 总使用费，以较高者为准。”</p><p></p><p>也就是说，如果企业客户因为采用了 Copilot 建议的代码而被起诉的话，GitHub 将为其提供辩护，并提供一定金额的索赔。</p><p></p><p>不过，如果涉嫌侵权的代码与 Copilot 提供的代码建议不同，或是出现以下情况，GitHub 将不会负责：未能遵循合理的软件开发审查实践；未能防止以可能侵犯第三方知识产权或其他权利的方式有意或无意地使用代码；并未启用 GitHub 的代码过滤功能。</p><p></p><p>一旦发生侵犯纠纷，Copilot 个人用户和不在企业账户下的客户得自行面对法律诉讼。GitHub 还明确提到，Copilot 用户有责任审查所建议代码的安全性和合法性。</p>",
    "publish_time": "2022-12-12 14:18:06",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]