[
  {
    "title": "互联网人加入传统行业需有敬畏之心｜第五期完整版（下）",
    "url": "https://www.infoq.cn/article/BsEVgfPMQG0u83qTjlzt",
    "summary": "<p>《行知数字中国》第五期，InfoQ邀请到麦当劳中国首席信息官，对外界深入分享他眼中的“数字化金拱门”。在他看来，企业进行数字化的过程很重要的一点是：转换思考问题的角度。</p>\n<p>本视频为第五期完整版的（下）集。精剪版可进入《行知数字中国》视频栏目专辑查看。</p>",
    "publish_time": "2022-12-12 09:56:02",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "异构混排在 vivo 互联网的技术实践",
    "url": "https://www.infoq.cn/article/Om6jCm9eyAXS1Ar36hbi",
    "summary": "<p></p><blockquote>本文根据沈技毅老师在“2022 vivo开发者大会\"现场演讲内容整理而成。</blockquote><p></p><p></p><p>混排层负责将多个异构队列的结果如广告、游戏、自然量等进行融合，需要在上下游和业务多重限制下取得最优解，相对复杂和难以控制。本文主要从业务、模型等角度介绍了 <a href=\"https://xie.infoq.cn/article/271120ed39217cb81a2cc38c9\">vivo </a>\"广告策略团队在信息流和应用商店混排上的一些探索和思考。</p><p></p><h2>一、背景介绍</h2><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/46/46a6962527a2da6c49878f23906e222a.png\" /></p><p></p><p>首先介绍一下什么是混排。所谓混排，如图所示就是需要在保障用户体验前提下，通过对不同队列中的异构内容进行合理混合，实现收益最优，更好的服务广告主和用户。</p><p></p><p>混排的核心挑战体现在：</p><p>不同队列 item 建模目标不同，难以直接对比。比如有的队列按照 ctr 建模，有的队列按照 ecpm 建模，无法直接对比。候选队列常受到大量产品规则约束，常见的有比如间隔位的约束、保量、首位等约束。由于候选队列由上游各方精排算法产生，由于业务限制混排时往往不能修改候选队列的序，也就是需要实现保序混排。</p><p></p><p>本次介绍的主要是<a href=\"https://xie.infoq.cn/article/5d2c6c0dc4282ea2d9e4a75e9\"> vivo</a>\" 信息流和商店场景的混排实践。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/03/030bd6f8407d1a83d74f7bb00aee9520.png\" /></p><p></p><p><a href=\"https://xie.infoq.cn/article/2fc79f1433f12212fd6d7e6da\">vivo </a>\"的信息流场景，包括像浏览器、i视频、负一屏等，他的特点是场景众多，下拉深度较高，广告形式多样，用户个性化需求较强。而对于商店场景，是一个整体偏垂直的场景，</p><p></p><p>它涉及到广告、游戏、自然量多方均衡，需要在保量和用户体验等严格要求下，取得综合最优解。后续我们将对这 2 个场景的特点展开逐一介绍。</p><p></p><p></p><h2>二、信息流混排实践</h2><p></p><p></p><h4>2.1 信息流混排介绍</h4><p></p><p>我们开始介绍下信息流场景的混排实践。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6a/6a0e373687aa1a22f18d68083d574635.png\" /></p><p></p><p>对于信息流场景来说，如下图所示，混排侧所主要解决的问题是内容队列与广告队列的混排问题。也就是如何在平衡好用户体验和广告主利益的情况下，将广告插入到合适的位置。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/52/525a99c2171f8a7b1e80627e3deb81ae.png\" /></p><p></p><p>对于传统信息流媒体来说早期的主要混排方式可能主要是以固定位模板为主。也就是运营人工定下广告与内容的插入关系，简单直接。</p><p></p><p>但也带来了三个明显的问题：</p><p>用户方来说，广告在偏好场景与非偏好场景同等概率出现，有损用户体验。业务方的角度出发，流量未精准投放，业务服务效率低，广告主体验差。平台方，资源错配导致平台资源浪费。</p><p></p><h4>2.2 业界方案调研</h4><p></p><p>接下来介绍下业界常见的几种解决方案。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/cc/cc738324b77cffa08f644d8cb21b579c.png\" /></p><p></p><p>以某职场社交平台的方案为例。它将优化目标设定为在用户体验价值大于一定值的前提下最优化营收价值。对于待插入广告，将用户体验货币化，与商业化价值加权衡量整体价值。</p><p></p><p>如果整体价值大于用户体验价值时投放广告内容，否则投放产品内容。此外在投放时还会根据右图所示考虑间隔等约束。</p><p></p><p>他的方法简单直接，很多团队采用类似的方案取得较好效果。但该方案只考虑单一 item 价值，未考虑 item 间相互影响，缺乏长期收益的考虑。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/40/40d79b51cccab77746be1916ba4bd611.png\" /></p><p></p><p>接下来介绍的是某小视频的方案，他们采用强化学习的方法进行混排。该方案将信息流混排问题抽象为序列插入问题，将不同广告对于不同槽位的插入情况抽象为不同 action，通过强化学习进行选择。在考虑奖励设计时融合了广告价值（如收入等）与用户体验价值（比如下滑与离开）。通过调节超参对两者进行平衡。</p><p></p><p>但是该方案对工程依赖较高且论文中已离线测试为主，缺乏线上的分析。并且该模型只考虑单广告插入，未考虑多广告情况。</p><p></p><p>具体到 vivo 信息流场景的迭代，混排迭代包括固定位混排，Qlearning&nbsp;混排和深度解空间型混排三个阶段。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/40/40f1d027b3ab78ac69a87726082d7248.png\" /></p><p></p><p>整体思路是希望在 Qlearning 阶段通过简单的强化学习方案累积样本，快速探索收益。后续升级为深度学习方案。</p><p></p><h4>2.3 Qlearning 混排</h4><p></p><p><img src=\"https://static001.geekbang.org/infoq/43/43c0cdcde5ef6516ceba03caaae54e11.png\" /></p><p></p><p>上面是强化学习的基本流程，强化学习最大的特点是在交互中学习。Agent 在与环境的交互中根据获得的奖励或惩罚不断的学习知识，更加适应环境。state，reward 和 action 是强化学习中最为关键的三个要素，后续详细展开。</p><p></p><p>vivo 信息流的 Qlearning 混排机制有什么好处呢？首先它会考虑全页面收益，并考虑长期收益，符合多刷场景诉求。此外 Qlearning 模型可以小步快跑，积累样本同时，快速验证效果。</p><p></p><p>当前整体系统架构，混排系统位于 adx 后，接收到内容队列与广告队列后，通过 Qlearning&nbsp;模型下发调权系数，对广告进行调权，叠加业务策略后，生成融合队列。而用户行为也会触发 Qlearning 模型更新。</p><p></p><p>Qlearning 模型运行原理如图，首先初始化 qtable，然后选择一个 action，根据 action 所得到的 reward 进行 qtable 的更新，而在损失函数既考虑短期收益也考虑长期收益。</p><p></p><p>在 vivo 的实践中，在奖励设计上，我们综合考虑时长等用户体验指标与广告价值，两者进行平滑后，通过超参进行权衡。在动作设计上，一期采用数值型的方式，生成广告调权系数，作用于广告精排得分，与内容侧进行混合，从而实现混排。</p><p></p><p>在状态设计上包含用户特征、上下文特征、内容侧特征和广告侧特征四个部分。像统计特征和上下文特征等对 Qlearning 模型有较大影响。</p><p></p><p>在 vivo 信息流场景中，Qlearning 混排取得了较好的效果，已经覆盖绝大部分场景。</p><p></p><h4>2.4 深度位置型混排</h4><p></p><p><img src=\"https://static001.geekbang.org/infoq/0e/0e6debc8b0fbeb4ea223f7a07cbba096.png\" /></p><p></p><p>Qlearning 混排存在一定的局限性：</p><p>Qtable 结构简单，信息容量小。Qlearning 模型可使用特征有限，难以对如行为序列等细致化建模。当前 Qlearning 混排依赖于上游打分，上游打分波动，会引发效果震荡。</p><p></p><p>为了解决 Qlearning 的问题，我们研发了深度位置型混排。在混排机制上由原本的数值型升级为直接生成位置的位置型混排，而在模型本身我们由 Qlearning 升级成了深度学习。</p><p></p><p>这带来 3 个好处：</p><p>与上游打分解耦，大大提高混排稳定性；深度网络，可容纳信息量大；能够考虑页面间item相互作用。</p><p></p><p>我们整体模型架构为业界主流类似双塔 dqn 的模型架构，左塔主要传入的一些 state 信息包括用户属性、行为等，右塔传入 action 信息也就是解空间排列基础信息。值得一提的是我们会将上一刷的解作为特征融入到当前模型中。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/11/1138ae4f3d91c550a3680fb0d1c1e091.png\" /></p><p></p><p>新的解空间模型 action 空间更大，天花板更高。但稀疏 action 难以学习充分，易导致预估不准。为了解决这个问题，我们在线上增加小流量随机实验，提高稀疏动作命中率，丰富样本多样性。</p><p></p><p>序列特征作为模型最为重要的特征之一，也是强化学习模型刻画 state 的重要特征之一，我们对序列做了一些优化。在序列 attention 模块，为了解决用户历史兴趣与待插入广告的匹配程度，我们通过 transformer 刻画用户行为序列信息；之后通过待插入广告与序列 attention 操作，刻画匹配程度。此外在序列 match 模块，我们引入先验信息，产生强交叉特征，对 attention 进行补充；对于 match 权值通过 CTR、是否命中、时间权重、TF-IDF 等方式进行信息提取。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/31/313c4f015a086f41ec5890be4fa6aa64.png\" /></p><p></p><p></p><h2>三、应用商店混排</h2><p></p><p></p><h4>3.1 商店混排介绍</h4><p></p><p>接下来我们介绍应用商店混排模块。</p><p><img src=\"https://static001.geekbang.org/infoq/f5/f5ee595d19a05bdf521f081d0da4c4bf.png\" /></p><p></p><p>商店混排的核心问题是实现广告队列与游戏队列的混排。而就像图中所示广告与游戏排序分定义方式不同，难以直接对比。此外联运游戏回收周期长， LTV 难以估准，即使全部按照 ecpm 排序也较难保证效果。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/28/28048aff5dc75a2845aef2477f26b790.png\" /></p><p></p><p>梳理下应用商店面临的核心挑战：</p><p>涉及业务方较多，需在满足用户体验、广告、游戏三方要求情况下实现综合最优。商店混排往往有保量等相关诉求，保量无法关联到整体收益，追求整体收益势必改变保量的结果，并产生相互冲突。如何在既满足保量的情况下，又实现整体最优？不同于信息流，商店为高成本消费场景，用户行为稀疏。很多用户很长时间内才会有一次下载行为。游戏 LTV 预估是行业的难题，如何在混排侧为游戏 LTV 提供一定的容错空间？</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/42/4202ea95f4098ff1f364f320693201ec.png\" /></p><p></p><p>回到 vivo 应用商店混排，整体迭代包含固定位混排、PID 保量、带约束混排、混排精细化分流 4 个阶段。</p><p></p><h4>3.2 PID保量</h4><p></p><p><img src=\"https://static001.geekbang.org/infoq/21/21c3e2d0d43c43f6cd77771db2fbb0c6.png\" /></p><p></p><p>首先介绍 PID 的方案，PID 最开始来源于自动化领域。初期为了相应业务侧诉求，参考业界主流方案，通过对广告和游戏进行保量，初步实现混排能力。但方案较为简单，且 PID 难以关联到收益目标，难以实现收益最优。</p><p></p><h4>3.3 带约束混排</h4><p></p><p><img src=\"https://static001.geekbang.org/infoq/77/776fa6417b622d06559d015199400dcc.png\" /></p><p></p><p>保量和收益最大化存在一定程度的冲突，满足保量约束下，如何实现业务综合收益最优是最大难点。</p><p></p><p>vivo 商店混排采取流量拆分微调的思路，在 PID 保量后接重排，综合考虑用户体验、广告收入、游戏价值三者的平衡点。针对重排与 PID 保量冲突，重排只对部分位置生效，使得在部分流量如首屏下能够进行收益的探索，而又能满足保量需求。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/36/361e9fec7b71cb747a825be58fe92a41.png\" /></p><p></p><p>在重排层我们一开始考虑沿用信息流的混排方案，使用强化学习进行混排。但是存在 2 个问题：</p><p>重排只对首刷生效，缺乏常规强化学习的状态转移。商店场景对比信息流场景涉及业务方较多，如何考虑用户体验、广告收入、游戏价值三方的权衡 是一个更为复杂的问题。</p><p></p><p>为了适应商店场景的特点，我们做了一些适配和优化：</p><p>首先对于 loss。有别于传统强化学习，由于商店场景行为稀疏且只对首屏生效，缺乏状态转移，我们将 gamma 置为 0，整体变为类似监督学习的状态，提高系统稳定性。在 reward 的设计上我们综合考虑了整个页面游戏收入、广告收入和用户体验等多方因素实现收益最优。在 action 设计上一期仍然使用数值型方案。</p><p></p><p>该版本在 vivo 商店混排取得较好效果，已经全量。</p><p></p><h4>3.4 混排精细化分流</h4><p></p><p><img src=\"https://static001.geekbang.org/infoq/be/be60c3f3c8132f81ba8a711a05714def.png\" /></p><p></p><p>在带约束重排基础上，我们思考能否进一步进行优化。</p><p>首先重排候选集由 PID 保量产生，非全局最优。其次候选集为全广告或全游戏时，当前重排无生效空间（这块线上占比过半）。</p><p></p><p>那么如何满足保量下更进一步实现收益最优？</p><p></p><p>我们开始尝试混排精细化分流，对于部分分支去除保量限制，进行约束放开。使得 PID 聚焦于满足保量等业务诉求，模型聚焦探索更优空间。</p><p></p><p>当前版本，当一个请求到来时，我们会根据分流模块判断是否为高质量流量，对于高质量流量通过混排模型探索收益，对于低质量流量采用 PID 进行保量，并将最终结果融合。这样重排策略能在部分流量对全请求生效，整体的保量也在正常范围。</p><p></p><p>目前我们当前尝试过的分流方式有商业价值分流、游戏偏好分流、广告位分流、体验机制分流等。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/3f/3fecaacc1347cb34f0992092d0145cdb.png\" /></p><p></p><p>具体到重排模型上，我们也做了一些迭代。当前重排层，数值型模型存在一些问题：</p><p>数值型混排依赖于上游打分，上游偏差变化影响混排模型准确性。未考虑上文信息和位置信息等 listwise 因素的影响。</p><p></p><p>为了解决问题：</p><p>我们采用采用生成式模型替代数值型模型，直接生成混排结果，与上游打分解耦。借鉴 context-dnn 思想，我们采用 context-aware 方式，在生成方式和 label 设计中融入上下文影响。</p><p></p><p>该模型在实验流量上收益对比原模型更为明显，且不受上游打分影响，更为稳定。</p><p></p><p></p><h2>四、未来展望</h2><p></p><p></p><p>关于未来的展望，包括 4 个方面：</p><p>模型优化：深度优化混排，更精细化建模，融入更多实时反馈信号，提升模型效果，更为个性化建模。跨场景联动：尝试跨场景联动混排等方案，实现最优兑换比，与全场景最优。统一范式：各场景统一建立序列生成和序列评估的统一混排范式。端上混排：尝试端上混排，更为及时捕获用户兴趣，提升用户体验。</p><p></p><p>异构混排在 vivo 互联网的探索过程中遇到了较多的挑战，也取得了一定的收益。</p>",
    "publish_time": "2022-12-12 11:02:32",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "编程神器Copilot被官司搞怕了？月收费19美元的商业版将提供辩护服务，最高索赔50万美元",
    "url": "https://www.infoq.cn/article/509czSmTf7Qrv2TocrAu",
    "summary": "<p></p><blockquote><a href=\"https://www.infoq.cn/article/93kD4l5m0pye7k5CrKRT\">Copilot</a>\" 的商业化“虽迟但到”。</blockquote><p></p><p></p><h2>GitHub 推出商业版 Copilot</h2><p></p><p></p><p>据外媒 theRegister 报道，GitHub 旗下的 AI 编程神器 Copilot 现已推出商业版本，每月收费 19 美元（约合 133 元人民币）。与普通版本的区别在于，商业版能够过滤掉公共源代码，并确保其底层机器学习模型不是从互联网上直接摘抄代码自动补全建议。</p><p></p><p>Copilot 产品管理高级总监 Shuyin Zhao 在博文中解释道，“您可以轻松设置策略控制，代表组织对用户强制执行公共代码匹配设置。”</p><p></p><p>据 GitHub 介绍，大约 1% 的 Copilot 代码建议可能包含超过 150 个字符的代码片段，这与训练集中的代码完全一致，而这些代码就是根据各类软件许可，从公共在线源代码中挑选出来的。</p><p></p><p>为了避免滥用公共代码带来的风险， GitHub 早在今年 6 月就推出了面向个人用户的<a href=\"https://www.infoq.cn/article/weSmeUflc2RhAVvoR5Xt\">正式版 Copilot</a>\"，定价为每月 10 美元（约合 70 元人民币）。开发人员可以在 Visual Studio Code、JetBrains IDE、Neovim 等集成开发环境中编程时使用，Copilot 甚至可以建议复杂的算法以及样板代码并协助进行单元测试。</p><p></p><p>如今推出的商业版 Copilot 主要面向企业用户，虽然与面向个人用户的正式版 Copilot 在功能上存在交集，但定位并不一样。商业版 Copilot 面向的是拥有GitHub Enterprise Cloud 许可证的客户，负责为客户提供集中的许可证管理，主要解决大型开发者团队的使用和付费管理需求。</p><p></p><p>商业版 Copilot 承诺，无论数据来自公共代码仓库、私有代码仓库、非 GitHub 代码仓库或者是本地文件，都“不会保留代码片段，也不会存储或共享客户的代码”。所以从理论上讲，企业客户可以完全放心，企业的机密商业算法绝不会被发送至 GitHub 并用于 Copilot AI 的产品改进。</p><p></p><p>但商业版 Copilot 仍然会传输“使用数据”，与编辑操作相关的事件（例如接受或取消补全），错误，以及延迟和功能使用情况等数据，其中包括假名标识符等潜在的个人数据。</p><p></p><h2>经历过诉讼风波后，Copilot将为代码建议提供辩护和索赔</h2><p></p><p></p><p>虽然商业版 Copilot 做出了不收集代码建议的承诺，但还不清楚是否会继续收集其他数据来改善后续代码补全效果。此外，客户也会对 Copilot 的代码合规性感到担忧——Copilot 的代码建议很可能会将引发版权纠纷甚至是软件许可索赔。</p><p></p><p>毕竟这类事件已经发生过一次了。</p><p></p><p>今年 6 月，律师兼开发者 Matthew Butterick 写了一篇关于 GitHub Copilot 法律问题的文章，该文直指 Copilot 对开源许可证处理不当的问题。Butterick 在一份新闻稿中指出，Copilot 从一开始就明显存在法律问题。“作为拥有多年经验的开源程序员，我在第一次试用时就感受到了其中的问题。而且相信其他很多开发者也跟我一样，发现 Copilot 不对劲。结合自身法律背景，我觉得有必要拿起法律武器支持开源社区。”</p><p></p><p>11 月，BUtterick 宣布对 Copilot 提起<a href=\"https://www.infoq.cn/article/kxgaToQYC9Ura5L4GeuR\">诉讼</a>\"，诉讼指出，被告方使用公共 GitHub 代码仓库进行 Copilot 训练，这侵犯了众多开发人员在各类开源软件许可上的合法权利。该诉讼已提交到美国加州北区地方法院，要求法院批准 90 亿美元的法定损害赔偿金。</p><p></p><p>GitHub 显然也意识到了这种不确定性法律风险对企业客户信心的影响，因此对商业版 Copilot 产品特定条款中的 Copilot 输出约定做出调整，借此避免企业客户受到侵权索赔。</p><p></p><p>GitHub 在企业客户协议中提到：“GitHub 将为您辩护，以免无关第三方宣称您使用 GitHub Copilot 的行为涉嫌盗用商业机密，或直接侵犯了第三方的专利、版权、商标或其他知识产权，最高金额为 50 万美元、或您在索赔前 12 个月内支付的 GitHub Copilot 总使用费，以较高者为准。”</p><p></p><p>也就是说，如果企业客户因为采用了 Copilot 建议的代码而被起诉的话，GitHub 将为其提供辩护，并提供一定金额的索赔。</p><p></p><p>不过，如果涉嫌侵权的代码与 Copilot 提供的代码建议不同，或是出现以下情况，GitHub 将不会负责：未能遵循合理的软件开发审查实践；未能防止以可能侵犯第三方知识产权或其他权利的方式有意或无意地使用代码；并未启用 GitHub 的代码过滤功能。</p><p></p><p>一旦发生侵犯纠纷，Copilot 个人用户和不在企业账户下的客户得自行面对法律诉讼。GitHub 还明确提到，Copilot 用户有责任审查所建议代码的安全性和合法性。</p>",
    "publish_time": "2022-12-12 14:18:06",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "你的Flutter应用该考虑迁移代码了：Dart 3将在2023年成为100%健全的空安全语言",
    "url": "https://www.infoq.cn/article/4u0MQ4321CGS7uEAygpY",
    "summary": "<p></p><p></p><blockquote>谷歌Dart语言即将告别null值，开发者们必须在Dart 3正式到来之前调整自己的代码。</blockquote><p></p><p>&nbsp;</p><p>根据计划，在Dart编程语言的第三个主要版本于2023年年中首度亮相时，将不允许在非必要位置使用null值。</p><p>&nbsp;</p><p>在该上下文中，null代表一个赋值，用于表示不存在值或引用的对象。Null引用最早可以追溯到1964年左右，当时英国计算机科学家Tony Hoare在ALGOL语言家族中引入了这个概念。他认为这是个“价值十亿美元的错误”，这里指的是修复此错误将要耗费的时间和金钱总值。这个判断相当精准，毕竟时至今日null仍然相当令人头痛。</p><p>&nbsp;</p><p>从2.12版本开始，Dart逐渐获得了健全的null安全性支持——一种防止对被设定为null的变量进行错误访问的方式。虽然出手修复，但Dart仍然保留了不加null安全（或部分null安全）保护直接运行代码的模式。</p><p>&nbsp;</p><p>但从Dart 3开始，这些非最优解将彻底消失。</p><p>&nbsp;</p><p></p><h2>来自谷歌的编程语言</h2><p></p><p>&nbsp;</p><p>Dart是一种面向对象、带垃圾收集的类C语言。维基百科的定义是：“Dart 是谷歌开发的一种通用编程语言，后被Ecma认定为标准（ECMA-408）。它被用于构建 Web、服务器、桌面和移动应用程序。”</p><p>&nbsp;</p><p>在2011 年 10 月 10 日的 GOTO 大会上，谷歌的两位工程师发布了“Dart”，旨在帮助开发者构建 Web 应用程序。</p><p>&nbsp;</p><p>Dart 1.0 于 2013 年 11 月 14 日发布，曾经踌躇满志地想要取代 JavaScript 成为 Web 开发的首选语言。然而不久后，谷歌放弃了这个想法。因为 Dart 不仅仅在语言本身，包括它的整个生态圈，都比 JavaScript 落后了一大截。Dart开发团队转而求其次，在可以被编译成JavaScript的同时，Dart在2.0版本中也针对 Web 和移动客户端开发进行了独特优化，从而能让它更好地满足客户端开发人员的需求。</p><p>&nbsp;</p><p>在谷歌内部， AdWords、AdSense 和 Fiber 项目团队都把 Dart 融入他们的前端应用开发。而随着跨平台移动 UI 框架 Flutter 的走红，作为 Flutter 的御用开发语言，Dart也一时名声大噪。</p><p>&nbsp;</p><p>与往常一样，来自谷歌的所有事物都能引发科技产业的极大兴趣，因此多年来，已经有不少其他公司用Dart来构建自己的关键性应用程序。</p><p>&nbsp;</p><p>根据Stack Overflow开展的2022年开发者调查，Dart目前在编程语言领域的流行度排名第16位。在近72000名受访者2中，约有6.54%正在使用Dart；相比之下，9.16%的受访者正在使用Kotlin（第15位），9.32%在使用Rust（第14名），11.15%的人在使用Go（第13名）。苹果的Swift编程语言排在第19位，占比4.91%。在全部受访者当中，应用最广的编程语言是JavaScript，这位冠军的覆盖率达到了惊人的65.36%。</p><p>&nbsp;</p><p></p><h2>让Dart成为更安全的编程语言</h2><p></p><p>&nbsp;</p><p>不少现代编程语言都支持null安全（也称空安全），解决的是null引用的问题。Tony Hoare曾将其称为一个价值十亿美元的错误：“这导致了无数的错误、漏洞和系统崩溃，在过去四十年间造成了价值十亿美元的痛苦和损失。”</p><p>&nbsp;</p><p>为了解决这个问题，Swift、C#和Kotlin等语言开始支持一种类型系统，开发者可以在其中将变量声明为非null（永远不能保存为null值）或可null（可以保存为null值）。这个类型系统可以与静态分析配合使用，检测是否将null赋值给了不可为null的变量。Dart语言中的null安全支持也采取类似的模式，默认情况下变量不可为null，仅在显式声明时才允许为null。</p><p>&nbsp;</p><p>在此基础上，Dart更进一步，引入了健全null安全机制。这种健全机制保证，意味着不可为null的变量永远不会被赋予null值。</p><p>&nbsp;</p><p>并不是每种语言的null安全实现都能如此稳定：Swift在设计之初就考虑到了健全性；TypeScript本质上并不健全，因为其底层类型系统允许将任何对象视为任意静态类型。所以在TypeScript当中，开发者其实仍可以将null值分配给非null变量。至于C#这边，出于使用习惯和避免迁移所有当前代码的考虑，其中仍保留了几个例外。Kotlin同样存在几个不合理的例外，部分原因是为了保持与Java的互操作性。举例来说，泛型类型可能导致声明包含非null元素的列表中流入null值。</p><p>&nbsp;</p><p>Dart与Flutter产品经理Michael Thomsen发布博文解释称，“我们的下个版本Dart 3将彻底完成通往绝对null安全语言的发展之旅。作为旅程的最后一步，我们将删除各个遗留Dart语言及SDK工件，不再支持非null安全条件下的运行模式。”</p><p>&nbsp;</p><p></p><h2>迁移到Dart 3的成本</h2><p></p><p>&nbsp;</p><p>但这一切也是有代价的。如果没有健全的null安全，由2.12或更早版本生成的带有SDK约束设置的pubspec文件（Dart包的元数据）将根本无法兼容Dart 3：“在Dart 3中，健全null安全将成为唯一受支持的模式。使用2.12及更早SDK约束版本的pubspec文件将无法在Dart 3或后续版本中正常解析。当约束设置为小于2.12（例如e.g.&nbsp;// @dart=2.9）时，任何包含语言标记的源代码都将报错。”</p><p>&nbsp;</p><p>自2.12版本起，Dart语言引入null安全已经有三年时间了，Dart语言开发团队也意识到迁移现有Dart包和应用程序所造成的影响。</p><p>&nbsp;</p><p>为了降低迁移门槛，Dart支持以三种方式运行应用程序代码，首先，可以在不启用null安全的前提下运行，也可以在启用部分null安全的混合模式下运行，最后可以在采取健全null安全的情况下运行。当代码100%（包括所有依赖项）完成迁移时，即可实现健全null安全。如此一来，Dart开发者就有时间一步步完成代码迁移。但请注意，支持多种模式也会增加维护开销和代码复杂度。</p><p>&nbsp;</p><p>首先，Dart开发者应当了解这三种模式选项。在阅读一段Dart代码时，首先应检查语言版本，据此判断类型会被默认为非null、默认为可null或者二者兼有。其次，编译器和运行时若支持全部三种模式，则会拖慢Dart SDK的开发速度。这意味着新功能的添加成本和复杂度都会随之提升。</p><p>&nbsp;</p><p>关于迁移的更多信息，谷歌也提供了参考迁移指南（<a href=\"https://dart.dev/null-safety/migration-guide\">https://dart.dev/null-safety/migration-guide</a>\"）。</p><p>&nbsp;</p><p>根据Thomsen的解释，约有85%的Flutter代码（用Dart编写而成）能够直接支持健全null安全。而对于余下的15%应用程序和软件包，开发者们必须在Dart 3正式到来之前调整自己的代码（please migrate before Dart 3 ships）。</p><p>&nbsp;</p><p>大型代码库的迁移可能需要一些时间。目前，德国汽车制造商宝马公司最近刚刚对其MyBMW应用进行了一轮null安全代码修订。这是一款由约300人开发者团队用Flutter构建的大规模应用程序。宝马公司移动应用开发主管Christian Schmid表示，“虽然对于像MyBMW应用这样的大型代码库来说，null安全迁移工作并非易事，但谷歌提供的工具确实在迁移中给了我们很大帮助。在迁移完成之后，我们终于得到了一套更不容易出错的代码库。”</p><p>&nbsp;</p><p>在Dart 3发布之后，该语言的下一个重要里程碑可能是支持将Dart代码编译为Wasm。如此一来，Flutter Web应用程序就能在浏览器中以本机代码的形式运行。当然，这项工作需要W3C和浏览器开发商合作，通过WasmGC扩展让Wasm能够支持各类垃圾收集语言（包括Dart）。</p><p>&nbsp;</p><p>参考资料：</p><p><a href=\"https://medium.com/dartlang/the-road-to-dart-3-afdd580fbefa\">https://medium.com/dartlang/the-road-to-dart-3-afdd580fbefa</a>\"</p><p><a href=\"https://www.theregister.com/2022/12/09/google_dart_null_safety/\">https://www.theregister.com/2022/12/09/google_dart_null_safety/</a>\"</p>",
    "publish_time": "2022-12-12 15:55:08",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "持续攻坚隐私计算，开源操作系统Occlum 1.0发布",
    "url": "https://www.infoq.cn/article/sRsPyOFUgtwHxYriwi7v",
    "summary": "<p>12月10日，由中国计算机协会主办的2022中国计算机大会（CNCC2022）在线上举行，由蚂蚁集团主导开源的可信执行环境（TEE）操作系统Occlum 1.0在“可信隐私计算研讨会”上发布</p><p>&nbsp;</p><p>据悉，<a href=\"https://www.infoq.cn/article/uHgl6C5TEFR8re1KDT3O\">Occlum</a>\"是机密计算领域核心开源软件之一，也是蚂蚁<a href=\"https://www.infoq.cn/article/q5jpzKT7FQPXGihouEQR\">隐语</a>\"技术栈的重要可信计算基座。经过4年打磨，本次发布的Occlum&nbsp;1.0版具有更高的稳定性和完备性，在线程调度、网络和存储IO方面最高有5倍的大幅度性能提升。该版本可帮助现有基于Spark的大数据或分布式应用无缝地迁移至云上机密计算安全环境中，为云计算隐私保护带来更先进的方案。Occlum1.0经历了40多次版本升级，全面支持了蚂蚁集团与英特尔联合研发的Spark大数据分析方案。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/08/088cf8f301006b3b383a5679e5ff2fce.png\" /></p><p>（2022中国计算机大会在线上举行，Occlum 1.0 在其“可信隐私计算研讨会”正式发布）</p><p></p><p>在数据上云的大趋势下，越来越多的关键数据被迁移到云端。如何解决数据上云后的安全和隐私保护问题。业界认为，以<a href=\"https://www.infoq.cn/article/spd7SzZWIp6ZsR8JaAqB\">可信执行环境（TEE）</a>\"为代表的机密计算提供了一种与不可信环境隔离的安全计算环境，通过隔离和可信验证机制完成安全计算，是实现云安全隐私保护的重要技术，填补了隐私计算对于云上数据保护的技术空白。</p><p>&nbsp;</p><p>相比于传统通过加密存储等保证云端数据存储安全的技术，TEE提供的云上隐私保护，可以使一些对数据安全性要求极高的传统行业，如金融、银行、政企等，更加放心地使用公有云服务。TEE是IBM、谷歌等云计算巨头采用的云安全技术，微软Azure Cloud、阿里巴巴、Hyperledger Avalon等也采用了TEE操作系统Occlum开展机密计算项目合作。Gartner近期发布的《2022年中国安全技术成熟度曲线》中提到，TEE在云厂商的推广之下，未来会被更广泛地使用。</p><p>&nbsp;</p><p>2021年，为了发展机密计算社区，蚂蚁集团将Occlum捐献给Linux基金会机密计算联盟CCC，成为了机密计算联盟社区首个中国发起的开源项目。2021年，Occlum入选了中国科协颁布的 “科创中国”开源创新榜年度优秀开源产品。今年5月，龙蜥社区成立的七大云原生机密计算特别兴趣小组，Occlum是7大开源项目之一。</p><p>&nbsp;</p><p>“机密计算是实现数据安全隐私保护的重要技术，填补了隐私计算技术中对于保护上云数据安全性的技术空白。”蚂蚁集团资深总监闫守孟表示，“我们将继续推动机密计算技术研发，参与行业共建，持续提高开源产品的易用性、安全性、稳定性，满足更多不同运算场景下的安全需求，强化在云端的分布式隐私保护方案的创新与实践。</p><p>&nbsp;</p><p>据了解，隐语技术栈是蚂蚁集团沉淀了6年隐私计算技术与应用的集成之作，集千余项隐私计算专利，包含隐私计算一体机、可信计算基座、可信隐私计算框架三层，覆盖当前所有主流隐私计算技术。目前，该技术栈大多数核心技术已对行业开源开放。</p><p>&nbsp;</p><p>2019年开源的Occlum，是隐语技术栈可信计算基座里的重要操作系统，已经获得了超1000次用于评价社区质量的star数。</p>",
    "publish_time": "2022-12-12 16:08:09",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]