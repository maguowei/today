[
  {
    "title": "Visual Studio 17.9第2个预览版发布，改进.NET MAUI、C++、远程Linux单元测试、团队工具包等",
    "url": "https://www.infoq.cn/article/kXKT2GwtAGfLT0lejshe",
    "summary": "<p>微软发布<a href=\"https://devblogs.microsoft.com/visualstudio/visual-studio-17-9-preview-2-has-arrived/\">Visual Studio 2022 17.9第2个预览版</a>\"，这是2023年最后一个版本，也是对2023年开发工作的一个总结。在<a href=\"https://www.infoq.com/news/2023/11/vs2022-v17-9-preview-1/\">11月发布的第1个预览版</a>\"的基础上，本次更新带来了C++、.NET MAUI、远程Linux单元测试、团队工具等方面的改进和新特性。</p><p>&nbsp;</p><p>对于C++，#include诊断有了显著的改进。这个增强使得这项功能变得更为健壮，让开发人员可以可视化代码中每条#include指令的出现次数。</p><p>&nbsp;</p><p>如前所述，开发人员可以通过单击指令顶部的引用计数来查看特定的引用，并可以通过双击导航到任何引用。此外，该特性经过扩展之后还可以显示#include指令在Build Insights之后的编译时间，从而提供有价值的代码库洞察。</p><p>&nbsp;</p><p>另外一项重要的增强是<a href=\"https://devblogs.microsoft.com/visualstudio/visual-studio-17-9-preview-2-has-arrived/#auto-surround-with-quotes-or-brackets\">自动添加引号或括号</a>\"，提高生产力。现在，开发人员可以非常轻松地给选中的内容加上括号分隔符（包括双引号、单引号和圆括号）。该功能可以在Visual Studio中通过工具&gt;选项下的文本编辑器设置打开或关闭。</p><p>&nbsp;</p><p><a href=\"https://devblogs.microsoft.com/visualstudio/visual-studio-17-9-preview-2-has-arrived/#live-property-explorer-support-for-net-maui\">Live Property Explorer(LPE)</a>\"的引入增强了. NET MAUI的开发体验。该工具旨在简化开发，让开发人员可以在调试时检查XAML属性。Live Property Explorer可以与XAML Live Preview和Live Visual Tree结合使用，为调试、性能优化和属性检查提供了一个很好的解决方案。</p><p>&nbsp;</p><p>要使用Live Property Explorer，开发人员需要开始调试他们的.NET MAUI应用，并导航到Debug &gt; Windows &gt; Live Property Explorer。启用之后，Live Property Explorer将为开发人员提供一种在运行时实时浏览和编辑属性的方法。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5d/5d17624d4cf0ef112ab2530fac7a181b.png\" /></p><p></p><p>Live Property Explorer的用法，<a href=\"https://learn.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#live-property-explorer-support-with-net-maui\">图片来源</a>\"：Visual Studio发布说明</p><p>&nbsp;</p><p>据报道，根据用户反馈，Visual Studio 2022现在支持<a href=\"https://developercommunity.visualstudio.com/t/ctest-support-for-remote-linux-targets/431771\">远程Linux单元测试</a>\"。这个增强功能支持在Test Explorer中的WSL或远程系统上执行面向Linux的C++项目的单元测试。据说，一些特定场景中存在的限制将在17.9的第3个预览版中得到修复。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a8/a8c4622f7f9e74e373f6e37115d8506e.png\" /></p><p></p><p>远程Linux单元测试的用法，<a href=\"https://devblogs.microsoft.com/visualstudio/visual-studio-17-9-preview-2-has-arrived/\">图片来源</a>\"：Visual Studio 17.9 Preview 2发布公告</p><p>&nbsp;</p><p>该版本还有一项重要的更新是<a href=\"https://learn.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#sql--ssdt\">SQL/SSDT改进</a>\"，例如删除ADDefaultAuthentication中Username的红色警告图标。其次，它还引入了3种新的身份验证类型，以便与Subsystem标准保持一致：ActiveDirectoryManagedIdentity、ActiveDirectoryServicePrincipal和ActiveDirectoryDefault。此外，它还实现了一些标准的Bug修复和性能改进。</p><p>&nbsp;</p><p>现在，在Visual Studio IDE右上角的身份选择器旁边，Visual Studio企业版和专业版用户会看到一个新图标<a href=\"https://learn.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#benefit-awareness-diamond-for-visual-studio-enterprise-and-professional-subscribers\">Benefit Awareness Diamond</a>\"。据报道，该功能的目的是让付费用户未来可以更方便地获取福利信息以及更新。</p><p>&nbsp;</p><p>在生产力方面，Git储存库窗口、分支和tag标签现在可以动态调整大小，这改进了Git图的可视度，为开发人员提供了更好的体验。</p><p>&nbsp;</p><p>最后，<a href=\"https://learn.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#microsoft-teams-toolkit\">Microsoft Teams Toolkit</a>\"的改进包括支持在工具包模板中选择dotnet框架版本。此外，工具包模板还为Outlook和Office.com提供了预览和调试功能，扩展了工具包的功能和兼容性。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/47/474699c08923cdd6e4de714102d2c7ac.png\" /></p><p></p><p>使用dotnet框架选项新建一个Teams应用，<a href=\"https://learn.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#live-property-explorer-support-with-net-maui\">图片来源</a>\"：Visual Studio发布说明</p><p>&nbsp;</p><p>微软和开发团队鼓励用户提供<a href=\"https://learn.microsoft.com/en-us/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2022\">反馈</a>\"并分享关于新特性和改进的<a href=\"https://developercommunity.microsoft.com/VisualStudio/suggest\">建议</a>\"，并保证会不断增强Visual Studio的体验。</p><p>&nbsp;</p><p>最后，如果想进一步了解关于Visual Studio 2022 IDE这个版本和其他版本的更新、更改和新特性，请查看<a href=\"https://learn.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#1790-pre20--visual-studio-2022-version-179-preview-2\">发布说明</a>\"。</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/12/vs2022-v17-9-preview-2/\">https://www.infoq.com/news/2023/12/vs2022-v17-9-preview-2/</a>\"</p>",
    "publish_time": "2024-01-12 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "简单而强大：这些场景无JavaScript也能轻松应对",
    "url": "https://www.infoq.cn/article/bqpC7hkyz9VREYX6OTpi",
    "summary": "<p>请不要因为文章的标题而对我心怀敌意。对于JavaScript，我只有喜爱没有讨厌，与此同时，我每天还会编写大量的JavaScript代码。不过，除了JavaScript之外，CSS和HTML也都是我非常喜爱的技术。我之所以偏爱这三种技术是有些原因的。</p><p></p><p></p><h1>最小能力原则</h1><p></p><p>&nbsp;</p><p>Web开发的第一核心原则就是“最小能力原则”。换而言之，也就是当我们实现目标时，应该选择相对较轻量的编程技术去实现。</p><p>&nbsp;</p><p>依据此原则，也就意味着在Web开发中，对于相同功能的实现，开发者应该优先考虑HTML，其次是CSS，最后才是JS。由于JS使开发者可以控制浏览器的行为，所以JS在三种技术中使用的最广泛。不过，JS也会因为诸如外部资源加载失败、解析异常、执行错误等原因，从而导致其对浏览器的控制失效。此外，JS对诸如依赖键盘、依赖额外辅助设备等对可访问性有要求的用户的支持也不够友好。</p><p>&nbsp;</p><p>与命令式的JS不同，HTML和CSS是声明式的。因此与使用JS的情况不同，在使用HTML和CSS时，开发者是告诉浏览器做什么，而不是怎么做。这也就意味着浏览器可以自己选择怎么做，从而以最高效的方式实现。</p><p>&nbsp;</p><p>由于HTML和CSS的各项功能都是浏览器原生支持的，因此这些功能通常会有更好的性能、更原生、具备更好的用户体验，对可访问性的支持也更好。虽然并非所有的场景都优于JS（特别是在可访问性方面），但大多数时候，利用浏览器原生功能来实现复杂逻辑，会给用户带来更好的使用体验。</p><p>&nbsp;</p><p></p><h1>但是，我离不开JS</h1><p></p><p>&nbsp;</p><p>也许你会想：“我用JS实现的所有功能，都需要JS才能实现。”这种想法可能是对的，但值得注意的是，无论是浏览器制造商还是规范编写者，他们已经将许多功能转移到了CSS和HTML上，这些功能在几年前还必须使用JS才能实现。这就是本文要讨论的内容。</p><p>&nbsp;</p><p>Web开发中的一个棘手之处在于，一旦你学会了如何构建某个东西，就再也没有必要重新再学一次。因为这是Web开发行业达成的常识约定：Web是向后兼容的（虽然有极少数例外情况，但第一个网页在当前所有现代浏览器上仍然可以正常运行）。</p><p>&nbsp;</p><p>这也就意味着，你所学到的实现方案将会成为你工具箱中的一部分，你可以一直重复实现它，并且每次都能正常运行。所以我接下来会给出一些比较酷的示例，希望文章中的这些示例让你能明白，那些当初你认为必须通过JavaScript才能解决的问题，其实并不一定现在仍然需要（这也是我为什么列举这些示例的原因）。所以，如果你能时不时尝试这些设想，或许你能开发出更好的网站。</p><p>&nbsp;</p><p></p><h1>自定义开关</h1><p></p><p>&nbsp;</p><p>自定义开关，是所有Web开发人员都不可规避的一个功能，那么我们就从如何实现一个自定义开关来开始本文。设计师的需求是实现一个漂亮的开关功能而不是一个复选框。与使用div、onclick事件处理程序和内部状态的JS解决方案不同，这里我们将通过普通的checkbox和:checked伪类来实现。下面是我们将要用到的HTML代码：</p><p>&nbsp;</p><p><code lang=\"null\"><label>\n  <input type=\"checkbox\" />\n  My awesome feature\n</label></code></p><p>&nbsp;</p><p>在上面的代码中有一个label元素，里面包含一个复选框。这样做的好处是浏览器会默认为我们做一些事情。由于输入框位于label标签的内部，因此浏览器会将它们关联起来，所以现在我们在label标签的任何位置进行点击，都能操作复选框的切换，而无需任何onclick事件的处理程序。浏览器免费为我们实现了这个功能。如果单单就功能而言，我们就已经完成了。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/15/150f2d89a51f33e5a98cf563f6346ace.png\" /></p><p></p><p>&nbsp;</p><p>当然，上面这种外观，设计师可能不喜欢，所以我们需要创建一个外观开看起来还不错的自定义开关。那么接下来，让我们给自定义开关添加一些CSS：</p><p>&nbsp;</p><p><code lang=\"null\">input {\n  appearance: none;\n  position: relative;\n  display: inline-block;\n  background: lightgrey;\n  height: 1.65rem;\n  width: 2.75rem;\n  vertical-align: middle;\n  border-radius: 2rem;\n  box-shadow: 0px 1px 3px #0003 inset;\n  transition: 0.25s linear background;\n}\ninput::before {\n  content: \"\";\n  display: block;\n  width: 1.25rem;\n  height: 1.25rem;\n  background: #fff;\n  border-radius: 1.2rem;\n  position: absolute;\n  top: 0.2rem;\n  left: 0.2rem;\n  box-shadow: 0px 1px 3px #0003;\n  transition: 0.25s linear transform;\n  transform: translateX(0rem);\n}</code></p><p>&nbsp;</p><p>上面样式的具体细节并不重要，但我希望你注意第一条样式规则：appearance: none。</p><p>&nbsp;</p><p>表单元素和图像元素都属于一种被称为“替换内容”的元素。这意味着，在HTML中这些元素的内容是由浏览器提供的，而非标签本身。在浏览器渲染HTML过程中，当发现替换内容时，它会为其留下一个盒子，然后会用实际内容来替换该盒子。这就是为什么诸如图像、表单等 “替换内容”元素不能有伪元素的原因：当浏览器把整个元素替换掉时，这些伪元素也会同时被替换掉。</p><p>&nbsp;</p><p>给元素设置appearance，是禁止浏览器这种行为的方式之一。它告诉浏览器：“谢谢，但我想自定义我的表单控件样式”。这样我们就可以使用::before伪元素了。现在输入框本身就是我们开关的背景，而::before伪元素就是其中负责切换功能的小圆</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/11/119de8a028c45f7944b978d8aa262db0.png\" /></p><p></p><p>&nbsp;</p><p>点击仍然会触发复选框选中和未选中的切换，但由于我们替换了元素，所以选中和未选中的状态展示需要我们自己处理。因此我们引入:checked伪类来实现此功能：</p><p>&nbsp;</p><p><code lang=\"null\">:checked {\n  background: green;\n}\n:checked::before {\n  transform: translateX(1rem);\n}</code></p><p>&nbsp;</p><p>当你点击复选框时，:checked伪类开始匹配，从而实现样式的更新。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2c/2cc77b9ebf8a6432b7db492fcf41948d.png\" /></p><p></p><p>&nbsp;</p><p>到目前为止，通过原生的HTML元素和一些CSS我们创建了一个外观漂亮的自定义开关，但事情还没完。因为，对于使用鼠标的用户来说，可以很明显的知道他们正在与哪个表单控件进行交互（因为他们可以指向并点击），而对于使用键盘的用户来说，情况就不那么容易了。</p><p>&nbsp;</p><p>译注：下图是使用键盘操作的时候出来的样式：</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/72/724b0201aee0d79427512519a6af31db.png\" /></p><p></p><p>&nbsp;</p><p>我相信你对下面这段CSS代码会很熟悉。这段CSS代码是为了将那个丑陋的、虚线的、方形的外边框去掉。</p><p>&nbsp;</p><p><code lang=\"null\">input:focus {\n  outline: none;\n}</code></p><p>&nbsp;</p><p>如果你正在阅读这篇文章，那么后面会知道这不是一个好的实现方式。但是我们如何才能让它看起来更好呢？在这方面，浏览器也进行了更新，为我们提供了更好的体验。现在元素边框的圆角设置同样会在外边框上生效，并且我们还可以将其偏移或嵌入到元素内部：</p><p>&nbsp;</p><p><code lang=\"null\">input:focus-visible {\n  outline: 2px solid dodgerblue;\n  outline-offset: 2px;\n}</code></p><p>&nbsp;</p><p>现在，当用户使用键盘与元素进行交互（你可以尝试在点击后按下空格键，或者使用Tab键切换到它），:focus-visible会生效（使用鼠标时不会），并且它们会在元素周围显示一个好看的、蓝色的轮廓线。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/cd/cd5966fd22e50b0009121cdfe86d0159.png\" /></p><p></p><p>&nbsp;</p><p>最后，我希望你将上面那个outline: none替换为如下内容：</p><p>&nbsp;</p><p><code lang=\"null\">input:focus {\n  outline-color: transparent;\n}</code></p><p>&nbsp;</p><p>两个CSS代码都将产生相同的效果：这里是通过将外边框颜色设置为透明，而不是通过隐藏外边框来实现的。这样做的好处是，对于打开了高对比度模式（也称为强制颜色）的用户而言，此时外边框会再次显示出来，因为在高对比度模式下，透明颜色会被用户所选择的颜色替代，从而帮助他们看清楚正在与之交互的内容，即使他们使用鼠标也一样有效果。</p><p>&nbsp;</p><p>本文篇幅不足以详细介绍强制颜色的功能，但如果你想了解更多，请查看我的文章<a href=\"https://polypane.app/blog/forced-colors-explained-a-practical-guide/\">《强制颜色解析》</a>\"。</p><p>&nbsp;</p><p></p><h1>Datalist，一个原生的自动输入建议元素</h1><p></p><p></p><p>在你的下一个项目中，不要安装任何实现自动输入建议的框架，尝试使用一下datalist元素。该元素是浏览器内置的一种实现用户在输入框中输入时，自动以数据列表显示输入建议的方式。</p><p>&nbsp;</p><p><code lang=\"null\"><input list=\"frameworks\" />\n<datalist id=\"frameworks\">\n  <option>Bootstrap</option>\n  <option>Tailwind CSS</option>\n  <option>Foundation</option>\n  <option>Bulma</option>\n  <option>Skeleton</option>\n</datalist></code></p><p>&nbsp;</p><p>你可以通过在HTML中添加一个带有ID属性和一组选项值的datalist元素来使用它。不用担心，该元素默认是不可见的。然后，你需要在输入框上通过设置list属性来将两者关联起来。使用效果如下：</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ef/ef67fc7120257221f7ebb742617f7dba.png\" /></p><p></p><p>&nbsp;</p><p>当用户在输入框中输入时，浏览器会将datalist显示为下拉列表，并根据用户输入自动过滤选项。由于它本质上依然是一个普通的输入框，所以用户仍然可以输入自定义值。最后，用户可以通过选择输入框来查看数据列表，并通过箭头建进行数据导航。当然，用户也可以通过点击浏览器默认添加的下拉图标来查看所有的数据选项。</p><p>&nbsp;</p><p></p><h1>功能丰富的颜色选择器</h1><p></p><p></p><p>市面上有很多外观漂亮的颜色选择器，这些颜色选择器除了拥有漂亮的画布界面之外，还有通过上百行JS代码实现的滑块功能。但是你知道吗？其实你可以使用浏览器原生的颜色选择器。</p><p>&nbsp;</p><p><code lang=\"null\"><label> <input type=\"color\" /> Color </label></code></p><p>&nbsp;</p><p>这一行HTML代码就可以给你一个带有漂亮界面的颜色选择器，这就已经节省了大量的JavaScript代码。除此之外，因为我们将实现让给了浏览器来处理，所以实际上我们还可以免费获得更多功能。在Chromium浏览器中，这个原生的颜色选择器还可以让你从屏幕上的任何位置选择颜色，这真的是太棒了！</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/7f/7f4e1540ee2bcdea26c7d9c8ca555b68.png\" /></p><p></p><p>&nbsp;</p><p>不过这里值得注意的一点是，虽然浏览器显示了一个漂亮的颜色选择器，但不一定你的所有用户都可以使用它。因此提供其他选择颜色的方式（比如常规文本输入）仍然是一个好的选择。</p><p>&nbsp;</p><p></p><h1>手风琴（Accordions）</h1><p></p><p></p><p>Accordions是一种很好的帮助我们更好地组织页面上的大量内容，使其结构更清晰，避免展示杂乱无章的方式。而浏览器也已经为我们提供了免费的实现方式，开发者通过使用details和summary元素来实现：</p><p>&nbsp;</p><p><code lang=\"null\"></code></p><details><code lang=\"null\">\n  My accordion\n  <p>My accordion content</p>\n</code></details><p></p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/41/41bf3a16382f4e49f32135172074037b.png\" /></p><p></p><p>&nbsp;</p><p>&nbsp;</p><p>默认情况下，details元素中除了summary元素之外，其余元素内容都是隐藏的。当用户点击summary元素时，浏览器才会显示其余的内容。</p><p>&nbsp;</p><p>通常情况下，在一组accordions中，会有一个默认处于展开状态，而其他的则默认处于收起状态。这一点，你可以通过使用open属性来实现：</p><p>&nbsp;</p><p><code lang=\"null\"></code></p><details open=\"\"><code lang=\"null\">\n  My accordion\n  <p>My accordion content</p>\n</code></details><p></p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/63/63000a1ef369372c855456d414075829.png\" /></p><p></p><p>&nbsp;</p><p>如果你是React使用者，可能会认为：“太好了，现在它有了open属性，就再也不会收起了。”但还好并非如此。open属性只是初始状态，当用户与accordions进行交互时，它会根据用户的操作自动进行更新。</p><p>&nbsp;</p><p>在样式上，details元素也为我们提供了解决方案。那个小三角形（一旦设计师看到它，就会立刻想要替换掉）是一个伪元素::marker，你可以对其进行样式设置：</p><p>&nbsp;</p><p><code lang=\"null\">summary::marker {\n  font-size: 1.5em;\n  content: \"📬\";\n}\n[open] summary::marker {\n  font-size: 1.5em;\n  content: \"📭\";\n}</code></p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f9/f913a0d82635444e561a27ceeda7c712.png\" /></p><p></p><p>&nbsp;</p><p>但值得注意的是，更改内容可能会影响辅助技术对你的accordions的解析。你可以阅读Manuels的文章<a href=\"https://www.matuzo.at/blog/2023/details-summary\">《details/summary的一致性问题》</a>\"来了解更多。此外，对于Safari浏览器，你需要使用::-webkit-details-marker伪元素来处理浏览器差异性问题。</p><p>&nbsp;</p><p>伪元素::marker的样式设置选项相对有限（许多 CSS 属性对其不起作用，例如无法将其完全定位到不同的位置）。但你可以替换其内容，例如使用表情符号，或设置背景颜色或图像，并更改其字体大小。</p><p>&nbsp;</p><p>通过open属性，你可以轻松地分别为展开状态和收起状态设置不同的样式。</p><p>&nbsp;</p><p>最后，我们需要对summary元素进行一些处理。虽然它是可点击的，但其与a链接元素和按钮元素都不同；当鼠标悬停的时候，它既没有指针光标，也没有类似按钮那样的hove态。因此，我认为我们应该为它添加鼠标悬停和焦点状态，以帮助访问者可以意识到它是可点击的：</p><p>&nbsp;</p><p><code lang=\"null\">summary:hover,\nsummary:focus {\n  cursor: pointer;\n  background: deeppink;\n}</code></p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e6/e6a619e3c63edc6c54bc3b1d9c8e1be3.png\" /></p><p></p><p>&nbsp;</p><p>在这里，我不想进行“只有链接才应该具有指针光标”的讨论，我的主要观点是你需要做一些处理来提醒用户。</p><p>&nbsp;</p><p></p><h1>对话框</h1><p></p><p></p><p>有时候，你需要向用户展示一些信息，或者询问他们问题，或者让他们确认某些事情。在JavaScript中，这就是alert()、prompt()和confirm()的作用。但它们有一个很大的问题：它们会锁定主线程。这意味着你的页面无法做其他任何事情。而且它们是浏览器原生的，无法根据你的设计进行样式定制化。</p><p>&nbsp;</p><p>如果你自己构建一个对话框，也会遇到一些麻烦：为了支持可访问性，你需要确保对话框内部能获得焦点，此外还需要声明它是模态对话框，以确保用户无法意外关闭它，最后还要与可能设置了z-index为2147483647的聊天小部件进行斗争（如果你知道这些小部件的存在的话）。</p><p>&nbsp;</p><p>因此，现代浏览器为我们提供了原生的对话框元素：</p><p>&nbsp;</p><p><code lang=\"null\"></code></p><dialog><code lang=\"null\">\n  <form method=\"dialog\">\n    <h3>This is a pretty dialog</h3>\n    <button type=\"submit\">Close</button>\n  </form>\n</code></dialog><p></p><p>&nbsp;</p><p>默认情况下，对话框元素不会显示出来。现在，我会稍微作弊一下，通过JavaScript来控制其显示和隐藏：</p><p>&nbsp;</p><p><code lang=\"null\">document.querySelector(\"button\").addEventListener(\"click\", () =&gt; {\n  document.querySelector(\"dialog\").showModal();\n});</code></p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f7/f7febad86d2160db7349a98921bf88f8.png\" /></p><p></p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/be/be0e77e0bcba8f4c72b00878e8598b51.png\" /></p><p></p><p>&nbsp;</p><p>虽然行业正在推动不依赖JavaScript来控制对话框的显示，有一些工作正在进行中，但它们尚未完全规范化，更不用说实现了。所以目前，我们仍然需要使用JavaScript来打开对话框。但仅此而已，其余的都是原生的HTML和CSS。</p><p>&nbsp;</p><p>对话框元素具有一个叫做showModal()的函数，通过它来打开对话框。对话框会打开在一个称为Top layer的东西上面，这是浏览器中的一个新概念。如果你想了解更多信息，请参阅MDN上关于<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Top_layer\">Top layer</a>\"的解释。</p><p>&nbsp;</p><p>Top layer是一个与你的HTML分离的新层，你可以将元素“提升”到这个层级。这意味着，不管元素的z-index和堆叠上下文嵌套如何，位于Top layer的元素将始终在其他所有元素之上。</p><p>&nbsp;</p><p>你可能会注意到浏览器并没有给打开状态的对话框提供任何用户界面。对话框实际上只是一个div元素（不是按钮！），因此你需要自己为对话框提供用于关闭的用户界面。这就是上面代码中的表单元素的作用。你可能已经注意到，该表单的method属性值是\"dialog\"。此时，当该表单被提交时，浏览器会将其视为关闭对话框的信号。</p><p>&nbsp;</p><p>通过这种方式，你还可以创建确认对话框，提供两个按钮，每个按钮都有自己的值。</p><p>&nbsp;</p><p><code lang=\"null\"></code></p><dialog><code lang=\"null\">\n  <form method=\"dialog\">\n    <p>Tabs or spaces?</p>\n    <button type=\"submit\" value=\"wrong\">Tabs</button>\n    <button type=\"submit\" value=\"correct\">Spaces</button>\n  </form>\n</code></dialog><p></p><p>&nbsp;</p><p>可以通过监听对话框的close事件来处理用户的按钮点击，并通过“returnValue”属性来获取对应按钮的值。</p><p>&nbsp;</p><p><code lang=\"null\">dialog.addEventListener(\"close\", function () {\n  console.log(dialog.returnValue);\n});</code></p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/90/90bb0683b80f6e872cb61e6d6a12aa61.png\" /></p><p></p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/eb/ebfe14a2fed1ce7880686118baf7156a.png\" /></p><p></p><p>&nbsp;</p><p>如果对话框中还有其他表单数据，你也可以以<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FormData\">formData</a>\"的方式读取它们。</p><p>&nbsp;</p><p>由于对话框本质上是一个div元素，你可以根据自己的喜好进行样式设置。浏览器会自动将其居中显示在屏幕上，但其他所有内容你都可以自定义。</p><p>&nbsp;</p><p>除此之外，对话框还提供了一个称为::backdrop的新伪元素。它位于对话框和页面其他部分之间，你可以对其进行样式设置，例如调暗页面的其他部分或以其他方式引导用户关注对话框。例如，你可以添加一个白色覆盖层并模糊页面。</p><p>&nbsp;</p><p><code lang=\"null\">dialog::backdrop {\n  background: #fff5;\n  backdrop-filter: blur(4px);\n}</code></p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6c/6c9b6579f097f8e3d90b486482b19c43.png\" /></p><p></p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5d/5d26004ba60d6d3df6d29d4761d628d9.png\" /></p><p></p><p>&nbsp;</p><p>与对话框元素本身一样，背景层也是由浏览器自动进行定位。因此你不需要担心页面滚动、固定元素和浏览器大小调整等情况。这一切都由浏览器自动处理。</p><p></p><h1>最后</h1><p></p><p></p><p>通过这篇文章，我希望你从中能发现了一些让你在下一个项目中可以少用一点JavaScript的东西。不过，每当你将一个经过大量实战验证的实现方式改成新的方式时，最好进行测试，特别是涉及到可访问性的时候，以确保你不会忽略任何用户。</p><p>&nbsp;</p><p>下面这些是我没有加到本文中的示例：</p><p>&nbsp;</p><p>使用scroll-behavior: smooth实现原生平滑滚动（但仅当prefers-reduced-motion: no preference匹配时才能生效），使用scroll-snap实现原生轮播图，使用position: sticky实现“视图内固定”的元素，……以及所有的和容器查询相关的示例。</p><p>&nbsp;</p><p>而且，如果我们展望未来的话，我们将会有更多很酷的东西：</p><p>&nbsp;</p><p>滚动驱动的动画使用grid-template-rows: masonry替代masonry.js实现砌砖布局使用新的selectlist元素实现完全可样式化的选择框（你可以对选择框的每个部分进行样式设置，而不破坏其所带来的所有原生功能）:has()选择器将消除一整类JavaScript选择器</p><p>&nbsp;</p><p>这篇文章是我在一个会议上做的演讲的改编版本，如何想更详细地了解关于本文内容的介绍或其他主题，你可以在观看视频：<a href=\"https://www.youtube.com/watch?v=ZTMUJu26b7Q\">不要再通过JavaScript实现它们：迁移JS功能到CSS和HTML</a>\"</p><p><a href=\"https://www.youtube.com/watch?v=ZTMUJu26b7Q\">https://www.youtube.com/watch?v=ZTMUJu26b7Q</a>\"</p><p>&nbsp;</p><p>所以，让我再次强调这篇文章的主要观点：</p><p>&nbsp;</p><p>仅仅因为你知道某个功能需要JavaScript，但并不意味着它仍然需要。如果你不时地测试这些尝试，你可以制作出更好的网站。</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.htmhell.dev/adventcalendar/2023/2/\">https://www.htmhell.dev/adventcalendar/2023/2/</a>\"</p><p></p><p></p><h5>相关阅读：</h5><p></p><p><a href=\"https://xie.infoq.cn/article/819c7ae045ecc83936afed4d1\">全网最全&nbsp;ECMAScript&nbsp;攻略</a>\"</p><p><a href=\"https://www.infoq.cn/article/dDXbcLHT7teNYSPL3sm7\">“TypeScript 不值得！... 反向迁移到&nbsp;JavaScript&nbsp;引争议</a>\"</p><p><a href=\"https://xie.infoq.cn/article/a4f9a16ebc0f866e312a06176\">JavaScript&nbsp;作用域深度剖析：动态作用域</a>\"</p><p><a href=\"https://xie.infoq.cn/article/6ff79700fb3bfa972c1beebf3\">TypeScript 与&nbsp;JavaScript：你应该知道的区别</a>\"</p>",
    "publish_time": "2024-01-12 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "我职业生涯最严重事故：基础设施变更引发的自动化灾难！",
    "url": "https://www.infoq.cn/article/yfoKmyc45XAh0rjqBhrH",
    "summary": "<p>作为一名高级工程师，最近我和我的团队经历了我职业生涯中最严重的一次事故。在 2023 年旧金山 QCon 大会的演讲中，我分享了这次故事。一个基础设施变更引入的自动化意外删除了关键客户数据。我们花了三天时间才完全解决故障并恢复数据。</p><p></p><p>回顾过去，有许多方面我们本可以做得更好——从防止最初的事故到改进我们的响应流程。我也看到了高级工程师在事故过程的各个阶段都有机会推动积极的变化。</p><p></p><p></p><h2>事故简况</h2><p></p><p></p><p>在发生事故的公司，基础设施是通过 Terraform 来管理的。平台团队（我的团队）评审并通过了 Terraform 的变更 PR，但这些变更是由产品团队提交的。当时，我们没有集中的系统来应用 Terraform 变更，这导致了基础设施变更的透明度较低，不清楚谁在什么时候做出了什么样的变更。这次事故是由一小段 Terraform 代码变更引起的，它判断自动化在 24 小时后过期并将数据对象标记为软删除。如果我们没有及时发现并解决问题，那么在下一个 24 小时后将永久删除这些关键的客户数据对象。</p><p></p><p>过了一天，我们的监控系统才开始向我们发出问题警报。在最初的问题诊断阶段，我们止住了损失并防止数据丢失，但不慎引发了第二次事故。不幸的是，这次事故被我们的客户率先发现。到了这个时候，许多处理事故的人已经感到疲倦或心烦意乱，而且试图解决问题的多个团队之间没有很好的协调。</p><p></p><p>花了三天时间，我们的高级和技术员工程师才修复了问题，几乎涉及了平台的每个部分。这是一系列问题和失误的汇合，就是这些问题和失误的汇合让这个变更成为漏网之鱼。</p><p></p><p></p><h2>影响因素</h2><p></p><p></p><p>瑞士奶酪模型是一种在风险分析或根本原因分析中经常用到的隐喻，说明使用多层次系统方法来保证安全性的必要性。我第一次了解到这个模型是在肯尼迪航天中心参与航天飞机项目时，在那里，安全性是重中之重。如果将这个模型应用于软件事故，那么每一片奶酪都代表我们对事故的一层防御。</p><p></p><p>在最初的事故中，虽然我们设置了多层防御来保护自己免受事故的影响，但所有的漏洞都神奇般对齐了，让这个问题成为漏网之鱼：</p><p></p><p>测试——没有在预生产环境中测试变更，验证是否按照预期的行为运行。代码评审——代码评审批准了变更，但没有任何问题或讨论。部署验证——在部署到生产环境后，没有验证变更是否按照预期行运行。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/b3/b3d3dd8710113d9d1454f46741100781.png\" /></p><p></p><p></p><h2>让防御性增强形成文化</h2><p></p><p></p><p>我们已经拥有一个充满支持性和包容性的文化。然而，没有哪种环境是完美的，甚至是一成不变的。即使是一个很好的文化仍然可能存在盲点，我们也是如此。在一个企业里，不断关注和培育文化是非常重要的。没有完美的文化，文化也不存在终点。作为技术领导者，你可以成为关注和培育文化的倡导者。</p><p></p><p>回顾这次事故，加强支持性文化可能会为我们的防御提供更多的保护。作为技术领导者，我可以树立积极的行为榜样——提升工作的透明度，承认知识上的不足，不断收集信息，并质疑假设。我也可以指导队友这么做。改进安全网可以让工程师们更出色地完成工作。</p><p></p><p></p><h3>测试与文化</h3><p></p><p></p><p>变更提交者应该知道测试的重要性。在后来的讨论中，我了解到他们不知道如何为这个变更制定适当的测试计划。深入挖掘后，我们发现他并不熟悉做出变更的领域。我们可以问，如果他不熟悉并且不知道如何测试，为什么不寻求帮助呢？问题是，我们没有问他为什么没有寻求帮助，只能推测他可能不愿意向任何人寻求帮助。</p><p></p><p>如果不知道他们为什么会有这种感觉，深入探究造成这种不适的因素可能具有挑战性。这是组织文化中需要持续关注和培育的重要方面。高级工程师在这方面具有很大的影响力。花点时间问问自己：“应该如何让他们更愿意寻求帮助？”然后跟进这些变化，这是非常值得的。我们可以推测，如果变更提交者知道他们应该测试他们所做的变更，并且愿意寻求帮助，可能就能够避免这次事故。</p><p></p><p></p><h3>代码评审与文化</h3><p></p><p></p><p>只要求进行代码评审是不够的。评审人员可能不会提出问题或关注点，即使他们不完全理解这些变更。我承认我也是这样的评审人员，我也不会提出问题，也不去进行调查，即使我知道这个变更属于我们平台的一个关键部分。我很关心代码，但不愿意向我的新团队承认我不理解潜在的影响。如果我提出问题，如果我有勇气袒露出自己的脆弱，并公开表示我不知道某些事情，也许能够帮我们避免这次的事故。</p><p></p><p>要解决人们不敢提问或承认自己不了解某些事情的问题并不容易。这是一个人类心理问题。即使你可以创造最具支持性、包容性的环境，人们有时仍然可能感到不舒适或不安全。作为领导者，我们应该始终努力改善环境，尽可能地包容每个人。</p><p></p><p></p><h3>部署验证与文化</h3><p></p><p></p><p>对于部署验证防御层，我们可以问变更提交者为什么在部署后没有验证他们的变更。虽然在事后分析中我们没有专门讨论这个问题，但我可以猜测可能是因为对如何验证这个问题并没有明确的期望。这一点，再加上变更提交者不了解如何验证他们的变更，很可能导致根本没有进行部署验证。这是另一个可以改善我们的文化来加强防御的地方。</p><p></p><p>我们可以将开发和测试的最佳实践融入到文化中，并清晰地定义开发人员或变更提交者完成任务需要完成哪些职责。高级工程师可以在培育这样的文化方面发挥重要作用。他们可以做出榜样，监督和指导队友遵循这些最佳实践。</p><p></p><p></p><h2>有效的事故响应</h2><p></p><p></p><p>一旦事故发生，随之而来的压力和迅速恢复服务的紧迫性意味着响应者的行为是被动的，协调不足。我们缺少权威的事故指挥官来维持大局。糟糕的交接导致在碎片化的工作流中做着重复的工作。疲劳导致了覆盖范围的空白。有些人去休息了，但没有明确说明什么时候会重新上线。</p><p></p><p></p><h3>事故指挥官角色</h3><p></p><p></p><p>高级工程师具备担任事故指挥官的能力。保持冷静，建立结构，推动定期的进度更新，并适时升级事故，让参与修复问题的人可以集中精力。</p><p></p><p>我们并不总是有一个明确指定的人来担任事故指挥官。如果有，那个人也会深入到诊断、故障排除和修复问题中。他们过于专注于自己的工作，导致他们很难充分地看到大局，管理更新，并与利益相关者沟通，或在必要时寻求适当的帮助。</p><p></p><p>我们也没有人协调时间表、期望或可交付成果。人们只是自愿或不自愿地承担某些事情，随时进入和退出，没有明确的工作交接或计划时间表。</p><p></p><p>高级工程师是担任事故指挥官角色的理想人选，他们甚至不需要加入到受影响的团队，事实上，如果不这样做可能会更好。</p><p></p><p>在面对突发事故时，需要有人能够保持头脑清醒，看清大局。事故指挥官可以从那些忙于工作的人那里收集状态，并与利益相关者进行沟通，让实际做事的人专注于他们的工作。他们可以做协调工作和消除障碍。他们可以确保清晰的沟通和期望，指明谁在做什么、他们的时间表和计划是什么。如果需要交接，事故指挥官也可以确保交接顺利进行。</p><p></p><p>事故指挥官也可以为自己考虑一下，如果你是事故指挥官，需要休息，或者随着情况的变化不再适合这个角色，你可以要求其他人接替你。任何人都不应该因为认为自己会被困在指挥岗位上而犹豫要不要去承担这个角色。整个事故过程中的任何一个角色和责任都应该能够根据情况的变化而变化。当事情发生变化时，我们只需要明确地做出说明。</p><p></p><p>所有这些都是高级工程师应该具备的技能和能力。一个高效的事故指挥官确实可以决定事故响应的成败。</p><p></p><p></p><h2>通过事后总结推动持续改进</h2><p></p><p></p><p>在解决问题之后，一个无责备的事后分析可以发掘出有价值的见解。它确实对我们有所帮助。但是，如果没有后续的行动项，这些价值就会退化。这又是一个提供务实领导的机会——在不做评判的情况下促进强有力的对话，并在彻底分析根本原因的基础上制定解决方案。</p><p></p><p>我们使用了一个自动化事故管理工具，有一个自动生成事后总结文档的模板，还有了关于进行事后总结讨论会议的指南和格式。我们甚至在每次事后总结讨论会议开始时都会阅读回顾原则，提醒每个人我们的无责备风格：</p><p></p><p></p><blockquote>“我们的事故处理过程是无责备的，我们不寻找或归咎责任，甚至不会将原因归咎于个人。无论我们发现了什么，我们都理解并真诚地相信每个人在当时的情况、他们的技能和能力、可用资源以及所处的情况下都已尽力而为。”</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/b2/b2f56a24e26126474e038e3eb0fee722.png\" /></p><p></p><p>最近，我们注意到主持这些总结会议的人只是阅读模板和走过场。他们只是确保他们召开了总结会议并写了事后总结文档，但质量很低。在根本原因分析或回顾事故管理流程方面几乎没有付出什么努力。他们很少有行动项，而那些已确定的行动项经常被遗忘或没有坚持到底。</p><p></p><p>这就是培育文化可以带来改变的一个例子。增加流程并不会帮助我们进行更有效的事后总结——我们已经有了很多流程。人们在这些会议上只是走过场，并不是因为他们懒惰，而更可能是因为这些工程师对于管理和促进反思相对生疏，不知道如何推动这些对话。真正的差异在于环境和文化。</p><p></p><p>作为工程文化的引导者，高级工程师应该抓住事故提供的关键的成长机会。我们应该持续改进，在加强安全、信任和弹性的基础上取得进步。即使你不是会议的组织者，也可以问一些试探性的问题。你可以表现出好奇心而不加评判。你可以进行模式化和指导根本原因分析。你可以帮助一起确定务实的行动项解决方案。</p><p></p><p>即使你没有直接参与事故处理，作为高级工程师，你也应该参加事后总结讨论会并阅读文档，这样你就可以影响整个过程，帮助提高产出的质量。事故是总结教训和找到改进空间的关键机会，高级工程师的参与有助于实现这一目标。</p><p></p><p></p><h2>根本原因分析</h2><p></p><p></p><p>在事后总结讨论中，进行彻底的根本原因分析是至关重要的。这有助于确定可以防止将来发生类似事故的措施。然而，在进行根本原因分析时，我们不应该只停留在第一个起因上。我们需要回顾每一个起因，并不断问为什么，直到没有更多的起因为止。当你在进行这种程度的分析时，常常会发现，环境或文化的某些因素导致了我们的防御层出现了相应的漏洞。作为技术领导者，你有绝佳的机去发现可能导致事故的文化差异，并确定解决这些问题的方法。改善工程师的文化是理想的做法，而不是增加更多可能影响生产力的流程。</p><p></p><p></p><h2>结论</h2><p></p><p></p><p>你无法只是通过改善工程文化来阻止所有的事故发生，但可以减少事故数量，并显著缩短解决这些事故所需的时间。你可以塑造、培育和鼓励一种学习型文化，在这种文化中，问题和脆弱性都是可被接受的。你可以担任事故指挥官，并有许多机会来改进事故响应。当事故发生时，你可以帮忙高效地解决问题。你可以提高事后总结过程的质量。你可以按照最适合改进你的环境并防止未来类似事故发生的方式来推动确定行动项。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/staff-engineers-impact-incidents/\">https://www.infoq.com/articles/staff-engineers-impact-incidents/</a>\"</p>",
    "publish_time": "2024-01-12 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Java近期新闻：Eclipse GlassFish 8.0.0-M1以及Spring、BellSoft和WildFly年度回顾",
    "url": "https://www.infoq.cn/article/C5VLiGGbPpthbVafxFfY",
    "summary": "<p></p><h4>OpenJDK</h4><p></p><p><a href=\"https://www.linkedin.com/in/biboudis/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Oracle高级技术员Aggelos Biboudis</a>\"<a href=\"https://mail.openjdk.org/pipermail/amber-spec-observers/2023-December/004183.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">发布</a>\"了<a href=\"https://openjdk.org/jeps/455?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">JEP 455</a>\"（模式、instanceof和switch中的原始类型(预览)）的更新<a href=\"https://cr.openjdk.org/~abimpoudis/instanceof/jep455-20231213/specs/instanceof-jls.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">草案规范</a>\"。这个JEP由Amber项目提出，目前处于Candidate状态，旨在通过允许在模式上下文中使用原始类型模式以及通过扩展instanceof和switch来支持原始类型来增强模式匹配。</p><p></p><h4>JDK 23</h4><p></p><p>近一周的<a href=\"https://jdk.java.net/23/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">JDK 23早期访问构建</a>\"版本没有变化。<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-23%2B3?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Build 3</a>\"仍然是最新的<a href=\"https://github.com/openjdk/jdk/compare/jdk-23%2B2...jdk-23%2B3?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">更新</a>\"版本。关于此版本的更多详细信息，请参阅<a href=\"https://jdk.java.net/23/release-notes?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">发布说明</a>\"。</p><p></p><h4>JDK 22</h4><p></p><p>同样，<a href=\"https://jdk.java.net/22/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">JDK 22的早期访问构建</a>\"版本也没有变化。最新的[更新]版本(https://github.com/openjdk/jdk/compare/jdk-22%2B28...jdk-22%2B29)仍然是<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-22%2B29\">Build 29</a>\"。关于此构建版本的更多详细信息，请参阅<a href=\"https://jdk.java.net/22/release-notes\">发布说明</a>\"。</p><p></p><p>对于<a href=\"https://openjdk.org/projects/jdk/23/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">JDK 23</a>\"和<a href=\"https://openjdk.org/projects/jdk/22/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">JDK 22</a>\"，开发者可以通过<a href=\"https://bugreport.java.com/bugreport/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Java Bug Database</a>\"报告错误。</p><p></p><h4>Eclipse GlassFish</h4><p></p><p>Eclipse <a href=\"https://glassfish.org/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">GlassFish</a>\" 8.0.0的<a href=\"https://twitter.com/OmniFishEE/status/1739022035534205001?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">第一个里程碑版本</a>\"支持Jakarta EE 11-M1，并完整实现了<a href=\"https://jakarta.ee/specifications/security/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Jakarta Security</a>\" 4.0.0-M1和<a href=\"https://jakarta.ee/specifications/faces/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Jakarta Faces</a>\" 4.1.0-M1规范，以及<a href=\"https://jakarta.ee/specifications/servlet/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Jakarta Servlet</a>\" 6.1.0-M1部分规范。目前要求最低的JDK版本为17，但可能会在下一个里程碑版本更新到JDK 21。关于此版本的更多详细信息，请参阅<a href=\"https://github.com/eclipse-ee4j/glassfish/releases/tag/8.0.0-M1?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">发布说明</a>\"。</p><p></p><h4>GraalVM</h4><p></p><p>Oracle宣布Oracle GraalVM可以作为<a href=\"https://paketo.io/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Paketo</a>\"构建包。Oracle与Paketo团队合作，将GraalVM集成到<a href=\"https://github.com/paketo-buildpacks/oracle/blob/main/README.md?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Oracle构建包</a>\"中。开发人员现在可以将Native Image和Oracle构建包都添加到构建包配置文件中来执行应用程序。</p><p></p><h4>Apache软件基金会</h4><p></p><p><a href=\"https://www.mail-archive.com/announce@apache.org/msg08800.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Apache Camel 3.22.0发布</a>\"，修复了错误、升级了依赖项，并增加了新功能和改进，例如：在<a href=\"https://camel.apache.org/components/4.0.x/quartz-component.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Camel Quartz</a>\"组件中支持开始和结束日期；可以使用旧的Micrometer计量器名称或遵循新的Micrometer命名约定；作为从<a href=\"https://camel.apache.org/components/3.21.x/others/opentracing.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Camel OpenTracing</a>\"迁移过程的一部分，提供了跟踪策略，用于追踪<a href=\"https://camel.apache.org/components/3.21.x/others/opentelemetry.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Camel OpenTelemetry</a>\"中的每一个处理器。更多关于此版本的详细信息，请参阅<a href=\"https://camel.apache.org/releases/release-3.22.0/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">发布说明</a>\"。</p><p></p><h4>Gradle</h4><p></p><p>Gradle 8.6的<a href=\"https://github.com/gradle/gradle/releases/tag/v8.6.0-RC1?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">第一个正式候选版本</a>\"提供了以下功能：通过GRADLE_ENCRYPTION_KEY环境变量来配置缓存中的自定义加密密钥；改进了错误和警告报告；改进了<a href=\"https://docs.gradle.org/8.6-rc-1/userguide/build_init_plugin.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Build Init Plugin</a>\"，支持各种类型的项目；增强了插件开发者和构建工程师的构建编写过程，方便开发自定义构建逻辑。关于此版本的更多详细信息，请参阅<a href=\"https://docs.gradle.org/8.6-rc-1/release-notes.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">发布说明</a>\"。</p><p></p><h4>Spring Framework</h4><p></p><p>Broadcom的Spring开发者布道者<a href=\"https://www.linkedin.com/in/joshlong/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Josh Long</a>\"发布了<a href=\"https://spring.io/blog/2023/12/26/this-year-in-spring-2023/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">2023年Spring亮点回顾</a>\"。其中包括：引入<a href=\"https://github.com/spring-projects/spring-ai/blob/main/README.md?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Spring AI</a>\"项目，支持人工智能；在<a href=\"https://spring.io/projects/spring-boot/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Spring Boot</a>\" 3.0+中持续支持GraalVM原生镜像；支持虚拟线程和<a href=\"https://wiki.openjdk.org/display/loom/Main?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Project Loom</a>\"；Spring Boot 3.2<a href=\"https://www.infoq.com/news/2023/12/spring-boot-virtual-threads/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">版本</a>\"支持协调恢复时检查点（CRaC）；支持基于Docker的开发，其中Spring Boot可以从本地Docker Compose描述文件或Testcontainers获取连接信息；以及<a href=\"https://www.infoq.com/news/2023/08/spring-modulith-1-0/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">发布</a>\"<a href=\"https://spring.io/projects/spring-modulith/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Spring Modulith</a>\" 1.0，提供了生产就绪性、IDE支持和改进的可测试性。</p><p></p><p>Long还发布了<a href=\"https://spring.io/blog/2023/12/28/a-bootiful-podcast-trifork-cto-joris-kuipers/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">最新一期</a>\"与<a href=\"https://trifork.com/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Trifork</a>\" CTO和前VMware高级顾问<a href=\"https://www.linkedin.com/in/jkuipers/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Joris Kuipers</a>\"一起录制的A Bootiful Podcast。在2023年10月阿姆斯特丹SpringOne大会的现场<a href=\"https://www.youtube.com/watch?v=97zcc5nKv40&amp;accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">视频</a>\"中。Long与Kuipers讨论了他的职业生涯、Spring生态系统和GraalVM等话题，并与观众进行了互动。</p><p></p><h4>BellSoft</h4><p></p><p>BellSoft CEO <a href=\"https://www.linkedin.com/in/alexanderbelokrylov/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Alex Belokrylov</a>\"<a href=\"https://bell-sw.com/blog/bellsoft-s-achievements-in-2023/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">回顾</a>\"了BellSoft在2023年的亮点，指出：</p><p></p><p></p><blockquote>这一年，我们克服了挑战，抓住了机遇，参加了富有成效的活动，参加了令人难忘的活动。</blockquote><p></p><p></p><p>技术亮点包括：引入<a href=\"https://bell-sw.com/alpaquita-containers-for-spring-boot-apps/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Alpaquita Containers</a>\"；推出性能版产品线，发布Liberica <a href=\"https://bell-sw.com/libericajdk-performance-edition/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">JDK 11 Performance Edition</a>\"；推出<a href=\"https://bell-sw.com/libericajdk-with-crac/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Liberica JDK with CRaC</a>\"；并持续致力于OpenJDK和GraalVM方面的工作，发布四个季度的安全补丁和关键修复。</p><p></p><p>BellSoft与Java社区的合作亮点包括：Bellsoft性能架构师<a href=\"https://www.linkedin.com/in/dchuyko/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Dmitry Chuyko</a>\"在JNation和Devoxx等全球28个技术活动中进行了30次演讲；参与了2023年9月在纽约举行的<a href=\"https://www.infoq.com/news/2023/09/jcp-25th-anniversary/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Java社区流程25周年庆典</a>\"。</p><p></p><h4>WildFly</h4><p></p><p>Red Hat高级首席软件工程师<a href=\"https://www.linkedin.com/in/brian-stansberry-5220636/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">Brian Stansberry</a>\"做了WildFly和Java社区贡献方面的年终<a href=\"https://www.wildfly.org/news/2023/12/22/Year-end-message/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">总结</a>\"。亮点包括：WildFly 28、29和30三个主要版本的发布；为<a href=\"https://github.com/eclipse/microprofile-telemetry/blob/main/README.adoc?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">MicroProfile Telemetry</a>\"和<a href=\"https://github.com/eclipse/microprofile-lra/blob/main/README.adoc?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQ5NjQ4NzMsImZpbGVHVUlEIjoiS3JrRWw1RDlyT1NuYUpxSiIsImlhdCI6MTcwNDk2NDU3MywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.5ZXWWw-GJGPEoc1lX5sbWhKkwuDAhh_spJfYa2v6gFE\">MicroProfile Long-Running Actions</a>\"规范提供了新的扩展；在即将发布的WildFly 31中实现了MicroProfile 6.0规范的大部分内容，并对MicroProfile 6.1进行了更新；支持JDK 21；在WildFly主要代码中解决了2000多个问题和增强功能；将WildFly代码库的许可协议改为Apache License 2.0。</p><p></p><p>他们还做了大量与改进WildFly入门相关文档和工具的工作。Stansberry还宣布，WildFly 31将于2024年1月发布。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2024/01/java-news-roundup-dec25-2023/\">https://www.infoq.com/news/2024/01/java-news-roundup-dec25-2023/</a>\"</p>",
    "publish_time": "2024-01-12 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "查询速度提升15倍！银联商务基于 Apache Doris 的数据平台升级实践",
    "url": "https://www.infoq.cn/article/5o9kIvM4cimqXSfh3RFH",
    "summary": "<p></p><blockquote>导读：在长期服务广大规模商户的过程中，银联商务已沉淀了庞大、真实、优质的数据资产数据，这些数据不仅是银联商务开启新增长曲线的基础，更是进一步服务好商户的关键支撑。为更好提供数据服务，银联商务实现了从 Hadoop 到 Apache Doris 的架构升级，使数据导入性能提升 2-5 倍、ETL 场景性能提升 3-12 倍、查询分析响应速度提升 10-15 倍，满足大规模数据导入和实时极速查询的业务需求，解决了业务和数据快速增长问题，提升了数据应用构建的效率，充分助力业务提效与数字资产的服务化，推进数字化进程的落地，展示了 <a href=\"https://doris.apache.org/\">Apache Doris</a>\" 在推动金融科技创新方面的巨大潜力。</blockquote><p></p><p></p><p>银联商务是国内大型的非银行支付机构，提供以银行卡收单、网络支付为基础的综合支付服务，以及多样化和专业化的商户增值和科技创新服务，始终致力于为商户、合作伙伴及消费者构筑普惠、便捷、高效、安全的支付环境。截至 2023 年 12月，银联商务已累计服务大中型、知名企业在内的各类商户超过 2500 万家，累计铺设终端超 4000 万台，实体服务网络覆盖中国大陆所有地级以上城市及港澳地区，收单交易笔数连续十年蝉联尼尔森亚太地区收单机构榜首。</p><p></p><p>如今，数据已经成为了推动经济增长的新动力，数字技术正在成为社会发展的重要引擎。随着数字经济的迅猛发展，金融企业纷纷加大在金融科技领域的投入，以提升自身的数字化运营能力，加速数字化转型的进程。在这一背景之下，银联商务以 “全量打通、准确实时、随需自助、智能交互” 为数字化转型目标，加快推进数字基础设施建设。</p><p></p><p>在长期服务广大规模商户的过程中，银联商务已沉淀了庞大、真实、优质的数据资产数据，这些数据不仅是银联商务开启新增长曲线的基础，更是进一步服务好商户的关键支撑。为了实现数据资产可管理、可视化、可赋能的建设目标，银联商务早在 2015 年就基于 Hadoop 体系构建了大数据平台，为公司及商户提供了数据支持。但随着业务的不断扩展，银联商务总公司各部门和分子公司对于数据应用的建设需求不断涌现，早期基于 Hadoop 的大数据平台已无法高效支撑拓展性、时效性与便捷性的业务需求，因此数据平台的迭代升级势在必行。</p><p></p><p>2020 年起，银联商务开启了数据平台的升级之旅，基于 Apache Doris 构建了新一代实时数据仓库架构，使数据导入性能提升 2-5 倍、ETL 场景性能提升 3-12 倍、查询分析响应速度提升 10-15 倍，满足大规模数据导入和实时极速查询的业务需求，解决了业务和数据快速增长问题，提升了数据应用构建的效率，充分助力业务提效与数字资产的服务化，推进数字化进程的落地。</p><p></p><h2>应用场景</h2><p></p><p>在长期为各行各业的海量商户提供服务的过程中，银联商务沉淀了大量的交易数据、用户数据、终端数据以及经营数据等。通过对这些数据的挖掘和利用，为银联商务总、分、子公司以及商户提供多元化的数据服务，可以发掘隐藏在其中的价值和消费趋势，成为掌握经营掌控、进行经营决策的有效工具。典型数据服务场景包括：</p><p></p><p>经营分析场景：建设指标体系和驾驶舱，帮助业务方及管理者实时了解整体业务经营状态。业务运营场景：建设标签体系，更好理解用户画像及需求，从而提供精准的产品和业务服务。数据分析和挖掘场景：构建自助分析和报表服务，更好地了解自己的业务情况并做出科学决策。对外数据服务场景：构建对账单、报表和数据报告服务，以帮助商户更好地了解市场需求。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8e/8e1a5f364e7f8ed19c0fd124b255a3f8.png\" /></p><p></p><p>为满足上述场景需求，银联商务早在 2015 年就引入了 Hadoop 体系构建了大数据平台，并基于 Hive 构建了离线数仓。该架构整合了来自 MySQL、Oracle、MongoDB 等多业务系统的数据，按照 T+ 1 的时效性归集到 Hive 离线数仓中，经由 Hive 数仓各层的加工处理后分别同步至不同组件中提供数据查询服务，包括基于 Kylin 与 HBase 构建 Cube 进行指标查询分析，并使用 HBase 进行增量数据的质量监测，同时还将处理完毕的数据同步到 Oracle 中提供业务数据查询。</p><p></p><p>该架构各组件各司其职、整体架构清晰，在早期承载了业务对于数据查询服务的需求。在移动支付快速席卷的浪潮下，支付场景更加多元化，银联商务业务规模稳步增长、总部及分子公司对于数据应用的建设需求不断涌现，而传统的大数据平台已经无法高效支撑业务和数据的不断增长，痛点逐步展现出来：</p><p></p><p>数据时效性：整体数据处理链路较长，大规模数据导入和加工处理的效率低，最新业务数据从生产到应用的时间间隔太长，无法充分发挥实时数据的价值；查询效率低：Kylin 早期承担了大多指标查询分析的需求，随着业务量增长、数据预处理的成本越来越高、无法支持灵活快速的分析诉求，而 Hive 在应对复杂查询时性能不足、只能依赖于堆加机器，这无疑大大增加了硬件资源成本；运维成本和可扩展性：整体架构涉及多个组件，运维工作量较大，在应对业务需求增长的过程中可扩展性不足，无法敏捷响应数据的快速增长和数据应用快速上线的要求。</p><p></p><h2>目标及选型</h2><p></p><p>面向各行各业的数千万商户、行业特点和实际需求各不相同，在对企业内部众多平台系统以及对客户提供的产品进行全面梳理后，银联商务确定了数字化转型要实现的核心目标——“全量打通、准确实时、随需自助、智能交互”。</p><p></p><p>具体而言，“全量打通”即各平台间充分互通、数据融合共享，便于更全面掌握数据主题的全方位信息、充分发挥数据的协同效应；“准确实时”即充分发挥数据的实时价值，并根据技术手段保证数据又“快”又“准”，为后续分析打好坚实基础；“随需自取”即提供自助式的服务，灵活组合、按需取用，甚至实现量身定制、因客而变；“智能交互”即充分利用技术手段，从被动式的接受服务，变成主动式的能力输出，提供分析、预测、辅助决策等智能服务，响应用户需求、实现双向交互。</p><p></p><p>而具体到数据服务层面，在为内外部客户提供数据服务的过程中，银联商务注意到用户对数据分析的性能、分析模式的灵活性、数据服务的稳定性以及数据应用的时效性有着更高的期望，因此我们决定对现有架构升级，旨在满足新的业务诉求、解决早期架构存在的问题，于是在 2020 年正式启动了银联商务数据架构的升级之旅，升级目标主要包含几方面：</p><p></p><p>统一、简洁：单一系统即可完成数据加工和服务的统一，以简化数据处理流程，提高工作效率；稳定、高效：支持高效的数据加工和高性能的数据查询，同时系统和平台的稳定性得以充分的保证；准确、实时：支持数据实时更新以及接入，保证数据准确、不丢不重；安全、可靠：确保数据访问和数据存储的安全性，支持集群灾备、数据高可靠；</p><p></p><p>基于以上目标，我们进行了深入的调研，在对比了多种大数据组件后，选择引入 Apache Doris 来构建新一代实时数据仓库架构。</p><p></p><h2>基于 Apache Doris 的新一代实时数仓架构</h2><p></p><p>在架构的迭代过程中，一方面我们需要务必保证业务无缝运转、避免系统切换造成业务体验受影响，另一方面需要兼顾与旧有架构的兼容、根据实际情况逐步迭代、渐进式调整，同时也希望充分发挥全新架构的能力优势，因此建设路径逐步明晰：</p><p></p><p>引入实时数据处理和分析链路，提升数据时效性；推动数据应用从离线迁至实时，并持续提升查询分析效率，为业务提效；打通离线与实时数据链路的屏障，统一数据口径和数据服务出口，提供一致性的数据服务体验；</p><p></p><p>因此在新的架构中，在原有离线数据仓库体系中增加了一条实时链路，通过 Kafka 将 MySQL 等各类业务数据库中的实时数据归集并传输到 Apache Doris 中，并利用 Flink 和 Doris SQL 对数据进行加工处理，在 Doris 内部构建了从 ODS 到 ADS 的数仓分层体系。同时基于 Doris 提供的 Multi-Catalog 能力打通对 Hive 数据的查询，避免了繁重的数据迁移成本。各上层数据应用统一对接 Doris 即可，无需在离线数据和实时数据间进行切换，由 Doris 统一对外提供查询服务。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0a/0a30d003c4823df7e80cae36292d5b94.png\" /></p><p></p><p>这一升级，极大提升了数据处理的效率和查询的便捷性，当前我们正逐步推进离线数仓向以 Apache Doris 为核心的实时数仓迁移，为更高效和更大规模的数据管理和分析做好准备。</p><p></p><p>接下来我们将介绍基于 Apache Doris 的实时数仓架构的规划与设计，我们将从数据模型、分桶策略、数据同步与加工方式出发，分享实时架构搭建的实践经验。</p><p></p><h2>实时数据仓库体系的建设与实践</h2><p></p><p>在建设数据仓库体系时，银联商务遵循边治理、边建设、边赋能的原则，数据治理为关键一环，而统一规划又是其核心内容。因此数据仓库的统一规划能够确保数据仓库结构设计的合理性，不仅有利于后续对架构的管理维护，也有利于对数据可靠性和一致性的保障。因此我们在数据仓库统一规划方面采取了以下措施：</p><p></p><h3>数仓分层的合理规划</h3><p></p><p>合理的数仓分层对数据的管理以及查询性能的充分发挥起着关键作用，基于 Apache Doris 丰富的数据模型，我们对数仓的分层进行了提前规划。先来了解 Doris 数据模型都具备哪些特性：</p><p></p><p>Duplicate Key 模型：适用于明细数据查询场景，可支持任何维度的即席查询；Unique Key 模型：适用于对数据有唯一性约束的场景、需要支持数据精确去重，或者有数据更新需求、可支持大宽表的多流 Upsert 和部分列更新；Aggregate Key 模型：适用于报表查询场景，通过数据的预聚合来加速报表分析。</p><p></p><p>结合实际应用场景和数据模型，我们来介绍银联商务数仓分层策略：</p><p></p><p>ODS 层主要采用 Duplicate Key 模型，例如在交易清算场景中，银联商务每天有几千万的清算数据需处理，清算日期跨度长达一年，这就要求所有数据能被完整地存储。为了满足这一需求，我们在 ODS 层选择 Duplicate Key 模型，完全按照导入文件中的明细数据进行存储，没有任何聚合操作。而部分商户订单数据涉及到订单状态的更新，因此采取 Unique Key 模型，在数据导入过程中如果商户 id 以及订单 id 相同时自动更新成最新状态。DWD 与 DWS 层所采取的数据模型基本相同，其本质差异在于对于业务数据的抽象程度，主要采用的是 Unique Key 模型，而部分有明细数据存储的场景还保留了 Duplicate Key 模型。以结算划付场景为例，将结算日期作为分区字段，设置表模型为 Unique Key 模型，通过这种方式能够实现跨度长达一年结算数据状态的自动更新。ADS 层作为高度业务数据的抽象，采用了 Aggregate Key 模型，通过对所有结算数据进行预聚合，可大幅提高数据查询和分析的效率，减少实时计算的压力。</p><p></p><h3>分桶分区策略的合理设置</h3><p></p><p>分区分桶是优化数据存储和提升查询效率的重要手段，合理设置分桶数和分桶字段可以有效提升查询速度和数据加工脚本的执行效率。在数仓应用中，我们参考实际数据规模和官网的设置建议，会对每一张表均规划了分桶字段和分桶数。例如，在分店宽表中经常需要查询分店维度数据，因此我们将分店作为分桶字段，并根据表的大小设置分桶数。以下是我们在不同 Tablet 下 Bucket 设置的数量，可供参考：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/59/59eca389d0aca1f34a2acea94ff40430.png\" /></p><p></p><h3>多源数据迁移方案</h3><p></p><p>在银联商务各分支机构数据迁移至 Doris 的过程中，我们发现分支机构本地系统采用的数据库种类繁多，文件存储格式也比较复杂，这给数据迁移工作带来不小的挑战。为确保数据迁移的顺利进行，我们针对不同数据和文件格式制定了相应的迁移方案。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a8/a811ac850cb61e5848da052be85a5278.png\" /></p><p></p><p>Doris 支持多种丰富的数据迁移方式，无论是离线数据同步还是实时数据同步，都能找到高效快捷的数据迁移方式：</p><p></p><p>在实时场景中，使用 Flink CDC 方式实时获取 MySQL Binlog，其中一部分数据直接通过 Flink CDC 写入 Doris，另一部分高流量数据则先同步至 Kafka 中进行削峰、再经由 Flink-Doris-Connector 写入到 Doris 中。在离线场景中，数据来源更加多样、并且文件格式也更加复杂，因此采用了多种方式进行数据迁移。对于 S3 和 HDFS 上的历史数据及增量数据，使用 Broker Load 进行批量导入；对于 Hive 及 JDBC 外表存储的数据，使用 Insert into 方式进行同步；对于文件格式的数据，使用 Flink Ftp Connector 和 Flink Doris Connector 同步（因 Ftp 方式在银联商务内部是跨系统的数据文件交互方式，文件的格式复杂，因此开发了 Flink Ftp Connector，可支持复杂的数据格式、支持多换行符等复杂应用场景）。</p><p></p><p>丰富的数据迁移方式使得我们可以轻松地将数据从各类数据库迁移至 Doris 中来，同时，多文件格式的同步解决了分支机构数据不统一、不规范的问题，大大降低了各分支机构数据迁移的难度及成本，为银联商务的数据整合和统一管理提供了有力支持。</p><p></p><h3>全量与增量数据的同步</h3><p></p><p>在大量离线数据同步的过程中，业务的连续性和数据的准确性保证十分重要，因此我们采取了两种方式来应对全量数据同步和增量数据同步。</p><p></p><p>在全量同步场景中，我们首先创建相同表结构的临时表，将全量数据导入临时表后、再利用 ALTER TABLE t1 REPLACE WITH TABLE t2 语句对临时表和正式表进行原子替换操作，该临时表即成为正式表，且前端业务查询不会有任何的阻滞。在增量同步场景则创建了新的增量分区，将增量数据直接同步至增量分区。</p><p></p><p><code lang=\"sql\">alter table ${DB_NAME}.${TBL_NAME} drop partition IF EXISTS p${P_DOWN_DATE};\nALTER TABLE ${DB_NAME}.${TBL_NAME} ADD PARTITION IF NOT EXISTS  p${P_DOWN_DATE} VALUES [('${P_DOWN_DATE}'), ('${P_UP_DATE}'));\n\nLOAD LABEL ${TBL_NAME}_${load_timestamp} ...\n</code></p><p></p><h3>离线数据加工任务迁移</h3><p></p><p>当前我们已经把离线数仓的数据加工任务直接迁移到 Doris 进行，采用 Doris SQL 进行数据加工处理，通过调度平台进行任务调度。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/3a/3a8880ec045d0ab470922231d2e2ad42.png\" /></p><p></p><p>以清分流水交易宽表场景为例，过去每天需加工三千万条数据、在 Hive 离线数仓采用的 TEZ 计算引擎进行数据加工，在分配 2T 的计算资源下，整条链路加工耗时长达 2.5 小时。当将数据加工任务迁移至 Apache Doris 后，仅使用过去一半的计算资源，即可将整条链路加工耗时缩短为 0.5 小时，整条链路执行效率提升 5 倍以上，且单个脚本执行时效也从 8 分钟提升到 10 秒。</p><p></p><h2>金融级数仓稳定性最佳实践</h2><p></p><p>当前 Apache Doris 在银联商务已广泛应用于多个业务场景，服务了内部各类经营分析报表、用户标签、自助取数平台等应用，并对外部商户提供了对账单、报表、数据报告等多种数据服务，因此集群的稳定性和可用性对于平台用户体验和业务连续性而言至关重要，任何集群故障或不稳定因素都可能导致业务决策受阻、用户信任度受影响。</p><p></p><p>因此银联商务采取大量措施来保证集群稳定性和可用性，包括多租户资源隔离、精细权限管理、集群灾备以及多种稳定性调优策略。</p><p></p><h3>多租户资源隔离</h3><p></p><p>在实际业务运行过程中，往往存在多个业务或者不同部门同时查询同一份数据的情况发生，在有限的资源条件下往往可能因查询任务件的资源抢占导致查询性能下降甚至集群不稳定，同时针对组织架构的不同层级对于数据的可见性要求也不一致，因此我们结合自身业务类型以及 Apache Doris 多租户资源隔离能力进行了深度应用。</p><p></p><p>单查询资源限制，保证查询间资源可控</p><p></p><p>在对内部多个应用进行梳理后，我们根据业务分析负载对场景和租户进行了细分，主要划分为数据加工（ETL）、数据探索（Ad-hoc）、数据看板（Reporting）和数据服务（Data Serving）四个场景。为确保各个场景及租户之间的独立性，我们对每个场景的单查询进行了资源限制。具体来说，我们为每个租户设置了四类 Doris 账号，并对账号的 CPU 和内存使用资源进行了限制，初始值统一设置为 5 CPU，后续则根据各租户使用情况进行微调，以达到适配的资源分配。目前银联商务各场景分配情况如下：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e1/e11e007e8ee3462b7efc1ecf2fbab75d.png\" /></p><p></p><p>该策略的优点在于，即使单个租户的资源使用量增加，也只会影响该租户在特定场景下的使用，不会对其他租户、其他场景产生任何影响，有效提升了平台的稳定性。</p><p></p><p>基于 Resource Tag 的多租户数据与查询隔离</p><p></p><p>而面对总-分公司的数据使用场景，我们采用了基于 Resource Tag 的资源组物理****隔离方式，以确保数据的安全性和独立性。</p><p></p><p>目前在 Apache Doris 中存储了丰富多样的数据，基于数据安全的角度考虑，对数据可见范围进行了精细划分，总公司可以访问到公司层的全部数据，而分公司只能访问自身业务范畴内的数据。除此以外，还有部分数据是由总公司授权分公司进行查询，或者分公司个性化数据需要与总公司数据进行关联。在这一场景之下，我们采取了 Resource Tag 的资源隔离模式，将数据和集群可用资源单独划分开来。</p><p></p><p>具体而言，我们为分公司配置独立的资源组，将分公司个性化数据以三副本的方式存储到独立资源组中，同时将总公司数据设置为四副本，将其中三副本存储在总公司资源组中，剩余单副本存储到分公司独立资源组中。当分公司查询总公司数据时，仅会查询分公司资源组中的单副本数据，通过这样的方式即保证了数据的安全性，也提高了系统的稳定性及可靠性。具体方案如下：</p><p></p><p>设置 BE 节点标签：分配总公司资源组和分公司资源组，并在服务器上设置对应标签。设置数据分布：建表时设置replication_allocation，同时将总分公司比例设置为 3:1，该比例可结合总分公司的实际使用情况灵活调整。设置用户资源组：为用户设置对应的默认资源组，总、分公司使用各自资源组，从而实现总分公司查询隔离。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/53/53125f0e70a5f923968356110bd9857b.png\" /></p><p></p><p>更灵活的资源隔离方案</p><p></p><p>基于 Resource Tag 的资源隔离方案实现的是物理层级的资源隔离，尽管在独立性方面更佳、但在资源的利用率方面还存在一定的优化空间，并且无法保证进程内更细粒度的资源隔离，因此 Apache Doris 在 2.0 版本中推出了 Workload Group 资源软限制。</p><p></p><p>从实现原理来看， Workload Group 通过对工作负载分组管理，将用户执行的 Query 与 Workload Group 相关联，可限制单个 Query 在 BE 节点上的 CPU 和内存资源的百分比，并可以配置开启资源组的内存软限制。当集群资源紧张时，可自动终止内存占用较大的查询任务以缓解集群压力。当集群资源空闲时，当 Workload Group 使用资源超过预设值时，其他 Workload Group 可以共享空闲集群资源，并自动突破阙值、确保查询任务的稳定执行，通过这一方式实现内存和 CPU 资源的精细化管控。</p><p></p><p>我们也在持续探索新版本特性与业务的结合，后续对于数据加工、数据探索、数据看板和数据服务等场景的单查询资源限制可以通过 Workload Group 来实现，并且还可以进一步利用任务优先级和任务排队机制来保证关键业务的优先运转。</p><p></p><h3>精细用户权限管理</h3><p></p><p>为了满足业务需求和法规合规的要求，银联商务建立了严格的用户权限管理制度。该制度明确了不同用户群体的角色和权限，确保了用户只能访问其需要的功能和数据。以下为银联商务用户权限管理的方案：</p><p></p><p>用户权限设置：针对每个分支机构不同场景的不同用户，为用户设置不同的数据使用权限。库、表、行级权限管理：为满足各分公司权限管理需求，一般会为每个分公司建立视图，该方式操作繁琐，且与 Hive 数仓的使用有较大差异，可能需要对表、语句进行修改。通过 ROW POLICY机制可以便捷实现库、表、行级的权限控制，并可以将原来 Hive 数仓的任务较为无缝地迁移到 Doris 中。列级权限管理：当前采用构建视图的方式进行列级权限管理。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/46/469711c24b991a3ecd6d5c665fcf8a1e.png\" /></p><p></p><h3>集群稳定性保障</h3><p></p><p>SQL 熔断：平台对内部用户开放后，经常会面临用户查询 SQL 不规范消耗过多资源的情况，针对于这种情况，采用 SQL 熔断机制对高危的 SQL 及时熔断，以保证集群的稳定运行。导入并发控制：考虑我们经常需将历史数据同步到平台中，这就会涉及大量数据修改任务，可能对集群会造成比较大的压力。因此，我们使用了 Unique Key 模型的 Merge-on-Write 更新模式、启用了 Vertical Compaction 和 Segment Compaction 并通过调整 Compaction 参数调整，以控制数据导入频率、减轻集群的压力。网络流量控制：针对离线、实时不同场景设置了 QoS ，通过 QoS 策略进一步实现网络隔离。考虑到银联商务内部有上海和武汉两套集群，异地网络交互过程中的流量至关重要，因此，我们通过 QoS 策略来实现了精确的网络隔离操作，确保不同场景下的网络服务质量与稳定性。监控报警：为满足公司内部夜班值班监控的要求，我们使用 Doris 与内部监控报警平台进行对接。将 Doris 相关的监控报警与声光监控、CU 即时通讯软件以及邮件进行了对接，实现了对问题的实时监控和处理。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c9/c9570d065f44690fb4ae5bafb5d67121.png\" /></p><p></p><h3>基于 CCR 的集群灾备能力</h3><p></p><p>对于金融企业而言，服务稳定性和数据安全性是至关重要的一环，而灾备方案是确保业务连续性和数据安全性的重要措施，通过集群灾备，能够在灾难或故障发生时迅速恢复业务和数据，最大程度地减少损失和风险。</p><p></p><p>对于银联商务的核心业务数据，我们期望能够实现跨集群异地的灾备，因此我们基于跨集群数据复制能力构建主备集群的双活方案。正常业务查询访问的是主集群，关键业务数据会同步写入至备用集群且保持实时更新，这样即使某个集群发生宕机事件，也可以迅速切换到备用集群，以快速恢复核心业务和数据。</p><p></p><h2>总结与规划</h2><p></p><p>面对日益增长的数据处理和分析需求，银联商务选择基于 Apache Doris 构建新一代实时数据仓库，截至目前 Apache Doris 已经服务了经营分析报表、用户标签、自助取数等多个内部业务以及对外商户数据服务场景。</p><p></p><p>仅以对账单查询场景为例，在半年对账单场景下数据查询时效从 8 分钟降低到 3 秒，提速超 100 倍，在全年对账单查询中耗时也缩短至 2 分钟内，多数典型查询场景性能提升了 10- 15 倍，整体查询分析效率得到极大幅度提升。此外，数据导入性能平均提升了 2- 5 倍，数据处理加工速度效率提升了 3- 12 倍，数据应用的时效性得到大幅增强。</p><p></p><p>通过更高效、更实时、更灵活的数据分析支持，银联商务能够更好地理解市场、把握机会、优化运营，从而实现业务的持续增长和创新发展。未来，银联商务还将继续深入使用  Apache Doris ，并在以下三个方面进行探索和实践：</p><p></p><p>统一查询引擎：将 Doris 作为联邦查询的统一入口，通过 Multi-Catalog 接入底层各数据源。同时将 Doris 完全作为对外数据服务的统一出口，实现数据查询服务的统一路由，为用户提供更便捷、更高效的数据查询服务。存算分离架构：进一步探索存算分离架构、实现资源的弹性扩缩容，并将离线数仓任务全部迁移到 Doris 中，实现实时化改造以及计算负载的进一步隔离。自动化运维：对接公司内部的业务流程，实现相关工作的自动化运维处理，并完成业务问题的快速排查；基于 Doris 实现更灵活的数据血缘分析，帮助银联商务更好地理解数据之间的关系和影响，为业务决策提供更准确的数据管理支持。</p>",
    "publish_time": "2024-01-12 09:38:12",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "升级企业数智化底座 驾驭数智未来",
    "url": "https://www.infoq.cn/article/ypWD97ILgUjbqjBUqiZ5",
    "summary": "<p>在经济环境不确定因素增多、市场普遍由增量竞争转向存量竞争的当下，数智化转型无疑是所有大型企业关注的焦点课题。结合“企业数智化进阶模型”来看，如今大多数企业的数智化处于数智化2数据驱动层级，企业需要升级数智化底座，实现全面数据服务。此外，快速崛起的生成式 AI 技术在众多行业掀起了技术和业务全面创新的浪潮，大型企业也希望借此撬动自身的潜在价值，在 AI 全面普及的时代占得领先地位。</p>\n<p>更懂业务、技术领先、体系完整的用友BIP-iuap平台已成为众多行业领先企业升级数智化底座的优选。在本册电子书中，我们深度分析了用友iuap数智化底座将如何满足企业的数智化转型需求，以及如何激发企业数据价值，如何通过生成式 AI 等技术助力企业业务提效增质，如何进行商业创新、开拓新的增长空间。与此同时，我们还收录了中建五局、中国矿产、中船信息、旭阳数科、远东数智采等行业领先企业升级数智化底座的领先实践。</p>\n<p>希望通过本册电子书，能为大型企业带来有价值的参考和启发，加快形成新质生产力，早日成为数智企业，实现高质量发展！</p>",
    "publish_time": "2024-01-12 09:41:33",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "DevSecOps 中的AI：从“智能副驾”到“自动驾驶”",
    "url": "https://www.infoq.cn/article/kTV8ipOksiYDXdag1N3a",
    "summary": "<p></p><blockquote>作者｜JFrog大中华区总经理 董任远</blockquote><p></p><p></p><p>自动驾驶和软件（SW）开发之间有何共同点？乍一看，并没有什么共同点。但仔细观察一下，就能发现两者之间存在一些相似之处，尤其是在实现基本目标的演进路径上。</p><p></p><p>开发团队本身不会成为&nbsp;“乘客”，但设计、创建、保护、分发和维护等方面相关人员的传统角色和职责会发生转变。为了更好地理解这一点，可以先深入了解一下自动驾驶的概念，然后再将其与软件开发联系起来。</p><p>&nbsp;</p><p>自动驾驶的概念出现已有多年，曾经看似未来派的概念如今已成为现实。从本质上来说，自动驾驶汽车（AV）旨在最大限度地减少交通出行中的人为失误（目前约&nbsp;90% 的交通事故都是由人为失误造成的）。自动驾驶汽车的基本前提是其性能应优于普通人类驾驶员。自动驾驶技术可以节约时间，这至关重要。这样，人们就可以把精力投入到更令人愉悦的娱乐活动中，而不是耗费在交通路途中。</p><p>&nbsp;</p><p>边缘计算和AI是实现自动驾驶的两大关键要素：它们使车辆能够在车内处理物联网传感器的数据，从而实现实时操作。这种能力对于任何任务关键型应用都至关重要。试图对机器进行手动编程，以处理各种可能的驾驶场景的做法已不切实际。相反，车辆必须从环境中动态学习。自动驾驶汽车的智能程度取决于各种物联网传感器数据的可用性，基于数据就能创建物理世界的数字孪生表示。数据越多样化，就能部署越复杂的AI系统。</p><p>&nbsp;</p><p>观察自动驾驶的发展路径，我们可以发现，在每个阶段，人类的参与都在逐渐减少。自动驾驶汽车框架包括&nbsp;6 个自动化级别，从&nbsp;0（完全手动）到&nbsp;5（完全自主）不等。</p><p></p><p>无自动化：驾驶员完全控制所有驾驶任务。驾驶员辅助：车辆采用单一自动化系统，允许驾驶员将脚从踏板上移开。部分自动化：车辆具备转向和加速能力，驾驶员可以将手从方向盘上移开。有条件的自动化：车辆能够控制大部分驾驶任务，使驾驶员能够将视线从道路上移开，同时仍能保持监控。高度自动化：车辆在特定条件下能够执行所有驾驶任务，让驾驶员有机会在保持警惕的同时，将注意力从路面上移开。完全自动化：车辆可在任何条件下独立完成所有驾驶任务。这样，驾驶员就变成了乘客，完全不用担心任何驾驶责任。</p><p>&nbsp;</p><p>AI在软件开发中的优势与其在自动驾驶领域中的优势如出一辙，即最大限度地减少人为失误，使人能够腾出时间，从事创造性更强的工作。由于人力资源往往是软件开发中成本最高的环节，因此企业就有动力去采用AI系统，事半功倍。</p><p>&nbsp;</p><p>仔细研究软件开发的演进路径，会发现其与自动驾驶技术的进步有着惊人的相似之处：在每个演进阶段，人类的参与都在逐渐减少：</p><p>&nbsp;</p><p>本世纪初，软件开发几乎不涉及自动化。在软件开发生命周期（SDLC）的每个阶段都需要人工控制，因此整个过程基本上都需要手动操作。问题往往是由客户而非内部团队发现的。</p><p></p><p>到了2010 年代中期，容器化、云计算和&nbsp;DevOps 的兴起提高了软件开发生命周期的整体自动化程度和效率。在测试、代码审查和&nbsp;CI/CD 等领域，基于预定义（硬编码）策略和“if-then”规则的常规任务和程序性决策实现了自动化。这样，研发团队就能专注于创造性工作，提高生产力，进而实现“引导和加速”。根据敏捷原则缩短开发周期，在开发和运维之间架起桥梁。问题的管理和解决开始从被动反应转变为自适应，各团队之间的协调更加顺畅。大多数问题甚至可以在客户意识到之前就被发现并解决。</p><p></p><p>时至今日，生成式AI正在推动软件开发的效率和创新水平至新高。基于生成式AI的解决方案可通过无缝的人机对话来创建新内容，自动化的应用远不止常规任务。AI在整个软件开发生命周期过程中，是不折不扣的助手（智能副驾），它能够提供建议、解释问题、生成代码、监控流程、扫描资源库、提供预测并辅助快速决策，效率也开始得以提升。这将进一步加快和提高整体代码生成速度，意味着能够实现更多的软件构建、更多需要保护的软件以及更频繁的运行时更新。</p><p></p><p>当我们将嵌入式AI模型（MLOps）添加到现代软件开发的等式中时，上述领域将进一步扩大。“流式软件”的概念正逐渐成为现实，小规模的增量改进（基于二进制文件的更新）会自动从开发阶段流向运行阶段，而服务停机时间则会降至最低。</p><p></p><p>在应用安全方面，AI能够通过预测，大幅缩短发现和修复问题的时间，从源头防止恶意软件包进入企业。首先是利用基于AI的严重性和上下文分析来进行自动化漏洞扫描和检测，然后是自动修复。尽管取得了上述进步，但在基于AI的解决方案展现出更高的可信度和可靠性之前，人工干预和审批仍然是必要的。</p><p></p><p>近年来，我们开始向全自动范式过渡，即从“智能副驾”（AI助手）转变为“自动驾驶”（人工智能决策者）。机器可以通过自然语言用户界面（如英语）来解决高度复杂的问题，而这需要程序员掌握新型技能，引导对话达到预期状态。从根本上说，AI系统的性能应优于普通人类开发者或参与上述流程的其他人员。AI将进一步增强决策流程并使之自动化，使企业能够选择最佳的（数据驱动型）方法和工具来解决任何问题。对AI系统的信任将是最重要的，而这就要求做到对广范围语境的理解和合乎道德的决策制定，类似于当今自动驾驶所面临的挑战。自学习和自修复能力将成为检测、分析、隔离和修补问题并保持服务正常运行的关键。这意味着：软件将能够自我重写和更新，并增加新的功能以处理新的输入。同样，对于自动驾驶汽车，AI系统也必须从自身运行环境中学习并做出相应调整。</p><p>&nbsp;</p><p>总之，虽然自动驾驶与软件开发之间的相似之处可能不会立即显现出来，但这两个领域都有一个共同的目标，即利用AI来强化自身的运作，并让个体能够腾出时间来专注于更想追求的目标。在软件开发方面，AI将持续加速并改进新功能和数据的创建，提升各研发职能的用户体验，逐步从可信赖的顾问发展到更高的决策自主权。从智能编码和安全，到覆盖整体&nbsp;DevOps 堆栈，基于AI的“智能副驾”将慢慢成为整个软件开发生命周期的主流。企业对于AI必须坚持负责任且安全的原则和实践，以确保业务成果的可持续性。这涵盖AI生成软件的多方面，包括保护知识产权，避免潜在的安全和许可证合规问题等。AI系统的逐步自主化将允许并确保与现有基础设施和监管环境的兼容性。</p><p>&nbsp;</p><p>随着AI技术的不断进步，我们可以预见软件开发将迎来更深入的整合和创新。随着AI不断改变各行各业，我们也步入了一个激动人心的时代。软件开发的未来大有可为，想象力有多大，我们对机器能够赋予的开发责任就可以有多大。</p><p>&nbsp;</p><p></p><p>&nbsp;</p>",
    "publish_time": "2024-01-12 11:06:41",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "“星火·链网”与蚂蚁链最新成果：跨链开源“从0到1”落地",
    "url": "https://www.infoq.cn/article/StYCzGoJO5QavHJQUWyM",
    "summary": "<p>1 月 11 日，中国信息通信研究院（以下简称“中国信通院”）“星火·链网”和蚂蚁链共同宣布，双方合作开发的<a href=\"https://mp.weixin.qq.com/s?__biz=MzU1NDA4NjU2MA%3D%3D&amp;chksm=fbe9a85fcc9e2149db6f60a7f8bbe5fe2326a33a3177c10f98693fc301418ee907544b18f2cc&amp;idx=1&amp;mid=2247487888&amp;scene=27&amp;sn=931b65213c5f893047ad4edfb60b1a2e&amp;utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search#wechat_redirect\">区块链</a>\"域名服务系统（BCDNS）和中继服务（Relayer）正式<a href=\"https://www.infoq.cn/article/hl9FPtSPFuyMS4LNgKbU?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">开源</a>\"，所有开发者可以通过 GitHub 开源社区直接使用。这是双方首次合作实现区块链开源成果“从 0 到 1”落地。</p><p></p><p>BCDNS 区块链域名服务可以看作一个数字身份系统，用以绑定不同链之间的唯一身份；而中继网络是区块链跨链通信的核心角色，负责将消息安全可靠地从源链投递至目标链。</p><p></p><p>“星火·链网”作为区块链和数据基础设施，为进一步提升可信数据流转能力，助力数据要素在跨区域、跨系统应用中发挥乘数效应，确定了与蚂蚁链的长期合作目标：基于 IEEE 区块链跨链国际标准（P3205），研发跨链开源产品。跨链域名服务系统和中继服务的开源，意味着该跨链产品全流程服务开源，正式进入了生产级可用的阶段。</p><p></p><p>接下来，“星火·链网”与蚂蚁链将继续在<a href=\"https://www.infoq.cn/article/d9Qg6SyZRkvruMmJvkHF?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">跨链</a>\"领域，展开基于 IEEE-P3205 标准下的不同异构链间安全跨链机制的探索与研究，针对不同异构链的特点，实现其链上消息的安全认证机制(如：SPV 验证、背书签名验证、消息共识签名等)，为异构链下跨链消息的可信认证夯实基础。</p><p></p><p>“星火·链网”是在工信部的指导与支持下，由中国信通院牵头建设的区块链新型基础设施，已在全国建设运行 11 个超级节点，并依托超级节点推动 54 个应用骨干节点。蚂蚁链在共识、跨链、通信、存储等区块链核心技术领域全面自主可控，且处于行业领先水平。2018 年，蚂蚁链开始研发跨链技术，2023 年 4 月公布了跨链开源路线。</p>",
    "publish_time": "2024-01-12 12:17:30",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Andy教授2023年数据库回顾：向量数据库没有技术护城河！没人能靠技术大佬背书“假装成功”",
    "url": "https://www.infoq.cn/article/oYDclZ449szLbKxUmO5E",
    "summary": "<p></p><blockquote>本文是由世界知名数据库行业专家 Andy Pavlo教授撰写的2023年数据库回顾文章。最近几年，每一个岁末或年初，Andy教授都会撰写下关于过去一年他对数据库领域的观察和感悟，他的系列文章不仅整理和收纳了数据库领域的大事件和技术发展趋势，更为数据库领域从业者提供了宝贵的参考和启示。&nbsp;在本文中，Andy教授首先回顾了2023年数据库领域的重要里程碑，包括技术进步和业界动态。他还详细阐述了在这一年中引起广泛关注的几个主题，如向量数据库、自然语言查询和SQL之间的关系、人工智能崛起为数据库领域带来的机遇等。AI前线对本文进行了翻译，以便广大读者能够更好地理解相关内容，紧跟全球的数据库动态。</blockquote><p></p><p>&nbsp;</p><p>新年新气象，尽管发生了很多糟心事，但我还是要对过去一年间的各主要数据库事件和趋势进行回顾和盘点，毕竟2023确是数据库发展历程中的重要一年。</p><p>&nbsp;</p><p>我的目标是继续保持犀利但公正的观点，同时过滤掉那些言过其实的炒作言论。</p><p></p><h2>向量数据库的兴起</h2><p></p><p>2023年无疑是向量数据库全面兴起的一年。尽管其中一些系统几年之前就已经诞生，但出于人们对大语言模型及相关服务应用（例如ChatGPT）的广泛关注，向量数据库终于在这一年中迎来全面爆发。向量数据库能够根据数据的语义、而不仅仅是内容，来对数据（特别是非结构化数据）进行深入搜索。换句话说，应用程序现在可以直接搜索关于特定主题的内容，而不是僵硬地查找具体关键字。</p><p>&nbsp;</p><p>这种“神奇”搜索的背后离不开transformers，这项技术能够将数据转换成固定长度的一维浮点数向量，被称为嵌入。人类无法直接理解这些嵌入中的值，但其内容却编码了参数和transformers训练语料库之间的某种关系。这些嵌入向量的大小范围从简单的数百维transformers，一路延伸到高端模型中的数千维。</p><p>&nbsp;</p><p>当我们使用transformers为数据库内的所有记录生成嵌入时，即可通过在高维空间中查找最接近搜索嵌入的记录嵌入来找到特定输入的相似记录。但是，暴力比较所有向量来寻找最接近匹配项会带来极高的成本。</p><p>&nbsp;</p><p>这项操作的复杂度为O(N * d * k)，其中N代表嵌入数量，d是各个向量的大小，k是我们需要的匹配数量——看不懂也没关系，这本身就是项艰深的技术，大家随便听听就好。</p><p>&nbsp;</p><p>这时候就轮到向量DBMS发挥作用了。从本质上讲，向量DBMS就是一种拥有专门索引数据结构的文档数据库，用于加快对嵌入相似性的搜索过程。这些系统可以使用近似搜索来生成结果，而不是傻傻对每项查询的最相似向量执行精确匹配。如此一来，我们就能以“足够好”的效果换取更快的返回速度。</p><p>&nbsp;</p><p>刚刚遭遇2022年区块链数据库的海量崩溃之后，沮丧的风险投资商们猛然嗅到了向量数据库中的商机，并再次兴奋起来。他们开始为向量数据库领域的几乎每家主要厂商都注入了大笔种子资金。在2023年的种子轮融资当中，Marqo拿到530万美元，Qdrant斩获750万美元，Chroma则获得1800万美元。Weaviate在2023年4月的B轮融资成功筹得5000万美元，而这一年中领跑全场的还得说Pinecone的1亿美元B轮。这下可真是抄上了。</p><p></p><h3>小结：向量数据库没什么技术壁垒</h3><p></p><p>&nbsp;</p><p>在2022年底大语言模型在ChatGPT的加持下进入“主流”视野后，多家DBMS厂商只用不到一年时间就推出了自己的向量搜索扩展，其中包括SingleStore、甲骨文、Rocket和Clickhouse。几大PostgreSQL衍生系统也宣布将支持微量搜索，其中一些使用到pgvectorryna(Supabase、AlloyDB)，也有几家使用其他开源ANN库（Timescale、Neon等）。MongoDB和Cassandra等领先NoSQL DBMS也引入了向量索引。</p><p>&nbsp;</p><p>就在DBMS向量支持功能快速普及的同时，JSON数据类型也在迅猛崛起。采用原生存储JSON的NoSQL系统是从2000年代末起开始流行的（包括MongoDB和CouchDB），但又过了好几年，关系型DBMS才开始添加对JSON的支持（PostgreSQL、Oracle和MySQL的支持时间分别是在2012年、2014年和2015年）。SQL标准在SQL:2016中引入了对JSON灵气进行操作的函数，但直到SQL:2023才正式将JSON数据类型添加进来。鉴于许多关系DBMS早已支持具有相似概念的XML数据类型，这样的滞后的确令人感到意外。</p><p>&nbsp;</p><p>向量搜索索引的快速增长有两大潜在原因。首先，通过嵌入进行相似性搜索开始成为愈发重要的用例，迫使每家DBMS厂商都匆忙推出了自己的版本。其二是这种引入新型访问方法和索引数据结构的工程量并不算大，所以DBMS厂商往往可以快速发布自己的向量搜索功能。大多数厂商根本不需要从头开始编写向量索引，而只需集成市面上可用的几种高质量开源库（例如微软DiskANN和Meta Faiss等）。</p><p>&nbsp;</p><p>而从这个角度来看，向量搜索功能的实现工作量不高，导致向量DBMS厂商根本没有足够深的护城河来抵御老牌DBMS厂商的竞争压力。</p><p>&nbsp;</p><p>我最近曾给Pinecone和Weaviate公司的联合创始人提出忠告，建议他们的系统采取两条发展路径：其一是由客户用这些向量DBMS作为“记录数据库”，而厂商则为操作工作负载提供更好的支持。这样他们的产品就会越来越像目前流行的文档型DBMS（例如MongoDB），并在五年之内像之前的NoSQL系统那样添加对SQL的支持。另一条路则是将向量DBMS作为上游主流DBMS的辅助性方案，目前其实已经有不少人在以这样的方式使用Elastic和Vespa等搜索引擎DBMS。如此一来，向量DBMS不能在不扩展自身查询语言或者改变数据模型结构的前提下维持生存。</p><p></p><p>旁注：我最近还专门录制了一期向量与关系数据库的问答节目，提到在未来五年内，每一种关系DBMS都将拥有自己的一套高性能向量索引实现。</p><p></p><h2>SQL正变得越来越好</h2><p></p><p>刚刚到来的2024年，也恰好是Don Chamberlain和Ray Boyce在IBM研究院发明SQL的五十周年。SQL最初被命名为SEQUEL（结构化英语查询语言），自上世纪八十年代以来一直是数据库交互领域的客观标准编程语言。尽管SQL历史悠久，但其用途和功能一直在不断更新，并在过去十年间迎来了颠覆性变化。</p><p>&nbsp;</p><p>就在去年，ISO/UEC 9075规范发布了最新版本，即SQL:2023。此次更新引入了大量“锦上添花”的功能，用以解决不同SQL方言（例如ANY_VALUE）中的不一致问题。值得一提的是，其中对SQL的两项增强进一步削弱了对替代性数据模型和查询语言的需求。但请注意，SQL新规范包含这些内容，并不代表大家常用的关系DBMS会立即支持这些新功能。</p><p>&nbsp;</p><p>截至2024年1月，据我了解唯一支持SQL/PGQ功能的DBMS就只有Oracle。DuckDB倒是提供一个支持SQL/PGQ的实验性分支，但仍无法正常运行以上示例，因为其支持的语法仍略有区别。</p><p>&nbsp;</p><p>多维数组（SQL/MDA）：</p><p></p><p>自从SQL：1999引入有限的一维、固定长度数组这种数据类型以来，SQL就正式开启了自己的数组支持之旅。SQL:2023扩展了这项功能，可以支持未对最大基数进行预定义的嵌套数组。SQL:2023中的SQL/MDA更新能够支持使用基于整数的坐标的任意维度多维数组。Rasdaman的RQL极大启发了SQL/MDA语法，以提供与SQL兼容且符合其集合语义的结构及操作数组构造。这些增强功能使得应用程序可以完全在SQL之内对多维数组执行操作和交互，而无需单独导出（例如导出为Python notebook）。下表所示，为在CREATE TABLE语句中使用MDARRAY数据类型的几种不同示例：</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/7f/7fab30e912701081b57abd393b3c30f1.png\" /></p><p></p><p>尽管SQL.MDA规范自2019年就已经发布，但直到SQL:2023才被纳入官方标准。据我了解，除了Rasdaman之外，还没有哪种生产级DBMS能够支持SQL/MDA扩展。我能找到的唯一其他原型就只有HSQLDB的一个分支，名为ASQLDB。</p><p></p><h3>小结：自然语言查询永远取代不了SQL</h3><p></p><p>SQL：2023修订版代表这种通用语言迈进了持续发展和改造的下一阶段。当然，SQL仍不算完美、也不具备真正的可移植性，因为每种DBMS都有自己的怪癖、专有功能和非标扩展。我个人最喜欢PostgreSQL的::cast运算符快捷方式。</p><p>&nbsp;</p><p>SQL/PGQ虽然意义重大，但我觉得它在短时间内还不足以对图DBMS造成致命打击。毕竟已经有多种方法可以将面向图的查询转换为SQL，不少DBMS（包括SQL Server和Oracle）也提供内置的SQL扩展，能够降低图数据存储和查询的门槛。Amazon Neptune是亚马逊云科技旗下Aurora MySQL产品上的图数据库方案。Apache AGE在PostgreSQL之上则提供OpenCypher接口。预计諅&nbsp;要OLAP系统（例如Snowflake、Redshift和BigQuery等）也将在不久的将来支持SQL/PGQ。</p><p>&nbsp;</p><p>在DBMS中添加SQL/PGQ，绝不像添加新语法支持那么简单。必须关注一系列工程要点，才能保证图查询操作拥有良好的性能。例如，图查询会执行多路连接来遍历整个图结构。但当这些连接的中间结果大于基表时，往往会引发问题。DBMS必须使用最坏情况最优连接（WCOJ）算法来改善表间常用的哈希连接方法。另一项重要技术，则是使用factorization来避免连接期间实现的冗余中间结果。这类压缩方法能帮助DBMS避免一遍又一遍地用相同连接消耗内存。</p><p>&nbsp;</p><p>我这里提出的优化方法，并没能在现有图DBMS中全部得到实现。因为据我所知，Neo4j、TigerGraph等领先系统也还做不到。我听说过的唯一面向图系统就是滑铁卢大学的嵌入式Kuzu DBMS。此外，大多数关系DBMS也还没有实现（至少那些开源数据库还不行）。前文提到的DuckDB有个实验分支实现了WCOJ和factorization优化，并在2023年的论文中提到，其在行业标准图基准上的操作性能比Neo4j高出10倍。</p><p>&nbsp;</p><p>但正如前文提到，SQL在大多数读者朋友出生前就已经存在，也将在我们故去后依旧坚挺。总之，我反对一切所谓自然语言查询将彻底取代SQL的说法。</p><p>&nbsp;</p><p>旁注：两年之前，我曾公开打赌说在2030年之前，图DBMS还不可能在数据库市场上取代关系DBMS。至少就目前看，我的结论仍然正确。</p><p></p><h2>MariaDB身陷困境</h2><p></p><p>去年，MariaDB开始在新闻报道中频频亮相，而且大多不是什么好事。我们发现独立于MariaDB基金会之外的MariaDB公司已经后院起火。2022年，该公司尝试借壳上市，但股价在IPO后的三天内迅速下跌40%。而为了加快上市速度而搞的借壳操作也被公之于众。截至2023年底，该公司股价较开盘以来已累计下跌超90%。</p><p>&nbsp;</p><p>面对一系列财务问题，该公司被迫宣布了两轮裁员。第一轮是在2023年4月，并随后在2023年10月进行了一轮更大规模的精简。该公司还宣布将淘汰两款产品：Xpand和SkySQL。MariaDB公司于2018年收购了当时名为Xlustrix的Xpand；2014年时我曾参观过Clustrix的办公室，发现那里就像一座令人毛骨悚然的鬼城（巨大的楼层中，有半数房间都关着灯）。SkySQL的来历则更为复杂，他们最初是一家提供MariaDB服务的独立公司，后来在2013年与Monty Program AB合并。2014年，合并后的两家公司共同成为我们如今熟知的MariaDB公司。但就在去年12月，该公司宣布SkySQL将会转为一家独立企业。</p><p>&nbsp;</p><p>MariaDB公司的情况如此糟糕，导致其基金会CEO专门撰文，抱怨自IPO以来基金会与公司间的关系如何快速恶化，并表达了“重启”的意愿。其他坏消息还包括：微软于2023年9月宣布，未来不会继续在Azure上提供MariaDB托管服务，转而专注支持MySQL。有些朋友可能不太熟悉，MariaDB就是MySQL的一个分支，是MySQL缔造者Monty Widenus在甲骨文于2009年宣布收购Sun Microsystems后开发而成。总而言之，当初被放弃的MySQL表现良好，而作为新兴替代力量的MariaDB却身陷困境。所以还看什么宫斗戏，多关注数据库市场什么都有了！</p><p></p><h3>小结：数据库行业无法再用技术大佬的背书来“假装成功”</h3><p></p><p>过去十年以来，数据库客户明显变得越来越精明了。企业没办法再通过华而不实的基准数据、承诺取代SQL的新查询语言或者技术大佬的背书来“假装成功”。DBMS的声誉比以往任何时候都更加重要。也就是说，DBMS软件本身及其背后的开发企业需要齐心协力，任何内斗都将直接削弱产品的市场生命力。</p><p>&nbsp;</p><p>而且也别指望着开源能让项目长久存续，事实告诉我们，任何DBMS项目都很难在相应的营利性公司倒闭后继续健康发展。少数反例就只有PostgreSQL；再加上为MySQL构建InfiniDB OLAP引擎的公司在2014年破产之后，其GPLv2源代码被继承下来并成为MariaDB中的ColumnStore。</p><p>&nbsp;</p><p>相反，更多例子表明一旦没有营利企业来支撑项目开销，DBMS将很快消失。感兴趣的朋友可以去看看Apache基金会的库存清单，了解到底有多少DBMS项目被这样彻底废弃。</p><p>&nbsp;</p><p>纯云DBaaS（数据库即服务）方案的出现令形势变得更加严峻。因为一旦公司失败（或者财务状况不佳），用于托管数据库的服务器也将被快速关停。Xeround曾在2013年关闭数据库时，给了客户两周时间来迁移数据库。为了削减成本，InfluxDB虽在2023年7月下线整个服务区前给客户预留了六个月过渡期，但此举仍令人们感到震惊。</p><p>&nbsp;</p><p>MariaDB显然比大多数普通数据库初创企业的情况更好，毕竟Monty等成员还建立起了控制这个开源项目的非营利基金会。但对于任何一个开源DBMS项目，只要负责赚钱的公司跟负责推进项目发展的基金会发生了冲突，项目本身可就危险了！而且就在此时此刻，MySQL仍在不断改进，且甲骨文用实际行动证明自己确实是非常优秀的企业业务管理者（至少在工程层面是这样）。相信MariaDB公司的乱象，将进一步推动用户群体转向PostgreSQL。</p><p>&nbsp;</p><p>但作为Monty用自己女儿名字命名的数据库，我也相信MariaDB仍会继续存在下去。</p><p></p><h2>自研数据库崩溃导致美国航空业中断</h2><p></p><p>2023年1月11日，受NOTAM系统中断影响，美国联邦航空管理局（FAA）被迫叫停了美国境内的所有航班。NOTAM系统负责向飞行员提供纯文本编码消息，并就飞行路径上可能遇到的意外变化或潜在危险发出警告。1月11日上午，NOTAM系统崩溃，导致全美约1.1万个航班暂停起飞。但拥有独立航空通报系统的其他国家未受此次系统故障的影响。</p><p>&nbsp;</p><p>根据FAA的解释，此次中断是由数据库文件损坏所造成。第三方承包商的工程师尝试用备份替换该文件，但发现操作过程导致备份文件也被损坏。类似的问题曾经在2008年导致FAA的原有基础设施出现同样的故障。</p><p>&nbsp;</p><p>目前并不清楚FAA在NOTAM系统中到底使用的是哪款DBMS。但有报道表明，该系统至今仍运行在两台1988年的飞利浦DS714/81大型机上。这些设备使用的根本就不是我们熟知的现代操作系统，而上世纪六十年代的老古董。也就是说，FAA明显没能在上世纪八十年代利用Oracle、Ingres和Informix等能够支持各种Unix平台的DBMS完成现代化改造。我个的合理推测是，NOTAM系统使用的可能是普通文件（例如CSV）自托管数据库。这些由非数据库专家编写的应用代码负责从文件中读取/写入记录，将结果复制到备用服务器并在崩溃时保障数据完整性。</p><p></p><h3>小结：在老掉牙的内部自研数据库上工作，是开发者的噩梦</h3><p></p><p>在不可替代的遗留硬件上运行关键任务系统，并使用早已老掉牙的内部原研自定义数据库，可以说是每一位数据库从业者最恐怖的噩梦。我很惊讶NOTAM居然拖到现在才崩溃（或者说2008年搞出问题的也是同一套系统？），所以面对这样一套能够支持运行35年的“出土文物”，我反倒有点肃然起敬了。</p><p>&nbsp;</p><p>有消息人士称，NOTAM系统每秒只能处理20条消息。以现代标准来看，这确实少得可怜。但还是那句话，这套系统的部署是在上世纪八十年代。数据库传奇大佬、1998年图灵奖获得者Jim Gray曾在1985年专门撰文介绍“普通”DBMS如何每秒执行50项事务，而非常高端的DBMS每秒甚至能够处理200项事务。作为参考，五年之前曾有人用八十年代的基准（即基于TPC-A的TPC-B）在Raspberry Pi 3上运行过PostgreSQL，最终性能也大致就是每秒200项事务。但如果不考虑跨数据中心间的强一致系统（约束其性能的唯一瓶颈就是光速），现代单节点OLTP DBMS在某些工作负载上可以轻松实现每秒数百万项事务。所以必须承认，NOTAM哪怕是以上世纪八十年代的标准看也没达到顶尖水准，放在今天更是落后得吓人。</p><p>&nbsp;</p><p>由于NOTAM没有将数据库跟应用程序逻辑区分开来，所以根本不可能对这些组件进行独立升级。考虑到当时人们已经很清楚关系模型的优势所在，这样的设计哪怕放在当年也该受到批判。我们并不能说SQL就一定可以阻止这次故障（毕竟这属于人为错误），但至少组件间的独立性可以让系统更加灵活、也更易于管理。</p><p>&nbsp;</p><p>而且，美国政府当时已经开始使用商用关系型DBMS。例如，Stonebraker的RTI（Ingres的开发商）就曾在1988年的上市文件中提到，其客户包括国防部、财政部、多个军事部门和研究实验室。我相信美国政府的其他部门当时肯定也在使用IBM DB2和Oracle。所以，硬要选择NOTAM并延续至今，在我看来是个不可理喻的决定。</p><p>&nbsp;</p><p>在听说这事时，我正从阿姆斯特丹坐飞机返回美国。幸运的是，故障并没有影响到入境航班，所以我们的飞机可以正常按时降落。但后来我还是被困在了纽瓦克机场，因为所有国内航班都被迫中止。</p><p></p><h2>聊聊数据库融资</h2><p></p><p>除了前文提到向量DBMS的风险投资热潮之外，其他类型的数据库系统在过去一年中也吸纳了不少资金。但总体而言，这一年的数据库融资热度要比往年冷清得多。</p><p>&nbsp;</p><p>自动调优初创公司DBTune在欧洲筹集到260万美元的种子轮资金；PostgresML的种子轮则融得450万美元，这笔款项将用于构建自定义扩展DBaaS以通过SQL调用机器学习框架。TileDB在秋季宣布了3400万美元的B轮融资，用于继续构建其阵列DBMS。尽管已经成立13年有余，SQReam仍凭借其GPU加速型DBMS完成了4500万美元的C轮融资。Neon于2023年8月拿下4600万美元B轮融资，用以扩展其无服务器PostgreSQL平台。这一年中最大的融资赢家当数Databricks，他们于2023年9月的I轮融资中获得5亿美元巨资，但仍远不及2021年H轮的16亿美元。</p><p>&nbsp;</p><p>2024年1月5日更新：这里补充一下，MotherDuck（DuckDB的商业版本）于202年9月筹得5250万美元B轮融资，而DBeaver则凭借其备受装腔的DBMS管理工具拿到500万美元种子轮融资。</p><p>&nbsp;</p><p>2023年数据库领域还出现了不少收购。最大的一次发生在去年年初，Progress Software以3.55亿美元现金直接买下了MarkLogic——后者是历史最悠久的XML DBMS之一（诞生于2001年前后）。Progress旗下还拥有OpenEdge，它的出现甚至早于MarkLogic（约1984年）。IBM收购了Meta的衍生公司Ahana，后者尝试对PrestoDB进行商业化改造（与现已更名为Trino的硬分叉PrestoSQL不同）。多云数据库服务商Aiven收购了AI驱动型查询重写器初创公司EverSQL，EnterpriseDB则借用贝恩资本的资金收购了Seafowl团队——后者开发出基于DataFusion、能够兼容PostgreSQL的OLAP引擎。Snowflake则分别收购了两家初创公司：其一是由前斯坦福大学教授Peter Bailis创立的Sisu Data，其二是由伯克利大学教授Aditya Parameswaran创立的Ponder（基于Modin）。</p><p></p><h3>小结：大模型相关产业，仍将受到资本青睐</h3><p></p><p>搞风投的朋友告诉我，跟往年相比，2023年市场上出现了更多新兴企业，但资方却谨慎地捂紧了钱袋子。这种趋势其实在整个初创领域都有体现，只能说数据库也未能幸免。当然，唯一的例外就是AI+大语言模型，对于这类有望开拓计算领域新疆土的项目，大资本们仍然慷慨而热情。</p><p>&nbsp;</p><p>尽管2023年内，美国的一系列宏观经济指标开始转好，但科技行业仍然心存疑虑并努力寻求降本增效。以OtterTune为例，客户们希望我们能更积极地优化数据库，帮助他们在2023年内降低数据库基础设施成本。与之对应，之前客户们的主要诉求集中在提高DBMS的性能和稳定性上。我们计划在2024年发布新功能，切实达成成本节约目标。而在我自己带的班里，大学生们纷纷请我帮他们推荐数据库开发岗位。要知道，卡耐基梅隆大学的计算机科学系享有盛誉，如今这里的学生居然都很难靠自己找到理想的实习机会和全职岗位了，看来大环境的确不好。</p><p>&nbsp;</p><p>如果美国的科技市场继续保持这样的颓势，那么多数数据库初创企业在未来几年内恐怕都很难有实质性发展。规模较小的DBMS厂商可能被科技巨头或者私募股权公司吞并，甚至直接消亡。另一方面，那些凭借高估值筹得大量资金的公司也同样身陷困境。正如前文提到，其中很多可能根本无法成功上市，也没有多少科技大厂会用这些DBMS，因为这是个人人都有自家DBMS的时代。对于这些体量很大、但还不够大的初创公司来说，摆在面前的路有三条：要么继续进行融资来维持公司运转；要么通过Cloudera等私募股权机构寻求帮助；要么接受IT服务公司（例如Rocket、Actian）的收购，在维持原有系统稳定的同时，继续从被锁定的遗留客户身上榨取许可费用。但对于一家有追求的数据库公司来说，这三条路明显都不理想，而且明显不利于继续扩大客户受众。</p><p>&nbsp;</p><p>最后我要提醒大家的是，Databricks的问题已经不是要不要上市，而是什么时候上市。</p><p></p><h2>有史以来最贵的一次密码修改</h2><p></p><p>OG数据库专家Larry Ellison在2023年的事业可谓蒸蒸日上。对于他本就出色的职业生涯来说，这又是再创辉煌的一年。2023年6月，他重登全球第四大富豪的宝座。甲骨文股价在2023年内上涨了22%，几乎追平标准普尔500指数的24%回报率。2023年9月，Larry生平第一次前往微软总部，与软件巨头的CEO一道宣布Oracle DBMS将以托管服务的形式正式登陆Azure云。在2023年11月，股东们又以压倒性的多数票，决定让79岁的Larry继续担任甲骨文董事会主席。</p><p>&nbsp;</p><p>但2023年真正的大新闻，还和蠊马斯克砸下10亿美元收购社交媒体Twitter之后，亲自帮助Larry重置了账户的密码。通过这次价值10亿美元的密码重置，Larry终于在2023年10月发出了自己的第二条、也是近十多年来的唯一一条推文。Larry表示自己即将动身前往牛津大学，随后宣布将在牛津创建Ellison理工学院（EIT）。</p><p>&nbsp;</p><p>其实Larry具体发了什么并不重要，真正重要的是Larry重新回归Twitter了。我还通过个人门路打听到，Larry会偶尔阅读Twitter消息，而且主要关注创业宣传、热情的生日祝福还有他自己灵光一现时的各种想法。</p><p>&nbsp;</p><p>通过Larry的推文，我们终于发现这位技术圈大佬原来也有日常生活，并不像人们想象中那么日理万机——毕竟这家伙可是拥有自己的米格-29战斗机外加一座夏威夷海岛。而更让人羡慕嫉妒恨的是，他还有位更有钱的好友，甚至愿意拿出10亿美元（捎带着）帮他重置账户密码。感觉10亿太多了？朋友们，当你身价1030亿时，这真的不算多。</p><p></p><h2>新的一年，更加精彩</h2><p></p><p>我满心期待2024年，也会把更多时间和精力投入到数据库领域。Dana、Bohan和我创立的OtterTune公司也即将迎来四周年生日。这段经历教会了我很多，也让我们的数据库优化服务扩展到了最初的学术原型以外。</p><p>&nbsp;</p><p>面对新的一年，我们打算分享更多关于使用AI技术改进现有MySQL和PostgreSQL DBMS的亮点和成果。我们也将开发更多新的增强功能，帮助更多用户轻松维护起稳定可靠的自有数据库。</p><p>备注：别忘了在数据库上多跑ANALYZE，你的DBMS查询优化器会感谢你的。如果嫌麻烦，也可以选择用OtterTune自动解决。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://ottertune.com/blog/2023-databases-retrospective\">https://ottertune.com/blog/2023-databases-retrospective</a>\"</p><p>&nbsp;</p><p>往年文章链接：</p><p><a href=\"https://ottertune.com/blog/2021-databases-retrospective\">https://ottertune.com/blog/2021-databases-retrospective</a>\"</p><p><a href=\"https://ottertune.com/blog/2022-databases-retrospective\">https://ottertune.com/blog/2022-databases-retrospective</a>\"</p>",
    "publish_time": "2024-01-12 14:22:55",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "大模型应用成本百万级起步，该如何与企业现有信息系统融合？",
    "url": "https://www.infoq.cn/article/K3Jr5RMuH3voiW6YzNCG",
    "summary": "<p>过去一年，大模型在各种场合频频刷屏。在业界看来，它是类似于蒸汽机一样的划时代产物。这意味着，大模型将给每个人、每个企业、每个行业带来全面影响，甚至“刷新”整个时代。</p><p></p><p>但是，和过去企业的技术投入相比，<a href=\"https://www.infoq.cn/article/VrUUu7ClZjWqhCud3wOg\">大模型</a>\"属于另一个成本量级。从目前来看，大模型应用的成本至少在百万级起步，甚至可能达到上千万。对于企业而言，一方面，要寻找到高价值的场景，避免做无用功；另一方面，要对引入大模型后的效果进行预估和追踪，确保投资能够带来回报。</p><p></p><p>在日前 InfoQ 年度技术盘点与展望系列直播中，中国信通院人工智能研究中心平台与工程化部曹峰、 中国企业知识开源计划首席布道师陈果、长城汽车产业数智化中心资深 AI 技术专家胡阿沛围绕“<a href=\"https://www.infoq.cn/video/jTzjE654vsY9CF8Ev42c\">大模型下的业务创新和架构升级</a>\"”展开了探讨，并针对企业引入大模型的适用业务场景，及其成果的评估和量化方法进行了交流。</p><p></p><p>对此，曹峰总结了现阶段企业落地大模型的 5 类适用场景，以及不适合应用落地的 5 种情况。他强调，企业在选择场景时，可以先尝试一些被证明有价值的场景，而不是一开始就过于迅速或过于激进地涉足多个场景。切忌一拥而上，而是需要在一个场景中慢慢推进。</p><p></p><p>陈果则提出，AI 是第三代企业数字化。其中，第一代的代表是数据库和信息系统，第二代的代表是互联网和云平台，第三代是 AI 原生的企业应用。而企业为了应对 AI 转型，在架构上将出现四大变化：第一，企业级模型管理；第二，从数据管理到知识管理；第三，用户界面多模态；第四，业务进一步服务化、自动化。</p><p></p><p>以下内容根据对话整理，篇幅有删减，点击链接可观看直播回放：<a href=\"https://www.infoq.cn/video/jTzjE654vsY9CF8Ev42c\">https://www.infoq.cn/video/jTzjE654vsY9CF8Ev42c</a>\"</p><p></p><h3>大模型将引发企业架构第三次革命</h3><p></p><p></p><h5>InfoQ：中国信通院近日刚刚发布大模型落地路线图，根据这一路线图，我们针对大模型的发展现状和应用部署有什么重点发现？</h5><p></p><p></p><p>曹峰：首先我解释一下我们为什么要发布这个路线图。在 2023 年，从大模型，到行业大模型，再到 AI Agent，人工智能得到了迅速的发展。然而，通过研究，我们发现很多企业在开发大模型时面临一系列实际问题。因此，我们展开了一系列关于大模型落地的研究工作。</p><p></p><p>首先，我们制定了一些原则：第一，需求驱动。企业在开发或采购大模型服务时，必须以大模型应用和落地为出发点，不能盲目追随潮流；第二，问题驱动。在大模型的应用和部署过程中，必须不断结合企业自身情况处理问题；第三，创新意识。在推动数字化转型过程中引入大模型，必须持有创新的意识，因为大模型与传统 IT 基础设施不同，对基础设施的落地提出了新的挑战，因此需要采取创新手段；第四，以技术为核心，综合应用云、数、智等数字技术，通过提升整个应用方的业务和效能来驱动大模型的发展。</p><p></p><p>整个路线图分为四个阶段：</p><p></p><p>第一阶段是诊断。在这一阶段，企业需要明确大模型的能力，了解它能为企业做哪些赋能。同时，企业需要对自身业务场景、数据、算法、基础设施预算以及战略等能力进行盘点和审视，为大模型的后续建设、使用和管理奠定基础；</p><p></p><p>第二阶段是大模型的建设，这里主要是构建技术底座，包括方案设计、技术研发和测试；</p><p></p><p>第三阶段是应用，强调大模型落地后更好地发挥应用模式。虽然 ChatGPT 以对话形式广受欢迎，但在企业内部构建大模型应用模式时，可能会涉及各种能力，例如插件模式、代理模式等。因此，需要解决如何更好地应用的问题；</p><p></p><p>最后是管理，大模型落地后将成为 IT 系统的重要组成部分，因此需要进行管理、运维、监测等方面的工作。</p><p></p><p>此外，路线图具体包含了五个层级，涵盖了不同阶段的诊断、建设、使用和管理。从底层到顶层，分别是：</p><p></p><p>基础设施层：</p><p>构建算力、算网、存储等硬件基础设施。搭建开发平台、数据库、虚拟化资源等基础设施。</p><p></p><p>数据资源层：</p><p>确保大模型、高质量语料库、数据集以及企业内部知识等资源的高质量构建。建设相关能力，以有效管理和利用数据资源。</p><p></p><p>算法模型层：</p><p>基于基础设施和数据资源，构建相关算法和模型。关注算法模型的质量和性能，确保其适应企业需求。</p><p></p><p>应用服务层：</p><p>将大模型与企业应用场景和实际需求相结合。解决使用插件、Chat、Agent 等方式的场景区分问题。</p><p></p><p>安全可信层：</p><p>在每个层级都确保安全、可信、可靠等因素。面对四个维度，保障整体系统的安全性。</p><p></p><p>这四个维度和五个层级中，我们整理了大约 40 多个问题，希望通过在未来解决问题的过程中，不断深化大模型落地方法论，为大模型的全面应用提供有效的指导。</p><p></p><h5>InfoQ：果总在咨询行业拥有 20 多年的从业经验，可以说您见证和陪伴了众多企业从信息化到数字化再到未来的数智化，期间技术经历了巨大的更迭演变。那么，在您看来，大模型对于企业（尤其是传统企业）最有价值的影响体现在哪些方面？</h5><p></p><p></p><p>陈果：曹老师提到了 <a href=\"https://www.infoq.cn/article/1QRWDbeWYhxdTa3SRqtj?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">Agent</a>\"，而我可能是国内最早讨论 Agent 可能改变企业系统架构的人。去年 3 月份，我写过一篇关于 Agent 的文章，其中提到企业信息系统可能会因此发生根本性的变化，我将其称为第三次革命。</p><p></p><p>回顾历史，企业使用计算机始于 60 年代和 70 年代，真正出现企业软件是在 70 年代后期。从 70 年代开始到 90 年代中期，这 20 年主要特点是数据库的出现，以及以数据库为中心的人机互动。在这一阶段，企业软件主要以数据库、ERP 等核心系统为代表，实施数据业务流程的数据处理。</p><p></p><p>第二个阶段始于 90 年代后期，随着互联网的兴起，以数据库为中心的应用模式被分布式计算所取代。2005 年左右，又进一步进入云计算和云原生的阶段。从 1995 年到 2020 年这 25 年间，传统以数据库为中心的架构向以互联网为特征的云计算进行了整体的转变。</p><p></p><p>人工智能标志着第三个阶段的开始。过去我们的企业系统有后端和前端的概念，后端处理业务逻辑、前端处理用户互动。但人工智能的出现将改变这种范式。例如，自然语言处理、Copilot 和 Agent 等新技术正在改变我们与机器的互动方式。</p><p></p><p>未来，当人和 Agent 已经分不清的时候，我们会看到业务处理方式发生变化。过去，我们按照预设的业务流程进行操作，现在大家开始探讨人工智能体，如 Autonomous Agents（AA）模式。在这一模式下，信息的处理方式将是事件感知、智能驱动的。</p><p></p><p>例如下雨了，我们知道要收衣服；再比如一个虫子掉到蜘蛛网上，蜘蛛感知到这个事件后就会去捕食。这就是事件驱动。AI 时代，可能会有更多并行且复杂的事件发生。在后端，我们可以使用事件驱动的方式重新组织信息系统；而在前端，人机融合协作，将采用并行处理复杂事件的方式。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b2/b2c2c39fe29a4b127ea594ad0165ed07.jpeg\" /></p><p></p><h3>大模型的 5 个适用场景，以及不适用的 5 种情况</h3><p></p><p></p><h5>InfoQ：具体在汽车行业，大模型技术是如何促进业务创新或产品开发的？长城汽车目前有哪些具体的尝试和落地实践？</h5><p></p><p></p><p>胡阿沛：从 Agent 的角度看，大模型技术的发展为我们打开了一个空间。刚开始使用大模型时，我们可能会想，大模型似乎只能回答问题，没有太多的可能性。然而，随着 Agent 概念的出现，我们可以考虑利用大模型做更多的事情。比如，大模型可以让人与软件以更拟人化的方式进行交互和沟通，这是一个非常重要的技术方向。</p><p></p><p>对于汽车行业而言，随着智能化的发展，汽车厂商的智能和科技属性变得越来越强，这对产品、服务和组织都带来了重要影响。通过大模型与软件或机器的拟人化交互，这个过程将为业务创新和产品开发带来新的课题。</p><p></p><p>比如，我们过去在业务开展或产品研发中主要依赖人力或一些固定的信息系统。对此，大模型通过学习海量信息，再利用高效计算的优势，可以为我们提供知识，以及新的创意或方案，从而在工作和创新效率上产生巨大影响。国外已经有很多大模型辅助药物研发和产品研发的应用，并且远远超过人工的效率。</p><p></p><p>对于长城汽车来说，我们在研发、服务、售后和生产等环节都有许多应用场景。比如，过去的客服系统更多是基于 FAQ 或相对简单的智能系统，对细致的意图并不能很好地理解。而大模型应用可以更准确地理解用户的意图，结合大模型的理解和背后的知识和数据，我们可以提供更智能的服务体验。</p><p></p><p><a href=\"https://www.infoq.cn/article/kZEzwhzsEtvdMhQfUD3o?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">长城汽车</a>\"从信息化建设到数字化建设至今已有 20 多年。从研发到生产再到售后，我们积累了丰富的数据和知识，包括各种规章制度、流程标准和维修手册等。将这些知识和数据与大模型结合，将为我们带来显著的生产和工作效率提升，同时也提高创新能力。</p><p></p><p>目前，我们正在研发长城汽车知识大脑，基于企业内部知识，它的核心是汽车产业垂直领域专业的知识大模型系统。</p><p></p><p>在长城的知识大脑应用上，我们也进行了一些探索，包括在研发、售后等领域的知识应用和管理，通过对话的方式获取工作中所需的知识或数据。比如，在售后方面，汽车知识迭代更新非常快，包括 OTA、软件、零部件等都在迅速迭代。如果用户出现汽车故障和问题，我们的技术工程师需要检测并处理问题，而通过及时更新相关的维修手册和案例给到大模型，就可以为我们的工程师提供高效、可靠的信息参考和指导意见，可以更好地处理客户面临的问题，提升售后服务体验。</p><p></p><h5>InfoQ：大模型和知识图谱的技术结合，有哪些具体的应用场景？</h5><p></p><p></p><p>胡阿沛：以人力资源管理为例，可以聚焦以下几个方面的应用：</p><p></p><p>第一，通过大模型构建人才图谱。以简历信息为例，大模型能够从非结构化的信息中，如简历的 PDF 文档，提取并结构化相关信息，如姓名、学历、岗位等。这在图谱构建阶段具有显著优势，传统方法通常需要耗费大量成本，包括定义图谱架构、标注数据、训练模型等。对此，大模型能够更高效地完成这些任务。</p><p></p><p>第二，在图谱的应用过程中，图谱交互通常包括对输入问题的语义理解，提取实体和关系，并通过图谱查询语句检索相关知识进行回答。在大模型时代，我们也可以探索使用大模型直接输出图谱查询语言，打通人类语言与图数据库的查询语言。通过这种方式，人与图谱之间的联系得以建立，比如要查询某人的上下级关系或了解其参与的项目，就可以直接从图谱中检索。</p><p></p><p>第三，大模型可以从图谱中提取整个子图，让大模型理解并找到问题的答案。这类似于文档检索的过程，但在此基础上实现了基于图谱操作，是图谱应用的重要方向之一。</p><p></p><h5>InfoQ：除了汽车行业之外，包括金融、电信等在内的诸多行业都在试水大模型应用。那么，根据中国信通院的研究，企业中适合大模型落地的业务场景具有哪些特点？</h5><p></p><p></p><p>曹峰：大模型已经开始与企业的全价值链、全流程融合，在降本提效等方面发挥了巨大的价值。总结下来，应用主要集中在几个方面：</p><p></p><p>首先是知识类别的应用，如企业知识管理和搜索，大模型有效提升了相关能力和产品性能，同时降低了落地的成本；</p><p></p><p>其次是对话类的场景，包括智能客服、智能助手等应用；</p><p></p><p>第三是智能化软件工程场景，例如涉及代码生成、代码检测等应用；</p><p></p><p>第四是人工智能赋能科学场景，一方面，人工智能在基础科学方面发挥了重要作用，比如 AlphaFold 在蛋白质等方面的发现。更重要的是，它未来将在应用科学领域发挥巨大作用，例如在材料发现、材料验证和风洞实验等方面。举例来说，国内某电池厂商已经开始运用人工智能进行电池性能的仿真和材料的仿真。同样，国产飞机也在风洞实验中应用了人工智能技术，展现了在应用科学领域的广泛应用；</p><p></p><p>第五是人工智能与内容营销的结合，包括文本、图片、视频等的生成。这个领域目前非常热门。</p><p></p><p>另一方面，经过一年的演进，我们发现大模型在某些场景下仍然不太适用：</p><p></p><p>第一个挑战是对可解释性要求较高的情况，由于大模型本身是基于深度学习的系统，其“黑盒”属性使其不可解释；</p><p></p><p>第二个挑战是在对生成内容的稳定性或确定性要求较高的场景，例如需要确切答案的情况，大模型的应用较为困难，因为可能出现模型“幻觉”问题；</p><p></p><p>第三个挑战是在对实时性响应要求较高的场景中，大模型的推理速度可能不够快，从而无法满足实时需求；</p><p></p><p>第四个挑战是动态性要求较高的场景。这主要是因为大模型需要进行离线训练或离线微调，这涉及到较高的成本、时间和资源投入。由于无法实现离线实时训练，当场景变化迅速时，当前的模型可能无法适应未来的场景变化；</p><p></p><p>第五个挑战涉及一些小数据场景或数据量较少的情况。大模型目前难以在这些场景中进行有效的落地，因为我们无法进行模型的实时微调，这是海量数据与高质量数据集之间的矛盾。</p><p></p><p>当面对这一系列问题或者不适用的场景时，产业界也提出了一些新的解决方案。例如，通过技术增强的方式，我们可以使用知识增强和搜索 RAG 等方法来解决可解释性要求高的问题，解释确定性生成的一些问题，以及通过插件等方式降低大模型的落地成本。</p><p></p><p>另外还有技术融合方法。今年，人工智能产业界面临一个重要问题，即对大模型的高估，却忽略了小模型在某些情境下的有效性。我们已经看到传统人工智能在大模型崛起之前（在 2022 年之前）的应用，如人脸识别、计算机视觉和语音识别等领域，效果已经非常显著。这催生了大模型与传统人工智能包括大小模型的结合。在这个新的趋势中，大模型可以作为一个控制核心，控制在特定场景下小模型，同时使用多模型的编排，例如目前讨论的 MOE 等新方法。</p><p><img src=\"https://static001.geekbang.org/infoq/8e/8eb34d1bd90af80ca43fff1900b90870.jpeg\" /></p><p></p><h3>企业架构在 AI 时代将发生四个变化</h3><p></p><p></p><h5>InfoQ：前端业务模式的变化，势必会伴随后台架构的调整。那么，随着大模型越来越广泛和深入地赋能于具体业务，企业架构层面会呈现哪些新的特点和基础能力？企业现阶段如何着手打造新的架构体系？</h5><p></p><p></p><p>陈果：前面提到企业信息系统经历了三个阶段：数据库 ERP 阶段、云原生阶段、AI 阶段。当前，很多企业甚至还未完成第一和第二阶段，基本的核心系统和信息化都未完善，业务线上化水平低，数据不规范，稍好些的仍在进行架构现代化，尝试采用云原生等方式进行技术转型。具体来看，已经完成架构现代化的企业可能不到 30%。</p><p></p><p>而在企业从数字化现代化架构往 AI 方向发展过程中可能还会涉及四个层面的变化：</p><p></p><p>第一，企业级模型管理，涉及的是 AI 模型层，位于前端和数据之间。这一层对于企业驱动业务至关重要，具体将包含各种模型，从大模型到自然语言处理和机器学习等多种能力，形成所谓的 AI 中台。</p><p></p><p>第二，从数据管理到知识管理，涉及的是数据层。其中，不仅包括传统的结构化数据，还包括大量结构化和非结构化的企业知识。值得一提的是，对于目前的中国企业而言，最缺乏的并非是数据，而是系统化、具体化的知识。数据对企业而言是没有意义的，它们只是信息的一部分。只有当数据转化成信息、知识后才具有意义。</p><p></p><p>举个例子，比如业务流程。两个人解释业务流程可能完全不一样，而且“业务流程”一词本来就是英文单词“process”翻译而来的，有些人称之为过程。因此，我们发现从 AI 输出的结果中，处理“过程”、“流程”等词汇上混淆不清。如果知识体系本身不规范，就会影响 AI 的训练质量。中国目前最缺乏的是公共的、社会化的企业知识，这正是我本人开始着手进行企业知识开源的原因。</p><p></p><p>第三，用户界面多模态，涉及前端应用开发层。未来前端将不再仅仅是多端适配，而是多模态的适配。用户交互将涉及语音、图像、文字、视频等多种形式。这将对前端产生深远影响，需要重构人机交互方式，并解决关于人工智能应用的可解释性和信息安全的问题。</p><p></p><p>第四，业务进一步服务化、自动化。从<a href=\"https://www.infoq.cn/article/D31McGicx8M4eO6asSYq?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">云原生</a>\"过渡到人工智能阶段，企业应用领域的最大变化是出现了一个新词汇——业务自动化。我认为这个词能够充分展示 AI 对企业业务所带来的典型变革。具体而言，这种变革源于半手工流程化。过去我们谈论的是流程化，但在流程中仍然需要人工操作。</p><p></p><p>现在，我们看到了一种新的模式，即 Agent 模式。这种模式的最大变化是，许多过去由人执行的任务不再需要人工干预，未来是人机协作，人机共存的时代。以房间里的空调为例，语音呼唤空调降低两度就是一种 AI 应用。然而，这种 AI 应用仍然需要人的驱动。真正意义上的 Agent 应用是指在没有人直接驱动的情况下，根据推理和理解自动调整温度，例如，当你说“今天好热”的时候，空调就会自动降温。</p><p></p><p>在这个过程中，AI 扮演着至关重要的角色。AI 包含了传统意义上的一些应用，比如规则的优化、自动捕获以及一些业务中间的自动路由。同时，它还涵盖了深度学习方面的应用，例如大模型驱动的深度学习应用。</p><p>总的来说，未来 AI 将通过自动产生推理并生成相应动作来改变商业形态和企业运营。这种 AI 的变革可能会对公司形态带来显著的商业价值提升，这是我们需要考虑的重要因素。</p><p></p><h5>InfoQ：如果已经完成架构的现代化企业不到 30%，那么企业要从第一阶段迈向第三阶段，如何才能实现多管齐下，快速补齐基础能力的缺失呢？</h5><p></p><p></p><p>陈果：当前，企业需要重新思考数字化是否是其核心能力的问题。在数字化时代，最紧缺的资源是<a href=\"https://www.infoq.cn/article/gQxOgpedyDw8RIZ6OKkR?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">人才</a>\"。企业数字化转型最大的瓶颈之一是企业是否拥有足够多的开发者、工程师来应对数字化架构的挑战。</p><p></p><p>因为过去企业可以购买现成的软件并通过咨询顾问来落地实施，挑战主要是在处理数据和流程管理方面，而不是技术管理。今天，无论是要构建新的数字化架构，还是适应 AI 时代的业务需要，无疑，企业需要大量的开发人员。</p><p></p><p>比如，过去几年，许多企业进行中台建设，但真正成功实施的并不多。中台不仅仅是一种软件，还需要大量的工程人员去管理架构，大多数企业无法承担，这也是为什么中台对许多企业来说是个难题的原因。</p><p></p><p>然而，现实情况是，不是每个企业都有足够的资源或能力在短时间内培养和管理这么多的技术人才。因此，企业在短期内必须思考数字化是否真的是它的核心能力。这个问题实际上是没有明确答案的。</p><p></p><p>在我看来，企业在数字化方面或许不需要过于激进。过去几年，人们拼命追赶数字化转型的潮流，但谈论概念的多，真正落地的很少。</p><p></p><p>有时候，企业可能会花费更多的资金在数字化规划咨询上，而不是在建设系统和雇佣优秀的技术人才上，又或者是采取过于激进的态度，我认为这可能并不是必要的，除非你在某些领域是真正的颠覆者。比如，像滴滴这样的企业颠覆了传统的出租车行业。然而，在大多数情况下，颠覆者是少数，社会更像是金字塔结构。因此，大多数企业只需要确保在数字化转型的过程中不被淘汰，保持相对踏实的心态即可。</p><p></p><h5>InfoQ：大型模型如何与现有的系统（例如 ERP、CRM 等）结合，以实现一些 AI 创新？是否可以提供一些具体的例子来解释一下？</h5><p></p><p></p><p>陈果：ERP、CRM 属于传统的单体架构系统，人工智能对其最大的改变在于，人机互动的操作方式。ERP、CRM 等系统本身并没有流程，它们是事务处理系统，执行创建订单、创建收货或在 CRM 中创建客户和商机等操作。所有这些动作都需要用户在受到某种驱动的情况下，进入系统进行手动操作。</p><p></p><p>AI 带来的最大变化在于使这些业务流程根据某种事件自动触发，从而实现自动化操作。换句话说，AI 不一定会改变系统本身，至少在短期内不会。它改变的是对信息系统操作的过程。未来，我们可以设想，正如我之前提到的“自动化”一词，其狭义定义是指 <a href=\"https://www.infoq.cn/article/4Jc6t1bpUC3HDpHzNUXI?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">RPA </a>\"的应用。在短期内，AI 可以驱动 RPA 去操作系统。但从中长期来看，一旦系统被解构化为 API 提供，AI 将不再通过机器人去操作系统。业务流程将自动使用系统内的任何业务能力。因此，只要企业业务没有本质变化，对于传统软件如 CRM 和 ERP，AI 也许不会改变其本身的架构和逻辑，而是改变系统应用方式。</p><p><img src=\"https://static001.geekbang.org/infoq/f5/f5483026df4a0c3fe8ca9e4aeb82eb39.jpeg\" /></p><p></p><h3>大模型成本百万级起步，落地价值如何量化和评估</h3><p></p><p></p><h5>InfoQ：大模型的落地应用最后一定不是单点的创新，而是涉及方方面面的全方位变革，这对于企业的管理手段提出了新的要求。对此，中国信通院大模型落地路线图中也强调了构建大模型管理体系的重要性，是否可以介绍一下，企业在做这项工作时具体如何展开？</h5><p></p><p></p><p>曹峰：大模型的应用需要与企业的 IT 系统深度融合，但是人工智能和大模型的运营、研发、管理体系与传统的 IT 体系存在一些差异。这主要表现在大模型需要引入更多的数据量、模型文件，以及更复杂的运行监测指标、维护更新等挑战。企业迫切需要构建或升级管理体系，以应对这些挑战，并确保大模型的平稳运营、有效迭代、以及评估其智能、质效和 ROI 等方面。</p><p></p><p>为了实现这一目标，构建相关的管理体系应从以下几个维度着手。</p><p></p><p>全面的指标监测体系</p><p>包括模型、数据、业务等多个方面的指标，有机结合，实时监测运行中的指标，提前预警潜在风险。</p><p></p><p>构建模型维护体系</p><p>通过标准化的流程对大模型进行变更和升级，确保模型在运行时能够实时修正，保持高质量和稳定运行。</p><p></p><p>多维的人工智能资产管理体系</p><p>包括人工智能的数据、高质量数据集、语料库、模型、模型服务、大模型组件等，通过统一管理，保障相关资产的可用性、可追溯性、可诊断性、可审计性等关键指标。</p><p></p><p>在构建这些体系时，可以采用以下思路和解决方案：</p><p></p><p>1. 实时监测设施的可靠性、稳定性</p><p>引入实时监测工具，确保设施的稳定性，及时发现并处理任何问题。</p><p></p><p>2. 监测数据的完整性、正确性</p><p>实施数据质量监控，使用合适的工具和算法验证数据的完整性和正确性。</p><p></p><p>3. 监测大模型的性能</p><p>利用性能监测工具，评估模型的效果和性能，及时调整优化。</p><p></p><p>4. 监测大模型的业务运行状态</p><p>从业务运行性能、业务效果等维度，建立监测体系，确保大模型对业务的正常运行。</p><p></p><p>5. 监测大模型的安全可信状况</p><p>从系统安全、模型安全、数据安全、业务安全等多个维度展开，建立综合的安全监测体系，防范潜在风险。</p><p></p><h5>InfoQ：在大模型问世之前，AI 技术已经在汽车产业的多个场景中得到应用，尤其在核心的生产制造环节，如产品质检、设备维护预警等方面。那么，长城汽车是如何平衡创新技术 / 应用，和现有业务之间的关系的？</h5><p></p><p></p><p>胡阿沛：我想用一个词来表达如何平衡创新和现有业务之间的关系：守正创新。数字化建设、创新技术应用建立在业务长期稳定运行基础之上。没有这样的保障，创新将无从谈起。</p><p></p><p>其中，\"守正\"的重点在于保证业务、产品和服务的高品质，以满足用户需求，并以业务价值大小为准则。我们追求效率，并不断评估业务的高效性，寻找优化点，然后在此基础上积极追求创新。</p><p></p><p>长城汽车作为一家全球化的智能科技公司，持续投入大模型技术和其他新技术的研发和应用，旨在优化现有业务，提供更高效、更智能的解决方案，同时推动新的 AI 原生应用。我们的核心目标是提升生产效率，降低成本，并加速创新，提高企业竞争力。为实现这一目标，在内部我们进行了一些创新尝试和探索，我们开发了自己的知识应用平台，平台提供了一系列功能，能够理解企业内部的专业术语，解答问题。</p><p></p><p>我们在传统 AI 模型之外也使用了许多小模型，涵盖了视觉、自然语言处理、语音、知识图谱和搜索推荐等领域。在视觉方面，我们打造了“慧控”工业级物联网平台，融合了视频监控和各种 AI 视觉算法，实现了数字化车间管理。</p><p></p><p>此外，我们还利用语音和语言处理技术构建了问答客服系统，实现服务质检智能化。在企业级知识管理系统方面，我们结合了大模型来实现创新或升级。与此同时，在生产排期计划、最优化技术等领域我们也进行了创新，结合大模型和小模型，使它们优势互补，推动业务的创新和发展。</p><p></p><h5>InfoQ：在长城汽车，大模型在当前哪些业务场景中已经能够带来实际的业务价值和效益？具体如何体现，内部是否有明确的业务指标或相关指标来评估？</h5><p></p><p></p><p>胡阿沛：在长城汽车，大模型已经在多个业务场景中为企业带来了实际的业务价值和效益。这种体现主要通过以下几个方面。</p><p></p><p>1.提高工作效率和用户体验：大模型的应用是否真正发挥了价值，最直观的方式就是看它是否提高了工作效率。例如，在企业内部使用大模型技术，能否在宣传文案的撰写过程中提升写作效率，解决之前难以解决的问题，以及改善企业服务的体验。</p><p></p><p>2.用户自愿使用程度：大模型技术开发的应用，关键在于用户是否愿意使用。如果每天都有大量用户使用该应用，比如 ChatGPT 每个月处理的请求达到十几亿，被大量用户频繁认可和使用足以证明该应用具有实际价值。</p><p></p><p>3.衡量内部价值：长城汽车内部有一个衡量基于大模型打造的数字员工的价值指标，即通过折算或估算大模型的工作量，与完成相同任务所需的员工工作时长进行换算，从而量化大模型的贡献。对于我们内部的知识应用平台，通过观察日常运营情况，了解员工使用情况和提问量，可估算出模型带来的实际价值。</p><p></p><p>4.数据处理和深度加工效果：大模型在数据处理方面的应用也体现了实际价值。在企业内部，数据需要转化成知识，并进行分类、抽取和打标签等，以便进行有效的管理和分析。大模型通过提示工程等手段，可以高效地处理大量数据，将其转换成可管理、治理和分析的数据，从而显著提高数据处理效率。</p><p></p><p>曹峰：量化和评估问题其实是一个备受关注的话题，因为人工智能之前的投入相对较小，购买解决方案、SDK 或 SaaS 服务可能只需几十万到十几万的资金。但目前大模型应用的成本至少在百万级起步，甚至可能达到上千万。因此，如何评估投入是否划算，企业内部是否有清晰的业务指标或相关指标来进行评估，是一个备受关注的问题。</p><p></p><p>对于企业而言，特别关键的是确保投资能够带来回报。这涉及企业需要对哪些场景具有潜在价值进行盘点。然而，其中的矛盾在于，一些传统信息化效果较好的场景可能已经解决了大部分问题，引入大模型后提升的效率可能并不显著。</p><p></p><p>对于企业来说，选择场景的关键在于首先考虑场景是否适合使用大模型。其次，需要对引入大模型后的效果进行预估，包括人力成本、效率提升和收入增长等方面。不能盲目跟风，而是需要对每个场景进行明确的估算。第三，企业可以结合产业界的优秀经验，寻找高价值的场景。我们发布路线图的核心目标之一也是帮助企业找到这些高价值的场景。</p><p></p><p>在选择场景时，可以先尝试一些被证明有价值的场景，而不是一开始就过于迅速或过于激进地涉足多个场景。切忌一拥而上，而是需要在一个场景中慢慢推进。根据我们的调研，部署和使用大模型还有许多问题需要解决，因此不能贪多求快，需要从成熟的场景开始，逐步推进。</p><p></p><p>陈果：在过去的一百年里，特别是在工业领域，我们主要依赖手工操作。随后，电力技术的出现带来了重大的变革。当初开始应用电力时，我们思考的是在哪些场景中使用电力？应用电力后，我们能够为企业创造多少投资回报率（ROI）？过去，我们使用人力推动推磨，引入电动推磨后提高了效率，实际上现在我们可能仍处于类似的状态。随着电力变成一种公共能源，变得成熟起来，我们就不再需要设想如何使用电力了？</p><p></p><p>AI 的情况也类似，现在有人在论证 AI 能为企业创造多少 ROI 吗？并没有。因此，回答这个问题实际上是在思考，如果使用了 AI，它将如何对整个业务运营带来重大变化。我们需要从业务本身的角度去思考实现 ROI，而不仅仅是考虑如何购买 AI 软件，投入了多少，产出了多少。</p><p></p><h5>InfoQ：许多公司在进行大模型的部署时可能面临一些挑战。一方面，如果选择采用私有化部署，就需要花费时间和成本来理解并部署一个大模型；另一方面，由于新模型不断涌现，公司可能会跟不上大公司开源新模型的速度。如何解决这个问题呢？</h5><p></p><p></p><p>曹峰：这个问题实际上涵盖了两个方面。首先，对于模型的使用路径，开源模型的更新速度并不快。例如，Lamar2 开源后，至今已经过去了相当一段时间没有更新。其次，模型更新迭代对业务系统的影响，这确实存在。</p><p></p><p>我认为第一个问题在我们的路线图中是一个反复讨论的问题，即选择基础模型的重要性。这可能涉及选择开源解决方案或选择行业大模型。这相当于路线图绑定。一旦选择了某个基础模型，后续的变化可能会变得相对困难。例如，一旦采用了 LLAMA2 或某家企业的基础模型，后续的变化可能会涉及之前做的许多微调、大量的时间和精力投入以及数据注入。选择基础模型的核心问题在于如何做出明智的选择，或者如何确定模型路径。</p><p></p><p>第二个问题是关于如何将模型的更新形成一个流水线。之前，我们提到了一个概念叫“MLOps”。我们希望像软件工程一样，模型也能形成一个流水线。在 2023 年上半年，我们撰写了一本报告《2023 年人工智能研发运营体系（MLOps）实践指南》，这本白皮书详细介绍了一些关于模型如何更新迭代的良好实践。</p><p>这本白皮书是公开的，可以在这里查看：<a href=\"http://www.caict.ac.cn/kxyj/qwfb/ztbg/202303/t20230316_416827.htm\">http://www.caict.ac.cn/kxyj/qwfb/ztbg/202303/t20230316_416827.htm</a>\"。</p><p></p><p>目前，我们看到许多企业使用一个基础模型或部署多个基础模型，以解决路径绑定或路径依赖的问题。</p><p></p><h3>新年关键词：AI 智能体、多模态、技术人才培养</h3><p></p><p></p><h5>InfoQ：新的一年，大家对于大模型对业务创新和架构升级的赋能有什么期待和展望？</h5><p></p><p></p><p>胡阿沛：在 2023 年，大模型经历了“百模大战”，也进行了一些新的发展方向的探索，包括 Agent、智能体，以及开源社区的活跃发展。从我的角度来看，我对未来两三年有一些期待。</p><p></p><p>首先，我期待在开源社区中看到更多优秀的模型产出。谷歌曾表示 OpenAI 等闭源大模型没有护城河，大模型门槛正被开源踏破。在这个过程中，基座模型变得越来越强大，这意味着我们可以做更好的技术应用，更好地结合业务创新，使大模型能够更好地落地。如果大模型的效果不佳，在实际应用中可能会遇到很多问题。对于一般企业或规模较小的企业来说，从零开始训练一个技术模型需要投入大量的资源，并可能需要一定的积累。在国内，高质量数据的获取可能仍然是一个难题。</p><p></p><p>其次，在模型的应用方面，我比较看好 AI 智能体的应用方向，尤其是在知识对话、知识问答等应用。这种智能体可以在知识管理、数据支持以及写作或创作等方面发挥作用。通过智能体的视角看待大模型的发展，可以将其视为一个人类，去思考问题、拆解问题、选择工具以完成任务。</p><p></p><p>第三，多模态技术在国内在 2023 年并没有取得惊人的发展，但我对 2024 年比较期待，希望在前端的交互应用中能够更好地感知能力，实现多模态感知的更多可能性。</p><p></p><p>最后，未来我们希望在企业内打造一个基于大模型的智能伙伴，使每个员工都有一个懂他、深度结合数据、知识和业务系统的智能助手。这个智能助手能够提升员工的能力和生产力，使他们成为超级员工。</p><p></p><p>曹峰：我非常认同胡老师刚才提到的观点，Agent 可能以一种爆炸性的方式呈现。另外，还有一个观点就是每当一项新技术出现时，总会有很多人在短时间内高估其产生的价值，而在长期内低估它的价值，大模型也是如此。</p><p></p><p>因此，我们需要关注大模型在今年或者明年的核心任务，准确地说是释放其能力。不论是插件、Agent、还是当前的知识增强搜索，它们的核心目标都是释放大模型在对话、记忆、搜索、控制、决策等方面的能力，并产生相关的工具或新的应用模式。</p><p></p><p>我们认为从 2024 年开始，未来几年，随着大模型技术的演进，将必然释放其在技术能力和应用端价值方面的潜力，成为技术演进和应用创新的核心脉络。</p><p></p><p>陈果：我想强调两点：</p><p></p><p>第一，是大模型的应用，其中包括前文提到的智能体。这个智能体不仅拥有智能，而且还具备执行任务的能力。然而，一个聪明的机器如果没有数字化作为其基础，就无法发挥作用。这里的数字化包括物联网和各种服务等。我认为智能体存在于业务自动化中，是业务自动化中最重要的智能体。但要实现这一点，取决于企业数字化水平的提高。企业数字化水平是一个持续的过程。当企业数字化水平不够时，大模型无法发挥作用。</p><p></p><p>第二，是关于技术人才培养的问题。由于培养技术人才需要时间，大多数企业无法像互联网公司那样拥有大量的技术人员。因此，对企业而言，关键是如何以一种无需学习的方式，以及无需专业知识的方式，快速利用大模型的能力。这是我们未来需要突破的重点。</p>",
    "publish_time": "2024-01-12 16:14:22",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]