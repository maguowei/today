[
  {
    "title": "Spring Authorization Server 1.0提供了OAuth 2.1和OpenID Connect 1.0实现",
    "url": "https://www.infoq.cn/article/aVZBQSZYiCA5PhzA3EDy",
    "summary": "<p>在向Java社区<a href=\"https://spring.io/blog/2020/04/15/announcing-the-spring-authorization-server\">推出</a>\"两年半之后，VMWare<a href=\"https://spring.io/blog/2022/11/22/spring-authorization-server-1-0-is-now-ga\">发布</a>\"了Spring Authorization Server 1.0。 <a href=\"https://spring.io/projects/spring-authorization-server\">Spring Authorization Server</a>\"项目构建在<a href=\"https://spring.io/projects/spring-security/\">Spring Security</a>\"之上，支持创建<a href=\"https://openid.net/connect/\">OpenID Connect 1.0</a>\" Identity Provider和<a href=\"https://oauth.net/2.1/\">OAuth 2.1</a>\" Authorization Server。该项目取代了业已不再维护的<a href=\"https://spring.io/projects/spring-security-oauth/\">Spring Security OAuth</a>\"项目。</p><p></p><p>Spring Authorization Server也基于<a href=\"https://www.infoq.com/news/2022/11/spring-6-spring-boot-3-launch/\">Spring Framework 6.0</a>\"，需要使用Java 17作为最低版本。该项目支持<a href=\"https://docs.spring.io/spring-authorization-server/docs/current/reference/html/overview.html#feature-list\">特征列表</a>\"中描述的Authorization Grants、Token Format、Client Authentication和Protocol Endpoints。</p><p></p><p>有个示例应用阐述了使用<a href=\"https://start.spring.io/\">Spring Initializr</a>\"创建Spring Boot应用的基本配置。该示例应用是基于REST的，需要在**pom.xml**文件中包含_spring-boot-starter-web_依赖：</p><p></p><p><code lang=\"text\">dependency&gt;\n    org.springframework.boot\n    spring-boot-starter-web\n\n</code></p><p></p><p>为了阐述登录功能，请考虑如下创建REST端点的样例：</p><p></p><p><code lang=\"java\">@RestController\npublic class TimeController {\n\n    @GetMapping(\"/time\")\n    public String retrieveTime() {\n        DateTimeFormatter dateTimeFormatter =    \n            DateTimeFormatter.ofPattern(\"HH:mm:ss\");\n        LocalTime localTime = LocalTime.now();\n        return dateTimeFormatter.format(localTime);\n    }\n}\n</code></p><p></p><p>一个基础的Spring Boot应用类用来启动应用与前文创建的REST端点：</p><p></p><p><code lang=\"java\">@SpringBootApplication\npublic class TimeApplication {\n\n    public static void main(String[] args) {\n     SpringApplication.run(TimeApplication.class, args);\n    }\n}\n</code></p><p></p><p>在启动应用之后，打开<a href=\"http://localhost:8080/time\">http://localhost:8080/time</a>\" URL，将会显示当前时间：</p><p></p><p><code lang=\"text\">21:00:34\n</code></p><p></p><p>现在，我们添加Spring Authorization Server依赖：</p><p></p><p><code lang=\"java\">\n    org.springframework.security\n    spring-security-oauth2-authorization-server\n    1.0.0\n\n</code></p><p></p><p>当再次启动应用后，日志中会打印出密码，例如：</p><p></p><p><code lang=\"java\">Using generated security password: d73d5904-25a1-44ed-91e1-a32c4c5aedb8\n</code></p><p></p><p>现在，当访问<a href=\"http://localhost:8080/time\">http://localhost:8080/time</a>\"时，请求会重定向到<a href=\"http://localhost:8080/login\">http://localhost:8080/login</a>\"，并展示如下所示的页面：</p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/news/2022/12/spring-authorization-server-1-0/en/resources/1Login-1671654888951.png\" /></p><p></p><p>我们使用默认的用户名_user_以及打印出的密码登录之后，请求会被重定向到<a href=\"http://localhost:8080/time?continue\">http://localhost:8080/time?continue</a>\"，并再次显示当前时间。</p><p></p><p><a href=\"https://docs.spring.io/spring-authorization-server/docs/current/reference/html/getting-started.html#developing-your-first-application\">“开发第一个样例”</a>\"文档详细介绍了Spring Authorization Server需要的几个**<a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Bean.html\">@Bean</a>\"组件，它们应该定义在带有<a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html\">@Configuration</a>\"**注解的类中。第一个bean用来定义OAuth2 <a href=\"https://docs.spring.io/spring-authorization-server/docs/current/reference/html/protocol-endpoints.html\">Protocol Endpoint</a>\"：</p><p></p><p><code lang=\"java\">@Bean\n@Order(1)\npublic SecurityFilterChain protocolFilterChain(HttpSecurity http)\n    throws Exception {\n    OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\n    http\n        .exceptionHandling((exceptions) -&gt; exceptions\n        .authenticationEntryPoint(\n            new LoginUrlAuthenticationEntryPoint(\"/login\"))\n        )\n        .oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt)\n        .getConfigurer(OAuth2AuthorizationServerConfigurer.class)\n        .oidc(Customizer.withDefaults());\n\n        return http.build();\n}\n</code></p><p></p><p>第二个bean用来定义Spring Security <a href=\"https://docs.spring.io/spring-security/reference/servlet/authentication/index.html\">Authentication</a>\"：</p><p></p><p><code lang=\"java\">@Bean\n@Order(2)\npublic SecurityFilterChain authenticationFilterChain(HttpSecurity http) throws Exception {\n    http\n    .authorizeHttpRequests((authorize) -&gt; authorize\n        .anyRequest().authenticated()\n    )\n    .formLogin(Customizer.withDefaults());\n\n    return http.build();\n}\n</code></p><p></p><p>在真正的产品中，我们应该使用合理的方案来存储用户，但是在这个简单的样例中，用户_james_和密码_gosling_存储在了内存中：</p><p></p><p><code lang=\"java\">@Bean\npublic UserDetailsService userDetailsService() {\n    UserDetails userDetails = User.withDefaultPasswordEncoder()\n        .username(\"james\")\n        .password(\"gosling\")\n        .roles(\"FOUNDER\")\n        .build();\n\n    return new InMemoryUserDetailsManager(userDetails);\n}\n</code></p><p></p><p>新的客户端使用**<a href=\"https://docs.spring.io/spring-authorization-server/docs/current/reference/html/core-model-components.html#registered-client-repository\">RegisteredClientRepository</a>\"**注册在了内存中：</p><p></p><p><code lang=\"java\">@Bean\npublic RegisteredClientRepository registeredClientRepository() {\n    RegisteredClient registeredClient =            \n        RegisteredClient.withId(UUID.randomUUID().toString())\n        .clientId(\"id\")\n        .clientSecret(\"secret\")\n        .clientAuthenticationMethod(\n            ClientAuthenticationMethod.CLIENT_SECRET_BASIC)\n        .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)\n        .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)\n        .authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS)\n        .redirectUri(\n          \"http://127.0.0.1:8080/login/oauth2/code/messaging-client-oidc\")\n        .redirectUri(\"http://127.0.0.1:8080/authorized\")\n        .scope(OidcScopes.OPENID)\n        .scope(OidcScopes.PROFILE)\n        .scope(\"message.read\")\n        .scope(\"message.write\")\n        .clientSettings(\n            ClientSettings.builder()\n            .requireAuthorizationConsent(true).build())\n        .build();\n\n  return new InMemoryRegisteredClientRepository(registeredClient);\n}\n</code></p><p></p><p>访问令牌会使用如下的bean进行签名，它会使用**com.nimbusds.jose.jwk.RSAKey，而不是java.security.interfaces.RSAKey**：</p><p></p><p><code lang=\"java\">@Bean\npublic JWKSource jwkSource() {\n    KeyPair keyPair = generateRsaKey();\n    RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();\n    RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();\n    RSAKey rsaKey = new RSAKey.Builder(publicKey)\n        .privateKey(privateKey)\n        .keyID(UUID.randomUUID().toString())\n        .build();\n    JWKSet jwkSet = new JWKSet(rsaKey);\n    return new ImmutableJWKSet&lt;&gt;(jwkSet);\n}\n\nprivate static KeyPair generateRsaKey() {\n    KeyPair keyPair;\n    try {\n        KeyPairGenerator keyPairGenerator =                     \n            KeyPairGenerator.getInstance(\"RSA\");\n        keyPairGenerator.initialize(2048);\n        keyPair = keyPairGenerator.generateKeyPair();\n    }\n    catch (Exception ex) {\n        throw new IllegalStateException(ex);\n    }\n    return keyPair;\n}\n</code></p><p></p><p><a href=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/oauth2/jwt/JwtDecoder.html\">JwtDecoder</a>\"会用来解码已签名的访问令牌，它会使用com.nimbusds.jose.proc.SecurityContext，而不是**org.springframework.security.core.context.SecurityContext**：</p><p></p><p><code lang=\"java\">@Bean\npublic JwtDecoder jwtDecoder(JWKSource jwkSource) {\n    return OAuth2AuthorizationServerConfiguration.jwtDecoder(jwkSource);\n}\n</code></p><p></p><p>最后，**<a href=\"https://docs.spring.io/spring-authorization-server/docs/current/reference/html/configuration-model.html#configuring-authorization-server-settings\">AuthorizationServerSettings</a>\"**会用来配置OAuth2认证服务器：</p><p></p><p><code lang=\"java\">@Bean\npublic AuthorizationServerSettings authorizationServerSettings() {\n    return AuthorizationServerSettings.builder().build();\n}\n</code></p><p></p><p>现在，当浏览<a href=\"http://localhost:8080/time\">http://localhost:8080/time</a>\"时，可以使用用户名_james_和密码_gosling_来查看当前的时间。在遵循这些步骤后，该应用可以扩展为使用各种OAuth2和OpenID Connect 1.0功能，如令牌。</p><p></p><p>有多个视频对Spring Authorization Server进行了详细解释，例如Spring Security团队的核心提交者<a href=\"https://www.linkedin.com/in/joegrandja/\">Joe Grandja</a>\"在旧金山JUG上做了<a href=\"https://www.youtube.com/watch?v=3NliXoTcPSo\">Spring Authorization Server入门</a>\"的演讲，<a href=\"https://www.manning.com/books/spring-security-in-action\">Spring Security in Action</a>\"的作者<a href=\"https://twitter.com/laurspilca\">Laurentiu Spilca</a>\"在Spring I/O上介绍了<a href=\"https://www.youtube.com/watch?v=DaUGKnA7aro\">如何使用Spring Security实现OAuth 2认证服务器</a>\"。</p><p></p><p>该项目是基于<a href=\"https://tanzu.vmware.com/support/oss\">VMware Tanzu开源软件支持</a>\"策略发布的，这意味着主要版本的支持时间长达三年。另外，VMware还提供24/7的<a href=\"https://tanzu.vmware.com/spring-runtime\">商业支持</a>\"。</p><p></p><p>更多信息可以参考<a href=\"https://docs.spring.io/spring-authorization-server/docs/current/reference/html/getting-started.html\">入门指南</a>\"、<a href=\"https://docs.spring.io/spring-authorization-server/docs/current/reference/html/\">参考</a>\"文档和GitHub上的<a href=\"https://github.com/spring-projects/spring-authorization-server/tree/main/samples\">示例</a>\"。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/12/spring-authorization-server-1-0/\">Spring Authorization Server 1.0 Provides Oauth 2.1 and OpenID Connect 1.0 Implementations</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/09IBGv9JggKY4PNAIyPD\">一文看懂OAuth 2.0 (附实践案例)</a>\"</p><p><a href=\"https://www.infoq.cn/article/eUvhTtYf3JMfakMm8cmN\">OAuth 2.0与OpenID Connect协议的完整指南</a>\"</p>",
    "publish_time": "2023-01-18 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "仰望星空， 2023年技术趋势展望",
    "url": "https://www.infoq.cn/article/x0HfHmI6FDZf6fSLwMch",
    "summary": "<p>或许每一个打工人都走不出浪浪山，但你一定要下载一份《中国软件技术发展洞察和趋势预测研究报告2023》。</p>\n<p>本次报告包含诸多干货及亮点，包括但不限于：</p>\n<ul>\n<li>首次发布 2023 中国技术成熟度评估曲线</li>\n<li>2022年三大技术市场突破</li>\n<li>2023年六大技术市场发展趋势</li>\n</ul>\n<p>已经编了一年码的你，在这岁末年初之际，需要“抬起头来”看明年的技术趋势啦！快来收下InfoQ 研究中心团队为中国开发者的新春献礼！</p>\n<p><img alt=\"\" src=\"https://static001.infoq.cn/resource/image/b0/7a/b08a11114d251a1e284fc676a036527a.png\" /></p>",
    "publish_time": "2023-01-18 09:38:40",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "从大前端“穿越”到终端，开发者应该必备什么技能？ | 解读终端的 2022",
    "url": "https://www.infoq.cn/article/6wL1i9T84a3ihJy09YSl",
    "summary": "<p></p><p>采访嘉宾 | 郭虹宇（弘禹）、舒文亮（舒文）</p><p>编辑 | 闫园园</p><p>&nbsp;</p><p></p><blockquote>本文是 “<a href=\"https://www.infoq.cn/theme/168\">2022 InfoQ 年度技术盘点与展望</a>\"” 系列文章之一，由 InfoQ 编辑部制作呈现，重点聚焦终端领域在 2022 年的重要进展、动态，希望能帮助你准确把握 2022 年终端领域的核心发展脉络，在行业内始终保持足够的技术敏锐度。&nbsp;“InfoQ 年度技术盘点与展望”是 InfoQ 全年最重要的内容选题之一，将涵盖操作系统、数据库、AI、大数据、云原生、架构、大前端、编程语言、开源安全、数字化十大方向，后续将聚合延展成专题、迷你书、直播周、合集页面，在 InfoQ 媒体矩阵陆续放出，欢迎大家持续关注。&nbsp;特此感谢郭虹宇（弘禹）、舒文亮（舒文）（按姓名首字母排序）对本文的贡献，他们的真知灼见，是本文能与大家见面的关键。</blockquote><p></p><p>&nbsp;</p><p>诚然，刚刚过去的 2022，对整个互联网行业来说，是极具挑战且富有变化的一年，然而聚焦到大前端技术领域，整体上仍保持平稳向前的状态，如果一定要用关键词形容，综合受访专家看法，本文认为“深度优化”一词较为贴切。</p><p>&nbsp;</p><p>所谓“深度优化”，是指前端领域经过蓬勃发展，已逐渐进入成熟期，短时间内并没有出现令人眼前一亮的技术拐点，但同时据多位身处技术洪流中的专家预判，新一代的技术也正在悄然孕育与布局。当然，这也意味着又一道难题摆在了当代开发者面前：大前端领域划时代分水岭将发生在何处？</p><p>&nbsp;</p><p>或许，我们能从近几年发生的某些重要事件中看出一些端倪：</p><p>&nbsp;</p><p>在 WWDC 2019 上，苹果更新了 ARKit 增强现实平台，并宣布推出全新的 ARKit 3；在 WWDC 2021 上，RealityKit 2 新增加了 Object Capture API，通过该 API，能够帮助开发者将在 iPhone 上拍摄的视频，在几分钟内创建真实世界对象的高质量、照片般逼真的 3D 模型，并将它们转换为针对 AR 优化的 3D 模型；在 2022 Google I/O 上，谷歌 CEO 发布了地图新功能，虚拟与现实相结合，仅通过图像就能生成实景画面，该功能简称为“沉浸式视图”；同样在 2022 Google I/O 上，谷歌发布了一款 AR 眼镜作为“one more thing”压轴登场；2022 年 7 月，华为正式宣布发布 HarmonyOS 3，HarmonyOS 是华为推出的面向万物互联的全场景分布式操作系统；疫情三年，中国互联网&nbsp;to&nbsp;B&nbsp;市场大规模增长。&nbsp;2022&nbsp;年&nbsp;12&nbsp;月，钉钉宣布注册用户破&nbsp;6&nbsp;亿，第三方数据显示企业微信&nbsp;MAU&nbsp;过亿。</p><p>......</p><p>&nbsp;</p><p>那么对于开发者来说，究竟从这些事件中能够得到什么信号，信号又指引了哪些方向？接下来，本文将跟随来自阿里终端委员会两位技术专家弘禹与舒文的脚步，探索终端的过去与未来，试图为身处迷雾中的开发者带来问题的部分答案。</p><p>&nbsp;</p><p>实际上，相较大前端这一技术名词，阿里巴巴曾不止一次提到终端这个概念，这不禁引人好奇，当大前端的含义仍被业内津津乐道之时，终端的说法又从何而来？</p><p>&nbsp;</p><p></p><h2>从大前端到终端，未来已来</h2><p></p><p>&nbsp;</p><p>弘禹谈到，终端其实并不是一个新词，甚至对于资深开发者来说已经亲眼见证了几代终端的变化：从最早80年代使用的显示器加键盘过渡到 PC 普及，再过渡到如今移动端设备普及，可以看到，大概每十年终端的边界都会迎来一次扩展。基于此技术趋势，阿里巴巴沉淀出对“终端”的定义，即： “为用户提供人机交互的设备及应用。当前以 UI 交互终端为主，如手机、PC、平板等。”</p><p>&nbsp;</p><p>“我们在包括不限于 D2 大会等在内的各个场合都提‘终端’这个概念，是因为阿里正在以自己对行业的理解和认知在对未来做预判。”舒文谈道，同时他借用今年阿里终端委员会成立时对内公布的两段话进一步阐释了终端的内涵：</p><p>&nbsp;</p><p></p><blockquote>随着技术的演进，当下的前端和客户端有了越来越深的相互渗透：Web 的开放性和高效迭代，客户端技术的即时体验和原生能力，持续升级的技术体系像有生命意识一般朝着“既要又要”的方向攀沿：运行在客户端内的 Web、Hybrid API、拥抱 W3C 标准的动态化跨端引擎（Weex 2.0）、基于开源 Flutter 生态的大前端研发体系，都在让前端和客户端不断地交织融合、模糊着边界；&nbsp;更为重要的是，互联网基础设施越来越完备、终端设备规模&amp;类型爆炸式增长，用户的体验将不再单纯的是网页或 App，不同的信息载体都将拥有自己的体验：头戴式 VR 设备的沉浸式体验、扫码枪的爽快支付、车机的语音和硬件呼叫应答、商场的各类娱乐屏幕、家庭的智能设备，甚至健身房的魔镜都不断在印证着科幻小说作家那句，“未来早已到来，只是尚未平均分布”。用户的体验将被空前的满足，而我们则更应该提前做好准备应对变化，面向用户有统一全局的终端视角。</blockquote><p></p><p>&nbsp;</p><p>螺旋形理论讲到，事物的发展或进步不是直线式上升，而是类似于“螺旋”般上升，这个理论放到前端技术领域，同样也适用。结合前文提到的重要事件释放的信号来看，大前端领域虽然未曾行至清晰拐点，但端技术的重要性确是日渐凸显。终端概念的提出，背后的本质正是看到了前端和客户端的互相渗透，同时期望二者能够尽快打破过往壁垒，及早为新的终端设备和体验做好技术和人才上的布局。</p><p>&nbsp;</p><p>了解终端的概念后，下面将按照领域中的重点技术方向，感知当下领域的具体发展现状，以及展望未来，领域中面临的机遇与挑战。</p><p>&nbsp;</p><p></p><h2>重点技术趋势解读</h2><p></p><p>&nbsp;</p><p></p><h3>Web 开发仍是主流</h3><p></p><p>&nbsp;</p><p>2021 年 5 月，InfoQ 发布的编程语言 4 月排行榜中显示：Web 开发依然是终端领域的主流。据投票数据显示，Web 开发得票率为 68%，iOS 开发得票率为 16%，而 Android 开发则为 5% 。同时，小程序开发以 6% 的得票率超过 Android 开发。那么在 2022 年，这一趋势是否发生了变化？对此，舒文谈道，就其个人观察，这一趋势不仅没有变，从某种角度来讲，反而会变得更为主流。以桌面领域以及移动互联网领域两个纬度分析：</p><p>&nbsp;</p><p>桌面领域</p><p>&nbsp;</p><p>过去两年， to B 市场不断被挖掘，桌面终端技术逐渐升温。基于浏览器的 Web 技术自不必多说，原来的桌面客户端领域也开始大量渗入 Web 技术。究其原因，不外乎三点：</p><p>&nbsp;</p><p>桌面硬件性能高度过剩；类 Eeletron/Tauri 的开发框架持续完善带来诸多成功案例；操作系统原生支持 Web 技术进行研发（如 Windows 支持 WebView2、PWA）。</p><p>&nbsp;</p><p>移动互联网领域</p><p>&nbsp;</p><p>其实，无论什么技术形态或者研发模式，本质上都在回答一个务实的问题：如何让技术方案做到便宜（成本低）、好用（易上手）、质量高（交互体验好）。在过去很多年，移动 App 领域中，Web ( WebView ) 天生具备了前两者优势，但却也因受限于太多因素，如独立的进程策略、高耗时的启动渲染逻辑、缓存能力不完善等在高质量交付上总是捉襟见肘。因此在过去，开发者们时常会听到一个说法：“先用 Web 搞，然后慢慢 Native 化。”</p><p>&nbsp;</p><p>而当下，这种情况已发生了巨大的变化，其中，促使这种变化的原因主要有两个：</p><p>&nbsp;</p><p>手机硬件性能的高度过剩，愈发成熟的跨平台基础设施（包括不限于脚本引擎、排版引擎）都使得跨平台研发成为行业的主流诉求；具象到研发模式上，类 Web 的方式在效率和体验上几乎是规模化研发下的最平衡解。</p><p>&nbsp;</p><p></p><h3>主流跨端框架</h3><p></p><p>&nbsp;</p><p>根据终端的定义，目前市面上“端”的形态多种多样，为了解决多端独立开发的问题，跨平台技术便应运而生。目前，在各大互联网公司一起努力下，市面上出现了各种跨平台框架。那么跨平台框架 2022 年应用情况如何呢？首先看几个业界主流解决方案：Flutter、React Native 、Weex。</p><p>&nbsp;</p><p>Flutter</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/9b/9b887a6fe4de33a49642fae6da5d9767.png\" /></p><p></p><p>&nbsp;</p><p>站在 2023 年初看来，Flutter 已经是不再是以前小众的跨平台框架了。如图所示，可以看到如今的 Flutter 已经有高达 148k 的 Star 和 24.2k 的 Fork。从官方公布的数据上， Flutter 已经基本超过其他跨平台框架，成为最受欢迎的移动端跨平台开发工具，截至 2022 年 2 月，有近 50 万个应用程序使用了 Flutter。</p><p>&nbsp;</p><p>2022 年 5 月，Flutter 3.0 正式发布，不同于之前的版本，Flutter 3 新增了对 macOS 和 Linux 应用程序的稳定支持。“Flutter 3.0 出来之后，我个人感觉它这套体系会更成熟”，弘禹谈道，同时他认为 Flutter 未来可能会向布局多端多设备上更迈进一步。“这也给业界一个更强的信息，就是真正实现过往我们一直都在谈的一套代码多端运行”。不过，他也坦言这在技术上确实是有一些瓶颈和阻力的。</p><p>&nbsp;</p><p>2022 年 8 月，谷歌又<a href=\"https://medium.com/flutter/announcing-flutter-3-3-at-flutter-vikings-6f213e068793\">发布了</a>\" Flutter 的 2022 年的第 3 个版本，即<a href=\"https://medium.com/flutter/whats-new-in-flutter-3-3-893c7b9af1ff?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjI4NzQ5MTksImZpbGVHVUlEIjoiYVd0TjgxWmxuZThSUEp3VSIsImlhdCI6MTY2Mjg3NDYxOSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ox2CgUlMGozaizAF2zGY1K0ierBJ2S4ANOCc4sVM83o\">版本3.3</a>\"，随之一起发布的还有 <a href=\"https://medium.com/dartlang/dart-2-18-f4b3101f146c?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjI4NzQ5MTksImZpbGVHVUlEIjoiYVd0TjgxWmxuZThSUEp3VSIsImlhdCI6MTY2Mjg3NDYxOSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ox2CgUlMGozaizAF2zGY1K0ierBJ2S4ANOCc4sVM83o\">Dart 2.18</a>\" 。这两个版本都是改进版，没有添加重大的新特性。</p><p>&nbsp;</p><p>React Native</p><p>&nbsp;</p><p>对于 React Native 来说，它一如既往地在跨平台应用程序开发中占据一席之地。大多数科技巨头都使用它来开发应用程序。2022 年我们看到的最新和关键变化之一是其架构的更新。</p><p>&nbsp;</p><p>React Native 0.69&nbsp;发布了强大的新功能，例如 React 18 支持和捆绑的 Hermes。它带有默认启用的 React 18、useId 等新钩子以及 useTransition 或完全 Suspense 支持等新功能。</p><p>&nbsp;</p><p>Weex</p><p>&nbsp;</p><p>2013 年，阿里开始 All in 无线，整个互联网都在做 PC 到移动端的转型，那几年移动端流量暴涨，设备性能也较差，这时，肩负着历史使命的 Weex 出现了。</p><p>&nbsp;</p><p>目前，手机淘宝仍在大规模使用 Weex，主要应用于需要快速迭代的产品、业务以及大量卡片场景。2020 年八月份启动 Weex 2.0 项目，不再依赖系统 UI，开发自绘渲染引擎，并且保持向前兼容。</p><p>&nbsp;</p><p>受限于篇幅原因，本文无法一一展现全部众多跨平台框架，那么对于开发者来说，又该如何众多跨端框架作抉择呢？</p><p>&nbsp;</p><p>弘禹认为对于初创公司或者规模较小的团队来说，在人员配置以及能力模型契合的前提下，Flutter 或许是一个比较好的选择。不过，无论选择哪个跨平台框架，最重要的还是依据项目场景，比如可以用 Flutter 做 App 底座或者 iOS、安卓的跨端技术选型，但如果做跨多端甚至跨应用，则建议选择偏 Web 的框架。“不管选 Flutter、RN 还是 Weex，我觉得最重要的还是结合场景，同时结合团队不同发展阶段和人员配置情况，再去做综合的判断取舍和选择。”弘禹总结。</p><p>&nbsp;</p><p></p><h3>JavaScript &amp; Typescript</h3><p></p><p>&nbsp;</p><p>2007 年，Jeff Atwood 提出著名的阿特伍德定律，“any application that can be written in JavaScript, will eventually be written in JavaScript”，意指“任何可以用 JavaScript 来写的应用，最终都将用 JavaScript 来写”。在上述报告中，这一定律再次用数据得到了印证：终端领域编程语言使用情况上，JavaScript 以 78.5% 的得票率，排名第一；而 TypeScript 得票率为 42.9%，排名第二。</p><p>&nbsp;</p><p>对此，舒文判断，目前这一趋势依然不变，并且从长远来看，也会持续较长时间。毕竟终端领域的交付，早已并非过往简单地实现还原界面，而是变得越来越繁复，这意味着逻辑复杂且规模庞大的&nbsp;Javascript&nbsp;应用程序成为普遍事实，当然，也需要越来越多的工程师参与维护迭代。</p><p>&nbsp;</p><p>Typescript&nbsp;中的&nbsp;“Type”，正是通过程序中的规则来建立秩序的类型系统，从语言层面提供基础，同时缓解这两类问题。借用《人月神话》一书中的观点：</p><p>&nbsp;</p><p></p><blockquote>需要协作沟通的人员的数量影响着开发成本，因为成本的主要组成部分是相互的沟通和交流，以及更正沟通不当所引起的不良结果。</blockquote><p></p><p>&nbsp;</p><p>不过，需要开发者注意的是，以上说法并不意味着 Typescript&nbsp;有朝一日完全成为 JavaScript 的替代品。尽管 Typescript 的主要贡献者&nbsp;Hejlsberg&nbsp;确实提到&nbsp;“竞争”这个词，但此“竞争”单纯从浏览器语言角度出发的。“事实上，它们二者更像是“亲缘”关系，当然，也是超集和子集的关系”。从功能层面，某个功能或特性进入到&nbsp;ECMAScript&nbsp;的标准化流程相对稳定阶段，即会在&nbsp;TypeScript&nbsp;中被纳入且进入社区化状态。</p><p>&nbsp;</p><p>回顾 2022 年，Typescript&nbsp;版本迭代很快，2 月 TypeScript&nbsp;4.6&nbsp;发布，5 月 TypeScript&nbsp;4.7 发布，8 月 TypeScript&nbsp;4.8 发布，11 月 TypeScript 4.9 发布。几个版本迭代中，除了常规的语法改进和性能增强、工具优化，也有较为亮眼的三点升级：</p><p>&nbsp;</p><p>性能分析层面(v4.6)：针对高耗费性能的类型，TypeScript&nbsp;有&nbsp;generateTrace&nbsp;进行输出，但是易读性很低，现在提供可视化方法进行阅读。&nbsp;在此基础上，<a href=\"https://www.npmjs.com/package/@typescript/analyze-trace\">还发布了一个&nbsp;Trace&nbsp;分析工具</a>\"；Node&nbsp;支持（v4.7）：对&nbsp;Node.js&nbsp;16&nbsp;的&nbsp;ECMAScript&nbsp;模块&nbsp;(ESM)&nbsp;支持以及新的编程语法、新的关键字、新的&nbsp;Compiler&nbsp;Options、类型推导增强等；引入文件系统事件检测文件(v4.9)：在之前的版本&nbsp;Typescript&nbsp;使用轮询检测文件，它意味着需要周期性的文件检查。虽然轮询不会引入跨平台问题，但在非常大的&nbsp;TypeScript&nbsp;工程项目中，意味着额外的性能开销。在&nbsp;4.9&nbsp;之后默认了文件系统事件，只做失败回退（至轮询）。</p><p>&nbsp;</p><p>在发布两个 Beta&nbsp;和两个&nbsp;RC&nbsp;版本之后，TypeScript&nbsp;团队发布了将于 2023 年 5 月释放 v5.0 的计划，在该计划中，团队也明确了 TypeScript 的下一步路线：语言和编译器紧跟标准（社区&amp;标准化）、优化生产工具效率（生态）、优化性能（基座）。“当然，大多优秀的开源项目都有着清晰的演进路线，但是，最近几年&nbsp;TypeScript&nbsp;团队在演进确定性、核心逻辑坚持上给予了开发者非常强的信心，这也值得我们每个工程师学习。”</p><p>&nbsp;</p><p></p><h3>WebAssembly</h3><p></p><p>&nbsp;</p><p>有人说 WebAssembly 的发明，相当于再一次发明了 Flash、Silverlight 甚至是 Java。作为一种新的运行时，它与&nbsp;JavaScript&nbsp;运行时协同工作，具有轻量级、泛语言支持、兼具高性能和移植性等优势，可以说一诞生就自带光环。2022 年 4 月，W3C 公布了 WebAssembly 2.0 的第一批公共工作草案。</p><p>&nbsp;</p><p>目前来看，这项技术在国内外已有了一些非常典型的应用场景，国外包括&nbsp;<a href=\"https://blog.chromium.org/2019/06/webassembly-brings-google-earth-to-more.html\">Google&nbsp;Earth</a>\"、<a href=\"https://www.figma.com/blog/rust-in-production-at-figma/\">Figma</a>\"&nbsp;、<a href=\"https://web.autocad.com/login\">AutoCAD&nbsp;Web&nbsp;版</a>\"、Photoshop&nbsp;Web&nbsp;版、微软的&nbsp;<a href=\"https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor\">Blazor&nbsp;WebAssembly</a>\"&nbsp;等，国内包括但不限于蚂蚁链智能合约、腾讯邮箱（部分功能）、<a href=\"https://github.com/Bilibili/flv.js/\">开源项目&nbsp;flv.js</a>\"&nbsp;等。</p><p>&nbsp;</p><p>单纯从浏览器厂商来讲，WebAssembly&nbsp;的重要性已经受到了一致认可，甚至连原本支持计划落后的 Safari&nbsp;都在&nbsp;2021、2022&nbsp;年加快了对它的支持。但也可以看到，WebAssembly 2.0 仍然只是一个草案，意味着仍然有待讨论的问题未达成一致，这里面既涉及到一些技术细节，也受到一定程度的厂商考量。“从这个角度来看，WebAssembly 志远道艰且阻。&nbsp;”</p><p>&nbsp;</p><p>然而，如果换个角度去看，WebAssembly 的前景似乎也谈得上光明：</p><p>&nbsp;</p><p>首先，从&nbsp;Web&nbsp;&nbsp;开发者来看，​虽然以&nbsp;JavaScript/CSS/HTML&nbsp;为基座的应用开发模式占据了浏览器应用的唯一选项，但依然有两个难题自诞生之初就悬在整个开发生态之上：</p><p>&nbsp;</p><p>受限于&nbsp;JavaScript&nbsp;语言缺陷和&nbsp;ECMAscript&nbsp;的完备支持程度，大型应用的可开发、可维护性； ​复杂应用下的用户端体验性能问题。 ​</p><p>&nbsp;</p><p>前者已经出现&nbsp;TypeScript&nbsp;及各类生态工具链的完善等解决办法来用以规避，而后者，截至目前，WebAssembly&nbsp;仍是最有影响力的根因解法之一。</p><p>&nbsp;</p><p>其次，从行业视角来看，​大型软件、复杂应用面临最大的问题之一即是跨平台研发的成本问题，而浏览器及其依赖的标准具备天然的、法理性的跨平台特性。 由此​也带来一个非常严肃的思考：如果有一项技术方案能够将大型软件、复杂应用低成本移植到浏览器环境下，且保持足够的性能，那它除了获得成本收益外，还将具备更低成本的用户体验提升（免安装、中心化迭代），其背后的价值潜力将充满想像。 ​舒文认为，这正是 Figma&nbsp;具有叹为观止的商业估值的原因之一，再进一步讲，这也正是当前较完备的&nbsp;WebAssembly&nbsp;的产品范例都是工业化程度、复杂度较高的软件应用的原因。</p><p>&nbsp;</p><p>站在当下，如果要真正解决前面提到的两个难题，仍需要更完备的技术支撑，并且要解决的问题也要远超过当前此技术的进展：除了&nbsp;<a href=\"https://www.w3.org/blog/news/archives/9509\">2.0&nbsp;草案提到的</a>\"&nbsp;WebAssembly&nbsp;Core&nbsp;Specification、WebAssembly&nbsp;JavaScript&nbsp;Interface、WebAssembly&nbsp;Web&nbsp;API&nbsp;亟待解决以外，还有未形成共识的&nbsp;Relaxed&nbsp;SIMD（宽松&nbsp;SIMD）、Exception&nbsp;handling（异常处理）、<a href=\"https://github.com/WebAssembly/threads/blob/main/proposals/threads/Overview.md\">Threads</a>\"（真正的多线程）&nbsp;等问题需要注意。</p><p>&nbsp;</p><p>总之，短期来看，WebAssembly&nbsp;的发展是低于行业观察者预期的，即使是像异常处理这种特性已经在&nbsp;Phase&nbsp;3&nbsp;阶段，但如果搜索常见的&nbsp;WebAssembly&nbsp;库&nbsp;，流行的库仍局限在特定数学计算、利用大型成熟&nbsp;C++&nbsp;代码库将其功能带到&nbsp;Web（无需移植到&nbsp;JavaScript），按照这个态势发展，它会转变成是典型的利基（Niche）技术，这其实是失控的。</p><p>&nbsp;</p><p>而长期来看，WebAssembly&nbsp;是一项非常值得关注的技术领域，其诞生不过十年间快速受到社区认可并纳入标准，并被厂商广泛支持，对接广泛的语言支持（Rust、Go、C、C++等），甚至衍生到公开技术联盟（Bytecode&nbsp;Alliance），还是有相当大的机会解决前面提到的复杂&nbsp;Web&nbsp;应用下的端体验问题。“当然，前提是在适合的场景下。”</p><p>&nbsp;</p><p></p><h3>DevOps</h3><p></p><p>&nbsp;</p><p>DevOps 是一整套成熟、完整的软件开发&amp;测试运维的方法论和实施体系。在崇尚敏捷迭代、高效部署的现代软件研发思潮中，它在众多高级技术决策者心目中几乎是事实正义。</p><p>&nbsp;</p><p>而它的实践在过去几年，也被执行得坚决且持续：这不仅反映在大量科技公司的运维部门和开发部门的高度合并，同时也催生出海量的衍生技术产品。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1c/1c6699a8dd6aa5562798a77c79871ba3.png\" /></p><p></p><p>Ledge 公司 DevOps 元素周期表</p><p>&nbsp;</p><p>聚焦到终端领域，相对中心化的 Web 产品而言，移动 App 的 DevOps 的贯彻对于技术效率的提升显得尤为关键。这里弘禹、舒文以手淘为例进行了说明：</p><p>&nbsp;</p><p>首先，对于手淘 App 来说，从平台视角看因为淘宝业务体量、架构自身复杂度、代码库规模庞大等原因，单版本集成模块数超过百级，双端构建时长超过 15 分钟，出包成功率极端情况下也不足&nbsp;80%。因此，阿里终端团队今年将重点解决两大工程技术命题，一方面如何通过构建技术突破持续优化超级 App 的构建时长和成功率，通过包括不限于构建技术升级、构建过程优化、构建软硬件优化等技术手段，最终成功地将“一杯咖啡，构建成功”变成现实。与此同时，为了改善日常工程师的研发环境痛点，通过 Web/CLI 多端工程产品升级使“做 XXX 一行命令就够了、分钟级配好迭代配置”的研发体验交付到工程师手中，极大地提升了日常研发效率，逐渐成为终端的一种工作方式。</p><p>&nbsp;</p><p>同时，对于手淘业务来讲，从业务视角看需求全周期上线时长决定了业务创新速度，App 版效及需求交付效率是最大瓶颈，全量发布流程在叠加各类卡口情况下约需要 150+ 环节，App 版本发布及运维成本居高不下，需求迭代生命周期也相当复杂：需求经历从设计、开发、变更、集成、一灰 &amp; BugFix、二灰 &amp; BugFix、多外部渠道上架、自有渠道全量整个过程直接制约了业务发展。为了解决这一挑战，阿里终端团队一方面通过工程平台的版效能力升级，实现了全环节70% 自动化率，使手淘实现低成本的周版发布，另一方面基于 Android&nbsp;AppBundle 研发了无Hack、低适配成本、零性能损耗的原生动态化框架，云端结合实现手淘 App 的发布动态化，基本实现小时级近千万设备的更新覆盖效率，同时也有机会革新集成窗口机制，让业务创新更快发生，阿里巴巴在终端工程效能水平上明显提升。</p><p>&nbsp;</p><p>另外，关于 DevOps 的讨论其实一直也没有停止。 2021 年 7 月， Sid Palas 在推特上一语惊起千层浪 ：\"DevOps is dead , long live Platform Engineering!\" ，2022 年 8 月，InfoQ 也曾转译过 Scott Carey 的文章：“<a href=\"https://www.infoq.cn/article/FfBlx8SYkV9hDBsgolqu\">要什么 DevOps，我们开发者根本不想做运维</a>\"！”这两个讨论中，他们都有相类似的观点，即 DevOps 是技术管理者的美好愿望，但是对于编程主业的工作者来说，他们并不希望与 Infra 和 Ops 产生深入联系，因此，大家提出了平台工程（Platform Engineering）的概念。</p><p></p><p>对于这一观点，这里，舒文也向 InfoQ 提出了自己的看法：</p><p>&nbsp;</p><p>无论是直瀑式开发、敏捷交付、DevOps 以至 Platform Engineering ，主要依据的是企业规模以及生产关系，甚至与技术一号位的技术偏好也有关。不同阶段、规模、技术风格的科技企业有权利选择适配于他们的方式并坚持下去，而不是忽略环境条件在不同的技术理念之间反复横跳；Platform Engineering 是对 DevOps 理念的更显性化交付，它有具体、显性的交付物，横跨在 DevOps 理念与开发者之间，帮助开发者自助、自治的方式进行软件交付。Platform Engineering 不仅没有和 DevOps 产生鲜明的对抗，还直接产生了开发者效率价值，而唯一的成本，则是决策者们投入资源构造相对应 IDP （Internal Developer Platform）的真正决心。</p><p>&nbsp;</p><p>“手机淘宝的移动体验平台团队打造的各类开发者产品即是 Platform Engineering 的典型实践，只是目前处在快速上升期”，舒文介绍。同时，据了解目前对于 Platform&nbsp;Engineering 乃至 IDP 的建设，阿里终端也正在探索自己的发展路线与最佳实践，即基于在过去移动高速发展的 10 年在终端研发、交付、运维、体验、高可用、移动 PaaS 能力、SDK 软件供应链与合规等相关领域的沉淀的完备的中台能力基建与工具链，着手融合升级全新体验的终端一站式工作平台。</p><p>&nbsp;</p><p>&nbsp;</p><p>低代码</p><p>&nbsp;</p><p>2020 年被称之为低代码元年，在这一年低代码平台在国内起步，到了 2021 年，低代码平台开始在国内迅速蔓延，到了 2022 年，各大资本看好低代码发展，纷纷投资潜力厂商：低代码平台Swimlane 获得 7000 万美元融资；Baserow 筹集 500 万欧元用于创建无代码工具链；无代码软件测试平台 Sofy 获得 775 万美元种子轮融资；无代码初创公司 Sitemate 获得 520 万美元以加速无代码软件平台......</p><p>&nbsp;</p><p>虽然低代码热度空前，但关于其的争论却未曾消失，一直到今天仍有人坚持认为它是“新瓶装旧酒”，并以诞生于上世纪的&nbsp;“Dreamweaver&nbsp;也是低代码工具”&nbsp;作为佐证。对此舒文也提出了看法，他认为当一个技术理念开始爆发式地变得平民化且创造价值，那意味着它大概率是正确的。“具体到低代码这个方向，我是非常认可的”，他进一步解释低代码的本质实际上就是使非专业人员在具备组织逻辑、设定输入、控制输出的信息化能力，并且能将这种能力用于解决日常事务。例如在曾经，“打字员”甚至是一种职业，这对&nbsp;Z&nbsp;世代的青少年们来说是很难理解的。</p><p>&nbsp;</p><p>聚焦到终端领域，无论是 to C 还是 to B/G 领域，终端工程师们制造出了不计其数的 \"View\"。在此过程中，为了代码层复用，工程师们设计了 UI 组件库、功能模块库；为了能够更高效生产，工程师们借助了各种理念做到 Image to Code ；为了能够规模化生成，工程师们设计语义化的流程编排能力，进行低成本组装，而这正是工程师们一步步优化生产效率，持续追求精细化、规模化的过程。“它就是低代码/无代码，我认为这是非常了不起的”，舒文谈道，但同时他也认为，“我们也不能够迷信它，让它解决所有的问题，必须不断利用更先进的方式来提升零代码覆率”。</p><p>&nbsp;</p><p></p><h3>移动端性能优化</h3><p></p><p>&nbsp;</p><p>“在多元化体验时代的今天，移动互联网流量规模见顶后，各赛道对时长争夺的白热化阶段，消费者面对多平台选择下对体验容忍度、忠诚度也逐年降低。对手机淘宝来讲如何让前台用户操作体验流畅、全程购物体验满意，特别在平台用户时长不断提升及浏览深度在不断加深的同时，保障好基本盘稳定性、长时在线的网络可用性、全链路性能的确定性可能是下一阶段赢得用户信任的关键所在。而这些的背后都这意味着终端团队一直在跟业务和技术复杂度、设备性能挖掘与合理利用、复杂网络环境在做对抗。”弘禹谈道。</p><p>&nbsp;</p><p>他提出性能优化相关技术其实已经是老生常谈，业界今天的关注点也已经从过去的常规手段，比如包大小治理、启动性能优化、外链唤端跳失率等，转移到今天的看可视可交互时长影响访问体验、帧率与流畅度影响浏览体验、图片/视频上屏影响转化、内存可用性及崩溃率影响浏览深度等问题，从过去的平台技术视角转换到用户体验/业务价值重新审视今天体验技术命题。&nbsp;</p><p>&nbsp;</p><p>然而，一直到现在，有一个问题一直悬而未决，那就是在面对前台业务快速变化、表达型态更加多样化，如何将性能体验常态化、不劣化，“如何将能力建设跑在业务前面，用较低的技术投入成本下，让业务天然跑在一个性能高水位上，这可能是终端技术人需要思考并去解决的问题”。弘禹进一步谈道，针对此问题，可能还并没有确切答案，需要业界持续探索，但就当下来看，可以从眼下三点入手：</p><p>&nbsp;</p><p>终端高可用：如今的移动互联网业务型态已经发生巨大变化，从过去单一图文型态开始走向直播/短视频为主流、无游戏/无互动不增长、3D/AR 不断体验创新，在此背景下终端设备始终是资源受限系统，如何做到长时间使用及深度浏览不崩溃，做好全局资源使用合理性与基础可用性的治理能力，以手机淘宝为例从过去看平台 Crash 率到分场景的精细化可用性治理、关键场景如加购下单阻断，在“留量时代”都是在对大盘增长做贡献。过去几年在阿里终端团队不断推进架构治理与技术攻坚下，终端高可用技术体系也有了长足的演进，体现在 Crash/Abort 率、技术舆情率等方向逐渐在收敛至良好水平。APM/NPM：据不完全统计，中国目前有超过&nbsp;500&nbsp;万个不同类型的 App 并且数量每天都在持续增加，从各渠道不完全统计阿里系活跃 App 就超数百款，覆盖多平台/多设备/多系统/多渠道，且因业务型态与用户场景的不同，所选择的技术选型各异。在此背景下终端如何面向异构复杂技术架构、多平台 x 系统 x 设备差异性下持续做好体验管理与性能表现的一致性，基础性能管理 APM 以及网络性能管理 NPM 的建设，对每个互联网企业的终端团队都至关重要。可以看到的是，过去几年阿里在不断完善性能可信指标体系、线上性能数据化能力、设备体验分级能力、弱网对抗与策略化能力等方面建设已取得一定阶段性的结果，使用更科学有效的方法使核心场景的流畅度指标达标率提升到了 90% 以上，卡顿类 NPS 调研也升 10 个 pt 以上。全链路可观测性：“当前每个移动App都希望留住更多用户，增加访问时长和浏览深度”，弘禹坦言，因此可以看到用户长时间使用产品时，在各种复杂无线环境下用户难免面临一些弱网掉线、无响应无返回、异常白屏等情况，叠加东西向多容器技术选型、南北向从业务到基础的链路复杂性，就要求终端团队对全链路有能力进行贯穿治理，“明确使用过程中压倒用户的最后一根稻草是什么”。</p><p>&nbsp;</p><p></p><h3>新兴热点融合</h3><p></p><p>&nbsp;</p><p>移动互联网的爆发和发展，带动了相关技术的一并兴起。对于移动端来说，目前也正在向智能汽车、IoT、元宇宙等方向探索。那么这些新兴技术热点又会对终端产生怎样的影响？</p><p>&nbsp;</p><p>“我觉得多端多设备一定是个趋势”，弘禹谈道，所谓的多端多设备正是华为提出的“1+8+N”战略，其中，“1”代表手机，是核心；“8”代表 PC、平板、智慧屏、音箱、眼镜、手表、车机、耳机；“N”代表摄像头、扫地机、智能秤等外围智能硬件。</p><p>&nbsp;</p><p>可以看到，今天的 IoT 或者车载系统，都是朝着智能化方向去发展，因此，未来可能会有一种新的体验出现：一个手机代表一个人的主身份跟汽车或 IoT 连接，即多设备之间发生无缝连接，形成一个智能体验闭环。落到具体技术的话，未来可能会对应出现端端协同、端云协同以及端和周边智能协同的新的技术体系或者方向。</p><p>&nbsp;</p><p>弘禹判断，边缘化大概率是会来到的，但最终要看除了手机之外，其他设备多久能够实现智能化、数字化，如果这一天早点到来，也进一步会加速端交互上的协同。“我觉得这会形成一股新的增量，然后让各家 App 考虑如何将 App 作为用户一个身份，去跟更多的场景去融合和无缝连接。”</p><p>&nbsp;</p><p></p><h2>展望未来</h2><p></p><p>&nbsp;</p><p>综合多位技术专家的预判，终端领域已经行至新时代的前夜，那么在这个阶段，终端领域如果想有较大发展，需要解决哪些挑战，同时此阶段又蕴含哪些机遇？</p><p>&nbsp;</p><p>综合两位受访专家的看法，终端领域若要有重大变革，需要考虑以下因素：</p><p>&nbsp;</p><p>硬件、软件、应用的关键因素何时能够变化。这里，硬件即指终端设备，比如 VR、AR 或者能够替代手机的其他设备何时能够出现；软件即指与硬件相辅相成的操作系统，比如面向多端多设备协同的新的操作系统何时能够出现；</p><p>&nbsp;</p><p>云和无线何时能够成熟。受端上摩尔定律和 CPU 的限制，如何在足够的带宽延时情况下，与云计算结合提升用户体验。</p><p>&nbsp;</p><p>同时，也需要解决以下问题：</p><p>&nbsp;</p><p>又快又好地面向业务交付。整个终端领域，无论是 Web 还是移动 App 开发，都面临着纷繁复杂的基础设施、层出不穷的看似新兴的技术方案的困扰，同时隔离的操作系统平台、高度分化的 App 版本和发布渠道等问题严重制约了 App 迭代的效率，而 Web 在移动场景下的体验和原生调用能力，也限制了它的应用场景。</p><p>&nbsp;</p><p>在交付的基础上理解业务、通过技术帮助业务成功。聚焦到技术本身，互动游戏领域的工程师，需要更专注在图形技术、渲染技术，为业务抽象出超前、有创意的实现能力；中后台（运营、商家、广告主、政企事业）等业务域的工程师，需要更专注低代码、业务能力编排、流程自动化（RPA）等技术，大大提升客户解决事务的效率；短视频、直播领域的工程师，需要专注在音、视频等媒体技术，为用户提供一流的富媒体体验。（部份）桌面客户端的工程师，也需要关注跨平台研发技术（Node.js、Eletron 或者 Qt 等）。</p><p>&nbsp;</p><p>当然，处在巨变前夕，除了挑战，两位受访专家也在本次采访中预判了最有可能成为下一个风口的技术细分领域：</p><p>&nbsp;</p><p>3D/XR。目前，各家终端应用都在往这一方向做相关探索，或许在 2023 年，3D 直播、3D 绘本等内容场景会涌现；原生或跨端体验上或有创新；工程体系上将进一步向平台工程上演进。</p><p>&nbsp;</p><p>不过，弘禹也谈到，他判断短期之内终端生态并不会有爆发式变革：终端大概率以手机为主，设备主场景依然会是以 iOS、安卓为主流的平台。但是正如前文提到，这套体系会深度将前端及客户端进行整合，并且打磨用户体验仍是当下的重中之重。同时，对于业界来说，还要找到降低这部分的复杂度和门槛的有效方法，才能让终端工程师能够以较低复杂度的技术方式，持续提升业务交付效率及全链路体验。</p><p>&nbsp;</p><p></p><h2>对工程师说</h2><p></p><p>&nbsp;</p><p>随着终端概念的持续深化，此技术领域也将变得更加完整且全面，这也意味着不同的场景会逐渐产生差异化的技术特征和领域性。这对于一个技术领域来说，无疑意味着向前跨了一步，但对于身处其中的工程师来说，身上的担子却更加沉重。</p><p>&nbsp;</p><p>2022 年是一个非常特殊的年份，大量的互联网公司光环褪色，越来越多的公司逐渐更务实。在降本增效的大环境下，工程师们既要保住基本盘，又要面对即将到来的新技术快速进行转型，“学习力、适应力和韧性是非常重要的，而且要有一个变革自己的心态”，弘禹提醒道。</p><p>&nbsp;</p><p>另一方面，舒文也谈到即使面对诸多压力和挑战，倒也不必刻意追求时髦热门的技术。这里，他也提出几点适用于绝大多数终端工程师的基本逻辑：</p><p>&nbsp;</p><p>踏实专注于当前所处的技术领域；适当跳出当前的技术 Scope：如 Web 的工程师一定要跳出浏览器宿主的视野关注关联技术（如 Rust）、移动 App 的工程师避免被操作系统绑架关注跨平台交付技术；面向未来的方向，要有好奇和探索之心：如从事 C 端领域关注 3D/XR 技术；to B&amp;G 领域关注可逻辑化编排的低代码方向；做应用交付要关注基于云化的全栈技术。</p><p>&nbsp;</p><p>“持续面向业务交付当下和未来的技术价值，不痴迷于眼花缭乱的新奇巧技，才是追求专业的中正之道。”</p><p>&nbsp;</p><p></p><h4>采访嘉宾：</h4><p></p><p>&nbsp;</p><p>郭虹宇(&nbsp;弘禹&nbsp;)：阿里巴巴终端委员会核心委员，大淘宝终端体验平台负责人。</p><p>舒文亮（舒文）：阿里巴巴终端委员会核心委员，大淘宝跨端技术、Web&nbsp;技术负责人。</p><p>&nbsp;</p><p></p><blockquote>如果你觉得本文对你有帮助，或者你对数据库领域的技术发展有自己的思考，欢迎在文末留言告诉我们！你也可以加入 InfoQ 写作平台撰文发表自己的观点：https://xie.infoq.cn/<a href=\"https://www.infoq.cn/theme/168\">【年度技术盘点与展望】专题</a>\"已发布于 InfoQ 官网，将 InfoQ 添加进收藏夹，精彩不错过。</blockquote><p></p><p></p>",
    "publish_time": "2023-01-18 10:51:13",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Andy教授解读数据库的2022：大规模数据库投资大幅放缓、区块链数据库仍然是一个愚蠢的想法",
    "url": "https://www.infoq.cn/article/RyiXPp8zZtNSHPXck2UA",
    "summary": "<p></p><p></p><h2>摘要</h2><p></p><p>又一年过去了，我还活着。因此，现在是时候回顾下数据库领域去年发生的事情了。随着DBMS供应商之间的基准测试之争逐渐止息，数据库领域一片寂静。去年的回顾我写得很开心，所以我很高兴与你们分享2022年这个领域发生的一些引人注目的事情以及我的看法。</p><p></p><h2>正文</h2><p></p><p>本文最初发布于OTTERTUNE。</p><p>&nbsp;</p><p>又一年过去了，我还活着。因此，现在是时候回顾下数据库领域去年发生的事情了。随着DBMS供应商之间的<a href=\"https://ottertune.com/blog/2021-databases-retrospective#benchmark-violence\">基准测试之争</a>\"逐渐止息，数据库领域一片寂静。<a href=\"https://ottertune.com/blog/2021-databases-retrospective/\">去年的回顾</a>\"我写得很开心，所以我很高兴与你们分享2022年这个领域发生的一些引人注目的事情以及我的看法。</p><p></p><h2>大规模数据库投资大幅放缓</h2><p></p><p>我<a href=\"https://ottertune.com/blog/2021-databases-retrospective/#big-data-big-money\">去年</a>\"讨论过，2021年是数据库融资的丰收年。跟随投资者继续寻找下一个Snowflake的脚步，大量的资金投向了构建新DBMS的初创企业。年初看，2022年将是前一年的重演，有许多大型融资轮公告发布。这场盛宴始于2022年2月，Timescale获得<a href=\"https://www.timescale.com/blog/year-of-the-tiger-110-million-to-build-the-future-of-data-for-developers-worldwide/\">1.1亿美元的C轮融资</a>\"，Voltron Data获得<a href=\"https://techcrunch.com/2022/02/17/voltron-data-grabs-110m-to-build-startup-based-on-apache-arrow-project/\">1.1亿美元的种子轮和A轮融资</a>\"，Dbt Labs获得<a href=\"https://www.forbes.com/sites/kenrickcai/2022/02/24/dbt-labs-series-d-4-billion-less-than-planned/\">2.22亿美元的D轮融资</a>\"。Starburst在3月宣布获得<a href=\"https://www.starburst.io/blog/starburst-announces-250m-series-d/\">2.5亿美元的D轮融资</a>\"，用于扩展他们的Trino产品。5月份，Imply为Druid商业版筹集了<a href=\"https://imply.io/blog/imply-raises-100mm-in-series-d-funding/\">1亿美元的D轮融资</a>\"。今年6月，DataStax在IPO路上获得了<a href=\"https://techcrunch.com/2022/06/15/datastax-proves-its-still-possible-to-raise-nine-figures-at-higher-valuation-in-2022/\">1.15亿美元的融资</a>\"。最后，SingleStore在7月份宣布完成了<a href=\"https://www.singlestore.com/media-hub/releases/singlestore-announces-116m-funding\">1.16亿美元F轮融资</a>\"，然后在<a href=\"https://techcrunch.com/2022/10/04/singlestore-raises-30m-more-to-brings-its-database-tech-to-new-customers/\">10月份又增加了3000万美元</a>\"。在2022年上半年，还有其他几家规模较小的公司也进行了令人印象深刻的A轮融资，包括Neon为他们的无服务器PostgreSQL服务筹集了<a href=\"https://neon.tech/blog/funding-a1/\">3000万美元的A轮融资</a>\"，ReadySet为他们的查询缓存层筹集了<a href=\"https://techcrunch.com/2022/04/05/readyset-raises-29m-to-expedite-access-to-enterprise-scale-app-data/\">2900万美元的A轮融资</a>\"，Convex为他们基于PostgreSQL构建的应用程序框架筹集了<a href=\"https://blog.convex.dev/series-a/\">2600万美元的A轮融资</a>\"，QuestDB为他们的时序DBMS筹集了<a href=\"https://questdb.io/blog/2022/01/03/two-year-journey-raising-15m-venture-capital/\">1500万美元的A轮融资</a>\"。虽然没有构建新的DBMS或相关的基础设施，但OtterTune在4月份也完成了自己<a href=\"https://techcrunch.com/2022/05/10/2309852/\">1200万美元A轮融资</a>\"。</p><p>&nbsp;</p><p>但随后，2022年下半年，大规模融资停止了。尽管还有一些针对早期初创企业的小规模融资，但对于经验更丰富的公司，融资规模没有达到9位数的了。10月份，RisingWave的流媒体处理引擎获得了<a href=\"https://techcrunch.com/2022/10/18/streaming-data-processing-platform-risingwave-lands-36m-to-launch-a-cloud-service/\">3600万美元的A轮融资</a>\"。Keebo为Snowflake查询加速器筹集了<a href=\"https://venturebeat.com/data-infrastructure/keebo-ai-optimizes-data-warehouses-with-automated-learning-platform-raises-10-5m/\">1050万美元的A轮融资</a>\"。11月，MotherDuck宣布为DuckDB云版本商业化筹集了<a href=\"https://techcrunch.com/2022/11/15/motherduck-secures-investment-from-andreessen-horowitz-to-commercialize-duckdb/\">4500万美元种子轮和A轮融资</a>\"，EdgeDB的<a href=\"https://www.edgedb.com/blog/edgedb-series-a\">1500万美元A轮融资</a>\"也在11月完成。最后，SurrealDB兄弟获得了<a href=\"https://www.crunchbase.com/funding_round/surrealdb-series-unknown--3acd814d\">600万美元的种子轮融资</a>\"。有些我可能漏掉了，但我这里并不是要提供一个详尽的列表。</p><p>&nbsp;</p><p>数据库领域唯一值得注意的金融事件是MariaDB 2022年12月灾难性的公开募股（通过<a href=\"https://en.wikipedia.org/wiki/Special-purpose_acquisition_company\">SPAC</a>\"），其股价<a href=\"https://www.bizjournals.com/sanjose/news/2022/12/19/mariadb-goes-public-in-spac-merger.html\">在首日交易中下跌了40%</a>\"。</p><p></p><h4>Andy的观点：</h4><p></p><p>与2021年相比，2022年的大型融资轮减少有两个原因。最明显的原因是整个科技行业都在降温，还有部分原因是对通货膨胀、利率和加密经济崩溃的担忧。另一个原因是，在资金枯竭之前，所有有能力进行大规模融资的公司都已经完成了融资。例如，Starburst在<a href=\"https://www.starburst.io/blog/starburst-announces-100m-series-c-led-by-andreessen-horowitz/\">2021年筹集了1亿美元的C轮融资</a>\"后，于2022年完成了D轮融资。在过去两年里进行了巨额融资的数据库公司很快将需要筹集更多资金，以保持增长列车的运行。还有人<a href=\"https://www.itbusinessedge.com/business-intelligence/data-startups-eye-popping-funding-rounds/\">评论</a>\"说，这些公司筹集的金额令人吃惊。</p><p>&nbsp;</p><p>坏消息是，除非科技行业的境况有所改善，大型机构投资者又开始投钱，否则这些公司将陷入困境。市场无法维持这么多独立的数据库软件供应商（ISV）。对于这些估值高达数十亿美元的公司来说，前路只能是IPO或破产。对于大多数公司来说，收购它们的成本都太高（除非风投愿意大幅降价）。此外，进行大型并购的主要科技公司（如亚马逊、谷歌、微软）已经有了自己的云数据库产品。因此，目前还不清楚谁将收购这些数据库初创企业。对于亚马逊来说，以<a href=\"https://clickhouse.com/blog/click-house-raises-a-250m-series-b-at-a-2b-valuationand-we-are-hiring\">2021年20亿美元的估值</a>\"收购Clickhouse是没有意义的，因为他们每年已经从Redshift上赚取了数十亿美元。这个问题不是OLAP数据库公司独有的；OLTP数据库公司很快也将面临同样的问题。</p><p>&nbsp;</p><p>我并不是唯一一个对数据库初创企业的命运做出如此可怕预测的人。Gartner分析师预测，到2025年，<a href=\"https://blogs.gartner.com/andrew_white/2021/01/12/our-top-data-and-analytics-predicts-for-2021/\">50%的独立DBMS供应商将倒闭</a>\"。显然，我有偏见，但我认为，能够生存下来的公司将是那些围绕DBMS开展工作以改进/增强它们而不是取代它们的公司（例如dbt、ReadySet、Keebo和OtterTune）。</p><p>&nbsp;</p><p>对于像MariaDB那样通过SPAC“快速上市”的方法是否是个好主意，我不做评论。这样的金融工具超出了我的专业领域（即数据库）。</p><p></p><h2>区块链数据库仍然是一个愚蠢的想法</h2><p></p><p>已经有一些疯狂的言论，说<a href=\"https://www.nytimes.com/2021/12/05/business/dealbook/what-is-web3.html\">Web3</a>\"意味着人们构建新应用程序的方式的根本变化。<a href=\"https://youtu.be/uikbtpVZS2s?t=1490\">我有一个学生为此愤然离开了我的课堂</a>\"，因为我教的是关系型数据库而不是Web3。Web3运动的核心原则是将状态存储在区块链数据库中。本质上，区块链是去中心化的日志结构（log-structured）数据库（即分类帐），它使用<a href=\"https://en.wikipedia.org/wiki/Merkle_tree\">Merkle树</a>\"的一些变体和一种BFT共识协议来维护增量校验和，以确定要安装到数据库中的下一个更新。区块链就是靠这些增量校验和来确保数据库日志记录不可变：客户端使用这些校验和来验证以前的数据库更新没有被更改。</p><p>&nbsp;</p><p>区块链是对先前想法的一个巧妙融合。但是，认为去中心化分类帐应该成为每个人构建OLTP应用程序的方式是<a href=\"https://twitter.com/jimmy_wales/status/1226868636020805632\">错误的</a>\"。从数据库的角度来看，除了加密货币之外，它们在任何实际用例中都无法提供比现有DBMS技术更好的东西。此外，任何声称区块链可以在数据库中提供比现有DBMS更好的安全性和可审计性的说法都是错误的。</p><p>&nbsp;</p><p>因此，如果加密货币是区块链数据库的最佳用例，那也没什么帮助，因为加密市场2022年崩了，这只会进一步阻碍区块链数据库未来的发展。在本文的讨论中，我将忽略FTX的倒闭，因为那似乎直接就是欺诈，与数据库无关。然而，我要指出的是，与所有其他加密交易一样，FTX并没有在区块链数据库上运行业务，而是<a href=\"https://discuss.systems/@andy_pavlo/109507691859803604\">使用了PostgreSQL</a>\"。但其他与加密货币无关的区块链数据库用例，如<a href=\"https://www.forbes.com/sites/michaeldelcastillo/2022/11/16/seminal-blockchain-project--goes-down-the-drain-chairman-apologizes/?sh=694d292817d3\">交易</a>\"和<a href=\"https://coingeek.com/axie-infinity-left-thousands-of-filipino-players-in-debt-and-now-they-are-leaving-the-game/\">游戏</a>\"平台，由于不切实际或存在骗局而失败。</p><p></p><h4>Andy的观点：</h4><p></p><p>在评估一项技术时要遵循的一个规则是，一旦IBM为它做了电视广告，它就不再是“新”技术了。也就是说，如果在IBM开始宣传某个东西时，还没有令人信服的用例，那就永远不会有了。例如2002年，IBM在<a href=\"https://youtu.be/fJA9eiUktcA\">一则广告</a>\"中把Linux吹捧成一个热门的新事物，但彼时已经有数千家公司将它作为他们主要的服务器操作系统（包括<a href=\"https://en.wikipedia.org/wiki/History_of_Google#Beginnings\">谷歌</a>\"）。所以，当<a href=\"https://www.facebook.com/IBM/videos/ibm-blockchain-is-the-blockchain-built-for-smarter-business/10216050406397964/\">IBM在2018年发布他们的区块链广告</a>\"时，我就知道这项技术不会超出加密货币，因为没有一个去中心化区块链可以解决的问题是中心化DBMS不能解决的。2022年，IBM宣布停止与航运巨头Maersk合作的<a href=\"https://www.wsj.com/articles/blockchain-fails-to-gain-traction-in-the-enterprise-11671057528\">供应链IT基础设施检修项目</a>\"（与他们在广告中大肆宣传的项目相同），也就不足为奇了。</p><p>&nbsp;</p><p>编写良好的事务型DBMS由可信的权威机构控制，只允许可信的客户端直接连接，相比之下，区块链的效率非常低。除了加密货币（见上文）或<a href=\"https://youtu.be/ib1zWLrUHCc\">诱骗</a>\"等非法活动，几乎所有现实世界的互动都是这样进行的。我们要相信他人才能保证社会的正常运转。例如，我授权托管OtterTune网站的公司从我们的信用卡扣费，而他们信任托管他们软件的云提供商。对于这些交易，没人需要区块链数据库。</p><p>&nbsp;</p><p>从工作证明（PoW）切换到能耗更低的<a href=\"https://techcrunch.com/2022/09/15/ethereum-switches-to-proof-of-stake-consensus-after-completing-the-merge/\">权益证明</a>\"（PoS）共识机制确实提高了区块链数据库的性能。但这只会影响数据库的吞吐量；区块链交易延迟仍然以数十秒为单位。如果解决长延迟的方法是使用参与者较少的PoS区块链，那么应用程序最好是只使用PostgreSQL并对参与者做身份验证。</p><p>&nbsp;</p><p><a href=\"https://www.tbray.org/ongoing/When/202x/2022/11/19/AWS-Blockchain\">Tim Bray写过一篇很棒的文章</a>\"，介绍了他与AWS高层就区块链是否有可行的用例所做的内部讨论。请注意，他说，AWS在2016年就得出结论，区块链数据库是一个寻找问题的解决方案，比IBM推出他们的商业广告早了两年！虽然AWS最终在2018年发布了<a href=\"https://aws.amazon.com/qldb/\">QLDB</a>\"服务，但它和区块链不是一回事；它是一个中心化的可验证分类账，不使用BFT共识机制。客户对QLDB的采用情况并不是很理想，特别是与亚马逊的Aurora服务相比。</p><p></p><h2>新的数据库系统</h2><p></p><p>2022年主要有以下几个关于新DBMS软件的公告：</p><p><a href=\"https://cloud.google.com/alloydb\">Google AlloyDB</a>\"</p><p></p><p>2022年最大的重磅炸弹是谷歌云在5月份宣布其新的数据库服务。AlloyDB不是以Spanner为基础构建，而是PostgreSQL的一个修改版本，它分离了计算层和存储层，并支持在存储中直接处理WAL记录。<a href=\"https://www.snowflake.com/en/data-cloud/workloads/unistore/\">Snowflake Unistore</a>\"</p><p></p><p>6月，Snowflake<a href=\"https://www.theregister.com/2022/06/22/snowflake_unistore_analysis/\">宣布</a>\"了支持“混合表”的新Unistore引擎，支持DML操作的低延迟事务。当查询更新表时，更改会传播到Snowflake的列式存储中。SingleStore有人有点生气，他们在这个领域有一些专利，但没有获得任何回报。<a href=\"https://www.oracle.com/mysql/heatwave/\">MySQL Heatwave</a>\"</p><p></p><p>在意识到亚马逊从MySQL上赚的钱比他们多之后，Oracle公司最终决定在2020年构建自己的MySQL云服务。但是，他们不是做了一个RDS克隆，而是用一个名为Heatwave的内存向量化OLAP引擎扩展了MySQL。2021年，Oracle宣布，他们的MySQL服务也支持<a href=\"https://blogs.oracle.com/mysql/post/mysql-autopilot-machine-learning-automation-for-mysql-heatwave\">自动数据库优化</a>\"（但与OtterTune提供的不同）。2022年，Oracle终于意识到，<a href=\"https://clouddb.substack.com/i/66819578/oracle-touts-multi-cloud-then-the-layoffs-begin\">他们不是领先的云供应商</a>\"，并作出让步，<a href=\"https://www.oracle.com/news/announcement/mysql-heatwave-on-aws-2022-09-12/\">在AWS上支持MySQL Heatwave</a>\"。<a href=\"https://velox-lib.io/\">Velox</a>\"</p><p></p><p>2020年，Meta开始为PrestoDB构建新的执行引擎Velox。两年后，他们<a href=\"https://engineering.fb.com/2022/08/31/open-source/velox/\">宣布了这个项目</a>\"，并发表了一篇关于它的<a href=\"https://research.facebook.com/publications/velox-metas-unified-execution-engine/\">VLDB论文</a>\"。Velox不是一个完整的DBMS：它没有SQL解析器、目录、优化器或网络支持。相反，它是一个有内存池和存储连接器的C++可扩展执行引擎。人们可以使用Velox构建完备的DBMS。<a href=\"https://www.influxdata.com/blog/influxdb-engine/\">InfluxDB IOx</a>\"</p><p></p><p>就像Meta围绕Velox所做的工作一样，在过去的两年里，Influx团队一直致力于开发新的IOx引擎。最终，他们在10月<a href=\"https://www.influxdata.com/blog/influxdb-engine/\">宣布</a>\"带着新引擎达到了GA。InfluxDB基于<a href=\"https://arrow.apache.org/datafusion/\">DataFusion</a>\"和Apache Arrow从头构建了IOx。值得庆幸的是，在我2017年提醒Influx CTO<a href=\"https://twitter.com/andy_pavlo/status/1395569792979976193\">使用MMAP是一个坏主意</a>\"之后，他们在新系统中放弃了MMAP。</p><p></p><h4>Andy的观点：</h4><p></p><p><a href=\"https://youtu.be/uikbtpVZS2s?t=156\">数据库是我生活中第二重要的事情</a>\"，所以看到过去一年的所有发展，我很高兴。</p><p>&nbsp;</p><p>我对AlloyDB的看法是，那是一个简洁的系统，包含了大量令人印象深刻的工程设计，但我还不知道它的新颖之处。AlloyDB的架构类似于Amazon Aurora和<a href=\"https://neon.tech/\">Neon</a>\"，其中，DBMS存储有一个额外的计算层，可以独立于计算节点处理WAL记录。尽管谷歌云已经有了一个可靠的数据库组合（例如Spanner、BigQuery），但他们还是觉得有必要构建AlloyDB来追赶亚马逊和微软。</p><p>&nbsp;</p><p>值得关注的一个长期趋势是Velox、DataFusion和<a href=\"https://www.pola.rs/\">Polars</a>\"等框架的激增。再加上<a href=\"https://substrate.io/\">Substrait</a>\"这样的项目，这些查询执行组件的<a href=\"https://twitter.com/andy_pavlo/status/1523666179247595520\">商品化</a>\"意味着所有OLAP DBMS在未来五年内将大致相当。与其完全从零开始构建一个全新的DBMS，或者硬分叉现有的系统（例如，像Firebolt分叉Clickhouse那样），最好还是使用一个可扩展的框架，如Velox。也就是说，每个DBMS都将拥有十年前Snowflake所独有的向量化执行能力。由于在云计算中，每个人的存储层都是相同的（例如，Amazon管理的EBS/S3）， DBMS产品之间的关键区别将是难以量化的东西，如UI/UX和查询优化。</p><p>&nbsp;</p><p></p><h2>我们失去了一位数据库先驱</h2><p></p><p>令人悲伤的是，我们在2022年7月失去了<a href=\"https://www.cwi.nl/news/2022/in-memoriam-martin-kersten\">Martin Kersten</a>\"。Martin是CWI研究员，是多个有影响力的数据库项目的领导者，包括20世纪90年代第一个分布式内存DBMS（<a href=\"https://research.utwente.nl/en/publications/prismadb-a-parallel-main-memory-relational-dbms\">PRISMA/DB</a>\"）和21世纪第一个列式OLAP DBMS（<a href=\"https://www.monetdb.org/\">MonetDB</a>\"）。2020年，<a href=\"https://www.cwi.nl/news/2020/cwi-fellow-martin-kersten-receives-royal-decoration\">荷兰政府授予Martin皇家爵士头衔</a>\"，以表彰他在数据库方面的工作。</p><p>&nbsp;</p><p>MonetDB的代码库是其他多个OLAP系统项目的跳板。在2000年代后期，Peter Boncz和Marcin Żukowski将其分叉，创建了<a href=\"https://www.cidrdb.org/cidr2005/papers/P19.pdf\">MonetDB/X100</a>\"，然后商业化为<a href=\"https://en.wikipedia.org/wiki/Vectorwise\">Vectorwise</a>\"（现在称为<a href=\"https://www.actian.com/analytic-database/vector-analytic-database/\">Actian Vector</a>\"）。后来，Marcin和其他人一起创建了Snowflake，使用了很多他在MonetDB原始代码上开发的技术。最近，Hannes Mühleisen创建了一个嵌入式版本的MonetDB，名为<a href=\"https://github.com/MonetDB/MonetDBLite-R\">MonetDBLite</a>\"，然后他又在DuckDB中再次进行了重写。</p><p>&nbsp;</p><p>Martin对现代数据库系统的贡献不可低估。如果你使用任何现代的分析型DBMS（如Snowflake、Redshift、BigQuery、Clickhouse），那么你都已受益于Martin和他的学生在过去30年里所做的许多改进。</p><p></p><h4>Andy的观点：</h4><p></p><p>我承认，与像Mike Stonebraker这样的人相比，Martin可能并不为数据库研究社区之外的人所熟知。我一直认为，Martin是欧洲的Stonebraker：他们都是高产的数据库研究员，他们俩都是又高又瘦，戴着眼镜，年龄也相仿。但Martin可不是像<a href=\"https://twitter.com/AustinJohnPlays/status/1208391845253984256\">Nintendo Smitch</a>\"那样的山寨货。</p><p>&nbsp;</p><p>在研究之外，Martin总是慷慨地投入时间，热心地与任何人讨论数据库架构。我最后一次见到他是在2019年的VLDB上，当时疫情还没有爆发。他和我争论了将近一个小时，说明为什么他觉得在MonetDB中使用MMAP是正确的选择；他说，因为MonetDB专注于只读OLAP工作负载，所以MMAP已经足够好了。对在Youtube上观看我的数据库课程的一名学生，Martin还给他发了电子邮件，告诉他为什么MonetDB做出了我认为较差的设计选择，我为此感到惭愧。</p><p>&nbsp;</p><p>建议你看下Martin在2021年为CMU-DB系列研讨会做的<a href=\"https://www.youtube.com/watch?v=vjWRE0UnJDQ&amp;list=PLSE8ODhjZXjbeqnfuvp30VrI7VXiFuOXS&amp;index=18\">最后一次演讲</a>\"。我向Martin保证过，我不会因为抱怨MonetDB使用了<a href=\"https://db.cs.cmu.edu/mmap-cidr2022/\">MMAP</a>\"而破坏他的演讲。如果你看了前60秒，就会发现我雇了一个荷兰人<a href=\"https://twitter.com/andy_pavlo/status/1547748253512347648\">给Martin录了一段假的皇家介绍</a>\"。</p><p></p><h2>用数据库财富来拯救民主</h2><p></p><p>我总是想以一个快乐的音符来结束我的年终回顾文章。数据库应该让人们对自己的生活感觉良好。它们使我们能够组织现代生活任何方面的数据，它们代表了科学和工程领域突破性进展的巅峰。有鉴于此，我的最后一个故事应该让大家都感觉良好。这是一个为正确的理由做正确的事的例子。</p><p>&nbsp;</p><p>2022年5月，《华盛顿邮报》<a href=\"https://www.washingtonpost.com/politics/2022/05/20/larry-ellison-oracle-trump-election-challenges/\">报道</a>\"，Oracle公司创始人、帆船爱好者Larry Ellison参加了2020年11月与美国总统和其他保守派领导人就最近结束的选举举行的电话会议。会议重点讨论了为推翻总统选举的结果，总统的盟友和罢工者可以采用的不同策略。正如《华盛顿邮报》的文章所指出的那样，目前尚不清楚为什么政府会让Larry参加这次电话会议。有一种猜测是，Larry有很强的技术背景，可能是需要他来评估<a href=\"https://en.wikipedia.org/wiki/Italygate\">使用意大利卫星操纵物理隔离（air-gapped）的投票机</a>\"这项指控是否合理。</p><p></p><h4>Andy的观点：</h4><p></p><p>Larry和我都厌倦了人们对他支持美国右翼事业的奇谈怪论。有些人甚至说，这个电话是Larry做过的最糟糕的事。这不是真的，我知道，在新闻和社交媒体上读到关于自己的这样的描述，Larry会难过。这些记者说得好像Larry在做什么邪恶或不体面的事情，比如<a href=\"https://www.google.com/books/edition/The_Difference_Between_God_and_Larry_Ell/oqK4tzQ0xBoC?hl=en&amp;gbpv=1&amp;bsq=prenuptial\">他有一次让怀孕的第三任妻子在婚礼前两小时签了一份婚前协议</a>\"。我可以向你保证，Larry只是想用他作为<a href=\"https://www.bloomberg.com/billionaires/profiles/lawrence-j-ellison/\">世界第七富豪</a>\"的巨额财富来帮助他的国家。他参加这次电话会议是令人钦佩的，应该受到赞扬。自由公正的选举不是一件小事，就像<a href=\"https://www.reuters.com/article/us-sailing-americascup-cheating/oracle-hit-with-unprecedented-penalties-for-americas-cup-cheating-idUSBRE98211Y20130904\">赛艇比赛</a>\"一样，有时只要你赢了，耍手腕就没问题。Larry还用他的钱做了其他一些了不起的事情，但被忽视了，比如<a href=\"https://www.newyorker.com/magazine/2017/04/03/silicon-valleys-quest-to-live-forever\">花费3.7亿美元进行抗衰老研究</a>\"，这样他就可以长生不老，以及<a href=\"https://www.businessinsider.com/elon-musk-texted-larry-ellison-before-twitter-deal-hold-2022-9\">投资10亿美元帮助埃隆·马斯克</a>\"拥有（？）Twitter。所以我支持Larry在这个例子中的行为。</p><p></p><h2>明年将是美好的一年</h2><p></p><p>就我个人而言，2022年的变化很多：</p><p>OtterTune在4月份进行了<a href=\"https://ottertune.com/blog/databases-pandemic-funding/\">A轮融资</a>\"。我的1号博士生<a href=\"https://twitter.com/Lin_Ma_/status/1529173307471417345\">加入了密歇根大学</a>\"，成为了一名新任数据库教授。7月，我被卡耐基梅隆大学授予终身教职（尽管我仍然受到该校针对终身教职的<a href=\"https://www.cmu.edu/policies/faculty/appointment-and-tenure-policy.html#dismissal\">“道德败坏”条款</a>\"的约束）。9月，我重新开始<a href=\"https://www.youtube.com/playlist?list=PLSE8ODhjZXjaKScG3l0nuOiDTTqpfnWFf\">全职教学</a>\"。</p><p>&nbsp;</p><p>我对OtterTune明年的发展很是期待。我们计划在2023年上半年完全重写我们的数据库自动化服务。我已经发布了我们目前正在开发的<a href=\"https://twitter.com/andy_pavlo/status/1598789316616294400\">新功能的预览</a>\"。由于跨州运输水獭，我们的<a href=\"https://ottertune.bandcamp.com/\">唱片公司</a>\"也遇到了一些法律问题，不过已经解决，希望2023年可以发行新专辑。</p><p>&nbsp;</p><p>附言：像往常一样，在假期期间，请不要忘记在数据库上运行ANALYZE。或者，可以<a href=\"https://ottertune.com/try\">让OtterTune自动帮您完成</a>\"。</p><p>&nbsp;</p><p>声明：本文为InfoQ翻译，未经许可禁止转载。</p><p>&nbsp;</p><p>原文链接：<a href=\"https://ottertune.com/blog/2022-databases-retrospective/\">https://ottertune.com/blog/2022-databases-retrospective/</a>\"</p><p></p><p>延伸阅读：</p><p><a href=\"https://mp.weixin.qq.com/s/syb1WhVimaws7GwqMEmSDg\">When Money and Technology started to talking the same thing</a>\"</p>",
    "publish_time": "2023-01-18 11:54:28",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "2022年回顾：Kubernetes盛行之年",
    "url": "https://www.infoq.cn/article/q7ffqhUrRRPHBRWSI4Af",
    "summary": "<p>2022年是云原生技术的盛行之年，尤其是对Kubernetes来说，它成为数字转型和云原生工作负载的首选平台。因此，这一年的大部分讨论都是围绕着Kubernetes的更新和最佳实践展开的。</p><p>&nbsp;</p><p>下面，我们将分析这一年关于Kubernetes的报道中的一些关键信息。以下的见解来自与行业专家的多次讨论，以及来自云原生计算基金会（CNCF）和Kubernetes相关技术提供商的全年相关报告。</p><p></p><h2>成为主流</h2><p></p><p>&nbsp;</p><p>这一年，Kubernetes的增长是无止境的。CNCF 2022年初的一份报告发现，96%的受访者目前正在使用或评估Kubernetes。79%的受访者使用了管理服务，如EKS、AKS或GKE。</p><p>&nbsp;</p><p>这个流行的开源实用程序可用于容器编排和服务发现、负载均衡以及许多其他应用程序生命周期功能。由于其强大的功能，大多数使用Kubernetes的组织都报告说该平台是成功的。“Kubernetes已经成为主流。”D2iQ首席执行官<a href=\"https://containerjournal.com/topics/container-ecosystems/kubernetes-separating-the-hype-from-production-success/\">Tobi Knaup</a>\"表示。“它已经成为数字化转型和下一代工作负载的行业标准。”</p><p></p><h2>大多数组织都可以使用Kubernetes</h2><p></p><p>Kubernetes最初被视为只有大型企业才能从中受益。它的<a href=\"https://containerjournal.com/features/the-brutal-learning-curve-of-a-new-kubernetes-cluster/\">学习曲线很陡峭</a>\"，需要专家来运维。但由于可用性和托管服务产品的进步，2022年Kubernetes<a href=\"https://containerjournal.com/features/kubernetes-now-within-reach-for-mid-size-companies/\">对中小型企业来说变得更容易使用了</a>\"。</p><p>&nbsp;</p><p>“我们无疑正在跨越早期创新者阶段的鸿沟，进入了早期大众阶段。”Pure云原生业务部门副总裁兼总经理Murli Thirumale表示。“现在产品已经变得更加稳定，这项技术也已经准备好进入中端市场了。”</p><p></p><h2>边缘使用增加</h2><p></p><p>&nbsp;</p><p>这一年，人们对在边缘和裸机实例中使用Kubernetes的兴趣与日俱增。事实上，根据<a href=\"https://containerjournal.com/features/study-finds-optimism-for-kubernetes-amid-exponential-challenges/\">Spectro Cloud的一项研究</a>\"，35%的Kubernetes生产环境用户已经在边缘部署了K8s，还有更多的用户计划在未来12个月内这样做。81%的受访者表示，在他们的行业中有令人信服的边缘用例。</p><p>&nbsp;</p><p>助长了这一趋势原因可能有多个。但最紧迫的是在更接近数据的地方运行高通量计算，比如人工智能，可以实现更好的性能，并避免在云中传输数据时所涉及的入口/出口费用。Edge Kubernetes可以<a href=\"https://containerjournal.com/features/8-cncf-tools-to-run-kubernetes-at-the-edge-and-bare-metal/\">通过CNCF的几个开源项目来实现</a>\"，例如KubeEdge、SuperEdge、Akri等。</p><p></p><h2>K8s生态系统依赖于开源</h2><p></p><p>&nbsp;</p><p>我们已经见证了开源软件包推动了Kubernetes的许多进步，在云原生生态系统中推广了与供应商无关的标准。<a href=\"https://containerjournal.com/features/cncf-rise-in-emerging-open-source-tech-on-k8s/\">Mike Vizard</a>\"写道：“总的来说，开源技术正在推动下一个IT创新时代。”。许多<a href=\"https://containerjournal.com/features/cncf-rise-in-emerging-open-source-tech-on-k8s/\">创新的开源技术</a>\"不仅与Kubernetes Operators兼容，而且被打包成Kubernetes Operators。这些云原生工具可以在Kubernetes发行版中被轻松利用，以实现与CI/CD、数据存储、DevOps、测试以及许多其他领域相关的功能。</p><p></p><h2>有状态部署变得更能被接受</h2><p></p><p>&nbsp;</p><p>尽管容器被设计为短暂和无状态的，但大多数应用程序仍然需要某种形式的持久存储。社区开发了一些变通方案来将<a href=\"https://containerjournal.com/features/enabling-successful-stateful-kubernetes-deployments/\">有状态的部署</a>\"引入到Kubernetes中。这里的一些经验包括使用Kubernetes原生备份架构、制定一个利用自动化的数据备份计划、以正确的顺序恢复、以及利用一个与数据库类型无关的流程。例如，一家<a href=\"https://containerjournal.com/topics/container-management/case-study-using-k8s-to-navigate-medical-shortages/\">在生产环境中</a>\"部署K8s的大型医疗保健公司分享了他们是如何使用Portworx来处理“多语言”数据存储类型的。</p><p></p><h2>指数级的挑战依然存在</h2><p></p><p>&nbsp;</p><p>即使取得了上述突破，许多挑战依然存在。事实上，86%的受访者提到了与使用<a href=\"https://containerjournal.com/features/study-finds-optimism-for-kubernetes-amid-exponential-challenges\">Kubernetes多环境</a>\"相关的指数级挑战。<a href=\"https://containerjournal.com/features/d2iq-survey-sees-increased-enterprise-k8s-deployments/\">D2iQ的另一项研究发现</a>\"，只有42%的K8s项目真正投入到了生产环境，五分之一的开发人员声称Kubernetes让他们感到极度疲惫。</p><p>&nbsp;</p><p>一个主要的障碍是仅简单地启动和运行Kubernetes可能就需要几个月的时间。之后是运维上的麻烦。其中一个挑战是监督<a href=\"https://containerjournal.com/features/cncf-radar-highlights-kubernetes-multi-cluster-preferences/\">多个K8s集群</a>\"。另一个是在多个环境中同时运行Kubernetes时监控日益增加的复杂性。遇到人才缺口的公司可能缺乏必要的配置技能来处理这一问题，从而使日常维护变得困难。</p><p></p><h2>治理成为强化Kubernetes的必要条件</h2><p></p><p>&nbsp;</p><p>迁移到云原生带来了<a href=\"https://accelerationeconomy.com/cybersecurity/6-common-security-risks-for-cloud-native-approaches/\">新的威胁向量</a>\"，例如错误配置和不安全的默认设置。对于这些负担，Kubernetes也不能幸免于难。<a href=\"https://containerjournal.com/features/the-state-of-k8s-software-supply-chain-attacks/\">Aqua Security</a>\"在2022年年中的一项研究发现，软件供应链攻击的复杂性全面增加，大量攻击利用了脆弱的Kubernetes部署。从长远来看，Shadowserver估计<a href=\"https://www.shadowserver.org/news/over-380-000-open-kubernetes-api-servers/\">有38万个公开部署的Kubernetes API服务器</a>\"。</p><p>&nbsp;</p><p>随着越来越多的工程师使用该平台，加强<a href=\"https://containerjournal.com/topics/container-management/how-can-enterprises-govern-surging-kubernetes-use/\">治理</a>\"和基于角色的访问控制对于保护使用变得更加重要。因此，CNCF的报告<a href=\"https://info.nirmata.com/the-state-of-cloud-native-policy-management-2021\">《云原生策略管理状态》</a>\"发现，在Kubernetes环境中基于策略的控件的使用变得越来越多。约50%的受访者报告称使用了K8s的策略实施，<a href=\"https://containerjournal.com/features/introduction-to-open-policy-agent-opa/\">OPA</a>\"是指导云原生策略创建和实施的常见代理。这种控制对于避免违反最低特权规则是必要的。</p><p></p><h2>总结</h2><p></p><p>&nbsp;</p><p>2022年对Kubernetes来说是一个大年。我们看到K8s成为了主流，并成为更多组织可触及的目标。边缘使用增加，开源成为云原生成功的驱动因素。然而，可用性的挑战依然存在，供应链的安全威胁也在抬头。</p><p>&nbsp;</p><p>那么，2023年将会发生什么呢？好吧，云原生领导者预计2023年将是该领域进一步增长和成熟的又一个关键年份。其中一个途径是AI——88%的人认为Kubernetes是未来两年内运行AI和ML工作负载的首选平台。其他预测还包括更多的平台工程、对开发人员体验的重视、以及工程师们如何跟上Kubernetes的复杂性（最值得期待）。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://containerjournal.com/features/2022-in-review-kubernetes-big-year/\">https://containerjournal.com/features/2022-in-review-kubernetes-big-year/</a>\"</p><p>&nbsp;</p><p>声明：本文为InfoQ翻译，未经许可禁止转载。</p>",
    "publish_time": "2023-01-18 12:13:27",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "B2B数字化营销怎么做？要“放长线”“重孵化”",
    "url": "https://www.infoq.cn/article/Fi2tE34ZtKMSt02CazMf",
    "summary": "<p>ToB的<a href=\"https://www.infoq.cn/theme/171\">数字化营销</a>\"和ToC有何不同？</p><p></p><p>在最新一期的InfoQ《超级连麦.数智大脑》直播中，径硕科技董事长&amp;CEO洪锴做了一个形象的比喻——ToC营销就像一个杠铃，杠铃两头一端是投放，另一端是转化；而ToB营销更像一个橄榄球，处于投放和转化之间的孵化环节才是重头戏。</p><p></p><p>营销重点的不同，带来了营销路径的差异。于ToB企业而言，用户的生命周期更长，价值挖掘的难度和挑战也更大，单纯地依靠传统的广告投放，很难带来企业的业务增长。而<a href=\"https://www.jingdigital.com/\">径硕科技</a>\"提供的营销自动化服务，主要解决的就是从投放到转化过程中的问题，核心是帮企业提高线索转化率。</p><p></p><p>拿径硕科技来说，其自身也是ToB市场实践者。据洪锴介绍，在径硕科技每个季度大概60多个成交订单中，基本上会有60%来自市场营销部门，并且，其中有30%主要来自于被“唤醒”的潜在客户。</p><p></p><p>“例如，当企业得到一些销售线索，可能短时间内不一定会直接转化。过去，这样的线索通常会被直接放弃。但现在，我们会把这些用户信息放到统一的池子，进一步通过活动、内容的交互不断跟他创造触点，让他产生更多行为轨迹，供后台进一步做分析和评估，并在达到一定的标准之后，再次提供给销售。而事实证明，这些线索最终的转化率是比较高的。”</p><p></p><p>径硕科技成立于2014年，在当时营销自动化仍然是空白的国内市场，径硕科技走过一些弯路，蹚过ToC行业的“坑”，最终锁定了ToB的数字化营销赛道。洪锴表示，虽然在ToB行业，市场营销部门的<a href=\"https://www.infoq.cn/article/BXWSliYk7FK3EfGSbRtS\">数字化</a>\"往往滞后于其它的业务部门，但正是由于它的起点低，所以未来还有巨大的发展空间。</p><p></p><p></p><blockquote>本期 InfoQ《超级连麦. 数智大脑》，由径硕科技董事长&amp;CEO洪锴，对话极客邦科技创始人兼 CEO 霍太稳（Kevin），和 InfoQ 极客传媒数字化主编高玉娴，一起探讨B2B企业的营销数字化究竟怎么做。内容有删减，感兴趣的同学可进入“霍太稳视频号”或“InfoQ 视频号”观看直播回放。</blockquote><p></p><p></p><h2>锁定B2B营销自动化，背后有思考也有教训</h2><p></p><p></p><h5>InfoQ：径硕科技是您创业的第三家公司，是否可以分享一下您的大致创业经历，以及每次转变背后的思考？</h5><p></p><p></p><p>洪锴：首先我们一开始做的是凯盛集团，这也是中国最早做知识付费的公司之一，大概在2008年左右，我们当时连接了20多万各行各业的专家，他们来自各个企业、咨询公司、投资机构，主要提供专家服务。</p><p></p><p>背后的起因其实很简单，在贝恩做顾问期间，我们发现国内的咨询行业有一个很大的痛点，就是很多顾问专家对行业并不了解，在提供咨询服务的过程中，需要快速了解行业业务。所以，我们就做了这样一件事，通过知识付费的模式，把专家聚集在一起，为大中小型企业提供咨询服务。</p><p></p><p>随后，我们又短暂做了宝贝地图，这是一个K5少儿素质教育社交电商平台，主要聚焦亲子领域，就是把线下父母之间的信息交流搬到线上。</p><p></p><p>2014年，我们成立了径硕科技，主要就是做营销自动化的<a href=\"https://xie.infoq.cn/article/ca00cfff7fcd587edb397f34b\">SaaS</a>\"。其实，营销自动化行业在美国早从2004年就已经出现，但是，当时在国内，我们发现很多企业的用户信息大多还是通过Web端的网站进行存储。直到2015年左右，微信公众号成了很多企业的品牌形象和营销出口，我们认为，这个可能是一个重要的机会，将对中国企业的ToB营销产生巨大影响，于是就投入到这个赛道中来。</p><p></p><h5>InfoQ：自径硕科技成立到现在的七八年的时间里，经历了哪些关键发展阶段？目前的业务发展情况如何？</h5><p></p><p></p><p>洪锴：营销自动化当年在国内其实是个新生事物，对我们来说，没有现成的参照对象，所以，在后来的发展过程中其实也走了一些弯路。比如，最初我们也服务了一些ToC行业，包括快消、零售等等。但是，后来我们发现ToC的营销很难标准化，很难用SaaS落地。</p><p></p><p>所以，从2019年开始，我们尝试去服务了一些ToB行业，比如高科技、制造等等。虽然在最开始的时候，投入的效果也没有那么明显，但是随着2020年疫情的影响，在线营销，尤其是直播这种形式成了ToB企业的重要营销模式。于是，我们开始聚焦ToB行业营销数字化这个细分市场。</p><p></p><p>第三个阶段是从2020年到现在，在这三年里，ToB营销发生了比较大的变化。在疫情之前，线下的展会、活动是ToB企业最基本的营销场景，而在线上营销场景下，市场部门的角色出现了一些微妙变化，开始承担创收的职能，除了日常的活动策划，还要向销售部门提供销售线索。</p><p></p><p>为此，我们从去年开始，一直在推广一个理念——营销资产管理——即把企业市场部门通过数字触点沉淀的用户数据，赋能给销售和服务部门，让营销数据真正为企业带来创收、提供价值。</p><p></p><h5>InfoQ：径硕科技锁定的是营销自动化方向，它和营销数字化的概念有何异同和关系？</h5><p></p><p></p><p>洪锴：其实营销数字化是一个特别大的概念，它涵盖了很多东西，<a href=\"https://xie.infoq.cn/article/ee191b6ad1bea9c04caeaee68\">营销自动化</a>\"就是其中的一个领域。</p><p></p><p>具体来看，营销数字化可以通过很多维度进行拆分。比如，刚刚说的ToC和ToB的维度，二者的营销模式和路径是完全不一样的。那么，在ToB领域，如果再进一步拆解，就包括获客、孵化、形成商机、转化、增购/复购等整个全生命周期。</p><p></p><p>在美国，营销自动化是相对简单的，主要聚焦在孵化这个环节，通常就是在各个渠道提供一个入口，吸引对应的人群，为销售输出比较靠谱的商机。而在国内，这个概念是有延伸的，除了通过孵化输出商机之外，还覆盖了转化的环节，包括对销售的赋能。</p><p></p><h5>InfoQ：2020年之后，径硕科技逐渐放弃B2C企业市场，开始聚焦B2B营销自动化。背后的思路和逻辑是什么？</h5><p></p><p></p><p>洪锴：这里面有我们的一些思考，也有教训。首先，ToC的营销就像一个杠铃，这个杠铃的两头，一端是投放，另一端是<a href=\"https://www.infoq.cn/article/bDJVbHPBaSHgbc5WpxBe\">转化</a>\"，这是ToC企业最大头的两个环节。但是，对于中间的孵化环节并不是投入的重点。</p><p></p><p>换句话说，聚焦孵化的营销自动化对绝大多数ToC企业来说并不是核心。相比之下，ToB营销恰恰相反，它更像是一个橄榄球，资源的大头是在孵化环节，而且周期也更长。所以，在径硕科技业务推进过程中，我们也慢慢发现了其中的问题，并且开始聚焦ToB领域。</p><p></p><h2>做好客群划分和场景提炼，SaaS也能满足不同客户需求</h2><p></p><p></p><h5>InfoQ：数字化转型是非常复杂的系统工程，个性化很强，但SaaS又是非常标准化的服务，径硕科技如何满足客户的需求？是否可以结合我们的客户案例具体介绍一下。</h5><p></p><p></p><p>洪锴：我们现在大概拥有300多个客户，通过与客户的深度交流，我们对B2B企业数字化转型成熟度与营销指标总结出五个阶段：</p><p></p><p>第一阶段是传统营销，市场部是纯粹的花钱部门，营销人员的核心KPI是增粉，即通过千人千面的个性化交互，触达自己的用户群；</p><p></p><p>第二阶段是获客驱动型营销，这阶段的重点是用户的价值转换，也就是说，他不能只是你的粉丝，而要为企业的业务创造价值，在这个过程中，营销人员需要通过营销自动化工具为销售部门提供MQL（Marketing Qualified Lead，营销合格线索），需要通过官网、微官网、小程序等媒介，利用内容、活动与用户进行交互，并且追踪他们的行为轨迹；</p><p></p><p>第三阶段是商机驱动型（集客）营销，营销效果的衡量标准从MQL进一步转变为SQL（Sale Qualified Lead，销售合格线索），过去销售部门对线索的判断，营销部门基本没有任何的反击的机会，因为他们没有相关的数据作为支撑，但现在，通过营销自动化工具的部署，营销人员就可以对相关线索进行充分的分析，并给销售判断提供逻辑，甚至可以重新定义规则；</p><p></p><p>第四阶段是商机驱动型（推式）营销，是把营销自动化和企业的<a href=\"https://xie.infoq.cn/article/9a6171c4aaff48b7ef5bf951a\">CRM</a>\"系统打通，据此，就可以端到端地衡量营销对于每一个成交订单的贡献值，目前进入这个阶段的企业并不多，大多数企业都还在路上；</p><p></p><p>第五阶段是营收驱动型营销，也就是现有客户的持续增购和复购，基于对客户的画像分析，为他们提供更具针对性的服务，通过客户成功，形成完整的营销闭环。</p><p></p><p>我们认为，当企业处于不同阶段，营销的效果衡量标准是不一样的。拿径硕科技自身来说，我们也是ToB市场的参与者，而在我们每个季度大概60多个成交订单中，基本上会有60%来自市场营销部门，并且，其中有30%主要来自于被“唤醒”的潜在客户。</p><p></p><p>举例来说，我们过往会通过活动、直播积累一些销售线索，并且经过筛选之后转给销售部门，但是，这些沉淀下来的用户，其实并不一定会直接转化，有的人看直播是冲着学习来的，可能他的预算不够，或者所处阶段没有达到需要使用工具的程度，所以，他们无法转化为商机。</p><p></p><p>过去，这样的线索通常会被直接放弃。但现在，我们会把这些用户信息放到统一的池子，进一步通过活动、内容的交互不断跟他创造触点，让他产生更多行为轨迹，供后台进一步做分析和评估，并在达到一定的标准之后，再次提供给销售。而事实证明，这些线索最终的转化率是比较高的。</p><p></p><h5>InfoQ：在ToB领域，企业之间、行业之间的差异化大吗？</h5><p></p><p></p><p>洪锴：在这里，我们也走过弯路。一开始，我们试过按行业划分去为企业提供服务。但慢慢发现，行业细分太多了，对于SaaS产品来说很难覆盖。于是，我们开始按照营销场景对产品功能进行抽象化，并对客户类型做了划分。</p><p></p><p>第一类客户，主要是面对比较分散、体量较大的市场提供服务的企业，他们的痛点是能够收到的销售线索很多，但转化率并不高，这时候他们的核心诉求是通过数字化的手段做个性化营销；</p><p></p><p>第二类，我们称为KA大客户，他们面对的客户是比较有限的，比如汽车零部件生产商，他们的客户无非就是国内的四五十个主机厂。对于这样的企业而言，他们的痛点并不是需要别人知道我，或者提高销售转化率，而是如何通过数字化手段，提高企业对客户决策链条的覆盖，帮助销售完成关键人以外的角色链的覆盖，比如一些一线的实操人员对产品的评价，往往会直接影响企业最后的采购决策；</p><p></p><p>第三类，是那些主要通过渠道铺货完成销售的客户，虽然过去他们也能赚到钱，但是并不知道自己的产品都卖给了谁，也没办法直接和终端客户进行触达，所以手上掌握的信息非常少，这时候他们就需要通过数字化工具获取这些数据，从而转变营销的模式。</p><p></p><p>通过对客户的类别划分，我们根据不同客户的特点和痛点，抽象出了具体的产品功能，从而形成了一定的标准化。</p><p></p><h5>问：针对这三类不同的客户群体，目前径硕科技可以提供哪些具体的技术和产品？</h5><p></p><p></p><p>洪锴：在过去两年多时间里，我们一直在做一件事，就是帮助企业在内部搭建一套与营销相关的“基建主干道”。而我们的产品，首先就是服务于市场部门的，能够帮助市场部完整地运营所有活动和内容推广。并且其中还内嵌了CDP，不仅能够完成第三方数据的清洗，而且还可以通过打分，评估每个销售线索的质量，通过自动化的流程帮助销售完成孵化的动作。这个产品解决的主要是企业从销售线索到商机转化过程中的问题。</p><p></p><p>第二个产品，其实是一个转化工具，对于销售人员来说，可以通过这个工具，承接营销部门的线索，并且通过对每一个线索的行为轨迹、分值、画像、最新动态的分析，进而判断如何更好地与他们进行交互。同时，这个工具还能帮助销售部门完成营销策略的落地，比如某企业要在某个城市举办某一个活动，那么对应的营销标语等等都可以直接输出。</p><p></p><p>第三个产品是开放平台，比如在我们现有的SaaS产品中无法满足的需求，企业就可以通过开放平台，把第三方接入进来，完成最后一公里的开发和集成，同时也能与企业内部的其它系统进行对接。比如，对于那些面向渠道业态的企业，他们希望能够为渠道赋能，那么就可以基于开放平台与第三方进行对接。</p><p></p><h2>CDP要不要做以及如何做，需结合企业现状综合考虑</h2><p></p><p></p><h5>InfoQ：对于企业来说，外部的一些平台数据（比如微信公众号）抓不到，或者即便用户产生了交互行为，也不意味着他有具体需求，这样的问题怎么解决？</h5><p></p><p></p><p>洪锴：公众号文章这样的营销入口的确是没有接口去获取用户数据的，这时候企业只能通过一些运营手段去连接用户。举个例子，我们单纯发一篇文章，肯定不知道谁看了谁没看，很多人的后续行为你是追踪不到的，但是，我们可以通过一些外链实现Co-action，让用户跳出公众号场景，进入你的私域里来，从而抓取相关的数据。</p><p></p><p>另外，用户点进来也不一定意味着他是我们的目标客户，比如，有人他就是瞎点的，或者点错的。这时候，就需要制定相关的打分标准，通过动态标签，进一步追踪用户的行为。比如，它对你的活动的响应频次、响应时效等等，这个过程需要算法不断计算，并且进行动态同步。</p><p></p><h5>InfoQ：在营销领域，CDP（Customer Data Platform, 客户数据中台）关注度很高，能不能具体介绍一下什么是CDP，以及企业在做CDP过程中需要注意哪些问题？</h5><p></p><p></p><p>洪锴：CDP在某种程度上跟CRM有一定的相似之处，主要作用都是对用户的行为数据进行分析、管理和呈现。区别在于，CRM核心还是个管理工具，是帮助销售对客户数据进行管理的；而实际上，在线索成为可跟进的商机，以及客户成单之前，还有很长的路径，这个过程中，用户在企业的数字化触点中同样也有大量的行为发生。如何尽可能完整、高效地采集、呈现这些数据，就是CDP要做的事。</p><p></p><p>那么，为什么CDP在有的公司最终做不起来或者失败了呢？我觉得有一个非常关键的点，就是企业到底有没有想明白，自己想拿CDP做什么。从本质上来看，CDP并不是应用层的工具，如果企业想不清楚具体场景，要通过数据去赋能谁，要让谁来使用以及如何使用这些数据，那么CDP的作用可能就非常有限。</p><p></p><p>其次，如果企业的数字化触点比较单一，那么CDP的价值也不大。一般来说，CDP还是更适用于比较复杂的ToB营销数字化场景的，如果企业只是做做微信营销，数字化触点并没有那么丰富，数据比较有限，那么CDP就有点大材小用了。</p><p></p><p>总结来说，一方面，企业要想清楚自己究竟希望通过CDP赋能什么场景；另一方面，企业自身要拥有足够丰富的数字化触点和数据维度。这样，CDP的存在才会更合理。</p><p></p><h2>招聘不是万能的，员工自我成长更重要</h2><p></p><p></p><h5>InfoQ：您曾经在此前的采访中表示径硕科技如今面临的最大挑战是人才短缺，具体来说，我们需要和缺少的是哪些类型的人才？</h5><p></p><p></p><p>洪锴：对于径硕科技来说，通过这三年的探索，我最深刻的一个领悟，就是SaaS软件其实是一个组合拳——营销、销售、客户成功和产品本身缺一不可。它们就像桌子的四条腿，每一个部分都需要有对应的人才补齐，不能有短板，而且每个岗位需要的都是复合型的人才。</p><p></p><p>比如，对于销售人员来说，既要懂销售技巧，也要懂技术，又要能讲明白场景；对于客户成功团队来说，既要对产品和技术足够熟悉，也要懂ToB企业营销业务；对于产品研发人员来说，也不能只懂技术，只接收需求，还要深入业务一线。</p><p></p><h5>InfoQ：目前，径硕科技是如何解决人才问题的？</h5><p></p><p></p><p>洪锴：首先，我们会从组织架构层面形成统一的认知——比如，技术不能光懂技术，还要走到前线去了解业务，包括通过设置轮岗机制，让不同岗位之间有更深入的了解；</p><p></p><p>其次，就是通过系统化的培训体系，包括通过极客时间企业版这样的学习平台，把内部沉淀的知识进行萃取和复制，不断提升内部人员的各项能力。</p><p></p><p>最开始，我们也是试图在招聘环节就匹配对应的人才，但是发现难度非常大。由于负责的产品线不同，覆盖的行业和领域也越来越广，很多岗位无法通过招聘解决，这时候每个员工的自我成长就变得非常重要。而要帮助员工成长，就离不开学习平台和学习工具。</p><p></p><h5>InfoQ：根据极客邦的观察和经验，径硕科技在人才方面遇到的问题是不是目前行业里的普遍问题？对于技术人员来说，未来有什么发展机会？</h5><p></p><p></p><p>霍太稳：在当下的这个大市场环境中，企业越来越强调对<a href=\"https://mp.weixin.qq.com/s?__biz=MzI1MjEyODQxNg==&amp;mid=2650064095&amp;idx=2&amp;sn=16734894d1da3d6c2216e6d00fb6d39c&amp;chksm=f1e81910c69f90068a33ae9f071384cf8ac78b84516232bb8742dededf9fbe09a0e021c35050&amp;scene=27#wechat_redirect\">复合型人才</a>\"的需求。包括现在技术圈比较流行的低代码开发，实际上主要也是提供给业务人员，来满足复合型能力需求的。</p><p></p><p>对于极客邦来说，我们其实也在要求自己的产研和设计人员要有业务思维，比如，我们要求产研人员自己要足够懂极客邦的业务和产品，要从用户体验的角度去研发产品；而设计人员也要从整个公司品牌输出的角度，考虑设计部门的价值。</p><p></p><p>同时，我们在服务企业客户的过程中发现，和互联网这样的数字原生企业相比，很多传统企业的IT基础是比较薄弱的，因此对人才的需求也很大。他们不仅需要精通技术的数字专业人才，包括架构师、开发人员、产品经理；还需要有数字应用人才，能够更好地把数字化工具用起来，赋能业务；此外，对于企业管理者，还需要具备数字思维。</p><p></p><p>这意味着，对于现在很多身处互联网行业的技术人才，未来将拥有非常广阔的市场空间。</p><p></p><h5>InfoQ：对于新的一年，您有什么畅想和期待？</h5><p></p><p></p><p>霍太稳：刚刚过去的2022年对很多人来说都是艰难的一年，但是2023年已经来了，对于每一个人，我们应该抱有一种谨慎乐观的心态，去期待和迎接新一年的到来。</p><p></p><p>针对ToB行业的数字化营销，我认为它一定是未来企业前行的方向。虽然在短时间内我们会经历一些痛苦，但是如果把眼光放远一点，如果我们把客户的数据资产都能够留存下来，并且能据此进行分析和决策，那么它的价值一定会超出我们的想象。</p><p></p><p>洪锴：我们常说人要顺势而为，如今，国内拥有非常肥沃的数字生态土壤，企业数字化营销也如滚滚洪流正在来袭。虽然在ToB行业，市场营销部门的数字化往往滞后于其它的业务部门，但正是由于它的起点低，所以，我们认为，未来它还拥有巨大商机，将帮助更多的ToB企业完成数字化的转型，抓住数字时代的机遇。</p><p></p><h3>嘉宾介绍</h3><p></p><p>洪锴 ，径硕科技董事长&amp;CEO。拥有超过20年的战略、市场、管理及创业经验，曾就职西门子、贝恩咨询，曾任思科中国区高级副总裁，曾创立亚太地区最大的专家网络——“凯盛集团”，以及“K5少儿素质教育社交电商平台——宝贝地图”。拥有沃顿商学院MBA学位、宾西法尼亚大学国际关系硕士学位、德国亚琛工业大学工程硕士学位。</p><p></p><p>霍太稳，极客邦科技创始人兼 CEO，InfoQ 中国创始人，极客时间创始人，TGO 鲲鹏会发起人。2007 年创立 InfoQ 中国，2014 年创立极客邦科技，2015 年发起 TGO 鲲鹏会，2017 年创立在线职业教育学习品牌极客时间，2019 年开创极客时间企业版，拓展企业服务市场。</p>",
    "publish_time": "2023-01-18 13:49:14",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "每个月在云上“狂烧”180万，Ruby On Rails 之父：我们要直接买硬件！",
    "url": "https://www.infoq.cn/article/0xb7kodt55mk8TB2mcgA",
    "summary": "<p>&nbsp;</p><p>2022年10月，运营项目管理平台 Basecamp 背后的 37Signals 公司首席技术官兼 Ruby On Rails 之父 David Heinemeier Hansson <a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651144240&amp;idx=1&amp;sn=c82c4527773a774e6dae99271eb8ca2c&amp;chksm=bdb8b8638acf317550482d606e5b229b856e719c26dd8a97dfe5183979111144d03b91764ded&amp;scene=27#wechat_redirect\">发文表示将要“下云”</a>\"。近日，37Signals官博发文总结了自己在2022年的云支出情况。</p><p>&nbsp;</p><p>这是一个得令人瞩目的<a href=\"https://dev.37signals.com/our-cloud-spend-in-2022/\">云账单</a>\"，该公司 2022 年在云上的支出费用大约为 320.15万美元（约合人民币2170万元），即每月 26.67万美元（约合180万元人民币）。其中大部分支出（75.99万美元）花在了 Amazon Web Services 的 EC2 和 EKS 服务。</p><p></p><h2>“恐怖“的云账单</h2><p></p><p>&nbsp;</p><p>现在的37Signals 主要经营两款产品：Basecamp和HEY，这也是他们的核心产品，对应的客户规模和收入水平也是最高的。另外，他们还运行着不少遗留服务，包括Basecamp Classic、Basecamp 2、Highrise、Backpack、Campfire、Writeboard，甚至是 Ta-da List。这些服务已经不再继续出售，但仍有几万甚至几十万用户在用，利润贡献在数百万美元上下。对此，37Signals 表示“打算永久提供支持，直到互联网不复存在。”</p><p>&nbsp;</p><p>上述的不少应用程序并非运行在云端。以规模最大的应用程序Basecamp为例，它的最新版本和之前的Basecamp 2几乎都运行在37Signals 的自有服务器上，对应应用本体、数据库和缓存服务器。在这些服务上，只有搜索（OpenSearch）、文件存储（S3）和CDN服务（CloudFront）由云端提供。</p><p>&nbsp;</p><p>HEY则基本完全依赖于云服务（除了某些电子邮件和图像处理服务，这部分由其自有硬件支持）。在HEY当中，37Signals 通过AWS EKS在Kubernetes集群上运行完整的Rails应用程序，借助Aurora RDS建立MySQL数据库服务器，在Elasticache上运行Redis，还通过OpenSearch实现搜索服务。另外，37Signals 的其他遗留应用程序也都运行在EKS上，数据库用的则是RDS。</p><p>&nbsp;</p><p>“2022年全年，我们的所有云服务总开销为3,201,564 美元，每月是266,797 美元。吓不吓人！”37Signals SRE 工程师 Fernando Álvarez在博文里说道。</p><p>&nbsp;</p><p>下面，我们看下37Signals 的详细开销：</p><p>&nbsp;</p><p>单看HEY，纯用于生产工作负载的全年开销为106.6万美元（合每月8.88万美元）。这一项服务的成本来源可参考下图：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/51/514430b4eaa79089314f239f175e8992.png\" /></p><p></p><p>至于其他各独立服务，37Signals 2022全年为所有应用程序数据库在RDS上花费了约47.3万美元（合每月3.9万美元）。这还不包括最新的Basecamp和较早的Basecamp 2版本，它们用的自有硬件。所以其中大部分还是来自HEY，全年数据库支出为35.59万美元（合每月2.96万美元），其余部分就是支持其他遗留服务的开销了。</p><p>&nbsp;</p><p>至于OpenSearch，37Signals 主要用来托管应用程序搜索集群和日志记录管道中的索引存储，全年共花掉51.99万美元（合每月4.33万美元）。Basecamp和Basecamp 2也在使用这项云服务，所以其中大部分成本就来自这两者，外加HEY和Basecamp Classic。</p><p>&nbsp;</p><p>亚马逊云科技的Kubernetes服务EC2和EKS，在2022年内共花掉75.99万美元（合每月6.33美元）。其中大部分用作HEY的生产和登台环境，总计27.23万美元（合每月2.26万美元），其余的用于其他遗留应用程序。但同样地，Basecamp和Basecamp 2不在其中。</p><p>&nbsp;</p><p>37Signals在Elasticache身上花掉了12.38万美元（合每月1.03万美元）。其中最大占比再次来自HEY，它要借助这项服务来获取Redis支持的缓存。</p><p>&nbsp;</p><p>最后，37Signals 在S3上存储了约8&nbsp;PB的文件，2022年内总开销高达90.78万美元（合每月7.56万美元）。Hansson透露，这是单笔花费最贵的项目。值得注意的是，37Signals 使用了双区域副本策略来避免AWS整个区域及其中各可用区的突发故障。为了交付这些文件和其他静态资产，其2022年在CloudFront CDN服务身上花掉了66742美元（合每月5562美元）。</p><p>&nbsp;</p><p>实际上，37Signals 为了将巨额支出削减至320万美元，做出大量努力。运营团队开展一项审慎的成本核查计划，每月上报并跟踪。公司还通过预留实例和长期使用承诺等方式签订了长期协议，借此享受更低的定价优惠。“但即便如此，我们在2022年内还是花掉了如此恐怖的云服务支出！”</p><p>&nbsp;</p><p></p><h2>新的”省钱计划”：购买硬件</h2><p></p><p>&nbsp;</p><p>在新的一年，37Signals 表示，计划把大量服务和依赖项从云端转移到内部硬件上，借此大幅削减这笔费用。但这个公司并不打算亲自运营数据中心，而是与Deft合作租赁其机架空间、带宽、供电和托管服务。</p><p>&nbsp;</p><p>“虽然按我们的业务规模计算，这样的支出同样不低，但已经远优于公有云上的花费。”Álvarez说道。</p><p>&nbsp;</p><p>虽然还没有详细的账单出来，但Hansson在推特上将这一成本与购买戴尔包含 288 个 vCPU 的服务器所需的支出进行了对比：</p><p>&nbsp;</p><p></p><blockquote>第一组，R6525 有256GB内存、3TB NVM、2x10G网络、2倍AMD EPYC 7513。第二组除了是 2x AMD EPYC 7443之外，其他都相同。所以288 vCPU、15 TB NVM、1.3TB RAM，3年每个月只要1287美元！</blockquote><p></p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a8/a889f98a02b1575227a975836e8046ac.png\" /></p><p></p><p>&nbsp;</p><p>37signals表示，新方案并不会给带来太多额外的运营负担，他们不需要在数据中心架设和部署硬件或者线缆。所有设备都可以从戴尔那边直接订购，发往Deft数据中心，等到服务器显示在线后即可直接使用。</p><p>&nbsp;</p><p>可以看出，37signals 在“下云”上表现出了非常大的决心。</p><p>&nbsp;</p><p>正如 Hansson 当时所说，云计算在两种极端情况下大有裨益：其一是应用程序极其简单且流量很低的情况，这时选择完全托管服务能摆脱大部分复杂性要素；其二是负载波动几乎毫无规律可言、大家不知道该部署多少服务器的情况，这时上云是最好的选择。但如今37signals已经不适用于上述两种情况。“Basecamp 多年的商业模式跟自有硬件都能良好协同，业务的增长轨迹也有很好的可预测性。”</p><p>&nbsp;</p><p>事实上，虽然近年来云计算加速增长，但企业并没有放弃本地数据中心，很多企业继续依赖传统数据中心来处理其关键任务工作负载。</p><p>&nbsp;</p><p>根据<a href=\"https://uptimeinstitute.com/resources/research-and-reports/uptime-institute-global-data-center-survey-results-2022\">Uptime Institute 2022 年的研究，</a>\"只有 36% 的组织会将关键任务工作负载放入公共云中。虽然这一比例高于 2019 年的 26%，但企业越来越担心公共云服务的可见性和弹性。2022 年，超过四分之一 (26%) 的公司表示，出于此类担忧，他们不会将关键任务工作负载放到公有云上，这一比例高于 2019 年的 22%。</p><p>&nbsp;</p><p></p><h2>企业在延长硬件的使用周期</h2><p></p><p>&nbsp;</p><p>那么，企业总是想要最新、最好的技术来为其数据中心提供动力吗？&nbsp;实际上并不是。</p><p>&nbsp;</p><p>根据 Uptime Institute 的研究，硬件更新周期在普遍延长而非缩短。在其 2020 年数据中心调查中，最常见的更新间隔时间为五年，而 2015 年时为三年。这表明在相对较短的时间内就发生了重大转变。根据<a href=\"https://uptimeinstitute.com/resources/research-and-reports/uptime-institute-global-data-center-survey-results-2022\">Uptime</a>\"的说法，五年或更长时间的硬件生命周期正在成为常态。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/35/35cf07ac1cb3a971f19b8b9afcbb3967.jpeg\" /></p><p></p><p>&nbsp;</p><p>&nbsp;</p><p>是什么推动了这种延长效应？Uptime Institute 表示，数据中心硬件的电源使用效率 (PUE) 的下降削弱了更频繁更新服务器的主要动力。平均 PUE 从 2007 年的 2.5 暴跌至 2014 年的 1.67，但此后改善停滞不前，当前平均 PUA 为 1.55。</p><p>&nbsp;</p><p>注：PUE = 数据中心总能耗/IT设备能耗，其中数据中心总能耗包括IT设备能耗和制冷、配电等系统的能耗，其值大于1，越接近1表明非IT设备耗能越少，即能效水平越好。</p><p>&nbsp;</p><p>随着效率提高的放缓，企业对昂贵的硬件进行更换的经济动机也在放缓。摩尔定律带来的回报越来越少。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0f/0fdf6ede4e9e7ec37f641c497489fec8.jpeg\" /></p><p>&nbsp;</p><p></p><blockquote>“正是这种每瓦特性能的翻倍，为增加计算能力同时通过硬件更新提高效率提供了重要机会。但在过去五年中，英特尔（以及直接竞争对手 AMD）要保持改进的步伐变得更加困难。这就提出了一个问题：我们是否还能从最近几代和即将到来的几代中央处理器中看到这些改进？否则，硬件更新的理由将被削弱。”&nbsp;Uptime Institute 2020 数据中心报告</blockquote><p></p><p></p><p>PUE 是更新周期延长的因素之一，还有一些其他的因素：</p><p>&nbsp;</p><p>硬件即服务：供应商越来越喜欢将他们的硬件产品捆绑在订阅模式中。某种程度上，他们正在响应客户的需求。但当技术格局变化如此之快时，谁愿意锁定所有的资本支出呢？提高硬件利用率：超大规模（hyperscalers）已经证明商品硬件足以运行工业级工作负载。关键在于应用正确的软件层来充分利用可用硬件。中型和企业 CIO 密切关注着这些发展。预算限制：新 IT 设备的商业用途总是受到审查，毫无疑问，疫情的发生将优先事项进行了重新排列。随着远程工作成为常态，各种规模的企业都重新审视了对专有硬件的需求。针对云优先工作负载的服务和咨询支出也越来越多。</p><p>&nbsp;</p><p>当然，硬件供应商仍然希望缩短硬件升级周期。以戴尔为例，该公司在 2019 年委托<a href=\"https://www.dell.com/en-au/dt/unified-workspace/future-of-enterprise-computing-forrester-report.htm\">Forrester 发布的一份报告</a>\"中警告说，不及时升级设备会带来机会成本。“老化的基础设施和进展有限的SDDC（软件定义的数据中心）使用，阻碍了 IT 组织满足业务需求。”</p><p>&nbsp;</p><p>但硬件使用者正在主动延长使用周期。比如微软目前在其庞大的数据中心产品组合中运营着 400 万台服务器（并且还在增加）。微软首席财务官 Amy Hood 最近宣布该公司将其服务器<a href=\"https://www.datacenterknowledge.com/microsoft/data-center-hardware-refresh-cutback-microsoft-what-s-next\">的使用寿命延长</a>\"至六年，而在此之前的更新周期为四年。</p><p>&nbsp;</p><p>Hood 表示，通过对软件的投资、服务器和网络设备运营效率的提高以及技术进步，微软能够将其服务器的使用寿命再延长两年。因此，该公司估计 2023 财年第一季度可节省 11 亿美元，整个财政年度总计可节省 37 亿美元。</p><p>&nbsp;</p><p>另外，为实现其循环经济实践的承诺，从现在到 2030 年，微软的<a href=\"https://blogs.microsoft.com/blog/2020/08/04/microsoft-direct-operations-products-and-packaging-to-be-zero-waste-by-2030/\">目标是将</a>\"其数据中心的电子垃圾通过维修管理、回收再利用等方式降低 90%。这种维修和再利用的趋势不仅会进一步延长硬件更新的时间范围，还将支持二手数据中心设备市场的扩张。</p><p>&nbsp;</p><p></p><h2>结束语</h2><p></p><p>&nbsp;</p><p>在企业不断追求“降本增效”，而云成本不断上升的情况下，“下云”采用传统硬件设备成为一些企业的选择。但真要下云的话，企业需要考虑是否像37Signals 一样业务可预测、没有意外的流量涌入，同时也要算好自己的账，比如要更换的设备价值多少，如何收回部分投资以抵消升级的前期成本，哪些设备可以在内部重新部署、哪些可以退役等。</p><p>&nbsp;</p><p>世界上没有完美的解决方案，企业还是要做好评估后，根据自身业务需要进行选择。</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://dev.37signals.com/our-cloud-spend-in-2022/\">https://dev.37signals.com/our-cloud-spend-in-2022/</a>\"</p><p><a href=\"https://horizontechnology.com/news/data-center-hardware-refresh-cycles/\">https://horizontechnology.com/news/data-center-hardware-refresh-cycles/</a>\"</p>",
    "publish_time": "2023-01-18 14:16:08",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "微软将在Azure云服务中加入ChatGPT，100亿美元注资计划也在酝酿中了",
    "url": "https://www.infoq.cn/article/rlSNCpvjVXf36qbBm2EW",
    "summary": "<p></p><h3>微软向OpenAI 加大投资</h3><p></p><p>&nbsp;</p><p>微软和 OpenAI — “病毒式”人工智能聊天机器人 ChatGPT 背后的公司正在讨论一项交易。</p><p>&nbsp;</p><p>1月16日，据知情人士向外媒Semafor透露，微软已经讨论了向OpenAI 投资 100 亿美元的相关问题。根据几份报告，OpenAI 的价值将达到 290 亿美元。</p><p>&nbsp;</p><p><a href=\"https://www.semafor.com/article/01/09/2023/microsoft-eyes-10-billion-bet-on-chatgpt\">根据</a>\"Semafor 的说法，这笔交易最终将使微软获得OpenAI 49% 的股份，其中还包括一项条款，即微软将获得 OpenAI 四分之三的利润，直到它收回投资，其他投资者将获得 49% 的股份，OpenAI 保留其余2%的股权。</p><p>&nbsp;</p><p>彭博社在其报道中称，微软已经谈到以大约 290 亿美元的估值向 OpenAI 投资多达 100 亿美元。</p><p>&nbsp;</p><p>微软发言人在一份电子邮件声明中表示，该公司不会“对猜测发表评论”，而 OpenAI 也没有回应置评。</p><p>&nbsp;</p><p>2019年，微软在向 OpenAI 投资<a href=\"https://openai.com/blog/microsoft/\">了 10 亿美元</a>\"，成为这家初创公司的独家云提供商。</p><p>&nbsp;</p><p>今年1月，有外媒报道称，微软计划将 ChatGPT 整合到其 Bing 搜索引擎中。ChatGPT的爆红也让谷歌高管们手忙脚乱。<a href=\"https://www.bloomberg.com/news/articles/2023-01-10/microsoft-weighs-10-billion-chatgpt-investment-semafor-says\">据</a>\"彭博社报道，几个月来，两家公司一直在就微软大幅增持 OpenAI 股权进行谈判。《华尔街日报》上周&nbsp;<a href=\"https://www.forbes.com/sites/nicholasreimann/2023/01/05/chatgpt-creator-openai-discussing-offer-valuing-company-at-29-billion-report-says/?sh=43d98b11e047\">报道称</a>\"，OpenAI 即将以 290 亿美元的估值出售股票。</p><p>&nbsp;</p><p>微软的投资并不是一场赌博。ChatGPT 正在流失资金，此前据OpenAI 首席执行官<a href=\"https://twitter.com/sama/status/1599671496636780546?s=46&amp;t=ipYLU4U5vxgXzW-caa8emQ\">Sam Altman</a>\"称，每次有人与其聊天机器人互动时，公司都会花费几美分的计算能力。如果 OpenAI 想出如何在 ChatGPT 和图像创建工具 Dall-E 等产品上赚钱，微软将获得 75% 的利润，直到它收回最初的投资。</p><p>&nbsp;</p><p></p><h3>Azure云服务将加入ChatGPT</h3><p></p><p>&nbsp;</p><p>在财务风险和回报之外，更大的收益是，微软可以与 OpenAI 一起开发 Microsoft Cloud 上的技术，这将使微软处于未来十年最重要的消费技术的最前沿。</p><p>&nbsp;</p><p>微软在一篇博客文章中表示，计划将OpenAI的多项技术模型引入Azure云服务中。这将使得微软的云客户可以在通过Azure使用各种OpenAI工具，如构筑ChatGPT技术底层的GPT-3.5语言系统，以及人工智能作画模型Dall-E等。</p><p>&nbsp;</p><p>1月17日上午，微软首席执行官 Satya Nadella在<a href=\"https://twitter.com/satyanadella/status/1615156218838003712\">推特</a>\"上发布了一则消息，“ChatGPT 即将推出 Azure Open AI 服务，该服务现已普遍可用，因为我们帮助客户将世界上最先进的 AI 模型（包括 GPT-3.5、DALL-E 2 和 Codex）应用于他们自己的业务需求。”</p><p>&nbsp;</p><p>OpenAI<a href=\"https://twitter.com/OpenAI/status/1615160228366147585\">在推特上发布了这一消息</a>\"，并补充说：“我们从 ChatGPT 研究预览中学到了很多东西，并一直在根据用户反馈进行重要更新。ChatGPT 将很快用于我们的 API 和微软的 Azure OpenAI 服务。”</p><p>&nbsp;</p><p>据悉，Microsoft Azure OpenAI 服务于 2021 年 11 月首次亮相。根据一份新闻声明，公司已经使用该服务来应用高级用例，例如客户支持、定制以及使用搜索、数据提取和分类从数据中获取见解。&nbsp;Azure 也是 OpenAI API 模型系列背后的核心计算能力。</p>",
    "publish_time": "2023-01-18 14:25:09",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "一个架构师在2023年需要掌握哪些“必杀技”？",
    "url": "https://www.infoq.cn/article/UCaTitOegreb3NGiX24m",
    "summary": "<p>&nbsp;</p><p></p><blockquote>2022年，架构领域发生了哪些值得关注的事情？一位架构师必备哪些技能？哪些架构趋势需要掌握？1月6日晚8点，Nacos 和 MSE 创始人、阿里云高级技术专家彦林彦林为我们带来2023年的架构师发展指南。以下根据直播内容整理，有不改变原意的删减，完整内容<a href=\"https://www.infoq.cn/video/kmWLMtUvZjZVKbHClPFV\">可点击查看完整回放视频。</a>\"</blockquote><p></p><p>&nbsp;</p><p>主持人：今天的主题是2022年架构发展的亮点，以及架构师成长的路径。我们请到了老朋友彦林老师，先请彦老师来给大家打招呼。</p><p>&nbsp;</p><p>彦林：我是来自阿里云的彦林，很荣幸有机会跟大家一起聊聊今年架构的一些趋势。我从事软件开发10多年，然后赶上了在阿里做百万实例架构的演进，包括最近3年帮助阿里云从自建IDC全部搬到了公有云。我也有幸参与到阿里巴巴内部的中间件产品的开源，然后通过开源做技术影响力，也因此和我们InfoQ的小伙伴结缘，和更多的开发者结缘。随着开源的影响力越做越大，我们也把开源的一些技术解决方案，使用产品化的模式，通过阿里云去做输出。</p><p>&nbsp;</p><p>目前我主要在阿里云负责微服务产品相关的开发工作，希望后面有更多机会交流。今天晚上主要跟大家聊一聊技术架构的一些趋势。</p><p></p><h2>详解架构技术发展</h2><p></p><p>&nbsp;</p><p>主持人：彦林老师先带我们回顾下，今年架构领域都有哪些比较重要的进展和亮点？</p><p>&nbsp;</p><p>彦林：我在阿里云每天见非常多的客户，经常跟客户聊架构选型相关的事情，今天以我的视角带大家做一个简单的回顾。一般找我们聊架构，大家都会讲到不同类型的架构，比如单体架构、微服务架构、Serverless架构以及低代码等等，在不同的场景怎么去选型？哪些场景适合哪些领域？现在每个领域的业务成熟度是什么情况？</p><p>&nbsp;</p><p>面对这几个问题，我们会简单进行分解。首先，单体架构现在基本已经成熟了，各个语言包括Java、Golang做单体开发都比较成熟。所以在过去一年 Java做了一些变化，为了更好地适应云原生，它会通过GraalVM技术、Spring 3.0等关键大版本的发布，让Java变得更轻量、启动速度更快。其他的语言比如Go，天然就是云原生的语言，所以它在做单体分布式开发的时候，整个启动速度都比较快，相对会比较成熟一些。</p><p>&nbsp;</p><p>第二，<a href=\"https://www.infoq.cn/article/wyoRNaVVYp2I4GjY9Aoc\">微服务</a>\"。微服务整个领域在过去一年还是发生一些变化。在最早的时候，大多数都是一些互联网大厂在使用微服务，但是去年看到各行各业开始更加深入地去使用微服务。因为疫情虽然给大家带来了一些痛苦，但也给整个数字化的进程带来了一些助力，包括数字化系统的迭代在变快、复杂度在变高，因此微服务在加速渗透到各行各业。在微服务架构的选型过程中我们也可以看到，由于Spring Cloud现在成熟度已经比较高、Spring Boot 3.0最新的架构再往前演进，Java 在解决云原生应用的一些启动速度和加载速度问题。</p><p>&nbsp;</p><p>我们还看到另外一个非常有意思的现象：大家都在往Go语言发力。微服务在Go语言的整个发展趋势在变快，也标志着今天Go语言在做微服务分布式开发方面，进入了一个爆发阶段。</p><p>&nbsp;</p><p>互联网最早以阿里为代表的一些做交易系统的厂商采用Java较多，但是随着传统厂商慢慢进入数字化演进过程，他们就从C++、 PHP开始向Go转型，而且转得速度在变快，包括阿里微服务在这方面也做了一些布局，这是今天后端开发方面的一些变化。</p><p>&nbsp;</p><p>在前端，Node.JS现在也越来越成熟。一般在架构简单的时候，可能采用前端网关直接挂后端应用的方式。随着客户规模变大，就会用Node.JS做一代理层，这样有利于前后端的分离，让前端的整个迭代速度更快。在阿里内部分中台、后台、前台分三层，后台应用需要的是稳定性，中台需要的是支撑效率可复用性，前台需要的是业务要跑得足够快，这方面微服务也比较成熟了。</p><p>&nbsp;</p><p>最后讲两个技术趋势。</p><p>&nbsp;</p><p>第一，<a href=\"https://www.infoq.cn/article/GfljeKBdALpQt0KT96DH\">Serverless</a>\"。2022年可以被认为是整个Serverless 的元年，阿里云在2022年11月份的云栖大会上，阿里云总裁发布Serverless的战略，提供了一系列Serverless的产品，从整个计算、存储、网络，到上层的FC产品，一直到数据库的Serverless，演进速度都在持续加快，相信在2023年速度会更快。</p><p>&nbsp;</p><p>在Serverless架构方向引导之下，我们可以看到事件驱动也在慢慢变成主流。一个个函数之间通过事件驱动模式进行解耦，架构的容错率会非常好。在云厂商推动下，我们可以看到一些新兴的中小型业务、偏前台的业务，包括计算性的任务，都大规模采用了 Serverless的架构。</p><p>&nbsp;</p><p>第二，低代码。低代码现在每年的增长速度有40%，速度很快。阿里最早推出的一些产品叫宜搭，基于行业性的解决方案，它有行业属性、业务属性，现在也比较成熟。</p><p>&nbsp;</p><p>从技术上来说，低代码是一个趋势。举例来说，它会通过一些图形化的拖拖拽拽，将模块进行组装，对于业务比较简单的场景，开发效率还是比较高的。低代码和无代码这种拼装的模式，可以让更多的人参与设计数字化的建设过程。阿里在微服务上也做了一些事情，比如开源了一个云原生应用脚手架（<a href=\"https://start.aliyun.com/\">https://start.aliyun.com/</a>\"），能够帮助开发者快速地勾勾拽拽，把一个依赖包快速组建起来，这也是低代码的一种模式。</p><p>&nbsp;</p><p>相信随着整个技术基础架构中间件稳定成熟之后，在IaaS、PaaS之上，基于更高层的低代码会成为未来的趋势。从业务方面说，各个行业的SaaS会成为一个趋势。</p><p>&nbsp;</p><p>社区：多长时间重构一次？</p><p>&nbsp;</p><p>彦林：重构不是按照时间决定的。重构的第一个原因是迭代效率变低了，比如代码的研发效率越来越低，严重阻碍了它的迭代速度。第二个原因是稳定性，比如开发者修改一Bug引出了多个新Bug，代码变得很复杂了。第三个原因是扩展性不足，性能无法满足要求，比如做大型运营活动时，单体无法满足需求，企业就需要做一些分布式的改造，把主链路和分支链路分开，做更好的扩展性和弹性。</p><p>&nbsp;</p><p></p><h4>微服务：真的被滥用了？</h4><p></p><p>&nbsp;</p><p>主持人：您在去年的分享中谈到，微服务每年有差不多 20% 以上的增长。今年，微服务的增长趋势如何？</p><p>&nbsp;</p><p>彦林：从三方报告、阿里、官网以及Star上的数字来看，今年的增长速度是15%左右，比去年同比增长速度稍微慢了一点点，和疫情有很大的关系，但其实绝对数字差不多。在中国，每年采用微服务架构的有几十万家企业，虽然增速变慢了，但是每年采用微服务架构的绝对数字依然非常大。另外，整个技术的热度也在持续加强。</p><p>&nbsp;</p><p>主持人：今年有一个争议点，马斯克接手推特之后，吐槽过推特的微服务架构，说运行要调用1200多个RPC，但其实真正需要的微服务不到20%。其实像GitHub前CTO也提到过微服务滥用的问题。这就会引发大家一个思考，今年的微服务真的在被滥用吗，您怎么看？</p><p>&nbsp;</p><p>彦林：从我们的角度看，无论是微服务还是单体应用，都是一个技术选型。随着业务公司的发展、需求的不断增多，业务变得更复杂，我认为更多是管理和产品的问题，不是技术的问题，我们要把技术和业务分开。</p><p>&nbsp;</p><p>“什么时候采用微服务”是技术人要回答的，比如企业只有一个业务系统，其实是不需要上微服务的。那一个公司几十号人、几十个子系统，还要单体应用吗？效率能解决吗？架构其实是一个拆分，服务规模大了后架构师在做架构的时候，就会向两个方向去解决业务的复杂性问题。针对有几十个研发同学、几十个子系统的情况，就需要做一些分支，这个时候用微服务的投入产出比会比较高。单体到微服务有一个交叉的技术曲线，可能是10个应用、10个子系统，达到拐点之后采用微服务确实效率比较高。但在没有达到拐点时，提前采用微服务可能会发现一些问题，随着业务规模增大，微服务后面才可以慢慢释放红利，这是一个技术选择问题。</p><p>&nbsp;</p><p>总的来说，没有最好的，只有最合适的，当系统的复杂度达到10个研发、10个子系统以上，可能就适合用微服务了；当达到100个研发、100个子系统以上，可能就要把公共服务抽成一些中台服务去做，这是架构师基本的服务化、分层设计理念。用这样的理念设计后，我们的组织架构也随着技术架构去调整，让业务尽可能跑得快。</p><p>&nbsp;</p><p>社区：传统项目准备使用微服务，在转型时主要从几方面去转？</p><p>&nbsp;</p><p>彦林：互联网的第一波，包括云的第一波、数字化的第一波已经过去了，第二波就是传统客户包括政企。大部分客户会问，CTO应该怎么决策？最佳的解决方案是：第一，新老架构前面都加一层网关，用网关将老的服务路由到老的单体架构上面，新的架构采用微服务，让新的业务先跑到新的架构上，老的架构慢慢往前演进，这是一个长期的过程。</p><p>&nbsp;</p><p>第二，新老架构之间也可以通过网关进行代理。有许多厂商向传统公司提供服务，多个服务之间怎么进行快速组装、相互调用健全，怎么组装更高级、更丰富的上层服务？都是通过网关快速做API的聚合与整理等，这都是这些传统企业的诉求。通过网关可以把新老系统、多个ISV系统全部互联互通，这是做现代化架构演进或者云原生架构演进最快的模式，让新的架构、新的模式讲清价值、慢慢迭代，把老的架构进行收敛。这就是我们现在看到最好的一种模式。</p><p>&nbsp;</p><p>主持人：马斯克说推特在一些国外地区会比在美国的运营速度要慢很多，产生速度差异的原因是什么？</p><p>&nbsp;</p><p>彦林：从理论上来说大家应该都是一样的，但是当组织离核心业务、权力机构远的时候，很多的组织效能会做一些弱化的事情。我认为更多的是组织的问题，技术的问题并不大。马斯克只是说了一个现象，被一些人拿出来做新闻热点炒作而已。</p><p>&nbsp;</p><p>其实我们也能感觉到，技术和产品有时候有一些博弈，产品总想让技术多做需求，但是需求越多系统就越复杂，随之依赖越多、链路越长，风险也就越大。</p><p>&nbsp;</p><p>阿里巴巴在2012年左右的时候，链路也很长、很复杂，所以我们当时抓体验，比如做一秒钟战役，即所有的请求要在一秒钟之内做完。为此，架构做了很多改变，比如分布式架构分为核心链路和非核心链路，核心链路我们用RPC微服务同步解决，非核心业务通过异步发消息去解决、通过事件去解决。这样做稳定性、扩展性会有大幅提升。</p><p>&nbsp;</p><p>社区：微服务的注册中心跟K8S云原生是不是有些冲突？</p><p>&nbsp;</p><p>彦林：这个问题非常专业。其实没有冲突的，有一些交集。 因为容器和微服务是正交关系。注册中心是微服务的存储，etcd是K8S的存储，是分层的。&nbsp;</p><p>&nbsp;</p><p></p><h4>云原生架构：容器和微服务搭配提效</h4><p></p><p>&nbsp;</p><p>主持人：云原生架构的技术体系是怎样构成的，怎样才算是云原生架构？</p><p>&nbsp;</p><p>彦林：最早提出云原生概念的是一家小公司，他们以Spring Cloud为理念去宣传了云原生技术。在之后3-5年的发展过程中，CNCF重新定义了云原生，大家有了主流的认知，即采用了容器、微服务和不可变基础设施这些关键技术栈的，我们就认为是一个云原生架构。</p><p>&nbsp;</p><p>在做架构演进和变化的过程中，为什么采用云原生架构？云的本质是弹性，每个公司都有低峰和高峰，怎么更好地利用云的弹性、让自己的资源成本和研发效率得到进一步提升才是本质问题。云原生架构比如微服务，解决的核心问题是研发效率问题，因为业务规模上去，复杂度提升，所以需要微服务这样解耦的方式去解决研发效率问题。容器解决的是运维效率，它可以让运维效率得到空前释放，使运维从体力活变成了技术活。</p><p>&nbsp;</p><p>容器和微服务搭配使用的原因在于：第一，一个巨大的单体应用没有调度空间，只有把资源打碎、拆分之后，才可以充分使用资源池，即业务拆分合理之后，能够让开发者更好地调度、提高资金利用率，这是微服务对容器的一个好处；第二，使用微服务后，运维可能会从早期的1人运维变成10人运维，成本会上升。而容器能帮助微服务解决运维的问题，让每个开发有工具自己写代码自己运维，把整个生命周期管理起来。因此，容器帮助微服务解决了最核心的运维痛点。</p><p>&nbsp;</p><p>总的来说，容器和微服务做搭配，一个解决运维效率，一个解决研发效率。容器帮助微服务解决了最大的运维痛点；微服务把资源打碎，让容器充分地进行资源调度，提高整个资源利用率，所以它们是相辅相成的技术。</p><p>&nbsp;</p><p>社区：云原生网关很热，能展开聊下选型么？</p><p>&nbsp;</p><p>彦林：传统的网关在云原生时代确实遇到了一些挑战，这些挑战在于传统的网关包括最早的单体架构，在不用容器的时候，它的调度和发布都不频繁，因此发布过程中有一些流量的损失问题，但也不大；老的业务，不是端到端的业务、视频的业务，对稳定性要求也不是特别高。</p><p>&nbsp;</p><p>但随着数字化深入，云原生技术的采用就会引发一些问题。第一，对整个连接的稳定性、规则热更新有实时的要求，对网络稳定性的要求会更高。第二，云原生背后隐藏了一个标准化的事情。在云原生时代，未来的网关的API标准到底是什么？其实K8S通过 Ingress 的API定义了网关的标准，这就解决了技术选型的一个痛点。第三，多语言的扩展性。传统的网关在语言扩展性以及热更新上有很大区别，所以面对未来的云原生网关，必须解决掉这些问题。</p><p>&nbsp;</p><p>我们认为云原生网关可能是代表下一代网关的技术，不仅阿里巴巴开源Higress进入这个领域，CNCF、APISIX等等都在加速这个过程的发生，如雨后春笋般地进入云原生网关领域。大家也意识到今天在微服务里，网关是非常重要的角色。云原生网关已经形成了一个技术热点，相信在2023年会得到高速发展。</p><p>&nbsp;</p><p>社区：IaaS、PaaS和SaaS的商业模式哪个更好？</p><p>&nbsp;</p><p>彦林：当前来看，IaaS是技术门槛最高、投入产出比最高模式，需要规模化；PaaS 是技术门槛居中、投入产出比中等模式，需要可复制、解决服务效率问题； SaaS目前核心是看业务领域创新，如果能搞出钉钉类似的SaaS平台，价值是巨大的。未来机会在SaaS。&nbsp;</p><p>&nbsp;</p><p></p><h4>“降本增效”对架构有影响吗？</h4><p></p><p>&nbsp;</p><p>主持人：今年各大厂奉行的宗旨是降本增效，这种内部政策导向的变化会对企业在架构选择上产生什么影响吗？</p><p>&nbsp;</p><p>彦林：其实有影响，包括正向和负向的。如果一个企业真的运营不下去了就不会再为未来投资，如果要投资未来，技术架构就要演进，公司基本上都是要降本增效。采用云原生架构之后，复杂性略有上升，但是多家数据也表明成本至少下降30%。因为容器解决了成本效率、运维效率的问题，微服务解决了研发效率问题。</p><p>&nbsp;</p><p>但是最近我在想一个事情，云不断地把算力成本降下来了，但是人力成本却一直在提升。很多人可能在关心资源成本，但其实大部分公司现在应该更关心研发效率、研发成本，因为人力成本在不断提升，算力成本在不断下降，杠杆的拐点已经到来了，这就是为什么越来越多的人采用微服务的原因。首先，云原生架构能降本，这是一个事实；第二，提升人的效率其实也就是降低人力成本。</p><p>&nbsp;</p><p>主持人：云原生虽然降低了成本，但是却提高了复杂度，我们应该怎么去平衡？</p><p>&nbsp;</p><p>彦林：这其实很简单。我们要相信后浪能推倒前浪，现在的新人很多都对云原生有了解，一些培训班也在基于云未来做软件开发，新人的学习能力和知识储备都是够的。而对于我们这些老程序员来说，不跟上时代确实会有压力。技术虽然有门槛，但是通过2-3个月的学习，突破技术门槛和拐点之后，就能柳暗花明，充分利用工具的优势。</p><p>&nbsp;</p><p>当然，比如在组织做一些变革和技术架构升级时，一定会有很多人阻碍你，因为大家都喜欢不变。但是不变不能带来任何变化，为了做降本增效、技术架构先进性就必须要变，而在变的过程中自然有一些人会感到不适，但这都是短暂的，当你迈过拐点、享受到红利之后，就自然而然地会加入到推动技术浪潮的过程中。</p><p>&nbsp;</p><p>社区：性能上升了，对于复杂业务，Go相比Java开发维护效率会下降吗？</p><p>&nbsp;</p><p>彦林：会有一些代价，Go偏系统一些,Java偏业务一些。根据不同分层选择合适的。</p><p>&nbsp;</p><p></p><h4>架构下一年发展趋势</h4><p></p><p>&nbsp;</p><p>主持人：下一年架构领域可能会有什么趋势？</p><p>&nbsp;</p><p>彦林：在微服务领域也会发生很大的变化。比如大家可能觉得微服务很先进，云原生现在虽然讲得很火，一些掌握先进技术的大公司、掌握话语权的人在使用，但今年全世界的采用率可能也就5%左右，普及度远远不够，这是一个现状。</p><p>&nbsp;</p><p>标准化上，我们可以看到云从IaaS到PaaS，再到容器（当时定义为CaaS Container as a Service）、微服务都在做这件事。海外也有一些公司比如Google，也想通过服务网格去定义微服务的标准，但目前大家得到的一致结论是，它不是未来的标准，未来微服务的标准还在定义的过程中。</p><p>&nbsp;</p><p>整个行业在一起定义下一代的微服务体系。相信在2023年，下一代微服务的雏形和标准化会慢慢开始呈现。我认为2023年不仅是Serverless的元年，也可能是下一代微服务到来的前夕。</p><p>&nbsp;</p><p>另外说到云原生网关，其实云原生网关是阿里巴巴在2022年提出的，也快速得到了行业上下游的响应，因为相对于传统的流量网关、微服务网关、API网关，云原生网关定义了一个新的领域，是一个新的、云时代定义的下代网关雏形。</p><p>&nbsp;</p><p>其实阿里在2018年就有了云原生网关的雏形，我们经过3年的打磨才有的一个雏形。阿里做网关做了十几年，云原生网关领域也做了3、4年，基于之前的积累，我们才去尝试定义云原生网关领域，帮助传统企业在云原生时代做架构的演进，也帮助现在上微服务及云原生架构的客户更好地享受云原生的红利。我相信在微服务领域，统一控制面、标准化和云原生网关会得到空前的发展。</p><p>&nbsp;</p><p>另外，Serverless目前是阿里云的战略级项目，今天它的标杆和可复制的场景已经非常大了。所以，事件驱动加上Serverless的架构，会在未来一年得到非常好的发展。</p><p>&nbsp;</p><p>编程语言上，目前来看Go语言真的挺有希望。我们拜访很多大客户，Golang CPU的利用率能比企业Java高一倍，这个数字还是比较可观的。Go语言作为微服务或者云原生的一个主导语言，未来会得到很好的发展。</p><p>&nbsp;</p><p>社区：微服务和Serverless会有冲突吗？</p><p>&nbsp;</p><p>彦林：单体应用、微服务和Serverless其实不是互斥关系，它们都有各自的场景。对于微服务，单体应用是相对通用的一个技术架构，目前得到了行业的广泛认识，只是说有一个拐点决定了哪个时候采用它最好。Serverless是一个架构选型，它是一个新技术，有它的适用场景。比如偏前端、简单一点的比如小程序，偏计算性的任务适合跑Serverless；对一些大型的比如阿里巴巴大型交易系统Serverless是不适用的。所以这些技术有各自的适用场景，存在互补关系，而不是互斥关系。</p><p>&nbsp;</p><p></p><h2>职业成长</h2><p></p><p>&nbsp;</p><p>主持人：架构师这个职业具体是做什么的？</p><p>&nbsp;</p><p>彦林：在互联网中，虽然我们也叫技术专家，但实际上是架构师。举例来说，有人盖房、有人设计图纸，架构师是设计图纸的，对于一家网站来说是设计网站骨骼架构的。做架构师要有设计架构的能力、画图的能力，比其他所有技术实践的人要先行一步。</p><p>&nbsp;</p><p>主持人：有观点是架构师关注技术的广度比深度更重要，您如何看待这种说法？</p><p>&nbsp;</p><p>彦林：从整个学习习惯或规律上来看，一般都是先有深度再有广度。只要深入地把一个技术、一个语言、一个架构吃透，做其他的很多事情都会触类旁通。如果做任何事情都蜻蜓点水，就很难把一个事情做深。我建议工作的前三年一定要把技术的基础先打牢，这对架构师的成长会比较好。在早期可能80%是深度、20%是广度，随着技术成长足够了，这个比例再不断去调整。另外，对技术的热情也一定要有。</p><p>&nbsp;</p><p>主持人：架构师是一个长期主义的事情，不可能在1-2年就完成一个蜕变。</p><p>&nbsp;</p><p>彦林：是的。架构师是站在开发、产品、运营、技术等等最前面的人，对人的综合素质要求比较高，一般在阿里内部架构师的是点线面体的发展规律。</p><p>&nbsp;</p><p>第一，最早进入这个领域之时，最基本的要求先是“见问题解问题”，掌握一门好的语言，能修复Bug，但是到后面大家的发展方向、成长速度会不一样。</p><p>&nbsp;</p><p>第二，从点到线。这对开发的抽象能力是一种考验。当每天面对很多问题的时候，能不能把问题抽象成需求，横向拉通所有问题做一层抽象？</p><p>&nbsp;</p><p>第三，从线到面。比如把所有的需求聚集成了10个需求，要再从整个产品角度，把需求砍下4-5个，要知道做什么不做什么，有产品视角。</p><p>&nbsp;</p><p>第四，从面到体。当技术问题解决完之后，要考虑哪个投入产出比是比较高的，怎么拉通研发团队的前端、后端、产品、技术、运营，做一个很好的技术排期，最快拿到技术结果。这里就涉及到人的协同与沟通，但并不是说沟通能力好就能当架构师，还要懂得画图纸。其实还是要以产品为核心去和上下游沟通，因为用技术语言无法和运营、产品对话，也无法和客户去对话，至少要能抽象到产品，用产品的语言才能和客户对话。</p><p>&nbsp;</p><p>走到“体”这一步后，解决技术、产品、协同以及人等问题的能力基本上会得到一个全面的提升，至少需要5年的积累。所以大家不要急，一步一个脚印往前走，只要你有这样的技术情怀和追求，一定可以搞定。</p><p>&nbsp;</p><p>我认为有技术情怀的人才能当架构师，因为我发现很多人随着工作时间增多，慢慢地淡化技术变成了管理者，变成了PM，这就会有问题。因为如果你画的图纸不合理，最主营的技术业务不行，就会把所有的人拖下水，这就很危险。</p><p>&nbsp;</p><p>社区：架构方面，质量工程师能做什么?如何搭建好IT系统的业务架构?</p><p>&nbsp;</p><p>彦林：一般只有大厂有质量工程师角色，核心协同开发、测试、安全做好产品或者版本质量，宣传质量文化。</p><p>&nbsp;</p><p>社区：为什么绝大多数架构师都是后端？</p><p>&nbsp;</p><p>彦林：因为后端技术架构更复杂，能更全局的技术架构。</p><p>&nbsp;</p><p>社区：一定要很强的编码能力之后才能当架构师吗？</p><p>&nbsp;</p><p>彦林：不一定很强， 但是需要有一定的技术积累，不然比较难与程序员对话。</p><p>&nbsp;</p><p>社区：架构师平时怎么积累相关领域最前瞻性的一些技术？</p><p>&nbsp;</p><p>彦林：积累深度可以看一些paper、专利行业的动向，这在子领域里会有很多上下游的竞对、海外竞对的分析；积累广度可以看InfoQ以及海外架构师等最顶级的技术媒体信息，也可以看大厂分享的公众号，因为大厂有很多场景，并会根据它的场景做很多技术分享。</p><p>&nbsp;</p><p>之后大家也可以去逛一逛线下的技术Meetup以及行业的论坛、分享会等等，参与开源共建，相当于跟全世界一流的工程师一起工作。在和别人沟通的过程中，也能了解到好的技术以及别人在思考哪些事情，这也是学习技术先进性、前瞻性的一个很好的模式。在参加各种论坛、与开发者相互碰撞的过程中，可以很好地帮助你进行架构规划。比如和大厂的人沟通，你可以了解他们怎么一步步走过来的，还可以根据自己公司的发展情况一步步向前演进。如果你已经在大厂，就可以深入想一些比如如何代表中国的技术，在今天的开源、技术影响力、先进性工具上，给世界做一些贡献，打造一些世界性的产品等问题。</p><p>&nbsp;</p><p>主持人：如何理解Serverless、低代码等对架构的影响，它们会降低对架构师的要求吗？</p><p>&nbsp;</p><p>彦林：我认为是不会的。现在有10种技术选型，最早大家写代码的时候有20种设计模式，你只有充分掌握哪个工具适合哪种场景，才能画出最好的图纸、做出最适合的架构，只不过早期没有这些技术和工具时，做架构需要更多的思考。而今天在市面上有很多主流选择，在选择过程中，如何根据自己的业务选择最好的架构和技术，这对架构师是一个考验。</p><p>&nbsp;</p><p>另外，很多人做技术架构师、业务架构师，要对业务很熟悉。微服务的主要挑战不是技术有多难，而是你的业务拆分是否合理。很多人做了微服务之后拆分不合理，就会导致代价变大。所以，对领域模型要有更好地了解，有架构师底蕴，理解业务模型、技术模型，这样的人才能做好一个架构师。</p><p>&nbsp;</p><p>如果你对本文感兴趣，欢迎在文末留言，或加入 <a href=\"https://xie.infoq.cn/\">InfoQ 写作平台话题讨论</a>\"。后续，迷你书、专题将集合发布于 InfoQ 官网，登录<a href=\"https://www.infoq.cn/\">InfoQ 官网</a>\"注册并将 InfoQ 添加进收藏夹，精彩不错过。更多内容可<a href=\"https://www.infoq.cn/theme/168\">点击查看系列专题文章</a>\"。</p><p>&nbsp;</p>",
    "publish_time": "2023-01-18 14:50:06",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "微软首席技术官Kevin Scott：2023年将是AI有史以来最激动人心的一年",
    "url": "https://www.infoq.cn/article/9wzrGiMTl8XClRgSfL9A",
    "summary": "<p>如今，由大型语言模型驱动的人工智能系统正在改变人们的工作和创作方式，从为软件开发人员生成代码行，到为图形设计师绘制草图，都有 AI 的参与。</p><p>&nbsp;</p><p>微软首席技术官 Kevin Scott 预计，从帮助应对气候变化和儿童教育等全球挑战，到医疗保健、法律、材料科学和科幻小说等领域的革新，这些人工智能系统将会在复杂度和规模上继续增长。</p><p>&nbsp;</p><p>近日，微软官博发布了 Kevin Scott 关于人工智能如何影响知识工作者以及未来人工智能发展的看法。以下为主要内容。</p><p></p><h4>在人工智能领域，2022年最重要的进步是什么？</h4><p></p><p>&nbsp;</p><p>Kevin Scott：当进入 2022 年时，我想，在未来的一年里，几乎每个人工智能领域的人们都会看到一些让人难忘的东西。现在，我们已经度过了这一年，但就算抱着这么高的期待，回首这一年，看看从左到右我们所见的人工智能领域所带来的巨大变革，确实让人有些激动。研究人员和其他人为推进最先进的技术所做的事情，还是远远超出了几年前我们认为可能的事情。几乎所有这一切，都是拜大型人工智能模型令人难以置信的快速发展所赐。</p><p>&nbsp;</p><p>分享下2022年我印象最深的三件事：</p><p>&nbsp;</p><p>第一件事是 <a href=\"https://www.infoq.cn/article/93kD4l5m0pye7k5CrKRT\">GitHub Copilot</a>\" 的发布，这是一个基于语言模型的大型系统，能够将自然语言提示转化为代码，并对开发人员的生产力产生了巨大的积极影响。它使编程面向的人群更为广泛，这是我们从未有过的，这很了不起，因为未来在很大程度上取决于我们编写软件的能力。</p><p>&nbsp;</p><p>第二件事是这些生成式的图像模型，如 <a href=\"https://www.infoq.cn/article/fQLOmK09dZIErQOQrDwD\">DALL·E 2</a>\"，已经变得非常流行，并且更易于获取。素描和绘画以及掌握平面设计、插图和艺术的所有工具需要相当高的技能。 像 DALL·E2 这样的人工智能系统并不能把普通人变成职业艺术家，但是却为人们带来了前所未有的视觉词汇——一种新的超能力，他们从未想过有朝一日会拥有。</p><p>&nbsp;</p><p>第三件事是，人工智能模型正在变得越来越强大，并为它们正在用来解决的问题提供更多实质性的收益。我认为，2022年在蛋白质折叠方面的工作，在整个技术行业都非常出色，包括我们与华盛顿大学（University of Washington）大卫·贝克（David Baker）实验室的合作，与 RoseTTAFold 的蛋白质设计研究所的合作，以及通过一系列先进的人工智能来帮助它们做转型的事情。</p><p>&nbsp;</p><p>这真是太令人兴奋了。凡是能促进科学与医学的事情，都会造福于整个世界，因为这些正是我们面临的一些最大、最棘手的问题所在。</p><p>&nbsp;</p><p>这是令人印象深刻的一年。我想，2023年会更好。</p><p></p><h4>人工智能技术在2023年及以后，会显著影响哪些领域？</h4><p></p><p>&nbsp;</p><p>Kevin Scott：我认为，2023 年将会是人工智能界有史以来最激动人心的一年。我是真心认为 2022 年是我们经历过的最激动人心的一年之后说出这番话的。创新的步伐不断加快。</p><p>&nbsp;</p><p>我已经谈过 GitHub Copilot 了，这真是太棒了。但对于大型人工智能模型未来所能做的事情来说，这只是冰山一角——把同样的想法推广到各种不同的场景中，看它们如何协助编码以外的其他类型的智力劳动。整个知识经济将会让我们了解到，人工智能是怎样在工作中解决重复性的问题，让它更快乐，更充实。它可以应用到几乎所有的事情上，比如设计新的分子来制造药物、用 3D 模型制造“配方”，或者只是编写和编辑。</p><p>&nbsp;</p><p>例如，我一直在鼓捣一个实验系统，这个系统是我用 <a href=\"https://www.infoq.cn/article/9cb21vxX8tfDP3Kk6yqw\">GPT-3</a>\" 为自己开发的，目的是帮助我写一部科幻小说，这是我从十几岁起就想做的事情。我的笔记本上写满了我为理论书籍创作的概要，描述了这些书的内容和所发生的宇宙。有了这个实验工具，我已经能够打破僵局。当我用传统的方式写一本书时，如果我在一天内写了 2000 字，我就会对自己感到非常满足。有了这个工具，我曾有过一天能写 6000 字的时候，这对我来说感觉很棒。这个过程感觉比我以前做得更有活力。</p><p>&nbsp;</p><p>这就是“万事都有副驾驶”的梦想——无论你从事什么样的认知工作，你身边都会有一位副驾驶，不但能帮你做很多事情，还能以新的、令人兴奋的方式提高你的创造力。</p><p></p><h4>工作效率的提高显然提高了您的满意度，为什么这些工具能给工作带来更多的乐趣？</h4><p></p><p>&nbsp;</p><p>Kevin Scott：我们所有人都是利用工具来完成工作的。我们当中有些人非常享受使用这些工具，并且弄清楚了怎样用高效的方法来部署它们。我们进行了一次调查，调查结果显示，使用无代码或低代码工具导致用户对工作满意度、整体工作量和士气的积极影响超过 80%。特别是对于那些处于相对早期阶段的工具而言，这是一个巨大的优势。</p><p>&nbsp;</p><p>对于一些员工来说，提高了工作效率，就像有一双更好的跑鞋去参加比赛或马拉松。这正是我们从开发者使用 Copilot 的经历中所看到的。有报告显示，Copilot 可以帮助他们在以往枯燥和重复的任务中保持头脑清醒。而且，如果人工智能工具可以帮助减少工作中的繁重劳动，比如过于重复的、令人厌恶的工作，或者那些妨碍他们去做他们真正喜欢的事情时，那么，满意度就会自然而然地提升。</p><p>&nbsp;</p><p>就个人而言，这些工具让我比以前更长时间地处于流畅状态。创意流的敌人是分心和被卡住。我到了一个这样的境地：不知道如何解决下一个问题，或者下一个问题。比如，“我得去看看这个东西。我得从我正在做的事情中切换出来，去解决这个子问题。”这些工具越来越多地为我解决这些子问题，这样我就能保持流畅的状态。</p><p></p><h4>除了 GitHub Copilot 和 DALL·E 2，人工智能正在以其他方式出现在微软的产品和服务中。下一代人工智能是如何改进目前的产品，如 Teams 和 Word？</h4><p></p><p>&nbsp;</p><p>Kevin Scott：这是人工智能不为人知的大故事。迄今为止，人工智能的大部分好处都分布在 1000 种不同的东西上，你也许还没有充分认识到，你所得到的产品体验中，有多少是从机器学习系统中得到的。</p><p>&nbsp;</p><p>例如，我们坐在这里，在这个 Teams 的视频会议上，在系统中，所有这些参数是由机器学习算法学习的。语音系统采用了抖动缓冲器，以保证通讯的顺畅。你身后屏幕上的模糊效果，就是机器学习算法在工作。有十几个机器学习系统使这种体验对我们两个人来说更令人愉快。整个微软都是如此。</p><p>&nbsp;</p><p>我们已经从几个地方的机器学习发展到遍布不同产品的 1000 种机器学习，分布在不同的产品中，从你的 Outlook 电子邮件客户端如何工作，你在 Word 中的预测文本，你的 Bing 搜索体验，到 Xbox Cloud Gaming 和 LinkedIn 中的 feed。到处都有人工智能的影子，使这些产品变得更好。</p><p>&nbsp;</p><p>在过去两年中发生的一个重大变化是，以前的每个产品都需要一个专门的模型来处理。现在你有一个单一的模型，可以在很多地方使用，因为它们有广泛的用途。能够投资于这些随着规模扩大而变得更加强大的模型，然后在模型之上构建所有的东西，同时从您正在进行的改进中受益——这是非常了不起的。</p><p></p><h4>微软的人工智能研究和开发通过诸如 AI4Science 和 AI for Good 等计划继续进行。关于人工智能的这个领域，您最感兴趣的是什么？</h4><p></p><p></p><p>Kevin Scott：我们现在社会所面临的最具挑战性的问题是在科学领域。比如，你如何治愈这些棘手复杂的疾病？你如何为下一个大流行病做准备？你如何为老龄化人口提供负担得起的高质量医疗保健？你如何帮助大规模教育更多的孩子未来需要的技能？你如何开发能够扭转碳排放到大气中的一些负面影响的技术？我们正在探索如何将人工智能的一些令人兴奋的发展用于这些问题。</p><p>&nbsp;</p><p>这些基础科学应用中的模型具有与大型语言模型相同的扩展特性。你建立一个模型，让它进入某种自监督的模式，它从模拟中学习，或者从自己观察特定领域的能力中学习，然后你得到的模型让你大大改变一个应用的性能——无论你是做计算流体动力学模拟，还是做药物设计的分子动力学。</p><p>&nbsp;</p><p>这其中蕴藏着巨大的机遇。这意味着更好的药物，意味着我们也许可以找到我们还没有的催化剂来解决我们的碳排放问题，意味着全面加快科学家和其他有大想法的人如何努力解决社会的最大挑战。</p><p></p><h4>计算技术和硬件的突破是如何促进人工智能的进步的？</h4><p></p><p>&nbsp;</p><p>Kevin Scott：我们最近在人工智能领域看到的几乎所有进展的根本原因是，规模的重要性已被证明是多么关键。事实证明，用以更多数据和更多计算能力训练的模型具有更丰富和更通用的功能集。如果我们想继续推动这一进步——需要明确的是，现在我们看不到扩大规模的好处——我们需要尽可能地优化和扩大我们的计算能力。</p><p>&nbsp;</p><p>两年前，我们发布了第一台 Azure 人工智能超级计算机，在2022年的 Build 开发者大会上，我分享了我们现在拥有的多个超级计算系统，我们非常确信这些系统是当今世界上最大和最强大的人工智能超级计算机。我们和 OpenAI 使用这些基础设施来训练我们几乎所有最先进的大型模型，无论是微软的 Turing、Z-code 和 Florence 模型，还是 OpenAI 的 GPT、DALL·E 和 Codex 模型。而我们最近刚刚宣布与英伟达合作，建立一个由 Azure 基础设施与英伟达 GPU 相结合的超级计算机。</p><p>&nbsp;</p><p>其中一些进展是通过使用越来越大的 GPU 集群来实现蛮力计算规模。但也许更大的突破是软件层，它优化了模型和数据在这些巨大系统中的分布方式，既可以训练模型，也可以为客户提供服务。如果我们要把这些大型模型作为人们可以创造的平台，它们就不能只被世界上极少数拥有足够资源来建造巨型超级计算机的科技公司所利用。</p><p>&nbsp;</p><p>因此，我们对 DeepSpeed 等软件进行了大量投资，以提高训练效率，并对 ONNX Runtime 进行推理。它们对成本和延迟进行了优化，总体上帮助我们使更大的人工智能模型对人们来说更容易获得，更有价值。我为我们在这些技术上的团队感到非常自豪，因为微软在这方面确实处于行业领先地位，而且我们将所有这些技术开源，以便其他人能够继续改进。</p><p></p><h4>人们一直担心人工智能将影响就业，而这些进展正是在这种担忧的背景下展开的。您是如何看待人工智能和就业问题的？</h4><p></p><p>&nbsp;</p><p>Kevin Scott：我们所处的时代非常复杂，而且具有历史意义的宏观经济变化，如果我们放眼未来 5 到 10 年，甚至仅仅为了实现整个世界的净中性平衡，我们将需要新的生产力形式，使我们所有人能够继续享受进步。我们希望将这些人工智能工具建设成很多人可以用来建立业务和解决问题的平台。我们相信，这些平台使更多的人能够民主地使用人工智能。有了它们，你将解决更多的问题，你将有一个更加多样化的团队能够参与技术的创造。</p><p>&nbsp;</p><p>在以前的人工智能实例中，你需要大量的专业知识才能开始工作。现在你可以调用 Azure Cognitive Services，可以调用 Azure OpenAI Service，并在这些东西的基础上构建复杂的产品，而不必如此精通人工智能，以至于你必须能够从头开始训练自己的大型模型。</p><p>&nbsp;</p><p>随着所有这些巨大的人工智能系统继续增长和发展，我相信，我们能够预见到，这些进展将从根本上改变工作的性质，在一些地方比其他地方更多，在某些情况下，创造出一大批以前不存在的新工作。你可以回顾一下，看到同样的事情发生在历史上各种著名的技术范式转变的旁边：电话、汽车、互联网。我认为，就像这些例子一样，我们将需要新的方式来思考工作，以新的方式来思考技能，并超级专注于确保我们有足够的人才，并为真正的关键工作提供培训。</p><p></p><h4>与人工智能技术相关的另一个担忧是误用和滥用的可能性。微软正在采取哪些具体措施来确保其人工智能工具和服务的开发和使用是负责任的？</h4><p></p><p>&nbsp;</p><p>Kevin Scott：我们对这件事非常重视。我们的人工智能系统经历了一个负责任的人工智能过程，我们将会继续改进这一过程。我们与一个多学科的专家团队一起仔细检查我们正在做的事情，试图确保我们了解所有可能发生的潜在有害的事情，并尽可能多地减轻它们。</p><p>&nbsp;</p><p>这方面的例子包括完善用于训练模型的数据集，部署过滤器以限制有害内容的产生，整合敏感话题的查询拦截等技术，这有助于防止不良行为者的滥用；或应用可以返回更有用、更多样化的响应和结果的技术。我们有一个人工智能系统的计划，可以在启动后尽快检测和缓解任何我们没有预料到的危害。</p><p>&nbsp;</p><p>另一个非常重要的保障措施是有意识地迭代部署。我们所做的大部分工作都是关于具有广泛能力的模型。我们将它们托管在我们的云中，并通过 API 或我们的产品使它们可以访问。对于 API，任何开发者都可以获得访问权限，但他们必须遵守服务条款才能使用它，如果他们违反了服务条款，他们的访问权限就会被剥夺。</p><p>&nbsp;</p><p>而对于其他产品，我们可能会从有限的预览开始，选择一些有明确用例的客户。与这些早期客户的合作将帮助我们确保负责任的人工智能保障措施在实践中发挥作用，以便我们能够更广泛地扩大采用。</p><p>&nbsp;</p><p>我们坚信，安全和责任都很重要。希望我们能给整个行业带来一些激励。为此，我们应用于开发一些解决方案的所有资源和专业知识正在通过我们的负责任的人工智能标准和原则与其他更广泛的社区分享。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://blogs.microsoft.com/ai/a-conversation-with-kevin-scott-whats-next-in-ai/\">https://blogs.microsoft.com/ai/a-conversation-with-kevin-scott-whats-next-in-ai/</a>\"</p>",
    "publish_time": "2023-01-18 14:59:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]