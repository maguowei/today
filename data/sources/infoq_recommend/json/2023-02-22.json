[
  {
    "title": "Puppet 2023 DevOps现状报告：平台工程有助于提升开发效率",
    "url": "https://www.infoq.cn/article/q6JwiNRJIZ8C0h1WCHVQ",
    "summary": "<p><a href=\"https://www.puppet.com/\">Puppet</a>\"发布了《<a href=\"https://www.puppet.com/resources/state-of-platform-engineering\">2023年开发运维状况报告</a>\"》，重点关注平台工程。报告发现，拥有平台工程团队的组织在开发速度、系统可靠性、生产力和工作流标准方面都有所改善。组织仍然需要与平台团队一起努力采用产品思维，特别是涉及到产品管理支持时。</p><p>&nbsp;</p><p>Puppet领域首席技术官<a href=\"https://twitter.com/nigelkersten\">Nigel Kersten</a>\"归纳了报告的主要结论：</p><p></p><p></p><blockquote>研究结果表明，平台工程可以为整个组织带来意义深远的好处，帮助企业DevOps实施走向成功。在公司加强平台团队招聘的过程中，他们必须优先考虑产品管理技能，而不仅仅是核心工程。</blockquote><p></p><p>&nbsp;</p><p>关注产品管理是有效实施平台工程的核心宗旨。产品管理有助于确保团队专注于正确的问题，并收集和利用好来自用户的反馈。<a href=\"https://www.linkedin.com/in/bwvoss/\">Ben Voss</a>\"是Twilio负责开发体验的高级产品经理。在最近的一篇<a href=\"https://platformengineering.substack.com/p/what-problems-indicate-the-need-of\">文章</a>\"中，他谈到了良好的产品管理的重要性：</p><p></p><p></p><blockquote>随着平台组织规模的扩大，团队通常仍然保有一定程度的自主权和独立性。然而，由于缺乏有效的产品管理，许多平台团队都是针对具体的问题进行优化，与用户的平台级产品体验脱节。</blockquote><p></p><p>&nbsp;</p><p>平台缺少产品管理方面的投资并不是什么新鲜事。Ambassador Labs开发人员关系主管Daniel Bryant<a href=\"https://twitter.com/danielbryantuk/status/1535992513219072001\">预测</a>\"，“很多人都没有意识到一个好的项目经理所带来的好处，而只是不断地构建”。报告发现，平台团队在项目管理方面的投入更多，<a href=\"https://www.infoq.com/articles/cognitive-load-platform-engineering/\">在接受InfoQ采访时</a>\"，Kersten对此提出了警告：</p><p></p><p></p><blockquote>我坚信，大多数企业失败的原因是，他们试图通过项目管理而不是产品管理来实施这些计划。</blockquote><p></p><p>&nbsp;</p><p>该报告总结了产品经理的价值，并将其描述为“培养产品思维、推广平台和有效传播信息的关键”。报告总结说，“明确关注团队互动、开发体验、反馈循环和产品管理的组织将超越那些不这样做的组织。”</p><p>&nbsp;</p><p>然而，该报告发现，在未来12个月，平台团队的首要任务与产品管理技能集高度一致。这包括提高对平台功能的认识，为团队的角色设定切实的期望，以及更好地与行业趋势保持一致。48%的受访者表示，高管层并不理解平台工程可以带来的价值，这表明对平台工程的认识还比较缺乏。</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/58/58446226ed058fbff3794f844d25695a.png\" /></p><p></p><p>平台团队在未来12个月的优先事项（图片来源：<a href=\"https://www.puppet.com/resources/state-of-platform-engineering\">Puppet</a>\"）</p><p>&nbsp;</p><p>该报告还发现，受访者希望他们的平台更加集中化，而52%的受访者表示有加强集中化的趋势。在那些已经拥有中心化平台的受访者中，36%的人认为更大程度的中心化会带来更好的结果。有趣的是，平台用户和那些构建和运营它的人之间没有意见分歧。</p><p>&nbsp;</p><p>受访者强烈表示，平台提高了开发速度，68%的受访者表示平台团队产生了直接影响。Puppet研究总监<a href=\"https://www.linkedin.com/in/ronan-keenan-b0494056/\">Ronan Keenan</a>\"解释<a href=\"https://www.puppet.com/resources/state-of-platform-engineering\">说</a>\"：“在过去几年的DevOps研究中，出现了一个清晰的模式：DevOps实践越成熟的企业越倾向于使用平台团队。”</p><p>&nbsp;</p><p>有关2023年DevOps现状报告的更多详细信息，读者可以访问<a href=\"https://www.puppet.com/resources/state-of-platform-engineering\">Puppet网站</a>\"。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/01/state-devops-report-2023/\">https://www.infoq.com/news/2023/01/state-devops-report-2023/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/GaUyduw3FQ0dHXu9Druq\">DevOps 缺少定义，平台工程需要指导性路线图</a>\"</p><p><a href=\"https://xie.infoq.cn/article/d399dd155c22269df48004815\">DevOps 真死了？平台工程真有用？</a>\"</p><p><a href=\"https://www.infoq.cn/article/7porVp7qVF03BVc2tDd6\">DevOps 已死，平台工程才是未来</a>\"</p>",
    "publish_time": "2023-02-22 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "极客圆桌派：狂飙的 ChatGPT ｜InfoQ《极客有约》",
    "url": "https://www.infoq.cn/article/TXoCTL6MCpZWm2BKaesc",
    "summary": "<p>自去年 11 月底正式发布以来，OpenAI 最新的 AI 聊天机器人 ChatGPT 火出天际，成为现象级应用，在全网话题度狂飙。</p>\n<p>就连马斯克都在感叹，“很多人疯狂地陷入了 ChatGPT 循环中”，“ChatGPT 好得吓人，我们离强大到危险的人工智能不远了”。</p>\n<p>ChatGPT 就像是一个无所不知的虚拟体，它能回答各种问题，而且总能给到让人满意，甚至超过预期的答案。ChatGPT 的应用也频频出圈，它还能写代码、改 Bug、创建编程语言、构建虚拟机，甚至写毁灭人类计划书…ChatGPT 展示出的强大的能力和无限可能，让人们看到，通过 ChatGPT 这样的技术方案解决很多任务的潜力。</p>\n<p>以 ChatGPT 为代表的新一代聊天机器人开始广泛应用人工智能，这波浪潮有望重塑甚至取代传统互联网搜索引擎。ChatGPT 在解决各种问题上的能力超出很多人意料，因此很多用户都表示 ChatGPT 可以取代 Google 等搜索引擎和编程问答社区 Stack Overflow 等。</p>\n<p>不久前，达摩院基础视觉负责人赵德丽在接受 InfoQ 采访时表示，以前谷歌等搜索引擎做搜索和检索，只是找已经存在的信息，ChatGPT 的应用，实现了从信息的搜索到信息的创造这样一个范式的转变，从算法能力上看，它取得了一个质的飞跃。短期来看，ChatGPT 有望成为或者辅助像谷歌这种传统信息检索的强有力的工具；长期来看，它有望发展成为 AI 系统级的服务。</p>\n<p>自 ChatGPT 走红后，全球互联网大厂、创业公司纷纷加码布局，一场关于 ChatGPT 的军备竞赛已然拉开。</p>\n<p>搜索引擎大战迅速爆发。在国外，谷歌加急推出了 ChatGPT 的竞争对手—人工智能聊天机器人 Bard Bard；微软已经宣布推出了由 OpenAI 提供技术支持的最新版必 Bing 索引擎。在国内，百度将在 3 月推出类似 ChatGPT 的产品— 文心一言的消息早已传遍全网。除了百度，几家中国初创公司也在探索生成人工智能。</p>\n<p>ChatGPT 蹿红的速度，堪称前所未有。ChatGPT 上线仅仅几天，其用户就已经突破 100 万大关。2 月 1 日，瑞银发布研究报告称，ChatGPT 在 2022 年 11 月推出后，今年 1 月的月活跃用户估计已达 1 亿，成为历史上用户增长最快的消费应用。</p>\n<p>“在互联网领域发展 20 年来，我们想不出有哪个消费者互联网应用比它上升速度更快，”瑞银分析师在报告中写道。</p>\n<p>ChatGPT 出现对 AI 界来说，有着十分重要的意义。清华大学计算机科学与技术系长聘副教授黄民烈认为，“ChatGPT 宣示着无缝人机交互时代的来临。过去我们讲 conversation as a service （caas）还停留在纸面，但实际上今天，无论是开放域聊天，还是通用任务助理（ChatGPT）都在强烈地表明这一点”。</p>\n<p>ChatGPT 的出现，其实不亚于阿尔法狗曾经在人工智能界带来的影响力。可以看到，ChatGPT 正在引领新一波 AI 浪潮。</p>\n<p>让全网沸腾的 ChatGPT 到底有什么魔力？ChatGPT 具有哪些颠覆性的创新？其落地和商业化应用的前景几何？对于科技界来说，ChatGPT 的出现到底会带来哪些改变？ChatGPT 为什么是 OpenAI 最先做出来？爆红之下，有多少泡沫？</p>\n<p>我们试图找到这些问题的答案。于是，InfoQ 发起了一场《极客有约》特别栏目《极客圆桌派：狂飙的 ChatGPT》，我们邀请了多位 AI 领域的资深技术专家一起共同探讨 ChatGPT 的现在和未来。</p>\n<h2>直播核心议题：</h2>\n<ul>\n<li>人们会什么会觉得 ChatGPT 非常神奇？</li>\n<li>ChatGPT 特点讨论：哪些是创新？哪些是颠覆式创新？</li>\n<li>ChatGPT 的落地与商业化局限性Generative AI 和 ChatGPT 的关系</li>\n<li>ChatGPT 的军备竞赛还有入局机会吗？这场游戏该怎么玩？</li>\n<li>为什么不是先出现在中国？中国版 ChatGPT 还会远吗？</li>\n<li>ChatGPT 能颠覆搜索引擎吗？除此以外，还有哪些可能</li>\n<li>探讨机会：对行业 / 大公司 / 创业公司 / 对互联网科技从业者</li>\n</ul>\n<p><strong>圆桌主持&amp;嘉宾：</strong></p>\n<p>Mingke，MRS.ai 联合创始人兼CEO，组建面向未来的智能网络，《人工智障》系列作者。</p>\n<p><strong>圆桌嘉宾：</strong></p>\n<p>鲍捷博士，文因互联董事长，创始人。爱荷华州立大学（Iowa State University）博士，伦斯勒理工学院（RPI）博士后，麻省理工学院（MIT）分布式信息组（DIG）访问研究员。曾任三星美国研发中心研究员，曾任 W3C OWL(Web 本体语言) 工作组成员，参与撰写了 OWL2 知识图谱语言国际标准。现任 W3C（万维网联盟）顾问委员会委员、中国中文信息学会语言与知识计算专业委员会委员、中国人工智能学会心智计算专委会委员、金融知识图谱工作组主席、中文开放知识图谱联盟 (OpenKG) 发起人之一，国际 Data Intelligence 杂志编委。</p>\n<p>张晴晴，Magic Data 创始人 &amp; CEO。曾任中国科学院声学研究所副研究员，是对话式 AI 先行者和 Data-Centric MLOps 引领者。</p>\n<p>祝海林，Kyligence 技术合伙人 / 资深数据架构师、新一代开源编程语言 Byzer 的作者，拥有 13+ 年技术开发经验。一直专注于 Data + AI 融合方向，致力于帮助工程师们从根本上提高数据平台落地和 AI 工程化的效率。</p>",
    "publish_time": "2023-02-22 09:33:31",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "再见 Sidecar：eBPF 能抢过 Istio 服务网格的风头吗？",
    "url": "https://www.infoq.cn/article/stCMjmTuODmzZmGzaNUr",
    "summary": "<p></p><blockquote>从 Istio 服务网格的基础知识到它的好处，这篇文章涵盖了你需要知道的关于 Istio 服务网的一切，以及 eBPF 在其中的作用。</blockquote><p></p><p></p><p>Sidecar 的概念在容器和微服务的领域中非常流行，因此，人们很容易把 Sidecar 看作是云原生技术栈的一个自然的、健康的部分。</p><p></p><p>但是，如果你仔细想，你就会发现 Sidecar 并没有想象中的那么伟大。毕竟，它们被称为“Sidecar”，意思是说，你可以在摩托车上安装边车（就是 Sidecar 的字面含义），如果你想携带的东西摩托车本身无法携带的话。虽然 Sidecar 可以解决摩托车承载能力不足的问题，但是它们也会大幅拖慢摩托车的速度，并且使摩托车更难驾驶。典型的摩托车手都没有安装 Sidecar 是有原因的。</p><p></p><p>幸运的是，微服务应用也不再需要被 Sidecar 拖累了。多亏了 eBPF 这样的技术，我们才有可能在分布式应用中完成 Sidecar 曾经做过的事情，而不会有它们带来的弊端。</p><p></p><p>为了说明这个原因，我们先来看一下 Sidecar 以及像 Istio 这样的服务网格的作用，它们是云原生应用的一部分。接下来，我们将看看 eBPF 是怎样让 Istio 和传统的服务网格更加简单和高效的。</p><p></p><p></p><h2>什么是服务网格？</h2><p></p><p>服务网格是技术栈中的一层，它帮助连接、保护和监控分布式应用的各种组件。</p><p></p><p>如果你的应用程序是一个单体，你通常不会使用服务网格，也就是说，它是作为一个单一的进程运行，没有复杂的依赖关系，也没有进程之间的通信网格。但是，如果你转向使用微服务架构时，你就会面临着管理离散的微服务之间通信的挑战。你还需要确保微服务事务的安全性，还需要有一种有效的方式来收集每个微服务的可观察性数据。</p><p></p><p>如果你愿意，你可以通过在微服务本身的代码中插入指令来处理这些需求。但是这样做并不能使开发者满意，因为这就意味着他们要花很多时间去编写和维护每一个微服务中的定制代码来处理连接性、安全性和遥测。</p><p><img src=\"https://static001.geekbang.org/infoq/a7/a7e46785bbb7333cfed9a712cb3da818.webp\" /></p><p></p><p>服务网格通过提供管理服务的集中化手段来解决这个问题。从本质上讲，服务网格让开发者可以将很多管理微服务的连接性、安全性和可观察性所需的大部分工作外包给一个专门的基础设施层，而不是在微服务本身中处理这些任务。通过这种方式，服务网格就可以使微服务的管理更加简单、标准化。</p><p></p><p></p><h2>Sidecar 与服务网格</h2><p></p><p>当然，服务网格不可能神奇地与微服务进行对话或整合。它们需要一种连接它们的方法。从传统意义上讲，这意味着涉及所谓的“Sidecar 模式”。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e0/e0ce38c38ba9927e1cb91d0ecbf04ad0.webp\" /></p><p></p><p>在 Sidecar 模式下，你在主应用容器旁边部署一个特殊的容器，称为 Sidecar，主应用容器承载着每个微服务的业务逻辑。Sidecar 承载着一个服务网格代理，负责管理微服务。如果你在同一个 Pod 内运行 Sidecar 和主容器，Sidecar 容器可以与主容器集成，以执行你在服务网格中定义的任何治理规则。</p><p></p><p>从历史上看，Sidecar 模式对于管理作为容器部署并使用 Kubernetes 协调的分布式应用中的微服务有很大的意义。在没有更好的技术将服务网格连接到单个应用容器的情况下，在实际的微服务旁边部署 Sidecar 容器是将服务网格编织到微服务架构中的一种简单而直接的方式。</p><p></p><p></p><h2>为什么大家都喜欢 Istio</h2><p></p><p>现在有很多服务网格，比如 Linkerd 和 Traefik。但最流行的解决方案可能是 Istio，这是一种开源的服务网格，专门为以 Kubernetes 为中心的堆栈设计。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/80/803af0bb396ffa76e9dd02a6a98af9a4.webp\" /></p><p>Istio 通过提供两个主要组件来实现服务网格。</p><p></p><p>数据平面：依靠运行 Envoy 代理的 Sidecar 容器来与各个微服务对接。控制平面：它作为一个集中式进程运行，以提供服务发现、强制配置和安全流量。</p><p></p><p>Istio 的开源性质，以及它对 Kubernetes 的友好设计，使该工具成为迄今为止成千上万的云原生托管堆栈的核心部分。</p><p></p><p></p><h2>Istio 的黑暗面</h2><p></p><p>Istio 和其他依赖于 Sidecar 模式的服务网格解决了真正的问题，你当然不能责怪任何人使用它们——尤其是在没有真正的替代方案可用时。</p><p></p><p>但是，如果你要设计一个完美的解决方案来管理连接、保护和观察分布式应用的挑战，那么像 Istio 这样的服务网格就不可能了。Istio 和类似的网格存在两个关键问题：高资源消耗和缓慢的性能。</p><p></p><p></p><h2>资源开销</h2><p></p><p>在分布式托管环境中，每一个微服务旁边都要运行一个 Sidecar 容器，这使得你运行的容器总数翻倍。这意味着你的应用程序最终会消耗更多的资源。除了 Sidecar 容器本身消耗的资源外，编排器还必须花更多的精力来管理 Sidecar，而你在部署和更新 Sidecar 时也会消耗更多的网络带宽。</p><p></p><p>当你占用了运行 Sidecars 的资源时，你的实际应用可用的资源就会减少，这可能会在需求高峰期转化为较低的性能。它也可能造成更高的托管成本，因为你最终需要更多的节点（或更昂贵的节点，有更高的资源分配）来处理你的工作负载。</p><p></p><p></p><h2>性能和延时</h2><p></p><p>除了托管 Sidecar 的成本外，当网络流量流入和流出每个微服务时，Sidecar 容器还会将自己“插入”网络流量的中间，这一事实也会对性能产生拖累。在你的应用程序能够接收和响应请求之前，每个数据包都必须通过 Sidecar，这就增加了延迟，并可能对你的用户体验产生负面影响。</p><p></p><p></p><h2>从数据上看，Istio 的表现不佳</h2><p></p><p>如果你想知道 Sidecar 容器的性能开销是否真的可以忽略不计，让我们不妨看看 Istio 自己记录的关于性能的数据。</p><p></p><p>虽然性能开销会根据你对 Istio 的具体配置而有所不同（你使用的功能越多，开销就越大），但 Istio 说每个 Envoy 代理每 1000 个请求会消耗 0.35 vCPU 和 40MB 内存。</p><p></p><p>因此，如果你有 10 个微服务，并为每个微服务部署一个 Envoy Sidecar，你将需要额外的 3.5 个 vCPU 和 400 兆的内存来托管它们。这很容易转化为相当于一个额外的虚拟机实例，只是为了运行这些 Sidecar。（我们甚至不提控制平面，根据 Istio 的说法，它还需要 1 个 vCPU 和 1.5GB。）</p><p></p><p>还要注意的是，Istio 表示，每个代理容器平均会在第 90 个百分点的延迟上增加 2.65 毫秒。因此，只要你的响应需要通过一个 Sidecar，你就会减慢这个数字。诚然，2.65 毫秒不是很大，但在一个每一毫秒都很重要的世界里，它可能是破坏性的，特别是对于需要真正实时执行的应用程序。</p><p></p><p></p><h2>再见，Sidecar；你好，eBPF！</h2><p></p><p>以往，开发人员和 IT 团队都认为，Sidecar 容器的性能和延迟成本都是必要的。使用带有 Sidecar 模式的服务网格比不使用服务网格和不得不在每个微服务中进行管理要容易得多，因此，为了在服务网格中对微服务进行集中管理，它们愿意为托管支付更多的费用和 / 或接受性能上的影响。</p><p></p><p>然而，今天，一个更好的世界已经成为可能——因为 eBPF 可以在不需要处理内核模块或者修改内核源的情况下，就可以直接在 Linux 内核中运行超高效、超安全的动态代码。</p><p></p><p>对于需要服务网格的工程师来说，这意味着，使用 eBPF，传统上使用 Sidecar 容器实现的微服务治理可以通过 eBPF 程序在内核中处理。由于 eBPF 程序可以在 Kubernetes 集群中的每个（基于 Linux 的）节点上运行，它们可以从内核中直接管理微服务的连接性、安全性和可观察性，而不是作为单独的服务网格运行。</p><p></p><p>这种方法将解决与 Istio 等传统服务网格相关的几个挑战。</p><p></p><p>性能：由于 eBPF 程序消耗的资源极少，与使用 Sidecar 结构相比，它们将极大地减少运行服务网格的开销。简单性：一个基于 eBPF 的服务网格将消除部署和管理一套 Sidecar 容器的需要。可见性控制：通过直接在内核中运行，eBPF 程序在它们可以从容器中访问哪些数据以及它们可以对其进行哪些控制方面几乎拥有无限的范围。在这方面，基于 eBPF 的网格将比那些依赖 Sidecar 容器的网格更加强大。</p><p></p><p>eBPF 有许多用例，利用它来解决传统服务网格的缺点仍然是一个相对较新的想法。然而，开发人员正对这一战略投入越来越多的关注，Cilium 已经实施了这一战略。</p><p></p><p></p><h2>eBPF 的光明前景</h2><p></p><p>所以，如果你正在寻找另一个原因，为什么 eBPF 正在彻底改变开发者在分布式应用中跨越所有层的安全、可观察性和管理的方式，请将 eBPF 作为服务网格解决方案的潜力加入你的列表。除了更容易为观察目的收集丰富的数据，并在容器内和容器之间移动时保护数据，eBPF 可能会从 Istio 等服务网格中夺得桂冠，成为管理微服务之间互动的更简单、更有效、更少资源消耗的解决方案。</p><p></p><p>这并不是说 Istio 或其同类产品会完全消失。我们可以想象这样的一个世界：Istio 控制平面仍然存在，但数据平面由 eBPF 程序驱动，而不是在 Sidecar 容器中运行的 Envoy 代理。Istio 已经为服务发现和配置管理开发了很多强大的技术，这些功能在基于 eBPF 的服务网格中仍然适用。</p><p></p><p>但我们预计，在未来几年里，Sidecar 容器会显得越来越过时 -- 就像摩托车上的边车一样。那些优先考虑速度和效率的人将转向 eBPF，作为摆脱 Sidecar 限制的一种手段。</p><p></p><h5>作者简介：</h5><p></p><p>Shahar Azulay，Groundcover CEO。</p><p></p><h5>原文链接：</h5><p></p><p><a href=\"https://www.groundcover.com/blog/istio-service-mesh\">https://www.groundcover.com/blog/istio-service-mesh</a>\"</p><p></p><h5>相关阅读：</h5><p></p><p><a href=\"https://xie.infoq.cn/article/23e64b0bab4301d12453a5673\">降本增效: 蚂蚁在 Sidecarless 的探索和实践</a>\"</p><p><a href=\"https://xie.infoq.cn/article/981ccc308b9008b5d22c7e2cb\">圆满落幕！回顾 eBPF 技术的发展与挑战</a>\"</p><p><a href=\"https://xie.infoq.cn/article/221683ab2619448c800465088\">深入浅出 eBPF｜你要了解的 7 个核心问题</a>\"</p><p><a href=\"https://xie.infoq.cn/article/037880aa6a357444478cfbe8d\">Istio 整体架构解析</a>\"</p>",
    "publish_time": "2023-02-22 10:41:40",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Google 路线图：Flutter 与 JavaScript、Wasm 集成",
    "url": "https://www.infoq.cn/article/OoAHFuPeteKTOsQv849S",
    "summary": "<p>在肯尼亚首都内罗毕举行的 Flutter Forward 会议上，谷歌为其 Dart 框架 Flutter 制定了雄心勃勃的路线图，其中包括支持 WebAssembly 的计划。这家互联网巨头正在寻求其开发者社区帮助制定这一计划。它还发布了 Dart 3.0 和 Flutter 3.7，后者支持更多的 Material You 小部件和菜单。另外，还包括一整套 Material 3（Material You）小工具。为了体验 Flutter 中新一代 Material Design 的无穷潜力，谷歌还准备了一个有趣的 Web 展示，用户甚至可以在 Material Theming 和 Material You 之间进行切换。</p><p></p><p>Flutter 是谷歌的开源移动用户界面框架。对 Flutter 的升级计划包括编译成 WebAssembly 的能力、改善图形性能、 实现 JavaScript 和 Dart 之间的互操作性，以及将 Flutter 组件添加到 Web 应用中的能力。目前它还支持安卓、 iOS、 Windows、 macOS、 Linux 和 Web，同时还支持嵌入式平台使用 Flutter。</p><p></p><p>谷歌正在寻找新的途径，以将 Flutter 应用程序与底层操作系统或者平台整合。在安卓和 iOS 方面，Flutter 团队正在重塑平台原生插件的创建方式。iOS Flutter 开发人员很快就可以使用 Dart 的 FFI 直接调用 Objective-C 和 Swift 代码，而无需通过“平台通道”将消息传递给本地代码。同样地，安卓上的 Flutter 将能够使用 JNI 来调用 Kotlin 代码。</p><p></p><p>对于 Flutter Web 应用，一个新的“js”库使得从外部页面的 JavaScript 代码调用应用程序的 Dart 代码变得很容易。与此相关，你现在可以通过一个标准的 HTML div 将 Flutter 视图嵌入到页面中。这些都可以在一个有趣的演示页面中看到。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c4/c496ba588103831c7b16d014c158612a.jpeg\" /></p><p></p><p>从上图可以看到，Flutter 3.7 为应用程序创建菜单新增了一个新的支持，比如对 macOS 菜单的原生支持，新的级联菜单部件，还有向右键/长按上下文菜单添加项目的功能。安卓和 iOS 上的内置文本放大镜现在也可以像预期的那样处理 Ffltter 的文本字段。你可以在完整的发布博客中了解更多关于 Flutter 3.7 的改进。</p><p></p><p>Flutter 和 Dart 的产品和用户体验总监蒂姆·斯尼斯（Tim Sneath）告诉 The New Stack（TNS）: “我们确实在努力引导人们，我们之所以这样做，是因为我们想让更多的人加入到这个项目中，并且它是一个开源项目。我们想让大家都参与进来，Flutter 上有将近半数的贡献者并不在谷歌工作，他们是在别的公司或者社区里工作。通过制定路线图，他们就有机会加入到我们的行列来。”</p><p></p><p>据斯尼斯的说法，Flutter 从一开始在安卓和 iOS 上的默默无闻发展到了可以为移动、桌面、Web 等开发应用，所有这些都来源于 Dart 代码库。自从它问世以来，在不同的平台上，已经有超过 70 万个 Fluter 应用程序，从初创公司到宝马、丰田这样的大型企业，这些应用程序的使用范围各不相同，而且在谷歌内部，也有大约 30 个不同的项目应用了 Flutter，比如 Google Classroom（谷歌课堂）、Google Pay（谷歌电子钱包）。</p><p></p><p>谷歌还发布了 Flutter 3.7，这是一个稳定版本，在 iOS 上增加了一个新的渲染引擎，增强了对 Material 3 和 iOS 风格小部件的支持，加强了对国际化的改善，改善了后台处理，更新了开发者工具。</p><p></p><p>但是，斯尼斯称，此次会议和公告的重点都集中在下一年的路线图上。接下来，让我们看一看 Flutter 希望在未来一年进行的革新。</p><p></p><p></p><h2>将 Fltter 与 Web、JavaScript、WASM 集成</h2><p></p><p></p><p>“我们正在努力使 Flutter 与其他代码的集成变得更加容易，无论它是一个拥有系统 API 的移动应用程序，还是你希望把一些 Flutter 代码添加到你已经写好的 Web 体验中。”斯尼斯说，“我们在这里所做的一切，都是为了让 Flutter 能够更好地与其他可能被编写的东西进行对话，因为这个世界上并不是所有的代码都是 Flutter。”</p><p></p><p>他表示，这就意味着 Flutter 的组件现在可以放到网站中，这样，开发者就可以将 CSS 转换（如反射效果）应用到 Flutter 组件中。</p><p></p><p>Flutter 与 JavaScript 的互操作性现在也提高了。</p><p></p><p>“你可以通过 JavaScript 驱动 Flutter 小部件，反之亦然，”他说，“你可以从 JavaScript 端读取一些来自 flutter 的数据，这样就有了一些新的机会。”</p><p></p><p>谷歌也正在寻找一种新的方式来集成系统 API，这样可以降低在安卓和 iOS 的集成中需要自定义的代码需求。比如，如果有了一个新的安卓 jetpack 库或者苹果库，那么开发人员想与之集成，他们可以调用一个新的 Dart 命令，它将自动生成所有的绑定，“只需很少的仪式或代码”就可以直接与这些 API 对话，斯尼斯说。</p><p></p><p>然后就是 WebAssembly。斯尼斯说，WebAssembly 最初并不支持像 Dart 这样的垃圾收集语言，所以 Google 与 WebAssembly 团队和 Chrome 团队合作，以支持此类语言。虽然现在还没有被所有的浏览器所支持，但可以在谷歌为开发者开发的浏览器 Chrome Canary 上使用。</p><p></p><p>他补充说，这可能要到今年晚些时候才能得到全面的支持。</p><p></p><p>“Dart 是最早采用这种方法的框架之一，”他说，“我们可以利用这一点，使 Flutter 应用程序现在可以编译成 WebAssembly。这意味着它们会启动得更快，它们将更容易与其他语言编写的代码集成，我们也乐意看到人们用它来做什么。”</p><p></p><p>谷歌在使用 WebAssembly 编译 Dart 应用程序方面取得了长足进步。这可不是一项小任务，因为 WebAssembly 最初并不支持像 DART 这样具有垃圾收集功能的语言。随着时间的推移，这应该会给 Web 上的 Flutter 带来明显的性能提升。</p><p></p><p>最后就是，Flutter 现在开始支持开源架构标准 RISC-V。Dart 团队的最终目标是让 Flutter 应用程序能够在 RISC-V 上运行。</p><p></p><p>“目前还没有多少基于 RISC-V 的物理硬件，但我们相信这是未来下一代工艺的一部分。”斯尼斯说。</p><p></p><p></p><h2>改进的移动图形性能，支持 3D</h2><p></p><p></p><p>斯尼斯在 1 月 26 日发表在 Mudium 的一篇博文中说，过去的时候，由于创建抽象层的挑战，所以跨平台框架必须要在视觉效果上有所折衷。</p><p></p><p>“Flutter 采取了一种与大多数不同的方法，它有自己的渲染层，可以在每台设备上提供硬件加速图形和一致的视觉外观，” 他写道， “展望未来，我们将投资于突破性的图形性能，以扩展 Flutter 在这一领域的现有实力。”</p><p></p><p>他在接受 TNS 采访时表示：“我们正在向极限发起挑战。最近几个月，我们对整个图形渲染流水线进行了重新设计，这个项目就叫做 Impeller。Impeller 的设计旨在提升性能，同时也确保了铸铁般的不掉帧，以及真正高质量、丝般顺滑的体验。”</p><p></p><p>谷歌在会议上提供了对 Impeller 的早期支持。这个演示视频显示，左边是传统的 Flutter 渲染引擎，右边是新的 Impeller 渲染引擎。在 iOS 版的 Flutter 3.7 上，Impeller 带有选择加入标志。</p><p></p><p>Imeller 针对 Flutter 进行了优化，为开发人员提供了更多的灵活性和对图形管道的控制。斯尼斯在博客文章中解释说，Imeller 通过使用预编译的着色器来提供更可预测的性能，这些着色器可以缓解因着色器编译而导致的运行时丢帧。它使用了 Metals 和 Vulkan 中的原语，这是 iOS 和安卓中的现代低级 API。它还“有效地利用了并发性，将单帧工作负载分布在线程之间。”他补充道。</p><p></p><p>“在一些案例中，Impeller 为我们提供了比以前的图形引擎高出六到九倍的性能，”他说。“但除了性能或丝滑的质量之外，这也让我们看到了一种新的体验，我们相信，人们会希望去创造。”</p><p></p><p>现在有了对像素着色器的支持，这是一种编写低级图形 GPU 函数的能力，该函数在 Web 和移动设备上的屏幕上的每个像素上执行。他还说，它可以实现模糊效果以及其他图形处理体验。</p><p></p><p>他还表示，谷歌也已经开始了用 Flutter 支持 3D 的早期工作。他说，会议演示了如何导入使用 Blender 创建的模型，以及如何使用热重新加载来与 Blender 实时迭代并在运行的应用程序上查看结果。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/54/548306387e6683c2441a23dbbc785273.jpeg\" /></p><p></p><p>他说：“我们正在进入 3D 世界，现在通过 Flutter 支持 3D 图形。这真的是我们的下一代——一个全新的维度。这意味着，你可以使用传统的 3D 工具，比如 Blender，你可以创建模型，3D 网格。你可以将它们导入 Flutter，然后你可以像其他代码一样编程和使用它们。”</p><p></p><p>他解释说，这是由 Flutter 编程的 Dart 代码启用的。它可以在各种设备运行，甚至在 2014 年发布的 iPhone 6 上也可以运行。</p><p></p><p>“能看到 2D 和 3D 图形的结合真是太有意思了，从过去的经验来看，这些都是不同的领域、不同的技术、不同的语言，”他说道，“现在，我们正在把这些都结合在一起，我们很高兴看到，当你把这些东西结合在一起时，会发生什么。”</p><p></p><p></p><h2>改善 Dart、Flutter 开发人员的经验</h2><p></p><p></p><p>斯尼斯还补充说，谷歌当周还发布了 Dart 3，其中包括新的语言特性，以改善开发人员的体验。Dart 3.0 现在可以进行早期 alpha 测试，重点是要求健全的空安全。他说这是编写 bug-free 代码的关键因素。</p><p></p><p>“Dart 3 还移除了其他长期不被推崇的特性，以进一步实现语言的现代化，”斯尼斯解释说。“我们已经开始发布 Dart 3 的 alpha 质量版本，以及与之匹配的 Flutter 版本，使开发人员能够测试软件包和应用程序。”</p><p></p><p>在 Flutter 方面，谷歌发布了它的首个 News Toolkit 版本，目标客户是那些希望提供移动应用程序、但缺乏开发资源的地区性新闻出版商。白标签解决方案提供模板来帮助构建移动应用程序。谷歌与三家非洲新闻机构合作推出了它，其中包括摩洛哥最大的出版商和肯尼亚《旗帜报》（The Standard）。</p><p></p><p>斯尼斯强调，并不是所有的工作都完成了，但它们都是可行的。</p><p></p><p>“我们将在这里展示一些非常早期的演示，但这基本上是我们作为一个团队的未来方向的门户。”他说。</p><p></p><p>总体而言，Flutter 框架显然仍在处于高速发展状态，朝着完美的“一次编写，到处运行”应用程序和游戏的梦想越来越近。</p><p></p><h5>参考文章：</h5><p></p><p>https://thenewstack.io/google-roadmap-flutter-to-integrate-with-javascript-wasm/</p><p>https://9to5google.com/2023/01/25/flutter-forward-teaser/</p><p></p><h5>相关阅读：</h5><p></p><p><a href=\"https://xie.infoq.cn/article/e61b52bb3948a316b90fa7371\">经验分享｜用 Flutter 如何开发一个可运行小程序的 App</a>\"</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&amp;mid=2650265908&amp;idx=2&amp;sn=40e5a3c540ffd820b61a11f0aced2c26&amp;chksm=8863285bbf14a14df3439d8676826f0bffcb23d7438a9b7e618c2a74edf55818320ea859f5c6&amp;scene=27#wechat_redirect\">用 Flutter 开发真的可以为所欲为</a>\"</p><p><a href=\"https://xie.infoq.cn/article/0dd252431981b358156c65ab8\">软件测试 | JavaScript 如何使用</a>\"</p><p><a href=\"https://www.infoq.cn/article/cz1kW8e4pLHThzlcPSLe\">云原生 Wasm 的开发者工具正在成为主流</a>\"</p>",
    "publish_time": "2023-02-22 10:43:18",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]