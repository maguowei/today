[
  {
    "title": "2024前端趋势预测：React不会被取代，AI崛起，追求全栈宇宙",
    "url": "https://www.infoq.cn/article/SAIl19ytKIXasOPDdT4L",
    "summary": "<p>对于前端来说，2023是非同寻常的一年。我们见证了争相抢占甚至是发明服务器端渲染（SSR）市场的热潮、AI的不断进步、Web渲染器和JS引擎的寒武纪大爆发、一大批有力的竞争者试图摧毁巨头的统治地位……</p><p>&nbsp;</p><p>在开始预测未来一年发展趋势之前，我们先来回顾一下今年到目前为止的大杂烩。</p><p>&nbsp;</p><p></p><h2>2023年回顾</h2><p></p><p>&nbsp;</p><p></p><h3>SSR</h3><p></p><p>&nbsp;</p><p>SSR并非什么新鲜事物，PHP已经支持了28年，如果它对Neopets（以及Facebook）来说足够好用，那么可以说它对任何一家公司都足够好用。</p><p>&nbsp;</p><p>但Vercel一直在大力推动。作为前端开发领域一些最具影响力人物的聚集地，我们很难忽略他们（例如，在他们谈论Server Actions时，Twitter上刷了一周的<a href=\"https://x.com/rauchg/status/1718416777322123645?s=20\">表情包</a>\"）。他们认为你应该使用SSR，而且还应该通过他们的服务来使用。</p><p>&nbsp;</p><p>现在SSR市场已经重新确立，每个人都想分一杯羹。长期浸淫在这个领域的Ruby on Rails团队一直在试图用他们的<a href=\"https://world.hey.com/dhh/you-can-t-get-faster-than-no-build-7a44131c\">无构建</a>\"工作流吸引用户（这是对Vite的<a href=\"https://vitejs.dev/guide/why.html\">无捆绑</a>\"工作流的回响，尽管人们对于他们都有一些强烈的<a href=\"https://x.com/Baconbrix/status/1729736845020299419?s=20\">反对意见</a>\"）。<a href=\"https://htmx.org/\">HTMX</a>\"也类似，他们主张人们唯一真正需要的框架是使用HTTP服务器来传送HTML文件。尽管React和Svelte从Vercel的成功中获得了既得利益（核心团队成员在那里工作），但Vue仍然支持由社区驱动的<a href=\"https://nuxt.com/\">Nuxt</a>\"项目。</p><p>&nbsp;</p><p>甚至移动端也受到了影响。正如我在今年早些时候发表的<a href=\"https://buttondown.email/whatever_jamie/archive/things-to-look-forward-to-in-react-native/\">“Things to look forward to in React Native”</a>\"一文中提到的，Szymon Rybczak一直在为React Native开发<a href=\"https://twitter.com/SzymonRybczak/status/1691037156712599552\">Async组件</a>\"和React Server组件，而Expo一直在推动<a href=\"https://docs.expo.dev/router/introduction/\">Expo Router</a>\"。关于SSR在移动端是否有意义仍然存在争议，但你总是可以期待Evan Bacon和Nate Birdman为各自的立场做强有力的辩护。</p><p>&nbsp;</p><p>不过，我们是否会看到它在不使用Node.js后端的公司中流行起来，还有待观察。</p><p>&nbsp;</p><p></p><h3>AI</h3><p></p><p>&nbsp;</p><p>在这个领域，很多人在努力寻找可以将AI作为前端工作流一部分的方法。在这当中，人们持续关注的一个问题是：“机器会取代我们的工作吗？”</p><p>&nbsp;</p><p>就今年而言，我敢肯定地说，“AI不可阻挡的进步”在导致你失去前端工作的原因清单中处于较靠后的位置，但这个领域的市场潜力已经非常真实。</p><p>&nbsp;</p><p>ChatGPT和GitHub Copilot已经成为<a href=\"https://en.wikipedia.org/wiki/Rubber_duck_debugging\">橡皮鸭式编程</a>\"和代码生成的日常工具，微软今年还额外投资了<a href=\"https://www.forbes.com/sites/qai/2023/01/27/microsoft-confirms-its-10-billion-investment-into-chatgpt-changing-how-microsoft-competes-with-google-apple-and-other-tech-giants/?sh=2e1da7813624\">100亿美元</a>\"给OpenAI。虽然只有巨头才有望与这些工具展开竞争（谷歌有<a href=\"https://blog.google/technology/ai/bard-google-ai-search-updates/\">Bard</a>\"和<a href=\"https://www.youtube.com/watch?v=UIZAiXYceBI\">Gemini</a>\"，Meta有<a href=\"https://en.wikipedia.org/wiki/LLaMA\">LLaMA</a>\"，亚马逊有<a href=\"https://www.cnbc.com/2023/11/28/amazon-announces-q-an-ai-chatbot-for-businesses.html\">Q</a>\"，苹果肯定也在<a href=\"https://www.macrumors.com/guide/apple-gpt/\">开发某些东西</a>\"，GitHub上开始<a href=\"https://github.com/orgs/apple/repositories?q=ml-&amp;type=all&amp;language=&amp;sort=\">出现</a>\"一系列工具，如<a href=\"https://github.com/apple/ml-ferret\">ml-ferret</a>\"和<a href=\"https://github.com/ml-explore/mlx\">ml-explore</a>\"），在这些工具基础之上，行业仍然需要有相当大的发展。</p><p>&nbsp;</p><p>我们看到tldraw可以<a href=\"https://x.com/kolibril13/status/1736693741178491204?s=20\">将草图转化为代码</a>\"，Vercel的v0可以 <a href=\"https://x.com/dr_cintas/status/1734604588282794237?s=20\">将描述转化为UI组件</a>\"。Figma也可以在<a href=\"https://help.figma.com/hc/en-us/articles/16822138920343-Use-AI-tools-in-Figma\">设计</a>\"方面实现类似的功能。我开始觉得仅凭人类的能力来开发东西是一件愚蠢的事情。然而，也有人担心，与真正的产品相比，最终得到的东西可能存在不足，例如在<a href=\"https://hachyderm.io/@joelanman/111081419286527419\">可访问性</a>\"方面，更不用说供应商面临的<a href=\"https://x.com/colin_fraser/status/1736497875415433587?s=20\">劫持问题</a>\"。</p><p>&nbsp;</p><p></p><h3>浏览器引擎、JS引擎和运行时</h3><p></p><p>&nbsp;</p><p>在浏览器引擎方面，新的<a href=\"https://ladybird.dev/\">Ladybird</a>\"浏览器已经吸引到<a href=\"https://x.com/awesomekling/status/1674481979226574849?s=20\">31万美元的投资</a>\"，并且找来<a href=\"https://x.com/awesomekling/status/1692581237192294749?s=20\">Andrew Kaster</a>\"和<a href=\"https://x.com/awesomekling/status/1676896595936198657?s=20\">Alexander Kalenik</a>\"做全职开发。<a href=\"https://servo.org/\">Servo</a>\" Web渲染器已经享受了一年的<a href=\"https://people.igalia.com/mrego/servo/igalia-servo-tsc-2022/#/1\">Igalia工程</a>\"支持。还出现了一个全新的独立浏览器引擎<a href=\"https://goose.icu/introducing-shadow/\">Shadow</a>\"，居然是用JS编写的！看来，构建一个新的Web浏览器似乎并不是那么<a href=\"https://awesomekling.substack.com/p/how-were-building-a-browser-when\">不可能</a>\"的事情。</p><p>&nbsp;</p><p>在JS引擎方面，Hermes确实很火——我们看到<a href=\"https://www.youtube.com/watch?v=q-xKYA0EO-c\">Static Hermes</a>\"模糊了原生代码和JS之间的界限，即将推出的<a href=\"https://twitter.com/tmikov/status/1734627665301442847\">稳定ABI</a>\"和ES6支持将让它变得更加灵活。然而，一些难以解决的平台问题依然存在，比如<a href=\"https://x.com/tmikov/status/1734728363179425832?s=20\">支持Intl</a>\"，以及Date的<a href=\"https://github.com/facebook/hermes/issues/930\">速度很慢</a>\"。但即使克服了这些问题，它也需要保持警惕，因为<a href=\"https://github.com/quickjs-ng/quickjs\">QuickJS</a>\"项目已经在复苏，事实证明它在调用C函数方面比调用JS函数<a href=\"https://github.com/quickjs-ng/quickjs/discussions/225#discussioncomment-7891657\">更快</a>\"! 与此同时，Shadow已经启动了自己的JS引擎<a href=\"https://x.com/CanadaHonk/status/1737282401775055106?s=20\">Porffor</a>\"，值得我们关注。</p><p>&nbsp;</p><p>在运行时方面，我们不得不提到令人印象深刻的新晋挑战者<a href=\"https://bun.sh/\">Bun</a>\"，它已经给Node.js的后院点了一把火。虽然它掀起了一股大浪，迅速被商业技术栈采用，但它也为自己设定了非常高的标准，并且不得不放慢特性开发的速度来解决一系列问题。</p><p>&nbsp;</p><p></p><h3>跨平台框架</h3><p></p><p>&nbsp;</p><p>据透露，今年React Native相关的工作岗位数量是Flutter的<a href=\"https://x.com/grabbou/status/1690222108289142784?s=20\">6倍</a>\"，而且<a href=\"https://ln.hixie.ch/?start=1700627373&amp;count=1\">Hixie</a>\"和<a href=\"https://timsneath.medium.com/a-fond-farewell-to-flutter-and-dart-7a7a8c7c03e2\">Tim Sneath</a>\"都离开了谷歌，Tim甚至在<a href=\"https://x.com/timsneath/status/1704987557724144007?s=20\">宣传</a>\"SwiftUI。Flutter开发者陷入了一种生存危机，<a href=\"https://x.com/killedbygoogle/status/1690038902214791168?s=20\">被谷歌杀死</a>\"的梦魇前所未有地逼近。</p><p>&nbsp;</p><p>与此同时，React Native的势头并没有显示出任何放缓的迹象，亚马逊宣布它已成为他们<a href=\"https://x.com/reactnative/status/1722025802974277983?s=20\">多个</a>\"旗舰应用程序的首选技术。开发者体验得到了大幅改善，Software Mansion展示了他们的新<a href=\"https://x.com/kzzzf/status/1722973994368762335?s=20\">IDE</a>\"，Meta从Flipper迁移到了<a href=\"https://reactnative.dev/docs/debugging?js-debugger=new-debugger\">Chrome Devtools</a>\"。Expo也做了<a href=\"https://expo.dev/changelog/2023/12-20-2023-year-in-review\">很多值得一提的事情</a>\"，特别是通过<a href=\"https://docs.expo.dev/modules/overview/\">Expo Modules</a>\"革命性地提升了原生API访问能力，以及继续进行代码共享和延续SSR与<a href=\"https://docs.expo.dev/router/introduction/\">Expo Router</a>\"的故事。<a href=\"https://github.com/react-native-community/discussions-and-proposals/pull/496\">Meta</a>\"和<a href=\"https://github.com/microsoft/rnx-kit/pull/2504\">微软</a>\"朝着Web一致性迈进，从<a href=\"https://github.com/react-native-community/discussions-and-proposals/pull/607\">DOM遍历</a>\"到<a href=\"https://x.com/jamonholmgren/status/1736127463456129120?s=20\">事件循环</a>\"，都非常令人兴奋。</p><p>&nbsp;</p><p>其他框架也在采取行动，Tauri与<a href=\"https://servo.org/blog/2023/10/26/css-filters-testing-tauri/\">Servo</a>\"合作，<a href=\"https://dioxuslabs.com/blog/introducing-dioxus\">Dioxus</a>\"承诺使用Rust构建GUI应用，并提供类似React的开发体验。它基于<a href=\"https://github.com/DioxusLabs/taffy\">Taffy</a>\"布局引擎，Taffy是Yoga的一个非常有前途的后继者，可能很快就会提供<a href=\"https://github.com/DioxusLabs/taffy/pull/404\">C绑定</a>\"，可以在更多的场景中使用。我还听到了不断有关Kotlin Multiplatform的讨论，尽管没有特别值得一提的内容。</p><p>&nbsp;</p><p>关于<a href=\"https://nativescript.org/\">NativeScript</a>\"，我也有很多话要说，但我可能会单独将它们整理成文章，要么发布在我的<a href=\"https://buttondown.email/nativescript_is_dead\">NativeScript is Dead</a>\" 简报中，要么发布在NativeScript的<a href=\"https://blog.nativescript.org/\">博客</a>\"上，所以请耐心等待！</p><p>&nbsp;</p><p></p><h3>UI框架</h3><p></p><p>&nbsp;</p><p>所有的大公司仍然在大展拳脚，尽管有些人试图颠覆。今年的热点似乎始于<a href=\"https://www.solidjs.com/\">Solid</a>\"从Chrome团队获得了<a href=\"https://www.solidjs.com/blog/chrome-supports-solidjs\">3万美元的资金支持</a>\"，并推广了<a href=\"https://dev.to/this-is-learning/the-evolution-of-signals-in-javascript-8ob\">Signals</a>\"。</p><p>&nbsp;</p><p>Web Components也有了复兴，从前几年的<a href=\"https://lea.verou.me/2020/09/the-failed-promise-of-web-components/\">被否定</a>\"中恢复过来，交付了一些与之相关的应用，如<a href=\"https://x.com/justinfagnani/status/1737927050617585960?s=20\">DocuSeal</a>\"和<a href=\"https://x.com/addyosmani/status/1707811109233897587?s=20\">Photoshop</a>\"。正如Alex Russell在<a href=\"https://x.com/slightlylate/status/1379840779581939716?s=20\">2021年</a>\"所说的：</p><p>&nbsp;</p><p></p><blockquote>除了谷歌、微软、Adobe、ING、Comcast、EA、Ubisoft、GE、Nintendo、Blizzard、SpaceX、Salesforce和Internet Archive……还有谁真正在使用Web Components？</blockquote><p></p><p>&nbsp;</p><p>为了不被<a href=\"https://x.com/Rich_Harris/status/1198332398561353728?s=20\">缺少API</a>\"所困扰，Svelte做出了反击，重新审视响应性，推出<a href=\"https://svelte.dev/blog/runes\">runes</a>\"，并宣布Dominic Gannaway已经<a href=\"https://x.com/Rich_Harris/status/1688581184018583558?s=20\">与Rich Harris合作</a>\"全职开发Svelte。</p><p>&nbsp;</p><p>但他们不是唯一重新审视响应性的人，Meta承诺推出<a href=\"https://www.youtube.com/watch?v=qOQClO3g8-Y\">React Forget</a>\"更新，似乎<a href=\"https://x.com/reactjs/status/1739293742824112332?s=20\">有很多</a>\"人期待。</p><p>&nbsp;</p><p>在这一切的背后，HTMX给人一种令人耳目一新的<a href=\"https://x.com/htmx_org/status/1738588696134201701?s=20\">理性感</a>\"，尽管它可能是<a href=\"https://x.com/htmx_org/status/1738904635216154944?s=20\">最差的框架</a>\"，但在这个拥有复杂的构建工具的时代，它正变得越来越难以被忽视。</p><p>&nbsp;</p><p></p><h3>构建系统</h3><p></p><p>&nbsp;</p><p>说到构建系统，我们看到了越来越多的下一代构建工具，如SWC和Esbuild，还有更多与它们相配套的捆绑工具。Rome垮台，<a href=\"https://biomejs.dev/blog/annoucing-biome/\">Biome崛起</a>\"。<a href=\"https://turbo.build/pack\">Turbopack</a>\"去年宣称自己是Webpack的继任者，但今年<a href=\"https://www.rspack.dev/blog/announcement.html\">Rspack</a>\"挥舞着诉状冲进法庭。与此同时，Metro仍然是React Native的首选武器。</p><p>&nbsp;</p><p></p><h3>开发工具</h3><p></p><p>&nbsp;</p><p>不满的情绪一直在酝酿。Eslint已经厌倦了<a href=\"https://eslint.org/blog/2023/10/deprecating-formatting-rules/\">维护格式化规则</a>\"，一些人厌烦了Prettier在填补这一空白方面的缓慢进展，甚至提供了<a href=\"https://prettier.io/blog/2023/11/27/20k-bounty-was-claimed\">2万美元的赏金</a>\"要将它替换掉（Biome胜出）。</p><p>&nbsp;</p><p>另一方面，Bun向我们展示了包的安装速度可以比我们想象的<a href=\"https://x.com/jarredsumner/status/1727457655344742602?s=20\">快得多</a>\"，尽管使用二进制锁文件有明显的<a href=\"https://x.com/mountain_ghosts/status/1701198424752717992?s=20\">缺点</a>\"。</p><p>&nbsp;</p><p></p><h2>对2024年的预测</h2><p></p><p>&nbsp;</p><p>有了上面的这些前提，等于准备好了塔罗牌、占卜骨头和星图，让我们来预测一下2024年前端的走势。</p><p>&nbsp;</p><p></p><h3>每个人都想拥有整个技术栈</h3><p></p><p>&nbsp;</p><p>似乎存在着一种渴望，不仅要推翻现有的工具，还想占据整个垂直技术栈。Bun希望成为你的运行时、编译器、包管理器、HTTP服务器和测试运行器，即使这意味着<a href=\"https://dev.to/thejaredwilcurt/bun-hype-how-we-learned-nothing-from-yarn-2n3j\">生态系统的分裂</a>\"。</p><p>&nbsp;</p><p>我们之前已经<a href=\"https://news.ycombinator.com/item?id=27039026\">经历过</a>\"，比如Rome。每个人都在试图从开源中获得收益，但是，由于从由一群吝啬鬼组成的社区中赚到钱并不容易，目前在风险投资圈流传的最好的想法似乎是先提供整个技术栈，等占领市场后再来解决其余的问题。</p><p>&nbsp;</p><p>没有人比Vercel更能体现这一点，他们有一款万能产品——<a href=\"https://nextjs.org/docs/pages/building-your-application/deploying#managed-nextjs-with-vercel\">托管</a>\"、<a href=\"https://vercel.com/docs/projects/domains/working-with-domains#buying-a-domain-through-vercel\">域名注册</a>\"、<a href=\"https://vercel.com/docs/functions/edge-functions\">边缘功能</a>\"、<a href=\"https://vercel.com/docs/storage/vercel-postgres\">数据库</a>\"、<a href=\"https://vercel.com/docs/analytics\">分析</a>\"、对所有主要UI框架的<a href=\"https://vercel.com/docs/frameworks\">SSR集成</a>\"、各种部署小工具，等等。他们在内部尽可能地发明一切（我们已经看到了用于捆绑的<a href=\"https://turbo.build/pack\">Turbopack</a>\"、用于管理单体代码库的<a href=\"https://turbo.build/repo\">Turborepo</a>\"以及用于生成镜像的<a href=\"https://github.com/vercel/satori\">Satori</a>\"），并<a href=\"https://service-markup.vercel.app/\">包装</a>\"任何他们无法发明的东西。</p><p>&nbsp;</p><p>那么接下来Vercel会做些什么？我认为他们可能会：</p><p>&nbsp;</p><p>去掉中间商。 他们包装了许多服务，比如<a href=\"https://upstash.com/\">Upstash</a>\"，但他们可以推出自己的解决方案来提高利润。推出更多独特的技术。 Vercel的价值主张是“你可以自己动手完成这些事情，但我们可以让它们变得毫不费力”，但如果变成“你无法自己动手完成这些事情”，那么他们的技术就会变得更加有吸引力。将人困在他们的技术栈中。 这显然是三个选项中的超级反派选项，但“壕沟效应”是一种久经考验的留存用户的策略（请参考Atlassian和微软的案例）。</p><p>&nbsp;</p><p>这些都很难说，但我相信通过组合这些选项，他们最终会（有意或无意地）执行Meta的策略，打造出一个技术栈，它是如此得吸引人，以至于它能够基于技术创造出工作机会，并吸引用户为其做贡献，推动其进一步发展。</p><p>&nbsp;</p><p>有人能阻碍他们吗？Biome或许可以，但它没有像最初的Rome项目那样拥有<a href=\"https://news.ycombinator.com/item?id=27039210\">450万美元</a>\"的资本来成为一个强有力的竞争者。Bun有资本（<a href=\"https://oven.sh/\">700万美元</a>\"），但考虑到他们在解决2000个问题上力不从心，我认为CI工具市场可能是它明年更现实的目标。Deno在2022年筹集了<a href=\"https://deno.com/blog/series-a\">2100万美元</a>\"，似乎正在试探市场，例如推出了<a href=\"https://deno.com/deploy\">Deno Deploy</a>\"和<a href=\"https://deno.com/blog/comparing-deno-kv\">Deno KV</a>\"，但离占据整个技术栈还差得很远。在我看来，就剩下一家由<a href=\"https://www.reddit.com/r/reactnative/comments/9v94q9/expo_questions/e9beswg/\">风险投资</a>\"提供支持的Y-Combinator初创公司Expo了。</p><p>&nbsp;</p><p>Expo在前几年专注于通过SDK来建立用户群，现在已经进入盈利阶段，推出了<a href=\"https://expo.dev/eas\">Expo Application Services</a>\"。再加上<a href=\"https://docs.expo.dev/router/introduction/\">Expo Router</a>\"，一个强大的竞争者出现了，因为他们在某些方面比Vercel更专业，比如移动端。如果你可以在Expo Router上构建并免费得到原生移动应用，为什么要选择Next.js呢？这是Sanket Sahu提出的一个<a href=\"https://x.com/sanketsahu/status/1735274560919142445?s=20\">很有说服力的论点</a>\"。</p><p>&nbsp;</p><p>尽管Expo拥有这种令人羡慕的战略地位，但他们仍然还有很多工作要做。他们还没有“万能产品”，用户必须通过链接到外部服务来填补某些功能。React Native技术栈在SSR方面仍然存在空白，因此他们别无选择，只能<a href=\"https://x.com/Baconbrix/status/1734725461563896251?s=20\">自己解决</a>\"。Vercel在这方面的优势在于与React核心团队有着密切的联系（雇佣了像<a href=\"https://vercel.com/blog/supporting-the-future-of-react\">Sebastian Markbåge</a>\"和<a href=\"https://twitter.com/acdlite/status/1623353741750546439\">Andrew Clark</a>\"这样的关键人物），可以影响React的发展方向，但也有可能是React在影响他们？</p><p>&nbsp;</p><p>无论谁胜出，作为最终的用户，我都有一些期待。我确实希望简化和统一——因为前端在过去几年里变得荒唐地复杂——但这绝不能以形成垄断为代价。一个技术栈应该始终赋予用户权力，让他们保留他们喜欢的部分，并替换掉他们不喜欢的部分。</p><p>&nbsp;</p><p></p><h3>Web将变得更加多样化</h3><p></p><p>&nbsp;</p><p>随着苹果将于2024年3月5日放开App Store上对Web浏览器引擎的<a href=\"https://www.theregister.com/2023/11/02/apple_safari_browser/\">限制</a>\"，Safari团队不得不<a href=\"https://x.com/webkit/status/1734291991414841365?s=20\">认真对待</a>\"以保护他们的市场份额。我认为苹果不会不战而降，我们甚至可能会再次看到Safari的崛起，也许苹果会在ML/AI领域吸引人们，并利用iPhone硬件的特殊优势。</p><p>&nbsp;</p><p>对于Servo明年能否挑战桌面领域，我持怀疑态度，因为它在CSS测试中仍处于中等水平，<a href=\"https://servo.org/about/\">通过率</a>\"为61.8%，WPT测试通过率为55.4%，但它的WebView可能可以在应用程序中发挥其可控的作用。事实上，因为其<a href=\"https://github.com/servo/servo/wiki/Roadmap\">路线图</a>\"中涵盖了Android和Tauri，所以它似乎正在向嵌入式方面倾斜，并且目前没有围绕WebView构建浏览器的计划。</p><p>&nbsp;</p><p>Ladybird将继续吸引人们的关注，它参与了2023年的<a href=\"https://x.com/awesomekling/status/1668260465242193921?s=20\">Web Engines Hackfest</a>\"，这表明它也是一个严肃的参与者（我猜测）。我认为它要挑战已有浏览器的地位仍然为时尚早，但我肯定会支持它，特别是因为它们发现的漏洞让所有浏览器都受益。</p><p>&nbsp;</p><p>随着Manifest V2即将被<a href=\"https://developer.chrome.com/docs/extensions/develop/migrate/mv2-deprecation-timeline\">弃用</a>\"，Chrome给自己制造了敌人，但这似乎不足以改变市场份额。相反，随着苹果对浏览器限制的结束，他们有望获得更多的市场份额。iOS垄断的打破将会带来动荡，因为开发者必须在更多的目标移动设备上测试应用的行为，而只在Chromium上测试所有习惯性做法确实存在诱惑性。即使像Twitter这样的网站也已经开始<a href=\"https://x.com/awesomekling/status/1735580899863916694?s=20\">屏蔽</a>\"他们不想支持的浏览器，我担心我们会回到“在Netscape Navigator上浏览效果最佳”的日子。</p><p>&nbsp;</p><p>与此同时，这对于Firefox来说是一个很好的机会。垄断被打破的早期对于建立声誉来说至关重要，而Firefox并没有被广告巨头的商业利益所束缚，因此他们可以在广告拦截和隐私方面展开竞争。例如，如果Firefox可以阻止YouTube上的广告，而Chrome不能，这对于某些用户来说就足够了。尽管根据我见过的没有安装广告拦截器的用户数量来看，也许像苹果那样“只需多给他们一些表情符号”会是更好的做法。</p><p>&nbsp;</p><p></p><h3>AI崭露头角</h3><p></p><p>&nbsp;</p><p>在目前看来，OpenAI主宰了AI领域，虽然在这个过程中出现了一些<a href=\"https://news.ycombinator.com/item?id=38467850\">变节</a>\"，但从现在开始应该会一帆风顺。他们一直以<a href=\"https://en.wikipedia.org/wiki/Artificial_general_intelligence#cite_note-86\">AGI</a>\"为目标，有人认为GPT-4是朝着这个目标前进的一个<a href=\"https://arxiv.org/abs/2303.12712\">航标</a>\"，但我认为2024年AI领域将更多地围绕其他公司的发展而展开。</p><p>&nbsp;</p><p>尽管每个巨头都涉足不同的细分市场（例如，大多数公司都提供云服务），谷歌在搜索方面更有存在感，Meta对语言分析更感兴趣，亚马逊在购物方面有更大的动机，而苹果则有更多的消费设备可以利用。因此，他们可能会各自专注于与自己最相关的领域。</p><p>&nbsp;</p><p>但我的目光会聚焦在苹果身上。他们一直以先见之明的方式不断地推进产品，多年来一直在推出配备<a href=\"https://github.com/hollance/neural-engine\">专用ML处理器</a>\"的设备，但仍然让人感觉这些是真正发射前的倒计时。</p><p>&nbsp;</p><p>他们一直紧跟新兴技术，随着个性化语音模型的流行推出了<a href=\"https://machinelearning.apple.com/research/personal-voice#\">个人化语音</a>\"，随着LLM的崛起<a href=\"https://jackcook.com/2023/09/08/predictive-text.html\">改进了可预测性文本</a>\"，他们一直致力于将经过验证的AI技术带给消费者。据<a href=\"https://www.macrumors.com/2023/12/21/apple-ai-researchers-run-llms-iphones/\">报道</a>\"，他们在受限设备上运行LLM方面取得了突破，而且在开发名为“Ajax”的可与GPT-3.5媲美的生成式AI模型。考虑到他们将在数年内把自己塑造为一家注重隐私的公司的<a href=\"https://9to5mac.com/2019/01/05/apple-privacy-billboard-vegas-ces/#:~:text=The%20billboard%2C%20first%20spotted%20by,Apple's%20efforts%20at%20protecting%20user\">品牌定位</a>\"，我认为他们将是首家提供免费、可无限使用、可选择脱机、可在设备上运行、可保护隐私的LLM服务。这可能是Siri一直缺少的关键元素。</p><p>&nbsp;</p><p></p><h3>大型UI框架将会继续存在</h3><p></p><p>&nbsp;</p><p>尽管我倾向于为弱势群体加油，但我不认为React等框架会被取代，除非有FAANG公司推出新的框架。不过，考虑到几个主要框架的核心团队成员都在同一个屋檐下，如果我们看到Vercel推出一个全新的充分利用SSR的一揽子框架（也就是不基于React），我也不会感到惊讶。</p><p>&nbsp;</p><p></p><h3>移动开发不会有太大变化</h3><p></p><p>&nbsp;</p><p>我认为原生开发不会有太大变化，通常情况下，开发者会继续使用他们已经使用过的框架，就像忠实的选民一样。毕竟，在这个领域，要说服人们改变阵营需要很大的推动力。此外，虽然开发体验已经有所改进，但整个场景并没有根本性的改变。也许最值得关注的是Expo Router，它面临的挑战是说服开发者开发Web+原生应用而不只是Web应用。当然还有NativeScript！</p><p>&nbsp;</p><p></p><h3>结论</h3><p></p><p>&nbsp;</p><p>这是一个多事之秋。随着SSR和AI的进步，JavaScript生态系统的工具和引擎都在蓬勃发展。明年，我预计会看到更多的工具和框架的整合，更多的行业权力争夺，我们的日常工作流程将更多地涉及AI。最后，我们可能还会看到越来越多的开发者的生存方式发生变化，因为他们即将放弃在这个不断变化的领域做出努力。</p><p>&nbsp;</p><p></p><h5>原文链接：</h5><p></p><p></p><p>https://buttondown.email/whatever_jamie/archive/frontend-predictions-for-2024</p><p></p><p></p><h5>相关阅读：</h5><p></p><p></p><p><a href=\"https://www.infoq.cn/article/pi8g04Fpma4KmMD9hDwp?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">React&nbsp;18：新玩具、新陷阱以及新可能性</a>\"</p><p><a href=\"https://www.infoq.cn/article/Tv3SyqoivXMWUoj8qSMT\">从新&nbsp;React&nbsp;文档看未来 Web 的开发趋势</a>\"</p><p><a href=\"https://www.infoq.cn/article/CZKMjHaxbf1Z7xcSzisX\">我被&nbsp;React&nbsp;劫持了，很痛苦又离不开</a>\"</p><p><a href=\"https://www.infoq.cn/article/4ydKY3wbZDp7Eei0JJm1\">React&nbsp;JS 广受业界认可，高级开发者年薪百万</a>\"</p>",
    "publish_time": "2024-01-14 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "无中断升级1200多台MySQL服务器，GitHub是如何做到的",
    "url": "https://www.infoq.cn/article/BH3tpVK2Ayl7W53QFGFW",
    "summary": "<p>15年前，GitHub 还只是一个使用单个 MySQL 数据库的 Ruby on Rails 应用。自那时起，为了满足平台的扩展性和可靠性需求，GitHub 的 MySQL 架构发生了变化，包括 <a href=\"https://github.blog/2018-06-20-mysql-high-availability-at-github/\">构建高可用性</a>\"、<a href=\"https://github.blog/2017-07-06-mysql-testing-automation-at-github/\">实现测试自动化</a>\" 和 <a href=\"https://github.blog/2021-09-27-partitioning-githubs-relational-databases-scale/\">数据分区</a>\" 等。如今，MySQL 仍然是 GitHub 基础设施的核心组成部分，也是我们在关系型数据库方面的主要选择。</p><p>&nbsp;</p><p>本文将分享我们将1200多台 MySQL 主机升级到8.0的故事。在不影响SLO的情况下升级整个主机群可不是一件小事——规划、测试和升级本身就花费了一年多时间，并且需要 GitHub 多个内部团队的协作。</p><p>&nbsp;</p><p></p><h2>升级的动机</h2><p></p><p>&nbsp;</p><p>为什么升级到 MySQL 8.0？随着 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/faqs-general.html\">MySQL 5.7 的生命周期即将接近尾声</a>\"，我们将我们的主机群升级到下一个主要版本——MySQL 8.0。我们希望使用包含最新安全补丁、错误修复和性能增强的 MySQL 版本。MySQL 8.0还带来了一些新特性，我们想要使用它们并从中受益，如即时 DDL、不可见索引和压缩的二进制日志等。</p><p>&nbsp;</p><p></p><h2>GitHub 的 MySQL 基础设施</h2><p></p><p>&nbsp;</p><p>在深入讨论如何进行升级之前，我们先简要了解一下我们的 MySQL 基础设施：</p><p>&nbsp;</p><p>我们的主机群包含1200多台主机，由 Azure 虚拟机和我们数据中心的裸机组成。我们存储超过 300TB 的数据，分布在50多个数据库集群中，提供每秒 550 万次的查询。每个集群都采用了<a href=\"https://github.blog/2018-06-20-mysql-high-availability-at-github/\">高可用性配置</a>\"，具有主节点加副本节点的集群设置。我们的数据采用了分区机制。我们利用水平和垂直分片来扩展 MySQL 集群。我们有存储特定产品数据域的 MySQL 集群。我们也有为规模超过单一 MySQL 集群可承受的大型数据域而创建的水平分片 <a href=\"https://vitess.io/\">Vitess</a>\" 集群。我们有一个庞大的工具生态系统，包括 Percona Toolkit、<a href=\"https://github.com/github/gh-ost\">gh-ost</a>\"、<a href=\"https://github.com/openark/orchestrator\">orchestrator</a>\"、<a href=\"https://github.com/github/freno\">freno</a>\"，以及用于操作主机群的内部自动化工具。</p><p>&nbsp;</p><p>所有这些组成了一个多样化且复杂的部署，我们需要在保持 SLO 水平的同时进行升级。</p><p>&nbsp;</p><p></p><h2>准备工作</h2><p></p><p>&nbsp;</p><p>作为 GitHub 的主要数据存储，我们对可用性有着很高的要求。鉴于主机群的规模和 MySQL 基础设施的重要性，我们对升级过程有如下要求。</p><p>&nbsp;</p><p>我们必须能够在保持 SLO 和 SLA 水平的情况下升级每个 MySQL 数据库。在测试和验证阶段，我们无法考虑到所有的故障模式。因此，为了保持 SLO 水平，在发生故障时我们需要能够在不中断服务的情况下回滚到先前的 MySQL 5.7 版本。我们的 MySQL 主机群拥有多样化的工作负载。为了降低风险，我们需要原子升级每个数据库集群，并为其他重大变更安排好时间。这意味着升级过程会是一个漫长的过程。因此，我们从一开始就知道我们需要能够维持运行一个混合MySQL版本的环境。</p><p>&nbsp;</p><p>升级准备工作从2022年7月开始，在升级数据库之前，我们需要达成几个里程碑。</p><p>&nbsp;</p><p></p><h3>基础设施准备</h3><p></p><p>&nbsp;</p><p>我们需要确定 MySQL 8.0 的一些默认配置，并进行性能基准测试。由于我们需要操作两个版本的 MySQL，我们的工具和自动化需要能够处理混合版本，并且了解 5.7 和 8.0 之间的新的、不同的或已弃用的语法。</p><p>&nbsp;</p><p></p><h3>确保应用程序兼容性</h3><p></p><p>&nbsp;</p><p>我们将 MySQL 8.0 添加到所有使用 MySQL 的应用程序的 CI 管道中。我们在 CI 中同时运行 MySQL 5.7 和 8.0，确保在漫长的升级过程中不会出现回归。我们检测 CI 中出现的各种错误和不兼容性，这样有助于我们删除不受支持的配置或特性，并转义新的保留关键字。</p><p>&nbsp;</p><p>为了帮助应用程序开发人员向 MySQL 8.0 过渡，我们还在 GitHub Codespaces 中启用了选择 MySQL 8.0 预构建容器进行调试的选项，并为额外的预生产测试提供了 MySQL 8.0 开发集群。</p><p>&nbsp;</p><p></p><h3>沟通和透明度</h3><p></p><p>&nbsp;</p><p>我们使用 GitHub Projects 创建了一个滚动日历，用于内部沟通和跟踪升级计划。为协调升级，我们为应用程序团队和数据库团队创建了用于跟踪检查清单的问题模板。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/14/149b8d8008ae12baad95c6611e232b63.png\" /></p><p></p><p>&nbsp;</p><p>用于跟踪 MySQL 8.0 升级时间表的项目看板</p><p>&nbsp;</p><p></p><h2>升级计划</h2><p></p><p>&nbsp;</p><p>为了达到我们的可用性标准，我们采用了渐进式的升级策略，允许在整个过程中设定检查点和回滚。</p><p>&nbsp;</p><p></p><h3>第1步：滚动升级副本</h3><p></p><p>&nbsp;</p><p>我们从升级单个副本开始，并在它们处于离线状态时进行监控，确保基本功能稳定。然后，我们开启生产流量，并继续监控查询延迟、系统指标和应用程序指标。我们逐渐将 8.0 版副本上线，直到升级完整个数据中心，然后迭代其他数据中心。为了能够回滚，我们保留了足够的 5.7 版在线副本，但对它们禁用了生产流量，让 8.0 版本的服务器提供所有读取流量。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/3b/3b75ba69ac7f6ca204708decaba04e19.png\" /></p><p></p><p>每个数据中心的渐进式发布都采用的副本升级策略</p><p>&nbsp;</p><p></p><h3>第2步：更新复制拓扑</h3><p></p><p>&nbsp;</p><p>在所有的只读流量通过 8.0 版副本之后，我们对复制拓扑进行了调整：</p><p>&nbsp;</p><p>将一个 8.0 候选主节点配置为直接复制当前的 5.7 主机。在这个 8.0 版副本的下游创建两个复制链：一组只包含 5.7 版副本（不提供流量，为回滚做准备）。一组只包含 8.0 版副本（提供流量）。处于这种状态的拓扑时间很短暂（最多几小时），然后我们进入下一步。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e5/e5878a6f577bb4f1eba10461ff2d73bc.png\" /></p><p></p><p>为了帮助升级，拓扑结构包含了两个复制链</p><p>&nbsp;</p><p></p><h3>第3步：将 MySQL 8.0 主机提升为主数据库</h3><p></p><p>&nbsp;</p><p>我们不直接在主数据库主机上进行升级，相反，我们通过 <a href=\"https://github.com/openark/orchestrator\">Orchestrator</a>\" 执行优雅的故障转移，将 MySQL 8.0 版副本提升为主数据库。此时，复制拓扑由一个 8.0 版主机和两个复制链组成：一个用于回滚的离线 5.7 版副本集和一个提供服务的 8.0 版副本集。</p><p>&nbsp;</p><p>Orchestrator 还被配置为将 5.7 版主机列为潜在的故障转移候选项，防止在发生意外故障转移时出现非预期的回滚。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/56/56e35d8bf3a51a7ecc4022ca1659cdab.png\" /></p><p></p><p>主节点故障转移和完成 MySQL 8.0 升级的其他步骤</p><p>&nbsp;</p><p></p><h3>第4步：升级内部实例</h3><p></p><p>&nbsp;</p><p>我们还有用于备份或处理非生产工作负载的辅助服务器，为了一致性，我们也对它们进行了升级。</p><p>&nbsp;</p><p></p><h3>第5步：清理</h3><p></p><p>&nbsp;</p><p>确认集群无需回滚并成功升级到 8.0 后，我们移除了 5.7 版服务器。验证过程包含至少一个完整的 24 小时流量周期，确保在高峰流量期间不出问题。</p><p>&nbsp;</p><p></p><h2>回滚能力</h2><p></p><p>&nbsp;</p><p>保证升级策略安全的一个核心部分是能够回滚到之前的 MySQL 5.7 版本。对于只读副本，我们确保保留了足够的 5.7 版副本在线来提供生产流量负载，如果 8.0 版副本表现不佳，则通过禁用 8.0 版副本来启动回滚。对于主数据库，为了在不丢失数据或中断服务的情况下回滚，我们需要能够在 8.0 版本和 5.7 版本之间保持逆向数据复制。</p><p>&nbsp;</p><p>MySQL 支持从一个版本复制到下一个更高版本，但没有明确支持反向复制（<a href=\"https://dev.mysql.com/doc/refman/8.0/en/replication-compatibility.html\">MySQL 复制兼容性</a>\"）。在测试将 8.0 主机提升为主数据库时，我们发现所有 5.7 版副本的复制都发生了中断。我们需要解决几个问题。</p><p>&nbsp;</p><p>在 MySQL 8.0 中，utf8mb4 是默认的字符集，并使用 utf8mb4_0900_ai_ci 作为默认排序规则。之前的 MySQL 5.7 支持 utf8mb4_unicode_520_ci 排序规则，但不支持最新版本的 Unicode utf8mb4_0900_ai_ci。MySQL 8.0 引入了用于管理权限的<a href=\"https://dev.mysql.com/doc/refman/8.0/en/roles.html\">角色</a>\" ，但这个特性在 MySQL 5.7 中并不存在。当一个 8.0 版实例被提升为集群主数据库时，我们遇到了一些问题。我们的配置管理正在扩展某些权限集，包含并执行包含角色的语句，这导致 5.7 版副本的下游复制中断。我们通过在升级窗口期间临时调整受影响用户的定义权限解决了这个问题。</p><p>&nbsp;</p><p>为解决字符排序不兼容问题，我们不得不将默认字符编码设置为 utf8，并将排序规则设置为 utf8_unicode_ci。</p><p>&nbsp;</p><p>对于整个 GitHub，我们的 Rails 配置确保了字符排序的一致性，并让客户端配置的数据库标准化变得更容易。因此，我们非常有信心能够维护关键应用的逆向复制。</p><p>&nbsp;</p><p></p><h2>挑战</h2><p></p><p>&nbsp;</p><p>在测试、准备和升级过程中，我们遇到了一些技术挑战。</p><p>&nbsp;</p><p></p><h3>Vitess</h3><p></p><p>&nbsp;</p><p>我们使用 Vitess 进行关系数据的水平分片。在大多数情况下，升级 Vitess 集群与升级 MySQL 集群没有太大区别。我们已经在 CI 中运行了 Vitess，因此能够验证查询兼容性。在我们的分片集群升级策略中，我们一次升级一个分片。Vitess 代理层 VTgate 会发布 MySQL 的版本信息，一些客户端行为会依赖这些版本信息。例如，一个使用 Java 客户端的应用程序对 5.7 版本的服务器禁用了查询缓存 —— 由于 8.0 移除了查询缓存，这会导致生成阻塞错误。所以，一旦给定键空间的 MySQL 主机升级完成，我们必须确保也更新了 VTgate 的设置，让它们发布 8.0 的版本信息。</p><p>&nbsp;</p><p></p><h3>复制延迟</h3><p></p><p>&nbsp;</p><p>我们使用读取副本来扩展读取可用性。为了确保能够提供最新的数据，GitHub 需要低延迟的复制。</p><p>&nbsp;</p><p>在早期的测试中，我们遇到了一个 MySQL 复制 bug，这个 bug 在 8.0.28 版本中得到了<a href=\"https://dev.mysql.com/doc/relnotes/mysql/8.0/en/news-8-0-28.html#mysqld-8-0-28-bug\">修复</a>\"：</p><p>&nbsp;</p><p></p><blockquote>复制：如果一个设置了系统变量 replica_preserve_commit_order = 1 的副本在长时间高负载下运行，该实例可能会耗尽提交顺序序列票证。在超出最大值后的不正确行为导致应用程序挂起，并使应用程序工作线程在提交顺序队列中无限期等待。提交顺序序列票证生成器现在可以正确地回绕。感谢 Zhai Weixiang 的贡献。（Bug #32891221, Bug #103636）</blockquote><p></p><p>&nbsp;</p><p>我们碰巧符合击中这个 bug 的所有条件。</p><p>&nbsp;</p><p>我们配置了 replica_preserve_commit_order，因为我们使用基于 GTID 的复制。我们的许多集群长时间承受着大量的强写入负载，尤其是最关键的集群。我们的大多数集群的写入负载都很高。</p><p>&nbsp;</p><p>由于这个 bug 已在上游进行了修补，我们只需要确保部署的 MySQL 版本高于 8.0.28。</p><p>&nbsp;</p><p>我们还发现，导致复制延迟的繁重写操作在 MySQL 8.0 中加剧了，这使得我们更加重视避免大量写入。在 GitHub，我们使用 <a href=\"https://github.com/github/freno\">freno</a>\" 来根据复制延迟情况来限制写入工作负载。</p><p>&nbsp;</p><p></p><h3>查询可以通过 CI，但在生产环境中失败</h3><p></p><p>&nbsp;</p><p>我们知道，在生产环境中遇到问题是不可避免的 —— 因此，我们采用了渐进式推出副本的升级策略。有一些查询，它们通过了 CI，但在生产环境中遇到实际工作负载时会失败。最值得注意的是，我们遇到了一个问题，即带有大型 WHERE IN 子句的查询会导致 MySQL 发生崩溃。我们有大型的 WHERE IN 查询，包含了数万个值。对于这些情况，我们需要在继续升级之前重新编写查询。查询抽样有助于跟踪和检测这些问题。在 GitHub，我们使用 <a href=\"https://www.solarwinds.com/database-performance-monitor\">Solarwinds DPM (VividCortex)</a>\"，一个SaaS数据库性能监视器，用于查询可观察性。</p><p>&nbsp;</p><p></p><h2>收获</h2><p></p><p>&nbsp;</p><p>测试、性能调优和解决已发现的问题，整个升级过程花了一年多的时间，GitHub 多个团队的工程师都参与其中。我们将整个集群升级到了 MySQL 8.0 —— 包括支持 GitHub 的临时集群、生产集群和为内部工具提供支持的实例。此次升级凸显了我们的可观察性平台、测试计划和回滚能力的重要性。测试和渐进式推出策略使我们能够尽早识别出问题，减少了在主升级过程中遇到新故障的可能性。</p><p>&nbsp;</p><p>尽管有渐进式推出策略，我们仍然需要具备步骤级别的回滚能力，我们也需要可观察性来识别回滚信号。启用回滚最具挑战性的地方在于保持从 8.0 主节点到 5.7 副本的向后复制。<a href=\"https://github.com/trilogy-libraries/trilogy\">Trilogy 客户端库</a>\" 的一致性为我们提供了更多连接行为的可预测性，并让我们有信心来自主Rails单体的连接不会破坏向后复制。</p><p>&nbsp;</p><p>然而，对于一些 MySQL 集群，它们的连接来自不同框架/语言的客户端，向后复制会在几小时内出现中断，这缩短了回滚的机会窗口。幸运的是，这种情况并不多，我们没有遇到在需要回滚之前就发生复制中断的情况。但对我们来说，这是一个教训，即深入了解客户端连接配置情况是有好处的，它强调了制定准则和框架来确保配置一致性的重要性。</p><p>&nbsp;</p><p>之前 <a href=\"https://github.blog/2021-09-27-partitioning-githubs-relational-databases-scale/\">对数据进行分区</a>\" 的努力得到了回报 —— 它使我们能够更有针对性地升级不同的数据域。这一点很重要，因为一个失败的查询会阻碍整个集群的升级，而对不同的工作负载进行分区使得我们能够进行渐进式升级，并减小在过程中遇到的未知风险的影响范围。</p><p>&nbsp;</p><p>GitHub 上次升级 MySQL 版本时，我们有5个数据库集群，现在有 50 多个。为了成功升级，我们必须在管理集群的可观察性、工具和流程上投入。</p><p>&nbsp;</p><p></p><h2>结论</h2><p></p><p>&nbsp;</p><p>MySQL 升级只是我们必须执行的例行维护工作之一——对于我们来说，在我们的机群上运行的任何一个应用都拥有一个清晰的升级路径是至关重要的。作为升级项目的一部分，我们开发了新的流程和运维能力，成功完成了 MySQL 版本升级。然而，升级过程仍然有太多需要手动干预的地方，在未来，我们希望能够减少完成MySQL升级所需的工作量和时间。</p><p>&nbsp;</p><p>我们预计，随着 GitHub 规模的增长，我们的服务器群将继续增长，我们也计划进一步对我们的数据进行分区，这也将导致我们 MySQL 集群数量的增加。为了能够在未来提升 MySQL 运维的伸缩性，将运维任务和自我修复功能自动化是至关重要的。我们相信，在可靠的服务器管理和自动化上投入将使我们能够扩展 GitHub 并跟上所需的维护，提供更可预测和更具弹性的系统。</p><p>&nbsp;</p><p>从这个项目获得的经验为我们的 MySQL 自动化奠定了基础，并为未来的升级铺平了道路，使升级可以更高效地完成，并具备同样的安全性。</p><p></p><p>&nbsp;</p><p>原文链接：<a href=\"https://github.blog/2023-12-07-upgrading-github-com-to-mysql-8-0/\">https://github.blog/2023-12-07-upgrading-github-com-to-mysql-8-0/</a>\"</p><p></p><p></p><h5>相关阅读：</h5><p></p><p></p><p><a href=\"https://www.infoq.cn/article/L1oIV0GORfNfuysaHfL4?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">GitHub&nbsp;关系型数据库垂直分库实践</a>\"</p><p><a href=\"https://www.infoq.cn/article/bWhDOufOZrL7r3ZuBopy?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">GitHub 年度报告：中国成继美国后使用开源最多国家，Python 赶超 Java 成第二热门语言</a>\"</p><p><a href=\"https://www.infoq.cn/article/bCt0afY2e0mMO0vYKwZt?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">怎样利用 Dependabot 来保护 GitHub?</a>\"</p><p><a href=\"https://www.infoq.cn/article/2018/06/github-future-expected?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">GitHub&nbsp;的未来，可期</a>\"</p>",
    "publish_time": "2024-01-14 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]