[
  {
    "title": "持续发酵的可组装技术，如何引领企业级PaaS平台的未来？",
    "url": "https://www.infoq.cn/article/xDKGqSOAkSKGJiAoj0WY",
    "summary": "<p>随着数字化转型浪潮的兴起，企业级 PaaS 平台的重要性与日俱增。与此同时，软件开发商也在不断改进 PaaS 平台技术，持续吸纳创新的软件思想与工具方法，以期为企业提供更优秀的技术底座服务。</p><p>&nbsp;</p><p>7月19日，<a href=\"https://www.infoq.cn/video/HFCr7OAxDIRFyNPOYhfD\">InfoQ《极客有约》栏目</a>\"就将目光聚焦在可组装技术，并邀请到了来自金蝶中国的苍穹平台与技术规划部首席专家彭璐老师。彭璐老师从苍穹平台的研发实战经验出发，为我们介绍了可组装技术的趋势以及落地情况，并展望了可组装技术带来的创新与价值。本期栏目的对话内容整理如下，供读者参考回顾。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e8/e82a526bc052cac098dfd70d6a2b8508.png\" /></p><p></p><p>InfoQ：您日常工作的范畴和经常关注的技术热点主要有哪些？</p><p>&nbsp;</p><p>彭璐：<a href=\"https://xie.infoq.cn/article/af80c4aa6f16066c93006d97b\">苍穹平台</a>\"是金蝶公司的统一技术底座，也是多种业务的中台和可组装平台。我主要负责中长期技术规划和关键特性的研究和预研、概念系统研发，以及关键特性在客户侧的验证工作。我最早是做企业管理系统，负责大型应用系统的规划、设计、实现，主要关注这一领域的技术趋势，以及企业中间件系统等衍生领域。随着技术发展，我也开始关注云计算、AI 和大数据等热点，现在更多关注平台的体系结构与规划主题。</p><p>&nbsp;</p><p>InfoQ：在 Gartner 发布的《2022 年十二大战略技术趋势》中，“可组装的应用”位列其中。但相信很多人对这个概念还是相对陌生的，能否请您先做个科普：我们应该如何理解“可组装应用”？</p><p>&nbsp;</p><p>彭璐：可组装应用本质上是用模块化的方法来搭建企业信息系统，可以从两个方面来理解它：</p><p>&nbsp;</p><p>可组装应用是从可组装企业这一业务愿景发展而来的。它会从业务架构推演到信息系统架构，意味着信息系统架构也是可组装的，与 SOA 等模块化技术一脉相承。从软件厂商的角度来讲，可组装应用意味着软件交付物出现了范式转变。过去软件公司更多提供的是套装成品应用，现在会提供更小的产品应用粒度，更接近业务组件，这些应用可能在企业侧进行再集成和再组装。</p><p>&nbsp;</p><p>InfoQ：为何可组装应用在当下如此火爆，这背后有哪些原因？</p><p>&nbsp;</p><p>彭璐：第一，今天的竞争环境非常复杂和模糊，充满不确定性。这需要企业具有更强的韧性，企业的业务和经营模式需要具备抗打击能力，对黑天鹅事件要能够敏捷响应，敏捷和韧性的诉求就会导向模块化的方法，进而推动可组装应用的流行。</p><p>&nbsp;</p><p>第二，近年来软件技术进展明显，组件化、模块化的基础和通用技术迅速普及。现在业务组件和信息系统的构建也在走向组件化，而大量 IT 系统的使能技术使软件可以更多追求业务层面的组件化、服务化。这些都导致企业的关注点导向组装式应用与模块化的 IT 系统。</p><p>&nbsp;</p><p>第三点，软件厂商在更大的市场竞争压力下，面对上述客户诉求会逐渐将自身提供应用的范式从一体化转向可组装模式，从而满足客户企业的诉求，提升解决方案竞争力。以金蝶为例，我们正在从单一的产品供应商转向以生态为主，打造立体化产品矩阵的厂商。这种生态诉求也意味着我们的系统不应该是一体化的系统，而应该是可组装系统。</p><p>&nbsp;</p><p>InfoQ：可组装技术同云原生技术有什么区别？</p><p>&nbsp;</p><p>彭璐：这两种技术是不同层面的。云原生更关注应用本身及应用的开发、构建、运行过程，重点考察应用在整个生命周期中如何更好地应用容器、微服务、虚拟化等云原生技术的能力。</p><p>&nbsp;</p><p>可组装技术更多体现在信息系统的架构层面。应用和应用组件有可能来自不同供应商，可组装技术考虑的是将这些模块组装成信息系统，更关注系统从构建到演化的过程中如何以可组装的方式获得增强提升。</p><p>&nbsp;</p><p>InfoQ：企业在构建可组装应用的过程中，一般会遇到怎样的困难和挑战？</p><p>&nbsp;</p><p>彭璐：从系统视角来看，这样的系统不是单一的系统，而是来自不同供应商，由很多部门的子系统构成整个企业应用的大系统，我们称为系统的系统，或者叫 system of systems。它的子系统往往没有统一的技术规范，生命周期管理也非常复杂。</p><p>&nbsp;</p><p>另外，企业应用不单纯是技术系统，我们有时候称为 social technology，是社会技术系统。它既关注企业内部的组织，也关注企业在应用系统时面对的客户、伙伴、供应商。对于供应商来讲，各个系统也同时具有社会的一面和技术的一面，这些技术和社会系统如何以技术和社会的视角来进行联合优化、相互驱动，也是颇具难度的。</p><p>&nbsp;</p><p>从企业层面讲，复杂系统如何制定建设策略、安排建设顺序，如何处理复杂系统的相关关系，怎样沟通内部用户...这些都是很复杂的挑战。但这些问题不是可组装技术特有的，而是企业信息系统天然的难题，只不过我们现在希望通过可组装方式解决其中一些问题。</p><p>&nbsp;</p><p>InfoQ：组装式应用面临的一大难题是，如何解决各个应用之间的集成标准问题？</p><p>&nbsp;</p><p>彭璐：现代化的系统都有一些较为通用的接口，更老的系统只能使用数据交换、中间件等比较老的方式，但大多数子系统的集成方式还是相对统一的。相比之下，不同系统使用的不同语义标准会带来更困难的挑战，是企业信息系统的典型难点。</p><p>&nbsp;</p><p>不同的子系统之间整合使用，中间可能会存在很多复杂的相互调用关系。在故障排查层面也有一些理论实践，例如统一的日志、调用协议，或者对系统进行网格化设计，可以通过隔离的方式来排除故障。</p><p>&nbsp;</p><p>InfoQ：企业要具备可组装能力需要有三方面的准备：组装式思维、组装式业务架构、组装式技术。这三部分听起来非常抽象，能否具体解释一下？</p><p>&nbsp;</p><p>彭璐：如果我们把组装式这三个字去掉，可能反而更容易理解。所谓组装式思维，对企业来说就是一种文化。我们要关注不同的关系人、关注系统的生命周期，要相信去中心化的系统，设法将去中心化的系统和企业的管控治理有机整合在一起。</p><p>&nbsp;</p><p>企业对组装式业务的诉求产生了组装式业务架构。组织、流程、信息、数据通过组装式的视角来搭建，它用的很多方法和以前典型的业务架构也没有多大区别，而组装式技术就是底层的技术支撑，是 IT 系统的骨干。</p><p>&nbsp;</p><p>InfoQ：可组装应用在企业当中的落地情况如何？现在是什么样的阶段？</p><p>&nbsp;</p><p>彭璐：中国的大型企业在组装式应用方面已经有了比较深的认识，做了很多实践。他们的信息系统本来就是多样化的，是很多东西凑成的。他们很久之前就有打破信息孤岛的诉求，而组装式应用其实是过去理念的进化。比如，企业不再让自己的信息系统依赖于 SAP、Oracle 这种套件式系统，会选择适合自身的应用来搭建领域应用，同时用可组装的方式组装成满足企业特定需求、可持续发展的 IT 系统。</p><p>&nbsp;</p><p>但不同厂商对于可组装技术的理解程度是不一样的，不同领域的厂商也有不太一样的理解，也有很多企业是拿以前的技术方案套了可组装的名字，新瓶装旧酒，落地效果就会参差不齐。</p><p>&nbsp;</p><p>InfoQ：请简单介绍一下金蝶云苍穹。</p><p>&nbsp;</p><p>彭璐：金蝶云苍穹正式发布有五六年了，但之前在金蝶的业务平台上差不多积累了 20 年。它的诞生背景是这样的：</p><p>&nbsp;</p><p>金蝶过去的技术在云计算、移动互联网等新计算环境之下有了更大的市场机会，伴随而生的还有新的客户需求，推动了金蝶的技术演进。金蝶希望将长期积累的平台能力，包括业务组件、组装技术、模型驱动技术等，通过新的平台融会贯通，快速建设企业的 IT 信息系统，帮助合作伙伴快速构建应用。</p><p>&nbsp;</p><p>苍穹诞生后又恰逢数字化浪潮、国产化替代、信创产业政策，得到了很好的发展机遇。近年有很多大型客户纷纷使用苍穹平台作为 IT 基础设施，也纷纷用我们的应用作为企业核心应用或者核心业务组件。苍穹的核心应用场景有财务、人力、供应链、税务，更偏向管理应用。</p><p>&nbsp;</p><p>InfoQ：可组装概念有哪些技术提供支撑？</p><p>&nbsp;</p><p>彭璐：可组装概念涉及的大多数技术并不是全新的，而是对已有技术的再组合和用法创新。比如， RPA 在业务领域属于超自动化或者认知计算的一部分，原来关注的是怎样用流程、机器模拟人员操作 UI 的过程。而可组装概念会把这些技术组合在一起，实现异构业务系统的内外部服务和流程的自动化关联。</p><p>&nbsp;</p><p>可组装技术还依赖已有技术的发展，比如，机器学习技术可以让 RPA 具备更强的认知能力，有更多的数据处理能力，能够处理更多、更大、更加异构的数据整合和组装需求，可组装技术是来源广泛的技术组合应用的结果。</p><p>&nbsp;</p><p>InfoQ：小微企业该如何利用可组装技术？</p><p>&nbsp;</p><p>彭璐：小微企业有很多跟大型企业不一样的诉求，比如，他们可能需要更短的建设周期、更低的可用成本。一些小微企业通常不会直接购买平台，但他们会使用基于可组装平台打造的可组装应用。而且这些可组装应用可能是基于公有云的，并会把不同行业细分领域的应用组装在一起。针对这样的需求，我们也提供了这一类的产品和服务。</p><p>&nbsp;</p><p>InfoQ：金蝶本身就是可组装技术的最佳实践者，我们有没有经验可以分享？</p><p>&nbsp;</p><p>彭璐：首先，要做可组装业务或者可组装应用，最重要的是回归到业务的本愿。企业要做好 IT 系统的定义，想清楚具体的策略，规划好不同阶段的任务优先级，做好 IT 战略规划，下一步才是具体的方案选择。</p><p>&nbsp;</p><p>其次，可组装本身不是企业 IT 系统的目标，只是一种实现方法，是否要做可组装，取决于 IT 系统建设是否有明确的价值驱动。企业要思考可组装能解决什么问题，比如敏捷问题、供应商替换问题，或者让某些关键业务系统能够更符合业务目标等等。企业必须把这些价值点想清楚，然后用可组装的方式来达成业务价值，而不是为了可组装而可组装，为了技术的升级换代而升级。</p><p>&nbsp;</p><p>InfoQ：作为开发者来说，该如何决定是否学习一项新技术？技术决策者又该如何对新技术做选型和引入？如何平衡新技术和业务之间的关系？</p><p>&nbsp;</p><p>彭璐：任何技术的诞生一定是为了服务现实世界，所以这本身就是很好的评估标准：新技术是怎样解决我们的老问题，有没有带来解决方案上的改进？新技术的价值并不在于新，而是因为它更好地解决了这些老问题。并且大多数新技术不能带来天翻地覆的效果，所以要仔细评估技术带来的效果和客户价值，以及它的应用场景。</p><p>&nbsp;</p><p>另外，保持对技术的敏感度是技术人必须做到的。因为技术行业发展太快了，可能有很多技术组合会让原来不重要的技术变得非常重要，或者有一些技术不能解决这个问题，结果解决了另外领域的问题。对这些趋势保持敏感度是必要的，只不过一线工程师、技术架构师、技术决策者等不同岗位看待技术的视角会有所不同。</p><p>&nbsp;</p><p>InfoQ：感谢彭老师的精彩分享，谢谢大家！</p>",
    "publish_time": "2022-07-28 10:24:56",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "京东这样用 Flink：适应业务的才是最好的",
    "url": "https://www.infoq.cn/article/5DWgX797HP3Cxw4GXyc9",
    "summary": "<p>嘉宾 ｜ 付海涛</p><p>编辑 ｜ 贾亚宁</p><p></p><p>Apache Flink 功能强大，支持开发和运行多种不同种类的应用程序。事实证明，Flink 已经可以扩展到数千核心，其状态可以达到 TB 级别，且仍能保持高吞吐、低延迟的特性。出于对云原生和 Flink 之间的关系，以及最新提出的流式数仓这个概念的好奇，我们特意邀请了付海涛老师。</p><p></p><p>付海涛老师目前在京东担任资深技术专家，日常工作包含 Flink 引擎的优化增强、容器环境任务的优化和智能运维等；同时老师也是 <a href=\"https://time.geekbang.org/qconplus/home\">QCon+ 案例研习社</a>\"「<a href=\"https://time.geekbang.org/qconplus/album/84\">Flink 在实时计算应用场景中的落地实践</a>\"」专题的出品人，一起来看看他的独家理解吧。</p><p></p><h3>一、如何快速恢复作业</h3><p></p><p></p><p>我们日常的工作中，容器环境复杂多变，pod 被驱逐或重启时有发生，这些都会导致任务重启恢复，对业务造成较大影响，特别是对于很多交易类的重要业务来说是不可接受的。为此，我们进行了作业快速恢复的定制优化，主要从两方面着手：</p><p></p><p>针对容器环境，加快 pod 异常（被驱逐或重启）的感知速度，迅速恢复作业。</p><p></p><p>在官方的默认实现中，如果 pod 发生异常，可能会从故障 pod 下游算子感知网络连接断开异常或者 jobmanager 感知 taskmanager 心跳超时两个路径感知，无论哪个路径，所需总时长会比心跳超时多一些，时间较长。</p><p></p><p>为此，我们优化了 pod 异常感知的速度，在 pod 异常被停止时或感知到容器内 taskmanager 进程异常退出时，主动通知 jobmanager 哪个 taskmanager 发生了异常，这样一来，jobmanager 就可以在 pod 异常的时候第一时间得到通知，并及时进行作业的故障恢复。我们讲这项优化在典型场景下进行了测试，集群有空余资源时，任务 failover 的时长从原来的 60 多秒缩短到几秒，效果还是比较明显的。</p><p></p><p>减小 pod 异常对作业的影响范围。</p><p></p><p>虽说社区版在 1.9 之后，提供了基于 region 的局部恢复策略，在 Task 发生故障时，只重启故障 Task 关联 region 内的 Task，在有的场景下可以减小影响；但是很多时候一个作业的算子之间都是 rebalance 或者 hash 等全连接的方式，region 策略也起不到太大作用。为此，针对允许少量丢数的业务场景，我们开发了基于故障 Task 的单点恢复策略，Task 发生故障时只恢复该故障 Task，非故障 Task 不受影响，从而减小故障 Task 对整个作业的影响范围。</p><p></p><p>通过这项优化，在线应用取得了不错的效果，其对作业的影响范围大大减少（取决于具体的作业，能够减少为原来的几十分之一到几百分之一），避免了业务的断流，恢复时长也大大降低了。</p><p></p><h3>二、流批一体在京东的实践</h3><p></p><p></p><p>流批一体是 Flink 社区最近几年比较火的一个方向，它可以解决流批割裂带来的高开发和运维成本、数据口径不一致等业务问题。对于流批一体，我们团队也进行了一些探索和实践，并在部分的实际业务场景中进行了落地。</p><p></p><p>要在实际业务场景中应用流批一体，需要满足几个前提条件：</p><p></p><p>在生产环境，同一个口径指标需要分别用流任务进行实时加工和批任务进行离线加工，此时才需要考虑是否要做流批一体；实时加工和离线加工的数据模型大体一致；实时加工和离线加工的逻辑可以复用。</p><p></p><p>这里举一个实际案例，有个业务团队需要针对流量买卖黑产进行舆情分析，它的原有架构如下：</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/ad/adc8366e5111996f3181b7a1c16d0fd0.png\" /></p><p></p><p>从图中可以看到，这是一个典型的 Lambda 架构：源端通过爬虫爬取了一些相关信息并写到 JMQ，在数据同步到 JDQ 后，通过 Flink 进行处理，写入到下游的 JDQ，这是实时链路；与此同时，通过 DTS 数据传输服务将上游 JDQ 的数据同步到 HDFS 落一份 Hive 表，然后通过 Hive 表去进行离线的数据加工，这是离线链路。</p><p></p><p>此外，该业务离线、实时加工的模型和计算逻辑是一致的，并且端到端的实时性要求不高，可接受分钟级别延时。</p><p></p><p>基于此业务特点，我们直接把中间存储环节从 JDQ 换成了 Iceberg，然后通过 Flink SQL 去增量读取，实现业务的加工逻辑，这样完成了流批两条链路的完全统一，其中 Iceberg 表中的数据也可以供 OLAP 去查询或离线去做进一步加工。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/3d/3d567c3a48a8cec20d42d095479be0d1.png\" /></p><p>通过上图的架构，不仅实现了计算层面的流批统一，也实现了存储层面的流批统一。经过业务方实际应用反馈，整个链路的时延在一分钟左右，存储、计算成本显著降低，开发、运维成本降低 30%，获得了不错的实际业务效果。</p><p></p><h3>三、流式数仓</h3><p></p><p></p><p>流式数仓是 Flink Forward Asia 2021 主题演讲中提出的下一步的重要发展方向，是对近几年比较火的流批一体大方向下对数仓场景落地方案的思考。它可以解释为“make data warehouse streaming”，就是让整个数仓的数据全实时地流动起来，且是以纯流的方式而不是微批（mini-batch）的方式流动，从而让当前业界主流数仓架构再进阶一层，实现真正端到端全链路的实时化分析能力。</p><p></p><p>从目前来看，业内还没有这样一个端到端全流式链路的成熟解决方案，虽说可以通过一些纯流的方案 + 纯交互式查询方案 + 离线数仓方案（比如：Flink + Kafka + ClickHouse + HBase + Hive…）叠加起来达到近似效果，但这样系统复杂性又太高了。但如果业务对时延要求不高，可以通过 Flink+ 数据湖（比如 Iceberg）的方案作为替代方案，可以解决很多场景的问题。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/3e/3ea66b9e82be78b40d333cc5115225b9.jpeg\" /></p><p></p><p>流式数仓要做到在实现高时效性的同时，保证整个架构对于开发和运维人员的简洁。要达成这个目标，Flink 需要一个与本身流批一体理念真正配套的存储，于是社区提出了新的 Dynamic Table Storage，即具备流表二象性的存储方案。</p><p></p><p>数仓的分层数据全部放到 Flink Dynamic Table 中，通过 Flink SQL 实时串联整个数仓的分层，数据在各个分层间进行实时流动，并可以对历史数据实现离线修正；与此同时，用户可以利用 Flink SQL 实时探索和分析 Dynamic Table 中流动的数据，从而真正做到实时离线分析一体化：统一的 SQL、统一的数据存储、统一的计算框架，可以实现全链路数据实现秒级和毫秒级的实时流动，并且所有流动中的数据皆可分析，没有任何数据盲点，用一套 API 就完成所有的数据分析。</p><p></p><p>这样一来，实时、离线以及交互式查询分析、短查询分析等场景，都可以用它来统一解决。目前社区已经初步走通整个流程，但真正要实现全实时链路且足够稳定，还需要解决一系列工程问题，可以持续关注社区发展并参与进去。</p><p></p><h3>四、云原生如何给 Flink 赋能</h3><p></p><p></p><p>Flink 和云原生是密不可分的两个场景，云上环境和弹性可以给 Flink 计算更多的空间，加速其应用和普及；同时，面向云原生，Flink 也在云原生的趋势下对部署架构和资源管理方式持续演进优化，以更适应云原生的场景并发挥更好的性能。</p><p></p><p>首先云原生容器化具有优异的 DevOps 能力、资源隔离、统一调度等特性，可以快速部署 Flink 应用，并提供更好的资源管理和隔离机制，避免应用的互相影响，提升计算的稳定性。</p><p></p><p>其次云原生弹性化调度的能力，可以使 Flink 应用按需动态扩缩容，降本增效。当然这也需要对 Flink 进行相应的调整和优化。为此，Flink 社区也进行了适应云原生持续的升级迭代，能够更加适应云原生环境下的运行。比如，在 Flink 1.13 中支持了响应式伸缩的功能，可以根据云上资源动态扩缩容的变化在计算拓扑上以自适应模式调整并发，从而适应云上资源变化。</p><p></p><p>最后，云原生服务混部和资源共享能力，支持将不同负载的服务比如 Flink 流批计算、在线服务、机器学习等服务混合在一起，获得更好的资源利用。</p><p></p><h3>五、Flink 避坑指南</h3><p></p><p></p><p>平台建设过程：根据业务特点选择合适的作业部署模式，并考虑如何迭代升级 Flink 的版本，这些会在很大程度上影响后续平台的运维成本。</p><p></p><p>目前 Flink 支持 session、per-job、aplication 三种部署模式，都有各自不同的优缺点和适用场景，需要做一个权衡。我们平台起初有很多业务有一个集群跑多个作业的业务需求，为此选择了 session 模式，采用该模式预分配资源，提交作业可以直接运行，省去了每次分配资源的开销，适用于对延迟非常敏感的业务，特别是在紧急情况热备切换时特别有用。</p><p></p><p>不过，这与此同时也带来了新的问题和挑战，比如同一集群的多个任务之间会存在资源抢占，作业存在内存泄漏时多次提交会导致 OOM 等问题，需要付出额外的努力去定制优化引擎来解决这些问题。</p><p></p><p>此外，社区版 Flink 的版本迭代升级很快，不同版本之间可能会存在不完全兼容的情况，在跟随社区步伐升级 Flink 版本后，平台会出现多个 Flink 版本并存的问题，这会带来较大的运维成本，如何推动业务平滑升级 Flink 版本、减少运维压力是一项具有挑战性的工作。一种有效的做法是可以采用新作业使用新版本、旧作业分级处理（对于不重要业务，优先推动升级，在解决完跨版本不兼容问题后，再升级重要业务）的方式来解决这个问题。</p><p></p><p>如果要上云，除了基本的上云适配，还需要额外关注容器化带来的性能损耗（比如网络、磁盘等），并注意容器化环境相比物理机环境产生的一些新的问题（比如容器网络连通问题、容器驱逐或重启频繁、OOM killed 等），这些与物理机环境运行有较大差异，需要结合具体容器环境及业务进行针对性优化。</p><p></p><p>最后是多关注和参与社区。在遇到问题的时候，可以去社区多多交流，很多问题都是大家之前遇到过的，会有一些现成的经验可以参考，少走一些弯路；同时将一些方案或特性反馈给社区，也可以形成良性正向循环。</p><p></p><h4>嘉宾介绍</h4><p></p><p></p><p>付海涛&nbsp;&nbsp;京东资深技术专家</p><p></p><p>拥有多年中间件、互联网云平台和大数据开发经验，对分布式计算、容器、微服务等有较深入的理解。2018 年加入京东，主要负责实时计算引擎 Storm、Flink 的相关优化和开发工作。</p>",
    "publish_time": "2022-07-28 11:04:44",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "基于Apache Atlas的大数据资产平台集成与优化实践",
    "url": "https://www.infoq.cn/article/D7YGQOJTiIVLFguGOkgb",
    "summary": "<p><strong>直播简介</strong></p>\n<p>火山引擎 Dataleap 是一款一站式大数据研发套件产品，提供数据集成、开发、运维、治理、资产、安全等全链路解决方案。元数据作为其中数据资产的主要模块，提供元数据接入、检索、血缘管理等功能。</p>\n<p>本次分享为构建 Dataleap 统一元数据管理平台，基于开源 Apache Atlas 进行架构、功能、性能等多方面优化，并平滑升级的落地实践。</p>\n<p><strong>听众受益</strong></p>\n<p>了解社区主流统一元数据管理平台<br />\n了解如何借助 Apache Atlas 构建企业内部统一元数据管理平台<br />\n深入了解字节跳动内部统一元数据管理平台设计思路及技术实现</p>\n<p><strong>适合人群</strong></p>\n<p>大数据开发从业者。</p>",
    "publish_time": "2022-07-28 11:10:21",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "揭秘百度网盘背后的存储之道，关注这场直播！",
    "url": "https://www.infoq.cn/article/TEoQuKggMsokHmFcxk9y",
    "summary": "<p>高强度的算力需求下，业务对存储的要求越来越高，而且对于深耕存储领域的开发者来说，没有谁不想探索百度网盘背后的秘密。</p><p></p><p>百度网盘已为超过 7 亿用户提供专业、安全的云存储服务。实际上它除了提供云存储服务以外，还提供丰富的数据和内容应用类服务，同时它也支持企业客户。百度网盘的底座存储正是基于百度沧海构建的，有着非常复杂的数据管理机制。对于有大规模数据存储的企业及组织机构来说，百度网盘的实践经验有可借鉴之处。</p><p></p><p>如百度网盘这样的大规模数据存储，具体挑战有哪些？如何应对解决？百度网盘在存储技术层面又是怎么做的？一切答案，尽在《面向百度网盘的大规模数据面存储架构思考与设计》线上公开课，百度智能云存储高级架构师 / 云存储数据面底座（Aries）技术负责人郭波将作为讲师，详解大规模数据面存储架构思考与设计，以及百度网盘的最佳实践。</p><p></p><p>扫描海报二维码或<a href=\"https://www.infoq.cn/form/?id=1111&amp;utm_source=gzh&amp;sign=iq_62df4ae32e47e\">点击链接</a>\"预约直播，一探究竟吧！</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/45/45ce337a0b11fb31e608014e50e7fee9.jpeg\" /></p><p></p>",
    "publish_time": "2022-07-28 11:29:39",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "转型成功率 20%，数字化头部企业做对了什么？｜ DTDS峰会",
    "url": "https://www.infoq.cn/article/au3KrUxVKxv6ccHu9cfs",
    "summary": "<p>尽快开展数字化转型，是企业适应新时代经济竞争的生存命题。众多企业在数字化探索的进程中，深刻地认识到员工数字能力发展对转型成败的关键性作用。</p><p></p><p>各个行业的数字化头部企业都非常重视数字人才团队的培养，也已逐步沉淀出实践案例。极客时间在服务数千家企业的过程里发现，目前涌现出来最多的需求，是对于权威且实用的数字人才标准的认定和匹配业务发展战略的数字技能培养体系。</p><p></p><p>全面高质量的数字化转型，将分解渗透到企业各个部门来实现，掌握数字化工作思维和技能，是时代赋予每个员工的使命。作为企业数字战略创新推动者，CXO 们该具备怎样的数字化视野，如何借助数字化转危为机，帮助企业穿越下行经济周期？作为数字化组织建设的主要推手，HR 如何摆脱工具人定位，高效运用数据分析技能，从 eHR 向 DHR 进化？作为业务转型的中坚力量，业务架构师们如何锻炼业技融合能力，实现业务创新破局？此外，从宏观环境看，各行业该如何顺应数字化趋势，在国家数字化蓝图中瞄准战略位？DTDS 线上峰会将为您一一揭秘。</p><p></p><p>8月9日，DTDS&nbsp;全球数字人才发展线上峰会邀请政府和产业的权威，金融、汽车、制造、ICT、互联网企业的数字化负责人，数字化组织和人才发展专家同台交流，从多维视角分享数字化先行者如何通过人才数字能力转型应对组织转型、业务转型、技术转型带来的考验。您将收获：</p><p></p><p>01 组织数字化转型 ✦</p><p>●&nbsp;数字化如何助力企业穿越经济下行周期？</p><p>●&nbsp;如何建立数据驱动决策的组织？</p><p></p><p>02 岗位数字化转型 ✦</p><p>●&nbsp;IT 团队要如何适应企业数字化转型？</p><p>●&nbsp;如何搭建 HR 数字化架构体系？</p><p>●&nbsp;如何设计业务架构师培养思路与方案？</p><p>●&nbsp;数字人才如何推动内部审计转型？</p><p></p><p>03 行业数字化转型 ✦</p><p>●&nbsp;车企如何应对数字化转型带来的人才挑战？</p><p>●&nbsp;金融企业如何实现员工数字能力转型？</p><p>●&nbsp;ICT 企业如何在转型中培养数字化人才？</p><p>●&nbsp;ICT 讲师评定认证项目将给行业带来哪些转变？</p><p>●&nbsp;如何借助生态力量获取行业数字人才培养解决方案？</p><p></p><p>五大行业代表</p><p>14位大咖讲师</p><p>专家级经验分享</p><p>尽在 8 月 9 日 DTDS 全球数字人才发展峰会</p><p>扫描下图二维码，免费报名 DTDS 线上峰会</p><p>👇👇👇</p><p><img src=\"https://static001.infoq.cn/resource/image/cf/e2/cfa25569c94c97acbddc30224476b0e2.png\" /></p><p></p>",
    "publish_time": "2022-07-28 11:50:21",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "中小型基金公司是如何考虑数据建设“性价比”的？",
    "url": "https://www.infoq.cn/article/1zd5MLr5iQOBzgAaGpOm",
    "summary": "<p>一直以来，基金都被认为是一个有门槛的投资领域，不仅仅因为产品的复杂性，也因为渠道的局限性。过去，投资者主要通过银行代销和基金公司自销渠道购买基金产品，但前者手续费昂贵、后者产品单一，只能满足少数投资群体的需要。</p><p></p><p>直到<a href=\"https://www.infoq.cn/article/zz3JtiokOUIrJXHl4wLE\">互联网金融</a>\"平台盛行，局面开始发生改变。</p><p></p><p>由于互联网平台的购买流程相对简单、手续费用较低，而产品来源和种类又更为多样化，近几年越来越多的大众投资者开始涌入基金领域；同时，通过接入互联网平台，基金公司也从幕后来到台前，开始直接面对海量投资者。</p><p></p><p>这些改变于基金公司而言亦喜亦忧。流量涌入带来的自然是交易量的提升，但一方面，传统基金交易与互联网平台的基金交易数量级已经不可同日而语，这对基金公司底层技术能力是一次从量变到质变的考验。</p><p></p><p>在日前接受InfoQ专访时，<a href=\"http://www.jtamc.com/\">九泰基金</a>\"总经理严军举例，过去传统基金公司的交易最多只有几万到上百万的并发量，通常只有在新基金申购的最后几天才会达到几十万，最多上百万的峰值；而互联网平台考验的是短时并发，流量高峰甚至会超过十亿级。</p><p></p><p>严军强调，面对这种海量的动态申购赎回，用户在意的是体验感，也就是说在业务交易过程中具有连续性。如果按照传统方式处理这种大并发情况，数据处理系统可能就会直接宕机。</p><p></p><p>另一方面，更多大众投资者甚至是理财小白的入场，这要求基金公司必须具备更强大的风险管控能力，并且能够持续优化投资组合，满足投资者多样化的需求。在这个过程中，只有拿捏住<a href=\"https://xie.infoq.cn/article/73ddf8aa3ca6456393898b632\">数据</a>\"，才能拿捏住变局。</p><p></p><p>但是，对于像九泰基金这样的小型基金公司来说，和公募基金巨头千亿级、万亿级的基金管理规模相比，目前其体量只有数十亿到百亿级。据严军介绍，在基金行业，考虑到资金成本、资源配比和人员投入等“性价比”的问题，像九泰基金这样体量的公司通常不会自建数据中心，而是通过恒生等第三方平台提供的工具获取交易数据，许多关键的销售数据、申赎数据都无法掌握，更不要说将数据作为资产留存下去，盘活赋能全部业务。</p><p></p><p>不过，九泰基金并没有走这条所谓的“寻常路”。自成立以来，九泰基金就非常重视IT投入，虽然只有10几人的技术团队，但仅用了1年多的时间，就自主构建了自己的数据中心。从搭建系统到数据整理，从数据分类到数据分析，从单一数据指导到群集数据赋能，九泰基金从零开始，蹚出了一条小型基金公司数据能力建设的道路。</p><p></p><h1>摆脱孤岛，小体量公司也要自建数据中心</h1><p></p><p></p><p>过去，传统基金公司的系统架构主要是烟囱式建设模式，一般是基于规划容量进行设计与开发。这是因为那时基金公司推出的产品有限，用户规模可以估计，在极端的情况下，也可通过用户排队等机制来降低系统负载压力。然而，在互联网场景下，互联网金融平台各种活动层出不穷，短时间内发生用户集体申购赎回基金的行为增加，面临数据大并发，这时候再采用简单的等候排队策略，会严重降低用户的体验感。</p><p></p><p>其次，传统基金公司的业务之间很少互相访问，业务服务在设计与运营过程中也缺乏复用的考虑，所以很难满足多个场景并发访问的需求。但是基于互联网，投资者与基金公司的交互频率将越来越高，显然这种设计和运营模式很难快速响应用户需求。在竞争激烈的市场上，拥有速度和体验便等于拥有了用户的注意力与认可，这意味着，传统基金公司可能因此错失大把商机。</p><p></p><p>除了快速为用户提供产品之外，关注基金的销售数据、用户的申赎数据，进而洞察用户的深层需求也至关重要。但是，传统基金公司过往的数据资源，要么已经在自己原有的历史系统中，要么存在于各种银行和券商等渠道中，这造成了数据整合难、质量差、无法实时同步等问题，很难为洞察用户需求提供有价值的信息。</p><p></p><p>严军表示，这些“前车之鉴”是促使九泰基金自建<a href=\"https://www.infoq.cn/article/oysNEyvmtF196XfKYtJW\">数据中心</a>\"非常重要的原因。“我们希望能够把系统全部整合在自有的数据平台上，通过数据中心形成一个完整的运行体系，而不是成为一个个孤岛。”</p><p></p><p>据他介绍，目前九泰基金已经构建了投研、营销和内部管理三大数据中心，覆盖了投资、销售、运营等大量数据。这对九泰基金的工作人员来说是意义重大。</p><p></p><p>比如：对于传统基金销售人员来说，以前都是拍脑袋猜测用户的投资偏好，还要一次次地进行问卷调查，不但效率低，销售效果也不一定好。而基于后台数据，销售人员可以进行千人千面的分析，包括哪个地区的人买的最多是什么结构的产品、什么类型的人群喜欢更买哪类产品等等，往往能够给出比较准确的数据分析结果，指导公司改进销售策略；</p><p></p><p>再比如：对于运营人员来说，无论是面对外部监管还是公司内部运营，他们都可以通过数据后台提取需要的数据，仅需2名运营人员，最快在几分钟内，就能生成相关报表。如此一来，既节省了时间成本，又增加了工作的便利性。在适应日益普及的金融监管数字化报送机制过程中，这提供了非常关键的支撑。</p><p></p><p>严军介绍，目前很多小型基金公司会把监管数据报送的工作全部依托给外部第三方公司，这可能造成对报送过程的不可控，不一定能保证项目进度，从而使得公司处于被动状态。</p><p></p><p>但是，他还强调，九泰基金在自主建设<a href=\"https://mp.weixin.qq.com/s?__biz=MzA4NTU2MTg3MQ==&amp;mid=2655212901&amp;idx=2&amp;sn=f21238a5947f5c489899ed52a20d5e2d&amp;chksm=8461f205b3167b131dc3bb78592a89c1974b4f5806fa4730947667db2bd93ecd1ff8d2fee318&amp;scene=27#wechat_redirect\">数据架构</a>\"的过程中，同时还保留了第三方公司提供的系统代码和逻辑，“这么做的好处是，当对同一套数据进行分析时，就可以在两边系统各自跑，如果跑出来对结果完全一致，那证明数据一定是准确的，可以直接上报；如果跑出来的结果不一样，就证明其中有误差，需要员工再次做核对。”</p><p></p><p>也就是说，通过数据中心的自主建设，使得九泰基金大量的经验数据能够沉淀下来，不仅可以构成驱动系统应用的核心，还可以整合资源，通过平台服务支撑各类业务的访问需求。</p><p></p><h1>人员有限，系统该自研还是外购？</h1><p></p><p></p><p>不过，就像罗马帝国不是在一天建成，九泰基金的数据基础也不是在短时间内打好的，在这个过程中，他们也遇到了不少挑战。</p><p></p><p>首先，九泰基金成立时间晚，IT建设完全是从零开始，这意味着在数据处理之前，他还有大量的基础建设工作要补齐。但是，最初九泰基金的技术人员只有不到10人，据严军介绍，他们接到的第一个任务是在一个月时间内，构建14套主要系统。在人员有限，公司业务又必须往前推进的情况下——先建设哪个系统？如何建设？如何最高效地满足当时业务的发展需求？这些问题急需解决。</p><p></p><p>无疑，最快的解决办法是外购技术提供商通用的系统。严军表示，有些企业会担心外购系统灵活度不高、自主性不强等问题，但是，比如销售系统、投资系统等对时效性的要求极高的系统，并非是基金公司的<a href=\"https://qcon.infoq.cn/2022/guangzhou\">技术开发</a>\"强项，通过沉淀投资公司遇到的共性问题，技术商往往能够提供更专业和成熟的方案。所以，这部分的系统九泰基金就会考虑完全外购，不占用非必要的人力，让系统尽快投入使用。</p><p></p><p>另外，针对与业务逻辑有强关联，但短期内自身开发能力又不足的系统，九泰基金则优先选择与外部技术公司共建。在合作共建的过程中，由技术商提供成熟专业的技术、工具，而九泰基金则可以提供具有针对性的数据，以及业务逻辑指导。</p><p></p><p>比如，如何利用工具从系统中抓取所需要的数据？技术工具本身并不是九泰基金的长处，但哪些业务流程是主要的？具体抓取的数据字段又有哪些？这部分就需要九泰基金内部成熟的业务人员与外部专业公司共同参与；再比如，APP可以自己开发，但是其中的安全防护模块，涉及身份识别、密码插件等各种关键安全防护技术，这时候就需要外部专业公司从技术上提供相应服务，把相关安全防护技术产品嵌入到APP中。</p><p></p><p>也就是说，共建的方法可以解决九泰基金一些“当务之急”，利用外部资源补足自身的短板，同时也满足了部分业务个性化的需求。</p><p></p><p>但显然，这仍然不够。随着公司业务的拓展，个性化的需求越来越多，共建系统的弊端也逐渐彰显——如果想进行部分功能的调整，还需要两方人员的花费大量时间共同协商，长此以往，又会加大时间与人力成本，得不偿失。所以，针对个性化极强的系统，九泰基金全都选择了自研。</p><p></p><p>比如，投资系统可以外购，但是研究报告系统最好就要自研。“我们希望对所有的报告自行进行智能筛选，从海量报告中找出高质量的研究报告，从而进行持续的跟踪和评价。目前市场上的研究报告系统普遍差强人意。而且随着基金品种的增多，业务复杂度进一步增强，大家又有差异化发展的目标，这种个性化需求会越来越多。”严军解释。</p><p></p><p>再比如，包括OA在内的管理类系统，九泰基金未来也会选择自研。由于九泰基金处于快速增长期，随着人员的增加、部门的扩张、以及业务的变化等原因，OA系统必须可以及时动态调整，满足公司个性化运营和管理的需求。</p><p></p><p>总而言之，九泰基金在时间紧、任务重、人员有限的多重挑战下，按照任务优先级和系统个性化需求程度分别选择了三种方法建设基础的系统设施，把仅有的技术人员投入到必须自主开发的项目中，充分利用了现有资源，并保证了公司业务的有序运营。</p><p></p><h1>如何才让数据真正带来价值</h1><p></p><p></p><p>众所周知，数据是数字化转型的核心，数据处理又是利用好数据的关键环节，也是最困难的环节。根据严军介绍，企业进行数据能力建设有三个关键部分：数据清洗、数据分类、数据分析。</p><p></p><h2>第一步：数据清洗，要挖掘“业务+IT”复合人才</h2><p></p><p></p><p>“我们刚开始采用的数据系统来自于四五个IT供应商，像恒生、金证、赢时胜、浪潮等。想要做自己的数据中心挑战很大，需要把所有的底层数据全部铺过来，把所有的人员也都铺上去，进行数据加工、清洗、识别。”严军补充道。</p><p></p><p>具体来说，基金业务流程涉及到开设基金账户、认购申赎基金、选择基金分红方式、设置赎回模式等，在这个过程中，包括了用户、产品、销售、交易等海量信息。这些信息又通常会以不同的字段、不同的方式存储在对应的数据中心中。<a href=\"https://xie.infoq.cn/article/8b2e8c2b1609e3f90bf902a3f\">数据清洗</a>\"的目的在于洗掉无效、重复的信息，确保数据质量，让数据尽可能的完整、准确、一致、可用。如此才能够利用数据赋能业务。</p><p></p><p>据严军介绍，业务部门提出的需求是希望在1年内，把九泰基金所有的数据全都梳理清楚。当时，系统中已经沉淀了4年多的数据，规模达到近百TB，并且数据质量参差不齐。对于技术部门来说，这个工作量并不小。虽然交给专门的数据处理公司，速度更快，但是成本高，双方对业务理解还可能会存在偏差。“而且，如果一个公司想真正地提升自己对专业化能力，提升数据准确度和利用效率，这是绕不过去的坎儿，这个工作自己早晚都要做。所以，我们选择自己内部来完成。”</p><p></p><p>时间紧、任务重，但是数据质量的问题丝毫不能马虎。优质的数据意味着更大的商业价值，相反，如果数据质量不佳，将会导致一系列的问题。比如，不准确的数据，面对严格的审查机制是不可能通过的；再比如，数据质量不佳，难以赋能公司运营，无法精准建构客户画像、把握投资需求，更有甚者还可能提出错误的战略方向，影响公司业务发展。</p><p></p><p>严军表示，数据质量的保证没有窍门，唯一的办法，是让对的人去做对的事，让真正懂业务的人去做这个工作。“因为他会知道哪些数据是有用的，哪些是没用的，技术人员如果对这个不清楚，他很可能把一些有效的数据给删掉了，无效的数据却留了下来。”严军说道。</p><p></p><p>但是，这种既懂业务又懂技术复合型人才无论在哪个行业都是可遇不可求的。对于企业而言，解决办法无非两种，一种是在外积累人才资源，另一种是在内培养复合型人才。</p><p></p><p>对于严军个人而言，他曾先后在天津证券、渤海证券、博时基金、信达澳银基金等金融机构长期从事与IT、运营、互联网销售等相关的工作，拥有业务和技术的双重视角。他表示 ，这些经历对于他后续的人才资源积累起到了非常重要的作用，他认为，技术人员必须要走出企业，在专业领域多交流、多学习，只有这样，才能遇见更多优秀专业的人才。</p><p></p><p>针对内部人才培养，需要公司具备一定的战略目标，比如将部分IT人员下沉到业务部门，跟业务部门共同学习。同时，人才激励制度的设定也不可忽视。比如，传统IT人员的工作职责可能仅局限在于技术层面，业绩考核和激励也多以此为标准。然而公司要想进行数字化转型，那么IT人员的工作职责不可避免将会拓展，在这个过程中，第一，在于明确考核、激励的权责界定，给到人才更好的动力；第二，与业务部形成联动机制，共同培养复合型人才。</p><p></p><h2>第二步：数据分类，从业务出发基于关系图谱找到“关键数据”</h2><p></p><p></p><p>如果说数据清洗的目的是设计好楼盘地基，这是必不可少的基础工作；那么<a href=\"https://www.infoq.cn/article/6JEOk7gkzYF4jk1OHNbv\">数据分类</a>\"的目的便在于第一层要建什么，是有选择性的战略部署。</p><p></p><p>严军告诉InfoQ，数据分类的目的在于让大量的数据集群化、条理化，从而更好的赋能公司业务。但是，不同维度各有价值，如何选择一个维度对数据进行分类需要考虑数据分类的目的。</p><p></p><p>通常而言，首先，基于技术角度，需要考虑数据会用来干什么，例如基础查询、建模分析、还是应用于未来人工智能算法中。其次，基于未来发展，需要考虑数据的处理方式，例如原始数据是否会改变、是否会融合产生新数据等情况。若原始数据不会改变，那么数据分级的粒度可以适量大一些；如果以后还要融合产生新的数据，那么数据的分级粒度应当更细致一些，避免数据融合分析过程中，无法拆分数据。</p><p></p><p>过去，很多企业做数据分类是从技术角度出发，再考虑未来业务发展变化。但是，面对的是越来越复杂的业务逻辑，如果先从技术角度进行数据分类，不可避免的会遇到数据分级不合理等问题。九泰基金的做法，是从业务视角出发，先简单做归类——比如，来自于销售系统肯定就是销售数据，来自投资系统肯定就是投资数据，以此类推。</p><p></p><p>“但是，它们之间也不是完全割裂开的，因为有些关键基础数据是一样的，比如客户的基本信息，这些数据在不同业务系统中都会有；再比如投资收益数据，它可能对销售和投资都有指导作用。所以，针对这些错综复杂的数据维度，不能简单地说就它属于哪一类，需要一个‘<a href=\"https://xie.infoq.cn/article/267ad854bcfe80c6bf88ba421\">数据字典</a>\"’，基于‘数据联络图’，找出它们的潜在关系，最后呈现给前端数据使用者的，是一个串联的关系图谱。”</p><p></p><h2>第三步：数据分析，可以参考但不能盲目依赖</h2><p></p><p></p><p>在拥有大量数据的基础上，分析好关键数据，让数据产生价值，这才是关键所在。</p><p></p><p>但是很多企业表示数据利用率并不高，核心问题在于——数据量够不够、数据清洗和数据分类是否做好、数据维度是不是丰富。“首先，基金公司的目标，应该是让自己所有持有人、客户都在自己平台上留下你所需要的信息，这是基础中的基础。”</p><p></p><p>其次，在这个过程中有没有形成统一的数据标准和体系，也会影响数据分析结果。比如说，不同系统对数据的分类维度和标签不统一，就可能出现数据提取有遗漏导致分析结果不准确的情况，或者不同系统间数据不匹配，就会造成数据分析人员不知道以哪套体系为参照。</p><p></p><p>“另外，在这个过程中，企业通常还会遇到很多非常具体的情况。”严军表示，“例如我们通常会判断一个用户使用的手机号归属地就是他的所在地，基于这个共识去做分析。但是，不能排除有人用的是老家的手机号，但长期在外地工作的情况，这时候<a href=\"https://xie.infoq.cn/article/cf6b6f3fd1e56d6daaf15e4bd\">数据分析</a>\"出来的结果就是不准确的。</p><p></p><p>也就是说，即便基于非常扎实的数据准备工作，数据质量非常高、数据体系非常完善，但是数据分析的结果也只能作为一种参考，不能绝对地去依赖它。</p><p></p><p>除此之外，用好AI也能帮助基金公司达到数据分析的目的。举例来说，基金行业最早应用AI的场景就是量化交易，即从不同市场中挖掘投资机会，对海量的交易数据进行分析，制定和优化投资策略和策略组合。</p><p></p><p>在严军看来，量化交易给予了基金公司业务发展的全新逻辑。在传统基金交易中，判断投资影响因素的主要是人，人通过数据分析得出最佳的投资解决方案。但是在量化交易中，分析因子、更换因子，是一瞬间的事情。极端情况下数十、乃至于数百个因子在实时变化，人不可能在变化的一瞬间作出及时应对，而AI则可以通过<a href=\"https://xie.infoq.cn/article/03b80989b6b15c8d5218a18b4\">机器学习</a>\"的方式，知道哪些因子是有效的，哪些因子是无效的，何时应该删除无效因子，何时应该加入新的有效因子。</p><p></p><p>量化分析固然有优势，但是它的进入门槛很高，要做好很难，在中国仍属于小众业务。</p><p></p><p>首先，市场可以提供的相关复合型人才有限。普通的“金融+技术”复合型人才既要有基础的编程技术、软件技术，又要有一定的金融知识，这样的人才在市场上已经是少数。而量化分析人才最重要的是要有强大的数理分析能力，帮助计算以及数据收集分析，对市场进行预测和风险估价。</p><p></p><p>其次，量化投资的投入成本很高，涉及到强大的计算机算力以及数据支撑体系，如：收集大量的数据、建立准确的数据模型、进行多角度数据分析挖掘有效的因子、优化迭代交易系统。</p><p></p><p>所以，量化分析需要的是一个完整的生态，人才和技术同样重要。</p><p></p><p>不过，基金的量化分析虽然难，但严军认为，只有差异化才能够在基金行业中形成竞争力。所以，九泰基金一直将量化投资作为公司一个重要发展方向，并且通过人才和技术升级，基于海量关键数据，以“人才+技术+数据”共同带动量化分析业务发展。如今，在宽基指数、SMART贝塔、量化对冲绝对收益型产品等领域，九泰基金正在探索逐步打开量化产品布局。</p>",
    "publish_time": "2022-07-28 11:53:10",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "又一芯片创业公司倒下，止步于B轮融资，曾立志成为“中国高通”",
    "url": "https://www.infoq.cn/article/UXJczpcgXisBVx0r5gWF",
    "summary": "<p></p><p></p><blockquote>诺领科技走向倒闭是当前半导体淘汰赛的缩影。</blockquote><p></p><p></p><h2>诺领科技被传倒闭</h2><p></p><p></p><p>近日，有传闻称，蜂窝物联网芯片厂商诺领科技走向破产倒闭。</p><p></p><p>7月15日，有诺领科技员工在社交媒体爆料称，2022年6月30日，在拖欠了五月、六月两个月的工资后，诺领科技已经倒闭了。每一个被离职的员工，拿着一份不知道何时兑付、没有具体金额的解除合同的协议。该爆料的原帖现已删除。</p><p></p><p>资料显示，诺领科技成立于2018年9月。这是一家广域无线物联网芯片设计公司，总部设在南京江北新区研创园，并在加利福尼亚、深圳、北京、南京和香港设有分公司和办公室。该公司拥有射频前端、射频、系统、基带SoC和软件开发等设计能力，其广域无线IoT产品布局包括 mMTC, URLLC 和mmWave 的SoC 芯片/芯片组。其全集成&nbsp;SoC芯片产品支持NB-IoT和延伸应用，已落地智能城市、可穿戴设备、物件追踪、资产管理、老人小孩看护等行业。</p><p></p><p>InfoQ查询天眼查，自成立以来，诺领科技累计获得过3轮融资，分别是，在2019年1月1日获得恩然创投的天使轮融资，融资金额未披露；2020年3月12日，拿到华颖投资的A轮融资，融资金额未披露。</p><p></p><p>唯一一次官宣的融资是在2020年8月，诺领科技宣布获得2亿元B轮投资，投资方为盈富泰克、中金资本旗下中金启泓基金、南京江北佳康科技基金、盛宇投资、光远数科、九合创投、江北科投等多家投资机构。投资方里包括多家知名VC/PE机构以及当地的产业资本。这轮投资将主要用于NB-IoT芯片量产，设计下一代产品以及开拓下游细分市场，加速产品应用。</p><p></p><p>自此之后，诺领科技再没传出过融资消息。2021年一年，诺领科技鲜有对外动态，仅在公司官网披露了将携带NK6010免TCXO版芯片亮相2021 MWC的消息。</p><p></p><p>截止7月27日，诺领科技官网已经无法打开，其官方微信公众号更新停留在2022年1月29日。</p><p></p><p>这家年轻的芯片创业公司就这样倒在了B轮。</p><p></p><h2>创始团队豪华，曾立志成为“中国高通”</h2><p></p><p></p><p>诺领科技的创始团队，十分豪华。</p><p></p><p>资料显示，诺领科技创始人之一，前CEO孔晓骅，拥有加拿大麦吉尔大学博士学位和清华大学学士学位。曾在思科和高通任职，拥有15+年的混模电路设计和带队经验；发表了56项低功耗混模设计专利，其中 45 项已经通过。</p><p></p><p>孔晓骅在高通任资深总监期间，曾组建并带领北美80 多人的混模设计团队，40 多人的支持团队，以及60多人的海外团队完成重要混模IP开发。完成 Qualcomm 基带及其射频芯片SerDes 模块市场定义，芯片开发，及用户支持。SerDes被使用在几十亿颗的高通核心芯片上。他还作为高通wirelane PHY物理层标准负责人，代表高通参与MiPi框架下的多种标准制定，多种方案被全球标准采用。</p><p></p><p>2018年，在国内半导体创业热潮之下，孔晓骅选择离职创业。同年9月，孔晓骅找来了朋友王承周一起创办了诺领科技。</p><p></p><p>天眼查显示，孔晓骅已卸任诺领科技（南京）有限公司法人和CEO，且已不在该公司担任任何职位。</p><p></p><p>王承周担任诺领科技现任CEO。王承周的履历也十分光鲜，他曾先后拿到北京大学学士学位和加州大学圣地亚哥分校博士学位，曾担任Quantenna 初创技术骨干。</p><p></p><p>此外，诺领科技的技术团队核心成员来自高通、博通、英特尔、三星、展讯和ZTE等全球知名芯片和通信公司，25%的技术团队成员拥有海外博士学位，75%硕士以上学位，且70%成员拥有10年以上的IC量产设计及相关经验。</p><p></p><p>据悉，在诺领科技创立初期，南京当地曾派出专门的工作人员牵头联系，帮助这家海归创业团队跑工商注册、办证、银行开户等多个流程，还给予其房租和研发补贴等优惠政策。</p><p></p><p>2019年，时任诺领科技CEO孔晓骅曾在南京创新周2019未来论坛·南京峰会上分享了中国半导体业在物联网时代的机遇和挑战。他表示中国半导体行业最近有一股焦虑的气氛，但中国在物联网芯片领域无需焦虑。他对中国物联网市场充满乐观。他认为，中国会是IoT产业的领跑者。他当时预判，中国物联网会在5-10年渗透到各个环节。</p><p></p><p>孔晓骅之所以选择物联网芯片领域创业，是因为他觉得中国有统一的大市场，政策统一，而这些统一在初期市场培育功不可没。中国移动支付产业就是因为空前的统一，成为美国移动支付市场的260倍。因此，孔晓骅认为，中国物联网芯片离焦虑还是有一定距离的。</p><p></p><p>核心团队出现分歧，被认为是诺领科技开始走下坡路的原因之一。据集微网报道，有自称是诺领科技的前员工表示，孔晓骅带领下的诺领科技曾经也是一家踏实做芯片的企业，目标是成为中国的高通，在创业之初，团队加班加点做开发。但后来创始人团队出现了分歧，导致公司出现裂痕。2020年，自孔晓骅2020年离开后，诺领科技再未获得融资。</p><p></p><h2>自研芯片曾打破国内通信芯片开发纪录</h2><p></p><p></p><p>在发展初期，诺领科技也曾创造了一些斐然成绩。</p><p></p><p>诺领科技的核心产品包括包括物联网系统级芯片NB-IoT和Cat-M SoCs。NB-IoT（窄带物联网 Narrow Band Internet of Things）是万物互联网络的一个重要分支，构建于蜂窝网络之上，可直接部署于GSM网络、UMTS网络或LTE网络，可广泛应用于远程抄表、资产跟踪、智能停车、智慧农业、可穿戴设备、智能家居等行业。</p><p></p><p>从NB-IoT的需求出发，诺领开发了“NB+”的NB-IoT芯片产品线。通过“通用芯片+应用”的组合，诺领可以为某些应用提供一站式芯片解决方案，如“NB+GNSS（卫星导航系统）”芯片、“NB-IoT+音频”芯片和“NB-IoT+边缘计算”芯片等。其中，“NB+GNSS”芯片是诺领的拳头产品，实现了通信系统功能和应用的高度集成，同时在功耗和成本上都有一定优势并已经实现量产。</p><p></p><p>2018年底，诺领科技首款NB-IoT芯片NK6010流片，并在2019年5月成功实现联网测试一般情况，做一个通讯芯片需要24-36个月，而诺领科技却用了不到15个月便设计了世界最先进之一的NB-loT芯片，这打破了国内通信芯片的开发纪录。</p><p></p><p>2020年11月，诺领科技宣布NK6010先后通过中国移动（600941）芯片认证测试、中国电信（601728）模组入库测试。2020年，诺领对于该类“大细分领域”物联网芯片的市占率目标定在30-40%以上。</p><p></p><p>据悉，诺领科技NK6010作为业界首颗单芯片支持NB-IoT+GNSS的产品，以其高度集成（射频收发/PA/Modem/AP/PMU）和低功耗GNSS等特点，问世以来备受好评，被称为“专为物联网打造的定位芯片”。使用该芯片实现窄带物联网通信+定位方案，可大幅度缩小产品PCB面积，减少物料数量。而且，NK6010支持Open CPU，提供高至128KB SRAM，可满足物联网应用所需。</p><p></p><p>NK6010核心优势包括单芯片（内置PA、PMU、集成度高、支持Open CPU、FOTA断电续升）；内置GNSS（首个集成GNSS的NB-IoT方案，只需一颗XO实现TCXO的替代，实现成本最优）；最小面积（极小尺寸模块13mmx14mm，大幅减小片上产品的PCB尺寸及物料，省出GNSS芯片及周边器件布板面积，让出更多使用空间）；超低功耗（实现最低功耗的定位功能、低于uA级别的PSM (0.9uA@3.3V)）等。</p><p></p><p>C114的观点认为，诺领科技所在的物联网赛道近年来在政策利好之下发展前景广阔，而诺领科技的失败更多是因为其产品没有竞争力，实力不济。</p><p></p><p>从某一个侧面看，诺领科技走向倒闭是当前半导体淘汰赛的缩影。而诺领科技所在的消费电子赛道下行或是导致其走向终局的重要原因。</p><p></p><p>创投媒体投资界发现，当前，半导体投资已经大面积降温，非头部的创业项目开始面临融资困难，裁员甚至倒闭的一幕开始出现。“最先遭殃的将是一批主攻消费电子芯片的初创公司。”北京一位半导体投资人表示，其团队早已经不看消费类芯片了。因为这类公司技术壁垒并不高，主要是靠市场推广能力和商务能力占据市场。</p><p></p><p>参考文章：</p><p></p><p><a href=\"https://mp.weixin.qq.com/s/Dese4ul7xsfIPdghDtnFxA\">https://mp.weixin.qq.com/s/Dese4ul7xsfIPdghDtnFxA</a>\"</p><p></p><p><a href=\"http://stock.10jqka.com.cn/20220727/c640723962.shtml\">http://stock.10jqka.com.cn/20220727/c640723962.shtml</a>\"</p><p></p><p><a href=\"https://www.163.com/tech/article/EIRL9GFM00097U7S.html\">https://www.163.com/tech/article/EIRL9GFM00097U7S.html</a>\"</p>",
    "publish_time": "2022-07-28 15:01:30",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "【函数式编程实战】(十一) CompletableFuture、反应式编程源码解析与实战",
    "url": "https://www.infoq.cn/article/c2dd85db3e5393ec8707dfbb5",
    "summary": "<p></p><p><img src=\"https://static001.geekbang.org/infoq/1a/1a90ddc599e71add7ba8d3f4008d6b26.gif\" /></p><p></p><p></p><blockquote>前言📫 作者简介：小明java问道之路，专注于研究计算机底层，就职于金融公司后端高级工程师，擅长交易领域的高安全/可用/并发/性能的设计和架构📫&nbsp;🏆 Java领域优质创作者、阿里云专家博主、华为云专家🏆🔥 如果此文还不错的话，还请👍关注、点赞、收藏三连支持👍一下博主哦</blockquote><p></p><p></p><p></p><h1>本文导读</h1><p></p><p>Java代码为了更好的发展和性能，开发了 异步编程的模式，Future异步编程和CompletableFuture 接口都可以实现异步编程，我们通过源码深入理解其原理和设计的思想，Java9中提供了反应式编程（Flow API）我们分析其源码并提供一个响应式查询实战。</p><p></p><h1>一、同步与异步</h1><p></p><p></p><h2>1、为什么要有异步</h2><p></p><p>在Java发展的这20年，他只做了一件事不被淘汰，为了不被淘汰不断的更新jdk的版本，以便使用计算机硬件、操作系统以及新的编程概念。</p><p>Java一开始提供了 synchronized 锁、Runable，后面java5有引入了 java.util.concurrent 包，java7中的 forkjoin 框架 java.util.concurrent.RecursiveTask，到java8中Stream流、lambda表达式的支持，这一切都是为了支持高并发。</p><p>即便如此，多线程虽然极大的提升了性能，如果合理的使用线程池的话，好处，第一可以降低资源消耗，重复利用已创建的线程；第二：提高响应速度，任务可以不需要等到线程创建就能立即执行；第三：提高线程的可管理性。统一分配、调优和监控。但是线程池也不是没有缺点，使用k个线程的线程池就只能并发的执行k个任务，其他任务还是回休眠或者阻塞。</p><p>这时候如果有线程不和其他任务相关联，又可以不用阻塞，就好了。Java8考虑到了，充分发挥了计算机硬件的处理能力，异步API 应运而生。</p><p></p><h2>2、什么是同步？什么是异步？</h2><p></p><p>同步就是 a 程序强依赖 b 程序，我必须等到你的回复或者执行完毕，才能做出下一步响应，类似于编程中程序被解释器（JVM）顺序执行一样（加载 &gt; 验证 &gt; 准备 &gt; 解析 &gt; 初始化）；</p><p>异步则相反，a 程序不强依赖 b 程序，响应的时间也无所谓，无论你返回还是不返回，a 程序都能继续运行，也就是说我不存在等待对方的概念，a 程序就是 异步非阻塞的。</p><p>下面举一个例子就说明什么是同步、什么是异步</p><p><img src=\"https://static001.geekbang.org/infoq/a5/a5e3b6aee6f039d0b53b9d0aff7f9799.png\" /></p><p>异步编程涉及两种风格，Future风格API 和反应式风格API ，Future fun(int a){}，fun( a , x-&gt; {})，这两个模式的实战会在后面小结讲解。</p><p></p><h1>​二、Future异步编程</h1><p></p><p></p><h2>1、Future 接口</h2><p></p><p>Java5中就引入了Future 接口，他的涉及初衷就是异步计算，例如我们结算一个商户下的所有订单，这个时候并不需要for循环去累加，Future 接口使用的时候只需要封装 Callable中，再提交给ExecutorService。</p><p></p><h2>2、Future 接口的使用</h2><p></p><p>Future 接口的使用看下Java8之前是如何使用异步的</p><p><code lang=\"java\">public static void main(String[] args) throws Exception {\n    List orderInfos = Arrays.asList(new OrderInfo(\"123\", BigDecimal.ONE),\n            new OrderInfo(\"456\", BigDecimal.TEN), new OrderInfo(\"789\", BigDecimal.TEN));\n\n    // 创建 ExecutorService 通过它可以向线程池提交任务\n    ExecutorService executorService = Executors.newCachedThreadPool();\n\n    // 异步操作的同时，可以进行其他操作\n    Future decimalFuture = executorService.submit(new Callable() {\n        @Override\n        public BigDecimal call() throws Exception {\n            return reduceAmt(orderInfos);\n        }\n    });\n\n    // Java8 写法\n    Future decimalFuture = executorService.submit(() -&gt; reduceAmt(orderInfos));\n\n    System.out.println(decimalFuture.get());\n}\n\nprivate static BigDecimal reduceAmt(List orderInfos) {\n    return orderInfos.stream()\n            .map(OrderInfo::getOrderAmt)\n            .reduce(BigDecimal.ZERO, BigDecimal::add);\n}\n</code></p><p>异步编程可以在&nbsp;ExecutorService 中，以并发的方式调用另一个线程执行操作，后续调用get() 方法获取操作结果，如果操作完成会立刻返回，如果操作没有完成则回阻塞线程，直到操作完成返回。</p><p><img src=\"https://static001.geekbang.org/infoq/54/5417b62ad5da19dfb1e1d64b1c484e91.png\" /></p><p></p><h2>3、Future 接口的缺陷（局限性）</h2><p></p><p>Future接口 还提供了方法来检测异步计算是否已经结束（isDone() 方法），等待异步操作结束。</p><p>但是当长时间计算任务完成时，该计算的结果通知到另一个长时间运行的计算任务，这两个计算任务都完成后，将计算的结果与另一个查询操作结果合并。</p><p></p><p>就会发生很多性能问题：1、将两个异步计算合并为一个（这两个异步计算之间相互独立，同时第二个又依赖于第一个的结果。）2、此时就要等待&nbsp;Future&nbsp;集合中的所有任务都完成。3、当Future的完成事件发生时会收到通知，使用Future计算的结果进行下一步的操作，不只是简单地阻塞等待操作的结果，每一步都需要等待。</p><p></p><h1>三、CompletableFuture 接口详解</h1><p></p><p></p><h2>1、CompletableFuture 的创建</h2><p></p><p>CompletableFuture.runAsync()也可以用来创建CompletableFuture实例。与supplyAsync()不同的是，runAsync()传入的任务要求是Runnable类型的，所以没有返回值，runAsync适合创建不需要返回值的计算任务</p><p>通过该supplyAsync 函数创建的CompletableFuture实例会异步执行当前传入的计算任务，在调用端，则可以通过get或join获取最终计算结果。</p><p>同事直接new（构造函数创建）也是可以的，下面通过一个实战小例子看下，高并发高性能的添加购物车结构如何设计</p><p><code lang=\"java\">import java.util.concurrent.CompletableFuture;\nimport org.springframework.core.task.AsyncTaskExecutor;\n\npublic class CompletableFutureImpl {\n    @Autowired\n    @Qualifier(\"asyncExecutor\")\n    private AsyncTaskExecutor asyncTaskExecutor;\n\n    public DefaultResponseVO addGoodsCart(HttpServletRequest request, @Valid AddCartReqVO reqVo) {\n        // 添加购物车\n        GetCartItemEntity respVO = mallCartProcess.addGoodsCart(buildAddGoodsCartReqVO(reqBo));\n\n        /**\n         * 异步刷新到购物车\n         */\n        CompletableFuture voidCompletableFuture = CompletableFuture.runAsync(() -&gt; syncAddCacheCheck(respVO), asyncTaskExecutor);\n        // 通过supplyAsync 函数创建的\n        CompletableFuture uCompletableFuture = CompletableFuture.supplyAsync(() -&gt; syncAddCacheCheck(respVO));\n        // 构造函数创建 \n        CompletableFuture completableFuture = new CompletableFuture().runAsync(() -&gt; syncAddCacheCheck(respVO));\n\n        return new DefaultResponseVO(code, msg, respVO);\n    }\n\n    /**\n     * 添加购物车缓存(异步刷新到购物车)\n     */\n    public void syncAddCacheCheck(GetCartItemEntity cartItemEntity) {\n        try {\n            // 添加购物车缓存(异步刷新到购物车)\n            mallCartProcess.getCartInfo(cartItemEntity);\n        } catch (Exception e) {\n            logger.error(\"syncAddCache error\", e);\n        }\n    }\n}<p></p><p></p><h2>​​2、CompletableFuture.supplyAsync 源码分析</h2><p></p><p>本小节讲解CompletableFuture的底层实现</p><p><img src=\"https://static001.geekbang.org/infoq/50/50432c715b87a12625ea56f548a14cd4.png\" /></p><p>上面为java 8中 supplyAsync 函数的实现源码。可以看到，当 supplyAsync 入参只有 supplier 时，会默认使用asyncPool作为线程池（一般情况下为ForkJoinPool的commonPool），并调用内部方法asyncSupplyStage执行具体的逻辑。在 asyncSupplyStage 方法中，程序会创建一个空的CompletableFuture 返回给调用方。同时该 CompletableFuture 和传入的 supplier 会被包装在一个AsyncSupply 实例对象中，然后一起提交到线程池中进行处理。</p><p></p><p>值得注意的是，当supplyAsync返回时，调用方只会拿到一个空的CompletableFuture实例。看到这里，我们可以猜测，当计算最终完成时，计算结果会被set到对应的CompletableFuture的result字段中。调用方通过join或者get就能取到该CompletableFuture的result字段的值。所以，虽然实际创建CompletableFuture的线程和进行任务计算的线程不同，但是最终会通过result来进行结果的传递。这种方式与传统的Future中结果传递方式类似（计算线程set值，使用线程get值）。</p><p>​</p><p><img src=\"https://static001.geekbang.org/infoq/82/828fb4d54689ae1d77fd3b74b89e2b4f.png\" /></p><p>上面为java 8中 AsyncSupply 的实现源码，AsyncSupply的源码很简单。首先，它实现了Runnable接口，所以被提交到线程池中后，工作线程会执行其run()方法。通过对AsyncSupply中run方法的分析，也基本证实我们之前的猜测。即计算任务由工作线程调用run方法执行，并设置到CompletableFuture的结果中。其他线程中的使用方，则可以调用该CompletableFuture的join或者get方法获取其结果。</p><p></p><p>因此，我们只需要搞清楚其run()中的实现即可。在 run() 中，程序首先检查了传入的CompletableFuture 和 Supplier 是否为空，如果均不为空，再检查 CompletableFuture 的 d.result是否为空，如果不为空，则说明 CompletableFuture 的值已经被其他线程主动设置过了（这也是CompletableFuture与Future最大的不同之处），因此这里就不会再被重新设置一次。如果 d.result 为空，则调用Supplier（源码中的 f 变量）的get()方法，执行具体的计算，然后通过 completeValue 方法将结果设置到CompletableFuture中。最后，调用CompletableFuture的postComplete()方法，执行连接到当前CompletableFuture上的后置任务。</p><p></p><h2>3、CompletableFuture.runAsync 源码分析</h2><p></p><p><img src=\"https://static001.geekbang.org/infoq/e7/e710ebcad9b91a687372e587582adb0c.png\" /></p><p>通过上面的源码可以看出，runAsync也会生成一个空的CompletableFuture，并包装在AsyncRun中提交到线程池中执行。这与supplyAsync是完全一致的。由于Runnable没有返回值，这里返回的CompletableFuture的结果值是Void类型的。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/02/02beb1166d6262885258364194133579.png\" /></p><p>AsyncRun的run中，计算的执行是通过调用传入的Runnable（源码中的 f 变量）的run方法进行的。由于没有返回值，所以这里在设置CompletableFuture的值时，使用其completeNull()方法，设置一个特殊的空值标记。&nbsp;设计方面和supplyAsync一致</p><p></p><h2>4、CompletableFuture API 实战</h2><p></p><p>thenApply、thenAccept、thenRun</p><p>thenApply 提交的任务类型需遵从Function签名，也就是有入参和返回值，其中入参为前置任务的结果。thenAccept 提交的任务类型需遵从Consumer签名，也就是有入参但是没有返回值，其中入参为前置任务的结果。thenRun 提交的任务类型需遵从Runnable签名，即没有入参也没有返回值。</p><p></p><p>thenCombine、thenCompose</p><p>thenCombine最大的不同是连接任务可以是一个独立的CompletableFuture。嵌套获取层级也越来越深。因此，需要一种方式，能将这种嵌套模式展开，使其没有那么多层级。thenCompose的主要目的就是解决这个问题（这里也可以将thenCompose的作用类比于stream接口中的flatMap，因为他们都可以将类型嵌套展开）。</p><p></p><p>whenComplete、handle</p><p>whenComplete主要用于注入任务完成时的回调通知逻辑（获得的结果是前置任务的结果，whenComplete中的逻辑不会影响计算结果）。handle与handle接收的处理函数有返回值，而且返回值会影响最终获取的计算结果（产生了新的结果）</p><p></p><h1>四、反应式编程</h1><p></p><p></p><h2>1、什么是反应式（resctive）编程</h2><p></p><p>反应式编程是最近几年才提出的概念，主要有四个特征：响应式，反应式编程的响应速度应该很快，而且是稳定可预测的。韧性，系统出现失败时，任然可以继续响应服务，任何一个组件都能以异步的方式想其他组件分发任务。弹性，影响代码响应的因素的代码（系统）的负载能力，反应式编程可以增加分配的资源，受流量影响后有自动适配的能力，服务更大的负载。消息驱动，各个组件之间松耦合，组件隔离，跨组件通信使用异步消息传递。</p><p>反应式（resctive）编程在应用层的主要特征是任务以异步的方式执行，非阻塞的处理事件流，充分利用多核CPU的特点，大多反应式框架（RxJava等）都可以独立开辟线程池，用于执行阻塞式操作，主线程池中运行都是无阻塞的。</p><p></p><h2>2、反应式流（Flow API）</h2><p></p><p></p><h3>2.1、发布订阅模式</h3><p></p><p>Future&nbsp;和 CompletableFuture 的思维模式是计算的执行是独立且并发的。使用&nbsp;get()方法可以在执行结束后获取&nbsp;Future&nbsp;对象的执行结果。因此，Future&nbsp;是一个一次性对象，它只能从头到尾执行代码一次。</p><p>与此相反，反应式编程的思维模式是类&nbsp;Future&nbsp;的对象随着时间的推移可以产生很多的结果。举个例子是&nbsp;Web&nbsp;服务器的监听组件对象。该组件监听来自网络的&nbsp;HTTP请求，并根据请求的内容返回相应的数据。</p><p>​</p><p><img src=\"https://static001.geekbang.org/infoq/5f/5f68d674d121c8f1b7d3ce45410f7702.png\" /></p><p></p><h3>2.2、Flow API 源码解析</h3><p></p><p>Java9 使用 java.util.concurrent.Flow&nbsp;提供的接口对反应式编程进行建模，实现了名为“发布-订阅”的模型（也叫协议，简写为&nbsp;pub-sub ）</p><p>反应式编程有三个主要的概念，分别是：订阅者可以订阅的发布者；名为订阅的连接；消息(也叫事件)，它们通过连接传输。</p><p>反应式流（Flow API）规范可以总结为4个接口：Publisher（发布者）、Subscriber（订阅者）、Subscription（订阅）和Processor（处理者）</p><p><img src=\"https://static001.geekbang.org/infoq/9f/9f85af9ff1b0354a47bea17f81812e60.png\" /></p><p>Publisher负责生成数据，并将数据发送给 Subscription（每个Subscriber对应一个Subscription）。Publisher接口声明了一个方法 subscribe()，Subscriber可以通过该方法向 Publisher发起订阅。&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/95/954fcae3418c39bbcb8c11de7e40096b.png\" /></p><p>一旦Subscriber订阅成功，就可以接收来自Publisher的事件。这些事件是通过Subscriber接口上的方法发送的</p><p><img src=\"https://static001.geekbang.org/infoq/31/318afcb0155060f0229098a7956af4df.png\" /></p><p>Subscriber的第一个事件是通过对 onSubscribe()方法的调用接收的。Publisher调用 onSubscribe() 方法时，会将Subscription对象传递给 Subscriber。通过Subscription，Subscriber可以管理其订阅情况</p><p><img src=\"https://static001.geekbang.org/infoq/65/65ff35367e017496e770133a62126f9c.png\" /></p><p>Subscriber 可以通过调用 request() 方法来请求 Publisher 发送数据，或者通过调用 cancel()方法表明它不再对数据感兴趣并且取消订阅。当调用 request() 时，Subscriber 可以传入一个long类型的数值以表明它愿意接受多少数据。这也是回压能够发挥作用的地方，以避免Publisher 发送多于 Subscriber能够处理的数据量。在 Publisher 发送完所请求数量的数据项之后，Subscriber 可以再次调用 request()方法来请求更多的数据。</p><p>Subscriber 请求数据之后，数据就会开始流经反应式流。Publisher 发布的每个数据项都会通过调用 Subscriber 的 onNext()方法递交给 Subscriber。如果有任何错误，就会调用 onError()方法。如果 Publisher 没有更多的数据，也不会继续产生更多的数据，那么将会调用 Subscriber 的onComplete() 方法来告知 Subscriber 它已经结束</p><p>反应式流规范的接口本身并不支持以函数式的方式组成这样的流。Reactor&nbsp;项目是反应式流规范的一个实现，提供了一组用于组装反应式流的函数式API。有我们自己实现。</p><p></p><h3>​2.3、Flow API 实战</h3><p></p><p>FlowImpl ：创建Publisher并向其订阅TempSubscriber</p><p><code lang=\"java\">public class FlowImpl {\n    public static void main(String[] args) {\n        // 创建 Publisher 并向其订阅 Subscriber\n        getOrderAmt(\"20220727123\").subscribe(new SubscriberImpl());\n    }\n\n    // Publisher是个函数式接口\n    private static Flow.Publisher getOrderAmt(String orderId) {\n        return subscriber -&gt; subscriber.onSubscribe(new SubscriptionImpl(subscriber, orderId));\n    }\n}</code></p><p></p><p>Subscription接口：实现向 Subscriber 发送 OrderInfo Steam</p><p><code lang=\"java\">public class SubscriptionImpl implements Flow.Subscription {\n    private final Flow.Subscriber<!--? super OrderInfo--> subscriber;\n    private final String orderId;\n\n    public SubscriptionImpl(Flow.Subscriber<!--? super OrderInfo--> subscriber, String orderId) {\n        this.subscriber = subscriber;\n        this.orderId = orderId;\n    }\n\n    @Override\n    public void request(long n) {\n        // 另起一个线程向 subscriber 发送下一个元素\n        Executors.newSingleThreadExecutor().submit(() -&gt; {\n            for (long i = 0L; i &lt; n; i++) // subscriber 每处理一个请求执行一次循环\n                try {\n                    // 将当前 订单号 发送给 Subscriber\n                    subscriber.onNext(OrderInfo.reduceAmt(orderId));\n                } catch (Exception e) {\n                    // 查询报错将这个报错信息传给 Subscriber\n                    subscriber.onError(e);\n                    e.printStackTrace();\n                    break;\n                }\n        });\n    }\n\n    @Override\n    public void cancel() {\n        // 如果 Subscription 被取消了，向 subscriber 发送一个完成信号\n        subscriber.onComplete();\n    }\n}</code></p><p>​</p><p>Subscriber接口：实现打印输出收到的 订单 数据</p><p><code lang=\"java\">public class SubscriberImpl implements Flow.Subscriber {\n    private Flow.Subscription subscription;\n    @Override\n    public void onSubscribe(Flow.Subscription subscription) {\n        this.subscription = subscription;\n        subscription.request(1);\n    }\n    @Override\n    public void onNext(OrderInfo orderInfo) {\n        System.out.println(orderInfo);\n        subscription.request(1);\n    }\n    @Override\n    public void onError(Throwable throwable) {\n        System.out.println(throwable.getMessage());\n    }\n    @Override\n    public void onComplete() {\n        System.out.println(\"Done!\");\n    }\n}</code></p><p></p><h1>总结</h1><p></p><p>Java代码为了更好的发展和性能，开发了 异步编程的模式，Future异步编程和CompletableFuture 接口都可以实现异步编程，我们通过源码深入理解其原理和设计的思想，Java9中提供了反应式编程（Flow API）我们分析其源码并提供一个响应式查询实战。</p></code></p>",
    "publish_time": "2022-07-28 11:27:39",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "极客邦科技被授予2022开放原子开源基金会白银捐赠人",
    "url": "https://www.infoq.cn/article/QEdV9LrSeubjZ2BFcJXw",
    "summary": "<p>2022年7月27日 聚焦开源与产业生态的 2022 开放原子全球开源峰会在北京拉开帷幕。2022 开放原子全球开源峰会由开放原子开源基金会主办，以“软件定义世界，开源共筑未来”为主题，立足中国，面向世界，聚集国内外顶级开源基金会/开源社区负责人、开源意见领袖、开源厂商代表、优秀开源企业用户、顶尖开源开发者，为全球开源爱好者们带来一场产业技术盛宴。作为一直关注开源产业发展参与大量开源项目、并拥有开源社区项目优秀企业，极客邦科技创始人兼CEO霍太稳、极客邦科技旗下 InfoQ 极客传媒总经理汪丹、InfoQ 极客传媒总编辑王一鹏受邀参加了本次峰会。</p><p></p><p>7月28日在2022开放原子全球开源峰会的开幕式上，极客邦科技被授予了2022开放原子开源基金会白银捐赠人。这也是极客邦科技连续第二年成为开放原子开源基金会白银捐赠人，以期共建开源生态，推进开源产业的发展。</p><p></p><p>随着越来越多的中国开发者投身开源，中国已成为全球开源生态的重要贡献力量。2021 年 12 月，「开源」更是首次被明确列入国民经济和社会发展五年规划纲要，《“十四五”国家信息化规划》提到，要支持数字技术开源社区等创新联合体发展，完善开源知识产权和法律体系，鼓励企业开放软件源代码、硬件设计和应用服务。</p><p></p><p>开源正逐渐从“开发者亚文化”变成一个主流的软件开发模式，这在中国可能体现得更加明显，云计算的高速增长、中美贸易战带来的断供风险，都极大地促进了国内对于开源领域的投入。</p><p></p><p>数字人才聚集的 IT 技术领域，开源无处不在。极客邦科技在陪伴我国开发者成长过程中，参与了大量开源项目。数字经济蓬勃发展的今天，井喷式的数据爆发让企业的转型创新和员工的数字化技能面临更大的挑战。在开源社区，数字经济也是热议的关键词之一。</p><p></p><p>极客邦科技将使命升级为“推动数字人才的全面发展”，助力每一位希望提升数字技能的人才高效便捷地获取资讯、学习知识，以及实现专业能力的成长，打造自身在数字时代的竞争力，同时赋能企业的创新发展。开源正在成为我们无法忽视的技术力量，为开发者们实现“自我价值的超越”，到支撑国家数字经济的“技术底座”，也是极客邦科技重点关注与投入的领域。</p><p>&nbsp;</p><p>关于开放原子开源基金会</p><p>开放原子开源基金会是中国首个开源基金会,也是开源项目的重要推动者与组织者。开放原子开源基金会于 2020 年 6 月正式获得民政部批准在北京成立，由阿里巴巴、百度、华为、腾讯等龙头科技企业联合发起，由工信部作为业务指导单位，是致力于开源产业公益事业的非营利机构。</p>",
    "publish_time": "2022-07-28 16:42:10",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": ".NET分布式缓存中的发布和订阅模式",
    "url": "https://www.infoq.cn/article/cQA8YzpAjDzONVf1mAky",
    "summary": "<p></p><p>发布和订阅模式（Pub/Sub）是构建企业级.NET应用程序不可或缺的工具。Pub/Sub是一种消息传递范式，消息的发送方（发布者）不知道目标接收方（订阅者）的任何信息。此外，发布者和订阅者之间不直接发生交互，而是依赖一种叫作主题的公共媒介。因此，这是一个松散耦合的消息模型。</p><p></p><p>现在，我们假设在同一个架构中部署了多个不同的应用程序，它们需要一种机制来向彼此发送事件通知。这些事件可能是短暂的（因运行时发生变更引起的），也可能是数据库事件（因数据库发生变更引起的）。发布和订阅模式可以帮你实现这种分布式事件通知。</p><p></p><h1>实现分布式事件通知的方案</h1><p></p><p></p><p>为了设计一种分布式事件驱动的架构，开发人员通常会使用以下几种方案中的一种。</p><p></p><h4>RDBMS提供的数据通知</h4><p></p><p>如果数据存储仅限于关系数据库，那么使用数据库的通知功能似乎是最好的选择。你可以向数据库服务器注册你感兴趣的内容，当数据库的数据集由于更新、添加或删除操作而发生变更时，你的应用程序会收到通知。</p><p></p><p>但RDBMS本质上是不可伸缩的，很容易成为应用程序的性能瓶颈。所以，你也不希望给数据库增加不必要的负载。此外，数据库通知功能本身就很慢，而且也不支持运行时数据共享。</p><p></p><p>现在你应该能理解为什么使用数据库作为消息传递媒介并不是应用程序的最佳选择。</p><p></p><h4>消息队列</h4><p></p><p></p><p>另一种选择是在架构中引入消息队列。虽然消息队列可以帮你在应用程序之间传输消息，但它们并不是以数据为中心的，也就是说，它们不会监控数据库或其他数据源的数据变更情况。此外，消息队列无法随应用程序一起伸缩。</p><p></p><h4>自己实现</h4><p></p><p></p><p>留给你的最后一个选择是构建满足自己需求的消息平台。虽然这个空沙盒一开始很吸引人，让你可以随心所欲地开发自己的东西，但从时间和资源方面来看，它太复杂了。尽管存在可能性，但构建和管理一个健壮且可伸缩的消息平台是一项非常艰巨的任务。</p><p></p><p>问题在于哪种解决方案更容易集成，具有可伸缩性、高可用性和可靠性。</p><p></p><h1>将分布式缓存作为消息传递平台</h1><p></p><p></p><p>别担心，这里有一个简单的解决方案。集成健壮的消息平台的一种更现代的方法是使用内存分布式缓存。NCache是目前市场上唯一可用的真正原生的.NET/.NET Core分布式缓存。它是一种内存分布式缓存，速度极快，可伸缩。它让你的应用程序能够处理极端的事务负载，并且不会让数据库成为瓶颈。你也可以用NCache来实时处理数据流。</p><p></p><p>NCache通常部署在多层架构的中间位置。为了更好地说明这一点，请看下面这张图。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/79/79dccd3b098a3f6a49c709e65f756716.png\" /></p><p>图1 多层架构中的NCache</p><p></p><p>NCache是一个缓存服务器集群，它将频繁使用的数据保存在内存中，避免了大多数数据库访问，为.NET应用程序和Java应用程序提供每秒处理数万个请求的能力。</p><p></p><p>我们先来看看如何将NCache作为事件驱动架构的消息传递总线。</p><p></p><h1>NCache的事件驱动消息传递</h1><p></p><p></p><p>下图显示了NCache如何作为.NET和Java应用程序的消息总线。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/eb/eb8471cec82f95f640c1ad9c640648d7.png\" /></p><p>图2 将NCache作为消息平台</p><p></p><p>在这里，NCache使用快速紧凑的序列化将.NET或Java对象转换成二进制文件，再将它们传递到缓存集群中，实现了跨平台通信。NCache允许.NET应用程序与Java应用程序之间发生交互。</p><p></p><p>NCache通过事件来实现发布和订阅模式，并为你提供了不同的方法将消息传递给其他监听应用程序。我们来看一下这两种消息类型，并看看分布式缓存如何传递它们。</p><p></p><p>首先，我们需要明确应用程序需要监听的数据变更。NCache本身是一个.NET键值存储系统，提供了一些可以在缓存中的数据发生变更时更新应用程序的能力。因为这些变更都是在内存中发生的，所以不存在性能瓶颈。这些变更可以是：</p><p></p><p>缓存级的数据项变更，无论是更新还是删除。整个缓存级的数据变更。持续查询。你注册了一个类似SQL的查询，观察缓存中的结果集是否发生了变更。如果是，你的应用程序将收到通知。集群变更（针对管理员来说），在添加或删除新节点或者节点发生崩溃时发生。NCache还允许你注册依赖数据库，包括SQL、Oracle和OleDb。这有助于缓存、数据库和应用程序之间保持同步。<a href=\"https://www.alachisoft.com/resources/docs/ncache/prog-guide/notification-based-dependencies.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NTg5NzEwMTEsImZpbGVHVUlEIjoidEZuMkhYUVZQSVVKTUFXaCIsImlhdCI6MTY1ODk3MDcxMSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjoyNDM2MDc5MH0.UK8WyRVrM7XcwcyUnLpvKHEZL351B6czJ1poNyLOZ0g\">点击查看受支持的依赖数据库类型的完整清单。</a>\"这些是注册在不同数据存储系统上的数据变更通知，只是NCache帮你处理掉了。你还可以将数据库通知与NCache数据通知结合起来，满足特定的应用需求。</p><p></p><p>另一方面，如果你只想将简单的消息传播到复杂的.NET或Java对象，那么你应该使用自定义消息传递特性。应用程序可以生成数据并触发事件，感兴趣的监听器几乎可以立即接收到事件。</p><p></p><h1>NCache的Pub/Sub API</h1><p></p><p></p><p>NCache提供了一个基于内存的发布和订阅特性和一个专门的发布和订阅消息存储，为在.NET Web应用程序中实现实时信息共享提供支持。我们将看到NCache与发布和订阅模式的结合如何解决上述的挑战，并实现更好的应用程序间通信。</p><p></p><p>发布和订阅模型提供了一个通道，发布者在其中发布消息，感兴趣的用户订阅消息，从而将发布者和订阅者解耦。现在，我们将NCache作为消息总线，发布和订阅模型将受益于NCache底层的分布式架构和许多方便的特性。</p><p></p><h4>基本架构</h4><p></p><p></p><p>话不多说，我们先来了解一下NCache Pub/Sub的基本组件及其工作原理。NCache一般的发布和订阅流程是这样的：发布者使用ITopic接口向主题发布消息，订阅者创建订阅一个或多个主题并接收相关消息。消息被成功传递时，NCache将接收到确认。否则，NCache会在消息过期之前继续重试（如果设置了过期时间）。未传递的消息将驻留在缓存中，直到被驱逐或过期。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ad/ad6ec3f6401f4ca00a5d6db73ae06e39.png\" /></p><p>图3 NCache的Pub/Sub架构</p><p></p><h4>订阅类型</h4><p></p><p></p><p>NCache提供了两种不同的订阅类型，即非持久订阅和持久订阅。此外，NCache也支持独占和共享订阅策略。</p><p></p><p>非持久订阅：默认情况下，在主题上创建的所有订阅都是非持久订阅。它只向订阅者传递预期的消息，直到连接断开。如果用户因任何原因断开连接，在重新连线时不会收到旧消息。这种类型的订阅是排他性的，也就是一个订阅只属于一个订阅者。持久订阅：它考虑到订阅者在断开连接时会发生消息丢失的情况。NCache在连接丢失时将保留订阅服务器的订阅。因此，订阅者可以在重新连线时收到已发布的消息。持久订阅也提供了两种策略：1）独占，一个订阅只属于一个活动的订阅者；2）共享，一个订阅可以有多个订阅者，消息是共享的。</p><p></p><h1>开始使用NCache Pub/Sub</h1><p></p><p></p><p>我们假设有一个网店，不同的供应商会定期向商店中添加新商品。同时，还需要提供商品的销量和售价信息。对商品感兴趣的商店经理和客户需要了解新商品、正在销售的商品和最新的折扣情况。NCache的发布和订阅特性可以在这个场景中提供分布式通知机制。为此，我们可以先创建NCache专用的发布和订阅消息存储。</p><p></p><p>我们将使用NCache Pub/Sub API来逐步实现上述场景的分布式消息传递过程。</p><p></p><h4>创建主题</h4><p></p><p></p><p>第一步是创建一个主题，不同供应商可以向这个主题发布关于新商品的更新消息。我们可以使用NCache ITopic接口创建具有唯一名称的主题。在下面的代码中，发布者应用程序使用CreateTopic方法创建了一个叫作newProducts的主题。</p><p></p><p><code lang=\"plain\">// 前提条件：已经连上NCache\n// 指定主题名\nstring topicName = “newProducts”\n\n// 创建主题\nITopic topic = cache.MessagingService.CreateTopic(topicName);</code></p><p></p><p>如果已经存在相同名称的主题，则返回主题的实例，类型为ITopic。</p><p></p><p>NCache允许在创建主题时设置主题优先级。如果某些事件需要以比其他事件更高的优先级处理时，这个特性就很有用。例如，商品已售罄就是紧急信息。同样，由于折扣或销售而导致商品价格变动对于卖方或买方来说都是很重要的信息。在这种情况下，我们可以在创建主题时将其设置为高优先级，这样客户端就可以毫不延迟地接收到相关通知。</p><p></p><h4>发布消息</h4><p></p><p></p><p>在创建了主题后，发布者应用程序就可以使用Publish方法向主题发布消息。为此，我们需要先通过指定主题名获得主题实例。NCache为发布消息提供了以下两种传递模式：</p><p></p><p>All（默认）：将消息传递给所有的订阅者。当需要广播信息时，这个就很有用。Any：将消息传递给任意一个订阅者。此外，为了有效管理发布和订阅缓存的存储空间，你还可以设置消息的过期时间。</p><p></p><p>在下面的代码中，发布者向主题newProducts广播有关新商品的消息。</p><p></p><p><code lang=\"plain\">// 前提条件：已经连上NCache\n// 已创建\"newProducts\"主题\nstring topicName = \"newProducts\"\n\n// 获取主题实例\nITopic productTopic = cache.MessagingService.GetTopic(topicName);\n\n// 创建要放在消息中传递的对象\nProduct product = FetchProductFromDB(10248);\n\n// 用对象创建新消息\nvar productMessage = new Message(product);\n\n// 发布消息，将选项设置为All\norderTopic.Publish(productMessage, DeliveryOption.All, true);</code></p><p></p><h4>订阅主题</h4><p></p><p></p><p>在创建了主题后，订阅者应用程序就可以通过获取订阅来接收发布到主题的消息。由于可以支持不同类型的订阅，如果要进行非持久订阅，可以使用CreateSubscription方法。如果要进行持久订阅，可以使用CreateDurableSubscription方法。</p><p></p><p>下面的代码展示了订阅者应用程序如何订阅newProducts主题。MessageReceived回调将在收到通知时执行预期操作。例如，订阅者可以在收到销售通知时在MessageReceived回调中更新产品价格。</p><p></p><p><code lang=\"plain\">// 前提条件：已经连上NCache\n// 已创建\"newProducts\"主题\nstring topicName = \"newProducts\"\n\n// 获取主题实例\nITopic productTopic = cache.MessagingService.GetTopic(topicName);\n\n// 订阅newProducts主题\n// 指定MessageReceived回调\nITopicSubscription orderSubscriber = orderTopic.CreateSubscription(MessageReceived);</code></p><p></p><p>在上面的示例中，我们创建了一个非持久订阅。此外，如果需要在重新连接时从订阅的主题接收旧消息，可以创建持久订阅。</p><p></p><p>NCache还提供了一种基于模式的订阅方法，支持通过多个通配符来订阅与模式匹配的单个或多个主题。</p><p></p><h4>注册通知</h4><p></p><p></p><p>NCache可以让发布者知道消息的状态和主题的可用性。发布者应用程序可以注册下面的通知：</p><p></p><p>MessageDeliveryFailure：如果由于任何问题而无法传递消息，则通知发布者。OnTopicDeleted：当主题被删除时通知发布者。以下是发布者注册这两种类型的通知的代码。</p><p></p><p><code lang=\"plain\">// 你有一个主题实例productTopic\n\n// 注册消息传递失败通知\nproductTopic.MessageDeliveryFailure += OnFailureMessageReceived;\n\n//注册主题删除通知\nproductTopic.OnTopicDeleted = TopicDeleted;</code></p><p></p><p>遵循以上这些步骤，一个基本的发布和订阅消息架构就可以被集成到任何ASP.NET/.NET Core应用程序中。</p><p></p><h1>结论</h1><p></p><p></p><p>到目前为止，我们已经了解了NCache的发布和订阅特性。我们来总结一下Ncache Pub/Sub在处理现有解决方案的局限性方面提供了哪些好处。</p><p></p><p>由于具有线性可伸缩性，NCache Pub/Sub可以通过添加缓存服务器和负载均衡来处理不断增加的订阅请求。伸缩对用户是透明的，不会影响通信过程。因此，你可以很容易地使用NCache Pub/Sub来扩展系统的通信性能。NCache Pub/Sub提供了持久订阅、消息传递重试和传递失败通知，以避免消息丢失。此外，NCache的分布式和复制架构确保了NCache的高可用性。所有这些功能确保了可靠的通信。由于NCache是基于内存的分布式缓存，因此驻留在缓存中的消息存储速度非常快。此外，NCache允许缓存中的数据过期并将其回收，从而智能地管理好存储空间。NCache的可扩展性、可靠性和存储效率，以及发布和订阅的松耦合和异步消息传递模式，使得NCache的发布和订阅特性在未来的.NET/.NET Core应用程序的分布式消息传递方面具有很大的应用前景。</p><p></p><p>原文链接：</p><p><a href=\"https://dzone.com/articles/pubsub-design-pattern-in-net-distributed-cache?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NTg5NzEwMTEsImZpbGVHVUlEIjoidEZuMkhYUVZQSVVKTUFXaCIsImlhdCI6MTY1ODk3MDcxMSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjoyNDM2MDc5MH0.UK8WyRVrM7XcwcyUnLpvKHEZL351B6czJ1poNyLOZ0g\">https://dzone.com/articles/pubsub-design-pattern-in-net-distributed-cache</a>\"</p>",
    "publish_time": "2022-07-28 17:35:42",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "关于跨部门协作难题，可以这样做 | GTLC 南京",
    "url": "https://www.infoq.cn/article/Jt1ZIxQG4kZWbzujQT10",
    "summary": "<p>2022 年 7 月 16 日，由 <a href=\"https://tgo.infoq.cn/join\">TGO 鲲鹏会</a>\"主办的 <a href=\"https://gtlc.infoq.cn/2022/nanjing/\">GTLC 全球技术领导力峰会·南京站</a>\"成功召开，吸引全球 200 余位 CTO、技术 VP、CEO 等科技领导者参与。</p><p></p><p>会上，麦斯顿领导力联合创始人张海宁发表《新形势下的组织发展实践案例分享》的主题演讲，以实际案例入手，分享企业发展中会遇到的人才培养、招聘等相关问题，以及组织发展的建议。我们将演讲内容整理如下，以飨读者。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/12/33/12bcc4c27b3797b5cb77533c585cb033.jpg\" /></p><p></p><p>从技术专家走到技术领导者，需要面对更多问题，要去想怎么管理好团队、怎么经营好组织，这是非常现实的压力，希望借助今天的交流给大家一些启发。</p><p></p><p>在以往的咨询经历中，我经常听到企业领导者感慨：团队中每个人都是我招聘的，他们都认同我的想法。但几年后，会发现组织中的人变得和当初不一样了。这种变化是每个组织领导者都要面对的问题。我曾服务过两家企业，在博世西门子家电负责大区人士招聘，在 A.O. 史密斯负责员工培训和组织发展，现在回头来看都是非常好的案例。A.O. 史密斯进入中国大概 20 多年，做到了连续 20 年平均增速 30%。30% 似乎不算惊人的成绩，但连续 20 年就有点可怕了。这个组织会面对的挑战是什么？这种持续性的高速成长对这个公司的压力是什么？</p><p></p><p>从组织的角度，感受最深的是人才的压力。作为一个美国公司，很容易从美国拿到经过七八十年研制的好技术，可以在中国进入中心城市，在各个地区开设销售办事处，这些都是比较容易的。但真正让我们有挑战的问题，是怎么样能找到管理这些事情的人。首先我们尝试内部选拔，但很快就会发现无人可用了。年底我们找一个员工谈话，“恭喜你要被提升了，从明年开始你会成为物流经理，有一大笔加薪。”我们设想所有人听到这样的消息会非常开心，但当时员工不是这样的状态，大家会觉得\"又提升了？会不会太快了？去年是物流主管，今年就是物流经理了，我都不知道要做什么。\"所以给大家带来了巨大的压力。但是我们有太多更高的岗位没有找到合适的人，这时自然会选择外部招聘，因为业务不等人。</p><p></p><h3>组织生态系统</h3><p></p><p></p><p>在组织中做出的每个改变、投入的行动，就像在池塘里扔石头，所有的水都会因为这个石头荡起一圈涟漪，最后重新回到平衡，这就是<a href=\"https://xie.infoq.cn/article/cca79e1af5e036e00d0ef25c8\">涟漪效应</a>\"。当一个组织采用外部招聘来解决高端人才缺口时，会带来什么样的影响？我们会明显发现老员工的工作状态下滑了，他们认为新人会阻碍他们的职业生涯发展路径。另外，他们会感觉公司似乎越来越相信外部招聘的人，而不是相信这些\"老家伙\"了。所以老员工会开始观察这些新人，观察的结果是，这些人提出的方案根本无法落地，实操中没有任何效果。老员工是戴着有色眼镜在看他们吗？其实不是，新人在第一阶段处在适应期，表现不会很好。虽然他们曾经在原来的组织中证明过自己，但来到新的组织一定会有各种各样的不适应，导致他们在这里发挥能力是困难的，从而很难得到老员工的认可，这是涟漪效应的第一层。</p><p></p><p>这些新人会看到老员工对自己不满意吗？一定会，典型的表现就是老员工给新员工讲“鬼故事”——“我们这里水很深，没有你想得容易，老板是忽悠你的，你以为来了就能出成绩吗？......”新员工碰到这样的老员工一定会有压力，他们想出成绩，但面对不太配合、不太认可他们的老员工应该怎么办？通常他们不会和老员工为敌，但是新来的经理会和 HR 交流，“我们想做的事情很多，但需要支持，老员工很优秀，但有些工作他们做不了，请帮我们招些人。“他们要招的是\"自己人\"，可以发现 JD 都符合自己的老同事、老下属，他们的想法很简单，想要出成绩必须有人按照他的想法去做。这就是第二层涟漪效应，新员工开始建立更认可、支持自己的团队。</p><p></p><p>这个行为出现后，老员工一定会有感知。他们的想法是“这些人已经建立自己的小团队了，快要对我们\"动手\"了，以后我们会逐渐被边缘化，最终离开这个公司。”他们会产生很强的危机感，并且一定不会任由这个趋势发生，于是开始团结老员工中的高管一起顶住“压力”。这就是公司内部会出现老员工和新员工小团体的过程，发生的几率会非常高。</p><p></p><p>其实这其中没有“坏人”，只是每个人都从保护自己的角度出发而采取一些行动，组合在一起就形成了团队中的某些现象。所以组织的运转存在内生规律，作为团队领导者，应该能预见到“扔的石头”所带来的变化，以及后续的影响。当团队从外部招聘了一个技术大牛，你要意识到团队中的几个\"老枪\"是什么心态，他们之间有很多平衡没有达成，会有磨合的过程，这其中非常多的工作要做，千万不要忽视这类问题。后来我们发现这件事对组织的影响非常大，不能单纯依靠外部招聘，于是我们开始大规模培养应届毕业生。我 2012 年离开公司创业，当时所有的管理人员中，应届毕业生内部培养成为的管理人员占 60%，40% 是通过外部招聘。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/17/29/17c54c6619c2bbd1d98d560eeb94e529.jpg\" /></p><p></p><p>我经常看到一些管理者告诉我，组织像是一个精密运转的机器，应该把每个关键的零部件调整到位，让他们连续运转，这样可以带来很好的效果。我认为组织更像生态系统，可以把它想象成家里的鱼缸，里面有鱼、虾等各种角色，你做的每一个动作都会对它产生巨大的影响。每当突然拿走一个角色、调整含氧量，都会让这个组织经过一轮振荡后重新达到生态平衡。所以，组织中的人都在不断成长，每个个体、小团队、项目组织，哪怕是临时组织，都是鲜活的，追逐着自己的利益。这些元素间会有内生互动，相互作用，带来外部响应性，而且这些影响是层层叠加的。例如今年公司换了新政策，但以往政策对他们的影响还在不断发生。</p><p></p><h3>组织发展方法</h3><p></p><p></p><p>如何优化、调整组织生态？通过基本模型观察组织目标达成的过程，战略是否可以有效落地？人才供给体系如何？是否可以逐层筛选人才、满足人才发展需求？公司的文化是否明确？大家真正理解公司文化吗？这是观察一个组织的视角，更关键的是这个组织如何去做生态系统的优化。例如跨部门协作是一个典型问题，应该如何解决？方法其实很多，第一，跨部门协作的问题已经超出了部门的管理范围，可以开总经理办公会，将所有跨部门协作的问题当着 CEO 的面沟通，让老板解决跨部门协作的问题，效果会立竿见影。每周开一次，连续两个月，这样整个公司就会发生变化。所以在跨部门协作的问题中，老板的关注就像太阳，“问题”的冰雪会很快消融。随之而来的，会议上可谈的问题越来越少，于是大家会认为跨部门协作问题解决得差不多了，老板的注意力也会逐渐转移。但很快，问题就又一个个显现，冰雪又逐渐堆积起来。依靠老板的力量解决问题效率确实很高，但是老板的注意力是太过稀缺的资源，无法从根本解决问题。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/33/6f/3383012a4a55a678d13e44a6dce45e6f.jpg\" /></p><p></p><p>A.O. 史密斯是一个技术导向的公司，1998 年进入中国，到现在大概 20 年的时间。所有 A.O. 史密斯员工看到这张图都会很兴奋，这是我们高速增长的 10 年。这是如何做到的？我们在跟员工交流的过程中，大家会认为公司的人际关系简单，大家都结果导向。公司很人性化，做事情公平，但标准很高，没达到标准就会被淘汰。这正是我们想要达到的效果，把真正重要、有价值的事情做到，坚持量化、度量的方法。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/a4/38/a429527aa98c55e2d0c7f229ca0b3238.jpg\" /></p><p></p><h3>组织跨部门协作能力建设</h3><p></p><p></p><p>回到刚才的跨部门协作问题，我们建立了一套流程来帮我们解决。一个根本的思考是如果几个部门有所谓的协作问题，事情没有做好责任在谁？管理学不成文的定律表示，每个人都有责任时，就意味着每个人都没有责任。所以没有明确谁负责，会让人不舒服、不服气。于是我们换了一个思路，不再承认公司有协作问题。任何两个部门或更多部门的合作，一定可以分清谁做客户，谁做服务部门。我们把部门之间串起一根绳子，从客户一直串联到中后台，保持服务和被服务的关系。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/32/ea/32b5762c0878457121da9df0e185feea.jpg\" /></p><p></p><p>公司艰难起步后，业务发展远超了公司发展的组织建设，给组织建设带来了巨大的压力。重要的是外部的销售和服务体系员工开始抱怨总部没有服务意识，解决问题找不到人。像人力资源部的角色，是不会觉得自己官僚的，大家会认为把客户服务的很好，业务是我们的衣食父母，一直在在照顾他们。但从业务的视角看完全不是这样，我是在一个小事中意识到了。当时我们请了驻外的大学毕业生回来参加我们的训练营，请到公司的销售明星给他们讲课，总部的一些领导坐在后面听。一位大区总监讲了一个问题让我们后面的人面面相觑，他说，“公司给了你们招待费，你们怎么用？”有一个同学说，“当然是招待客户，维护渠道，跟大家建立好关系，售卖我们的产品。”总监说，“你们都用在外部客情了，内部客情做了吗？回来开会空着手，特产不知道带一点吗？“下面的人恍然大悟。我们以为那只是同事之间纯洁的友谊，原来人家从做客情的钱中省出一部分维护内部情感联系。为什么要这样？原来是让想我们审批流程快一点，不要耽误他们做业务。所以官僚的人永远不觉得自己官僚，我们需要一个流程唤醒他们对官僚的敏感度。总部的人员都想要控制风险，做事更严谨，在业务人员眼中就是流程越来越复杂，不停地要各种数据，这对业务人员是各式各样的要求和打扰。所以，他们的反馈是留给客户的时间很少，大量时间都在应付总部的各种要求。</p><p></p><h3>以市场为导向的内部服务 ASTAR</h3><p></p><p></p><p>如何去改进？德鲁克认为一件事事没有度量就无法改进，所以服务这件事需要被量化。第一，我们做了靶形图，去了解我们之间的关系。我们想要给终端客户提供更好的服务，这就需要驻外的销售机构和服务中心，他们离客户最近，是服务提供者。那么在公司里，他们就是无可争议的客户，被服务的对象，而外围部门是向内提供服务的。比如离他们最近的市场部、销售管理部等，都是紧密服务机构。再外圈一层是产品研发和生产制造，最外圈是人力资源、供应商、开发等公共服务部门。评估则反过来，由内部的员工给外圈部门评估。所以服务是由外向内，评估是由内向外。评估的关键点是客户最想要什么？需要关注客户，响应客户速度快，提供让客户信任的方案，并且有能力解决客户的问题。总结起来就是这个项目的名称叫 ASTAR。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/f4/78/f402ca92a0415fe5ba8c4e90d7f6c578.jpg\" /></p><p></p><p>基本原则就是以外部的客户为导向。两个部门在一起协作，谁离终端客户最近谁就是客户，谁离终端客户远就是内部提供者。当然存在很多争议空间，比如生产和研发部门谁是客户？如果按照客户导向的原则来说，生产离客户更近，所以显然研发是为生产服务的，但这个理念在公司中不容易建立。但一定是由客户的需求拉动后台的改进，从研发的角度要考虑生产体系的能力限制，所有的想法只有实际产出才能转化成客户的价值。所以，这种争议要在组织内达成共识。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/d2/f9/d24b1c1524a9a434a81648f3dd9ac3f9.jpg\" /></p><p></p><p>服务必然是单向的。当时我们的研发总监提出了一个反对问题，“单件小批量生产时，服务的线路是生产、服务、研发。”但我们必须要达成一个共识，主线上一定是研发给生产提供服务。被服务的员工给提供服务的部门打分，没有指向人，因为指向人太过敏感。我们每年都会向全体员工发布的 ASTAR 评估报告，展示给大家今年公司所有向外输出服务的部门的成绩单。这是 2017 年的年度服务报告，我们看到最差的永远是采购，因为采购的同事不认为自己是服务提供者，从来都是别人在请他们服务，达成业绩，所以总是被服务的状态。但我们告诉他，去纠正别人的问题也是一种服务，不仅要指出问题，还要帮助他们改进。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/91/2d/911a009e94d1ef4b748e46c063c9922d.jpg\" /></p><p></p><p>后续的动作依旧很重要，观察整体测评后的结果，后五名的部门会承担很大的压力，要制定下一年的改进目标，做目标考核，靠前的部门则有正向激励。这个工具对公司的影响在于，部门越来越重视与客户的关系，每个员工都在被要求做服务满意度提升的改进行动方案。部门之间的关系发生变化，大家开始意识到服务和被服务的关系存在。虽然部门之间会提出一些要求，但目的是为了提供更好的服务，服务变成了工作内容，形成了服务文化，让人际关系更简单，大家开始明确部门之间的协作关系。</p><p></p><h3>总结</h3><p></p><p></p><p>希望通过这个小案例让大家看到，组织自身运转特性告诉我们它更像是“生态系统”而不是“精密运转的机器”，要充分认知到每个单元、部件都是活体，都在趋向自己的利益。“生态系统改善”的有效方法是建立能够在系统内生存下来的流程建设，而不是依靠个人的关注解决问题。而组织能力的建设基于当前运转当中发生的问题，解决问题的过程才促使这个组织能力变得越来越强。但这些工具并不会完全适用于每个企业，这个系统能否在组织里活下来是非常重要的，让组织受益才有价值。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/ed/ae/eda505568914a253b9587ea43ff080ae.jpg\" /></p><p></p><p>所以组织能力建设的关键抓手，是面对组织当前问题开发出来的自运转的流程。所以，组织需要强有力的领导者，他们能够将流程执行下去，这也是我们关注的一个重点。所以整体组织改进依赖流程的建设，同时也依赖领导领导能力的表现。谢谢大家！</p><p></p><h4>关于 TGO 鲲鹏会</h4><p></p><p></p><p>TGO 鲲鹏会是极客邦旗下科技领导者聚集和交流的组织，学员由 CTO、架构师、技术 VP、具有技术背景的 CEO 等组成，目前已经在北京、上海、深圳、广州、杭州、成都、硅谷、南京、台北、厦门、武汉、苏州等 12 个城市定期举办学习活动。</p><p></p><p>TGO 鲲鹏会采用了“学员共建”的组织形式，希望通过“共建、自治”的方式维护各城市的健康发展，为学员提供必要的服务，帮助学员个人更好地学习和成长，助力学员企业之间更好地合作与交流。加入 TGO 鲲鹏会，全方位提升自身价值，成为卓越科技领导者！</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/70/28/703f15f0a59ea2978ea29a98f21be028.png\" /></p><p></p><p></p>",
    "publish_time": "2022-07-28 18:58:16",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]