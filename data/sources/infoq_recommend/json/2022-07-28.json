[
  {
    "title": "持续发酵的可组装技术，如何引领企业级PaaS平台的未来？",
    "url": "https://www.infoq.cn/article/xDKGqSOAkSKGJiAoj0WY",
    "summary": "<p>随着数字化转型浪潮的兴起，企业级 PaaS 平台的重要性与日俱增。与此同时，软件开发商也在不断改进 PaaS 平台技术，持续吸纳创新的软件思想与工具方法，以期为企业提供更优秀的技术底座服务。</p><p>&nbsp;</p><p>7月19日，<a href=\"https://www.infoq.cn/video/HFCr7OAxDIRFyNPOYhfD\">InfoQ《极客有约》栏目</a>\"就将目光聚焦在可组装技术，并邀请到了来自金蝶中国的苍穹平台与技术规划部首席专家彭璐老师。彭璐老师从苍穹平台的研发实战经验出发，为我们介绍了可组装技术的趋势以及落地情况，并展望了可组装技术带来的创新与价值。本期栏目的对话内容整理如下，供读者参考回顾。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e8/e82a526bc052cac098dfd70d6a2b8508.png\" /></p><p></p><p>InfoQ：您日常工作的范畴和经常关注的技术热点主要有哪些？</p><p>&nbsp;</p><p>彭璐：<a href=\"https://xie.infoq.cn/article/af80c4aa6f16066c93006d97b\">苍穹平台</a>\"是金蝶公司的统一技术底座，也是多种业务的中台和可组装平台。我主要负责中长期技术规划和关键特性的研究和预研、概念系统研发，以及关键特性在客户侧的验证工作。我最早是做企业管理系统，负责大型应用系统的规划、设计、实现，主要关注这一领域的技术趋势，以及企业中间件系统等衍生领域。随着技术发展，我也开始关注云计算、AI 和大数据等热点，现在更多关注平台的体系结构与规划主题。</p><p>&nbsp;</p><p>InfoQ：在 Gartner 发布的《2022 年十二大战略技术趋势》中，“可组装的应用”位列其中。但相信很多人对这个概念还是相对陌生的，能否请您先做个科普：我们应该如何理解“可组装应用”？</p><p>&nbsp;</p><p>彭璐：可组装应用本质上是用模块化的方法来搭建企业信息系统，可以从两个方面来理解它：</p><p>&nbsp;</p><p>可组装应用是从可组装企业这一业务愿景发展而来的。它会从业务架构推演到信息系统架构，意味着信息系统架构也是可组装的，与 SOA 等模块化技术一脉相承。从软件厂商的角度来讲，可组装应用意味着软件交付物出现了范式转变。过去软件公司更多提供的是套装成品应用，现在会提供更小的产品应用粒度，更接近业务组件，这些应用可能在企业侧进行再集成和再组装。</p><p>&nbsp;</p><p>InfoQ：为何可组装应用在当下如此火爆，这背后有哪些原因？</p><p>&nbsp;</p><p>彭璐：第一，今天的竞争环境非常复杂和模糊，充满不确定性。这需要企业具有更强的韧性，企业的业务和经营模式需要具备抗打击能力，对黑天鹅事件要能够敏捷响应，敏捷和韧性的诉求就会导向模块化的方法，进而推动可组装应用的流行。</p><p>&nbsp;</p><p>第二，近年来软件技术进展明显，组件化、模块化的基础和通用技术迅速普及。现在业务组件和信息系统的构建也在走向组件化，而大量 IT 系统的使能技术使软件可以更多追求业务层面的组件化、服务化。这些都导致企业的关注点导向组装式应用与模块化的 IT 系统。</p><p>&nbsp;</p><p>第三点，软件厂商在更大的市场竞争压力下，面对上述客户诉求会逐渐将自身提供应用的范式从一体化转向可组装模式，从而满足客户企业的诉求，提升解决方案竞争力。以金蝶为例，我们正在从单一的产品供应商转向以生态为主，打造立体化产品矩阵的厂商。这种生态诉求也意味着我们的系统不应该是一体化的系统，而应该是可组装系统。</p><p>&nbsp;</p><p>InfoQ：可组装技术同云原生技术有什么区别？</p><p>&nbsp;</p><p>彭璐：这两种技术是不同层面的。云原生更关注应用本身及应用的开发、构建、运行过程，重点考察应用在整个生命周期中如何更好地应用容器、微服务、虚拟化等云原生技术的能力。</p><p>&nbsp;</p><p>可组装技术更多体现在信息系统的架构层面。应用和应用组件有可能来自不同供应商，可组装技术考虑的是将这些模块组装成信息系统，更关注系统从构建到演化的过程中如何以可组装的方式获得增强提升。</p><p>&nbsp;</p><p>InfoQ：企业在构建可组装应用的过程中，一般会遇到怎样的困难和挑战？</p><p>&nbsp;</p><p>彭璐：从系统视角来看，这样的系统不是单一的系统，而是来自不同供应商，由很多部门的子系统构成整个企业应用的大系统，我们称为系统的系统，或者叫 system of systems。它的子系统往往没有统一的技术规范，生命周期管理也非常复杂。</p><p>&nbsp;</p><p>另外，企业应用不单纯是技术系统，我们有时候称为 social technology，是社会技术系统。它既关注企业内部的组织，也关注企业在应用系统时面对的客户、伙伴、供应商。对于供应商来讲，各个系统也同时具有社会的一面和技术的一面，这些技术和社会系统如何以技术和社会的视角来进行联合优化、相互驱动，也是颇具难度的。</p><p>&nbsp;</p><p>从企业层面讲，复杂系统如何制定建设策略、安排建设顺序，如何处理复杂系统的相关关系，怎样沟通内部用户...这些都是很复杂的挑战。但这些问题不是可组装技术特有的，而是企业信息系统天然的难题，只不过我们现在希望通过可组装方式解决其中一些问题。</p><p>&nbsp;</p><p>InfoQ：组装式应用面临的一大难题是，如何解决各个应用之间的集成标准问题？</p><p>&nbsp;</p><p>彭璐：现代化的系统都有一些较为通用的接口，更老的系统只能使用数据交换、中间件等比较老的方式，但大多数子系统的集成方式还是相对统一的。相比之下，不同系统使用的不同语义标准会带来更困难的挑战，是企业信息系统的典型难点。</p><p>&nbsp;</p><p>不同的子系统之间整合使用，中间可能会存在很多复杂的相互调用关系。在故障排查层面也有一些理论实践，例如统一的日志、调用协议，或者对系统进行网格化设计，可以通过隔离的方式来排除故障。</p><p>&nbsp;</p><p>InfoQ：企业要具备可组装能力需要有三方面的准备：组装式思维、组装式业务架构、组装式技术。这三部分听起来非常抽象，能否具体解释一下？</p><p>&nbsp;</p><p>彭璐：如果我们把组装式这三个字去掉，可能反而更容易理解。所谓组装式思维，对企业来说就是一种文化。我们要关注不同的关系人、关注系统的生命周期，要相信去中心化的系统，设法将去中心化的系统和企业的管控治理有机整合在一起。</p><p>&nbsp;</p><p>企业对组装式业务的诉求产生了组装式业务架构。组织、流程、信息、数据通过组装式的视角来搭建，它用的很多方法和以前典型的业务架构也没有多大区别，而组装式技术就是底层的技术支撑，是 IT 系统的骨干。</p><p>&nbsp;</p><p>InfoQ：可组装应用在企业当中的落地情况如何？现在是什么样的阶段？</p><p>&nbsp;</p><p>彭璐：中国的大型企业在组装式应用方面已经有了比较深的认识，做了很多实践。他们的信息系统本来就是多样化的，是很多东西凑成的。他们很久之前就有打破信息孤岛的诉求，而组装式应用其实是过去理念的进化。比如，企业不再让自己的信息系统依赖于 SAP、Oracle 这种套件式系统，会选择适合自身的应用来搭建领域应用，同时用可组装的方式组装成满足企业特定需求、可持续发展的 IT 系统。</p><p>&nbsp;</p><p>但不同厂商对于可组装技术的理解程度是不一样的，不同领域的厂商也有不太一样的理解，也有很多企业是拿以前的技术方案套了可组装的名字，新瓶装旧酒，落地效果就会参差不齐。</p><p>&nbsp;</p><p>InfoQ：请简单介绍一下金蝶云苍穹。</p><p>&nbsp;</p><p>彭璐：金蝶云苍穹正式发布有五六年了，但之前在金蝶的业务平台上差不多积累了 20 年。它的诞生背景是这样的：</p><p>&nbsp;</p><p>金蝶过去的技术在云计算、移动互联网等新计算环境之下有了更大的市场机会，伴随而生的还有新的客户需求，推动了金蝶的技术演进。金蝶希望将长期积累的平台能力，包括业务组件、组装技术、模型驱动技术等，通过新的平台融会贯通，快速建设企业的 IT 信息系统，帮助合作伙伴快速构建应用。</p><p>&nbsp;</p><p>苍穹诞生后又恰逢数字化浪潮、国产化替代、信创产业政策，得到了很好的发展机遇。近年有很多大型客户纷纷使用苍穹平台作为 IT 基础设施，也纷纷用我们的应用作为企业核心应用或者核心业务组件。苍穹的核心应用场景有财务、人力、供应链、税务，更偏向管理应用。</p><p>&nbsp;</p><p>InfoQ：可组装概念有哪些技术提供支撑？</p><p>&nbsp;</p><p>彭璐：可组装概念涉及的大多数技术并不是全新的，而是对已有技术的再组合和用法创新。比如， RPA 在业务领域属于超自动化或者认知计算的一部分，原来关注的是怎样用流程、机器模拟人员操作 UI 的过程。而可组装概念会把这些技术组合在一起，实现异构业务系统的内外部服务和流程的自动化关联。</p><p>&nbsp;</p><p>可组装技术还依赖已有技术的发展，比如，机器学习技术可以让 RPA 具备更强的认知能力，有更多的数据处理能力，能够处理更多、更大、更加异构的数据整合和组装需求，可组装技术是来源广泛的技术组合应用的结果。</p><p>&nbsp;</p><p>InfoQ：小微企业该如何利用可组装技术？</p><p>&nbsp;</p><p>彭璐：小微企业有很多跟大型企业不一样的诉求，比如，他们可能需要更短的建设周期、更低的可用成本。一些小微企业通常不会直接购买平台，但他们会使用基于可组装平台打造的可组装应用。而且这些可组装应用可能是基于公有云的，并会把不同行业细分领域的应用组装在一起。针对这样的需求，我们也提供了这一类的产品和服务。</p><p>&nbsp;</p><p>InfoQ：金蝶本身就是可组装技术的最佳实践者，我们有没有经验可以分享？</p><p>&nbsp;</p><p>彭璐：首先，要做可组装业务或者可组装应用，最重要的是回归到业务的本愿。企业要做好 IT 系统的定义，想清楚具体的策略，规划好不同阶段的任务优先级，做好 IT 战略规划，下一步才是具体的方案选择。</p><p>&nbsp;</p><p>其次，可组装本身不是企业 IT 系统的目标，只是一种实现方法，是否要做可组装，取决于 IT 系统建设是否有明确的价值驱动。企业要思考可组装能解决什么问题，比如敏捷问题、供应商替换问题，或者让某些关键业务系统能够更符合业务目标等等。企业必须把这些价值点想清楚，然后用可组装的方式来达成业务价值，而不是为了可组装而可组装，为了技术的升级换代而升级。</p><p>&nbsp;</p><p>InfoQ：作为开发者来说，该如何决定是否学习一项新技术？技术决策者又该如何对新技术做选型和引入？如何平衡新技术和业务之间的关系？</p><p>&nbsp;</p><p>彭璐：任何技术的诞生一定是为了服务现实世界，所以这本身就是很好的评估标准：新技术是怎样解决我们的老问题，有没有带来解决方案上的改进？新技术的价值并不在于新，而是因为它更好地解决了这些老问题。并且大多数新技术不能带来天翻地覆的效果，所以要仔细评估技术带来的效果和客户价值，以及它的应用场景。</p><p>&nbsp;</p><p>另外，保持对技术的敏感度是技术人必须做到的。因为技术行业发展太快了，可能有很多技术组合会让原来不重要的技术变得非常重要，或者有一些技术不能解决这个问题，结果解决了另外领域的问题。对这些趋势保持敏感度是必要的，只不过一线工程师、技术架构师、技术决策者等不同岗位看待技术的视角会有所不同。</p><p>&nbsp;</p><p>InfoQ：感谢彭老师的精彩分享，谢谢大家！</p>",
    "publish_time": "2022-07-28 10:24:56",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "京东这样用 Flink：适应业务的才是最好的",
    "url": "https://www.infoq.cn/article/5DWgX797HP3Cxw4GXyc9",
    "summary": "<p>嘉宾 ｜ 付海涛</p><p>编辑 ｜ 贾亚宁</p><p></p><p>Apache Flink 功能强大，支持开发和运行多种不同种类的应用程序。事实证明，Flink 已经可以扩展到数千核心，其状态可以达到 TB 级别，且仍能保持高吞吐、低延迟的特性。出于对云原生和 Flink 之间的关系，以及最新提出的流式数仓这个概念的好奇，我们特意邀请了付海涛老师。</p><p></p><p>付海涛老师目前在京东担任资深技术专家，日常工作包含 Flink 引擎的优化增强、容器环境任务的优化和智能运维等；同时老师也是 <a href=\"https://time.geekbang.org/qconplus/home\">QCon+ 案例研习社</a>\"「<a href=\"https://time.geekbang.org/qconplus/album/84\">Flink 在实时计算应用场景中的落地实践</a>\"」专题的出品人，一起来看看他的独家理解吧。</p><p></p><h3>一、如何快速恢复作业</h3><p></p><p></p><p>我们日常的工作中，容器环境复杂多变，pod 被驱逐或重启时有发生，这些都会导致任务重启恢复，对业务造成较大影响，特别是对于很多交易类的重要业务来说是不可接受的。为此，我们进行了作业快速恢复的定制优化，主要从两方面着手：</p><p></p><p>针对容器环境，加快 pod 异常（被驱逐或重启）的感知速度，迅速恢复作业。</p><p></p><p>在官方的默认实现中，如果 pod 发生异常，可能会从故障 pod 下游算子感知网络连接断开异常或者 jobmanager 感知 taskmanager 心跳超时两个路径感知，无论哪个路径，所需总时长会比心跳超时多一些，时间较长。</p><p></p><p>为此，我们优化了 pod 异常感知的速度，在 pod 异常被停止时或感知到容器内 taskmanager 进程异常退出时，主动通知 jobmanager 哪个 taskmanager 发生了异常，这样一来，jobmanager 就可以在 pod 异常的时候第一时间得到通知，并及时进行作业的故障恢复。我们讲这项优化在典型场景下进行了测试，集群有空余资源时，任务 failover 的时长从原来的 60 多秒缩短到几秒，效果还是比较明显的。</p><p></p><p>减小 pod 异常对作业的影响范围。</p><p></p><p>虽说社区版在 1.9 之后，提供了基于 region 的局部恢复策略，在 Task 发生故障时，只重启故障 Task 关联 region 内的 Task，在有的场景下可以减小影响；但是很多时候一个作业的算子之间都是 rebalance 或者 hash 等全连接的方式，region 策略也起不到太大作用。为此，针对允许少量丢数的业务场景，我们开发了基于故障 Task 的单点恢复策略，Task 发生故障时只恢复该故障 Task，非故障 Task 不受影响，从而减小故障 Task 对整个作业的影响范围。</p><p></p><p>通过这项优化，在线应用取得了不错的效果，其对作业的影响范围大大减少（取决于具体的作业，能够减少为原来的几十分之一到几百分之一），避免了业务的断流，恢复时长也大大降低了。</p><p></p><h3>二、流批一体在京东的实践</h3><p></p><p></p><p>流批一体是 Flink 社区最近几年比较火的一个方向，它可以解决流批割裂带来的高开发和运维成本、数据口径不一致等业务问题。对于流批一体，我们团队也进行了一些探索和实践，并在部分的实际业务场景中进行了落地。</p><p></p><p>要在实际业务场景中应用流批一体，需要满足几个前提条件：</p><p></p><p>在生产环境，同一个口径指标需要分别用流任务进行实时加工和批任务进行离线加工，此时才需要考虑是否要做流批一体；实时加工和离线加工的数据模型大体一致；实时加工和离线加工的逻辑可以复用。</p><p></p><p>这里举一个实际案例，有个业务团队需要针对流量买卖黑产进行舆情分析，它的原有架构如下：</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/ad/adc8366e5111996f3181b7a1c16d0fd0.png\" /></p><p></p><p>从图中可以看到，这是一个典型的 Lambda 架构：源端通过爬虫爬取了一些相关信息并写到 JMQ，在数据同步到 JDQ 后，通过 Flink 进行处理，写入到下游的 JDQ，这是实时链路；与此同时，通过 DTS 数据传输服务将上游 JDQ 的数据同步到 HDFS 落一份 Hive 表，然后通过 Hive 表去进行离线的数据加工，这是离线链路。</p><p></p><p>此外，该业务离线、实时加工的模型和计算逻辑是一致的，并且端到端的实时性要求不高，可接受分钟级别延时。</p><p></p><p>基于此业务特点，我们直接把中间存储环节从 JDQ 换成了 Iceberg，然后通过 Flink SQL 去增量读取，实现业务的加工逻辑，这样完成了流批两条链路的完全统一，其中 Iceberg 表中的数据也可以供 OLAP 去查询或离线去做进一步加工。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/3d/3d567c3a48a8cec20d42d095479be0d1.png\" /></p><p>通过上图的架构，不仅实现了计算层面的流批统一，也实现了存储层面的流批统一。经过业务方实际应用反馈，整个链路的时延在一分钟左右，存储、计算成本显著降低，开发、运维成本降低 30%，获得了不错的实际业务效果。</p><p></p><h3>三、流式数仓</h3><p></p><p></p><p>流式数仓是 Flink Forward Asia 2021 主题演讲中提出的下一步的重要发展方向，是对近几年比较火的流批一体大方向下对数仓场景落地方案的思考。它可以解释为“make data warehouse streaming”，就是让整个数仓的数据全实时地流动起来，且是以纯流的方式而不是微批（mini-batch）的方式流动，从而让当前业界主流数仓架构再进阶一层，实现真正端到端全链路的实时化分析能力。</p><p></p><p>从目前来看，业内还没有这样一个端到端全流式链路的成熟解决方案，虽说可以通过一些纯流的方案 + 纯交互式查询方案 + 离线数仓方案（比如：Flink + Kafka + ClickHouse + HBase + Hive…）叠加起来达到近似效果，但这样系统复杂性又太高了。但如果业务对时延要求不高，可以通过 Flink+ 数据湖（比如 Iceberg）的方案作为替代方案，可以解决很多场景的问题。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/3e/3ea66b9e82be78b40d333cc5115225b9.jpeg\" /></p><p></p><p>流式数仓要做到在实现高时效性的同时，保证整个架构对于开发和运维人员的简洁。要达成这个目标，Flink 需要一个与本身流批一体理念真正配套的存储，于是社区提出了新的 Dynamic Table Storage，即具备流表二象性的存储方案。</p><p></p><p>数仓的分层数据全部放到 Flink Dynamic Table 中，通过 Flink SQL 实时串联整个数仓的分层，数据在各个分层间进行实时流动，并可以对历史数据实现离线修正；与此同时，用户可以利用 Flink SQL 实时探索和分析 Dynamic Table 中流动的数据，从而真正做到实时离线分析一体化：统一的 SQL、统一的数据存储、统一的计算框架，可以实现全链路数据实现秒级和毫秒级的实时流动，并且所有流动中的数据皆可分析，没有任何数据盲点，用一套 API 就完成所有的数据分析。</p><p></p><p>这样一来，实时、离线以及交互式查询分析、短查询分析等场景，都可以用它来统一解决。目前社区已经初步走通整个流程，但真正要实现全实时链路且足够稳定，还需要解决一系列工程问题，可以持续关注社区发展并参与进去。</p><p></p><h3>四、云原生如何给 Flink 赋能</h3><p></p><p></p><p>Flink 和云原生是密不可分的两个场景，云上环境和弹性可以给 Flink 计算更多的空间，加速其应用和普及；同时，面向云原生，Flink 也在云原生的趋势下对部署架构和资源管理方式持续演进优化，以更适应云原生的场景并发挥更好的性能。</p><p></p><p>首先云原生容器化具有优异的 DevOps 能力、资源隔离、统一调度等特性，可以快速部署 Flink 应用，并提供更好的资源管理和隔离机制，避免应用的互相影响，提升计算的稳定性。</p><p></p><p>其次云原生弹性化调度的能力，可以使 Flink 应用按需动态扩缩容，降本增效。当然这也需要对 Flink 进行相应的调整和优化。为此，Flink 社区也进行了适应云原生持续的升级迭代，能够更加适应云原生环境下的运行。比如，在 Flink 1.13 中支持了响应式伸缩的功能，可以根据云上资源动态扩缩容的变化在计算拓扑上以自适应模式调整并发，从而适应云上资源变化。</p><p></p><p>最后，云原生服务混部和资源共享能力，支持将不同负载的服务比如 Flink 流批计算、在线服务、机器学习等服务混合在一起，获得更好的资源利用。</p><p></p><h3>五、Flink 避坑指南</h3><p></p><p></p><p>平台建设过程：根据业务特点选择合适的作业部署模式，并考虑如何迭代升级 Flink 的版本，这些会在很大程度上影响后续平台的运维成本。</p><p></p><p>目前 Flink 支持 session、per-job、aplication 三种部署模式，都有各自不同的优缺点和适用场景，需要做一个权衡。我们平台起初有很多业务有一个集群跑多个作业的业务需求，为此选择了 session 模式，采用该模式预分配资源，提交作业可以直接运行，省去了每次分配资源的开销，适用于对延迟非常敏感的业务，特别是在紧急情况热备切换时特别有用。</p><p></p><p>不过，这与此同时也带来了新的问题和挑战，比如同一集群的多个任务之间会存在资源抢占，作业存在内存泄漏时多次提交会导致 OOM 等问题，需要付出额外的努力去定制优化引擎来解决这些问题。</p><p></p><p>此外，社区版 Flink 的版本迭代升级很快，不同版本之间可能会存在不完全兼容的情况，在跟随社区步伐升级 Flink 版本后，平台会出现多个 Flink 版本并存的问题，这会带来较大的运维成本，如何推动业务平滑升级 Flink 版本、减少运维压力是一项具有挑战性的工作。一种有效的做法是可以采用新作业使用新版本、旧作业分级处理（对于不重要业务，优先推动升级，在解决完跨版本不兼容问题后，再升级重要业务）的方式来解决这个问题。</p><p></p><p>如果要上云，除了基本的上云适配，还需要额外关注容器化带来的性能损耗（比如网络、磁盘等），并注意容器化环境相比物理机环境产生的一些新的问题（比如容器网络连通问题、容器驱逐或重启频繁、OOM killed 等），这些与物理机环境运行有较大差异，需要结合具体容器环境及业务进行针对性优化。</p><p></p><p>最后是多关注和参与社区。在遇到问题的时候，可以去社区多多交流，很多问题都是大家之前遇到过的，会有一些现成的经验可以参考，少走一些弯路；同时将一些方案或特性反馈给社区，也可以形成良性正向循环。</p><p></p><h4>嘉宾介绍</h4><p></p><p></p><p>付海涛&nbsp;&nbsp;京东资深技术专家</p><p></p><p>拥有多年中间件、互联网云平台和大数据开发经验，对分布式计算、容器、微服务等有较深入的理解。2018 年加入京东，主要负责实时计算引擎 Storm、Flink 的相关优化和开发工作。</p>",
    "publish_time": "2022-07-28 11:04:44",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "基于Apache Atlas的大数据资产平台集成与优化实践",
    "url": "https://www.infoq.cn/article/D7YGQOJTiIVLFguGOkgb",
    "summary": "<p><strong>直播简介</strong></p>\n<p>火山引擎 Dataleap 是一款一站式大数据研发套件产品，提供数据集成、开发、运维、治理、资产、安全等全链路解决方案。元数据作为其中数据资产的主要模块，提供元数据接入、检索、血缘管理等功能。</p>\n<p>本次分享为构建 Dataleap 统一元数据管理平台，基于开源 Apache Atlas 进行架构、功能、性能等多方面优化，并平滑升级的落地实践。</p>\n<p><strong>听众受益</strong></p>\n<p>了解社区主流统一元数据管理平台<br />\n了解如何借助 Apache Atlas 构建企业内部统一元数据管理平台<br />\n深入了解字节跳动内部统一元数据管理平台设计思路及技术实现</p>\n<p><strong>适合人群</strong></p>\n<p>大数据开发从业者。</p>",
    "publish_time": "2022-07-28 11:10:21",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "揭秘百度网盘背后的存储之道，关注这场直播！",
    "url": "https://www.infoq.cn/article/TEoQuKggMsokHmFcxk9y",
    "summary": "<p>高强度的算力需求下，业务对存储的要求越来越高，而且对于深耕存储领域的开发者来说，没有谁不想探索百度网盘背后的秘密。</p><p></p><p>百度网盘已为超过 7 亿用户提供专业、安全的云存储服务。实际上它除了提供云存储服务以外，还提供丰富的数据和内容应用类服务，同时它也支持企业客户。百度网盘的底座存储正是基于百度沧海构建的，有着非常复杂的数据管理机制。对于有大规模数据存储的企业及组织机构来说，百度网盘的实践经验有可借鉴之处。</p><p></p><p>如百度网盘这样的大规模数据存储，具体挑战有哪些？如何应对解决？百度网盘在存储技术层面又是怎么做的？一切答案，尽在《面向百度网盘的大规模数据面存储架构思考与设计》线上公开课，百度智能云存储高级架构师 / 云存储数据面底座（Aries）技术负责人郭波将作为讲师，详解大规模数据面存储架构思考与设计，以及百度网盘的最佳实践。</p><p></p><p>扫描海报二维码或<a href=\"https://www.infoq.cn/form/?id=1111&amp;utm_source=gzh&amp;sign=iq_62df4ae32e47e\">点击链接</a>\"预约直播，一探究竟吧！</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/45/45ce337a0b11fb31e608014e50e7fee9.jpeg\" /></p><p></p>",
    "publish_time": "2022-07-28 11:29:39",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]