[
  {
    "title": "当“增加人员”不足以解决问题，你就该考虑应用“微前端”了",
    "url": "https://www.infoq.cn/article/VS87VrE42cVEBtJJY6Gh",
    "summary": "<p>本文最初发表于<a href=\"https://itnext.io/scalability-of-frontend-applications-with-a-micro-frontends-architecture-2f1b25221bfe\">ITNEXT的博客站点</a>\"，经原作者[<a href=\"https://github.com/NovoManu\">Manu Ustenko</a>\"授权由InfoQ中文站翻译分享。</p><p></p><p>在本文中，我将会讨论从创业公司到成熟公司过渡时期的可扩展性问题，分享我的想法，并介绍在我工作的组织中所使用的技术。</p><p></p><p>有很多文章都讨论多可扩展性这个话题，但是我想要澄清在本文中，可扩展性的含义：</p><p></p><p></p><blockquote>可扩展性指的是在系统生命周期的每个阶段，前端系统都能以更快、更可靠和更简单的方式向终端用户交付价值的能力。</blockquote><p></p><p></p><p>一个可扩展的应用应该具备很多的原则，但是我想要强调其中最重要的一条：关注点分离与架构设计。</p><p></p><p>在本文中，我将会基于<a href=\"https://teamtopologies.com/key-concepts\">团队拓扑概念</a>\"进行阐述，并且会按照功能将团队分为四个组，分别是业务导向（stream-aligned）团队、赋能（enablement）团队、复杂子系统（complicated subsystem）团队和平台（platform）团队。</p><p></p><h2>创业公司的时代</h2><p></p><p></p><p>我们正生活在一个创业公司的时代中。每天都有新的创业公司开业或关闭，企业家们都在寻找新的机会，为我们的生活带来新的商业模式。在这个过程中，我们不断看到个人和公司的成长与失败。</p><p></p><p>从技术角度来看，在公司生命周期的这个阶段，公司中的技术规模比较小，易于维护，易于为业务带来新的价值。在这个阶段犯错并不致命，可以很容易地解决。当然，这并不意味着最初的架构不重要，企业需要非常优秀的专家，他们可以在公司的早期阶段做出正确的架构决策。在这个阶段，一个或两个开发小组（每个小组有5到10个成员）就足够了。我认为如果在这个阶段拥有更多的团队将是组织方面的错误。</p><p></p><p>在公司的这个时代，从前端的角度来看，最佳方式使用较小的单体应用。它有很多的好处：</p><p></p><p>使代码保持紧凑，易于开展工作单体架构是很自然的选择，易于实现持续集成和部署都很简单</p><p></p><h2>巨头时代</h2><p></p><p></p><p>我们不会过多地讨论IT巨头和成熟的公司。我们只需要知道，成熟的公司已经有了良好的业务、工作流程、行业基础并且会有多个团队专注其功能。</p><p></p><p>在这个阶段，关键要素之一就是将功能性的任务分派给专门的团队，每个团队专注自己的功能，不允许任何团队涵盖多个功能。</p><p></p><h2>从创业公司向成熟公司的过渡</h2><p></p><p></p><p>随着时间的推移，创业公司会达到一个沸点，前端应用开始变得不再灵活，无法与业务保持相同的速度。</p><p></p><p>在试图交付新的功能以满足业务需要时，每个交付周期都会延迟。技术团队对业务的承诺经常落空，他们还没有认识到环境已经发生了变化。团队依然认为他们能够如期交付某个新特性，但是却一次又一次地失败。</p><p></p><p>组织可以通过增加团队或工程师的数量来满足重要的需求。但令人遗憾的是，在很多情况下，将更多的人塞入到技术团队中并不会带来任何的价值。现在，应该改变流程了。</p><p></p><p>系统难以进行扩展的症状包括：</p><p></p><p>系统难以维护系统变得更加脆弱，开发人员不知道在进行变更的时候会破坏其他功能，从而导致经常发生严重的事故持续集成/持续部署过程变得不堪重负，工程师为了交付特性或修复缺陷不得不排队要从一个技术栈转移到另一个技术栈时不得不对整个系统进行修改难以保持应用处于最新状态，难以升级版本当多个团队在同一个代码库中进行交付时，会造成代码库的混乱在没有团队负责维护和改进的情况下，有些代码会被遗弃团队之间没有明确的责任存在多个职能化的团队，比如业务导向团队在做着赋能团队或平台团队的任务</p><p></p><p>在过渡期间，如果出现技术错误，其代价是非常高昂的。在这个阶段，创业阶段的错误会逐渐显露出来。</p><p></p><p>为了让业务继续保持增长，组织中的技术领导层应该调整目前的状态。流行的方案就是将单体架构迁移至微服务（后端技术）或微前端（前端技术）架构。</p><p></p><p>由于本文讨论的是前端技术，所以我会继续讨论微前端，而不是微服务。同时，我也不会讨论微前端架构是好是坏以及哪种微前端方式更好的问题，因为这方面已经有很多的文章和讨论了。</p><p></p><p>相反，我会从可扩展性的角度来考虑微前端架构，以及它是如何解除企业在转向多团队模型时所面临的障碍的。</p><p></p><h2>微前端架构</h2><p></p><p></p><h3>多团队模型中微前端架构的收益</h3><p></p><p></p><p></p><blockquote>微前端是一种架构风格（模式），在这种风格中，独立交付的前端应用会被组合成一个更大的整体（<a href=\"https://microfrontends.com/\">microfrontends.com</a>\"）。这是一种会影响组织的技术，会让团队之间解耦，避免出现过多的集中化，最重要的是，这会给团队授权，让他们针对自己的功能进行决策，不必依赖其他的团队。</blockquote><p></p><p></p><p>一旦某个组织出现了我们上文所述的难以扩展的症状，工程师就可以决定将系统从单体架构转换成微前端架构。与此同时，它会给企业带来一系列的收益。</p><p></p><h4>代码组织</h4><p></p><p></p><p>微前端架构允许团队将单体应用的代码库分割成更小块的代码。每个独立微前端的源码规模将小得多，并聚焦于应用中一小部分的功能。应用中的哪一部分要解耦成微前端，这应该由工程团队决定。它可以是很大的内容（如页面）也可以是很小的内容（如元素）。借助新的代码组织形式，新开发人员花更少的时间就能掌握代码库，并在短时间内就开始对代码做出贡献。</p><p></p><h4>团队独立性</h4><p></p><p></p><p>微前端的代码库应该是隔离的，这有助于业务导向团队选择自己的工作策略和流程。每个团队对应用的一个垂直切片拥有全部的所有权，并且可以在其领域内进行专业化。他们不用担心团队之间的干扰，这减少了团队之间的协调需求。微前端能够让应用按照团队的结构进行组织，这遵循了康威定律。</p><p></p><p></p><blockquote>设计系统的架构受制于产生这些设计的组织的沟通结构Melvin E. Conway</blockquote><p></p><p></p><p>具体样例：</p><p></p><p>如果某个团队想在单体架构中尝试新的技术（新的状态管理器、测试库等），这个决定需要在所有从事该应用的团队间取得一致。这很费时间，而且最终可能难以被一些团队接受。如果团队是独立的，该团队的工程师就可以决定要使用什么技术。这个决定完全不涉及其他的团队。</p><p></p><h4>独立发布</h4><p></p><p></p><p>与微服务的方式相同，微前端要对它的部署负责。它让业务导向团队能够独立发布应用的某一部分。此时不用重新部署整个应用，每个团队都可以只部署其中的小部分功能。这能够让团队在发布的时候，不需要与其他团队协调，也不需要适应全公司的发布周期。如果最后的部署出现问题，能够很容易地回滚而不影响其他团队的工作。将代码库分割成小块，使得微前端的部署需要更短的时间。</p><p></p><h4>领域驱动架构</h4><p></p><p></p><p>采用微前端的原因之一就是实现垂直领域的所有权拆分。从整个公司掌握所有权的单体架构，转变成多个团队掌握所有权的微服务，这有助于公司在不同的团队中扩大开发规模，促进后端所有权的拆分。每个业务导向团队都拥有一个垂直方向的组件，他们从头到尾负责该组件。</p><p></p><h4>减少测试覆盖率涉及的范围</h4><p></p><p></p><p>与大型应用相比，少量的代码更易于测试覆盖。这会促成整个系统中更好的测试覆盖率，因为所有小部分的代码都会被测试覆盖到。</p><p></p><h4>使用不同技术和框架的可能性</h4><p></p><p></p><p>微前端的优势之一就是不依赖于所选择的技术和框架。它更容易找到专门的团队来完成微前端的工作，允许使用其他的技术和框架取代不适用的技术和框架，也能够以较小的技术风险测试新技术。</p><p></p><h3>微前端架构的基本原则</h3><p></p><p></p><p>接下来，我将介绍微前端架构应该遵循的最重要的原则，以保持系统的可扩展性。要实现这一点，我们要引入两个术语：</p><p></p><p>编排器（orchestrator）是用来协调所有微前端的父应用。在理想的情况下，它不包含任何逻辑或业务功能，只作为一个操作者（operator）存在。子微前端是一个领域驱动的应用，涵盖了应用中某一个特定的组成部分。</p><p></p><p>不管技术团队具体使用哪种微前端的方式，为了保持系统的可扩展性，遵循下面这些强制要求是非常重要的。</p><p></p><p>子微前端和编排器之间的强制要求：</p><p></p><p>编排器和子微前端应用之间的耦合性几乎为零编排器不应该关心子微前端应用是如何实现的。如果子微前端的实现方式发生了变化，但提供的接口是相同的，那就不应该对整个应用造成破坏。子微前端应用必须提供一个统一的接口，以便于集成到编排器中。子微前端和编排器之间的所有必要的通信都通过回调或简单事件实现编排器应该能够决定始终使用子微前端的最新版本还是使用指定的特定版本</p><p></p><p>子微前端之间的强制要求：</p><p></p><p>子微前端之间是零耦合的。每个子微前端都不应该知道其他的微前端，必须能够独立工作。不能从一个微前端导入另一个微前端不能使用共享的状态管理工具（如Vuex，Redux）。子微前端之间可以共享库所有的CSS代码必须是范围内的，以排除对样式属性的覆盖。</p><p></p><h3>微前端架构的维护</h3><p></p><p></p><p>决定采纳微前端架构并不是过渡旅程的结束。这将是一个痛苦和危险的过程，但同样也是一个有趣的认知经历。许多陷阱将等待工程团队去解决。</p><p></p><p>其中一个问题是整个微前端架构的维护问题。随着时间的推移，系统可能会有几十甚至几百个微前端，而工程团队将面临新的挑战：如何维护这些微前端。</p><p></p><h3>引入新的微前端</h3><p></p><p></p><p>如何引入新的微前端应用将是工程团队在迁移到微前端架构后遇到的第一个问题。如何在不增加复杂性的情况下搭建一个新的微前端脚手架？由哪个团队负责创建新的微前端？微前端应该遵循哪些标准？</p><p>这些相关的问题必须由工程团队解决，以保持系统的可扩展性和易维护性。否则，系统在很短的时间内就会变得非常混乱。</p><p></p><p>我们预期得到的解决方案是，每个新的微前端都能快速创建，并且有非常相似的设置，以保持所有微前端之间的一致性。我想到了“传送带（conveyor）”这个词。</p><p></p><p>我们有多种方法可以达成该目的。我想和大家分享一个如何实现该目标的想法，那就是使用一个可以在几分钟内基于模板创建新微前端的工具。这可以是现成的解决方案，如<a href=\"https://github.com/cookiecutter/cookiecutter\">cookiecutter</a>\"或其他类似工具。</p><p></p><h3>同步现有的微前端</h3><p></p><p></p><p>创建新的微前端只是万里长征第一步。随着时间的推移，将会有许多微前端需要与基本模板进行同步。这可能也是我们需要模板的原因：解决漏洞、更新配置、更新其他软件包的版本等。</p><p></p><p>令人遗憾的是，cookiecutter无法将现有的项目与模板同步。为了解决这个问题，在我的公司中，我们开发了自己的解决方案，它可以为新创建或已有的微前端提供一个脚手架。</p><p></p><p>在编写概念验证（Prove of Concept）项目的过程中，我创建了<a href=\"https://github.com/NovoManu/project-cli\">mucli</a>\"项目，它基于我们组织中遵循的类似原则。该项目会在Github上获取仓库，在仓库中寻找模板，并创建新项目或同步现有的项目。它提供了如下开箱即用的功能：</p><p></p><p>从模板库创建和同步项目。你可以创建自己的模板库并使用mucli进行项目创建和同步。模板库是完全独立的，由你自行维护。mucli包只是与你的模板协作而已。用户友好的命令行界面，可以为每个模板添加自定义的用户问题。支持在文件中插入动态值，能够根据设置或用户互动来创建自定义的文件。前缀系统，可以使用不同的前缀来标记文件，以便在同步过程中对这些文件进行操作。可组合的模板，它可以基于较小的模块创建出一个非常灵活的模板。</p><p></p><p>欢迎了解<a href=\"https://github.com/NovoManu/project-cli\">mucli</a>\"项目并为其贡献内容。我将在接下来的文章中深入探讨它的实现细节。</p><p></p><h2>结论</h2><p></p><p></p><p>在这篇文章中，我分享了我们从创业公司转变为成熟公司期间的想法和决定。如果你对这些话题感兴趣的话，可以通过<a href=\"https://github.com/NovoManu\">GitHub</a>\"或<a href=\"https://twitter.com/ManuUstenko\">Twitter</a>\"与我联系。</p><p></p><p>相关阅读</p><p></p><p><a href=\"https://www.infoq.cn/article/veSKosrSkC9xGiyygYku%EF%BC%89\">Htmx 意外走红，我们从 React“退回去”后：代码行数减少 67%，JS 依赖项从 255 下降到 9</a>\"</p><p></p><p><a href=\"https://www.infoq.cn/article/2SyNfw6RkyTV4gkRavIQ%EF%BC%89\">新一波 JavaScript Web 框架</a>\"</p>",
    "publish_time": "2022-10-25 10:16:01",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "谷歌发布《2022 年 DevOps 促进状态报告》：深入研究安全问题",
    "url": "https://www.infoq.cn/article/ZXg1Dta9ieSig9if3sz4",
    "summary": "<p>2021 年，由于数据泄露，超过 <a href=\"https://www.securitymagazine.com/articles/97046-over-22-billion-records-exposed-in-2021?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">220 亿条记录被曝光</a>\"，数家大型公司成为受害者。在这种攻击和<a href=\"https://www.npr.org/2021/04/16/985439655/a-worst-nightmare-cyberattack-the-untold-story-of-the-solarwinds-hack?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">其他恶意攻击</a>\"之间，安全问题仍然是企业的头等大事，因为他们努力保持客户数据的安全和业务的正常运行。</p><p></p><p>有鉴于此，谷歌云的 DevOps 研究和评估（DevOps Research and Assessment，<a href=\"https://www.devops-research.com/research.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">DORA</a>\"）团队决定在 9 月 29 日发布的《<a href=\"https://cloud.google.com/devops/state-of-devops/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">2022 年 DevOps 促进状态报告</a>\"》（2022 Accelerate State of DevOps Report）中重点关注安全问题。</p><p></p><p>在过去的八年里，全球共有超过 33000 名专业人士参加了《<a href=\"https://cloud.google.com/devops?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">DevOps 促进状态</a>\"》调查，使其成为同类研究中规模最大、持续时间最长的。 每年的《DevOps 促进状态报告》都提供了数据驱动的行业洞察力，研究了推动软件交付的能力和实践，以及运营和组织业绩。</p><p></p><p></p><h2>确保软件供应链的安全</h2><p></p><p></p><p>为了分析安全和 DevOps 之间的关系，我们探讨了软件供应链安全的话题，该调查在前几年只是轻描淡写地提到了这一话题。为此，我们使用了<a href=\"https://slsa.dev/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">安全工件的供应链级别</a>\"（Supply-chain Levels for Secure Artifacts，SLSA）框架，以及 NIST 的<a href=\"https://csrc.nist.gov/publications/detail/sp/800-218/final?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">安全软件开发框架</a>\"（Secure Software Development Framework，SSDF）。这两个框架使我们能够探索影响组织如何实施和思考软件安全实践的技术和非技术方面。</p><p></p><p>总的来说，我们发现，目前正在兴起的安全实践得到了普遍的采纳，而且大多数受访者至少部分采用了我们询问的每项实践。在 SLSA 和 NIST SSDF 倡导的所有实践中，使用应用级安全扫描作为生产发布的持续集成/持续交付（CI/CD）系统的一部分是最常见的实践，63% 的受访者表示这是“非常”或“完全”确定的。保存代码历史和使用构建脚本也是高度成熟的做法，而签署元数据和要求两人审查程序则有最大的增长空间。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/47/47b7a933dbead6f3d6c36a5af2ea1e4a.jpeg\" /></p><p></p><p>我们发现了一个让人吃惊的事实，那就是组织在软件安全实践的最大预测因素是文化，而非技术；</p><p></p><p>我们发现一个令人惊讶的现象是，一个组织的软件安全实践的最大预测因素是文化，而不是技术：高信任、低责备的文化，就像 <a href=\"https://cloud.google.com/architecture/devops/devops-culture-westrum-organizational-culture?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">Westrum</a>\" 所定义的那样，以业绩为导向，比低信任、高责备的文化注重权力或规则，明显更倾向于新兴的安全实践。此外，调查结果还显示，那些致力于构建安全实践的团队降低了开发者的倦怠，而且更有可能将自己的团队推荐给别人。为此，有数据表明，组织的文化和现代开发流程，例如持续集成，是组织软件安全的最大推动力，也是那些想要改善安全状况的组织的最好的出发点。</p><p></p><p></p><h2>2022 年还有什么新鲜事？</h2><p></p><p></p><p>虽然我们在今年将重点放在了安全方面，但这并不妨碍我们在软件的交付和运营业绩上进行研究。我们将 DevOps 团队归类为<a href=\"https://cloud.google.com/blog/products/devops-sre/using-the-four-keys-to-measure-your-devops-performance?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">四大主要指标</a>\"：部署频率、变更准备时间、平均恢复时间、变更失败率，还有我们去年引入的第五项指标——可靠性。</p><p></p><p></p><h3>软件交付业绩</h3><p></p><p></p><p>根据以上五项指标，受访者被分成三个群组：高、中、低。与前几年不同的是，目前尚无存在“精英”群组的迹象。说到软件交付业绩，今年的“高”群组是由去年的“高”和“精英”两个群组混合而成。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d1/d1d26081092056a555077ccfe0733c6e.jpeg\" /></p><p></p><p>从下表的百分比可以看出，“高”群组是四年来的最低水平，而“低”群组从 2021 年的 7% 大幅上升到 2022 年的 19%！“中”群组则增加到 69%。也就是说，如果你将今年的低、中、高三个群组与去年的群组进行对比，你会看到整体上，软件的交付业绩已经开始转向更高的水平。今年的“高”群组表现更好——他们的业绩相当于去年“高”和“精英”两个群组的混合。“低”群组的表现也优于去年——今年的“低”群组是由去年的“低”和“中”两个群组混合而成。</p><p></p><p>我们打算做更深入的研究，以便更好地了解这个变化，但是现在，我们假定，持续的新冠肺炎疫情可能会妨碍团队分享知识、协作和创新，从而使“高”群组的数量下降，“低”群组的数量增多。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a3/a3050a4c3c828338ccc3e6537c5bea28.jpeg\" /></p><p></p><p></p><h3>运营业绩</h3><p></p><p></p><p>谈到 DevOps，软件交付性能并不是全部——它也可以对组织的整体运营业绩做出贡献。为了进一步的研究，我们将五项指标所代表的三个类别进行了聚类分析：吞吐量（代码变更的准备时间和部署频率的综合）、稳定性（恢复服务的时间和变更失败率的综合）和运营业绩（可靠性）。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2e/2e1f319da3ffdd0c5435cb0d4fe596f9.jpeg\" /></p><p></p><p>通过我们的数据分析，发现了四种不同类型的 DevOps 组织；在这些群组实践和技术能力方面存在显著差异，所以我们对其进行了更多的划分：</p><p></p><p>起步：这个群组在我们的任何维度上都表现得既不出色，但也不差。这个群组可能处于产品、功能或服务发展的早期阶段。他们也许不会把注意力放在可靠性上，而是集中在获取用户的反馈、理解他们的产品是否符合市场，还有更广泛的探索。上升：这个群组在所有特征上都表现良好：高可靠性、高稳定性、高吞吐量。而在受访者中，仅有 17% 有这种上升状态。滞涨：这个群组的受访者并不频繁地进行部署，但是一旦部署起来，他们就有可能获得成功。超过三分之一的回复属于这一群组，使其成为我们样本中最具代表性的。这种模式很可能是典型的（尽管远非唯一的）团队，他们正在逐步改进，但他们和他们的客户对目前的应用或产品的现状还是比较满意的。衰退：最后，这个群组看起来像一个团队，他们正在开发一个对他们和他们的客户来说依然有价值的服务或应用程序，但不再积极开发。</p><p></p><p>你是“上升”群组中的一员吗？虽然之前的受访者遵循这个<a href=\"https://cloud.google.com/blog/products/devops-sre/using-the-four-keys-to-measure-your-devops-performance?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">指导</a>\"来帮助他们达到“精英”地位，但那些致力于进入“上升”群组的团队应该将精力集中在松散耦合的架构、CI/CD、版本控制，以及在工作环境的灵活性。一定要看看我们关于<a href=\"https://www.devops-research.com/research.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">技术能力的文章</a>\"，其中有关于这些能力以及实施这些能力的细节。</p><p></p><p></p><h2>向我们展示你如何使用 DORA</h2><p></p><p></p><p>DevOps 状态报告是一个让你了解团队能够提高 DevOps 业绩的好地方，但是也有助于观察一下其他组织怎样利用这份报告来对整个组织产生有意义的影响。去年，我们推出了首届 <a href=\"https://cloud.google.com/awards/devops?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">Google Cloud DevOps 大奖</a>\"，今年我们有幸与大家分享 <a href=\"http://cloud.google.com/awards/devops?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">DevOps 大奖的电子书</a>\"，其中包括去年获奖公司的 13 个案例研究。从德勤（Deloitte）、劳氏（Lowe's）和维珍传媒（Virgin Media）等公司那里了解到他们如何在其组织中成功实施 DORA 实践。一定要<a href=\"https://forms.gle/TXkGKJea4up8gnw27?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">申请 2022 年 DevOps 大奖</a>\"来分享你组织的转型故事！</p><p></p><p>感谢所有参与我们 2022 年调查的人。我们希望《DevOps 促进状态报告》能够帮助各种规模、行业和地区的组织提高他们的 DevOps 能力，我们也期待着听到你们的想法和反馈。</p><p></p><p>作者介绍：</p><p></p><p>Derek DeBellis、Claire Peters，均为 Google CLoud DORA 研究主管。</p><p></p><p>原文链接：https://cloud.google.com/blog/products/devops-sre/dora-2022-accelerate-state-of-devops-report-now-out</p><p></p><p>相关阅读</p><p></p><p><a href=\"https://www.infoq.cn/article/EahixYJRtoPSV4G1V1wk%EF%BC%89%E6%8A%8A%E9%93%BE%E6%8E%A5%E9%99%84%E5%9C%A8%E6%96%87%E5%AD%97%E4%B8%8A%E5%93%88\">DevOps 在施耐德：众人参与其中的变革之旅 </a>\"</p><p></p>",
    "publish_time": "2022-10-25 10:16:06",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]