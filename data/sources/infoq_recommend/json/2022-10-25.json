[
  {
    "title": "当“增加人员”不足以解决问题，你就该考虑应用“微前端”了",
    "url": "https://www.infoq.cn/article/VS87VrE42cVEBtJJY6Gh",
    "summary": "<p>本文最初发表于<a href=\"https://itnext.io/scalability-of-frontend-applications-with-a-micro-frontends-architecture-2f1b25221bfe\">ITNEXT的博客站点</a>\"，经原作者[<a href=\"https://github.com/NovoManu\">Manu Ustenko</a>\"授权由InfoQ中文站翻译分享。</p><p></p><p>在本文中，我将会讨论从创业公司到成熟公司过渡时期的可扩展性问题，分享我的想法，并介绍在我工作的组织中所使用的技术。</p><p></p><p>有很多文章都讨论多可扩展性这个话题，但是我想要澄清在本文中，可扩展性的含义：</p><p></p><p></p><blockquote>可扩展性指的是在系统生命周期的每个阶段，前端系统都能以更快、更可靠和更简单的方式向终端用户交付价值的能力。</blockquote><p></p><p></p><p>一个可扩展的应用应该具备很多的原则，但是我想要强调其中最重要的一条：关注点分离与架构设计。</p><p></p><p>在本文中，我将会基于<a href=\"https://teamtopologies.com/key-concepts\">团队拓扑概念</a>\"进行阐述，并且会按照功能将团队分为四个组，分别是业务导向（stream-aligned）团队、赋能（enablement）团队、复杂子系统（complicated subsystem）团队和平台（platform）团队。</p><p></p><h2>创业公司的时代</h2><p></p><p></p><p>我们正生活在一个创业公司的时代中。每天都有新的创业公司开业或关闭，企业家们都在寻找新的机会，为我们的生活带来新的商业模式。在这个过程中，我们不断看到个人和公司的成长与失败。</p><p></p><p>从技术角度来看，在公司生命周期的这个阶段，公司中的技术规模比较小，易于维护，易于为业务带来新的价值。在这个阶段犯错并不致命，可以很容易地解决。当然，这并不意味着最初的架构不重要，企业需要非常优秀的专家，他们可以在公司的早期阶段做出正确的架构决策。在这个阶段，一个或两个开发小组（每个小组有5到10个成员）就足够了。我认为如果在这个阶段拥有更多的团队将是组织方面的错误。</p><p></p><p>在公司的这个时代，从前端的角度来看，最佳方式使用较小的单体应用。它有很多的好处：</p><p></p><p>使代码保持紧凑，易于开展工作单体架构是很自然的选择，易于实现持续集成和部署都很简单</p><p></p><h2>巨头时代</h2><p></p><p></p><p>我们不会过多地讨论IT巨头和成熟的公司。我们只需要知道，成熟的公司已经有了良好的业务、工作流程、行业基础并且会有多个团队专注其功能。</p><p></p><p>在这个阶段，关键要素之一就是将功能性的任务分派给专门的团队，每个团队专注自己的功能，不允许任何团队涵盖多个功能。</p><p></p><h2>从创业公司向成熟公司的过渡</h2><p></p><p></p><p>随着时间的推移，创业公司会达到一个沸点，前端应用开始变得不再灵活，无法与业务保持相同的速度。</p><p></p><p>在试图交付新的功能以满足业务需要时，每个交付周期都会延迟。技术团队对业务的承诺经常落空，他们还没有认识到环境已经发生了变化。团队依然认为他们能够如期交付某个新特性，但是却一次又一次地失败。</p><p></p><p>组织可以通过增加团队或工程师的数量来满足重要的需求。但令人遗憾的是，在很多情况下，将更多的人塞入到技术团队中并不会带来任何的价值。现在，应该改变流程了。</p><p></p><p>系统难以进行扩展的症状包括：</p><p></p><p>系统难以维护系统变得更加脆弱，开发人员不知道在进行变更的时候会破坏其他功能，从而导致经常发生严重的事故持续集成/持续部署过程变得不堪重负，工程师为了交付特性或修复缺陷不得不排队要从一个技术栈转移到另一个技术栈时不得不对整个系统进行修改难以保持应用处于最新状态，难以升级版本当多个团队在同一个代码库中进行交付时，会造成代码库的混乱在没有团队负责维护和改进的情况下，有些代码会被遗弃团队之间没有明确的责任存在多个职能化的团队，比如业务导向团队在做着赋能团队或平台团队的任务</p><p></p><p>在过渡期间，如果出现技术错误，其代价是非常高昂的。在这个阶段，创业阶段的错误会逐渐显露出来。</p><p></p><p>为了让业务继续保持增长，组织中的技术领导层应该调整目前的状态。流行的方案就是将单体架构迁移至微服务（后端技术）或微前端（前端技术）架构。</p><p></p><p>由于本文讨论的是前端技术，所以我会继续讨论微前端，而不是微服务。同时，我也不会讨论微前端架构是好是坏以及哪种微前端方式更好的问题，因为这方面已经有很多的文章和讨论了。</p><p></p><p>相反，我会从可扩展性的角度来考虑微前端架构，以及它是如何解除企业在转向多团队模型时所面临的障碍的。</p><p></p><h2>微前端架构</h2><p></p><p></p><h3>多团队模型中微前端架构的收益</h3><p></p><p></p><p></p><blockquote>微前端是一种架构风格（模式），在这种风格中，独立交付的前端应用会被组合成一个更大的整体（<a href=\"https://microfrontends.com/\">microfrontends.com</a>\"）。这是一种会影响组织的技术，会让团队之间解耦，避免出现过多的集中化，最重要的是，这会给团队授权，让他们针对自己的功能进行决策，不必依赖其他的团队。</blockquote><p></p><p></p><p>一旦某个组织出现了我们上文所述的难以扩展的症状，工程师就可以决定将系统从单体架构转换成微前端架构。与此同时，它会给企业带来一系列的收益。</p><p></p><h4>代码组织</h4><p></p><p></p><p>微前端架构允许团队将单体应用的代码库分割成更小块的代码。每个独立微前端的源码规模将小得多，并聚焦于应用中一小部分的功能。应用中的哪一部分要解耦成微前端，这应该由工程团队决定。它可以是很大的内容（如页面）也可以是很小的内容（如元素）。借助新的代码组织形式，新开发人员花更少的时间就能掌握代码库，并在短时间内就开始对代码做出贡献。</p><p></p><h4>团队独立性</h4><p></p><p></p><p>微前端的代码库应该是隔离的，这有助于业务导向团队选择自己的工作策略和流程。每个团队对应用的一个垂直切片拥有全部的所有权，并且可以在其领域内进行专业化。他们不用担心团队之间的干扰，这减少了团队之间的协调需求。微前端能够让应用按照团队的结构进行组织，这遵循了康威定律。</p><p></p><p></p><blockquote>设计系统的架构受制于产生这些设计的组织的沟通结构Melvin E. Conway</blockquote><p></p><p></p><p>具体样例：</p><p></p><p>如果某个团队想在单体架构中尝试新的技术（新的状态管理器、测试库等），这个决定需要在所有从事该应用的团队间取得一致。这很费时间，而且最终可能难以被一些团队接受。如果团队是独立的，该团队的工程师就可以决定要使用什么技术。这个决定完全不涉及其他的团队。</p><p></p><h4>独立发布</h4><p></p><p></p><p>与微服务的方式相同，微前端要对它的部署负责。它让业务导向团队能够独立发布应用的某一部分。此时不用重新部署整个应用，每个团队都可以只部署其中的小部分功能。这能够让团队在发布的时候，不需要与其他团队协调，也不需要适应全公司的发布周期。如果最后的部署出现问题，能够很容易地回滚而不影响其他团队的工作。将代码库分割成小块，使得微前端的部署需要更短的时间。</p><p></p><h4>领域驱动架构</h4><p></p><p></p><p>采用微前端的原因之一就是实现垂直领域的所有权拆分。从整个公司掌握所有权的单体架构，转变成多个团队掌握所有权的微服务，这有助于公司在不同的团队中扩大开发规模，促进后端所有权的拆分。每个业务导向团队都拥有一个垂直方向的组件，他们从头到尾负责该组件。</p><p></p><h4>减少测试覆盖率涉及的范围</h4><p></p><p></p><p>与大型应用相比，少量的代码更易于测试覆盖。这会促成整个系统中更好的测试覆盖率，因为所有小部分的代码都会被测试覆盖到。</p><p></p><h4>使用不同技术和框架的可能性</h4><p></p><p></p><p>微前端的优势之一就是不依赖于所选择的技术和框架。它更容易找到专门的团队来完成微前端的工作，允许使用其他的技术和框架取代不适用的技术和框架，也能够以较小的技术风险测试新技术。</p><p></p><h3>微前端架构的基本原则</h3><p></p><p></p><p>接下来，我将介绍微前端架构应该遵循的最重要的原则，以保持系统的可扩展性。要实现这一点，我们要引入两个术语：</p><p></p><p>编排器（orchestrator）是用来协调所有微前端的父应用。在理想的情况下，它不包含任何逻辑或业务功能，只作为一个操作者（operator）存在。子微前端是一个领域驱动的应用，涵盖了应用中某一个特定的组成部分。</p><p></p><p>不管技术团队具体使用哪种微前端的方式，为了保持系统的可扩展性，遵循下面这些强制要求是非常重要的。</p><p></p><p>子微前端和编排器之间的强制要求：</p><p></p><p>编排器和子微前端应用之间的耦合性几乎为零编排器不应该关心子微前端应用是如何实现的。如果子微前端的实现方式发生了变化，但提供的接口是相同的，那就不应该对整个应用造成破坏。子微前端应用必须提供一个统一的接口，以便于集成到编排器中。子微前端和编排器之间的所有必要的通信都通过回调或简单事件实现编排器应该能够决定始终使用子微前端的最新版本还是使用指定的特定版本</p><p></p><p>子微前端之间的强制要求：</p><p></p><p>子微前端之间是零耦合的。每个子微前端都不应该知道其他的微前端，必须能够独立工作。不能从一个微前端导入另一个微前端不能使用共享的状态管理工具（如Vuex，Redux）。子微前端之间可以共享库所有的CSS代码必须是范围内的，以排除对样式属性的覆盖。</p><p></p><h3>微前端架构的维护</h3><p></p><p></p><p>决定采纳微前端架构并不是过渡旅程的结束。这将是一个痛苦和危险的过程，但同样也是一个有趣的认知经历。许多陷阱将等待工程团队去解决。</p><p></p><p>其中一个问题是整个微前端架构的维护问题。随着时间的推移，系统可能会有几十甚至几百个微前端，而工程团队将面临新的挑战：如何维护这些微前端。</p><p></p><h3>引入新的微前端</h3><p></p><p></p><p>如何引入新的微前端应用将是工程团队在迁移到微前端架构后遇到的第一个问题。如何在不增加复杂性的情况下搭建一个新的微前端脚手架？由哪个团队负责创建新的微前端？微前端应该遵循哪些标准？</p><p>这些相关的问题必须由工程团队解决，以保持系统的可扩展性和易维护性。否则，系统在很短的时间内就会变得非常混乱。</p><p></p><p>我们预期得到的解决方案是，每个新的微前端都能快速创建，并且有非常相似的设置，以保持所有微前端之间的一致性。我想到了“传送带（conveyor）”这个词。</p><p></p><p>我们有多种方法可以达成该目的。我想和大家分享一个如何实现该目标的想法，那就是使用一个可以在几分钟内基于模板创建新微前端的工具。这可以是现成的解决方案，如<a href=\"https://github.com/cookiecutter/cookiecutter\">cookiecutter</a>\"或其他类似工具。</p><p></p><h3>同步现有的微前端</h3><p></p><p></p><p>创建新的微前端只是万里长征第一步。随着时间的推移，将会有许多微前端需要与基本模板进行同步。这可能也是我们需要模板的原因：解决漏洞、更新配置、更新其他软件包的版本等。</p><p></p><p>令人遗憾的是，cookiecutter无法将现有的项目与模板同步。为了解决这个问题，在我的公司中，我们开发了自己的解决方案，它可以为新创建或已有的微前端提供一个脚手架。</p><p></p><p>在编写概念验证（Prove of Concept）项目的过程中，我创建了<a href=\"https://github.com/NovoManu/project-cli\">mucli</a>\"项目，它基于我们组织中遵循的类似原则。该项目会在Github上获取仓库，在仓库中寻找模板，并创建新项目或同步现有的项目。它提供了如下开箱即用的功能：</p><p></p><p>从模板库创建和同步项目。你可以创建自己的模板库并使用mucli进行项目创建和同步。模板库是完全独立的，由你自行维护。mucli包只是与你的模板协作而已。用户友好的命令行界面，可以为每个模板添加自定义的用户问题。支持在文件中插入动态值，能够根据设置或用户互动来创建自定义的文件。前缀系统，可以使用不同的前缀来标记文件，以便在同步过程中对这些文件进行操作。可组合的模板，它可以基于较小的模块创建出一个非常灵活的模板。</p><p></p><p>欢迎了解<a href=\"https://github.com/NovoManu/project-cli\">mucli</a>\"项目并为其贡献内容。我将在接下来的文章中深入探讨它的实现细节。</p><p></p><h2>结论</h2><p></p><p></p><p>在这篇文章中，我分享了我们从创业公司转变为成熟公司期间的想法和决定。如果你对这些话题感兴趣的话，可以通过<a href=\"https://github.com/NovoManu\">GitHub</a>\"或<a href=\"https://twitter.com/ManuUstenko\">Twitter</a>\"与我联系。</p><p></p><p>相关阅读</p><p></p><p><a href=\"https://www.infoq.cn/article/veSKosrSkC9xGiyygYku%EF%BC%89\">Htmx 意外走红，我们从 React“退回去”后：代码行数减少 67%，JS 依赖项从 255 下降到 9</a>\"</p><p></p><p><a href=\"https://www.infoq.cn/article/2SyNfw6RkyTV4gkRavIQ%EF%BC%89\">新一波 JavaScript Web 框架</a>\"</p>",
    "publish_time": "2022-10-25 10:16:01",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "谷歌发布《2022 年 DevOps 促进状态报告》：深入研究安全问题",
    "url": "https://www.infoq.cn/article/ZXg1Dta9ieSig9if3sz4",
    "summary": "<p>2021 年，由于数据泄露，超过 <a href=\"https://www.securitymagazine.com/articles/97046-over-22-billion-records-exposed-in-2021?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">220 亿条记录被曝光</a>\"，数家大型公司成为受害者。在这种攻击和<a href=\"https://www.npr.org/2021/04/16/985439655/a-worst-nightmare-cyberattack-the-untold-story-of-the-solarwinds-hack?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">其他恶意攻击</a>\"之间，安全问题仍然是企业的头等大事，因为他们努力保持客户数据的安全和业务的正常运行。</p><p></p><p>有鉴于此，谷歌云的 DevOps 研究和评估（DevOps Research and Assessment，<a href=\"https://www.devops-research.com/research.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">DORA</a>\"）团队决定在 9 月 29 日发布的《<a href=\"https://cloud.google.com/devops/state-of-devops/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">2022 年 DevOps 促进状态报告</a>\"》（2022 Accelerate State of DevOps Report）中重点关注安全问题。</p><p></p><p>在过去的八年里，全球共有超过 33000 名专业人士参加了《<a href=\"https://cloud.google.com/devops?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">DevOps 促进状态</a>\"》调查，使其成为同类研究中规模最大、持续时间最长的。 每年的《DevOps 促进状态报告》都提供了数据驱动的行业洞察力，研究了推动软件交付的能力和实践，以及运营和组织业绩。</p><p></p><p></p><h2>确保软件供应链的安全</h2><p></p><p></p><p>为了分析安全和 DevOps 之间的关系，我们探讨了软件供应链安全的话题，该调查在前几年只是轻描淡写地提到了这一话题。为此，我们使用了<a href=\"https://slsa.dev/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">安全工件的供应链级别</a>\"（Supply-chain Levels for Secure Artifacts，SLSA）框架，以及 NIST 的<a href=\"https://csrc.nist.gov/publications/detail/sp/800-218/final?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">安全软件开发框架</a>\"（Secure Software Development Framework，SSDF）。这两个框架使我们能够探索影响组织如何实施和思考软件安全实践的技术和非技术方面。</p><p></p><p>总的来说，我们发现，目前正在兴起的安全实践得到了普遍的采纳，而且大多数受访者至少部分采用了我们询问的每项实践。在 SLSA 和 NIST SSDF 倡导的所有实践中，使用应用级安全扫描作为生产发布的持续集成/持续交付（CI/CD）系统的一部分是最常见的实践，63% 的受访者表示这是“非常”或“完全”确定的。保存代码历史和使用构建脚本也是高度成熟的做法，而签署元数据和要求两人审查程序则有最大的增长空间。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/47/47b7a933dbead6f3d6c36a5af2ea1e4a.jpeg\" /></p><p></p><p>我们发现了一个让人吃惊的事实，那就是组织在软件安全实践的最大预测因素是文化，而非技术；</p><p></p><p>我们发现一个令人惊讶的现象是，一个组织的软件安全实践的最大预测因素是文化，而不是技术：高信任、低责备的文化，就像 <a href=\"https://cloud.google.com/architecture/devops/devops-culture-westrum-organizational-culture?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">Westrum</a>\" 所定义的那样，以业绩为导向，比低信任、高责备的文化注重权力或规则，明显更倾向于新兴的安全实践。此外，调查结果还显示，那些致力于构建安全实践的团队降低了开发者的倦怠，而且更有可能将自己的团队推荐给别人。为此，有数据表明，组织的文化和现代开发流程，例如持续集成，是组织软件安全的最大推动力，也是那些想要改善安全状况的组织的最好的出发点。</p><p></p><p></p><h2>2022 年还有什么新鲜事？</h2><p></p><p></p><p>虽然我们在今年将重点放在了安全方面，但这并不妨碍我们在软件的交付和运营业绩上进行研究。我们将 DevOps 团队归类为<a href=\"https://cloud.google.com/blog/products/devops-sre/using-the-four-keys-to-measure-your-devops-performance?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">四大主要指标</a>\"：部署频率、变更准备时间、平均恢复时间、变更失败率，还有我们去年引入的第五项指标——可靠性。</p><p></p><p></p><h3>软件交付业绩</h3><p></p><p></p><p>根据以上五项指标，受访者被分成三个群组：高、中、低。与前几年不同的是，目前尚无存在“精英”群组的迹象。说到软件交付业绩，今年的“高”群组是由去年的“高”和“精英”两个群组混合而成。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d1/d1d26081092056a555077ccfe0733c6e.jpeg\" /></p><p></p><p>从下表的百分比可以看出，“高”群组是四年来的最低水平，而“低”群组从 2021 年的 7% 大幅上升到 2022 年的 19%！“中”群组则增加到 69%。也就是说，如果你将今年的低、中、高三个群组与去年的群组进行对比，你会看到整体上，软件的交付业绩已经开始转向更高的水平。今年的“高”群组表现更好——他们的业绩相当于去年“高”和“精英”两个群组的混合。“低”群组的表现也优于去年——今年的“低”群组是由去年的“低”和“中”两个群组混合而成。</p><p></p><p>我们打算做更深入的研究，以便更好地了解这个变化，但是现在，我们假定，持续的新冠肺炎疫情可能会妨碍团队分享知识、协作和创新，从而使“高”群组的数量下降，“低”群组的数量增多。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a3/a3050a4c3c828338ccc3e6537c5bea28.jpeg\" /></p><p></p><p></p><h3>运营业绩</h3><p></p><p></p><p>谈到 DevOps，软件交付性能并不是全部——它也可以对组织的整体运营业绩做出贡献。为了进一步的研究，我们将五项指标所代表的三个类别进行了聚类分析：吞吐量（代码变更的准备时间和部署频率的综合）、稳定性（恢复服务的时间和变更失败率的综合）和运营业绩（可靠性）。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2e/2e1f319da3ffdd0c5435cb0d4fe596f9.jpeg\" /></p><p></p><p>通过我们的数据分析，发现了四种不同类型的 DevOps 组织；在这些群组实践和技术能力方面存在显著差异，所以我们对其进行了更多的划分：</p><p></p><p>起步：这个群组在我们的任何维度上都表现得既不出色，但也不差。这个群组可能处于产品、功能或服务发展的早期阶段。他们也许不会把注意力放在可靠性上，而是集中在获取用户的反馈、理解他们的产品是否符合市场，还有更广泛的探索。上升：这个群组在所有特征上都表现良好：高可靠性、高稳定性、高吞吐量。而在受访者中，仅有 17% 有这种上升状态。滞涨：这个群组的受访者并不频繁地进行部署，但是一旦部署起来，他们就有可能获得成功。超过三分之一的回复属于这一群组，使其成为我们样本中最具代表性的。这种模式很可能是典型的（尽管远非唯一的）团队，他们正在逐步改进，但他们和他们的客户对目前的应用或产品的现状还是比较满意的。衰退：最后，这个群组看起来像一个团队，他们正在开发一个对他们和他们的客户来说依然有价值的服务或应用程序，但不再积极开发。</p><p></p><p>你是“上升”群组中的一员吗？虽然之前的受访者遵循这个<a href=\"https://cloud.google.com/blog/products/devops-sre/using-the-four-keys-to-measure-your-devops-performance?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">指导</a>\"来帮助他们达到“精英”地位，但那些致力于进入“上升”群组的团队应该将精力集中在松散耦合的架构、CI/CD、版本控制，以及在工作环境的灵活性。一定要看看我们关于<a href=\"https://www.devops-research.com/research.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">技术能力的文章</a>\"，其中有关于这些能力以及实施这些能力的细节。</p><p></p><p></p><h2>向我们展示你如何使用 DORA</h2><p></p><p></p><p>DevOps 状态报告是一个让你了解团队能够提高 DevOps 业绩的好地方，但是也有助于观察一下其他组织怎样利用这份报告来对整个组织产生有意义的影响。去年，我们推出了首届 <a href=\"https://cloud.google.com/awards/devops?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">Google Cloud DevOps 大奖</a>\"，今年我们有幸与大家分享 <a href=\"http://cloud.google.com/awards/devops?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">DevOps 大奖的电子书</a>\"，其中包括去年获奖公司的 13 个案例研究。从德勤（Deloitte）、劳氏（Lowe's）和维珍传媒（Virgin Media）等公司那里了解到他们如何在其组织中成功实施 DORA 实践。一定要<a href=\"https://forms.gle/TXkGKJea4up8gnw27?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjY2MjIxMjcsImZpbGVHVUlEIjoiNDdrZ0pYNVcwV0NuZ2JxViIsImlhdCI6MTY2NjYyMTgyNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4MjQxNjgxMn0.rdFPXR_OXxJuzrHiGMcQE81wT7SkGXQ47M8vruY8iEY\">申请 2022 年 DevOps 大奖</a>\"来分享你组织的转型故事！</p><p></p><p>感谢所有参与我们 2022 年调查的人。我们希望《DevOps 促进状态报告》能够帮助各种规模、行业和地区的组织提高他们的 DevOps 能力，我们也期待着听到你们的想法和反馈。</p><p></p><p>作者介绍：</p><p></p><p>Derek DeBellis、Claire Peters，均为 Google CLoud DORA 研究主管。</p><p></p><p>原文链接：https://cloud.google.com/blog/products/devops-sre/dora-2022-accelerate-state-of-devops-report-now-out</p><p></p><p>相关阅读</p><p></p><p><a href=\"https://www.infoq.cn/article/EahixYJRtoPSV4G1V1wk%EF%BC%89%E6%8A%8A%E9%93%BE%E6%8E%A5%E9%99%84%E5%9C%A8%E6%96%87%E5%AD%97%E4%B8%8A%E5%93%88\">DevOps 在施耐德：众人参与其中的变革之旅 </a>\"</p><p></p>",
    "publish_time": "2022-10-25 10:16:06",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "微软发布Azure Cosmos DB for PostgreSQL",
    "url": "https://www.infoq.cn/article/4114G9FlqZFEyTzQ53mq",
    "summary": "<p>在最近的<a href=\"https://ignite.microsoft.com/\">Ignite会议</a>\"上，微软宣布推出<a href=\"https://learn.microsoft.com/en-us/azure/cosmos-db/postgresql/introduction\">Azure Cosmos DB for PostgreSQL</a>\"，这是一种新的通用（GA）服务，用于构建云原生关系应用程序。它是一种分布式关系数据库，具有Azure Cosmos DB的可伸缩性、灵活性和性能。</p><p>&nbsp;</p><p><a href=\"https://azure.microsoft.com/en-us/products/cosmos-db/#overview\">Azure Cosmos DB</a>\"是一个全托管的NoSQL数据库，具有针对NoSQL工作负载的<a href=\"https://learn.microsoft.com/en-us/azure/cosmos-db/choose-api\">各种API</a>\"，包括原生NoSQL和兼容API。在PostgreSQL的支持下，该服务现在支持关系和NoSQL工作负载。此外，该公司<a href=\"https://devblogs.microsoft.com/cosmosdb/distributed-postgresql-comes-to-azure-cosmos-db/\">表示</a>\"，Azure是第一个在同一服务上同时支持关系和NoSQL选项的云平台。</p><p>&nbsp;</p><p>该PostgreSQL支持<a href=\"https://www.postgresql.org/\">PostgreSQL</a>\"附带的所有原生功能，包括丰富的<a href=\"https://www.citusdata.com/blog/2016/07/14/choosing-nosql-hstore-json-jsonb/\">JSON支持</a>\"、<a href=\"https://www.citusdata.com/blog/2017/10/17/tour-of-postgres-index-types/\">强大的索引</a>\"、广泛的数据类型和全文搜索。除了基于开源的Postgres构建之外，微软还使用<a href=\"https://github.com/citusdata/citus\">Citus开源扩展</a>\"实现了分布式查询执行。此外，该公司还在一篇<a href=\"https://devblogs.microsoft.com/cosmosdb/distributed-postgresql-comes-to-azure-cosmos-db/\">开发者博客文章</a>\"中表示，随着PostgreSQL新版本的发布，它将在两周内为用户提供<a href=\"https://learn.microsoft.com/en-us/azure/cosmos-db/postgresql/reference-extensions#extensions-supported-by-azure-cosmos-db-for-postgresql\">这些版本</a>\"。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/36/364d2f144a23bea303e7eae93b189f14.png\" /></p><p>来源：<a href=\"https://devblogs.microsoft.com/cosmosdb/distributed-postgresql-comes-to-azure-cosmos-db/\">https://devblogs.microsoft.com/cosmosdb/distributed-postgresql-comes-to-azure-cosmos-db/</a>\"</p><p>&nbsp;</p><p>开发人员可以像使用PostgreSQL一样在<a href=\"https://learn.microsoft.com/en-us/azure/cosmos-db/postgresql/quickstart-create-portal?tabs=direct\">单节点集群上</a>\"开始构建应用程序。此外，当应用程序的可伸缩性和性能需求增长时，它可以通过透明地分发表无缝地扩展到多个节点。与<a href=\"https://azure.microsoft.com/en-us/products/postgresql/\">Azure Database for PostgreSQL</a>\"相比会有所不同，微软的Azure Cosmos DB高级项目经理Jay Gordon在<a href=\"https://twitter.com/jaydestro/status/1580571802052726786\">推特</a>\"上解释道：</p><p>&nbsp;</p><p></p><blockquote>#AzureCosmosDB for #PostgreSQL是一种分布式横向扩展群集架构，它允许客户扩展@PostgreSQL工作负载以在多台计算机上运行。Azure Database for PostgreSQL是单节点架构。</blockquote><p></p><p>&nbsp;</p><p>此外，Cosmos DB身后的产品团队在<a href=\"https://twitter.com/AzureCosmosDB/status/1580351948296814592\">推特上写道</a>\"：</p><p>&nbsp;</p><p></p><blockquote>我们跨多个数据库服务为我们的用户提供多个关系数据库选项。我们的Azure Cosmos DB产品为你提供了PostgreSQL扩展，并支持你可能已经在PostgreSQL中使用到的代码。</blockquote><p></p><p>&nbsp;</p><p>最后，微软Azure Cosmos DB的首席团队项目经理Charles Feddersen在Microsoft Mechanics<a href=\"https://Microsoft Mechanics\">视频</a>\"中表示：</p><p>&nbsp;</p><p></p><blockquote>通过在Cosmos DB中引入分布式的Postgres，我们现在可以让你更轻松地在单个托管服务中使用NoSQL和关系功能构建高度可扩展的云原始应用程序。</blockquote><p></p><p>&nbsp;</p><p>更多服务相关的详细信息可通过<a href=\"https://learn.microsoft.com/en-us/azure/cosmos-db/postgresql/\">文档登录页</a>\"获取，并且在<a href=\"https://www.youtube.com/playlist?list=PLmamF3YkHLoKZyongafWT2iGnJCsd3U6j\">YouTube的系列视频</a>\"中提供了指南。此外，Azure Cosmos DB的定价详情可在<a href=\"https://azure.microsoft.com/en-us/pricing/details/cosmos-db/\">定价页面</a>\"上找到。</p><p>&nbsp;</p><p>&nbsp;</p><p>作者介绍：</p><p>Steef-Jan Wiggers是InfoQ的云技术高级编辑，在荷兰HSO担任技术集成架构师。他目前的技术专长主要集中在集成平台实施、Azure DevOps和Azure平台解决方案架构。Steef-Jan是荷兰Azure用户组的董事会成员，经常在会议和用户组中发表演讲，并为InfoQ和Serverless Notes撰稿。此外，在过去的11年里，微软一直将其评为Microsoft Azure MVP。</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/10/azure-cosmosdb-postgresql-ga/\">https://www.infoq.com/news/2022/10/azure-cosmosdb-postgresql-ga/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/osfct6YzPXLPxKgX1Bc5\">微软发布 Dev Box 公开预览版：面向开发人员的云端工作站</a>\"</p><p><a href=\"https://www.infoq.cn/news/CGAO9gM2Tv7u358IdIg2\">微软有史以来最重的软件：超过 18 公斤</a>\"</p>",
    "publish_time": "2022-10-25 10:39:35",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Meta开发出首个无文字语言AI翻译系统，闽南语翻译安排上了！",
    "url": "https://www.infoq.cn/article/OMpKPZzWMiy4BRSa9ogz",
    "summary": "<p>本文最初发布于 VentureBeat 博客。</p><p></p><p>人工语音翻译是一种新兴的人工智能（AI）技术。起初，这种语音翻译技术（S2ST）是为了帮助说不同语言的人进行交流而创建的，但现在，它已经进入了多个领域。例如，全球科技企业集团正使用 S2ST 直接翻译元宇宙中的共享文件和音频对话。</p><p></p><p>在上周的 Cloud Next ’22 大会上，谷歌宣布了自己的 AI 语音<a href=\"https://www.infoq.cn/article/VEJXIK1Rv6uXsVdKlT5m\">翻译</a>\"模型“Translation Hub”。该模型使用了云翻译 API 和 AutoML 翻译。现在，Meta 也不甘落后。</p><p></p><p>近日，Meta AI 宣布启动通用语音翻译（UST）项目，旨在创建一个可以跨所有语言进行实时语音翻译的 AI 系统，甚至包括那些口语常用但书面语不常用的语言。</p><p></p><p>Meta 联合创始人兼首席执行官马克·扎克伯格说，“Meta AI 开发了首个语音翻译软件，主要用于口语而非书面语。它是开源的，这样人们就可以把它用于更多的语言”。</p><p></p><p>按照 Meta 的说法，该模型是首个人工智能语音翻译系统，用于非书面语言闽南语。闽南语是一种在中国东南沿海和台湾地区使用的语言，在世界各地的华人中，也有许多人在使用。该系统使得说闽南语的人可以与说英语的人进行对话，这是打破全球语言障碍的重要一步。它将促进人与人之间的交流，无论他们在哪里——甚至在元宇宙中。</p><p></p><p>这是一项艰巨的任务，因为与普通话、英语和西班牙语既是书面语言又是口头语言不同，闽南语主要是口头的。</p><p></p><p></p><h2>AI 如何处理语音翻译</h2><p></p><p></p><p>Meta 表示，目前的人工智能翻译模型主要关注广泛使用的书面语言，在主要的口头语言中，尚有超过 40% 没有被这种翻译技术所覆盖。在 2 月份举行的公司 AI Inside The Lab 活动上，扎克伯格分享了 Meta AI 针对网络上不常见的语言进行通用语音翻译研究的进展。UST 项目就是在此基础上开展的。那次活动的重点是使用这种沉浸式 AI 技术来构建元宇宙。</p><p></p><p>为了构建 UST，<a href=\"https://www.infoq.cn/article/4iDmM3PgXmvELorwQ8M3\">Meta AI </a>\"致力于克服翻译系统面临的三项关键挑战。他们获取了更多语言的更多训练数据，并找到了利用现有数据的新方法，解决了数据稀缺的问题。他们还解决了随着模型发展（支持更多语言）而产生的建模挑战。他们还找到了新的方法来评估和改进其结果。</p><p></p><p>Meta AI 的研究团队将闽南语作为端到端解决方案的一项案例研究，从训练数据收集和建模选择到基准数据集。该团队专注于创建人工标注数据，自动从大型无标签语音数据集中挖掘数据，并采用伪标签生成弱监督数据。</p><p></p><p>Meta 研究员 Juan Pino 表示：“我们团队首先将英语或闽南语的语音翻译成普通话文本，然后再将其翻译成闽南语或英语。然后，我们会将成对的句子添加到用于训练人工智能模型的数据中。”</p><p></p><p>在这段视频中，扎克伯格展示了该公司的人工智能语音翻译模型。</p><p></p><p>在建模方面，Meta AI 运用了该领域的最新进展，在语音翻译中使用自监督离散表示作为预测目标，并演示了在模型训练中附加来自普通话的文本监督的有效性。Meta AI 表示，他们还将发布一个语音翻译基准，以推动该领域未来的研究。</p><p></p><p>人工智能研究员、Lightning AI 首席执行官兼联合创始人 William Falcon 表示，人工语音翻译可以在<a href=\"https://www.infoq.cn/article/5m5afBSrqT4ipYqxCwDi\">元宇宙</a>\"中发挥重要作用，因为它有助于促进交互和内容创造。</p><p></p><p>Falcon 告诉 VentureBeat，“在交互方面，它将使来自世界各地的人们相互之间更顺畅地交流，使社交图谱的联系更为紧密。此外，借助人工语音翻译可以轻松将内容本地化，以供多种语言消费。”</p><p></p><p>Falcon 认为，疫情大幅增加了远程办公的人数，以及对远程办公工具的依赖，这些因素共同推动了该领域的发展。显然，这些工具可以从语音翻译功能中受益。</p><p></p><p>他说，“很快，我们就有望在元宇宙中实现播客、Reddit AMA 或 Clubhouse 式的体验了。使用多种语言进行广播，大规模地增加潜在受众。”</p><p></p><h2>Meta 通用语音翻译系统（UST）的工作原理</h2><p></p><p></p><p>该模型使用 S2UT 将输入语音直接转换为该路径下的一系列声学单元，这是 Meta 之前开创的一种实现方式。生成的输出由来自输入单元的波形组成。此外，Meta AI 采用了 UnitY 的双通解码机制，即一通解码器生成相关语言（普通话）的文本，二通解码器创建单元。</p><p></p><p>为了实现闽南语的自动评估，Meta AI 开发了一个系统，将闽南语语音转录为一个名为“Tâi-lô”的标准化音标。这使得数据科学团队可以计算音节级的 BLEU 评分（一种标准的机器翻译指标），并快速比较不同方法的翻译质量。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4d/4df8d366e8beb0154ae5ec83411069e6.png\" /></p><p>具有单路和双路解码器的UST模型架构。阴影中的方块为预训练模块（图片来源：Meta AI）。</p><p></p><p>除开发了一种评估闽南语 - 英语语音翻译的方法外，该团队还创建了第一个闽南语 - 英语双向语音翻译基准数据集，该数据集基于闽南语语音语料库“Taiwanese Across Taiwan”。</p><p></p><p>Meta AI 声称，他们在闽南语中开创的技术可以扩展到许多其他非书面语言——并最终实现实时翻译。为此，Meta 发布了语音矩阵（Speech Matrix），这是一个大型的语音翻译语料库，可使用 Meta 的创新数据挖掘技术（LASER）进行挖掘。这将使其他研究团队能够创建他们自己的 S2ST 系统。</p><p></p><p>LASER 将多种语言的句子转换为单个多模式、多语言表示。该模型使用大规模多语言相似度搜索来识别语义空间中相似的句子，即不同语言中可能具有相同含义的句子。</p><p></p><p>从语音矩阵中挖掘出的数据提供了 41.8 万小时的并行语音用于翻译模型训练，覆盖了 272 个语言方向。到目前为止，已经挖掘出超过 8000 小时的闽南语语音以及相应的英语翻译。</p><p></p><p></p><h2>语音翻译未来的机遇与挑战</h2><p></p><p></p><p>目前，Meta AI 的重点是开发一个语音翻译系统，而且要不依赖于推理过程中生成的中间文本表示。事实证明，该方法比传统的级联系统（组合使用了独立的语音识别、机器翻译和语音合成模型）速度更快。</p><p>Synthesis AI 首席执行官兼创始人 Yashar Behzadi 认为，如果元宇宙要取得成功，就需要借助技术提供更多沉浸式的自然体验。</p><p></p><p>他指出，由于语言的广泛性、复杂性和语言之间存在的细微差别，UST 模型目前面临的挑战之一是训练所需的计算成本非常高昂。</p><p></p><p>他说，“训练健壮的 AI 模型需要大量的代表性数据。在不久的将来，构建这些 AI 模型的一个重要瓶颈将是收集、管理和标注符合隐私合规要求的训练数据。获取的数据不够多样化可能会导致偏见，对不同的人群产生不同的影响。新兴的合成语音和 NLP 技术有可能在实现更强大的模型方面发挥重要的作用。”</p><p></p><p>Meta 表示，随着效率的提高和架构的简化，直接进行语音到语音的翻译可以为 AR 眼镜等未来设备解锁接近人类质量的实时翻译功能。此外，该公司最近在无监督语音识别（wav2vecu）和无监督机器翻译（mBART）方面取得的进展将有助于在元宇宙中翻译更多的口头语言。</p><p></p><p>随着在无监督学习方面取得的进展，Meta 旨在打破现实世界和元宇宙中所有语言的语言障碍，无论是书面的还是非书面的。</p><p></p><p>原文链接：</p><p></p><p>https://venturebeat.com/ai/meta-ai-announces-first-ai-powered-speech-translation-system-for-an-unwritten-language</p>",
    "publish_time": "2022-10-25 10:56:30",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "小程序的新时代：改变开发习惯，打造企业数字化新基建",
    "url": "https://www.infoq.cn/article/tEYo3LCbgRt7WOuSGIgM",
    "summary": "<p>时至今日，当我们提起小程序时，不再特指小程序，互联网巨头也纷纷加入小程序的竞争赛道，强化垂直行业布局。小程序战略价值已经逐渐达成共识，无数企业也希望自己的移动应用可以具备运行应用小程序的能力，加入轻应用生态建设，跟上互联网巨头的步伐。</p><p>&nbsp;</p><p>在此背景下，凡泰极客借鉴互联网成熟小程序技术方案推出 FinClip 小程序容器技术。其小程序运行沙箱已实现移动端、PC 端、车载系统等跨设备端支持，并获得了国家相关安全机构认证，一经上线就受到了市场的广泛认可，目前上百家知名券商、股份制银行、航空公司、车载设备服务商、省级移动警务平台选择与其合作。</p><p>&nbsp;</p><p>于是我们本期《InfoQ C 位面对面》便邀请到了凡泰极客联合创始人&amp; CEO 杨涛，InfoQ 主编王一鹏与他围绕“小程序的技术演进及其对企业数字化转型的影响”展开了畅聊。</p><p></p><p></p><p></p><p></p><h2>一、小程序“不仅只是”小程序</h2><p></p><p>&nbsp;</p><p>小程序想要在 APP 中跑起来，那首先要有一个东西可以去解析它，所以小程序的技术载体是一个解释器，而事实上解释器就是一个“容器”，只不过这个容器是在终端上。于是 FinClip 小程序便采用了云原生底层架构设计，支持百万数据查询与高并发吞吐，保证业务平滑运行。</p><p>&nbsp;</p><p>FinClip 小程序的 SDK 支持在 iOS、Android、Windows、macOS、Linux 等多种智能终端运行，无论是私有云、行业云还是混合云，都能够安装部署。任何 APP 均可以通过引入 FinClip「小程序运行时 SDK」来获得运行小程序的能力，同时通过 FinClip 管理后台，企业自身或者外部合作伙伴可自由完成小程序的更新及上架。</p><p>&nbsp;</p><p>FinClip 小程序容器技术灵活强大，遵循微信与主流小程序开发标准与规范，无需额外学习成本，只需一次开发，即可多端上架，同时企业可以根据自己的业务灵活配置 API 和第三方 SDK 插件。</p><p>&nbsp;</p><p>FinClip 还提供小程序 IDE 开发工具，深度提升需求迭代速度，且支持自定义规则引擎，可针对营销场景用户画像等不同需求进行小程序的分群、分时投放。</p><p>&nbsp;</p><p>除此之外，企业通过 FinClip 的&nbsp;IDE，不仅能够完成小程序的开发与调试，还能够在小程序的基础上生成 App。企业可以低成本地将小程序转换成 APP，对开发者的技术栈要求大大降低，“会开发小程序”=“会开发 APP”。在整个转换过程中没有限制条件，小程序的所有接口都可以使用，如果有其他接口需求还可以自己开发。</p><p>&nbsp;</p><p>由小程序转换后的 APP 和原生 APP 相比几乎感受不到差距，如杨涛所说“非要说有差异，那就是在实验时，播放视频、流媒体、直播时的混合渲染会有毫秒级的差异，那肉眼基本是看不出来的，而且 FinClip 目前正在迭代这个问题。”</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/a6/c6/a6ae12b2873f5f328836b04e9d812dc6.png\" /></p><p></p><p>其实一直以来，FinClip 都是在致力于通过小程序技术为企业解决人力不足、APP 功能臃肿的问题，同时为企业提供更多优质的小程序资源，帮企业打造自己的小程序生态，因此便衍生出了小程序生态圈的解决方案。</p><p>&nbsp;</p><p>在该解决方案中，FinClip 整合了优质小程序开发商、小程序商户资源以共建小程序生态圈，基于 FinClip 小程序 SDK 技术与小程序开发商和小程序私有化企业共同建立起的小程序分发网络，覆盖衣食住行、社交协同、办公软件等各类高频小程序场景：</p><p>&nbsp;</p><p>丰富的小程序市场。FinClip 小程序生态圈通过整合各种类型的小程序开发商接入小程序资源并上架到 FinClip 小程序平台形成小程序应用市场；统一的性能体验。企业在集成了 FinClip SDK 的基础上可以在生态圈中自由采购小程序，无需另外找开发商沟通和购买；成本低。由于使用的是同一套 SDK 技术，小程序可以统一打包，再通过接口分发至对应的 APP 中，简单便捷地完成了 APP 中小程序生态的丰富和扩充；兼容常见小程序语法，再也不用重复造轮子。</p><p>&nbsp;</p><p>总之，企业不论是在自己的应用中引入小程序拓展能力，还是让小程序上架在其他应用中获取流量，都能借 FinClip 进行连接整合。同时，为了提供安全稳定的产品，FinClip 经过真实生产环境服务器与运维人员百万级并发压力测试，可保证业务无忧运行。</p><p>&nbsp;</p><p></p><h2>二、“打造企业数字生态新基建”不是说说而已</h2><p></p><p>&nbsp;</p><p>随着数字化转型的推进，及认识与使用 FinClip 的企业越来越多，企业向市场释放出了新信号和新需求。比如企业希望能够在线上环境中完成商业化使用、希望能够自己对已有资源进行灵活拓展...种种原因之下，FinClip 在今年上半年年推出了 FinClip SaaS 版。</p><p>&nbsp;</p><p>FinClip SaaS 版主要是定位中小企业的开发者，通过 SaaS 平台去帮助他们更加便捷、更加高效、更低成本地将小程序技术应用到 APP 里去。在目前整体大经济环境充满挑战的情况下，很好地帮企业推进数字化转型以完成降本增效。</p><p>&nbsp;</p><p>然而当我们跳到整个宏观层面上去看整个数字化转型的过程，金融领域一直走在前面，该类需求旺盛、要求高，金融企业及其他企业金融场景需求的实践对全行业的数字化转型也具备极大参考意义。从 2017 年成立至今，FinClip 完成了从“起于金融“到“不止于金融”的转变，但对于金融类应用的思考一直很深度，对金融类应用的痛点非常清晰，推出了许多解决方案。</p><p>&nbsp;</p><p>比如证券行业的“监管沙盒”。在需要牌照的中国证券业是强监管的，“合规”是证券业最大的业务需求。FinClip 便利用金融科技的手段，以小程序的方式将国外的“监管沙盒”概念在国内照进了现实。这里的“沙盒”不再仅仅是一个小程序，更多的应该是一个“技术载体”。因为这个“沙盒”承担了证券业务上的在线监管、风控、安全隔离、加密、隐私保护等能力和许多个性化的业务创新，它的呈现方式可以是 H5 等其他形式，小程序只是一种呈现方式。用杨涛的话说，“推动证券行业的数字化转型，其实就是要解决他们的业务创新需求和监管需求，至于形式如何，其实并没有多重要。”</p><p>&nbsp;</p><p>与证券行业相比，银行业的用户基数要大得多得多。所以银行的主要业务痛点就是其 APP 的 MAU 很高，但高频场景很好少，他们需要提高用户的在线时长。所以很多银行 APP 都会想办法引入各种各样的民生类高频场景的应用功能，而 FinClip 对此的解决方案就是帮助“开放银行”。</p><p>&nbsp;</p><p>开放银行这个概念是由 2015 年由欧盟提出来的，欧美的解决方案是提供一个统一的 OpenAPI 给开发者使用。但是这套解决方案到了中国有点水土不服，因为监管与安全风险的存在及国内银行业务需求的差异化，国内银行无法使用统一的 OpenAPI 标准去编码或者成本很高。于是 FinClip 通过开放小程序组件来满足银行 APP 的能力需求，将民生类高频场景的小程序组件直接接到了银行 APP 上。除了完成了降本增效的目的以外，因为 FinClip 小程序组件都是在“容器”中运行的，在这样一个类沙盒的环境里，可以保证绝对的代码安全、银行业务信息安全。</p><p>&nbsp;</p><p>无独有偶，FinClip 给政企提出的解决方案与开放银行的解决方案有异曲同工之妙。对于存在孤岛现象的政企 APP 来说，场景下便捷地业务实现是最大的痛点，他们需要全部业务实现数字化。之前最常见的场景是，有些政企单位在办一个业务时需要打开十几个 APP 才能完成，然而现在 FinClip 开放自己的小程序 API，政企 APP 可以直接接入，在保证软件供应链安全的情况下，将所有“小功能”聚合到一起，大大提升了业务办理效率。</p><p>&nbsp;</p><p>从这些解决方案中，我们不难看出，打造通用的数字化生态新基建是 FinClip 的最终目标。 FinClip 做好了“小程序”这件事，而且成功利用小程序推动了各行业的数字化转型。</p><p></p><p></p><h2>三、“未来数字生态世界”的开发者将发生改变</h2><p></p><p>&nbsp;</p><p>企业数字化转型过程中，会有各种各样的业务场景，企业需要一个通用的基于操作系统的基础设施去完成一系列的数字化动作，这可以称之为“新基建”。不仅仅要解决用户移动端的问题，还要解决各种终端的问题。未来数字生态的世界势必不会离开“新基建”。</p><p>&nbsp;</p><p>FinClip 目前提出的所有解决方案都是基于新基建的逻辑，在所有应用中都可以通过植入小程序的方式解决问题。而最重要的是，FinClip 一直认为小程序只是截至目前展现功能最佳的一种形式，用杨涛的话来说，“如果把数字化新基建比喻成公路，那 FinClip 提供的则是一条“高速公路”，这条高速公路可以通 APP，可以通平板、电视机、新能源车等所有智能终端。有了这条“高速公路”，所有场景的“车”都可以跑。”</p><p>&nbsp;</p><p>针对智能终端，目前 FinClip 将主要把精力放在终端连接上，在不久的未来，像多屏互动或者其他复杂的交互场景下的智能终端都可以通过小程序连接起来，从而促进整个生态的交互闭环与发展。</p><p>&nbsp;</p><p>一直致力于以小程序形态的轻应用技术赋能企业拥有自己的数字化基建、构造自己的数字生态的 FinClip 在今年年初加入了 W3C（MiniApps-WG）。近几年来以小程序为代表的快应用技术，因生态丰富、用户反馈良好，在国际上引起了广泛关注。去年在阿里、华为、百度等多家国内企业的推动下，W3C 便成立了小程序快应用技术标准化的工作组 MiniApps-WG。目前组内成员除了国内一线大厂为代表的众多中国科技公司外，还有 Google、Microsoft、Intel 等国际知名公司。</p><p>&nbsp;</p><p>对此，杨涛提到，“FinClip 加入到 MiniApps-WG 后，将会把自己过往的经验积极贡献出来，推动小程序类轻应用技术的工业标准形成。”</p><p>&nbsp;</p><p>但无论是小程序还是 H5，或者是未来可能会出现的未知新技术，只要是可以被称之为“新基建”的敏捷工具，都会具有开发门槛低、投入成本低的特点，因为目的都是为了企业能够更高效、更低成本地去完成业务数字化转型。</p><p>&nbsp;</p><p>在未来数字生态世界的开发者们不仅可以摆脱重复造轮子的困扰，不用去适配不同的终端，还可以通过小程序来完成更多有趣的场景开发，对于企业来说，不用再招多个技术栈的开发者，仅需要集成小程序便能达到业务运营目的。</p>",
    "publish_time": "2022-10-25 11:40:51",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "企业希望花钱留住客户？客户体验管理公司Qualtrics 发布超预期业绩表现",
    "url": "https://www.infoq.cn/article/1VK8SA1ckVFcoUv3afDu",
    "summary": "<p>本周一，客户体验管理（<a href=\"https://xie.infoq.cn/article/e07188cb88d893e67bc49ccf1\">CEM</a>\"）软件公司Qualtrics&nbsp;发布了强劲的财务业绩，由于财报表现超过了华尔街对其收益和收入的预期，其股票在收盘后交易时段飙升&nbsp;9%&nbsp;以上，与当天早些时候持平。</p><p></p><p>据该公司报告，第三季度在不计入股票补偿等特定成本下的利润为每股&nbsp;4&nbsp;美分，收入为&nbsp;3.775&nbsp;亿美元，比去年同期增长&nbsp;39%&nbsp;。</p><p></p><p>Qualtrics&nbsp;成立于2002，2018年由&nbsp;<a href=\"https://xie.infoq.cn/article/f68701c539c2282f3cc0fe2de\">SAP</a>\"&nbsp;斥资80亿美元收购。它提供的是一个基于云的平台，通常以快速调查的形式，用来收集企业的客户和员工的体验反馈。举例来说，企业的<a href=\"https://time.geekbang.org/column/article/201908\">人力资源部门</a>\"可以使用该软件从员工那里获得培训计划的有效性、入职流程等体验的反馈；产品团队则可以使用&nbsp;Qualtrics&nbsp;来评估客户满意度。</p><p></p><p>Qualtrics&nbsp;表示，其订阅业务的销售额在本季度增长了&nbsp;43%，达到&nbsp;3.148&nbsp;亿美元。据此，Qualtrics&nbsp;还对第四季度的收入做出了&nbsp;3.8&nbsp;亿至&nbsp;3.82&nbsp;亿美元的乐观预测，远高于华尔街预估的&nbsp;3.73&nbsp;亿美元的目标。就订阅业务而言，Qualtrics&nbsp;预计的收入为&nbsp;3.23&nbsp;亿至&nbsp;3.25&nbsp;亿美元。</p><p></p><p>Constellation&nbsp;Research&nbsp;Inc.&nbsp;的分析师&nbsp;Holger&nbsp;Mueller&nbsp;表示，Qualtrics&nbsp;在产品方面和财务方面都做得很好。“它显示出良好的增长和更好的成本控制，将其一般管理费用减少了近&nbsp;5000&nbsp;万美元，”Mueller&nbsp;说，“当收入同比增长近&nbsp;1&nbsp;亿美元，而成本仅增加&nbsp;2300&nbsp;万美元时，利润就会好转。Qualtrics&nbsp;现在需要做的，就是将这样季度业绩表现持续下去。”</p><p></p><p>据悉，在公布此次业绩的前一周，&nbsp;Qualtrics还推出了一款新产品线，能够自动完成连接和衡量员工、客户和品牌<a href=\"https://xie.infoq.cn/article/0484a19cb9a2b533743c3df13\">体验</a>\"之间关系的任务。</p><p></p><p>根据去年国际数据公司的一项研究，全球85%的企业领导者表示，员工体验和敬业度会直接转化为更高的客户满意度和收入增长。而该产品的推出，正是为了满足企业在这方面的需求，通过体验管理，针对性提升员工满意度，从而正向影响客户关系。</p><p></p><p>Qualtrics&nbsp;表示，该产品的具体方法是寻找员工与业务成果之间的相关性，并实现该过程的自动化。它使用名为&nbsp;Stats&nbsp;IQ&nbsp;的基于云的统计分析引擎来处理体验<a href=\"https://www.infoq.cn/article/mfcsP6wws312tLTcrPCl\">数据</a>\"，并提供统计上有效的相关性，说明哪些员工体验对客户体验影响最大。</p><p></p><p>Qualtrics&nbsp;引用了托管技术服务制造商&nbsp;Lumen&nbsp;Technologies&nbsp;Inc.&nbsp;的经验，经过对员工和客户数据的分析，该公司发现，对客户满意度影响最大的三个因素是——报告问题的难易程度、与一线员工的高质量沟通以及问题的解决速度。</p><p></p><p>例如，一家租车公司可以使用该技术来识别低效的租车取车过程，与负面品牌认知之间的相关性。然后，可以通过广告营销来突出自己在这方面的优化和改进。此外，企业还可以确定哪些呼叫中心或零售店拥有粘性和满意度最高的客户，并深入了解这些地区的不同之处。</p><p></p><p>Qualtrics&nbsp;首席执行官&nbsp;Zig&nbsp;Serafin&nbsp;表示，今天的业绩是一个积极信号，表明企业愿意在经济不景气的情况下花钱留住客户和员工。“结果证明我们商业模式的持久性，证明Qualtrics&nbsp;在我们的客户中所扮演的关键角色，以及我们的团队的持续付出。”</p><p></p><p>参考链接：</p><p>https://siliconangle.com/2022/10/24/enterprise-software-bellwether-qualtrics-posts-surprise-profit-strong-outlook/</p><p>https://siliconangle.com/2022/10/19/qualtrics-says-can-reliably-correlate-employee-satisfaction-customer-experience/</p><p></p>",
    "publish_time": "2022-10-25 11:43:07",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Docker 发布 WebAssembly 支持工具预览版",
    "url": "https://www.infoq.cn/article/hipvRmYj1awjevsGI8Ps",
    "summary": "<p>&nbsp;</p><p>当地时间10月24日，Docker <a href=\"https://www.docker.com/blog/docker-wasm-technical-preview/\">发布了</a>\" <a href=\"https://www.infoq.cn/article/JgjqtYjuef2VNApb2zok\">WebAssembly</a>\"(Wasm) 支持工具的预览版本。另外， Docker 还将作为投票成员加入Bytecode Alliance，Bytecode Alliance是 WebAssembly 和 WebAssembly System Interface 背后的非营利组织。</p><p>&nbsp;</p><p>WebAssembly 允许开发者用 40 多种语言（包括 Rust、C、C++、JavaScript 和 Golang ）编写应用程序的代码并在沙盒环境中运行，率先应用在Web 浏览器领域中，如 Chrome、Firefox、Safari。但由于WebAssembly 系统接口(WASI)，Wasm 被迅速应用到浏览器之外的场景，比如Vercel、Fastly、Shopify和Cloudflare等公司支持使用 Wasm 在边缘运行代码。</p><p>&nbsp;</p><p>Docker 表示，将 Wasm 视为 Linux 容器的<a href=\"https://www.docker.com/blog/why-containers-and-webassembly-work-well-together/\">补充技术</a>\"，开发人员可以根据用例选择要使用的技术。</p><p>&nbsp;</p><p>不过，Docker 在公告中提醒道，由于此次发布的是 Docker Desktop 的预览版本，可能存在无法按预期工作的情况，开发者在使用前务必对容器和映像进行备份。此外，此版本启用了Containerd 镜像存储，并且无法禁用。如果开发者当前未使用 containerd 映像存储，则将无法访问预先存在的映像和容器。</p><p>&nbsp;</p><p>当前，Docker Engine 使用与 Docker 生态系统其他部分相同的<a href=\"https://containerd.io/\">containerd</a>\"容器运行时，但它没有使用 runc 来运行容器进程，而是使用<a href=\"https://wasmedge.org/\">WasmEdge</a>\"运行时。</p><p>&nbsp;</p><p>Docker 与WasmEdge合作创建了一个 containerd shim，此 shim 从 OCI 工件中提取 Wasm 模块并使用 WasmEdge 运行时运行。Docker 现在添加了对声明 Wasm 运行时的支持，这将允许开发者使用这个新的 shim。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/95/950a6d2f930426655c0b00ebb058dadf.png\" /></p><p></p><p>&nbsp;</p><p>Docker Desktop 预览版本下载地址：</p><p></p><p><a href=\"https://dockr.ly/3sf56vH\">macOS Apple Silicon</a>\"</p><p><a href=\"https://dockr.ly/3VF6uFB\">macOS Intel</a>\"<a href=\"https://dockr.ly/3ShlsP0\">Windows AMD64</a>\"Linux Arm64 (<a href=\"https://dockr.ly/3TDcjRV\">deb</a>\")Linux AMD64 (<a href=\"https://dockr.ly/3TgpWH8\">deb</a>\",&nbsp;<a href=\"https://dockr.ly/3eG6Mvp\">rpm</a>\",&nbsp;<a href=\"https://dockr.ly/3yUhdCk\">tar</a>\")</p>",
    "publish_time": "2022-10-25 12:18:51",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "深度解读火山引擎官方操作系统veLinux",
    "url": "https://www.infoq.cn/article/UWL0pC4CfkSsBoaDxLkw",
    "summary": "<p>veLinux 是火山引擎推出的开源 Linux 操作系统，由字节跳动系统技术与工程团队主导研发，广泛集成了字节跳动多年来在支撑海量业务和亿级并发上的系统技术经验。致力于为用户提供稳定、高性能、安全、易用的 Linux 操作系统选择，提供全生命周期管理的完整解决方案和企业级服务支持。</p><p></p><p>自火山引擎开服以来，veLinux 支撑了包括容器服务、机器学习平台、大数据服务等大量公有云上业务，是火山引擎官方操作系统，为火山引擎各个云产品提供稳定的系统支撑，同时也服务了大量外部公有云客户，在不同的应用场景、不同的硬件机型上都表现出了优异的性能。</p><p></p><h2>整体设计</h2><p></p><p></p><p>veLinux 在整体设计上，兼容 x86 和 ARM 生态，同时兼容国内用户的使用习惯，并对多种硬件设备进行了适配和优化，同时针对火山引擎基础设施进行了深度优化：</p><p>向上提供更稳定、更安全、更易用的应用接口，并针对云原生、大数据、机器学习等场景提供针对性优化。向下建立更准确、更完整、更高效的硬件抽象，并基于各种硬件类型融合整体解决方案对外输出。</p><p><img src=\"https://static001.geekbang.org/infoq/33/339c7f0e4e2561f8e11800ed3561834e.png\" /></p><p></p><p></p><h2>丰富版本</h2><p></p><p></p><p>自 2021年10月首次上线后，截止到当前时间，veLinux 已经迭代了多个版本，提供了丰富的产品矩阵，包括以下 4 个公共版本，用户可以根据自己实际的业务需求选择不同的版本免费使用：</p><p>通用版本</p><p>面向希望获得火山引擎上极致操作系统体验的用户，针对火山引擎公有云环境进行了深度定制与优化，适用于各种云场景工作负载，尤其针对高并发、高 I/O 和混部场景进行优化适配。</p><p>快速启动版</p><p>面向需要快速交付大量云服务器的用户，可以满足快速使用算力的需求。通过对操作系统内核态及用户态的启动优化，结合 cloud-init 服务启动的顺序优化，实现了单 VM 启动时间从 10+s 减少到 5s，达到业界领先水平。</p><p>等保认证版</p><p>面向云上业务需要满足《GB/T22239-2019信息安全技术网络安全等级保护基本要求》的用户，可以快速满足网络安全等级保护规定的要求，在身份鉴别、访问控制、安全审计、入侵防范、恶意代码防范等场景进行安全加固。</p><p>兼容CentOS版</p><p>面向使用习惯更倾向 CentOS 系列操作系统的用户，相比 CentOS ，提供更强的功能、更优的性能和更稳定的体验，且用户态完全兼容 CentOS，用户可以无缝迁移。</p><p></p><p>此外，在机型适配方面，上述版本均适配了火山引擎所有的规格实例，包含 ECS/GPU/HPC/裸金属等的完整机型矩阵，对 Intel、AMD 以及 ARM 实例均进行了功能适配、性能调优和稳定性加固，保证其在各个架构都能实现长期稳定运行。</p><p></p><h2>高性能内核</h2><p></p><p></p><p>操作系统的核心——veLinux Kernel 是基于社区 Linux 5.4 LTS 版本并集成字节跳动自研新特性定制而成，包括容器及虚拟化等特定环境深度优化，在性能，成本和稳定性等多个维度达到最优，同时节省更多的 CPU 资源，实现降本提效。目前 veLinux 已集成以下场景的专属优化，且已全部提交并合入到 Kernel 社区。</p><p>针对 HugeTLB 重度使用的云场景，提出 HVO （HugeTLB Vmemmap Optimization），消除 vmemmap 冗余数据，最大为用户节省 HugeTLB 总量的 1.56%。这意味着 1024 GB 的服务器，最大能够节省约 16 GB的内存。Dying memory cgroup 作为容器场景下一个显著的内存占用问题，极端情况下占用上百 GB 内存。针对此问题，提出专项优化方案，减少 dying memory cgroup 发生的概率以及优化其容器部署密度。极端情况下，内存占用减少 80%。PSI（Pressure Stall Information）是用于评估系统资源压力的主要指标之一。PSI 在实际生产环境中 CPU 占用过高，veLinux Kernel 对其优化并降低了 10% 的 CPU 使用，同时提出 PSI CPU FULL 指标，更方便量化和展示容器之间 CPU 资源竞争。VDUSE（vDPA Device in Userspace） 是字节跳动自主研发的面向云原生场景的下一代高性能设备虚拟化框架，能够为容器和虚机提供统一的I/O虚拟化层。目前，在云原生场景下，容器或者安全容器（虚机）在使用分布式存储或者高性能RPC服务时，涉及的 I/O 数据平面比较庞杂，在运维和可维护性上也有所欠缺。且业界现在并没有一个标准的技术方案，VDUSE 希望提供一个标准统一的技术方案，方便用户在用户态模拟磁盘、网卡等设备接入容器或者虚机。当部署在 veLinux 上的云原生应用希望访问自研的分布式存储服务时，通过 VDUSE，可以高效地开发一套高性能的用户态接入方案，供上述的云原生应用使用。</p><p></p><p>veLinux Kernel 在稳定性和性能上做了大量的优化，据不完全统计，系统技术与工程团队已为 Kernel 社区提交了上百个优化及 bugfix patch，且未来我们将持续维护并及时响应用户的 issue。同时，我们也会积极地回馈社区，与开发者们共享优化成果。</p><p></p><blockquote>更多阅读：VDUSE 介绍：https://www.redhat.com/en/blog/introducing-vduse-software-defined-datapath-virtio</blockquote><p></p><p></p><p></p><h2>系统特性</h2><p></p><p>当前，企业上云的趋势不可抵挡，云时代的来临对基础操作系统提出了更高更严苛的要求。除了对操作系统的安全性和稳定性外，系统性能的提升也是重要的考虑因素，底层操作系统能否充分利用各种新硬件特性来提升业务的整体效能？此外，能否做到灵活使用，能否最大限度提高启动速度，快速交付大量云服务器？这些都是云上用户迫切关心的问题。10 年的技术积累和应用实践，火山引擎 veLinux 操作系统做出了解答。</p><p></p><p></p><h3>稳定性</h3><p></p><p>veLinux 在字节&nbsp;IDC 部署量超百万，是支撑字节跳动抖音、今日头条、飞书等海量业务的系统底座，同时 veLinux 也是字节跳动旗下云平台火山引擎的官方操作系统，支撑了包括容器服务、机器学习平台、大数据服务等大量公有云上业务，为火山引擎各个云产品提供稳定的系统支撑，其稳定性在内外部用户得到实践验证，系统宕机率保持在万分之一以下。</p><p></p><p></p><h3>高性能</h3><p></p><p>除了提供高性能的自研内核外，veLinux 还在系统组件上做了大量的性能优化。特别是基础库方面，针对不同的业务场景，进行了大量针对性优化。</p><p></p><p>OpenJDK</p><p>集成发布了优化的 OpenJDK，更好的支持大数据处理等 Java 业务，目前已经在 EMR（Elastic MapReduce） 等业务中上线。</p><p>针对大数据数据存储压缩场景，veLinux 的 OpenJDK 集成了优化的 zlib 实现，基于 GZIP 的数据压缩、解压缩性能会得到有效改进，详细数据请参考下方 zlib 章节 。针对 Full GC 延时较长的问题，我们移植了 G1 Parallel Full GC 到 jdk-8 中，有效缓解了Full GC带来的长延时问题。</p><p>很多业务不只是依赖 GC 性能，内存分配器（例如 ptmalloc, jemalloc, tcmalloc） 对业务性能有影响也比较大，veLinux 的 OpenJDK 集成了不同版本的内存分配器，并且可用参数选择。</p><p></p><p>业务在容器内的部署越来越多，但低版本的 OpenJDK 在容器中的性能表现并不好，比如用户会遇到系统数据读取慢、不准确等问题，甚至运行在 lxcfs 时，还会碰到死循环等严重问题。关于上述问题，veLinux 的 OpenJDK 都做了针对性地修复和改进，为用户提供业务性能保障，保证业务在容器中运行的稳定性。</p><p></p><p>zlib</p><p>在内部业务的性能分析优化过程中，我们通过性能分析采集工具发现， zlib 压缩和解压缩函数（deflate/inflate）的热点，在内部某业务线的的 CPU 占比超 50% 以上。由此可见，业务部署的madler/zlib 1.2.8 开源版本在性能上仍有提升空间。在调研过 intel/zlib、cloudflare/zlib、zlib-ng 等多个 zlib 版本后，最终在开源 madler/zlib 1.2.11 的基础上，集成了多个优化补丁：</p><p>支持压缩过程中哈希函数的向量化指令，并且重构了字符串匹配的流程。增强解压过程中长字符串拷贝效率 。支持 crc32/adler32 等校验码的向量化指令 。</p><p>在 Benchmark 测试中，压缩和解压效率显示提高了 30%-50%。zlib 优化后的版本部署到原来的业务线上，帮助该业务团队优化 CPU 核心 5K+；目前该优化已集成到 veLinux 的 OpenJDK 中，并在字节内部多业务得到广泛推广与应用。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8e/8e18b9dc0edb373294177d4e65c1e60c.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2c/2cead115c6a237dc51488e8b30c1db24.png\" /></p><p>Benchmark测试：压缩和解压缩性能对比图</p><p></p><p>其他性能优势</p><p>除此之外，对比社区原生 Debian/CentOS，veLinux具备很强的性能优势，在字节内部应用实践之后，字节样本拼接和数据打点等业务端到端性能提升20%以上，其中字节 metrics集群 CPU 使用率下降了36%。在性能测试中，对 Nginx/Redis/MySQL 等典型应用的性能也有大幅提升：</p><p></p><p>Nginx吞吐性能提升&nbsp;10%-40%</p><p><img src=\"https://static001.geekbang.org/infoq/8d/8ddf2193638854c1de10c2dd9ed734cf.png\" /></p><p>Redis get/set性能提升&nbsp;5%-25%</p><p><img src=\"https://static001.geekbang.org/infoq/40/40a76718fa3569c60f75e29ed5e7ab4a.png\" /></p><p>MySQL读写性能提升&nbsp;10%-60%</p><p><img src=\"https://static001.geekbang.org/infoq/72/72300a6cfa1844e570ace2c7d47a1b25.png\" /></p><p></p><h3>安全性</h3><p></p><p>随着网络安全事件不断发生，用户对安全性的重视程度也越来越高，作为火山引擎的官方操作系统，面对复杂的、规模不断增加的用户需求，veLinux 在安全性上需要做到全方位的建设，才能保护用户的信息和数据安全。</p><p></p><p>及时修复 CVE 漏洞：CVE（Common Vulnerabilities and Exposures）是公共的安全漏洞列表，用于标准化识别已知网络威胁。为了方便用户更便捷地查看 CVE 更新情况，veLinux 官网发布了 CVE 安全中心：https://bytedance.github.io/kernel/sec，每周更新并修复 CVE 补丁。入侵检测安全防护：得益于字节安全团队的技术支持，veLinux 提供入侵检测安全防护，底层采用安全团队自研的开源项目 Elkeid，主要通过收集主机层的信息来实现入侵检测、行为审计、攻击溯源、资产盘点、合规基线检测等能力，目前完整版本在字节跳动内部的部署规模已达到数百万量级，其稳定性、性能、数据采集能力、检测能力和溯源能力等均在内部得到实战验证。通过等保三级认证：等保三级认证是由国家公安机关对各机构的信息系统安全等级保护状况进行的认证与评定。veLinux 目前已通过三级等保认证，这是国家对非银行机构的最高级认证。这项安全认证资质已写入火山引擎云安全白皮书，为云上用户提供可靠的安全能力。提供内核热补丁：快速修复在运行中机器的内核漏洞。内核热补丁是一种动态为内核打补丁的技术，可以在不重启系统的情况下，修复内核 BUG 或者 CVE 漏洞，在最大程度上减少系统服务中断时间，增加系统可用性。未来 veLinux 还将提供统一的补丁管理平台、以及补丁客户端的整套解决方案（内测中），通过该平台用户可以将热补丁批量下发至需要打补丁的机器，提高运维效率。</p><p></p><p></p><h3>易用性</h3><p></p><p>veLinux提供了很多业界主流的问题追踪与调试工具，用户可以方便地安装使用，协助定位、解决业务运行中遇到的稳定性或性能问题。</p><p></p><p>kdump-tools（以及相关的 kexec-tools、makedumpfile）是常用于在 Linux kernel panic（内核致命错误） 之后 dump 内存、保存现场的工具，基于 debian 社区版本，我们在 veLinux 中做了增强版本，帮助用户提升稳定性，节省预留内存。</p><p>通过过滤无关的内核 cmdline、替换 systemd 等方法来降低 kdump 内核中的内存使用，从而防止机器在 dump 内存的过程中出现 oom 的错误。检测内存等硬件故障，提前结束 dump 过程，防止再次出现内核错误。提前 dump dmesg，防止在 dump 内存失败的情况下，获取不到 dmesg 的信息。在 kdump 侧实现 crashkernel = auto 功能，根据机器内存自动设置预留给 kdump 的内存的大小，且无需对内核做定制化修改。适配对 kdump 预留内存位置有特殊要求的硬件厂商。</p><p></p><p>atop&nbsp;是一款开源的单机性能监测工具，支持实时观测的同时、也支持读取历史文件排查问题。另外一个优点是除提供CPU、MEM、DISK等全局指标外，还提供进程、线程级别的各项指标监控数据。鉴于atop的这些优点，字节跳动基于社区的atop进行优化，目前已迭代3个版本，覆盖公司全量服务器，稳定运行三年多。字节版atop工具新特性如下：</p><p>稳定性增强：增加oom killer 保护、修复atopcct统计、限制日志存储总量防系统盘占满等功能。远程分析&nbsp;支持json格式数据传输到服务端，支持网页版atop及集群内数据聚合。更多实用指标：NUMA维度的CPU及MEM指标统计与聚合、runqueue delay、compact_stall、allocastall、InCsumErrors等指标。灵活使用：支持筛选Top N线程的监控数据，支持定制日志保留天数及存储位置。终端UI优化：类htop，按照NUMA粒度，直观展示所有CPU和内存。达到纵览所有CPU负载，直观判断CPU绑核是否均衡等目的。</p><p></p><p></p><h3>快速启动</h3><p></p><p>对于用户而言，系统启动过程通常被定义为从系统上电到通过 ssh 登录的过程，经历的时间即为系统启动时间。具体来说，机器的启动流程大体上可以根据 CPU 的控制权转移方向描述为“固件 -&gt; 引导程序 -&gt; 操作系统”。其中固件包括 BIOS/UEFI，引导程序包括常见的的 GRUB/U-Boot/LK 等，操作系统包含了内核启动、执行 initrd 中的 init 进程、再到执行硬盘上的 init 进程的过程。系统启动速度是操作系统的重要性能指标之一，特别对于云场景中的虚拟机，能够快速启动可以显著提高用户体验。</p><p></p><p>veLinux 通过对内核、驱动加载、系统服务的启动优化，以及 cloud-init 服务的启动顺序优化，减少虚机启动时间约 50%，提供快速启动版，实现单虚拟机启动时间 5s 内。</p><p></p><p></p><h3>灵活使用</h3><p></p><p>在实际使用中，用户提出基于 veLinux 进行定制化的需求，例如安装特定的驱动版本、内置特定的软件包等。veLinux 针对这个问题，提供灵活的 OS 自定义定制工具，可以在火山引擎、内部平台或本地镜像基础上，自动化完成定制，为用户提供简单便捷的定制窗口，一站式完成镜像的变更、基准测试等任务，使广大业务同学彻底摆脱基础环境构建、操作系统差异等带来的技术困境。</p><p></p><p>CentOS 官方已计划停止维护 CentOS Linux项目，veLinux 提供的迁移工具（内测中），能帮助用户平滑从&nbsp;CentOS 迁移至 veLinux CentOS 兼容版，后续还会支持更多操作系统无缝迁移至 veLinux 。</p><p></p><p></p><h3>云原生特性</h3><p></p><p>容器 OS版本</p><p>云原生场景下，保证集群内宿主机的一致性非常重要，对单个节点的运维操作可能会导致环境的不一致，对应用的性能稳定性产生影响，甚至可能产生安全隐患。另一方面，与传统系统不同的是，应用通过容器部署，操作系统只需要提供云原生运行必要的组件，省去其他很多不必要的系统组件，实现系统轻量化，同时提升系统启动时间。veLinux 正在内测容器 OS 版本，该版本的优势为：</p><p>系统轻量化</p><p>（1）只包含 Kubernetes Pods 运行所依赖的软件包和系统服务，缩短系统启动时间，精简操作系统。</p><p>（2）根文件系统为只读权限，只有 /etc和 /var 目录可写，以满足基础的系统配置需求。</p><p>系统维度升级回滚</p><p>遵循云原生不可变基础设施原则，不支持单个包粒度的安装、卸载和升级，不提供 apt 等软件包管理工具，只支持以整个操作系统镜像为粒度的更新和回滚，以此来保证集群内各个节点的软件包版本与系统配置的一致性。</p><p></p><p>lxcfs 组件优化</p><p>lxcfs 是一个基于 FUSE 文件系统实现容器内资源视图隔离的开源组件，通过在容器中挂载 lxcfs 相关目录和文件，执行 free、top 等命令，能够更精确地反映容器的资源使用情况。</p><p></p><p>veLinux 中的 lxcfs 组件在社区 5.0 版本的基础上，修复了 /sys目录下文件显示不完全的问题，并模拟了 numa 节点拓扑，使得在容器中执行 numactl 命令能够返回正确的节点信息。此外，对社区版本存在 lxcfs 进程退出重新启动后无法正常工作的问题，veLinux 版本一方面通过 oom killer 保护，最大限度地减少被 kill 的可能，另一方面提供 remount 机制，使得 lxcfs 进程退出重新启动后，remount 相关目录到容器中，最大限度的降低对用户的影响。</p><p></p><p></p><h2>总结与规划</h2><p></p><p>操作系统一直伴随着软硬件技术的发展而发展，近年来，在软件方面，云市场爆发式的增长，特别是云原生场景下，如何有效地进行集群资源的管理、调度编排以及性能度量和监控，都对操作系统提出了更高的要求；在硬件方面，芯片市场的环境变化以及主流 CPU 架构的演进发展，需要构建更加自主可控的操作系统，灵活应对国内外市场变化。针对云计算、国产化等场景，veLinux 实现了很多创新与优化，以满足不同用户的业务需求。未来将陆续发布更多云原生特性，并推出适配国产处理器、RISC-V 处理器架构的版本，欢迎大家持续关注。</p><p></p><p>另外，作为一款开源的操作系统，veLinux 致力于为用户提供可靠、高性能的操作系统，欢迎更多感兴趣的小伙伴加入 veLinux 的开源建设，共同推进国内操作系统生态发展。</p><p>欢迎使用：https://www.volcengine.com/product/velinuxGitHub 地址：https://github.com/bytedance/kernel官网地址：https://bytedance.github.io/kernel/</p>",
    "publish_time": "2022-10-25 17:40:14",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "让小型企业提高 20 倍效率的统一技术栈",
    "url": "https://www.infoq.cn/article/1FVdeQRF0ca3auUQOJVM",
    "summary": "<p></p><p></p><p>本文最初发布于 Dunk 的个人博客。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/d1/d1ea321a0363a92f542b33481e990f64.png\" /></p><p></p><p>本文介绍的技术栈帮助 Atmos 在只有 1-2 名全职工程师的情况下，发展到 1 万多个客户。多亏了这个技术栈，我们才得以安全、快速地迭代。我们的效率要比最直接的竞争对手高 10-20 倍，因为我们的工程团队是他们的 10 到 20 分之一。</p><p></p><p>我们主要是通过减少精神消耗和维护负担来保持效率。我们的产品很多——Web、iOS、Android、储蓄、支票、贷款、存款、作业——单个开发人员要能够理解、维护和改进所有这些产品。</p><p></p><p></p><h2>将更多精力放在更重要的事情上</h2><p></p><p></p><p>为了最大化编码效率，我们在客户端和服务器端围绕 JavaScript 统一了技术栈——我们没有时间在技术栈的不同部分用 Kotlin、Swift、Svelte 和 Python 复制特性。我们用一台服务器运行所有项目的所有代码——我们没有时间采用微服务。甚至，我们有很大一部分前端逻辑在网页和手机之间共享——我们没有时间把一个东西写（更重要的是调试！）两次。</p><p></p><p>所有函数都遵循了完全相同的超级简单的代码风格，无论是在 Web 上、移动设备上，还是服务器上。我们很少抽象，并且在所有服务器和 App 中都使用相同的简单查询语法。代码越简单、抽象程度越低，似乎 Bug 也会越少。</p><p></p><p>我们尽可能减少库的使用，必要时我们会使用简单而又经过充分测试的库，而且还要能够同时在服务器、移动端和 Web 上运行。这样一来，更新技术栈某一个部分的库就会使另一个部分受益，就像著名的 Boring Technology（<a href=\"https://boringtechnology.club/%EF%BC%89\">https://boringtechnology.club/）</a>\" 演讲提到的那样，围绕 React 和 Hapi 统一技术栈使我们能够在构建新产品的同时改进现有产品（参见下面的异花授粉）。需要理解并学习如何使用和审核的依赖关系也更少。缺点是库的更新会相互阻塞，我们需要在一项任务的单个库上投入大量的精力。</p><p></p><p>我们尽可能在产品之间共享代码。Web、移动端和服务器上的类似逻辑保存在一个共享的 Atmos 库中，技术栈的所有部分都可以访问。通过这种方式，对权限错误的单个更改或 Bug 修复就可以修复技术栈中所有需要修复的位置，很好地保持了同步。我们还可以根据需要在 Web、移动端和服务器之间转移代码和测试。</p><p></p><p>每个代码库都有很好的内部测试覆盖，因为我们的内部测试人员只需要测试很少的几个代码库。即使是不好理解的代码路径中的 Bug 也极有可能在内部被发现，原因有两个。首先，大多数团队成员每天都使用我们的产品作为他们的个人银行，所以，对于一些明显的问题，我们会在它们影响用户之前迅速发现。其次，因为大多数业务逻辑都是共享的，所以在 Web 上使用一个不好理解的功能，同时也为该功能在移动端的实现提供了基本的移动测试覆盖。例如，一个使用 iOS 支票存款的团队成员会在 Android 用户发现之前发现因重构而遭到破坏的权限。这是我们在自动化测试基础上做的工作。</p><p></p><p>我们在合并代码库时存在许多异花授粉（cross-pollination）的情况。我们将移动端代码合并到 Web 代码中，以实现业务逻辑共享。对移动组件的改进也会改善 Web 体验。类似地，我们将贷款客户端合并到原始客户端中，为的是利用它的 DevOps。除此之外，在设计新产品时，原始产品也再次获得了设计上的改进（在这种情况下，仅限 Web 的 Material-UI 被通用的 Tailwind 所代替）。原来的服务器也从新的贷款服务器的改进中受益，获得了无阻塞帐户开户功能，删除了大量的死代码。</p><p></p><p>下面我将详细介绍下我们的技术栈。</p><p></p><p></p><h3>技术栈第 1 部分：纯 JavaScript iOS、Android&amp;Web 应用</h3><p></p><p></p><p>Web、iOS 和 Android 上均使用 React。Web 端使用客户端渲染的 React，移动端使用 React Native/Expo。依赖关系会定期更新和审计。两个客户端项目使用一个存储库，共享逻辑、实用函数、数学运算、权限等位于共享文件夹 /common 中。将 Tailwind 作为 React 和 React Native 共用的样式语言（感谢 twrnc）。将 Redux 作为共享的 API 请求 / 状态逻辑库。为了提供原生体验，路由无法共享：移动端使用 React Navigation，而 Web 端使用 React Router。对于 Web 和移动端的每次提交，Jest 都会在 CI 时针对“关键路径”特性（如申请、登录、转账等）进行自动化集成测试。</p><p></p><p></p><h3>技术栈第 2 部分：纯 JavaScript API</h3><p></p><p></p><p>Node/Hapi：单个服务器运行所有储蓄、支票、贷款、捐款代码。Heroku：为了尽可能减少 DevOps 耗费的时间。BullMQ &amp; Redis：存款、贷款、月度作业等所有特性共用一个作业队列。Postgres 数据库，这里没有用到非关系型数据库的地方。定期升级和审计程序包，包括 Node 版本，以便解锁新特性，确保安全性。关键路径用户流（申请、登录、交易）的集成测试覆盖由 CI 强制执行。</p><p></p><p></p><h3>其他：登录页和内部仪表板</h3><p></p><p></p><p>使用 Webflow CMS 创建静态登录页。重新配置仪表板，以便访问服务器作业，并检测欺诈、批准用户、批准贷款、查看增长情况等。如果有一个任务需要完成，我们就手动执行，如果是第二次遇到同样的任务，我们就为它编写一个服务器作业，如果是第三次，我们就为该服务器任务编写一个接口，这样工程部门就再也不会被这个循环阻塞了。</p><p></p><p></p><h3>其他可选方案</h3><p></p><p></p><p>在一个完美的世界里，我们应该使用单个代码库，由一个庞大的单体在服务器端完成所有渲染，并使用一个单人框架（one-person framework），但鉴于现代客户对 iOS、Android 和 Web 原生应用的期望，我们需要平衡效率和竞争力。</p><p></p><p>Flutter、Flutter on Web、Dart 服务器 —— 注：1 种语言，Dart 在后端的应用尚不成熟，Flutter on Web 尚未完成，谷歌对哪个项目有承诺吗？Swift iOS、Kotlin Android、Django/Rails for Web &amp; 服务器—— 注：3 种语言，但全是原生的，这会失去本文介绍的大多数好处。React for Web、Cordova React iOS &amp; Android、Express 服务器 —— 注：1 种语言，移动端原生程度感觉低一些，50% 的用户把移动端作为主要平台。Rails for Web、iOS、Android &amp; 服务器（Hey.com 的风格），移动应用导航本地渲染。注：1 种语言，新方法，或许已经过实战检验？我们会尽量选择上述的无聊技术 :)</p><p></p><p></p><h2>小&nbsp; &nbsp;结</h2><p></p><p></p><p>总之，Atmos 的技术栈并非适合每个软件项目，但我们强烈建议小型初创公司使用。与当前可用的其他任何解决方案，它能让我们在单位时间内为客户提供更多的价值。</p><p></p><p>原文链接：</p><p></p><p><a href=\"https://nikodunk.com/2022-05-10-the-tech-stack-for-maximum-efficiency/\">https://nikodunk.com/2022-05-10-the-tech-stack-for-maximum-efficiency/</a>\"</p><p></p><p>声明：本文为InfoQ翻译，未经许可禁止转载。</p><p></p><p>今日好文推荐</p><p></p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651144382&amp;idx=1&amp;sn=1a4899f4c73d68d936f5d1a2548e84b1&amp;scene=21#wechat_redirect\">60 岁周星驰招聘 Web3.0 人才，要求“宅心仁厚”；马斯克计划裁掉推特 75% 的员工；Linus 致开发者：不要再熬夜了 ｜ Q 资讯</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651144274&amp;idx=1&amp;sn=5dde6723cfa90ccf7650f3fdec31c6ce&amp;chksm=bdb8b8018acf3117d7281e6eb64eec1cb19bd0e9631ed148e78747ee06420066cb1ca2a79406&amp;scene=21#wechat_redirect\">可能是最严重的云存储数据外泄事故之一：微软承认服务器错误配置导致全球客户数据泄露</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651144240&amp;idx=1&amp;sn=c82c4527773a774e6dae99271eb8ca2c&amp;chksm=bdb8b8638acf317550482d606e5b229b856e719c26dd8a97dfe5183979111144d03b91764ded&amp;scene=21#wechat_redirect\">上云“被坑”十年终放弃，寒冬里第一轮“下云潮”要来了？</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651143991&amp;idx=1&amp;sn=0da8c1a09121bf122d0c8836748dbdea&amp;chksm=bdb8c7648acf4e726be7d8010ae209f1204f346be938f80fbc647b12e9b1de7f08d025ee9a9f&amp;scene=21#wechat_redirect\">编程神器Copilot逐字抄袭他人代码？GitHub 回应：相似，但不同…</a>\"</p><p></p><p>活动预告</p><p></p><p>把握未来机遇，迎接 2023，前瞻布局数字前沿技术，拓展数字核心技术优势，是企业实现行业领先的重要任务。完善数字人才支撑体系，提升员工数字技能，是构筑企业硬核数字化增长引擎的保障措施。10 月 26 日，极客时间企业版举办数字人才蓄能季高端论坛，邀请数字化标杆企业的领军人物、培训和 HR 专家同台分享他们的数字人才培养经验和未来人才发展规划。</p><p></p><p>👇&nbsp;长按图中二维码即可免费参与活动呦～～</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/e4/e4915b64813f8a4059a952f93a3eb0dc.jpeg\" /></p><p></p>",
    "publish_time": "2022-10-25 18:01:50",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "令人沮丧的C++性能调试",
    "url": "https://www.infoq.cn/article/gcJTR8xUi7QV1JaVBasA",
    "summary": "<p></p><p>到目前为止，“‘零成本抽象’是一个谎言”应该（希望如此）已经成为一个常识了。公平地说，这更像是用词不当——“抽象在经过优化后可能提供零运行时开销”这样的说法可能会更恰当一些，但我知道为什么不是这么回事……</p><p></p><p>大多数 C++ 程序员倾向于接受这样一个事实——“零成本抽象”只在启用了优化的情况下才能提供零运行时开销，而且它们对编译速度有负面的影响。同样是这些人，他们倾向于相信这种抽象是如此的有价值，以至于认为让他们的程序在调试模式下执行得很差（即没有启用优化）和编译得更慢是值得的。</p><p></p><p>我曾经也是他们中的一员。</p><p></p><p>然而，在过去的几年里，我开始意识到，在某些领域拥有高性能调试和快速编译是多么的重要，比如游戏开发。从事游戏开发的人往往直言不讳地说 C++ 的抽象与他们的工作格格不入，而且他们有充分的理由——游戏是实时模拟的，即使在调试版本中也需要可玩性和响应性——想象一下在 20FPS 左右的帧率下调试虚拟现实游戏导致眩晕的情形。</p><p></p><p>在本文中，我们将探讨 C++ 的抽象模型如何严重依赖编译器优化，并揭示一些导致意外性能损失的例子。之后，我们将比较三种主要编译器（GCC、Clang 和 MSVC）在这方面的表现，并讨论一些潜在的改进或解决方案。</p><p></p><p></p><h2>移动 int 很慢</h2><p></p><p></p><p>我在今年的 ACCU 2022 大会上做了一场闪电演讲（“移动 int 很慢：调试性能很重要！”），演讲的题目具有挑衅意味——移动 int 怎么会很慢？</p><p></p><p>我们来看一下这段代码。</p><p></p><p><code lang=\"cpp\">#include \n\nint main()\n{\n    return std::move(0);\n}\n</code></p><p></p><p>C++ 程序员应该知道 std::move(0) 在语义上与 static_cast(0) 相同，而且大多数人都希望编译器不会为 move 生成代码，即使禁用了优化。结果是 GCC 12.2、Clang 14.0 和 MSVC v19.x 最终都会生成一个 call 指令。</p><p></p><p>你可能认为这没什么大不了的——毕竟，这里或那里多出一个额外的 call 指令又有什么关系呢？下面是一个高性能算法的例子，它的内部循环中包含了一个 move。</p><p></p><p><code lang=\"kotlin\">template \ninline constexpr\nT accumulate(InputIterator first, InputIterator last, T init)\n{\n    for (; first != last; ++first)\n#if _LIBCPP_STD_VER &gt; 17\n        init = std::move(init) + *first;\n#else\n        init = init + *first;\n#endif\n    return init;\n}\n</code></p><p></p><p>请注意 C++ 17 及以上版本中的 init 对象在每次循环时是如何移动的。具有讽刺意味的是，从 C++ 14 切换到 C++ 17，由于额外的 std::move 导致使用了 std::accumulate 的程序调试性能出现巨大的损失——想象一下在处理算术类型对象的循环中每次调用无用函数的开销！</p><p></p><p></p><h2>情况比想象的更糟</h2><p></p><p></p><p>std::move 不是一个孤立的例子——在禁用优化的情况下，任何语义上是强制转换的函数最终都会生成一个无用的 call 指令。这里还有一些例子——std::addressof、std::forward、std::forward_like、std::move_if_noexcept、std::as_const、std::to_fundamental。</p><p></p><p>假设你完全不关心调试性能……好吧，猜猜怎么着——所有上述的实用函数都会导致函数模板实例化，从而降低编译速度。此外，这些“强制转换”将在调试时作为调用堆栈的一部分出现，使逐步遍历代码的过程变得更加痛苦和嘈杂。</p><p></p><p>强制转换的实用函数并不是唯一一种没有优化就表现得很糟糕的抽象类别——对于概念上的轻量级类型，如 std::vector::iterator，没有人希望在调试时进入 iterator::operator* 和 iterator::operator++，也没有人希望在遍历 std::vector 时每次迭代都需要付出调用函数的开销。然而，在调试模式下，情况就是如此。</p><p></p><p>在 C++ 中，你可以在任何地方找到这样的例子。值得注意的是，下面是 Chris Green 关于 std::byte 的推文：</p><p></p><p></p><blockquote>你真的不会想要使用 std::byte（<a href=\"https://t.co/esFxAngT2D%EF%BC%89%E3%80%82\">https://t.co/esFxAngT2D）。</a>\"</blockquote><p></p><p></p><p>从链接的 Compiler Explorer 示例（<a href=\"https://godbolt.org/z/8sdvra6xb%EF%BC%89%E4%B8%AD%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%EF%BC%8C%E4%B8%BA\">https://godbolt.org/z/8sdvra6xb）中可以看到，为</a>\" std::byte 的位移操作符生成的汇编非常糟糕，导致了对 CPU 可执行的最简单、最快的操作的 call 指令。当然，使用 char 并不会生成如此糟糕的汇编，即使完全禁用了优化。</p><p></p><p></p><h2>后果是什么</h2><p></p><p></p><p>这些低效率的结果对于 C++ 在游戏开发领域的声誉和用途来说是毁灭性的，并且（在我看来）还会导致更低的生产效率和更长的调试周期。</p><p></p><p>首先，到目前为止我们所展示的一切都意味着任何开发重要项目的游戏开发者都不会使用“零成本抽象”。std::move、std::forward 等都将被强制转换或宏替换。不提倡使用 std::vector，而提倡使用 T*，或者至少通过指针进行迭代（即通过 std::vector::data），而不是通过迭代器。来自和头文件的任何东西都可能不会被使用，因为有很大的开销风险（就像 std::accumulate 那样），或者因为这些头文件在编译方面是出了名的繁重。不使用诸如 std::byte 等更安全的 C 类型替代类型，从而降低了类型安全性和可表达性。</p><p></p><p>每次经验丰富的 C++ 程序员向游戏开发者建议使用更安全、更难以被误用的抽象时，他们都不会听——他们负担不起这样做的代价。因此，在其他领域工作的人会认为游戏开发者是尚未发现抽象概念的原始人，喜欢用指针和宏来玩火，完全意识不到导致他们使用这些技术的原因。</p><p></p><p>另一方面，游戏开发者会嘲笑和避开那些信奉高级抽象和类型安全的 C++ 程序员，因为他们没有意识到调试性能和编译速度可能没有更干净、更安全、更可维护的代码那么重要。</p><p></p><p>我也没有任何证据证明这一点，但我怀疑，怀着优化调试体验的愿望编写低级代码最终会增加调试的频率。</p><p></p><p>如果有人想要避免使用可以让他们的代码变得更安全的抽象，他们将不可避免地写出更多的 Bug，从而需要进行更频繁的调试。一旦 Bug 被修复，他们就会对调试器称赞有加，并更有动力通过编写低级代码来保持高调试性能。这是一个恶性循环！</p><p></p><p></p><h2>在调试模式下启用优化</h2><p></p><p></p><p>我知道你在想什么——你认为这些游戏开发者无能，因为他们可能一直在使用 -Og！</p><p></p><p>你错了。</p><p></p><p>首先，-Og 只在 GCC 上可用。Clang 接受了这个标志，但它与 -O1 完全相同——LLVM 维护者从未实现过恰当的调试优化级别。MSVC 没有与 -Og 相对应的东西，而大多数游戏开发者使用 MSVC 作为他们的主要编译器！</p><p></p><p>即使 -Og 无处不在，但它仍然不及 -O0——对于高效的调试会话来说，它可能仍然内联了太多代码。</p><p></p><p>任何高于 -Og 的优化级别都将导致非常糟糕的调试体验，因为编译器将执行激进的优化。</p><p></p><p></p><h2>我们可以做些什么</h2><p></p><p></p><p>有几个方面可以改进——语言本身、编译器、标准库。</p><p></p><p>我们可以说函数模板不是为强制转换和位操作创建轻量级抽象的正确模型，类模板和轻量级类型，如 std::vector::iterator，也是如此。</p><p>过去曾有人尝试为“卫生宏（Hygenic Macro）”引入一种语言特性来解决本文所描述的问题，特别是 Jason Rice 的 P1221（“参数表达式”）提议。可惜的是，这篇论文几年来都没有更新。</p><p>即使我们设法在语言中引入了“卫生宏”，也无助于现有的实用函数，这些实用函数在过去已经被标准化为函数和类模板——也就是说，它不会让 std::move 变得更好。也许我们可以发明一些类似 [[no_unique_address]] 结合 [[gnu::always_inline]] 的属性或向后兼容的关键字来强制编译器始终内联有标记的函数，不需要为它们生成代码。</p><p>我目前还没有具体的想法，不过这可能是一个值得探索的方向。</p><p></p><p>编译器可以在处理这些函数的方式上变得更聪明一些，它们确实正在朝着这个方向发展！</p><p></p><p>GCC 12.x 引入了一个新的 -ffold-simple-inlines 标志（这是因为我提交的 Bug 报告，<a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=104719%EF%BC%89%EF%BC%8C%E5%AE%83%E5%85%81%E8%AE%B8\">https://gcc.gnu.org/bugzilla/show_bug.cgi?id=104719），它允许</a>\" C++ 前端折叠对 std::move、std::forward、std::addressof 和 std::as_const 的调用。文档提到它应该是默认启用的，但如果我不手动指定标志，就无法让编译器执行折叠——请参考 Compiler Explorer 上的示例（<a href=\"https://gcc.godbolt.org/z/KPGe3YYsG%EF%BC%89%E3%80%82\">https://gcc.godbolt.org/z/KPGe3YYsG）。</a>\"</p><p>Clang 15.x 也受到了我提交的 #53689 问题（<a href=\"https://github.com/llvm/llvm-project/issues/53689%EF%BC%89%E7%9A%84%E5%90%AF%E5%8F%91%EF%BC%8C%E4%B9%9F%E4%B8%BA%E7%9B%B8%E5%90%8C%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%95%E5%85%A5%E4%BA%86%E7%B1%BB%E4%BC%BC%E7%9A%84%E6%8A%98%E5%8F%A0%E8%B0%83%E7%94%A8%EF%BC%88%E5%8A%A0%E4%B8%8A\">https://github.com/llvm/llvm-project/issues/53689）的启发，也为相同的函数引入了类似的折叠调用（加上</a>\" std::move_if_noexcept，如果 GCC 维护人员忘记了的话）。这个似乎是默认启用的——请参考 Compiler Explorer 上关于 Clang 14.x 和 Clang 15.x 之间的比较（<a href=\"https://gcc.godbolt.org/z/7MjM53h7G%EF%BC%89%E3%80%82\">https://gcc.godbolt.org/z/7MjM53h7G）。</a>\"</p><p>MSVC 还没有在这方面提供任何改进。</p><p>我必须说，看到 GCC 和 Clang 维护人员逐步改进调试性能，我感到非常高兴，也非常感谢他们。</p><p>无论如何，我不认为硬编码的函数是正确的解决方案。我支持编译器用一些非常规手段，但规则应该更通用一些。</p><p>例如，它们可以对由单个 return 语句（只包含一个强制转换）组成的函数执行折叠，然后也可以将规则放宽到任意包含单个“基本”操作的函数，也包括 std::byte 和 std::vector::iterator。如果能看到这样的东西，那就非常酷了！</p><p></p><p>最后，标准库实现本身也可以变得更加聪明和对用户友好。</p><p>例如，它们可以在 std::accumulate 中使用 static_cast(x) 而不是 std::move(x)。此外，它们可以将简单的包装器函数标记为 [[gnu::always_inline]] 或一个等效的内置属性，强制编译器内联它们。</p><p>不幸的是，libc++ 的维护者并不喜欢这些想法。我认为他们的理由没有说服力，而且我在 GitHub 上非常明确地表达了我的观点，但他们没有让步。</p><p>我希望在这方面看到一些进展——也许用强制转换替换一些 std::move 和 std::forward 调用，并在合适的位置添加一些属性，让整个 C++ 社区受益。在一个已经完全不可读的代码库中加入非常小的可读性，这真的是不值得做这些变更的理由吗？我认为不是。</p><p></p><p></p><h2>关于问答</h2><p></p><p></p><p>问：人们应该写出包含更少 Bug 的代码，这样他们就不需要调试了!</p><p></p><p>答：或许……但是，调试器不仅用于找出 Bug 发生的原因，它还有其他用途。例如，有些人用调试器了解不熟悉的代码，或者找出无法找到的逻辑错误。</p><p></p><p>问：受这个问题影响的人不能有选择地只为某些文件进行无优化编译吗？</p><p></p><p>答：这在技术上是可能的，但在实践中很难实现。首先，如果你正在调试，你并不总能知道需要检查哪些地方——你可能会做出一个有根据的猜测，只禁用一些相关模块中的优化，但你可能是错误的，而且这样会浪费你的时间。</p><p></p><p>此外，许多构建系统可能不容易支持这种基于单个文件的优化标志。我可以想象，在较老的代码库或专有 / 遗留构建系统中实现这个想法可能会非常困难。</p><p></p><p>最后，不要忘了，直接解决这个问题，而不是绕过它，我们还可以从中获得其他好处，比如更快的编译。</p><p></p><p>原文链接：</p><p></p><p><a href=\"https://vittorioromeo.info/index/blog/debug_performance_cpp.html\">https://vittorioromeo.info/index/blog/debug_performance_cpp.html</a>\"</p><p></p><p>声明：本文为InfoQ翻译，未经许可禁止转载。</p><p></p><p>今日好文推荐</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651144383&amp;idx=1&amp;sn=89fe12652e5f7837764263c63dd5b429&amp;chksm=bdb8b8ec8acf31fab1e5ef2e010258a6cdf2a17005c2f94b475457b599839eee01ff3b8d3b15&amp;scene=21#wechat_redirect\">让小型企业提高 20 倍效率的统一技术栈</a>\"</p><p></p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651144382&amp;idx=1&amp;sn=1a4899f4c73d68d936f5d1a2548e84b1&amp;scene=21#wechat_redirect\">60 岁周星驰招聘 Web3.0 人才，要求“宅心仁厚”；马斯克计划裁掉推特 75% 的员工；Linus 致开发者：不要再熬夜了 ｜ Q 资讯</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651144274&amp;idx=1&amp;sn=5dde6723cfa90ccf7650f3fdec31c6ce&amp;chksm=bdb8b8018acf3117d7281e6eb64eec1cb19bd0e9631ed148e78747ee06420066cb1ca2a79406&amp;scene=21#wechat_redirect\">可能是最严重的云存储数据外泄事故之一：微软承认服务器错误配置导致全球客户数据泄露</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651144240&amp;idx=1&amp;sn=c82c4527773a774e6dae99271eb8ca2c&amp;chksm=bdb8b8638acf317550482d606e5b229b856e719c26dd8a97dfe5183979111144d03b91764ded&amp;scene=21#wechat_redirect\">上云“被坑”十年终放弃，寒冬里第一轮“下云潮”要来了？</a>\"</p><p></p><p>活动推荐</p><p></p><p>致各位活跃在写作社区的开发者们！</p><p></p><p>你们是用代码书写未来的造梦者，也是用热情铸就未来开拓者。一年一度的开发者节如约而至！你们准备好和我们一起“程”风破浪，披荆斩棘了吗？</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/da/da80f5c62107328758a804581ec55e8c.jpeg\" /></p><p></p>",
    "publish_time": "2022-10-25 18:24:16",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]