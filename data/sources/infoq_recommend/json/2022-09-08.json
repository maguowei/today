[
  {
    "title": "架构师（2022 年 9 月）",
    "url": "https://www.infoq.cn/article/7sboJ7aY5E0WFBDbpHGj",
    "summary": "<h2>卷首语：成为架构师，你必须具备这五点能力</h2>\n<p>作者 | Alan Tai<br />\n译者 | 冬雨<br />\n策划 | 闫园园</p>\n<p>对于软件架构师这个角色来说，对每一件事情都有经验至关重要。它让你知道什么时候该充当公司的桥梁，当放大或缩小架构图时该关注什么。当在不同的上下文中应用特定的架构设计时，您还将观察模式。在十多家公司工作过之后，我最终进入了<a href=\"https://www.zuehlke.com/en\">Zuhlke</a>咨询公司，在那里我不再需要换工作来获得不同的经验了。我的项目几乎涵盖了无数种行业，包括金融科技、保险科技、物流、制造业、奢侈品时尚、初创企业，这份列表还在不断增长。</p>\n<h3>领域知识</h3>\n<p>对某些业务领域的深入了解对于软件架构师的成功是至关重要的，因为您不仅要知道它是什么，还要知道它将是什么，或者可能是什么，以及为什么。客户经常找到软件架构师，要求向他们展示行业领导者正在做什么以及如何做。领域知识还可以帮助软件架构师说一种商业通用的语言，这反过来帮助他们成为连接管理和开发团队桥梁。</p>\n<h3>人际交往能力</h3>\n<p>软件架构师也是一个伟大的沟通者。许多优秀的高级软件工程师发现很难晋升为软件架构师，因为他们没有展示自己的技能，如倾听、口头和书面沟通、推进、冲突管理、演示、谈判和说服。</p>\n<p>这份工作所需技能的具体类型取决于你工作的特定公司环境。</p>\n<p>在我的公司，我有机会在安全的环境中练习这些技能，比如我们称之为“<a href=\"https://www.zuehlke.com/en/welcome-to-zuhlke-hong-kong\">祖尔克日</a>”和“<a href=\"https://www.zuehlke.com/en/insights/zuhlkes-curiosity-capital-learning-development-during-a-pandemic\">祖尔克营</a>”的环境。我的雇主也在这些方面为我提供了正式的<a href=\"https://www.zuehlke.com/en/our-projects/getting-better-together-at-zuhlke-you-never-stop-developing\">培训</a>。最后，公司的建设性反馈文化支撑着许多人成长了起来。</p>\n<h3>专业技术能力</h3>\n<p>单独任何一张大学文凭都无法证明你是一个软件架构师。你需要学习软件工程的所有领域，包括软件设计、编码、质量保证、DevOps、性能分析、软件安全、项目管理、软件支持等等。这些技能对于创建满足软件架构“能力”的解决方案至关重要。当与开发团队中的专家交流时，软件架构师能够更好地理解相关信息，因为他们已经具备了这些领域的实践经验。</p>\n<p>作为一名开发团队成员，我可以胜任各个领域的日常工作，包括后端、前端和 DevOps。这让我能够以第一人称视角看到幕后发生了什么，并让我能够与团队保持较近的距离。</p>\n<h3>业务和开发过程</h3>\n<p>业务过程描述了一个组织的业务操作，并定义了业务需求，而这些业务需求通常没有清晰地表述为软件项目需求。软件架构师应该知道，或者至少应该知道向谁询问业务流程的相关信息。</p>\n<p>一个向行业组织交付解决方案的软件架构师，需要干上几年时间才能成为领域专家，这种情况并不少见。</p>\n<p>理解技术过程、软件开发生命周期和最佳实践的重要性与了解业务过程一样重要。这是因为软件架构师通常在确保业务和开发过程之间的一致性方面扮演着关键的角色，如此，才能做到迭代交付，才能有现实的项目计划。</p>\n<h3>领导力</h3>\n<p>现在，您应该非常好奇软件架构师如何掌握所有这些知识和技能了吧。好吧，我告诉你，他们并没有掌握！一个人是不可能掌握所有这些的。伟大的产品需要一个有能力的专家团队来开发。成功的软件架构师通常是有效的领导者，他们的团队中拥有伟大的成员，并使成员们成长得更加伟大，而不仅仅是个体。</p>\n<p>软件架构师通常被视为团队的代表。他们在领导、管理业务和技术方面投入了大量的精力。虽然人们常常认为领导者只在站在前面指挥，但有时在一个项目中需要<a href=\"https://learn.coactive.com/your-leadership-approach\">五种领导风格</a>。<a href=\"https://www.zuehlke.com/en\">我们公司</a>提供的领导力培训就是这么教的。</p>\n<p>你准备好成为一名软件架构师来寻求职业生涯的进一步发展了吗？现在是行动的最佳时机！</p>\n<p><strong>作者简介：</strong></p>\n<p><a href=\"https://www.linkedin.com/in/ayltai/\">Alan Tai</a>是 Zuhlke 的首席软件架构师，<a href=\"https://www.zuehlke.com/en\">Zuhlke</a>是一家优质的全球咨询公司，为我们的业务伙伴提供高质量的解决方案。</p>\n<h2>目录</h2>\n<p><strong>热点 | Hot</strong></p>\n<p>是什么让 Redis“气急败坏”回击：13 年来，总有人想替 Redis 换套新架构</p>\n<p>Oracle 大规模裁员进行时：营收暴跌 28%，数据库地位被侵蚀</p>\n<p><strong>理论派｜Theory</strong></p>\n<p>过去的十五年，我们怎样做 IM？</p>\n<p>在云时代，我们该如何看待新的开源许可证？</p>\n<p><strong>推荐文章 | Article</strong></p>\n<p>新浪微博从 Kafka 到 Pulsar 的演变</p>\n<p>理想汽车：从 Hadoop 到云原生的演进与思考</p>\n<p>大规模分布式架构中，怎样设计和选择 API 限流技术？</p>\n<p><strong>观点 | Opinion</strong></p>\n<p>为什么说 DevOps 治理是实现快速开发的关键</p>",
    "publish_time": "2022-09-08 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Debezium和Quarkus：通过CDC模式来避免双重写入",
    "url": "https://www.infoq.cn/article/V4kqPgrQlqqPgWQuMmDP",
    "summary": "<p>在本系列文章的<a href=\"https://www.infoq.cn/article/WfA0p1XoZCJ6INdyJLyv\">第2部分</a>\"，我们学习了Kafka Streams与Quarkus的集成。我们开发了一个简单的应用程序向一个Kafka主题生成事件，并使用Kafka Streams实时消费和处理这些事件。</p><p></p><p>在那个示例中，我们模拟了一家电影流媒体公司。我们将电影信息保存在一个Kafka主题中，当用户停止观看电影，我们将这个事件和已播放的时间保存到另一个主题中。我们对这些事件进行实时的后续处理，计算出一部电影播放超过10分钟的次数。</p><p></p><p>应用程序的架构如下图所示。</p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/articles/change-data-capture-debezium/en/resources/1schema-1660305488714.jpg\" /></p><p>所有的信息都保存在Kafka主题中，但这在现实的项目中是不太可能发生的。</p><p></p><p>在现实当中，电影信息可能保存在传统的数据库中，并用一些分布式缓存来加快查询速度，或者使用搜索引擎建立索引。为简单起见，我们假设电影信息保存在数据库中。</p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/articles/change-data-capture-debezium/en/resources/1schema-2-1660305488714.jpeg\" /></p><p>这就提出了一个问题——我们如何在两个不同的系统中维护相同的数据，数据库作为主要保存数据的位置，Kafka主题中的数据将使用Kafka Streams来处理。</p><p></p><p>本文将教你如何正确地以不同形式保存相同的数据。</p><p></p><h2>双重写入</h2><p></p><p>要解决这个问题，我们首先想到的可能是双重写入。这是一种最为简单的方法，应用程序负责维护所有位置的数据。例如，当有新的电影信息需要插入时，会执行一个数据库插入，并发送一个事件到Kafka主题。</p><p></p><p>代码可能像下面这样。</p><p><code lang=\"java\">@Channel(\"movies\")\nEmitter&gt; movieEmitter;\n \nprivate static ObjectMapper objectMapper = new ObjectMapper();\n \npublic Movie dualWriteInsert(Movie movie) throws JsonProcessingException {\n    // Inserts to DB\n    movie.persist();\n \n    // Send an event to movies topic\n    final String payloadJson = objectMapper.writeValueAsString(movie);\n    long id = movie.id;\n \n    movieEmitter.send(Record.of(id, payloadJson));\n</code></p><p></p><p>这看起来没什么问题，很容易实现，也很有效，如果没有遇到什么奇怪的问题的话。下面让我们来看看这种方式会遇到怎样的问题。</p><p></p><p>如果数据被持久化在数据库中，但发送到Kafka主题时失败了，你可以把这两个操作包装在一个事务块中。这可以解决事务问题，因为在出错时可以回滚。但你在性能方面付出了巨大的代价，事务范围越大，阻塞数据库的时间就越长。如果两个并发用户想同时更新一个电影信息，会发生什么情况？可能会发生这样的情况——第一个请求更新了数据库，并将事件发送给Kafka，然后第二个请求再次更新数据库和Kafka。在这种情况下，数据库和Kafka主题中的数据是对齐的。但是如果第一个请求只将数据持久化到数据库，第二个请求持久化并发送事件到Kafka，然后第一个请求再将事件发送到Kafka主题，那么此时数据库和Kafka主题中的数据就发生了分歧，产生了不同的值，导致数据之间不一致。当然，你可以使用同步方法，但这将意味着巨大的性能损失。出现第二个问题是因为混合使用了不同的系统，数据库事务的保证范围只限于数据库本身，无法在不同的系统之间起作用。</p><p></p><h2>两阶段提交</h2><p></p><p>这个问题的一个可能的解决方案是使用两阶段提交协议。虽然这可能是一个很好的解决方案，但也存在两个问题。</p><p></p><p>首先，并不是所有的系统都支持分布式事务和两阶段提交。这个协议的问题在于各方之间的通信需要进行额外的协调。这是一个可能的解决方案，但它不是一个通用的解决方案。在我们的示例中，Kafka不支持分布式事务，所以让我们来看看另一个解决方案。</p><p></p><h2>变更数据捕获</h2><p></p><p>变更数据捕获（Change Data CaptureCDC）是一种模式，用于跟踪已更改的数据（例如，添加的新记录、更新的注册表等）并触发事件，让应用程序能够对变更作出反应。</p><p></p><p>有几种实现CDC的方法，例如，在使用行级别的时间戳、版本号或状态指示器，这样就可以定时从一个特定的点检查数据（例如，SELECT * WHERE status=not_read）。但这种方法有一个缺点，你需要经常访问数据库，但这些访问与业务无关，而且需要处理数据被删除的情况。</p><p></p><p>另一种方法是使用数据库触发器，即任何一个数据变更都会触发一个事件，并将事件保存在特定的事件表中。你可以捕获任何一个事件，但仍然需要定时轮询数据库。</p><p></p><p>大多数数据库都有事务日志，它记录了数据库的所有变更。日志扫描器会扫描这个日志，并以非侵入式的方式捕获变更。这种方法的好处如下所示。</p><p></p><p>对数据库的影响最小。变更对应用程序来说是透明的，不需要插入特殊的列。事务完整性。不需要修改数据库Schema。日志扫描是最好的方法，而<a href=\"https://debezium.io/\">Debezium</a>\"是最流行的开源日志扫描器项目。</p><p></p><h4>Debezium</h4><p></p><p>Debezium是一个通过扫描日志实现变更数据捕获的开源项目。启动数据库并配置Debezium，用它消费数据库事务日志中的数据。对于提交给数据库的每一次插入、删除或更新，Debezium都将触发一个事件，应用程序可以向它注册并作出相应的反应。</p><p></p><p>那么为什么说Debezium、CDC和Kafka可以帮助我们解决双重写入的问题呢？Kafka主题由一个或多个分区组成，每个分区按照事件到达的顺序对事件进行排序（事件总是被追加到分区的末尾）。因此，如果我们想要维护并发操作的顺序问题（避免在系统之间有错位的数据），Kafka主题可以帮我们解决这个问题。</p><p></p><p>当然，还有另外一个问题，即在并发操作的情况下，如何按照正确的顺序从数据库中读取数据。CDC和日志扫描器可以确保事务提交后数据的顺序是正确的，并且是非侵入性的，而Debezium可以在这方面发挥作用。</p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/articles/change-data-capture-debezium/en/resources/1debezium-1-1660305488714.jpeg\" /></p><p>你可以用两种不同的方式来操作Debezium，这两种方式都是有效的，使用哪一种取决于具体情况。这两种方式分别是Debezium服务器或Debezium引擎（嵌入式）。</p><p></p><h4>Debezium服务器</h4><p></p><p>Debezium服务器将Debezium作为Kafka Connect实例运行。Kafka Connect是一个独立的进程，由消费者和生产者启动，用于从Kafka读取数据。Kafka Connect定义了不同数据系统的连接器，然后将大型数据集移入或移出Kafka。由于连接器使用了Kafka API，所以它们是可伸缩的，具有容错能力和较低的延迟。</p><p></p><p>在下面的例子中，假设你想将数据从一个Kafka主题导出到一个索引引擎，比如ElasticSearch。你有两个选择。</p><p></p><p>使用Kafka API创建一个应用程序（就像我们在本系列的<a href=\"https://www.infoq.com/articles/data-with-quarkus-kafka/\">第1部分</a>\"中看到的那样）从Kafka主题读取事件，然后使用ElasticSearch客户端将数据填充到索引中。</p><p></p><p>使用ElasticSearch Kafka Connect，它已经实现了所有这些逻辑，你只需要配置和启动即可。</p><p></p><p>Debezium做的是同样的事情，它从数据库读取事务日志，并将其发送到Kafka主题。</p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/articles/change-data-capture-debezium/en/resources/1debezium-architecture-2-1660305488714.jpeg\" /></p><p>Debezium最大的优点之一是它可以连接到多种数据库，如MySQL、MongoDB、PostgreSQL、Oracle DB、SQL Server、DB 2、Cassandra和Vitesse。</p><p></p><h4>Debezium引擎</h4><p></p><p>通常情况下我们会使用Debezium服务器，因为它不会干扰应用程序。它是一个用于接收数据变更并填充Kafka主题的服务。</p><p></p><p>但并不是所有的应用程序都需要Kafka Connect提供的容错能力或可伸缩性。此外，有时候应用程序必须自己捕获数据变更事件，并执行一些自定义逻辑，而不只将变更发送到消息传递系统中。</p><p></p><p>对这些情况，debezium-api模块定义了一个API来将Debezium引擎嵌入到应用程序中。</p><p></p><p>到目前为止，我们知道了应该要尽量避免双重写入。我们的解决方案是使用CDC直接从事务日志中获取数据，并将其推送到Kafka主题，这样其他系统就可以以“事务性”的方式和顺序消费这些数据。</p><p></p><h2>发件箱模式</h2><p></p><p>看到这里，你可能会想：“好吧，我可以通过CDC对数据变更作出反应，但内部实体被暴露给了外部系统。”虽然这是真的，但请允许我向你介绍<a href=\"https://microservices.io/patterns/data/transactional-outbox.html\">发件箱模式</a>\"来避免这个问题。</p><p></p><p>发件箱模式提供了一个发件箱表，你可以在其中记录所有实体的操作（可能使用非规范化数据）。然后CDC系统（在我们的例子中使用的是Debezium）对发件箱表（而不是实体表）中的变更做出反应，这样就实现了数据模型与其他系统的隔离。</p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/articles/change-data-capture-debezium/en/resources/1outbox-table-1660305488714.jpeg\" /></p><p>需要注意的是，实体变更和发件箱必须在同一个事务中。</p><p></p><p>让我们把所有这些碎片放在一个Quarkus项目中，并解决我们在一开始提出的问题——如何在数据库中插入与电影相关的信息，并将其填充到外部系统（Kafka主题）中。</p><p></p><h2>我们的Debezium示例</h2><p></p><p>我们不再为每一种场景手动编写代码，而是使用Debezium引擎并将它与Quarkus集成来解决这个问题。</p><p></p><h4>创建项目</h4><p></p><p>到Quarkus<a href=\"https://code.quarkus.io/\">起始页</a>\"，选择RestEasy Reactive和RestEasy Reactive Jackson插件（用于编码/解码数据），实现JAX-RS端点，使用Panache和MySQL驱动程序将电影信息插入到MySQL数据库，使用SmallRye Reactive Messaging与Kafka发生交互。另外，取消选中Started Code选项，如下图所示。</p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/articles/change-data-capture-debezium/en/resources/1configure-1660305488714.jpeg\" /></p><p>你可以跳过这个手动步骤，并打开<a href=\"https://code.quarkus.io/?a=movie-plays-producer-debezium&amp;j=17&amp;nc=true&amp;e=resteasy-reactive&amp;e=resteasy-reactive-jackson&amp;e=smallrye-reactive-messaging-kafka&amp;e=jdbc-mysql&amp;e=hibernate-orm-rest-data-panache&amp;extension-search=panache\">Quarkus Generator</a>\"链接，这里所有的依赖项都被选中。然后按下“Generate your application”按钮，下载搭建好的应用程序zip文件包。</p><p></p><p>解压缩文件并在你最喜欢的IDE中打开项目。</p><p></p><h4>开发</h4><p></p><p>在开始编码之前，我们需要添加两个新的依赖项：一个用于使用Debezium引擎，另一个用于添加Debezium Quarkus Outbox插件。</p><p></p><h4>Debezium引擎</h4><p></p><p>打开pom.xml文件并添加以下依赖项。</p><p></p><p>在dependencyManagement部分：</p><p><code lang=\"java\">\n   io.debezium\n   debezium-bom\n   1.9.4.Final\n   pom\n   import\n\n</code></p><p></p><p>在dependencies部分：</p><p><code lang=\"java\">\n  io.debezium\n  debezium-ddl-parser\n\n\n  io.debezium\n  debezium-embedded\n\n<!-- We connect to a MySQL database, so we need debezium MySQL connector -->\n\n  io.debezium\n  debezium-connector-mysql\n\n</code></p><p></p><p>这是为了使用嵌入在应用程序中的Debezium引擎。如果我们使用Debezium服务器，就不需要这些依赖项，因为它是一个独立的服务。</p><p></p><h4>Debezium Quarkus Outbox插件</h4><p></p><p>Quarkus通过<a href=\"https://debezium.io/documentation/reference/stable/integrations/outbox.html\">Debezium Quarkus Outbox</a>\"插件实现发件箱模式。</p><p></p><p>打开pom.xml文件并添加以下依赖项。</p><p></p><p>在dependencyManagement部分：</p><p><code lang=\"java\">\n   ${quarkus.platform.group-id}\n   quarkus-debezium-bom\n   ${quarkus.platform.version}\n   pom\n   import\n \n</code></p><p></p><p>请注意BOM的版本与Quarkus版本要对齐，在这里是2.10.1.Final。</p><p></p><p>在dependencies部分：</p><p><code lang=\"java\">\n  io.debezium\n  debezium-quarkus-outbox\n\n</code></p><p></p><h4>实现</h4><p></p><p>你可以选择不使用发件箱模式或自己实现它，如果是这样，那么这些依赖项就都不需要。但为简单起见，我们在这里使用它。</p><p></p><p>有了这些依赖项，我们就可以创建带有JPA注解并扩展了PanacheEntity类的的Movie实体。</p><p><code lang=\"java\">import javax.persistence.Entity;\n \nimport io.quarkus.hibernate.orm.panache.PanacheEntity;\n \n@Entity\npublic class Movie extends PanacheEntity {\n  \n   // No worries Quarkus will change them\n   // to private and auto-generate getters/setters at compilation time\n   public String name;\n   public String director;\n   public String genre;\n \n}\n</code></p><p></p><p>下一步是创建一个HTTP端点，使用JAX-RS注解将电影信息插入到数据库中。</p><p><code lang=\"java\">import javax.inject.Inject;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\n \nimport org.jboss.logging.Logger;\n \n@Path(\"/movie\")\npublic class MovieResource {\n \n   // Service to insert the movie data into Movie and Outbox tables\n   @Inject\n   MovieService movieService;\n \n   // Injects the logger\n   @Inject\n   Logger logger;\n \n   // Http Post method to insert a movie\n   @POST\n   public Movie insert(Movie movie) {\n       logger.info(\"New Movie inserted \" + movie.name);\n       System.out.println(\":)\");\n      \n       return movieService.insertMovie(movie);\n   }\n}\n</code></p><p></p><p>因为我们使用的是Debezium Quarkus Outbox插件，所以需要创建一个用于表示发件箱表中存储的内容的实体。实体必须实现ExportedEvent接口，并实现接口方法来识别发件箱表中放置的事件类型。</p><p><code lang=\"java\">import java.time.Instant;\n \nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\n \nimport io.debezium.outbox.quarkus.ExportedEvent;\n \npublic class MovieEvent implements ExportedEvent {\n \n   private static ObjectMapper mapper = new ObjectMapper();\n \n   // Set the type enclosed inside the event\n   private static final String TYPE = \"Movie\";\n   // Set the event type\n   private static final String EVENT_TYPE = \"MovieCreated\";\n \n   private final long gameId;\n   private final JsonNode jsonNode;\n   private final Instant timestamp;\n \n   // Saves Game info in the class\n   public MovieEvent(Movie movie) {\n       this.gameId = movie.id;\n       this.timestamp = Instant.now();\n       // Saves game content in a string column in JSON format\n       this.jsonNode = convertToJson(movie);\n   }\n \n   @Override\n   public String getAggregateId() {\n       return String.valueOf(this.gameId);\n   }\n \n   @Override\n   public String getAggregateType() {\n       return TYPE;\n   }\n \n   @Override\n   public JsonNode getPayload() {\n       return jsonNode;\n   }\n \n   @Override\n   public Instant getTimestamp() {\n       return timestamp;\n   }\n \n   @Override\n   public String getType() {\n       return EVENT_TYPE;\n   }\n  \n   private JsonNode convertToJson(Movie movie) {\n       ObjectNode asJson = mapper.createObjectNode()\n               .put(\"id\", movie.id)\n               .put(\"name\", movie.name)\n               .put(\"director\", movie.director)\n               .put(\"genre\", movie.genre);\n      \n       return asJson;\n   }\n \n}\n</code></p><p></p><p>在将Debezium逻辑添加到代码之前，我们还需要实现MovieService类，加入插入数据的逻辑。这个逻辑应该将电影信息持久化到Movie表中，并将MovieEvent实体持久化到由OutboxEvent插件管理的表中。</p><p></p><p>这个插件提供了一个特定的CDI事件来持久化实现了ExportedEvent接口的事件。我们唯一要做的事情是触发一个事件，数据将自动被持久化。</p><p><code lang=\"java\">import javax.enterprise.context.ApplicationScoped;\nimport javax.enterprise.event.Event;\nimport javax.inject.Inject;\nimport javax.transaction.Transactional;\n \nimport io.debezium.outbox.quarkus.ExportedEvent;\n \n@ApplicationScoped\npublic class MovieService {\n  \n   // CDI event interface triggering Outbox entities\n   @Inject\n   Event&gt; event;\n \n   // Transaction method\n   @Transactional\n   public Movie insertMovie(Movie movie) {\n \n       // Persists data\n       movie.persist();\n      \n       // Persists outbox content\n       event.fire(new MovieEvent(movie));\n      \n       return movie;\n   }\n}\n</code></p><p></p><p>最后一步是配置Debezium引擎，并将其嵌入到应用程序中。</p><p></p><p>要配置引擎，你需要设置数据库信息（主机名、端口、凭证）以及Debezium要监控的数据库和表。</p><p></p><p><code lang=\"java\">import java.io.File;\nimport java.io.IOException;\n \nimport javax.enterprise.inject.Produces;\n \nimport org.eclipse.microprofile.config.inject.ConfigProperty;\n \nimport io.debezium.config.Configuration;\n \npublic class DebeziumConfiguration {\n  \n   // Debezium needs Database URL and credentials to login and\n   // monitor transaction logs\n   @ConfigProperty(name = \"quarkus.datasource.jdbc.url\")\n   String url;\n \n   @ConfigProperty(name = \"quarkus.datasource.password\")\n   String password;\n \n   @ConfigProperty(name = \"quarkus.datasource.username\")\n   String username;\n\n   @Produces\n   public Configuration configureDebezium() throws IOException {\n \n       // Custom class to get database name or hostname of Database server\n       MySqlJdbcParser jdbcParser = MySqlJdbcParser.parse(url);\n      \n       File fileOffset = File.createTempFile(\"offset\", \".dat\");\n       File fileDbHistory = File.createTempFile(\"dbhistory\", \".dat\");\n \n       return io.debezium.config.Configuration.create()\n           .with(\"name\", \"movies-mysql-connector\")\n           // configures MySQL connector\n           .with(\"connector.class\", \"io.debezium.connector.mysql.MySqlConnector\")\n           .with(\"offset.storage\", \"org.apache.kafka.connect.storage.FileOffsetBackingStore\")\n           .with(\"offset.storage.file.filename\", fileOffset.getAbsolutePath())\n           .with(\"offset.flush.interval.ms\", \"60000\")\n           // Configures database location\n           .with(\"database.hostname\", jdbcParser.getHost())\n           .with(\"database.port\", jdbcParser.getPort())\n           .with(\"database.user\", \"root\")\n           .with(\"database.allowPublicKeyRetrieval\", \"true\")\n           .with(\"database.password\", password)\n           .with(\"database.dbname\", jdbcParser.getDatabase())\n           .with(\"database.include.list\", jdbcParser.getDatabase())\n           // Debezium only sends events for the modifications of OutboxEvent table and not all tables\n           .with(\"table.include.list\", jdbcParser.getDatabase() + \".OutboxEvent\")\n           .with(\"include.schema.changes\", \"false\")\n           .with(\"database.server.id\", \"10181\")\n           .with(\"database.server.name\", \"movies-mysql-db-server\")\n           .with(\"database.history\", \"io.debezium.relational.history.FileDatabaseHistory\")\n           .with(\"database.history.file.filename\", fileDbHistory.getAbsolutePath())\n       .build();\n   }\n \n}\n</code></p><p></p><p>DebeziumListener CDI类会在应用程序启动时启动Debezium。</p><p></p><p>Debezium引擎并不是在单独的线程中运行，所以我们需要提供一个并行运行的线程，而不是阻塞应用程序的线程。在Quarkus中，我们可以使用ManagedExecutor提供执行程序线程来运行Debezium。</p><p></p><p>然后，我们需要使用DebeziumEngine类来实例化Debezium引擎，并设置在上一步中创建的配置属性。最重要的一个步骤是注册一个在Debezium每次生成事件时触发的方法。notifying方法会对这个自定义方法进行注册，在我们的示例中，这个方法叫作handleChangeEvent。</p><p></p><p>这个方法用于接收事件，我们可以实现任何我们想要的逻辑——将事件发送到Kafka主题或者其他服务——任何你可以在Java中实现的东西。</p><p><code lang=\"java\">import java.io.IOException;\n \nimport javax.enterprise.context.ApplicationScoped;\nimport javax.enterprise.event.Observes;\n \nimport org.apache.kafka.connect.data.Struct;\nimport org.apache.kafka.connect.source.SourceRecord;\nimport org.eclipse.microprofile.context.ManagedExecutor;\nimport org.eclipse.microprofile.reactive.messaging.Channel;\nimport org.eclipse.microprofile.reactive.messaging.Emitter;\n \nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n \nimport io.debezium.config.Configuration;\nimport io.debezium.embedded.Connect;\nimport io.debezium.engine.DebeziumEngine;\nimport io.debezium.engine.RecordChangeEvent;\nimport io.debezium.engine.format.ChangeEventFormat;\nimport io.quarkus.runtime.ShutdownEvent;\nimport io.quarkus.runtime.StartupEvent;\nimport io.smallrye.reactive.messaging.kafka.Record;\n \nimport static io.debezium.data.Envelope.FieldName.*;\nimport static io.debezium.data.Envelope.Operation;\n\n@ApplicationScoped\npublic class DebeziumListener {\n  \n   private static ObjectMapper objectMapper = new ObjectMapper();\n \n   // Start the Debezium engine in a different thread\n   ManagedExecutor executor;\n \n   // Debezium configuration object\n   Configuration configuration;\n \n   private DebeziumEngine&gt; engine;\n \n   public DebeziumListener(ManagedExecutor executor, Configuration configuration) {\n       this.executor = executor;\n       this.configuration = configuration;\n   }\n \n   // Interface to send events to movies Kafka topic\n   @Channel(\"movies\")\n   Emitter&gt; movieEmitter;\n \n   void onStart(@Observes StartupEvent event) {\n \n       // Configures Debezium engine\n       this.engine = DebeziumEngine.create(ChangeEventFormat.of(Connect.class))\n           .using(this.configuration.asProperties())\n           // For each event triggered by Debezium, the handleChangeEvnt method is called\n           .notifying(this::handleChangeEvent)\n           .build();\n \n       // Starts Debezium in different thread\n       this.executor.execute(this.engine);\n   }\n\n   void handleChangeEvent(RecordChangeEvent sourceRecordRecordChangeEvent) {\n \n       // For each triggered event, we get the information\n       SourceRecord sourceRecord = sourceRecordRecordChangeEvent.record();\n       Struct sourceRecordChangeValue= (Struct) sourceRecord.value();\n \n       if (sourceRecordChangeValue != null) {\n           Operation operation = Operation.forCode((String) sourceRecordChangeValue.get(OPERATION));\n \n           // Only insert operations are processed\n           if(operation == Operation.CREATE) {\n \n               // Get insertation info\n               Struct struct = (Struct) sourceRecordChangeValue.get(AFTER);\n               String type = struct.getString(\"type\");\n               String payload = struct.getString(\"payload\");\n \n               if (\"GameCreated\".equals(type)) {\n                   try {\n                       final JsonNode payloadJson = objectMapper.readValue(payload, JsonNode.class);\n                       long id = payloadJson.get(\"id\").asLong();\n \n                       // Populate content to Kafka topic\n                       movieEmitter.send(Record.of(id, payloadJson));\n                   } catch (JsonProcessingException e) {\n                       throw new IllegalArgumentException(e);\n                   }\n               }\n           }\n       }\n   }\n\n   void onStop(@Observes ShutdownEvent event) throws IOException {\n       if (this.engine != null) {\n           this.engine.close();\n       }\n   }\n \n}\n</code></p><p></p><h4>运行</h4><p></p><p>这个示例是自包含的，因此你不需要启动任何东西，因为Quarkus会为你启动它。</p><p></p><p>Panache和Kafka Connector已经与Quarkus <a href=\"https://quarkus.io/guides/dev-services\">DevServices</a>\"集成，因此我们不需要启动Kafka集群或MySQL数据库，也不需要将它们配置为Quarkus Dev模式。电脑上需要有一个可运行的容器运行时，比如Podman或任何其他兼容OCI的工具。</p><p></p><p>为了便于跟踪，在运行应用程序之前，我们向应用程序中添加两个配置属性。在application.properties文件中添加下面的两行。</p><p></p><p><code lang=\"java\">quarkus.hibernate-orm.log.sql=true\nquarkus.debezium-outbox.remove-after-insert=false\n</code></p><p></p><p>第一行记录执行的SQL语句。这有助于在插入数据时对两张表（Movies和OutboxEvent）进行验证。</p><p></p><p>第二行避免Debezium在使用发件箱表后删除数据。</p><p></p><p>在终端窗口中启动服务：</p><p><code lang=\"java\">./mvnw clean quarkus:dev\n\n…\n2022-07-07 11:36:22,942 INFO  [io.deb.con.mys.MySqlStreamingChangeEventSource] (debezium-mysqlconnector-movies-mysql-db-server-change-event-source-coordinator) Waiting for keepalive thread to start\n2022-07-07 11:36:22,948 INFO  [io.deb.con.mys.MySqlStreamingChangeEventSource] (debezium-mysqlconnector-movies-mysql-db-server-change-event-source-coordinator) Keepalive thread is running\n2022-07-07 11:37:43,889 INFO  [org.acm.MovieResource] (executor-thread-1) New Movie inserted string\n</code></p><p></p><p>几秒钟后，Kafka集群、MySQL实例和应用程序就启动起来了。</p><p></p><p>通过检查运行的容器来验证实例：</p><p><code lang=\"java\">docker ps\n\nCONTAINER ID   IMAGE                          COMMAND                  CREATED          STATUS          PORTS                                    \n         \nfa316bfae219   vectorized/redpanda:v21.11.3   \"sh -c 'while [ ! -f…\"   49 seconds ago   Up 45 seconds   8081-8082/tcp, 9644/tcp, 0.0.0.0:55002-&gt;9092/tcp\n\n4c220f7ee066   mysql:8.0                      \"docker-entrypoint.s…\"   50 seconds ago   Up 46 seconds   33060/tcp, 0.0.0.0:60652-&gt;3306/tcp\n\ne41cae02ff02   testcontainers/ryuk:0.3.3      \"/app\"                   53 seconds ago   Up 50 seconds   0.0.0.0:60650-&gt;8080/tcp\n</code></p><p></p><p>Kafka集群运行在端口55002上，和MySQL（ID为4c220f7ee066）运行在端口60652上。</p><p></p><p>注意：不同情况下端口和ID可能不同。</p><p></p><p>在另一个终端窗口中运行curl命令，插入一个新的Movie记录。</p><p><code lang=\"shell\">curl -X 'POST' \\\n  'http://localhost:8080/movie' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"Minions: The Rise of Gru\",\n  \"director\": \"Kyle Balda\",\n  \"genre\": \"Animation\"\n}'\n</code></p><p></p><p>检查Quarkus终端窗口，可以看到数据库运行的SQL语句。</p><p><code lang=\"java\">:)\nHibernate:\n    select\n        next_val as id_val\n    from\n        hibernate_sequence for update\n\n\n\nHibernate:\n    update\n        hibernate_sequence\n    set\n        next_val= ?\n    where\n        next_val=?\n\n// Insert into Movie \n\nHibernate:\n    insert\n    into\n        Movie\n        (director, genre, name, id)\n    values\n        (?, ?, ?, ?)\n\n// Automatically OutboxEvent table receives an insert\n\nHibernate:\n    insert\n    into\n        OutboxEvent\n        (aggregatetype, aggregateid, type, timestamp, payload, tracingspancontext, id)\n    values\n        (?, ?, ?, ?, ?, ?, ?)\n</code></p><p></p><p>为了验证Debezium可以检测到变更并将其推送到Movies Kafka主题，我们将运行<a href=\"https://github.com/edenhill/kcat\">kcat</a>\"工具来查询Kafka主题。</p><p></p><p><code lang=\"plain\">kcat -b localhost:55002 -C -t movies\n\n{\"id\":1,\"name\":\"Minions: The Rise of Gru\",\"director\":\"Kyle Balda\",\"genre\":\"Animation\"}\n% Reached end of topic movies [0] at offset 1\n</code></p><p></p><h2>结论</h2><p></p><p>我们实现了一种解决方案，通过使用Debezium读取事务日志并为每一个变更触发一个事件，解决了数据库和外部系统之间的双重写入问题。</p><p></p><p>在本例中，我们使用了Debezium引擎，并实现了在触发事件时执行的逻辑。</p><p></p><p>嵌入式方式可能在某些场景中有用，但在其他场景中（特别是在需要高可伸缩性和容错能力的项目中)，Debezium服务器可能更适合。如果使用Debezium服务器（作为一个Kafka Connect进程)，你的代码就不需要做出修改（没有依赖项），因为Debezium是一个独立的进程，它会自己连接到数据库事务日志，检测变更，并将它们发送到Kafka主题。由于事件是有序的，所以任何系统都可以消费主题中的变更事件。</p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/articles/change-data-capture-debezium/en/resources/2debezium-architecture-2-1660305488714.jpeg\" /></p><p>尽管在使用Debezium时，发件箱模式并不是必需的（到最后，Debezium可以监听任何一张表中的变更），但隔离数据是一个很好的实践，发件箱模式可以帮助你做到这一点。</p><p></p><p>集成（微）服务架构最初看起来可能很容易，但当你开始集成数据时，事情就变复杂了，而Debezium项目可以帮助你完成这项任务。</p><p></p><p>源代码可以在<a href=\"https://github.com/lordofthejars/movie-plays-kafka\">GitHub</a>\"上找到。</p><p></p><p>作者简介：</p><p>Alex Soto是Red Hat的开发者体验总监。他对Java和软件自动化充满热情，并相信开源软件模型。Soto是《Testing Java Microservices》（Manning）和《Quarkus Cookbook》（O'Reilly）的合著者，也是几个开源项目的贡献者。自2017年以来，他获得Java Champion的称号，也是Salle URL University的国际演讲者和教师。你可以在Twitter上关注他（Alex Soto），了解Kubernetes和Java世界正在发生的事情。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/change-data-capture-debezium/\">https://www.infoq.com/articles/change-data-capture-debezium/</a>\"</p><p></p><p>相关阅读：</p><p>本系列第一部分：<a href=\"https://www.infoq.cn/article/cFpvXRLmZzJBGbzAeFu5\">使用 Apache Kafka 实现 Quarkus 的反应式消息</a>\"</p><p>本系列第二部分：<a href=\"https://www.infoq.cn/article/WfA0p1XoZCJ6INdyJLyv\">Kafka Streams 与 Quarkus：实时处理事件</a>\"</p>",
    "publish_time": "2022-09-08 09:17:45",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "2022金融AI发展研究报告：这六大技术演进趋势最值得关注",
    "url": "https://www.infoq.cn/article/tdRsT42FbjJv3oRO5A5G",
    "summary": "<p>9月3日，InfoQ获悉，2022世界人工智能大会·腾讯论坛上，腾讯发布了国内首份金融AI白皮书——《价值共生·2022金融AI发展研究报告》（以下简称“报告”）。</p><p></p><p>报告由北京金融科技产业联盟作为指导单位，由腾讯研究院与腾讯优图实验室、腾讯云、交通银行组成的联合课题组，联动腾讯内部及金融机构业务侧，对国内多个金融机构进行了近五个月的调研，并将调研成果与课题组对金融AI的发展趋势思考进行汇总，共同编制而成。</p><p></p><h3>金融AI发展全貌：政策、行业、趋势</h3><p></p><p></p><p>报告分为三个章节，从政策、行业、趋势三个层面出发，详细阐述了金融AI的发展环境与机遇、典型场景与案例、发展趋势与展望。</p><p></p><p>报告指出，近年来，人工智能技术正不断发展，并与金融业务深度融合，衍生出新业态、新场景，深刻影响金融业的发展模式，同时也为金融服务夯实“安全底座”。</p><p></p><p>在政策层面，政策引导金融与AI融合发展，金融AI迎来新阶段。</p><p></p><p>报告从国际政策、国内政策、行业政策三个方面，介绍了金融AI发展的环境和机遇。近年来，从国际到国内，从社会整体到金融行业，政策层面不断出台战略规划，推动人工智能与金融的融合，深化AI的金融应用。</p><p></p><p>从政策趋势上看，金融AI发展前景广阔。随着全社会数字化的推进，金融机构与供应链、产业链上下游数据的贯通，以及跨界合作的推进，人工智能将为金融机构的业务提供更多方面、更好效果的助力作用，赋能金融机构降本增效、提升服务体验。</p><p></p><p>在行业层面，AI赋能智能金融场景创新，金融服务能力不断提升。在AI与金融的加速融合下，催生出了智能营销、智能识别、智能理财、智能风控、智能客服等多种提升金融价值的场景。</p><p></p><p>报告通过上述五个场景和五个案例，展示了金融AI在我国目前发展现状。以交通银行融合了计算机视觉、机器学习、人工智能等新技术的“统一图像识别平台”为例，腾讯优图通过引入多模态技术提高信息抽取的泛化性能，助力解决非标准文档的OCR信息结构化提取，提高图像、单据识别率，推动业务效率以及用户体验提升。同时，该平台在信息录入等方面时长降低98.4%，且准确率高，能大量节约人力成本。</p><p></p><p>在趋势层面，金融AI创新前景广阔，行业持续向好发展。在金融机构数字化转型持续加速的背景下，报告的趋势篇从技术的深度、场景的广度、服务的可信度三方面，展望了金融AI未来发展的趋势。</p><p></p><p>首先，从技术方面来看，以语音识别技术、视觉技术、全真互联技术为代表的技术不断发展成熟，将催生更多新业态，驱动行业创新发展。</p><p></p><p>其次，从场景方面来看，在技术的深度不断加强的基础下，场景覆盖的广度也将不断向外拓展，实现全流程的数智化。</p><p></p><p>最后，在安全保障方面，零信任架构、隐私计算技术的持续升级，将夯实金融机构在数据融通领域的可信基础。</p><p></p><p>腾讯云副总裁、腾讯优图实验室总经理吴运声在报告发布现场表示：“人工智能和机器学习已经成为金融行业可持续发展和增长的关键。随着人工智能技术的不断发展，在金融行业，人工智能的应用经历了标准能力应用探索、细分业务领域垂直深化阶段后，已进入全面应用和持续创新的新阶段，人工智能将用于更广更多元化的产品形态和功能”。</p><p></p><h3>金融与AI融合凸显六大技术趋势</h3><p></p><p></p><p>腾讯研究院副院长杜晓宇认为，金融与科技融合经历了三个阶段：</p><p></p><p>第一个阶段，2005年开始的IT+金融阶段，这个阶段金融机构通过布局IT软硬件实现办公自动化、软件化以及面向客户的股票交易端、网上银行等应用。</p><p></p><p>第二个阶段，是互联网+金融的阶段，这个阶段包括移动支付利用互联网终端为客户提供服务的网商银行，这个阶段是通过金融业务的资产端、交易端、资金端的打通实现共享。</p><p></p><p>第三个阶段，2015年到现在开始的AI+金融的阶段，这个阶段通过人工智能一系列的技术改变传统金融的信息采集、风险评价、客户服务等环节，改善金融交易不对证性和安全性、效率性。</p><p></p><p>金融业务本质是风险管理，风险控制是金融行业核心业务，但现在传统金融一直存在信息不对称、效率低、速度慢、人力成本高的问题。还有像金融行业营业时间有限、客户量大、传统员工不能满足服务以及金融市场有海量的数据信息，人工决策能力也非常有限。</p><p></p><p>AI赋能金融的本质就是，依托人工智能的技术，大数据，也包括区块链、云计算、联邦学习等技术，解决实实在在行业存在的上述痛点，借助AI的技术金融业务实现智能风控，实时更新数据，让风险监控实时化。此外像AI服务能够形成7×24小时随时随地的服务并且能够实现千人千面精准化、个性化的服务，在业务经营决策上其实也能实现智能决策的支持，提升业务的效率。</p><p></p><p>现阶段，金融AI整个产业链包括三个层次：基础层、技术层、应用层基础层有AI的芯片、云服务、数据服务构成。</p><p></p><p>腾讯研究院副秘书长杨望在解读2022金融AI发展研究报告时提到，金融机构在人工智能技术方面的投入呈现增加趋势。他表示，中国银行业每年信息科技投入占到营收比重2%到4%之间，去年数据为2800亿人民币左右，用在人工智能层面上可能是十分之一，接近200亿的规模，整体化是逐年上升的趋势。各个金融机构人工智能和智能化的规划，包括内部的计划也在每年出都会有预算的定制，对于金融AI来说是很好的发展机遇。</p><p></p><p>杨望表示，从技术的视角看，金融与AI深度融合的过程中，整体呈现出以下六个方面的趋势：</p><p></p><p>第一，AI建设在金融机构会向平台化、体系化、系统化层面靠拢，随着金融数字化转型的发展，金融机构逐渐重视建设新一代科技的基础设施，特别是云计算、云原生技术理念也在金融机构得到实践。结合AI构建金融大脑，比如说金融机构内部的金融大脑所有的前中后台业务都将围绕金融大脑进行AI自驱使的运转，这是我们可以期待的趋势。</p><p></p><p>第二，随着语言、语音、语义相关技术的进步，运用场景会不断丰富多元化，为金融客户提供更丰富7×24小时的业务办理。</p><p></p><p>第三，图像视觉相关的技术将继续演进，特别是卫星遥感等像图像识别的应用将进入更多的金融机构。计算机视觉技术在金融业，特别是身份认证的环节的作用会越来越普遍。</p><p></p><p>第四，AI+RPA的技术将成为金融主方向，理解市场环境变化的认知能力提高。</p><p></p><p>第五，低代码、零代码的开发技术兴起，提供全新金融技术人员工作流程，促进金融领域各个项目快速落实，例如，很多金融机构都已经引用RPA的技术+人工智能，让各个岗位工作人员都能做低代码和零代码的工作，能够实现完全无代码的工作环境，简单而言所有工作人员都能像码农一样用无代码或者零代码的方式去实现业务的某个或多个功能。</p><p></p><p>第六，人工智能是全真互联中非常重要的技术，它能够帮助数字经济和实体经济融合发展，并且推动金融高质量发展，具体来说，就是通过实时音视频技术等，全真互联将加速渗透各个金融业务流程，加速金融普惠。</p><p></p><p>总结来说：</p><p></p><p>第一，数字员工能够替代人工的一些低效率工作。</p><p></p><p>第二，数字原生可以促进技术体系。</p><p></p><p>第三，远程银行能够跨省、跨地域地进行金融普惠业务。</p><p></p><p>第四，NFT这些技术能够帮助金融机构资产进行更好数字化的流转和价值提升。</p><p></p><p>从具体AI落地可以看到，智能风控投入占比很高，说明关注风险管理、提升风险识别能力仍就是整个金融AI技术的主要目标。</p><p></p><h3>2022年金融AI发展方向：从提升广度到提升深度、速度和温度</h3><p></p><p></p><p>杜晓宇判断，2022年之后，金融机构对IT解决方案的灵活性重视程度不断提升，混合云和云服务、自然语言处理、计算机视觉、知识图谱、机器学习等这些技术广泛应用到各个场景。</p><p></p><p>杜晓宇从四个方面，详细阐述了金融AI的发展趋势：</p><p></p><p>第一，金融AI在银证保不断加速的创新过程中，金融AI在更多的场景中实现。</p><p></p><p>第二，金融对我国发展是至关重要的阶段，其实AI在金融领域的实践，特别是在安全领域的实践，可以像其他行业不断发展。</p><p></p><p>第三，金融AI一直在释放人力成本，无论是银行、证券和保险金融AI都可以完成劳动密集型的一部分，通过金融AI提高金融的效率。</p><p></p><p>第四，作为信息密集型行业，金融AI不具有一定的溢出效应，现在很多企业仿照金融领域的AI应用布局，建立了AI+RPA以及低代码开发平台整合，开启了新的业务模式，可以看出金融业AI的发展，实际上也可以不断推进其他业务对AI的应用。</p><p></p><p>杜晓宇认为，过去二十年来，互联网技术和移动互联网技术的发展，为金融服务带来了广度上的提升，而从现在到未来，金融AI将为金融服务带来深度、速度特别是温度的提升。</p>",
    "publish_time": "2022-09-08 10:25:52",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Akka 宣布更改许可，创始人：Apache 2.0 许可模式风险越来越大",
    "url": "https://www.infoq.cn/article/YgSiS09EcKCRIyUtldHg",
    "summary": "<p>当地时间9月7日，Lightbend <a href=\"https://www.lightbend.com/blog/why-we-are-changing-the-license-for-akka\">发布公告</a>\"称，Akka 的许可证将更改为&nbsp;Business Source License (BSL)&nbsp;v1.1。</p><p>&nbsp;</p><p>BSL 并不是开源协议，用户虽然可以拿到源代码，但是使用时会受限。在非生产环境中，BSL 协议的软件可以不受限制的使用，如果用于商业目的，那么会有所限制。Akka 的生产使用需要 Lightbend 的商业许可。商业许可证将免费提供给处于早期阶段的公司（年收入低于 2500 万美元）。Lightbend 表示，3 年后，BSL 许可证无限期恢复为 Apache 2.0 许可证。</p><p>&nbsp;</p><p>BSL 协议是在经历了 MySQL 被收购之后，MariaDB 公司新定义的一种协议，介于开源和闭源之间。BSL 由 David Axmark 和 Michael Widenius 创建，目前已被 MariaDB、Cockroach Labs、Sentry、Materialized 等企业采用。</p><p>&nbsp;</p><p>在公告中，Lightbend 创始人兼 CEO Jonas Bonér 解释了为什么要对许可证进行变更。他认为，Akka 现在被认为是许多大型组织的关键基础设施，此时的维护工作由一家小公司独自承担时，Apache 2.0 许可模式的风险变得越来越大。</p><p>&nbsp;</p><p>“如同开源领域的早期情况一样，Akka 早期的大部分工作都是由热情的开发人员在深夜和周末完成的，这一切的动力都源于他们对编程的热爱和在社区大家一起工作的乐趣。但在过去的 10 到 15 年间，这种情况发生了巨大变化。在基础设施领域，现在许多开源软件是由公司创建的，包括创新和挑战现状的小型初创公司，和将开源视为吸引人才和围绕其品牌建立社区为伟大方式的大型企业。与此同时，在商业上使用开源软件的公司变得更有信心可以自己操作，对开发软件公司的帮助依赖变得更少。”Bonér 写道。</p><p>&nbsp;</p><p>Bonér 表示，“最初为 Akka 选择 Apache 2.0 许可证时，我并没有意识到如果 Akka 成为一个大型的全球项目后会产生什么样的影响。无论好坏，Apache 在过去和现在都被视为开源社区事实上的标准许可证选择。Apache 2.0 是一个非常自由的许可证，非常适合早期建立社区的小型开源项目。它本质上赋予了用户做自己想做任何事情的权利，没有任何限制或义务规定要用户回馈社区和他们受益的项目。”</p><p>&nbsp;</p><p>Bonér 指出，“可悲的是，开源容易出现臭名昭著的“公地悲剧”，这表明我们倾向于为自己的利益行事，违背各方的共同利益，如果我们认为别人会替我们处理事情，就会放弃责任。这种情况是不可持续的，每个人最终都是输家。”</p><p>&nbsp;</p><p>注：当我们都承担着责任时，如果假设其他人会为我们负责，我们就很容易放弃自己的责任。这被称为“公地悲剧”。</p><p>&nbsp;</p><p>Bonér 认为可持续的开源是每个​​人（用户和开发人员）都参与其中，共享责任和所有权。这意味着利用该软件谋利的公司需要做一些回馈，无论是代码、文档、社区工作还是金钱。“在可持续的开源中，参与者应该感到做贡献的必要性和道德义务。”</p><p>&nbsp;</p><p>当 Akka 成为众多大型组织的关键基础设施后，Bonér 认为，对于多年稳定支持 Akka的Lightbend 来说，平衡全球企业社区的需求，同时支持庞大的开源需求已经成为一个巨大的负担，而BSL 1.1在开源授权和 Apache 重新授权下将是一种高效、可持续的开源形式。</p><p>&nbsp;</p><p>“BSL 易于理解、提供了明确的规则，并具有可执行性。它为依赖Akka的大型企业提供了一种机制来回馈 Akka，并让 Lightbend 能够继续支持他们。”Bonér 表示，“这种方法允许 Lightbend 扩大对 Akka 项目的投资，支持其全球用户，并开始我们雄心勃勃的路线图。”</p><p>&nbsp;</p>",
    "publish_time": "2022-09-08 10:44:38",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "OceanBase 数据库",
    "url": "https://www.infoq.cn/article/q3D8R0x5LNtZUX5EchBz",
    "summary": "<p>OceanBase 数据库是蚂蚁集团完全自主研发的原生分布式关系数据库软件。它在普通服务器集群上实现金融级稳定性和高可用，首创“三地五中心”城市级故障自动无损容灾新标准，具备基于原生分布式的卓越的水平扩展能力。</p>\n<p>OceanBase 是全球首家通过 TPC-C 标准测试的分布式数据库，单集群规模超过 1500 节点。OceanBase 目前承担蚂蚁集团支付宝 100% 核心链路，在国内几十家银行、保险公司等金融客户的核心系统中稳定运行。</p>\n<p>本电子书将从多租户架构、数据库对象、数据链路、用户接口和查询语言等多维度，教你全面掌握 OceanBase 数据库的相关知识！</p>",
    "publish_time": "2022-09-08 11:49:50",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "《OceanBase 社区版入门到实战》",
    "url": "https://www.infoq.cn/article/61tq7MPNErVJBTM4deZb",
    "summary": "<p>属于 OceanBase 开源社区的第一本分布式实战教程——《OceanBase 社区版入门到实战》正式来啦！</p>\n<p>本书共八章，从 OceanBase 数据库概述开始，到安装部署，到使用，到迁移 再到运维、测试、性能诊断，最后是 OceanBase 生态工具的使用，带你学面掌握 OceanBase 实战使用技能！</p>\n<p>为什么你需要这本书？</p>\n<p>《OceanBase 社区版入门到实战》是由阿里云开发者社区联合 OceanBase 开源团队共同打造的实践类教程。</p>\n<p>本教程总结了 OceanBase 社区版运维开发常见的场景、问题和实践经验，内含具体操作示例、原理解释等。所以，无论你是学生或数据库技术爱好者，还是 DBA 或应用开发者，你都可以通过本教程快速上手 OceanBase ，并获得相应的实践经验。《OceanBase 社区版入门到实战》的很多实践经验同样也适用于 OceanBase 企业版。</p>\n<p>本书亮点</p>\n<p>1、开源分布式数据库零基础快速入门，快速掌握 OceanBase 核心使用技能<br />\n2、理论结合实践，强化动手能力，快速进入 OceanBase 开发运维工作。<br />\n3、快速学习分布式数据库开发运维成熟经验，提升职场核心竞争力。</p>",
    "publish_time": "2022-09-08 11:49:58",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "iPhone芯片速度之王登场！苹果亮出最强移动芯片A16，集成近160亿个晶体管",
    "url": "https://www.infoq.cn/article/QkWjO4twAq64iIXw7fXQ",
    "summary": "<p></p><blockquote>一年一度的科技界“春晚”又来了。</blockquote><p></p><p></p><h2>苹果推出 A16 芯片</h2><p></p><p></p><p>9 月 8 日凌晨，苹果公司召开秋季新品发布会，正式推出 A16 芯片。</p><p></p><p>据介绍，A16 芯片采用 4nm 工艺制造，而上一代 A15 芯片采用的则是 5nm 工艺制造。此外，A16 芯片还拥有近 160 亿个晶体管，与 A15 芯片的 150 亿个晶体管相比，A16 芯片在晶体管数量上达到了历史之最。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f2/f226c33368920c1593ac28da282112da.png\" /></p><p></p><p>配置方面，A16 芯片采用 6 核 CPU，由 2 颗性能内核和 4 颗效能内核组成。这与 A15 芯片的数量完全相同。苹果表示，与 A15 芯片相比，A16 芯片性能核心功耗降低了 20%；效能核心功耗仅为未命名的竞争对手的芯片的三分之一。</p><p></p><p>其他值得注意的升级还包括，GPU 的内存带宽增加了 50%，拥有运算能力接近每秒 17 万次的 16 核心神经网络引擎，以及更高的显存带宽和显示引擎。</p><p></p><p>同时，新的显示引擎可实现 1 Hz 刷新率、高峰值亮度、常亮显示和抗锯齿等功能，以消除显示图形中的粗糙边缘。依靠全新的 A16 芯片，iPhone 14 Pro 系列可以对照片进行每秒 4 万次的计算，更好地对 4800 万像素的影像传感器进行优化和处理，在影像方面带来更好的表现。</p><p></p><p>值得一提的是，A16 芯片是苹果今年正式发布的第二款重磅芯片，在今年 6 月的苹果全球开发者大会 (WWDC)上，苹果带来了 <a href=\"https://www.infoq.cn/article/EqNHWpSRfAchyvm8JjHS\">M2 芯片</a>\"。与 <a href=\"https://www.infoq.cn/article/YOUJqz1z8X1tx8t4r9pL\">M1 芯片</a>\"相似的地方在于，M2 同样是 Arm 芯片，基于 5nm 工艺，拥有 200 亿个晶体管——比原来的 M1 多 25%。所有这些晶体管都将提高性能，Apple 承诺与原始 M1 相比，M2 的 CPU 速度提高 18%，GPU 速度提高 35%。</p><p></p><p>综合来看，A16 芯片的整体进步并不算亮眼，这次升级也是中规中矩，但性能方面确实延续了苹果一贯的出色表现。苹果方面表示，A16 芯片是迄今为止最强大的移动芯片，据说比竞争对手的芯片组快 40%。</p><p></p><h2>新一代“苹果三件套”</h2><p></p><p></p><p>回顾本次苹果秋季新品发布会，最大的亮点除了如约而至的 A16 芯片，当属 iPhone 14 系列手机。此外，苹果还带来了 Apple AirPod Pro 2 代以及 Apple Watch Series 8。三款新品也被大家称为新一代“苹果三件套”。</p><p></p><h4>iPhone 14 系列手机：支持卫星 SOS 紧急联络</h4><p></p><p></p><p>本次发布的 iPhone 14 系列手机共包含 4 款：iPhone 14、iPhone 14 Plus、iPhone 14 Pro、iPhone 14 Pro Max。值得一提的是，iPhone 14/14 Plus 依旧采用 A15 芯片，而 iPhone 14 Pro/Pro Max 搭载的则是最新的 A16 芯片。</p><p></p><p>其中，iPhone 14/14 Plus 在整体外观方面对比 iPhone 13 并无明显变化，依旧是刘海屏设计，背部双摄镜头；而 iPhone 14 Pro/Pro Max 在外观上的变化则较为明显，用更小的摄像头开孔取代刘海设计，新的屏幕设计也被称为“药丸屏”。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/3f/3f5c857ed3a6e8030dcda3e530c0c4e8.png\" /></p><p></p><p>iPhone 14 系列手机整体最大的变化是支持卫星 SOS 紧急联络。这项功能让 iPhone 能跟卫星连接，在没有信号的地区，可发送紧急求助短信。定制组件和特定软件氪连接卫星独特频率，手机面向卫星时，可连接卫星。定制短文本在 15 秒内可发送一则信息。在野外时，也可以用卫星分享位置。不过，苹果并未在发布会上说明具体使用哪家卫星系统。</p><p></p><p>此外，苹果还宣布，所有美国版 iPhone 都不再有实体 SIM 卡槽，全部采用 eSIM。所谓 eSIM，中文名为“嵌入式手机卡”，芯片直接集成到主板上，无需实体 SIM 卡，开通套餐后即可上网。目前 eSIM卡主要应用于智能手表，因智能手表内部空间很小，所以才会选择 eSIM 卡进行通话和上网。</p><p></p><p>有评论认为，苹果取消实体&nbsp; SIM卡，一方面是为了节省手机内部空间，另一方面应该是为未来的无孔手机提前做准备。</p><p></p><p>价格方面，iPhone 14 国内定价 5999 元起（128GB）；iPhone 14 Plus 定价6999元起（128GB）；iPhone 14 Pro 国内定价 7999 元起（128GB）；iPhone 14 Pro Max 定价 8999元起（128GB）。</p><p></p><h4>AirPods Pro 二代：千人千面的空间音频</h4><p></p><p></p><p>在 AirPods Pro 一代发布 3 年后，二代终于登场。与一代相比，AirPods Pro 二代在外形上基本没有变化，内部则带来了较多升级。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/72/72224185593eb186dc68ee5feabe996b.png\" /></p><p></p><p>AirPods Pro 二代采用了全新的 H2 芯片驱动，苹果方面表示，全新的 H2 芯片降噪能力可达上一代 AirPods Pro 的两倍，对主动降噪的计算力到了每秒 4.8 万次。并采用全新的低失真度音频驱动单元和定制放大器，可在更广泛的频率范围内提供更浑厚的低音和更加通透的音质。</p><p></p><p>此外，AirPods Pro 二代还带来了全新功能“个性化空间音频”，在原有空间音频的基础上，加入对用户耳形的判断，因此空间音频可以是千人千面，每个人听到的不完全相同。</p><p></p><p>续航方面，新款 AirPods Pro 比上一代产品增加了 1.5 小时聆听时间，在主动降噪模式下，聆听时间最长可达 6 小时。无线充电盒可对耳机进行额外 4 次充电，这意味着用户可在主动降噪模式下享受最长可达 30 小时的聆听时间，比上一代整整多出 6 小时。</p><p></p><p>连接与操控方面，AirPods Pro 可轻松与所有 Apple 设备即时配对，同时 iOS 设置中新增的 AirPods 专属板块可帮助用户轻松访问和控制 AirPods 功能。</p><p></p><p>AirPods Pro 还配备了全新设计的抗汗抗水充电盒，并包含挂绳孔，让设备更加便于携带和寻找。精确查找功能让用户可以根据搭载 U1 芯片的 iPhone 提供的导航路线定位充电盒。充电盒内置扬声器可播放音量更大的声音，以帮助定位 AirPods Pro。</p><p></p><p>定价方面，AirPods Pro 二代国内定价 1899 元。</p><p></p><h4>Apple Watch Series 8：加入车祸检测功能</h4><p></p><p></p><p>本次发布的 Apple Watch Series 8 最大的亮点就是加入了车祸检测和紧急救援功能。</p><p></p><p>据苹果介绍，Apple Watch Series 8 的车祸检测功能可以有效的识别用户前部碰撞、追尾、侧面碰撞、翻滚等多种车祸情况，而在发生车祸的情况下，可以支持自动报警，并发送相关位置信息。</p><p></p><p>据悉，为实现车祸检测功能，苹果开发了一款先进的传感器融合算法，该演算法利用了三轴陀螺仪和动态范围最高的加速感应器。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5b/5b991b11ec1eef16974d7a8b275281a6.png\" /></p><p></p><p>为了创建该算法，苹果在专业碰撞测试实验室中，通过这些新型运动传感器收集常见的轿车在模拟车祸中的数据，包括正面碰撞、追尾碰撞、侧面碰撞及翻车。除运动数据外，车祸检测还使用气压计、GPS 和iPhone 上的麦克风捕获的数据，以检测代表发生重大车祸的独特模式。</p><p></p><p>此外，Apple Watch Series 8 还加入了温度传感器，分别位于屏幕下方以及表壳背面。通过温度传感器，Apple Watch Series 8 可以在夜间用户睡眠时以 5 秒一次的频率进行用户体温的检测，精确度可以到 0.1 度。并能根据体温更加精确的测算用户的排卵周期以及月经周期，对于女性的健康监测有了进一步的加强。</p><p></p><p>价格方面，Apple Watch Series 8 起售价为 399 美元（国行预计定价：2999 元人民币）。</p>",
    "publish_time": "2022-09-08 12:02:07",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "2022金融AI发展报告：这六大技术演进趋势最值得关注",
    "url": "https://www.infoq.cn/article/tdRsT42FbjJv3oRO5A5G",
    "summary": "<p>9月3日，InfoQ获悉，<a href=\"https://www.worldaic.com.cn/\">2022世界人工智能大会</a>\"·腾讯论坛上，腾讯发布了国内首份金融AI白皮书——《价值共生·2022金融AI发展研究报告》（以下简称“<a href=\"https://kdocs.cn/l/ccbyjNHDnDfp\">报告</a>\"”）。</p><p></p><p>查看报告全文：</p><p></p><p>https://kdocs.cn/l/ccbyjNHDnDfp</p><p></p><p>报告由北京金融科技产业联盟作为指导单位，由腾讯研究院与腾讯优图实验室、腾讯云、交通银行组成的联合课题组，联动腾讯内部及金融机构业务侧，对国内多个金融机构进行了近五个月的调研，并将调研成果与课题组对金融AI的发展趋势思考进行汇总，共同编制而成。</p><p></p><h3>金融AI发展全貌：政策、行业、趋势</h3><p></p><p></p><p>报告分为三个章节，从政策、行业、趋势三个层面出发，详细阐述了金融AI的发展环境与机遇、典型场景与案例、发展趋势与展望。</p><p></p><p>报告指出，近年来，人工智能技术正不断发展，并与金融业务深度融合，衍生出新业态、新场景，深刻影响金融业的发展模式，同时也为金融服务夯实“安全底座”。</p><p></p><p>在政策层面，政策引导金融与AI融合发展，金融AI迎来新阶段。</p><p></p><p>报告从国际政策、国内政策、行业政策三个方面，介绍了金融AI发展的环境和机遇。近年来，从国际到国内，从社会整体到金融行业，政策层面不断出台战略规划，推动人工智能与金融的融合，深化AI的金融应用。</p><p></p><p>从政策趋势上看，金融AI发展前景广阔。随着全社会数字化的推进，金融机构与供应链、产业链上下游数据的贯通，以及跨界合作的推进，人工智能将为金融机构的业务提供更多方面、更好效果的助力作用，赋能金融机构降本增效、提升服务体验。</p><p></p><p>在行业层面，AI赋能智能金融场景创新，金融服务能力不断提升。在AI与金融的加速融合下，催生出了智能营销、智能识别、智能理财、智能风控、智能客服等多种提升金融价值的场景。</p><p></p><p>报告通过上述五个场景和五个案例，展示了金融AI在我国目前发展现状。以交通银行融合了计算机视觉、机器学习、人工智能等新技术的“统一图像识别平台”为例，腾讯优图通过引入多模态技术提高信息抽取的泛化性能，助力解决非标准文档的OCR信息结构化提取，提高图像、单据识别率，推动业务效率以及用户体验提升。同时，该平台在信息录入等方面时长降低98.4%，且准确率高，能大量节约人力成本。</p><p></p><p>在趋势层面，金融AI创新前景广阔，行业持续向好发展。在金融机构数字化转型持续加速的背景下，报告的趋势篇从技术的深度、场景的广度、服务的可信度三方面，展望了金融AI未来发展的趋势。</p><p></p><p>首先，从技术方面来看，以语音识别技术、视觉技术、全真互联技术为代表的技术不断发展成熟，将催生更多新业态，驱动行业创新发展。</p><p></p><p>其次，从场景方面来看，在技术的深度不断加强的基础下，场景覆盖的广度也将不断向外拓展，实现全流程的数智化。</p><p></p><p>最后，在安全保障方面，零信任架构、隐私计算技术的持续升级，将夯实金融机构在数据融通领域的可信基础。</p><p></p><p>腾讯云副总裁、腾讯优图实验室总经理吴运声在报告发布现场表示：“人工智能和机器学习已经成为金融行业可持续发展和增长的关键。随着人工智能技术的不断发展，在金融行业，人工智能的应用经历了标准能力应用探索、细分业务领域垂直深化阶段后，已进入全面应用和持续创新的新阶段，人工智能将用于更广更多元化的产品形态和功能”。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/da/7e/da8c7d0b123b238cc0a1d473911c937e.jpeg\" /></p><p></p><p></p><h3>金融与AI融合凸显六大技术趋势</h3><p></p><p></p><p>腾讯研究院副院长杜晓宇认为，金融与科技融合经历了三个阶段：</p><p></p><p>第一个阶段，2005年开始的IT+金融阶段，这个阶段金融机构通过布局IT软硬件实现办公自动化、软件化以及面向客户的股票交易端、网上银行等应用。</p><p></p><p>第二个阶段，是互联网+金融的阶段，这个阶段包括移动支付利用互联网终端为客户提供服务的网商银行，这个阶段是通过金融业务的资产端、交易端、资金端的打通实现共享。</p><p></p><p>第三个阶段，2015年到现在开始的AI+金融的阶段，这个阶段通过人工智能一系列的技术改变传统金融的信息采集、风险评价、客户服务等环节，改善金融交易不对证性和安全性、效率性。</p><p></p><p>金融业务本质是风险管理，风险控制是金融行业核心业务，但现在传统金融一直存在信息不对称、效率低、速度慢、人力成本高的问题。还有像金融行业营业时间有限、客户量大、传统员工不能满足服务以及金融市场有海量的数据信息，人工决策能力也非常有限。</p><p></p><p>AI赋能金融的本质就是，依托人工智能的技术，大数据，也包括区块链、云计算、联邦学习等技术，解决实实在在行业存在的上述痛点，借助AI的技术金融业务实现智能风控，实时更新数据，让风险监控实时化。此外像AI服务能够形成7×24小时随时随地的服务并且能够实现千人千面精准化、个性化的服务，在业务经营决策上其实也能实现智能决策的支持，提升业务的效率。</p><p></p><p>现阶段，金融AI整个产业链包括三个层次：基础层、技术层、应用层基础层有AI的芯片、云服务、数据服务构成。</p><p></p><p>腾讯研究院副秘书长杨望在解读2022金融AI发展研究报告时提到，金融机构在人工智能技术方面的投入呈现增加趋势。他表示，中国银行业每年信息科技投入占到营收比重2%到4%之间，去年数据为2800亿人民币左右，用在人工智能层面上可能是十分之一，接近200亿的规模，整体化是逐年上升的趋势。各个金融机构人工智能和智能化的规划，包括内部的计划也在每年出都会有预算的定制，对于金融AI来说是很好的发展机遇。</p><p></p><p>杨望表示，从技术的视角看，金融与AI深度融合的过程中，整体呈现出以下六个方面的趋势：</p><p></p><p>第一，AI建设在金融机构会向平台化、体系化、系统化层面靠拢，随着金融数字化转型的发展，金融机构逐渐重视建设新一代科技的基础设施，特别是云计算、云原生技术理念也在金融机构得到实践。结合AI构建金融大脑，比如说金融机构内部的金融大脑所有的前中后台业务都将围绕金融大脑进行AI自驱使的运转，这是我们可以期待的趋势。</p><p></p><p>第二，随着语言、语音、语义相关技术的进步，运用场景会不断丰富多元化，为金融客户提供更丰富7×24小时的业务办理。</p><p></p><p>第三，图像视觉相关的技术将继续演进，特别是卫星遥感等像图像识别的应用将进入更多的金融机构。计算机视觉技术在金融业，特别是身份认证的环节的作用会越来越普遍。</p><p></p><p>第四，AI+RPA的技术将成为金融主方向，理解市场环境变化的认知能力提高。</p><p></p><p>第五，低代码、零代码的开发技术兴起，提供全新金融技术人员工作流程，促进金融领域各个项目快速落实，例如，很多金融机构都已经引用RPA的技术+人工智能，让各个岗位工作人员都能做低代码和零代码的工作，能够实现完全无代码的工作环境，简单而言所有工作人员都能像码农一样用无代码或者零代码的方式去实现业务的某个或多个功能。</p><p></p><p>第六，人工智能是全真互联中非常重要的技术，它能够帮助数字经济和实体经济融合发展，并且推动金融高质量发展，具体来说，就是通过实时音视频技术等，全真互联将加速渗透各个金融业务流程，加速金融普惠。</p><p></p><p>总结来说：</p><p></p><p>第一，数字员工能够替代人工的一些低效率工作。</p><p></p><p>第二，数字原生可以促进技术体系。</p><p></p><p>第三，远程银行能够跨省、跨地域地进行金融普惠业务。</p><p></p><p>第四，NFT这些技术能够帮助金融机构资产进行更好数字化的流转和价值提升。</p><p></p><p>从具体AI落地可以看到，智能风控投入占比很高，说明关注风险管理、提升风险识别能力仍就是整个金融AI技术的主要目标。</p><p></p><h3>2022年金融AI发展方向：从提升广度到提升深度、速度和温度</h3><p></p><p></p><p>杜晓宇判断，2022年之后，金融机构对IT解决方案的灵活性重视程度不断提升，混合云和云服务、自然语言处理、计算机视觉、知识图谱、机器学习等这些技术广泛应用到各个场景。</p><p></p><p>杜晓宇从四个方面，详细阐述了金融AI的发展趋势：</p><p></p><p>第一，金融AI在银证保不断加速的创新过程中，金融AI在更多的场景中实现。</p><p></p><p>第二，金融对我国发展是至关重要的阶段，其实AI在金融领域的实践，特别是在安全领域的实践，可以像其他行业不断发展。</p><p></p><p>第三，金融AI一直在释放人力成本，无论是银行、证券和保险金融AI都可以完成劳动密集型的一部分，通过金融AI提高金融的效率。</p><p></p><p>第四，作为信息密集型行业，金融AI不具有一定的溢出效应，现在很多企业仿照金融领域的AI应用布局，建立了AI+RPA以及低代码开发平台整合，开启了新的业务模式，可以看出金融业AI的发展，实际上也可以不断推进其他业务对AI的应用。</p><p></p><p>杜晓宇认为，过去二十年来，互联网技术和移动互联网技术的发展，为金融服务带来了广度上的提升，而从现在到未来，金融AI将为金融服务带来深度、速度特别是温度的提升。</p>",
    "publish_time": "2022-09-08 10:25:52",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "腾讯成立数字孪生部门背后有何深意？负责人详解技术与应用完整布局",
    "url": "https://www.infoq.cn/article/E5tCw3er7AaU99Zfwvfu",
    "summary": "<p></p><p>9月3日，在2022世界人工智能大会上·腾讯论坛上，腾讯数字孪生产品副总裁万超公布了腾讯在数字孪生领域的技术布局与应用实践。</p><p>&nbsp;</p><p>今年7月，腾讯单独成立了数字孪生产品部。此举可以看作是腾讯在数字孪生领域加大布局的一个信号。</p><p>&nbsp;</p><p>万超在接受InfoQ等媒体采访时，谈到了数字孪生产品部成立的背景。他表示，产业互联网都会经历实践的过程。对腾讯来说，数字孪生的需求也衍生于多个场景和应用中，基于此，腾讯会先布局模拟仿真、AI等技术，重点在交通、建筑等场景中做探索和尝试。随着这些技术的不断发展和产业应用经验的积累，腾讯认为，有必要将所有的力量整合在一起，因为数字孪生是一个技术的整合和结合体，大家的力量结合在一起更容易形成合力，这种合力的形成也是在过去经验的基础之上，因此形成了综合的部门。</p><p>&nbsp;</p><p>万超表示，数字孪生产品部建立后，未来的一个重要目标是，将打造一个孪生中台，更加对外开放、协同，形成孪生云的概念，集合更多合作伙伴的力量，在城市、建筑、交通、工业、能源领域等不同的领域里去做应用和产业实践。</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/6b/d9/6b172f2d0bdd509d1ea0c9903386yyd9.png\" /></p><p></p><p>腾讯数字孪生产品副总裁 万超</p><p>&nbsp;</p><p></p><h2>数字孪生是一种综合性的技术</h2><p></p><p>&nbsp;</p><p>数字孪生是这两年的技术热词。Gartner曾连续三年（2017—2019年）将数字孪生列为十大新兴技术之一。全球的科技公司都在布局数字孪生上表现出了空前的热情，尤其是互联网巨头公司，往往是感知到技术趋势最敏锐的。</p><p>&nbsp;</p><p>在腾讯论坛演讲现场，万超谈到了自己对数字孪生这一概念的理解。他认为，数字孪生更多的是把现实世界映射到了虚拟世界里，可能在虚拟世界中会有数字工厂、数字学校以及数字社区。在虚拟映射的过程当中，通过感知、计算，可以做到虚实融合，做到感知和预判。</p><p>&nbsp;</p><p>万超提到，数字孪生是一项跨学科、跨领域的综合性技术，面对的是各种各样的复杂系统。“数字孪生，本质上来讲很重要的是，需要对感知的灵敏性、对实时传输的实效性、高并发的承载性以及自主学习和深度学习的可延展性有一定的要求”。</p><p>&nbsp;</p><p>万超详细介绍了腾讯在数字孪生方面的技术布局。他表示，腾讯实时孪生技术源自于公司基于AI技术算力的不断提升，包括模拟仿真技术经验的积累，融合感知、计算和建模技术，将实体空间变为可计算的空间，对实体空间进行描述、预判、诊断和决策的过程。</p><p>&nbsp;</p><p>目前，腾讯在数字孪生方面已经构建起了体系化的技术，自研了诸多核心技术。其中，最核心、最重要的是云技术、图技术和AI技术，基于这三大底层能力加持，打造了云渲染、仿真模拟、智能计算、实时云控、实时通信（5G云化核心网）、三维建模、融合感知、物联平台、时空融合等前沿技术。在腾讯的数字孪生平台中，提供了数据处理能力、数据接入、治理、存储、云渲染、AI能力，还将打造交互、协同，包括低代码的能力。</p><p>&nbsp;</p><p></p><h3>交通、建筑、园区等是重点应用场景</h3><p></p><p>&nbsp;</p><p>万超认为，在数字孪生的发展当中，来源于行业应用的推动非常重要，这是数字孪生发展当中强有力的助推器。</p><p>&nbsp;</p><p>据悉，截至目前，腾讯数字孪生已经在交通、建筑、园区、城市、工业、水务等多个领域探索和实践。</p><p>&nbsp;</p><p>具体而言：</p><p>&nbsp;</p><p>在城市领域，面对城市规模的快速增长以及公共服务的多样供给，“一网通办”、“一网统管”等概念被提出，城市的精细化管理趋势更加明显，治理颗粒度更加细小。数字孪生可以参与城市的评估、规划、建设、管理和服务等多个环节，融合云、物联网、大数据、AI、GIS、BIM等能力，实现对城市的“诊断”和空间的“可计算”。</p><p>&nbsp;</p><p>在交通领域，腾讯通过毫米波雷达感知交通流信息，以车机和手机为载体，为用户推送服务信息，将交通信息实时孪生呈现，在可视条件不佳的天气情况下，为交通参与者提供及时和准确的交通引导服务。同时在自动驾驶测试环节，路侧感知设备实时感知交通状况，在云端生成孪生交通场景，实现虚实融合自动驾驶测试验证。</p><p>&nbsp;</p><p>在建筑领域，腾讯自2013年开始打造了微瓴产品，其能够把建筑内的机器人应用、电梯系统、门禁管理系统、安防监控系统、工位管理系统等做跨系统联动，在用户视角可以做到精准服务，在管理者视角实现基于空间的全域监控、异常事件的及时响应和体验优化的呈现与参考。数据显示，自2019年微瓴实现商业化以来，已经完成建设项目100+，接入设备100万+，设备类型1000+，交付应用150+。</p><p>&nbsp;</p><p>腾讯的数字孪生，一大特色是注重数据驱动的逻辑，通过在三维模型中注入历史数据、实时数据、行业数据，让模型更加具备泛化和计算的能力，逐步加强和构建动态场景的数字化。以交通场景下的“实时性”为例，腾讯利用5G云化核心网、4G/5G混合应用以及C-V2X等先进通信网络，实现孪生系统的低延时通信，通过云端加速，对高并发场景下海量数据的“实时”计算，延时仅为100毫秒，相当于人类的眨眼时间。</p><p>&nbsp;</p><p>通过推演、分析和预测最后要落到服务物理世界，实现干预和控制。万超表示，部门接下来的重点是希望不断将数字孪生技术向产业深处融合。</p><p>&nbsp;</p><p></p><h3>数字孪生已进入到爆发期</h3><p></p><p>&nbsp;</p><p>万超在采访中表示，在数实融合的大背景下，数字孪生作为复杂技术的代表，已经进入一个产业爆发期。</p><p>&nbsp;</p><p>这个“爆发期”由多方面因素促成，包括从思想，落地，实践等多方面已得到了证明。万超认为，一定要落到产业里去看这个问题，因为在产业实践的过程中，只有进入到产业，进入到行业才能感知到冷暖。例如，以城市建设为例，经过过去这么多年建设后，城市的建设已进入到成熟期，现在到了需要精细化管理的阶段。所谓精细化就是要通过数据驱动。此外，在建筑、工业生产等场景，如今也到了需要数据驱动的阶段，需深度挖掘在过往的建设中所积淀下来的数据，再进一步通过模型驱动，提高效率。延伸到各行业来看，对效率的需求是数字孪生的内在的驱动力。</p><p>&nbsp;</p>",
    "publish_time": "2022-09-08 14:41:17",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "AI的尽头在宇宙？AI已帮助天文学家找到22颗“星星”",
    "url": "https://www.infoq.cn/article/qRxYyvuT0yYTUzwtDVEb",
    "summary": "<p></p><p>9月3日，在2022世界人工智能大会（WAIC）上，腾讯宣布，与国家天文台共同开启对M31仙女座星系的射电信号处理，这也是天文界对该星系中脉冲星类致密天体的最深度完整探测。</p><p>&nbsp;</p><p>这场“AI+天文”的跨界合作始于2021年。时年7月，马化腾在去年的WAIC上透露，腾讯与国家天文台启动“探星计划”，用AI+云寻找脉冲星，提高探星效率。</p><p>&nbsp;</p><p>双方合作主要包括三个层面：（1）AI辅助脉冲星搜索效率提升；（2）AI辅助快速射电暴搜索；（3）AI辅助近密双星系统中脉冲星搜索。</p><p>&nbsp;</p><p>经过一年多的合作，腾讯首次对外披露了“探星计划”进展：</p><p>&nbsp;</p><p>腾讯云副总裁、腾讯优图实验室总经理吴运声表示，目前，优图AI天体探索方案已从巡天观测数据中寻找到超过22个脉冲星候选体。其中，包括在天体物理中具有较高观测研究价值的高速自转的毫秒脉冲星7颗，具有间歇辐射现象的年老脉冲星6颗。此外，优图动态谱AI模型还首次探测到了某磁陀星射电脉冲。</p><p>&nbsp;</p><p></p><h2>AI为“中国天眼”寻找脉冲星提速</h2><p></p><p>&nbsp;</p><p>脉冲星，因为周期性的发射电磁波，被称为宇宙中的“灯塔”、“最精确的时钟”，是宇宙演化的研究参考。</p><p>&nbsp;</p><p>脉冲星是在坍缩的超新星的残骸中发现的，它们有助于人们了解星体坍缩时到底发生了什么。脉冲星的本质是中子星，其具有在地面实验室无法实现的极端物理性质，是理想的天体物理实验室，对其进行研究，有望得到许多重大物理学问题的答案，例如黑洞问题。</p><p>&nbsp;</p><p>探星计划项目组成员，复旦大学计算机系副教授池明旻介绍，脉冲星会组成一个阵，通过阵可以发现黑洞。所有信号到了黑洞那都回不来，黑洞会导致空间的弯曲，通过脉冲星可以帮助寻找和发现这一现象。“在地面导航有GPS，未来在星际导航的时候，我们可能就要靠脉冲星了”。</p><p>&nbsp;</p><p>目前世界上最强大的脉冲星搜寻利器之一，便是有着“中国天眼”之称的FAST，它是世界上灵敏度最高的射电望远镜。</p><p>&nbsp;</p><p>在执行识别任务的过程中，FAST每天产生的数据规模相当庞大。池明旻介绍，FAST每周产生约500多TB的数据量，对这些数据的计算需要大量算力。在天文领域，搜寻脉冲星是对算力要求超高的研究方向之一。</p><p>&nbsp;</p><p>FAST在1周内产生的脉冲星观测数据，大约能得到3000多万张信号图，如果以人工肉眼处理，按照1张/秒的速度，在不吃不喝不休息的条件下，需要用一年的时间才能处理完。此外，信号图成像复杂，传统的图像处理和机器学习算法召回率低，加上跨界学习成本高，天文领域专家对AI模型的设计和使用不擅长，面临多种AI模型设计难点。</p><p>&nbsp;</p><p>而“云+AI”可以很好地应对这些问题。</p><p>&nbsp;</p><p>以往需要1年完成的工作量，AI只需要3天时间就可以完成。在算力方面，腾讯云为“探星计划”提供了约20个GPU的服务器，可每天24小时不间断地做计算。</p><p>&nbsp;</p><p>最新的数据显示，基于腾讯优图实验室的计算机视觉技术、腾讯云的计算及存储能力，用“云+AI”帮助中国天眼FAST处理每天接收到的庞大数据，并通过视觉AI分析找到脉冲星线索，在同等算力下处理效率提高了120倍。脉冲星的搜寻效率得到了显著提升。</p><p>&nbsp;</p><p></p><h2>多项自研AI技术创新</h2><p></p><p>&nbsp;</p><p></p><h3>数据预处理提速</h3><p></p><p>&nbsp;</p><p>据介绍，AI辅助FAST探索脉冲星遵循如下技术原理：</p><p>&nbsp;</p><p>FAST观测到信号→经过一系列天文和物理学方法处理→得到适合计算机视觉领域处理的图像数据→对信号进行判别→筛选比对图像数据→留下少部分样本→人工再次对少部分样本进行比对确认。</p><p>&nbsp;</p><p>天文数据在经过AI处理前，需要进行数预处理。</p><p>&nbsp;</p><p>数据预处理，主要是将FAST观测到的天文信号转化成图像的过程。相比信号，人能够最直观的可视和感知到图像。通过一系列天文领域专门的处理方法，包括快速傅立叶变换、语音信号处理、消色散等，对数据进行预处理，例如，脉冲星有对应的频率、时间、弧度等三维信号，将这些三维信号转变成两维的图像信号，如时间上位、频率上位等二维图，再通过看图来确定到底是不是脉冲星。</p><p>&nbsp;</p><p>预处理环节是天文领域的难点。这一方面是因为，信号从外太空过来，经过了星际的介质及各种噪声干扰，信号过来从低频到高频，低频到达较慢，望远镜接收入时信号有色散延迟，加上</p><p>脉冲星有周期性，色散量不定，脉冲周期也不定，这就导致了首次盲搜的范围非常之大。</p><p>&nbsp;</p><p>对预处理环节进行加速，是腾讯优图实验室在探星计划中所承担的核心任务。预处理对计算有着极高的要求，腾讯优图为此提供了强大的算力支持。</p><p>&nbsp;</p><p>汪铖杰团队统计发现，FAST信号收到后转化成图，要搜索3000万张图-1亿张图，才能找到1颗脉冲星，如此广泛的搜索范围对数据预处理速度提出了更高的要求。腾讯优图实验室的视觉AI算法帮助了加速了这一过程，通过将原先的预处理算法，进行重复性冗余计算的消除等方式，将预处理过程提速。</p><p>&nbsp;</p><p>池明旻提到了一组对比数据，在2017年时，FAST探索任务的数据预处理过程大约花费15分钟，而现在应用上AI算法提速后，数据预处理只需不到1分钟即可完成。</p><p></p><p></p><h3>多模态+半监督学习的AI解决方案</h3><p></p><p>&nbsp;</p><p>人工智能的算法设计也是一大难点。</p><p>&nbsp;</p><p>这是因为，天文信号是多元的，包括时间上位图、频率上位图、色散图等。天文信号具有时间周期性，从频率、色散、向位等角度看，信息并不相同，例如如果从向位的角度看，脉冲星不明显，但从色散度的角度看会相对明显。</p><p>&nbsp;</p><p>此外，作为世界最大单口径的射电望远镜，FAST的工作模式和精度都与其他望远镜不同。FAST有19个波束，信号之间互有联系，在人工智能算法设计时，针对这些信号的处理，需要多元信号融合、多波束信号融合。</p><p>&nbsp;</p><p>针对上述问题，腾讯优图特别设计了一种基于多模态+半监督学习的AI解决方案。</p><p>&nbsp;</p><p>多模态是指，基于多信息输入，综合评价天文信号到底是不是脉冲星，多维输入包含了更多的信息和可行性，因此，多模态的解决方案要比基于信号的直接分析效果更佳。</p><p>&nbsp;</p><p>半监督学习背后的设计逻辑在于，AI算法对数据量需求庞大，FAST观测到的天文信号转化成的数千万到数亿张图，如果全依赖天文工作者人工标注，显然不现实。而通过半监督的解决方案，大量未经标注的数据也可以用于模型训练和学习，这样一来，算法学习的样本量将比人工标注时显著增加，深度学习更加充分，可以将模型做得更深，特征提取更充分，识别能力也会得到显著提升。</p><p>&nbsp;</p><p>实践验证，多模态+半监督学习的AI解决方案，相比国家天文台原有的AI筛选模型具有更高的召回率，且误报率下降了98%。</p><p>&nbsp;</p><p></p><h3>小样本学习</h3><p></p><p>&nbsp;</p><p>数据是人工智能算法的“燃料”。AI发展多年以来，解决很多场景的大部分问题都是基于对大数据的学习。但在天文领域，尽管处理的数据高达百亿规模，但实际上可供学习的有效样本量还很少。在探星计划中，目前可供用于学习的脉冲星的量级大约在100个左右，如何在这个量级下取得好的学习效果，是一个难题。</p><p>&nbsp;</p><p>小样本学习是近年来应对数据受限挑战的一个热门研究范式。</p><p>&nbsp;</p><p>汪铖杰介绍，合成样本有多种方式。例如通过构造一个对的模式去学习，一个脉冲星加上一个位置信号去判断后者是否与脉冲星有关联性。数据扩增也是AI领域一种较常见的方式，例如在常规的脉冲星上做位移偏移或者加上宇宙仿真的噪音的叠加、变化等。另一种逐渐流行起来的方式是GAN技术，即通过对抗式生成的学习方法，学习一些样本后再生成一些样本用于学习，这种方法在数据量较小的情况下比较有效。</p><p>&nbsp;</p><p></p><h2>“入地”为“上天”作支撑，探索AI和Science结合的新范式</h2><p></p><p>&nbsp;</p><p>汪铖杰表示，对腾讯优图而言，在寻找到22颗脉冲星之外，探星计划的另一个重要的意义在于，探索出了AI和基础学科结合的模式。</p><p>&nbsp;</p><p>“在做FAST探星项目前，我们不了解天文相关的知识，也不确定AI怎么能够跟基础科学衔接、配合、协作，现在经过这个项目，我们就有这个底气去做类似的项目，现在也有一些项目开始推进了”。在汪铖杰看来，AI for Science 就是在探索AI未知能力的边界。</p><p>&nbsp;</p><p>“探星计划”是腾讯优图实验室总负责人吴运声所提出“AI普适化”愿景的重要实现环节之一，“AI普适化”旨在让AI技术能够具备在各行各业里应用和落地的能力，且能够实实在在地为某一个行业带来实质性的变化。</p><p>&nbsp;</p><p>在此次WAIC上，腾讯还对外展示了云+AI在工业、金融、传媒、能源、交通等多个场景下的创新实践。以在工业领域为例，吴运声表示，腾讯的工业AI基础技术集中在工业成像、基础算法、高效学习以及仿真生成四个方面，通过这四部分能力已打造超过10个细分领域外观检测的解决方案。结合规模化落地经验，腾讯云推出了工业质检训练平台，其面向工业外观缺陷检测场景，零基础工程师也能轻松使用，拥有算法精准、部署灵活、简单易用、功能完备的特点，降低工业AI质检算法落地的技术门槛。</p><p>&nbsp;</p><p>而正是基于在上述“入地”的项目中的实践打下的基础，才让AI“上天”探星具备了更多可能性。</p><p>&nbsp;</p><p>“天文和工业，表面上看好像完全没有联系，但实际上在这些场景里，AI底层技术是相通的”，汪铖杰表示，“FAST探星计划中应用的很多技术，源于腾讯优图在工业AI质检场景的很多算法的研究和积累，如检测任务、分类模型、小样本学习、异常检测等”。</p><p>&nbsp;</p>",
    "publish_time": "2022-09-08 14:49:53",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]