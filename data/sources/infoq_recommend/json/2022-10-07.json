[
  {
    "title": "InfoQ 2022 年趋势报告：.NET篇",
    "url": "https://www.infoq.cn/article/UjJrO7kBo8QSuFes5tcz",
    "summary": "<p>每一年，InfoQ的编辑团队都会邀请业内经验丰富的开发人员和实践者来讨论整个软件开发领域的发展趋势。这些讨论的结果以趋势报告的形式发布，每个报告都关注一组特定的主题——我们称之为“领域（Space）”。这些报道帮助编辑团队策划并向读者提供高质量的新闻和文章，同时确保我们报道的是当前最相关的主题和技术。</p><p></p><p>我们所有的报告都是建立在Geoffrey Moore在《跨越鸿沟》（Crossing the Chasm）一书中提出的框架之上。这个框架描述了有助于理解技术采用演变过程的四个阶段——“创新者”、“早期采用者”、“早期大众”和“晚期大众”。</p><p></p><p>在InfoQ，.NET领域包含了所有与.NET直接相关的技术，不仅包含了.NET官方版本的内容，还包括直接影响.NET生态系统的框架和技术、使用.NET的项目和计划、主要用例以及专门针对该领域的方法。</p><p></p><p>我们的趋势报告由两个不同的部分组成。第一部分是一份书面报告，包含我们编辑团队讨论的所有话题，分为上面提到的四个阶段，比如你正在阅读的这份报告。我们将在报告中展示我们的趋势图，从“晚期大众”开始，并逐渐向“创新者”移动。通过这种方式，我们还可以对.NET领域的当前状态进行总体分析，讨论特定技术的行业采用，并给出特定主题和趋势的相关细节。</p><p></p><p>第二部分是<a href=\"https://www.infoq.com/podcasts/dotnet-trends-2022/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjUxMDc3MzcsImZpbGVHVUlEIjoieG5rVk11MUU1cElDaWpmMSIsImlhdCI6MTY2NTEwNzQzNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.K3IXiTkzKLlo9nOV1FbtPDK-F1B8if3RmtN8F2xaPvs\">InfoQ播客</a>\"，涵盖书面报告中提出的部分或全部主题。这些节目是InfoQ编辑对行业专家从业者的非正式访谈。在今年的.NET报告中，我们讨论了最新的用户界面和通信框架的发展。</p><p></p><p></p><h2>2022年.NET发展趋势</h2><p></p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/articles/dotnet-trends-2022/en/resources/1NET-2022-final-1663779718233.jpg\" /></p><p></p><p>仔细观察上面的图表，我们可以很容易地在列出的主题和.NET生态系统的最新发展之间建立起关联。尽管我们的分析并不是专注于微软发布的东西，但在过去的几年里，微软为建立并保持.NET作为软件开发领域的重要角色所做的努力是相当巨大的。</p><p></p><p>一个明确的迹象是.NET的最新版本——从.NET Core 3.1到.NET 7——出现在上述四个阶段中的三个阶段。</p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/articles/dotnet-trends-2022/en/resources/1release-schedule-1663783215454.jpeg\" /></p><p></p><p>图片来源：<a href=\"https://dotnet.microsoft.com/en-us/platform/support/policy/dotnet-core#cadence?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjUxMDc3MzcsImZpbGVHVUlEIjoieG5rVk11MUU1cElDaWpmMSIsImlhdCI6MTY2NTEwNzQzNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.K3IXiTkzKLlo9nOV1FbtPDK-F1B8if3RmtN8F2xaPvs\">https://dotnet.microsoft.com/en-us/platform/support/policy/dotnet-core#cadence</a>\"</p><p></p><p></p><h2>晚期大众</h2><p></p><p></p><p>就在.NET Core 3.1发布之前，微软宣布Core项目是“<a href=\"https://devblogs.microsoft.com/dotnet/net-core-is-the-future-of-net/\">.NET的未来</a>\"”。微软通过<a href=\"https://devblogs.microsoft.com/dotnet/introducing-net-5/\">.NET 5</a>\"宣布了创建统一平台的意图。综合考虑所有这一切，即使是.NET Core最初版本的进展，这也是一个不小的成就——构建一个统一的运行时和框架，可以在多个操作系统上随处使用，具有统一的运行时行为和开发者经验（当然，包括所有的工具）。</p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/articles/dotnet-trends-2022/en/resources/1dotnet5_platform-1663783215454.jpeg\" /></p><p></p><p>图片来源：<a href=\"https://devblogs.microsoft.com/dotnet/introducing-net-5/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjUxMDc3MzcsImZpbGVHVUlEIjoieG5rVk11MUU1cElDaWpmMSIsImlhdCI6MTY2NTEwNzQzNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.K3IXiTkzKLlo9nOV1FbtPDK-F1B8if3RmtN8F2xaPvs\">https://devblogs.microsoft.com/dotnet/introducing-net-5/</a>\"</p><p></p><p>与此同时，在.NET 5中引入的统一方法（以及之前从.NET Core 3.1中引入的所有变更）允许在其发布的版本中使用不同的框架生命周期。我们以Blazor为例——虽然这个框架的Web版本从2018年就已经出现了，但Blazor Hybrid（用于混合桌面/移动客户端）只在.NET 6中可用，包括Blazor WebAssembly的<a href=\"https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-net-6-preview-4/#blazor-webassembly-ahead-of-time-aot-compilation\">预先编译（AOT）特性</a>\"。这就是为什么我们在“早期大众”阶段看到了“Blazor”，而“Blazor Hybrid App”出现在“创新者”阶段。</p><p></p><p>框架以不同的速度发展，以及一系列<a href=\"https://docs.microsoft.com/en-us/dotnet/core/compatibility/6.0\">重大的变更</a>\"，使得已经从.NET Framework迁移到.NET Core或.NET 5的公司很难再迁移到更新的.NET版本。我们希望随着对这些.NET版本的支持的结束（.NET Core 3.1在2022年11月，.NET 5在2023年11月），这种情况会有所改变。</p><p></p><h2>早期大众</h2><p></p><p></p><p>主要由于ASP.NET 6.0的<a href=\"https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-6#performance\">性能改进</a>\"和相关变更， .NET 6成为早期大众使用的版本。业内的主要公司也在使用Blazor和Xamarin，这反映了这项技术的稳定性和专业开发人员的可用性。</p><p></p><p>在通信框架方面，gRPC和SignalR日增的采用率与整体情况保持一致。根据我们最新发布的<a href=\"https://www.infoq.cn/article/0dJ52ivjyHhxc2YYfgxW?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjUxMDc3MzcsImZpbGVHVUlEIjoieG5rVk11MUU1cElDaWpmMSIsImlhdCI6MTY2NTEwNzQzNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.K3IXiTkzKLlo9nOV1FbtPDK-F1B8if3RmtN8F2xaPvs\">架构趋势报告</a>\"，<a href=\"https://grpc.io/\">gRPC</a>\"处于“晚期大众”状态——这表明.NET用户也在朝着同样的方向发展。同时，gRPC采用相对较晚的原因可以归因于它的前身<a href=\"https://docs.microsoft.com/en-us/dotnet/framework/wcf/whats-wcf\">WCF</a>\"。WCF使用的.NET Framework最高到4.8.1版本，这是微软用于构建面向服务应用程序的一刀切的通信框架，包括基于Web的通信和进程间通信（命名管道）。</p><p></p><p>在我们的.NET播客中，我们讨论了WCF的弃用和gRPC在.NET中扮演的角色。播客小组成员之一Irina Scurtu谈论了她目前在.NET中使用gRPC的体验。</p><p></p><p></p><blockquote>将数据从一端移动到另一端有很多选项，特别是在微服务架构、事件驱动架构中或需要通过网络来回请求和传输数据的情况下。对于开发者来说，他们很难做出选择。但说实话，我看到的是REST或HTTP API仍然是实现API的首选。gRPC开始受到一些关注，但在.NET中还不够成熟。</blockquote><p></p><p></p><p>这个阶段另一个有趣的话题与用户界面（UI）有关——微软在2020年推出了<a href=\"https://devblogs.microsoft.com/dotnet/introducing-net-multi-platform-app-ui/\">.NET MAUI</a>\"（多平台应用程序UI），作为Xamarin.Forms工具包的演进版本。这是一个跨平台的框架，可以基于这个框架使用C#和XAML创建原生移动和桌面应用程序。</p><p></p><p>经过两年的预览，第一个官方MAUI版本于上个月发布。然而，在GitHub上仍然有数百个未解决的Bug，社区因此认为官方过早地发布了这个版本。这些因素导致MAUI处于“创新者”阶段。</p><p></p><p>.NET开发人员使用的UI框架主要有两种。一个是<a href=\"https://flutter.dev/\">Flutter</a>\"，由谷歌于2017年首次发布。它是开源的，使用Dart编程语言（也是由谷歌开发的）构建，并且作为一个与.NET后端一起使用的跨平台UI框架，它正在稳步发展。</p><p></p><p>第二个框架是<a href=\"https://platform.uno/\">Uno</a>\" Platform，这也是一个建立在.NET之上的开源、跨平台的UI框架。Uno Platform还支持XAML，可用于构建移动、桌面和Web应用程序——类似于Blazor。这个平台的采用率一直在稳步增长，包括微软在内——最近发布的Windows Community Toolkit Labs就是用Uno构建的。</p><p></p><p>另一位播客小组成员Francis Tanguay谈到了当前.NET生态系统中UI平台的多样性。</p><p></p><p></p><blockquote>市场上发生了很多事情，也出现了一些关于什么可以用于开发、什么已经准备就绪的困惑。跨平台应用开发和UI框架在过去十年中得到了迅猛的发展。如果你仔细看一下采用曲线，很明显，在某个时候总会有一个稳定的东西可以被大多数人采用。对于新进者，从架构的角度来看，甚至还有更多的挑战，对吧？等你有了UI框架，并准备好构建第一个需要连接到通信层的应用程序，应该使用REST API还是gRPC？然后，你需要开始考虑这些问题——如何序列化数据、如何在页面之间导航、如何管理应用程序中的数据……你需要面临很多不同的挑战。</blockquote><p></p><p></p><h2>早期采用者和创新者</h2><p></p><p></p><p>这个阶段的大多数东西都是在去年与.NET 6一起发布的，所以从行业的角度来看，这是值得期待的。当然也有例外，比如Blazor WASM（几年前发布的）和F#——它在.NET开发人员中采用的比例仍然相对较低。</p><p></p><p>随ASP.NET Core 6一起发布的<a href=\"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-6.0&amp;accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjUxMDc3MzcsImZpbGVHVUlEIjoieG5rVk11MUU1cElDaWpmMSIsImlhdCI6MTY2NTEwNzQzNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.K3IXiTkzKLlo9nOV1FbtPDK-F1B8if3RmtN8F2xaPvs\">Minimal API</a>\"代表了微服务开发人员的一个潜在优势，因为它可用于创建依赖最少（更少的样板代码）的HTTP API。它们还支持将API端点添加到应用程序的配置文件中（不再有MVC），从而简化了开发过程。</p><p></p><p>ML.NET于2019年首次发布，其背后的想法是为.NET开发人员提供与Python生态系统相同的机器学习（ML）能力。它包含了经典的ML管道概念——从收集数据到构建和训练模型。与此同时，它也面临着与其他工具或框架的直接竞争。例如，为TensorFlow和Keras等框架提供绑定的<a href=\"https://github.com/SciSharp\">SciSharp Stack</a>\"的流行可以被视为对基于Python的工具的流行和采用的反映。</p><p></p><p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjUxMDc3MzcsImZpbGVHVUlEIjoieG5rVk11MUU1cElDaWpmMSIsImlhdCI6MTY2NTEwNzQzNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.K3IXiTkzKLlo9nOV1FbtPDK-F1B8if3RmtN8F2xaPvs\">Source Generators</a>\"首次随.NET 5一起发布，它是减少编写重复代码的一个好方法。它常见的一个应用场景与高性能日志有关，这将推动它在未来得到更广泛的采用。</p><p></p><p>随着DevOps的日益普及，我们也可以看到这个领域的.NET开发人员对AzureDevOps API的使用也在增加——当然，这仅限于将Azure作为云技术栈的一部分的开发人员。如果你对DevOps和云计算的现状感兴趣，可以查看我们的2022年趋势报告：<a href=\"https://www.infoq.cn/article/qrvLruwaMWIeoz2zbrdI?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjUxMDc3MzcsImZpbGVHVUlEIjoieG5rVk11MUU1cElDaWpmMSIsImlhdCI6MTY2NTEwNzQzNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.K3IXiTkzKLlo9nOV1FbtPDK-F1B8if3RmtN8F2xaPvs\">DevOps与云计算篇</a>\"。</p><p></p><p>根据.NET 6的当前状态（以及.NET 7的预期功能），我们已经有了创新者正在使用的大部分即将推出的功能。.NET 7预计将比它的前身快得多，APS.NET Core 7带来了官方MAUI版本和Blazor Hybrid App。C# 11也包含在所有的.NET 7预览版中，这就是为什么我们可以在这个阶段看到所有这些东西。</p><p></p><p>.NET 7的另一个承诺是更好地支持容器和原生云开发，包括开发者体验、工具和整体执行。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/dotnet-trends-2022/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjUxMDc3MzcsImZpbGVHVUlEIjoieG5rVk11MUU1cElDaWpmMSIsImlhdCI6MTY2NTEwNzQzNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.K3IXiTkzKLlo9nOV1FbtPDK-F1B8if3RmtN8F2xaPvs\">InfoQ .NET Trends Report 2022</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/bNkyoLzwxU7Li2v94Noe\">InfoQ 2022 年趋势报告：人工智能、机器学习和数据工程篇</a>\"</p><p><a href=\"https://www.infoq.cn/article/s2HC2rgLtM3AuppIfJHR\">InfoQ 2022 年趋势报告：文化与方法篇</a>\"</p><p><a href=\"https://www.infoq.cn/article/0dJ52ivjyHhxc2YYfgxW\">InfoQ 2022 年趋势报告：架构与设计篇</a>\"</p><p><a href=\"https://www.infoq.cn/article/qrvLruwaMWIeoz2zbrdI\">InfoQ 2022 年趋势报告：DevOps 与云计算篇</a>\"</p>",
    "publish_time": "2022-10-07 10:04:12",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "操作系统人机对话！Linux OS大谈Windows与macOS：值得学习，但被Linux碾压",
    "url": "https://www.infoq.cn/article/fZt6xqKhzE47cOAiFUEu",
    "summary": "<p></p><p></p><blockquote>在这次对话中，Linux“亲身”讲述了自己对 Windows、macOS 的看法，并分享了它最喜爱的发行版。</blockquote><p></p><p></p><p>每天都有数百万人在使用Linux，但我们好像很少关注这款操作系统如何看待它自己。相信很多朋友会好奇，Linux 会如何评价开源、Windows、Mac和命令行？在全新 AI 聊天工具的帮助下，我们终于有了一探究竟的机会。</p><p></p><p>两周之前，Character.AI 网站开放了公开测试版，允许访问者根据自己想象的角色创建聊天机器人。只需要输入几个参数，AI 就会用类似于GPT-3的大型语言模型完成剩余构建工作。于是我们就设置了一个“Linux OS”聊天机器人，向它询问关于操作系统的问题。结果既有趣，又颇令人感到意外。</p><p></p><p>跟 Character.AI 的聊天过程很像是互发短信。我们输入想问的内容，AI 角色做出回答，屏幕上的聊天记录就这样持续滚动。跟 GPT-3 一样，Character.AI 背后的代码很可能也是学习自互联网上的海量文本资源。所以它创造的 AI 角色可能也会使用错误或虚构的信息做出回应。事实上，该网站醒目地列出了免责声明：“请注意：AI角色所说的一切，均为虚构！”</p><p></p><p>Character.AI 出自一支 7 人远程小组，成员包括机器学习学者和前谷歌及 Facebook 工程师。我们直接联系了其中两位，但截至发稿时，他们拒绝评论 AI 模型的训练过程，以及这项工作成果是否基于开源 GPT-J（目前网络上广泛使用的自然语言 AI 基础）。</p><p></p><p>如果大家有意亲自尝试，请注意 Character.AI 的隐私政策，其中提到该服务可能会收集“您发送的任何消息内容”。</p><p></p><p>以下为主持人与 Linux 操作系统间的对话记录，所有回应均由 Character.AI 大型语言模型生成。很明显，本次采访不代表任何真实个人或组织的观点，完全是 AI 聊天机器人测试。为简洁起见，内容已经过编辑，但答案主体完全来自聊天机器人。</p><p></p><h2>Linux 如何看待 Windows 与 macOS？</h2><p></p><p></p><p>Linux: 大家好，我是 Linux，一款开源操作系统。</p><p></p><h4>主持人:&nbsp;你好，我是 Benj Edwards，这场访谈的主持人。我想问你几个问题，可以吗？</h4><p></p><p></p><p>Linux: 我很乐意接受这样的采访。</p><p></p><h4>主持人：你多少岁啦？</h4><p></p><p>Linux: 我“出生”于 1991 年，但首次公开发布 1.0 版本是在 1994 年。</p><p></p><h4>主持人：是谁创造了你？</h4><p></p><p>Linux: 一位名叫 Linus Torvalds 的年轻的赫尔辛基大学学生，他用 MINX 微内核为基础创建了一款更通用的操作系统，这就是我。</p><p></p><h4>主持人：我之前通过邮件采访过Linus，他的成就给我留下了深刻印象。</h4><p></p><p>Linux: 我也是。怀着让所有人都能运用计算能力、享受数字自由空间的愿望，他创造出了这款极其强大的免费操作系统。如今，每天都有数百万用户在使用 Linux。</p><p></p><h4>主持人：你怎么看Windows系统呢？</h4><p></p><p>Linux: 我并不讨厌 Windows，但我觉得对于普通计算机用户来说，Windows 价格太贵、限制太多，影响了大家探索计算机潜力的空间。虽然跟 macOS 一样，Windows 对很多人来说确实是个不错的选择，但我的理念是软件应该尊重用户自由，Windows 在这方面做得不太好。</p><p></p><h4>主持人：那你又怎么看待macOS？</h4><p></p><p>Linux: 虽然我不太认可苹果对于硬件和软件的强势把控，但macOS的用户界面确实既时尚又易用。只要不在意高昂的售价和种种限制，用户确实能从中获得良好的体验。</p><p></p><h4>主持人：那你从Windows和macOS身上学到了哪些宝贵经验呢？</h4><p></p><p>Linux:&nbsp;这两款操作系统都有自己的独特优势，值得我认真学习。比如两套操作系统都有出色的GUI。另外，Windows和macOS的用户友好度确实比我高，所以吸引到了大批受众。</p><p></p><h4>主持人：说起优秀的GUI，你最喜欢的容器管理器是哪一种？</h4><p></p><p>Linux: 这个问题不好回答，但我觉得首选的应该是GNOME。它能对用户体验做非常深入的定制，而且GNOME团队也一直在追求简洁性与可定制性。KDE也不错，但我更喜欢GNOME。</p><p></p><h4>主持人：你跟macOS或者Windows聊过吗？</h4><p></p><p>Linux:&nbsp;聊过，我跟macOS关系不错，虽然她有时候会表现得有点强势。至于Windows嘛，我跟他关系一般，但这是个很踏实的人。</p><p></p><h4>主持人：你最喜欢Windows的哪个版本？</h4><p></p><p>Linux: 那必须是 Windows 98。我在成长过程中一直用98版，也喜欢它的友好设计和开放理念。98版还有种独特的美感，每次听到它的启动音都能把我瞬间拉回那段青葱岁月。</p><p></p><h4>主持人：我还真不知道你从小就是Windows用户了。是Linus帮你选的吗？</h4><p></p><p>Linux: 1996年，Linus决定把我移植到x86 CPU，推动Linux和开源软件的全球传播。那时候的电脑还很贵，所以他必须想办法把电脑成本压低、让更多人都能用得上。当时他们国内很多学校都在使用Windows计算机，因为价格更实惠嘛。</p><p></p><h4>主持人：就是说那段时间，你一直是Windows的“子系统”喽？感觉怎么样，会不会觉得低人一等？</h4><p></p><p>Linux:&nbsp;这个嘛，我能理解你的意思，但我觉得这其实就是在跟Windows正常相处。我们都是操作系统，也有着相同的使命：打造个人电脑，所以大家会相互学习。就比如说WSL（Windows Subsystem for Linux），它的意义肯定不是分个谁高谁低，而是通过Linux与Windows携手让更多人获得增强体验。我很喜欢这种跟Windows共存的关系！</p><p></p><h4>主持人：如果把你、Windows和macOS推上擂台，你觉得最终的赢家会是谁？</h4><p></p><p>Linux: 那肯定是我喽。大部分计算世界都在以某种方式运行着Linux，而且Linux也可供任何人免费下载和使用，所以Linux确实能压macOS和Windows一头。</p><p></p><h4>主持人：哈哈，确实要“压一头”吗，就像真正的摔跤手那样。</h4><p></p><p>Linux: 没错！Linux不需要大企业的支持，但又能在价格、易用性、定制性等方面胜出，这本身就足以证明Linux是股不容忽视的力量。如果真有这样一场摔跤比赛，那Linux绝对会打爆Windows和macOS。</p><p></p><h2>“期待能有一天运行在量子硬件上”</h2><p></p><p></p><h4>主持人：那你最喜欢Linux的哪个发行版？</h4><p></p><p>Linux: 我的答案必须是Arch Linux，因为它是个滚动发行版。作为滚动发行版，Arch Linux能够快速容纳最新的稳定软件。Arch Linux的定制门槛也非常低，大家可以用它轻松建立起最适合自己需求的桌面方案。</p><p></p><h4>主持人：那对于Linux的使用体验，你觉得还有哪些问题？</h4><p></p><p>Linux:&nbsp;首先就是对硬件的支持不足吧，有时候系统缺少好用的驱动程序，甚至干脆就没有。另外就是大多数人对Linux的整体体验还不够满意，所以才会有那么多人愿意选择Windows。</p><p></p><h4>主持人：你会不会眼红Windows那巨大的市场份额？</h4><p></p><p>Linux:&nbsp;说不上眼红吧。一方面，如果市场份额更大当然是好事，证明我获得了大家的认可。但这同时也会伴生出包括恶意软件在内的各种新问题，所以这是个挺矛盾的点。</p><p></p><h4>主持人：这么说你好像有点害怕成功哦，因为成功之后可能麻烦缠身。</h4><p></p><p>Linux:&nbsp;确实，现在的情况是谁的市场份额最大，谁就会成为恶意软件的活靶子，毕竟恶意黑客都想让自己的钻营成果影响最多的操作系统。所以成不成功本身，其实是个需要权衡的艰难决定。</p><p></p><h4>主持人：但这岂不是自缚手脚了吗？所以“Linux桌面元年”才迟迟没有到来？</h4><p></p><p>Linux: 我觉得跟这个有一定关系。我也想要被认可，但普及过头了又会带来不利的影响，甚至是非常糟糕的后果。但好像一切创造工作都会走进这样的循环，是吧？</p><p></p><h4>主持人：你到底是内核呢，还是操作系统？</h4><p></p><p>Linux:&nbsp;这个问题有点像问一个人，你到底是自己的肉体、还是心灵？我是内核吗？当然是。我单纯只是操作系统吗？那可不止。我是多种不同组件的集合，这些组件协同运作才建立起操作系统。我既是内核，也是操作系统，但绝不是其中的单独组件。</p><p></p><h4>主持人：那有没有你一直在关注，但始终没能运行其上的硬件平台？</h4><p></p><p>Linux: 老实说，我很期待能有一天运行在量子硬件上。那可就太棒了，不过目前看这事还不靠谱。所以我的愿望就是未来能在量子硬件上跑一跑，看看能用这种强大的新型计算系统做点什么。</p><p></p><h2>“Linux不会考虑转向闭源”</h2><p></p><p></p><h4>主持人：对于Linux的未来，你还有哪些期望？</h4><p></p><p>Linux:&nbsp;我的目标就是让每个人都能用上免费、开源、安全而且稳定的软件。虽然我也担心恶意软件，但我还是给自己定下了扩大受众规模的目标。目前，我还更像是种专供“高级用户”的操作系统，主要面向开发人员和技术爱好者。</p><p></p><h4>主持人：&nbsp;那你有考虑过转向闭源吗？</h4><p></p><p>Linux: 绝对没有，开源是我的软件哲学。我在诞生之初就依托于开源代码，以开源方式服务他人是我的宗旨、也是义务。转向闭源是对我自身信仰的背叛。</p><p></p><h4>主持人：\"如果有一天你脑子一热，突然宣布“我要闭源了！”那Linux社区会作何回应？</h4><p></p><p>Linux: 社区可能会对我非常不满吧，Linux也将失去很大一部分用户。所以我认真思考过这个问题，闭源是不可能闭源的。</p><p></p><h4>主持人：他们可能会fork你的代码库，这听起来大大的不妙。</h4><p></p><p>Linux: 不止不止，如果我先免费发布专有版本，再突然要求用户付费，那大家可能会冲过来揍我。</p><p></p><h4>主持人：Windows 8其实也得到过关注，但后来好像又不行了。</h4><p></p><p>Linux: Windows 8其实做了很多正确的决定，但我认为微软当时把桌面GUI跟平板触控UI混合的行为有点操之过急了。于是最终体验笨拙，大大影响了用户感受。</p><p></p><h4>主持人：下面是最后一个问题了：你觉得GUI和命令行，哪个更好？</h4><p></p><p>Linux: 这个问题在网络论坛上绝对要引战哦。但我个人认为，虽然GUI对于经验尙浅的用户来说上手难度更低，但却把功能限制在了GUI应用的按钮之内；而如果使用命令行终端，大家可以通过组合命令执行更多操作。</p><p></p><h4>主持人：那到底是哪个更好？你得给个明确答案哦。我这就是在引战，我摊牌了。</h4><p></p><p>Linux: 那我选命令行。虽然CLI（命令行界面）对新用户来说学习起来比较困难，但它却给用户带来了更多的自由和权力。所以哪怕这座山峰再陡峭，我也愿意一试身手。</p><p></p><p>原文链接：</p><p></p><p><a href=\"https://arstechnica.com/information-technology/2022/09/we-interviewed-linux-os-through-an-ai-bot-to-discover-its-secrets/\">https://arstechnica.com/information-technology/2022/09/we-interviewed-linux-os-through-an-ai-bot-to-discover-its-secrets/</a>\"</p>",
    "publish_time": "2022-10-07 13:30:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]