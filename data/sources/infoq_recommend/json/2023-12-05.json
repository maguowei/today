[
  {
    "title": "Visual Studio 17.9 Preview 1发布，带来新UI、调试器增强、AI功能等",
    "url": "https://www.infoq.cn/article/QVZ2huq5kLiK7tEEJTRq",
    "summary": "<p>微软发布了<a href=\"https://devblogs.microsoft.com/visualstudio/introducing-visual-studio-17-9-preview-1-is-here/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDA4MjIsImZpbGVHVUlEIjoiMGwzTk14Uk1ReUlhVkJBUiIsImlhdCI6MTcwMTc0MDUyMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.x8RO4Pxv00PJj3wu_yM250WM-J5yC_oBEXKpyZAPSTc\">Visual Studio 17.9的首个预览版</a>\"。该预览版带来了一系列旨在增强开发者生产力的改进和功能，包括GitHub Copilot等一些AI功能、对虚幻引擎项目的IntelliSense支持、内存管理和调试改进，并且这个预览版拥有全新的界面设计。</p><p></p><p>关于该预览版在生产力方面的提升，开发者可以使用<a href=\"https://devblogs.microsoft.com/visualstudio/introducing-visual-studio-17-9-preview-1-is-here/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDA4MjIsImZpbGVHVUlEIjoiMGwzTk14Uk1ReUlhVkJBUiIsImlhdCI6MTcwMTc0MDUyMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.x8RO4Pxv00PJj3wu_yM250WM-J5yC_oBEXKpyZAPSTc\">生成的git提交消息</a>\"功能。在源码提交的文件修改分析中，Copilot会检查变更，提供摘要，并详细说明每一个修改。</p><p></p><p>开发者可以选择插入或丢弃AI建议。为了测试这个功能，开发者需要一个已激活的GitHub Copilot订阅和预览版的GitHub Copilot Chat Extension。</p><p></p><p>内存泄漏是一件很危险的事，该预览版的Manage Memory Insights选项卡为此提供了额外的信息。这些功能将帮助开发者检测<a href=\"https://devblogs.microsoft.com/visualstudio/introducing-visual-studio-17-9-preview-1-is-here/#event-handler-leaks-insights?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDA4MjIsImZpbGVHVUlEIjoiMGwzTk14Uk1ReUlhVkJBUiIsImlhdCI6MTcwMTc0MDUyMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.x8RO4Pxv00PJj3wu_yM250WM-J5yC_oBEXKpyZAPSTc\">事件处理器泄漏</a>\"。当事件发布者的生命周期长于事件订阅者时，订阅者会继续留存在内存中但没有被引用。</p><p></p><p>该预览版的其他生产力功能与<a href=\"https://devblogs.microsoft.com/visualstudio/introducing-visual-studio-17-9-preview-1-is-here/#non-modal-debug-visualizers?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDA4MjIsImZpbGVHVUlEIjoiMGwzTk14Uk1ReUlhVkJBUiIsImlhdCI6MTcwMTc0MDUyMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.x8RO4Pxv00PJj3wu_yM250WM-J5yC_oBEXKpyZAPSTc\">调试可视化器</a>\"有关，现在不再是模态的，更易于与编辑器发生交互。同时，<a href=\"https://devblogs.microsoft.com/visualstudio/introducing-visual-studio-17-9-preview-1-is-here/#instrumentation-tool-start-with-collection-pause-option?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDA4MjIsImZpbGVHVUlEIjoiMGwzTk14Uk1ReUlhVkJBUiIsImlhdCI6MTcwMTc0MDUyMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.x8RO4Pxv00PJj3wu_yM250WM-J5yC_oBEXKpyZAPSTc\">Instrumentation工具引入了*启动-暂停*</a>\"选项来为应用程序进行性能分析。这使得用户能够在分析器的控制下启动应用程序，而不会立即收集数据。</p><p></p><p><a href=\"https://devblogs.microsoft.com/visualstudio/introducing-visual-studio-17-9-preview-1-is-here/#include-references-diagnostics?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDA4MjIsImZpbGVHVUlEIjoiMGwzTk14Uk1ReUlhVkJBUiIsImlhdCI6MTcwMTc0MDUyMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.x8RO4Pxv00PJj3wu_yM250WM-J5yC_oBEXKpyZAPSTc\">*#include*引用诊断</a>\"特性使得用户能够可视化代码中每个#include指令的频率。用户可以通过点击指令顶部显示的引用计数来查看特定引用。在选项卡方面，开发者可以通过滚动鼠标轮在Visual Studio的文档窗口中<a href=\"https://devblogs.microsoft.com/visualstudio/introducing-visual-studio-17-9-preview-1-is-here/#switch-between-single-and-multiple-rows-in-the-document-well?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDA4MjIsImZpbGVHVUlEIjoiMGwzTk14Uk1ReUlhVkJBUiIsImlhdCI6MTcwMTc0MDUyMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.x8RO4Pxv00PJj3wu_yM250WM-J5yC_oBEXKpyZAPSTc\">切换单个和多个选项卡</a>\"。</p><p></p><p>C++游戏开发者可以在Visual Studio中体验新功能，比如<a href=\"https://devblogs.microsoft.com/visualstudio/introducing-visual-studio-17-9-preview-1-is-here/#improved-blueprint-experience-in-visual-studio?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDA4MjIsImZpbGVHVUlEIjoiMGwzTk14Uk1ReUlhVkJBUiIsImlhdCI6MTcwMTc0MDUyMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.x8RO4Pxv00PJj3wu_yM250WM-J5yC_oBEXKpyZAPSTc\">改进的Blueprint体验</a>\"。据报道，开发者现在无需安装Visual Studio Integration Tool插件就可以查看Blueprint引用和资源属性。</p><p></p><p>在该预览版中，Visual Studio中的<a href=\"https://devblogs.microsoft.com/visualstudio/introducing-visual-studio-17-9-preview-1-is-here/#improved-intellisense-for-unreal-engine-projects?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDA4MjIsImZpbGVHVUlEIjoiMGwzTk14Uk1ReUlhVkJBUiIsImlhdCI6MTcwMTc0MDUyMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.x8RO4Pxv00PJj3wu_yM250WM-J5yC_oBEXKpyZAPSTc\">虚幻引擎IntelliSense</a>\"现在更加一致和准确。对UHT生成文件的刷新得到了优化，减少了不必要的错误显示。此外，开发者现在还可以指定<a href=\"https://devblogs.microsoft.com/visualstudio/introducing-visual-studio-17-9-preview-1-is-here/#specify-custom-cmake-executable?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDA4MjIsImZpbGVHVUlEIjoiMGwzTk14Uk1ReUlhVkJBUiIsImlhdCI6MTcwMTc0MDUyMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.x8RO4Pxv00PJj3wu_yM250WM-J5yC_oBEXKpyZAPSTc\">自定义CMake可执行文件</a>\"。</p><p></p><p>在最近的.NET 8更新中，调试器会在调试过程中自动<a href=\"https://devblogs.microsoft.com/visualstudio/introducing-visual-studio-17-9-preview-1-is-here/#automatic-deoptimization?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDA4MjIsImZpbGVHVUlEIjoiMGwzTk14Uk1ReUlhVkJBUiIsImlhdCI6MTcwMTc0MDUyMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.x8RO4Pxv00PJj3wu_yM250WM-J5yC_oBEXKpyZAPSTc\">优化</a>\"发布和外部代码，增强了调试过程。<a href=\"https://devblogs.microsoft.com/visualstudio/introducing-visual-studio-17-9-preview-1-is-here/#razor-snippets?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDA4MjIsImZpbGVHVUlEIjoiMGwzTk14Uk1ReUlhVkJBUiIsImlhdCI6MTcwMTc0MDUyMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.x8RO4Pxv00PJj3wu_yM250WM-J5yC_oBEXKpyZAPSTc\">Razor文件中的HTML片段</a>\" (.razor)促进了常见模式的快速编码。对Razor文件<a href=\"https://devblogs.microsoft.com/visualstudio/introducing-visual-studio-17-9-preview-1-is-here/#multi-tfm-support-for-razor-files?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDA4MjIsImZpbGVHVUlEIjoiMGwzTk14Uk1ReUlhVkJBUiIsImlhdCI6MTcwMTc0MDUyMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.x8RO4Pxv00PJj3wu_yM250WM-J5yC_oBEXKpyZAPSTc\">多目标框架（TFM）</a>\"的支持允许有针对性地包含代码。</p><p></p><p>此外，.NET 8中的Blazor项目现在提供了<a href=\"https://devblogs.microsoft.com/visualstudio/introducing-visual-studio-17-9-preview-1-is-here/#blazor-scaffolding-for-net-8-projects?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDA4MjIsImZpbGVHVUlEIjoiMGwzTk14Uk1ReUlhVkJBUiIsImlhdCI6MTcwMTc0MDUyMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.x8RO4Pxv00PJj3wu_yM250WM-J5yC_oBEXKpyZAPSTc\">脚手架支持</a>\"，包括使用Entity Framework进行CRUD操作，通过解决方案资源管理器中的右键单击选项简化开发。</p><p></p><p>最后，该预览版的另一主要更新是<a href=\"https://devblogs.microsoft.com/visualstudio/the-visual-studio-ui-refresh-preview-is-here/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDA4MjIsImZpbGVHVUlEIjoiMGwzTk14Uk1ReUlhVkJBUiIsImlhdCI6MTcwMTc0MDUyMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.x8RO4Pxv00PJj3wu_yM250WM-J5yC_oBEXKpyZAPSTc\">Visual Studio IDE的UI Refresh</a>\"。开发者可以在Visual Studio的主菜单中进入Tools &gt; Manage Preview Features，启用Experimental control styles选项来激活UI Refresh。启用此功能后，重新启动Visual Studio将应用UI Refresh。</p><p></p><p>据报道，该预览版的基本用户体验与之前保持一致，主要目标集中在Fluent设计语言，强调将协调性、可访问性和生产力作为UI Refresh的主要支柱。</p><p></p><p>Visual Studio高级产品经理<a href=\"https://devblogs.microsoft.com/visualstudio/author/danteg/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDA4MjIsImZpbGVHVUlEIjoiMGwzTk14Uk1ReUlhVkJBUiIsImlhdCI6MTcwMTc0MDUyMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.x8RO4Pxv00PJj3wu_yM250WM-J5yC_oBEXKpyZAPSTc\">Dante Gagne</a>\"表示：</p><p></p><p></p><blockquote>在这一版的UI Refresh中，用户将看到我们针对可点击目标空间和减少视觉混乱等可访问性要求的反馈所做出的平衡。这意味着一种更具包容性的体验，有助于让每个人更高效、更舒适地工作，同时最大化代码空间，尊重用户为我们提供的反馈。</blockquote><p></p><p></p><p>微软和开发团队鼓励用户<a href=\"https://devblogs.microsoft.com/visualstudio/introducing-visual-studio-17-9-preview-1-is-here/#thank-you?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDA4MjIsImZpbGVHVUlEIjoiMGwzTk14Uk1ReUlhVkJBUiIsImlhdCI6MTcwMTc0MDUyMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.x8RO4Pxv00PJj3wu_yM250WM-J5yC_oBEXKpyZAPSTc\">提供反馈</a>\"和<a href=\"https://developercommunity.visualstudio.com/VisualStudio/suggest?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDA4MjIsImZpbGVHVUlEIjoiMGwzTk14Uk1ReUlhVkJBUiIsImlhdCI6MTcwMTc0MDUyMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.x8RO4Pxv00PJj3wu_yM250WM-J5yC_oBEXKpyZAPSTc\">分享建议</a>\"，体现了他们致力于不断增强Visual Studio体验的承诺。</p><p></p><p>最后，有兴趣了解Visual Studio的这个预览版和其他版本的开发者，可以查看详细的<a href=\"https://learn.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDA4MjIsImZpbGVHVUlEIjoiMGwzTk14Uk1ReUlhVkJBUiIsImlhdCI6MTcwMTc0MDUyMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.x8RO4Pxv00PJj3wu_yM250WM-J5yC_oBEXKpyZAPSTc\">Visual Studio 2022 IDE版本说明</a>\"，了解其他的更新和新功能。</p><p></p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/11/vs2022-v17-9-preview-1/\">https://www.infoq.com/news/2023/11/vs2022-v17-9-preview-1/</a>\"</p>",
    "publish_time": "2023-12-05 09:45:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "世界开发者说：当 AI 大咖遇上云计算“春晚”，会碰撞出怎样的火花？",
    "url": "https://www.infoq.cn/article/MNwwBacJ5Xle6lQzAavD",
    "summary": "<p>在 re:Invent 现场专访亚马逊云科技机器学习 Hero Cyrus Wong，数据专家、社区Hero、亚马逊云认证培训师，多重身份的他，在 2023 re:Invent 有什么收获？一起听听看！</p>",
    "publish_time": "2023-12-05 10:09:09",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "世界开发者说：为什么世界各地的开发者都爱 DeepRacer?",
    "url": "https://www.infoq.cn/article/7fY7biiRouR3mC5B8zpg",
    "summary": "<p>2023 re:Invent DeepRacer 冠军赛现场采访入围选手，看看他们如何玩转DeepRacer、听听他们如何通过比赛学习 AI 技术~</p>",
    "publish_time": "2023-12-05 10:09:13",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "直击现场 DAY5丨re:Invent 最后一天，尽情享受游戏的乐趣！",
    "url": "https://www.infoq.cn/article/tjZIzhReqxARoeSRPPVm",
    "summary": "<p>2023 re:Invent直击现场 DAY5：最后一天，开发者们同样步履不停，享受现场~</p>",
    "publish_time": "2023-12-05 10:09:14",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "直击现场 DAY4 丨开发者们都在沉浸式体验 re:Invent 现场的黑科技！",
    "url": "https://www.infoq.cn/article/2LwWPchwt9DIjw4YUa5m",
    "summary": "<p>2023 re:Invent直击现场 DAY4：2023 年的 re:Invent 现场，除了是技术盛宴，更是娱乐之城~</p>",
    "publish_time": "2023-12-05 10:09:16",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "有理有据：数据库选择集中式还是分布式",
    "url": "https://www.infoq.cn/article/i17Kob7yakR6LyxtqAa9",
    "summary": "<p></p><blockquote>OLTP类型的业务系统采用集中式数据库还是分布式数据库是在做国产数据库改造中经常被问到的问题，无论是对技术架构发展演变，还是对现有业务长期发展提供必要的支撑，这个问题都具有讨论意义。在分布式大行其道的背景下，似乎任何架构都需要分布式赋能。现实真的是这样吗？下面将全面地进行分析与阐述。</blockquote><p></p><p></p><p></p><h2>01 使用现状分析</h2><p></p><p></p><p>国产数据库厂商2022年就已经达到了200多家，传统集中式数据库以人大金仓、达梦为主，也有像polarDB这样的新兴数据库，分布式数据库有GaussDB、Kingwow、TDSQL、GoldenDB和OceanBase等，其实大部分这类的数据库都具备集中式和分布式两种部署模式，也就是你买分布式数据库的钱也可以用于集中式部署，可以满足你不同的业务需求。</p><p></p><p>这里有一点要注意，有的分布式数据库的厂商采用集中式部署，应用依然需要连接计算节点。通过计算节点（CN），去连接下面的数据节点，这可能是出于统一架构的考虑，也是出于计算节点在数据库发生主备切换时可以感知自动切换、对应用透明的考虑。但这样无意中增加了一层解析，会对性能产生一定的损耗。有的数据库厂商是通过自身提供的JDBC/ODBC驱动或VIP等方式直连数据库，从而避免了类似问题的出现。</p><p></p><p>从技术架构看，金融行业使用的数据库仍以集中式为主，分布式数据库在中大型金融机构形成了有力补充。《金融业数据库供应链安全发展报告(2022)》调研数据显示，集中式数据库在金融业总体占比仍高达 89%，其中银行80%，证券和保险业占比均超过 90%，集中式数据库在金融科技数字化进程中扮演重要角色。金融行业分布式数据库总体占比达到7%，银行业超过了17%，证券业和保险业相对较低。也就是说我们大部分业务采用集中式数据库是完全能够满足的。</p><p></p><p></p><h2>02 真的需要分布式吗</h2><p></p><p></p><p>集中式数据库由于只有一个主数据节点，天然具备架构简单、运维方便、兼容性好和性价比高等优势。</p><p>但也存在无法突破单机硬件限制、无法横向扩容、存在性能和容量瓶颈的问题。</p><p></p><p>所以当集中式数据库无法满足我们的性能和容量要求时，分布式就给我们提供了一个很好的技术手段。当我们打算选择分布式来解决集中式的问题的时候，建议大家先做如下的提问再做考虑：</p><p></p><p>1. 是否可以通过优化集中式数据库自身来解决问题，而不做大的架构改动，如优化参数、优化SQL语句，优化业务逻辑等方式。‍‍‍‍‍‍‍‍‍</p><p></p><p>2. 是否可以通过增加主机资源配置解决问题，如采用增加CPU和内存大小，或原来采用虚拟机而改用物理机等纵向扩展的方式解决。</p><p></p><p>3. 是否可以通过存算分离的方式解决问题，如果只是单机的容量无法满足要求，可以考虑外挂存储或采用存算分离架构，解决单机磁盘容量受限的问题。</p><p></p><p>4. 是否可以通过应用层解决，如改变业务架构，采用微服务或单元化架构，也就是在应用层实现数据拆分、分布式事务和水平扩展等能力，而数据库依然采用集中式。这种方式对开发人员的要求高，业务改造成本大，需要综合考虑。</p><p></p><p>5. 是否充分了解分布式架构的优缺点，是否做好分布式数据库的运维与备份等相关准备工作，是否充分考虑自己的业务必须要通过分布式数据库来解决。</p><p></p><p></p><h2>03 何时使用分布式</h2><p></p><p></p><p>早期有2000w行的表需要拆分的说法，这个主要是针对MySQL数据库。当OLTP类型的表超过2000W行，通过公式计算B+tree叶子层数会增加到4层，从而增加IO的读取次数。但随着硬件的升级或缓存技术的实现，可以基本忽略IO的影响。因此目前比较常见地通过TPS或QPS指标来决定是否需要做分布式改造，如单点TPS瓶颈达到4000，或QPS达到8W，或数据容量达到2TB后。一般情况下需要做横向扩容解决性能或容量瓶颈，相对来说比较合理，但这里没有一个固定公式，主要还是要结合自己的业务场景来做判断。也要考虑未来业务增长的需求，如是否满足业务3-5年的增长需求，做好峰值预测，提前做好规划，避免做二次改造。同时参考上面提到的几个问题，是否必须通过分布式数据库来解决。</p><p></p><p></p><h4>实验数据一（找拐点）</h4><p></p><p></p><p>硬件资源为基于ARM架构的鲲鹏虚拟机环境，具体配置为16C64G，中标麒麟v10操作系统，普通ssd磁盘。</p><p></p><p>下图为某国产分布式数据库测试结果，分布式为4分片，单位:秒。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a4/a4acc471a2e7387aae1b492c77af76d0.png\" /></p><p></p><p>对于单点基于索引的查询基本没有差距，对于全表扫描和双表关联（关联表为统一为200w行且都基于分片键作为关联条件）都在500w数据量的时候就已经有5倍左右的明显提升，这个弯儿说实话拐的有点早，其实还是要结合自己的业务场景验证会更加准确。</p><p></p><p>对于500w以下数据量的，大家可以结合业务自行测试。当然也可能在300w或者更低的时候出现拐点，这里也希望大家能给出更多的测试结果。实验数据受多种因素影响可能存在一定偏差，还请指正，并非常期望大家能将自己的测试结果放到评论区，大家一起验证分布式与集中式的性能拐点，这样可以提供一个更加准确的数据基础为选型做参考。</p><p></p><p></p><h4>实验数据二</h4><p></p><p></p><p>下图是某厂商基于sysbench工具压测的结果：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/36/362efcbf70749e70ea5bcae7e55fc3c6.png\" /></p><p></p><p>可以看到集中式数据库在中等规格配置下资源使用率达到75%时，所能达到的最大TPS在4595，延迟5ms，并发400。这是一个参考值，也就是上面提到的基本TPS超过5000需要拆分的一个依据。当然如果你的资源够大，这个值可以再大。不过最准确地，需要我们通过真实环境压力测试来验证我们的TPS值进行判断。</p><p></p><h2>04 如何用好分布式</h2><p></p><p></p><p>顾名思义，分布式，多个人干活，具备高可用、高扩展、高性能和弹性扩缩容能力等优势。</p><p></p><p>由于数据节点数量和数据库组件的增加，必然会出现架构复杂、运维复杂和成本高等问题，同时大部分分布式数据库不支持存储过程、自定义函数等特殊对象。</p><p></p><p>分布式是一把双刃剑，我们如何用好且不受伤很重要。</p><p></p><p></p><h4>1. 分片键的选择</h4><p></p><p></p><p>分片键的选择非常重要，选作分片键的字段取值应该比较离散，以便数据能在各个数据节点上均匀分布。当单个字段无法满足离散条件时，可以考虑使用多个字段一起作为分片键。一般情况下，可以考虑选择表的主键作为分片键。例如，在人员信息表中选择证件号码作为分布键。且大部分分布式数据库都不支持或不建议对分片键的修改。</p><p></p><p></p><h4>2. 分布方式的选择</h4><p></p><p></p><p>常见的选择是hash分布，相对来说分布更加均匀，另外还有range和list等分区，当然我们最终需要结合具体业务场景进行选择。另外需要将一些经常用的配置信息表或关联查询的小表定义成全局表，确保在一个数据节点可以获取到，避免跨节点数据交互。</p><p></p><p></p><h4>3. 规范SQL语句的编写</h4><p></p><p></p><p>应选择分片键作为查询条件，并采用分片键作为多表关联查询条件。如果不采用分片键会出现跨节点数据传输，有的分布式数据库会出现将所有数据汇聚计算节点做汇总关联排序，当数据很大时会瞬间将计算节点资源打满，导致数据库无法对外提供服务。</p><p></p><p></p><h4>4. 规避跨节点数据传输</h4><p></p><p></p><p>如上所说的将查询条件作为分片键就是最大限度地避免跨节点传输，因为跨节点数据传输是基于网络进行的，网络相比较磁盘的传输读写性能存在很大的差距，所以性能会明显下降，甚至会出现结果一直跑不出来的情况。</p><p></p><p></p><h4>5. 规避分布式事务</h4><p></p><p></p><p>分布式事务处理路径长，这个是他的性质决定的，大部分数据库就基于2PC原理实现，因此我们要最大限度地规避分布式事务，一般情况下控制在所有事务的10%以内，过多的分布式事务一定会给我们带来性能影响，也对业务数据的一致性问题带来了挑战。</p><p></p><p></p><h2>05 深入分析：分布式是数据库解决还是应用解决</h2><p></p><p></p><p>分布式的实现可以通过数据库解决（分布式数据库）也可以通过应用解决，大部分开发人员，尤其是传统行业或城商行等金融机构，开发能力比不上大行，人员规模有限，他们更希望数据库做的事情更多一些，比如分布式事务的实现、数据拆分的实现，尽量对开发人员透明。所以他们会直接采用分布式数据库，以单元化架构为例如下图：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4c/4cf5393d97deba4b76cc6557052f7788.png\" /></p><p></p><p>底层采用的分布式数据库的单元化架构</p><p></p><p>但一些重要的业务系统或具备一定开发能力的团队，更多地会考虑在应用层去实现。他们想拿到更多的控制权，如一个分布式事务出现异常，如果在数据库层实现，那么对应开发人员来说是个黑盒，他只能期盼数据库的分布式事务处理能力，他们无法介入。但如果要是在业务层实现，他们可以通过消息队列、TCC和saga等获取的日志信息并做数据补偿机制来做相应的处理。因此他们会在应用层实现分布式，数据库采用集中式的方式，每个数据库存放部分业务数据，以单元化架构为例如下图：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/03/038b53990750a42f88d051ce8566ef48.png\" /></p><p>底层采用的集中式数据库的单元化架构</p><p></p><p>集中式与分布式数据库在实现分布式方式上的区别汇总如下：</p><p></p><p></p><p></p><p>采用集中式数据库，应用层实现分布式对应用的要求比较高，要实现分布式特性，但在数据库层面反而改造的比较少，因为集中式数据库的兼容性要比分布式更好一些。</p><p></p><p>采用分布式数据库，应用不需要实现分布式特性，对应用透明，但分布式数据库对特殊对象，如存储过程、函数等兼容较差，甚至不支持，这就需要应用针对数据库做适配改造。</p><p></p><p></p><p></p><h2>06 小结</h2><p></p><p></p><p>在一次数据库创新的圆桌论坛上，一位同行的老师说集中式数据库就像绵羊，温顺而便于管理，而分布式数据库是一匹野马，放荡不羁难于控制，这让我想起了宋冬野在《董小姐》的歌里唱到的，“爱上一匹野马，可我的家里没有草原，这让我感到绝望...”。分布式数据库这匹野马能够驯服，会让你在大草原上飞奔驰骋，否则就会让你受尽苦难、步履维艰。其实大部分开发人员还是希望数据库做的多一些，开发人员改造少一些，数据库更透明一些，更简单一些，甚至是更智能一些。</p><p></p><p>最后我想说一句，我们国产数据库任重而道远，其实相比较新功能的增加，客户更关心基础功能的改进。如果我们能把数据库核心存储引擎做好，生态做好的话，那么OLTP的数据库我们也不会去深入讨论这个话题。</p><p></p><p>文章如有表达不准确、或不专业的地方还请大家指正，谢谢。</p>",
    "publish_time": "2023-12-05 10:47:28",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "免费下载！2023 全球金融科技大会 PPT 来啦",
    "url": "https://www.infoq.cn/article/4kCbbGuk6si8fiy8hfqi",
    "summary": "<p>日前，在上海成功举办的<a href=\"https://www.infoq.cn/article/BNiefsWtdjeQmreGkaUI?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">首届 FCon 全球金融科技大会</a>\"，以「科技 + 金融，激发创新力量」为主题，汇聚了来自金融龙头企业的数百名技术高管，掀起一场探讨新时代金融科技未来的高潮。</p><p></p><p>大会覆盖多个专题，既讨论了「金融行业大模型应用」、「创新的金融科技应用」、「数据要素流通与数据合规」等引领行业的前沿议题，也呈现了多个金融数智化建设的最干实践如「银行数智化建设」、「金融实时数据平台建设之路」、「金融安全与风险管控」等等。</p><p></p><p>当中主要亮点包括但不限于：</p><p>大模型为金融带来巨变，探讨大模型在金融行业的落地探索，金融行业因此面临的范式转换；新一代 HTAP 图技术、Web3 在金融行业的最新应用；数据是数字时代的黄金，但流通和合规是其关键。深入了解数据的流动与合规，探索隐私计算在智慧产业的实践应用；DevOps改变金融业态，加速创新与交付，了解大厂的创新实践；在AI时代，如何更高效地使用大模型、大数据等技术能力，让数据更好地服务于金融市场；揭秘金融实时数据平台的优化之道，深度探讨设计理念、技术挑战，解析未来趋势；围绕网络运行安全、用户个人信息保护、关键信息基础设施安全、网络信息安全等方面来展开讨论具体的技术手段；助力银行全面数智化建设，如何让数据资产充分共享、工具平台提升中台能力，AI应用实现数据化归因和自动优化......</p><p></p><p>经征得大会分享嘉宾同意，InfoQ数字化经纬为您奉上以下精彩演讲PPT！</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/96/a6/962290229f467a326fd761222f7290a6.png\" /></p><p></p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/36/48/3688c3b9d621db85517ed79817d93348.png\" /></p><p></p><p>点击上方两张海报，扫码关注「InfoQ数字化经纬」公众号、并回复关键词即可获取对应的PPT。深度洞悉科技趋势，助您引领金融创新未来！</p><p></p><p>延展阅读：<a href=\"https://www.infoq.cn/theme/212\">《FCon全球金融科技大会专题报道》</a>\"</p>",
    "publish_time": "2023-12-05 11:13:08",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "字节跳动技术专家田昕晖博士确认出席 QCon 上海，分享解析云原生数仓 ByteHouse 如何构建高性能向量检索技术",
    "url": "https://www.infoq.cn/article/xGT9CxFabIo52wbCfa7j",
    "summary": "<p><a href=\"https://qcon.infoq.cn/2023/shanghai/?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_campaign=9&amp;utm_term=1205&amp;utm_content=tianxinhui\">QCon 全球软件开发大会</a>\"，将于 12 月在上海召开。字节跳动技术专家田昕晖博士将发表题为《<a href=\"https://qcon.infoq.cn/2023/shanghai/presentation/5622?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_campaign=9&amp;utm_term=1205&amp;utm_content=tianxinhui\">解析云原生数仓 ByteHouse 如何构建高性能向量检索技术</a>\"》主题分享，探讨火山引擎 ByteHouse 团队基于社区 ClickHouse 进行了技术演进，提出了全新的向量检索功能设计思路，以满足业务对向量检索稳定性与性能方面的需求。</p><p></p><p><a href=\"https://qcon.infoq.cn/2023/shanghai/presentation/5622?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_campaign=9&amp;utm_term=1205&amp;utm_content=tianxinhui\">田昕晖博士</a>\"，本科毕业于北京大学，博士毕业于中国科学院大学计算技术研究所，研究方向为分布式图计算。毕业后长期从事分布式系统相关研究工作，近年专注于分析型数据库与向量检索相关方面的工作。目前火山引擎 ByteHouse 团队负责向量搜索相关功能开发。他在本次会议的演讲内容如下：</p><p></p><p>演讲：解析云原生数仓 ByteHouse 如何构建高性能向量检索技术</p><p></p><p>向量检索被广泛使用于以图搜图、内容推荐以及大模型推理等场景。随着业务升级与 AI 技术的广泛使用，用户期望处理的向量数据规模越来越大，对向量数据库产品的稳定性、易用性与性能需求也越来越高。为此火山引擎 ByteHouse 团队基于社区 ClickHouse 进行技术演进，提出了全新的向量检索功能设计思路，满足业务对向量检索稳定性与性能方面的需求。</p><p></p><p>演讲提纲：</p><p></p><p>向量检索概念以及在 LLM 场景的应用当前业界向量数据库发展情况ClickHouse 结合向量检索的优势，以及社区当前向量检索局限性与性能问题分析ByteHouse 向量检索功能设计思路介绍性能比较</p><p></p><p>听众收益点：</p><p></p><p>○ 向量搜索的使用场景</p><p>○ 向量搜索与 OLAP 结合的优势</p><p>○ 如何在 OLAP 系统中实现高效向量搜索</p><p></p><p>除上述演讲外，QCon 上海还将围绕&nbsp;<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1595?utm_source=infoqweb&amp;utm_medium=teacherart\">GenAI和通用大模型应用探索</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1596?utm_source=infoqweb&amp;utm_medium=teacherart\">AI&nbsp;Agent&nbsp;与行业融合应用的前景</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1597?utm_source=infoqweb&amp;utm_medium=teacherart\">LLM&nbsp;时代的性能优化</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1598?utm_source=infoqweb&amp;utm_medium=teacherart\">智能化信创软件&nbsp;IDE</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1602?utm_source=infoqweb&amp;utm_medium=teacherart\">面向人工智能时代的架构</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1604?utm_source=infoqweb&amp;utm_medium=teacherart\">性能工程：提升效率和创新的新方法</a>\"等专题进行交流。</p><p></p><p>QCon 上海 2023，相约 12 月！ 现在购票，享 9 折优惠，立减￥680！咨询购票请联系：18514549229（微信同手机号）。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/01/0113b3dfb187d5f9988b7eb16d2e0594.png\" /></p><p></p>",
    "publish_time": "2023-12-05 11:30:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "一文全览「数字金融」重大政策及深度解读",
    "url": "https://www.infoq.cn/article/ROrh4hSJPu1UkXzx5Uhc",
    "summary": "<p>中央金融工作会议于 10 月底在北京召开，首次系统提出了“<a href=\"https://mp.weixin.qq.com/s?__biz=MzkzMzQzNjQ5Mw==&amp;mid=2247486436&amp;idx=1&amp;sn=f0e56db7010434e0d0a8141e02dc5e88&amp;chksm=c24dc6c6f53a4fd00c0db10b2b71ec7ae4ef333bd84b93871e5d5d6f2ba07e58208470aa8008&amp;token=31219319&amp;lang=zh_CN#rd\">五篇大文章</a>\"”的说法，包括“科技金融、绿色金融、普惠金融、养老金融、数字金融”，会议突出了党管金融的理念。在本次中央金融工作会议之后，“数字金融”一词必将正式成为明年各金融机构战略中的高频词，本文将介绍笔者自身对这个概念的理解，仅供大家参考，不当之处请多指正。</p><p></p><h3>一、从“十四五”开始的关于金融的数字化要求</h3><p></p><p></p><p>1、《中华人民共和国国民经济和社会发展第十四个五年规划和 2035 年远景目标纲要》中共有 46 处提及金融一词，其中“第五章 提升企业技术创新能力”的“第三节 完善企业创新服务体系”，此处便有“完善金融支持创新体系，鼓励金融机构发展知识产权质押融资、科技保险等科技金融产品，开展科技成果转化贷款风险补偿试点”的要求。</p><p></p><p>至于金融自身的数字化，“第十八章 营造良好数字生态”中的“第二节 营造规范有序的政策环境”，有“探索建立无人驾驶、在线医疗、金融科技、智能配送等监管框架，完善相关法律法规和伦理审查规则”的要求，这一章也正是在“第五篇 加快数字化发展 建设数字中国”。</p><p></p><p>“第二十章 建设高标准市场体系”中“第四节 健全社会信用体系”有“建立公共信用信息和金融信息的共享整合机制”的要求。</p><p></p><p>“第二十一章 建立现代财税金融体制”中“第三节 深化金融供给侧结构性改革”中有更多对金融的要求，其中数字化部分更是稳字当头，“稳妥发展金融科技，加快金融机构数字化转型。强化监管科技运用和金融创新风险评估，探索建立创新产品纠偏和暂停机制”。</p><p></p><p>2、《“十四五”数字经济发展规划》中共有 8 处提及金融一词，与数字化相关的主要是 “五、大力推进产业数字化转型”中“（二）全面深化重点产业数字化转型”提到的“全面加快商贸、物流、金融等服务业数字化转型”，也就是将金融放在了“产业数字化”部分。此外，在“九、着力强化数字经济安全体系”中“（三）切实有效防范各类风险”要求“坚持金融活动全部纳入金融监管，加强动态监测，规范数字金融有序创新，严防衍生业务风险”的要求，明确提到了“数字金融”，并以加强监管为主导方向，对其关注比较像是对于一种金融业务形态的关注。在“十、有效拓展数字经济国际合作”中“（二）推动“数字丝绸之路”深入发展”提到“加大金融、物流、电子商务等领域的合作模式创新，支持我国数字经济企业“走出去”，积极参与国际合作”，要求以支持数字企业走出去为目标进行金融创新。</p><p></p><p>3、《数字中国建设整体布局规划》中，在<a href=\"https://www.infoq.cn/article/LBC3Rujd6xFoYfS2duGf?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">“2522”框架</a>\"下，金融依然是出现在“推进数字技术与经济、政治、文化、社会、生态文明建设“五位一体”深度融合”这个目标下，在做强做优做大数字经济部分中，有“推动数字技术和实体经济深度融合，在农业、工业、金融、教育、医疗、交通、能源等重点领域，加快数字技术创新应用”的要求。</p><p></p><p>4、《国务院关于推进普惠金融高质量发展的实施意见》文中“六、有序推进数字普惠金融发展”部分，从“（十六）提升普惠金融科技水平”、“（十七）打造健康的数字普惠金融生态”、“（十八）健全数字普惠金融监管体系”三个方面提出了普惠金融的数字化发展目标。“八、强化金融素养提升和消费者保护”有“组织面向农户、新市民、小微企业主、个体工商户、低收入人口、老年人、残疾人等重点群体的教育培训，提升数字金融产品使用能力”的要求，从产品视角提到了数字金融。</p><p></p><p>政策一直不乏对这一概念的关注，应该说是比较有连续性的。</p><p></p><h3>二、“五篇大文章”中的“数字金融”</h3><p></p><p></p><p>本次中央金融工作会议对金融工作的要求，从《求是》文章中解读，总体为“要加快建设金融强国，全面加强金融监管，完善金融体制，优化金融服务，防范化解风险，坚定不移走中国特色金融发展之路”，做强、管好，体制、服务、风控，强调金融工作的政治性、人民性以及安全性，基于马克思主义政治经济学、中华优秀传统文化进行中国特色金融理论创新，借鉴和超越全球金融发展经验。会后各类金融机构和文章对此均有解读，“数字金融”一词也引起了广泛关注。</p><p></p><p>对此，笔者思考如下：</p><p></p><h5>一、 统一了概念</h5><p></p><p></p><p>坚持走中国特色金融发展之路，那我国的金融发展，包括其数字化部分，必然是国家政策的延续和落实，有人讨论“数字金融”与“金融科技”一词的关系，但是在笔者看来，这些都是对金融机构数字化行为的概括，虽然“金融科技”有国际定义，但采用“数字金融”一词会更加体现与笔者前述介绍的政策的一致性，在数字中国、数字经济的范畴下，理应统一为数字金融，也是明确了金融数字化的内涵和意义，如笔者曾经讲过的，金融机构数字化做的不好会拖数字经济发展的后腿，金融是血脉，数字经济必然需要数字金融，数字金融发展也必须与数字经济发展相称。</p><p></p><h5>二、 仍然可以延展</h5><p></p><p></p><p>“数字金融”最直接的解释通常会是<a href=\"https://www.infoq.cn/theme/200\">金融机构的数字化</a>\"，类似数字经济中“产业数字化”与“数字产业化”的提法，衍生为“数字金融”与“科技金融、绿色金融、普惠金融、养老金融”的关系，通过金融机构的数字化，提升另外“四篇大文章”的质量和效率。此外，也可以适度延展为对产业数字化的支持，“科技金融”本身可以侧重为对科技型企业，尤其是科技创新型企业的支持，这也是金融机构已经在执行的一个业务方向，这样的理解可能在金融机构业务执行上更容易聚焦；</p><p></p><p>而“数字金融”则可以包括对企业客户数字化过程的支持，包括资金支持、技术支持和业务融合，笔者经常讲，客户才是银行数字化的终极目标，服务好客户的数字化进行并将客户的数字化与银行的数字化更好地结合从而形成新型银企关系，这是数字时代才会真正具有的发展机遇。银行信息化较早、总体水平较高，也是可以输出数字化经验、能力的行业，笔者自身接触过的一些非金融客户，其在数字化转型过程中遇到的整体设计、大项目群管理、架构师缺乏等问题，金融机构在一定程度上是可以具有支撑能力的，做好给“数字企业”的全面“数字金融”服务，也是有效服务实体经济的手段，所以，“数字金融”一词的概念其实可以延展，让银行将更多的能力回报给社会，银行也相继有成立数字科技公司，可以考虑此类公司的未来定位如何与“五篇大文章”有效结合起来。</p><p></p><h5>三、 数实要融合</h5><p></p><p></p><p>金融机构的实体部分要服务于客户的实体部分，金融机构的数字部分要服务于客户的数字部分，金融机构自己要数实融合，与客户更要数实融合，场景是金融服务的设计导向，不是金融机构的“战场”，是服务于客户的方式，是数字金融产品的设计理念，而不是“争夺地”。</p><p></p><p>金融机构在“数字金融”中要多考虑数字能力体系的布局，如何协调总部集中开发团队与分支机构分散数字诉求的平衡、全代码大开发与低零代码一线开发能力的平衡、面向管理数字化与面向一线数字服务的平衡，必须将数字化视野放到机构之外，放到客户身上，无论是 C 端还是 B 端，业务和技术的能力融合要逐步到达一线团队上的融合，从一线延伸客户身上。</p><p></p><h5>四、 配合业务模式转变</h5><p></p><p></p><p>数字化理应以业务模式为导向，伴随经济环境的变化、政策关注重点的变化，金融工作重点也必须在充分理解“八个坚持”的基础上“顺势而为”、“稳中求进”，新的发展方向应该会要求改变过于关注量的增长，对“流动性”的理解也应逐步转化为对“流动”是否通畅、精准的理解，将 KPI 导向真正转向政策任务、经济需要导向，将支持实体经济发展作为任务目标而不是层层分解落实增长性 KPI，金融应该带头儿退出“卷”的行列，走向高质量发展，即便略“卷”也应该是跟着需求略“卷”而不是跟着指标“卷”，但这种格局的形成需要一定的行业性共识，很难在商业博弈环境下形成，因此需要更强的行业引导力量。</p><p></p><p>这需要对经济全局有更好的理解，需要“金融一盘棋”的视角，而这种视角的形成离不开更好的数字化支持，真正指向跨行业互联的数字化支持、数据要素支持，金融之血要流向需要供血的地方，政策、需求、信息是最好的指引，而非指标。</p><p></p><p>本次中央金融工作会议规格之高、要求之实、改革之深，必将对金融行业的发展起到革故鼎新的作用，也会推动“数字金融”的发展再上新台阶。</p><p></p><h4>内容推荐</h4><p></p><p>11月19日-20日在上海成功举办的首届 FCon 全球金融科技大会，以「科技 + 金融，激发创新力量」为主题，汇聚了来自金融龙头企业的数百名技术高管，掀起一场探讨新时代金融科技未来的高潮。经征得大会分享嘉宾同意，InfoQ 数字化经纬为您奉上精彩演讲 PPT！关注「InfoQ 数字化经纬」，回复「金融创新」即可获取 PPT，深度洞悉科技趋势，助您引领金融创新未来！</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0e/0e09b84945701548f14ab91a2c49ef51.png\" /></p><p></p>",
    "publish_time": "2023-12-05 14:05:01",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "2023 深圳国际金融科技大赛决赛名单揭晓，12月16日深圳大学“决战”见！",
    "url": "https://www.infoq.cn/article/FzhKDk2oUSugP5JLj89l",
    "summary": "<p>金融与科技相互融合，为传统金融业的变革注入了强大动能，为了满足金融科技产业技术创新及人才需求，更好地推动金融科技产业发展，在深圳市地方金融监督管理局、深圳市福田区人民政府、深圳市南山区人民政府战略指导下，由深圳大学、微众银行、深圳香蜜湖国际金融科技研究院等多方联合举办的“<a href=\"https://www.infoq.cn/zones/fintechathon/campus2023/\">2023 深圳国际金融科技大赛（FinTechathon）——西丽湖金融科技大学生挑战赛</a>\"”于 10 月 16 日正式开赛。</p><p></p><p>这是一场面向金融科技前沿技术领域的学生团队<a href=\"https://www.infoq.cn/news/9AYU96ZSPoCZ6kyClK94\">竞赛活动</a>\"，大赛初赛报名及作品提交阶段共历时 43 天，向大赛组委会提交报名信息的 1500 余名学生组成了近 300 支学生队伍报名参赛，最终提交了 180+ 份作品。期间，来自深圳大学、清华大学、武汉大学、西安电子科技大学、中科院、微众银行等数十家学企单位专家评委通过技术公开课、线上答疑会、复赛答辩会等方式为赛队提出了专业建议，并对参赛作品进行了专业的评价和打分。经过初赛与复赛的激烈角逐、多位专家评委的综合评估与讨论，人工智能、区块链、产品经理三个赛道入围决赛的 30 支赛队名单终于出炉！以下为具体晋级名单（以下排名不分先后）：</p><p></p><p>人工智能赛道</p><p><img src=\"https://static001.geekbang.org/infoq/fd/fd91d1857b0853f09ab96eca7838ace8.png\" /></p><p></p><p>区块链赛道</p><p><img src=\"https://static001.geekbang.org/infoq/74/74baa4151ac1c4c0b84700850d0bb2c7.png\" /></p><p></p><p>产品经理赛道</p><p><img src=\"https://static001.geekbang.org/infoq/0c/0ced5e1a309b0154f2cae837f71f8a83.png\" /></p><p></p><p>截至目前，我们已经初步见识了参赛选手们的才华和实力，看到了大家夺奖的毅力和决心，然而决赛才是大家最终的竞技舞台。12 月 16 日，本届大赛决赛将正式在深圳大学拉开帷幕，区块链、人工智能赛道的入围赛队需要进行 36 小时编程马拉松，对<a href=\"https://www.infoq.cn/article/Yuid3uNuLHTe2aeliZbs\">初赛</a>\"提交的作品进行开发和完善，并参与现场路演答辩；产品经理赛道的入围赛队则需要通过现场答辩的方式来展示自己的项目，包括但不限于项目介绍、产品流程及功能说明等。</p><p></p><p>决赛阶段将产生三个赛道的一等奖、二等奖、三等奖赛队，获胜赛队除了能获得大赛奖杯、纸质获奖证书及独一无二的“区块链数字证书”外，还将瓜分大赛组委会准备的 69W+ 的赛事奖金。值得一提的是，本届大赛所颁发的区块链数字证书，为所有获奖者提供具有唯一标识的数字化获奖凭证。获奖选手可随时查看和下载，校方、招聘企业等也可以扫码快速验证证书真伪，达到可信验证、高效互通的效果。未来，区块链数字证书可进一步拓展到奖学金认证、技能培训认证等场景，为金融科技人才专业资格与资质提供便捷的查验与认证通道，助力构建金融科技人才培养可信体系。</p><p><img src=\"https://static001.geekbang.org/infoq/96/963443ea0765b2a88dc732d2721ccbd0.jpeg\" /></p><p></p><p>据悉，自 2019 年第一届大赛落地，该赛事至今已成功举办 5 届并于去年完成了品牌升级，其通过 5 年时间的沉淀，从“新势力”成长为了具有广泛影响力的赛事标杆。每届大赛的举办都会在行业内引起一波浪潮，共计已有 5000+ 名学生报名参赛，参赛选手们通过比赛，不仅提高了自己的技术水平和知识储备，还锻炼了自己的创新能力和团队协作能力，为未来的职业发展打下了坚实的基础。</p><p></p><p>为了持续保持每届大赛作品的技术前沿性和大赛的公平性，本届大赛组委会又一次特别邀请了多位政、学、企界的专家和大咖担当学术顾问，为大赛提供智力支持，并为金融科技行业发掘更多优秀人才。</p><p></p><p>截至今日，距离决赛开幕仅有 11 天的时间，留给选手们准备的时间已经不多了。这场决赛不仅仅是对技术和知识的考验，更是一场对心态和意志的挑战。对于参赛者们来说，这将是一场展现自我、突破自我的机会。希望大家都能够在决赛场上展现出自己最好的一面，用专业和热情向最后的胜利发起冲刺！</p>",
    "publish_time": "2023-12-05 14:09:43",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "KubeBlocks —— 在混合云上用云原生的方法管理数据基础设施",
    "url": "https://www.infoq.cn/article/Df8QpqJyZuArx3mPhwkx",
    "summary": "<p>KubeBlocks 基于近年来软件工程发展的新理念，实现了对多种类型的数据库、数据系统的统一抽象，通过领域模型抽象和低代码扩展来管理各种数据库，避免了烟囱式的建设。</p>\n<p>它为金融行业在 K8s 上搭建多地域混合云的DBPaaS 提供了一种开源解决方案。KubeBlocks 对数据基础设施提供了丰富的 Day-2 Operations 和基础设施即代码（IaC）自动化能力，通过声明式API来降低运维风险，针对行业用户也提供了 KubeBlocks Cloud / Enterprise 一站式多云多引擎数据库托管服务。</p>\n<p>演讲提纲：</p>\n<p>过去十年软件工程发展新理念<br />\n如何降低数据基础设施管理软件的复杂度<br />\nKubeBlocks 设计理念和方法<br />\nKubeBlocks 应用场景</p>\n<p>您将获得：</p>\n<p>了解基于新工程理念对于K8s上数据基础设施管理的重新思考<br />\n了解金融行业在混合云场景下，成本与体验兼备的数据管理解决方案</p>",
    "publish_time": "2023-12-05 14:19:56",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "引领人工智能革命的程序员、OpenAI的秘密武器Greg Brockman：五年前，我并不擅长机器学习",
    "url": "https://www.infoq.cn/article/FCley3cdJi5mbzCeaUE5",
    "summary": "<p>编辑 ｜ Tina</p><p>&nbsp;</p><p>Greg Brockman因担任 OpenAI 联合创始人兼首席技术官而闻名。</p><p>&nbsp;</p><p>Brockman曾于2008年在哈佛大学就读，后来转到麻省理工学院，但也没待多久，2010年，他退学加入金融科技初创公司 Stripe。随后，Brockman 在 Stripe 待了五年，最终成了公司 CTO，在这段时间里，Stripe 实现了爆炸式增长，成为科技行业中最有价值的创业公司之一。2015年他离开Stripe并创立了OpenAI。</p><p>&nbsp;</p><p>虽然 OpenAI 的 CEO Sam Altman 代表公司的公众形象，但 <a href=\"https://www.sohu.com/a/665266306_355029\">Brockman 是公司的秘密武器</a>\"：</p><p>Brockman 作为 OpenAI 的总裁，一直在推动 OpenAI 的产品前进。Altman 说： “如果没有他的参与，整个项目不可能以如此高的质量交付。”Quora 的 CEO Adam D’Angelo 则评论说，“Greg 是那个真正能使技术变成现实的人。”</p><p>&nbsp;</p><p>Brockman的日常职责与拥有该头衔的大多数科技领导者几乎没有任何相似之处——34 岁的 Brockman 没有直接下属，这使他免于常规的管理类繁琐事务，可以将大约 80% 的时间用于编程工作。</p><p>&nbsp;</p><p>“Greg 有极强的能力，能够看到每个技术问题的细节，对每个层次都了如指掌，同时也能非常有战略性地考虑每个部分需要如何协同工作。”Altman 说。</p><p>&nbsp;</p><p>Brockman是一位“流动人员”，在不同的团队之间游走，制定目标并推动团队在软件效率方面逐步改进。在达到特定节点时，他将项目交给管理者，并转向新项目。“我一直在不断地探索新领域。”Brockman说。</p><p>&nbsp;</p><p>在 OpenAI 的前几年，Brockman 和 Ilya Sutskever 做了大部分日常决策，Brockman 管理公司的软件工程师，而 Sutskever 则负责管理研究员。</p><p>&nbsp;</p><p>因此，Brockman 需要解决的一个难题是让研究员和工程师协同工作的问题，这让他必须需要了解人工智能相关的工作。而作为一个长期从事软件方面的工作，并且没有接受过正规的“人工智能”方面的本科教育的人来说，自学机器学习肯定具有挑战性。</p><p>&nbsp;</p><p>Brockman自称是“<a href=\"https://blog.gregbrockman.com/define-cto-openai\">人工智能方面的新手</a>\"”，在 OpenAI 工作的头三年里，虽然他一直梦想可以成长为一名机器学习专家，但是他的机器学习技术能力一直没有长进。但之后，他花了九个月的时间，终于完成了向机器学习实践者的转变。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f8/f843d10d5b3805166ad5398ce9bd4837.jpeg\" /></p><p></p><p>Greg Brockman过去的<a href=\"https://gregbrockman.com/\">文章和演讲</a>\"主要集中在软件方面。</p><p>&nbsp;</p><p>他曾写过一篇文章，来总结他的学习过程，在这篇“励志”文章中，Brockman指出，这很难，但并非不可能。在他看来，大多数优秀的程序员都会一些（或愿意学习）<a href=\"https://www.deeplearningbook.org/\">数学</a>\"，既然如此他们就也能做到这一点。他给我们的一个建议是：花时间进行试验、快速失败，然后继续根据现实世界的用例进行研究。下面让我们一起看看这篇文章：</p><p>&nbsp;</p><p></p><h2>Greg Brockman的自述：我是如何成为一名机器学习从业者的？</h2><p></p><p>&nbsp;</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/87/87845356966bf0a7e356547253590c21.png\" /></p><p></p><p>&nbsp;</p><p>在 2018 年假期期间学习机器学习</p><p></p><h2>早期</h2><p></p><p>&nbsp;</p><p>OpenAI 的一个基本原则是重视研究和工程——我们的目标是构建能够解决以前不可能完成的任务的工作系统（我们团队中有 25%的人主要使用软件技能，还有 25%主要使用机器学习技能，剩下 50%混合使用这两种技能）。所以从入职 OpenAI 的第一天开始，我的软件技能就一直很<a href=\"https://blog.gregbrockman.com/define-cto-openai#gym_1\">受欢迎</a>\"，这也致使我一直拖延学习机器学习技能。</p><p>&nbsp;</p><p>在帮助完成了<a href=\"https://openai.com/blog/openai-gym-beta/\">OpenAI Gym</a>\"项目之后，我被安排负责<a href=\"https://openai.com/blog/universe/\">Universe</a>\"项目。之后，我们团队又开始致力于<a href=\"https://openai.com/five/#timeline\">DOTA</a>\"项目——在开始机器学习之前，我们需要有人将游戏场景变成一个机器强化学习环境。</p><p>&nbsp;</p><p></p><h2>DOTA</h2><p></p><p>&nbsp;</p><p>在没有源代码的情况下将如此复杂的游戏转换成一个研究环境是一项非常有<a href=\"https://www.youtube.com/watch?v=UdIPveR__jw\">挑战性</a>\"的<a href=\"https://openai.com/blog/more-on-dota-2/#infrastructure\">工作</a>\"，每当我有所突破的时候，团队都会感到很兴奋。我知道如何打破游戏的 Lua 沙箱，在 GRPC 服务器上以编程的方式使用<a href=\"https://stackoverflow.com/a/426260\">LD_PRELOAD</a>\"控制游戏， 增量地将整个游戏状态转储到原 buf 中，&nbsp;并为我们可能想要使用的许多不同的代理配置构建一个对未来兼容的 Python 库和抽象层。</p><p>&nbsp;</p><p>但我感到当时有点盲目了。在<a href=\"https://blog.gregbrockman.com/figuring-out-the-cto-role-at-stripe\">Stripe</a>\"时，尽管我更倾向于基础设施解决方案，但我可以在堆栈的任何地方进行更改，因为我非常熟悉产品代码。在 DOTA 项目中，我不得不从软件的角度来思考所有的问题，这意味着有时我会碰到一些困难的问题，而这些问题本可以通过稍微不同的机器学习来避免。</p><p>&nbsp;</p><p>我想像我的同事 Jakub Pachocki 和 Szymon Sidor 那样，他们创造了驱动 DOTA 机器人的核心突破。他们并不认为 OpenAI 中的增强算法不能伸缩。为此他们编写了一个分布式强化学习框架，名为 Rapid，每两周左右就以指数形式进行扩展，运行的一直很顺畅。我希望能够做出一些关键的贡献，比如把软件和机器学习技能结合起来。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/63/6385c1c5c953b6a42d9a82a82cec0ee3.png\" /></p><p></p><p>&nbsp;</p><p>左边是 Szymon，右边是 Jakub</p><p>&nbsp;</p><p>2017 年 7 月，我似乎有了机会。软件基础设施很稳定，我开始着手一个机器学习项目。 我的目标是利用行为克隆从人类训练数据中教授神经网络。但我并没有完全准备好，我感觉自己会像一个初学者。</p><p>&nbsp;</p><p>我一直为一些小的工作流细节感到沮丧，这些细节让我不确定自己是否取得了进展，比如不确定某个给定的实验使用了哪些代码，或者意识到我需要将上周的结果与我没有正确存档的结果进行比较。更糟糕的是，我不断地发现一些小错误，这些错误一直在破坏我的结果。</p><p>&nbsp;</p><p>我对自己的工作开始失去信心，但奇怪的是，别人对我很有信心。人们会安慰说从人类数据中克隆行为是多么多么困难。而我总会从自己身上找问题来说明是我自己的问题，这可能是我更愿意相信是我能力问题而非项目问题。</p><p>&nbsp;</p><p>当我的代码被使用到机器人项目中时，我觉得一切困难都是值得的，Jie Tang 将我的代码用在蠕变阻塞上，然后通过强化学习对其进行微调。但是之后他找到了不用我的代码就能得到更好结果的方法，这也意味着我的努力没有带来任何成果。</p><p>&nbsp;</p><p>之后我就再也没有在 DOTA 项目上尝试使用过机器学习。</p><p>&nbsp;</p><p></p><h2>超时</h2><p></p><p>&nbsp;</p><p>在 2018 年的国际比赛中，我们输掉了两场比赛，大多数人都认为我们已经<a href=\"https://twitter.com/polynoamial/status/1032988066967965696\">竭尽所能</a>\"。但从我们的度量标准中，我们知道我们离成功已经非常靠近了，最需要的是用更多的数据训练学习。这意味着，我们需要降低对时间的要求。2018 年 11 月，我觉得自己有了一个机会，可以用三个月的时间来赌一把。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4f/4f8d5475a19a781d0e094af3ba08bd38.png\" /></p><p></p><p>&nbsp;</p><p>队员们在国际比赛中输掉了第一场比赛后情绪高涨</p><p>&nbsp;</p><p>当我的目标确定了之后，我往往能够做的更好。我决定试着做一个聊天机器人。我开始自学我们为<a href=\"https://openai.com/blog/openai-fellows/\">学员</a>\"制定的课程，只选择与 NLP 相关的模块。例如，我编写并训练了一个 LSTM 语言模型，然后是一个基于转换的模型。我还研读了<a href=\"https://colah.github.io/posts/2015-09-Visual-Information/\">信息论</a>\"等主题的书，阅读了许多论文，每一行都细细研读，直到完全吸收。</p><p>&nbsp;</p><p>其实进展过程很缓慢，这也是之前就预想到的。这让我想起了我刚开始编程时的感受，我一直在想，要花多少年的时间才能获得一种掌控感。老实说，我并不相信自己会擅长机器学习。但我一直在努力，因为……说实话，因为我不想被限制在只理解我项目的一部分，我想把全貌看清楚。</p><p>&nbsp;</p><p>我的个人生活也是让我坚持下去的一个重要因素。我和一个人开始了一段感情，他让我觉得即使失败也没关系。我和她一起在解决机器学习的问题中度过了我们的第一个假期，但无论因为学习耽误了多少计划好的活动，她都能理解并陪着我。</p><p>&nbsp;</p><p>一个重要的关键点是克服我不敢使用 DOTA 的障碍：对其他人的机器学习代码进行实质性的修改。我对找到的聊天数据集进行了<a href=\"https://github.com/openai/finetune-transformer-lm\">GPT-1</a>\"微调，并做了一些小修改，添加了我自己的原始采样代码。但当我试图生成更长的消息时，它变得非常慢，之前的恐惧也逐渐变成了沮丧， 我实现了 GPU 缓存——这一改变影响了整个模型。</p><p>&nbsp;</p><p>我尝试了好多次，寻求各种帮助，因为它们超出了我头脑中所能容纳的复杂性。几天后，当它可以正常工作时，我才意识到我学到了一些以前我认为不可能的东西：我现在理解了整个模型是如何组合在一起的，包括一些小的风格细节，比如代码基如何优雅地处理 TensorFlow 变量范围。</p><p>&nbsp;</p><p></p><h2>改进</h2><p></p><p>&nbsp;</p><p>经过三个月的自学，我觉得自己已经准备好做一个真正的项目了。这也是我觉得我可以从 OpenAI 的许多专家那里受益的第一点，当 Jakub 和我的联合创始人 Ilya Sutskever 同意为我提供建议时，我很高兴。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c5/c573d06b9682e7913e1285599b5d6294.png\" /></p><p></p><p>&nbsp;</p><p>Llya 在我们公司外唱卡拉 OK</p><p>&nbsp;</p><p>我们开始得到非常令人兴奋的结果，Jakub 和 Szymon 全职加入了这个项目。每当我看到他们在我的机器学习代码库中做出 commit 时，我都感到很自豪。</p><p>&nbsp;</p><p>我开始觉得自己具备机器学习能力了，虽然我还没有完全掌握。但这反映在了我能激励自己专注于机器学习工作的时间上——我现在的编程时间大约是<a href=\"https://twitter.com/sama/status/792898456650076160?lang=en\">我过去工作时间</a>\"的 75%。</p><p>&nbsp;</p><p>这是第一次，我觉得我正在步入正轨。起初，我被似乎无穷无尽的机器学习新概念淹没了。在最初的六个月里，我意识到我可以在不断学习全新的基础知识的情况下取得进步。我仍然需要在许多技能上获得更多的经验，比如初始化一个网络或设置一个学习进度计划，但现在的工作感觉是渐进的，而不是潜意识中认为不可能。</p><p>&nbsp;</p><p>从我们的研究员和学者项目中，我知道拥有扎实的线性代数和概率基础的软件工程师只需几个月的自学就能成为机器学习工程师。但不知何故，我说服自己，让自己认为是一个例外，无法学习。但是我错了——即使是在 OpenAI 这样的公司，我也不能进行角色转换，因为我不愿意再次成为一个初学者。</p><p>&nbsp;</p><p>你可能也不是一个例外。如果你想成为一个深度学习的实践者，你一定可以。你需要给自己失败的机会。如果你从失败中学到足够多的东西，你就会成功——而且成功所花的时间可能比你想象的要少得多。</p><p>&nbsp;</p><p>在某种程度上来说，和优秀的专家一起工作对你会很有帮助。这是我非常幸运的一个地方。如果你是一个优秀的软件工程师，请记住，有一种方法可以让你跟优秀的人一起工作——来 OpenAI<a href=\"https://openai.com/jobs/\">工作</a>\"吧!</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.cn/article/xFSNjrv9MaNdsODqOITh\">https://www.infoq.cn/article/xFSNjrv9MaNdsODqOITh</a>\"</p>",
    "publish_time": "2023-12-05 14:47:19",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "C++之父Bjarne Stroustrup：我会为全球数十亿行 C++ 代码带来一个崭新的解决方案",
    "url": "https://www.infoq.cn/article/1wY3Xq56dJ6CMNwlgAVi",
    "summary": "<p></p><blockquote>在 CppCon C++ 会议上，这位 C++ 的创建人明确了该编程语言中迫切需要的安全措施具体都有哪些。</blockquote><p></p><p><img src=\"https://static001.geekbang.org/infoq/b5/b51440684f5cca79aab4bbb7c3fc6369.jpeg\" /></p><p>Bjarne Stroustrup，这位 72 岁的 C++ 创建者上个月在编程语言年度大会上发表了前瞻性的主题演讲。</p><p>&nbsp;</p><p>当 C++ 社区聚集在科罗拉多州奥罗拉市参加“CppCon”C++ 会议时，Bjarne Stroustrup 在一场演讲中向观众承诺，他将首先明确该编程语言所需的安全措施的具体类型，“然后我将向大家展示几十年来我们一直在这方面努力的成果。”</p><p>&nbsp;</p><p>Stroustrup 花了一些时间来回应批评。批评者说问题出在 C++ 本身，解决方案应该是改用另一种语言。他还具体介绍了一项提案，该提案增加了新的安全工具来解决批评者指出的问题，最终会为全球数十亿行 C++ 代码带来一个崭新的解决方案。</p><p></p><h2>反对更换编程语言的案例</h2><p></p><p>在演讲一开始，Stroustrup 分享了一张题为“安全不仅仅是类型安全”的幻灯片，列出了从资源泄漏和溢出到内存损坏和计时错误的各种各样的安全问题。这里有并发错误、终止错误——当然还有类型错误。 “人们一般提到的安全性只涉及内存安全——但这还远远不够……而且与其他语言（包括 C++ 和 C）互操作的需求往往缺乏关注。而且转换编程语言的成本可能会非常高。很少有人提到这一点……”</p><p>&nbsp;</p><p>“再说了——到底选哪种语言来代替呢？就我从目前大家的建议来看，我们将用大约七种不同的语言来取代 C++。到替换完成时（40 年后），我们可能会有 20 个不一样的语言选项，而且它们必须能够互操作。这会是一大难题。”</p><p>&nbsp;</p><p>Stroustrup 在演讲中还指出，“许多所谓的‘安全’语言将所有低级内容外包给 C 或 C++”，用这种办法来暂时逃避使用它们的语言来访问硬件资源甚至操作系统（通常是用 C 语言编写的），乃至“可信代码”的需求，这些代码实际上可能非常古老，隐藏在外部库中……或者是用完全不同的编程语言编写的。</p><p><img src=\"https://static001.geekbang.org/infoq/55/559da4215570a2d18bfb1ad596aedec5.jpeg\" /></p><p>Stroustrup 称我们目前的情况是“处于使用渐进和渐进方法的趋势中，而非只采取全新的方法。”一张幻灯片的结尾甚至引用了加尔定律：“一个有效的复杂系统总是由一个有效的简单系统演化而来。”</p><p>&nbsp;</p><p>正如 Stroustrup 所见，“这种只在一头构建一个新系统，而不存在任何旧系统问题的想法是一种幻想。但这是一个非常流行的幻想。”</p><p></p><h2>“我们接下来要走向何方？”</h2><p></p><p>演讲进行到大约 54 分钟时，Stroustrup 告诉听众，“现在我想谈谈未来的事情：我们现在会走向何方……？ ”</p><p>&nbsp;</p><p>Stroustrup 将我们目前的情况称为“一个机会”，提醒大家自 C++ 诞生以来，类型和资源安全一直是其目标。 “我们当时拥有的硬件无法保证完全安全，现在也无法保证所有语言和所有用例的安全。”但 Stroustrup 不希望看到 C++ 的内容表达受到限制，事实上，他设想了一种仍然遵守该语言 ISO 标准的解决方案。 “我们需要它是 C++。也就是说，我们能做的事情不应该受到限制，尽管我们做事的方式可能会受约束。”</p><p>&nbsp;</p><p>Stroustrup 也不希望看到大量额外的运行时开销。 “性能不应该有任何下降……实际上，一些编写安全代码的技术可以提高性能。我主要说的是编译器和静态检查，因为它是免费的，或者真的可以提高性能。”</p><p>&nbsp;</p><p>Stroustrup 找到了他的解决方案：配置文件。 （指的是需要遵循的一组规则，可以实现特定的安全保证。）它们由 ISO C++ 标准定义，解决常见的安全问题，例如指针和数组范围。在回答观众后来提出的，关于添加新工具的困难的问题时，Stroustrup 指出，C++ 编译器本身现在是一个相当复杂的静态分析器，并且还可以负责满足配置文件的要求。因此，谈到添加安全改进工具时，“我认为配置文件注释应该有助于解决这个问题。”</p><p>&nbsp;</p><p>Stroustrup 提出了总体策略：使用静态分析来消除潜在错误。但“全局静态分析是无法承受的，”Stroustrup 补充道。 “所以基本上我们需要一些规则来简化我们正在编写的内容，以便有效且廉价地进行本地静态分析......然后提供一些库来更好地依赖这些规则。”</p><p>&nbsp;</p><p>一张幻灯片还指出了另一个优点：“支持从旧代码到提供安全保证的现代代码的逐步转换。”该幻灯片强调，将有一套标准的“基本”保证，以及更广泛、开放的可用保证。 Stroustrup 说：“我想到的是类型和资源安全、内存安全、范围安全。算术安全之类的事情可以标准化。”并且还会有对不同代码片段应用不同保证的规则。</p><p>&nbsp;</p><p>代码甚至可以得到应用保证的明确表达（从而让未来的读者放心）。 Stroustrup 又切回了前面的幻灯片，也就是那张标题为“安全不仅仅是类型安全”的幻灯片，强调了资源泄漏、溢出、内存损坏、计时错误、并发错误、终止错误——当然，还有类型错误。</p><p>&nbsp;</p><p>一张幻灯片简洁地说明了这一点：“小心”并不能扩展。因此，虽然核心指南可能建议安全的编码实践，但“我们需要强制执行的规则。”正如 Stroustrup 所说，“我们必须制定安全使用规则。我们必须提供方法来验证人们是否确实做了他们想做的事情。”Stroustrup 指出，他所描述的大部分内容都已经被尝试过，甚至是规模化的实践。 “但没有哪里会将这一切整合成一个一致、连贯的整体。这就是我认为我们应该做的。”</p><p>&nbsp;</p><p>一张幻灯片用六个词列出了公式：卫生规则 + 静态分析 + 运行时检查。Stroustrup 放了一张幻灯片，表示 C++ 可以消除许多常见错误，包括未初始化的变量、范围错误、空指针取消引用、资源泄漏和悬空引用。</p><p>&nbsp;</p><p>演讲接近尾声时，Stroustrup 进一步阐述了细节。 “我建议你采用基于模块的控制。”该幻灯片展示了它在代码中的工作机制。</p><p><code lang=\"null\">export My_module[[provide(memory_safety)]];\nimport std [[enable(memory_safety)]];\nimport Mod [suppress(type_safety)]]; </code></p><p>代码内控件也在开发中，它可应用于代码分段。</p><p><code lang=\"null\">[[suppress(type_safety)]] X\n[[enforce(type_safety)]] X</code></p><p>Stroustrup 还对首批标准配置文件提出了建议。 （类型安全、范围和算术）。 Stroustrup 放了一包含 11 个新关键字的幻灯片，说道：“这里从语法方面总结了如何做到这一点。”</p><p><img src=\"https://static001.geekbang.org/infoq/22/2263fa87c0d3d01fb42a80bf6a49b0f3.jpeg\" /></p><p>“这项工作正在进行中，”Stroustrup 告诉观众。 “有相关论文，你可以去查一下。也有相关讨论。不过总体上我们还没有成型。”但是“我们在经典 C、‘带类的 C’以及 C++ 11 后已经走了很长一段路。”</p><p>&nbsp;</p><p>最后一张幻灯片说的是“你能提供什么帮助”，Stroustrup 建议用户可以帮助完善配置文件，正式确定它们的规格。 （“我的理想是像 Profiles Light 这样的东西，它提供了配置文件的大部分保证，但没法大包大揽，因为静态分析器还无法做到这一点。”）</p><p>&nbsp;</p><p>他创建了一个 GitHub 存储库（<a href=\"https://github.com/BjarneStroustrup/profiles\">https://github.com/BjarneStroustrup/profiles</a>\"），“大家可以在其中提出建议，我也可以在里面放我的草稿等，这样我们就可以创建一个社区，设法在合理的时间内完成这些工作。”</p><p>&nbsp;</p><p>这个存储库提出的问题是怎样才能让配置文件成为“满足各种 C++ 安全需求的全行业工具”，并将该概念称为一个框架。 “必须开发并部署许多组件才能让工具广泛流行。大家已经做了很多工作，但广泛应用的工具却相对较少。这里是一个愿望清单。请尽你所能提供帮助。”</p><p>&nbsp;</p><p>视频链接：<a href=\"https://youtu.be/I8UvQKvOSSw\">https://youtu.be/I8UvQKvOSSw</a>\"</p><p>&nbsp;</p><p>原文链接：<a href=\"https://thenewstack.io/bjarne-stroustrups-plan-for-bringing-safety-to-c/\">https://thenewstack.io/bjarne-stroustrups-plan-for-bringing-safety-to-c/</a>\"</p>",
    "publish_time": "2023-12-05 15:00:45",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "永不消逝的工匠：AI崛起与编码者涅槃",
    "url": "https://www.infoq.cn/article/0PY4NyD9cPDe4pEQlRVa",
    "summary": "<p>就像我的父母坚信我能读书写字一样，我理所当然地认为，我的孩子也一定能像我一样编程。编程是一门新兴艺术，也是一门基本技艺，而且正日益变得重要。熟练掌握编程是对孩子读写能力有益的补充，还能让他们保持就业竞争力。在我写下这些文字时，我的妻子怀着我们的第一个孩子，离预产期大约还有三周。我是一名专业的程序员，但等到孩子能够打字的时候，编程作为一项有价值的技能可能已经从这个世界上淡出了。</p><p>&nbsp;</p><p></p><h2>有了GPT，我失去了对编程的热情</h2><p></p><p>&nbsp;</p><p>我第一次冒出这种想法是在今年夏天的一个星期五的早晨，当时我正在开发一个小型的业余项目。几个月前，我和朋友Ben决定尝试完全让计算机自己制作一款类似“纽约时报”风格的填字游戏。2018年，我们曾借助软件制作过一款字谜游戏，我们做的事情很少——只是在某些地方根据需求做了少量改动。现在，我们尝试开发一个不需要人工干预的填字游戏生成程序。</p><p>&nbsp;</p><p>在过去，开发类似的项目既涉及硬件部分，也涉及软件部分，Ben更擅长硬件。我们曾经做过一款霓虹灯牌，当地铁接近我们公寓附近的站点时会发光。Ben负责制作玻璃灯管，并连接了变压器的电路板，我则编写了处理交通数据的代码。Ben也有过一些编程经历，但很短暂，而且已经过去了二十多年，所以主要的编程工作留给了我。不过，对于新的填字游戏项目，Ben引入了第三个“参与者”。他订阅了ChatGPT Plus，并使用GPT-4作为编程助手。</p><p>&nbsp;</p><p>然后，一些奇怪的事情发生了。我和Ben讨论了项目需要用到的一些程序。然后，很快地，Ben就弄好了。有一次，我们需要一个能够根据字典文件打印一百行随机内容的命令。我思考了一会儿没有思路，于是尝试使用谷歌搜索。我尝试了一些我能够找到的方法，而正当我开始写代码时，Ben把我们的想法告诉了GPT-4，并得到了完美可运行的代码。</p><p>&nbsp;</p><p>像这样的命令是出了名的繁琐，应该所有人都会去查，所以算不上是真正的编程。几天后，Ben说想要开发一款 可以对字典中的单词进行评分的iPhone 应用，但他不知道开发 iPhone 应用有多痛苦。我曾经尝试过几次，都半途而废。我觉得苹果的开发环境很难入门，不仅需要学习一门新的编程语言，还需要熟悉新的编辑和运行代码的程序。你还要学习各种“用户界面组件”和将它们组合在一起的方法，最后，你还需要弄清楚如何打包应用程序。要学习的东西堆积如山，似乎不值得这么去做。但是，第二天早上，我的收件箱里出现了一个完全符合Ben要求的应用程序。它可以完美地运行，还采用了非常可爱的设计。Ben说这是他花几个小时做出来的，GPT-4 承担了大部分繁琐的工作。</p><p>&nbsp;</p><p>如今，大多数人都有过使用AI的经历，但并非所有人都对它感到印象深刻。Ben最近才说：“直到我开始让它帮我写代码，我才真正对它肃然起敬。”我怀疑那些本来就生性多疑的人，那些看着ChatGPT输出生硬文字或虚假事实的人，他们仍然会低估正在发生的一切。</p><p>&nbsp;</p><p>原本需要费劲一生才能掌握的知识和技能，现在一口就能被吞下。对于我来说，编程一直是一个无穷无尽、丰富多彩的领域。现在，我发现自己想要为它写一篇挽歌。</p><p>&nbsp;</p><p>我想起了李世石。李世石曾是世界顶级围棋选手，也是韩国的民族英雄，但现在最出名的是他在2016年输给了一个叫作AlphaGo的计算机程序。当初，在开始比赛时李世石相信自己能够轻松击败人工智能。然而，在经过了长达数天的比赛之后，他输了。李世石在新闻发布会上说：“我为自己的无能感到抱歉。”三年后，他退役了。似乎有一个问题在困扰着李世石：这个让他费劲了大半生的东西会变成什么？</p><p>&nbsp;</p><p></p><h2>我曾经十分痴迷并且膜拜编程</h2><p></p><p>&nbsp;</p><p>我对计算机的痴迷始于六岁那一年。那是在九十年代早期的蒙特利尔，当时我和哥哥在玩《真人快打》游戏。他告诉了我一些“必杀技”——一些可怕而机智地击败对手的方法，但我们都不知道如何施展这些技能。他在MS-DOS终端拨号连接了一台FTP服务器，然后输入了一些晦涩的命令。很快，他打印出了一页代码——在游戏中使用的必杀技指令。我们回到地下室，开始互相爆头痛击。</p><p>&nbsp;</p><p>我曾经以为我的哥哥是一名黑客。和许多程序员一样，我也曾经梦想着入侵和控制远程系统，重点不是制造混乱，而是找到隐蔽的东西。1986年，Loyd Blankenship在《黑客宣言》一文中写道：“我的罪过就是太过好奇了。”1995年的电影《骇客天团》中有一个场景，Dade Murphy在地下俱乐部证明自己的实力：有人从背包里掏出一本本五颜六色的电脑书，Dade从封面上认出了每一本：绿色的关于国际Unix环境的书，红色的关于N.S.A.可信网络的书，还有一本封面上画着身着粉红衬衫的家伙在玩IBM个人电脑。Dade把他的专业知识用在了学校的喷水灭火系统上，还帮着清理油轮的压舱物——所有这些都是通过敲击键盘来完成的。这个故事告诉我们知识就是力量。</p><p>&nbsp;</p><p>但到底要怎样才能学会黑客技术呢？在我上五年级时，我们家在新泽西定居。在上高中时，我去了肖特山购物中心的Borders书店，买了Ivor Horton写的《Visual C++入门》（Beginning Visual C++）。它长达1200页——我的第一本魔法书。就像许多其他教程一样，它一开始很简单，然后，突然，它就不那么简单了。中世纪的学生把初学者遭遇学习失败的时刻称为“驴桥”（Bridge of Asses，或理解为“笨人难过的桥”）时刻。这个术语源于《欧几里得几何原本》第一卷的第五个命题，这是书中第一个难以理解的概念。那些成功跨过驴桥的人将继续掌握几何学，过不去的人只能望洋兴叹。《Visual C++入门》的第4.3节，关于“动态内存分配”，就是我的驴桥。可惜，我没有跨过去。</p><p>&nbsp;</p><p>但我并没有放弃这个课题，我还记得事情发生转变的那一刻。那是一次长途飞行，我带了一台笨重的笔记本电脑和一张装有Borland C++编译器的CD-ROM。编译器将你写的代码转换成机器可执行的机器码，我已经花了好几天时间才让这个编译器跑起来。按照惯例，每个编程初学者的第一个程序是“Hello, world.”。当我尝试运行我的版本时，只看到了无穷无尽的错误消息。解决了一个问题，又冒出了另一个。我读过《哈利·波特》系列，我感觉自己拥有了一把扫帚，只是还没有学会让它飞起来的咒语。我知道如果我能做到的话可能会发生什么，所以我努力坚持着。我从中悟到了一个道理，编程实际上并不是关于知识或技能，而是耐心，或者说是对这件事的痴迷。程序员是能够忍受无尽乏味的人。想象一下，在没有图片的情况下，用一种你很少说的语言，在电话里向一个傻瓜解释如何组装家具。再想象一下，你得到的唯一回应是，你提了一个荒谬的建议，而家具组装得越来越不像样。所以，当你终于完成了这件事，你会感到如释重负。我清楚地记得自己趴在飞机过道上，最后一次按下了回车键。然后，我坐了起来，这一次程序竟然做了我要它要做的事情。“Hello, world”出现在光标上方，仿佛一个智者醒来并向我介绍它自己。</p><p>&nbsp;</p><p>我们大多数人都不会成为《黑客》中所描述的那种黑客。所谓的“hack”，用程序员的话来说，就是修修补补——通过代码来表达创造力。我从未正式学习过编程，我只是在瞎折腾，让电脑做一些有用的或令人愉快的小事情。在我上大一时，也就是2006年，为了不错过Tiger Woods在大师赛中的排名情况，我写了一个程序，在pgatour.com上搜索排行榜信息，并在他打出小鸟球或柏忌球时给我发短信。后来，在英语课上读了《尤利西斯》之后，我写了一个程序，从书中随机抽取句子，计算它们的音节，并汇编俳句——这是一种比现在的聊天机器人更原始的语言反刍，但我认为，它已经能够写出真正的诗歌：</p><p>&nbsp;</p><p></p><blockquote>I’ll flay him aliveUncertainly he waitedHeavy of the past</blockquote><p></p><p>&nbsp;</p><p></p><h2>作为一名程序员，我曾经历过最好的时代</h2><p></p><p>&nbsp;</p><p>我开始认真对待编程。我主动提出为朋友的创业公司开发程序。我逐渐了解到，计算机世界是庞大的，就像是地质学中的沉积物层一样有序。从Web浏览器到晶体管，每个子领域或系统都是建立在其他更古老的子领域或系统之上，层层叠加但有条理。你挖得越深，就越是会感受到赛车手Jackie Stewart所说的那种“机械同理心”，即对机器优势和局限性的一种感知，知道如何让它发挥作用。</p><p>&nbsp;</p><p>在朋友的公司里，我感到我的机械同理心在变强。大二时，我和朋友一起看《危险边缘》，他建议我根据它制作一款游戏。我想了几个小时，然后非常失望地告诉他，这超出了我的能力范围。但是，这个想法在我上大三时再次出现，而此时我终于找到了解决办法。我现在对这台机器能做什么有了更好的认识。我花了接下来的14个小时去开发游戏。几周之后，玩这款游戏已经成为我朋友之间的常规活动。这段经历意义深远。我可以理解为什么人们愿意把他们的生命时光花到手工艺术上：没有什么比看着别人享受你做的东西更有趣的了。</p><p>&nbsp;</p><p>在这期间，我完全沉浸在一中“纸牌屋”式的状态中，并把学习放在了一边。我努力，但并不是在学习上。有一个晚上，我在地下室里用6台机器来并行运行一个程序。我把满是数字的打印件放在地板上，思考着一种路径规划算法。代价是，我经历了一场噩梦——参加期末考试却一无所知。2009年，在数十年来最严重的金融危机期间，我以2.9的G.P.A.（平均绩点）毕业了。</p><p>&nbsp;</p><p>但我还是很轻松地得到了我的第一份全职工作。我有程序员工作经验，也没有人问我的成绩如何。对于年轻的程序员来说，这是他们的繁荣时期。各家公司都在争夺顶尖的程序员。对有经验的程序员的抢夺如此激烈，以至于他们抱怨“招聘邮件满天飞”。大学计算机科学专业的热度开始爆炸性增长。（我的学位是经济学。）声称能在不到一年时间内将初学者变成高薪程序员的编程“训练营”开始出现。</p><p>&nbsp;</p><p>在我二十多岁时的一次面试中，公司的首席执行官问我觉得自己值得拿多少薪水。我说了一个让自己都感到尴尬的数字。他当场起草了一份合同，给出的薪水比我要求的高出百分之十。“软件工程师”的技能备受推崇。在我工作过的一家公司，有人因为使用 HipChat（Slack的前身）直接问我的一位同事问题而惹上了麻烦。他被告知“永远不要直接使用 HipChat 联系工程师”。我们太重要了，你们不能那样！</p><p>&nbsp;</p><p>这是一个利率接近于零、科技行业增长惊人的时代。一些规范已经成形，像谷歌这样的公司在告诉这个行业，程序员可以享受免费的浓缩咖啡和热食，世界一流的医疗保健和育儿假，现场健身房和自行车室，随意的着装，以及“20%的时间”，这意味着他们每周可以花一天时间做任何他们喜欢的事情。人们认为他们的技能是如此的重要，以至于产生了一种迷信。例如，估计编码任务可能需要多长时间被认为是愚蠢的，因为程序员可能随时翻开石头挖出一堆Bug。交付期限是一种诅咒，如果交付的压力太大，程序员只需要说出“精疲力竭”这个词就能额外获得几个月的时间。</p><p>&nbsp;</p><p>我从一开始我就感觉这一切并不太对劲。我们所做的事情真的那么珍贵吗？这种繁荣能持续多久？在我十几岁的时候，我做过一些网页设计。在当时，这项工作曾经很受欢迎，也很受人尊重。你可以用一个周末完成一个项目，并赚到数千美元。但随之而来的是Squarespace这样的工具，它可以让披萨店老板和自由艺术家只需点击几下鼠标就创建好自己的网站。对于专业程序员来说，一部分高薪、相对不费力的工作消失了。</p><p>&nbsp;</p><p>程序员社区对这些变化做出的反应是——你必须不断提升技能，去学习更难、更晦涩的东西。软件工程师，作为一个物种，喜欢自动化。不可避免地，他们当中最优秀的那部分人所构建的工具会使其他类型的工作过时。这种本能解释了为什么我们会得到这么好的照顾：代码有着巨大的杠杆作用。一款软件可能会影响数百万人的工作，甚至会取代程序员自己。我们应该把这些进步看作是涨潮，潮水会逐渐淹没我们的裸露的双脚，但只要我们持续地学习，就不会被潮水淹没。这是个明智的建议，除非遇上了海啸。</p><p>&nbsp;</p><p></p><h2>ChatGPT来了，它改变了我们的工作</h2><p></p><p>&nbsp;</p><p>当我们被允许在工作中使用人工智能聊天机器人来帮助编程时，我故意避免使用它们。我原以为我的同事们也会这样。但很快，我从他们的屏幕上看到人工智能聊天会话的颜色——那种问答风格的斑马条纹。一种常见的说法是，这些工具会让你更加高效，在某些情况下，它们可以帮你以快十倍的速度解决问题。</p><p>&nbsp;</p><p>我不确定我是否想要那样。我喜欢编程过程本身，也喜欢“自己是个有用的人”的感觉。我熟练使用的工具，比如我用来格式化和浏览代码的文本编辑器，可以同时满足这两个需求。它们加强了我对这门手艺的实践——虽然它们能让我更快地完成工作，但我仍然觉得自己功不可没。但人工智能，就像人们对它所描述的那样，似乎有所不同。它提供了很多帮助，我担心它会剥夺我既享受解决难题的乐趣又满足于成为解决问题的人的满足感。我可以无限提高生产力，但我所能展示的可能只有结果而已。</p><p>&nbsp;</p><p>大多数程序员的实际工作成果很少是令人感到兴奋的。事实上，它们往往平淡无奇。几个月前，我下班回家告诉妻子，我度过了一个非常愉快的一天，解决了一个特别有趣的问题。我正在开发一个生成表格的程序，有人想要添加一个跨多个列的标题——而我们的自定义布局引擎并不支持这个功能。这项工作很紧急：这些表格被用在重要的文件中。因此，我把自己关在房间里大半个下午。这里有许多需要解决的子问题：应该如何让布局引擎用户表达他们想要一个跨列的标题？它们的代码应该是什么样子的？还有一些琐碎的细节，如果忽略了就会出现Bug。例如，如果跨列标题其中的一列因为没有数据被删除了该怎么办？我知道这是美好的一天，因为我必须拿出笔和纸——我在绘制可能的场景并反复检查我的逻辑。</p><p>&nbsp;</p><p>然而，如果以鸟瞰的角度看那天发生的事情会怎样？一个表格得到了一个新的标题，很难想象还有什么比这更平凡的事情了。对于我来说，乐趣完全在于这个过程，而不在于结果。如果这个过程只需要进行三分钟的 ChatGPT 对话，那么这个过程会变成什么样子？作为程序员，我们的工作除了字面上的编码之外，还涉及许多其他事情，比如指导新人和设计系统，但编码一直是其根本所在。</p><p>&nbsp;</p><p>在我的整个职业生涯中，我一直因解决编程琐碎难题的能力而被雇主选中。然而，突然间，这种能力变得不那么重要了。</p><p>&nbsp;</p><p></p><h2>被生成式AI征服</h2><p></p><p>&nbsp;</p><p>我从Ben那里得知了很多信息，他一直告诉我他使用 GPT-4 取得了惊人的成果。事实证明，它不仅擅长处理琐碎的事情，还具备了资深工程师的素质：它可以从丰富的知识库中提出解决问题的方法。在一个项目中，Ben将一个小型扬声器和一个红色 LED 灯泡连接到查尔斯国王肖像上。他的想法是当用户在网站上输入文字时，扬声器会播放声音，灯光会用摩斯密码闪烁出消息。但为设备编写获取消息的程序困扰着Ben，这似乎需要专业的知识，不仅涉及他所使用的微控制器，还涉及存储消息的后端服务器技术 Firebase。Ben向我求助，我咕哝了几句。事实上，我并不确定他想要的是否可能实现。然后他问了 GPT-4，它告诉Ben，Firebase有一个功能可以让这个项目变得简单得多。就这样，这里还有一些代码，这些代码与微控制器是兼容的。</p><p>&nbsp;</p><p>尽管我害怕使用 GPT-4，也对为了使用它需要向 OpenAI 每月支付二十美元感到有些不适，但我还是开始通过Ben来探索它的能力。我们一起研究我们的填字游戏项目。我会说：“你为什么不试着用这个提示词？”他会把键盘递给我。我会说：“不，你来操作”。我们在一起逐渐摸索出了这个人工智能的能力。Ben在这方面的经验比我多，似乎更能高效地利用它。正如他后来所说的，他自己的神经网络已经开始与 GPT-4 的神经网络对齐了。我想说他已经获得了机械同理心。</p><p>&nbsp;</p><p>有一次，他做了一件让我感到特别惊讶的事情，他让这个人工智能开发了一款贪吃蛇游戏，就像旧诺基亚手机上的那种。在与 GPT-4 进行了一番简短的交流之后，他让它修改游戏，当你输掉比赛时，它会显示你偏离最有效的路线多远。机器人花了大约十秒钟完成了这个任务。坦率地说，我不确定自己能不能完成这项任务。</p><p>&nbsp;</p><p>国际象棋领域数十年来一直被人工智能所主宰，一位玩家唯一的希望就是与机器人搭档。这种半人半人工智能的团队（也就是所谓的半人马）可能仍然能够击败单打独斗的最优秀的人类和人工智能引擎。编程还没有发展到国际象棋那样的程度，但半人马已经出现了。目前看来，单打独斗的GPT-4是一个比我更糟糕的程序员，Ben更糟糕，但Ben和GPT-4结合起来就很危险了。</p><p>&nbsp;</p><p>很快，我屈服了。我开发了一个小型的搜索工具，希望突出显示用户查询与结果匹配的部分。我将用户查询分割成单词，这让事情变得复杂。我的耐心受到了考验，于是开始考虑使用 GPT-4。或许我可以花点时间写“提示词”，或者与人工智能聊一聊，而不是花一整个下午在编程上。</p><p>&nbsp;</p><p>1978年，计算机科学家Edsger W. Dijkstra在一篇题为《论“自然语言编程”的愚蠢》的文章中指出，如果你不是用C++或Python这样的正式编程语言来指导计算机，而是用你的母语，那么你就是在拒绝计算机的有效性。他写道，正式的编程语言是“一种非常有效的工具，可以排除各种各样无意义的废话，而这些是在使用我们的母语时几乎无法避免的”。Dijkstra的观点在编程界成为了一个共识。2014年，当这篇文章在 Reddit 上再次被传开时，一位评论者写道：“我不确定这两种情况哪一种更可怕：一个是‘这个想法是多么地显而易见’，一个是‘许多人仍然不知道它’”。</p><p>&nbsp;</p><p>当我开始使用GPT-4时，我能明白Dijkstra说的是什么。你不能只是简单地对人工智能说：“帮我解决这个问题。”或许这一天终会到来，但现在它更像是一种你必须学会演奏的乐器。你必须仔细地说明你想要什么，就像和一个初学者交流一样。在搜索突出显示问题上，我发现自己一次性要求GPT-4做太多的事情，结果它失败了，然后又重新开始。每一次，我的提示词都变得不那么雄心勃勃了。最后，我并没有直接和它谈论搜索或高亮显示的问题，我把这个问题分解成具体的、抽象的、明确的子问题，这些子问题加在一起，就能得到我想要的东西。</p><p>&nbsp;</p><p>在发现了人工智能的能力后，我的工作生活开始发生变化。GPT-4就像一把锤子，什么东西在我眼里都成了钉子。我终于明白为什么办公室的电脑屏幕上总是满是聊天框，Ben又是如何变得如此高效的。于是我敞开心扉，更频繁地使用它。</p><p>&nbsp;</p><p>我回到了填字游戏项目。我们的谜题生成器以一种难看的文本格式打印输出，比如像“s”、“c”、“a”、“r”、“”、“k”、“u”、“n”、“i”、“s”、“”、“a”、“r”、“e”、“a”这样字母行。我想将这样的输出转换成一个漂亮的网页，让用户能够探索网格中的单词，并能一目了然地显示得分信息。但我知道这项任务很棘手：每个字母都必须标记上它所属的单词，无论是横向的还是纵向的。这是一个很细致的问题，很可能会占用我一整个晚上的时间。</p><p>&nbsp;</p><p></p><h2>未来会是什么样的？</h2><p></p><p>&nbsp;</p><p>我的孩子快出生了，我的空闲时间不多了，于是我开始和 GPT-4 聊天。我们来来回回地交谈，有时候还得看一些代码才能理解它在做什么，但我几乎没有做过我曾经认为的那种编程式的思考。我没有考虑数字、模式或循环这些东西，也没有使用我的大脑来模拟计算机的活动。正如另一位程序员 Geoffrey Litt 在经历了类似的情况后所写的：“我从未让我的程序员大脑参与其中。”那么我都做了些什么？</p><p>&nbsp;</p><p>或许是因为感觉围棋游戏被永久性地贬低了，李世石选择退出这个游戏。我当初学习编程是因为我觉得计算机就像是一种魔法一样。计算机赋予了你力量，但你需要研究它的秘密——学习一种咒语，这需要一种特殊的思维方式。我觉得自己是被选中的。我埋头苦干，认真思考，积累晦涩的知识。然后，有一天，不需要思考和知识就可以达到许多相同的目的。从某种角度来看，这可能会让一个人的大部分工作看起来像是在浪费时间。</p><p>&nbsp;</p><p>每当我想到李世石，就会想到国际象棋。大约三十年前，当机器征服了这个游戏，人们担心再也没有理由去玩它了。然而，国际象棋从未像现在这样受欢迎过——人工智能使这个游戏变得更加活跃。我的一个朋友最近开始学习下国际象棋。他可以随时使用人工智能教练，这个教练可以给他提供正好符合他能力边界的棋局，并且在他输掉比赛后告诉他错在哪里。与此同时，国际象棋大师们在研究计算机的走法，就像在阅读神谕一样。学习国际象棋从未如此简单，研究它最深层的秘密也从未像现在这样令人兴奋。</p><p>&nbsp;</p><p>计算机科学尚未被征服。GPT-4 令人印象深刻，但普通人无法像程序员那样驾驭它。我仍然觉得我的职业是安全的。事实上，我感觉比以前更安全了。随着软件开发变得越来越容易，它会越来越普及，程序员将更多地转向设计、配置和维护。尽管我一直觉得编程中那些琐碎的部分最能让人投入其中、也最为重要，但这些并不是我特别擅长的。我没有通过很多大型科技公司的编程面试。我相对擅长的是知道什么是值得做的、用户喜欢什么，以及如何进行技术和人性层面的沟通。我的一位朋友把这个人工智能的时刻称为“平庸程序员的复仇时刻”。随着编码本身的重要性开始降低，也许软技能会大放异彩。</p><p>&nbsp;</p><p>这让我不确定我的孩子出生后该教他些什么。</p><p>&nbsp;</p><p>我甚至认为，当我的孩子长大成人，我们看待“程序员”的方式，就像我们现在回顾“计算机”发展历史一样。自己敲打C++或Python代码，最终可能看起来像在打孔卡上发出二进制指令一样荒谬。Dijkstra可能会感到震惊，让计算机做你想做的事情可能就像礼貌地提出请求那么简单。</p><p>&nbsp;</p><p>所以也许要教的不是技能，而是精神。我有时会想，如果我出生在另一个时代，可能会做些什么。在农业时代，编码者可能会研究水车和作物品种，在牛顿时代，可能会着迷于玻璃、染料和时间测量。最近我看了有关神经网络发展历史的口述资料，其中很多被访谈的人——出生于20世纪30年代前后的人——小时候曾经玩过收音机，这让我感到震惊。也许下一代人会在深夜里探究那些曾被他们的父母视为黑匣子的人工智能。我不应该担心编程时代的结束。黑客精神永存！</p><p>&nbsp;</p><p>【声明：本文由InfoQ翻译，未经许可禁止转载。】</p><p>&nbsp;</p><p>原文链接：<a href=\"https://www.newyorker.com/magazine/2023/11/20/a-coder-considers-the-waning-days-of-the-craft\">https://www.newyorker.com/magazine/2023/11/20/a-coder-considers-the-waning-days-of-the-craft</a>\"</p>",
    "publish_time": "2023-12-05 15:18:51",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "腾讯安全推出大模型隐私保护脱敏技术",
    "url": "https://www.infoq.cn/article/JFKgDD9292iZuigqEcdE",
    "summary": "<p>大模型已经被广泛应用在各类场景，帮助人们进行报告摘要、文本翻译、数据分析、业务风控等各项工作，极大地提升了工作效率，但同时公众对于大模型带来的数据泄露的隐忧也从未停止。</p><p>&nbsp;</p><p>近日，腾讯安全玄武实验室披露了一项关于大模型隐私保护的安全脱敏与还原（Hide and Seek, HaS）技术，有望帮助大模型产品使用者从本地终端侧防范隐私数据泄露。</p><p>&nbsp;</p><p>HaS为业内首个支持信息还原的自由文本脱敏技术，通过对用户上传给大模型的prompt（提示词）进行隐私信息脱敏，并在大模型返回计算结果后进行恢复，该方案兼顾了隐私安全和计算资源消耗：脱敏与还原算法经过4bit量化后权重文件仅500MB，可在手机、 PC等终端上部署。</p><p>&nbsp;</p><p>这是业内首个公开发布的、能被大模型用户部署于终端侧的隐私保护脱敏技术。借助这一技术，用户可以从“源头”免除使用云端大模型带来的数据泄露方面的担忧。</p><p>&nbsp;</p><p>据悉，这个模型主要适用于典型的NLP任务场景，例如机器翻译、文本摘要，文本润色、阅读理解、文本分类、情感分析等，其主要的技术难点在于如何解决实体识别与替换、实体指代消解、多义词识别、自纠错鲁棒性还原、实体翻译等。此前，不少大模型提供方以及专业安全厂商均在积极进行相关的尝试，但目前尚未有理想的解决方案。</p><p>&nbsp;</p><p>“在大模型应用中提示词是一种自由文本，而针对自由文本的隐私保护问题，一种全密态的解决方案是通过安全多方计算（Multi-Party Computation, MPC）协议实现安全推理。然而，MPC协议在计算成本和通信量上的高需求严重限制了其在大模型应用中的落地。”腾讯安全玄武实验室高级安全工程师陈昱表示，“实际上，多数场景下用户并不需要保护整句的信息不泄漏，而仅需要保护其中的隐私实体不泄漏。”玄武实验室经过正则匹配、近义词向量、BERT NER+CR等方法的不断探索试错后，最终提出了这项技术。</p><p>&nbsp;</p><p>实验表明，HaS的数据脱敏处理并不会对任务造成影响。在使用模型进行隐私保护与直接调用大模型相比“分类任务”与“翻译任务”两个场景的性能对比，在使用560M生成式方案下，文本分类任务的性能不仅没有下降，反而增加了0.14%；在1.7B标签式方案下，机器翻译任务性能仅下降了0.85%。</p><p>&nbsp;</p><p>腾讯安全玄武实验室将上述研究发现以论文形式发布，更多技术细节可参考玄武官方博客（https://xlab.tencent.com/cn/2023/12/05/hide_and_seek/）。</p><p>&nbsp;</p><p>“一些企业或者个人用户开发者通过部署本地大模型来规避隐私数据泄露，但这要求一定的技术门槛，对于重度隐私需求的用户来说，通过本地安全模型/算法来实现数据保护，可能是更可行的办法。”玄武实验室正在逐步丰富这一模型的应用覆盖面，并完善其部署和交付方式，以供企业用户和个人用户在未来能够便捷使用。</p><p>&nbsp;</p><p>&nbsp;</p><p></p>",
    "publish_time": "2023-12-05 18:49:37",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]