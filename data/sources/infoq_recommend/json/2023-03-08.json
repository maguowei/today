[
  {
    "title": "两会热点：组建国家数据局，数字化规划执行落实组织承接",
    "url": "https://www.infoq.cn/article/CUzrDiwNemwvhoVNCQ1V",
    "summary": "<p>3月7日，国务院机构改革方案正式公布。根据国务院关于提请审议国务院机构改革方案的议案，组建国家数据局。负责协调推进数据基础制度建设，统筹数据资源整合共享和开发利用，统筹推进<a href=\"https://www.infoq.cn/album/79\">数字中国</a>\"、数字经济、数字社会规划和建设等，由国家发展和改革委员会管理。</p><p></p><p>将中央网络安全和信息化委员会办公室承担的研究拟订数字中国建设方案、协调推动公共服务和社会治理信息化、协调促进智慧城市建设、协调国家重要信息资源开发利用与共享、推动信息资源跨行业跨部门互联互通等职责，国家发展和改革委员会承担的统筹推进数字经济发展、组织实施国家大数据战略、推进数据要素基础制度建设、推进数字基础设施布局建设等职责划入国家数据局。</p><p></p><p>国家数据局的成立标志着我国数字经济进入更为体系化、具体化的推进阶段。以数据作为关键生产要素，我国数字经济发展和数字中国建设将继续加速。</p><p></p><p>李克强总理在《<a href=\"http://www.china-cer.com.cn/guwen/2023030523535.html\">政府工作报告</a>\"》中简述今年工作重点时提到：</p><p></p><p></p><blockquote>我国经济结构进一步优化。高技术制造业、装备制造业增加值年均分别增长10.6%、7.9%；数字经济不断壮大，新产业新业态新模式增加值占国内生产总值的比重达到17%以上。持续推进政府职能转变。加快数字政府建设，90%以上的政务服务实现网上可办，户籍证明、社保转接等200多项群众经常办理事项实现跨省通办。推动产业向中高端迈进。支持工业互联网发展，有力促进了制造业数字化智能化。加快建设现代化产业体系。加快传统产业和中小企业数字化转型，着力提升高端化、智能化、绿色化水平；加快前沿技术研发和应用推广；完善现代物流体系；大力发展数字经济，提升常态化监管水平，支持平台经济发展。</blockquote><p></p><p></p><p>大力发展数字经济，成为今年两会的主旋律之一。作为数字中国顶层设计，上周发布的《<a href=\"https://www.infoq.cn/article/LBC3Rujd6xFoYfS2duGf\">数字中国建设整体布局规划</a>\"》明确了我国数字化规划蓝图和框架。其中，“打通数字基础设施大动脉”和“畅通数据资源大循环”被视为数字中国建设的两大基础。而国家数据局的组建，将成为规划具体执行落地的组织承接。</p><p></p><p>对此，浙江大学国际联合商学院数字经济与金融创新研究中心联席主任、研究员盘和林认为，当前<a href=\"https://www.infoq.cn/article/qZm63L9zkiD57cpFMsv7\">数据要素</a>\"流通依然存在诸多制度性难题无法解决，当前政府内部数据整合存在部门权限不够的问题，当前数据产业发展需要基础设施支持。成立国家数据局，一方面是提高国家对数据交易体制机制建设，以及数据基础设施建设的支持力度，用专业化的部门来推动数据产业发展，另一方面是通过高权限部门的方式，打通数据链路，实现数据整合。</p><p></p><p>盘和林表示，国家数据局对大数据基础产业，包括数据的收集、存储、处理、清洗、预标注等产业产生积极推动作用，对数据应用层面的大数据产业和<a href=\"https://www.infoq.cn/article/FF3O1p8eeJdGI1sFLUec\">人工智能</a>\"产业发展产生积极影响，对数据支撑的算力和算法领域也有助推，算力包括终端算力的智能芯片和云端算力的智算中心，数据中心等等。未来ICT设备产业将因此受益。</p>",
    "publish_time": "2023-03-08 00:00:44",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "已经过验证的五个测试自动化问题的解决方案",
    "url": "https://www.infoq.cn/article/k5vF3f3OWoelh1peYipW",
    "summary": "<p>本文讨论了阻塞团队自动化测试的五个典型问题。团队可以使用API和服务仿真来解决这些问题。</p><p>&nbsp;</p><p>在过去的15年中，我与不同的软件团队合作过，我注意到使用在线测试替身（如API和服务仿真）是一些已经了解了该技术团队的标准实践。他们通常是具有TDD和BDD经验的敏捷或极限编程（XP）团队。</p><p>&nbsp;</p><p>其他团队从未使用过模拟（mock）或仿真（simulator），主要是因为他们从未听说过它们。本文面向的是开始测试自动化之旅的团队，并展示了如何使用仿真来解决一些日常问题。</p><p>&nbsp;</p><p></p><h2>什么是API或服务仿真？</h2><p></p><p></p><p>使用仿真来替代真正的微服务、第三方服务、大型机或其他软件系统则称为API和软件仿真。你还可以找到类似这样的工具，如<a href=\"https://www.infoq.com/articles/stubbing-mocking-service-virtualization-differences/\">API模拟、服务虚拟化、在线测试替身、以及用于存根和模拟HTTP（S）和其他协议的工具等</a>\"。</p><p>&nbsp;</p><p>这些技术的名称并不那么重要。重要的是，它们能够独立地进行组件（<a href=\"http://xunitpatterns.com/SUT.html\">被测系统，SUT</a>\"）测试。</p><p>&nbsp;</p><p>你可以仿真<a href=\"https://en.wikipedia.org/wiki/API\">API</a>\"、<a href=\"https://en.wikipedia.org/wiki/Service_(systems_architecture)\">服务</a>\"或两者都仿真。我选择在本文中强调这两个名字，是因为我和我的客户发现，不同的团队其所熟悉的名称存在差异，这取决于他们所在的大洲或国家。</p><p>&nbsp;</p><p>我还注意到，例如，在使用HTTP的开发和测试人员中，“API”是一个流行的短语，而当你是与第三方服务提供商合作的公司中的开发或QA负责人时，“服务”可能更流行。</p><p>&nbsp;</p><p>我们使用图1中所示的微服务架构示例。这是一个典型的情景，我们有一个网站，该网站的后端有多个连接到数据库、第三方系统和遗留大型机的微服务。</p><p>&nbsp;</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a5/a5eba6367fa2ca528fa2b8c3771158cb.png\" /></p><p></p><p>&nbsp;</p><p>图 1：生产中的微服务架构示例</p><p>&nbsp;</p><p>图2展示了具有多个仿真的开发和测试基础设施。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/04/0457a5e01182cd426992d754553751b8.png\" /></p><p></p><p>&nbsp;</p><p>图 2：使用API和服务仿真的开发和测试基础设施</p><p>&nbsp;</p><p></p><h2>自动化测试覆盖率</h2><p></p><p></p><p>正如Martin Fowler十多年前所观察到的那样，<a href=\"https://martinfowler.com/bliki/TestCoverage.html\">度量测试覆盖率对于发现未经测试的代码非常有用，但作为质量目标却很糟糕。</a>\"</p><p>&nbsp;</p><p>我一开始时就提到这一点，是因为我在本文的部分内容中使用了代码覆盖率作为度量指标。我想澄清一下我所说的“20%的代码自动化测试覆盖率”是什么意思。这意味着，“我们知道我们有20%的代码被不同类型的自动化测试覆盖了，但80%的代码没有被测试覆盖。”这并不意味着“代码覆盖率是评估我们交付成果质量的一个很好的指标。”有更好的指标来衡量软件交付过程的质量，如<a href=\"https://www.thoughtworks.com/en-gb/radar/techniques/four-key-metrics\">这四个关键指标</a>\"。<a href=\"https://en.wikipedia.org/wiki/Behavior-driven_development\">BDD方式</a>\"也有助于提高测试质量。</p><p>&nbsp;</p><p>尽管如此，了解测试覆盖代码是一个好的开始。测试未涵盖的代码可能存在问题，如未检测到的错误或行为中的意外更改等。特别是，自动化测试覆盖具有提供可重复的回归套件或测试（测试工具）的特性，以帮助确保系统的行为在不同发布之间保持一致。</p><p>&nbsp;</p><p></p><h2>使用仿真解决测试自动化问题</h2><p></p><p></p><p>在产品的开发和测试过程中，开发人员和测试人员可能会遇到如下的几个常见问题：</p><p>&nbsp;</p><p>API或服务尚不可用。后端或第三方系统中的缓慢或手工过程。测试数据问题（需要设置测试数据；测试数据更改会破坏现有的自动化测试；需要刷新测试数据）。为错误场景测试设置假设场景。第三方API和服务限制。</p><p>&nbsp;</p><p>这些问题可以通过使用仿真来解决。下面我将详细介绍其中每种情况。</p><p>&nbsp;</p><p>图3 强调了在测试自动化过程的后期遇到这些问题时，这些问题是如何变得更严重的。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/76/766355bfaeb5ef20cf2c42e4525d1673.png\" /></p><p></p><p>图3：使用API和服务仿真更快地创建自动化测试</p><p>&nbsp;</p><p></p><h2>问题1：API或服务尚不可用</h2><p></p><p></p><p>如果你所依赖的API或服务不可用，<a href=\"https://www.infoq.com/articles/api-mocking-break-dependencies/\">你可以使用API仿真来并行化团队协作并更快地交付产品</a>\"。</p><p>&nbsp;</p><p>但好处并不止于此，因为API仿真还能帮助你实现测试自动化。</p><p>&nbsp;</p><p>假设你正在使用图1所示的Purchasing微服务。在TDD之后，你希望为依赖于Payments微服务的新API的新功能编写测试。不幸的是，支付团队仍在开发新的Payments微服务API。当你测试Purchasing微服务时，它们没有可连接的API。如果API不可用，自动化测试将会失败，除非使用<a href=\"https://en.wikipedia.org/wiki/Test_double\">测试替身（Test Double）</a>\"，例如AP仿真。</p><p>&nbsp;</p><p>使用API仿真，可以为新的、不存在的API设置编程测试数据响应，然后运行测试。图4展示了这一工作流程。你不必等待支付团队，就可以继续开发和测试你的Purchasing微服务。</p><p>&nbsp;</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/49/498be80688df0189c2fec411667d21a4.png\" /></p><p></p><p>图4：自动化测试设置API仿真并测试微服务</p><p>&nbsp;</p><p></p><h3>案例研究：API尚不可用</h3><p></p><p></p><p>我在<a href=\"https://www.infoq.com/articles/api-mocking-break-dependencies/\">《使用API优先开发和API模拟来打破关键路径依赖》</a>\"一文中描述了一个示例用例，即四个团队在一个新平台的不同微服务上并行工作，这使他们能够极大地缩短上市时间。</p><p>&nbsp;</p><p>这些团队使用<a href=\"https://en.wikipedia.org/wiki/Comparison_of_API_simulation_tools\">API仿真工具</a>\"为不存在的API创建仿真。仿真允许他们运行自动和手工的探索测试，而无需等待其他团队完成他们的工作。</p><p>&nbsp;</p><p>他们遵循了如下的工作流程：</p><p>&nbsp;</p><p>团队首先协作设计<a href=\"https://www.openapis.org/\">OpenAPI</a>\"格式的API。生产者和消费者团队可以在他们的微服务上并行工作。消费者团队可以使用仿真来模拟后端生产者服务，这允许编写不依赖于真实后端微服务的自动化测试。它还允许进行不依赖后端微服务的探索性手工测试。在开发阶段就交流关于API规范的反馈对于API的发展和考虑不可预见的变化来说是至关重要的。一旦微服务准备就绪，他们就可以在没有仿真的情况下一起测试微服务，并将微服务发布到生产环境中。</p><p>&nbsp;</p><p></p><h2>问题2：后端或第三方系统中的缓慢或手工过程</h2><p></p><p></p><p>阻碍团队创建自动化测试的另一个典型问题是测试用例中的缓慢或手工过程。</p><p>&nbsp;</p><p>当使用异步技术（如IBM MQ、RabbitMQ、JMS、ActiveMQ或AMQP）与依赖系统通信时，这种情况最为典型。</p><p>&nbsp;</p><p>例如，如图5所示，<a href=\"https://www.enterpriseintegrationpatterns.com/RequestReply.html\">微服务将向请求队列发送请求消息</a>\"，以供后端服务使用。后端数据处理可能需要数分钟或数小时才能将响应消息响应到响应队列。</p><p>&nbsp;</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c1/c1f980bc6345c3dc35196d573be60ec9.png\" /></p><p></p><p>图 5：与后端进行请求和响应消息通信</p><p>&nbsp;</p><p>在这种情况下，你的自动化测试可能会等待几分钟或几小时才能收到来自后端的响应消息。等待几分钟或几小时意味着每个测试用例都将阻塞构建管道几分钟或几个小时。因此，你需要一种替代方法来测试你的微服务。仿真将取代缓慢的依赖，并在几毫秒（而不是几分钟或几小时）内做出响应，从而使你的测试能够继续运行。图6展示了后端组件仿真的流程。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/38/389106eaa5ea2db8f3964b3780e82623.png\" /></p><p></p><p>图 6：在请求和响应消息通信中使用仿真</p><p>&nbsp;</p><p>当后端系统中存在手工请求文档处理时，你也将需要使用类似的方法。例如，在人机回环（human-in-the-loop）场景中，完成用户旅程和测试用例需要人与后端或第三方系统交互。像这样的手工过程通常需要花费比自动化测试所能接受的时间更长的时间，通常是几分钟、几小时或几天。</p><p>&nbsp;</p><p></p><h3>案例研究：后端或第三方系统中的手工过程</h3><p></p><p></p><p>作为我日常工作的一部分，为一家从事政府项目的软件公司提供咨询，该公司希望自动化他们的手工回归测试。他们面临的挑战是，几乎所有的用户旅程都涉及将IBM MQ消息发送到政府服务进行处理。即使是在政府测试环境中，处理也是手工完成的。这一手工过程需要花费30分钟至2天的时间。团队使用<a href=\"https://trafficparrot.com/\">Traffic Parrot</a>\"模拟IBM MQ政府系统（免责声明：我代表Traffic Pararot）。以毫秒而不是数小时或数天为响应单位的仿真解除了负责自动化手工回归测试的人员的阻塞。</p><p>&nbsp;</p><p></p><h2>问题3：测试数据问题</h2><p></p><p></p><p>当你运行自动化测试时，你需要相关的依赖系统来支持你的测试场景。这包括设置API和服务响应以匹配你的测试用例所需的内容。</p><p>&nbsp;</p><p>在后台设置测试数据可能会存在问题，因为它们可能不在你团队的控制范围内。依靠另一个团队为你设置测试数据意味着你可能最终会得到不正确或缺失的测试数据，因此无法继续进行或运行自动化测试。</p><p>&nbsp;</p><p>另一个问题是，即使你有了测试数据，在构建管道中频繁运行自动化测试可能会耗尽所有数据（测试数据燃烧）。然后，你需要刷新测试数据，这可能需要花费比设置部分测试数据更长的时间，而且你再次被阻塞。</p><p>&nbsp;</p><p>即使你拥有所需的所有测试数据，当你（或其他团队）对相同的服务运行自动或手工测试时，测试数据可能会发生变化（例如，帐户余额或用户购买的商品列表）。测试会由于测试数据问题而不是产品的实际问题而再次中断。</p><p>&nbsp;</p><p>你希望你的自动化测试在代码出现问题时失败，而不是在管理的测试数据出现问题时失败。</p><p>&nbsp;</p><p>我们上面讨论的问题的解决方案之一是再次使用仿真。你可以根据单个测试在仿真中设置其所需的服务和API响应，这些响应将仅与给定的测试相关。这允许你在不依赖于其他团队和相关系统的情况下单独测试微服务。如图7所示。</p><p>&nbsp;</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/38/38d4273440de4162812bb063a34256b9.png\" /></p><p></p><p>图 7：根据自动化测试设置仿真</p><p>&nbsp;</p><p></p><h3>案例研究：在第三方系统中设置测试数据</h3><p></p><p></p><p>我的一个媒体客户正在与第三方系统集成，他们只能通过特定的接口手工配置第三方系统中的测试数据。在持续一周的时间里，测试数据几乎每天都会被自动化测试使用/烧掉。他们在2小时内<a href=\"https://en.wikipedia.org/wiki/Comparison_of_API_simulation_tools\">使用了一种流行的工具</a>\"创建了一个简单的API仿真，这意味着他们不再需要在第三方系统中刷新测试数据了。在接下来的三个月里，他们又花了20个小时向仿真中添加了更多的响应，这些响应涵盖了他们想要的所有愉快的场景。此外，他们可以将错误场景添加到了仿真中，这在真实的第三方测试环境中是不可能配置的，从而进一步提高了自动化测试的覆盖率。</p><p>&nbsp;</p><p></p><h3>案例研究：仿真整个硬件环境</h3><p></p><p></p><p>同一个客户使用HTTP REST API将微服务与硬件平台集成。不幸的是，仅仅是为自动化测试建立一个包含所有硬件设备的测试环境来支持所有的测试用例，就需要花费6个多月的时间来采购和安装测试环境所需的硬件设备。该团队决定花费2个开发人员两周的时间来创建一个软件设备仿真。构建一个具有足够功能的仿真来满足他们的需求，从而使得他们在无需等待测试环境新设备的情况下即可创建测试。</p><p>&nbsp;</p><p></p><h2>问题4：为错误场景测试设置假设场景</h2><p></p><p></p><p>除了上面提到的测试数据问题之外，有时甚至无法在测试环境中的某些系统中设置假设情况或错误用例。因此，如果你希望在自动化测试中包含一个生产环境的缺陷，并且它依赖于无法在测试环境中复现的后端系统的特定配置时，那么你就无法创建自动化测试。</p><p>&nbsp;</p><p>当涉及到多个上游系统时，情况就更加复杂了。例如，如果Payments微服务连接到一些第三方API和大型机系统，则可能需要这些系统的特定响应组合来重现生产系统中发现的缺陷。</p><p>&nbsp;</p><p>仿真再次前来救援。由于仿真完全在你的控制之下，你可以使用它来代替所有第三方和大型机系统，并详细设置假设情况。</p><p>&nbsp;</p><p>你在生产环境中还会遇到不同类型的错误，如：</p><p>&nbsp;</p><p>HTTP及其他协议的错误响应（如503服务不可用，401未授权）响应缓慢超时运球响应（Dribbling responses）断开的连接</p><p>&nbsp;</p><p>所选的API和系统仿真工具将允许你模拟这些类型的错误，并允许将你的黑盒测试覆盖率提高到80%以上。</p><p>&nbsp;</p><p></p><h3>案例研究：在第三方系统中设置错误场景</h3><p></p><p></p><p>我向其提供咨询的一位客户，他的第三方服务有23种预期的错误场景需要考虑，因为它们很可能在正常的产品使用过程中发生。尽管如此，第三方环境仍不允许轻松地配置这些错误情况。为了自动测试这些场景，客户使用了一个API仿真，它可以返回指定的错误响应，并允许在所有这23个错误情况下对其软件进行自动地黑盒测试。</p><p>&nbsp;</p><p></p><h2>问题5：第三方API和服务限制</h2><p></p><p></p><p>许多第三方API或服务在生产环境中使用是存在限制的。其中包括：</p><p>&nbsp;</p><p>节流或速率限制——每分钟或每小时的最大请求数突发阈值——数秒内每秒的最大请求数最大并行连接数</p><p>&nbsp;</p><p>借助仿真，你可以模拟第三方节流、速率限制或最大并行连接数，这允许你在黑色星期五（Black Friday）场景中测试整个被测试系统的限制。</p><p>&nbsp;</p><p>一些公司选择限制对其测试和沙盒环境的访问，以避免为其所有客户支持过多的测试基础设施而产生成本。使用仿真，你可以绕过第三方测试环境中的速率限制，并在你这一侧根据需要运行尽可能多的自动化功能和性能测试。</p><p>&nbsp;</p><p>与生产环境相比，后端系统的测试环境可能比较缓慢，从而使你无法在得到类似于生产环境中运行自动化性能测试的体验。你可以使用仿真在测试环境中模拟生产环境的响应时间。</p><p>&nbsp;</p><p></p><h3>案例研究：速率受限的第三方API</h3><p></p><p></p><p>我的一个客户正在与第三方API集成，其突发阈值为连续5秒内每秒3次。达到限制后，API返回一个429错误，“请求太多”。他们想要一个自动化测试，在这个测试中，他们的软件可以限制请求，以满足允许的突发阈值。他们创建了一个模拟第三方行为的仿真，当在5秒内每秒连续命中3次以上时，返回429错误“请求太多”。他们在自动化测试中验证了生产代码可以在一分钟内限制大量请求的功能。</p><p>&nbsp;</p><p></p><h2>下一步</h2><p></p><p></p><p>学习新事物固然好，但如果不使用它们，它们就不会产生回报！</p><p>&nbsp;</p><p>如果你是QA的负责人，并且有一个KPI是希望从手工测试转向自动化测试，请与你的团队一起检查下是否有遇到上述的任何问题。</p><p>&nbsp;</p><p>如果你是一名架构师、开发人员或自动化测试人员，遇到了上面列出的一个或多个问题，请与你的团队和管理层谈谈，看看你是否可以花一些时间来研究使用仿真解决你的问题。</p><p>&nbsp;</p><p>维基百科对<a href=\"https://en.wikipedia.org/wiki/Comparison_of_API_simulation_tools\">API仿真工具进行了有益的</a>\"比较，在那里，你可以找到适合你需求的工具。</p><p>&nbsp;</p><p>如果你有任何特定于项目的问题，请随时通过<a href=\"https://www.linkedin.com/in/wojciechbulaty/\">LinkedIn</a>\"、<a href=\"https://twitter.com/WojciechBulaty\">Twitter</a>\"或电子邮件wojtek @trafficparrot.com联系我。</p><p>&nbsp;</p><p>作者简介：</p><p>Wojciech Bulaty专门从事企业软件开发和测试架构。他为自己的写作带来了十多年的实践编码和领导经验。他现在是Traffic Parrot团队的一员，通过提供API仿真和服务虚拟化工具，帮助微服务团队加快交付、提高质量并缩短上市时间。你可以在Twitter上关注Wojciech，也可以在LinkedIn上联系他。</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/test-automation-solutions/\">https://www.infoq.com/articles/test-automation-solutions/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/gmlajIkXftMDYDApIG7U\">10年磨一剑，云测试头部玩家如何为数万家客户落地AI自动化测试</a>\"</p><p><a href=\"https://www.infoq.cn/article/5aRJ4CuYqDNzYy3sLRD4\">10款好用的自动化测试工具</a>\"</p><p><a href=\"https://www.infoq.cn/article/c36-o0mhA5GdUS7ZTwQf\">谁需要采购自动化测试工具</a>\"</p>",
    "publish_time": "2023-03-08 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "员工不满办公桌共享政策，谷歌CEO辩护：一些办公室就像“鬼城”",
    "url": "https://www.infoq.cn/article/zC5p4VNoypfw2ffXAQBC",
    "summary": "<p></p><h3>谷歌云计算部门实行共享办公，两名员工合用一个工位</h3><p></p><p>&nbsp;</p><p>两周前，来自谷歌内部的消息显示，谷歌正以“地产效率”为由，要求云计算部门的员工和合作伙伴从下季度开始转为共享工位的办公模式。员工将与他人共享一个工位，轮流在工位办公。</p><p>&nbsp;</p><p>内部文件写道：“大多数员工现在将与另一名同事分享一个工位。”预计员工将隔天来一次办公室上班，因此一个工位同一天不会有两名员工使用。“通过员工配对，共享工位的员工和团队将可以就基本的桌面环境达成一致，并建立规范，确保在新的共享办公环境中获得积极的体验。”</p><p>&nbsp;</p><p>据悉，在 2 月初的Alphabet 第四季度&nbsp;<a href=\"https://www.cnbc.com/2023/02/02/alphabet-googl-earnings-q4-2022.html\">财报</a>\"&nbsp;电话会议上，高管们表示，他们预计谷歌本期将因全球办公空间减少而产生约 5 亿美元的成本，因为公司正在应对收入增长放缓和持续的经济衰退担忧。</p><p>&nbsp;</p><p></p><h3>谷歌CEO回应办公桌共享政策</h3><p></p><p>&nbsp;</p><p>3月6日，<a href=\"https://www.cnbc.com/quotes/GOOG/\">谷歌</a>\"CEO&nbsp;<a href=\"https://www.cnbc.com/sundar-pichai/\">Sundar Pichai</a>\"为云部门新的员工办公桌共享政策辩护，称公司的一些办公室实际上是空的，并提醒员工，房地产价格昂贵。</p><p>&nbsp;</p><p>根据 <a href=\"https://www.cnbc.com/2023/03/06/google-ceo-defends-desk-sharing-policy-says-offices-like-ghost-town.html\">CNBC</a>\" 获得的音频，&nbsp;<a href=\"https://www.cnbc.com/sundar-pichai/\">Sundar Pichai</a>\"在上周的一次全公司会议上说：“对我来说，很明显他们正在努力提高效率和节省资金，但同时也在利用资源。”&nbsp;“顺便说一句，有些人经常抱怨他们进来后发现有大片空桌子，感觉就像一座“鬼城”— 这不是一个很好的体验”。</p><p>&nbsp;</p><p>&nbsp;<a href=\"https://www.cnbc.com/sundar-pichai/\">Sundar Pichai</a>\"表示，有很多人“每周只有两天”来办公室，他认为，这导致当前空间的使用效率低下。“我们应该成为财务资源的好管家，”“我们拥有昂贵的房地产。如果它们仅在 30% 的时间内被使用，我们就必须谨慎考虑了。”</p><p>&nbsp;</p><p>Sundar Pichai表示，目前新政策仅适用于云计算员工，并补充说公司“给予团队进行试验的自由”。云部门约占公司全体员工的四分之一。</p><p>&nbsp;</p><p>在同一次全体会议上，谷歌云的战略和运营副总裁Anas Osman表示，大约三分之一的员工每周至少有四天进入办公室。</p><p>&nbsp;</p><p>“这些一对一办公桌实际上在四天或更长时间内使用了大约 35% 的时间，”Anas Osman说，作为试点的一部分，员工可以选择使用专用办公桌还是共享办公桌。</p><p>&nbsp;</p><p>Anas Osman认为，在某些方面，分享也带来了更高的生产力。“我们认为这是如何找到效率和创造更好体验的良好平衡。”&nbsp;“来自试点的数据表明，谷歌员工报告说，当他们在办公室分配几天时，即使是轮流模式和共享办公桌，协作也会明显改善。”</p><p>&nbsp;</p><p>Sundar Pichai还在会上提到了与共享办公桌政策和员工互动问题有关的担忧。之前有报道称，谷歌内部的Memegen系统上有人开始批评管理层，其中一条写道：“不是所有成本削减计划都要打着对员工有利的旗号。”</p><p>&nbsp;</p><p>Sundar Pichai回应员工的问题和评论时读到了这样一条：“故弄玄虚是对人的不尊重，只会适得其反。”还有一条写道：“坏事发生了就发生了，没必要把所有坏事都说得像奇迹一样。”</p><p>&nbsp;</p><p>Sundar Pichai回应道：“我能理解这些情绪。这种反馈很真实。”“我们应该力求简单。”皮查伊说，“我认为关键是要明白，在我们这种规模上，几乎所有交流都有公开属性。你是在对世界说话，有许多利益相关者，所以有的时候，遣词造句很重要，我们的话语会产生实质性影响。你有的时候会在一些沟通中看到这一点。”</p><p>&nbsp;</p>",
    "publish_time": "2023-03-08 09:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "架构师角色的演变：从发号施令到与团队合作",
    "url": "https://www.infoq.cn/article/jpSYVMHY71wO6wchb71x",
    "summary": "<p></p><h2>不断变化的世界</h2><p></p><p>&nbsp;</p><p>与传统的科学相比，软件可以算是一门非常年轻的科学。但即使是在它的婴儿期，它的关键组成部分之一——架构及其形成方式已经发生了重大变化。架构蓝图——花几个月时间完成可以解决所有问题的完整设计——一去不复返了，也没有了由一人负责管理所有东西的场景。之所以发生这种模式转变，一部分是因为行业创造出了更好的工具，还有一部分是因为用户行为发生了变化。他们的交互模式从事务性服务转变为消费驱动型服务，将用户行为从记录系统转变为参与系统，用户现在有了更主动和及时的需求。软件架构需要随之一起演化并拥抱可用的工具才能满足这些新的需求。现在的架构更多的是关于决策而不是结构，更多的是关于对不断发生的变化做出响应而不是遵循规划，更多的是关于频繁交付而不是一次性大型交付。这对架构师所扮演的角色的影响是非常深远的。</p><p>&nbsp;</p><p>在这篇文章中，我们将探讨共享架构的文化变化和架构师角色的演变。从之前依赖架构师的权威和独特视野，变成了在系统设计问题浮出水面时需要整个团队的投入一起解决。这导致了一种控制反转式的团队关系，向共享所有权转变的团队可能正在为融合这种新范式做着苦苦的挣扎。</p><p>&nbsp;</p><p>我们将分享我们是如何经历这一变化的。我们有超过25年在一个团队中担任多个职务的经验，从工程师、产品负责人到团队教练和经理。这些角色中的每一个都让我们能够与架构师接触，因此目睹了行业和架构师角色的演变。我们希望能够为那些在转变过程中苦苦挣扎以及那些希望进一步增强和推广他们的架构的人提供指导。</p><p>&nbsp;</p><p></p><h2>变化因素</h2><p></p><p></p><h4>职责的变化</h4><p></p><p>&nbsp;</p><p>传统的架构师有许多基本职责，其中之一就是关于应用程序的可伸缩性。架构师需要考虑许多不同的因素，确保能够处理系统的预期负载。这些决策包括：哪种语言最适合用来处理这种类型的应用程序？如何处理I/O？阻塞还是非阻塞？数据库采用怎样的策略？需要多少个CPU核心？内存呢？存储呢？这些考量因素影响到了部署策略、特定硬件或芯片组的可用性，甚至是应用程序的部署位置。这些决策为我们提供了有关应用程序生命周期的整体概要、它的预期使用以及更新节奏和策略。</p><p>&nbsp;</p><p>在现代环境中，开发团队通过使用工具减少了之前架构师需要考虑的问题。例如，自动伸缩功能解决了应用程序的计算资源消耗问题。Kubernetes这样的编排平台让部署和处理突发负载变得非常简单，这些平台可以根据需要增加应用程序实例，并在流量减少时逐步减少实例。分析工具，从圈复杂度的静态分析到性能分析指标，再到API功能的可视化，现在已经在整个团队层面提供了丰富的信息。这些工具现在已经出现在标准的工作规范中，这意味着架构师以前的专业知识自然而然地分布到了整个团队中，知识生成和数据见解远远超出了单个角色在团队中所能分享的程度。这意味着这个领域的一些所有权和责任已经转移到了整个团队，而不是在某个个体身上。共享所有权已经成为一种现象。现在，团队通常会根据行业标准、用户期望和公司内部的技术一致性来决定采用什么工具。</p><p>&nbsp;</p><p></p><h4>用户使用模式的变化</h4><p></p><p>&nbsp;</p><p>云计算（或SaaS文化和模型）的快速发展要求我们在如何发布、何时发布以及发布什么方面变得更加灵活。现在的重点是提供更健壮的服务和支持，让团队能够快速改变他们的关注点。功能的增加会带来更多的用户使用，了解用户的使用情况就成为开发和演化功能的关键决策。在以前，这一强化要素是一项长达数月关于稳定性、伸缩性和健壮性的思考，而如今已让位于实验性的意愿。</p><p>&nbsp;</p><p>技术预览版功能（不要在生产环境中使用的警告通常会被故意忽略）可以让应用程序的演化与用户的需求同步，消除了用户与团队之间的脱节。在以前，这种关系通常由业务系统分析师或产品负责人等角色负责维护。现在，团队的用户意识更强了，有时甚至强过架构师。他们了解用户是如何与系统交互的，并通过遥测应用程序的见解知道用户何时与系统发生交互，了解用户需要什么、为什么需要以及如何需要。这为应用程序的开发带来了强大的多层面观点，因为现在整个团队——拥有不同的背景、技能和专业知识——可以为更大的愿景做出贡献，真正地从个体角色转变为主要由团队驱动并与用户需求进行协作的角色。</p><p>&nbsp;</p><p>从代码层面来看，微服务的兴起最能体现其实际影响。随着所有权和需求发生变化，应用程序需要处于能够独立演变的位置，允许一些服务尝试不同的东西、测试一个功能，能够为部分或所有用户打开和关闭某些功能。这创造了一个良性循环，这种开发方法催生了一套支持工具和服务，（如API网关）来管理服务合约，还有消息传递系统（如Apache Kafka）和支持Spring Boot、Flask和其他特定语言框架的微服务。工具的可用和成熟反过来使得团队更容易自行选择微服务架构风格，从而进一步推动在工具上的投入。</p><p>&nbsp;</p><p>对于架构师来说，他们不能再按照自己的蓝图来设计架构了。现代用户使用模式对灵活性的要求更高。架构师必须不断调整系统设计来满足快速变化的用户需求，必须促进架构向前演化。</p><p>&nbsp;</p><p></p><h2>思维模式的变化、机遇、挑战和现在的架构师需要掌握的新技能</h2><p></p><p>&nbsp;</p><p>在了解了这些变化因素之后，我们相信对于现代架构师来说，他们需要做出改变，需要应对挑战和抓住机遇，并练习和掌握新的技能。</p><p>&nbsp;</p><p></p><h4>软件架构一直在演化</h4><p></p><p>&nbsp;</p><p>软件架构是一个演化的旅程，有着不同的路线和影响，这是当今软件架构的一个基本原则。这种演化意味着我们需要根据了解到的东西改变我们的思维，而架构师在促进架构对话方面发挥着关键作用。以下引用了我们在Red Hat与一位首席架构师进行互动时说的两句话，反映了当今架构师的一些想法和担忧：</p><p>&nbsp;</p><p></p><blockquote>康威定律的影响是一个关键主题：系统的架构反映了组织的结构。&nbsp;架构对话的另一个作用是提出一些没有人意识到的问题，或者每个人都意识到但不愿意谈论的问题。把这些问题提出来讨论是必要的。不是只关注如何解决和实现，而是更多地讨论它们，这样每个人都知道该怎样前进，或者可以随着设计的演化做出适当的调整。有时候，这些讨论最重要的输出是认识到有些问题在当时并不是问题。这种清晰度对每个人来说都很重要。它可以让人们专注于即将到来的任务，而不是被阴影所笼罩。换句话说，它消除了一些无法言喻的负担。&nbsp;—— <a href=\"https://www.linkedin.com/in/emmanuelbernard/\">Emmanuel Bernard</a>\"，Red Hat杰出工程师和架构师</blockquote><p></p><p>&nbsp;</p><p>假设大多数人会倾向于同意这些想法，但他们的架构决策过程是否进化到与这种想法相匹配的程度？他们考虑到组织结构了吗？他们是否放弃了预先设计而引入了预先对话？任何变化的第一步都是先意识到，然后才是接受。</p><p>&nbsp;</p><p>影响产品/服务变化的主要因素之一是用户互动和反馈，用户有可能是内部团队，也可能是付费客户。在现代市场中，反馈循环是持续进行的，架构师必须充分利用这个机会。与持续反馈相应的是期望更频繁或尽可能接近持续反馈的频率进行交付。这给架构师、团队和组织结构带来了挑战，因为持续交付很少能够独立实现，它通常需要在组织层面才能成功实现。</p><p>&nbsp;</p><p>实现频繁交付的小型迭代很适合这种时间窗口。然而，当引入潜在的更大的功能块（例如架构重构）时，它可能不像人们期望的那么简单。这对架构师和团队提出了挑战，他们要能够频繁地交付组件，同时要确保服务能够高质量运行，能够满足SLA和质量期望。更重要的是，在开发的早期，在强制的演化发生之前提出解决方案路径会带来一种对强制的变更拥有所有权的感觉。</p><p>&nbsp;</p><p>在很多情况下，设计决策时机可以与业务需求挂钩。及时地将业务需求与系统设计决策结合起来是架构师及其团队需要解决的真正挑战。传统的架构重点关注最终目标，现在却变成了“接下来需要做些什么来充分解决未来几个月的业务需求”。这可能会导致我们做出一些后续可能需要再次改变的决策，但它们在当时是正确的。我们通过构建产品来获得经验，我们的客户通过与我们的产品交互来获得经验，这为我们提供了紧密的反馈循环。这是系统架构的自然演变，提前了解并制定策略来处理最好的情况和最坏的情况是团队需要的关键技能。架构曾经被认为是一条笔直的道路，但它不是，或者说将来都不应该是。架构的演化是一条曲折的路，每一次转弯都为我们带来一个学习机会。</p><p>&nbsp;</p><p>这并不是说架构师必须忽略架构的最终目标（他们曾经唯一的关注点）。在当前的环境下，产品负责人成为架构师非常重要的合作者，这意味着最终目标和愿景成为共享的经验。对于架构师来说，与产品负责人就产品/服务的愿景展开讨论、合作并达成一致是确保方向性的必要条件，即使这个方向可能并不总是非常明确。相反，这种讨论让产品所有者的愿景变得更加贴近现实，他们可能需要做出妥协，知道什么是可实现的、什么样的时间表是现实的。这个愿景成为技术决策过程的另一个重要输入。</p><p>&nbsp;</p><p></p><h4>架构不再是单个人的职责</h4><p></p><p>&nbsp;</p><p>架构师在软件开发当中扮演独立角色的情况一去不复返了。系统架构现在是一项团队运动。团队具备跨职能交付产品的能力，由为交付软件过程增加价值的人组成，其中仍然包括架构师。之所以会这样，正如前面所说的，部分原因是软件开发生态系统涉及技术、语言（不仅是开发语言，还有业务和技术语言）、体验（开发和用户）和利益相关者。没有哪一个人能够覆盖到所有这些方面。这种变化意味着架构师需要转变思维方式。对于架构师来说，他们的工作成为了团队的一部分，这有很大的好处，但也存在挑战。</p><p>&nbsp;</p><p>依靠他人并将职责移交给他人，这是一项需要掌握的重要技能。这包括在架构师和团队成员之间建立信任。他们必须共享技术方向的所有权，并信任同事能够驱动系统的某些方面或组件。架构演化已经从单一的自上而下的指挥转变为团队联合参与贡献，所有人都可以有不同的观点。</p><p>&nbsp;</p><p>信任是双向的，有时候需要对判断意见加以保留，允许新的想法和见解不断涌现。架构师需要成为建立团队心理安全防线的主要人物。</p><p>&nbsp;</p><p>团队层面的失败不应被视为无能，而应被视为把事情做好的机会。更频繁的交付节奏有助于实现这种模式，因为他们可以快速采取行动。</p><p>&nbsp;</p><p>架构师需要接受架构设计已经从一个单独的个人职责演变为一个共享的团队职责的事实。接受了这样的事实，他们就可以利用团队可以提供的一系列好处。对于那些戴惯了传统架构师帽子的人来说，为了成为团队成员的一部分而降低自己的身份是一种挣扎。不幸的是，我们已经亲眼看到，一些架构师对团队在创新阶段提出的想法、建议或改进表现出了挑战的姿态。</p><p>&nbsp;</p><p>这就导致了僵持的局面，随着时间的推移，团队慢慢变得沉默，他们知道自己的建议没有被采纳，而架构师无法调和自己的局限性，也就无法规划前进的道路。这变成了一场对抗头衔、不愿放弃控制权、承认自己认知和能力不足的斗争。在我们的团队中，这种行为持续存在——成为所有变更的审查者，这破坏了更有能力的团队成员的成长，减缓了交付的速度。我们已经在多个行业的一些公司中看到了这种模式，而在以云为中心的环境中，技术栈的快速发展让这成为一个更大的挑战。</p><p>&nbsp;</p><p>这意味着架构师不再是技术方面的唯一权威，因为改进的速度要求工具也不断改进，技术栈和方法的改变发生在每个开发者身上，更重要的是整个行业使之成为一场技术军备竞赛。如果架构师不愿意信任和授权他们周围的人，这将无意中导致支持、信任和实现技术栈改进失败。对于团队来说，这是一场注定失败的战斗，因为架构师觉得他们需要让自己的知识跟上变化的速度才能做出决策，然而，开发者每天都在积极地编码、调试、实验和学习，而且是在架构师无法达到的更深层次上。如果这种知识鸿沟未能被弥合，就会导致团队人员流失和丧失心理安全感。解决这个问题需要强有力的领导，更重要的是需要强有力的支持，帮助架构师克服他们正在经历的恐惧。架构师和整个团队都需要意识到，对团队来说最好的东西可能对个人并不是最好的，但通常会让个人获得最大的收益（在产品或服务的改进方面）。</p><p>&nbsp;</p><p>为了确保团队能够达成共同理解而放慢发布节奏就是这方面的一个例子。之前的公司有一个主题专家（SME），他被授予了架构师的头衔，并几乎独自在设计方面推动功能的实现。他们的架构愿景是重构现有的面向组件的设计模式，使之成为一种更加模块化的基于插件的架构。这种想法源于他们在架构最佳实践方面的丰富经验，以及与客户的深度联系。他们的愿景被认为是一个强大的概念证明，用一封电子邮件解释了它们的基本原理，并建议在出现下一波客户流失之前进行重构。不可否认，愿景、激情和能力是我们（工程师Chris，工程经理Leigh）想要挖掘的东西，但团队内部弥漫着一股不安的气氛。这是一个架构上的转变，整个团队对新技术知之甚少。在这种情况下，SME将在下一次出现客户流失大约三个月后领导另一个项目，并且已经按照合同期待交付，这意味着将会产生延迟成本。</p><p>&nbsp;</p><p>我们决定支持SME的愿景，但要求他们更详细地阐述这么做的好处（更好的互操作性、更顺畅的客户集成、更容易的调试），然后与客户协商我们的发布承诺。这为淡化个人主义提供了一个安全的基础，更重要的是让整个团队适应了技术和变化。结果是我们得到了一个可持续的架构，但更重要的是，其他五个开发者培养了可持续的技能，他们将长期参与这款产品的演化。毫无疑问，这给销售团队和客户端带来了压力，但在接下来的18个月里，开发团队获得的回报是显而易见的，因为他们正在协商新的业务功能需求。这是一个皆大欢喜的结局，但更广泛的接受度源于工程领导为团队和产品的进化创造安全感而进行的诚实对话。</p><p>&nbsp;</p><p></p><h4>只具备技术敏锐性是不够的</h4><p></p><p>&nbsp;</p><p>掌握技术知识一直都是架构师所必备的，而商业头脑和对市场的了解无疑增加了其重要性。但是，架构师需要做出的最大改变是对软件生命周期中涉及的所有人员进行指导。这听起来可能过于简单化了，但在日益增长的快节奏软件开发行业中，对于架构师来说非常重要。他们倾听和消化业务视角、技术需求、来自开发人员的需求以及管理层快速交付的需求的能力变得至关重要。架构师需要能够使用“强大的开放性问题”作为激发更深层次思考和引出不同观点。</p><p>&nbsp;</p><p>“为什么”这样的提问方式带有评判的味道，例如，“你为什么要采取这种方法”。如果将问题改为“是什么让你决定采用这种方法”，会促使被问者解释他们的想法，而不是为他们的决定辩护，因为当被问及“为什么”时，他们可能会认为自己的决定是不是不正确的。这种简单的改变，以及使用开放、好奇的语言，可以在整个团队中创造包容性，更重要的是，创造一种支持的氛围，而不是一种被认为是挑战的氛围。</p><p>&nbsp;</p><p>架构师已经成为一个通晓多种语言的人，除了传统的技术语言，他们还使用了商业语言和从工程团队中获得最佳观点和想法所必需的语言。</p><p>&nbsp;</p><p></p><h2>实用技巧</h2><p></p><p>&nbsp;</p><p>经过总结，这里为架构师提供了6个实用的技巧，也为正在转变泥潭中挣扎的团队提供了6个实用技巧。</p><p>&nbsp;</p><p>给架构师：</p><p>&nbsp;</p><p>成为帮助团队架构理解的导师，而不是障碍。公开主动地分享你的知识。为那些只有你自己感觉到但团队可能没有意识到的挑战寻求指导，来帮助你克服内心的挑战。不要独自承受，支持性的指导有助于你的角色演化。欢迎来自客户、团队和环境的挑战。这种反馈循环可能会让人感到筋疲力尽，但可以带来巨大的回报。用你的经验将对话引向你的专业知识告诉你会遇到的挑战。了解团队的动态、他们的优缺点、他们对工具的掌握，以及他们日复一日地构建应用程序的实际情况。帮助你在正确的时间组织你的输入，在哪里可以带来最大的价值。成为人际关系的建设者。培养你的软技能，建立起人际网络，从销售团队到产品负责人，从工程经理到技术中小企业。每天都要培养和维护这些关系。</p><p>&nbsp;</p><p>给团队：</p><p>&nbsp;</p><p>为非领域专家总结使用工具的经验，带他们踏上理解之旅。利用架构师丰富的经验来洞察你可能有的想法、挑战或主意。他们现在是你团队的一员了。简单明了地表达你的想法、优点和缺点，准备好接受开放性和有挑战性的反馈，构建心理安全感。把头衔和自负留在门外，拥抱团队环境，向团队里的每一个人学习。在当今的软件设计当中，你对设计过程的影响是真实存在的。培养你的演讲、沟通和指导技能，并每天使用它们，在快节奏的团队中进行信息交流是至关重要的。尽你所能留住你的架构师。他们深厚的专业知识对团队的成长和壮大是无价的，不要让他们感到孤立，让他们觉得自己是团队的一部分，是未来解决方案的一部分。</p><p></p><p></p><h2>结论</h2><p></p><p>&nbsp;</p><p>对于软件行业，更重要的是对于我们的用户来说，架构师的角色已经发生了根本性的变化。我们与用户互动的方式，我们构建、发布和支持软件的方式都发生了变化。这种变化对整个开发团队和他们之前的支持角色（如质量工程/质量保证）进行了赋能。现在，每个人都可以发声，关于系统如何随时间的推移而演化，他们有自己的意见和有效输入。与此相辅相成的是两个独立但相关的变化。首先是终端用户期望的变化，现在要求有更快速的反馈，通过不完美的服务来指导实现他们的需求以及何时实现。其次，出现了一套支持开发者日常工作的工具。这为以前只能由架构师解决的问题带来了解决方案，并允许开发者对性能、伸缩性和设计有更多的见解，并自然地渗透到团队中。架构师需要扮演的基本角色发生了变化。他们多年的经验和丰富的最佳实践现在需要重新渗透到团队的日常流程中。这是一个提升整个团队经验水平的机会，为我们如何构建软件创建了一个更多样化的视图。实现这种改变可能很困难，它需要管理层和团队的支持。它还要求这个角色愿意面对挑战，提供比以往任何时候都更多的价值，为了团队、产品和客户的改善而放弃对头衔的渴望。</p><p></p><h5>原文链接：</h5><p></p><p><a href=\"https://www.infoq.com/articles/architecture-architecting-role/\">https://www.infoq.com/articles/architecture-architecting-role/</a>\"</p><p></p><h5>相关阅读：</h5><p></p><p><a href=\"https://xie.infoq.cn/article/270d9c46fac4add2c1fb5a58c\">成为架构师需要点亮哪些知识树</a>\"</p><p><a href=\"https://xie.infoq.cn/article/91390419a27afb997677fe2db\">硬核！阿里出品 2023 版 Java 架构师面试指南，涵盖 Java 所有核心技能</a>\"</p><p><a href=\"https://www.infoq.cn/video/fXElHgo6F58QTluTYWyq\">架构师是怎样炼成的</a>\"</p><p><a href=\"https://xie.infoq.cn/article/19566adb5559372cf734f3a23\">P5 直升 P7！“阿里爸爸”最新出品年薪 30W~120WJava 架构师学习路线</a>\"</p>",
    "publish_time": "2023-03-08 10:29:43",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "JavaScript框架太多了？相反，是太少了",
    "url": "https://www.infoq.cn/article/CBb3RhvCHflT42ppOLkR",
    "summary": "<p>如今，市面上的 JavaScript 框架越来越多，过于丰富的选项往往令人不知所措。我也是迷失在其中的一员，所以我尝试构建了一款工具，想帮助开发人员选择适合自己的框架方案。但效果嘛……不怎么样。</p><p></p><p>在本文中，我想跟大家分享自己在 JavaScript 领域的探索之旅。从最初轻狂粗暴的情绪化“表情包”到后来糟糕的网站，再到回归开放包容本心，我会深入反省自己一路上学到的教训，特别是如何在选择技术堆栈和框架之前先就项目提出正确的问题。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/a9/a9ede0b3b36b0e3920a58523b47fc871.png\" /></p><p></p><p>年轻人不要太气盛</p><p></p><p>欢迎来到这场颇具争议的讨论。去年 6 月，我曾发表过一篇博文，说自己对于 JavaScript 生态系统的混乱现状而感到不知所措。选项太多了，完全可以做个专门的表情包……。每分钟都有新的 JavaScript 框架问世，这也太夸张了！</p><p></p><p>我还专门为此创建了个愚蠢的网站：should-i-write-a-new-javascript-framework.lol（有必要开发新的 JS 框架吗？），而我自己当时的观点是没必要。虽然当时的我年轻气盛、自信满满，但访客们的反馈和建议帮我开启了一段探索之旅。随着网站内容的持续发布，我开始意识到新的 JS 框架有其价值。没错，我的结论已经变了——我们确实需要更多 JavaScript 框架。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/a3/a38cbc2a034f201a7454277d972a57e3.png\" /></p><p></p><p>相信很多朋友都在网上看到过类似的问题：我打算开发一个新项目，到底该选哪个 JavaScript 框架？我的那个网站就是为此而生，旨在帮助大家选择适合自己的框架。</p><p></p><p>答案当然要视具体情况而定，我的网站就是想引导开发人员深入探究自己的依赖需求，再据此找到最合适的框架选项。没有炒作、没有偏见，我把整个选择过程整理成了两个问题。确实有点蠢，实际情况也远比这复杂，但我还是想把自己当时的思路分享出来。</p><p></p><p>问题一：你打算构建哪种类型的网站？也许你要开发的是一个静态站点，也就是那种被打包起来、用来承载内容分发网络所提供的 HTML 文件和资产的网站。这类站点上的内容不会经常变更，所以构建难度较低。另一种可能，就是构建的是需要在服务器端进行渲染的站点，其中各个 HTML 页面都是由服务器在收到请求时全新构建出来的。这指的就是那些需要通过各个页面为用户带来自定义体验的动态站点。当然，我们也可以将二者结合起来，一部分是静态页面、一部分是动态页面，我将其称为混合模式。</p><p></p><p>问题二是，你需要跨多个页面进行状态维护吗？但这方面需求是有多种实现方式的，所以我承认这个问题提得有点毛病。因此，我提供了更多技术透明度选项，比如是否需要用 JavaScript 构建单页应用程序。所谓单页应用程序，简称 SPA，是指能够在浏览器本地为不同页面构建 HTML 的 JavaScript 应用程序，需要借助客户端 JavaScript 才能运行。或者，大家也可以选择多页面应用程序（简称 MPA），其中每个路由都对应自己的 HTML 文件。文件从服务器发出，所以初始内容的加载并不依赖于客户端 JavaScript。</p><p></p><p>接下来，我们提供一份框架列表。假设我们选择要创建动态站点，之后选择单页应用程序，那照理说就可以根据框架的可用功能进行推荐了吧？但事情没那么简单，What the Framework 上只包含 23 种 JavaScript 框架，原因是我对上榜框架设定了筛选要求——第一，框架必须得到良好维护；第二，框架已经发布了稳定版本。</p><p></p><p>但是，假定我们的项目需要同时提供静态内容加服务器端渲染的页面，也就是混合模式，而且又属于多页面应用程序，那可选的框架有哪些？答案有五个：Eleventy、RedwoodJS、Next.js、Nuxt 以及 Gatsby。听起来不少，但在具体观察框架功能后，我们会发现它们并不能满足所有需求。</p><p></p><p>Next.js 和 Gatsby 使用的是默认为 SPA 的 React，所以并不完全适合我的用例。当然，我们可以想办法用 Next.js 或 Gatsby 生成静态站点，再将站点转换成多页应用程序。但这些都属于变通手段，而且这些框架的静态构建其实无法使用服务器端渲染功能（至少截至撰稿时还不行），所以并不符合我的要求。</p><p></p><p>Eleventy 是个不错的选项，但边缘功能的服务器端渲染还处于试验阶段；而且它只适用于 Netlify，我又特别讨厌供应商锁定。</p><p></p><p>那剩下的就只有两个选项了：Nuxt 和 RedwoodJS。目前，Nuxt 3 专门提供静态和服务器端渲染页面的混合组合，能够很好地服务于多页应用程序。但我还没用过 Vue，所以不知道有没有必要在新项目中额外学习一套新框架。</p><p></p><p>RedwoodJS 是一个全栈框架，理论上应该会是理想的选项。但它会带来大量的开销和集成负担，让我感觉好像很没必要。也就是说，虽然今年已经是 2023 年了，但 Web 开发方面的称手工具并没有我们想象中那么丰富。而且这里我提出的场景并不复杂，混合模式的 MPA……实际开发中很可能会出现更多细微差别。</p><p></p><p>Eleventy 的缔造者 Zack Leatherman 表示，其实有很多方法可以定义服务器端渲染。那如果我不清楚自己需要哪种类型的服务器端渲染，或者根本就不需要服务器端渲染，又该如何选择框架方案？另外，随着 Web 的不断发展，性能优化层面的选择因素也在快速增加。</p><p></p><p>Astro 的核心维护者 Ben Holmes 对缓存和服务器端渲染进行了一系列实验，并发现服务器端渲染在速度上已经能跟静态站点并驾齐驱。也就是说，即使我们减少静态页面预构建、将更多内容交由服务器端渲染，网站的整体速度仍然可以保持在不错的水平。</p><p></p><p>就是说服务器可以提供更好的性能，但各种不同的服务器端渲染类型还是让人难以取舍。我不知道自己需要哪种，甚至不知道要不要继续用静态站点。总之，肯定有某些现实问题还缺少理想的现成框架；我们身为开发人员，怎么能对有益的新方案说不呢？</p><p></p><p>SolidJS 的缔造者 Ryan Carniato 表示，“我们仍然需要新的框架，我们仍然需要更多创新。”Ryan 一直希望将框架作者汇聚起来，共同建立起更好的 Web 生态系统、避免框架之间的对抗。而在当初发布博文时，我曾带着这些问题跟他进行了深入交流。</p><p></p><p>最近，我还专门研究了 Twitter 的技术发展史，并发现这是一段有趣的故事。</p><p></p><p>简单来讲，2010 年时的 Twitter 几乎完全 使用 JavaScript 来实现新架构。其主要目标之一，是交付运行方式类似于传统网站的富 Web 应用程序，借此简化并加快页面导航体验。在我看来，这似乎就是个单页应用程序。而那时距离 React 首度亮相还有三年时间。到 2012 年，Twitter 宣布为了重新优化前端性能，他们决定将大部分渲染从客户端转移回服务器。2013 年，在 React 发布的短短九天之后，Twitter 公布了一套 JavaScript 框架——Flight，并直接投入自家生产环境。这是个有趣的 React 替代方案，不仅不再强制要求使用模板语言，而且允许在客户端和服务器上渲染 HTML。请注意，那可是 2013 年，也就是十年之前。</p><p></p><p>2017 年，Twitter 又发布了 Twitter Light，希望最大限度减少数据用量、加快低质量网络连接上的加载速度，并将设备空间占用控制在 1 MB 以内。这一切，明显是为了改善移动版 Twitter 的使用体验，现在大家仍然可以下载到这个版本。这是一款渐进式 Web 应用，强调重现单页应用程序的原生使用体验。</p><p></p><p>如今，这段故事还在继续。Twitter 旗下一系列技术、项目和产品都在沿着这个方向探索和前行。</p><p></p><p>这就形成了有趣的历史循环。Web 1.0 时代，我们把一切渲染都交给服务器；后来，我们开始在浏览器中利用 JavaScript 完成所有操作，全面走向单页应用程序时代；再往后，我们又把所有内容转移回服务器，因为这样速度更快。这当然不是坏事，毕竟变革的背后是越来越强大的网络和算力发展。但我们可以从中总结出两个结论：第一，技术发展是有周期性的。Web 1.0 时采用的是服务器端渲染，之后人们开始把前端嵌入到 JavaScript 框架当中，可最终服务器端渲染又重新成为主流、并贯穿到如今的各类 Web 场景之下。第二，Twitter 会根据用户的使用方式对技术做出调整和发展。特别是从 2017 年开始，移动端开始成为优先级最高的绝对中心。</p><p></p><p>也就是说，我们做出的技术选择（包括使用哪种 JavaScript）不仅仅取决于产品的功能需求，更会受到用户使用方式的巨大影响。因此，大家在选择技术时一定要先提出有意义的问题。比如产品的受众是谁、他们的网络连接质量如何、他们使用什么设备、他们会跨设备使用吗、他们习惯于以怎样的方式使用产品，等等。</p><p></p><p>考虑到这么多影响因素，我鼓捣出来的 What the Framework 根本帮不上什么忙。这也反过来给了我们信心：如果我们正在构建某些产品，并发现其中的问题无法通过现有技术直接解决，那就果断构建出新的 JavaScript 框架。当下不存在完美的解决方案，往往意味着永远都不会存在。只有亲自动手才能改变现状，推动技术进步。</p><p></p><p>我们永远不可能彻底解决每款产品的每种用例上的每个问题，所以我们永远需要更多、更丰富的 JavaScript 框架。这就是我现在的结论，我愿意为此负责。</p><p></p><p></p><h5>原文链接：</h5><p></p><p></p><p><a href=\"https://whitep4nth3r.com/talks/we-need-more-javascript-frameworks/\">https://whitep4nth3r.com/talks/we-need-more-javascript-frameworks/</a>\"</p><p></p><h5>相关阅读：</h5><p></p><p><a href=\"https://xie.infoq.cn/article/e976363d22c7ffd126d9b6eb1\">最佳的 18 个 JAVASCRIPT 前端开发框架和库</a>\"</p><p><a href=\"https://www.infoq.cn/article/2SyNfw6RkyTV4gkRavIQ\">新一波 JavaScript Web 框架</a>\"</p><p><a href=\"https://www.infoq.cn/article/GDc7cryCCPOhQS9FuAKh\">JavaScript 框架大战已结束，赢家只有一个</a>\"</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&amp;mid=2247518116&amp;idx=1&amp;sn=74da7a01805480d6e0bb7f08c0f5ea13&amp;chksm=f95232e7ce25bbf16539c1ef807dfc132e9d72610dbe3d149dbda2db58f2f71163fb1ca6d21f&amp;scene=27#wechat_redirect\">跨过四个时代，JavaScript框架终于可以与原生应用SDK竞争了</a>\"</p>",
    "publish_time": "2023-03-08 10:31:55",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "开发者将大部分时间花在了 API 上：后端最爱，Twitter API 颇受欢迎",
    "url": "https://www.infoq.cn/article/274oXrMOtDuxWz60cCU1",
    "summary": "<p>&nbsp;Postman 在对超过 37,000 名开发人员和行业专业人士进行调研后，于近日发布了《<a href=\"https://www.postman.com/state-of-api/\">2022 年 API 状况报告</a>\"》。报告显示，最流行的API 是Salesforce Platform APIs，其次是Twitter API，然后是Notion API。最常用的 APM 工具是 Elastic (34%)，然后是 Grafana (31%)，之后是 Datadog (20%) 和 Splunk (19%)。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/37/37cc05756a2763b288ba862c875b2cba.png\" /></p><p>部署 API 的受访者使用了多种方法，其中 CI/CD 管道更受欢迎，61% 的受访者称这是最常用的工具。紧随其后的是在云中部署 API (38%)、框架 (35%) 和定制部署方法 (27%)。当被问及哪些<a href=\"https://www.infoq.cn/minibook/Q4eHZELtNaUvfZJV7lrK\"> CI/CD </a>\"解决方案受到青睐时，一半的受访者提到了 GitHub。Jenkins (36%) 和 GitLab (28%) 也是热门选择，其次是 Azure Pipelines 和 Bitbucket（各占 22%）。</p><p>&nbsp;</p><p>在 API 网关或云 API 管理工具方面，有两种解决方案脱颖而出：一半的受访者提到了 AWS API Gateway，超过四分之一的受访者提到了 Azure API 管理。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/37/37cc05756a2763b288ba862c875b2cba.png\" /></p><p>报告显示，全栈开发人员是使用 API 最大的群体，占受访者的 25%，其中<a href=\"https://www.infoq.cn/video/8oZi40ex8z5R9OB9A8YR\">后端开发</a>\"人员的代表性更强，约为 19%。另外，超过 40% 的后端开发人员每周花在 API 上的时间超过 20 小时，是调查中比例最高的。</p><p>&nbsp;</p><p>开发人员将大部分时间花在了<a href=\"https://www.infoq.cn/article/wAzNDItOZxirdF4tZ9Up\"> API </a>\"上。大约 51% 的受访者表示，他们所在企业将一半以上的开发工作花在了 API 上。这一比例高于 2020 年的 40% 和去年的 49%，凸显了 API 作为现代软件构建块的作用。</p><p>&nbsp;</p><p>性能、安全性、可靠性和文档是与API 集成之前受访者们的主要考虑因素，而决定是否使用和生成 API 的首要因素是它与内部应用程序和系统的集成程度。去年，内部API整合甚至没有成为 API 消费的前三名因素。</p><p></p><p>这是一个值得关注的转变，因为它对 API 文档和设计以及整个开发生命周期都有影响，也表明企业越来越多地使用 API 来共享数据并在内部提供服务。</p><p>&nbsp;</p><p>Postman 表示，随着公司越来越多地使用 API 在组织内部进行交互，这种转变可能会取代文件传输、数据库共享和电子邮件等传统方法。过去一年里，Postman API 平台上跨企业团队的集成 API 数量增长了 20 倍。</p><p>&nbsp;</p><p>调研需要多长时间来构思、实施、测试并将 API 交付到生产环境时，结果显示，大约三分之一的人需要一天到一周的时间，另有三分之一的人表示需要一周到一个月的时间。API 优先的领导者速度更快——19% 的人能够在一天或更短的时间内完成流程（而所有受访者中的这一比例为 14%）。</p><p>&nbsp;</p><p>在部署频次方面，超过三分之一的人表示时间间隔为每周到每月一次，近四分之一的人每天到每周部署一次。API 优先的领导者部署频率更高：超过 10% 的人每小时到每天一次。</p><p>&nbsp;</p><p>不过，缺乏API设计技能成为如今生产 API 的首要问题。这种技能差距可能会导致微服务的过度扩散，从而产生其它问题。</p><p>&nbsp;</p><p>查看更多信息：</p><p><a href=\"https://www.postman.com/state-of-api/\">https://www.postman.com/state-of-api/</a>\"</p>",
    "publish_time": "2023-03-08 11:11:40",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]