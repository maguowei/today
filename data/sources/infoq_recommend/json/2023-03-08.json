[
  {
    "title": "两会热点：组建国家数据局，数字化规划执行落实组织承接",
    "url": "https://www.infoq.cn/article/CUzrDiwNemwvhoVNCQ1V",
    "summary": "<p>3月7日，国务院机构改革方案正式公布。根据国务院关于提请审议国务院机构改革方案的议案，组建国家数据局。负责协调推进数据基础制度建设，统筹数据资源整合共享和开发利用，统筹推进<a href=\"https://www.infoq.cn/album/79\">数字中国</a>\"、数字经济、数字社会规划和建设等，由国家发展和改革委员会管理。</p><p></p><p>将中央网络安全和信息化委员会办公室承担的研究拟订数字中国建设方案、协调推动公共服务和社会治理信息化、协调促进智慧城市建设、协调国家重要信息资源开发利用与共享、推动信息资源跨行业跨部门互联互通等职责，国家发展和改革委员会承担的统筹推进数字经济发展、组织实施国家大数据战略、推进数据要素基础制度建设、推进数字基础设施布局建设等职责划入国家数据局。</p><p></p><p>国家数据局的成立标志着我国数字经济进入更为体系化、具体化的推进阶段。以数据作为关键生产要素，我国数字经济发展和数字中国建设将继续加速。</p><p></p><p>李克强总理在《<a href=\"http://www.china-cer.com.cn/guwen/2023030523535.html\">政府工作报告</a>\"》中简述今年工作重点时提到：</p><p></p><p></p><blockquote>我国经济结构进一步优化。高技术制造业、装备制造业增加值年均分别增长10.6%、7.9%；数字经济不断壮大，新产业新业态新模式增加值占国内生产总值的比重达到17%以上。持续推进政府职能转变。加快数字政府建设，90%以上的政务服务实现网上可办，户籍证明、社保转接等200多项群众经常办理事项实现跨省通办。推动产业向中高端迈进。支持工业互联网发展，有力促进了制造业数字化智能化。加快建设现代化产业体系。加快传统产业和中小企业数字化转型，着力提升高端化、智能化、绿色化水平；加快前沿技术研发和应用推广；完善现代物流体系；大力发展数字经济，提升常态化监管水平，支持平台经济发展。</blockquote><p></p><p></p><p>大力发展数字经济，成为今年两会的主旋律之一。作为数字中国顶层设计，上周发布的《<a href=\"https://www.infoq.cn/article/LBC3Rujd6xFoYfS2duGf\">数字中国建设整体布局规划</a>\"》明确了我国数字化规划蓝图和框架。其中，“打通数字基础设施大动脉”和“畅通数据资源大循环”被视为数字中国建设的两大基础。而国家数据局的组建，将成为规划具体执行落地的组织承接。</p><p></p><p>对此，浙江大学国际联合商学院数字经济与金融创新研究中心联席主任、研究员盘和林认为，当前<a href=\"https://www.infoq.cn/article/qZm63L9zkiD57cpFMsv7\">数据要素</a>\"流通依然存在诸多制度性难题无法解决，当前政府内部数据整合存在部门权限不够的问题，当前数据产业发展需要基础设施支持。成立国家数据局，一方面是提高国家对数据交易体制机制建设，以及数据基础设施建设的支持力度，用专业化的部门来推动数据产业发展，另一方面是通过高权限部门的方式，打通数据链路，实现数据整合。</p><p></p><p>盘和林表示，国家数据局对大数据基础产业，包括数据的收集、存储、处理、清洗、预标注等产业产生积极推动作用，对数据应用层面的大数据产业和<a href=\"https://www.infoq.cn/article/FF3O1p8eeJdGI1sFLUec\">人工智能</a>\"产业发展产生积极影响，对数据支撑的算力和算法领域也有助推，算力包括终端算力的智能芯片和云端算力的智算中心，数据中心等等。未来ICT设备产业将因此受益。</p>",
    "publish_time": "2023-03-08 00:00:44",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "已经过验证的五个测试自动化问题的解决方案",
    "url": "https://www.infoq.cn/article/k5vF3f3OWoelh1peYipW",
    "summary": "<p>本文讨论了阻塞团队自动化测试的五个典型问题。团队可以使用API和服务仿真来解决这些问题。</p><p>&nbsp;</p><p>在过去的15年中，我与不同的软件团队合作过，我注意到使用在线测试替身（如API和服务仿真）是一些已经了解了该技术团队的标准实践。他们通常是具有TDD和BDD经验的敏捷或极限编程（XP）团队。</p><p>&nbsp;</p><p>其他团队从未使用过模拟（mock）或仿真（simulator），主要是因为他们从未听说过它们。本文面向的是开始测试自动化之旅的团队，并展示了如何使用仿真来解决一些日常问题。</p><p>&nbsp;</p><p></p><h2>什么是API或服务仿真？</h2><p></p><p></p><p>使用仿真来替代真正的微服务、第三方服务、大型机或其他软件系统则称为API和软件仿真。你还可以找到类似这样的工具，如<a href=\"https://www.infoq.com/articles/stubbing-mocking-service-virtualization-differences/\">API模拟、服务虚拟化、在线测试替身、以及用于存根和模拟HTTP（S）和其他协议的工具等</a>\"。</p><p>&nbsp;</p><p>这些技术的名称并不那么重要。重要的是，它们能够独立地进行组件（<a href=\"http://xunitpatterns.com/SUT.html\">被测系统，SUT</a>\"）测试。</p><p>&nbsp;</p><p>你可以仿真<a href=\"https://en.wikipedia.org/wiki/API\">API</a>\"、<a href=\"https://en.wikipedia.org/wiki/Service_(systems_architecture)\">服务</a>\"或两者都仿真。我选择在本文中强调这两个名字，是因为我和我的客户发现，不同的团队其所熟悉的名称存在差异，这取决于他们所在的大洲或国家。</p><p>&nbsp;</p><p>我还注意到，例如，在使用HTTP的开发和测试人员中，“API”是一个流行的短语，而当你是与第三方服务提供商合作的公司中的开发或QA负责人时，“服务”可能更流行。</p><p>&nbsp;</p><p>我们使用图1中所示的微服务架构示例。这是一个典型的情景，我们有一个网站，该网站的后端有多个连接到数据库、第三方系统和遗留大型机的微服务。</p><p>&nbsp;</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a5/a5eba6367fa2ca528fa2b8c3771158cb.png\" /></p><p></p><p>&nbsp;</p><p>图 1：生产中的微服务架构示例</p><p>&nbsp;</p><p>图2展示了具有多个仿真的开发和测试基础设施。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/04/0457a5e01182cd426992d754553751b8.png\" /></p><p></p><p>&nbsp;</p><p>图 2：使用API和服务仿真的开发和测试基础设施</p><p>&nbsp;</p><p></p><h2>自动化测试覆盖率</h2><p></p><p></p><p>正如Martin Fowler十多年前所观察到的那样，<a href=\"https://martinfowler.com/bliki/TestCoverage.html\">度量测试覆盖率对于发现未经测试的代码非常有用，但作为质量目标却很糟糕。</a>\"</p><p>&nbsp;</p><p>我一开始时就提到这一点，是因为我在本文的部分内容中使用了代码覆盖率作为度量指标。我想澄清一下我所说的“20%的代码自动化测试覆盖率”是什么意思。这意味着，“我们知道我们有20%的代码被不同类型的自动化测试覆盖了，但80%的代码没有被测试覆盖。”这并不意味着“代码覆盖率是评估我们交付成果质量的一个很好的指标。”有更好的指标来衡量软件交付过程的质量，如<a href=\"https://www.thoughtworks.com/en-gb/radar/techniques/four-key-metrics\">这四个关键指标</a>\"。<a href=\"https://en.wikipedia.org/wiki/Behavior-driven_development\">BDD方式</a>\"也有助于提高测试质量。</p><p>&nbsp;</p><p>尽管如此，了解测试覆盖代码是一个好的开始。测试未涵盖的代码可能存在问题，如未检测到的错误或行为中的意外更改等。特别是，自动化测试覆盖具有提供可重复的回归套件或测试（测试工具）的特性，以帮助确保系统的行为在不同发布之间保持一致。</p><p>&nbsp;</p><p></p><h2>使用仿真解决测试自动化问题</h2><p></p><p></p><p>在产品的开发和测试过程中，开发人员和测试人员可能会遇到如下的几个常见问题：</p><p>&nbsp;</p><p>API或服务尚不可用。后端或第三方系统中的缓慢或手工过程。测试数据问题（需要设置测试数据；测试数据更改会破坏现有的自动化测试；需要刷新测试数据）。为错误场景测试设置假设场景。第三方API和服务限制。</p><p>&nbsp;</p><p>这些问题可以通过使用仿真来解决。下面我将详细介绍其中每种情况。</p><p>&nbsp;</p><p>图3 强调了在测试自动化过程的后期遇到这些问题时，这些问题是如何变得更严重的。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/76/766355bfaeb5ef20cf2c42e4525d1673.png\" /></p><p></p><p>图3：使用API和服务仿真更快地创建自动化测试</p><p>&nbsp;</p><p></p><h2>问题1：API或服务尚不可用</h2><p></p><p></p><p>如果你所依赖的API或服务不可用，<a href=\"https://www.infoq.com/articles/api-mocking-break-dependencies/\">你可以使用API仿真来并行化团队协作并更快地交付产品</a>\"。</p><p>&nbsp;</p><p>但好处并不止于此，因为API仿真还能帮助你实现测试自动化。</p><p>&nbsp;</p><p>假设你正在使用图1所示的Purchasing微服务。在TDD之后，你希望为依赖于Payments微服务的新API的新功能编写测试。不幸的是，支付团队仍在开发新的Payments微服务API。当你测试Purchasing微服务时，它们没有可连接的API。如果API不可用，自动化测试将会失败，除非使用<a href=\"https://en.wikipedia.org/wiki/Test_double\">测试替身（Test Double）</a>\"，例如AP仿真。</p><p>&nbsp;</p><p>使用API仿真，可以为新的、不存在的API设置编程测试数据响应，然后运行测试。图4展示了这一工作流程。你不必等待支付团队，就可以继续开发和测试你的Purchasing微服务。</p><p>&nbsp;</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/49/498be80688df0189c2fec411667d21a4.png\" /></p><p></p><p>图4：自动化测试设置API仿真并测试微服务</p><p>&nbsp;</p><p></p><h3>案例研究：API尚不可用</h3><p></p><p></p><p>我在<a href=\"https://www.infoq.com/articles/api-mocking-break-dependencies/\">《使用API优先开发和API模拟来打破关键路径依赖》</a>\"一文中描述了一个示例用例，即四个团队在一个新平台的不同微服务上并行工作，这使他们能够极大地缩短上市时间。</p><p>&nbsp;</p><p>这些团队使用<a href=\"https://en.wikipedia.org/wiki/Comparison_of_API_simulation_tools\">API仿真工具</a>\"为不存在的API创建仿真。仿真允许他们运行自动和手工的探索测试，而无需等待其他团队完成他们的工作。</p><p>&nbsp;</p><p>他们遵循了如下的工作流程：</p><p>&nbsp;</p><p>团队首先协作设计<a href=\"https://www.openapis.org/\">OpenAPI</a>\"格式的API。生产者和消费者团队可以在他们的微服务上并行工作。消费者团队可以使用仿真来模拟后端生产者服务，这允许编写不依赖于真实后端微服务的自动化测试。它还允许进行不依赖后端微服务的探索性手工测试。在开发阶段就交流关于API规范的反馈对于API的发展和考虑不可预见的变化来说是至关重要的。一旦微服务准备就绪，他们就可以在没有仿真的情况下一起测试微服务，并将微服务发布到生产环境中。</p><p>&nbsp;</p><p></p><h2>问题2：后端或第三方系统中的缓慢或手工过程</h2><p></p><p></p><p>阻碍团队创建自动化测试的另一个典型问题是测试用例中的缓慢或手工过程。</p><p>&nbsp;</p><p>当使用异步技术（如IBM MQ、RabbitMQ、JMS、ActiveMQ或AMQP）与依赖系统通信时，这种情况最为典型。</p><p>&nbsp;</p><p>例如，如图5所示，<a href=\"https://www.enterpriseintegrationpatterns.com/RequestReply.html\">微服务将向请求队列发送请求消息</a>\"，以供后端服务使用。后端数据处理可能需要数分钟或数小时才能将响应消息响应到响应队列。</p><p>&nbsp;</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c1/c1f980bc6345c3dc35196d573be60ec9.png\" /></p><p></p><p>图 5：与后端进行请求和响应消息通信</p><p>&nbsp;</p><p>在这种情况下，你的自动化测试可能会等待几分钟或几小时才能收到来自后端的响应消息。等待几分钟或几小时意味着每个测试用例都将阻塞构建管道几分钟或几个小时。因此，你需要一种替代方法来测试你的微服务。仿真将取代缓慢的依赖，并在几毫秒（而不是几分钟或几小时）内做出响应，从而使你的测试能够继续运行。图6展示了后端组件仿真的流程。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/38/389106eaa5ea2db8f3964b3780e82623.png\" /></p><p></p><p>图 6：在请求和响应消息通信中使用仿真</p><p>&nbsp;</p><p>当后端系统中存在手工请求文档处理时，你也将需要使用类似的方法。例如，在人机回环（human-in-the-loop）场景中，完成用户旅程和测试用例需要人与后端或第三方系统交互。像这样的手工过程通常需要花费比自动化测试所能接受的时间更长的时间，通常是几分钟、几小时或几天。</p><p>&nbsp;</p><p></p><h3>案例研究：后端或第三方系统中的手工过程</h3><p></p><p></p><p>作为我日常工作的一部分，为一家从事政府项目的软件公司提供咨询，该公司希望自动化他们的手工回归测试。他们面临的挑战是，几乎所有的用户旅程都涉及将IBM MQ消息发送到政府服务进行处理。即使是在政府测试环境中，处理也是手工完成的。这一手工过程需要花费30分钟至2天的时间。团队使用<a href=\"https://trafficparrot.com/\">Traffic Parrot</a>\"模拟IBM MQ政府系统（免责声明：我代表Traffic Pararot）。以毫秒而不是数小时或数天为响应单位的仿真解除了负责自动化手工回归测试的人员的阻塞。</p><p>&nbsp;</p><p></p><h2>问题3：测试数据问题</h2><p></p><p></p><p>当你运行自动化测试时，你需要相关的依赖系统来支持你的测试场景。这包括设置API和服务响应以匹配你的测试用例所需的内容。</p><p>&nbsp;</p><p>在后台设置测试数据可能会存在问题，因为它们可能不在你团队的控制范围内。依靠另一个团队为你设置测试数据意味着你可能最终会得到不正确或缺失的测试数据，因此无法继续进行或运行自动化测试。</p><p>&nbsp;</p><p>另一个问题是，即使你有了测试数据，在构建管道中频繁运行自动化测试可能会耗尽所有数据（测试数据燃烧）。然后，你需要刷新测试数据，这可能需要花费比设置部分测试数据更长的时间，而且你再次被阻塞。</p><p>&nbsp;</p><p>即使你拥有所需的所有测试数据，当你（或其他团队）对相同的服务运行自动或手工测试时，测试数据可能会发生变化（例如，帐户余额或用户购买的商品列表）。测试会由于测试数据问题而不是产品的实际问题而再次中断。</p><p>&nbsp;</p><p>你希望你的自动化测试在代码出现问题时失败，而不是在管理的测试数据出现问题时失败。</p><p>&nbsp;</p><p>我们上面讨论的问题的解决方案之一是再次使用仿真。你可以根据单个测试在仿真中设置其所需的服务和API响应，这些响应将仅与给定的测试相关。这允许你在不依赖于其他团队和相关系统的情况下单独测试微服务。如图7所示。</p><p>&nbsp;</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/38/38d4273440de4162812bb063a34256b9.png\" /></p><p></p><p>图 7：根据自动化测试设置仿真</p><p>&nbsp;</p><p></p><h3>案例研究：在第三方系统中设置测试数据</h3><p></p><p></p><p>我的一个媒体客户正在与第三方系统集成，他们只能通过特定的接口手工配置第三方系统中的测试数据。在持续一周的时间里，测试数据几乎每天都会被自动化测试使用/烧掉。他们在2小时内<a href=\"https://en.wikipedia.org/wiki/Comparison_of_API_simulation_tools\">使用了一种流行的工具</a>\"创建了一个简单的API仿真，这意味着他们不再需要在第三方系统中刷新测试数据了。在接下来的三个月里，他们又花了20个小时向仿真中添加了更多的响应，这些响应涵盖了他们想要的所有愉快的场景。此外，他们可以将错误场景添加到了仿真中，这在真实的第三方测试环境中是不可能配置的，从而进一步提高了自动化测试的覆盖率。</p><p>&nbsp;</p><p></p><h3>案例研究：仿真整个硬件环境</h3><p></p><p></p><p>同一个客户使用HTTP REST API将微服务与硬件平台集成。不幸的是，仅仅是为自动化测试建立一个包含所有硬件设备的测试环境来支持所有的测试用例，就需要花费6个多月的时间来采购和安装测试环境所需的硬件设备。该团队决定花费2个开发人员两周的时间来创建一个软件设备仿真。构建一个具有足够功能的仿真来满足他们的需求，从而使得他们在无需等待测试环境新设备的情况下即可创建测试。</p><p>&nbsp;</p><p></p><h2>问题4：为错误场景测试设置假设场景</h2><p></p><p></p><p>除了上面提到的测试数据问题之外，有时甚至无法在测试环境中的某些系统中设置假设情况或错误用例。因此，如果你希望在自动化测试中包含一个生产环境的缺陷，并且它依赖于无法在测试环境中复现的后端系统的特定配置时，那么你就无法创建自动化测试。</p><p>&nbsp;</p><p>当涉及到多个上游系统时，情况就更加复杂了。例如，如果Payments微服务连接到一些第三方API和大型机系统，则可能需要这些系统的特定响应组合来重现生产系统中发现的缺陷。</p><p>&nbsp;</p><p>仿真再次前来救援。由于仿真完全在你的控制之下，你可以使用它来代替所有第三方和大型机系统，并详细设置假设情况。</p><p>&nbsp;</p><p>你在生产环境中还会遇到不同类型的错误，如：</p><p>&nbsp;</p><p>HTTP及其他协议的错误响应（如503服务不可用，401未授权）响应缓慢超时运球响应（Dribbling responses）断开的连接</p><p>&nbsp;</p><p>所选的API和系统仿真工具将允许你模拟这些类型的错误，并允许将你的黑盒测试覆盖率提高到80%以上。</p><p>&nbsp;</p><p></p><h3>案例研究：在第三方系统中设置错误场景</h3><p></p><p></p><p>我向其提供咨询的一位客户，他的第三方服务有23种预期的错误场景需要考虑，因为它们很可能在正常的产品使用过程中发生。尽管如此，第三方环境仍不允许轻松地配置这些错误情况。为了自动测试这些场景，客户使用了一个API仿真，它可以返回指定的错误响应，并允许在所有这23个错误情况下对其软件进行自动地黑盒测试。</p><p>&nbsp;</p><p></p><h2>问题5：第三方API和服务限制</h2><p></p><p></p><p>许多第三方API或服务在生产环境中使用是存在限制的。其中包括：</p><p>&nbsp;</p><p>节流或速率限制——每分钟或每小时的最大请求数突发阈值——数秒内每秒的最大请求数最大并行连接数</p><p>&nbsp;</p><p>借助仿真，你可以模拟第三方节流、速率限制或最大并行连接数，这允许你在黑色星期五（Black Friday）场景中测试整个被测试系统的限制。</p><p>&nbsp;</p><p>一些公司选择限制对其测试和沙盒环境的访问，以避免为其所有客户支持过多的测试基础设施而产生成本。使用仿真，你可以绕过第三方测试环境中的速率限制，并在你这一侧根据需要运行尽可能多的自动化功能和性能测试。</p><p>&nbsp;</p><p>与生产环境相比，后端系统的测试环境可能比较缓慢，从而使你无法在得到类似于生产环境中运行自动化性能测试的体验。你可以使用仿真在测试环境中模拟生产环境的响应时间。</p><p>&nbsp;</p><p></p><h3>案例研究：速率受限的第三方API</h3><p></p><p></p><p>我的一个客户正在与第三方API集成，其突发阈值为连续5秒内每秒3次。达到限制后，API返回一个429错误，“请求太多”。他们想要一个自动化测试，在这个测试中，他们的软件可以限制请求，以满足允许的突发阈值。他们创建了一个模拟第三方行为的仿真，当在5秒内每秒连续命中3次以上时，返回429错误“请求太多”。他们在自动化测试中验证了生产代码可以在一分钟内限制大量请求的功能。</p><p>&nbsp;</p><p></p><h2>下一步</h2><p></p><p></p><p>学习新事物固然好，但如果不使用它们，它们就不会产生回报！</p><p>&nbsp;</p><p>如果你是QA的负责人，并且有一个KPI是希望从手工测试转向自动化测试，请与你的团队一起检查下是否有遇到上述的任何问题。</p><p>&nbsp;</p><p>如果你是一名架构师、开发人员或自动化测试人员，遇到了上面列出的一个或多个问题，请与你的团队和管理层谈谈，看看你是否可以花一些时间来研究使用仿真解决你的问题。</p><p>&nbsp;</p><p>维基百科对<a href=\"https://en.wikipedia.org/wiki/Comparison_of_API_simulation_tools\">API仿真工具进行了有益的</a>\"比较，在那里，你可以找到适合你需求的工具。</p><p>&nbsp;</p><p>如果你有任何特定于项目的问题，请随时通过<a href=\"https://www.linkedin.com/in/wojciechbulaty/\">LinkedIn</a>\"、<a href=\"https://twitter.com/WojciechBulaty\">Twitter</a>\"或电子邮件wojtek @trafficparrot.com联系我。</p><p>&nbsp;</p><p>作者简介：</p><p>Wojciech Bulaty专门从事企业软件开发和测试架构。他为自己的写作带来了十多年的实践编码和领导经验。他现在是Traffic Parrot团队的一员，通过提供API仿真和服务虚拟化工具，帮助微服务团队加快交付、提高质量并缩短上市时间。你可以在Twitter上关注Wojciech，也可以在LinkedIn上联系他。</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/test-automation-solutions/\">https://www.infoq.com/articles/test-automation-solutions/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/gmlajIkXftMDYDApIG7U\">10年磨一剑，云测试头部玩家如何为数万家客户落地AI自动化测试</a>\"</p><p><a href=\"https://www.infoq.cn/article/5aRJ4CuYqDNzYy3sLRD4\">10款好用的自动化测试工具</a>\"</p><p><a href=\"https://www.infoq.cn/article/c36-o0mhA5GdUS7ZTwQf\">谁需要采购自动化测试工具</a>\"</p>",
    "publish_time": "2023-03-08 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]