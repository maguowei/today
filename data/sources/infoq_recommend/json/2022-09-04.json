[
  {
    "title": "日均写7行代码，月薪3万程序员因代码量极少且差，试用期不合格被辞退",
    "url": "https://www.infoq.cn/article/e3AlIJAvAGbCbEFlGqhY",
    "summary": "<p></p><p>代码写得少又烂，离职少不了？</p><p></p><h3>程序员每天写7行代码被开除</h3><p></p><p>“代码写得少，离职少不了”。近期，一则有关程序员代码量的案件引起关注。</p><p></p><p>据中国裁判文书网显示，李某某与中科尚易健康科技（北京）有限公司产生了劳动争议。</p><p></p><p>判决书显示，李某某，男，1979年1月9日出生，于2020年11月2日入职中科尚易公司，岗位为机器视觉算法工程师，双方签订了劳动合同，期限为2020年11月2日至2023年11月1日，试用期为三个月，试用期工资为36000元／月。李某某离职前月平均工资为36000元。</p><p></p><p>2021年1月12日，中科尚易公司以李某某与其岗位不匹配、试用期不合格为由，明确告知李某某公司单方解除劳动合同的决定，并向李某某出示了《解除劳动合同通知书》。</p><p></p><p>2021年1月15日，李某某到开发区劳仲委申请劳动仲裁，要求：</p><p></p><p>1．中科尚易公司支付李某某2020年11月2日至2021年1月12日期间5天休息日加班工资16551．72元；</p><p></p><p>2．中科尚易公司支付李某某2021年1月1日至12日期间工资13241．37元；</p><p></p><p>3．中科尚易公司支付李某某违法解除劳动合同赔偿金36000元。</p><p></p><p>庭审中，中科尚易公司提交《新员工评价表》《李某某试用期工作量及工作质量评估》《人事管理制度》予以证明。</p><p></p><p>《新员工评价表》显示：被评价员工为李某某，评价日期为2021年1月11日，评价项目分为五大项目，包括：知识技能（本岗位相关）、职业素养、业绩表现、团队合作、沟通理解，每个大项目下分为3至5个小项，每个小项均分为四个评分等级，公司给李某某的评分极大部分为最低分，得出的综合评价意见为：</p><p></p><p>李某某试用期被证明不符合录用条件，具体体现在：</p><p></p><p>1．编程语言能力不足，两个多月唯一编写的机械臂控制代码质量极差，最后由其他同事代为重写；</p><p></p><p>2．试用期间提交的算法代码量很少，可交接的代码极少；</p><p></p><p>3．模型训练经验不足，对采集样本的影响因素分析不到位，总纠结于“开关灯”等不重要方面；对扩充样本也是过分着力在“裁剪”等不重要的细节上，造成很多反复浪费；</p><p></p><p>4．不服从小组工作安排，讲条件、推责任；</p><p></p><p>5．反复越级投诉，严重影响同事协作氛围；</p><p></p><p>6．个人工作不达标，延迟公司整体项目产品开发计划。</p><p></p><p>双方签订的《劳动合同书》中约定李某某任职研发部机器视觉算法工程师职务，其具体工作内容为：</p><p></p><p>1．参与医疗机器人项目的研发工作；</p><p></p><p>2．负责人体3D点云数据的实时运动跟踪编程及3D点云处理算法研究、选择和优化；</p><p></p><p>3．负责基于深度学习的人体姿态识别相关算法的研发与优化；</p><p></p><p>4．负责多个摄像头联合识别算法的研发；</p><p></p><p>5．负责基于深度学习的样本制作与训练；</p><p></p><p>6．负责将算法相关代码写成规范的软件并文档化；</p><p></p><p>7．参与产品项目的集成、调试、测试、验证等相关工作；</p><p></p><p>8．领导交办的其他工作。</p><p></p><p>《李某某试用期工作量及工作质量评估》显示：基于李某某上述岗位职责的要求，对试用期员工李某某的工作量及工作质量评估如下（综合评估见试用期员工评估表）：</p><p></p><p>一般工程师每天完成的代码量是100-200行，李某某作为公司聘用的富有经验的软件算法工程师，起码应该达到中位水平，即150行／天，2020年11月2日至2021年1月11日期间李某某完成3D点云处理算法0行；深度学习识别算法总计422行（其中包含70行因质量太差废弃不用的代码）；多摄像头联合识别算法0行；样本制作合计参与拍照时间约2天；样本训练参与工作量折合月7天；软件文档0个；集成、调试、测试、验证相关工作约3天。</p><p></p><p>也就是说，李某某在职72天，只完成了422行代码的编写，除去参与样本训练、集成、调试等相关工作占用的9天时间，在剩下的63天里，平均每天只写7行代码。</p><p></p><p>李某某对《新员工评价表》及《李某某试用期工作量及工作质量评估》的真实性均不认可，称其在职期间未见过该表，对评估结果不认可，工作质量评估的内容也未告知过其本人，不认可公司的解除理由。李某某对上述证据的真实性及证明目的不予认可。</p><p></p><p>关于是否违法解除劳动合同的问题，结合相关证据以及庭审笔录，一审法院认定中科尚易公司于2021年1月12日单方与李某某解除劳动合同，且不再为李某某提供办公设备，双方劳动合同于当日解除，解除理由为李某某试用期考核不合格、其与工作岗位不匹配。对于中科尚易公司关于以李某某存在1月13日至17日持续旷工、严重违反公司规定之情形与其解除劳动合同以及双方于2021年1月17日解除劳动合同的主张，无事实依据，一审法院不予支持。</p><p></p><p>因用人单位作出的开除、除名、辞退、解除劳动合同、减少劳动报酬、计算劳动者工作年限等决定而发生的劳动争议，用人单位负举证责任。</p><p></p><p>本案中，结合《劳动合同》，双方并未明确约定李某某试用期具体的考核标准，中科尚易公司在招聘时也未明确向李某某告知过试用期间的工作量及工作完成质量应达到的具体标准，故一审法院认定中科尚易公司对李某某并未设定具体的试用期录用标准。中科尚易公司提供的《新员工评价表》及《李某某试用期工作量及工作质量评估》均为公司单方制作，并未提交相关证据证明评定表、评估打分结果的具体依据，且表中评价意见未经李某某本人确认，属于主观评定，故一审法院对《新员工评价表》及《李某某试用期工作量及工作质量评估》评测内容不予采信。</p><p></p><p>中科尚易公司亦未提交其他证据证明李某某存在其他法定解除事由之情形，中科尚易公司以李某某试用期不符合录用条件为由与其单方解除劳动合同，无事实及法律依据，系违法解除劳动合同。李某某离职前月平均工资为36000元，且其在中科尚易公司工作年限不满六个月，经计算，中科尚易公司需支付李某某违法解除劳动合同赔偿金36000元。关于中科尚易公司主张无需支付李某某违法解除劳动合同赔偿金的主张，一审法院不予支持。</p><p></p><p>2021年2月24日，一审判决：一、中科尚易公司支付李某某违法解除劳动合同赔偿金36000元；二、中科尚易公司支付李某某2021年1月1日至12日期间工资13241．37元；三、驳回李某某其他申请请求。</p><p></p><p>上诉人中科尚易公司不服判决提起上诉，上诉请求：撤销一审判决第一项，改判中科尚易公司无需支付李某某违法解除劳动合同赔偿金36000元。</p><p></p><p>最终，二审判决，中科尚易公司的上诉请求不能成立，应予驳回；一审判决认定事实清楚，适用法律正确，应予维持。最终判决：驳回上诉，维持原判。</p><p></p><h3>程序员一天写多少代码算合格？</h3><p></p><p>在这个案件中，双方劳动争议的焦点在于，用人单位认为李某某在任职期间的工作表现其岗位不匹配、不合格。主要表现在代码量极少、代码质量差，编程能力差等方面，此外李某某本人还存在工作态度、价值观上的问题。李某某的综合表现导致其公司作出了与其解除劳动关系的决定。</p><p></p><p>由该案件也可以看出，对于程序员来说，代码量和代码质量非常重要。在业界也常常有关于</p><p></p><p>“程序员一天写多少代码才算<a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651005558&amp;idx=1&amp;sn=843bf88d88a7326eb8904b7dd84b376d&amp;chksm=bdbeda258ac9533310e471cc5239f975346aad1f223a50eb7bde5fe300ac87e60971415f94d6&amp;scene=27#wechat_redirect\">合格</a>\"？”这样的讨论。</p><p></p><p>此前，在Quora上有这样一个问题 —— Google的工程师们每天写多少行代码？对此，Google的AdMob全栈工程师评论称，“我的同事最近和我分享了一组调查研究数据，一名高效的工程师每天能写100-150行代码，我嘲笑了他，表示这项预估值绝对要比实际值低”。</p><p></p><p>Raymond Farias为了证明上述估计值的错误，决定以他在谷歌工作效率最高的一个月为例，并使用了Google的一个内部工具来查看每天的代码增量，包括增删改查的代码行数。最后他将一个月的数据汇总然后平均到工作日得出最后结论是150，随后对他的其他同事进行了检测，最后得出的数据基本一致。</p><p></p><p>有一些数据显示，在国内公司，一些熟练程序员正常的生产率为每天100行代码左右。当然，这也因人而异。</p><p></p><p>事实上，代码量与“合格”、“优秀”这样的关键词没有直接的因果关系。我们不应当用代码量来评价一个程序员的好坏。就好比，一个作家并不能因为写作字数多而获得诺贝尔文学奖。</p><p></p><p>要想让代码量增多很简单，有很多方法可以实现。但这样多出来的代码有多少是真正有效的代码呢？本来 10 行代码可以实现的功能，非得用 100 行去实现，有什么意义呢？真正理想的代码应当是又好、又快、又精简的。</p><p></p><p>对于应届生以及初入职场的程序员来说，要求代码量无可厚非，因为，代码量在一定程度上是编程基础和熟练程度的体现。而对于有一定工作年限的程序员来说，再以代码量作为硬性指标和考核标准则显得有些机械，最核心关注的指标应该是代码质量，而非代码行数。</p><p></p><p>但是，编码是程序员的本职工作，如果代码量极少且质量又差，这显然是不负责任的。一个优秀的程序员不一定每时每刻都在编码，但应当以具备独立、深入思考，高效代码等能力时刻要求自己。</p><p></p><p>参考链接：</p><p></p><p><a href=\"https://wenshu.court.gov.cn/website/wenshu/181107ANFZ0BXSK4/index.html?docId=8bfa168edbc74c25aca03a56e3ac29b2\">https://wenshu.court.gov.cn/website/wenshu/181107ANFZ0BXSK4/index.html?docId=8bfa168edbc74c25aca03a56e3ac29b2</a>\"</p><p></p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651005558&amp;idx=1&amp;sn=843bf88d88a7326eb8904b7dd84b376d&amp;chksm=bdbeda258ac9533310e471cc5239f975346aad1f223a50eb7bde5fe300ac87e60971415f94d6&amp;scene=27#wechat_redirect\">https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651005558&amp;idx=1&amp;sn=843bf88d88a7326eb8904b7dd84b376d&amp;chksm=bdbeda258ac9533310e471cc5239f975346aad1f223a50eb7bde5fe300ac87e60971415f94d6&amp;scene=27#wechat_redirect</a>\"</p><p></p>",
    "publish_time": "2022-09-04 10:16:01",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "我庆幸果断放弃了SwiftUI：它还不够成熟",
    "url": "https://www.infoq.cn/article/V8U4t2ubMVrEBzyzl8ed",
    "summary": "<p></p><p></p><blockquote>SwiftUI很好，但是苹果对它投资不足。</blockquote><p></p><p></p><p>在2019年的 WWDC大会上，苹果推出了一个全新的 SwiftUI 框架，这是一个现代化的 UI 界面编码结构，它是基于 Swift从头开始构建的。新框架使用声明性范例，让开发者用更少的代码编写相同的 UI。</p><p></p><p>SwiftUI 的愿景是降低开发 iOS 门槛，吸引更多开发者、丰富 iOS 的业态。并且SwiftUI 可以“实现一次编码，可适应五端 Apple 产品平台”， 包括watchOS、tvOS、macOS 等，以此统一苹果平台的 UI 框架。</p><p></p><p>苹果传递出来的消息就像是说：“SwiftUI 是一个了不起的用户界面框架，而且 100% 绝对会成为苹果平台上应用开发的未来。”</p><p></p><p>这些年，也有一些用 SwiftUI 重写 UIKit 应用程序的案例，去年奈飞新版 iOS App 的登录界面也完全由 SwiftUI 重构。</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/10/104d6dd708d46479fabd8690af4d1172.png\" /></p><p></p><p>本文的作者chsxf，是一家独立游戏工作室的首席开发，也是15年的苹果用户，他想尝试将SwiftUI放到自己的项目中，但是最终失败了。他发表了一篇博客，总结了尝试并放弃SwiftUI的过程，这篇文章在Hacker News上引发了开发者们的大量讨论：</p><p></p><p>“恕我直言，SwiftUI 是一个很好的机会，但苹果公司对它投资不足。这是一项很好的技术，响应式方法非常适合许多典型的基于视图的需求，但对如何处理边缘情况，文档中非常缺乏相关的说明。”</p><p></p><p>“这是个好主意，但SwiftUI的主要问题是完全不成熟。”“它具有复杂的行为，不适用于需要大容量或复杂UI的App。”</p><p></p><p>“而且SwiftUI改进太慢了。”......</p><p></p><p></p><h2>chsxf的博客原文翻译：</h2><p></p><p></p><p>最近，我手头正好有个“The Untitled Project”（名字还没想好）项目需要完成。考虑到配套创作工具CiderKit在发展成熟的过程中也变得愈发复杂，再加上创建各种窗口和UI元素的实际需求，我决定尝试用用SwiftUI。这是个宝贵的机会，能让我认真体验一把SwiftUI并探索其内部工作原理。</p><p></p><p>起初项目工作良好，我对SwiftUI的表现可以说非常满意，我甚至创建了自己的修改器，以便更轻松地显示警报消息。但美好的甜蜜期很快过去，接下来我就要说道说道SwiftUI的那些“坏毛病”了。</p><p></p><p></p><h3>实时检查器不好用</h3><p></p><p></p><p>接下来，我开始了SwiftUI探索之旅的第二站——为地图编辑器创建实时检查器。跟其他创作工具一样，这款检查器的功能就是选定一个对象，并把可检查的对应属性显示在一个临时的用户界面元素当中。过程当中，Swift协议和它处理泛型的方式也给我带来了不少麻烦，但这里我们就不过多展开了。</p><p></p><p>我还遇到了其他问题，因为SwiftUI高度依赖于View协议的实现结构，但View协议又有关联的类型，所以只能把它当成约束来用。好在配合some关键字和opaque类型等设计，我最终还是为可选对象找到了一种实现方法，让每个对象都能提供自身特定的UI元素。</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/79/7956d6e023d355d63d3ad532266894b8.png\" /></p><p></p><p>之所以下决心选择SwiftUI，就是因为初步测试时效果不错。如上图所示，地图编辑器位于左侧，检查器位于右侧。起初，我测试了一个UI元素，那是个用于开灯和关灯的勾选框。它运行良好，所以我根本想象不到后续会出什么大乱子。</p><p></p><p>但在开始实现更复杂的检查器视图时，特别是涉及带有/不带步进器或颜色选择器的多个文本字段时，整个运行速度开始剧烈下降。SpriteKit视图一般都能以每秒60帧的完美速率呈现（只要用的不是英特尔孱弱的iGPU）。但每当SwiftUI更新检查器视图时（这种更新可能出现在移动过程中，甚至是在输入文本字段的时候），渲染速率都会下降到每秒10到15帧，而且相当不稳定。这显然让人无法容忍。</p><p></p><p>我认真做了一番分析，并发现了几个问题。首先，由可选对象提供的视图在每次重绘时都是在完全重新创建。我虽然通过缓存稍稍提升了性能表现，但实际体验仍然非常糟糕。事实证明，SwiftUI检查器视图就是没法提供合理的重绘速度。我在网上查找了解决方案，最后编写了一个延迟版本的ObservableObject，由它来强制每秒只发布一次更改（参见以下代码）。</p><p></p><p>import Combine</p><p>import Foundation</p><p></p><p>extension ObservableObject {\n    func delayed(_ delay: TimeInterval = 1.0) -&gt; DelayedObservableObject {\n        return .init(object: self, delay: delay)\n    }\n}</p><p></p><p>@dynamicMemberLookup</p><p>class DelayedObservableObject: ObservableObject where Object: ObservableObject {<p></p><p>    private var original: Object</p><p>    private var subscription: AnyCancellable?</p><p></p><p>fileprivate init(object: Object, delay: TimeInterval) {</p><p>        self.original = object</p><p>        subscription = object.objectWillChange</p><p>            .throttle(for: RunLoop.SchedulerTimeType.Stride(delay), scheduler: RunLoop.main, latest: true)</p><p>            .sink { [weak self] _ in self?.objectWillChange.send() }</p><p>    }</p><p></p><p>subscript(dynamicMember keyPath: WritableKeyPath) -&gt; Subject {</p><p>        get { original[keyPath: keyPath] }</p><p>        set { original[keyPath: keyPath] = newValue }</p><p>    }</p><p>}</p><p></p><p>随着重绘频率的降低，终于能比较顺畅地操作地图上的对象了，每秒的帧率浮动一般就只有个位数。但这会导致检查器中的值出现延迟，因此在地图编辑器的交互过程中（比如使用移动工具时）结果不准确，所以效果还是称不上完美。</p><p></p><p>但我觉得这可能只是个独立问题，并不能因此把SwiftUI一棒子打死。所以，我打算继续探索。</p><p></p><p></p><h3>越来越慢</h3><p></p><p></p><p>在实现了第一个检查器之后，我开始研究另一个主题：Sprite资产编辑器。利用这款工具，我可以用多个sprite拼接成复杂的资产，再最终为它们制作动画。它的显示效果就是主窗口中的一张表，出于学习的目的，我当然还是想继续用SwiftUI喽。毕竟初次尝试肯定会有种种问题，应该再给它一次机会。</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d3/d3e33ba0a7a6f71d36812e4018377b6a.png\" /></p><p></p><p>如大家所见，这是个复杂的窗口，包含多种不同上下文（上方的「Sprite资产数据库」列表，左侧的特定「Sprite资产数据库」内容，以及其他与选定Sprite资产对应的编辑器元素）。我需要为每个上下文创建一个视图，这些视图同时又是其他视图的「子视图」，然后把需要的数据传递给特定视图。</p><p></p><p>但上图展示的效果其实是在AppKit中完成的，因为我在SwiftUI一直实现不了预期的功能。大家应该注意到了，中间的SpriteKit视图上有三个按钮（分别是+、200%和-）。这些按钮只跟管理SpriteKit视图缩放的@State相关联。尽管几乎不涉及任何其他数据，在界面更新前单击这些按钮，也会产生将近一秒钟的巨大延迟。我刚开始以为是因为地图编辑器的SpriteKit主视图仍在后台渲染。所以我尝试在工作表显示出来后禁用渲染，但结果没有任何改变。</p><p></p><p>变更从一种环境传播至另一环境时，我也遇到了类似的延迟问题。这可以说是压死骆驼的最后一根稻草了，我决定放弃SwiftUI，继续用AppKit。</p><p></p><p></p><h3>总结</h3><p></p><p></p><p>其实没能在项目中用到SwiftUI，会让我感觉有点遗憾。我仍然觉得它是一项很棒的技术，只是可能不适合我的这个特定用例。但我真的不确定是不是自己的用法有问题。我打算在Nihongo no Kana的更新版本中再用用SwiftUI，毕竟那款iOS/iPadOS应用的重绘频率低得多，所以应该不会有太大问题。</p><p></p><p>也许SwiftUI还没做好全面替代AppKit的准备。The Untitled Project的CiderKit创作工具并不是作为Catalyst应用构建的，也不依赖于UIKit。但继续使用AppKit的最大优点，就是没有任何延迟而且一切功能完全符合预期。当然，整个构建过程更繁琐，而且自动布局功能也不怎么好用。但我至少可以更好地控制应用程序的行为，而且根据需求随意调整各种元素。</p><p></p><p>总之，经历了这么一番波折，我还是很庆幸自己果断放弃了SwiftUI。这可能是我在这个项目上做过的最明智的选择。</p><p></p><p>参考链接：</p><p>https://chsxf.dev/2022/08/28/5-tup-why-i-quit-using-swiftui.html</p><p>https://news.ycombinator.com/item?id=32630389</p><p>https://xie.infoq.cn/article/28af907f31baa7e7283a31ed4</p></p>",
    "publish_time": "2022-09-04 12:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Shopee被曝大规模毁约；东软回应成都核酸系统连续崩溃：与软件无关；GitHub 将关闭Trending热榜 | AI一周资讯",
    "url": "https://www.infoq.cn/article/A9S2fgAsLa7js9L6q1gX",
    "summary": "<p></p><p></p><blockquote>字节跳动下调期权授予价至每股155美元，3万员工获期权增发；2568万员工薪酬样本分析：证券业员工1年薪酬顶制造业员工4年；前华为软件副总裁谢炎加入理想汽车，职级仅次于李想；百度2022年二季度营收296亿元，李彦宏：在困难时期也要有理性的信心；两芯片巨头“互掐”：Arm起诉高通，拟瓦解其14亿美元收购案；马斯克正式通知终止收购推特，440亿美元收购案将迎来大结局？</blockquote><p></p><p></p><h2>资讯</h2><p></p><p></p><h4>突发，GitHub 即将下线 Trending 热榜</h4><p></p><p>9月1日，GitHub突然宣布，将于9月30日关闭Trending（趋势）功能，原因是rending Repositories 和 Trending Developers 的使用率较低。</p><p></p><p>Trending 功能主要是帮助开发者快速、方便地找到一些有潜力的开源项目，可以查看每天、每周、每月活跃且有趣的项目库。该功能自上线以来就受到了不少开发者喜爱。因此，很多开发者对GitHub突然将该功能下线的决定感到非常吃惊，甚至不满。</p><p></p><p>不过也有不少支持的声音。Apache SkyWalking 创始人吴晟在社交平台评论称，“很高兴看到 GitHub 这样做！无论（GitHub Trending）使用率低或高，此页面产生的噪音远大于价值。它只是一个纯粹的低价值营销工具。此举有益于健康和诚实的社区。”</p><p></p><h4>成都核酸系统连续崩溃！东软回应：与软件无关系，网络出现故障</h4><p></p><p>9月1日，成都宣布自9月1日至9月4日在全市范围内开展全员核酸检测。9月2日晚，成都核酸检测系统出现了异常，导致采样排队时间过长，核酸检测进度缓慢。</p><p></p><p>成都市疫情防控指挥部相关负责人在接受媒体采访时表示，9月2日17时30分左右，我市核酸检测系统因对短时超大并发量预估不足，导致系统出现卡顿问题。故障发生后，我们立即组织专业技术团队与承建商一起排查原因，积极抢修，系统在增加多台服务器、优化关键参数设置后逐步恢复，但还存在不确定性，我们正在努力加以解决。下一步，我市将采取错峰核酸检测采样、强化系统运行监控、加强问题响应等措施，努力保障核酸检测平稳顺利进行。</p><p></p><p>9月3日下午，东软集团发布《关于东软核酸系统的声明》，声明表示，成都疫情以来，为应对成都大规模检测并发的系统稳定性问题，东软全场景疫情病原体检测信息系统（以下简称东软核酸检测系统）紧急上线，于9月2日04时，系统首次投入使用。</p><p></p><p>系统上线后，发现有响应延迟、卡顿等现象，东软集团第一时间组织专家组和坚守现场的公司技术人员，与成都市相关部门一起，排查事故原因，强化安全防护，保证系统运行。据技术专家研判，目前出现的系统响应延迟、卡顿等现象与核酸检测系统软件无关。</p><p></p><p>9月3日零点左右，在进行网络调整之后，系统运行平稳顺畅，效率得到极大提升，当日共完成1200万样本采集量。9月3日13时左右，系统再次无法进行访问，经排查，发现是网络出现故障，在恢复网络连接后，系统于14时左右再次恢复运行。具体网络故障的原因，相关部门正在排查。</p><p></p><h4>前华为软件副总裁谢炎加入理想汽车，职级仅次于李想</h4><p></p><p>36氪从多位知情人士处获悉，目前，前华为消费者BG软件部副总裁、终端OS部部长谢炎已入职理想汽车，出任系统研发部负责人，职级位列M11，仅次于理想汽车创始人兼CEO李想的M12。</p><p></p><p>接下来，谢炎将积极推动理想汽车的操作系统和自研芯片落地，消息人士说，“目前谢炎已经快速投入在业务上，和各个研发条线开会，听取需求。”</p><p></p><p>据悉，谢炎负责的系统研发部主要是一些底层的智能化技术研发，包括理想汽车自研的操作系统、算力平台等。消息人士透露，理想汽车的算力平台业务还包括了自研智能驾驶芯片项目，而这个自研芯片项目已经有数十人的团队规模，且有明确的量产时间表。</p><p></p><h4>网传台积电内部决定放弃N3工艺，或因苹果不满意</h4><p></p><p>近日，业内人士“手机晶片达人”爆料，因为客户都不用，台积电内部决定放弃 N3 工艺，转攻 2023 下半年量产成本更优的 N3E 工艺。根据台积电路线图，N3 是公司的第一代 3nm，N3E 则是第二代。据爆料人透露，从苹果员工处了解到，他们对 3nm 第一个项目 Ibiza 效能不满，所以取消了 N3 Ibiza，短期内是看不到 3nm 的 M3 终端产品了。</p><p></p><h4>百度2022年二季度营收296亿元，李彦宏：在困难时期也要有理性的信心</h4><p></p><p>8月30日，百度发布了截至2022年6月30日的第二季度未经审计的财务报告。第二季度，百度实现营收296.47亿元，与上年同期相比下滑5%；归属百度的净利润（非美国通用会计准则）达到55.41亿元，同比增长3%，环比增长43%，超市场预期。财报显示，第二季度“百度核心”（即搜索服务与交易服务的组合）收入232亿元，预估226亿元，同比减少4%。在线营销收入为171亿元，同比下降10%，百度表示，下降的原因是因为新冠疫情在中国的某些城市的卷土重来。</p><p></p><p>百度第二季度财报数据财报发布后，李彦宏发布内部信表示，宏观环境的困难和挑战，相信每个人已经非常深刻地感受到。要充分认知困难，并在每个工作决策中充分考虑这个前提。“但是在困难时期，也要有理性的信心。”李彦宏表示，中国数字化和智能化转型为百度提供了巨大的增长机会，百度在一个有长期红利的赛道上，需要找出真正的变量，分析出百度的技术能够起到关键性作用的因素有多少。</p><p></p><h4>马斯克正式通知终止收购推特，440亿美元收购案将迎来大结局？</h4><p></p><p>8月30日晚间，据彭博社等外媒报道，<a href=\"https://mp.weixin.qq.com/s?__biz=MzU1NDA4NjU2MA==&amp;mid=2247569173&amp;idx=1&amp;sn=e60510bae4f1e6dba3efdbaa050d68ef&amp;chksm=fbeb76dacc9cffccf207d2c4e73a5e4f52230ba113dfe7054926b3e5a52992a001e45397ca4f&amp;scene=27#wechat_redirect\">马斯克</a>\"提交了一份终止推特收购的通知。美国证券交易委员会的一份文件称，马斯克已经致函推特，强调了终止收购协议的其他原因。</p><p></p><p>这笔440亿美元的收购案或将迎来大结局。</p><p></p><p>马斯克方面称，最新发送的函件强调了终止并购协议的额外理由，一封来自前推特安全主管Peiter Zatko的举报信称成为焦点。马斯克在信函中花费大量篇幅陈述Peiter Zatko对该公司的指控，并将其作为终止收购交易的补充理由。</p><p></p><p>在指控文件中，Peiter Zatko提出，推特存在三大问题，系统和软件过时、无法抵挡外部黑客的攻击；员工权限混乱、能够随意访问用户数据；虚假账号数量检测流程存在漏洞。其中，虚假账号数量正是马斯克推特收购案的争议焦点。</p><p></p><h4>台积电总裁魏哲家：低端芯片短缺正成为供应链瓶颈</h4><p></p><p>近日，台积电总裁魏哲家表示，低端芯片的短缺，正在让整个半导体产业受到影响。他承认即使是台积电这一全球最大的芯片代工商，在加速向全球扩张的进程中也面临着产品交付延迟和其他限制。</p><p></p><p>其中很重要的一点就是，制造芯片的设备中缺少了一些低端芯片，从而阻止了更多芯片的生产。如尖端的极深紫外线光刻机（EUV）每台的成本超过1亿美元，但是如果其中一个价值10美分的芯片组件短缺，整个设备就无法出货。类似的还有，一辆售价5万美元的汽车可能因为没有50美分的无线电芯片而无法交付....</p><p></p><p>魏哲家表示，台积电的现有工厂已经无法满足低端芯片的需求。汽车制造商追求更多的功能，每年芯片的使用量增加了15%，而智能手机需要的电源管理芯片也出现了激增，是五年前的两到三倍。</p><p></p><h4>2022谷歌博士生奖学金名单公布，17位华人博士生入选</h4><p></p><p>近日，谷歌发布了 2022 年博士奖学金（Google PhD Fellowship）的获奖名单。项目公布名单显示，今年共有 61 位博士生分别入选 14 个方向，包括 机器学习方向 12 人，机器感知、语音技术与计算机视觉方向 9 人，自然语言处理方向 6 人，隐私与安全方向5人，人机交互方向7人。值得一提的是，今年有17位华人博士生入选，约占总数的三成。</p><p></p><h4>百度李彦宏：商业应用是人工智能的软肋，但进展最明显的还是自动驾驶</h4><p></p><p>9月1日，在2022世界人工智能大会上，百度创始人李彦宏表示：“人工智能发展多年，商业是其中的<a href=\"https://www.infoq.cn/article/cp6rdKJYBxRqmYzloHWW\">软肋</a>\"，而缺乏好的商业前景会让创业公司增长停滞、亏损，融资上市变得困难。即便对于大公司，也可能会让公司变得越来越不接地气，逐渐变成一个纯的研究部门。但说到商业应用，进展最明显的还是自动驾驶”。</p><p></p><h4>两芯片巨头“互掐”：Arm起诉高通，拟瓦解其14亿美元收购案</h4><p></p><p>9月1日，芯片公司Arm宣布，已向高通及高通最近收购的芯片设计公司Nuvia发起诉讼，指控其违反授权协议和侵犯注册商标。Arm向法院申请禁令，希望迫使高通销毁根据Nuvia与Arm的授权协议开发的设计。Arm认为，必须获得该公司的许可，才能将这些设计转让给高通。</p><p></p><p>据悉，高通去年斥资14亿美元收购Nuvia。高通公司称，Arm无权干涉高通或Nuvia的创新。高通总法律顾问Ann Chaplin说：“Arm的诉讼忽略了一个事实：高通拥有广泛而完善的授权，覆盖其定制的CPU，而且我们相信这些权利将得到确认。”</p><p></p><p>如果Arm的诉讼能成功，相当于瓦解了高通近些年来规模最大的一次战略收购。</p><p></p><h4>阿里云启动全球最大智算中心，总算力达12 EFLOPS</h4><p></p><p>8月30日，阿里云宣布正式启动张北超级智算中心，总建设规模为12 EFLOPS（每秒1200亿亿次浮点运算）AI算力，可为AI大模型训练、自动驾驶、空间地理等人工智能探索应用提供强大的智能算力服务。该智算中心以先进的技术架构，将衡量算力效率的核心指标“千卡并行计算效率”，从传统架构的40%提升至90%，可将算力资源利用率提高3倍以上。</p><p></p><h4>拼多多2022年第二季度营收314亿美元，研发费用同比增长12%</h4><p></p><p>8月29日，拼多多发布了2022年第二季度财报。财报显示，公司二季度实现营收314.4亿元，同比增长36%，市场预期236.45亿元，去年同期230.46亿元。在美国通用会计准则下，营销费用为113.434亿元，占收入的比例降至36%。拼多多进一步加码研发，本季度研发费用同比增长12%。按美国通用会计准则的经营利润为86.972亿元，归属于普通股股东的净利润为88.963亿元。618期间，平台手机、家电、美妆和日化等制造业品牌均实现了翻倍增长。</p><p></p><h2>开源工具</h2><p></p><p></p><h4>字节跳动开源 Volo：国内首个基于 Rust 语言的 RPC 框架</h4><p></p><p>8 月 30 日，字节跳动基础架构的开源项目 <a href=\"https://www.infoq.cn/article/9iXLu4KjAPg3ufHYmM3J\">CloudWeGo</a>\" 正式发布 Rust RPC 开源框架 Volo。Volo 是一个轻量级、高性能、可扩展性强、易用性好的 Rust RPC 框架，使用了 Rust 最新的 GAT 和 TAIT 特性。</p><p></p><p>GitHub 地址：<a href=\"https://github.com/cloudwego\">https://github.com/cloudwego</a>\"</p><p></p><p>官网：<a href=\"https://www.cloudwego.io/\">www.cloudwego.io</a>\"</p><p></p><p>在字节内部，Volo 已经落地多个业务和基础组件，并且取得了超预期的性能收益（与 Go 版本对比，不那么公平）。</p><p></p><p>Volo 与其它 CloudWeGo 开源项目一样，坚持内外维护一套代码，为开源使用提供了强有力的保障。同时，我们观察到 Rust 开源社区在 RPC 框架这块还比较薄弱，Volo 的开源希望能为社区的完善贡献一份力量，同时也能完善 CloudWeGo 生态矩阵，为追求性能、安全性和最新技术的开发者、企业以及 Rustaceans 开发 RPC 微服务、搭建云原生分布式系统提供强有力的支持。</p><p></p><h2>IT界热评新闻</h2><p></p><p></p><h4>字节跳动下调期权授予价至每股155美元，3万员工获期权增发</h4><p></p><p>据《科创板日报》获得的字节跳动内部邮件显示，该公司将下调其期权授予价至每股155美元。同时，该公司将进行一次期权特殊增发，员工如持有授予价高于每股155美元且尚未完全归属的期权，则有机会获得增发。这部分员工人数超过3万人。据了解，字节跳动上一轮期权授予价是每股195美元。业内人士评论认为，调低期权授予价，有助于回购机制的持续，也将利好在职员工和候选人，这意味着员工未来可以以更低价格，获得更多股票。</p><p></p><h4>2568万员工薪酬样本分析：证券业员工1年薪酬顶制造业员工4年。</h4><p></p><p>最近，金融行业的高薪酬引起热议。</p><p></p><p>据Wind数据统计，2018年至2021年，金融业员工年度平均薪酬是制造业的2.35倍、是其他行业的1.69倍。其中，证券业的薪酬又居于金融业的峰顶位置，该行业员工同期年平均薪酬是制造业的3.76倍、其他行业的2.71倍。而证券行业高管的薪酬水平则是“天花板”，在金融业中居首，是金融业高管的1.22倍、其他行业高管的2.62倍、制造业高管的2.83倍。</p><p></p><p>金融行业的高薪酬或将成为过去式。8月4日，财政部出台了《关于进一步加强国有金融企业财务管理的通知》，《通知》要求，金融企业应当严格遵守财经法律法规和制度规定，牢固树立过紧日子思想，以成本管控为中心，严格预算管理、强化内部控制。这则通知被广泛解读为对金融行业的“限薪令”。</p><p></p><h4>Shopee被曝大规模毁约：有准员工刚落地新加坡，被告知offer没了</h4><p></p><p>近日，据界面新闻报道，东南亚电商巨头Shopee被曝大规模取消offer。不少准员工在临近入职期却被毁约，其中主要包括Shopee在新加坡设立的岗位。有准员工刚落地新加坡，被告知offer没了。据多位采访对象确认，Shopee HR当前给出的解决方案是赔偿1个月工资，另外去往新加坡的其他金钱投入例如机票、酒店等，也声称后续会予以报销赔偿。</p><p></p><p>对此，Shopee回应界面新闻称：由于Shopee部分技术团队的招聘方案调整，一些技术相关岗位被关闭。我们正与相关人员持续沟通，会尽最大努力和支持帮助其妥善过渡。</p>",
    "publish_time": "2022-09-04 13:35:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]