[
  {
    "title": "Svelte 5引入Runes解决反应式Web编程的问题",
    "url": "https://www.infoq.cn/article/4j7HGOl3fWlVrdQgN9uC",
    "summary": "<p>在名为“<a href=\"https://svelte.dev/blog/runes\">Runes简介</a>\"”的博客文章中，Svelte团队展示了在web应用中表述反应式依赖的新语法。这种额外的语法可以提高复杂web应用的可维护性，进一步推进Svelte的企业级就绪度。</p><p></p><p>Svelte即将推出的runes能够让开发人员将反应式逻辑分解并封装为标准的JavaScript函数，这些函数能够在整个代码库中重复使用。</p><p></p><p>在Svelte 3中，反应式依赖是通过.svelte文件在组件级别描述的。组件会封装一些在组件外部不可见的反应式依赖（let var语法），或者明确声明外部的反应式依赖（export let var），客户端组件可以通过<a href=\"https://learn.svelte.dev/tutorial/declaring-props\">Svelte的</a>\"<a href=\"https://learn.svelte.dev/tutorial/declaring-props\">props</a>\"<a href=\"https://learn.svelte.dev/tutorial/declaring-props\">语法</a>\"使用这些依赖。对于那些既不属于本地组件，又不方面在组件接口中公开的反应式依赖，开发人员可以导入<a href=\"https://learn.svelte.dev/tutorial/custom-stores\">Svelte存储</a>\"。</p><p></p><p>Svelte的单文件组件强烈建议开发人员将组件的三个关注点（样式、内容和行为）放到一个文件中。当这三个关注点密切相关时（比如，一起出现、变更或消失），将它们放置在一起就是非常有意义的。因此，将组件特有的样式或行为放到组件标记定义的地方（内聚原则），会使其受益匪浅。另一方面，把松散依赖于特定组件的样式或行为放在一起可能会产生可维护性问题或缺陷（如重复/过时/已消亡/缺失的代码）。理想情况下，Svelte存储只关注单一内聚行为。</p><p></p><p>Svelte存储包含在一个标准JavaScript文件中，与RxJS的observable类似，它们至少暴露了一个.subscribe接口，调用者可以通过该接口对存储中的值做出反应。存储与应用程序的组件架构解耦之后，就可以独立演进，只需保证接口不变即可。反之，客户端的变化也不必导致存储的变化。</p><p></p><p>Svelte runes将为Svelte存储提供另一种语法。Svelte团队认为，runes是一种更好的替代方案：</p><p></p><p></p><blockquote>现实情况是，随着应用程序复杂性的增长，确定哪些值是反应式的，哪些值是非反应式的将会变得很棘手。[......]如果代码在.svelte文件中表现为一种方式，而在.js中又表现为另一种方式，那么代码的重构就会变得非常困难。例如，如果你需要将某些内容转化到<a href=\"https://learn.svelte.dev/tutorial/writable-stores\">存储</a>\"中，以便于在多个地方使用它。[......] 我们发现，当开始实现复杂的事情时，存储API可能会变得相当笨重。此外，团队还观察到：</blockquote><p></p><p></p><p></p><blockquote>[......]如果超过一定的复杂度，要理解Svelte选择何时更新哪些值所带来的复杂性会非常难以处理。提议的API依赖于新的$state、$derived和$effect原语：</blockquote><p></p><p></p><p><code lang=\"java\">\n</code></p><p></p><p>除了.svelte文件之外，这三个原语均可以在.js和.ts文件中使用。让开发人员通过更加重量级的语法来明确声明反应式依赖，这样能够避免遗漏或误解这些依赖关系。它还能对编译器进行一系列优化，从而加快应用程序的运行速度。Svelte团队认为：</p><p></p><p></p><blockquote>Signals能够解锁细粒度的反应性，这意味着（举例来说）在一个较大列表中，某个值的变化不需要让列表中的其他成员失效。因此，Svelte 5的速度会超乎寻常得快。</blockquote><p></p><p></p><p><a href=\"https://www.reddit.com/r/sveltejs/comments/16nm7r5/svelte_5_introducing_runes/?rdt=59764\">开发人员的早期反应</a>\"褒贬不一。一位持有怀疑态度的开发人员在Reddit上写道：</p><p></p><p></p><blockquote>难以言表！尽管我完全明白它能解决什么问题，但是它给人的感觉并不像我之前喜欢的Svelte。以前，Svelte与vanilla JS非常接近。</blockquote><p></p><p></p><p>像const、let和export这样的保留字是有意使用的。即便是像onMount这样的内容，对生命周期稍有了解的人都能轻松理解并使用。甚至在整个Svelte中我最喜欢的$:也会消失。我希望它能够提供可选择性，而不是成为编写Svelte的唯一方式。</p><p></p><p>一位Vue开发人员则<a href=\"https://www.reddit.com/r/sveltejs/comments/16nm7r5/comment/k1fdvdp/\">对新语法丝毫没有感到陌生</a>\"：</p><p></p><p></p><blockquote>作为在Svelte网站上工作过几周的Vue开发人员，我对runes感觉很熟悉，我喜欢将反应式依赖暴露出来的想法，这样就可以在js/ts文件中重用组件逻辑或创建存储。</blockquote><p></p><p></p><p>另一位开发人员总结了新语法的一些重要优点，如下所示：</p><p></p><p></p><blockquote>这确实带来了我一直翘首以盼的两项改进（类型化的props以及在组件之外编写反应式代码的更佳方法）。</blockquote><p></p><p></p><p>此外，<a href=\"https://no.linkedin.com/in/filip-tangen-61614015b/en\">Filip Tangen</a>\"还撰写了一篇<a href=\"https://poxi.substack.com/p/my-thoughts-on-svelte-5-as-a-full\">关于Svelte 5的详细评论</a>\"，其中考虑到了优势和不足，并提出了一种新的方言（代号为Pelte）。</p><p></p><p>Svelte 5仍处于早期阶段。Svelte团队警告说：</p><p></p><p></p><blockquote>你还不能在生产环境中使用Svelte 5。我们目前还处于研发阶段，无法告知何时可以在应用程序中使用它。不过，开发人员可以访问一个<a href=\"https://svelte-5-preview.vercel.app/\">预览网站</a>\"，上面有新功能的详细说明和互动式的练习场所。</blockquote><p></p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/10/svelte-5-runes/\">Rethinking 'Rethinking Reactivity' - Svelte 5 Introduces Runes</a>\"</p>",
    "publish_time": "2023-10-26 10:57:48",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "飞轮科技 COO & 联合创始人连林江确认出席 FCon，分享现代化实时数据仓库在金融领域的应用实践",
    "url": "https://www.infoq.cn/article/9YcHkMYTLe8Ufyjd6h00",
    "summary": "<p><a href=\"https://fcon.infoq.cn/2023/shanghai/?utm_source=infoqweb&amp;utm_medium=atricle\">FCon 全球金融科技大会</a>\"，将于 11 月在上海召开。飞轮科技 COO &amp; 联合创始人连林江将发表题为《<a href=\"https://fcon.infoq.cn/2023/shanghai/presentation/5587?utm_source=infoqweb&amp;utm_medium=article\">现代化实时数据仓库在金融领域的应用实践</a>\"》主题分享，介绍在多家金融机构中成功实施的现代化数据仓库方案，以及如何实现数据分析的实时性和一致性，以推动业务增长。</p><p></p><p><a href=\"https://fcon.infoq.cn/2023/shanghai/presentation/5587?utm_source=infoqweb&amp;utm_medium=article\">连林江</a>\"，国内最早一批分布式系统研发工程师之一，领导团队成功建设了业界最大规模的 10 万台存储和计算平台，为百度基础架构的现代化演进做出了巨大贡献。曾是百度智能云的创始成员，从零开始开创了数十款云产品，并取得了每年数十亿的营收成绩。在基础架构和云计算领域拥有超过 10 年的技术、产品和商业经验。共同创立了北京飞轮数据科技有限公司，并担任公司的首席运营官（COO）。主导研发的现代化实时数据仓库 SelectDB 在全球知名性能测试榜中表现卓越，位列第一。他在本次会议的演讲内容如下：</p><p></p><p>演讲：现代化实时数据仓库在金融领域的应用实践</p><p></p><p>当前，金融行业正在经历数字化转型的浪潮，伴随大数据、人工智能和云计算等技术的崛起。在此背景下，金融机构正面临如何融合多源数据、进行实时分析以赋能其业务的挑战。本次演讲旨在分享在多家金融机构中成功实施的现代化数据仓库方案，以及如何实现数据分析的实时性和一致性，以推动业务增长。</p><p></p><p>演讲提纲：</p><p></p><p>金融行业数字化转型的背景和挑战现代化实时数据仓库的关键特点和价值多家金融机构的成功案例分享未来金融数据分析的趋势与展望</p><p></p><p>你将获得：</p><p></p><p>○ 了解金融行业数字化转型的趋势和挑战</p><p>○ 深入理解现代化实时数据仓库的技术特点</p><p>○ 从实际业务案例中学习最佳实践和经验</p><p>○ 探讨未来金融数据分析的发展方向</p><p></p><p>除上述演讲外，FCon 上海还将围绕&nbsp;<a href=\"https://fcon.infoq.cn/2023/shanghai/track/1580?utm_source=infoqweb&amp;utm_medium=atricle\">DevOps&nbsp;在金融企业落地实践</a>\"、<a href=\"https://fcon.infoq.cn/2023/shanghai/track/1591?utm_source=infoqweb&amp;utm_medium=atricle\">金融行业大模型应用</a>\"、<a href=\"https://fcon.infoq.cn/2023/shanghai/track/1576?utm_source=infoqweb&amp;utm_medium=atricle\">创新的金融科技应用</a>\"、<a href=\"https://fcon.infoq.cn/2023/shanghai/track/1577?utm_source=infoqweb&amp;utm_medium=atricle\">金融实时数据平台建设之路</a>\"、<a href=\"https://fcon.infoq.cn/2023/shanghai/track/1588?utm_source=infoqweb&amp;utm_medium=atricle\">金融安全风险管控</a>\"、<a href=\"https://fcon.infoq.cn/2023/shanghai/track/1589?utm_source=infoqweb&amp;utm_medium=atricle\">数据要素流通与数据合规</a>\"等进行交流。</p><p></p><p>FCon 上海 2023，相约 11 月！现在购票，享 7 折优惠 ，立省 ￥2040！咨询购票请联系：17310043226（微信同手机号）。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a8/a8ec7f7fb25c7949931b2b8a5deffddd.png\" /></p><p></p>",
    "publish_time": "2023-10-26 11:27:05",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]