[
  {
    "title": "使用External Secrets Operator管理Kubernetes的Secret",
    "url": "https://www.infoq.cn/article/Njt8a0wwGyd1Xt8dLMdx",
    "summary": "<p>Kubernetes的Secret机制允许我们将敏感信息存储中央存储库etcd中，这是一种比在Pod定义或容器镜像中存储信息更安全的方式。然而，Kubernetes目前还没有能力管理Secret的生命周期，所以有时候我们需要使用外部系统来管理这些敏感信息。随着我们需要管理的Secret数量的增长，我们可能需要额外的工具来简化和更好地管理它们。在本文中，我们将详细介绍其中的一种工具<a href=\"https://external-secrets.io/\">External Secrets Operator</a>\"。</p><p></p><h2>什么是Secret</h2><p></p><p>Secret是用于管理人到应用程序以及应用程序到应用程序访问权限的数字凭证。它们可以以密码、加密密钥、令牌等形式存在。</p><p></p><h2>什么是Secret管理</h2><p></p><p>Secret管理就是指安全地管理数字凭证的创建、存储、轮换和撤销，同时消除或至少尽量减少人为的参与，并减少潜在的错误来源。</p><p></p><h2>什么是Kubernetes Secret</h2><p></p><p>容器需要访问敏感数据来执行基本操作，如与数据库、API和其他系统集成。在Kubernetes中，Secret是包含数字凭证（如密码、令牌或密钥）的对象，使用Secret可以避免在Pod定义或容器镜像中存储敏感信息。</p><p></p><h2>问题分析</h2><p></p><p>我们都知道如何使用Secret连接到外部服务。下面是一个简单的使用Secret连接数据库的架构示例。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/32/9b/32339cf98bf793fda6d840250d342b9b.png\" /></p><p></p><p>我们有一个微服务（或者单体，如果你愿意的话），它使用Secret（用户名和密码）连接数据库。</p><p></p><p>当你开始支持开发、测试和生产等多种环境时，管理和同步所有这些Secret就变得有点困难了。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/90/8e/9052c060a6e2141300fb8b215552ca8e.png\" /></p><p></p><p>现在，想象一下你将应用程序拆分为多个服务，每个服务都有自己的外部依赖，比如数据库、第三方API等，这会导致架构变得更复杂。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/5b/6c/5bc6a0e45d3cca913b338ayy90c6436c.png\" /></p><p></p><p>要在Kubernetes中搭建上述的多服务环境将面临许多挑战，包括：</p><p></p><p>你可能需要管理数百个Secret。管理Secret的生命周期（如创建、存储、轮换和撤销）变得很困难。引入新服务和具有特定访问权限的用户变得越来越困难。你必须考虑如何安全地分发Secret。基于上述的原因，你可以考虑选择第三方Secret管理工具来减轻与管理Kubernetes Secret相关的工作量。</p><p></p><p>一些流行的工具和供应商如下：</p><p></p><p>云供应商：AWS Secrets Manager、Google Secret Manager、Azure Key Vault、IBM Cloud Secrets Manager、Oracle Key Vault；开源工具：HashiCorp Vault。我们需要的是一个简单的解决方案，至少能够解决其中的一些问题，将存储在外部Secret管理工具中的Secret带到我们的集群中，并在我们的应用程序中继续使用Kubernetes的Secret。这意味着我们需要一个组件将外部Secret信息同步到集群中，而这就是External Secrets Operator的亮点所在。</p><p></p><h2>Operator设计模式</h2><p></p><p>在深入了解External Secrets Operator之前，先让我们来快速回顾一下什么是Kubernetes Operator。</p><p></p><p>我们已经知道，每个Kubernetes集群都有一个理想的状态。这个状态决定了应该运行哪些工作负载（Pod、部署等）、这些工作负载应该使用哪些镜像，以及这些工作负载应该使用哪些资源。控制器是集群中的控制循环，它监控对象的当前状态，将其与期望的状态进行比较，并根据需要对其进行修改。我们也将这些控制循环称为调和循环。</p><p></p><p>下面是这个过程的一般示意图。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/0d/76/0d7fb877b1d4caf64b3f1ed222ac5c76.png\" /></p><p>这种使用声明式状态和控制器管理应用程序和基础设施资源的过程被称为Operator设计模式。有时候，控制器和Operator这两个术语可以互换使用。二者的不同之处在于，Operator具有特定领域知识，知道如何通过读取所需的定义和使用控制器更新集群来创建和管理资源。</p><p></p><h2>什么是External Secrets Operator（ESO）</h2><p></p><p>ESO是一种Kubernetes Operator，它连接到我们上面提到的外部Secret管理系统，读取Secret信息并将它们注入到Kubernetes的Secret中。它是自定义API资源的集合，为管理Secret生命周期的外部API提供了抽象。</p><p></p><h4>External Secrets Operator的结构</h4><p></p><p>与所有其他Kubernetes Operator一样，ESO由以下几个主要部分组成：</p><p></p><p>自定义资源定义（Custom Resource Definitions，CRD）——它们定义了Operator可用的配置选项的数据模式，在我们的示例中是<a href=\"https://github.com/external-secrets/external-secrets/blob/main/config/crds/bases/external-secrets.io_secretstores.yaml\">SecretStore</a>\"和<a href=\"https://github.com/external-secrets/external-secrets/blob/main/config/crds/bases/external-secrets.io_externalsecrets.yaml\">ExternalSecret</a>\"定义。可编程结构——它们使用所选的编程语言（在我们的例子中是Go）定义与上面的CRD相同的数据模式。自定义资源（Custom Resource，CR）——它们包含CRD定义的值，并描述Operator的配置。控制器——控制器操作自定义资源，并负责创建和管理资源。它们可以用任何编程语言构建，ESO的控制器是用Go构建的。</p><p></p><h4>外部Secret提供程序</h4><p></p><p>ESO使用不同的提供程序连接到外部Secret管理系统，并将Secret拉入集群。这些提供程序是通过SecretStore和ExternalSecret资源配置的，稍后我们将介绍它们。你可以在<a href=\"https://github.com/external-secrets/external-secrets/tree/main/pkg/provider\">这里</a>\"找到我们所使用的提供程序的源代码。</p><p></p><p>Secret提供程序的结构其实很简单：</p><p></p><p><code lang=\"go\">type Provider interface{\n  //通过NewClient构造一个SecretsManagerProvider\n  NewClient(ctx context.Context, store GenericStore, kube client.Client, namespace string) (SecretsClient, error)\n\n  //ValidateStore方法检查提供的Secret存储是否有效\n  ValidateStore(store GenericStore) error\n}\n</code></p><p></p><p>正如你在上面看到的，每个提供程序都提供了用于验证存储配置和实例化SecretsClient对象的函数。</p><p></p><p>SecretsClient实例负责验证Secret配置，并以各种形式提取Secret：</p><p></p><p><code lang=\"go\">type SecretsClient interface{\n  GetSecret(ctx context.Context, ref ExternalSecretDataRemoteRef) ([]byte, error)\n\n  Validate() (ValidationResult, error)\n\n  GetSecretMap(ctx context.Context, ref ExternalSecretDataRemoteRef) (map[string][]byte, error)\n\n  GetAllSecrets(ctx context.Context, ref ExternalSecretFind) (map[string][]byte, error)\n\n   Close(ctx context.Context) error\n}\n</code></p><p></p><p>让我们来看看之前提到的资源类型是如何同步外部Secret的。</p><p></p><h4>SecretStore资源</h4><p></p><p>你可以通过SecretStore资源配置想要访问的外部Secret管理服务，并通过指定身份验证所需的配置来访问它。</p><p></p><p>下面是访问AWS Secrets Manager的配置示例：</p><p></p><p><code lang=\"go\">apiVersion: external-secrets.io/v1beta1\nkind: SecretStore\nmetadata:\n  name: secretstore-sample\nspec:\n  provider:\n    aws:\n    service: SecretsManager\n    region: us-east-1\n    auth:\n      secretRef:\n        accessKeyIDSecretRef:\n          name: awssm-secret\n          key: access-key\n        secretAccessKeySecretRef:\n          name: awssm-secret\n          key: secret-access-key\n</code></p><p></p><h4>ExternalSecret资源</h4><p></p><p>SecretStore定义了如何访问Secret，ExternalSecret资源则定义应该获取哪些Secret。它持有SecretStore引用，因此ESO的控制器可以使用ExternalSecret资源（调用SecretStore资源指定的配置）来创建Kubernetes Secret。</p><p></p><p>下面是使用secretStoreRef属性连接这两个资源的示例：</p><p></p><p><code lang=\"go\">apiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: example\nspec:\n  refreshInterval: 1h\n  secretStoreRef:\n    name: secretstore-sample\n    kind: SecretStore\n  target:\n    name: secret-to-be-created\n    creationPolicy: Owner\n  data:\n  - secretKey: secret-key-to-be-managed\n    remoteRef:\n      key: provider-key\n      version: provider-key-version\n      property: provider-key-property\n  dataFrom:\n  - extract:\n      key: remote-key-in-the-provider\n</code></p><p></p><p>在应用程序开始启动时，所有的提供程序都将自己注册到ESO。注册动作就是将提供程序对象及其配置信息添加到Map中。当ESO控制器需要访问Secret存储时，它就使用这个Map来查找存储。在创建自己的Secret提供程序时，我们也会遵循同样的实现规范。</p><p></p><h2>ESO如何同步Secret</h2><p></p><p>正如我们在上面的Operator设计模式小节中所讲的那样，控制器通过无限循环来调和集群的当前状态和期望状态之间的漂移。ESO控制器也不例外。在每一次调和循环中，<a href=\"https://github.com/external-secrets/external-secrets/blob/main/pkg/controllers/externalsecret/externalsecret_controller.go\">外部Secret控制器</a>\"会执行以下这些操作。</p><p></p><p>为当前调和循环读取外部Secret配置；通过secretStoreRef属性获取被外部Secret配置引用的SecretStore；使用存储定义中的提供程序名称查找上面提到的提供程序Map，找到与Secret关联的提供程序；使用存储提供程序名称实例化一个Secret客户端；使用Secret客户端从外部系统获取Secret数据；如果没有Secret数据返回，且删除策略被设置为“Delete”，就会从集群中删除Secret数据。如果删除策略被设置为“Retain”，则Secret将保持原样；假设成功获取到了外部Secret，就会在集群中创建Kubernetes密钥，并被应用到任意指定的模板中。</p><p></p><h2>创建一个简单的ESO提供程序</h2><p></p><p>本小节的目标是创建一个非常简单的ESO提供程序。请记住，我们在这里所做的绝对不适合用在生产环境中。要获得更优雅的、可用于生产环境的解决方案，可以在理解了如何添加提供程序之后查看提供程序的源代码。</p><p></p><p>以下是向ESO中添加新Secret提供程序的步骤。</p><p></p><p>为新的Secret提供程序添加配置模式；创建类型定义，将CRD定义映射到Go语言的结构体；添加提供程序实现；在register.go中注册新的提供程序。创建并部署。</p><p></p><h4>一个简单的Secret管理服务</h4><p></p><p>为了让本教程尽可能简单，并且考虑到ESO已经涵盖了大多数用于管理Secret的常见外部系统，我们将在本教程中使用Node.js Express作为Secret服务器。</p><p></p><p>下面是服务的实现。</p><p></p><p><code lang=\"java\">const express = require('express');\nconst router = express.Router();\n \nconst keys = [];\n \n/* GET keys listing as a JSON array */\nrouter.get('/', (req, res, next) =&gt; {\n   res.send(keys);\n});\n \n/* GET a single key as a JSON object. */\nrouter.get('/:key', (req, res) =&gt; {\n   const key = keys.find(k =&gt; k.key === req.params.key);\n   res.send(key);\n})\n \nmodule.exports = router;\n</code></p><p></p><h4>添加新的CRD定义</h4><p></p><p>我们需要让Kubernetes知道新提供程序的配置。这是自定义资源的最小定义。</p><p></p><p><code lang=\"go\">express:\n  description: Configuration to sync secrets using Express provider\n  properties:\n    host:\n      type: string\n  required:\n    - host\n  type: object\n</code></p><p></p><p>这个定义应该与其他CRD一样添加到deploy/crds/bundle.yaml。新的提供程序只有一个配置属性host，它告诉提供程序Secret服务在哪里。</p><p></p><h4>为提供程序配置创建类型</h4><p></p><p>为了让提供程序从控制器获取配置，我们还需要添加必要的类型，将配置转换为Go语言的结构体。</p><p></p><p><code lang=\"go\">package v1beta1\n \ntype ExpressProvider struct {\n   Host string `json:\"host\"`\n}\n</code></p><p></p><p>可以看到，CRD的配置与上面的结构体是相匹配的。在运行时，提供程序将接收到上述结构的配置。</p><p></p><h4>实现提供程序</h4><p></p><p>我们的提供程序需要实现Provider和SecretClient接口。基本上，我们需要创建一个SecretClient实例并将它返回。我们需要实现SecretClient的GetSecret函数。我们还可以添加验证逻辑来检查存储的配置是否正确。下面是提供程序的基本实现。</p><p></p><p><code lang=\"go\">package express\n \nimport (\n   \"context\"\n   \"encoding/json\"\n   \"fmt\"\n   esv1beta1 \"github.com/external-secrets/external-secrets/apis/externalsecrets/v1beta1\"\n   \"io/ioutil\"\n   \"log\"\n   \"net/http\"\n   \"net/url\"\n   \"sigs.k8s.io/controller-runtime/pkg/client\"\n   \"time\"\n)\n \nconst (\n   errNilStore              = \"nil store found\"\n   errMissingStoreSpec      = \"store is missing spec\"\n   errMissingProvider       = \"storeSpec is missing provider\"\n   errInvalidProvider       = \"invalid provider spec. Missing express field in store %s\"\n   errInvalidExpressHostURL = \"invalid express host URL\"\n)\n \n// this struct will hold the keys that the service returns\ntype keyValue struct {\n   Key   string `json:\"key\"`\n   Value string `json:\"value\"`\n}\n \ntype Provider struct {\n   config  *esv1beta1.ExpressProvider\n   hostUrl string\n}\n\n// NewClient this is where we initialize the SecretClient and return it for the controller to use\nfunc (p *Provider) NewClient(ctx context.Context, store esv1beta1.GenericStore, kube client.Client, namespace string) (esv1beta1.SecretsClient, error) {\n   config := store.GetSpec().Provider.Express\n \n   return &amp;Provider{\n       config:  config,\n       hostUrl: config.Host,\n   }, nil\n}\n \nfunc (p *Provider) GetAllSecrets(ctx context.Context, ref esv1beta1.ExternalSecretFind) (map[string][]byte, error) {\n   return nil, fmt.Errorf(\"GetAllSecrets not implemented\")\n}\n \n// GetSecret reads the secret from the Express server and returns it. The controller uses the value here to\n// create the Kubernetes secret\nfunc (p *Provider) GetSecret(ctx context.Context, ref esv1beta1.ExternalSecretDataRemoteRef) ([]byte, error) {\n   expressClient := http.Client{\n       Timeout: time.Second * 5,\n   }\n \n   req, err := http.NewRequest(http.MethodGet, p.hostUrl+\"/keys/\"+ref.Key, nil)\n   if err != nil {\n       log.Fatal(err)\n   }\n   \n   fmt.Printf(\"Sending request to: %s\\n\", p.hostUrl+\"/keys/\"+ref.Key)\n \n   res, getErr := expressClient.Do(req)\n   if getErr != nil {\n       return nil, fmt.Errorf(\"error getting the secret %s\", ref.Key)\n   }\n \n   if res.Body != nil {\n       defer res.Body.Close()\n   }\n \n   body, readErr := ioutil.ReadAll(res.Body)\n   if readErr != nil {\n       return nil, fmt.Errorf(\"error reading secret %s\", ref.Key)\n   }\n   fmt.Printf(\"body: %s\\n\", body)\n \n   secret := keyValue{}\n   jsonErr := json.Unmarshal(body, &amp;secret)\n   if jsonErr != nil {\n       return nil, fmt.Errorf(\"bad key format: %s\", ref.Key)\n   }\n   return []byte(secret.Value), nil\n}\n \n// ValidateStore validates the store configuration to prevent unexpected errors\nfunc (p *Provider) ValidateStore(store esv1beta1.GenericStore) error {\n   if store == nil {\n       return fmt.Errorf(errNilStore)\n   }\n\n    spec := store.GetSpec()\n   if spec == nil {\n       return fmt.Errorf(errMissingStoreSpec)\n   }\n \n   if spec.Provider == nil {\n       return fmt.Errorf(errMissingProvider)\n   }\n \n   provider := spec.Provider.Express\n   if provider == nil {\n       return fmt.Errorf(errInvalidProvider, store.GetObjectMeta().String())\n   }\n \n   hostUrl, err := url.Parse(provider.Host)\n   if err != nil {\n       return fmt.Errorf(errInvalidExpressHostURL)\n   }\n \n   if hostUrl.Host == \"\" {\n       return fmt.Errorf(errInvalidExpressHostURL)\n   }\n \n   return nil\n}\n\n// registers the provider object to process on each reconciliation loop\nfunc init() {\n   esv1beta1.Register(&amp;Provider{}, &amp;esv1beta1.SecretStoreProvider{\n       Express: &amp;esv1beta1.ExpressProvider{},\n   })\n}\n</code></p><p></p><h2>将提供程序注册到提供程序列表中</h2><p></p><p>下一步是在register.go中导入提供程序模块，用于初始化它的函数。</p><p></p><p><code lang=\"go\">package register\n \nimport (\n   …\n   _ \"github.com/external-secrets/external-secrets/pkg/provider/express\"\n   …\n)\n</code></p><p></p><h4>部署用于测试的ESO</h4><p></p><p>ESO文档描述了将ESO部署到Kubernetes集群所需的步骤。不过，因为我们是在本地运行，所以可以通过手动运行Makefile中定义的任务来加快开发和测试过程。</p><p></p><p>首先部署CRD。</p><p></p><p><code lang=\"go\">make crds.install\n</code></p><p></p><p>然后在本地运行ESO。</p><p></p><p><code lang=\"go\">make run\n</code></p><p></p><h4>用Secret来测试提供程序</h4><p></p><p>为了测试提供程序，我们需要将SecretStore和ExternalSecret配置部署到集群中。SecretStore配置将指向Express服务器，ExternalSecret配置将把存储在Express服务器中的Secret映射成Kubernetes Secret。</p><p></p><p><code lang=\"go\">apiVersion: external-secrets.io/v1beta1\nkind: SecretStore\nmetadata:\n name: secretstore-express\nspec:\n provider:\n   express:\n     host: http://express-secrets-service\n---\napiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n name: express-external-secret\nspec:\n refreshInterval: 1h\n \n secretStoreRef:\n   kind: SecretStore\n   name: secretstore-express\n \n target:\n   name: my-express-secret\n   creationPolicy: Owner\n \n data:\n   - secretKey: secretKey # Key given to the secret to be created on the cluster\n     remoteRef:\n       key: my-secret-key\n</code></p><p></p><p>部署上面的清单。</p><p></p><p><code lang=\"go\">kubectl apply -f secret.yaml \n</code></p><p></p><p>如果一切都进展得很顺利，这个Secret应该会出现在Kubernetes集群中。</p><p></p><p><code lang=\"plain\">kubectl get secret my-express-secret -o yam\n</code></p><p></p><p>下面是Kubernetes API的输出。</p><p></p><p><code lang=\"go\">apiVersion: v1\ndata:\n  secretKey: dGhpcy1pcy1hLXNlY3JldA==\nimmutable: false\nkind: Secret\n</code></p><p></p><h2>总结</h2><p></p><p>在本文中，我们解释了为什么要使用External Secrets Operator，并展示了如何开发外部Secret提供程序。External Secrets Operator是一个用于在多租户和多服务环境中管理Secret的强大工具，许多<a href=\"https://github.com/external-secrets/external-secrets/blob/main/ADOPTERS.md\">组织</a>\"都在生产环境中使用它。</p><p></p><p>作者简介：</p><p></p><p>Önsel Akin是一名拥有25年软件开发经验的软件架构师。他曾身兼数职，与开发、设计思维和产品开发团队密切合作。他曾在许多大型软件开发公司工作，担任软件工程师和软件架构师。他喜欢玩《万智牌》，有时间也会设计手机游戏。他是Container Solutions的云原生工程师。</p><p></p><p>原文链接：</p><p></p><p><a href=\"https://www.infoq.com/articles/k8s-external-secrets-operator/\">Managing Kubernetes Secrets with the External Secrets Operator</a>\"</p>",
    "publish_time": "2022-08-14 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "被病毒勒索千万美元？美的回应：谣言，业务系统未受影响；谷歌数据中心发生爆炸；雷军称公司账上必须留18个月工资| AI一周资讯",
    "url": "https://www.infoq.cn/article/c6PF6PlFh531TB5TBOTe",
    "summary": "<p></p><blockquote>Arm前总裁Tudor Brown宣布辞任中芯国际董事；被病毒勒索千万美元？美的回应：谣言，业务系统未受影响；雷军称公司账上必须留18个月工资；NNAISENSE 正式发布开源进化算法库 EvoTorch；快手自研芯片进入流片阶段……</blockquote><p></p><p></p><h2>资讯</h2><p></p><p></p><h4>华为发布2022年半年报：营收3016亿元</h4><p></p><p></p><p>8月12日，华为发布了<a href=\"https://www.infoq.cn/news/XdElWDKDMoXxeu1yNWlL\">2022年上半年经营业绩</a>\"，公司实现销售收入3016亿元，去年同期为3204亿元，同比下滑5.87%，净利润率5%</p><p></p><p>具体到业务板块来看，华为运营商业务收入为1427亿元，去年同期为1369亿元，同比增长4.24%；企业业务收入为547亿元，去年同期为429亿元，同比增长27.51%；终端业务收入为 1013亿元，去年同期为 1357亿元，同比下滑25.35%。</p><p></p><h4>“芯片法案”出台，美国加码芯片禁令</h4><p></p><p></p><p>8月9日，美国总统拜登签署了《芯片和科学法案》（Chips and Science Act，简称《芯片法案》）生效法令，标志着这个争议颇大甚至将给全球半导体和电动汽车行业带来巨大撕裂作用的法案正式登上历史舞台。根据该法案，美国政府将提供527亿美元的财政补助，支持半导体制造商在美国国内进行研发和生产，同时限制获得补贴的企业在中国扩增产能。</p><p></p><p>美国国会预算办公室表示，《芯片法案》将为美国芯片制造、研发及劳动力发展提供527亿美元补贴，给予在美设立芯片工厂的企业25%的投资税收优惠，同时拨款约2000亿美元，促进美国未来10年在人工智能、量子计算等领域的科研创新。总计投入近3000亿美元。</p><p></p><p>此外，8月12日，美国商务部工业和安全局（BIS）在联邦公报上发布一项临时最终规定，对4项“新兴和基础技术”实施最新出口管制，其中3项与先进芯片密切相关。其中开发GAAFET（全栅场效应晶体管）结构集成电路必须用到的EDA（电子计算机辅助设计）软件，被列入管制范围，将在自今年8月15日起算60天后生效。</p><p></p><h4>小米发布首款人形仿生机器人CyberOne</h4><p></p><p></p><p>8月11日，在2022 雷军年度演讲中，雷军展示了全尺寸人形仿生机器人 CyberOne，该机器人高1.77米，重52kg。据雷军介绍，人形机器人需要突破多项关键技术，目前人形机器人的成本每台大概六、七十万元，尚无法实现量产。</p><p></p><p>据悉，CyberOne搭载自研Mi-Sense深度视觉模组，结合AI交互算法，使其不仅拥有完整的三维空间感知能力，更能够实现人物身份识别、手势识别、表情识别，CyberOne真正做到了不仅看得到也能看得懂。CyberOne在与外界沟通交流方面，搭载了自研MiAI环境语意识别引擎和MiAI语音情绪识别引擎，能够实现85种环境音识别和6大类45种人类情绪识别。以上所有的能力均集成在CyberOne的大脑中，并且配合OLED显示模组，进行交互信息实时显示。</p><p></p><p><img src=\"https://static001.geekbang.org/resource/image/48/fa/48c253a895d83ff4f732bc1ac7676efa.jpeg\" /></p><p></p><h4>被病毒勒索千万美元？美的回应：谣言，业务系统未受影响</h4><p></p><p></p><p>8月11日晚，美的集团就公司受黑客攻击并勒索千万美元的传闻进行回应。美的集团表示，网传美的遭受病毒勒索系谣言，2022年8月11日，美的集团遭受新型网络病毒攻击，少数员工电脑受到感染，公司各业务系统未受影响，经营正常进行，也没有收到勒索信息。</p><p></p><p>此前，网络上流传的一则聊天记录显示，美的集团在休集体年假期间遭遇加密勒索，工厂多处电脑中病毒，导致无法打开文件或进入不了系统。该病毒为勒索病毒，需要7天内汇1000万美金到指定账户。</p><p></p><h4>谷歌数据中心发生爆炸，谷歌搜索全球性宕机</h4><p></p><p></p><p>美国东部时间 8 月 8 日，谷歌一处位于爱荷华州康瑟尔布拉夫斯（Council Bluffs）的数据中心发生爆炸，造成3人受伤，伤者已送往医院治疗，事故发生原因仍在调查中。</p><p></p><p>据外媒 Sfgate 报道，该事故发生于当地时间8日上午 11:59，三名电工正在数据中心大楼附近的变电站工作，这时突然发生了电弧闪光（电爆炸），导致三名电工被严重烧伤，目前一名电工被直升机送往内布拉斯加医疗中心，另外两名被救护车送往医院，据当地 Council Bluffs 警察局称，这三个人在被送去接受治疗时都有呼吸和意识。</p><p></p><p>事故发生后，美国东部时间8月8日晚9:20，谷歌搜索引擎出现全球性宕机的情况，美国有超过4万人反映这一问题，英国、澳大利亚、新加坡的用户也都报告了谷歌宕机问题，随后相关话题冲上推特热搜。</p><p></p><h4>Arm前总裁Tudor Brown宣布辞任中芯国际董事</h4><p></p><p></p><p>8月11日消息，Arm前总裁Tudor Brown已从中芯国际董事会辞职。Brown是Arm创始人之一，加入中芯国际董事会已有9年。这位知名工程师在其领英页面披露了离职的消息。“今天苦乐参半。我卸去担任了9年的中芯国际董事，”他写道。</p><p></p><h4>启灵芯被曝停止运营，3个月前刚完成6亿融资</h4><p></p><p></p><p>近日，市场传闻，ARM CPU 初创公司深圳启灵芯科技有限公司（以下简称“启灵芯”）已经<a href=\"https://www.infoq.cn/article/a5JlbDNY4emeN109LrC3\">停止运营</a>\"，即将破产倒闭。上周五，有网友发帖称“启灵芯今晚 6 点宣布停止运营”。有启灵芯员工在职场社交平台爆料，公司发通知说，“这周不用去上班了”，“公司已经停止运营”.....</p><p></p><p>据雷锋网报道，一接近启灵芯的业内人士透露，启灵芯目前确实遇到了一些困难，目前处于暂停运营的状态。另据集微网从接近启灵芯的人士处了解到的信息，传闻基本属实，但并非破产而是可能会进行重组。</p><p></p><p>而就在 3 个月前，启灵芯刚刚宣布完成总额为 6 亿元人民币的天使轮和 A 轮融资。天使轮投资方包括矽力杰、世芯科技、韦尔股份、恒玄科技等多家半导体企业创始人。A 轮投资方为光速中国。</p><p></p><h4>快手自研芯片进入流片阶段</h4><p></p><p></p><p>近日，快手正式推出自研SoC芯片SL200，目前已进入内测阶段。这一芯片是快手加强云端智能视频处理能力的重要一步。</p><p></p><p>据第一财经报道，快手芯片目前尚处于刚刚流片成功的状态，是小批量验证，规模量产需要等到年底以后。因此在推进节奏上，快手会采取小步快跑方式，逐步验证，存在一个与客户深入交流和打磨的过程。目前快手自研芯片暂时将以自用为主，也与广电、云游戏、安防等对视频压缩芯片需求非常大的行业客户进行初步探讨。比如广电有8K升级的需求，8K视频码率如何降下来是一个很难的问题。快手芯片具备直播和短视频压缩功能，能够节省大量的计算资源和带宽。</p><p></p><h4>商汤科技发布首个家庭消费级人工智能产品“元萝卜SenseRobot”</h4><p></p><p></p><p>8月9日，商汤科技对外发布了首个家庭消费级人工智能产品——“元萝卜SenseRobot”。</p><p></p><p>据悉，“元萝卜”是一款AI下棋机器人产品，目前主要支持中国象棋的对弈，包含AI学棋、残局挑战、棋力闯关、巅峰挑战等多种模式。可以从“0基础”为孩子介绍和讲解象棋的文化、规则及每个棋子的使用技巧，在锻炼思维的同时，还能提升孩子的文化素养。此外，它还带来100多个残局设定和26个等级的棋力对战，让用户不仅可以体验“执子下棋”的真实感受，还能开动脑力享受高水平对弈的乐趣。</p><p></p><p>售价方面，“元萝卜”的PRO版售价2499元，标准版售价1999元。</p><p></p><h4>GitLab 将对所有免费用户强制实施存储限制</h4><p></p><p></p><p>从 2022 年 10 月 19 日开始，GitLab 将对所有 GitLab SaaS 版免费用户的命名空间实施<a href=\"https://www.infoq.cn/article/LZpQ0SzJ31zLKH8K0723\">存储限制</a>\"，容量不超过 5GB。有观点认为，该动作是继上周“删除免费用户的不活跃项目”计划泄漏风波后，GitLab 为进一步节省成本而做出的决定。</p><p></p><h4>小鹏P7车主开辅助驾驶追尾故障车致人死亡，小鹏回应：配合调查</h4><p></p><p></p><p>8 月 10 日，浙江宁波一辆小鹏 P7 突发高架追尾交通事故，事故导致一人身亡。据报道，浙江宁波一辆小鹏 P7 疑似因在高架桥上使用智能驾驶辅助功能，在行驶过程中与前方检查车辆故障的人员和故障车辆相撞，事故导致一名前车乘客死亡。</p><p></p><p>8 月 11 日，小鹏汽车官方回应：“经核实，8 月 10 日下午，宁波一车主驾驶车辆与前方检查车辆故障人员发生碰撞，发生人员伤亡。我们为本次事故中不幸离世的遇难者感到悲痛和惋惜。目前交警部门已经立案处理，门店已第一时间已前往现场协助处理。我们将全力配合相关部门进行事故调查，持续跟进后续结果，并协助客户处理后续相关事宜。”据媒体报道，小鹏汽车相关负责人称，由于本次事故造成了人员伤亡，目前第一原则是安抚好事主，第二是根据相关部门要求全面做好调查配合工作。</p><p></p><h4>微软承认 CPU 太先进会让 Win11 出现数据损坏</h4><p></p><p></p><p>近日，微软在官网公布了一个 Windows 11 和 Windows Server 2022 中的严重错误，表示其最新桌面操作系统的用户可能会遇到数据损坏问题。</p><p></p><p>微软称，受影响的系统搭载了支持最新 Vector Advanced Encryption Standard (VAES) 指令集的处理器，具体来说，包括英特尔 10 代酷睿（Ice Lake ）及以上和第三代至强可扩展处理器（IceLake-SP），以及 AMD Zen 4 架构处理器。</p><p></p><p>微软已经发布了补丁，Windows 11 的 2022 年 5 月 24 日预览版和 2022 年 6 月 14 日安全补丁中已解决了此问题。但是，应用这些更新后，系统中的 BitLocker、TLS、磁盘吞吐量等基于 AES 的操作可能会速度只有以前的一半。用户需要进一步更新到 2022 年 6 月 23 日预览版或 2022 年 7 月 12 日安全补丁，才能完全解决性能问题。</p><p></p><h4>腾讯发布 Max 二代机器人</h4><p></p><p></p><p>8 月 8 日，腾讯正式发布 <a href=\"https://www.infoq.cn/news/DEilqeqDWEZ3Ajmz6GDQ\">Max 二代机器人</a>\"（以下简称 Max）。据介绍，Max 能够在梅花桩上完成旋转踏步、单桩跳跃、双轮站立等高难度动作。同时，过桩速度达到“前辈”Jamoca 的 4 倍。</p><p></p><p>据了解，Max 是由腾讯 Robotics X 实验室自研的多模态四足机器人，采用原创的腿轮一体的本体设计，实现了“崎岖路面走得稳，平坦路面跑得快”。相比一代，Max 在视觉感知、轨迹规划、运动控制等方面实现技术创新。同时，Max 原创性地融合了机器人腿式与轮式运动模态，从硬件上的机械和电路设计，到软件上的系统框架和控制算法创新，使得 Max 在崎岖路面走得稳，在平坦路面跑得快，更契合人类社会的现实环境。</p><p></p><h4>谷歌向苹果施压：赶紧支持 RCS 标准</h4><p></p><p></p><p>据外媒报道，谷歌 Android 部门周二启动了一项新的宣传活动，专门上线了“Get The Message”网站，鼓励苹果采用新一代跨平台消息传递协议 RCS，以便在跨 iOS / Android 设备的消息传递服务上，实现 iMessage 可提供的大部分功能。</p><p></p><p>RCS（Rich Communication Suite）是融合通信，指的是通信技术和信息技术的融合，是从 2008 年开始由 GSMA（全球移动通信系统协会）主导研发的次世代手机消息技术。RCS 的诞生，正是为了取代老旧的短信（SMS）与彩信 (MMS) 标准。目前，RCS 协议已经得到了众多厂商的拥护。</p><p></p><p>谷歌也在 Get The Message 网站上，围绕 iOS 与 Android 设备该如何顺畅交换消息发布了不少有力论据，极力<a href=\"https://www.infoq.cn/news/B0KNtrg7ij8b46uk254p\">劝说苹果支持 RCS 新标准</a>\"。熟悉互联网传播套路的谷歌还专门添加了 #GetTheMessage 主题标签，打算在用户中掀起一波“逼宫”浪潮。</p><p></p><h2>AI 开源工具</h2><p></p><p></p><h4>NNAISENSE 正式发布开源进化算法库 EvoTorch</h4><p></p><p></p><p>据外媒报道，8 月 9 日，“递归神经网络之父” Juergen Schmidhuber 创立的人工智能公司 NNAISENSE 宣布正式推出首个<a href=\"https://www.infoq.cn/news/pDBlPGFsDH9mx6uHrq3w\">开源进化算法库 EvoTorch</a>\"，为行业提供进化算法。</p><p></p><p>据介绍，EvoTorch 建立在开源 PyTorch 机器学习库之上。NNAISENSE 的研究科学家 Timothy Atkinson 表示，EvoTorch 有几个组件，包括一系列进化算法和日志记录功能，因此数据科学家可以实时跟踪机器学习实验。“主要思想是，你可以使用 PyTorch 中构建的任何内容，并立即使用 EvoTorch 对其进行优化”。</p><p></p><p>NNAISENSE 还将 EvoTorch 与用于扩展 Python 和 AI 应用程序的开源 Ray 框架集成。Atkinson 表示，如果数据科学家将问题构建为 PyTorch 函数以在 EvoTorch 上进行优化，则可以扩展到数千个 CPU 和数百个 GPU。</p><p></p><p>地址：https://evotorch.ai/</p><p></p><h2>IT 业界热评新闻</h2><p></p><p></p><h4>Meta聊天机器人自曝“家丑”：公司为赚钱而剥削人</h4><p></p><p></p><p>近日，Meta 公司推出了一款名为BlenderBot 3的人工智能聊天机器人，号称能以自然语言讨论几乎任何话题。不过，机器人的对话内容很快引发吐槽和争议。</p><p></p><p>据英国广播公司（BBC）11日报道，当被问到对Meta首席执行官马克·扎克伯格的看法时，机器人回应道：“没有强烈的感情。他是个好商人，但其商业行为并不总是符合道德规范。”机器人还自爆“家丑”，说公司为赚钱而剥削人，而扎克伯格却满不在乎，这种情况必须终止。机器人还打趣称，他有这么多钱，却总穿同样的衣服。</p><p></p><p>BBC分析认为，机器人通过互联网搜索为聊天话题寻找答案，因此它对Meta公司和扎克伯格的评价或是通过算法在网上“学习”其他人意见后得出的。</p><p></p><p>网友热评：胆子这么大，不怕被整顿吗？</p><p></p><h4>雷军：公司账上必须留出来能发 18 个月工资现金，就是天塌了都不许动</h4><p></p><p></p><p>8月11日，小米集团创办人、董事长兼CEO雷军在个人微博发布视频表示，其公司的账上必须留出来能发18个月工资的现金。“有一次公司发不出工资，我焦虑很多个晚上都睡不着觉。以至于后来，我一定要在公司的账上留一笔现金，就是天塌了都不许动，就是要确保能发18个月的工资。”</p>",
    "publish_time": "2022-08-14 14:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "元宇宙招聘潮开启：500万高薪不稀奇；消息人士：腾讯幻核停止更新但未裁员；以太坊合并日期提前4天，将减少1亿美元的额外ETH发行｜周报",
    "url": "https://www.infoq.cn/article/rqrzbM15zJuYXxmOm6OI",
    "summary": "<p></p><blockquote>区块链周报栏目从产业动态、数字货币、权威观点、监管和技术等方面，为您总结了本周区块链领域发生的头条事件，让您更快速了解行业最新动态。更多信息关注公众号：区块链前哨（ID：blockchain-666）</blockquote><p></p><p></p><h2>企业动态</h2><p></p><p></p><h4>消息人士：腾讯幻核停止更新但未裁员，部分数字藏品滞销已锁仓处理</h4><p></p><p>据《中国企业家》报道，从接近腾讯的人了解到，目前腾讯旗下数字藏品平台“幻核”业务已经停止更新，但未裁员。目前，平台上的所有藏品状态都处于已结束、已售完或已领完状态。在今年6月，幻核的一些数字藏品出现了滞销现象，幻核对其进行了锁仓处理并关闭了交易。</p><p></p><p>此前消息，7月20日，腾讯内部人士透露，腾讯计划关停数字藏品业务“幻核”，对此，幻核回应裁撤传言称，目前运营照旧，正筹备App全新版本。</p><p></p><h4>蚂蚁区块链法定代表人由倪行军变更为邹亮</h4><p></p><p>天眼查App显示，近日，蚂蚁区块链科技（上海）有限公司发生工商变更，法定代表人由倪行军变更为邹亮，同时，倪行军卸任执行董事职务，邹亮任董事长兼总经理。</p><p></p><p>蚂蚁区块链科技（上海）有限公司成立于2018年12月，注册资本1亿人民币，由蚂蚁链（上海）数字科技有限公司全资持股。不久前，倪行军接替井贤栋，担任支付宝（中国）网络技术有限公司法定代表人、董事长。</p><p></p><h4>南京银行发布首套数字藏品“你好鸭”，入局元宇宙新赛道</h4><p></p><p>据中国经济新闻网报道，南京银行于2022年8月10日上午10:00，正式发布首款数字藏品“你好鸭”。据了解，本次数字藏品发布是以南京银行品牌IP“你好鸭”为形像基础，精心策划5大系列，共计2022款。该系列数字藏品由腾讯至信链提供可信权益证明。</p><p></p><h4>彭博社：FTX与孙宇晨正就收购李林的火币股份进行洽谈</h4><p></p><p>外媒报道，火币李林正在寻求以30亿美金的估值出售它在交易所的多数股权。FTX与孙宇晨已经与其进行了初步接触。真格基金和红杉中国等股东在7月股东大会上知道了李林的决定，交易最早可能在本月底完成。</p><p></p><h4>比特大陆向香港理工大学捐赠100万美元，用以研究比特币及碳中和融合发展</h4><p></p><p>据官方消息，比特大陆携旗下品牌蚂蚁矿机，通过香港可持续技术基金会向香港理工大学捐赠100万美元，助力其开展研究比特币对碳中和潜在助益的核心项目。 该项目将在“比特币碳足迹的发展变化和多相性、比特币与碳中和问题、智能化能源赋能比特币矿工和能源公司、比特币行业领导者对可持续发展目标的作用”四个方面开展实证研究，并最终输出白皮书作为研究结果。</p><p></p><h4>微软称索尼试图抑制 XGP 发展</h4><p></p><p>据外媒报道，微软在提交给巴西经济防卫管理委员会（CADE）的一份文件中，讨论了动视暴雪收购的相关事宜。微软声称索尼正在尝试通过向游戏开发者们支付“封禁费”，来阻止游戏加入微软 Game Pass 订阅服务，以抑制其发展。</p><p></p><h2>产业动向</h2><p></p><p></p><h4>国家网信办集中整治涉虚拟货币炒作乱象</h4><p></p><p>据网信中国 8 月 9 日消息，随着虚拟货币的兴起，与之相关的投机、炒作、诈骗等活动愈演愈烈，一些网民受投资虚拟货币可获高额回报等虚假宣传迷惑，盲目参与到相关交易活动中，给自身财产带来较大损失。今年以来，国家网信办贯彻落实党中央决策部署，高度重视网民举报线索，多举措、出重拳清理处置一批宣传炒作虚拟货币的违法违规信息、账号和网站。</p><p></p><p>按照《关于进一步防范和处置虚拟货币交易炒作风险的通知》精神，国家网信办督促指导主要网站平台切实落实主体责任，持续保持对虚拟货币交易炒作高压打击态势，加大对诱导虚拟货币投资等信息内容和账号自查自纠力度。微博、百度等网站平台根据用户协议，关闭 @ICE 暴雪创始人、@币圈爆爺等 1.2 万个违规用户账号，清理“投资比特币轻松赚钱”等违规信息 5.1 万余条。</p><p></p><p>下一步，国家网信办将继续会同相关部门，加强对虚拟货币相关非法金融活动的打击力度，依法保护人民群众财产安全。提醒广大网民树立正确投资理念，增强风险防范意识，不参与虚拟货币交易炒作活动，谨防个人财产受损。</p><p></p><h4>元宇宙招聘潮开启：500万高薪不稀奇，技术人才最稀缺</h4><p></p><p>根据报道，多家互联网、游戏类企业计划在近期扩大元宇宙人才招聘规模。在大厂屡屡“过冬”、降本增效裁员的现状下，元宇宙人才需求依旧很高，企业之间竞争激烈。薪资方面，业内人士告诉记者，普遍应届生能达到40万-50万元左右，10年经验的资深工程师薪资约为100万-200万元，对于特别优秀的人才，开出400万-500万元的高薪都不稀奇。包括红杉中国、高瓴创投等国内一线投资机构也向记者透露，已在元宇宙领域布局多家初创企业。</p><p></p><h4>以太坊开发者：合并日期提前了4天将减少1亿美元的额外ETH发行量</h4><p></p><p>8月12日，以太坊开发者ansgar.eth发推称，在今天的电话会议中，我们将以太坊合并日期提前了4天，从9月19日提前到9月15日。这4天的PoW将导致1亿美元的额外ETH发行量。</p><p></p><p>Protocol Guild（一个核心开发资助组织）在其整个存在期间总共筹集了1000万美元。决定不使用协议内核心开发资金是一个非常艰难的选择。这是我们对以太坊可信的中立性的重视。</p>",
    "publish_time": "2022-08-14 20:06:15",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]