[
  {
    "title": "开源如何助力软件开发团队",
    "url": "https://www.infoq.cn/article/UhDl1z5zO5qhiYkD4KES",
    "summary": "<p>近年来，开源软件的使用和开源贡献程度在显著增加，并继续成为开发者个人和专业项目的来源。对许多新进入软件开发领域的人来说，为开源项目做出贡献已经成为一种仪式。开源社区在帮助初级开发者解决技术问题的同时，也为他们提供了很好的学习和交流机会。</p><p>&nbsp;</p><p>在许多方面，为开源项目做贡献也变得比以往任何时候都容易。软件协作和开发平台（如GitHub）的发展使得参与开源贡献的机会变得更加大众化，而行业活动（如<a href=\"https://streaklinks.com/BGxxDTHsrEWPcWPbCwfIf65-/https%3A%2F%2Fhacktoberfest.digitalocean.com%2F\">Hacktoberfest</a>\"）或社区论坛也成为开发者寻找他们第一个贡献项目的地方。</p><p>&nbsp;</p><p>开源软件对科技行业和开发者来说至关重要，这一点毋庸置疑。然而，开源社区仍然面临着各种各样的挑战。围绕开源建立的社区和开源所提供的好处是非常有影响力的——技术领导者会鼓励更多的人参与其中，包括他们的团队和整个行业。</p><p></p><h2>开源参与度</h2><p></p><p>&nbsp;</p><p>DigitalOcean最近发布的一项关于开源社区状态的<a href=\"https://streaklinks.com/BGxxDTHPDxe898I6zQoB2vS6/https%3A%2F%2Fwww.digitalocean.com%2Fcurrents%2Fjune-2022\">报告</a>\"表明，大约50%的被调查开发者表示他们在过去的一年中参与了开源。在参与的开发者当中，几乎所有人（93%）表示，自疫情开始以来，他们的参与程度要么提高了，要么保持不变。这表明，尽管过去几年疫情对开发者的工作与生活带来了影响，但致力于开源的开发者已经找到了将这种实践融入日常和“新常态”的方法。</p><p></p><h2>参与开源贡献所面临的挑战</h2><p></p><p>&nbsp;</p><p>然而，即使是最坚定的开发者也承认，时间约束是参与开源项目的最大障碍之一。DigitalOcean的研究发现，大多数参与开源项目的开发者每周会花1到5个小时在开源项目上，并将“缺乏资源/时间”和“技术债务”列为他们目前面临的两大挑战。</p><p>&nbsp;</p><p>除了时间约束之外，开源世界有时可能不欢迎那些努力参与的人。Carnegie Mellon对开源动态的一项研究表明，开源项目贡献者之间的交流可能会演变为“上下文相关的、微妙的和消极的”评论，或者贡献者可能会发现他们面对的是僵化而死板的贡献策略。当项目面临严重的文档负债时，开源项目贡献者之间的交流也会迅速中断。当（大多数）开源项目受到时间和资源的约束时，首先受影响的是文档化程度。如果没有完整的文档，新人将面临非常陡峭的学习曲线，这导致他们很难参与贡献，除非他们已经非常熟悉项目。</p><p>&nbsp;</p><p>与技术行业的其他领域一样，软件项目也缺乏多样性和包容性。DigitalOcean的研究发现，虽然大多数开发者认为开源的包容性在过去几年中有所提升，但少数群体的成员对这种看法存在异议——有26%的少数群体成员不认同开源的包容性，而非少数群体的这一比例只有12%。管理开源项目的贡献者已经在寻找各种各样的解决方案，试图减轻有害行为，例如通过禁令和积极的审核来强制执行行为准则，但即使是这些解决方案也严重依赖于审核人员在这些项目上的时间投入。</p><p>&nbsp;</p><p>在目前的状态下，开源贡献似乎介于“爱好”和“志愿者工作”之间。为开源项目腾出时间的开发者正在做着重要和创新的工作，但这些工作往往没有得到各方的承认，尤其是那些从这些工作成果中受益的公司。开源软件的诞生方式（即软件是如何由大多数没有或缺乏资源的人在网上构建、开发和更新的）与开源技术在当今公司发展中所扮演的角色相去甚远。</p><p></p><h2>开源为我们带来了什么</h2><p></p><p>&nbsp;</p><p>技术领导者和开发者一直承认开源软件对他们的公司产出了巨大影响。64%的开发者表示，他们公司50%或更多的项目使用了开源软件，这一比例在初创公司和小型企业中甚至更高。35%的初创公司和中小企业在其50%或更多的项目中使用了开源代码，而大型企业的这一比例为28%。</p><p>&nbsp;</p><p>当大公司公开谈论开源时，通常会从安全性的角度出发。亚马逊、谷歌和微软等公司已经加入了各种基金会和组织，如开源安全基金会（Open Source Security Foundation，OpenSSF），这个基金会专注于改善开源开发和实现中的网络安全实践，并确保开源的“供应链”安全。这些团体和组织对于开源软件的长期成功和可持续发展来说非常重要，但并没有太多地关注如何解决开发者在维护开源项目中所面临的困难。当开发者被问及安全方面的考虑时，大多数人（43%）相信雇佣专门的安全专家来监督项目或者增加对贡献者本身的报酬和培训有助于提高安全性。</p><p>&nbsp;</p><p>在较小的范围内，各种水平的开发者借助开源代码库来解决问题、扩展他们的技能或处理新的场景——这些带来了个人和专业方面的好处。35%的开源开发者表示，他们通过开源贡献提升了自己的技能，19%的人表示他们与更多人建立了联系，还有11%的人甚至因此找到了工作机会。强大的开源社区也是让开发者继续做出贡献的关键——32%的开发者表示，开源贡献让他们感觉到“意义或作为社区一份子的归属感”，20%的人甚至扮演了导师的角色，帮助其他社区成员发展他们的技能。</p><p>&nbsp;</p><p>尽管大部分都是无偿的，但这些志愿者工作、指导和社区在保持开源活跃度和参与度方面发挥了关键作用，即使开源开发者面临时间和技术债务方面的挑战。<a href=\"https://streaklinks.com/BGxxDTHenro2sEVPdAuTU0HU/https%3A%2F%2Foctoverse.github.com%2Fsustainable-communities%2F\">GitHub 2021年度Octoverse状态报告</a>\"显示，开源社区的指导承诺使开源项目的生产力提高了46%。这种效应在工作场合中也能看到，“指导几乎让形成强大的文化具有成倍的可能性”。在合适的环境下，强大的开发者社区会让开源变得更好，强大的开源社区也会让开发者变得更好。</p><p></p><h2>开源的未来</h2><p></p><p>&nbsp;</p><p>当关于公司和组织如何回馈开源社区的问题出现时，支付报酬成了一个首当其冲的话题。开源贡献的报酬是一个备受争议的话题。一方面，大多数开发者（在DigitalOcean的报告中有53%的开发者）似乎都同意或非常同意个人应该为从他们的开源贡献中获得报酬，而另一方面，也有开发者担心开源盈利或融资模型可能会导致开发生态系统变得更加封闭，而不是更加开放。</p><p>&nbsp;</p><p>企业可能不愿意为开源软件付费，或者为开源贡献付费，但一些行业领袖已经在探索其他替代方案，作为一种与社区更深入合作并“回馈”社区的方式。例如，去年思科聘请了一个开源主管，作为开源计划、思科客户和不同商业团体之间的“结缔组织”，希望为那些“隐形工作”的开发者和维护者提供支持。然而，这些角色或计划在很大程度上依赖于内部有人倡导开源，并说明构建开源社区的ROI。最近，这些工作落在了开发者关系（DevRel）和开发者倡导团队（这些团队开始在一些大型科技公司中不断发展壮大）的肩上。</p><p>&nbsp;</p><p>开发者认为，公司可能可以将工作时间的一部分分配给开源，这是解决时间和优先级问题的一个潜在的解决方案。79%的被调查开发者同意或强烈同意公司应该将部分工作时间分配给开源。在未来，开源贡献可以包含在开发者的工作描述中，或者公司可以将开源时间纳入到员工志愿者工作和大型企业常见的社会公益项目中。特别是在后疫情工作场所当中，员工现在比以往任何时候都更有可能希望将自己的时间和技能贡献给他们认为有价值的工作或回馈给社会。如果不鼓励将工作时间分配给开源项目或进行志愿者项目，公司可能会错过一个可以解决开源信任问题和员工参与度问题的解决方案。</p><p>&nbsp;</p><p>激励参与开源的问题也可能是一个代际问题——经验较少的开发者（不足一年）比经验丰富的开发者更有可能在过去的一年中参与过开源项目。我们可以推测，也许更有经验的开发者在成长为更高级的角色时，会遇到更大的时间限制和带宽问题，这将取决于公司如何提供公平的竞争环境让所有类型的开发者都有机会参与到在公司级别的开源计划中。这看起来就像是在生产进度中为开源贡献和评审分配时间，或者让开源责任成为某些角色或头衔的关键组成部分。</p><p>&nbsp;</p><p>最终，技术领导者、公司和个人开发者将不得不协同工作，有效地最大化开源为行业带来的创新和好处，同时又不失去社区和协作的整体价值（这是开源项目的关键）。就目前的情况而言，开源项目代表我们正在通过最好的、最具合作性质和最富激情的方式使用技术。开发者可以获得指导和新的机会，以最符合他们兴趣的方式发展他们的技能。正如大多数工程专业人士和团队领导者已经认识到的那样，工作场所可以多一点这种精神。</p><p>&nbsp;</p><p>作者简介：</p><p>&nbsp;</p><p>Al Sene是DigitalOcean的工程副总裁兼架构总经理。Al负责推动DigitalOcean关键服务和产品的创新和速度，以满足客户不断变化的需求。在加入DigitalOcean之前，Al曾担任DDN和NexGen Storage的工程副总裁，后者被Fusion-io和SanDisk收购。他还在惠普担任过几个技术和管理职位，并持有存储专利。他在St. Cloud State University学习计算机科学，并在Colorado State University获得工商管理硕士学位。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/open-source-contributing-development/\">How Open Source is Contributing to Your Team’s Development: What Leaders Should Know</a>\"</p><p></p><p>InfoQ 发布<a href=\"https://www.infoq.cn/minibook/DTAg4l8piWHrBGfU3der\">《中国开源发展研究分析 2022 》研究报告</a>\"，为开发者，技术管理者，开源社区运营、市场，开源办公室工作人员以及其他对开源有一定基础认知，但期待进一步了解开源、理解开源的朋友，带来信息上的增量以及对开源趋势、开源人画像方面的关键洞察。</p>",
    "publish_time": "2022-08-17 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "龙蜥社区正式发布virtio 1.2，打造新版虚拟化 IO 标准",
    "url": "https://www.infoq.cn/article/QF4BocH6R58D2fHVka0r",
    "summary": "<p></p><h2>一、virtio spec 是什么?</h2><p></p><p></p><p>在云计算如火如荼的今天，我们应该经常可以在云计算平台上看 \"virtio\" 这个词，它出现在云计算机的各种设备上：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e0/e06b1529263c3fe2b554db66176c942a.png\" /></p><p></p><p>它是怎样的一种存在，在虚拟化的技术领域扮演着一种怎样的角色呢?</p><p></p><p>virtio 是一种 I/O 半虚拟化解决方案，是一套通用 I/O 设备虚拟化的程序，是对半虚拟化 Hypervisor 中的一组通用 I/O 设备的抽象。</p><p></p><p>一般来说，我们所说的 virtio 包含三个部分：</p><p></p><p>虚拟机中的 virtio 网卡驱动宿主机或者 CIPU 上面的 virtio 设备的实现virtio spec (规范)前面两个是 virtio 在不同的操作系统及计算机模拟器中具体实现的 driver 和 device，driver 和 device 如何实现并没有严格的规定，基于其所处的环境不同而有所区别，但是 driver 与 device 之间的交互必须严格遵守 virtio spec 的定义。这样才能保证所有的 OS 在不同的 host 上的模拟器里面都可以正常运行。</p><p></p><p>所以 virtio spec 是 virtio 的灵魂。</p><p></p><p>virto spec 通过定义一套 virtqueue 机制，实现 guest 和 host 的通信。这套机制可以应用于多种设备(网络设备、块设备等)。所以 virtio spec 发展出了多种设备，基本完成了对于虚拟化场景下各种设备的覆盖。</p><p></p><h4>1.1 我们为什么选择它呢?</h4><p></p><p></p><p>virtio 是一种半虚拟化的技术，如果对于设备进行全虚拟化，hypervisor 就要对于所有的硬件请求指令进行截获，这对于性能的影响是巨大的。</p><p></p><p>但是实际上 guest 本质上是一个 host 上的进程，它与 hypervisor 进行交互并不用这么麻烦，完全可以基于进程之间的通信方式进行交互。只是这种方式要 guest 进行配合。所以基于此实现的 virtio 可以获得更高的性能。这也就是 virtio 获得广泛支持的原因。</p><p></p><h4>1.2 virtio spec 的历史</h4><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/75/75fb596fc4d782026ab2ab6c98dffffc.png\" /></p><p></p><p>2012 最早由 Rusty Russell 起草的并不是一个正式的规范。后续 virtio spec 由 virtio 技术委员会负责，并发布了多个版本。在委员会的主持下，社区的广泛参与下，不断地为 virtio spec 增加新的特性与能力，目前 virtio spec 已经推进到 v1.2 版本。</p><p></p><h4>1.3 virtio spec 1.2 关键时间点</h4><p></p><p></p><p>25 Jan 2022 virtio spec 冻结10 May 2022 &nbsp;- 08 June 2022 Public Review01 July 2022&nbsp;virtio v1.2 正式版本完成 &nbsp;html15 July 2022 virtio v1.2 正式对外宣布发布 announcement经过半年多的努力，vrtio 1.2 终于正式发布了。</p><p></p><h4>1.4 virtio spec 1.2 新特性</h4><p></p><p></p><p>首先 virtio spec &nbsp;1.2 对更早的版本是完全兼容的，virtio spec 定义的所有特性都是通过 features 进行协商的，所以在实现上可以平滑地进行过渡。并不存在升级之后不同版本之间的不兼容问题。</p><p></p><p>在设备方面 virtio spec 1.2 新支持了一些设备: virtio-pmem，virtio-fs， virtio-rpmb......</p><p></p><p>一些主流的设备也支持了一些新的特性，比如 virtio-net 增加了这些新的特性：</p><p></p><p>UDP segmentation offloadReceive Side ScalingPer-packet hash reportingGuest hdrlen optimizationLink speed and duplex reporting此外， virtio core 还增加了一些新的基础特性：Per-virtqueue resetShared memory resourcesObject resources for inter-device sharingVirtio-pci vendor-specific capabilitiesVirtio-pci queue_notify_data optimization总体而言，这次 virtio spec 1.2 的发布带来了很多让人激动的新特性。相信等这些功能正式实现之后，我们会感受到更加现代化的 virtio。同时也是一个驱动各个厂家完善自家 virtio 实现的机会。</p><p></p><h2>二、Per-virtqueue reset</h2><p></p><p></p><p>virtio spec 1.2 中的 Per-virtqueue reset 是由阿里云的 Xuan Zhuo <a href=\"mailto:xuanzhuo@linux.alibaba.com\">xuanzhuo@linux.alibaba.com</a>\"起草的，引入这个特性的目的是解决 virtio-net 不支持队列级别的 reset 操作的问题。这在很多现代化的网卡中是一个比较常见的功能, 是实现很多功能的基础能力, 为了让 virtio-net 支持更多能力, 这个特性的引入是必须的。但是 Per-virtqueue reset 并不只限于 virtio-net 这一种设备，它是一个 virtio 的基础能力，相信其它的 virtio 设备也会慢慢支持这个 feature。</p><p></p><h4>2.1 Per-virtqueue reset 的实现过程</h4><p></p><p></p><p>Per-virtqueue reset 由 driver 针对某一个队列发起，基于某一种 transport(比如 PCIe) 通知 device。device 停止使用队列，driver 在 reset 之后可以重新 re-enable 队列。virtio spec 定义了这个过程中详细的交互流程和信息。</p><p></p><p>以下是 virtio spec 中定义的详细流程：</p><p></p><p>driver 基于 transport 通知 device 某个指定的队列要 reset。device 收到请求之后设置 reset 状态为 1，停止此队列的所有操作，包括中断等，并设置队列的所有的状态到初始值。在 device 完成 reset 操作之前，返回给 driver 的 reset 状态都是 1，直到 reset 操作完成。reset 完成之后 reset 及 enable 的值都要设置成 0。driver 在检查到队列的 reset 状态变成 0 之后，就表示device reset 操作已经完成了。这个时候开始，driver 就可以安全地回收队列占用的相关资源了。到此 driver 对于队列的 reset 操作就已经完成了。之后 virtio driver 可选地进行 re-enable 操作，在操作的过程中，driver 可以给 device 新的参数来 re-enable 这个队列。比如新的队列大小。以上是一个完整的 reset &amp; re-enable 的过程，理论上 re-enable 是可选的。</p><p></p><h4>2.2 Per-virtqueue reset 的意义</h4><p></p><p></p><p>对于现代的很多硬件设备来讲，对于队列进行 reset 是一个比较常见的功能，所以这个功能的引入让 virtio 设备更加现代化。早期 virtio 的出现是伴随着高性能的需求而来的，我们原来更加关注它在性能上的基本功能，一些高级功能并不重视。per-virtqueue reset&nbsp;让 virtio 对于队列的使用更加灵活，譬如我们可以基于 per-vertqueue reset 实现下面两个功能：</p><p></p><p>1.调整virtio-net 网卡队列的ring size。在 virtio-net 的场景下，基于&nbsp;per-virtqueue reset&nbsp;我们可以实现网卡队列 ring size 的调整。目前一般的网卡都支持使用&nbsp;&nbsp;ethtool -G eth0 rx  tx 来调整队列的大小，但是原来的 virtio-net 一直是不支持这样一个简单的功能的，现在基于 per-virtqueue reset，我们很快就可以在 Linux 下使用这个命令来调整队列的大小。</p><p></p><p>2.支持AF_XDP，扩展云上应用的边界。除了应用于上述简单的场景之外，我们还可以在更高级的场景应用到这个功能。per-virtqueue reset 也可以视作一种资源的快速回收机制。比如在 virtio-net 的情况下，我们必须要等待收到新的数据包或者硬件完成数据包的发送才能完成对于 buffer 资源的回收。而现在基于&nbsp;per-virtqueue reset，driver 可以不用被动地等待而是可以主动调用 reset 快速地让 device 释放对于某个队列上的 buffer 资源的占用，实现资源的快速回收。这可以让 virtio-net 支持 AF_XDP 这样的高级功能，实现在 linux 内核框架下的高性能收发包。</p><p></p><p>更多的应用场景还等待大家的探索。</p><p></p><h4>2.3 实现及进展</h4><p></p><p></p><p>以上都是 virtio spec 的定义，Xuan Zhuo作为这个 feature 的起草人，在这个 feature 正式进入 virtio spec 之后，就开始向 Linux kernel 社区开源相关的实现，其它 device 后端实现也都在推进中:</p><p></p><p>virtio core 支持 per-virtqueue reset 功能的 patch set 近期应该可以进入 linux 内核主线，这个 patch set 里面包含 virtio-net 支持 ring size 的实现。virtio-net 支持 AF_XDP 的实现也会近期开源到社区。qemu/vhost-user(DPDK)/vhost-kernel 的后端实现也在推进中&nbsp;@Kangjie Xu <a href=\"mailto:kangjie.xu@linux.alibaba.com\">kangjie.xu@linux.alibaba.com</a>\"。相信大家不久之后就可以在新版本的 Qemu 及 linux kernel 上体验到这个功能了。</p><p></p><h2>三、高性能网络&nbsp;Virtio SIG</h2><p></p><p></p><p>virtio 作为一个云计算大范围使用的技术，国内的各大云厂家基本都是基于它实现的，但是这么些年我们对它的反馈与参与是非常少的，基本都是拿来主义的状态。最近，我们开始注意到，阿里等国内的云厂家开始积极地参与其中，修复 bug，参与标准制定，推进实现等， 一起推广及做强云基础技术。这对于国内云技术的长远发展是非常好的一件事。希望这样的深度的参与越来越多，共同推进 virtio 的发展。</p><p></p><p>为了更好地支持更多的特性和优化在龙蜥操作系统的落地，我们在龙蜥社区高性能网络SIG下组建了 virtio 兴趣小组，通过加强社区内各个 virtio 相关的团队及公司之间的合作，增强彼此在这一块的沟通和了解，从而推动 virtio 本身以及其在龙蜥更好的发展。希望后续有更多的社区伙伴来共同参与进来，也欢迎大家积极参与讨论，提问题或需求，大家以一种平等的关系共构建龙蜥社区的&nbsp;virtio SIG。我们认为这是一个共赢的过程。</p><p></p><p>原则：共赢、平等、开源。</p><p></p><p>愿景：</p><p>探索 virtio 标准的更多可能性，推进 virtio 标准实现与落地促进技术交流提供技术帮助为各个伙伴提供需求输入同步各个伙伴的开发进展促进各个伙伴之间的合作</p><p></p><p>SIG 成员：丁雪峰(阿里)、衡琪(阿里)、许康捷(阿里)、马江英(Intel&nbsp;&nbsp;CNDP)、 顾正国(云豹智能)、 张明礼(云豹智能)、 杨涛(云豹智能)、孙传明(云豹智能)、龚有华(云脉芯联)、孟祥宏(云脉芯联)、陈杨(云脉芯联)、钱荣(云脉芯联)。</p><p></p><p>欢迎大家加入高性能网络 Virtio SIG。</p><p></p><p></p><blockquote>SIG 地址链接：<a href=\"https://openanolis.cn/sig/high-perf-network\">https://openanolis.cn/sig/high-perf-network</a>\"</blockquote><p></p>",
    "publish_time": "2022-08-17 10:02:30",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]