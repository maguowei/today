[
  {
    "title": "Java 20发布，新特性一览：Amber、Loom 和 Panama 项目",
    "url": "https://www.infoq.cn/article/SZXNxA7DaBzCddCNAUxG",
    "summary": "<p>甲骨文<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2023-March/007517.html\">发布了</a>\"Java编程语言和虚拟机的<a href=\"https://jdk.java.net/20\">20版本</a>\"，最终的特性集中包含了7个JEP：</p><p>JEP 429：&nbsp;<a href=\"https://openjdk.java.net/jeps/429\">作用域值（Scoped Values，孵化阶段）</a>\"JEP 432：<a href=\"https://openjdk.java.net/jeps/432\">记录模式（Record Patterns，第二轮预览）</a>\"JEP 433:&nbsp;<a href=\"https://openjdk.java.net/jeps/433\">switch的模式匹配（Pattern Matching for switch，第四轮预览）</a>\"JEP 434：<a href=\"https://openjdk.java.net/jeps/434\">外部函数与内存API（Foreign Function &amp; Memory API，第二轮预览）</a>\"JEP 436：<a href=\"https://openjdk.org/jeps/436\">虚拟线程（Virtual Threads，第二轮预览）</a>\"JEP 437：<a href=\"https://openjdk.java.net/jeps/437\">结构化并发（Structured Concurrency，第二轮孵化）</a>\"JEP 438：<a href=\"https://openjdk.java.net/jeps/438\">Vector API（第五轮孵化）</a>\"</p><p></p><p>Java 20的<a href=\"https://blogs.oracle.com/java/post/the-arrival-of-java-20\">特性节奏</a>\"类似于JDK 19的7个新特性和JDK 18的9个新特性。但是，与JDK 18之前的几个版本相比，特性要更少一些，比如，JDK 17中有14项特性，JDK16中有17项特性，JDK 15中有14项特性，JDK 14中有16项特性。</p><p></p><p>该版本的JEP为<a href=\"https://openjdk.java.net/projects/amber/\">Amber</a>\"、<a href=\"https://wiki.openjdk.java.net/display/loom\">Loom</a>\"和<a href=\"https://openjdk.java.net/projects/panama/\">Panama</a>\"项目的新一轮预览和孵化持续贡献了特性。在这里，我们探讨其中的几个新特性。值得注意的是，JDK 20中没有代表<a href=\"https://openjdk.org/projects/valhalla/\">Valhalla项目</a>\"的JEP。</p><p></p><h4>Panama项目</h4><p></p><p></p><p>JEP 434和JEP 438属于<a href=\"https://openjdk.java.net/projects/panama/\">Panama</a>\"项目，该项目旨在改善和丰富JVM与定义明确的“外部” API（即非Java）之间的互操作性，其中很可能会包含C库中常用的接口。</p><p></p><p>JEP 434，<a href=\"https://openjdk.org/jeps/434\">外部函数与内存API（第二轮预览）</a>\"，基于反馈进行了改善，并基于JDK 19所提供的JEP 424<a href=\"https://openjdk.org/jeps/424\">外部函数与内存API（预览）</a>\"提供了第二轮预览。相关的孵化包括JDK 18交付的<a href=\"https://openjdk.org/jeps/419\">外部函数与内存API（第二轮孵化）</a>\"和JDK 17中交付的<a href=\"https://openjdk.org/jeps/412\">外部函数与内存API（孵化）</a>\"。该特性为Java应用提供了一个API，能够通过高效地调用外部函数和安全地访问不受JVM管理的外部内存，实现了与Java运行时之外的代码和数据进行互操作。JEP 424的更新包括：统一了<a href=\"https://docs.oracle.com/en/java/javase/14/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemorySegment.html\">MemorySegment</a>\"和<a href=\"https://docs.oracle.com/en/java/javase/14/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryAddress.html\">MemoryAddress</a>\"接口，即内存地址建模为零长度的内存段；增强了密闭的<a href=\"https://docs.oracle.com/en/java/javase/14/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html\">MemoryLayout</a>\"接口，以便于和JDK 19交付的<a href=\"https://openjdk.org/jeps/427\">switch的模式匹配（第三轮预览）</a>\"协同使用。</p><p></p><p>JEP 438，<a href=\"https://openjdk.java.net/jeps/438\">Vector API（第五轮孵化）</a>\"，对之前四轮孵化的反馈进行了增强，即JDK 19交付的JEP 426，<a href=\"https://openjdk.org/jeps/426\">Vector API（第四轮孵化）</a>\"、JDK 18交付的JEP 417,&nbsp;<a href=\"https://openjdk.java.net/jeps/417\">Vector API（第三轮孵化）</a>\"、JDK 17交付的<a href=\"https://openjdk.java.net/jeps/414\">Vector API（第二轮孵化）</a>\"和JDK 16交付的<a href=\"https://openjdk.java.net/jeps/11\">孵化模块</a>\"。该特性的目标是增强Vector API，从而能够根据JEP 424,&nbsp;<a href=\"https://openjdk.java.net/jeps/424\">外部函数与内存API（预览）</a>\"的定义，从<a href=\"https://docs.oracle.com/en/java/javase/14/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemorySegment.html\">MemorySegment</a>\"中加载和存储vector。</p><p>关于如何实现“外部函数与内存API”的可运行应用，可以参阅该<a href=\"https://github.com/carldea/panama4newbies\">GitHub仓库</a>\"，其作者是Azul的开发人员布道师<a href=\"https://www.linkedin.com/in/carldea/\">Carl Dea</a>\"。</p><p></p><h4>Loom项目</h4><p></p><p></p><p>JEP 429、JEP 436和JEP 437属于<a href=\"https://wiki.openjdk.java.net/display/loom\">Loom项目</a>\"，该项目旨在探索、孵化和交付Java VM特性和API，以便于支持易用、高吞吐的轻量级并发和新编程模型。这可以通过虚拟线程、<a href=\"https://www.infoq.com/presentations/continuations-java/\">定界延续（delimited continuations）和尾调用（tail calls）</a>\"来实现。</p><p></p><p>JEP 429，<a href=\"https://openjdk.org/jeps/429\">作用域值（孵化阶段）</a>\"，它是一个<a href=\"https://openjdk.java.net/jeps/11\">正在孵化</a>\"中的JEP，最初叫做范围局部变量（Extent-Local Variables，Incubator），提议在线程内部和线程间共享不可变的数据。这比线程局部（thread-local）变量的做法更好，尤其是在大量使用虚拟线程的时候。</p><p></p><p>JEP 436，<a href=\"https://openjdk.org/jeps/436\">虚拟线程（第二轮预览）</a>\"，提议对JDK 19所提供的JEP 425，<a href=\"https://openjdk.org/jeps/425\">虚拟线程（预览）</a>\"进行第二次预览，以便留出充分的时间为该特性的演进提供更多的反馈和体验。该特性为Java平台提供了虚拟线程，这是一种轻量级线程，可以极大地减少编写、维护和观测高吞吐量并发应用程序的工作量。需要注意的是，本预览版仅对JDK 19所固定的JEP 425的API进行了少量修改，除此之外没有其他变化，所以在第二轮预览中没有任何提议。请参阅InfoQ的<a href=\"https://www.infoq.com/news/2022/05/virtual-threads-for-jdk19/\">新闻报道</a>\"和甲骨文Java平台组的Java开发人员布道师<a href=\"https://www.linkedin.com/in/jos%C3%A9-paumard-2458ba5/\">José Paumard</a>\"的JEP Café<a href=\"https://inside.java/2022/06/08/jepcafe11/\">录像</a>\"。</p><p></p><p>JEP 437，<a href=\"https://openjdk.org/jeps/437\">结构化并发（第二轮孵化）</a>\"，提议基于JDK 19中所提供的 JEP 428，<a href=\"https://openjdk.org/jeps/428\">结构化并发（孵化）</a>\"重新孵化，以便留出充分的时间为该特性的演进提供更多的反馈和体验。此特性的目的是通过引入一个库来将在不同线程中运行的多个任务视为单个工作单元，从而简化多线程编程。这可以简化错误处理和撤销，提升可靠性，并增强可观测性。该JEP的唯一的变化是更新了<a href=\"https://download.java.net/java/early_access/jdk20/docs/api/jdk.incubator.concurrent/jdk/incubator/concurrent/StructuredTaskScope.html\">StructuredTaskScope</a>\"类，以支持在任务作用域中创建的线程可以继承作用域的值。这简化了线程间不可变数据的共享。有关JEP 428的更多详细信息，请参阅 InfoQ的<a href=\"https://www.infoq.com/news/2022/06/java-structured-concurrency/\">新闻报道</a>\"。</p><p></p><p>关于如何实现虚拟线程和结构化并发API的可运行应用，可以参阅甲骨文的Java开发人员布道师<a href=\"https://nipafx.dev/nicolai-parlog/\">Nicolai Parlog</a>\"创建的<a href=\"https://github.com/nipafx/loom-lab\">GitHub</a>\"仓库以及Contrast Security的高级软件工程师<a href=\"https://www.linkedin.com/in/bazlur/\">Bazlur Rahman</a>\"创建的<a href=\"https://github.com/rokon12/project-loom-slides-and-demo-code\">GitHub</a>\"仓库。</p><p></p><h4>Amber项目</h4><p></p><p></p><p>JEP 432和JEP 433属于<a href=\"https://openjdk.java.net/projects/amber/\">Amber项目</a>\"，该项目旨在探索和孵化更小的Java语言特性，以提升生产力。</p><p>JEP 432，<a href=\"https://openjdk.org/jeps/432\">记录模式（第二轮预览）</a>\"，为了响应上一轮<a href=\"https://openjdk.java.net/jeps/12\">预览</a>\"JEP 405，<a href=\"https://openjdk.org/jeps/405\">记录模式（预览）的反馈</a>\"，该JEP包含了功能增强。它提议使用记录模式来解构记录值，以实现对语言的增强。记录模式可以与类型模式结合使用，以“实现强大的、声明式的、可组合的数据导航和处理形式”。类型模式最近通过JDK 19交付的JEP 427，<a href=\"https://openjdk.org/jeps/427\">switch模式匹配（第三次预览）</a>\"、JDK 18交付的JEP 420，<a href=\"https://openjdk.java.net/jeps/420\">switch模式匹配（第二次预览）</a>\"和JDK 17交付的JEP 406，<a href=\"https://openjdk.java.net/jeps/406\">switch模式匹配（预览）</a>\"扩展到了switch&nbsp;case标签中。与 JEP 405相比，它的变更包括，增加了对泛型记录模式类型参数推断的支持，增加了对记录模式出现在增强for语句条件判断中的支持，并删除对了对命名记录模式的支持。</p><p></p><p>与之类似，JEP 433：switch的模式匹配（第四次预览），提供了功能增强，以响应前三轮预览的反馈，即JDK 19交付的JEP 427，<a href=\"https://openjdk.org/jeps/427\">switch的模式匹配（第三次预览）</a>\"、JDK 18交付的JEP 420，<a href=\"https://openjdk.org/jeps/427\">switch的模式匹配（第二次预览）</a>\"和JDK 17交付的JEP 406，<a href=\"https://openjdk.org/jeps/406\">switch的模式匹配（预览）</a>\"。与JEP 427相比，新JEP提供的变更包括，简化了switch标签的语法、switch表达式和语句以及其他支持模式的构造体均支持泛型类型模式和记录模式的类型参数推断。</p><p></p><p>关于如何实现记录模式和switch API的模式匹配的可运行应用，可以参阅Global Points的技术主管<a href=\"https://www.linkedin.com/in/wesleyegberto/\">Wesley Egberto</a>\"创建的<a href=\"https://github.com/wesleyegberto/java-new-features\">GitHub</a>\"仓库，该特性位于java-19目录中。</p><p></p><h4>JDK 21</h4><p></p><p></p><p>目前，JDK 21只包含一个Targeted状态的JEP。JEP 431，<a href=\"https://openjdk.org/jeps/431\">序列集合</a>\"，在JDK 21中已经从Proposed to Target状态<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2023-March/007493.html\">提升</a>\"到了Targeted状态。该JEP提议引入“一个新的接口系列，代表了元素能够以明确的序列或顺序排列在集合中的概念，使其作为集合的结构化属性”。该JEP的动机在于集合框架（Collections Framework）中缺乏定义良好的排序和统一操作集。关于JEP 431的更多信息，请参阅InfoQ的<a href=\"https://www.infoq.com/news/2023/03/collections-framework-makeover/\">新闻报道</a>\"。</p><p></p><p>但是，根据最近提交的JEP草案和提出最终特性的JEP候选方案，我们可以推测出哪些JEP有可能纳入到JDK 21中。</p><p></p><p>JEP 440，<a href=\"https://openjdk.org/jeps/440\">记录模式</a>\"，上周已经从JEP Draft 8300541状态<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2023-March/007470.html\">提升</a>\"至Candidate状态。该JEP最终确定了这一特性，并根据前两轮<a href=\"https://openjdk.java.net/jeps/12\">预览</a>\"的反馈意见进行了改进，即JDK 20交付的<a href=\"https://openjdk.org/jeps/432\">JEP 432，记录模式（第二轮预览）</a>\"和JDK 19交付的<a href=\"https://openjdk.org/jeps/405\">JEP 405，记录模式（预览）</a>\"。该特性使用记录模式来解构记录值，以实现对语言的增强。记录模式可以与类型模式结合使用，以“实现强大的、声明式的、可组合的数据导航和处理形式”。类型模式最近通过JDK 18交付的JEP 420，<a href=\"https://openjdk.java.net/jeps/420\">switch模式匹配（第二次预览）</a>\"和JDK 17交付的JEP 406，<a href=\"https://openjdk.java.net/jeps/406\">switch模式匹配（预览）</a>\"扩展到了switch&nbsp;case标签中。从JEP 432以来，最重要的变更是移除对记录模式出现在增强for语句条件判断中的支持。</p><p></p><p>与之类似，JEP 441，<a href=\"https://openjdk.org/jeps/441\">switch的模式匹配</a>\"，已经从JEP Draft 8300542状态<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2023-March/007471.html\">提升到</a>\"了Candidate状态。该JEP也最终确定了这一特性，并根据前四轮预览的反馈意见进行了改进，即JDK 20交付的JEP 433:&nbsp;<a href=\"https://openjdk.java.net/jeps/433\">switch的模式匹配（第四轮预览）</a>\"、JDK 19交付的<a href=\"https://openjdk.java.net/jeps/427\">JEP 427，switch的模式匹配（第三轮预览）</a>\"、JDK 18交付的<a href=\"https://openjdk.java.net/jeps/420\">JEP 420，switch的模式匹配（第二轮预览）和JDK 17交付的</a>\"<a href=\"https://openjdk.java.net/jeps/427\">JEP 406，switch的模式匹配（预览）</a>\"。该特性通过对switch表达式和语句进行模式匹配，增强了语言的特性。</p><p>JEP 442,&nbsp;<a href=\"https://openjdk.org/jeps/442\">外部函数与内存API（第三轮预览）</a>\"，已经从JEP Draft 8301625状态<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2023-March/007473.html\">提升</a>\"到了Candidate状态。该JEP基于之前的反馈进行了改进，并提供了第三个预览，这些反馈来自JDK 20交付的JEP 434，<a href=\"https://openjdk.java.net/jeps/434\">外部函数与内存API（第二轮预览）</a>\"、JDK 19交付的JEP 424，<a href=\"https://openjdk.java.net/jeps/424\">外部函数与内存API（预览）</a>\"以及相关的孵化，即JDK 18交付的JEP 419，<a href=\"https://openjdk.java.net/jeps/419\">外部函数与内存API（第二轮孵化）</a>\"和JDK 17交付的JEP 412，<a href=\"https://openjdk.java.net/jeps/419\">外部函数与内存API（孵化）</a>\"。该特性为Java应用提供了一个API，能够通过高效地调用外部函数和安全地访问不受JVM管理的外部内存，实现了与Java运行时之外的代码和数据进行互操作。JEP 434的更新包括，在Arena接口中集中管理原生段的生命周期；增强布局路径，用一个新元素来解除对地址布局的引用；删除&nbsp;VaList类。</p><p></p><p>甲骨文公司Loom项目的架构师和技术负责人<a href=\"https://inside.java/u/RonPressler/\">Ron Pressler</a>\"和甲骨文公司Java平台组的架构师<a href=\"https://inside.java/u/AlanBateman/\">Alan Bateman</a>\"在上周提交了JEP Draft 8303683，<a href=\"https://openjdk.org/jeps/8303683\">虚拟线程</a>\"。该JEP提议根据前两轮预览的反馈来最终确定该功能，即JDK 20交付的JEP 436，<a href=\"https://openjdk.org/jeps/436\">虚拟线程（第二轮预览）</a>\"和JDK 19交付的JEP 425，&nbsp;<a href=\"https://openjdk.org/jeps/425\">虚拟线程（预览）</a>\"。该特性为Java平台提供了虚拟线程，这是一种轻量级线程，可以极大地减少编写、维护和观测高吞吐量并发应用程序的工作量。与JEP 436相比，最重要的变化是，虚拟线程现在完全支持<a href=\"https://openjdk.org/jeps/8303683#Thread-local-variables\">线程局部（thread-local）变量</a>\"，消除了选择不使用这些变量的选项。关于JEP 425的更多细节，请参阅InfoQ的<a href=\"https://www.infoq.com/news/2022/05/virtual-threads-for-jdk19/\">新闻报道</a>\"和甲骨文Java平台组的Java开发人员布道师<a href=\"https://www.linkedin.com/in/jos%C3%A9-paumard-2458ba5/\">José Paumard</a>\"的JEP Café<a href=\"https://inside.java/2022/06/08/jepcafe11/\">录像</a>\"。</p><p></p><p><a href=\"https://jdk.java.net/21/\">JDK 21</a>\"的正式发布日期尚未公布，但按照六个月的发布周期，预计将于2023年9月中旬交付。作为开发人员，我们可以预计特性冻结会在2023年6月中旬。关于其他JEP草案和候选版本的更多细节，可以在InfoQ的这篇更详细的<a href=\"https://www.infoq.com/news/2023/03/java-20-so-far/\">新闻报道</a>\"中找到。</p><p></p><p>JDK 20现在可以从<a href=\"https://jdk.java.net/20\">甲骨文网站</a>\"下载，其他供应商的二进制文件预计将在未来几天内提供。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/03/java20-released/\">Java 20 Delivers Features for Projects Amber, Loom and Panama</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/o4cLTZJXMgC7pJwfA8og\">JDK 20 和 JDK 21 最新动态</a>\"</p><p><a href=\"https://www.infoq.cn/article/P1vXcLlwewcK5XQQIQdN\">Java 近期新闻：JDK 21 序列集合、JDK 20 向量 API、Gen ZGC、Hilla 2.0</a>\"</p>",
    "publish_time": "2023-03-24 09:36:58",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "SUSE CEO离职，立即生效",
    "url": "https://www.infoq.cn/article/WiNrWV5QrqayNtSGGjFw",
    "summary": "<p>当地时间3月22日，SUSE宣布任命 Dirk-Peter van Leeuwen 为公司新任CEO，自 2023 年 5 月 1 日起生效。现任 <a href=\"https://www.infoq.cn/article/HmppHMJseJVj7sZkR7Te\">SUSE</a>\" CEO Melissa Di Donato 将在任职近四年后立即离职，以开始“她职业生涯的下一个篇章”。</p><p></p><p>在加入 SUSE 之前，Di Donato 是 SAP 的CEO和首席营收官，负责该公司数字核心解决方案的全球营收、利润和客户满意度。她还曾在 Salesforce 担任高级管理职位，并因其对不断发展的全球组织的贡献而获得认可，获得了 2018 年商业管理卓越数字大师奖。</p><p>&nbsp;</p><p> Melissa Di Donato离开后，SUSE 的首席财务官 Andy Myers 除了担任首席财务官一职外，还被任命为临时 CEO。</p><p>&nbsp;</p><p>即将上任的 CEO van Leeuwen 拥有丰富的行业经验，尤其是在开源软件方面。他曾在红帽工作近 20 年后，最近被任命为红帽的高级副总裁兼北美总经理，之前在亚太地区和日本工作，van Leeuwen 预计将领导SUSE公司的“下一阶段加速盈利增长”。</p><p>&nbsp;</p><p>此前，在 Di Donato 的领导下，<a href=\"https://www.infoq.cn/article/2fHFRAFOYTE5QZaXbU43\">SUSE </a>\"的收入增长了 60%，并且公司完成了对Rancher和NeuVector的战略收购，使公司在容器管理和安全的高增长市场中占据一席之地。</p><p>&nbsp;</p><p>Melissa Di Donato离开的消息会让很多人感到意外。在 SUSE 最新的季度财务业绩中，即 2023 财年第一季度，该公司的表现好于预期，营业利润增长了 101%。收入和年度经常性收入也双双增长，分别达到 10% 和 11%。</p><p>&nbsp;</p><p>SUSE 于 2021 年 5 月在法兰克福证券交易所上市，成为欧洲市值最高的上市软件公司之一。然而，自公司首次上市以来，SUSE 的股价已经下跌了 45%。</p><p>&nbsp;</p><p>在一份新闻稿中，Di Donato 表示：“我为我担任CEO期间所取得的业绩感到自豪，也为此期间客户、合作伙伴和所有SUSE大家庭中的成员所取得的成就感到自豪。在SUSE度过了美好的四年之后，现在是时候将领导权交给未来的领导团队了，我祝愿 SUSE 的每个人都一切顺利。”</p><p>&nbsp;</p><p>监事会主席 Jonas Persson 表示：“我谨代表监事会感谢 Melissa 对 SUSE 的领导，因为她为公司上市奠定了基础并完成了IPO。她的工作加强了 SUSE 的全球品牌，并为未来几年的成功奠定了基础。我们希望她在未来的生活中一切顺利。董事会相信，Dirk-Peter 在企业软件行业的出色业绩和专业知识是推动SUSE走向下一段旅程的理想CEO。我们很高兴他的加入，并期待 SUSE 作为世界上最具创新性的开源公司继续前进。”</p><p>&nbsp;</p><p>即将上任的 SUSE CEO Dirk-Peter van Leeuwen 表示：“我要感谢监事会给我机会担任 CEO，还要感谢 Melissa 带领公司度过了重要的转型和发展时期。多年来我一直钦佩这个组织，现在我期待着与执行团队和整个组织合作，抓住市场提供的各种机会，为我们的客户和合作伙伴服务。我知道 SUSE 的员工都是业内最优秀的，我很高兴看到我们可以共同取得成就。”</p><p></p><p>参考链接：https://erp.today/suse-changes-hats-new-ceo-to-lead-accelerated-growth/</p><p>&nbsp;</p>",
    "publish_time": "2023-03-24 09:46:22",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "ChatGPT联网终极进化！插件系统正式开放、无需编码就能上手，网友：这是我见过最疯狂的系统",
    "url": "https://www.infoq.cn/article/sqGLAIdIKP1jv2YKMd3C",
    "summary": "<p></p><p>当地时间 3 月 23 日，OpenAI <a href=\"https://openai.com/blog/chatgpt-plugins\">宣布正式上线</a>\"了以安全为核心的 ChatGPT 插件系统。OpenAI 插件将 ChatGPT 连接到第三方应用程序，之后 ChatGPT 便能够与开发人员定义的 API 进行交互，从而增强 ChatGPT 的功能并允许其执行范围广泛的操作，主要包括：</p><p></p><p>检索实时信息，例如体育比赛成绩、股票价格、最新消息等。检索知识库信息，例如公司文件、个人笔记等。代表用户执行操作，例如订机票、订餐等。</p><p></p><p>目前，插件系统还处于 alpha 测试期，首批参与插件创建的厂商包括 Expedia、FiscalNote、Instacart、KAYAK、Klarna、Milo、OpenTable、Shopify、Slack、Speak、Wolfram 和 Zapier。</p><p></p><p>其他使用插件的开发者可以申请进入候补名单（<a href=\"https://openai.com/waitlist/plugins%EF%BC%89%E3%80%82OpenAI\">https://openai.com/waitlist/plugins）。OpenAI</a>\" 表示，在了解更多情况后将逐步开放访问范围。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/08/08bf2a99b691c98b6d30cecf9c372dd0.png\" /></p><p></p><p>注：Expedia：让您的旅行梦想成真——抵达、驻足、尽享一切美景和体验。</p><p>FiscalNote：在法律、政治和监管数据与信息需求提供并选择市场领先的实时数据集。</p><p>Instacart：从您最喜爱的本地杂货店订购日用百货。</p><p>KAYAK：搜索航班、住宿和租车信息，获取预算空间之内的一切出行建议。</p><p>Klarna Shopping：从数以千计的网上商店中搜索和比较商品价格。</p><p>Milo Family AI：每天20分钟，让父母获得化狂躁为魔法的超能力。用法简单：Hey Milo，今天有什么魔法？</p><p>OpenTable：提供餐厅推荐，并附带预订链接。</p><p>Shop：覆盖全球各知名品牌的数百万种产品。</p><p>Speak：使用AI导师Speak，学习如何用外语表达自己。</p><p>Wolfram：通过Wolfram|Alpha和Wolfram Language访问计算、数学、精选 知识和实时数据。</p><p>Zapier：与5000多款应用程序交互，包括Google Sheets, Trello, Gmail, HubSpot, Salesforce等。</p><p></p><p>另外，OpenAI 还自己托管了两款插件，其一为网络浏览器，其二是代码解释器。OpenAI 开源了一款知识库检索插件的代码，任何开发者都可以借此托管用于增强 ChatGPT 的信息。</p><p></p><p>OpenAI 表示，现在的语言模型虽然在各类任务中都能有所表现，但结果还不尽人意。而模型提升自我的唯一途径就是其训练数据。但一个问题是，数据内容可能已经过时，而且模型往往“以偏概全”、“生搬硬套”。此外，语言模型唯一能够开箱即用的输出模式就是文本，虽然文本中包含实用说明，但要将其化为操作还需要经历额外的过程。</p><p></p><p>OpenAI 将插件比喻成语言模型的“眼睛和耳朵”，能帮助模型访问因为较新、较私人或较具体而不宜包含在训练数据内的信息。为了响应用户的明确要求，插件还能帮助语言模型切实执行安全、受控的操作，从而提高整个系统的实用性</p><p></p><p></p><p></p><p>ChatGPT 插件使用示例</p><p></p><h2>插件的表现如何？</h2><p></p><p></p><p>我们先看下 OpenAI 自己托管的两个插件表现如何。</p><p></p><h4>浏览插件</h4><p></p><p></p><p></p><blockquote>一套知道该何时及如何浏览互联网的实验性模型。</blockquote><p></p><p></p><p>以往，ChatGPT 会礼貌地指出，其训练数据中不具备充足的信息，因此无法回答某些特定问题。但现在可以给出答案和相关链接了。</p><p></p><p>在 OpenAI 展示的示例中，ChatGPT 会检索关于最新一届奥斯卡颁奖典礼的信息，再用其最擅长的“写诗”能力加以改编。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/dc/dc75775a7c416851cc0361448f12f285.png\" /></p><p></p><p>以下是 ChatGPT 的回答，它给出了一系列的搜索结果，用户直接点击就可查看相关的信息来源。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/d3/d3b12e09af77d7a25225fa7f4863896a.png\" /></p><p></p><p>除了为最终用户提供显著的实用性助益之外，OpenAI 认为，这种对语言和聊天模型全面可解释性的研究，也将在可扩展性和对齐能力方面带来令人兴奋的前景。</p><p></p><h4>代码解释器</h4><p></p><p></p><p></p><blockquote>一套可使用 Python 处理上传和下载的实验性 ChatGPT 模型。</blockquote><p></p><p></p><p>OpenAI 为模型开发了一个可在沙盒、防火墙执行环境中工作的 Python 解释器，外加一些临时磁盘空间。解释器插件运行的代码会在一个持久会话中进行评估，且该会话在聊天期间始终有效（具有上限超时），后续调用可以相互构建。此外，还支持将文件上传至当前对话工作区，并下载工作结果。</p><p></p><p>比如，当问到：一块砖的重量是这块砖自身 30% 的重量与 5 个 GPU 的重量之和，已知每吨重量包含了 100 块砖和 200 个 GPU，那么一块砖的重量是多少?</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/2d/2dcf1b3ad64e83064a93210b2ed3556c.png\" /></p><p></p><p>ChatGPT 给出的答案是：一块砖的重量是 7.8125 千克。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/bb/bbc81af9f7339c6887da504803f5578f.png\" /></p><p></p><p>执行逻辑计算的代码解释器插件</p><p></p><p>从早期用户研究来看，OpenAI 确定了代码解释器的几种重要用途：</p><p></p><p>解决定量和定性类数学问题进行数据分析和可视化将文件转换为不同格式</p><p></p><p>OpenAI 表示，希望这套模型能够运用自己的编程技能，为计算机中的基础功能提供更自然的使用界面。刚刚上手的初级程序员可以在它的帮助下大大提高工作效率，同时也希望能让更多受众接触并掌握编程技能。</p><p></p><h4>第三方插件</h4><p></p><p></p><p></p><blockquote>一套知道该何时及如何使用插件的实验性模型。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/fd/fd02efca737f7c1fe891987094c487fe.png\" /></p><p></p><p>ChatGPT 中的第三方插件</p><p></p><p>第三方插件由 manifest 文件做描述，其中包含对插件功能的机器可读描述和调用方法，同时提供面向用户的说明文档。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/9e/9e3ad52f827e1f50113d28b1928ed2f2.png\" /></p><p></p><p>待办事项管理插件的 manifest 文件示例</p><p></p><p>插件的创建步骤如下：</p><p></p><p>用户使用希望语言模型调用的端点来构建 API（可以是新的 API、现有 API 或专为大语言模型设计的现有 API 打包器）。为自己的 API 创建 OpenAPI 记录规范，同时创建一个指向 OpenAPI 规范并包含插件特定元数据的 manifest 文件。</p><p></p><p>在 chat.openai.com 上开始对话时，用户可以指定想要启用的第三方插件。关于已启用插件的文档，将作为对话上下文的一部分被提交给语言模型，让模型能够根据需求调用适当的插件 API 以实现用户意图。目前的插件主要考虑对后端 API 的调用，OpenAI 也在探索如何让 API 调用客户端 API。</p><p></p><h4>开源检索插件</h4><p></p><p></p><p>开源检索插件让 ChatGPT 能够访问个人或组织信息源（经过许可）。它允许用户通过提问或用自然语言表达需求，从数据源处获取关联性最强的文档片段，包括文件、笔记、电子邮件或公共文档。</p><p></p><p>作为开源加自托管方案，开发人员可以部署自己的插件版本并在 ChatGPT 上注册。检索插件利用 OpenAI 嵌入，允许开发人员选择矢量数据库（Milvus、Pinecone、Qdrant、Redis、Weaviate 或 Zilliz）来索引和搜索文档。信息源可使用 webhooks 与数据库保持同步。</p><p></p><p>要体验这项功能，可以访问检索插件代码仓库：</p><p></p><p><a href=\"https://github.com/openai/chatgpt-retrieval-plugin\">https://github.com/openai/chatgpt-retrieval-plugin</a>\"</p><p></p><h2>ChatGPT 会杀死 Python 吗？</h2><p></p><p></p><p>添加插件后的 ChatGPT 能力大大增强，英伟达 AI 科学家 Jim Fan 激动地表示：如果说 ChatGPT 的登场是“iPhone 盛会”，那么今天第三方插件的集成就是“iOS App Store”盛会。也有网友认为，“今天开始我们已经进入 Chat OS 时代，ChatGPT=iOS”。</p><p></p><p>微博大 V 木遥也感叹道“ChatGPT 推出插件功能可能是近期一系列进展中最令人惊讶和震撼的一个”。最后他发出预言：Python 已死。</p><p></p><p></p><blockquote>十年前，当一个人跃跃欲试要给新发布的 iPhone 写 APP 的时候，ta必须自己是个非常老练的程序员才行。今天，当你跃跃欲试要给新发布的 GPT 平台写插件，你只要用自然语言描述你希望实现的效果就行了。OpenAI 的网站上有一个视频（ player.vimeo.com/video/810996688?h=b552e96813）展示了如何在几分钟之内完全用自然语言跟 GPT 交互写一个让 AI 帮你记住私人 todo list 的插件。换句话说，这就是（至少作为胶水语言层级的）自然语言编程。如果这条路能走通，如果这成为行业标准，那么……Python 终于没有存在的意义了。撒花。</blockquote><p></p><p></p><p>添加插件后的 ChatGPT 真的会杀死 Python 吗？目前来看还不得而知，但正如云计算基础设施软件公司 HashiCorp 创始人 Mitchell Hashimoto 所说，OpenAl 设计的插件系统的确足够疯狂：</p><p></p><p></p><blockquote>“我开发过许多插件系统，OpenAl 设计的插件系统是我这辈子见过的最疯狂的系统。如果你要给它写插件，你并不是去写这个插件的程序，而是写一个关于插件的描述，只需用自然语言描述，然后 GPT 来帮你生成这个插件。”</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/a0/a0567ab85ab04e2d27574460ebd20a7b.png\" /></p><p></p><p>也有网友表示，“Python 把 GPT 推到台前，完成了历史使命。”“人人都是程序员的时代到了，而且是只需要掌握自然语言的程序员。”“利好文科生，能准确用语言文字清晰明了地表达自己的诉求成了第一生产力。”</p><p></p><h2>真安全还是说说而已？</h2><p></p><p></p><p>安全成为此次发布被多次提及的关键词。</p><p></p><p>对于浏览插件，由于 ChatGPT 使用 Bing 搜索 API 从 Web 检索内容，因此 OpenAI 也继承了微软在这项工作中的基本原则：1）保证信息来源可靠且真实；2）通过“安全模式”防止检索有问题的内容。这款插件在独立服务中运行，能够保证 ChatGPT 的浏览活动与基础设施内的其余部分相互分离。</p><p></p><p>为了尊重内容创作者并遵守网络规范，OpenAI 浏览器插件使用的用户代理令牌为 ChatGPT-User，并通过配置强调重新所访问网站的 robots.txt 文件。这偶尔会引发“click failed”问题，表明该插件正遵守目标网站的指示、避免执行抓取操作。此用户代理仅用于代表 ChatGPT 用户执行直接操作，不会以任何自动方式主动抓取网络内容。OpenAI 还发布了 IP 出口范围，并采取限速措施以避免向目标网站发出过多流量。</p><p></p><p>OpenAI 的浏览插件会显示访问过的网站，并在 ChatGPT 的回复中引用其来源。由此实现的透明度层可帮助用户验证模型响应的准确性，并回馈内容创作者。</p><p></p><p>对于代码解释器，OpenAI 表示之所以要将模型接入代码解释器，主要是想对执行过程做适当的沙盒处理，以确保 AI 生成的代码不会在现实场景中产生意外的副作用。OpenAI 称在安全环境中执行代码，并通过严格的网络控制来防止外部互联网访问到执行代码。此外，还对每个会话设置了资源限制。</p><p></p><p>而检索插件允许 ChatGPT 搜索内容矢量数据库，并将最终结果添加至 ChatGPT 会话当中。这意味着它不会产生任何外部影响，主要风险只涉及数据授权和隐私。开发人员应确保只将有权使用的内容添加至检索插件，进而在用户的 ChatGPT 会话中共享。</p><p></p><p>不过，网友对于 OpenAPI 的“安全宣传”似乎不太买单。</p><p></p><p>网友 “mk_stjames” 表示：</p><p></p><p></p><blockquote>我对此有一些奇怪的感觉。从“傻瓜，当然它没有以任何方式连接到互联网！”到现在都没有一年的时间，变成“好的…所以我们连接到互联网…”首先是您的 API 调用，然后是您的 chatgpt-jailbreak-turns-into-a-bank-DDOS-attack，然后是“今天它以某种方式执行了Python 脚本的数十万线程，该脚本在上午 8 点 31 分在纽约证交所导致自 1987 年以来最大的单日跌幅……”您可以继续讨论个人责任，所有…用户仍然是用户，对吧。但这开始感觉像是给一群黑猩猩上了膛的手枪。OpenAI 一直在谈论“安全”，但“安全”的全部意思是“好吧，我们不允许任何人允许它拿胖子或残疾人开玩笑，所以我们很好，对吧？！”</blockquote><p></p><p></p><p>当然，也有网友表示：为什么要对安全发牢骚呢？随它去吧！“如果你访问他们的 API，这基本上就是他们在做的事情，因为是否使用他们的审核端点取决于你。”不过这位网友也表示：“他们的‘人工智能安全’只是嘴上说说。在前几天，他们有一个 bug，你可以看到其他用户的聊天历史！”</p><p></p><p>参考链接：</p><p></p><p><a href=\"https://openai.com/blog/chatgpt-plugins\">https://openai.com/blog/chatgpt-plugins</a>\"</p><p><a href=\"https://news.ycombinator.com/item?id=35277677\">https://news.ycombinator.com/item?id=35277677</a>\"</p><p></p><p></p><p></p>",
    "publish_time": "2023-03-24 14:59:48",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "对话数十位学术合作代表：如何提升前沿技术在商业领域的落地应用？",
    "url": "https://www.infoq.cn/article/24EtzjCMCJs3LH2Mh5Ik",
    "summary": "<p>从去年火出天际的元宇宙，到今年年初的现象级应用 ChatGPT，科技圈似乎从不缺少热门的技术概念与话题。尤其是在云计算、人工智能、大数据等技术呈爆发式增长的背景下，我们愈发体会到前沿技术对于产业产生的深远影响，而这也延伸出了其他问题：前沿技术的边界在哪？如何与具体的应用场景融合？</p><p></p><p>以上这些问题或许看起来有些抽象、复杂，但我们从阿里巴巴创新研究计划（Alibaba Innovative Research, AIR）中，似乎找到了一些解决方案。自 2017 年开始，每年有大批全球顶尖高校 / 研究机构学者与阿里巴巴集团的工程师，就前沿技术问题展开研究，一方面促进学术研究深入产业；另一方面，AIR计划提供的开放性研究基金和实际的前沿场景，也有效助力了高校青年教师、学术人才的成长和优秀研究型学生的培养。</p><p></p><p>在过去的 2022 年，共有 15 个项目从众多申报项目中脱颖而出。近期，InfoQ 联合阿里巴巴集团采访了获奖项目的数十位优秀学术代表，以期深入理解校企合作的真正意义以及这对整个产业的未来发展带来了哪些影响。（文末附阿里巴巴年度优秀学术合作项目名单）</p><p></p><h2>AIR 计划：做从基础研究到应用落地的“架桥者”</h2><p></p><p></p><p>过去，从基础研究到应用落地似乎是横亘在学术界和工业界的鸿沟，这种现象在人工智能领域尤为突出。举例来说，如果一个训练模型没有与实际业务场景磨合，很可能在各种因素的影响下导致正确率的折损。把其类比到学术界与工业界也是如此，如果高校只着眼于理论问题的研究，企业只是生搬硬套，前沿技术的落地情况自然也不尽人意。</p><p></p><p>阿里发起 AIR 计划的初衷便是在学术界与工业界二者间架起一座桥梁。从这几年的实践效果看下来，企业与高校合作或许是突破应用场景技术难题的结合模式之一。</p><p></p><p>通过 AIR 计划，高校可以直接定位工业界的痛点问题，再有针对性地进行算法研究，而企业则可以提供算法的落地场景，来验证方案是否可行。两者通过不断的磨合可以定位实际问题、发现真实需求，达到有效的互动。</p><p></p><p>正如上海交通大学郑臻哲老师在接受 InfoQ 采访时提到的：“通过 AIR 计划，我们能接触到工业界的痛点问题，从落地应用的视角思考模型算法研究，进一步加强理论联系实际，做对学术界与工业界都有影响力的工作”。大淘宝技术团队和他一起把深度学习技术和工业界拍卖机制设计的结合做了很多探索和尝试，取得了很多理论和技术上的突破，同时也得到了学术界的广泛关注。</p><p></p><p>如果让我们评价前沿技术探索的实际价值？这个问题或许很难回答，也没有标准答案。但当一项技术在产业界产生实际价值时，前行者会实实在在感受到技术红利，以此为标准来看待这个问题似乎容易了很多。“关键性的技术突破虽然在技术上只是百分之几的变化，但带来的可落地场景却是十几倍的增加”。阿里巴巴淘宝技术团队的咏亮在采访时表示。</p><p></p><p>基于过去多年校企之间的协同，AIR 计划吸引了全球众多国家和地区的数百余所顶级科研机构参与，包括哈佛大学、斯坦福大学、苏黎世联邦理工学院、新加坡南洋理工大学等高校，中国高校与研究所申请总量的 80% 来自 985 高校和中科院，先后有十几位 IEEE Fellow 和 TR35 与阿里巴巴合作，相关成果通过论文、专利、项目等形式让产业从中受益。</p><p></p><h2>平台搭好了，学术界与工业界如何合作实现创新突破？</h2><p></p><p></p><p>上述提到的优秀学术项目，为何能取得基础理论和落地应用的双突破？双方打好配合，或许才是让合作价值最大化的关键。InfoQ 基于对多位优秀学术专家的访谈，总结了三点校企合作的实践经验：</p><p></p><p>第一，双方要找准自身定位。来自浙江大学的尤伟涛有一个很强烈的感慨，他认为：理论研究不仅要上天也要入地，高校做学术时也要考虑应用，否则落地就会很困难；企业也要明确定义出问题，找出学术价值。对此，大淘宝技术吕承飞也表达了相似的观点：“命题需要来源于业务又高于业务，提炼出科学理论问题是尤为关键的一步。”</p><p></p><p>第二，在优势互通的基础上，打破思维定式。就如同上文所言，高校与企业思考问题的角度其实是不同的，如果各自为营，两者之间的鸿沟只会越来越大，但如果大家能在不断磨合中，持续碰撞思路更有利于双方互通有无。</p><p></p><p>拿《端云协同超大规模分布式推荐系统的算法研究和系统实现》的推进过程举例，凭借云侧大规模模型实时训练和端侧动态感知用户的双重优势，“端云协同学习”成为了业内备受关注的焦点，并被阿里巴巴达摩院列为 2022 年 10 大技术趋势之一。然而在热潮之下，校企双方在推进时也遇到了一些挑战，“千人千模”中小样本学习过拟合便是其中之一。</p><p></p><p>受限于端侧只有单个用户的浏览量、点击量等数据，如果只根据用户自己的数据对模型训练，便会遇到中小样本过拟合的问题。上海交通大学吴帆提到：“一开始我们其实被这个问题绊住了，很难突破本地数据的限制。”但在研究过程中逐渐发现，虽然原始数据不能离开本地，但数据特征、训练参数以及一些中间的结果是可以离开本地的，需要把云作为中心服务器的协调特性发挥出来。最终，双方打破了之前的思维定式，有效地解决上述问题。</p><p></p><p>第三，校企双方在资源上的协同也是项目成功的另一关键要素。InfoQ 在采访《端云协同超大规模分布式推荐系统的算法研究和系统实现》的专家代表吕承飞时了解到。目前，这套体系可以在搜索、推荐、内容理解等场景中应用。</p><p></p><p>而双方的合作能够取得如此亮眼的成绩，一方面是源于双方对于端云协同技术方向的一致认同，他们认为端云协同可以有效解决人工智能服务最后一公里的问题，也是人工智能进一步发展的必要支撑；另一方面，还离不开阿里在基础设施平台的背后支持。通过阿里巴巴机器学习基础设施 Walle，实现了数据在端云之间的传输，最终才让端云协同发挥出了最大价值。值得一提的是，大淘宝技术团队还在论文中详述了阿里自主研发 Walle 的实现过程，该论文目前已入选了计算机系统领域顶级国际学术会议 OSDI，这也是淘宝系统论文首次入选该国际顶会。</p><p></p><h2>坚持长期主义，支持优秀学者发展，创造更大社会价值</h2><p></p><p></p><p>如果说校企的高效协同是优秀学术项目取得亮眼成绩的充分条件，那么日积月累的磨合则是双方发展的必要条件。</p><p></p><p>InfoQ 在和优秀学术项目的专家代表沟通时了解到，大多数项目的推进时间都在 3-5 年左右，AIR 计划更是陪伴了一大批学者经历了从早期起步到逐渐成熟的阶段。例如，浙江大学的尤伟涛老师在博士阶段就参与到了 AIR 计划中；上海交通大学的郑臻哲老师也是在博士后阶段就开始参与......正是这种“坚持长期主义”的精神，让我们看到了探索前沿技术的巨大价值空间。</p><p></p><p>在这一点上，《数字创意内容的智能设计》无疑是一个具有代表性的学术合作项目。伴随着大模型技术的成熟，AIGC 在近期火出新天际，但实际上这个技术并不是刚刚诞生，其已经有七、八年的发展时间。浙江大学 尤伟涛、李泽健 &amp; 设计事业部不饱几年前就在 AI painting 领域进行探索。虽然现阶段实现了设计领域的应用，支持了鹿班平台产品的功能升级，但实现的过程中其实需要长期的尝试和验证。</p><p></p><p>阿里巴巴设计事业部的不饱提到：“针对一个痛点问题，高校即使提供了多种解决方案，但企业在实际落地时会发现，以上方案或许都不能在业务中取得成果。所以双方在解决科技问题的路上，其实没有捷径可以走，每一位参与者都要有这种心理认知。”</p><p></p><p>正是基于长期的投入，双方才在业务上取得不错的成果。在本次《数字创意内容的智能设计》中，面对“设计知识和大数据难以结合、设计创意难以形式化表征、跨媒体情感难以统一表达”等技术瓶颈，项目团队开创性地提出了结合设计经验法则和设计大数据、引入因果推理、支持视听融合的智能设计方法，提出了原型理论支撑的智能设计技术和创意因果推理支持的智能设计技术等。目前，该项目的智能设计能力已经接入鹿班生产平台，可以快速生成多样化的风格背景图片，节约设计生产成本，并且已经帮助成功孵化了鹿班平台中的互动视频产品。</p><p></p><p>针对《数字创意内容的智能设计》学术项目而言，虽然目前已经取得了小阶段的研究成果，但双方的合作并不会就此止步。三位专家在采访时表达的一致观点是：“随着虚拟空间等新载体以及新技术的出现，一定会产生新的生成素材的需求”。因此，与虚拟 3D 相关的设计素材生成依然是后续规划中的重点方向。除此之外，随着业界对于 AIGC 的接受度越来越高，后续也计划将这些能力更多地运用到实际的业务场景中。</p><p></p><p>不仅于此，校企合作在应用层面取得落地成果的同时，还会在前沿技术上进行不断地探索。以近期大火的 ChatGPT 为例，在云计算成为稳定的基础设施的背景下，学术界与工业界已经开始向智能化迈进。具体到智能化背后的技术和应用，受访嘉宾在大模型技术的探索与融合方面提出了一些前瞻共识：</p><p></p><p>一方面，对于统一的基础大模型而言，预计 3 年内将有上千个不同的任务都基于同一个基础大模型，再结合上 RLHF，AI 技术的应用门槛会进一步大幅度降低；对于预训练大模型、视觉大模型等细分层面而言，预计未来将能在节省训练时间的同时，不断提升模型的精准度；</p><p></p><p>另一方面，受访专家也针对模型的融合层面作出了进一步的预测，知识图谱与神经网络大模型将进一步互为补充与深度融合，大规模符号知识的神经网络化催生知识感更强、知识交互更符合人的预期的人工智能；针对算法模型与系统部署而言，算法模型设计与系统优化调度将紧密结合，形成算法与系统互为反馈的新工业界机器学习迭代研究的新模式。</p><p></p><p>除了业务应用和前沿技术探索，AIR计划的一些项目也在更大的社会范围内发挥着越来越重要的作用。例如，澳门大学周建涛老师和阿里安全线杨锐合作的《抗媒体传输的高鲁棒伪造图象检测与定位研究》，设计了一套可以有效对抗社交网络传输，且具有高泛化鲁棒性的图像取证技术。其伪造图像取证模型的性能远优于现前沿算法，可在多维度干扰下保持稳定，有望大幅降低各类噪声对伪造检测与定位框架的负面影响。目前这个“假图粉碎机”网站对公众开放，相应技术正在持续迭代，还计划将部分技术开源出去，促进图像篡改检测技术的进步。</p><p></p><h2>写在最后</h2><p></p><p></p><p>一项前沿技术要想掀起真正的技术浪潮，不仅要在理论方面取得突破，还需要创造出坚实的商业价值和实用价值。在此过程中，仅靠学术界或工业界一方的探索是远远不够的。如何能让学术界与工业界更加紧密地联系起来，是行业内共同的努力方向。</p><p></p><p>目前，阿里巴巴集团作为行业的先行者，通过 AIR 计划让工程师从业务中定位问题，再与学术研究专家共同携手来攻克问题的模式，大大提高了前沿技术在商业领域的落地应用率。同时，AIR 计划还会向高校老师提供开放性的研究基金，开放实际的前沿场景，助力高校青年教师、学术人才的成长和优秀研究型学生的培养。</p><p></p><p>除此以外，我们也看到了 AIR 计划的另一个野心——着眼于前沿技术的未来发展方向：如同《数字创意内容的智能设计》早在几年前就开始探索智能设计方向，经过多年的磨合，双方的合作成果已经显现——让设计师能够聚焦解决核心创意任务；在《端云协同超大规模分布式推荐系统的算法研究和系统实现》过程中，上海交通大学吴帆与大淘宝技术吕承飞一直在端云协同方向持续投入，为了给用户提供极致的个性化推荐体验，后续还会将模型的轻量化、个性化做进一步的夯实......</p><p></p><p>以上提到的前沿技术，只是 AIR &nbsp;计划的冰山一角。但可以预见的是，随着校企双方的合作持续深入，不仅能够有效地打破学术界与产业界之间的壁垒，更为前沿技术的蓬勃发展起到了一锤定音的效果，也希望这些技术能够带来更大的社会价值。</p><p></p><p>附：阿里巴巴年度优秀学术合作项目名单</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/12/94/12f14a6d95efede6b87b498fa5b9d194.png\" /></p><p></p>",
    "publish_time": "2023-03-24 15:03:04",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "“混战”之下，车企完成突围的三大目标、五大挑战和六个场景｜InfoQ闭门会精选",
    "url": "https://www.infoq.cn/article/MGtdRbm2lSBBf5DygeZC",
    "summary": "<p>如果要用一个词来描述近几年的汽车行业，“混战”这两个字恰如其分。</p><p></p><p>一方面，被疫情“封印”3 年的汽车产业供应链，使得全球汽车市场受到巨大冲击；另一方面，特斯拉和造车新势力的强势入局，也让传统汽车产业被彻底颠覆。多重压力的累计叠加，在今年疫情刚刚恢复的伊始，就演变成一场来势汹汹的“价格战”。</p><p></p><p>短短不到一个季度的时间里，全国已经有上百款车型通过各种不同方式宣布降价促销，甚至还有品牌打出了“买一送一”的王牌。车企的焦虑，可见一斑。</p><p></p><p>不过，“价格战”对于缓解焦虑，或许只是治标不治本，只能解当务之急，不能解长期之痛。要从根本上解决<a href=\"https://www.infoq.cn/theme/180\">汽车</a>\"行业在当前的困境，转型升级是必经之路。如今，汽车产品的动力来源、产品形态、生产运行方式、消费模式等面临彻底、全面的变革，车企无一不谈电动化、智能化、网联化、共享化，数字化则成为转型的基础能力。</p><p></p><p>那么，在这个竞相提速变革的过程中，汽车企业究竟面临着哪些实实在在的阻力和挑战？又如何借力数字化在一片“混战”中完成突围？</p><p></p><p>日前，<a href=\"https://archsummit.infoq.cn/2023/shanghai\">ArchSummit </a>\"全球架构师峰会·北京站成功举办，大会期间，由 InfoQ 与精益数据方法论作者创始人史凯联合出品策划了“汽车数字化高端<a href=\"https://www.infoq.cn/article/qZm63L9zkiD57cpFMsv7\">闭门会</a>\"”，汇聚众多来自各个车企的数字化和技术负责人，利用精益数据方法论的指导，创新的卡牌式精益数据工作坊，进行了业务目标拆解、数据资产梳理和场景推演，形成了车企突围的三大核心业务目标，五大挑战和六大价值场景。</p><p></p><p>以下内容经 InfoQ 编辑精选、提炼和总结，希望为大家提供参考。</p><p></p><h2>车企突围的三大核心业务目标</h2><p></p><p>面对巨大的生存压力，多数企业的业务目标变得直接、简单而明确。</p><p></p><h4>目标一：销量提高</h4><p></p><p>提高销量，是所有企业首当其冲的任务。但是，如今的汽车行业已然是一个存量市场，消费者正在拿回消费“主动权”，这要求车企能够“以用户为中心”，深度挖掘用户全生命周期价值，提供更符合市场需求的产品和服务。也正因为如此，用户运营在车企的战略优先级越来越高。</p><p></p><p>一方面，通过在各个渠道的资源投入，可以挖掘潜在客户，为销售埋伏机会点；另一方面，通过构建私域，提高<a href=\"https://www.infoq.cn/article/Fi2tE34ZtKMSt02CazMf\">私域</a>\"活跃度，还可以加深与用户的连接，从而提供更精细化的产品服务，提升消费者对品牌的忠诚度。</p><p></p><p>除此之外，随着国内汽车市场增量放缓，出海也成了越来越多国内车企拓展业务、提高销量的关键路径。从立足全国到放眼全球，我国汽车产业的转型升级步伐越迈越快，在国际汽车市场中开始占据一席之地。</p><p></p><h4>目标二：创新能力提升</h4><p></p><p></p><p>可以看到的是，不少中国车企在出海布局中主打的正是高端新能源汽车。</p><p></p><p>汽车电动化的浪潮似乎已经势不可挡，比亚迪的换道超车、电池领域宁德时代的崛起等等，都是这一趋势有力的注脚。消费者对新能源汽车的接受度越来越高，加上绿色化的发展要求，除了躬身入局，车企似乎别无选择。越来越多的车企已经发布自己的新能源战略，并且把提高新能源车的销量占比作为短期内的关键任务之一。</p><p></p><p>但值得注意的是，虽然新能源汽车的问世大大降低了企业造车门槛，新能源汽车依旧是一个复杂性和系统性极高的产业，汽车企业能否掌握其中最为关键的电池、电机、电控技术将至关重要。此外，相较于硬件，新能源汽车更是“软件定义”的汽车，自主的软件研发能力也将成为车企布局新能源领域的核心竞争力。</p><p></p><p>当然，产品创新只是其中一方面，商业模式、销售模式的创新也是车企能力提升的重点。如今，车主年龄画像越来越年轻化，Z 时代成为汽车消费主力军，他们的消费习惯、消费渠道、消费偏好和过去完全不同，想和他们更好地“对话”，就必须采用 Z 时代特有的渠道和方式。</p><p></p><h4>目标三：成本降低</h4><p></p><p></p><p>全球经济发展放缓，使得各个企业都在“节衣缩食”准备“过冬”。虽然降本是企业永恒的话题，但现如今，大多数企业们都在试图把这件事做到极致。对于汽车企业来说，产业链覆盖研、产、供、销、服，降本的任务也同样涉及其中的各个环节。</p><p></p><p>值得一提的是，在很多场景下，企业的成本投入高低又与自身的技术创新能力或供应链能力有关。比如，是否掌握电池的核心技术，芯片的供应储备是否稳定充足等等，都会影响车企的产品研发和生产制造等成本投入。</p><p></p><h2>业务变革中的五大关键挑战</h2><p></p><p></p><p>为了实现以上目标，车企还有一系列棘手的问题需要解决。</p><p></p><h4>挑战一：提高数据转化率</h4><p></p><p></p><p>显然，用户运营并不是一个点石立即成金的事情，而是个长期投入，大部分工作其实无法立竿见影。企业在这个过程中的普遍困扰在于，第一，新线索量不足，第二，线索的转化率不高。</p><p></p><h4>挑战二：提高广告投入精准度</h4><p></p><p></p><p>广告投入产出比的问题和数据转化问题有强关联，著名广告大师约翰·沃纳梅克曾经提出关于广告投入的“哥德巴赫猜想”——我知道我的广告费至少浪费了一半，但我不知道是哪一半，这是包括车企在内很多企业在做营销时的一大困境。<a href=\"https://www.infoq.cn/article/bDJVbHPBaSHgbc5WpxBe\">广告投入</a>\"精准度不够，最后的转化效果往往也并不好。除此之外，如何让广告投放和线索转化形成完整闭环，这也是个关键问题。</p><p></p><h4>挑战三：提高产品和服务体验</h4><p></p><p></p><p>一方面，是汽车产品本身的创新，包括新能源汽车的研发生产，自动驾驶、智能座舱、智能网联等功能的创新等等，这是车企必须攻克的难题。另一方面，是服务模式的创新，尤其是在线销售和服务能力的提升，这是传统车企以前并不擅长的。与此同时，这也与过去传统经销商销售模式存在一定冲突，如何平衡好其中的利益关系非常重要。</p><p></p><h4>挑战四：提升客户满意度</h4><p></p><p></p><p>客户满意度的高低，往往会影响客户以及一些潜在客户的流失率。当市场上的选择变多，车主对品牌的忠诚度实际上是在降低的，这时候，如何通过有效的手段，不断影响和提升客户在售前售后，甚至是复购等各个业务环节的体验，是无法车企不可忽视的问题。</p><p></p><h4>挑战五：提高订单和生产的匹配度</h4><p></p><p></p><p>订单与生产不匹配，是造成车企成本浪费的一个关键要素，但做好供需平衡并不是一件容易的事，需要供应链各个环节的持续优化。如果生产量多于订单量，就会导致库存积压；如果生产量少于订单量，又会导致交付不及时，阻碍销量。</p><p></p><h2>共创六大数据价值场景</h2><p></p><p></p><p>所有这些挑战，都是驱使汽车企业加速驶向数字化的源动力。通过引入 AI、大数据、云计算、IoT 等技术，汽车研发、生产、供应链、销售和服务模式都在被重塑。</p><p></p><p><a href=\"https://www.infoq.cn/article/CUzrDiwNemwvhoVNCQ1V\">数据</a>\"是在各个环节穿针引线的核心要素，是数字化转型的基础，所以过去所有车企在数据领域的投资都是巨大的。精益数据方法论创始人史凯认为，2023 年将是所有企业的数据价值之年。每个企业的 CIO/CDO 都会被追问，开发了那么多数据系统和报表，到底产生了什么价值？</p><p></p><p>从当下开始，数据报表的生产数量不再是度量企业数据团队的效能的标准，而核心将是可度量的业务价值。精益数据工作坊，整合了自上而下的企业架构思维：从业务愿景开始，分解业务目标，识别业务痛点；同时又首创了自下而上的精益数据创新方法，由数据资产和数字化技术进行无盲区组合探索。从而让现场的嘉宾们双向融合，全面创新，识别了众多非常有意思的价值场景。</p><p></p><p>而在锚定数字化创新场景之前，一个必不可少的工作就是对数据资产进行梳理。对于汽车企业而言，以下数据被认为具有比较高的价值：</p><p></p><p>车辆主数据：包括车牌号码、车型、发动机号码、底盘号码、保险公司、二保时间、车辆类型等等；车联网数据：包括油耗、发动机转速、轮胎胎压等车况信息，速度、里程等行驶轨迹、驾驶行为信息，以及车辆报警数据；用户购车记录：包括车主置换前的车辆数据，以及保有车辆数据等等；第三方平台数据：包括用户在各个第三方互联网平台的基础画像及行为分析；经销商数据：包括经销商的接待数据，以及车辆的维修保养、索赔等售后数据和服务数据；订单数据：即最基础的客户下单数据和销售数据等等；成本数据：即车辆从研发到生产再到销售服务各个环节产生的所有成本信息。</p><p></p><p>梳理高价值数据的意义在于，可以避免资源浪费。<a href=\"https://www.infoq.cn/article/fQtaq77TxZ1KkMPG0IJw\">数据治理</a>\"是一件工作量巨大的事情，企业很难一步到位、面面俱到，精益数据方法论创始人史凯认为，当下，传统的以定标准为核心的数据治理很难满足企业对于数据价值的诉求，提倡车企进行精益数据治理，沿着价值主线，以业务场景蓝图，数据资产蓝图为纲，以数字化技术为新手段，主动式、运营式、度量式治理，才能够让业务快速感受数据治理的价值。</p><p></p><p>与此同时，高价值数据往往也对应着高价值场景，这是企业进行数字化转型的关键抓手和切入点。下面举一些例子：</p><p></p><h4>场景一：潜客的识别和转化</h4><p></p><p></p><p>结合情绪分析、行为分析等相关技术，可以对经销商的线上线下数据以及第三方平台数据进行分析，从而更精准地识别客户和潜在客户的需求或潜在需求，并在合适时间点进行介入，实现获客和转化。</p><p></p><h4>场景二：舆情监测</h4><p></p><p></p><p>结合异常检测技术，可以对服务数据进行分析，识别售后服务过程中的异常点（比如消费者投诉、索赔等等），一方面，可以进行舆情风险的监测，另一方面，也便于售后及时采取跟进服务，提升客户满意度。</p><p></p><h4>场景三：远程维修服务和引导</h4><p></p><p></p><p>结合人工智能、车内私人助理等技术，可以对车联网信息进行分析处理，主动提醒车主进行维修、保养。在紧急情况下，还可以提供远程维修服务，或引导车主前往就近的经销商门店，这不仅能够提升用户体验，同时也可以为经销商引流。</p><p></p><h4>场景四：产品功能优化</h4><p></p><p></p><p>结合行为分析技术对车联网数据进行分析，可以了解用户对各类车载功能的使用频率，比如对某款车载 APP 的打开次数、停留时间等等，为产品功能优化提供决策参考，不活跃的应用就可以剔除，这在一定程度上也可以降低成本。</p><p></p><h4>场景五：订单和库存预测</h4><p></p><p></p><p>结合数据可视化技术，可以实时了解所有订单信息和进度，进行订单和库存预测，如果加上敏感性分析，还可以及时识别订单异常，进行库存预警，为业务人员采取相关应对措施提供依据。</p><p></p><h4>场景六：销售业绩分配</h4><p></p><p></p><p>通过把运营数据和规划相结合，可以找到年度销售业绩分配的“最优解”，替代以往参照往年业绩制定目标的“一刀切”方式，同时，在面对疫情等突发的特殊情况时，也可以更加灵活、快速地进行调整和响应。</p><p></p><h2>结语</h2><p></p><p></p><p>企业大量的数字化投入在一开始并没有对齐和量化目标价值，让业务和技术对齐 KPI，聚焦真正的企业价值，找到价值场景，是企业进行数字化转型最重要的三步起手式。</p><p></p><p>而精益数据方法论是根据国内本土市场的宽度、广度、复杂度特点，基于十年实践总结的数据驱动的数字化转型实践指南和工具，强调产生价值和消除浪费。精益数据工作坊首创了卡牌式桌游，把目标、数据、技术、场景和项目清单，预算资源都显性化，用一个价值指数贯穿始终，让业务人员在有趣互动的环境里统一认知，打开思路，共创价值，然后在价值场景的基础上持续优化迭代。</p><p></p><p>据此，企业可以更有的放矢地进行项目落地和资源分配。其中，价值的高低和场景的优先级，会随企业自身的定位、发展现状以及业务目标侧重点的变化而变化。</p><p></p><p>比如，针对潜客的识别和转化，对成本投入更敏感的企业会更在乎线索质量评级，反之，有的企业则会更加看重线索的数量；再比如，针对产品功能优化，高端品牌和车型的定制化需求更大，在产品研发以及生产计划制定过程中就要进行通盘考量，而其它普通车型则更看重通用功能。</p><p></p><p>但可以肯定的是，眼下无论是传统车企还是造车新势力都重新站在了另一条起跑线上，智能化产品的攻关、智能网联的布局、数字化基础设施的构建，都会成为车企未来竞争的关键筹码，是车企不可错失的风口。</p><p></p><p>本次闭门工作坊获得了参与嘉宾的一致好评，形式新颖、价值显性、精益高效，后续，InfoQ 将携手精益数据方法论创始人史凯持续开展更多行业的精益数据工作坊，助力企业 CIO/CDO 在数据价值之年交一份完美的答卷。</p><p></p><p>如果你对工作坊模式感兴趣，欢迎关注「InfoQ数字化经纬」公众号，第一时间获取相关活动信息，并报名参与！</p><p><img src=\"https://static001.infoq.cn/resource/image/d3/da/d31d4e0e474feb853493fb404102b3da.png\" /></p><p></p>",
    "publish_time": "2023-03-24 15:04:44",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "我们很高兴在 curl 25 岁生日之际发布curl 8.0",
    "url": "https://www.infoq.cn/article/dwoG7HTEvAXYR09arJyQ",
    "summary": "<p>作为当今用途最广的开源项目之一，curl 在全世界有超过 100 亿的安装。从红帽 Linux、Debian 再到 Mac OS、Windows 10、iOS 和 Android，甚至包括任天堂 Switch、Xbox 和索尼 PS5 以及电脑游戏、媒体播放器和机顶盒等，都不乏 curl 的身影。</p><p>&nbsp;</p><p>curl 的官方生日是 1998 年 3 月 20 日，这一天，第一个可构建出工具名为 curl 的 tar 包发布。今年是 curl 诞生 25 周年，curl首席开发者Daniel Stenberg的发布公告，官方表示这可能是他们做过的最好的 curl 版本。</p><p>&nbsp;</p><p>虽然头顶主要版本的编号，但8.0.0并未做出任何突破性的变更或升级。原本此次是要作为次要版本推出的，主要降低管理难度，但恰逢curl诞生25周年，所以决定用8.0.0的名头表示庆贺。这次的版本不含任何API或ABI中断。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/53/5344c1ce1bde93758840c8d851369249.png\" /></p><p></p><h2>用数字说话</h2><p></p><p></p><p>第215次发布1项变更历时28天（项目总周期已达9131天）修复130个bug（总计修复8820个bug）189项提交（总计30042项提交）0个新的公共libcurl函数（总计91个）0个新的curl_easy_setopt()选项（总计302个）0个新的curl命令行选项（总计250个）42位贡献者，23位新贡献者（总计2841位）21位作者，5位新作者（总计1125位）6项安全修复（总计141项）</p><p>&nbsp;</p><p></p><h2>安全性</h2><p></p><p></p><p>此次披露了6个新漏洞，其中5个严重程度为低，1个为中。</p><p>&nbsp;</p><p></p><h3><a href=\"https://curl.se/docs/CVE-2023-27533.html\">CVE-2023-27533</a>\": TELNET选项IAC注入</h3><p></p><p></p><p>curl支持使用TELNET协议进行通信；作为其中一环，curl允许用户传递用户名和“telnet选项”以进行服务器协商。</p><p>&nbsp;</p><p>由于缺少适当的输入清理和记录功能，curl会将用户名和telnet选项传递给所提供的服务器。因此，用户可能故意违背应用程序的设计初衷，借此篡改传递内容或执行选项协商。特别是在应用程序允许用户提供数据或部分数据的情况下。</p><p></p><h3><a href=\"https://curl.se/docs/CVE-2023-27534.html\">CVE-2023-27534</a>\": SFTP路径～解析错误</h3><p></p><p></p><p>curl支持SFTP传输。curl的SFTP实现会在URL的路径组件中提供一项特殊功能：将波浪号（～）字符作为路径中的首个路径元素时，代表相对于用户主目录的路径。之所以支持这种用法，是因为RFC草案曾经提出过这种SFTP URL工作方式。</p><p>&nbsp;</p><p>但受bug影响，对SFTP路径中波浪号的处理出现了意外错误：不仅在单独将波浪号作为首个路径元素时会予以替换，在作为首个元素的前缀时也会错误替换。</p><p>&nbsp;</p><p>以/~2/foo路径为例，当使用用户dan（主目录为/home/dan）访问服务器时，该路径会错误访问文件/home/dan2/foo。</p><p>&nbsp;</p><p>这个bug可能被用于回避过滤或实施其他恶意操作。</p><p></p><h3><a href=\"https://curl.se/docs/CVE-2023-27535.html\">CVE-2023-27535</a>\": FTP过连接重用</h3><p></p><p></p><p>即使一个或多个选项已经变更，libcurl仍会重用之前创建的FTP连接，这可能导致实际用户发生变化，最终利用错误凭证进行二次传输。</p><p>&nbsp;</p><p>libcurl会将之前使用过的连接保存在连接池中，以便后续传输与其中的连接匹配时加以重用。但配置匹配检查中遗漏了几个FTP设置，因此导致匹配率过高。遗漏的设置具体为CURLOPT_FTP_ACCOUNT,&nbsp;<a href=\"https://curl.se/libcurl/c/CURLOPT_FTP_ALTERNATIVE_TO_USER.html\">CURLOPT_FTP_ALTERNATIVE_TO_USER</a>\",&nbsp;<a href=\"https://curl.se/libcurl/c/CURLOPT_FTP_SSL_CCC.html\">CURLOPT_FTP_SSL_CCC</a>\"&nbsp;以及<a href=\"https://curl.se/libcurl/c/CURLOPT_USE_SSL.html\">CURLOPT_USE_SSL</a>\"级别。</p><p></p><h3><a href=\"https://curl.se/docs/CVE-2023-27536.html\">CVE-2023-27536</a>\": GSS委派过连接重用</h3><p></p><p></p><p>即使GSS委派（CURLOPT_GSSAPI_DELEGATION）选项已经变更，libcurl仍会重用先前创建的连接，可能导致在二次传输中更改用户权限。</p><p>&nbsp;</p><p>libcurl会将之前使用过的连接保存在连接池中，以便后续传输与其中的连接匹配时加以重用。但配置匹配检查并未纳入GSS委派设置，因此导致匹配率过高，会影响到krb5/kerberos/negotiate/GSSAPI的传输。</p><p></p><h3><a href=\"https://curl.se/docs/CVE-2023-27537.html\">CVE-2023-27537</a>\": HSTS的double-free漏洞</h3><p></p><p></p><p>libcurl支持在单独的“句柄”之间共享HSTS数据。但引入这种共享机制时并未考虑到跨单独线程的共享行为，而且说明文档中也未强调这种情况。</p><p>&nbsp;</p><p>由于缺乏互斥锁或线程锁，在两个线程之间共享相同的HSTS数据最终可能导致double-free或use-after-free漏洞。</p><p></p><h3><a href=\"https://curl.se/docs/CVE-2023-27538.html\">CVE-2023-27538</a>\": SSH连接过重用</h3><p></p><p></p><p>即使SSH相关选项已经变更，libcurl仍会重用这些应被禁止重用的原有连接。</p><p>&nbsp;</p><p>libcurl会将之前使用过的连接保存在连接池中，以便后续传输与其中的连接匹配时加以重用。但由于配置匹配检查中遗漏了2项SSH设置，因此导致匹配率过高。</p><p>&nbsp;</p><p></p><h2>变更</h2><p></p><p></p><p>8.0.0版本中只有一项实际“变更”——首个不再支持在非64位数据类型系统上构建的curl版本。curl现在要求&nbsp;“long long”或存在等效项。</p><p>&nbsp;</p><p></p><h2>Bug修复</h2><p></p><p></p><p>8.0.0的发布周期仅相当于常规周期的一半，但我们仍然合并了大量bug修复成果。下面来看值得重点介绍的几项关键修复。</p><p>&nbsp;</p><p></p><h3>构建: 弃用XC_AMEND_DISTCLEAN宏</h3><p></p><p></p><p>单看描述好像不容易理解。这项变更删除了一个旧有autotools宏，该宏有时会导致configure将Makefile“膨胀”至几GB大小。</p><p>&nbsp;</p><p></p><h3>连接: 修复time_connect与time_appconnect计时器统计信息</h3><p></p><p></p><p>引入新的h2/h3连接方法后的回归。</p><p>&nbsp;</p><p></p><h3>curl.1: 列出所有“全局选项”</h3><p></p><p></p><p>在使用--next后仍然存在的命令行选项被称为“全局选项”，现在手册页面已经列出所有全局选项供大家查看。</p><p>&nbsp;</p><p>为此，8.0.0版本提供新的元数据“tag”，用于标记相应docs文件中的各全局选项。</p><p>&nbsp;</p><p></p><h3>ftp: 带SSL的活动模式，添加过滤器</h3><p></p><p></p><p>回归：之前，活动模式下的FTPS未正确设置数据连接。</p><p>&nbsp;</p><p></p><h3>在多个解析器替换sscanf()</h3><p></p><p></p><p>对sscanf()的调用由上个版本中的24次，精简到此版本中的4次。</p><p>&nbsp;</p><p></p><h3>协议头：使curl_easy_header和nextheader返回不同的缓冲区。</h3><p></p><p></p><h3>http2 bug修复</h3><p></p><p></p><p>并行操作期间的错误处理修复了连接重用过期间http2的先验知识RST与GOAWAY能更好地识别某些传输避免上传忙循环</p><p>&nbsp;</p><p></p><h3>http: 不再为短PUT请求发送100-continue</h3><p></p><p></p><p>现在的处理方式与curl长期以来处理POST的方式更趋一致。</p><p>&nbsp;</p><p></p><h3>http: 修复unix域套接字在https连接中的使用</h3><p></p><p></p><p>一项回退修复。</p><p>&nbsp;</p><p></p><h3>multi: 让multi_perform忽略/解除忽略信号频率的降低</h3><p></p><p></p><p>当对很长的单个传输列表进行迭代“处理”时，可以尽可能保留先前状态以避免产生大量忽略/解除忽略序列。</p><p>&nbsp;</p><p></p><h3>multi: 从主链表中删除句柄</h3><p></p><p></p><p>为了加快对大量被添加至多句柄中的待处理或已完成的简单句柄的处理速度，现在将这些简单句柄从主链表中移出至单独的队列当中。</p><p>&nbsp;</p><p></p><h3>rand: 可使用arc4random作为回退</h3><p></p><p></p><p>如果平台能够支持，则curl构建可在没有TLS库的情况下变得更好随机。</p><p>&nbsp;</p><p></p><h3>urlapi: 不得使用‘%’作为主机名称</h3><p></p><p></p><p>URL解析器会错误接受含有“百分号（%）”的主机名称。解析器仍可接受以百分号编码的主机名称，并将其作为IPv6地址和区域ID之间的分隔符。</p><p>&nbsp;</p><p></p><h3>urlapi: 无需ENABLE_IPV6即可解析IPv6地址</h3><p></p><p></p><p>为了让URL解析器的行为更加一致，新版本的解析器可以完美解析和处理IPv6地址，不再要求IPv6连接必须起效。</p><p>&nbsp;</p><p></p><h3>使用c-ares绑定至具有主机名的接口</h3><p></p><p>&nbsp;</p><p>在这里祝curl生日快乐，也欢迎大家体验8.0.0全新版本！</p><p></p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://daniel.haxx.se/blog/2023/03/20/curl-8-0-0-is-here/\">https://daniel.haxx.se/blog/2023/03/20/curl-8-0-0-is-here/</a>\"</p><p></p><p></p><h5>相关阅读：</h5><p></p><p><a href=\"https://xie.infoq.cn/article/09dcbcc431ed1c4c5c114fd63\">软件测试 | 使用 CURL 发送请求</a>\"</p><p><a href=\"https://www.infoq.cn/article/43a6Rhf0Dx70W41xHrrK\">24 年了，终于有人发现 curl 的这个 Bug 了</a>\"</p><p><a href=\"https://xie.infoq.cn/article/079b045b4d3d756a3168c3667\">Linux 的小知识 -curl 命令</a>\"</p><p><a href=\"https://xie.infoq.cn/article/95fa4674e09cf2ca7a52cb127\">技术分享 | 使用 cURL 发送请求</a>\"</p>",
    "publish_time": "2023-03-24 15:50:33",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "TypeScript 5.0 现已发布：全新的装饰器，速度、内存和包大小优化",
    "url": "https://www.infoq.cn/article/wyGETHGV7BlRRkhIzcIF",
    "summary": "<p>微软在上周发布了 TypeScript 5.0 beta 版本，希望在助其瘦身之余简化使用方式、加快运行速度。此次公布的 beta 版还引入新的装饰器标准，使用户能够以可重用的方式自定义类及其成员。</p><p></p><p>相对于 TypeScript 4.9 在速度和大小方面的提升：</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/21/2154575f78b881c82e9f830c687b0949.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/fb/fbf9c9c57f57922643433d3ac5c25616.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/64/641a1e11990db1935a1873e0d422df7f.png\" /></p><p></p><p>此次 beta 版的一大亮点，在于合并了新的装饰器标准，使用户能够以可重用的方式自定义类及其成员。TypeScript 项目经理 Daniel Rosenwasser 最近在官方博客上写道，这些实验性的装饰器非常重要，在支持旧版本装饰器的同时将可选编译器标志—experimentalDecorators 设为始终启用。Rosenwasser 表示，很多一直在用 --experimentalDecorators 的开发者已经意识到，之前在 TypeScript 中使用装饰器却不启用此标志，均会产生错误消息。</p><p></p><p>Rosenwasser 还谈到 TypeScript 中关于 enums 的老问题，5.0 beta 版如何解决其中部分问题，同时减少了声明各类 enums 时所需理解的概念数量。</p><p></p><p>TypeScript 属于开源编程语言加 JavaScript 的一个超集，以 JavaScript 为基础并实现了功能扩展，目前由微软负责开发和维护。</p><p></p><p>TypeScript 5.0 中的新装饰器提案允许开发者编写出更清晰、更易于维护的代码，并能够以可重用的方式自定义类及其成员。虽然新的装饰器与 --emitDecoratorMetadata 不兼容且不支持参数装饰，但微软预计后续推出的 ECMAScript 提案有望解决这些限制。</p><p></p><p>除了新的装饰器提案之外，TypeScript 5.0 还引入多项改进，例如对构造函数中的参数装饰器进行更精确的类型检查、const 注释，以及允许 extends 字段获取多个条目的能力等。</p><p></p><p>TypeScript 5.0 版本还提供新的模块解析选项、性能增强和更详尽的 switch/case 补全功能。</p><p></p><p>TypeScript 以 ECMAScript 2018 为目标，因此 Node.js 用户至少需要使用 Node.js 10 或更高的版本。</p><p></p><p>要使用此 beta 版本，可以通过 NuGet 或者以下 npm 命令获取：</p><p></p><p><code lang=\"nginx\">npm install typescript@beta\n</code></p><p></p><p></p><h2>TypeScript 5.0 新功能与改进快速演示</h2><p></p><p></p><p>这里我们具体探究一些新功能，并通过代码示例帮助大家开启 TypeScript 5.0 之旅。</p><p></p><p></p><h3>1. 所有 Enums 均为 union enums</h3><p></p><p></p><p>TypeScript 5.0 引入一项新功能，其中所有 enum 均为 union enum。这意味着每个 enum 成员现在都有自己的唯一类型，即使是由函数调用初始化的也不例外。以往，如果是通过函数调用初始化的 enum 成员，则 TypeScript 会使用旧的 enum 策略并导致 union 和字面量类型的优势失效。在新功能的支持下，开发者现可缩小所有 enum 范围，并将其成员作为类型来引用。</p><p></p><p><code lang=\"bash\">enum E {\n  A = 'a',\n  B = 'b',\n  C = Math.random() &gt; 0.5 ? 'c' : 'd'\n}\ntype EKeys = keyof typeof E; // 'A' | 'B' | 'C'\ntype EValues = typeof E[keyof typeof E]; // 'a' | 'b' | 'c' | 'd'\nfunction f(e: E) {\n  switch (e) {\n    case E.A:\n      // This block is only executed if `e` is `'a'`\n      break;\n    case E.B:\n      // This block is only executed if `e` is `'b'`\n      break;\n    case E.C:\n      // This block is only executed if `e` is either `'c'` or `'d'`\n      break;\n  }\n}\n</code></p><p></p><p>在以上示例中，enum E 具有 3 个成员，其中 E.C 使用函数调用通过三元运算符进行初始化。借助 TypeScript 5.0 中的新功能，所有 enum 成员都拥有自己的独特类型。在这里，E.C 具有’c’ | 'd’类型，而不再像旧版本中那样具有 string 类型。f 函数则使用 switch 语句将 e 的类型缩小为 enum 成员之一，从而实现更好的类型检查和推断。</p><p></p><p></p><h3>2. 从构造函数推断类属性</h3><p></p><p></p><p>TypeScript 5.0 引入了将 const 修饰符添加至类型参数声明的功能，也就是默认做 const-like 推断。这项功能非常适合那些需要具体类型，而 TypeScript 已经推断出较通用类型的场景。以往，为了实现 const-like 推断，开发者需要在某些位置添加“as const”。Const 修饰符会影响调用中编写的对象、数组和原始表达式的推断，但不会拒绝可变值、或者说需要不可变约束。因此，开发者必须牢记 const 修饰符的行为以确保正确使用。</p><p></p><p><code lang=\"bash\">type HasNames = { readonly names: string[] };\nfunction getNamesExactly(arg: T): T['names'] {\n  return arg.names;\n}\n// Inferred type: readonly [\"Alice\", \"Bob\", \"Eve\"]\nconst names = getNamesExactly({ names: [\"Alice\", \"Bob\", \"Eve\"] } as const);\n</code></p><p></p><p>在此示例中，我们定义了一个泛型函数 getNamesExactly，它会接受用于扩展 HasNames 接口的类型 T 的一条参数，其中包含作为 names 属性的字符串数组。</p><p></p><p>在 TypeScript 5.0 之前，arg.names 的推断类型为 string[]，但如果我们需要的是 readonly string[]，则需要在调用函数时使用 as const 进行断言。</p><p></p><p>而在 TypeScript 5.0 中，我们可以将 const 修饰符添加至类型参数声明当中，借此默认进行 const-like 推断。这样就能在调用中省略 as const 断言，且仍然推断出更具体的 readonly string[] 类型。</p><p></p><p></p><h3>3. 详尽的 switch/case 补全</h3><p></p><p></p><p>在编写 switch 语句时，TypeScript 现在可以检测被检查的值是否具有字面类型。如果是，则通过补全对每个未发现的 case 做 scaffold out。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/6e/6eb95f9196c510a2e4f5f61286686f89.gif\" /></p><p></p><p>可以在 GitHub 上（<a href=\"https://github.com/microsoft/TypeScript/pull/50996%EF%BC%89%E5%8F%82%E9%98%85%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E3%80%82\">https://github.com/microsoft/TypeScript/pull/50996）参阅具体实现。</a>\"</p><p></p><p></p><h3>4. 支持 export type *</h3><p></p><p></p><p>TypeScript 5.0 提供新的“导出类型”功能，能够在重新导出的语句中添加对仅类型导入的支持，例如 export&nbsp;from “module” 和 export * as ns from “module”。</p><p></p><p>示例为从 vehicles.ts 模块导出的 Spaceship 类，之后使用 export type * as vehicles from \"./vehicles\"在 models/index.ts 模块中进行重新导出。在 main.ts 当中，重新导出的 vehicles 命名空间被导入，并用于对 takeASpaceship 函数中的参数进行类型检查。但请注意，在 makeASpaceship 函数中创建新的 Spaceship 对象会导致错误，因为 vehicles 命名空间是作为仅类型导入进行导出的，不可用作值。</p><p></p><p><code lang=\"javascript\">// models/vehicles.ts\nexport class Spaceship {\n  // ...\n}\n// models/index.ts\nexport type * as vehicles from \"./vehicles\";\n// main.ts\nimport { vehicles } from \"./models\";\nfunction takeASpaceship(s: vehicles.Spaceship) {\n  // ok - `vehicles` only used in a type position\n}\nfunction makeASpaceship() {\n  return new vehicles.Spaceship(); // Error: 'vehicles' cannot be used as a value because it was exported using 'export type'.\n}\n</code></p><p></p><p></p><h3>5. 多配置扩展</h3><p></p><p></p><p>TypeScript 5.0 现可支持使用 extends 字段扩展多个配置文件。这项功能适用于同时管理多个项目，其中“基本”配置文件可由其他 tsconfig.json 文件进行创建和扩展。以往，这项操作只能通过单个文件完成，但现在您可以扩展至多个文件，并在发生字段冲突时以后一个条目为优先。</p><p></p><p>例如，如果您有一个从 @tsconfig/strictest/tsconfig.json 扩展的基本 sconfig.base.json 文件，则可以让其他 tsconfig.json 文件从这两个文件进一步扩展，如下所示：</p><p></p><p><code lang=\"javascript\">{\n    \"extends\": [\"@tsconfig/strictest/tsconfig.json\", \"../../../tsconfig.base.json\"],\n    \"compilerOptions\": {\n        \"outDir\": \"../lib\",\n        // ...\n    }\n}\n</code></p><p></p><p>这就为多个配置文件的管理带来更大的灵活性，可通过多个文件扩展并轻松控制字段优先级。</p><p></p><p></p><h3>6. 性能提升</h3><p></p><p></p><p>TypeScript 5.0 提供多项性能改进，包括更快的对象类型索引和经过优化的条件类型推断。</p><p></p><p>以上只是 TypeScript 5.0 的部分新功能与改进，请参阅官方公告页面以了解更多详细信息。</p><p></p><p></p><h5>参考链接：</h5><p></p><p></p><p><a href=\"https://www.infoq.com/news/2023/03/announcing-TypeScript-5-beta/\">https://www.infoq.com/news/2023/03/announcing-TypeScript-5-beta/</a>\"</p><p></p><p><a href=\"https://medium.com/@caopengau/typescript-5-0-a-quick-demo-of-new-features-and-improvements-fbb841728ea\">https://medium.com/@caopengau/typescript-5-0-a-quick-demo-of-new-features-and-improvements-fbb841728ea</a>\"</p><p></p><p></p><h5>相关阅读：</h5><p></p><p><a href=\"https://www.infoq.cn/article/Xkg8kQ5weTgGm8CltxNZ\">20 个大前端必知领域之「TypeScript」</a>\"</p><p><a href=\"https://xie.infoq.cn/article/6ff79700fb3bfa972c1beebf3\">TypeScript 与 JavaScript：你应该知道的区别</a>\"</p><p><a href=\"https://xie.infoq.cn/article/4e88dfe234519e435a8cd9183\">系统学习 TypeScript（一）——认识 TypeScript</a>\"</p><p><a href=\"https://www.infoq.cn/article/UJi4x9fUcaw9fCJ52o8i\">未来可期的 TypeScript</a>\"</p>",
    "publish_time": "2023-03-24 15:51:19",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "英特尔、字节跳动的生态共建：重新定义“云固件”",
    "url": "https://www.infoq.cn/article/SLsltEACZUqBFLlAl4oD",
    "summary": "<p>近日，字节跳动、<a href=\"https://www.infoq.cn/article/QhpA7gaWGpo3ZRYseHX3\">英特尔</a>\"、OCP-OSF 、OSFF 社区联合举办的云固件沙龙交流会暨产品发布会顺利落地，在此次活动上，字节跳动正式发布新一代云固件 Cloud Firmware 2.0 ，这标志着 X86 服务器中产品化 coreboot 的固件解决方案在业界首次完成落地。</p><p>&nbsp;</p><p>据悉，字节跳动历经两次次迭代，云固件 Cloud Firmware 的 LinuxBoot 和 coreboot 快速完成产品化。在整个研发过程中，英特尔为其提供了可生产级别的 FSP ，同时帮助字节完成云固件的服务器平台开发工作，大大缩短了其上线时间。</p><p>&nbsp;</p><p></p><h2>一、云固件的发展为什么离不开芯片厂商？</h2><p></p><p>&nbsp;</p><p>作为电子硬件系统中最底层的软件，固件负责对硬件进行初始化后供上层操作系统和应用软件使用， BIOS 是服务器领域里最重要的固件。一直以来，UEFI 固件很多功能模块由 BIOS 厂商把控，而绝大多数系统厂商都采用的又都是 BIOS 厂商的解决方案，众多功能/核心模块掌控在 BIOS 厂商手里，线上问题无法快速解决，同时还存在用户、芯片厂商、系统厂商无法保持代码同步的问题。如果能够将这些问题妥善解决，那云厂商的硬件研发及运维成本便可大幅降低。</p><p>&nbsp;</p><p>目前，云厂商拥有的 Linux 开发工程师要比 UEFI 开发工程师多得多，而且 UEFI 代码既复杂又几乎闭源。所以，云厂商期望把更多的功能从传统的固件中迁移到基于 Linux 的开源固件中来，以此打造自身技术优势并推动产业向前发展。同时希望通过使用自己的开发人员解决线上问题以此来缩短故障解决的周期，把“开发具备自身特色的功能”作为长期目标。</p><p>&nbsp;</p><p>基于云厂商这些需求，代码效率高、学习成本更低、代码模块化程度高的“云固件”应时而生。在云厂商驱动的白盒开发模型中，底层硬件初始化采用芯片厂商提供的 FSP（ Firmware Support Package 芯片固件支持包），云厂商可以便捷地进行平台开发；在中间层，选型一个开源的、稳定的、精简的、通用的 BootLoader 黏结芯片固件支持包和 OS Payload ；在最上层，选型一个开源的、高度自由的、定制的 OS Payload ，方便 CSP 根据数据中心的应用管理需求完成个性化定制。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/af/af61d36fad89ed74e69068ea0dcec577.png\" /></p><p></p><p>从全球情况来看，这种固件开发模式变得越来越重要，现在很多机器的 BIOS 都已经是基于这种 open 的快捷开发模式。所以，与其说是云固件的发展离不开芯片厂商，不如说是云厂商对于固件的需求离不开芯片厂商的底层支持。</p><p>&nbsp;</p><p>目前<a href=\"https://www.infoq.cn/article/UL7BT2Cp5V96gsruK6tx\">英特尔固件支持包</a>\"（ Intel® Firmware Support Package ，简称为 Intel® FSP ）是该领域技术成熟度比较高的产品，Intel® FSP 是由英特尔公司为支持其 X86 平台的芯片而发布的二进制格式文件，因为是二进制文件 Binary ，不会透露什么商业机密，所以解决了 open 开发模式中芯片厂商知识产权的安全问题。简单来说就是英特尔把芯片初始化代码封装成二进制文件，客户不需要知道里面做了什么，只需进行调用即可。而这也是英特尔 USF 一直关心和在持续努力推动的方向——只关心芯片初始化，一心为平台提供标准接口。经过几代产品的迭代，具有高成熟度产品化的它已经在字节跳动云固件 Cloud Firmware 中完美呈现出来。</p><p></p><p></p><h2>二、Intel® FSP 赋能字节两步完成 Cloud Firmware 产品化</h2><p></p><p>&nbsp;</p><p>在固件领域，LinuxBoot 将 Linux 作为固件的一部分的解决方案，可以很好地利用成熟的 Linux 模块解决传统固件驱动存在的不稳定性问题。于是，字节跳动一直打算将 Linux 下沉到固件。字节跳动 2021 年在英特尔、OCP-Open System Firmware 社区的支持下，全球首发的云固件 Cloud Firmware 1.0 成功地实现了服务器 LinuxBoot 产品化落地，一时之间引起众多行业人员关注。它基于 FSP Dispatch Mode + Minimal BIOS + LinuxBoot ，精简了传统固件方案，将一些功能移至生态更佳的 LinuxBoot 里实现。而近日字节跳动发布的新一代固件解决方案 Cloud Firmware 2.0 则重新定义了服务器系统固件架构，打破了传统固件技术方案的局限性，彻底去除 UEFI ，全面引入了 Linux 生态的 coreboot ，是全球第一个在 X86 服务器中产品化 coreboot 的固件解决方案。目前 Cloud Firmware 2. 首批套餐已完成生产，字节跳动计划在今年上线数万颗 CPU 以上规模。</p><p></p><p>为了支持 Cloud Firmware 2.0 的上线，<a href=\"https://www.infoq.cn/article/ZESlzXVR5OxVp2jSy1sM\">英特尔</a>\"开发了多个 RAS 和 Flash 更新功能帮助字节和各 ODM 解决了 RAS 、固件升级、双路 CPU 支持这三个领域中的核心问题。</p><p>&nbsp;</p><p>通过对 Eagle Stream 板的多重协同验证，使得英特尔和字节跳动实现了共赢。一方面，Intel® FSP 完成了从 Dispath Mode 到 API Mode 的进化，可拓展性大幅度提升；另一方面，英特尔帮助字节完成了 coreboot 支持服务器的各项功能，使得 coreboot 这一 BootLoader 首次在服务器上完成生产。</p><p>&nbsp;</p><p>此外，Intel® FSP 的易开发性加之英特尔强大的核心交付能力，使其提前向字节跳动高质量交付了 FSP-API BKC ；与此同时，英特尔一直活跃在 coreboot 社区，从服务器 coreboot 角度向 coreboot 社区贡献了数十个补丁，这些补丁主要集中在支持双路服务器，服务器可靠性、稳定性以及可维护性等方面。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5b/5bbd5a982571808e902da5b04774a72a.png\" /></p><p></p><p>在 Silicon Code 层面，Intel® FSP 由调度模式过渡到了 API 模式。以往客户需要事先拿到 Silicon Code ，之后将其编译集成到整个 Firmware 代码库中。而如今的 API 模式让“随插随用”在固件开发中成为可能，同时解决了 Silicon Code 的集成效率问题。客户在不修改 Silicon Code 的前提下，可以针对不同业务场景进行配置进而实现不同的特点。Intel® FSP 作为一个包含所有 Silicon Code 的包，更符合 OCP 原则的 API 模式使得其在 Silicon 特性可配置性方面表现出了优越性。</p><p>&nbsp;</p><p>从平台应用方面，Cloud Firmware1.0 应用在了Whitley平台上，而 Cloud Firmware 2.0 应用在了 Eagle Stream 平台上。这个迭代过程的背后，也体现出了 Intel® FSP 的升级过程，其表现出了相当不错的特性。在 BootLoader 层面，从之前 EDK2 精简版的 MinPlatform（ Cloud Firmware 1.0 ）切换到了 coreboot（ Cloud Firmware 2.0 ）。在 Cloud Firmware 1.0 的实践中，最重要的就是使得LinuxBoot 这样一个开源方案达到了产品级别，在 Cloud Firmware 2.0 中直接复用了 Cloud Firmware 1.0 中的 LinuxBoot ，包括基于 LinuxBoot 配套的相关工具链。总之，目前 Cloud Firmware 2.0 大大缩短了开发集成周期，大大降低了开发难度，减轻开发人员成本。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/be/bea2a6a240397b8966b875d70513fc89.png\" /></p><p></p><p>值得一提的是，Cloud Firmware 2.0 包括 FSP API 、coreboot 和 LinuxBoot 三大部分，在这种方案中，Intel® FSP 和 LinuxBoot 都是直接由 coreboot 来集成到最终的可用固件，这也使得 Silicon Code 和 Platform Code 实现了解耦，使像 EGS 这样复杂的系统能够根据客户的需求进行定制。换言之，对于 Silicon 特性的定制，客户可以通过 UPD对 Intel® FSP 进行客制化的配置，对于平台端的定制，客户可以将这个部分转化为基于 LinuxBoot 的 APP ，这也打破了传统 Monolithic Firmware 模式，实现从固件端更好地配合芯片 Chiplet 和平台端 Reusable Compute Block 的理念。</p><p>&nbsp;</p><p>迭代后的 Cloud Firmware 2.0 ，搭载第四代英特尔® 至强® 可扩展处理器（代号： Sapphire Rapids ），技术数据显著提升。相关数据显示，火山引擎基于第四代英特尔® 至强® 可扩展处理器的第三代弹性计算实例，相比上一代整机算力提高了 70% ，单核算力提高了 18% ，网络转发性能提高 2 倍，存储 IOPS 性能提高 2.3 倍，加解密性能提高 1 倍，AI 推理加速性能提高 2.2 倍。</p><p>&nbsp;</p><p>据悉，第四代英特尔® 至强® 可扩展处理器采用了英特尔最新的 Intel 7 制程技术，带来了更高的能耗比，与前一代处理器相比，其通过内置加速器将目标工作负载的平均每瓦性能提升了 2.9 倍，在优化电源模式下每个 CPU 节能高达 70 瓦，且性能没有显著下降情况，用户的总体拥有成本可降低  52%-66% 。Sapphire Rapids 最高可以提供 80 个 PCIe 5.0 通道，支持 1.5TB的DDR5-4800 内存，为高性能计算带来了庞大的存储容量。</p><p>&nbsp;</p><p></p><h2>三、英特尔 USF 推动云固件高速发展</h2><p></p><p>&nbsp;</p><p>除了帮助字节跳动完成云固件的改造，事实上，英特尔一直在关注下一代固件技术的演进。</p><p>&nbsp;</p><p>在云厂商的强烈需求下，2019 年英特尔就开始发力 Universal Scalable Firmware（ USF ）标准的建设，它建立在 UEFI 和 ACPI 等现有行业标准之上，既可以降低固件开发的复杂性，又可以跨 CPU 和 XPU 进行拓展。目前已知标准中的功能及组件涵盖了可跨不同操作系统和 BootLoader 工作的通用 Payload ，具有简化的 ACPI 支持、Rust 编程语言接口、YAML 配置及 SoC FSP 等，有效提升了固件的质量和安全性。</p><p>&nbsp;</p><p>对行业而言，降低固件开发成本,同时提升固件质量和安全性、以及推动固件领域的其它创新。得益于代码复用和易于集成的特性，开发人员可以专注于创新和部署新功能，有利于推动技术迭代。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/17/17329de3cdfe8d3ebfd775e6a5421621.png\" /></p><p></p><p>整体来说，英特尔对外传达出了一个明确的信息：“将 UEFI、coreboot 、SLB 和 U-boot 同等对待，均视为 BootLoader 的一种，英特尔更关心芯片的初始化，为平台提供标准化接口。”而这也直接促就了云固件的发展。至今英特尔也有了不少的成功案例，比如由 Intel® FSP、Slim BootLoader 、基于裁剪后 Linux 的 RTOS 三者共同构成的板载固件方案等。</p><p>&nbsp;</p><p>当前，业内还只是部分云厂商参与到了云固件生产领域的开发和探索中，有云固件改造需求的云厂商的核心诉求其实也很简单，就是需要一个稳定的、可拓展的、可生产的 FSP ，以及能够适配各种形态的 BootLoader 。</p><p>&nbsp;</p><p>目前来看，英特尔在该方面一直持续发力。经过几代 CPU 的迭代，Intel® FSP 已经非常稳定，并且具备支持云固件产品化需求的能力。Intel® FSP 和 Open BMC 目标统一，持续致力于推广聚焦于 Silicon Enabling 的固件解决方案，助力并影响固件开源社区的发展。</p><p>&nbsp;</p><p>积土成山，风雨兴焉。Intel® FSP 最新的规格说明书目前已经升级到 V2.4 版本。据悉，英特尔的研发团队将按照最新的规格说明书在下一代做对应的升级动作。其中最大的改变在于会将对 RAS 的支持从 coreboot 调整到 FSP 中。英特尔将会陆续在 FSP 里集成云固件需要的各方面能力，以便在下一代产品中推动更多的云厂商加入，让云厂商的开发和生产变得简单便捷，比如上一代发现的 feature gap 以及对配置的升级等都会做到 Intel® FSP 中，让其更加适配客户应用。</p><p>&nbsp;</p><p>总之，技术演进进行得如火如荼的云固件，值得我们期待，而英特尔 USF 作为推动云固件技术演进的催化剂，也非常值得我们期待。</p>",
    "publish_time": "2023-03-24 15:54:09",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "腾讯大规模云原生技术实践案例集",
    "url": "https://www.infoq.cn/article/Is534v4mBvUmgC1uJEdc",
    "summary": "<p><img alt=\"\" src=\"https://static001.infoq.cn/resource/image/f9/8e/f9924e14289757686d940513a85bdd8e.jpg\" /><br />\n经过多年磨砺与创新，腾讯内部海量自研业务已实现全面上云。近三年来，腾讯的自研业务上云规模 <span class=\"orange\"><strong>已经突破 5000 万核，累计节省成本超过 30 亿。</strong></span></p>\n<p>包括 QQ、微信、腾讯视频、王者荣耀等在内的 <span class=\"orange\"><strong>腾讯内部业务，和腾讯云百万级外部客户一样基于公有云的模式来开发运营</strong></span>，腾讯全面开启业务云端生长新时代。</p>\n<p>“这是腾讯自研上云战略的一个里程碑。”腾讯集团高级执行副总裁、云与智慧产业事业群CEO 汤道生表示：“把腾讯内部海量业务搬上云端，不仅帮助腾讯构建面向未来的技术架构和研发文化，推动科技成为公司业务发展和产品创新的动力与支撑，也全面锤炼了腾讯云的产品、技术和综合服务能力，这些能力将加快推动产业的数字化升级，助力实体经济全面发展。”</p>\n<p>大部分业务都是在保持高速增长的过程中上云。比如，QQ 是腾讯首个全面上云的内部业务，把如此庞大和复杂的业务搬上云端，技术团队实现了对用户零感知，被外界称为“开着飞机换引擎”。</p>\n<p>同时，腾讯云也为新兴业务的高速发展提供有力支撑。以视频号为例，借助腾讯云的弹性扩容能力，视频号稳健支撑诸如西城男孩、周杰伦、崔健等明星的大型线上演唱会活动；得益于对象存储 COS 和腾讯云直播服务，视频号在春节等特殊时段抗住了超平时 3 倍以上业务高峰。</p>\n<p>腾讯会议凭借生于云、长于云的大规模实践，现在已经成为中国最受欢迎的云视频会议产品，依托业界领先的实时音视频产品 TRTC，腾讯会议可以有效保障数亿用户在复杂网络环境中流畅清晰的视频会议体验。</p>\n<p>腾讯自研业务上云，打造出了 <span class=\"orange\"><strong>国内最大规模的云原生实践</strong></span>。</p>\n<p>三年来，数千万核的自研业务上云规模，推动腾讯云的自研产品能力不断优化，多项产品性能达到业界领先水平，也推动腾讯云在全球的基础设施不断完善。</p>\n<p>腾讯自研上云 <span class=\"orange\"><strong>明确基于云原生来构建面向未来的技术架构</strong></span>。例如，通过容器和微服务等技术，腾讯构建了统一的技术底座和算力调度平台，有效促进公司内部技术团队的协作与创新。</p>\n<p>目前，腾讯云的 TKE 平台拥有国内最大规模的 Kubernetes 集群，以及最为领先的在离线混部技术，腾讯上云打造了国内最大规模的云原生实践。</p>\n<p>为了向开发者更好的介绍腾讯自研业务、外部客户如何通过云原生技术产品支撑业务发展的，特别推出<strong><span class=\"orange\">《腾讯大规模云原生技术实践案例集》</span></strong>，包括 QQ、腾讯会议、腾讯广告、和平精英、腾讯文档、作业帮、中国南方电网、小红书、知乎、Unity、斗鱼、微盟等十多个海量产品和大规模场景的云原生技术实践。希望在给业界带去参考的同时，能够一起推动国内大规模场景下云原生技术实践的有效落地。</p>",
    "publish_time": "2023-03-24 16:16:58",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "经济复苏正当时，云网络如何加速企业效率提升？",
    "url": "https://www.infoq.cn/article/m4saoJTC2MHRaAqpkL8d",
    "summary": "<p>疫情改变了很多人的生活方式，也改变了很多企业的经营方式和对云技术的看法。Gartner预测，到2025年，过半企业在公有云计算领域的IT支出将超过传统IT服务支出。</p>\n<p>2023年经济开始复苏，效率提升成为不少企业在2023年的主要课题之一。作为企业上云的第一步，云网络也将迎来不小的机遇和挑战。那么，经济复苏给云网络带来了哪些变化，而云网络又将如何促进企业提升效率、加速发展？极客有约本期栏目特别邀请到了阿里云智能云网络产品线总经理、阿里巴巴达摩院XG实验室负责人祝顺民（江鹤），一起来聊聊《经济复苏正当时，云网络如何加速企业效率提升？》</p>",
    "publish_time": "2023-03-24 17:18:09",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]