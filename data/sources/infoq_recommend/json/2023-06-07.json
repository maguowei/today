[
  {
    "title": "ByConity 如何在Kubernetes上无感扩缩容",
    "url": "https://www.infoq.cn/article/yIV7POYPrd7QhsGKrcpj",
    "summary": "<p></p><h2>引言</h2><p></p><p>ByConity是一个由字节跳动开源的云原生数据仓库引擎，采用存储计算分离的架构，实现了读写分离和弹性扩缩容。这款引擎支持多个关键功能特性，如资源隔离、无感扩缩容、高性能和数据的强一致性等。该架构确保读写操作不会相互影响，同时使计算资源和存储资源解耦，两者可以按需独立扩缩容，实现资源高效利用。ByConity适用于多租户环境，支持多租户资源隔离功能，保证不同租户之间不会互相影响。另外，ByConity采用主流的OLAP引擎优化技术，如列存储、向量化执行、MPP执行和查询优化等，为用户提供优异的读写性能。</p><p></p><h2>ByConity存储计算分离架构</h2><p></p><p></p><p>为了让大家更好的理解需要部署的组件，这里简单介绍下ByConity的架构。想更深入了解请参考另一篇文章《<a href=\"https://mp.weixin.qq.com/s/FNaC3RTr7BxBZbditTJxRw\">谈谈ByConity存储计算分离架构和优势</a>\"》。ByConity的存储计算分离架构主要分为三层：共享服务层、计算层和云存储层。共享服务层是所有查询的入口，主要组件是Cloud Service和Metadata Storage，它会对查询进行解析和优化，并负责一些服务、组件和事务的管理和元数据的管理。计算层是计算资源组，主要组件是Virtual Warehouse（VW），包括Read VW和Writer VW。云存储层是分布式统一存储系统，ByConity所有的数据都存储在这一层，在计算层进行查询时，会从云存储层中读取数据，具体实现可以采用各种云存储服务，如HDFS、S3等。此外，ByConity还包括TSO、Daemon Manager、Resource Manager、后台任务和服务发现等共享服务组件，为整个系统提供稳定的支持和管理。</p><p><img src=\"https://static001.geekbang.org/infoq/ca/ca658cf185d98b015c968c0e6a1e0cc4.png\" /></p><p>图1 ByConity三层技术架构</p><p></p><h2>ByConity如何在Kubernetes上部署和操作</h2><p></p><p>Kubernetes是一个开源的容器编排平台，可以自动管理和部署容器化应用程序，并提供高可用性和弹性的部署模式。将ByConity部署在Kubernetes上，可以享受Kubernetes提供的可伸缩性、高可用性、负载均衡、容错性等，同时简化管理和部署的过程。下面将给大家详细介绍下，如何在Kubernetes上部署ByConity。</p><p></p><h3>硬件配置：</h3><p></p><p></p><p>用户需要部署和购买自己的Kubernetes集群，且要求在不影响测试性能前提下的最低硬件配置如下表：</p><p></p><p></p><p>同时，我们也给出一个生产环境下建议的硬件配置，供大家参考：</p><p></p><p></p><h3>工具安装：</h3><p></p><p>本地安装Kubernetes命令行工具kubectl，用于管理Kubernetes集群本地安装用于管理Kubernetes应用程序的包管理工具helm本地安装byconity-deploy代码：</p><p><code lang=\"null\">git clone git@github.com:ByConity/byconity-deploy.git \ncd byconity-deploy</code></p><p></p><h3>配置存储</h3><p></p><p></p><p>为了获得最佳的 <a href=\"https://en.wikipedia.org/wiki/Total_cost_of_ownership\">TCO</a>\"（https://en.wikipedia.org/wiki/Total_cost_of_ownership） 和性能，本地存储最好与 ByConity Server 和 Worker 一起使用。</p><p></p><p></p><blockquote>ByConity Server 和 Worker 的存储仅用于磁盘缓存，可以随时删除它们。</blockquote><p></p><p></p><p>您可以使用 <a href=\"https://openebs.io/docs/concepts/localpv\">OpenEBS local PV</a>\" （https://openebs.io/docs/concepts/localpv）等存储.</p><p></p><h3>配置helm</h3><p></p><p></p><p>可以从安装的byconity-deploy的目录复制./chart/byconity/values.yml文件，并进行修改适配，需要修改的地方如下：</p><p>storageClassNametimezonereplicas for server/workerhdfs storage request</p><p></p><h3>部署ByConity集群</h3><p></p><p><code lang=\"null\"># Install with fdb CRD first\nhelm upgrade --install --create-namespace --namespace byconity -f ./your/custom/values.yaml byconity ./chart/byconity --set fdb.enabled=false\n\n# Install with fdb cluster\nhelm upgrade --install --create-namespace --namespace byconity -f ./your/custom/values.yaml byconity ./chart/byconity</code></p><p>等待Pod启动：</p><p><code lang=\"null\">kubectl -n byconity get po</code></p><p>完成部署，启动client：</p><p><code lang=\"null\">$ kubectl -n byconity exec -it sts/byconity-server -- bash\nroot@byconity-server-0:/# clickhouse client\n172.16.1.1 :)</code></p><p></p><h3>测试ByConity集群</h3><p></p><p>执行一些SQL语句测试：</p><p><code lang=\"null\">CREATE DATABASE IF NOT EXISTS test;\nUSE test;\nDROP TABLE IF EXISTS test.lc;\nCREATE TABLE test.lc (b LowCardinality(String)) engine=CnchMergeTree ORDER BY b;\nINSERT INTO test.lc SELECT '0123456789' FROM numbers(100000000);\nSELECT count(), b FROM test.lc group by b;\nDROP TABLE IF EXISTS test.lc;\nDROP DATABASE test;</code></p><p></p><h3>手动更新ByConity集群</h3><p></p><p>这里举例说明如何增加新的计算组（Virtual Warehouse），假如用户希望增加两个计算组，5个副本用户读取（my-new-vw-default ）2个副本用户写入（my-new-vw-write ）。</p><p></p><p>更新用户的values.yaml文件</p><p><code lang=\"null\">byconity:\n  virtualWarehouses:\n    ...\n\n    - &lt;&lt;: *defaultWorker\n      name: my-new-vw-default\n      replicas: 5\n    - &lt;&lt;: *defaultWorker\n      name: my-new-vw-write\n      replicas: 2</code></p><p>使用新的value.yml文件，执行helm upgrade</p><p><code lang=\"null\">helm upgrade --install --create-namespace --namespace byconity -f ./your/custom/values.yaml byconity ./chart/byconity</code></p><p>在Byconity中运行执行DDL语句 CREATE WAREHOUSE 创建新的计算组</p><p><code lang=\"null\">CREATE WAREHOUSE IF NOT EXISTS `my-new-vw-default` SETTINGS num_workers = 0, type = 'Read';\nCREATE WAREHOUSE IF NOT EXISTS `my-new-vw-write` SETTINGS num_workers = 0, type = 'Write';</code></p><p>测试新的计算组</p><p><code lang=\"null\">-- Create a table with SETTINGS cnch_vw_default = 'my-new-vw-default', cnch_vw_write = 'my-new-vw-write'\nCREATE DATABASE IF NOT EXISTS test;\nCREATE TABLE test.lc2 (b LowCardinality(String)) engine=CnchMergeTree\nORDER BY b\nSETTINGS cnch_vw_default = 'my-new-vw-default', cnch_vw_write = 'my-new-vw-write';\n\n-- Check if the table has the new settings\nSHOW CREATE TABLE test.lc2;</code></p><p></p><h3>在Kubernetes上无感扩缩容</h3><p></p><p>无感扩缩容是指在系统运行过程中，通过动态调整计算和存储资源的分配，以满足业务需求，同时不影响系统的正常运行和服务质量的一种扩容方式。无感扩缩容的目的是为了提高系统的可用性和可靠性，同时降低系统维护和运营的成本。下面介绍下如何利用Kubernetes对ByConity集群进行无感扩缩容：</p><p></p><p>部署ByConity集群：利用上面步骤在用户的Kubernetes集群上部署ByConity设定负载阈值：用户需要设定负载阈值，即当ByConity集群负载达到一定程度时需要进行扩容操作。可以通过Kubernetes Horizontal Pod Autoscaler（HPA）对象进行设定，设置CPU使用率或内存使用率等指标作为负载阈值。例如，可以设置当ByConity集群的CPU使用率达到80%时，自动进行扩容操作。自动触发扩容：当ByConity集群负载达到设定的负载阈值时，Kubernetes HPA会自动触发扩容操作，增加ByConity节点数量以满足业务需求。例如，当ByConity集群的CPU使用率达到80%时，Kubernetes HPA会自动增加节点数量，保证ByConity集群的性能和可用性。Kubernetes会根据预设的规则和算法，自动增加或减少节点数量，并调整负载均衡策略，以保证系统的高性能和高可用性。动态调整资源：Kubernetes会根据实际负载情况，动态调整计算和存储资源的分配，以保证系统的高性能和高可用性。Kubernetes会自动将负载均衡地分配到不同的ByConity节点上，同时保证数据的一致性和可靠性。实时监控和报警：可以通过Prometheus等监控工具，实时监控ByConity集群负载和资源使用情况，当出现异常情况时会自动触发报警机制，通知管理员进行处理。</p><p></p><h2>总结</h2><p></p><p></p><p>总之，将ByConity部署在Kubernetes上，可以享受Kubernetes提供的可伸缩性、高可用性、负载均衡、容错性等，同时简化管理和部署的过程，同时ByConity可以利用Kubernetes进行无感扩缩容对用户带来的价值包括：</p><p>提高系统的可用性和可靠性：无感扩缩容可以根据实际负载情况动态调整计算和存储资源的分配，保证系统始终能够满足业务需求，避免因系统资源不足而导致的系统宕机或服务中断。提高系统的灵活性和可扩展性：无感扩缩容可以根据业务需求动态地增加或减少计算或存储资源，不需要进行系统停机或重启，从而提高了系统的灵活性和可扩展性。降低系统维护和运营成本：无感扩缩容可以自动调整系统资源，减少了系统管理员和运营人员的工作量，降低了系统维护和运营的成本。</p><p></p><p>同时ByConity也提供多种其他部署方式，欢迎社区开发者使用，并给我们提issue：</p><p>单机版本方式：https://github.com/ByConity/byconity-docker物理机部署模式：<a href=\"https://github.com/ByConity/ByConity/tree/master/packages\">https://github.com/ByConity/ByConity/tree/master/packages</a>\"源代码编译方式： https://github.com/ByConity/ByConity#build-byconity</p><p></p><h2>加入我们</h2><p></p><p></p><p>ByConity社区拥有大量的用户，同时是一个非常开放的社区，我们邀请大家和我们一起讨论共建，在Github上建立了issue：https://github.com/ByConity/ByConity/issues/26。</p><p></p><p>延伸阅读：</p><p><a href=\"https://www.infoq.cn/article/eDuYRT4rzgHBpqfV1T49\">谈谈ByConity存储计算分离架构和优势</a>\"</p><p><a href=\"https://www.infoq.cn/article/VKvhBbZq1OBtO3wF76Sf\">字节跳动开源ByConity：基于ClickHouse的存算分离架构云原生数仓</a>\"</p><p><a href=\"https://www.infoq.cn/article/SQCArsXNtZ9N1vEbLBqx\">ByConity与主流开源OLAP引擎（Clickhouse、Doris、Presto）性能对比分析</a>\"</p><p></p>",
    "publish_time": "2023-06-07 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "为什么技术经验很重要 | QCon伦敦演讲分享",
    "url": "https://www.infoq.cn/article/wWRHyXajo7gtJJeh7osC",
    "summary": "<p>空客防务与航天公司系统工程师<a href=\"https://qconlondon.com/speakers/svenreimers?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU2OTI3MzUsImZpbGVHVUlEIjoiaXk3ZTNCS0o3ZXNUQWtBTiIsImlhdCI6MTY4NTY5MjQzNSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.HwPeoihCL4qJAqXSJW6vlCR6CuuqbeqFIKYCFTF1b8g\">Sven Reimers</a>\"在<a href=\"https://qconlondon.com/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU2OTI3MzUsImZpbGVHVUlEIjoiaXk3ZTNCS0o3ZXNUQWtBTiIsImlhdCI6MTY4NTY5MjQzNSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.HwPeoihCL4qJAqXSJW6vlCR6CuuqbeqFIKYCFTF1b8g\">伦敦QCon大会</a>\"上分享了一些关于<a href=\"https://qconlondon.com/presentation/mar2023/why-technical-experience-matters-how-build-lifelong-career-software?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU2OTI3MzUsImZpbGVHVUlEIjoiaXk3ZTNCS0o3ZXNUQWtBTiIsImlhdCI6MTY4NTY5MjQzNSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.HwPeoihCL4qJAqXSJW6vlCR6CuuqbeqFIKYCFTF1b8g\">如何在软件开发领域建立长期职业生涯</a>\"的经验教训。在大会上，Reimers根据自己的亲身经历讨论了工程师在技术职业生涯中可以做些什么来保持进步。他分享了如何成为一名常青的软件开发者，拥有被业界重视的技术专长，并在指导下一代开发者方面发挥作用。</p><p></p><p>Reimers从他的职业生涯开始就进入了软件开发领域，设计和实现了在行业中得到广泛认可的复杂分布式系统，成为该领域的专家。他所掌握的工程专业知识使他成为卫星通信网络系统和网络管理解决方案的关键开发者。</p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/news/2023/04/why-technical-experience-matters/en/resources/1qcon2-1680555874488.jpg\" /></p><p></p><p>在快速发展的软件开发领域，技术经验比以往任何时候都更加重要。随着技术的不断发展，软件开发者需要掌握新的知识和技能，以便跟上最新的趋势和创新。</p><p></p><p>Reimers认为技术经验非常重要，它可以帮助开发者在不断变化的行业中站稳脚跟。他在演讲中分享了以下这些经验：</p><p></p><p>拥抱机会；弥合工程差距；成为佼佼者；传播你的知识；提升领导力；离开舒适区；终身学习；参与开源；提升专业知识；热爱你的工作。</p><p></p><p>积累技术经验对于在软件开发领域保持职业生涯常青来说是必不可少的。专注于建立坚实的技术技能基础，紧跟最新的趋势和最佳实践，发展沟通和解决问题等软技能，你就可以在这个令人兴奋和不断发展的领域取得成功。</p><p></p><p>技术在不断发展，新的编程语言、框架和工具也在不断出现。开发者需要跟上最新的趋势和创新，这样才能够保持竞争力，并随着时间的推移不断地继续培养他们的技能。而这些反过来可以带来更牢固的工作保障、更高的工资和更令人兴奋的职业机会。</p><p></p><p>无论你是刚开始参加工作，还是经验丰富的开发者，现在都是开始积累技术经验并将职业生涯提升到新水平的最佳时机。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/04/why-technical-experience-matters/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU2OTI3MzUsImZpbGVHVUlEIjoiaXk3ZTNCS0o3ZXNUQWtBTiIsImlhdCI6MTY4NTY5MjQzNSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.HwPeoihCL4qJAqXSJW6vlCR6CuuqbeqFIKYCFTF1b8g\">https://www.infoq.com/news/2023/04/why-technical-experience-matters/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/4uHEPy7XI5ORkaTTiZXN\">DevOps vs 平台工程，你想了解的都在这里 ｜ QCon闭门会</a>\"</p><p><a href=\"https://www.infoq.cn/article/ShUXt8wQpm9Zc17dXxDg\">降本增效三部曲：算好帐、定目标、抓增效 ｜ QCon闭门会</a>\"</p>",
    "publish_time": "2023-06-07 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]