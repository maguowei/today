[
  {
    "title": "ByConity 如何在Kubernetes上无感扩缩容",
    "url": "https://www.infoq.cn/article/yIV7POYPrd7QhsGKrcpj",
    "summary": "<p></p><h2>引言</h2><p></p><p>ByConity是一个由字节跳动开源的云原生数据仓库引擎，采用存储计算分离的架构，实现了读写分离和弹性扩缩容。这款引擎支持多个关键功能特性，如资源隔离、无感扩缩容、高性能和数据的强一致性等。该架构确保读写操作不会相互影响，同时使计算资源和存储资源解耦，两者可以按需独立扩缩容，实现资源高效利用。ByConity适用于多租户环境，支持多租户资源隔离功能，保证不同租户之间不会互相影响。另外，ByConity采用主流的OLAP引擎优化技术，如列存储、向量化执行、MPP执行和查询优化等，为用户提供优异的读写性能。</p><p></p><h2>ByConity存储计算分离架构</h2><p></p><p></p><p>为了让大家更好的理解需要部署的组件，这里简单介绍下ByConity的架构。想更深入了解请参考另一篇文章《<a href=\"https://mp.weixin.qq.com/s/FNaC3RTr7BxBZbditTJxRw\">谈谈ByConity存储计算分离架构和优势</a>\"》。ByConity的存储计算分离架构主要分为三层：共享服务层、计算层和云存储层。共享服务层是所有查询的入口，主要组件是Cloud Service和Metadata Storage，它会对查询进行解析和优化，并负责一些服务、组件和事务的管理和元数据的管理。计算层是计算资源组，主要组件是Virtual Warehouse（VW），包括Read VW和Writer VW。云存储层是分布式统一存储系统，ByConity所有的数据都存储在这一层，在计算层进行查询时，会从云存储层中读取数据，具体实现可以采用各种云存储服务，如HDFS、S3等。此外，ByConity还包括TSO、Daemon Manager、Resource Manager、后台任务和服务发现等共享服务组件，为整个系统提供稳定的支持和管理。</p><p><img src=\"https://static001.geekbang.org/infoq/ca/ca658cf185d98b015c968c0e6a1e0cc4.png\" /></p><p>图1 ByConity三层技术架构</p><p></p><h2>ByConity如何在Kubernetes上部署和操作</h2><p></p><p>Kubernetes是一个开源的容器编排平台，可以自动管理和部署容器化应用程序，并提供高可用性和弹性的部署模式。将ByConity部署在Kubernetes上，可以享受Kubernetes提供的可伸缩性、高可用性、负载均衡、容错性等，同时简化管理和部署的过程。下面将给大家详细介绍下，如何在Kubernetes上部署ByConity。</p><p></p><h3>硬件配置：</h3><p></p><p></p><p>用户需要部署和购买自己的Kubernetes集群，且要求在不影响测试性能前提下的最低硬件配置如下表：</p><p></p><p></p><p>同时，我们也给出一个生产环境下建议的硬件配置，供大家参考：</p><p></p><p></p><h3>工具安装：</h3><p></p><p>本地安装Kubernetes命令行工具kubectl，用于管理Kubernetes集群本地安装用于管理Kubernetes应用程序的包管理工具helm本地安装byconity-deploy代码：</p><p><code lang=\"null\">git clone git@github.com:ByConity/byconity-deploy.git \ncd byconity-deploy</code></p><p></p><h3>配置存储</h3><p></p><p></p><p>为了获得最佳的 <a href=\"https://en.wikipedia.org/wiki/Total_cost_of_ownership\">TCO</a>\"（https://en.wikipedia.org/wiki/Total_cost_of_ownership） 和性能，本地存储最好与 ByConity Server 和 Worker 一起使用。</p><p></p><p></p><blockquote>ByConity Server 和 Worker 的存储仅用于磁盘缓存，可以随时删除它们。</blockquote><p></p><p></p><p>您可以使用 <a href=\"https://openebs.io/docs/concepts/localpv\">OpenEBS local PV</a>\" （https://openebs.io/docs/concepts/localpv）等存储.</p><p></p><h3>配置helm</h3><p></p><p></p><p>可以从安装的byconity-deploy的目录复制./chart/byconity/values.yml文件，并进行修改适配，需要修改的地方如下：</p><p>storageClassNametimezonereplicas for server/workerhdfs storage request</p><p></p><h3>部署ByConity集群</h3><p></p><p><code lang=\"null\"># Install with fdb CRD first\nhelm upgrade --install --create-namespace --namespace byconity -f ./your/custom/values.yaml byconity ./chart/byconity --set fdb.enabled=false\n\n# Install with fdb cluster\nhelm upgrade --install --create-namespace --namespace byconity -f ./your/custom/values.yaml byconity ./chart/byconity</code></p><p>等待Pod启动：</p><p><code lang=\"null\">kubectl -n byconity get po</code></p><p>完成部署，启动client：</p><p><code lang=\"null\">$ kubectl -n byconity exec -it sts/byconity-server -- bash\nroot@byconity-server-0:/# clickhouse client\n172.16.1.1 :)</code></p><p></p><h3>测试ByConity集群</h3><p></p><p>执行一些SQL语句测试：</p><p><code lang=\"null\">CREATE DATABASE IF NOT EXISTS test;\nUSE test;\nDROP TABLE IF EXISTS test.lc;\nCREATE TABLE test.lc (b LowCardinality(String)) engine=CnchMergeTree ORDER BY b;\nINSERT INTO test.lc SELECT '0123456789' FROM numbers(100000000);\nSELECT count(), b FROM test.lc group by b;\nDROP TABLE IF EXISTS test.lc;\nDROP DATABASE test;</code></p><p></p><h3>手动更新ByConity集群</h3><p></p><p>这里举例说明如何增加新的计算组（Virtual Warehouse），假如用户希望增加两个计算组，5个副本用户读取（my-new-vw-default ）2个副本用户写入（my-new-vw-write ）。</p><p></p><p>更新用户的values.yaml文件</p><p><code lang=\"null\">byconity:\n  virtualWarehouses:\n    ...\n\n    - &lt;&lt;: *defaultWorker\n      name: my-new-vw-default\n      replicas: 5\n    - &lt;&lt;: *defaultWorker\n      name: my-new-vw-write\n      replicas: 2</code></p><p>使用新的value.yml文件，执行helm upgrade</p><p><code lang=\"null\">helm upgrade --install --create-namespace --namespace byconity -f ./your/custom/values.yaml byconity ./chart/byconity</code></p><p>在Byconity中运行执行DDL语句 CREATE WAREHOUSE 创建新的计算组</p><p><code lang=\"null\">CREATE WAREHOUSE IF NOT EXISTS `my-new-vw-default` SETTINGS num_workers = 0, type = 'Read';\nCREATE WAREHOUSE IF NOT EXISTS `my-new-vw-write` SETTINGS num_workers = 0, type = 'Write';</code></p><p>测试新的计算组</p><p><code lang=\"null\">-- Create a table with SETTINGS cnch_vw_default = 'my-new-vw-default', cnch_vw_write = 'my-new-vw-write'\nCREATE DATABASE IF NOT EXISTS test;\nCREATE TABLE test.lc2 (b LowCardinality(String)) engine=CnchMergeTree\nORDER BY b\nSETTINGS cnch_vw_default = 'my-new-vw-default', cnch_vw_write = 'my-new-vw-write';\n\n-- Check if the table has the new settings\nSHOW CREATE TABLE test.lc2;</code></p><p></p><h3>在Kubernetes上无感扩缩容</h3><p></p><p>无感扩缩容是指在系统运行过程中，通过动态调整计算和存储资源的分配，以满足业务需求，同时不影响系统的正常运行和服务质量的一种扩容方式。无感扩缩容的目的是为了提高系统的可用性和可靠性，同时降低系统维护和运营的成本。下面介绍下如何利用Kubernetes对ByConity集群进行无感扩缩容：</p><p></p><p>部署ByConity集群：利用上面步骤在用户的Kubernetes集群上部署ByConity设定负载阈值：用户需要设定负载阈值，即当ByConity集群负载达到一定程度时需要进行扩容操作。可以通过Kubernetes Horizontal Pod Autoscaler（HPA）对象进行设定，设置CPU使用率或内存使用率等指标作为负载阈值。例如，可以设置当ByConity集群的CPU使用率达到80%时，自动进行扩容操作。自动触发扩容：当ByConity集群负载达到设定的负载阈值时，Kubernetes HPA会自动触发扩容操作，增加ByConity节点数量以满足业务需求。例如，当ByConity集群的CPU使用率达到80%时，Kubernetes HPA会自动增加节点数量，保证ByConity集群的性能和可用性。Kubernetes会根据预设的规则和算法，自动增加或减少节点数量，并调整负载均衡策略，以保证系统的高性能和高可用性。动态调整资源：Kubernetes会根据实际负载情况，动态调整计算和存储资源的分配，以保证系统的高性能和高可用性。Kubernetes会自动将负载均衡地分配到不同的ByConity节点上，同时保证数据的一致性和可靠性。实时监控和报警：可以通过Prometheus等监控工具，实时监控ByConity集群负载和资源使用情况，当出现异常情况时会自动触发报警机制，通知管理员进行处理。</p><p></p><h2>总结</h2><p></p><p></p><p>总之，将ByConity部署在Kubernetes上，可以享受Kubernetes提供的可伸缩性、高可用性、负载均衡、容错性等，同时简化管理和部署的过程，同时ByConity可以利用Kubernetes进行无感扩缩容对用户带来的价值包括：</p><p>提高系统的可用性和可靠性：无感扩缩容可以根据实际负载情况动态调整计算和存储资源的分配，保证系统始终能够满足业务需求，避免因系统资源不足而导致的系统宕机或服务中断。提高系统的灵活性和可扩展性：无感扩缩容可以根据业务需求动态地增加或减少计算或存储资源，不需要进行系统停机或重启，从而提高了系统的灵活性和可扩展性。降低系统维护和运营成本：无感扩缩容可以自动调整系统资源，减少了系统管理员和运营人员的工作量，降低了系统维护和运营的成本。</p><p></p><p>同时ByConity也提供多种其他部署方式，欢迎社区开发者使用，并给我们提issue：</p><p>单机版本方式：https://github.com/ByConity/byconity-docker物理机部署模式：<a href=\"https://github.com/ByConity/ByConity/tree/master/packages\">https://github.com/ByConity/ByConity/tree/master/packages</a>\"源代码编译方式： https://github.com/ByConity/ByConity#build-byconity</p><p></p><h2>加入我们</h2><p></p><p></p><p>ByConity社区拥有大量的用户，同时是一个非常开放的社区，我们邀请大家和我们一起讨论共建，在Github上建立了issue：https://github.com/ByConity/ByConity/issues/26。</p><p></p><p>延伸阅读：</p><p><a href=\"https://www.infoq.cn/article/eDuYRT4rzgHBpqfV1T49\">谈谈ByConity存储计算分离架构和优势</a>\"</p><p><a href=\"https://www.infoq.cn/article/VKvhBbZq1OBtO3wF76Sf\">字节跳动开源ByConity：基于ClickHouse的存算分离架构云原生数仓</a>\"</p><p><a href=\"https://www.infoq.cn/article/SQCArsXNtZ9N1vEbLBqx\">ByConity与主流开源OLAP引擎（Clickhouse、Doris、Presto）性能对比分析</a>\"</p><p></p>",
    "publish_time": "2023-06-07 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "为什么技术经验很重要 | QCon伦敦演讲分享",
    "url": "https://www.infoq.cn/article/wWRHyXajo7gtJJeh7osC",
    "summary": "<p>空客防务与航天公司系统工程师<a href=\"https://qconlondon.com/speakers/svenreimers?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU2OTI3MzUsImZpbGVHVUlEIjoiaXk3ZTNCS0o3ZXNUQWtBTiIsImlhdCI6MTY4NTY5MjQzNSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.HwPeoihCL4qJAqXSJW6vlCR6CuuqbeqFIKYCFTF1b8g\">Sven Reimers</a>\"在<a href=\"https://qconlondon.com/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU2OTI3MzUsImZpbGVHVUlEIjoiaXk3ZTNCS0o3ZXNUQWtBTiIsImlhdCI6MTY4NTY5MjQzNSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.HwPeoihCL4qJAqXSJW6vlCR6CuuqbeqFIKYCFTF1b8g\">伦敦QCon大会</a>\"上分享了一些关于<a href=\"https://qconlondon.com/presentation/mar2023/why-technical-experience-matters-how-build-lifelong-career-software?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU2OTI3MzUsImZpbGVHVUlEIjoiaXk3ZTNCS0o3ZXNUQWtBTiIsImlhdCI6MTY4NTY5MjQzNSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.HwPeoihCL4qJAqXSJW6vlCR6CuuqbeqFIKYCFTF1b8g\">如何在软件开发领域建立长期职业生涯</a>\"的经验教训。在大会上，Reimers根据自己的亲身经历讨论了工程师在技术职业生涯中可以做些什么来保持进步。他分享了如何成为一名常青的软件开发者，拥有被业界重视的技术专长，并在指导下一代开发者方面发挥作用。</p><p></p><p>Reimers从他的职业生涯开始就进入了软件开发领域，设计和实现了在行业中得到广泛认可的复杂分布式系统，成为该领域的专家。他所掌握的工程专业知识使他成为卫星通信网络系统和网络管理解决方案的关键开发者。</p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/news/2023/04/why-technical-experience-matters/en/resources/1qcon2-1680555874488.jpg\" /></p><p></p><p>在快速发展的软件开发领域，技术经验比以往任何时候都更加重要。随着技术的不断发展，软件开发者需要掌握新的知识和技能，以便跟上最新的趋势和创新。</p><p></p><p>Reimers认为技术经验非常重要，它可以帮助开发者在不断变化的行业中站稳脚跟。他在演讲中分享了以下这些经验：</p><p></p><p>拥抱机会；弥合工程差距；成为佼佼者；传播你的知识；提升领导力；离开舒适区；终身学习；参与开源；提升专业知识；热爱你的工作。</p><p></p><p>积累技术经验对于在软件开发领域保持职业生涯常青来说是必不可少的。专注于建立坚实的技术技能基础，紧跟最新的趋势和最佳实践，发展沟通和解决问题等软技能，你就可以在这个令人兴奋和不断发展的领域取得成功。</p><p></p><p>技术在不断发展，新的编程语言、框架和工具也在不断出现。开发者需要跟上最新的趋势和创新，这样才能够保持竞争力，并随着时间的推移不断地继续培养他们的技能。而这些反过来可以带来更牢固的工作保障、更高的工资和更令人兴奋的职业机会。</p><p></p><p>无论你是刚开始参加工作，还是经验丰富的开发者，现在都是开始积累技术经验并将职业生涯提升到新水平的最佳时机。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/04/why-technical-experience-matters/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU2OTI3MzUsImZpbGVHVUlEIjoiaXk3ZTNCS0o3ZXNUQWtBTiIsImlhdCI6MTY4NTY5MjQzNSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.HwPeoihCL4qJAqXSJW6vlCR6CuuqbeqFIKYCFTF1b8g\">https://www.infoq.com/news/2023/04/why-technical-experience-matters/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/4uHEPy7XI5ORkaTTiZXN\">DevOps vs 平台工程，你想了解的都在这里 ｜ QCon闭门会</a>\"</p><p><a href=\"https://www.infoq.cn/article/ShUXt8wQpm9Zc17dXxDg\">降本增效三部曲：算好帐、定目标、抓增效 ｜ QCon闭门会</a>\"</p>",
    "publish_time": "2023-06-07 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "从 PMO 的视角，看如何从 0 到 1 搭建研发效能体系？",
    "url": "https://www.infoq.cn/article/B2stL8oRq74SDsWZqcxO",
    "summary": "<p>项目的端到端交付会经历多个环节，从需求、开发、测试、集成、上线，到后续的运维、数据反馈。如果说有一个角色能对所有环节的情况胸有成竹，那可能就是 PMO 了。</p><p></p><p>我们在上一篇文章中聊到了<a href=\"https://www.infoq.cn/article/uYHCyCHU27weYcA94azl\">测试工程师为什么要关注研发效能</a>\"。这次关注研发效能的小逸同学对妙盈的PMO 负责人兼研发效能负责人姬俊鹏，进行了一次访谈。本期看点如下：</p><p>PMO 应该如何择己所长推动研发效能提升？如何从 0 到 1 建立研发度量体系？怎样解决推行研发效能过程中遇到的矛盾？怎样看待指标的波动与优化？</p><p></p><p>本文经公众号<a href=\"\">思码逸研发效能</a>\"授权转载。</p><p></p><h2>PMO 为什么会关注研发效能？</h2><p></p><p></p><p>小逸：可能还有些人对妙盈这家公司比较陌生，请先介绍一下妙盈和您自己。</p><p></p><p>姬俊鹏：妙盈科技是亚洲领先的可持续发展技术服务商，用人工智能解决金融机构、企业、政府和个人面临的可持续发展、气候变化、碳中和社会责任方面的挑战。我们为 ESG（Environmental，Social，Governance）和碳减排（Decarbonization）整个生态产业链各个环节提供解决方案。由于我们处于一个年轻的赛道，所以对于我们来讲，不管是在研发效能还是在企业管理方面，都会遇到一些比较新的机遇和挑战。</p><p></p><p>我是妙盈的 PMO 负责人姬俊鹏，此前从事的大部分工作都是与项目管理相关的，目前主要负责妙盈的研发项目管理和过程改进。</p><p></p><p>小逸：您在妙盈是负责从 0 到 1 建立研发效能体系的。为什么研发效能体系建设的重任会放到 PMO 团队身上？PMO 在推动研发效能提升方面，有哪些优势？</p><p></p><p>姬俊鹏：PMO 是一个组织，这个组织在市面上的解释很多，有的公司是一个项目经理团队相当于项目经理的集合、有的公司是做高层级项目管理（项目集及项目组合）、有的公司是做制度流程及审计。定位不一样则体现的价值不一样吧。妙盈的 PMO 会更关注工程师，主要是负责工程师团队的项目管理及过程改进。从过去的研发效能提升来看，我们做了不少的事情。</p><p></p><p>为什么 PMO 会关注研发效能？首先是得益于 CTO 的在公司技术发展上的战略要求，我们认为度量是非常有意义的。其次我们认为提升研发能效需要有有效的载体和抓手，项目可能是一个不错的选择。而且我们考虑到，PMO 这个组织处于一个相对中立的位置，也是比较容易通观全局的部门，所以研发效能的任务就落在了 PMO 组织上。</p><p></p><p>但从另一方面，PMO 一般并不懂具体研发岗位上的技术细节，在量化和研发效能提升时对各个专业自身的管理依赖会比较大。这对整个组织的文化和团队协作有比较高的要求。</p><p></p><p>小逸：从 PMO 的视角来看，在负责整个研发效能项目时，您最开始重点要做的事情是什么？</p><p></p><p>姬俊鹏：讲到从 0 到 1 建立研发效能体系，如果单说指标框架，其实网上可以找到很多，近些年已经有很多最佳实践，比前些年要容易找到参考。不过到具体公司落地场景和实践中，我们会面临很多更实际的困难。比如在妙盈初期做研发效能时，首先遇到的问题是如何收集数据以及先量化哪些工作等比较基础的问题。这个问题给不同的角色的人，可能思路各异。由于我是 PMO 负责管理项目，所以我第一反应就是以项目管理工具为核心，制定量化方法。例如我们现在用 JIRA，我们可以在里面看到需求管理、任务管理、测试管理、CI/CD 等环节的所有数据。</p><p></p><p>当然，作为 PMO 是这样的策略，如果换成别的专业来做，肯定也有其他行之有效的方法，并没有哪个是最好的。我认为最关键的是你要明白研发效能在你的公司战略中的定位，最终的目标是什么，然后从自身专业出发，找到一套适合公司战略，又能发挥你专业所长的方法论。</p><p></p><h2>从 0 到 1 建立研发效能体系</h2><p></p><p></p><p>小逸：我们从个人视角转到企业的视角。您可以讲讲为什么妙盈会关注研发效能吗？</p><p></p><p>姬俊鹏：妙盈关注研发效能得益于公司研发管理的战略考虑。因为我们的研发是一个很大的团队，其中有非常多的专业。当我们面向客户交付的时候，交付的结果是比较容易被观察到的，但是交付的过程、各专业的情况通常比较难被观测。所以研发的可被观测、可被量化，是作为研发效能改进的一个前提。</p><p></p><p>比如，前些年我们的重点工作是提高项目质量，因为那段时间我们注意到线上事故的频率很高，而且经常出现严重的事故。那我们应该从哪些方面着手改进呢？妙盈的思路就是先要将这个场景量化。第一步是量化当前现状，通过使用项目管理工具，记录所有的事故，获取基础数据、分析获得对它的洞察力。这个过程使我们能够识别根本的问题。通过解决这些核心问题，我们便可以改变现状。同时，这些变化的积极影响将一定程度上反映在我们的测量系统中，形成一个正向的循环。通过对各种业务场景进行量化，获得洞察力，并实施根本性的变革，我们建立了一个持续改进的正向循环。我们的确从这套方法论中受益，所以我们才会这么关注研发度量和效能提升。</p><p></p><p>小逸：那么从 0 到 1 建设研发效能体系的过程中，如何在最开始确立指标？期间遇到过什么样的问题？</p><p></p><p>姬俊鹏：首先我们想到的就是“量化指标”的数据从哪里获取。还是拿刚才说的项目质量的例子，最开始的时候，我们没有统一的项目管理工具，那我们首先就是找一个平台将每天的事务管理起来，由于当时研发大概只有几十人，所以没有必要建立太复杂的机制。我们就想着先将这些事件都记录下来，形成统一的工作习惯。比如发生一次线上事故，我们会先看行业内有哪些最佳实践，然后仿照着对这次事故进行响应、复盘，最后提交事故报告。这整个过程都会被记录下来，统一的工具帮助我们逐步形成了一套流程机制。与此同时，数据就沉淀在了工具里。</p><p></p><p>有了这些数据积累后，我们就会开始分析，比如我们可以按季度拉取数据，从中我们就可以看出：</p><p>该季度发生了多少线上事故这些事故的根本原因是什么事故的责任人、部门是哪些处理事故所用时长</p><p></p><p>我们最初做这样的研发效能度量后，发现当时绝大部分问题都是由于基础设施不够完善和不稳定引起的。有了这样的洞察，我们就能针对性地做出改进。如此经过半年多的持续改进，几轮正向的循环，妙盈整体线上 SLA 得到了很大改善。</p><p></p><p>小逸：你们是如何来制定指标的？从需求、开发、测试、运维，不同研发环节，都用了哪些指标？</p><p></p><p>姬俊鹏：提到指标的模型，行业中各家做法肯定各有千秋，我只谈我们自己的做法。由于我是 PMO 的角色，所以我会持续思考我们的研发模型是什么。我们在最初的时候研发团队比较小，所有项目均采用敏捷开发模型。后来随着业务规模和复杂性扩大，部分外部项目采用了瀑布式开发模型。这个时候，研发在不同模型下的量化指标是不一样的。比如大家讲到敏捷开发，第一时间想到的就是燃尽图，但放到瀑布模型下，燃尽图就没有什么意义了。所以根据模型的不同，我们的量化指标也会不断丰富和调整。</p><p></p><p>目前最新的情况，无论项目是敏捷还是瀑布，我们都尝试在贴合DevOps的框架。</p><p></p><p>DevOps 有几个域，从 Plan 阶段开始，我们就会进行量化，比如需求设计周期、需求评审情况等，会从 Plan 阶段开始尝试在整个生命周期下对需求做量化。</p><p></p><p>在Coding 阶段，思码逸就是我们非常核心的量化工具，其中最关键的就是代码当量、代码缺陷指标。</p><p>在 CI（持续集成） 阶段，我们会统计 CI 的时长、成功率，然后在 CI 上增加一些质量门禁。在有了质量门禁之后，CI 的通过率就可以得到量化了。</p><p></p><p>在测试阶段，会有缺陷密度、bug 类型、bug 严重程度、测试用例执行次数等这些量化指标。</p><p></p><p>在 Ops 环节中，会有针对Service Desk、线上事故、事件响应时间的度量，我们管这些叫 Ops Tickets，也是我们重点的量化的方向之一。</p><p></p><p>除此之外，SaaS线上监控的三大指标，包括success_rate, latency_p95, error_count，这些都会被量化。同时，我们也会监控各集群的资源利用率等指标。</p><p></p><p>小逸：你们对指标的产生波动是如何看待的？当你们从指标波动中发现问题后，如何推进后续优化？</p><p></p><p>姬俊鹏：肯定会有波动和变化。首先，我们有一个关键指标看板，每周都在周会上 review 一遍。我们在不同时期的关注点和侧重点会不太一样。如果有些指标的波动在当时来看是良性的，那我们就不会过多关注它。</p><p></p><p>例如在最开始的时候，我们的重点是质量的提升，那么我们每周周会会着重围绕线上事故事故响应、Root cause 做讨论，以及刚提到的 Ops 的各类指标。我们甚至还会直接打开具体的平台去看前后端的报错。</p><p></p><p>现在，我们团队更关注的是需求整体的研发效率，比如需求的健康程度、代码效率、需求响应速度等。</p><p></p><p>小逸：您刚刚提到在 Coding 环节引入了思码逸平台。那么引入后，帮您在研发效能提升方面解决了哪些问题？</p><p></p><p>姬俊鹏：其实最开始引入思码逸平台的时候，我们内部还没有研发的度量体系。这也是得益于 CTO 前瞻的判断。</p><p></p><p>很多公司都会在 Coding 阶段遇到代码该如何度量的问题。有些公司不用思码逸，那么解决这个问题的手段就很有限。他们可能就会通过计算代码行数来解决。但其实写代码的人都知道，用代码行数来度量存在很多漏洞。所以我认为思码逸做了一件很有意义的事情，让大家不用去看代码行数，通过代码当量比计算代码行数要相对更有说服力一些。同时我们还会采用思码逸平台提供的代码缺陷、测试覆盖等指标，从多个维度来评价开发提交的代码。</p><p></p><p>反观过去我们的度量历史，思码逸就是我们研发能效体系的一个树根，基于思码逸平台生长出了很多非常关键的指标。</p><p></p><p>小逸：内部来看，高层、管理者、开发者，从上到下怎么看待研发效能提升这件事？大家在此期间投入的精力如何？有哪些角色关注、参与了研发效能的提升，大家是如何分工的？</p><p></p><p>姬俊鹏：的确是不同层面的人，看待研发效能的观点很不一样。从我的观察来讲，首先我认为高层其实是非常重视这件事的，公司的运转效率始终是一个重要话题。对于研发 Lead 来讲，他们是衔接高层战略和普通员工管理的重要环节，从团队管理的角度，他们知道研发效能是非常重要的，但是另一方面也不希望这些机械化的指标影响团队的整体氛围。在妙盈，我们的研发 Lead 都很清楚，研发度量是一个管理工具，而如何使用工具，则是见仁见智。如果能利用好这个工具，其实对团队文化、团队效率、人才建设都会有正面的帮助。</p><p></p><p>从工程师层面来讲，肯定不希望有人天天来“度量”自己，会觉得压力很大。所以更多情况下，我们希望让开发同学能了解到公司实际在面临什么情况，我们开发的这个 feature 的市场背景、能给公司带来什么样的收益，从而让开发的同学能从日常工作中得到一些认同感和成就感。进一步，也可以让开发的同学理解，提升研发效能是为了让公司在市场中跑得更快更好，这才是最终的目的。</p><p></p><p>小逸：那么从业务流程、项目流程的层面来看，推进研发效能体系的时候会遇到哪些问题？你们是如何解决的？</p><p></p><p>姬俊鹏：遇到的状况还是挺多的。举几个例子吧。比如在我们推行代码当量这个指标的时候，工程师会认为它无法充分表达开发的所有工作内容，比如他们除了写代码，还需要写文档、改 bug，这些工作量是代码当量这个指标无法完全表达的。所以在做量化指标的同时，我们也会给 Leader 更多的解释权，把客观指标与主观评价结合来看。</p><p></p><p>还有比如任务延期这个指标。一个事情 delay 了，但它可能不是由于个人问题，可能是协作、客观因素等导致的。还有一些类似的指标，比如事故责任，在做事故归因的复盘时，责任人就会认为事故不是单个人的问题，很多人都有责任。</p><p></p><p>所以在遇到这些矛盾的时候，作为 PMO，我们会坚持两个基本原则：</p><p></p><p>1、坚持自己的中立性。不能偏袒任何一方，否则就会面临信用破产的问题。反过来讲，当你的中立性被大家广泛认可之后，在后续协调冲突中，解决事情的效率会越来越高。</p><p></p><p>2、维护好大家对指标的解释权。当你做了指标量化后，指标的解读在不少场景会有失控的风险。比如一个 report，技术 Lead 看过之后，认为没问题，但另一个观察者，他可能会不理解其中一些指标的异常和波动背后复杂的原因。那么这个时候对指标的解释就变得非常重要。所以我们会尽全力维护大家对指标的解释权利。即便说指标出现了异常，但你始终有机会去表达为什么出现这个异常，让各环节都能有得到充分的沟通，而不是只看表面的数字。我们量化的最终目的还是为了发现组织内部的问题、提升组织整体的管理水平，而不是为了量化而量化。</p><p></p><p>小逸：在经过这些年推动团队提升研发效能，在不同层面看取得的成效如何？</p><p></p><p>姬俊鹏：之前妙盈的研发团队比较小，那时候的确也很高效，但不是规模化的方式。现在我们的研发规模变大了，也有了比较成熟的分工结构、制度流程、度量体系、专门的报告平台，在平台上有大量的度量报表，不同报表面向不同的受众。我们完成了从小团队到规模化的转变，在转变过程中我们保持了项目质量稳定、效能持续维持在高于行业中位水平。</p><p></p><p>质量方面，我们不断提升代码质量指标的表现，比如单测覆盖、缺陷密度。线上高等级事故以前经常出现，现在已经变得非常罕见。与此同时还新增了不少质量措施，比如更复杂的静态扫描、自动化测试、各类安全测试及安全体系。</p><p></p><p>在改进质量的同时我们保持了高代码效率，周人均当量持续保持在 1500 左右。</p><p></p><p>这其中度量和基于度量的改进发挥了很重要的作用。现在回头看是很有成就感的事情。当然不同的阶段我们会面临不同的挑战，所以我们会持续迭代我们的研发管理体系以适应最新的战略要求，变革永远在路上。</p><p></p><h2>拥抱 AI 带来的颠覆性变化</h2><p></p><p></p><p>小逸：目前你们怎么看待 AI 工具带来的影响？</p><p></p><p>姬俊鹏：我们还处于积极尝试的阶段。我们坚信 AI 会给以后的研发带来颠覆性的变化，所以我们所有的部门都在不同的层面进行探索。</p><p></p><p>小逸：目前行业中有些团队在利用 ChatGPT 处理一些研发上的小工作。您和团队成员是否有在用？如果使用了，都是在什么样的场景上？</p><p></p><p>姬俊鹏：我们在积极地研究 ChatGPT，并且很多部门都在尝试使用它做一些工作。比如市场部会用 ChatGPT 去做一些初期的调研。当然，我们还是会对其数据可信度保持怀疑。在得到它的回答之后，再去做一次调研。实际上，ChatGPT确实提高了效率。</p><p></p><p>第二个有意思的应用点就是制度优化。比如让它评审我们的通用密码管理制度。这个制度就是规定了公司中各种密码场景的密码要求。我们会先写下来，然后让 ChatGPT 来 review，发现其中的漏洞。然后我们再根据ChatGPT提供的建议，结合公司实际情况来调整管理制度。在这方面它还是比较擅长的，可以节约一些我们寻找专家咨询的成本。</p><p></p><p>第三个在用 AI 的地方就是 Coding。我们在积极尝试各种工具，包括 ChatGPT、Cursor、Copilot 等。对于前后端工程师来讲，可能还没有完全用起来。但是对于我们一些非开发专业的人，比如我，就会利用这些工具写 Python 脚本、SQL 语句等来提升工作效率。还有就是利用它做 code review。我们可能考虑，在 CI 方面去集成一些 AI 工具。</p><p></p><p>同时我们也发现其在需求设计、单元测试、测试用例设计方面也有应用的场景，我们还在探索。</p><p></p><p>除此之外我们在云服务运维及内部工具层面也在用ChatGPT来做一些 troubleshooting 的尝试。</p><p></p><h2>小结</h2><p></p><p></p><p>从 0 到 1 建设研发效能体系并非易事，但不同的角色来负责这件事，都可以从自身擅长的领域找到一个根，慢慢生长出一套良性可持续改进的研发效能体系。就好像 PMO ，从擅长的项目管理本身出发，以项目的交付、质量等维度开始建立量化指标，逐步完善。在推行研发效能的过程中，会遇到很多问题。我们也可以参考他的两条原则，保持中立，以及维护团队对指标的解释权，可以在很大程度上更顺利地推进研发效能体系的建设。</p><p></p><p>原文链接：</p><p><a href=\"https://mp.weixin.qq.com/s/WtG1f656vLQQexSyDUuLiA\">https://mp.weixin.qq.com/s/WtG1f656vLQQexSyDUuLiA</a>\"</p>",
    "publish_time": "2023-06-07 10:22:33",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Java近期新闻：Java 28岁、Payara、Micronaut 4.0-M5、Spring更新",
    "url": "https://www.infoq.cn/article/eazviIX3Dutuh3lKwd1F",
    "summary": "<p></p><h4>OpenJDK</h4><p></p><p></p><p>面向JDK 21的JEP 451（<a href=\"https://openjdk.org/jeps/451\">代理动态加载禁用准备</a>\"）已经从候选状态提升到Proposed to Target状态。该JEP起初名为“默认禁止代理的动态加载”，在JEP Draft 8305968（<a href=\"https://openjdk.org/jeps/8305968\">完整性和强封装</a>\"）之后提出。其意图本是默认禁止将代理动态加载到正在运行中的JVM，现在已经演变为在将代理动态加载到运行中的JVM时发出警告。该JEP的目标包括：重新评估可用性和完整性之间的平衡；确保大多数不需要动态加载代理的工具不受影响。InfoQ后续将带来更详细的新闻报道。</p><p>&nbsp;</p><p>为了<a href=\"https://mail.openjdk.org/pipermail/amber-dev/2023-May/008102.html\">回答</a>\"关于switch模式穷尽检查的设计哲学的诸多问题，Oracle Java语言架构师<a href=\"https://www.linkedin.com/in/briangoetz/\">Brian Goetz</a>\"和Oracle技术顾问<a href=\"https://www.linkedin.com/in/gavin-bierman-a0173075/\">Gavin Bierman</a>\"发布了一份<a href=\"https://openjdk.org/projects/amber/design-notes/patterns/exhaustiveness\">文档</a>\"，详细说明了无条件、穷尽和余值（remainder）之间的关系。</p><p>&nbsp;</p><p></p><h4>JDK 21</h4><p></p><p></p><p>JDK 21<a href=\"https://jdk.java.net/21/\">早期访问构建</a>\"<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-21%2B24\">Build 24</a>\"在上周发布，其中包括<a href=\"https://github.com/openjdk/jdk/compare/jdk-21%2B23...jdk-21%2B24\">Build 23的更新</a>\"，主要是修复了各种<a href=\"https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2021%20and%20%22resolved%20in%20build%22%20%3D%20b17%20order%20by%20component%2C%20subcomponent\">问题</a>\"。要了解关于这个版本的更多细节，请查看<a href=\"https://jdk.java.net/21/release-notes\">发布说明</a>\"。</p><p>&nbsp;</p><p>对于<a href=\"https://openjdk.java.net/projects/jdk/21/\">JDK 21</a>\"，我们鼓励开发人员通过<a href=\"https://bugreport.java.com/bugreport/\">Java Bug数据库</a>\"报告Bug。</p><p>&nbsp;</p><p></p><h4>Spring Framework</h4><p></p><p></p><p><a href=\"https://spring.io/projects/spring-cloud\">Spring Cloud</a>\" 2022.0.3<a href=\"https://spring.io/blog/2023/05/25/spring-cloud-2022-0-3-aka-kilburn-is-available\">版本</a>\"的代号为Kilburn，与Spring Boot 3.1兼容，并更新了Spring Cloud子项目，包括：Spring Cloud OpenFeign 4.0.3、Spring Cloud Commons 4.0.3、Spring Cloud Kubernetes 3.0.3和Spring Cloud Starter Build 2022.0.3。然而，以下子项目的删除也带来了一些破坏性更改：Spring Cloud CLI、Spring Cloud for Cloud Foundry和Spring Cloud Sleuth。关于该版本的更多细节，请查看<a href=\"https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2022.0-Release-Notes\">发布说明</a>\"。</p><p>&nbsp;</p><p><a href=\"https://spring.io/projects/spring-shell\">Spring Shell</a>\" 3.1.0,3.0.4和2.1.10版本<a href=\"https://spring.io/blog/2023/05/25/spring-shell-2-1-10-3-0-4-and-3-1-0-are-now-available\">发布</a>\"，带来了一些值得注意的修复，例如：ConfirmationInput类的实例在输入时不显示所选择的选项；如果未使用@Option或@ShellOption注解，那么将目标方法参数作为布尔参数将失败。这些版本分别基于<a href=\"https://spring.io/projects/spring-boot\">Spring Boot</a>\" 3.1.0、3.0.7和2.7.12构建。关于这些版本的更多细节，请查看<a href=\"https://github.com/spring-projects/spring-shell/releases/tag/v3.1.0\">3.1.0</a>\"、<a href=\"https://github.com/spring-projects/spring-shell/releases/tag/v3.0.4\">3.0.4</a>\"和<a href=\"https://github.com/spring-projects/spring-shell/releases/tag/v2.1.10\">2.1.10</a>\"的发布说明。</p><p>&nbsp;</p><p><a href=\"https://spring.io/projects/spring-security-kerberos\">Spring Security Kerberos</a>\" 2.0.0的<a href=\"https://spring.io/blog/2023/05/25/spring-security-kerberos-2-0-0-rc2-available-now\">第二个候选版本</a>\"将依赖项升级到了<a href=\"https://spring.io/projects/spring-security\">Spring Security</a>\" 6.1.0。关于该版本的更多细节，请查看<a href=\"https://github.com/spring-projects/spring-security-kerberos/releases/tag/2.0.0-RC2\">发布说明</a>\"。</p><p>&nbsp;</p><p></p><h4>Payara</h4><p></p><p></p><p>Payara<a href=\"https://blog.payara.fish/whats-new-in-the-may-2023-payara-platform-release\">发布</a>\"了<a href=\"https://www.payara.fish/\">Payara平台</a>\"的2023年5月版，其中包括社区版6.2023.5、企业版6.2.0和企业版5.51.0。这三个版本主要是解决：<a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-1370\">CVE-2023-1370</a>\"漏洞——在<a href=\"https://netplex.github.io/json-smart/\">Json-smart</a>\" （JSON处理器库）中对JSON嵌套数组和对象进行非受控递归解析时，可能导致堆栈溢出，进而导致软件崩溃；使用Web UI创建JVM选项时抛出的异常“JVM option${ } 在配置中已经存在”。该版本还带来了依赖项升级：Jackson 2.15.0、SnakeYAML 2.0、JSON Smart 2.4.10以及JDK 8u372、11.0.19和17.0.7的Docker镜像。要了解关于这些版本的详细信息，请查看<a href=\"https://docs.payara.fish/community/docs/Release%20Notes/Release%20Notes%206.2023.5.html\">社区版6.2023.5</a>\"、<a href=\"https://docs.payara.fish/enterprise/docs/Release%20Notes/Release%20Notes%206.2.0.html\">企业版6.2.0</a>\"和<a href=\"https://docs.payara.fish/enterprise/docs/5.51.0/Release%20Notes/Release%20Notes%205.51.0.html\">企业版5.51.0</a>\"的发布说明。</p><p>&nbsp;</p><p></p><h4>Quarkus</h4><p></p><p></p><p>Quarkus 3.0.4.Final是<a href=\"https://quarkus.io/blog/quarkus-3-0-4-final-released/\">第三个维护版本</a>\"（第一个是3.0.1），提供了文档方面的改进和重要的Bug修复，例如：当设置了quarkus.package.output-directory 属性时，本地镜像构建失败；当将@ConfigMapping与onStartup()方法一起使用时，会出现“No current injection point found”错误；修复<a href=\"https://quarkus.io/guides/resteasy-reactive\">RestEasy Reactive中</a>\"的location和content location头信息。要了解关于该版本的更多细节，请查看<a href=\"https://github.com/quarkusio/quarkus/releases/tag/3.0.4.Final\">变更日志</a>\"。</p><p>&nbsp;</p><p>同样，Quarkus 2.13.8也带来了一些重要的Bug修复，其中许多是向后移植的，例如：针对警告消息quarkus.oidc.application-type=service的修复；默认加密OIDC会话cookie值；在ProviderConfigInjectionWarningsTest类中过滤掉与Apache HTTP客户端未关闭相关的RESTEasy警告；因最近一次Netty版本升级所导致的MongoDB客户端本地镜像构建警告。要了解关于该版本的更多细节，请查看<a href=\"https://github.com/quarkusio/quarkus/releases/tag/2.13.8.Final\">发布说明</a>\"。</p><p>&nbsp;</p><p></p><h4>WildFly</h4><p></p><p></p><p>WildFly 28.0.1<a href=\"https://www.wildfly.org/news/2023/05/23/WildFly2801-Released/\">发布</a>\"，提供了依赖项升级和重要的Bug修复，包括：在ContextPropagationTestCase类中定义的testContextPropagation()测试在使用Long Running Actions时偶尔会失败；一个可部署、但在OpenShift上不起作用的QS应用，这是由todo-backend（OpenShift后端部署快速入门）中的<a href=\"https://helm.sh/docs/topics/charts/\">Helm Charts</a>\"更新导致的；在ExpirationMetaData接口中定义的isExpired()方法与LocalScheduler类中的逻辑不一致。</p><p>&nbsp;</p><p></p><h4>Micronaut</h4><p></p><p></p><p>在迈向4.0版本的道路上，Micronaut基金会发布了Micronaut 4.0.0-M5，带来了许多依赖项升级和改进，包括：向JSON消息阅读器添加@BootstrapContextCompatible注解（带有该注解的bean可以加载到Bootstrap Context中）；在<a href=\"https://micronaut-projects.github.io/micronaut-openapi/latest/guide/\">Micronaut OpenAPI</a>\"中使用Micronaut环境时禁用SLF4J初始化的能力；使用bean定义类型作为基于AbstractConcurrentCustomScope类定义类单例作用域时的bean类型。要了解关于该版本的更多细节，请查看<a href=\"https://github.com/micronaut-projects/micronaut-core/releases/tag/v4.0.0-M5\">发布说明</a>\"。</p><p>&nbsp;</p><p></p><h4>Helidon</h4><p></p><p></p><p>Oracle发布了Helidon 2.6.1，升级了依赖项，并引入了一些重要的更改，包括：更新ByteBufDataChunk类中定义的isReleased()方法，使用AtomicBoolean类的一个实例来防止可能多次调用release回调的竞态条件；为@MPTest注解添加@Target(ElementType.METHOD)注解，用于指定具体的目标；修复WritableMultiPart类中定义的重载方法create()。要了解关于该版本的更多细节，请查看<a href=\"https://github.com/helidon-io/helidon/releases/tag/2.6.1\">发布说明</a>\"。</p><p>&nbsp;</p><p></p><h4>MicroStream</h4><p></p><p></p><p>MicroStream 8.1.0<a href=\"https://github.com/microstream-one/microstream/releases/tag/08.01.00-MS-GA\">发布</a>\"，提供了与Quarkus 3的集成，并修复了在使用Lazy Collections API时Stream API无法按预期卸载的问题。</p><p>&nbsp;</p><p>Micronaut团队还为MicroStream<a href=\"https://microstream.one/blog/article/quarkus-extension-for-microstream/\">引入</a>\"了<a href=\"https://docs.microstream.one/manual/misc/integrations/quarkus.html\">Quarkus扩展</a>\"，允许在Quarkus应用程序中通过注解访问MicroStream的功能。</p><p>&nbsp;</p><p></p><h4>Apache Camel</h4><p></p><p></p><p>Apache Camel 3.20.5<a href=\"https://camel.apache.org/blog/2023/05/RELEASE-3.20.5/\">发布</a>\"，主要是针对camel-jbang模块进行了Bug修复、依赖项升级和改进，包括：加载仅定义Java bean的YAML文件的能力；使用camel-jbang在XML DSL中创建Camel文件时，使用文件名生成路由ID；从空文件夹运行camel-jbang，然后在文件夹中新增文件时重新加载。要了解关于该版本的更多细节，请查看<a href=\"https://camel.apache.org/releases/release-3.20.5/\">发布说明</a>\"。</p><p>&nbsp;</p><p></p><h4>JDKMon</h4><p></p><p></p><p><a href=\"https://github.com/HanSolo/JDKMon\">JDKMon</a>\" <a href=\"https://github.com/HanSolo/JDKMon/releases/tag/17.0.61\">17.0.61</a>\"（一个监控和更新已安装JDK的工具）于上周发布。这个新版本是由Azul首席工程师<a href=\"https://de.linkedin.com/in/gerritgrunwald\">Gerrit Grunwald</a>\"创建的，它向jdkmon.properties 文件中添加了一个属性，用于禁用通知。同时，它还修复了与检测到的CPU架构相关的问题以及与同一JDK版本的多个构建相关的问题。</p><p>&nbsp;</p><p></p><h4>JHipster</h4><p></p><p></p><p>JHipster团队<a href=\"https://twitter.com/pascalgrimaud/status/1660303739155095555?cxt=HHwWhoC9-YfdyoouAAAA\">发布</a>\"了<a href=\"https://www.jhipster.tech/jhipster-lite/\">JHipster Lite</a>\"的0.333.0版本，带来了许多依赖项升级和重要的更改，包括：修复了<a href=\"https://www.eclipse.org/jgit/\">JGit</a>\"集成的本地提示；新增DestroyRef提供程序。要了解关于该版本的更多细节，请查看<a href=\"https://github.com/jhipster/jhipster-lite/releases/tag/v0.33.0\">发布说明</a>\"。</p><p>&nbsp;</p><p></p><h4>Java，28岁生日快乐！</h4><p></p><p></p><p>Java初次露面是在1995年5月23日的SunWorld 1995大会上，上周，它迎来了自己的28岁生日。Oracle Java开发关系团队举办了名为Java 28小时的庆祝活动，由<a href=\"https://twitter.com/ammbra1508/\">Ana Maria Mihalceanu</a>\"、<a href=\"https://nipafx.dev/nicolai-parlog/\">Nicolai Parlog</a>\"和<a href=\"https://www.linkedin.com/in/sharatchander/\">Sharat Chander</a>\"主持。活动主题包括：实时编码和探索、演示、与Java杰出人物对话以及有趣的游戏。以下是活动议程：</p><p>与Nicolai一起探索<a href=\"https://junit-pioneer.org/\">JUnit Pioneer</a>\"。由Nicolai介绍<a href=\"https://slides.nipafx.dev/patterns/2023-05-20-28hjava/#/\">面向数据的Java编程（21）</a>\"。与<a href=\"https://www.linkedin.com/in/gavin-bierman-a0173075/\">Gavin Bierman</a>\"聊模式匹配，由Nicolai主持。与Nicolai讨论JEP 451（<a href=\"https://openjdk.org/jeps/451\">代理动态加载禁用准备</a>\"）以及JEP Draft 8305968（<a href=\"https://openjdk.org/jeps/8305968\">完整性和强封装</a>\"）。与<a href=\"https://www.linkedin.com/in/ron-pressler-a279032/\">Ron Pressler</a>\"聊平台完整性（JEP Draft 8305968）、 JEP 445（<a href=\"https://openjdk.org/jeps/445\">未命名类和实例主方法预览</a>\"）以及JEP 453（<a href=\"https://openjdk.org/jeps/453\">结构化并发预览</a>\"），由Nicolai主持。Ana发表“与Java共成长”的演讲。和Ana一起玩<a href=\"https://bytelegend.com/\">Byte Legend</a>\"。Sharat介绍Java现状以及社区的重要性。与<a href=\"https://www.linkedin.com/in/prpatel/\">Pratik Patel</a>\"、<a href=\"https://www.linkedin.com/in/aboullaite/\">Mohammed Aboullaite</a>\"、<a href=\"https://www.linkedin.com/in/vsubramaniam/\">Venkat Subramaniam</a>\"、<a href=\"https://www.linkedin.com/in/aalmiray/\">Andres Almiray</a>\"、<a href=\"https://www.linkedin.com/in/ixchelruiz/\">Ixchel Ruiz</a>\"和<a href=\"https://www.linkedin.com/in/vincentmayers/\">Vincent Mayers</a>\"进行圆桌讨论，由Sharat主持。与<a href=\"https://www.linkedin.com/in/briangoetz/\">Brian Goetz</a>\"聊Valhalla项目，重点是如何在语言中显示值、基本类型和空值，由Nicolai主持。对话<a href=\"https://www.linkedin.com/in/gunnar-morling-2b44b7229/\">Gunnar Morling</a>\"，由Nicolai主持。由Nicolai介绍<a href=\"https://slides.nipafx.dev/java-next/2023-05-20-28hjava/#/\">Java Next</a>\"。与Nicolai一起玩Slay the Spire（用Java编写）并探索<a href=\"https://alexdriedger.github.io/SlayTheSpireModding/docs/play-with-mods.html\">modding</a>\"。由Nicolai介绍“<a href=\"https://slides.nipafx.dev/project-amber/2023-05-20-28hjava/#/\">Amber项目：Java问题的SolutionFactory</a>\"”。由Nicolai介绍<a href=\"https://slides.nipafx.dev/openjdk-features/2023-05-20-28hjava/#/\">从Idea到IDE</a>\"。由Nicolai主持的“随便问”环节。Nicolai致闭幕词。</p><p>&nbsp;</p><p>这次特别的活动在Java <a href=\"https://www.youtube.com/java\">YouTube</a>\"频道上进行了直播。</p><p>&nbsp;</p><p></p><h4>开发者调查</h4><p></p><p></p><p><a href=\"https://www.azul.com/\">Azul</a>\"<a href=\"https://foojay.io/today/state-of-java-survey/\">推出</a>\"了<a href=\"https://survey.alchemer.com/s3/7354395/F1\">Java现状调查</a>\"，涉及的领域包括：OpenJDK发行版及开发者正在使用的Java版本；基于Java的基础架构和语言；在公有云上运行的Java应用程序。调查将于2023年6月15日结束。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/05/java-news-roundup-may22-2023/\">https://www.infoq.com/news/2023/05/java-news-roundup-may22-2023/</a>\"</p>",
    "publish_time": "2023-06-07 10:32:44",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "eBay和Lastminute采用契约测试来驱动架构演进",
    "url": "https://www.infoq.cn/article/U8walzaYhwOZQzsVypVj",
    "summary": "<p>lastminute.com<a href=\"https://technology.lastminute.com/impacts-of-contract-tests-in-a-microservice-architecture/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU2NzY5MDEsImZpbGVHVUlEIjoicTZUUXc4VzROWjRiSEZ1aCIsImlhdCI6MTY4NTY3NjYwMSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo1MDA3OTEyfQ.iF27aHrbAk8JpZZLFE2IY6CmxpCgFJjsXHnJH95v7Rg\">采用契约测试来降低系统级集成测试所带来的复杂性</a>\"，并改进反馈周期和开发过程。eBay也采用契约测试来帮助其内部进行<a href=\"https://tech.ebayinc.com/engineering/api-evolution-with-confidence-a-case-study-of-contract-testing-adoption-at-ebay/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU2NzY5MDEsImZpbGVHVUlEIjoicTZUUXc4VzROWjRiSEZ1aCIsImlhdCI6MTY4NTY3NjYwMSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo1MDA3OTEyfQ.iF27aHrbAk8JpZZLFE2IY6CmxpCgFJjsXHnJH95v7Rg\">API演化</a>\"，并为客户端团队提供支持。</p><p></p><p>在分布式系统（如微服务架构）中，应用程序服务使用RPC（远程过程调用）风格的请求或异步消息进行交互。测试这类系统的常用方法是使用系统测试（端到端集成测试），这通常需要将整个系统部署在测试环境中。</p><p></p><p>lastminute.com的软件工程师<a href=\"https://www.linkedin.com/in/ivan-dell-oro-60170880/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU2NzY5MDEsImZpbGVHVUlEIjoicTZUUXc4VzROWjRiSEZ1aCIsImlhdCI6MTY4NTY3NjYwMSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo1MDA3OTEyfQ.iF27aHrbAk8JpZZLFE2IY6CmxpCgFJjsXHnJH95v7Rg\">Ivan Dell'Oro</a>\"指出集成/系统测试所带来的挑战：</p><p></p><blockquote>在过去，我们通过集成测试来验证两个微服务之间的消息交换，由于多种原因会导致测试失败。为避免阻碍开发过程，我们选择忽略这些测试。结果是它们被忽视了好几个月，当一边的系统发生变化，两边的CI管道却都是绿色的：通常，当生产环境中出现了故障，应该是契约出现了错误。</blockquote><p></p><p></p><p>eBay团队也表示：</p><p></p><blockquote>对于eBay的通知平台团队来说，我们面临的另一个挑战是，我们的API被许多领域团队调用。在演进服务API的同时保持与所有消费者端的兼容性是我们的一个基本原则。</blockquote><p></p><p></p><p>这两个团队都一直在寻找能够让测试变得不那么脆弱和更快速的方法，目标是改善开发人员/测试人员的体验，缩短反馈周期，加快价值交付的速度，同时支持内部契约的演进，例如API规范和消息schema。</p><p></p><p>最后，经过一些研究和实验，他们采用<a href=\"https://martinfowler.com/bliki/ContractTest.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU2NzY5MDEsImZpbGVHVUlEIjoicTZUUXc4VzROWjRiSEZ1aCIsImlhdCI6MTY4NTY3NjYwMSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo1MDA3OTEyfQ.iF27aHrbAk8JpZZLFE2IY6CmxpCgFJjsXHnJH95v7Rg\">契约测试</a>\"作为验证服务间交互正确性的主要方法。lastminute.com发现，这给他们的微服务架构和交付过程带来了积极的影响，与标准的系统级测试相比，测试执行时间大大缩短了。eBay使用契约测试来验证其平台中的集成点，支持通过写作来确保内部API可以在不出现不兼容问题的情况下演进。</p><p></p><p>lastminute.com已经使用<a href=\"https://docs.pact.io/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU2NzY5MDEsImZpbGVHVUlEIjoicTZUUXc4VzROWjRiSEZ1aCIsImlhdCI6MTY4NTY3NjYwMSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo1MDA3OTEyfQ.iF27aHrbAk8JpZZLFE2IY6CmxpCgFJjsXHnJH95v7Rg\">Pact</a>\"（一个<a href=\"https://martinfowler.com/articles/consumerDrivenContracts.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU2NzY5MDEsImZpbGVHVUlEIjoicTZUUXc4VzROWjRiSEZ1aCIsImlhdCI6MTY4NTY3NjYwMSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo1MDA3OTEyfQ.iF27aHrbAk8JpZZLFE2IY6CmxpCgFJjsXHnJH95v7Rg\">客户端驱动</a>\"的契约测试工具）对微服务之间的RPC交互进行了契约测试，并在随后将其<a href=\"https://technology.lastminute.com/contract-testing-asynchronous-messaging-pact-junit-mockk/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU2NzY5MDEsImZpbGVHVUlEIjoicTZUUXc4VzROWjRiSEZ1aCIsImlhdCI6MTY4NTY3NjYwMSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo1MDA3OTEyfQ.iF27aHrbAk8JpZZLFE2IY6CmxpCgFJjsXHnJH95v7Rg\">扩展</a>\"到服务间的异步交互（通过RabbitMQ代理交换消息）上。</p><p></p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/43/8e/434fb712d4cce435f7c2e41f284b898e.png\" /></p><p></p><p></p><p></p><p>图片来源：<a href=\"https://technology.lastminute.com/contract-testing-asynchronous-messaging-pact-junit-mockk/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU2NzY5MDEsImZpbGVHVUlEIjoicTZUUXc4VzROWjRiSEZ1aCIsImlhdCI6MTY4NTY3NjYwMSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo1MDA3OTEyfQ.iF27aHrbAk8JpZZLFE2IY6CmxpCgFJjsXHnJH95v7Rg\">https://technology.lastminute.com/contract-testing-asynchronous-messaging-pact-junit-mockk/</a>\"</p><p></p><p>eBay的团队研究了基于<a href=\"https://www.openapis.org/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU2NzY5MDEsImZpbGVHVUlEIjoicTZUUXc4VzROWjRiSEZ1aCIsImlhdCI6MTY4NTY3NjYwMSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo1MDA3OTEyfQ.iF27aHrbAk8JpZZLFE2IY6CmxpCgFJjsXHnJH95v7Rg\">OpenAPI</a>\"规范的API定义<a href=\"https://semver.org/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU2NzY5MDEsImZpbGVHVUlEIjoicTZUUXc4VzROWjRiSEZ1aCIsImlhdCI6MTY4NTY3NjYwMSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo1MDA3OTEyfQ.iF27aHrbAk8JpZZLFE2IY6CmxpCgFJjsXHnJH95v7Rg\">语义版本</a>\"控制，但得出的结论是，版本控制本身不足以解决系统测试的脆弱性。他们将<a href=\"https://cucumber.io/docs/bdd/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU2NzY5MDEsImZpbGVHVUlEIjoicTZUUXc4VzROWjRiSEZ1aCIsImlhdCI6MTY4NTY3NjYwMSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo1MDA3OTEyfQ.iF27aHrbAk8JpZZLFE2IY6CmxpCgFJjsXHnJH95v7Rg\">BDD</a>\"（行为驱动开发）视为描述API消费者需求的一种方式，生产者和消费者团队协作编写所有需求并使其可执行。事实证明，在采用这种方法时，API提供方需要在客户需求发生变化时捕获和更新客户需求，而这已被证明是有问题的。</p><p></p><p>最后，他们发现了契约测试，生产者和消费者团队可以在他们的测试用例中使用Mock（或存根）来独立地维护测试套件。</p><p></p><p>他们对<a href=\"https://spring.io/projects/spring-cloud-contract?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU2NzY5MDEsImZpbGVHVUlEIjoicTZUUXc4VzROWjRiSEZ1aCIsImlhdCI6MTY4NTY3NjYwMSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo1MDA3OTEyfQ.iF27aHrbAk8JpZZLFE2IY6CmxpCgFJjsXHnJH95v7Rg\">Spring Cloud Contract</a>\"和Pact进行了评估，最终选择了后者，因为后者可以更直接地使用schema，并有更好的跨团队交互支持。他们对Spring Cloud Contract和Pact进行了评估，最终选择了后者，因为后者可以更直接地使用schema，并有更好的跨团队交互支持。他们对<a href=\"https://pactflow.io/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU2NzY5MDEsImZpbGVHVUlEIjoicTZUUXc4VzROWjRiSEZ1aCIsImlhdCI6MTY4NTY3NjYwMSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo1MDA3OTEyfQ.iF27aHrbAk8JpZZLFE2IY6CmxpCgFJjsXHnJH95v7Rg\">Pactflow</a>\"（一款商业版Pact产品）和内部CI/CD工具进行了无缝集成，并创建了一个专门的开发者门户，用于配置新的契约测试。</p><p></p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/c9/5e/c962656d1ccfaf5fb6719b4cdc12e85e.png\" /></p><p></p><p></p><p>图片来源：<a href=\"https://tech.ebayinc.com/engineering/api-evolution-with-confidence-a-case-study-of-contract-testing-adoption-at-ebay/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU2NzY5MDEsImZpbGVHVUlEIjoicTZUUXc4VzROWjRiSEZ1aCIsImlhdCI6MTY4NTY3NjYwMSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo1MDA3OTEyfQ.iF27aHrbAk8JpZZLFE2IY6CmxpCgFJjsXHnJH95v7Rg\">https://tech.ebayinc.com/engineering/api-evolution-with-confidence-a-case-study-of-contract-testing-adoption-at-ebay/</a>\"</p><p></p><p>Dell'Oro强调，契约测试本身并不能完全替代系统级集成测试。契约测试旨在验证服务之间数据交换的正确性，但服务级集成测试会同时执行业务逻辑和错误处理，确保整个流程/数据流的正确性和弹性。</p><p></p><p>【声明：本文由InfoQ翻译，未经许可禁止转载。】</p><p></p><p>查看英文原文：<a href=\"https://www.infoq.com/news/2023/05/ebay-contract-testing-evolution/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU2NzY5MDEsImZpbGVHVUlEIjoicTZUUXc4VzROWjRiSEZ1aCIsImlhdCI6MTY4NTY3NjYwMSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo1MDA3OTEyfQ.iF27aHrbAk8JpZZLFE2IY6CmxpCgFJjsXHnJH95v7Rg\">https://www.infoq.com/news/2023/05/ebay-contract-testing-evolution/</a>\"</p><p></p><p>延伸阅读：</p><p><a href=\"https://www.infoq.cn/article/2007/11/tdd-or-tdr\">测试驱动开发？还是测试驱动需求？</a>\"</p><p><a href=\"https://xie.infoq.cn/article/7cacb03335919b96614c8f992\">软件界旷世之架：测试驱动开发（TDD）之争</a>\"</p>",
    "publish_time": "2023-06-07 11:03:54",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "函数式编程的后期架构",
    "url": "https://www.infoq.cn/article/ScKjJ9U52AaKNBaxFBJQ",
    "summary": "<p>许多软件架构方法都是假设该架构在一开始时就进行了规划。但不幸的是，以这种方式规划的架构之后很难更改。函数式编程可以帮助我们实现松耦合，从而可以将预先的规划保持在最低限度，并可以在之后更改架构决策。</p><p></p><p>Michael Sperber在<a href=\"https://www.oop-konferenz.de/\">OOP 2023 Digital</a>\"大会上谈到了软件架构和函数式编程。</p><p></p><p>Sperber给出了一个将系统代码划分为不同构建块的例子。这是一种特别重要的架构决策，可以单独处理不同的构建块，也可以与不同团队一起协作。实现这一点的一种方法是对粗粒度的构建块（有界上下文）使用领域驱动设计（DDD）：</p><p></p><blockquote>DDD是指，我们应该在开始时就通过上下文映射来识别有界上下文。但是，如果上下文之间的界限设置错了，我们就会丧失很多优势。我们会把它们搞错，至少会有一点点错误，然后之后就很难更改了。</blockquote><p></p><p></p><p>根据Sperber的说法，与面向对象编程（OOP）相比，函数式编程能够支持后期架构并减少耦合。</p><p></p><p>Sperber认为，为了推迟宏观架构决策，我们必须始终保持解耦。他说，函数式编程中的组件本质上仅是数据类型和函数，这些函数在没有可变状态的情况下工作。与典型的OO（面向对象）组件相比，这使得依赖关系更显式化，并且耦合更松散。这反过来又使我们能够构建独立于宏体架构的函数，Sperber说到。</p><p></p><p>Sperber明确表示，函数式编程并不“仅仅是没有可变状态的OOP”。它有自己的领域建模、抽象和软件构建方法和文化。我们在OO（面向对象）项目中可以通过采用不变性来获得一些好处。正如Sperber所解释的那样，要获得所有这些，我们需要更深入地研究，并使用适当的函数式语言：</p><p></p><p></p><blockquote>函数式架构广泛使用高级抽象来实现可重用的组件，更重要的是，提供可预测未来的灵活领域模型。在探索和开发这些领域模型时，函数式程序员经常利用数学提供的丰富词汇表。由此产生的抽象从根本上说是由函数语言所提供的高级抽象设施实现的。</blockquote><p></p><p></p><p>InfoQ采访了<a href=\"https://www.linkedin.com/in/sperber/\">Michael Sperber</a>\"，探讨了当前的架构技术工具箱是如何使我们更倾向于做出糟糕的决策，而这些决策在以后很难更改，以及如何解决这个问题。</p><p></p><p>InfoQ：在项目开始时，定义宏观架构的挑战有哪些？</p><p></p><blockquote>MichaelSperber：软件架构的一个流行定义是，它是以后很难更改的决策。在开始时就这样做意味着是在你掌握的信息最少时做决策。因此，这些决策很有可能是错误的。</blockquote><p></p><p></p><p>InfoQ：在上下文之间移动边界变得如此困难的原因是什么？</p><p></p><blockquote>Sperber：在架构界，我们似乎忘了如何在有界上下文或单体中实现模块化，这就是为什么会有“模块化”这个新术语的原因，这意味着常规单体在默认情况下是非模块化的，其内部是紧密耦合的。</blockquote><p></p><p></p><p>InfoQ：所以你的意思是说我们不知道如何在单体中实现松耦合？</p><p></p><blockquote>Sperber：是的。这是因为OO（面向对象）架构的基础是使用可变状态进行编程，即在适当的位置更改对象。这些状态变化导致了不可见的依赖关系，这些依赖关系很难被看见，并且会使构建块纠缠在一起。这不仅会影响项目的功能，还会影响其他质量目标。</blockquote><p></p><p></p><p>InfoQ：你能举个例子吗？</p><p></p><blockquote>Sperber：假设我们选择并行来作为实现高性能的策略：我们需要选择聚合根，并通过互斥来保护对这些根的访问。这是一项乏味的工作，容易出错，也难以快速完成，并且会极大地增加耦合。</blockquote><p></p><p></p><p>InfoQ：如果架构师和开发人员想改进他们做出架构决策的方式，你有什么建议能给到他们？</p><p></p><blockquote>Sperber：即使我们不能在项目中使用函数式语言，也可以尝试一下函数式编程的基础知识，感受一下其中的差异和机会。如果你是FP（函数式编程）的新手，推荐你采用“<a href=\"https://htdp.org/\">如何设计程序</a>\"”作为入门指南，如何你是德语使用者，则推荐<a href=\"https://www.deinprogramm.de/\">DeinProgramm</a>\"。另外推荐两本关于函数编程软件构建的书：<a href=\"https://pragprog.com/titles/swdddf/domain-modeling-made-functional/\">Scott Wlaschin：领域建模函数化</a>\"&nbsp;<a href=\"https://algebradriven.design/\">Sandy Maguire：代数驱动设计</a>\"</blockquote><p></p><p></p><p>原文链接：<a href=\"https://www.infoq.com/news/2023/04/late-arch-functional-programming/\">https://www.infoq.com/news/2023/04/late-arch-functional-programming/</a>\"</p><p></p><p>声明：本文为InfoQ翻译，未经许可禁止转载。</p><p></p><p>延伸阅读：</p><p><a href=\"https://www.infoq.cn/article/2017/11/era-functional-program-language\">函数式编程语言时代已经来临</a>\"</p><p><a href=\"https://www.infoq.cn/article/2009/03/fp-doesnt-catchon\">为什么函数式编程没有流行起来？</a>\"</p><p><a href=\"https://www.infoq.cn/article/2014/03/oo-functional-programming\">面向对象设计原则与函数式编程</a>\"</p>",
    "publish_time": "2023-06-07 11:23:27",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "加速 AI 训练，如何在云上实现灵活的弹性吞吐？",
    "url": "https://www.infoq.cn/article/LdmWVpaBppqBESJokQoN",
    "summary": "<p></p><blockquote>AI 已经成为各行各业软件研发的基础，带来了前所未有的效率和创新。今天，我们将分享苏锐在 AWS 量化投研行业活动的演讲实录，为大家介绍 JuiceFS 在 AI 量化投研领域的应用经验，也希望为其他正在云上构建机器学习平台，面临热点数据吞吐不足的企业提供一些启发。</blockquote><p></p><p></p><h2>1. 背景</h2><p></p><p>JuiceFS 最初是为了解决互联网行业在云上存储大量数据时遇到的问题。随着 AI 技术的发展，一些使用 AI 进行研发的企业开始关注到 JuiceFS，其中包括量化私募机构，有新兴的量化机构，他们从一开始就在云上构建自己的投研平台，也有一些头部老牌基金，他们正从机房开始向云延伸。</p><p></p><p>量化投研是一种利用数学模型对大量市场数据进行分析和挖掘，以获取市场行情的规律和趋势，并进行投资决策的投研方法。随着人工智能技术的快速发展，机器学习和深度学习等算法已广泛应用于量化投研，成为金融行业中率先应用人工智能的领域之一。下面这张图显示了量化机构每天的任务数量。黄线代表任务数量的变化情况。我们可以看到任务数量在上班时间内明显增多，而下班时间则明显减少。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/44/444116f3ab20d16a1fa503970e197123.png\" /></p><p>目前，大部分量化私募使用的 IT 资源都是在机房内，CPU 核数、内存和存储等都是固定的。在这种情况下，当面临波动的任务负载时，可能会出现以下问题：</p><p>机房提供的是固定算力，在低峰期会有过剩的资源，而在高峰期研究员则需要排队等待，这会导致资源的浪费和效率的降低。研究员希望他们的想法能够尽快得到处理，公司也希望最大限度地利用资源。突然出现的任务负载增加可能会导致计算资源不足。例如，当研究员有灵感时或者在验证新的论文时，需要进行大规模的验证。此外，当招募新员工或高峰期到来时，计算资源不足也会成为一个问题。由于机房的扩容周期通常为三个月，而硬件缺货时甚至需要等待六个月，供应链的周期很难满足业务需求。</p><p></p><p>弹性计算是解决上述这些问题的最简单方法。</p><p></p><h2>2. 弹性计算的优势</h2><p></p><p>在过去的两年中，已经注意到越来越多的量化私募从机房开始转向云端。对于直接在云端构建研究平台的机构，可以直接在 AWS 这样的公有云上进行部署。这样，所有的资源都可以轻松地使用，只需简单地点击鼠标即可启动或关闭，从而大大缩短 time to market 的时间。不再需要等待硬件选型和购买的时间，而且所有的计算资源都可以根据需要进行弹性使用，无论需要多少算力都可以灵活分配。</p><p></p><p>然而，对于那些已经有一定历史的量化私募机构而言，它们已经建设了大量的 IDC 设施，因此不可能将这些全部放弃，然后转向公有云。因此，它们需要先充分利用这些 IDC 设施，并将其与云计算结合起来。</p><p></p><p>混合云可能是更多机构要选择的方案。</p><p></p><p>机房内现有的资产可以作为一个固定算力，满足平均或低峰期的算力需求。增量部分可以在云上进行扩展，使用的资源按秒计费。通过这种方式，机房内已有的资产也能够得到更好地利用。</p><p></p><p>弹性算力还有一个重要好处，就是可以更快地使用最新的硬件设备。相比之下，如果自己购买硬件，可能需要等待 3 年或 5 年的折旧期限，这使得我们难以跟上硬件的更新换代。弹性算力的好处也在于可以帮助我们更快地跟上技术的发展。</p><p></p><h2>3. 弹性环境中，存储的痛点</h2><p></p><p>计算只是简单的处理过程，而数据则需要进行持久化，因此存储通常比计算更难弹性化。在弹性计算过程中，需要考虑如何保留已经处理的数据，以便后续使用。同时，在扩展算力时，需要确保存储能够支持相应的需求，并具备高可用性和可扩展性。否则，可能会面临数据丢失或性能下降等问题。</p><p></p><h3>痛点一：性能、成本和效率如何取舍？</h3><p></p><p>在进行存储选型时，企业通常会考虑三个因素：性能、成本和效率。这些因素在存储系统的设计中相互影响。在存储选型时需要综合考虑不同方案的优缺点，以找到最适合企业需求的方案。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8f/8faa5ce8a220bd6bd172ac249248a3ca.png\" /></p><p></p><p>在模型训练阶段，用户通常会追求高性能的存储方案。例如，机房里提供全闪存的文件存储，AWS 上提供 FSx for Lustre 等产品都会选择更高级的硬件，这些方案都能提供出色的吞吐性能。然而，存储成本也较高，因此需要寻找低成本的全量数据归档存储方案。在机房里，一些高密度存储方案也可以降低成本，在云上会选择使用 Amazon S3 等对象存储服务。</p><p></p><p>为了追求成本和性能，用户在机房和云上都会构建出两套异构的存储。一套低成本的存储系统用于全量归档，另一套高性能的存储则用于模型训练。这种多套存储的环境也带来了管理数据迁移、数据冷热等问题，尤其是在多个区域、多个云环境下，这种情况会变得更加复杂。</p><p></p><p>因此，我们需要有效的解决方案，既能快速、省钱，同时又能高效地管理存储。</p><p></p><h3>痛点二：存储系统扩容慢</h3><p></p><p>运维过存储系统的人深知存储系统扩容的缓慢。存储系统本质上是一组硬盘，用于存储数据。当需要增加存储容量时，通常的想法增加硬盘。然而，在分布式存储系统中，扩容并不是这么简单的过程，需要对所有数据进行重新平衡，以便更有效地管理存储系统中的所有数据。此外，存储硬件的性能是有限的，如果一部分性能用于数据迁移，就会影响线上业务的服务能力。</p><p></p><p>举一个简单的例子，我们将一个巨大的存储集群缩小为仅三台机器，每台机器配备两个硬盘，存储一些数据，如下方这个图示。在分布式系统中，为了确保数据的安全，我们通常会将数据复制多份，通常存储三份。下图，圆圈、三角形和菱形各代表一个文件，在分布式架构中，每个图形都有 3 份。</p><p><img src=\"https://static001.geekbang.org/infoq/4c/4c6d1ac407d83d364735de3e3a243225.png\" /></p><p>（分布式存储-三备份）</p><p></p><p>当存储容量不足时，需要加入新的机器，以扩展存储空间。然而，新的数据并不会只存储在新的机器上，而是必须对现有数据进行重平衡以更有效地管理所有数据。在这种情况下，数据会使用一套算法从旧位置移动到新位置。同时，硬盘提供的能力是有限的，如果我们将一部分固定能力用于数据迁移，则无法为线上业务提供服务。</p><p><img src=\"https://static001.geekbang.org/infoq/3d/3d88e5261e975409a66c05f71c4dac0b.png\" /></p><p>（存储扩容-数据再平衡）</p><p></p><p>运维工程师们深知存储集群扩容的挑战，选择何时迁移和股票投资中择时一样让人难以预测。如何平稳地搬家，以及如何在不影响线上业务的情况下避免事故，都是一项复杂的任务。仅仅靠自动机制很难完成好，因为业务负载的情况是难以预知的，通常要老司机手动挡干预。除了扩容，当集群中出现了硬盘损坏的情况，就要将其中的数据转移至新的硬盘中，同样要确保每份数据存储了三份。因此，即便不进行扩容，大规模的存储集群仍然需要每天都进行数据搬迁。</p><p></p><p>在这种困难的存储系统扩容条件下，当新的算法、研究员和灵感出现时，存储通常会成为拖累。</p><p></p><h3>痛点三：可用容量很多，性能不足了，为什么？</h3><p></p><p>之前提到的是容量不足导致需要扩容，但是在量化私募这个领域中，我们发现大部分的客户需要扩容的原因并不是容量不足，而是由于吞吐性能不足。</p><p></p><p>硬盘提供的性能是有限的，当现有硬盘的性能跑到极限时，就必须购置新的硬盘来满足性能需求。许多量化客户，虽然他们的存储容量还有很大的富余，但为了满足新的性能需求，他们仍需要扩容。</p><p></p><p>举个例子，假设现在需要读取的数据存储在下图圆圈所示范围，要求性能非常高，那么圆圈所在硬盘的性能已经达到了极限；接着另一个研究员需要读取同样存储在这块硬盘上的三角形，但这块硬盘的性能也已经到了极限，因此读取三角形数据的速度一定会很慢。</p><p><img src=\"https://static001.geekbang.org/infoq/dc/dcad788c8dd19e0ef325c3a5564e8a5b.png\" /></p><p>（性能不足引发的存储扩容，造成存储空间闲置）</p><p></p><p>为了实现增加性能，需要将三角的数据迁移到新的硬盘上，就是图上没有标红的硬盘。</p><p></p><p>为什么这个问题在量化私募行业特别明显呢？因为我们的行业最原始的数据可能来自于市场数据。以 A 股的数据为例，过去 10 年的数据加在一起才 240G，而今天硬盘容量都好几 TB 一块，这就意味着我们要处理的原始数据实际上是有限的，可能最多也只有几十 TB 的规模。但这几十 TB 的原始数据可能被数十到数百名研究员共享，他们需要同时读取同一份数据，这导致了性能瓶颈的出现。这是量化行业使用数据的一个特点，即由于数据的共享和读取需求，容量充足但性能不足的情况很常见。这也是最开始有量化基金找到 JuiceFS 这个产品去帮他们解决的一个问题。</p><p></p><p>因此，对于这类会产生热点数据的场景，即对计算的弹性要求更加极致时，匹配性能可伸缩的存储，可以更好地实现整体的性能和成本得到的平衡。</p><p></p><h2>4.JuiceFS 如何实现性能扩展 &amp; 性价比</h2><p></p><p>在2017年，当我们开始研发 JuiceFS 时就决定要为云环境设计。我们注意到当时市场上的所有文件存储产品都是在 2005 年前后或更早设计的，甚至还有一些是在 90 年代设计的。这些产品仍然广泛地用于量化私募行业中。由于我们的基础设施的基础资源环境已经发生了变化，因此在开发新产品时，必须跟上我们现在所使用的环境的发展趋势。</p><p><img src=\"https://static001.geekbang.org/infoq/88/88a32efa86b42faffafe267c2565a48f.png\" /></p><p>（JuiceFS 企业版架构图）</p><p></p><p>在这张图中，三个虚线框代表了文件系统的三个核心组件，元数据引擎、数据引擎和客户端，它们一起实现了文件系统的关键功能。</p><p></p><p>文件系统可以简单地理解为一种用于组织、管理和访问文件和目录的技术。比如我们电脑上使用的硬盘，文件系统提供了一种与它的交互方式，即通过文件和目录（文件夹）的形式来访问和管理存储在硬盘物理介质上的数据。</p><p></p><p>例如，在 Linux 中一块硬件格式化文件系统后，挂载到一个目录上，看到的是一个目录树，其中包含目录、文件夹和文件。每个文件都可以设定权限，并具有时间戳，记录了创建时间、上次修改时间等，称为元数据。它们存放在上图左下角的虚线框内所示的 Juicedata 自研元数据引擎中，这个引擎很大程度上决定了文件系统的性能。</p><p></p><p>右下角虚线框代表文件内容的存储。这部分是 20 年前存储系统最重要的功能之一，需要管理大量机器和其中的硬盘。例如，在 HDFS 中的 DataNode，Ceph 中的 RADOS，Lustre 中也有 ChunkServer，这些服务需要完成例如数据分块、存储、副本管理、迁移等，很复杂。在云环境中，S3 已经将这个问题解决得非常出色。因此，当我们决定在云上重新构建一个文件存储系统时，我们不再需要管理大量硬盘。相反，我们可以站在 S3 的基础之上，为其增加更多的功能。在 JuiceFS 的设计中，用户存储在 JuiceFS 文件系统中的所有文件内容直接存储在用户自己的 S3 Bucket 中。</p><p></p><p>图片上方展示的是一个客户端访问系统，JuiceFS 提供了最标准的 POSIX 接口，并支持像 HDFS 等不同的 API 互通。这让开发者在编写程序时更加便利，可以根据自己的需求选择最适合的接口。此外，我们还提供了性能扩展功能，以满足更高的性能需求。</p><p></p><p>因为 S3 提供的性能和语义不足以满足高性能的模型训练或投研分析的需求，所以我们需要一种中间解决方案来弥补这些不足。例如，PyTorch 需要的是一个 POSIX 文件系统，但 S3 只提供HTTP API。</p><p></p><p>JuiceFS 就是这样一种解决方案，它可以将数据存储在 S3 中，同时提供 POSIX 和其他 API，以满足不同应用的需求，并通过内部优化来提供最佳的性能。</p><p></p><p>要解决上文提到量化机构面临热点数据吞吐不足的问题，需要介绍JuiceFS的缓存功能。当用户的 GPU 计算节点需要读取数据时，所有数据的访问都会首先从 S3 中拉取一次，然后存储在JuiceFS 缓存中。在以后的访问中，所有数据都可以在缓存中被命中，从而获得与全闪存文件存储相当的性能。JuiceFS 的缓存层可动态伸缩，为用户提供可弹性扩展的吞吐性能。此外JuiceFS 的缓存层可以与计算节点上的高性能存储形成一个分层的多级缓存，进一步提高性能。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/3c/3ca891c4eed1f773fc253709217ab940.png\" /></p><p>（JuiceFS 企业版缓存）</p><p></p><p>总结一下，使用JuiceFS，数据都可以保存在低成本的 S3 中，降低了存储成本；同时， 通过一个动态的缓存层为 S3 提供了加速，还实现了吞吐性能的弹性扩展。</p><p></p><p>如果热点数据仍然存储在有限数量的 NVMe 盘中，扩大整个缓存层的规模实际上并没有太大的意义。为了解决数据热点问题，可以使用 cache 分组的方式，让热点数据在每个组中都得到存储。用户只需要根据需求建立多个缓存组，通过简单的配置调整即可在短时间内完成，非常有效地解决了数据热点问题。</p><p><img src=\"https://static001.geekbang.org/infoq/b6/b63b32357c7bf872b79951c4f6d50219.png\" /></p><p>（JuiceFS 企业版 缓存分组）</p><p></p><p>用户可以设置自己的 cache group，或者为每个团队设置自己的 cache group，这样可以扩展热点数据的性能，并且整个系统的性能也可以基本上线性扩展。此外，如果用户在下班后关闭了这些cache group，就可以避免额外的成本。</p><p></p><p>对于那些仍然拥有机房资产的量化私募机构，可以使用混合云部署方案，数据仍然存储在 S3 中，但可以预热到机房中的 cache group 进行计算加速。</p><p><img src=\"https://static001.geekbang.org/infoq/dc/dcb8f47cf5f93f90f531688df1fdc373.png\" /></p><p>（JuiceFS 混合云部署架构图）</p><p></p><p>JuiceFS 可以在云环境和机房环境中使用两个 JuiceFS 实例进行数据复制，而这个过程对用户来说是透明的，无需进行额外的操作。JuiceFS 自动将热数据存储在高性能的 cache 层中，这意味着不论用户在机房还是云上执行任务，都可以快速访问热数据，从而解决了现有资产和云上弹性部署的混合使用问题。</p><p>相关阅读：<a href=\"https://www.infoq.cn/article/owwaIZuU262HfUFFy8pd\">乾象投资：基于 JuiceFS 构建云上量化投研平台</a>\"现场视频（03: 07 开始）：https://www.laohu8.com/m/live/1762844022350878</p><p></p><h3>关于作者</h3><p></p><p>苏锐, Juicedata 合伙人，作为 1 号成员参与创建 JuiceFS，一直深度参与在开源社区中支持开发者使用 JuiceFS。</p>",
    "publish_time": "2023-06-07 11:48:17",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Ruby 到底怎么了？",
    "url": "https://www.infoq.cn/article/S4OwR90G5vcViPzeYSdD",
    "summary": "<p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/jnxbfeksmvpfjqgd135p\">不要学习“网红”编程语言</a>\"</p><p>&nbsp;</p><p>Ruby 和 Ruby on Rails 在早期就出现在 Web 开发领域了。然而，虽然现在 JavaScript 和 Python 都占据了主导地位，Ruby 还是仍然占有一席之地。</p><p>&nbsp;</p><p>如果你已经在网络开发领域摸爬滚打了足够长的时间，你就会目睹许多语言和框架的兴起与衰落。Ruby 及其 Web 应用框架 Ruby on Rails 是最耀眼的明星。2008 年，Rails 推出仅仅三年后，该杂志就提出了这个框架是否会成为 <a href=\"https://www.infoworld.com/article/2633881/ruby-on-rails-rolls-onward-and-upward.html'\">Java 的继承者</a>\"的问题，指出它将 Web 开发中的繁重工作挤出，并且与 Ruby 相关的初创公司看到了大量的风险资本投资。</p><p>&nbsp;</p><p>15 年之后，认为 Ruby 会取代 Java 的想法看起来很荒谬。<a href=\"https://www.tiobe.com/tiobe-index/\">TIOBE 索引</a>\"可以跟踪各种语言的查询，而 Ruby 在我最后一次查看的时候，排名是第 16 位。它位于 MatLab 和 Object Pascal 之间。（Java 位列第四，令人敬佩。）Filted 是一家提供虚拟环境的公司，求职者可以在虚拟环境的世界里，让未来的雇主看到他们的技能。这家公司甚至连 <a href=\"https://www.filtered.ai/blog/the-top-8-programming-languages-for-filtered-hiring-assessments\">Ruby 都不在它的八大语言中</a>\"。他们表示，雇主在 Ruby 上的测试时间仅为 0.5%。</p><p>&nbsp;</p><p>但是，现在还不能将 Ruby 与 FORTRAN 或 ALGOL 一起放在博物馆里。我与 Ruby 的现任和前任程序员进行了访谈，以了解这门语言的兴起和衰落。他们与大家分享了他们对于 Ruby 是怎样和为何被排除在最流行语言之列的观点，以及为何他们觉得 Ruby 还有前途。</p><p>&nbsp;</p><p></p><h2>Ruby 最辉煌的时候</h2><p></p><p>&nbsp;</p><p>Ruby 最初之所以如此受欢迎，有很多原因，但是最重要的一点是，Ruby 可以让开发速度更快、更容易，尤其是前端应用。这一点没有改变。“Ruby on rails 依然是一个很好的方法，可以让一支小型团队拥有大型团队的影响力。”《编程 Ruby 3.2》（Programming Ruby 3.2）的合著者 Noel Rappin 说，“这依然是从零到真正的有价值的产品的最快捷的途径。”</p><p>&nbsp;</p><p>“当涉及到为用户提供坚实的前端体验时，Ruby 一直是最好的语言，”BoutiqueSetup.net 的电子商务教练 Pulkit Bhardwaj 解释说，“它为最终用户提供了易用性，并提供了稳定、安全的体验。它还提供了一个实验的空间，因为 <a href=\"http://ruby-for-beginners.rubymonstas.org/your_tools/irb.html\">Interactive Ruby</a>\" 能够逐行提供即时的表达结果。”</p><p>&nbsp;</p><p>Ruby 一直以来都和一个强大的开源河区有着密切的关系。Kevin Trowbridge 是 Qwoted 的首席技术官，他认为，语言本身的性质与此有很大关系。“它是所有编程语言中最有文化的，”他说，意思是“它编写起来很简单，很容易读懂。这也是你拥有一个很强大的社区的原因，以及它的哲学，即它为产品、开发人员的生产力和幸福感而优化。”</p><p>&nbsp;</p><p>但是，这些优势并没有对 Ruby 和 Ruby on Rails 产生什么实质性的影响。在此期间，其他的语言和架构也没有停滞不前。Matthew Boeh，2006 年就开始了 Ruby 的开发，他说，“Rails 是在 Web 转型和发展的关键时期诞生的。它既受益于这种增长，也推动了这种增长，但它不会是唯一的成功故事，这是一个预料之中必然发生的事情。”</p><p>&nbsp;</p><p>Boeh 最近在 <a href=\"https://www.infoworld.com/article/3538428/what-is-typescript-strongly-typed-javascript.html\">TypeScript</a>\" 商店的 Lattice 担任高级软件工程师的工作。“你可以说 Ruby 是它自己成功的牺牲品，因为它的社区是近年来命令行复兴的重要推手，”他说，“在 21 世纪早期，它向那些从未听说过 Lisp 的人介绍了 REPL 驱动的开发，向那些会被 Perl 的 CPAN 吓跑的人介绍了包管理，向那些高度企业化的 Java 世界以外的人介绍了测试驱动的开发，诸如此类。这些都是当今桌上的筹码。但是它们都被 Ruby 爱好者普及和使用了。”</p><p>&nbsp;</p><p></p><h2>Ruby 的挑战者：JavaScript 和 Python</h2><p></p><p>&nbsp;</p><p>如果说现在有一种语言在 Ruby 曾经统治过的领域里占主导地位，那就是 JavaScript。只有当这种语言摆脱浏览器，接管世界其他地方时，这才成为现实。New Relic 的开发者关系部主任 Jemiah Sius 说：“随着 JavaScript 成长为全栈语言，工程师已经能够用一种语言甚至是共享代码库来构建前端、后端和移动项目。Ruby 很容易学习，而且有很高的安全标准，还有一个活跃的社区。但当有人想到全栈时，他们会想到 JavaScript——<a href=\"https://www.infoworld.com/article/3210589/what-is-nodejs-javascript-runtime-explained.html\">Node.js</a>\"，React，或任何他们喜欢的框架。”</p><p>&nbsp;</p><p>Qwoted 的 Trowbridge 指出，JavaScript 之所以能够承担起这一重任，因为这种语言已经从开发人员曾经鄙视的语言中得到了改进。事实上，随着时间的推移，它变得越来越像 Ruby 了。“浏览器供应商努力使其形式化、标准化、简化和增强，”他说，“它比以前的 JavaScript 好多了。”</p><p>&nbsp;</p><p>“目前形式的 JavaScript 生态系统在 2004 年是不可想象的，这不仅需要命令行的复兴，也需要 Web 平台的腾飞。”Lattice 的 Boeh 补充道。“你知道吗，从 1999 年到 2009 年，发布一个新版本的 JavaScript 标准花了整整十年的时间？<a href=\"https://www.infoworld.com/article/3654830/ecmascript-2022-blesses-class-elements-top-level-await.html\">我们现在每年都有一个</a>\"。Rails 在最后一个时期变得非常重要，在那个时期，即使不懂 JavaScript，也可以成为一个全栈开发人员。”</p><p>&nbsp;</p><p>与此同时，<a href=\"https://www.infoworld.com/article/3204016/what-is-python-powerful-intuitive-programming.htm\">Python</a>\" 已经主导了当今最热门的发展领域之一，即人工智能和机器学习。Bhardwaj 说：“Python 在科学界很受欢迎，因为他们可以比以往更快地建立模型和算法的原型，所以它比 Ruby 领先好几年。另一方面，Ruby 被认为执行缓慢，并未受到开发者的重视。”New Relic 的 Sius 也同意这一观点，他说：“当有人想到一种通用语言，可以创造从游戏到虚拟现实，到人工智能，再到机器学习的一切时，每个人都知道 Python 是最大的赢家。”</p><p>&nbsp;</p><p></p><h2>Ruby 的衰落</h2><p></p><p>&nbsp;</p><p>有很多原因促使 JavaScript 和 Python 超越了 Ruby，它们超越了语言本身的品质。 “理论上 Python 和 Ruby 是相当的，”Qwoted 的 Trowbridge 说， “它们都是动态的、解释性的脚本语言，最适合在服务器上使用。它们不能非常有效地使用内存，因此运行起来很昂贵，但它们具有令人难以置信的灵活性，所以它们编写起来也相当快，对初学者也很友好。”</p><p>&nbsp;</p><p>但是当涉及数据科学时，Python 就有很大的优势，因为像 <a href=\"https://www.infoworld.com/article/3278008/what-is-tensorflow-the-machine-learning-library-explained.html\">TensorFlow</a>\" 和 <a href=\"https://www.infoworld.com/article/3336192/what-is-keras-the-deep-neural-network-api-explained.html\">Keras</a>\" 这样的库现成可用。Bhardwaj 说：“这些框架使程序员很容易开发数据可视化和编写机器学习的程序。”</p><p>&nbsp;</p><p>同时，JavaScript 已经催生了看似无穷无尽的库，开发人员可以轻松地下载并调整这些库，以满足几乎任何目的。Trowbridge 说：“作为一个技术专家，你可以按照你认为正确的方式进行你自己的英雄之旅，”。但是说到 JavaScript 时，“这些库都很出色。为什么要忽略所有这些呢？”</p><p>&nbsp;</p><p>其中许多库是由社区成员开发的，这激发了其他人的贡献，这是参与开源的任何人都熟悉的雪球效应。但有一个大玩家在这里产生了巨大的影响。Python 的 TensorFlow 被 Bhardwaj 称为“游戏规则的改变者”，由谷歌发布，该公司紧随学术界的步伐，将 Python 作为自己的内部脚本语言。作为主流网页浏览器的制造商，谷歌显然也对提升 JavaScript 有兴趣。而且 Trowbridge 认为谷歌在使 JavaScript 比以前更快、更有内存效率方面功不可没。他说：“在某些方面，它感觉几乎像一种低级语言。同时，人们普遍认为 Ruby 在性能上是落后的，部分原因是它缺乏同样的企业赞助商，没有资源来改进它。”</p><p>&nbsp;</p><p>而在一些 Ruby 曾经兴盛一时的领域，它并没有被另一种语言所取代；相反，情况已经发生了变化，所以这些领域已经无法辨认了。“我最初是为一家当地创意公司的客户制作营销网站和在线商店，我认为这也很容易错过网络开发世界的底层已经被自动化的程度，Lattice 的 Boeh 说。“在几年内，整个业务不再可行--没有人对这样的定制网站感兴趣，因为他们可以用 WordPress 或 Shopify 做得相当体面。”</p><p>&nbsp;</p><p></p><h2>为什么 Ruby 不会消失</h2><p></p><p>&nbsp;</p><p>尽管如此，Ruby 并没有消失---而电子商务巨头 Shopify 是最大的原因之一，因为 Ruby on rails 是它的主要开发平台。“Ruby 仍然是创建电子商务应用程序的最佳选择，因为它的动态功能和灵活性，”BoutiqueSetup.net 的 Bhardwaj 说，“你可以通过不同的模块构建你的应用程序，并在以后再修改它们。这使得更新应用程序以获得更多功能变得更容易。”</p><p>&nbsp;</p><p>虽然 Shopify 显然没有像谷歌这样的规模，但它的目标仍然是作为 Ruby 的赞助人，就像谷歌为其喜爱的语言所做的那样。例如，Shopify 最近开发了 YJIT，这是一个即时编译器，可以提高 Ruby 的性能，并已被纳入 Ruby 标准。</p><p>&nbsp;</p><p>Qwoted 的 Trowbridge 表示，Ruby 也在蓬勃发展“作为一种优秀的服务器端‘胶水’语言，它可以很好地用于 Web 应用程序的服务器组件，就像在 Rails 的‘仅 API’模式中一样。” 他指出，在某些方面，这种角色“使 Ruby 基本上回到了它的起点。”</p><p>&nbsp;</p><p>总而言之，几乎所有与我交谈过的人都认为，Ruby 和 Ruby on Rails 将继续在许多环境中使用。Trowbridge 说：“有许多语言仍然被大量使用并具有相关性，而不像以前那样热闹了，我会把 Java 作为最主要的例子，并建议 Ruby 和 Java 将分享类似的发展轨迹。”</p><p>&nbsp;</p><p>最后，从 Ruby 的社区中，你似乎找不到其他语言对 Ruby 的热情和热情，即使是那些在许多领域“击败”Ruby 的语言。例如，Lumenova AI 的首席技术官 Cosmin Andriescu 说，“ Rails 仍然有一个主要的优势，它拥有大量的 Ruby gem 库，相对于很多 JavaScript 框架来说，这些框架拥有不稳定的 API，在所有必要的 Web 开发工具中都不够成熟。”Boeh 更直截了当地将 Python 描述为“我见过的最讨厌使用它的人的语言”。</p><p>&nbsp;</p><p>“我仍然在个人项目中使用 Ruby，并希望我能够再次专业地使用它，”Boeh 补充说，“现在 Ruby 世界有很多令人兴奋的发展，截至 6 个月前，还有很多的就业机会。Ruby 永远不会再成为下一个大的新事物，但我认为它将继续存在下去。”</p><p>&nbsp;</p><p>作者简介：</p><p>&nbsp;</p><p>Josh Fruhlinger，作家兼编辑，住在洛杉矶。</p><p>&nbsp;</p><p>原文链接：</p><p>&nbsp;</p><p>https://www.infoworld.com/article/3687219/whatever-happened-to-ruby.html</p><p>&nbsp;</p><p></p>",
    "publish_time": "2023-06-07 13:40:03",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "如何构建大模型时代下的智能算力？",
    "url": "https://www.infoq.cn/article/ACXL3WviaTtr2U0v5NlB",
    "summary": "<p>云计算加速了企业数字化和智能化的进程。当 AI 开始更深层次地被嵌入到企业发展的链路之中，新一代算力、大模型、AI 基础设施的推出就变得势在必行。正如百度集团执行副总裁、<a href=\"https://xie.infoq.cn/article/3e1ff530358326aa5ec803fdd\">百度智能云</a>\"事业群总裁沈抖所言：“AI 原生时代正在加速到来，这对云计算的基础设施提出了新要求，全栈融合、端到端优化、提供极致的资源效能和模型效能，成为未来智能计算发展的三大主流方向。”</p><p></p><p>为了让大家更全面地了解 AI 技术的前沿发展趋势及技术实践，百度智能云团队特推出《大模型时代的 AI 基础设施——百度 AI 大底座》系列云智公开课，该课程将围绕“AI 算力构建”、“AI 框架和 AI 中台”、“大模型训练实践”三大主题展开，由多位专业大咖倾情打造，揭秘核心技术，<a href=\"https://xie.infoq.cn/article/4f60309ffa73a431c5cdcfac2\">直击</a>\"行业痛点。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/2e/20/2ea9487e8054fa153dcccb8aec2fc920.png\" /></p><p></p><p>目前我们都关注到大模型热潮下 ，AI 算力升级已是大势所趋。</p><p></p><p>大模型落地第一步就是要构建起能够提供大规模的 AI 算力的基础设施，包括将海量 AI 算力进行聚合的高性能网络、高效率的异构资源管理方式、为大模型落地的各个环节提供匹配的存储加速方案、为向量检索及其海量数据存储提供的各项方案等。</p><p></p><p>面对以上技术挑战，<a href=\"https://www.infoq.cn/article/ONi9RGciXT9EKSAHNcRz\">百度智能云</a>\"探索出一套“武林秘籍”。自 6 月 20 日起，这些“秘籍”将在《大模型时代的 AI 基础设施——百度 AI 大底座》系列云智公开课第一大主题——“AI 算力构建”课程直播中陆续进行解读，欢迎大家关注并预约~</p><p></p><p>&nbsp;第一讲：《大规模 AI 高性能网络的设计和实践》</p><p>了解大模型训练对网络系统的要求了解百度百舸·AI 异构计算平台的高性能网络的特点了解高性能网络支撑大模型训练的相关实践</p><p></p><p>&nbsp;第二讲：《GPU 容器虚拟化全场景实践和新能力发布》</p><p>了解各类 AI 任务对 GPU 容器虚拟化的不同要求，以及百度百舸的相应解决方案了解 GPU 容器虚拟化在各类场景的成功案例，以及最新的大模型推理场景下的实践了解双引擎 GPU 容器虚拟化今年推出的新能力，支持多种类型任务同时运行，满足新场景（云游戏、智驾等）对资源利用率的要求</p><p></p><p>&nbsp;第三讲：《面向大模型的存储加速方案设计和实践》</p><p>了解大模型相对传统 AI 给存储带来的全新挑战了解大模型各场景下的存储问题解决思路了解百度沧海存储大模型加速解决方案和实践</p><p></p><p>&nbsp;第四讲：《大模型的向量数据存储方案设计和实践》</p><p>了解大模型落地各个环节的数据库应用场景了解大模型的向量数据的存储挑战了解百度智能云对向量数据存储方案的设计和实践</p><p></p><p>&nbsp;第五讲：《向量检索在大模型应用场景的设计和实践》</p><p>了解向量检索在大模型时代的意义、关键技术和架构了解百度智能云 BES 在大模型应用场景的向量检索设计思路和实践</p><p></p><p>第一讲课程《大规模 AI 高性能网络的设计和实践》上线时间为 2023 年 6 月 20 日 19:30-21:00，目前课程报名通道现已开启，立即点击<a href=\"https://www.infoq.cn/form/?id=1631&amp;utm_source=1&amp;sign=iq_647ee213d1be4\">链接</a>\"进行报名，还有机会抽奖赢取周边大礼哦！</p>",
    "publish_time": "2023-06-07 13:45:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "编程已死，AI当立？教授公开“唱反调”：AI 还帮不了程序员",
    "url": "https://www.infoq.cn/article/2Ep75mzLWcNK09BcGvya",
    "summary": "<p><a href=\"https://www.infoq.cn/article/s5tL9MAGc53wXWqrgc9R\">GitHub Copilot</a>\"、<a href=\"https://www.infoq.cn/article/HFSPasQ7SXZ9QzdFXhGO\">ChatGPT</a>\" 等 AI 产品的火爆出圈，让更多人看到 AI 在编程方面展现出的极强能力。一时间，关于“AI 取代程序员”、“AI 当立、编程已死”的言论不绝于耳。</p><p></p><p>前段时间，前哈佛大学计算机科学教授、谷歌工程主管 Matt Welsh 在芝加哥计算机协会的一个虚拟会议上表示，ChatGPT 和 GitHub Copilot 预示着编程终结的开始。Welsh 断言，生成式 AI 将在 3 年内<a href=\"https://www.infoq.cn/article/qR0xQrafpDi92bTPal6t\">终结编程</a>\"。</p><p></p><p>但也有一些人对此持反对意见。近日，Constructor Institute 教授、Eiffel Software 首席技术官 Bertrand Meyer 在ACM上发表文章公开“唱反调”，他认真研究了一番 ChatGPT 到底是怎么编程的，最终得出结论：AI 还帮不了程序员。</p><p></p><h2>ChatGPT编程实验</h2><p></p><p></p><p>前段时间，Meyer 通过一系列文章讨论过如何解决虚构出来的二进制搜索问题，虽然内容看起来都不错，每篇文章也都提出了自己的解答版本，但其实大部分都是错的。（延伸阅读：<a href=\"https://bertrandmeyer.com/2020/03/26/getting-program-right-nine-episodes/\">https://bertrandmeyer.com/2020/03/26/getting-program-right-nine-episodes/</a>\"）</p><p></p><p>以此为素材，Meyer 把这些文章提交给了ChatGPT（版本 4）。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/01/01f93fd85371f85ff2875b127c57f77d.png\" /></p><p></p><p>AI 选手先是对问题做出了描述：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f1/f1fc6dfe5dee02b30a9df84bfbaa94eb.png\" /></p><p></p><p>这个问题实际可以出现在任意数量的元素上，而不仅仅是两个。但想要证明一个程序不正确，举出一个反例就足够了（但要证明它是正确的，则需要证明其适用于所有示例）。Meyer 只问了程序是否正确，并没提具体要怎么修复，但ChatGPT还是热心给出了如下建议：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b1/b192e3721f8a53a43f047b8b579e5d39.png\" /></p><p></p><p>这里的评论部分确实很有帮助：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d9/d9ae6c0d790d9ab5927f52f5de3804cc.png\" /></p><p></p><p>ChatGPT说得没错，逻辑很通。但在认真查看建议的替换代码之后，Meyer 发现了某些可疑的部分。于是，Meyer 进一步提问：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/24/24f01c6894d78da98c807b773277d56e.png\" /></p><p></p><p>在尝试修复 Meyer 的错误时，ChatGPT输出了另一个同样有错的版本，只不过错得跟 Meyer 不一样。值得一提的是，ChatGPT 每次都试着给出新的版本——在纠正之前错误的同时，却又带来了新问题。</p><p></p><p>Meyer 还发现，ChatGPT特别擅长道歉：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/3b/3b765bea47429bb36f76e9c96a59a71e.png\" /></p><p></p><p>ChatGPT一直在自说自话，积极向 Meyer 推荐它认为经过修正的解决方案：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/66/6655b37b7b01edb974a3fcf3a6648bf7.png\" /></p><p></p><p>到这里，Meyer 甚至不打算尝试最新版本正不正确。有经验的程序员朋友都知道，揪住一个案例不断添加特定修复，绝不是生成正确程序的最佳途径。</p><p></p><p>于是 Meyer 也选择继续保持礼貌：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5c/5c70e17b78e7eecccfc40cfc57ae4f91.png\" /></p><p></p><p>精彩的来了：ChatGPT 决定向 Meyer 介绍循环不变量的概念！</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/7f/7f537627cc40808c40cdca0b1f6a94b2.png\" /></p><p></p><p>Meyer从未明示或暗示称“需要一种更系统的方法来验证算法的正确性”，他只是想知道ChatGPT要如何证明它推荐的答案是对的，但绝对没有使用“系统的”或者“验证”这类字眼。之所以出现这一幕，可能是基于大型语料库的统计推理给了ChatGPT信心，让它认定用户肯定会质疑输出代码的正确性，然后要求以系统方法给出验证。</p><p></p><p>Meyer 继续追问了下去：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/56/56f5da5d8a21deb6ade1d8c20a1a2e96.png\" /></p><p></p><p>ChatGPT随后给出了很好的答案，甚至包括ACM计算调查当中收录的循环不变量调查内容。而且它仍然是先夸一句再解释问题，非常客气：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0e/0e1d33e1765e326b99eee2878404aa0a.png\" /></p><p></p><p>到这里，Meyer 不打算再继续追问了。</p><p></p><p>作为一名程序员，Meyer 知道如何解决问题，但和大多数程序员一样，他自己也会经常犯错误。他希望 AI 编程助手可以监督自己，提醒他注意陷阱并在犯错时给予纠正。换言之，他希望 AI 能成为高效有用的结对编程伙伴。但实验结果并非如此：AI 编程工具就像个自大的研究生，聪明且博览群书，也始终保持着礼貌并愿意道歉。可回头来看，它仍然<a href=\"https://www.infoq.cn/article/RL7iFW2SqO0Ppv4msCsL\">草率且不够可靠</a>\"，所谓的帮助对 Meyer 来说毫无用处。</p><p></p><h2>现代AI成果并不能生成正确的程序</h2><p></p><p></p><p>Meyer 认为，当前生成式 AI 工具确实能够在某些领域出色地完成工作，甚至胜过大部分人类的水平：相关结果来得很快、令人信服，乍看之下甚至不亚于顶级专家，原则上也没什么大问题。比如生成营销手册，或者是粗略翻译网站内容之类，它的翻译效果相当不错，此外还有医学影像分析等等。</p><p></p><p>但编程的要求完全不同，它对产出程序的正确性有着严格要求。开发者可以容忍一定的错误，但其核心功能必须正确。如果客户下达的指令是买进100股微软股票，同时卖出50股亚马逊股票，那程序绝不应该执行相反的操作。专业程序员有时候会犯错，这时候就看 AI 助手能不能帮上一把了。</p><p></p><p>然而，现代 AI 成果并不能生成正确的程序：它产出的程序实际是从之前见过的大量原有程序中推理而成。这些程序看似靠谱，但却无法完全保障正确性。（这里所说的现代 AI，是将其与早期 AI 区分开来——后者试图通过专家系统等方法重现人类的逻辑思维，但在很大程度上已经失败。如今的 AI 完全通过统计推理实现基本功能。）</p><p></p><p>Meyer 表示，尽管 AI 助手时有惊艳发挥，但它们并不是逻辑的产物，而是玩弄文字的高手。大语言模型都拥有流畅的表达能力，非常擅长生成看起来没什么大错的文本。虽然这样的表现对于许多应用场景已经足够，但仍然不适合编程需求。</p><p></p><p>现在的 AI 能够帮助用户生成基础框架，以大致靠谱的效果给出答案。但也就止步于此了。以目前的技术水平来看，它还完全输出不了能够正常运行的程序。</p><p></p><p>但这对软件工程行业来说并不是坏事。Meyer 认为，面对种种“编程已死”的宣传，这次实验提醒我们不管人类程序员还是自动编程助手，都需要规范的约束，并且任何产出的备选程序都有待验证。在最初的惊艳过后，人们终将意识到这种一键式生成程序的能力并没有多大作用。考虑到它往往无法正确实现使用者想要的效果，草草上线的自动化功能也许反而有害。</p><p></p><h2>写在最后</h2><p></p><p></p><p>Meyer 并不是唱衰 AI 编程，他认为，审慎的态度或许能帮助我们构建出具备可靠能力的终极 AI 系统。</p><p></p><p>目前，AI 技术尚处于早期发展阶段，这些局限性也并不是永远跨越不了的障碍。也许在未来的某一天，生成式 AI 编程工具能够克服这些障碍。但要让它具备真正的编程能力，还得在规范和验证方面做一番深入的探讨和研究。</p><p></p><p>那么问题来了：你是否使用过 AI 编程工具？使用的是哪款工具？准确度如何？这些工具是否真的帮助到了你？欢迎在评论区写下你的使用体验。</p><p></p><p>原文链接：</p><p></p><p><a href=\"https://cacm.acm.org/blogs/blog-cacm/273577-ai-does-not-help-programmers/fulltext\">https://cacm.acm.org/blogs/blog-cacm/273577-ai-does-not-help-programmers/fulltext</a>\"</p>",
    "publish_time": "2023-06-07 14:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]