[
  {
    "title": "Java近期新闻： NetBeans 15、Jakarta EE 10、jtreg 7、Spring Cloud、Groovy、Helidon和Micronaut",
    "url": "https://www.infoq.cn/article/fdLxBglWb827PQMPIOvh",
    "summary": "<p>本期的Java新闻包括OpenJDK、JDK 20、Jakarta EE 10、Spring Cloud 2021.0.4、Quarkus 2.12.1、Micronaut 3.6.2和3.6.3、Helidon 2.5.3、JDK 8维护版本的重要变更、Hibernate ORM 6.1.3、Reactive Native JHipster 4.3.0、Apache NetBeans 15、Apache Groovy 4.0.5、Apache Camel 3.18.2、Ktor 2.1.1以及JavaZone会议。</p><p></p><h4>OpenJDK</h4><p></p><p>JDK的回归测试工具<a href=\"https://openjdk.org/jtreg/\">jtreg</a>\"&nbsp;7版本<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2022-September/006906.html\">发布</a>\"，其特性包括升级至JUnit 5，提供了<a href=\"https://junit.org/junit5/docs/current/user-guide/#writing-tests\">Jupiter API</a>\"并支持运行现有的JUnit 4测试和<a href=\"https://openjdk.org/jtreg/tag-spec.html\">标签语言规范（Tag Language Specification）</a>\"。第三方库JAR文件的命名约定已经变更为使用jtreg构建时指定的JAR文件的基础名称。这个名称可能依赖于库的版本。受此影响的JDK测试均已更新。jtreg&nbsp;7支持的最低版本是JDK 11。</p><p></p><h4>JDK 19</h4><p></p><p><a href=\"https://openjdk.org/projects/jdk/19/\">JDK 19</a>\"依然处于<a href=\"https://openjdk.java.net/jeps/3#rc\">发布候选</a>\"阶段，预计GA版本会在2022年9月20日发布。<a href=\"https://jdk.java.net/19/release-notes\">发布说明</a>\"包含了文档的链接，比如<a href=\"https://cr.openjdk.java.net/~iris/se/19/latestSpec//api/index.html\">完整的API规范</a>\"以及一个<a href=\"https://cr.openjdk.java.net/~iris/se/19/latestSpec/apidiffs/overview-summary.html\">标注的API规范</a>\"，后者对比了JDK 18（<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-18%2B36\">Build 36</a>\"）和JDK 19（<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-19%2B36\">Build 36</a>\"）的差异。关于JDK 19的更多细节和对JDK 20的预测可以参阅InfoQ的<a href=\"https://www.infoq.com/news/2022/09/java-19-so-far/\">新闻报道</a>\"。</p><p></p><h4>JDK 20</h4><p></p><p>JDK 20的<a href=\"https://jdk.java.net/20/\">早期访问构建</a>\"版本<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-20%2B14\">Build 14</a>\"发布，它是对Build 13的<a href=\"https://github.com/openjdk/jdk/compare/jdk-20%2B13...jdk-20%2B14\">更新</a>\"，包括对各种<a href=\"https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2020%20and%20%22resolved%20in%20build%22%20%3D%20b14%20order%20by%20component%2C%20subcomponent\">问题</a>\"的修复。关于该版本的更多细节，请参阅<a href=\"https://jdk.java.net/20/release-notes\">发布说明</a>\"。</p><p>对于<a href=\"https://openjdk.java.net/projects/jdk/19/\">JDK 19</a>\"和<a href=\"https://openjdk.java.net/projects/jdk/20/\">JDK 20</a>\"，鼓励开发者通过<a href=\"https://bugreport.java.com/bugreport/\">Java Bug数据库</a>\"报告缺陷。</p><p></p><h4>Jakarta EE 10</h4><p></p><p>在通往Jakarta EE 10的路上，Eclipse基金会的Jakarta EE开发人员倡导者<a href=\"https://se.linkedin.com/in/ivargrimstad\">Ivar Grimstad</a>\"在他的Hashtag Jakarta EE<a href=\"https://www.agilejava.eu/\">周报</a>\"上<a href=\"https://www.agilejava.eu/2022/09/04/hashtag-jakarta-ee-140/\">宣布</a>\"，Jakarta EE 10的<a href=\"https://jakarta.ee/specifications/platform/10/\">Platform Profile</a>\"和<a href=\"https://jakarta.ee/specifications/webprofile/10/\">Web Profile</a>\"审查投票已经开始，预计会在9月13日结束。<a href=\"https://jakarta.ee/specifications/coreprofile/10/\">Core Profile</a>\"已经在8月份通过了审查。这似乎是一个好的信号，Jakarta EE 10有可能会在本月正式发布。关于Jakarta EE规范的更多细节可以参阅Grimstad在<a href=\"https://2022.javazone.no/\">JavaZone</a>\"上做的题为<a href=\"https://www.slideshare.net/ivargrimstad/jakarta-ee-10-feature-by-feature-252882883\">Jakarta EE 10 - Feature-by-Feature</a>\"的演讲。</p><p></p><h4>Spring框架</h4><p></p><p>代号为Jubilee的Spring Cloud 2021.0.4版本<a href=\"https://spring.io/blog/2022/09/07/spring-cloud-2021-0-4-codename-jubilee-has-been-released\">发布</a>\"，其特性包括对所有<a href=\"https://spring.io/projects/spring-cloud\">Spring Cloud</a>\"子项目的更新，在<a href=\"https://spring.io/projects/spring-cloud-config\">Config</a>\",&nbsp;<a href=\"https://spring.io/projects/spring-cloud-gateway\">Gateway</a>\"、<a href=\"https://spring.io/projects/spring-cloud-openfeign\">OpenFeign</a>\"和<a href=\"https://spring.io/projects/spring-cloud-circuitbreaker\">Circuit Breaker</a>\"方面都有明显的变化。关于该版本的更多细节，可以参阅<a href=\"https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2021.0.4-Release-Notes\">发布说明</a>\"。</p><p></p><h4>Quarkus</h4><p></p><p>Red Hat<a href=\"https://quarkus.io/blog/quarkus-2-12-1-final-released/\">发布</a>\"了Quarkus 2.12.1.Final，对<a href=\"https://github.com/quarkusio/quarkus/blob/main/independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/RequestContext.java\">RequestContext</a>\"类的性能下降问题进行了修复。此外，还对<a href=\"https://github.com/smallrye/smallrye-open-api/blob/main/README.adoc\">Smallrye OpenAPI</a>\"&nbsp;2.2.1和<a href=\"https://dekorate.io/\">Dekorate</a>\"&nbsp;2.11.2进行了依赖升级。关于该版本的更多细节，可以参阅<a href=\"https://github.com/quarkusio/quarkus/releases/tag/2.12.1.Final\">发布说明</a>\"。</p><p></p><h4>Micronaut</h4><p></p><p>Micronaut基金会发布了<a href=\"https://micronaut.io/2022/09/04/micronaut-framework-3-6-2-released/\">3.6.2</a>\"和<a href=\"https://micronaut.io/2022/09/09/micronaut-framework-3-6-3/\">3.6.3</a>\"版本的<a href=\"https://micronaut.io/\">Micronaut</a>\"，对Micronaut的一些模块进行了缺陷修复和补丁发布，例如<a href=\"https://micronaut-projects.github.io/micronaut-security/snapshot/guide/index.html\">Security</a>\"、<a href=\"https://micronaut-projects.github.io/micronaut-email/snapshot/guide/index.html\">Email</a>\"、<a href=\"https://micronaut-projects.github.io/micronaut-spring/snapshot/guide/index.html\">Micronaut for Spring</a>\"、<a href=\"https://micronaut-projects.github.io/micronaut-tracing/snapshot/guide/index.html\">Tracing</a>\"、<a href=\"https://micronaut-projects.github.io/micronaut-flyway/snapshot/guide/index.html\">Flyway</a>\"、<a href=\"https://micronaut-projects.github.io/micronaut-aws/snapshot/guide/index.html\">AWS</a>\"、<a href=\"https://micronaut-projects.github.io/micronaut-serialization/snapshot/guide/\">Serialization</a>\"和<a href=\"https://micronaut-projects.github.io/micronaut-data/snapshot/guide/index.html\">Data</a>\"。3.6.2版本还提供了升级后的SnakeYAML 1.31，它解决了<a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25857\">CVE-2022-25857</a>\"漏洞，在之前版本<a href=\"https://github.com/snakeyaml/snakeyaml/blob/master/README.md\">SnakeYAML</a>\"中的这个漏洞缺少对集合嵌套深度的限制，很容易导致拒绝服务攻击（Denial of Service）。关于这些版本的更多细节可以在<a href=\"https://github.com/micronaut-projects/micronaut-core/releases/tag/v3.6.2\">3.6.2</a>\"和<a href=\"https://github.com/micronaut-projects/micronaut-core/releases/tag/v3.6.3\">3.6.3版本</a>\"的发布说明中找到。</p><p></p><h4>Helidon</h4><p></p><p>Helidon 2.5.3<a href=\"https://github.com/oracle/helidon/releases/tag/2.5.3\">发布</a>\"，其中有许多变化，包括在gRPC组件中升级了protocol buffer以支持osx-aarch_64架构；在Security组件中实现了access token刷新；在Config组件中修复了为watcher服务获取父目录的问题。此外，还对SnakeYAML 1.31和Oracle Cloud Integration Integration 2.41.0进行了依赖升级。</p><p></p><h4>BellSoft</h4><p></p><p><a href=\"https://bell-sw.com/\">BellSoft</a>\"是<a href=\"https://bell-sw.com/pages/libericajdk/\">Liberica JDK</a>\"（OpenJDK的下游发布版）的创建者，他们讨论了一些<a href=\"https://bell-sw.com/announcements/2022/09/09/jdk-8-maintenance-release-4-important-changes/\">重要的变更</a>\"，这会影响将于2022年10月发布的JDK 8 Maintenance Release 4。核心变化是JDK-8202260，也就是<a href=\"https://bugs.openjdk.org/secure/Dashboard.jspa\">JDK缺陷系统</a>\"中定义的<a href=\"https://bugs.openjdk.org/browse/JDK-8202260\">引用对象不应该支持克隆（Reference Objects Should Not Support Cloning）</a>\"，它描述了在Java SE 8平台中发现的一个重要问题：</p><p></p><p></p><blockquote>在Java SE规范中，并没有明确定义克隆引用对象的语义。克隆与垃圾回收密切相关，如果引用对象的可达性状态在GC活动中发生变化，收集器可能在代码调用clone()方法之前，对该对象进行入队（enqueue）。结果就是，克隆的对象不会被入队和引用。从而导致高度不可预知的引用处理。</blockquote><p></p><p></p><p>在JDK 9和JDK 11中进行了一些后续的变更，这些变更会回传到JDK 8 Maintenance Release 4中。例如，在JDK 11，<a href=\"https://devdocs.io/openjdk~18/java.naming/javax/naming/reference#clone%28%29\">Reference.clone()</a>\"方法始终会抛出一个CloneNotSupportedException异常。</p><p></p><h4>Hibernate</h4><p></p><p>Hibernate ORM 6.1.3.Final<a href=\"https://in.relation.to/2022/09/08/hibernate-orm-613-final/\">发布</a>\"了一项<a href=\"https://hibernate.atlassian.net/browse/HHH-15458\">优化</a>\"，其中带有<a href=\"https://docs.jboss.org/hibernate/orm/current/javadocs/org/hibernate/annotations/JdbcTypeCode.html\">@JdbcTypeCode</a>\"(SqlTypes.JSON)和@JdbcTypeCode(SqlTypes.SQLXML)注解的字符串将不会被序列化为JSON/XML。相反，它们会被解析为纯JSON/XML，以避免序列化/反序列化的开销。</p><p></p><h4>React Native JHipster</h4><p></p><p>在<a href=\"https://www.jhipster.tech/2022/09/02/jhipster-release-7.9.3.html\">JHipster 7.9.3发布后不久</a>\"，<a href=\"https://github.com/jhipster/generator-jhipster-react-native/blob/main/README.md\">JHipster React Native</a>\"的4.3.0版本已<a href=\"https://twitter.com/mraible/status/1567163914449813510?cxt=HHwWjIC8md3R178rAAAA\">交付给</a>\"Java社区。改进之处包括：通过<a href=\"https://reactnative.dev/\">React Native</a>\"&nbsp;0.69.5和React 18升级到<a href=\"https://blog.expo.dev/expo-sdk-46-c2a1655f63f7\">Expo SDK 46</a>\"；迁移到<a href=\"https://expo.dev/eas\">Expo Application Services</a>\"；支持基于Auth0的注销；为GitHub Actions使用Node 16；大量的依赖升级；以及使用Keycloak、Okta和Auth0改进质量保证。关于这个版本的更多细节可以参阅<a href=\"https://github.com/jhipster/generator-jhipster-react-native/releases/tag/v4.3.0\">发布说明</a>\"。</p><p></p><h4>Apache软件基金会</h4><p></p><p><a href=\"https://netbeans.apache.org/\">Apache NetBeans</a>\"&nbsp;15<a href=\"https://www.mail-archive.com/announce@apache.org/msg07559.html\">发布</a>\"，其特性包括：支持JEP 413，即<a href=\"https://openjdk.org/jeps/413\">Java API文档中支持代码片段（Code Snippets in Java API Documentation）</a>\"（在JDK 18中交付）；清理代码库，删除对Windows 95和Windows 98的支持；升级到<a href=\"https://maven.apache.org/maven-indexer/\">Maven-Indexer</a>\"&nbsp;6.2.0，包括删除避免<a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/IndexOutOfBoundsException.html\">IndexOutOfBoundsException</a>\"的临时方案；以及更新到Oracle Cloud Integration 2.27.0。关于这个版本的更多细节可以参阅<a href=\"https://github.com/apache/netbeans/releases/tag/15\">发布说明</a>\"。</p><p></p><p><a href=\"https://groovy-lang.org/\">Apache Groovy</a>\"&nbsp;4.0.5<a href=\"https://www.mail-archive.com/announce@apache.org/msg07565.html\">发布</a>\"，它具有56个缺陷修复、改进和依赖性升级，比如，JUnit Jupiter 5.9.0、JUnit Platform 1.9.0、Gradle 7.5.1、Spock 2.2和slf4j 2.0.0。 唯一的新特性是对<a href=\"https://docs.groovy-lang.org/latest/html/api/org/apache/groovy/dateutil/extensions/DateUtilExtensions.html\">DateUtilExtensions</a>\"类的增强，以便检索静态日历常量的子集。关于这个版本的更多细节可以在<a href=\"https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12318123&amp;version=12352126\">发布说明</a>\"中找到。</p><p></p><p>Apache Camel 3.18.2<a href=\"https://camel.apache.org/blog/2022/09/RELEASE-3.18.2/\">发布</a>\"，它包含了50个错误修复和改进，例如：支持<a href=\"https://camel.apache.org/components/3.18.x/freemarker-component.html\">Camel Freemarker</a>\"组件中的邮件附件；以及处理CamelMicroProfilePropertiesSource类中loadProperties()方法中的NoSuchElementException。还有一些依赖性的升级，包括Spring Boot 2.7.3和gRPC 1.48.1。关于这个版本的更多细节可以在<a href=\"https://camel.apache.org/releases/release-3.18.2/\">发布说明</a>\"中找到。</p><p></p><h4>JetBrains</h4><p></p><p>JetBrains<a href=\"https://twitter.com/JetBrainsKtor/status/1567430094922125315?cxt=HHwWhsC4obzX0MArAAAA\">发布</a>\"了Ktor 2.1.1，其特性是改进了以下问题：Netty HTTP/2的异常；JDK 8和JDK 11在构建Ktor时的不匹配；以及废弃receiveOrNull()方法，该方法被认为令人感到困惑。关于这个版本的更多细节可以在<a href=\"https://ktor.io/changelog/2.1/\">更新日志中</a>\"找到。</p><p></p><h4>JavaZone Conference</h4><p></p><p><a href=\"https://2022.javazone.no/\">JavaZone</a>\"会议在挪威奥斯陆的<a href=\"https://oslospektrum.no/\">Oslo Spektrum</a>\"举行，来自Java社区的许多演讲者发表了闪电演讲、报告和工作坊。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/09/java-news-roundup-sep05-2022/\">Java News Roundup: NetBeans 15, Jakarta EE 10, jtreg 7, Spring Cloud, Groovy, Helidon, Micronaut</a>\"</p>",
    "publish_time": "2022-09-20 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "揭秘 Meta 的云游戏基础设施",
    "url": "https://www.infoq.cn/article/oi5qfvo5NUCHeZScpaib",
    "summary": "<p><a href=\"https://xie.infoq.cn/article/af8d4fbdf2296442c79c3a398\">云游戏</a>\"的未来是实现游戏大众化。任何一个喜欢游戏的人都应该能够享受游戏，并与好友分享游戏体验，无论他们身在何处，即使他们没有最新最贵的游戏硬件。<a href=\"https://www.infoq.cn/article/5m5afBSrqT4ipYqxCwDi\">Meta</a>\" 在 2020 年启动了云游戏平台，让 Meta 用户可以通过各种屏幕和网页浏览器即时地访问原生 Android 和 Windows 游戏。</p><p></p><p>这种前所未有的云游戏访问体验需要 Meta 的工程师们迎接新的挑战，开发出能够为世界各地的人们提供高质量游戏体验的硬件基础设施。</p><p></p><p>游戏本身也在不断演化，从 AR 和 VR 等 3D 体验到<a href=\"https://xie.infoq.cn/article/f2dc4c53d4dadc360c715af63\">元宇宙</a>\"，世界各地的人们都希望尽可能无缝且轻松地玩越来越具有沉浸感的游戏。实现元宇宙需要整个行业投入巨大的努力，但我们相信创建基础设施和解决云游戏的挑战将为我们指明走向元宇宙的道路。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/eb/eb323611b8242fcec8c93e065e31aac3.png\" /></p><p></p><p></p><h3>为什么要构建云游戏</h3><p></p><p></p><p>云游戏关注的是可访问性——为人们提供游戏，不管他们使用什么设备，也不管他们位于世界何处。将游戏应用放到云端，人们就不需要购买新硬件，也不需要大量下载或等待更新。它支持游戏跨桌面和移动设备无缝交叉，可以实现灵活的应用分发。</p><p></p><p>云游戏还为开发者提供了更轻松的开发体验，因为他们不再需要过多地考虑针对多个硬件平台（如桌面和手机）优化游戏。在理想的情况下，开发者只需要构建一次应用，就可以分发到多个设备上，而不需要构建多个二进制文件。对于关心安全和完整性的玩家和开发者来说，云游戏意味着更少的作弊和盗版问题。</p><p></p><h3>Meta 云游戏基础设施</h3><p></p><p></p><p>在 Meta 实现云游戏意味着工程师们需要开发新的硬件和软件基础设施来解决云游戏所面临的挑战。云游戏要求较低的端到端延迟，并提供快速流畅的游戏体验，而高质量的视频和音频需要以尽可能小的抖动进行传输。为了提升成本效率，基础设施还需要能够在单个云游戏服务器上运行多款游戏。所有这一切都必须受到保护，免受各种网络攻击，同时保持健壮和高效。</p><p></p><h5>边缘计算、GPU 和虚拟化</h5><p></p><p></p><p>Meta 云游戏基础设施为玩家提供低延迟体验的方法是在网络距离方面让其尽可能地靠近玩家。Meta 的数据中心无法单独为云游戏提供超低的延迟，所以我们依赖边缘计算，在靠近大量人口的大都市地区边缘部署服务，让云游戏基础设施更靠近玩家。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/9a/9a15261183f6b5875e97ca2b5f9364c0.png\" /></p><p></p><p>通过增加边缘计算站点降低延迟</p><p></p><p>我们的目标是在每一个边缘计算站点中都有一个统一的托管环境，确保我们可以尽可能平稳地运行尽可能多的游戏。如今的游戏都是为 GPU 设计的，所以我们与 NVIDIA 合作，基于 NVIDIA Ampere 架构的 GPU 构建托管环境。随着游戏图像渲染变得越来越密集和复杂，GPU 将为游戏的加载、运行和流化提供高保真度和低延迟。</p><p></p><p>为了运行游戏，我们在我们的边缘计算操作系统上使用了我们的集群管理系统 Twine。我们构建了编配服务来管理流媒体信号，并使用 Twine 来协调边缘的游戏服务器。</p><p></p><p>我们为 Windows 和 Android 游戏使用了容器技术，提供了不同的托管解决方案，其中 Windows 托管解决方案集成了 PlayGiga。我们已经构建了一个统一的编配系统来管理和运行两个操作系统平台的游戏。这意味着我们可以更灵活地跨不同的平台交付游戏和管理容量。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/eb/eb323611b8242fcec8c93e065e31aac3.png\" /></p><p></p><p></p><h5>视频和音频流</h5><p></p><p></p><p>提供流畅的视频和音频是云游戏体验最重要的部分之一。任何玩过在线游戏的人都体会过延迟可能带来的挫败感。</p><p></p><p>考虑到技术的成熟度和兼容性，我们结合了 WebRTC 和安全实时传输协议（SRTP），将其作为流式处理用户输入和发送游戏视音频帧的解决方案。随着时间的推移，这种方案显著提高了视频和音频流式传输的性能。</p><p></p><p>我们将从刚开始的云游戏基本的流开始讲起。</p><p></p><p>无论玩家在何时点击执行游戏中的动作（例如让游戏角色跳跃），我们都会捕捉到点击事件并将其发送给服务器，服务器将接收到这个事件。然后，游戏渲染包含该动作结果的帧（即角色跳跃）。我们捕获并复制渲染的帧，使用视频编码器对其进行编码，然后将其打包，装入用户数据报协议（UDP）数据包，再通过网络发送给玩家。最后，玩家端有一个抖动缓冲区来平滑接收到的数据包。我们将数据包解码为帧，然后为玩家渲染帧。</p><p></p><p>所有这一切都发生得如此之快，以至于玩家察觉不到点击和角色动作之间存在延迟。然而，每一个步骤都需要花费一点时间，这些时间累积起来会给玩家带来更高的延迟。</p><p></p><p>我们当前的模型在此基础上进行了显著改进，通过 GPU 编码降低了延迟。使用 GPU 编码意味着游戏渲染帧是在 GPU 中进行的，并且在编码完成之前不会离开 GPU 的内存。这个过程非常高效，并且不需要在 GPU 和主服务器之间占用大量的 PCI 总线带宽。编码后的帧也会比原始帧小。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/4e/4e63d5722c2b48410fadd3eb7be469b8.png\" /></p><p></p><p>目前的视频和音频流媒体模型，通过使用 GPU 编码显著降低了延迟</p><p></p><p>在网络方面，让边缘计算站点靠近玩家也有助于降低视频和音频的延迟——甚至比将整个流式管道转成 GPU 所节省的成本更加显著。</p><p></p><p>在玩家端，我们现在也使用硬件解码来缩短解码时间。视频和音频通常是同步在一起的，但我们也可以为了降低延迟在音频之前发送视频。我们还可以利用玩家电脑显示器或手机屏幕的固有延迟。屏幕会以一定的速率（如 30fps 或 60fps）逐帧显示视频。我们可以利用帧之间难以察觉的间隔吸收掉一些抖动，让视频变得更加平滑。对于支持更高 FPS 的设备，延迟可能会进一步下降。</p><p></p><p></p><h5>确保云游戏的安全</h5><p></p><p></p><p>玩家和开发者需要确保云游戏体验是安全的。玩家希望他们的数据是安全的，游戏不会被作弊者利用。开发者需要确保他们的产品不会受到盗版和其他安全漏洞的侵害。</p><p></p><p>边缘计算、GPU 虚拟化和视频 / 音频流的结合使得云游戏基础设施变得非常复杂。这种复杂性带来了独特的安全性挑战。作为一个基于 Windows 和 Android 的系统，系统本身承担了这些环境的安全性挑战，还需要保护免受 DDOS 攻击等威胁。</p><p></p><p>为了识别和解决安全问题，我们在开发的每个阶段（从设计、实现到测试）都会评估安全性，包括威胁建模、安全代码评审、模糊测试和安全测试。我们不希望云游戏成为攻击其他 Meta 系统的入口，所以云游戏基础设施与 Meta 的核心数据基础设施是完全隔离的。我们还有一个内部安全团队与外部公司一起工作，定期对系统进行安全评估。</p><p></p><p></p><h3>云游戏和元宇宙</h3><p></p><p></p><p>元宇宙对游戏的未来有着重要的影响——不仅是关于人们可以玩的游戏类型，还包括如何向人们分发这些游戏。元宇宙将比以往任何时候对网络连接有着更高的要求。我们今天奠定的基础将在帮助整个行业构建云基础设施方面发挥重要作用，这些基础设施将承担创建元宇宙体验所需的复杂计算。</p><p></p><p>就像 3A 级游戏一样，未来的元宇宙体验需要最高的保真度和最低的延迟。如果无法无障碍地实现这种体验，那它就不适合任何人，这意味着元宇宙网络必须具有超低延迟、高可伸缩性、高吞吐量和联邦数据存储。</p><p></p><p>无论这种新的网络架构是什么样子，我们都需要对今天的整体网络架构进行改进。它将需要一个可靠的、服务质量（QoS）感知的、点对点的通信链路和协议，让在同一个区域内（例如，在相同的 Wi-Fi AP 覆盖下）的人们可以相互交换信息。它需要一个统一的、无处不在的网络拓扑来限制全球范围内的延迟、抖动和丢包。降低延迟、提高可靠性、提升吞吐量和开发联邦数据库的挑战可能会迫使工程师在端到端通信网络中重新设计和分配计算和路由资源。然后，元宇宙在网络的每一段以及每一个应用 / 网络协议层（从顶部的应用层到底部的操作系统层）都需要无处不在的端到端 QoS 管理策略。</p><p></p><p>我们正在研究解决这些问题的方法。我们的云游戏基础设施提供了一些见解，我们正在与移动网络运营商和运营商、硬件芯片组制造商和其他合作伙伴合作，创建可以满足元宇宙需求的解决方案。</p><p></p><p></p><h3>云游戏的未来</h3><p></p><p></p><p>许多人将通过游戏进入元宇宙。我们朝着元宇宙的长期愿景努力，我们将继续构建新的二维体验，帮助 Meta 应用用户跨越元宇宙鸿沟。最近 Facebook 游戏平台推出的 Crayta 就是一个很好的例子。</p><p></p><p>随着云游戏平台的规模不断扩大，我们也在不断升级和完善云游戏基础设施。在接下来的 2 到 3 年里，我们将进行更多的国际扩张，将游戏带给世界各地更多的人。我们还与移动网络运营商合作，显著降低其接入网络的延迟。在硬件方面，我们正在与芯片组制造商合作，降低用户设备的延迟。我们还在研究新的容器技术，提供更好的流媒体效率。当然，随着系统的发展和改进，安全性也会不断提高。</p><p></p><p>开发者对显著的改进有所期待，包括改进系统的兼容性，减少开发者负担，并为他们提供更好的开发、测试、调试、实验和分析工具。玩家是我们云游戏工作最重要的组成部分，他们可以期待即将到来的更具沉浸感的全新游戏体验。</p><p></p><p>我们的目标是让人们在任何时刻、任何地点一起玩优秀的游戏，这一点始终不变，我们在云游戏方面的持续努力将确保这些体验变得更好。</p><p></p><p>原文链接：</p><p></p><p><a href=\"https://engineering.fb.com/2022/06/09/web/cloud-gaming-infrastructure/\">https://engineering.fb.com/2022/06/09/web/cloud-gaming-infrastructure/</a>\"</p><p></p>",
    "publish_time": "2022-09-20 09:45:20",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "从野蛮到文明，数字世界应当如何重构现代化安全规则？",
    "url": "https://www.infoq.cn/article/Ch7pHdsQkyjyOEhmlKFi",
    "summary": "<p>有心人可能已经发现，网络安全问题正悄然成为 IT 行业接下来的重点领域。尤其是近两年，大、中型企业纷纷将安全发展纳入企业总体战略。网络安全问题已经从单纯的 IT 人员关注的话题，迅速上升为企业高级管理决策层都在关注的话题。</p><p></p><p>从技术的角度看，一方面，因为数字化转型的逐渐落地，多云环境形成，疫情肆虐也加速了数据和应用更多地在云端进行存储、处理，导致安全边界变得模糊；另一方面，混合办公常态化，由此引来了许多传统 IT 安全管理未曾接触和考量的领域，使得企业的攻击面呈指数级放大。</p><p></p><p>据《2022 年全球网络安全态势报告》中显示，51% 的人报告称商务邮件受到攻击，高于一年前的 42%；39% 的组织报告遭受了内部攻击，高于一年前的 27%；79% 的人表示遭受过勒索软件的攻击。</p><p></p><p>而从行业的角度看，微软公司 2021 年有关网络安全产品的营收纪录显示，其收入超过 150 亿美元（折合 954 亿元人民币），是最大专业安全公司 Palo Alto Networks 年营收的三倍。</p><p></p><p>巨大的需求背后，必然是急速扩张的市场。这一切都使安全问题成为 2022 年技术人与企业必须重视的话题。</p><p></p><p>那么，作为从“野蛮的数字世界”跨越到“文明的数字世界”的桥梁，<a href=\"https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/343664?fr=aladdin\">安全</a>\"究竟如何为其重构规则？</p><p></p><h2>规则一：理解零信任的核心要义</h2><p></p><p></p><p>数字化转型时代，万物互联、企业上云等场景越来越多，如果一个企业仍依赖于传统的安全防护模式，比如本地防火墙和 VPN，仅从组织的物理位置决定安全策略，就会缺乏对内部安全风险的可见性，无疑会给产品的安全性带来很大的风险与挑战。</p><p></p><p>同时，传统安全防护模式还会导致另一个问题：如果攻击者利用钓鱼攻击、身份凭证窃取等方式“混入墙内”，并默认可信，那么组织的所有资源都将面临着被攻击的风险。</p><p></p><p>因此，构建文明数字世界的第一条规则，就是采用<a href=\"https://baike.baidu.com/item/%E9%9B%B6%E4%BF%A1%E4%BB%BB/54213365?fr=aladdin\">零信任架构</a>\"。“永不信任，始终验证”是零信任架构的设计原则，换言之，宁可“错杀”万千，绝不放过其一！而理解零信任的核心要义，更是企业践行零信任架构的成败关键。</p><p></p><p>基于以上原则，微软也提出了自己的零信任架构范式：进行显式验证、使用最小权限访问以及假定数据泄露。具体来说，其认为企业不应该自动信任其内部或外部的任何人、事、物，而是在授权前，对每个访问请求都应进行完全身份验证、授权和加密。</p><p></p><p>并且，零信任安全架构还会假设数据已经泄露，攻击正在发生。因此会持续监测网络、用户、设备和应用程序，来切分其访问控制权限，缩小数据泄露的波及范围并防止用户（包括潜在的攻击者）横向移动。同时验证所有会话，均为端对端加密，通过安全可视化的分析手段，进而驱动威胁探测和加强安全防护。</p><p></p><p>在这其中，企业的 IT 系统需要采集和梳理各种“环境因素”加以综合性的风险判断，例如人员身份、物理设备的安全健康度、访问链路的可信性、是否存在恶意或可疑的应用和链接、被访问的信息的敏感等级等等。而所有这些信息需要被汇总并加以决策分析。这个时候，零信任的综合信息处理和风险分析机制就成了成败的关键。选择零信任的技术框架，更多的是在选择一个综合各种信息并加以风险判断和决策的“引擎”，这个引擎将直接影响零信任架构实施的效果。</p><p></p><h2>规则二：变被动防御为主动检测和响应</h2><p></p><p></p><p>云计算时代的到来，大大提升了安全领域的复杂度。“当客户把自己的业务迁移到云端时，也同时招来了打算攻击他们的敌人”，微软全球威胁情报与安全研究主管约翰·兰伯特说道。</p><p></p><p>如今，企业面临的安全威胁无孔不入，显然，仅靠之前发现漏洞才打补丁、类似亡羊补牢般的做法已经无法满足现在对安全的高要求。企业决策者必须建立完善的安全防护系统，从而将风险降到最低。</p><p></p><p>作为将企业安全防御“化被动为主动”的利器，主动的、全方位的威胁检测和响应以及<a href=\"https://baike.baidu.com/item/%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5?fromModule=lemma_search-box\">威胁情报</a>\"可以提前获取攻击者的攻击工具、攻击途径、攻击意图等信息，直接推动安全事件的快速响应，并在敌人攻击之前持续监控和干扰，真正做到未雨绸缪。</p><p></p><p>“XDR+SIEM”框架可以很好地帮助企业构建一个 360 度的威胁检测和响应以及现代化安全运营的体系，通过各种 Microsoft Defender 系列 “传感器”将发生在每个层面的潜在威胁或攻击行为加以采集和分析，并借助 Microsoft Sentinel 进行自动化的分析和处理，大大提升安全威胁的可见性以及安全运营的自动化程度。</p><p></p><p>微软作为云服务的提供商，实现了与企业共同承担风险。全年不间断地为客户提供智能威胁情报（Threat Intelligence）分析，检测并阻止可能威胁企业信息安全的事件。在当今难上加难的信息安全环境中，助力企业构建整体的、端对端的解决方案。</p><p></p><p>知己知彼，百战不殆，这一道理，在数字世界同样适用。而威胁情报，就是那八百里加急送来的敌情。</p><p></p><h2>规则三：创造多云的安全未来</h2><p></p><p></p><p>根据 Flexera 的 2021 云计算报告，92% 的受访者正在使用多云模式，依赖于多个云服务提供商的应用程序和基础设施。因此，对于“云计算的未来”这一称号，多云当之无愧，其为企业的创新开辟了新的机遇，帮助企业业务突破传统物理边界的同时，又提供了前所未有的创新性、适应性和韧性。</p><p></p><p>然而，新机遇也意味着新挑战，将多个不同的系统集成到一个环境中，这种广泛的技术组合可能会导致新的安全漏洞，从而使安全和合规团队的工作变得极为复杂。由另一项调查显示，73% 的企业受访者认为管理多云环境具有挑战性。</p><p></p><p>对此，微软已经迈出重要的一步，作为目前唯一一家为业界三大平台——微软智能云 Azure、AWS 和 GCP 提供原生多云保护的云服务提供商。Microsoft Defender for Cloud 提供了云安全态势管理和云工作负载保护两项功能，能够“一站式”帮助企业识别这些云厂商的配置弱点、加强整体的云安全态势，并提供跨工作负载的威胁保护。</p><p></p><p>浪费在思考多云安全性上的每一秒，都可能促成攻击者寻找新的多云漏洞。适者生存，劣者淘汰，企业要想在时代的高速发展中站稳脚跟，必须尽早拥抱多云战略，并打造适合的安全防御体系。</p><p></p><h2>规则四：全面践行端到端安全愿景</h2><p></p><p></p><p>其实，不管是上文所说的零信任架构、还是威胁情报，微软的目的都是构建全方位立体的安全战略架构，并提供端到端级别的安全愿景和技术集成。</p><p></p><p>截止目前，微软已经整合了超过 40 种云安全服务，其相应的端到端安全产品包括身份和访问管理、威胁保护、统一终端管理、信息保护、云安全管理五大部分。</p><p></p><p>全面践行端到端安全愿景，是微软如今能成为“网络安全霸主”的倚仗，也是未来将会一直做下去的事情。那么，微软还有哪些解决方案，可以帮助世界各地企业应对日益复杂的网络威胁？</p><p></p><p>10 月 13 日 -14 日，一年一度面向 IT 决策者、IT 专业人员、企业开发人员的顶级技术大会 Microsoft Ignite 来了！在这里，你将进一步了解微软安全的全局解决方案，获取真知灼见！扫码报名，与万千技术人一起，开启这场为时 2 天的云上之旅！</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/3c/3cb49d9c4df08d2705c1c5fc260de3a1.jpeg\" /></p><p></p>",
    "publish_time": "2022-09-20 11:21:22",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "敏态业务挑战下，作业帮、微盟的数据库落地与调优实践",
    "url": "https://www.infoq.cn/article/2CmuevREKcKiOmCV8qix",
    "summary": "<p>面对数字时代线上流量的冲击，业务系统访问及数据量呈指数级上升，对数据库的安全性、稳定性、高可用都提出了更高的要求。企业一方面要维持传统业务的平稳运行，另一方面，也需要应对市场急速变化带来的<a href=\"https://www.infoq.cn/article/bMsmOvuc1JKfOfulpFzC\">敏态业务挑战</a>\"。</p><p></p><p>当开源数据库已经不能满足千变万化的业务需求、国产数据库成为企业首选，自研数据库的重要性不言而喻。9 月 26 日 19:00-21:00，我们邀请了 3 位技术专家，分享数据库自研过程中遇到的技术挑战与解决之道，以及具体业务场景中数据库落地调优经验。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d1/d176abef6dfdb27915d84cd790d0ff18.jpeg\" /></p><p></p><h2>议题介绍</h2><p></p><p></p><h5>19:00-19:40《云原生下缓存架构如何演变》</h5><p></p><p>分享嘉宾：顾雅各，作业帮 DBA</p><p>议题简介：当下，随着<a href=\"https://xie.infoq.cn/article/56d409df7cd452a57f35dfe9b\">云原生</a>\"在企业应用的场景越来越多，业务程序在容器等技术的加持下，也越来越灵活，高弹性，易伸缩，多活需求的业务程序，给传统的缓存也带来了挑战，怎么演变才能更好的服务业务？</p><p></p><p></p><h5>19:40-20:20《在敏态业务场景中，微盟数据库的应用实践之路》</h5><p></p><p>分享嘉宾：余成真，微盟数据库高级技术专家</p><p>议题简介：企业级 SaaS 平台重要考量指标之一：持续创新的能力。这种以业务创新、管理创新为导向的技术创新，传导至后台支撑应用的数据库更需要具备持续变更的能力。本次分享，将从资源部署、数据赋能、灵活集成、动态扩展四个维度阐述微盟在全链路压测项目中数据库侧的应用实践之路。</p><p></p><p></p><h5>20:20-21:00《TDSQL 破局敏态业务背后的技术演进》</h5><p></p><p>分享嘉宾：刘畅，腾讯云数据库高级工程师</p><p>议题简介：TDSQL 是腾讯云发布的一款全自研的、面向企业级应用的<a href=\"https://www.infoq.cn/video/aFGc1l02v39SsT1XSEAU\">分布式数据库</a>\"产品。在敏态业务下，数据库需要具备频繁扩缩容的能力。本次分享主要介绍 TDSQL 是如何在频繁扩缩容时，不影响事务执行，做到对上层业务无感知的。</p><p></p><h2>预约报名</h2><p></p><p></p><p>本次公开课，除嘉宾分享外，直播间的小伙伴们还可以通过评论区就分享主题向嘉宾提问互动，现在扫码，即可预约直播！</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/55/5506ff5ecd9f491fa0b6b378f346b123.jpeg\" /></p><p></p>",
    "publish_time": "2022-09-20 13:11:30",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "涨得离谱、跌得也离谱，透视芯片价格“雪崩”真相",
    "url": "https://www.infoq.cn/article/IIrxAaTj0zL0vmWeDqMl",
    "summary": "<p></p><blockquote>从天上到地板，芯片价格起伏真相是什么？</blockquote><p></p><p></p><p>这两年，<a href=\"https://www.infoq.cn/article/UwQbGjGD8VfaqFL3fDk8\">芯片价格</a>\"好似坐上过了山车。</p><p></p><p>2020 年，由于产能紧缺，芯片市场出现供需失衡，部分芯片开始涨价。据新快报报道，其中当属 MCU（微控制单元）涨得最多，比如意法半导体的产品STM32F103C8T6这种大路货， 常年徘徊在每颗十元左右，但是随后在缺芯潮中，被炒至最高上百元，相当于短短大半年时间内价格暴涨将近10倍，相当夸张。</p><p></p><p>2021 年，芯片已从个别企业、个别种类、个别用途的短缺，逐步蔓延至全球范围、涉及上百个行业的全面缺货。随之而来的，是芯片价格的持续“疯涨”。以意法半导体生产的车身电子稳定系统的核心芯片 STL9369 为例，一年的时间里，价格从 20 元涨到了 2800 元，同比涨幅超百倍。</p><p></p><p>时间进入到 2022 年，一直“张涨涨”的芯片市场突然冷却了下来。与曾经的上涨行情相比，部分芯片价格开始走低，甚至有芯片价格跌到了谷底。</p><p></p><p>有业内人士评价称，芯片价格“涨得离谱，跌得也离谱”。日前，InfoQ 采访了半导体行业人士陈启，以期了解芯片价格起伏背后的真相。</p><p></p><h2>芯片价格大“雪崩”：200元降到20元</h2><p></p><p></p><p>据央视财经报道，近期芯片市场上出现了降价销售的情况，部分芯片价格降幅近九成。</p><p></p><p>其中，某一型号的芯片，在 2021 年价格维持在每枚 200 元左右，目前售价仅为 20 元左右，只有最高价的十分之一。</p><p></p><p>另一款意法半导体旗下 L9369-TR 型芯片市场报价在去年曾一度上涨至每枚 3500 元左右。L9369-TR 是一款非常特殊的车控芯片，它是博世 ESP（电子稳定程序）系统的核心芯片。2022 年，L9369-TR 芯片从高位下滑至 600 元左右，降价幅度超过 80%。</p><p></p><p>而在此之前，芯片市场还是“<a href=\"https://www.infoq.cn/article/Zq0xX5Goe9RKu0erW93b\">一芯难求</a>\"”的景象，芯片价格也一度水涨船高。</p><p></p><p>在外界看来，这轮芯片价格“雪崩潮”来得突然。但在业内人士看来，其实早在去年年底就已有价格回落的迹象。</p><p></p><p>“去年 11 月左右芯片价格基本到顶，后面开始缓慢下滑。今年上半年，由于全球经济趋于回落，一些没有实际需求支持的、纯炒作的芯片价格回归到原本的价值。其中，消费电子相关产业链的芯片，如电源管理 IC、MCU、CIS、传感器、屏幕驱动，甚至是存储芯片都成了重灾区，目前综合几个月的数据看，跌跌不休，甚至也不知道哪里才是底。”半导体行业人士陈启在接受 InfoQ 采访时表示。</p><p></p><p>据央视财经报道，工信部信息通信经济专家委员会委员刘兴亮表示，公开数据显示，（降价）集中在消费电子领域，尤其是在面板用芯片、通信用芯片、模拟芯片等众多大类芯片中，价格降幅都不小。其中，大部分近两月内跌价超过 20%，部分芯片降价超 80%。</p><p></p><p><img src=\"https://static001.geekbang.org/resource/image/13/13/13d5641b812d6a7f60f0b09148cb6c13.png\" /></p><p></p><p>一张来自中国大数据产业观察网的芯片半导体行情示意图显示，包括 MLCC（片式多层陶瓷电容器）、MCU（单片机）在内的多款消费类电子芯片市场情况不太乐观，需求疲软，价格下跌，这也佐证了陈启的说法。</p><p></p><h2>两极分化的芯片市场，大起大落的芯片价格</h2><p></p><p></p><p>为何今年芯片价格会突然“雪崩”？</p><p></p><p>分析引发芯片价格“雪崩潮”的原因，还应回归到需求端和价格端两个层面来看。</p><p></p><p>在需求端，本轮芯片价格下跌主要由于结构性失衡，芯片市场出现了两极分化的景象。“比如针对手机的芯片如传感器和 CIS，可能渠道里压了上亿颗货了，卖不出去。但针对汽车和光伏风电的高端 1200V IGBT，渠道订单接到手软，根本来不及做。”陈启说道。</p><p></p><p>陈启表示，当前需求旺盛的芯片产品主要集中在汽车电子类和新能源功率类，像高端的汽车所用到的各种车规级芯片，以及功率半导体方面的IGBT、MOS 类产品一直有很好的需求。研究背后的本质原因我们可以发现，<a href=\"https://www.infoq.cn/article/g46I00oP0GUM3ckuWWO1\">汽车电子类芯片</a>\"壁垒较高，玩家较少，因此价格一直坚挺；光伏风电等新能源功率类芯片处于景气周期，需求特别大，短期也是供不应求。特别是IGBT这种产品，由于汽车和新能源上都要用，呈现出“双轮驱动，量价齐升”的局面。</p><p></p><p>在价格端，本轮芯片价格“雪崩潮”与此前的“暴涨潮”存在必然联系。</p><p></p><p>时间拉回到 2020 年。由于产能紧缺，缺芯严重，芯片价格一路高涨，甚至有不少芯片的价格暴涨 100 多倍。</p><p></p><p>在陈启看来，当年，芯片价格之所以出现 20 年一遇的极端行情，主要有以下六方面原因：</p><p></p><p>1、半导体周期见底反弹。从 2018 年四季度开始，半导体行业景气度正式进入低谷期，按照历史经验，走完低谷期需要 18 个月左右。因此，刚好到 2020 年二季度，行业周期反转，开始回暖。</p><p></p><p>2、疫情催生出新的需求。从 2020 年一季度开始，多个国家实行居家隔离政策，促进笔记本、Pad 以及 PC 等消费电子需求快速拉升。有数据显示，当年笔记本消费量增长超过同期 70% 以上。以笔记本为例，需求大涨快速拉动了电源管理 IC、显示驱动 IC、CPU、内存、网卡芯片、声卡芯片、无线芯片、蓝牙芯片等产品的需求量。</p><p></p><p>3、产能挤兑，引发抢单大战。受当时国际形势影响，部分企业囤积大量芯片，进而引发全行业的抢产能挤兑大潮，打破了芯片工厂的产能供需平衡。</p><p></p><p>4、芯片工厂大灾小难不断，加剧行业焦虑。从全球来看，地震、大火、暴雪、停电等多场灾难，导致不少芯片工厂出现不同程度的停工停产，影响产能。</p><p></p><p>5、车企错误预估需求，火上浇油。疫情催生出大量汽车消费需求，而随着需求从传统燃油车转向新能源汽车，车规芯片需求量大增。与消费级芯片相比，车规芯片安全性、可靠性要求更高，认证周期较长，并且短期内消费级芯片无法平移到车上。也因此，即便在当下，车规芯片仍处于缺芯、高价阶段。</p><p></p><p>6、终端价格被热钱炒上天。芯片短缺、价格暴涨引发大量投机客参与其中，又反过来不断推高价格。不少芯片的原厂价半年涨了 50%，但是在终端驱动内价格可能超过涨了 200%，大量芯片被囤积在渠道商手上。</p><p></p><p>而现在，半导体行业周期由暖转冷，疫情催生的电子产品需求已经冷却，产能也不再出现挤兑，热钱退出……这些都给行业泼了一盆冷水，因此不少芯片产品在价格端发生变化，回归理性。</p><p></p><p>总体而言，陈启认为，应理性看待本轮芯片价格下跌潮。</p><p></p><p>一方面，虽然此前不少芯片原厂价格确实有所提高，但更多的加价发生在渠道端。当前，部分芯片供需存在结构性失衡，渠道库存积压严重，芯片价格也逐步回归到加价前的水平，属于正常回归。另一方面，本轮芯片需求萎缩属于全球性挑战，相比其他地区，国内行情相对较为坚挺。</p><p></p><h2>半导体产业走到转折点？</h2><p></p><p></p><p>芯片价格大幅波动，是全球半导体产业大变局下的一个缩影。</p><p></p><p>当前，全球半导体产业正来到转折点。</p><p></p><p>8 月 9 日，美国正式签署<a href=\"https://www.infoq.cn/article/SS8RFtU37FI6Ay7l1aVK\">《2022 年芯片与科学法案》</a>\"（以下简称“法案”）。法案将为美国半导体的研究和生产提供 527 亿美元（约合 3667.8 亿元人民币）的政府补贴，还将为芯片工厂提供投资税抵免，试图提升美国的芯片技术研发和制造能力。值得一提的是，其中不少条款明确限制有关芯片企业在中国开展正常经贸与投资活动。</p><p></p><p>8 月 12 日，美国商务部工业和安全局（BIS）在联邦公报上发布了一项临时最终规定，将 4 项“新兴和基础技术”加入出口管制清单，其中 3 项涉及半导体，并包括“设计 GAAFET 架构（全栅场效应晶体管）的先进芯片 EDA 软件工具”（该工具主要用于 3nm 及以下芯片设计）。EDA 是电子设计的基石产业，业内称之为“芯片之母”，在芯片设计链条中起到非常重要的作用。断供 <a href=\"https://www.infoq.cn/article/NlZfp5jdKAOm8pzE7KfD\">EDA 软件</a>\"后，先进制程的芯片设计必将受到限制。</p><p></p><p>国内半导体产业亦不平静。</p><p></p><p>7 月底，国内半导体行业掀起一场反腐风暴， 多位行业重量级人士被查。在二级市场，部分芯片股遭弃购、上市即破发。在一级市场，芯片企业估值缩水、融资困难、停止运营等现象屡见报端。</p><p></p><p>4 月 17 日，纳芯微披露了一则巨额弃购公告，本次发行股数 2526.6 万股，网上投资者放弃认购数量 338.15 万股，弃购股数占本次发行总量比例 13.38%，弃购金额为 7.78 亿元，占本次网上发行总数的 38.76%。</p><p></p><p>4 月 12 日，唯捷创芯在科创板上市，发行价为 66.6 元/股，上市首日跌幅达到 36.04%。7 月 15 日，中科蓝讯登陆科创板，发行价为 91.66元/股，收盘跌幅达29.85%。</p><p></p><p>有分析师悲观地预测，2023 年全球芯片市场将出现不可逆的极度衰退。花旗分析师 Christopher Danely 更是预计，芯片行业的下滑将是至少十年甚至二十年来最严重的。他指出，每一家公司和每一种芯片产品都可能受到影响。</p><p></p><p>“我理解分析师的悲观看法，他的悲观是有一定道理的。当前芯片产业链的确存在因为混乱而引发的衰退现象，全世界也都面临高通胀和低增长挑战。高通胀一过，很容易引发长期低迷，直到下一个现象级的需求出现，才能拉动经济。”在陈启看来，每个行业都会有这样一个从狂热到冷静，再到泡沫出清的阶段，属于正常现象。</p><p></p><p>虽然当前全球半导体产业风云变幻，但这几年，芯片国产化成果还是有目共睹的。</p><p></p><p>大概从 2014 年开始，国内开启了芯片国产化替代潮。不到十年时间，从无到有，从有到优。虽然当前最先进制程的高端芯片全套工艺以及设备国产化存在一定难度，但中低端芯片已经基本实现了自给自足。</p><p></p><p>“这几年，芯片国产化的成果有目共睹，这也是全体半导体行业上下游共同努力的结果，下游给机会，上游能进步。一方面，资本以及其他生产关系资源进入到了半导体行业，形成良性循环；另一方面，下游客户态度发生了巨大改变，从过去的不敢用、不敢试，到现在的敢用、敢试，上游供应环节也从简单的打价格战，变成了靠产品综合实力打天下，靠技术赚钱，靠实力拿订单。这种产业链上下游态度上的转变，带来的影响力是巨大的，是正面的。”陈启说道。</p><p></p><h2>“后摩尔定律时代”，Chiplet 技术站上风口</h2><p></p><p></p><p>大起大落的芯片价格，让参与者们见证了一个完整的半导体周期。对于像半导体这样的周期性产业，如何穿越周期，走向更远的未来，是摆在每个厂商面前的难题。</p><p></p><p>有观点认为，在“后摩尔定律时代”，Chiplet 或许是一个不错的选择路径。</p><p></p><p>Chiplet 通常被翻译为“粒芯”或“小芯片”，它并不是一个新鲜的概念。早在 2015 年，Marvell 创始人之一周秀文(Sehat Sutardja)博士就曾提出 Mochi(Modular Chip，模块化芯片)架构的概念，这也是 Chiplet 最早的雏形。</p><p></p><p>陈启介绍，Chiplet 包含异构集成、小芯粒和系统集成三个概念。</p><p></p><p>“异构集成是为了把 GPU、AI、CPU 以及 DRAM 之类不同的芯片融合到一起，甚至硅基和非硅基的芯片进行融合；小芯粒是相对 SoC 大核而言，把大核 SoC 各个功能区 IP 拆分重排，并且分开流片，在设计效率和制造成本上找平衡；系统集成包含软集成和硬集成，软集成包含系统级软件和操作系统，以及总线互联标准，它是把芯片设计从更高的系统角度去看，重新定义一款芯片的诞生，硬集成就是 2D/2.5D/3D 先进堆叠封装。”</p><p></p><p>今年以来，Chiplet 概念爆火，并被业界寄予厚望，有观点认为 Chiplet 将成为摩尔定律的“拯救者”。</p><p></p><p>随着摩尔定律趋缓，芯片制程设计实现难度更高，流程更加复杂，成本也大幅提升。光大证券近期研报表示，Chiplet 可以将一类满足特定功能的 die（裸片），通过 die-to-die 内部互联技术实现多个模块芯片与底层基础芯片封装在一起，形成一个系统芯片，以实现一种新形式的IP复用。可以大幅提高大型芯片的良率；有利于降低设计的复杂度和设计成本；有望降低芯片制造的成本。</p><p></p><p>科技巨头们已经敏锐地嗅到了这样的趋势，并开始谋划未来。</p><p></p><p>2022 年 3 月，英特尔、AMD、ARM、高通、台积电、三星、日月光、Google 云、Meta、微软等十大行业巨头联合成立的芯片产业联盟共同成立了 Chiplet 标准联盟，正式推出了通用 Chiplet 的高速互联标准“UCIE”。2022 年 8 月，华为、AMD、英特尔积极布局 Chiplet 并推出相关产品。</p><p></p><p>“凡是能正确理解后摩尔时代的 Chiplet 概念的公司，都能穿越周期”。陈启认为，现在设计芯片不再是简单的做芯片，而是要更多地考虑生态问题。在未来，芯片设计需要从整个系统角度来进行考虑和定义，要融合更多的技术和概念。”</p>",
    "publish_time": "2022-09-20 14:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "AI项目到底适不适合开源？| InfoQ《极客有约》",
    "url": "https://www.infoq.cn/article/LcokhPtvWFDAzgiA4H8s",
    "summary": "<p>到2022年，人工智能已经发展10年，我们谈论人工智能不再局限于理论。工业界需要应用人工智能去解决问题，学术界需要模型在大规模应用场景下的反馈。然而随着技术的演进，我们发现，基于开源算法的人工智能项目陷入了“落地难”的困境，“从98%到99.9%精度”的过程尤其难，于是业内就有了“人工智能或许不适合开源”的声音。</p>\n<p>于是，本期极客有约我们邀请到了联通研究院的霍龙社博士，听他给我们分析当下人工智能开源项目的现状与未来，共同探讨下“人工智能到底适不适合开源”，并一起了解下，为推动5G与AI融合创新，中国联通在2019年发布CubeAI智立方平台后的技术演进与思考。</p>\n<p><strong>视频大纲：</strong><br />\n破题：人工智能技术到底适不适合开源？<br />\n深入：CubeAI智立方在人工智能开源方面做了哪些努力？<br />\n展望：人工智能行业的未来发展</p>\n<p><strong>采访嘉宾</strong><br />\n霍龙社博士，联通研究院，联通开源至启智社区项目“CubeAI智立方”（ AI算能服务平台）负责人。</p>",
    "publish_time": "2022-09-20 14:53:15",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "刘东杰：建行学习平台数字化创新与实践 ｜ DTDS 8 月",
    "url": "https://www.infoq.cn/article/X2mW3bxyti64FZ97DSBw",
    "summary": "<p>在工业和信息化部人才交流中心和中国移动通信联合会教育与考试中心的大力支持与指导下，由极客时间企业版、培训杂志共同举办，甫瀚咨询联合举办的 DTDS 全球数字人才发展线上峰会于 8 月 9 日拉开帷幕。</p>\n<p>经过多年在企业数字人才发展领域的耕耘，极客时间于 2022 年发布了数字人才粮仓模型，深入定义了五层数字人才，收获了来自各行各业的企业客户的认可。我们也看到许多企业都在加大对数字人才的培养，并且希望向行业标杆学习，完善自己的数字人才培养体系，融入数字人才标准和生态。</p>\n<p>为此，DTDS 峰会汇聚了来自政府和产业的权威，以及金融、汽车、制造、ICT、零售、互联网、风控审计企业的数字化先锋人物，旨在建立数字人才培养“朋友圈”，让大家从多维视角了解企业数字化转型，人才发展，和组织变革的先进经验。</p>",
    "publish_time": "2022-09-20 14:53:50",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "深度deepin开源自研编程语言 Unilang",
    "url": "https://www.infoq.cn/article/z4OQGFIVFG78Ui9w1Sgy",
    "summary": "<p>近日，深度<a href=\"https://xie.infoq.cn/article/9f10456c1abce8c09d734c936\">deepin</a>\"正式公开了自研全新通用目的编程语言——Unilang，包括相关的文档和一个解释器。</p><p>&nbsp;</p><p>deepin方面表示，虽然业界虽然已经有了很多较为成熟的桌面应用开发方案，例如 <a href=\"https://xie.infoq.cn/article/b3ca56add71847123ede923bf\">Qt</a>\"、Electron、PySide 和 <a href=\"https://www.infoq.cn/article/A1kuPWmvRLZgykVe7qXb\">Flutter</a>\" 等，但各个方案均有着各自的痛点，没有任何一种现有方案能兼顾各种不同的问题，而成为没有疑义、众望所归的桌面开发首选方案。</p><p>&nbsp;</p><p>造成这种局面的一个技术理由是，许多方案设计过于专注具体需求而缺乏考虑语言长期演进的普遍因素，使其在预期目标领域之外的适用性急剧下降，通用性不足。当应用领域和预期略有偏差或暴露原有设计的局限性时，用户即便懂得如何改进一个语言，也会在语言二次开发上遇到困难，从而被迫放弃。</p><p>&nbsp;</p><p>因此，deepin 希望有一种语言可以尽快解决各个方案中存在的痛点，能极大程度帮助到因语言二次开发遇到困难而被迫放弃的开发者，以更深刻的方式、真正实现“通用性”。</p><p>&nbsp;</p><p>于是在2020年4月，deepin决定开发“自己的语言”，进一步往上做GUI框架；2020年6月，经调研分析后，deepin 创建 Unilang 仓库，提交了第一行代码；2021年3月，deepin 基本实现了 2020年决定设计的主要特色内容，着手研究目标代码生成方案；今年9月，deepin正式公开了全新的通用目的编程语言Unilang。</p><p>&nbsp;</p><p>根据官方介绍，Unilang 的主要特点包括：</p><p>&nbsp;</p><p>作为动态语言，提供相对其它语言更强的语言层次上的可扩展性。支持类似 C++ 的对象模型和（当前不被检查的）不安全所有权语义。不要求全局 GC ，同时语言的一个子集允许和 C++ 同等层次的“不安全”但能确保确定性的资源分配。支持正式意义上的&nbsp;PTC&nbsp;，而不需要用户程序内对栈溢出等未定义行为进行变通。使用隐式的潜在类型(latent typing)&nbsp;而非显式的清单类型(manifest typing)&nbsp;。</p><p>&nbsp;</p><p>为了保持通用性，Unilang 不内建提供 GUI 功能，而通过库提供相关 API 。当前计划中，Unilang 将会支持基于 Qt 绑定的库，以便衔接过渡现有的一些桌面应用项目。Unilang 的语言设计保持足够的抽象能力和可扩展性，未来支持直接实现 GUI 框架。</p><p>&nbsp;</p><p>另外，Unilang 在语言特性的层次上被设计为能支持不同的应用开发场景，但原则上对这些场景保持中立。这意味着，它可以同时支持服务端和客户端应用的开发，不需要用户切换思维范式或者大幅更改对语言的使用习惯。</p><p>&nbsp;</p><p>更多资料：</p><p><a href=\"https://github.com/linuxdeepin/unilang/blob/master/README.zh-CN.md\">https://github.com/linuxdeepin/unilang/blob/master/README.zh-CN.md</a>\"</p>",
    "publish_time": "2022-09-20 15:00:08",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "接手了一座年收入2000万美元的代码“屎山”，我到底是该重写还是该跳槽？",
    "url": "https://www.infoq.cn/article/vSyeA3RUo9CF4bc60jad",
    "summary": "<p>近日 <a href=\"https://news.ycombinator.com/item?id=32883596\">Hacker News</a>\"上有一则帖子热度非常高，其主题是：我接手了一份极其糟糕的代码和一支技术团队，接下来该怎么办？</p><p>&nbsp;</p><p>他给出了一份概述：</p><p>&nbsp;</p><p></p><blockquote>该代码每年产生超过 2000 万美元的收入。已经在生产环境中直接开发了 12 年，没有源代码控制 (hello index-new_2021-test-john_v2.php)。从未删除任何代码。只是不停添加东西。可能是因为直接在生产环境中开发的，删除东西风险太大。&nbsp;在 PHP 上运行，没有 MVC或任何其它模式。没有模板库。它是 PHP 2003 风格。JS和CSS是一样的。多个版本的 jQuery 会根据您所在的页面或什至在同一页面上相互竞争。它不使用composer或任何依赖管理，都是require_once。也不使用任何框架。&nbsp;在许多地方，控制器（如文件向其自己的 rest API（通过域名，而不是本地主机）发出 curl 请求）进行 oauth 授权等......只是为了获取菜单项或产品列表......&nbsp;路由仅作为 Nginx 中的重写进行管理（Nginx 配置约为 10,000 行）。数据库结构乱，没有迁移等...添加列时，由于数据量大，他们添加了一个带有连接的新表。没有缓存，但有 memcached ，仅用于会话......</blockquote><p></p><p>&nbsp;</p><p>题主还表示他的团队目前只有3人，还都相当初级。一个后端，一个前端，一个iOS/android。生产力非常糟糕。变革的阻力巨大。该业务部门作为管理层制定了非常激进的路线图，而总部对这些阻碍因素没有真正的了解。</p><p>&nbsp;</p><p>代码会随着时间的流逝变得越来越差，而且复杂繁多的应用程序往往牵一发动全身，更改代码存在一定风险，在这种情况下，从头开始重新编写代码看起来是个不错的主意。</p><p>&nbsp;</p><p>他本人也认为这种糟糕的代码，完全<a href=\"https://www.infoq.cn/article/twdh1gv1iq9hechqti54\">重写</a>\"是必要的，但在 COVID 之后，预算真的很紧张，他不知道该如何平衡，所以在Hacker News上将问题抛了出来。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/29/2913c37f92ee04b7a75b2d9b892aebe7.png\" /></p><p></p><p>&nbsp;</p><p>没想到帖子发出一天多，总共得到了650多条建议，很多人有过类似经历，所以其中不乏详实具体的回复，但是也存在一些明显的分歧：</p><p>&nbsp;</p><p></p><h4>建议一：不要考虑重写了，赶紧跑路才是正常的</h4><p></p><p>&nbsp;</p><p>从头开始<a href=\"https://www.infoq.cn/article/xgcxvrgri8umegqiqctl\">​​重写</a>\"是一个坏主意，尤其是在业务做得很好的情况下。</p><p>&nbsp;</p><p>如果“此代码每年产生超过 2000 万美元的收入”，那么从商业的角度来看，这里的投资回报率是疯狂的，这份代码简直是一只下金蛋的鸡。</p><p>&nbsp;</p><p>就算它很陈旧，对业务人员而言，也是没有任何问题的......因为他们已经建造了一台印钞机。商务人士根本不在乎代码质量，他们在乎价值。如果 2003 风格的 PHP 代码能做到，那就这样吧，忘记重写这回事儿。</p><p>&nbsp;</p><p>从他们的角度来看，源代码控制、依赖管理、框架、Nginx 之外的路由等……相对 2000 万美元来说，并不重要，所以很难说服他们。因此，重写不仅是一项技术挑战，更是一项政治挑战。</p><p>&nbsp;</p><p>贴主必须同时解决文化问题和技术问题，该过程的每一步都将是一场艰苦的战斗，即使成功了，也可能不会有人注意到，因为应用程序看起来是一样的。只有在市场份额和收入开始下降时，变革的欲望才会出现，届时可能为时已晚。</p><p>&nbsp;</p><p>“很多人都在给你技术建议，他们很棒，但现实是除非你在执行层面有权力，或者作为他们信赖的高管来推行重大改变，否则就是在浪费时间。作为中层管理人员或开发人员来执行变革是行不通的，而且会付出巨大的个人成本。而且代码拖成这样，是不重视工程文化的表现，遇到这种情况，如果我还是一位年轻人，可能会留下来并试图成为无名英雄，但现在我年纪大了，我对这种愚蠢行为嗤之以鼻。”作为一名资深开发，swat535给出了他的建议。</p><p>&nbsp;</p><p>不少人对此表示赞成，认为改变环境是困难的，建议再找一份新工作，“如果高层给出的答案含糊不清，或者有什么东西闻起来不对劲，就应该马上跑路。”</p><p>&nbsp;</p><p>“他们从 3 个廉价开发者那里获得了 2000 万美元的收入，据公司称，目前进展还顺利，那么他们不会吸取到什么教训。一旦事情搞砸了，负责人肯定会受到指责。我的选择是退出，因为我也曾处于类似的情况。”另一位有同样遭遇的人说道。</p><p>&nbsp;</p><p></p><h4>建议二：不要完全重写</h4><p></p><p>&nbsp;</p><p>也有人认为贴主在假设自己对原始团队和技术非常了解，但事实上新加入的开发人员通常并不知道应用程序为什么会演变成这个样子。</p><p>&nbsp;</p><p>“如果不知道为什么，那么就算从头重写，也有可能导致新系统比旧系统更糟糕……”lumost举例说，“我曾在一家广告技术初创公司工作，当收入达到约 1 亿的时候，公司更换了技术团队。新的技术团队震惊于奇怪的旧技术，于是将代码库重写为 ruby​​ 微服务。为了加速重写/架构迁移，该团队甚至阻止在旧程序上进行投入。不可避免地，生产力直线下降，公司的收入开始下滑。该公司最终对该技术团队再次进行了深度整顿，这个过程实际上花费了他们整个 D 轮融资以及 3 年的产品开发时间。”</p><p>&nbsp;</p><p>也就是说不了解整个情况的话，一旦重写失败，沉没成本会相当昂贵。所以，一些网友认为，在有每年2000万的收入的条件下，进行完全重写是不应该被考虑的事情。但是贴主可以使用一些严肃的技能，做一些风险系数小的改变：</p><p>比如Fork分支，小增量的推出更多的功能。如果该领域存在竞争对手，此举能给自己带来市场上的优势。在尝试做出重大转变之前，可以引入一堆新的实践和模式，进行一些必要的更改。比如不改变代码结构的条件下，利用git对代码库，以及每个成员团队的职责进行更高效和更多的控制；对新加代码增加注释；建立分支进行测试；建立CI/CD自托管工具；在有测试和CI/CD测试数据库迁移....可以试图解决一些性能和用户体验上的问题，比如利用现代框架重写前端，让管理层和客户兴奋之后，再逐步重构后端（此时，更多的测试覆盖率可能会派上用场）。</p><p>&nbsp;</p><p></p><h4>建议三：如果不能完全重写，那还是赶紧跳槽吧</h4><p></p><p>&nbsp;</p><p>典型的建议是永远不要重写，但也许重写会让问题变得更简单。</p><p>&nbsp;</p><p>维护古老的方法和技术对初级开发人员来说是职业生涯倒退，而且如果这份代码是一个企业的收入引擎，那么需要采取保守但果断的行动，否则有可能让当前的情况变得更糟。“只要业务继续运​​作，总会有最重要的事情进来。当添加越来越多的代码时，痛苦只会不断增加。”</p><p>&nbsp;</p><p>“我在一个稍微小一点的团队中遇到了几乎完全相同的情况，并且也是值500万美元的PHP应用。我们对 Django 进行了完整的重写，花了 2 年时间，经历过难以言喻的政治痛苦，但绝对是正确的选择。遗留代码无法保存，团队中的每个人都同意这一点——这意味着我们没有内部斗争。为了获得支持，我们从非常小的项目开始，将其作为我们一些工程师的‘20% 项目’。在级别设置 auth、CI/CD 和基础设施的东西之后，我们从一个常用的功能开始，将旧的 PHP 页面重定向到新的基于 python 的页面，逐渐用新程序替换掉了旧功能。”</p><p>&nbsp;</p><p>“最终，我们有足够的证据表明替换是好的（响应能力大幅提升，升级 UI 对用户十分友好等），我们有幸使这个项目成为一个更大的项目，并极大地降低了成本和复杂性，能够以敏捷的方式为业务提供真正有影响力的东西。随着项目的成功，我们得到了高层领导的体面支持。”</p><p>&nbsp;</p><p>“但是，不是所有领导都愿意为此花费大量的政治资本，而且还需要自己团队100% 的支持和参与。如果达不到这样的条件，你应该辞职，去一个更舒服的地方。简而言之，如果领导层不了解他们处于不可持续的境地，并且不愿意投入时间和金钱来修复它，那么<a href=\"https://www.infoq.cn/article/2009/11/refactor-rewrite\">重写或重构</a>\"的可能性为零。”</p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://news.ycombinator.com/item?id=32883596\">https://news.ycombinator.com/item?id=32883596</a>\"</p><p>&nbsp;</p><p>&nbsp;</p>",
    "publish_time": "2022-09-20 15:09:11",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "只擅长构建软件是不够的，我们必须擅长构建可测试的软件 | QCon",
    "url": "https://www.infoq.cn/article/SxEUUtjMIWxc2cvJGZK4",
    "summary": "<p>我坚信下面这个说法是对的：</p><p></p><p>在验证具有同等复杂性的软件系统的难度方面，可能存在数量级的差异。</p><p></p><p>这种说法并非夸大其词。虽然我们无法精确地衡量验证难度（比较两个不相关系统的相对复杂性具有高度的主观性），但我仍然认为，整体工作量差异可能是数量级的。如果验证一个系统需要一个小时，那么验证另一个系统可能需要 100 多个小时。这种信念来自于我在过去的 22 年里观察并参与了数十家公司数百个系统的开发和测试。</p><p></p><p>有人会觉得这怎么可能？软件的设计和实现可能很糟糕，但这只会导致 50% 或最多 100% 的难度差异，不是吗？怎么可能将软件实现得如此糟糕，以致于出现数量级的差异？</p><p></p><p>我希望我能介绍三种保证让你的系统更可测试的设计模式，然后详细介绍每一种模式。然而，我们的问题没那么简单。如果创建可测试的软件系统像使用设计模式一样容易，那么我们都已经在享受高度可测试的软件了，我也不需要写这篇文章了。</p><p></p><p>相反，我将试图说明这种巨大的难度差异确实存在，以及为什么它很重要。然后我将谈论为什么质量保证（即整个测试软件的规程）不仅存在不足，实际上还会使问题变得更糟。这将催生针对测试质量的一种简单但不一样的观点，这种观点将自然而然地促进更多<a href=\"https://mp.weixin.qq.com/s?__biz=MzIzNjUxMzk2NQ==&amp;mid=2247522036&amp;idx=1&amp;sn=14bc6de454b70f043618aef4de7bc694&amp;chksm=e8d46936dfa3e0208321e291ed9cec0a82aa00136354618e2703963f73821e81c6e380dbaa82&amp;scene=27#wechat_redirect\">可测试的系统</a>\"和更可预测、更有效的软件交付的出现。</p><p></p><p></p><h3>不可测试软件的表现</h3><p></p><p></p><p>为了说明可测试性的巨大差异，我会详细描述两个分别位于可测试性频谱两端的软件系统。首先会描述整个架构、系统设计层、系统中每个组件的实现、使用的技术栈、与其他系统之间的边界交互、数据模型、持久化策略，可能还有更多其他东西。然后，我将详细介绍验证策略、测试数据管理、为不同类型的测试实现自动化的时间和做法，以及可以在 CI 管道的哪里运行。接着，我将说明架构、设计、实现和技术栈决策的细微差别，以及它们如何聚在一起创造出令人沮丧的验证体验。将这两个等价的系统——一个非常不可测试，另一个非常可测试——放在一起，希望能让你相信可测试性之间是存在数量级差异的。</p><p></p><p>上述的每一项描述其实都可以写成几十页，但此处幸运的是这是一篇博文，而不是一本书。</p><p></p><p>因此，我必须采用一种更简洁的策略：我将描述各种难以测试的软件的症状，你可能已经遇到过的挫折和挑战，并做出了退步，让你相信某些软件更具可测试性。我希望通过对这些表现和经验的反思，让你了解它们并不是每个人在正常软件交付中都要面对的挑战，它们只是表明某些事情出现了问题的坏味道。</p><p></p><p>所有这些都是真实的例子，来自真实团队构建的真实软件。以下是一些难以测试的软件的症状，排名不分先后。</p><p></p><p>测试数据准备和维护噩梦：准备、清理和管理测试数据异常复杂，并消耗大量的验证时间。测试数据是一个很大的类别，包括测试所依赖的每一种状态：数据库特定的行和值、具有特定权限的特定用户、股票中具有特定属性的特定项、配置值等。管理这些测试数据是测试的一个重要组成部分，但在难以测试的系统中，确定和有效地控制数据是非常具有挑战性的，甚至是完全不可能的。</p><p></p><p>不幸的是，即使在架构良好的系统中，对于测试人员来说，根据测试需要管理系统状态和测试数据也是非常具有挑战性的。</p><p></p><p>回想一下，有多少次，你花了几个小时甚至几天的时间，只是为了准备数据来重现一个棘手的 Bug 或一个罕见但关键的边缘情况？在一个系统中测试一个东西需要花费数天时间，而在另一个系统中同样的测试可能只需要数小时，这就是我所说的数量级差异的一个例子。令人沮丧的是，数据管理难只是造成这种情况的一个原因，而且是难以测试的系统的常见症状。</p><p></p><p>副作用（Side Effect）执行验证：当测试不能直接确定结果，但必须依赖验证对象不那么可信、不那么明确的副作用时，就会出现这种症状。例如，如果系统处于 ABC 状态，我们执行 XYZ 动作，那么它应该会导致结果 R。不幸的是，我们不能直接观察到 R，所以我们必须找到 R 的副作用，而不是 R 本身。</p><p></p><p>根据副作用执行验证经常出现在可观测性较差的系统中。然而，仅仅因为一个系统的架构具备可观测性，并不意味着从验证的角度来看它也是可观测的，而且也不会受到这个问题的影响。例如，许多系统都是由高度可观测的独立组件组成的，在测试时需要将这些组件之间的事件关联起来，但不存在这样的机制。虽然单个组件是可观测的，但作为一个整体的系统是不可观测的，这严重影响了可测试性。</p><p></p><p>一个更简单并更常见的例子是在测试时需要通过抓取系统日志来读取系统状态。可测试的系统不要求测试通过获取日志文件来验证其行为，这么做会导致一个系统中的一些简单而可靠的事情在另一个系统中变得非常乏味和不可靠。</p><p></p><p>对人工测试的需求：如果在测试时必须将自定义功能引入到生产代码中，就会出现这种情况。例如，服务端点、数据注入 / 收集机制或配置选项。这些代码存在的唯一理由是用它们来支持测试，这么做是必要的，因为实际的系统非常难以测试。虽然加入一些小测试挂钩不一定总是坏事，但为了支持测试被迫加入大量的人工测试是难以测试的软件的一个症状。</p><p></p><p>畸形的测试金字塔：当测试套件由于系统的特质而被迫过度依赖某种类型的测试来进行大多数验证时就会出现这种症状。这一问题的常见形式是 UI 驱动的端到端测试与其他较小的测试（通常称为“倒金字塔测试”）的数量不成比例。</p><p></p><p>这并不是因为自动化系统需要进行端到端 UI 测试，而是因为被测试系统的某些方面不得不通过 UI 进行强制验证，可能是糟糕的 API 设计、专有的传输协议、糟糕的类设计、过于复杂的数据模型或其他的原因。就像透过钥匙孔窥视大房间一样，测试只能透过一个小透镜访问系统，它们被系统的特质所阻碍，无法碰到更合适、更有效的交互点。</p><p></p><p>必须部署、设置有效的大型（可能是共享的）测试环境来验证行为——因为所有的测试都是端到端测试，当某种行为只需要系统的一小部分时，这就是一种浪费，也是难以测试的软件的常见症状。</p><p></p><p>测试环境稀缺 / 资源争夺：当底层架构或系统的其他方面导致将系统复制到测试环境或快速部署新环境变得具有挑战性或不可能时，就会出现这种症状。</p><p></p><p>例如，很多系统中可能包含了来自 SAP 或 Oracle 等供应商提供的企业 ERP 或 CRM 软件实例。这些组件代表了整个系统的核心功能，但因为实例受限（由于许可或自定义硬件需求），不得不在环境之间强制采用多租户方法（即跨测试环境共享 ERP 系统的实例）。虽然我们可能无法消除对第三方组件的依赖，但任何阻止低成本和快速部署新环境的行为都会降低可测试性。</p><p></p><p>此外，在环境之间共享组件实例引入了各种新的测试数据管理问题，这是对可测试性的另一个负面影响。</p><p></p><p>时间依赖：当测试或自动化测试以某种方式与系统的真实时钟相关联时，就会出现这种症状。例如，假设一个系统在一天的特定时间批处理一些数据，并且不能人为地触发处理事件，或者如果被触发，将对系统的其他区域产生不必要的影响。因此，对这个处理功能的任何测试都必须确保它与真实世界的时间是同步的。</p><p></p><p>这个例子看起来似乎不是很自然，而且显然是一种糟糕的架构，但对于大型的企业软件系统来说，与非自动化过程或与关联了时间的过程发生交互是很常见的，这些交互严重阻碍了可测试性。</p><p></p><p>我想那些有验证现代软件经验的人应该会认同，想想你们有多少次碰得头破血流，只是为了尝试验证系统里的那些看起来很容易的部分！或者你们花很多时间调试一个失败的测试用例，只是为了重新运行它，并让它通过，却不知道发生了什么。你们应该对难以测试的软件的痛点深有体会。</p><p></p><p>许多专业人士可以接受这些情况，因为它们太常见了。他们假设处理不可管理的测试数据、使用有限或共享的测试环境、根据副作用执行验证或依赖自定义测试挂钩是必要的，或者至少是正常的。他们只验证过难以测试的软件，所以这已经成为了一种期待，成为一种可接受和忍受的东西。他们从来没有验证过真正可测试的系统，所以不知道拿什么与之对比。</p><p></p><p>然而，导致这些症状的根源并不是测试人员或测试方法，并不是因为他们使用了错误的工具，或者他们不够聪明。根本原因是系统难以测试。他们被要求解决这些棘手的问题，他们不得不去解决。他们认为这是他们的工作，并尽他们所能做到最好。</p><p></p><p>这些可能是难以测试的软件数百种症状中的一小部分。每一种症状看起来都是一个痛点，一个挑战，但归结起来，它们会产生数量级的差异。难以测试的软件是真正的噩梦！</p><p></p><p></p><h3>为什么可测试性很重要</h3><p></p><p></p><p>我们来看一下为什么这个问题很重要。</p><p></p><p>如果软件交付可以被分为 999 个开发部分和一个验证部分，那么这个问题就不那么重要了。即使在极端情况下，由于系统的不可测试性导致 1 个验证部分变成了 20 个，与软件的开发成本相比仍然不值一提。如果我们把精力放在优化 999 个开发部分上，会获得更好的效果，并且完全有理由忽略 1 个（或 20 个）验证部分，它们在整个问题中所占的比例并不大。</p><p></p><p>我想你们不会认为 999 与 1 这种比例分配是对的。虽然将软件交付分为“开发”和“验证”两个部分是很自然的，并且有一百万个影响变量，但我认为开发工作和验证工作之间的正确比例可能更接近 1 比 1。然而，具体的数值并不重要，重要的是你要知道验证是交付软件整体工作的重要组成部分。</p><p></p><p>因此，验证工作在复杂性方面存在数量级的差异，这是有问题的。如果开发和验证的比例是 50 比 50，而验证的成本高达 500，那么你就不可能交付软件了。</p><p></p><p>这么大规模难度的增加意味着所有有效交付软件的工作都可能被验证工作所抵消。考虑到验证的巨大负速度影响，所有用于提升团队效率的努力都可能是毫无意义的。如果我们不能控制软件的可测试性，所有的交付日期都将是猜测，评估技术变得完全无用。</p><p></p><p>如果你以任何方式参与了软件交付，这些应该会让你感到害怕。软件的可测试性可能是你的致命伤。这就是为什么软件的可测试性很重要。</p><p></p><p>如果我们不解决验证问题对软件交付的巨大影响，而只是把它藏起来或扔给一群不知情的“质量保证”人员，我们将无法有效、可预测地交付高质量的软件。只是擅长构建软件是不够的，我们必须擅长构建可测试的软件。</p><p></p><p></p><h3>低效的质量保证</h3><p></p><p></p><p>质量保证是软件测试的规程，一个深刻、广泛且不断发展的领域。它也极具挑战性，要求测试人员具备分析能力、批判性思维、解决问题的能力、创造力和强大的工程技能，再加上一整套软技能：沟通能力、影响力、解决冲突能力等。从这一点上讲，我非常敬佩这些质量保证专业人士。</p><p></p><p>不幸的是，按照传统做法，质量保证在验证现代软件方面存在不足。原因是什么？因为质量保证的问题范围定义是从要测试的软件开始的。就好像是说：对于这个软件，我们该如何最有效地测试它？我们如何建立这个软件一定会为客户带来价值的信心？对于质量保证来说，软件（无论是规范还是实现）都是问题的来源。</p><p></p><p>这种思想是短视的，它过于狭隘地关注被测试的软件。因为软件可测试性存在巨大的差异，所以有关软件质量的主要问题应该是如何最小化测试软件所面临的挑战。如果软件难以测试，那么质量保证策略——无论多么深思熟虑、富有洞察力或创造性——都不会有效。再多的质量保证也不能避免数量级的可测试性问题。</p><p></p><p>换句话说，质量保证可以指导我们如何高效、有效地测试软件，但是当软件无法测试时，质量保证就无能为力了。</p><p></p><p>一些软件质量保证专家可能会反驳，他们声称左移、持续测试和内建质量这些概念包含了相同的想法。然而，所有这些关注的都是质量，而不是可测试性。他们认为应该尽早进行测试，或者经常进行，或者持续进行，这样就可以尽早（甚至在规范中）发现缺陷或从一开始就避免出现缺陷。虽然它们都是值得称赞的策略，并且都是健康测试方法的一部分，但都无法构建出可测试的软件，无法帮助避免数量级的验证问题。</p><p></p><p>不幸的是，不仅质量保证对于验证现代软件来说是低效的，作为问题解决者的质量保证人员，尽管他们有良好的意图，但有时候却会使情况变得更糟。</p><p></p><p>质量保证专业人士都很聪明，他们喜欢解决难题。虽然解决简单的问题也很棒，但不会为你赢得同伴的赞赏，也不会让你产生“我完成了一些了不起的事情”的多巴胺刺激，但解决困难的问题会。如果你将一个难以验证或自动化的问题摆在质量保证人员面前，他们很可能会卷起袖子深入研究。因此，许多质量保证团队不会抵制难以测试的软件，而是会热情地接受它们。对他们来说，这代表着一个可以展示他们价值、证明他们勇气的机会。</p><p></p><p>这种倾向相当普遍，但却是导致无效软件交付的一种病理。尽管软件是不可测试的，但质量保证专业人员仍然努力验证软件，从而把根本问题隐藏了起来。因此，团队的其他成员也就无法看到或意识到软件本身存在的错误，这些错误是在构建时忽视了可测试性而引入的。</p><p></p><p>我在此并不是想要贬低那些在质量保证领域工作的人，这是一种极具挑战性和价值的角色。我想要指出的是，在现代软件开发中，质量保证是不够的。无论如何优化和简化，没有任何一种质量保证过程能够克服难以测试的软件的问题。</p><p></p><p></p><h3>可测试的架构和质量工程</h3><p></p><p></p><p>因为在可测试性方面存在巨大的挑战，所以构建可测试的软件就变得至关重要。我们必须随着软件的演化而改变软件的验证策略，并利用这些策略来指导软件架构、设计和实现。验证策略是软件的输入，而不是在软件完成时才去创建的东西，可测试性应该成为软件设计的第一阶需求，与其他需求一样重要。</p><p></p><p>实现<a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651136964&amp;idx=2&amp;sn=e69751115adaf30873b5c3b5493371ce&amp;chksm=bdb8db978acf528193f558c6b01e02d5e6db26e4af258b9186b77b5f0a2811c78268e1dec328&amp;scene=27#wechat_redirect\">可测试</a>\"的软件是质量工程的一个关键环节。</p><p></p><p>质量工程是关于如何主动和有意识地构建可测试的系统。验证系统可能是一项复杂、具有挑战性、耗时的工作，任何避免、缓和或减少问题的努力对有效和高效的软件交付来说都是非常有价值的。质量工程需要将所有质量保证方面的专业知识和对“如何验证软件”的痴迷应用在“如何从一开始就构建出更容易验证的软件”这个问题上。</p><p></p><p>不幸的是，由于工程师这个词在招聘时具有很高的市场价值，因此在行业中过度使用这个词是很常见的，许多人在招聘质量工程师时也这么做。</p><p></p><p>根据我们的定义，质量工程并不是指在设计和构建好系统以后才开始应用测试和自动化专业知识。这不是“这是一个很酷的系统，我将用工程专业知识来测试和自动化它”，也不是教质量保证专业人员如何编码，称他们为质量工程师，以及他们所做的质量保证工作。所有这些都很好，但它们都不能用来定义质量工程，它们都无法解决可测性问题。真正的质量工程，应该是有意且明确地使用质量保证专业知识来构建可测试的系统。</p><p></p><p>你一定需要质量工程师这样的角色来实施质量工程吗？当然不是。质量工程是一种软件开发哲学和方法，与头衔完全无关。简单地说就是：验证是软件交付的一个重要组成部分，质量保证不仅复杂而且极具挑战性，你不仅需要专家来验证软件，还需要构建可验证的软件。这些专家可以是开发人员、质量保证工程师或任何你认为合适的人。关键在于他们掌握的技能，以及这些技能被应用在正确的问题上，至于头衔是什么并不重要。</p><p></p><p></p><h3>结论</h3><p></p><p></p><p>前面的内容并没有证明某些系统的测试难度比其他系统大几个数量级，确实没有数据、研究或实证证据。我无法为你提供这些东西，我也不会相信那些提供给我这些东西的人。</p><p></p><p>我能为你提供的是我 20 多年来帮助公司构建复杂软件系统的经验。我所看到的大部分情况不是公司在努力构建难以构建的系统，而是在努力验证那些构建后的系统。</p><p></p><p>在实现大型的项目时，最常见的项目问题是系统可以按照预期和目标到达某些点，但随后碰到了一堵无形的墙，然后缓慢地爬行，交付日期被一再推迟。沮丧的高管开始出现在团队会议上，重申每个人都已经知道的截止日期，并要求每天更新指标，如每日执行的测试用例。这种集体性的愤怒会降临到那些被认为对无法完成验证负有责任的人身上。为什么需要这么长时间？我们设计并构建了这个系统，为什么不能测试它？这能有多难！</p><p></p><p>透过这些团队，你无疑会发现一些难以测试的软件。你将看到人们与测试数据做斗争，无法设置测试场景和构建复杂的工具和过程来管理它们。你将看到团队努力构建确定性的自动化测试，为此投入了大量的资金，却被不稳定的环境所阻碍。你会发现，因为其他的手段不可行，所以团队不得不过度依赖 UI 驱动的 E2E 测试自动化，需要一整夜运行成千上万的测试套件，并在第二天花一整天来调试结果（当然是在重新运行失败的测试用例三次之后）。你会发现这些问题，可能还有更多。</p><p></p><p>很多人确实看到了这些问题，并得出了具有破坏性的错误结论——团队存在测试问题。</p><p></p><p>这种情况并不是糟糕的测试实践或不合格的测试人员造成的，而是假设所有系统都是可测试的灾难性假设造成的。这些项目现在处于一种不那么令人羡慕的状态，让系统完全运行起来需要付出的努力比让它稍微运行起来所需要的努力，要多得多。对于这类系统，验证软件将比构建它困难得多——而且可能根本不可能。</p><p></p><p>如果你希望测试是有效的，需要可测试的系统，这意味着你必须构建可测试的系统。你必须考虑软件的验证方法，并将其融入到软件的架构、设计和实现中。让那些在软件验证方面有经验和专业知识的人（不管他们的头衔是什么）参与到这些过程中。在你的组织中培养质量工程文化，寻求将验证问题最小化的方法，并在一开始就避免数量级的不可测试软件问题。</p><p></p><p>原文链接：</p><p><a href=\"https://medium.com/slalom-build/on-untestable-software-6e64c34bfbad\">https://medium.com/slalom-build/on-untestable-software-6e64c34bfbad</a>\"</p><p></p><h5>作者介绍</h5><p></p><p>质量工程师、软件开发人员、顾问、悲观主义者——现任 Slalom Build 质量工程高级总监。</p><p></p><p></p><h5>活动推荐</h5><p></p><p>如果你想了解更多关于测试、可观测的话题，欢迎关注将于 10 月 30 日 -11 月 1 日举办的 <a href=\"https://qcon.infoq.cn/2022/beijing/track\">QCon 全球软件开发大会（2022）北京站</a>\"。会议策划了<a href=\"https://qcon.infoq.cn/2022/beijing/track/1319\">【测试环境治理】</a>\"、<a href=\"https://qcon.infoq.cn/2022/beijing/track/1293\">【云原生时代的可观测最佳实践】</a>\"相关专题，分别由京东技术总监何学奇、阿里云资深技术专家周小帆（承嗣）两位老师出品，目前已邀请来自阿里、腾讯、百度、去哪儿网、快手、云杉网络等公司的一线专家进行演讲分享，共同挖掘业界优秀的实践案例、探讨测试环境治理之路，带你了解典型行业在云原生技术场景下对于可观测技术的落地案例与最佳实践。本次 QCon 北京站将汇聚一线大咖分享 100+ 精彩演讲，不容错过，点击<a href=\"https://qcon.infoq.cn/2022/beijing/schedule\">此处</a>\"直达大会官网查看日程。团队购票可享更多优惠，购票请咨询：15600537884（微信同电话）</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/88/885d13762738d10a6a06620d94fda9e3.jpeg\" /></p><p></p>",
    "publish_time": "2022-09-20 16:46:20",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Linux之父：不出意外，Rust将出现在Linux 6.1版本中",
    "url": "https://www.infoq.cn/article/a7HAfAis5U70O1vbxFg3",
    "summary": "<p>当地时间9月19日，在刚刚结束的内核维护者峰会上，有关于Rust是否将出现在Linux中的讨论已经结束，Linux 的创建者<a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651130293&amp;idx=2&amp;sn=fd6dc3927e04a667860941633c52d7de&amp;chksm=bdb8f1e68acf78f00aafa670e4803a74f24c2a2e8f8eff59d50ed1948a0cb8e7922f57b3785f&amp;scene=27#wechat_redirect\"> Linus Torvalds</a>\"在接受媒体采访时表示，“如果不出意外，<a href=\"https://www.infoq.cn/article/KYsy5BQysK7vtlPtgd0Y\">Rust将会出现在Linux 6.1版本中</a>\"。”</p><p>&nbsp;</p><p>关于Rust编程语言将进入Linux内核的讨论已经有一段时间了。早在2020年在<a href=\"https://www.linuxplumbersconf.org/\">Linux Plumbers Conference</a>\" 上，Thomas 、Gaynor、Rust 语言团队的联合领导者 Josh Triplett 以及其他一些对此感兴趣的开发者以“Barriers to in-tree Rust”为主题，讨论了想要把 <a href=\"https://qcon.infoq.cn/2022/beijing/track/1288\">Rust </a>\"引入到 Linux 内核项目中作为一种可选的开发语言还需要解决的一些问题。其中 in-tree 是 Linux 术语，意思是与内核源代码树本身一起存储并与之一起构建内核模块。</p><p>&nbsp;</p><p>谷歌 Android 团队的 Wedson Almeida Filho当时曾表示“我们认为<a href=\"https://qcon.infoq.cn/2022/beijing/presentation/4899\">Rust</a>\"已经准备好作为一门实现内核的实用语言进入到C中。Rust可以帮助我们减少特权代码中潜在错误和安全漏洞的数量，同时与核心内核完美配合并保留其性能特征。”&nbsp;</p><p>&nbsp;</p><p>Rust 编程语言已经成为 Linux 事实上的第二种 Linux语言。与 Linux 的根语言 C语言相比，它有几个优点，其中最大的一点是它在内存安全方面比 C语言要好得多。管理C内存问题对于开发人员来说是一项永无止境的任务。&nbsp;</p><p>&nbsp;</p><p>Torvalds 在我们的采访中还表示，他希望在内核中看到 Rust 的另一个原因是鼓励新的开发人员开始研究内核。“我认为，Rust是能够带来创新的东西之一，”他说，“我们正在变老，且思想有些落后了。”</p><p>&nbsp;</p><p>在会议上，Torvalds 表示：“针对Rust进入Linux内核的问题，我们在维护者峰会上进行了辩论，但实际上主要讨乱还是围绕着编译器版本的问题展开的。</p><p>&nbsp;</p><p>此外，Western Digital 首席工程师 Andreas Hindborg 在<a href=\"https://lpc.events/\">2022 Linux Plumbers Summit</a>\"上展示了用户可以使用 Rust 编写一流的驱动程序，即<a href=\"https://blog.desdelinux.net/en/western-digital-already-works-on-an-nvme-driver-written-in-rust/\">适用于 Linux 的 SSD NVM-Express (NVMe) 驱动程序</a>\"。维护人员确信是时候在 Linux 中继续使用 Rust。简而言之，他们已经认可Rust进入Linux中这一提议了。</p><p>&nbsp;</p><p>现在，Torvalds 在第一个版本中警告说，Rust 将“只有核心基础设施（即还没有成熟的用例）”。但是，这仍然是 Rust 和 Linux 迈出的重要的第一步。&nbsp;</p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://www.zdnet.com/article/linus-torvalds-rust-will-go-into-linux-6-1/\">https://www.zdnet.com/article/linus-torvalds-rust-will-go-into-linux-6-1/</a>\"</p>",
    "publish_time": "2022-09-20 17:21:05",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]