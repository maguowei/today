[
  {
    "title": "Java近期新闻： NetBeans 15、Jakarta EE 10、jtreg 7、Spring Cloud、Groovy、Helidon和Micronaut",
    "url": "https://www.infoq.cn/article/fdLxBglWb827PQMPIOvh",
    "summary": "<p>本期的Java新闻包括OpenJDK、JDK 20、Jakarta EE 10、Spring Cloud 2021.0.4、Quarkus 2.12.1、Micronaut 3.6.2和3.6.3、Helidon 2.5.3、JDK 8维护版本的重要变更、Hibernate ORM 6.1.3、Reactive Native JHipster 4.3.0、Apache NetBeans 15、Apache Groovy 4.0.5、Apache Camel 3.18.2、Ktor 2.1.1以及JavaZone会议。</p><p></p><h4>OpenJDK</h4><p></p><p>JDK的回归测试工具<a href=\"https://openjdk.org/jtreg/\">jtreg</a>\"&nbsp;7版本<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2022-September/006906.html\">发布</a>\"，其特性包括升级至JUnit 5，提供了<a href=\"https://junit.org/junit5/docs/current/user-guide/#writing-tests\">Jupiter API</a>\"并支持运行现有的JUnit 4测试和<a href=\"https://openjdk.org/jtreg/tag-spec.html\">标签语言规范（Tag Language Specification）</a>\"。第三方库JAR文件的命名约定已经变更为使用jtreg构建时指定的JAR文件的基础名称。这个名称可能依赖于库的版本。受此影响的JDK测试均已更新。jtreg&nbsp;7支持的最低版本是JDK 11。</p><p></p><h4>JDK 19</h4><p></p><p><a href=\"https://openjdk.org/projects/jdk/19/\">JDK 19</a>\"依然处于<a href=\"https://openjdk.java.net/jeps/3#rc\">发布候选</a>\"阶段，预计GA版本会在2022年9月20日发布。<a href=\"https://jdk.java.net/19/release-notes\">发布说明</a>\"包含了文档的链接，比如<a href=\"https://cr.openjdk.java.net/~iris/se/19/latestSpec//api/index.html\">完整的API规范</a>\"以及一个<a href=\"https://cr.openjdk.java.net/~iris/se/19/latestSpec/apidiffs/overview-summary.html\">标注的API规范</a>\"，后者对比了JDK 18（<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-18%2B36\">Build 36</a>\"）和JDK 19（<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-19%2B36\">Build 36</a>\"）的差异。关于JDK 19的更多细节和对JDK 20的预测可以参阅InfoQ的<a href=\"https://www.infoq.com/news/2022/09/java-19-so-far/\">新闻报道</a>\"。</p><p></p><h4>JDK 20</h4><p></p><p>JDK 20的<a href=\"https://jdk.java.net/20/\">早期访问构建</a>\"版本<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-20%2B14\">Build 14</a>\"发布，它是对Build 13的<a href=\"https://github.com/openjdk/jdk/compare/jdk-20%2B13...jdk-20%2B14\">更新</a>\"，包括对各种<a href=\"https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2020%20and%20%22resolved%20in%20build%22%20%3D%20b14%20order%20by%20component%2C%20subcomponent\">问题</a>\"的修复。关于该版本的更多细节，请参阅<a href=\"https://jdk.java.net/20/release-notes\">发布说明</a>\"。</p><p>对于<a href=\"https://openjdk.java.net/projects/jdk/19/\">JDK 19</a>\"和<a href=\"https://openjdk.java.net/projects/jdk/20/\">JDK 20</a>\"，鼓励开发者通过<a href=\"https://bugreport.java.com/bugreport/\">Java Bug数据库</a>\"报告缺陷。</p><p></p><h4>Jakarta EE 10</h4><p></p><p>在通往Jakarta EE 10的路上，Eclipse基金会的Jakarta EE开发人员倡导者<a href=\"https://se.linkedin.com/in/ivargrimstad\">Ivar Grimstad</a>\"在他的Hashtag Jakarta EE<a href=\"https://www.agilejava.eu/\">周报</a>\"上<a href=\"https://www.agilejava.eu/2022/09/04/hashtag-jakarta-ee-140/\">宣布</a>\"，Jakarta EE 10的<a href=\"https://jakarta.ee/specifications/platform/10/\">Platform Profile</a>\"和<a href=\"https://jakarta.ee/specifications/webprofile/10/\">Web Profile</a>\"审查投票已经开始，预计会在9月13日结束。<a href=\"https://jakarta.ee/specifications/coreprofile/10/\">Core Profile</a>\"已经在8月份通过了审查。这似乎是一个好的信号，Jakarta EE 10有可能会在本月正式发布。关于Jakarta EE规范的更多细节可以参阅Grimstad在<a href=\"https://2022.javazone.no/\">JavaZone</a>\"上做的题为<a href=\"https://www.slideshare.net/ivargrimstad/jakarta-ee-10-feature-by-feature-252882883\">Jakarta EE 10 - Feature-by-Feature</a>\"的演讲。</p><p></p><h4>Spring框架</h4><p></p><p>代号为Jubilee的Spring Cloud 2021.0.4版本<a href=\"https://spring.io/blog/2022/09/07/spring-cloud-2021-0-4-codename-jubilee-has-been-released\">发布</a>\"，其特性包括对所有<a href=\"https://spring.io/projects/spring-cloud\">Spring Cloud</a>\"子项目的更新，在<a href=\"https://spring.io/projects/spring-cloud-config\">Config</a>\",&nbsp;<a href=\"https://spring.io/projects/spring-cloud-gateway\">Gateway</a>\"、<a href=\"https://spring.io/projects/spring-cloud-openfeign\">OpenFeign</a>\"和<a href=\"https://spring.io/projects/spring-cloud-circuitbreaker\">Circuit Breaker</a>\"方面都有明显的变化。关于该版本的更多细节，可以参阅<a href=\"https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2021.0.4-Release-Notes\">发布说明</a>\"。</p><p></p><h4>Quarkus</h4><p></p><p>Red Hat<a href=\"https://quarkus.io/blog/quarkus-2-12-1-final-released/\">发布</a>\"了Quarkus 2.12.1.Final，对<a href=\"https://github.com/quarkusio/quarkus/blob/main/independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/RequestContext.java\">RequestContext</a>\"类的性能下降问题进行了修复。此外，还对<a href=\"https://github.com/smallrye/smallrye-open-api/blob/main/README.adoc\">Smallrye OpenAPI</a>\"&nbsp;2.2.1和<a href=\"https://dekorate.io/\">Dekorate</a>\"&nbsp;2.11.2进行了依赖升级。关于该版本的更多细节，可以参阅<a href=\"https://github.com/quarkusio/quarkus/releases/tag/2.12.1.Final\">发布说明</a>\"。</p><p></p><h4>Micronaut</h4><p></p><p>Micronaut基金会发布了<a href=\"https://micronaut.io/2022/09/04/micronaut-framework-3-6-2-released/\">3.6.2</a>\"和<a href=\"https://micronaut.io/2022/09/09/micronaut-framework-3-6-3/\">3.6.3</a>\"版本的<a href=\"https://micronaut.io/\">Micronaut</a>\"，对Micronaut的一些模块进行了缺陷修复和补丁发布，例如<a href=\"https://micronaut-projects.github.io/micronaut-security/snapshot/guide/index.html\">Security</a>\"、<a href=\"https://micronaut-projects.github.io/micronaut-email/snapshot/guide/index.html\">Email</a>\"、<a href=\"https://micronaut-projects.github.io/micronaut-spring/snapshot/guide/index.html\">Micronaut for Spring</a>\"、<a href=\"https://micronaut-projects.github.io/micronaut-tracing/snapshot/guide/index.html\">Tracing</a>\"、<a href=\"https://micronaut-projects.github.io/micronaut-flyway/snapshot/guide/index.html\">Flyway</a>\"、<a href=\"https://micronaut-projects.github.io/micronaut-aws/snapshot/guide/index.html\">AWS</a>\"、<a href=\"https://micronaut-projects.github.io/micronaut-serialization/snapshot/guide/\">Serialization</a>\"和<a href=\"https://micronaut-projects.github.io/micronaut-data/snapshot/guide/index.html\">Data</a>\"。3.6.2版本还提供了升级后的SnakeYAML 1.31，它解决了<a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25857\">CVE-2022-25857</a>\"漏洞，在之前版本<a href=\"https://github.com/snakeyaml/snakeyaml/blob/master/README.md\">SnakeYAML</a>\"中的这个漏洞缺少对集合嵌套深度的限制，很容易导致拒绝服务攻击（Denial of Service）。关于这些版本的更多细节可以在<a href=\"https://github.com/micronaut-projects/micronaut-core/releases/tag/v3.6.2\">3.6.2</a>\"和<a href=\"https://github.com/micronaut-projects/micronaut-core/releases/tag/v3.6.3\">3.6.3版本</a>\"的发布说明中找到。</p><p></p><h4>Helidon</h4><p></p><p>Helidon 2.5.3<a href=\"https://github.com/oracle/helidon/releases/tag/2.5.3\">发布</a>\"，其中有许多变化，包括在gRPC组件中升级了protocol buffer以支持osx-aarch_64架构；在Security组件中实现了access token刷新；在Config组件中修复了为watcher服务获取父目录的问题。此外，还对SnakeYAML 1.31和Oracle Cloud Integration Integration 2.41.0进行了依赖升级。</p><p></p><h4>BellSoft</h4><p></p><p><a href=\"https://bell-sw.com/\">BellSoft</a>\"是<a href=\"https://bell-sw.com/pages/libericajdk/\">Liberica JDK</a>\"（OpenJDK的下游发布版）的创建者，他们讨论了一些<a href=\"https://bell-sw.com/announcements/2022/09/09/jdk-8-maintenance-release-4-important-changes/\">重要的变更</a>\"，这会影响将于2022年10月发布的JDK 8 Maintenance Release 4。核心变化是JDK-8202260，也就是<a href=\"https://bugs.openjdk.org/secure/Dashboard.jspa\">JDK缺陷系统</a>\"中定义的<a href=\"https://bugs.openjdk.org/browse/JDK-8202260\">引用对象不应该支持克隆（Reference Objects Should Not Support Cloning）</a>\"，它描述了在Java SE 8平台中发现的一个重要问题：</p><p></p><p></p><blockquote>在Java SE规范中，并没有明确定义克隆引用对象的语义。克隆与垃圾回收密切相关，如果引用对象的可达性状态在GC活动中发生变化，收集器可能在代码调用clone()方法之前，对该对象进行入队（enqueue）。结果就是，克隆的对象不会被入队和引用。从而导致高度不可预知的引用处理。</blockquote><p></p><p></p><p>在JDK 9和JDK 11中进行了一些后续的变更，这些变更会回传到JDK 8 Maintenance Release 4中。例如，在JDK 11，<a href=\"https://devdocs.io/openjdk~18/java.naming/javax/naming/reference#clone%28%29\">Reference.clone()</a>\"方法始终会抛出一个CloneNotSupportedException异常。</p><p></p><h4>Hibernate</h4><p></p><p>Hibernate ORM 6.1.3.Final<a href=\"https://in.relation.to/2022/09/08/hibernate-orm-613-final/\">发布</a>\"了一项<a href=\"https://hibernate.atlassian.net/browse/HHH-15458\">优化</a>\"，其中带有<a href=\"https://docs.jboss.org/hibernate/orm/current/javadocs/org/hibernate/annotations/JdbcTypeCode.html\">@JdbcTypeCode</a>\"(SqlTypes.JSON)和@JdbcTypeCode(SqlTypes.SQLXML)注解的字符串将不会被序列化为JSON/XML。相反，它们会被解析为纯JSON/XML，以避免序列化/反序列化的开销。</p><p></p><h4>React Native JHipster</h4><p></p><p>在<a href=\"https://www.jhipster.tech/2022/09/02/jhipster-release-7.9.3.html\">JHipster 7.9.3发布后不久</a>\"，<a href=\"https://github.com/jhipster/generator-jhipster-react-native/blob/main/README.md\">JHipster React Native</a>\"的4.3.0版本已<a href=\"https://twitter.com/mraible/status/1567163914449813510?cxt=HHwWjIC8md3R178rAAAA\">交付给</a>\"Java社区。改进之处包括：通过<a href=\"https://reactnative.dev/\">React Native</a>\"&nbsp;0.69.5和React 18升级到<a href=\"https://blog.expo.dev/expo-sdk-46-c2a1655f63f7\">Expo SDK 46</a>\"；迁移到<a href=\"https://expo.dev/eas\">Expo Application Services</a>\"；支持基于Auth0的注销；为GitHub Actions使用Node 16；大量的依赖升级；以及使用Keycloak、Okta和Auth0改进质量保证。关于这个版本的更多细节可以参阅<a href=\"https://github.com/jhipster/generator-jhipster-react-native/releases/tag/v4.3.0\">发布说明</a>\"。</p><p></p><h4>Apache软件基金会</h4><p></p><p><a href=\"https://netbeans.apache.org/\">Apache NetBeans</a>\"&nbsp;15<a href=\"https://www.mail-archive.com/announce@apache.org/msg07559.html\">发布</a>\"，其特性包括：支持JEP 413，即<a href=\"https://openjdk.org/jeps/413\">Java API文档中支持代码片段（Code Snippets in Java API Documentation）</a>\"（在JDK 18中交付）；清理代码库，删除对Windows 95和Windows 98的支持；升级到<a href=\"https://maven.apache.org/maven-indexer/\">Maven-Indexer</a>\"&nbsp;6.2.0，包括删除避免<a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/IndexOutOfBoundsException.html\">IndexOutOfBoundsException</a>\"的临时方案；以及更新到Oracle Cloud Integration 2.27.0。关于这个版本的更多细节可以参阅<a href=\"https://github.com/apache/netbeans/releases/tag/15\">发布说明</a>\"。</p><p></p><p><a href=\"https://groovy-lang.org/\">Apache Groovy</a>\"&nbsp;4.0.5<a href=\"https://www.mail-archive.com/announce@apache.org/msg07565.html\">发布</a>\"，它具有56个缺陷修复、改进和依赖性升级，比如，JUnit Jupiter 5.9.0、JUnit Platform 1.9.0、Gradle 7.5.1、Spock 2.2和slf4j 2.0.0。 唯一的新特性是对<a href=\"https://docs.groovy-lang.org/latest/html/api/org/apache/groovy/dateutil/extensions/DateUtilExtensions.html\">DateUtilExtensions</a>\"类的增强，以便检索静态日历常量的子集。关于这个版本的更多细节可以在<a href=\"https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12318123&amp;version=12352126\">发布说明</a>\"中找到。</p><p></p><p>Apache Camel 3.18.2<a href=\"https://camel.apache.org/blog/2022/09/RELEASE-3.18.2/\">发布</a>\"，它包含了50个错误修复和改进，例如：支持<a href=\"https://camel.apache.org/components/3.18.x/freemarker-component.html\">Camel Freemarker</a>\"组件中的邮件附件；以及处理CamelMicroProfilePropertiesSource类中loadProperties()方法中的NoSuchElementException。还有一些依赖性的升级，包括Spring Boot 2.7.3和gRPC 1.48.1。关于这个版本的更多细节可以在<a href=\"https://camel.apache.org/releases/release-3.18.2/\">发布说明</a>\"中找到。</p><p></p><h4>JetBrains</h4><p></p><p>JetBrains<a href=\"https://twitter.com/JetBrainsKtor/status/1567430094922125315?cxt=HHwWhsC4obzX0MArAAAA\">发布</a>\"了Ktor 2.1.1，其特性是改进了以下问题：Netty HTTP/2的异常；JDK 8和JDK 11在构建Ktor时的不匹配；以及废弃receiveOrNull()方法，该方法被认为令人感到困惑。关于这个版本的更多细节可以在<a href=\"https://ktor.io/changelog/2.1/\">更新日志中</a>\"找到。</p><p></p><h4>JavaZone Conference</h4><p></p><p><a href=\"https://2022.javazone.no/\">JavaZone</a>\"会议在挪威奥斯陆的<a href=\"https://oslospektrum.no/\">Oslo Spektrum</a>\"举行，来自Java社区的许多演讲者发表了闪电演讲、报告和工作坊。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/09/java-news-roundup-sep05-2022/\">Java News Roundup: NetBeans 15, Jakarta EE 10, jtreg 7, Spring Cloud, Groovy, Helidon, Micronaut</a>\"</p>",
    "publish_time": "2022-09-20 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "揭秘 Meta 的云游戏基础设施",
    "url": "https://www.infoq.cn/article/oi5qfvo5NUCHeZScpaib",
    "summary": "<p><a href=\"https://xie.infoq.cn/article/af8d4fbdf2296442c79c3a398\">云游戏</a>\"的未来是实现游戏大众化。任何一个喜欢游戏的人都应该能够享受游戏，并与好友分享游戏体验，无论他们身在何处，即使他们没有最新最贵的游戏硬件。<a href=\"https://www.infoq.cn/article/5m5afBSrqT4ipYqxCwDi\">Meta</a>\" 在 2020 年启动了云游戏平台，让 Meta 用户可以通过各种屏幕和网页浏览器即时地访问原生 Android 和 Windows 游戏。</p><p></p><p>这种前所未有的云游戏访问体验需要 Meta 的工程师们迎接新的挑战，开发出能够为世界各地的人们提供高质量游戏体验的硬件基础设施。</p><p></p><p>游戏本身也在不断演化，从 AR 和 VR 等 3D 体验到<a href=\"https://xie.infoq.cn/article/f2dc4c53d4dadc360c715af63\">元宇宙</a>\"，世界各地的人们都希望尽可能无缝且轻松地玩越来越具有沉浸感的游戏。实现元宇宙需要整个行业投入巨大的努力，但我们相信创建基础设施和解决云游戏的挑战将为我们指明走向元宇宙的道路。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/eb/eb323611b8242fcec8c93e065e31aac3.png\" /></p><p></p><p></p><h3>为什么要构建云游戏</h3><p></p><p></p><p>云游戏关注的是可访问性——为人们提供游戏，不管他们使用什么设备，也不管他们位于世界何处。将游戏应用放到云端，人们就不需要购买新硬件，也不需要大量下载或等待更新。它支持游戏跨桌面和移动设备无缝交叉，可以实现灵活的应用分发。</p><p></p><p>云游戏还为开发者提供了更轻松的开发体验，因为他们不再需要过多地考虑针对多个硬件平台（如桌面和手机）优化游戏。在理想的情况下，开发者只需要构建一次应用，就可以分发到多个设备上，而不需要构建多个二进制文件。对于关心安全和完整性的玩家和开发者来说，云游戏意味着更少的作弊和盗版问题。</p><p></p><h3>Meta 云游戏基础设施</h3><p></p><p></p><p>在 Meta 实现云游戏意味着工程师们需要开发新的硬件和软件基础设施来解决云游戏所面临的挑战。云游戏要求较低的端到端延迟，并提供快速流畅的游戏体验，而高质量的视频和音频需要以尽可能小的抖动进行传输。为了提升成本效率，基础设施还需要能够在单个云游戏服务器上运行多款游戏。所有这一切都必须受到保护，免受各种网络攻击，同时保持健壮和高效。</p><p></p><h5>边缘计算、GPU 和虚拟化</h5><p></p><p></p><p>Meta 云游戏基础设施为玩家提供低延迟体验的方法是在网络距离方面让其尽可能地靠近玩家。Meta 的数据中心无法单独为云游戏提供超低的延迟，所以我们依赖边缘计算，在靠近大量人口的大都市地区边缘部署服务，让云游戏基础设施更靠近玩家。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/9a/9a15261183f6b5875e97ca2b5f9364c0.png\" /></p><p></p><p>通过增加边缘计算站点降低延迟</p><p></p><p>我们的目标是在每一个边缘计算站点中都有一个统一的托管环境，确保我们可以尽可能平稳地运行尽可能多的游戏。如今的游戏都是为 GPU 设计的，所以我们与 NVIDIA 合作，基于 NVIDIA Ampere 架构的 GPU 构建托管环境。随着游戏图像渲染变得越来越密集和复杂，GPU 将为游戏的加载、运行和流化提供高保真度和低延迟。</p><p></p><p>为了运行游戏，我们在我们的边缘计算操作系统上使用了我们的集群管理系统 Twine。我们构建了编配服务来管理流媒体信号，并使用 Twine 来协调边缘的游戏服务器。</p><p></p><p>我们为 Windows 和 Android 游戏使用了容器技术，提供了不同的托管解决方案，其中 Windows 托管解决方案集成了 PlayGiga。我们已经构建了一个统一的编配系统来管理和运行两个操作系统平台的游戏。这意味着我们可以更灵活地跨不同的平台交付游戏和管理容量。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/eb/eb323611b8242fcec8c93e065e31aac3.png\" /></p><p></p><p></p><h5>视频和音频流</h5><p></p><p></p><p>提供流畅的视频和音频是云游戏体验最重要的部分之一。任何玩过在线游戏的人都体会过延迟可能带来的挫败感。</p><p></p><p>考虑到技术的成熟度和兼容性，我们结合了 WebRTC 和安全实时传输协议（SRTP），将其作为流式处理用户输入和发送游戏视音频帧的解决方案。随着时间的推移，这种方案显著提高了视频和音频流式传输的性能。</p><p></p><p>我们将从刚开始的云游戏基本的流开始讲起。</p><p></p><p>无论玩家在何时点击执行游戏中的动作（例如让游戏角色跳跃），我们都会捕捉到点击事件并将其发送给服务器，服务器将接收到这个事件。然后，游戏渲染包含该动作结果的帧（即角色跳跃）。我们捕获并复制渲染的帧，使用视频编码器对其进行编码，然后将其打包，装入用户数据报协议（UDP）数据包，再通过网络发送给玩家。最后，玩家端有一个抖动缓冲区来平滑接收到的数据包。我们将数据包解码为帧，然后为玩家渲染帧。</p><p></p><p>所有这一切都发生得如此之快，以至于玩家察觉不到点击和角色动作之间存在延迟。然而，每一个步骤都需要花费一点时间，这些时间累积起来会给玩家带来更高的延迟。</p><p></p><p>我们当前的模型在此基础上进行了显著改进，通过 GPU 编码降低了延迟。使用 GPU 编码意味着游戏渲染帧是在 GPU 中进行的，并且在编码完成之前不会离开 GPU 的内存。这个过程非常高效，并且不需要在 GPU 和主服务器之间占用大量的 PCI 总线带宽。编码后的帧也会比原始帧小。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/4e/4e63d5722c2b48410fadd3eb7be469b8.png\" /></p><p></p><p>目前的视频和音频流媒体模型，通过使用 GPU 编码显著降低了延迟</p><p></p><p>在网络方面，让边缘计算站点靠近玩家也有助于降低视频和音频的延迟——甚至比将整个流式管道转成 GPU 所节省的成本更加显著。</p><p></p><p>在玩家端，我们现在也使用硬件解码来缩短解码时间。视频和音频通常是同步在一起的，但我们也可以为了降低延迟在音频之前发送视频。我们还可以利用玩家电脑显示器或手机屏幕的固有延迟。屏幕会以一定的速率（如 30fps 或 60fps）逐帧显示视频。我们可以利用帧之间难以察觉的间隔吸收掉一些抖动，让视频变得更加平滑。对于支持更高 FPS 的设备，延迟可能会进一步下降。</p><p></p><p></p><h5>确保云游戏的安全</h5><p></p><p></p><p>玩家和开发者需要确保云游戏体验是安全的。玩家希望他们的数据是安全的，游戏不会被作弊者利用。开发者需要确保他们的产品不会受到盗版和其他安全漏洞的侵害。</p><p></p><p>边缘计算、GPU 虚拟化和视频 / 音频流的结合使得云游戏基础设施变得非常复杂。这种复杂性带来了独特的安全性挑战。作为一个基于 Windows 和 Android 的系统，系统本身承担了这些环境的安全性挑战，还需要保护免受 DDOS 攻击等威胁。</p><p></p><p>为了识别和解决安全问题，我们在开发的每个阶段（从设计、实现到测试）都会评估安全性，包括威胁建模、安全代码评审、模糊测试和安全测试。我们不希望云游戏成为攻击其他 Meta 系统的入口，所以云游戏基础设施与 Meta 的核心数据基础设施是完全隔离的。我们还有一个内部安全团队与外部公司一起工作，定期对系统进行安全评估。</p><p></p><p></p><h3>云游戏和元宇宙</h3><p></p><p></p><p>元宇宙对游戏的未来有着重要的影响——不仅是关于人们可以玩的游戏类型，还包括如何向人们分发这些游戏。元宇宙将比以往任何时候对网络连接有着更高的要求。我们今天奠定的基础将在帮助整个行业构建云基础设施方面发挥重要作用，这些基础设施将承担创建元宇宙体验所需的复杂计算。</p><p></p><p>就像 3A 级游戏一样，未来的元宇宙体验需要最高的保真度和最低的延迟。如果无法无障碍地实现这种体验，那它就不适合任何人，这意味着元宇宙网络必须具有超低延迟、高可伸缩性、高吞吐量和联邦数据存储。</p><p></p><p>无论这种新的网络架构是什么样子，我们都需要对今天的整体网络架构进行改进。它将需要一个可靠的、服务质量（QoS）感知的、点对点的通信链路和协议，让在同一个区域内（例如，在相同的 Wi-Fi AP 覆盖下）的人们可以相互交换信息。它需要一个统一的、无处不在的网络拓扑来限制全球范围内的延迟、抖动和丢包。降低延迟、提高可靠性、提升吞吐量和开发联邦数据库的挑战可能会迫使工程师在端到端通信网络中重新设计和分配计算和路由资源。然后，元宇宙在网络的每一段以及每一个应用 / 网络协议层（从顶部的应用层到底部的操作系统层）都需要无处不在的端到端 QoS 管理策略。</p><p></p><p>我们正在研究解决这些问题的方法。我们的云游戏基础设施提供了一些见解，我们正在与移动网络运营商和运营商、硬件芯片组制造商和其他合作伙伴合作，创建可以满足元宇宙需求的解决方案。</p><p></p><p></p><h3>云游戏的未来</h3><p></p><p></p><p>许多人将通过游戏进入元宇宙。我们朝着元宇宙的长期愿景努力，我们将继续构建新的二维体验，帮助 Meta 应用用户跨越元宇宙鸿沟。最近 Facebook 游戏平台推出的 Crayta 就是一个很好的例子。</p><p></p><p>随着云游戏平台的规模不断扩大，我们也在不断升级和完善云游戏基础设施。在接下来的 2 到 3 年里，我们将进行更多的国际扩张，将游戏带给世界各地更多的人。我们还与移动网络运营商合作，显著降低其接入网络的延迟。在硬件方面，我们正在与芯片组制造商合作，降低用户设备的延迟。我们还在研究新的容器技术，提供更好的流媒体效率。当然，随着系统的发展和改进，安全性也会不断提高。</p><p></p><p>开发者对显著的改进有所期待，包括改进系统的兼容性，减少开发者负担，并为他们提供更好的开发、测试、调试、实验和分析工具。玩家是我们云游戏工作最重要的组成部分，他们可以期待即将到来的更具沉浸感的全新游戏体验。</p><p></p><p>我们的目标是让人们在任何时刻、任何地点一起玩优秀的游戏，这一点始终不变，我们在云游戏方面的持续努力将确保这些体验变得更好。</p><p></p><p>原文链接：</p><p></p><p><a href=\"https://engineering.fb.com/2022/06/09/web/cloud-gaming-infrastructure/\">https://engineering.fb.com/2022/06/09/web/cloud-gaming-infrastructure/</a>\"</p><p></p>",
    "publish_time": "2022-09-20 09:45:20",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "从野蛮到文明，数字世界应当如何重构现代化安全规则？",
    "url": "https://www.infoq.cn/article/Ch7pHdsQkyjyOEhmlKFi",
    "summary": "<p>有心人可能已经发现，网络安全问题正悄然成为 IT 行业接下来的重点领域。尤其是近两年，大、中型企业纷纷将安全发展纳入企业总体战略。网络安全问题已经从单纯的 IT 人员关注的话题，迅速上升为企业高级管理决策层都在关注的话题。</p><p></p><p>从技术的角度看，一方面，因为数字化转型的逐渐落地，多云环境形成，疫情肆虐也加速了数据和应用更多地在云端进行存储、处理，导致安全边界变得模糊；另一方面，混合办公常态化，由此引来了许多传统 IT 安全管理未曾接触和考量的领域，使得企业的攻击面呈指数级放大。</p><p></p><p>据《2022 年全球网络安全态势报告》中显示，51% 的人报告称商务邮件受到攻击，高于一年前的 42%；39% 的组织报告遭受了内部攻击，高于一年前的 27%；79% 的人表示遭受过勒索软件的攻击。</p><p></p><p>而从行业的角度看，微软公司 2021 年有关网络安全产品的营收纪录显示，其收入超过 150 亿美元（折合 954 亿元人民币），是最大专业安全公司 Palo Alto Networks 年营收的三倍。</p><p></p><p>巨大的需求背后，必然是急速扩张的市场。这一切都使安全问题成为 2022 年技术人与企业必须重视的话题。</p><p></p><p>那么，作为从“野蛮的数字世界”跨越到“文明的数字世界”的桥梁，<a href=\"https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/343664?fr=aladdin\">安全</a>\"究竟如何为其重构规则？</p><p></p><h2>规则一：理解零信任的核心要义</h2><p></p><p></p><p>数字化转型时代，万物互联、企业上云等场景越来越多，如果一个企业仍依赖于传统的安全防护模式，比如本地防火墙和 VPN，仅从组织的物理位置决定安全策略，就会缺乏对内部安全风险的可见性，无疑会给产品的安全性带来很大的风险与挑战。</p><p></p><p>同时，传统安全防护模式还会导致另一个问题：如果攻击者利用钓鱼攻击、身份凭证窃取等方式“混入墙内”，并默认可信，那么组织的所有资源都将面临着被攻击的风险。</p><p></p><p>因此，构建文明数字世界的第一条规则，就是采用<a href=\"https://baike.baidu.com/item/%E9%9B%B6%E4%BF%A1%E4%BB%BB/54213365?fr=aladdin\">零信任架构</a>\"。“永不信任，始终验证”是零信任架构的设计原则，换言之，宁可“错杀”万千，绝不放过其一！而理解零信任的核心要义，更是企业践行零信任架构的成败关键。</p><p></p><p>基于以上原则，微软也提出了自己的零信任架构范式：进行显式验证、使用最小权限访问以及假定数据泄露。具体来说，其认为企业不应该自动信任其内部或外部的任何人、事、物，而是在授权前，对每个访问请求都应进行完全身份验证、授权和加密。</p><p></p><p>并且，零信任安全架构还会假设数据已经泄露，攻击正在发生。因此会持续监测网络、用户、设备和应用程序，来切分其访问控制权限，缩小数据泄露的波及范围并防止用户（包括潜在的攻击者）横向移动。同时验证所有会话，均为端对端加密，通过安全可视化的分析手段，进而驱动威胁探测和加强安全防护。</p><p></p><p>在这其中，企业的 IT 系统需要采集和梳理各种“环境因素”加以综合性的风险判断，例如人员身份、物理设备的安全健康度、访问链路的可信性、是否存在恶意或可疑的应用和链接、被访问的信息的敏感等级等等。而所有这些信息需要被汇总并加以决策分析。这个时候，零信任的综合信息处理和风险分析机制就成了成败的关键。选择零信任的技术框架，更多的是在选择一个综合各种信息并加以风险判断和决策的“引擎”，这个引擎将直接影响零信任架构实施的效果。</p><p></p><h2>规则二：变被动防御为主动检测和响应</h2><p></p><p></p><p>云计算时代的到来，大大提升了安全领域的复杂度。“当客户把自己的业务迁移到云端时，也同时招来了打算攻击他们的敌人”，微软全球威胁情报与安全研究主管约翰·兰伯特说道。</p><p></p><p>如今，企业面临的安全威胁无孔不入，显然，仅靠之前发现漏洞才打补丁、类似亡羊补牢般的做法已经无法满足现在对安全的高要求。企业决策者必须建立完善的安全防护系统，从而将风险降到最低。</p><p></p><p>作为将企业安全防御“化被动为主动”的利器，主动的、全方位的威胁检测和响应以及<a href=\"https://baike.baidu.com/item/%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5?fromModule=lemma_search-box\">威胁情报</a>\"可以提前获取攻击者的攻击工具、攻击途径、攻击意图等信息，直接推动安全事件的快速响应，并在敌人攻击之前持续监控和干扰，真正做到未雨绸缪。</p><p></p><p>“XDR+SIEM”框架可以很好地帮助企业构建一个 360 度的威胁检测和响应以及现代化安全运营的体系，通过各种 Microsoft Defender 系列 “传感器”将发生在每个层面的潜在威胁或攻击行为加以采集和分析，并借助 Microsoft Sentinel 进行自动化的分析和处理，大大提升安全威胁的可见性以及安全运营的自动化程度。</p><p></p><p>微软作为云服务的提供商，实现了与企业共同承担风险。全年不间断地为客户提供智能威胁情报（Threat Intelligence）分析，检测并阻止可能威胁企业信息安全的事件。在当今难上加难的信息安全环境中，助力企业构建整体的、端对端的解决方案。</p><p></p><p>知己知彼，百战不殆，这一道理，在数字世界同样适用。而威胁情报，就是那八百里加急送来的敌情。</p><p></p><h2>规则三：创造多云的安全未来</h2><p></p><p></p><p>根据 Flexera 的 2021 云计算报告，92% 的受访者正在使用多云模式，依赖于多个云服务提供商的应用程序和基础设施。因此，对于“云计算的未来”这一称号，多云当之无愧，其为企业的创新开辟了新的机遇，帮助企业业务突破传统物理边界的同时，又提供了前所未有的创新性、适应性和韧性。</p><p></p><p>然而，新机遇也意味着新挑战，将多个不同的系统集成到一个环境中，这种广泛的技术组合可能会导致新的安全漏洞，从而使安全和合规团队的工作变得极为复杂。由另一项调查显示，73% 的企业受访者认为管理多云环境具有挑战性。</p><p></p><p>对此，微软已经迈出重要的一步，作为目前唯一一家为业界三大平台——微软智能云 Azure、AWS 和 GCP 提供原生多云保护的云服务提供商。Microsoft Defender for Cloud 提供了云安全态势管理和云工作负载保护两项功能，能够“一站式”帮助企业识别这些云厂商的配置弱点、加强整体的云安全态势，并提供跨工作负载的威胁保护。</p><p></p><p>浪费在思考多云安全性上的每一秒，都可能促成攻击者寻找新的多云漏洞。适者生存，劣者淘汰，企业要想在时代的高速发展中站稳脚跟，必须尽早拥抱多云战略，并打造适合的安全防御体系。</p><p></p><h2>规则四：全面践行端到端安全愿景</h2><p></p><p></p><p>其实，不管是上文所说的零信任架构、还是威胁情报，微软的目的都是构建全方位立体的安全战略架构，并提供端到端级别的安全愿景和技术集成。</p><p></p><p>截止目前，微软已经整合了超过 40 种云安全服务，其相应的端到端安全产品包括身份和访问管理、威胁保护、统一终端管理、信息保护、云安全管理五大部分。</p><p></p><p>全面践行端到端安全愿景，是微软如今能成为“网络安全霸主”的倚仗，也是未来将会一直做下去的事情。那么，微软还有哪些解决方案，可以帮助世界各地企业应对日益复杂的网络威胁？</p><p></p><p>10 月 13 日 -14 日，一年一度面向 IT 决策者、IT 专业人员、企业开发人员的顶级技术大会 Microsoft Ignite 来了！在这里，你将进一步了解微软安全的全局解决方案，获取真知灼见！扫码报名，与万千技术人一起，开启这场为时 2 天的云上之旅！</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/3c/3cb49d9c4df08d2705c1c5fc260de3a1.jpeg\" /></p><p></p>",
    "publish_time": "2022-09-20 11:21:22",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "敏态业务挑战下，作业帮、微盟的数据库落地与调优实践",
    "url": "https://www.infoq.cn/article/2CmuevREKcKiOmCV8qix",
    "summary": "<p>面对数字时代线上流量的冲击，业务系统访问及数据量呈指数级上升，对数据库的安全性、稳定性、高可用都提出了更高的要求。企业一方面要维持传统业务的平稳运行，另一方面，也需要应对市场急速变化带来的<a href=\"https://www.infoq.cn/article/bMsmOvuc1JKfOfulpFzC\">敏态业务挑战</a>\"。</p><p></p><p>当开源数据库已经不能满足千变万化的业务需求、国产数据库成为企业首选，自研数据库的重要性不言而喻。9 月 26 日 19:00-21:00，我们邀请了 3 位技术专家，分享数据库自研过程中遇到的技术挑战与解决之道，以及具体业务场景中数据库落地调优经验。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d1/d176abef6dfdb27915d84cd790d0ff18.jpeg\" /></p><p></p><h2>议题介绍</h2><p></p><p></p><h5>19:00-19:40《云原生下缓存架构如何演变》</h5><p></p><p>分享嘉宾：顾雅各，作业帮 DBA</p><p>议题简介：当下，随着<a href=\"https://xie.infoq.cn/article/56d409df7cd452a57f35dfe9b\">云原生</a>\"在企业应用的场景越来越多，业务程序在容器等技术的加持下，也越来越灵活，高弹性，易伸缩，多活需求的业务程序，给传统的缓存也带来了挑战，怎么演变才能更好的服务业务？</p><p></p><p></p><h5>19:40-20:20《在敏态业务场景中，微盟数据库的应用实践之路》</h5><p></p><p>分享嘉宾：余成真，微盟数据库高级技术专家</p><p>议题简介：企业级 SaaS 平台重要考量指标之一：持续创新的能力。这种以业务创新、管理创新为导向的技术创新，传导至后台支撑应用的数据库更需要具备持续变更的能力。本次分享，将从资源部署、数据赋能、灵活集成、动态扩展四个维度阐述微盟在全链路压测项目中数据库侧的应用实践之路。</p><p></p><p></p><h5>20:20-21:00《TDSQL 破局敏态业务背后的技术演进》</h5><p></p><p>分享嘉宾：刘畅，腾讯云数据库高级工程师</p><p>议题简介：TDSQL 是腾讯云发布的一款全自研的、面向企业级应用的<a href=\"https://www.infoq.cn/video/aFGc1l02v39SsT1XSEAU\">分布式数据库</a>\"产品。在敏态业务下，数据库需要具备频繁扩缩容的能力。本次分享主要介绍 TDSQL 是如何在频繁扩缩容时，不影响事务执行，做到对上层业务无感知的。</p><p></p><h2>预约报名</h2><p></p><p></p><p>本次公开课，除嘉宾分享外，直播间的小伙伴们还可以通过评论区就分享主题向嘉宾提问互动，现在扫码，即可预约直播！</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/55/5506ff5ecd9f491fa0b6b378f346b123.jpeg\" /></p><p></p>",
    "publish_time": "2022-09-20 13:11:30",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]