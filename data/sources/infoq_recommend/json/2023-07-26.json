[
  {
    "title": "Magic Pocket：Dropbox的EB级Blob存储系统",
    "url": "https://www.infoq.cn/article/SWRM4CuXmNHCTLbh27bU",
    "summary": "<p>在旧金山QCon大会上，我介绍了Dropbox的EB级Blob存储系统是如何存储所有客户数据的。<a href=\"https://dropbox.tech/infrastructure/inside-the-magic-pocket\">Magic Pocket</a>\"的核心是一个非常大的键值存储，其中的值可以是任意大小的Blob。</p><p>&nbsp;</p><p>我们的系统提供了超过12个9的持久性和99.99%的可用性，在北美的三个地理区域运营。系统针对4BM Blob、不可变写入和冷数据做了优化。</p><p>&nbsp;</p><p>Magic Pocket每秒处理数千万个请求，其中很多流量来自验证器和后台迁移。目前，我们部署了60多万个存储驱动器，运行着数千台计算机。</p><p>&nbsp;</p><p></p><h2>对象存储设备</h2><p></p><p></p><p>Magic Pocket主要聚焦对象存储设备（OSD）。这些设备的容量超过2PB，每台存储机包含大约100块采用了<a href=\"https://en.wikipedia.org/wiki/Shingled_magnetic_recording\">叠瓦式记录</a>\"（SMR）技术的磁盘。</p><p>&nbsp;</p><p>与传统的<a href=\"https://en.wikipedia.org/wiki/Perpendicular_recording\">磁记录驱动器</a>\"相比，SMR的不同之处在于它执行顺序写入而不是随机写入，提升了密度。</p><p>&nbsp;</p><p>SMR的缺点是，磁头会在走过下一条磁道时擦除它，以防在任何地方随机写入。</p><p>&nbsp;</p><p>不过，这非常适合我们的工作负载模式。SMR驱动器也有一个传统区域，允许在必要时缓存随机写操作。通常，该区域占驱动器总容量的不到1%。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/7a/7a805bb3ef22405e52ffc66154d0a5df.png\" /></p><p></p><p>图1：SMR磁道布局</p><p>&nbsp;</p><p>宏观上，Magic Pocket的架构由三个区域组成：西海岸、中部和东海岸。Pocket是该系统的核心概念，它代表了系统中所有东西的逻辑版本。Magic Pocket可以有多个实例，如测试Pocket或生产Pocket之前的过渡Pocket。Pocket是独立运行的，彼此之间不共享数据库和计算资源。</p><p></p><h2>区域</h2><p></p><p></p><p>以下是每个区域中Magic Pocket架构的不同组件。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ad/ad3dfb62cd24989134b5626f4f4a4ecc.png\" /></p><p></p><p>图2：区域的工作机制</p><p>&nbsp;</p><p>第一个服务是前端，它是与客户端交互的服务。客户端通常会发起PUT请求（带有键和Blob）、GET请求、删除调用或扫描系统中可用的散列。</p><p>&nbsp;</p><p>GET请求会查询散列索引（分片MySQL数据库的集合）。散列索引按散列分片，散列是Blob的键，每个散列都映射到一个单元格（cell）或一个桶（bucket），并有一个校验和。单元格是所有存储设备所在的隔离单元：它们可以超过100PB，并且规模上有一定的增长空间。当容量不足时，系统将开辟一个新的单元格，实现水平扩展。</p><p>&nbsp;</p><p>跨区域复制器是执行跨区域复制的组件，可以将数据存储在多个区域。该操作是异步完成的，一旦主区域发生了提交，数据就会排队等待复制到另一个区域。控制平面管理流量协调、生成迁移计划并控制机器重装。它还管理着单元格状态信息。</p><p></p><h2>单元格</h2><p></p><p></p><p>如果想获取一个Blob，就需要访问了解桶和卷的桶服务：当请求一个桶时，请求会被映射到一个卷，而这个卷会被映射到一组OSD。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8e/8e6cc3f5dcbc78b585e040e06aad3fd7.png\" /></p><p></p><p>图3：单元格的运作机制</p><p>&nbsp;</p><p>一旦找到拥有所需Blob的OSD，就可以检索它了。对于写入数据，前端服务会找出哪些桶是打开的，并提交给处于就绪状态的桶。桶是预先创建好的，数据存储在卷内的一组OSD中。</p><p>&nbsp;</p><p>协调器是单元格中的一个重要组件，管理所有桶、卷和存储机。协调器不断检查存储机的运行状况，与桶服务和数据库协调信息，并执行擦除编码和修复：它通过在单元格内移动数据实现数据优化，并负责在必要时将数据移动到其他机器。卷管理器处理卷的读、写、修复和擦除编码。验证步骤在计算单元格内外都会执行。</p><p></p><h2>桶、卷和区段</h2><p></p><p></p><p>现在，我们可以更深入地研究Magic Pocket存储系统的组件了，即桶、卷和区段。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/54/5422c1f4b4cd5571c66d57d10ef7b342.png\" /></p><p></p><p>图4：桶、卷和区段</p><p>&nbsp;</p><p>桶是与卷和区段相关联的逻辑存储单元，代表磁盘上1到2GB的数据。当写入时，我们找到打开的桶和与之关联的OSD，然后写入区段。协调器管理桶、卷和区段信息，并可以通过为已删除的区段找到新的位置确保数据不会丢失。一个卷由一个或多个桶组成，它要么被复制，要么被擦除编码，它的状态可以是打开或关闭。一旦一个卷关闭后，就再也不会打开了。</p><p></p><h2>如何在对象存储设备上查找Blob</h2><p></p><p></p><p>在这一部分中，我们将介绍如何在存储机中查找Blob。为此，我们将OSD的地址存储在Blob中，并直接与这些OSD通信。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/01/0111f74e73077cbc2ec8c12a43daaf23.png\" /></p><p></p><p>图5：查找Blob</p><p>&nbsp;</p><p>磁盘驱动器（OSD）会加载所有区段信息，并创建一个内存索引，其中有磁盘偏移量的哈希值。如果想要获取块，就需要知道卷以及哪些OSD拥有该Blob。对于PUT，过程是一样的，但我们是并行地对每个OSD进行写操作，并且要在所有存储机上的写操作都完成后才会返回。由于卷被复制了4份，所以所有四个OSD中都有完整的副本。</p><p></p><h2>擦除编码</h2><p></p><p></p><p>虽然故障不可避免，但2个区域4个副本的复制成本很高。我们来看一下复制卷和擦除编码卷之间的区别，以及如何处理它。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/41/41d68262c82888aa56a5ad69ae514aa2.png\" /></p><p></p><p>图6：擦除编码</p><p>&nbsp;</p><p>擦除编码可以降低复制成本，并保持与复制相似的持久性。在我们的系统中，当一个卷快满了的时候，它就会关闭，就可以进行擦除编码。我们使用了一个擦除码，就像<a href=\"https://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction\">Reed-Solomon误码校正编码</a>\"（6，3），在一个卷组中有6个OSD和3个奇偶校验位。这是说，在一个数据区段中只有一个Blob，如果一个OSD出现故障，则可以重建它。重建可以发生在对数据的实时请求中，也可以作为修复的一部分在后台完成。擦除码有许多变体，它们在开销方面有各自的考量，例如，使用XOR作为擦除码可能很简单，但自定义擦除码可能更合用。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/74/74e9b15832c398b4375fba7a5a710d8a.png\" /></p><p></p><p>图7：故障和擦除编码</p><p>&nbsp;</p><p>关于这个主题，Huang等人的论文“<a href=\"https://www.usenix.org/system/files/conference/atc12/atc12-final181_0.pdf\">Windows Azure存储中的擦除编码</a>\"”是一份不错的资源，我们的系统就使用了类似的技术。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e1/e1c8d8f1ecb9e6adacac4185e8e1b107.png\" /></p><p></p><p>图8：Huang等人的论文“<a href=\"https://www.usenix.org/system/files/conference/atc12/atc12-final181_0.pdf\">Windows Azure存储中的擦除编码</a>\"”中的Reed-Solomon误码校正编码</p><p>&nbsp;</p><p>我在前面的例子中提到过的Reed-Solomon纠错码（6,3），有6个数据区段和3个奇偶校验位。另一个选项为本地重建代码，它优化了读取成本。Reed-Solomon纠错码（6,3）在出现任何故障时都要读取6次。但是，使用本地重建代码，对于同一类型的数据故障，虽然读取成本相同，但是与Reed Solomon的1.5倍复制因子相比，存储开销大约降低了1.33倍。虽然这看起来差别不大，但当规模比较大时，却可以节省大量的资金。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0b/0b7ff0c48f6d0e3fce2e7ea87dfd81bb.png\" /></p><p></p><p>图9：Huang等人的论文“<a href=\"https://www.usenix.org/system/files/conference/atc12/atc12-final181_0.pdf\">Windows Azure存储中的擦除编码</a>\"”中的重建代码比较</p><p>&nbsp;</p><p>本地重建代码针对组中出现一个故障的情况做了优化，生产环境中经常会遇到这种情况。做出这种权衡是可以接受的，因为在一个卷组中出现2个以上故障的情况很少见。</p><p>&nbsp;</p><p>这些编码的复制因子甚至可以更低：编码LRC-(12,2,2)可以容忍组内有三个故障，但不能容忍四个，此时只有部分故障可以重建。</p><p></p><h2>冷存储系统</h2><p></p><p></p><p>我们的系统还能做得更好吗？正如我们观察到的那样，90%的检索是针对去年上传的数据，80%的检索发生在前100天内，我们正在探索改进跨区域复制的方法。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ae/ae1ea9dc50946bef5324378bf03187ab.png\" /></p><p></p><p>图10：文件访问分布</p><p>&nbsp;</p><p>我们有大量不经常访问的冷数据，因此，我们希望优化工作负载，减少读取，并保持延迟、持久性和可用性基本不变。根据我们的观察，为了实现这一点，我们不必对冷存储进行实时写入，并且可以利用多个区域将复制因子降至2x以下。</p><p>&nbsp;</p><p>让我们看一下我们的冷存储系统是如何工作的，其灵感来自Facebook的<a href=\"https://research.facebook.com/publications/f4-facebooks-warm-blob-storage-system/\">暖Blob存储系统</a>\"。这篇有关f4的论文提出了一种方法，将一个Blob分成两半（分别存储在不同的区域），并对这两半做<a href=\"https://www.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation\">XOR</a>\"。要检索完整的Blob，Blob1和Blob2的任意组合或XOR就必须在任意两个区域中可用。但是，要执行写入操作，所有区域都需要完全可用。请注意，由于迁移是在后台异步进行的，所以它们不会影响实时进程。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6b/6b172db0c26898b7a7df956da0e6f010.png\" /></p><p></p><p>图11：分割Blob和冷存储</p><p>&nbsp;</p><p>这种冷存储系统有什么好处呢？通过将复制因子从2x降低到1.5x，我们节省了25%的成本。存储在冷存储中的片段仍然会在内部进行擦除编码，并且迁移是在后台进行的。为了减少主干带宽的开销，我们将请求发送到两个最近的区域，并且只在必要的时候才从其他区域获取。这又节省了大量的带宽。</p><p></p><h2>发布周期</h2><p></p><p></p><p>Magic Pocket是如何发布的？从所有过渡环境到生产环境，我们的发布周期大约为四周。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/cd/cdfbab14fa53d6eeeed0e48423051bd0.png\" /></p><p></p><p>图12：Magic Pocket的发布周期</p><p>&nbsp;</p><p>在提交更改之前，我们会运行一系列单元测试和集成测试，包含所有的依赖项，以及一个对所有数据进行全面验证的持久性阶段。每个区域在每个阶段都会进行大约一周的验证：我们的发布周期是完全自动化的，它会做适当的检查，如果有任何警告，它就会中止或不再继续更改代码。只有在特殊情况下，我们才会停止自动部署过程，并人为干预。</p><p></p><h2>验证</h2><p></p><p></p><p>那么验证呢？在系统内部，为了确保数据的准确性，我们做了大量的验证。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/7c/7cd4f894f4dac60cdc63c1910cbb4f6c.png\" /></p><p></p><p>图13：验证</p><p>&nbsp;</p><p>其中一项是由跨区域验证器执行的，它负责在上游客户端和系统之间同步数据映射。另一个是索引验证器，它会扫描索引表，确认每台存储机中是否存在特定的Blob：我们只是询问存储机已加载的区段询中是否有这个Blob，而不获取实际的内容。观察器是另一个会对Blob本身进行全面验证的组件，按分钟、小时、天和周进行采样。我们还有一个垃圾检查器，确保区段被删除后，其中的所有散列都会被删除。</p><p>&nbsp;</p><p></p><h2>运营</h2><p></p><p></p><p>因为Magic Pocket跨多个数据中心，所以我们要处理大量的迁移。我们管理着一个非常大的存储机机群，知道每时每刻都发生了什么非常重要。混乱时有发生，我们会通过大量的灾难恢复活动来测试系统的可靠性：升级这种规模的系统和系统本身一样困难。管理后台流量是我们的关键运营工作之一，因为那占用了我们大部分的流量和磁盘IOPS。磁盘洗涤器不间断地扫描所有流量并检查区段的校验和。我们根据业务将流量划分为不同的层，并根据网络情况对实时流量做优先级排序。</p><p>&nbsp;</p><p>控制平面会根据我们对数据中心迁移所做的预测来规划大量的后台流量：我们会考虑正在进行的迁移类型，如冷存储，并相应地制定计划。</p><p>&nbsp;</p><p>系统中有许多故障需要我们处理：我们每秒要修复4个区段，大小从1GB到2GB不等。我们有相当严格的SLA（少于48小时），因为那是我们持久性模型的组成部分，我们希望尽可能地缩短修复时间。OSD会根据单元格的大小和当前的利用率自动分配到系统中。</p><p>&nbsp;</p><p>我们也有很多向不同数据中心的迁移。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/fc/fc51e158cc2da866c93c26da6c5ad94e.png\" /></p><p></p><p>图14：迁移</p><p>&nbsp;</p><p>两年前，我们迁出了SJC地区，为此我们做了大量的计划。对于非常大的迁移，比如数百个PB，幕后会有大量的准备工作，我们会给自己额外留出时间，以确保迁移能够及时完成。</p><p>&nbsp;</p><p></p><h2>预测</h2><p></p><p></p><p>在管理这种规模的存储系统时，预测是一个很关键的部分。我们一直在应对存储增长的挑战，有时可能是意料之外的，那就需要我们能够快速做出调整并将新的数据接收到我们的系统中。此外，我们可能会因为供应链中断（如COVID大流行造成的供应链中断）而面临容量问题：一旦发现潜在的问题，我们就会开始制定备份计划，因为订购并向数据中心交付新容量需要相当长的时间。我们的预测直接集成到了控制平面中，这有助于我们根据容量团队提供的信息执行迁移。</p><p>&nbsp;</p><p></p><h2>小结</h2><p></p><p></p><p>在维护Magic Pocket的过程中，我们总结出了以下4条关键的经验：</p><p>保护和验证规模比较大时要慢慢来保持简单做最坏的打算</p><p>&nbsp;</p><p>首先，我们要优先考虑系统的保护和验证。这需要大量的开销，但端到端验证对于确保一致性和可靠性至关重要。</p><p>&nbsp;</p><p>在这种规模下，要慢慢来，稳定很重要。我们要优先考虑持久性，部署任何新内容之前都要等待验证完成。我们总是会考虑风险，为最坏的情况做准备。</p><p>&nbsp;</p><p>简单性也是一个关键因素。我们的目标是保持简单，特别是在大规模迁移期间，因为过多的优化可能会导致复杂的心智模型，增加计划和调试的难度。</p><p>&nbsp;</p><p>此外，我们总会准备一个备份计划，以防在迁移或部署期间出现故障或问题。我们会确保变更不是单向的，必要时可以逆转。总体而言，管理这种规模的存储系统需要综合考量保护、验证、简单性和准备工作等诸多方面。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/dropbox-magic-pocket-exabyte-storage/\">https://www.infoq.com/articles/dropbox-magic-pocket-exabyte-storage/</a>\"</p>",
    "publish_time": "2023-07-26 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "如何用最新的 Serverless 技术让文化古籍“活过来”？｜InfoQ《极客有约》",
    "url": "https://www.infoq.cn/article/x12MiigtFFFAgRpt18yq",
    "summary": "<p>Serverless 还可以做古籍活化？它还有哪些大家不知道的有趣应用？本期《极客有约》，我们和上海慧游文化 CEO宋杰和两位阿里云智能高级技术专家王仁达（封崇）、聂大鹏（拓山）一起聊聊Serverless 应用的那些事儿！</p>",
    "publish_time": "2023-07-26 10:19:31",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "2023 AIGC 知识库",
    "url": "https://www.infoq.cn/article/lW6C5d03cFo9K5bAeUGy",
    "summary": "<p></p><p><img src=\"https://static001.infoq.cn/resource/image/4c/2b/4cb8d22af5f7a6c0ee12f711d522162b.jpeg\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d5/d54d675c9e5d1d3e91b4eb202c506cc9.png\" /></p><p>扫/码/下/载</p>",
    "publish_time": "2023-07-26 11:17:44",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "企业如何制定有效的多云策略来满足业务需求？",
    "url": "https://www.infoq.cn/article/qY1fhgRyzNzVVsbwLs0O",
    "summary": "<p></p><p>随着用户对边缘计算、安全合规、区域定制、用云模式等方面的需求不断增加，单一一朵云已经满足不了企业用户的现实诉求。在刚刚结束的 ArchSummit 全球架构师峰会 2023（深圳站）“多云和分布式业务架构实践”解决方案专场上，<a href=\"https://xie.infoq.cn/article/cd2f6b638adcf146eb1797ecd\">火山引擎云原生平台</a>\"负责人沈健就围绕“海量算力下字节跳动的多云实践之路”为主题进行了分享，沈健基于字节跳动大规模云原生落地实践，分析了当前企业云管理难点、痛点，介绍企业从资源多云走向应用多云，获得更敏捷、更弹性、更灵活的全局应用治理能力的过程。</p><p></p><p></p><p></p><p>采访记者：InfoQ 资深编辑鲁冬雪</p><p>采访嘉宾：火山引擎云原生平台负责人沈健</p><p>嘉宾简介：2019 年加入字节跳动，曾先后就职于爱立信、EMC 、蚂蚁金服，主要从事泛基础设施软件相关的开发工作，在网络接入、多媒体子系统、大规模服务器应用公共组件、海量主机管理、云存储系统以及离在线混合部署等领域积累了丰富的实战经验。加入字节跳动后，先后领导了服务网格、智能运维、边缘计算、离在线主要存储以及泛 PaaS 等领域的产品研发工作，支撑了如头条、抖音等几十款应用的快速发展。</p><p></p><p>InfoQ：您觉得当前企业云架构的新发展趋势是怎么样的？关于“多云、混合云、私有云”都可以分享。</p><p></p><p>沈健：首先，企业的云架构必须紧密结合企业的业务需求和现有架构，不能仅仅从技术角度考虑。目前，企业云架构的核心重点在于长期的可演进性，为了满足企业的安全性、容灾性、合规性以及资产管理等需求，混合云架构已成为主流选择。</p><p></p><p>其次，混合云本身是一种<a href=\"https://xie.infoq.cn/article/4b066f1ca61fc611db0a98688\">多云架构</a>\"的体现。在多云环境下，企业可以选择使用公有云或私有云的组合方式。从长远来看，混合云和多云仍将是未来的主流趋势。</p><p></p><p>InfoQ：您认为在新趋势的推动下，企业的云战略，包括底层逻辑发生了哪些变化？</p><p></p><p>沈健：企业的云战略需要和企业的业务发展需求和整体目标对齐。过去，企业上云主要解决资源问题，随着上云，企业开始使用云上的自动化工具和 PaaS 工具，以提高研发效率。然而，随着深度上云，企业逐渐采用云上经过验证的成熟模式，包括生产、管理和营销等。因此，企业云战略的底层逻辑从追求资源转变为追求效率，最终实现对企业整体生产经营数字化的能力提升。</p><p></p><p>随着越来越多企业上云，先行者已经走得更远，后来者更多是追随者。如果不追随，随着社会生态的变化，企业将脱离社会生态。因此，后来者的选择大多是追赶先行者的能力。由此看出，不同阶段对不同企业上云的底层逻辑也有所不同。</p><p></p><p>InfoQ：在企业的云架构中，在实现多云策略的落地过程中，企业主要面临着哪些挑战？大家是怎么应对这些挑战的？</p><p></p><p>沈健：企业多云面临着众多挑战，我在演讲中也提到了字节跳动在实施企业多云过程中遇到的一些技术挑战。从技术层面来看，企业多云实施过程中将面临许多基础设施兼容性方面的挑战。兼容性的挑战对于大多数企业来说并不容易克服。此外，还面临着业务架构方面的挑战，例如业务架构的容灾性和业务规划，这将对企业的多云战略产生一定影响。</p><p></p><p>从整体来看，许多企业自行解决这些问题存在一定困难，或者说在专业水平上有一定难度。因此，一般建议企业与 IT 服务商和云供应商合作解决这些挑战。在这个过程中，更多地要考虑云供应商的意愿度、服务能力、资质以及实践经验等综合因素。</p><p></p><p>InfoQ：在云战略的制定和执行过程中，企业应该如何平衡成本、效率、安全和灵活性这些因素？</p><p></p><p>沈健：首先，这个问题并不能一概而论。对于每家企业来说，上云的动机主要是出于其业务需求。如果企业的业务正处于较为盈利的阶段，那么企业的首要目标应该是追求效率，进一步扩大业务规模才是最有价值的。在这个过程中，需要同时考虑安全问题，因为一旦安全出现问题，可能会对企业的整个经营和生产造成较大的影响。</p><p></p><p>此外，如果企业的业务效果并不明显，或者面临各种挑战，那么企业可能需要更加关注成本，在考虑未来灵活性的同时兼顾成本问题。</p><p></p><p>InfoQ：在多云的环境下，云原生应用的部署与管理存在什么样的问题？企业的业务架构又因为这些问题的存在发生了怎样的改变？</p><p></p><p>沈健：在多云架构下，首要考虑的是业务规划问题，即确定是否需要实施跨多云业务或在不同云平台上部署不同业务的模式。这种决策模式将对业务架构，尤其是数据架构产生重大冲击和影响，尤其是涉及到多云容灾或业务跨云的情况。</p><p></p><p>对于单一业务跨多云的模式，我们需要更加关注业务子系统之间的相互依赖关系，以及多云层面上可能出现的延迟、容灾和爆炸半径等相关影响。这些因素将对整个生产经营活动的安全性产生重大影响，因此对于这部分架构，我们需要特别注意。</p><p></p><p>InfoQ：在大规模的生产环境下，企业应该如何确保云架构的稳定性、可靠性以及可扩展性？</p><p></p><p>沈健：稳定性一直是一个永恒的话题，只有将各个方面的工作都做好，才能确保整体的稳定性。从架构的角度来看，云原生架构是一种非常出色的架构，特别是微服务。因为它将复杂的问题逐步分解为一系列小问题，从而简化了问题，降低了出错的概率。</p><p></p><p>此外，由于云原生架构可以将问题解耦成一系列小问题进行破解，所以业务在单点层面遇到的扩展性问题，可以通过弹性的方式轻松解决。因此，云原生架构在可扩展性方面非常出色。</p><p></p><p>关于稳定性和可靠性，其最关键的是快速发现和解决问题的能力。目前基于 Kubernetes 的容器服务具有很强的自我恢复能力，并且具备快速更新的能力。从字节跳动内部的实践来看，我们每天进行 3 万多次的更新。一方面支持产品的快速迭代，另一方面在遇到问题时能够快速规避甚至回滚以解决问题。因此，即使在局部出现一些小问题，从整体角度来看，如果从外部感受，我们遇到的大规模稳定性问题非常少。</p><p></p><p>InfoQ：可以分享一些字节跳动在实施多云策略过程中的一些经验或者教训吗？字节又是如何应对这些挑战的？</p><p></p><p>沈健：一开始，字节采用了业务多云的方式，即将不同的业务部署在不同的云平台上。然而，这种方式带来了很多管理上的浪费和资源上的浪费。特别是对于一些重型服务，它们最初是基于物理机和主机的，这种基于主机的模式对主机具有很高的依赖性。因此，一旦进行迁移，由于底层基础设施的变化，换一种云的成本非常高，因此业务并没有强烈的动力去进行迁移。此外，在遇到资源紧张或容灾需求时，改造成本也非常高。因此，后来我们采用了全面的云原生化方法来解决这个问题，这是第一个方面的问题。</p><p></p><p>第二个方面是，在使用多云的过程中，最初对于一些核心服务或存储服务，它们对于容灾域的感知并不强。为了统一所有服务，我们在分布式云平台和联邦层面上实现了对容灾域的感知。这样，在部署和运维过程中，这些业务能够自然地感知底层可用区带来的变化，并且可以减少对应的影响范围。</p><p></p><p>InfoQ：在今天演讲中，您提到了字节跳动在云管理方面的挑战和解决方案，您能否跟大家进一步分享这些解决方案是如何帮助字节提高云管理效率的？</p><p></p><p>沈健：我刚才提到，推广所有基于物理机的业务时，规划变得非常困难。有时候业务也无法准确回答后续需要多少资源容量的问题。在整个技术链的过程中，涉及到多个方面，需要逐层推导。只要有一层出现错误，最终得到的结果可能就不准确。这是在资源规划方面存在的问题。对于推进日常运营活动也会带来很大的挑战。</p><p></p><p>此外，从运维者的角度来看，为了应对资源短缺或提高资源效率，他们需要进行各种平衡。例如，在一个集群中添加更多的机器，或将机器迁移至另一个集群。这种来回调整本身会导致运维工作量的浪费。同时，由于频繁的迁移和调整，还可能引发更多不必要的故障。字节跳动选择发展分布式云平台，实际上也是因为内部存在一些痛点的积累。</p><p></p><p>InfoQ：在多云环境中，关于云原生应用的部署和管理您是怎么看的？当前火山引擎有哪些新技术和工具可以帮助企业实现云原生应用的部署和管理？</p><p></p><p>沈健：从云原生应用的部署管理角度来看，不同业务可以采用独立的管理模式，火山引擎也提供相应的容器服务能力供客户使用。此外，企业想要进行多云对等部署时，通常会使用一些 DevOps 平台。火山引擎还提供类似于持续集成的能力，并且具有相对较高的开放性，可供客户选择。</p><p></p><p>对于我们内部的实践而言，考虑到多云的灵活性和业务部署前期的不可预测性，我们更倾向于推荐客户使用我们的云原生多云应用平台。该平台有很多的灵活性，能够轻松进行调整。对客户而言，它具有出色的灵活性、操作便捷性和后期运维的可靠性。</p><p></p><p>InfoQ：在分布式云的环境下，企业是如何优化自己的云原生应用的性能和资源利用率的？</p><p></p><p>沈健：性能和资源利用率是两个不同的问题。性能主要指应用的运行效率，包括应用本身的延迟和其所能承载的容量。较高的性能通常意味着更少的资源使用。对于云原生应用的性能，由于应用链路较长，我们通常建议用户使用全链路的追踪能力，例如应用性能监控（APM），以便更方便地定位瓶颈所在。对于单个应用，也可以使用一些性能分析工具来确定应用的瓶颈，并通过逐层治理的方式提高性能。</p><p></p><p>资源利用率则不仅仅依赖于单个应用的提升。一方面，它需要更高的部署密度。在我们内部的实践中，字节跳动的联邦集群模式（即开源的 KubeAdmiral 模式）可以提高约 10%的部署密度，减少碎片化，从而在一定程度上提高资源利用率。</p><p></p><p>此外，单个应用的在线服务器很难实现高资源利用率。因此，字节跳动采用了混合部署模式，即将 CPU 利用率高的应用与 CPU 利用率低的应用相结合，以实现资源自然分配的提升，这就是所说的混合部署模式。</p><p></p><p>InfoQ：您觉得在快速变化的业务需求和技术趋势之下，企业如何适应这些变化？为了持续保持竞争力，您觉得他们需要做哪些事情？</p><p></p><p>沈健：这个问题涉及到企业采用云原生架构的核心问题。首先，企业的竞争力来自于其对外部快速变化的响应能力。云原生架构能够快速响应外部快速变化的需求，因为它能够快速支持架构的更新和变化。</p><p></p><p>另外，对于复杂架构而言，企业需要拥有专业化的人才。特别是传统的单体应用，需要拥有非常专业化的人才。然而，招聘这样的人才对企业来说可能存在一定的难度。而一旦招聘到这些专业人才，如何快速将他们投入到相应的应用中，以支持企业快速的 IT 变化，也是一个启动成本的考量。</p><p></p><p>在字节跳动的发展过程中，我们积累了一些经验，即云原生化和服务网格化。通过使用各种开放的中间件技术，我们能够满足具备不同语言技能的员工的需求，使他们能够专注于企业的核心逻辑。这种方法既降低了企业的启动成本，又能够快速应对新的变化。这是字节跳动采用的一些方法。</p><p></p><p>InfoQ：展望未来，在多云分布式云发展的下一阶段，企业应该如何规划和设计自己的云架构，从而实现更高效、更灵活以及更安全的云服务？</p><p></p><p>沈健：对于企业而言，有两种选择。一种是采用可演进的架构，逐步将当前的架构调整为符合云的主流架构。另一种是在业务模式或应用系统发生重大变化时，直接使用新的架构来解决问题，采用一次性的迁移方式。这种方式可以降低企业的成本。大型企业通常会选择可演进的架构，因为他们可能有很多历史遗留问题需要解决。在这种情况下，他们对于 IT 咨询和服务提供商的专业水平要求较高。相关实践经验在这方面将起到指导作用。</p><p></p><p>InfoQ：火山引擎云原生下一步的主攻方向是什么？主要会解决用户的哪些问题？会有哪些创新？</p><p></p><p>沈健：有几个关键方向需要注意。首先，AI 智能化的发展越来越迅猛，成为未来的主流趋势。因此，在云原生化中，特别是在线 AI 应用的云原生化上，是一个重要的发展方向。其次，<a href=\"https://xie.infoq.cn/article/cd2f6b638adcf146eb1797ecd\">分布式云</a>\"的资源变得越来越零散。如何让用户能够更好地、无感知地使用这种分布式云，并具备智能的调度能力，使其应用能够灵活地适应这一体系，对用户而言也具有很大吸引力。</p><p></p><p>此外，从云本身的发展角度来看，已经从虚拟机模式逐渐向云原生发展，而下一个阶段则是向更上层的 Serverless 化发展。对于一个可演进的架构来说，这也是我们目前关注的重点。在字节跳动内部，我们已经经历了这样一个可演进的架构，并在不断将其标准化，逐步向外部提供这样的能力。</p>",
    "publish_time": "2023-07-26 14:30:59",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "支付宝资深安全专家马传雷（岳立），确认担任QCon北京业务安全技术专题出品人",
    "url": "https://www.infoq.cn/article/kShAZz2m7mUdLANziUi3",
    "summary": "<p>9 月 3 日 - 5 日，在 <a href=\"https://qcon.infoq.cn/202309/beijing/?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_campaign=9&amp;utm_term=0726\">QCon 全球软件开发大会（北京站）</a>\"，支付宝资深安全专家马传雷（岳立）将担任「业务安全技术」的专题出品人。在此次专题中，你将了解到在业务不断创新寻求新的增长空间之时，安全团队在技术领域应如何进行前瞻性布局和先进性建设。</p><p></p><p>马传雷（岳立）有 15 年安全从业经验，支付宝资深安全专家、业务风险技术部负责人，蚂蚁终端技术发展委员会成员，曾任同盾科技反欺诈产研团队负责人、腾讯安全应急响应中心技术负责人、绿盟科技安全技术部总监等职务，在网络安全攻防、业务安全建设和平台风险治理产品研发等方面有丰富的经验，《风控要略：互联网业务反欺诈之路》作者之一。</p><p></p><p>相信马传雷（岳立）的到来，可以帮助提升此专题的质量，让你对安全团队在技术领域进行的前瞻性布局和先进性建设有更深入的了解，这可以为业务发展创造良好的业务安全环境，打开更大发展空间。</p><p></p><p>除上述专题外，QCon 北京还将围绕<a href=\"https://qcon.infoq.cn/202309/beijing/track/1553?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_campaign=9\">异构计算</a>\"、<a href=\"https://qcon.infoq.cn/202309/beijing/track/1554?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_campaign=9\">向量数据库</a>\"、<a href=\"https://qcon.infoq.cn/202309/beijing/track/1556?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_campaign=9\">FinOps&nbsp;落地</a>\"、<a href=\"https://qcon.infoq.cn/202309/beijing/track/1563?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_campaign=9\">重塑高效组织架构</a>\"、<a href=\"https://qcon.infoq.cn/202309/beijing/track/1557?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_campaign=9\">从&nbsp;BI&nbsp;到&nbsp;BI+AI，新计算范式下的大数据平台</a>\"、<a href=\"https://qcon.infoq.cn/202309/beijing/track/1559?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_campaign=9\">从&nbsp;MLOps&nbsp;到&nbsp;LLMOps</a>\" 等进行分享。</p><p></p><p>近 100 名讲师、近 30 个精彩专题、8 种交流活动，QCon 北京 2023，相约 9 月！ 现在购票，享 9 折特惠，立省 ¥880！咨询购票请联系 18514549229（微信同手机号）。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/33/33cbbbf20baa8b2a18db4f0681f159aa.jpeg\" /></p><p></p>",
    "publish_time": "2023-07-26 15:26:07",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]