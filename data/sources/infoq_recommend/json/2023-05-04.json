[
  {
    "title": "AI开始抢黑客饭碗？攻击快又准，不到一分钟破解超过半数的密码",
    "url": "https://www.infoq.cn/article/HKsPfKWmCpbHHA7diwNA",
    "summary": "<p>在当今的网络环境中，密码已经远称不上是最好的安全防范措施。密码难以创建和管理，也很容易遭到破解。毕竟大多数密码都遵循着可预测的模式和/或用到了黑客已经掌握的常用词组合。</p><p></p><p>Tech.co报道称，密码管理公司NordPas通过整理发现，普通用户的全部在线账户至少要用到100个密码。因为大多数人根本记不住100种各不相同的密码，所以要么会使用强度过低的密码内容、要么在所有账户间重复使用某些跟自己有关的字符组合。而这两种方法，都抵挡不住黑客和其他线上恶意攻击者的窥探。</p><p></p><p>如今，更大的威胁已经出现，这就是人工智能。AI的兴起占据着各种媒体的头版头条，人们开始争论这一技术突破可能在艺术、健康、教育等各个领域掀起的滔天巨浪。而事实证明，AI对于在线安全也将产生严重影响。</p><p></p><h2>面对AI，大多数密码都不够安全</h2><p></p><p></p><p>根据网络安全公司HomeSecurityHeroes发布的报告，名为PassGAN的AI密码破解工具能在一分钟之内破解掉51%的常用密码组合，一小时内破解掉65%，一天之内破解71%，一个月之内破解81%。</p><p></p><p>该公司使用这款工具分析了Rockyou泄露密码数据集内的超1500个凭证，进一步探究了决定密码强弱的原因所在。根据这项研究，PassGAN平均只需要不到6分钟时间就能破解任何少于8个字符的密码，无论是否包含符号。</p><p></p><p>更长的数字密码倒是安全性更高，PassGAN至少需要10个月才能攻破18位以上纯数字密码的大门。如果能再加入符号、数字、小写字母和大写字母组合，PassGAN则要花6亿亿年才能将其破解。</p><p></p><p>当然了，这里的重点是提醒大家一定要为账户选择“无法破解”的密码。但从长远来看，暂时的安全未必就是永远的安全。以PassGAN为代表的AI密码破解器将为黑客和攻击者带来前所未有的行动能力，未来整个安全世界恐怕都将因此而天翻地覆。</p><p></p><h2>AI密码破解器的工作原理</h2><p></p><p></p><p>在传统的密码破解过程中，黑客会将单词列表跟已经泄露或者常用的密码数据库进行比对，再根据这些密码的变体尝试猜测其他可能的密码内容。</p><p></p><p>AI密码破解器能够自主完成这个操作过程，以远超人类黑客的速度达成目标。</p><p></p><p>PassGAN使用的机器学习算法就能快速“从实际泄露的密码中学习真实密码的分布”。例如，假设泄露的数据库内出现了“password”这类密码内容，AI破解工具就能据此猜测出“Passw0rd”或者“p@assw0rd”等组合，尝试用它登录其他账户。</p><p></p><p>AI还会边做边学，随着生成的预测越来越多，其准确率也会一路上升。</p><p></p><p>虽然现状令人担忧，但可以看到AI密码破解器必须先能访问到泄露的密码，之后才能开始探寻其中规律。也就是说，只要大家采取措施保护自己的在线账户免遭入侵或泄露，那就问题不大。</p><p></p><h2>如何应对AI黑客？</h2><p></p><p></p><p>首先，确保密码能抵御AI攻击的一种方法，就是至少使用15个字符，而且混合用上大小写字母、数字和符号。我们很难为每个账户都想出这么复杂的密码内容，所以这里建议大家使用自动生成密码。没错，就是各位都听说过的密码管理器——它能为账户生成强密码，而后保存并在下次登录时自动填写。</p><p></p><p>第二，确保不会在多个账户之间重复使用密码。重复使用的密码极易泄露，因为一旦某个账户被破解，黑客就能立即访问所有其他账户。另外，如果您担心自己记不住太复杂的特殊字符串，那密码管理器就是最好的选项。它还能通过Safari等浏览器发布密码重复使用和已泄露警报，提醒用户随时进行调整和修改。</p><p></p><p>第三，定期更新密码内容。安全软件开发商McAfee的建议是第三个月更换一次。如果有任何账户受到数据泄露影响，则应立即做密码更新。</p><p></p><p>第四，通过双因素或多因素身份验证添加额外的安全层。但请注意，别太信任短信验证码——这种机制极易受到攻击。最后，尽量别使用公共Wi-Fi，特别是别在这类开放网络环境下使用银行应用。</p><p></p><p>虽然以上建议都不足以完全保证在线账户远离安全威胁，但无论面对的是人类恶意黑客还是AI工具，这些良好的安全习惯都能有效降低我们受到攻击影响的概率。</p><p></p><p>原文链接：</p><p>slashgear.com/1268247/heres-how-quickly-ai-can-crack-your-passwords-according-to-new-study/</p>",
    "publish_time": "2023-05-04 09:59:53",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "75岁深度学习之父突然离职谷歌：痛悔毕生工作，警告AI会对人类构成「灾难性」威胁",
    "url": "https://www.infoq.cn/article/Y9rIogQk8Sjt33bLDMHk",
    "summary": "<p></p><p>带着对毕生工作的遗憾和恐惧，“AI教父”决定离开谷歌。</p><p></p><h2>Geoffrey Hinton 从谷歌辞职</h2><p></p><p></p><p>人工智能教父Geoffrey Hinton辞去了工作，并警告这一技术领域的持续发展或将带来巨大风险。</p><p></p><p>现年75岁的Geoffrey Hinton在发给《纽约时报》的声明中证实，他已经正式从谷歌辞职。</p><p></p><p>《纽约时报》报道称，Hinton上个月已经向谷歌递交了辞呈，并于上周四直接与谷歌CEO Sundar&nbsp;Pichai当面交流。不过目前尚不清楚此次讨论的具体细节。</p><p></p><p>Geoffrey Hinton因其在神经网络方面的开创性工作获得“计算机届的诺贝尔奖” — 图灵奖。</p><p></p><p>Geoffrey Hinton作为“三位AI教父”之一，与另外两位合作伙伴共同获得了2018年图灵奖，旨在表彰他们为当前AI繁荣做出的基础性贡献。</p><p></p><p>但如今的他却对自己投入一生的研究感到遗憾。</p><p></p><p>根据《纽约时报》对他的采访，Hinton最近刚刚辞去在谷歌的工作，也终于可以畅谈AI技术背后的风险了。已经在谷歌工作十多年的Hinton表示，“我总在用这样的借口安慰自己：哪怕我自己不做，其他人也会这样做。但目前真的不知道要怎么防止坏蛋利用AI来作恶。”</p><p></p><p>虚假信息的传播只是Hinton眼下想要强调的风险之一。从长远来看，他担心AI会彻底消除一切需要大量记忆的工作，而随着其逐步编写并运行构成自身的代码，AI也许会最终取代人类。</p><p></p><p>Hinton在采访中指出，“其实不少人都相信，AI实际上能够变得比人类更聪明，但大多数人认为这还很遥远。没错，我也曾经觉得还很遥远，没准要再过30年、50年甚至更久。但现在，我显然没法再这么想了。”</p><p></p><p>在接受BBC采访时，他甚至提到AI聊天机器人已经构成“相当可怕”的威胁。&nbsp;“据我所知，目前的IT还不比我们聪明，但我相信它们很快就会超越人类。”</p><p></p><p>此外，Hinton博士承认自己离开谷歌也有年龄方面的考量，他告诉BBC“我已经75岁，是时候退休了。”</p><p></p><h2>Geoffrey Hinton：GPT-4等模型已拥有远超一般人的知识储备</h2><p></p><p></p><p>Hinton博士在神经网络和深度学习方面的开创性研究，为如今包括ChatGPT在内的AI系统铺平了发展之路。</p><p></p><p>在人工智能当中，神经网络是一种在信息学习和处理方面与人脑相似的系统。正是神经网络让AI能够像人类一样从经验中学习，这就是我们常说的深度学习概念。</p><p></p><p>谷歌当初收购了一家由Hinton和他两名学生共同创办的公司，这位终身学者也由此加入搜索巨头麾下。其中一名学生后来成为OpenAI的首席科学家。Hinton和他的学生们开发了一套神经网络，在分析了数千张照片之后，它成功学会了识别狗、猫和花等常见物体。正是这项工作，最终促成了ChatGPT和谷歌Bard的诞生。</p><p></p><p>Hinton这位认知心理学家兼计算机科学家表示，聊天机器人很快就会超越人脑所能容纳的信息水平。</p><p></p><p>“现在，我们看到的GPT-4等模型已经拥有远超一般人的知识储备，没错，是远远超过。虽然在推理方面还不太好，但AI也已经具备了简单的推理能力。”</p><p></p><p>“考虑到其发展速度，我们预计情况会很快好转。而这正是我们最担心的问题。”</p><p></p><p>在《纽约时报》的文章中，Hinton博士提到了那帮打算用AI“干坏事”的“坏蛋们”。在采访当中，他进一步解释道：“当然，这考虑的是最糟糕的情况，堪称噩梦。”“比方说，大家可以想象某些威权领导者可能给出总体目标，然后任由AI机器人制定附属计划。”</p><p></p><p>这位科学家警告称，此类行为最终可能会让AI“制定出「我需要获取更多能量」之类的实施计划”。“在我看来，我们正在开发的智能跟人类自身拥有的智能有着明显区别。”</p><p></p><p>“我们属于生物系统，AI则属于数字系统。二者最大的区别在于，数字系统之间有着大量相同的权重集和相同的世界模型。”</p><p></p><p>“所有这些副本既可以各自单独学习，也可以立即实现知识共享。这就好像面对一万个人，每个人都能分别学习知识，而其他人会自动同步掌握这些知识。正因为如此，聊天机器人的信息储备才远远超过一切人类。”</p><p></p><p>英国高级研究与发明局主席Matt Clifford也以个人身份向BBC表示，Hinton博士的声明“凸显出AI能力正以惊人的速度加快发展”。“这项技术有着巨大的优势，但人类世界必须在AI安全与控制方面紧急投入更多资源。”</p><p></p><h2>“没必要叫停AI模型的开发工作”</h2><p></p><p></p><p>与Hinton博士一道，还有更多专家加入这个行列，他们纷纷对AI的发展速度和方向表达了担忧。</p><p></p><p>今年3月，AI领域数十人共同署名、科技富豪马斯克高调参与的一封公开信震惊世界，他们呼吁暂停一切比当前版本聊天机器人ChatGPT更先进的AI模型开发工作，腾出时间设计并实施更强有力的安全控制措施。</p><p></p><p>与Hinton博士及Yann LeCun共同因深度学习方面的卓越贡献而获得2018年图灵奖的另一位AI教父Yoshua&nbsp;Bengio，也在这封公开信上签下了姓名。Bengio写道，面对AI系统的“意外加速”，“我们需要放缓脚步”。</p><p></p><p>但Hinton博士告诉BBC，“在短期之内”，他认为AI带来的好处还是多于风险，“所以我觉得没必要叫停AI模型的开发工作。”</p><p></p><p>他还提到，如今AI已经在各个国家之间引起军备竞赛，所以想要叫停将会困难重重。“即使美国这边全体停手，中国也会继续推进并取得巨大的领先优势。”</p><p></p><p>Hinton博士表示，他只是科学专家，并不是政策专家。政府有责任确保AI的开发工作“充分考虑到如何阻止其被恶意滥用”。</p><p></p><h2>“负责任的做法”</h2><p></p><p></p><p>Hinton同时在Twitter上澄清了自己对谷歌AI管理工作的立场：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/84/8450bd6b622d71b3a853fbbf94153ad6.png\" /></p><p></p><p></p><blockquote>“在今天的《纽约时报》采访中，记者暗示我离开谷歌是对公司不满。实际上，我离开是为了讨论AI的风险，而不是要表达对谷歌的态度。谷歌对待AI的态度一直非常负责”。Hinton博士强调，他并不想批评谷歌，这家科技巨头已经“极具责任心”。</blockquote><p></p><p></p><p>“我甚至想替谷歌说几句好话。如果我不是谷歌员工，那这些表述应该会更可信。”</p><p></p><p>根据《纽约时报》的采访，Hinton对谷歌的AI技术管理举措表示赞许，也承认微软将OpenAI新成果注入Bing的行为直接挑战了谷歌的核心业务，在搜索巨头内部引发了“红色代码”反应。Hinton感到这股激烈的竞争浪潮恐怕无法平息，最终可能令整个世界充斥着虚假的图像和文字，人类再也无法分辨“什么是真、什么是假”。</p><p></p><p>谷歌首席科学家Jeff Dean则通过声明想要缓和这种担忧，“我们仍致力于对AI采取负责任的态度。我们不断学习和研究新出现的风险，与此同时也在大胆创新。”</p><p></p><p>谷歌首席科学家Jeff Dean在一份声明中指出，“我们仍致力于对AI采取负责任的态度。我们不断学习和研究新出现的风险，与此同时也在大胆创新。”</p><p></p><p>更重要的是，AI聊天机器人还只是AI技术的一个小小切片，只不过目前成了风口浪尖上的焦点议题。</p><p></p><p>AI技术已经在流媒体平台上决定用户接下来会看到什么内容，也可以在招聘流程中被用于筛选申请人、被保险公司用于计算保费，也可以诊断医疗状况（但最终决策权还是在人类医生手中）。</p><p></p><p>但如今，我们已经开始感受到通用人工智能（AGI）的兴起，它们能够通过训练完成特定范围内的各类任务。所以尽管目前ChatGPT主要通过查询向用户提供文本答案，但其背后同时蕴藏着无穷无尽的可能性。</p><p></p><p>而且AI发展的速度本身甚至令其创造者也感到惊讶。自从Hinton博士2012年建立起开创性的图像分析神经网络以来，AI世界已经发生了翻天覆地的变化。</p><p></p><p>就连谷歌掌门人Sundar&nbsp;Pichai也在最近的采访中表示，他也无法完全理解自家AI聊天机器人Bard所能做到的一切。也就是说，我们正坐在一列高速列车上，而它或许终有一天能够自行建造轨道。</p><p></p><p>参考链接：</p><p></p><p><a href=\"https://www.bbc.com/news/world-us-canada-65452940?at_medium=RSS&amp;at_campaign=KARANGA\">https://www.bbc.com/news/world-us-canada-65452940?at_medium=RSS&amp;at_campaign=KARANGA</a>\"</p><p></p><p><a href=\"https://www.theverge.com/2023/5/1/23706311/hinton-godfather-of-ai-threats-fears-warnings\">https://www.theverge.com/2023/5/1/23706311/hinton-godfather-of-ai-threats-fears-warnings</a>\"</p>",
    "publish_time": "2023-05-04 11:44:13",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "一次电梯故障，“逼得”这个程序员在29岁时写出了 Rust",
    "url": "https://www.infoq.cn/article/s7FZRlPdm3C0TuMjvBJ8",
    "summary": "<p></p><p>2006 年，29 岁的 Hoare 在开源浏览器公司 <a href=\"https://www.infoq.cn/article/dxf9lY8Elt5BtbtEUG0z\">Mozilla </a>\"当程序员。当他回到位于温哥华的公寓时发现电梯出了故障，里面的软件也崩溃了，而这事儿已经不只一两次了。</p><p></p><p>当他爬楼上去时，心里十分很恼火，因为 Hoare 住在 21 楼。“这也太荒唐了，”他心想，“我们搞计算机的，连一部正常运行的电梯都造不出来！”Hoare 明白，这类很多故障都是程序如何使用内存的问题。诸如电梯之类的设备中，软件一般都是用 C 或 C++ 语言编写的，这些编程语言以能让开发者写出快速、紧凑的代码而著称。但问题在于，这些语言很可能会在不经意间引入内存错误，从而造成软件崩溃。比如微软曾估计，他们代码中有 70% 的漏洞是使用这些程序设计语言编写代码的内存错误所致。</p><p></p><p>我们中的大多数人，当发现自己要费劲爬上 21 层楼时都会感到愤怒，但随后就抛诸脑后了。不过 Hoare 还是决定做点什么。</p><p></p><p>他打开笔记本电脑，开始设计一门新的计算机语言，他希望这门语言可以在没有内存错误的情况下，编写出更短、更快的代码。他以一种非常耐寒的真菌 Rust 的名字命名，并称这种真菌“为了生存而过度设计”。</p><p></p><p>注：锈病菌类（rust disease fungixiubingjun）是引起植物发生锈病的真菌，属有隔担子菌纲锈菌目。</p><p></p><p>17 年过去了，<a href=\"https://www.infoq.cn/article/HdhHwuPQk4FCdPBpmdlP\">Rust </a>\"已经成为世界上最流行的新语言之一，也许是最热门的。有 280 万程序员使用 Rust，微软和亚马逊等公司都认为 Rust 是他们未来发展的关键。聊天平台 Discord 利用 Rust 加快了系统的速度，Dropbox 则利用 Rust 将文件与你的计算机进行同步，Cloudflare 则将 Rust 用于处理 20% 以上的互联网流量。</p><p></p><p>在程序员论坛 <a href=\"https://www.infoq.cn/article/9OSwTpG2SxfEPHSFfKoU\">Stack Overflow</a>\" 每年一次的全球开发者调查中，Rust 连续七年被评为程序员最“喜爱”的语言，甚至美国政府也在积极推动 Rust 语言的软件，来增强其程序的安全性。</p><p></p><p>和其他很多成功开源项目一样，Rust 也成为了“谷仓”：目前有数以百计的铁杆贡献者，其中很多都是志愿者。Hoare 本人在 2013 年就离开了这个项目，并且很乐意地把他交给了其他工程师，其中就有 Mozilla 的一个核心团队。</p><p></p><h3>凭什么脱颖而出</h3><p></p><p></p><p>一个人发明一门新的程序设计语言并不稀奇。许多程序员一直把创建小项目作为自己的副业。但很少有一门语言可以像 JavaScript、Python、Java 这样的著名语言一样屹立不倒。Rust 是怎么做到的？</p><p></p><p>要明白为什么 Rust 如此有用，就必须要深入地研究一下程序员是怎样处理计算机内存的。</p><p></p><p>你可以非常简单地将计算机中的动态存储器想象成一块黑板。一个软件运行时会在黑板上不停地写下数据，记录哪一个数据在哪里，然后在不需要的时候擦除。但是，不同的计算机语言对数据的处理方法是不一样的。传统的 C 或 C++ 等程序设计语言被设计成，程序员在软件如何以及何时使用黑板的问题上有很大的权力。</p><p></p><p>这种权力很有用：有了对动态存储器如此多的控制，程序员可以让软件运行得非常快速。这也是 C 和 C++ 常常用于编写“裸机”代码的原因，也就是可以直接与硬件进行交互。没有搭载像 Windows 或 Linux 操作系统的机器，包括从透析机到收银机，都是基于这样的代码运行的。（它也适用于更高级的计算：有时，操作系统必须和硬件进行通信）Windows、Linux 和 MacOS 的内核基本上都是用 C 语言编写的。</p><p></p><p>不过，虽然 C 和 C++ 之类的语言很快，但要付出一定的代价。它们需要程序员密切跟踪哪些存储器被写入以及何时进行擦除。万一你不经意间忘记擦除了些什么，那很有可能会造成程序崩溃：软件稍后可能会试图利用那些它认为是空的内存空间，而那些内存空间中却存在着一些东西。或者，你可以给数字入侵者一个潜入的方法。黑客们可能会发现，某个程序没有正确地清理它的内存——那些本应被删除的信息（如密码、财务信息等）还留在那儿，并悄悄地将其窃取。C 或 C++ 代码越长就越容易出现内存错误，即使是最细心的程序员，也会让软件充满大量的漏洞。</p><p></p><p>无人机公司 Fusion Engineering 的联合创始人、Rust 库团队的负责人 Mara Bos 说：“在 C 或 C++ 中，你一直都很担心自己的代码会突然崩溃。”</p><p></p><p>在 90 年代，一组新的语言如 Java、JavaScript 和 Python 开始风靡全球。这些语言采取了完全不同的方式。为了减轻程序员的压力，它们通过使用“垃圾收集器”来自动管理内存，这些组件会在软件运行时定期清理内存。转眼间，你就可以编写没有内存错误的代码了。</p><p></p><p>但是坏处在于，你会丧失细粒度的控制，你的程序也会变得更慢（因为垃圾回收会占用关键的处理时间），并且用这种语言编写的软件需要更多的内存。所以，编程的世界大致被划分为两个部分。如果一个软件需要快速运行或者在嵌入式设备很小的芯片上运行，那么这个软件就倾向于使用 C 或 C++ 编写。如果是 Web 应用或移动设备应用——在代码世界中越来越壮大——那么你就得使用较新的、具备垃圾回收特性的程序设计语言。</p><p></p><p>对于 Rust，Hoare 的目的是创建一门语言来这些方法的差异。该语言不要求程序员手工计算出他们在内存中放置数据的位置，Rust 会做到这一点。但是它对如何在程序中使用或者复制数据，却有很多严格的规则。你必须学会那些编程规则，它们比 Python 或 JavaScript 中的那些规则复杂得多。</p><p></p><p>Rust 代码编写起来可能会比较困难，但是“内存安全”，你不必担心无意中插入了一个致命的内存错误。最重要的是，Rust 还会提供“并发安全”的特性。现代程序可以同时处理多个任务，也就是并发处理。有时候不同的线程会在同一时间对同一内存位置进行编辑，而 Rust 的内存管理机制可以避免这一问题。</p><p></p><h3>Mozilla 的“书呆子洞”</h3><p></p><p></p><p>Hoare 刚开始使用笔记本电脑设计 Rust 的时候，他就已经是一个拥有十年软件开发经验的老鸟了，当时正在 Mozilla 全职工作。Rust 最初仅仅是他的一项副业。</p><p></p><p>Hoare 花费数年的时间对 Rust 进行了研究，并向其他程序员展示了 Rust，结果引起了不同的反响。他在一封邮件中说道，“有些程序员表现出了极大的热情，但也有许多程序员却对我嗤之以鼻，说‘这样是行不通的’，或者‘这根本就不管用’。”</p><p></p><p>尽管如此，Mozilla 的高管们对 Rust 很有兴趣。他们认识到 Rust 能够帮助公司开发出一个更好的浏览器引擎。众所周知，浏览器是一个非常复杂的软件，存在着大量潜在的内存错误。</p><p></p><p>Patrick Walton 是参与其中的一名员工，他在决定放弃程序设计语言的博士学位后，加入了 Mozilla。他记得，JavaScript 发明者 Brendan Eich 邀请他参加 Mozilla 的一次会议，“他说，‘你怎么不来，我们要讨论 Rust 的设计决定？’”</p><p></p><p>Walton 想着 Rust 听上去很不错，于是他与 Hoare 以及一支不断壮大的工程师团队一起努力开发这个语言。许多人，像 Mozilla 工程师 Niko Matsakis 和 Felix Klock，都有研究内存和编码语言的学术经历。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/35/350d7bac6cb66dd8bafe92401417a8ae.png\" /></p><p></p><p>参与 Rust 构建的工程师：Patrick Walton) (1)，他在决定放弃编程语言的博士学位后加入了 Mozilla；Niko Matsakis (2) 和 Felix Klock (3)，他们都有研究记忆和编码语言的学术经验；Manish Goregaokar (4)，目前负责 Rust 的开发者工具团队</p><p></p><p>2009 年，Mozilla 决定正式赞助 Rust。这门语言将是开源的，并且仅由开发者承担责任，但是 Mozilla 愿意通过为工程师支付薪酬来启动这个项目。</p><p></p><p>Rust 团队征用了 Mozilla 的一间会议室，Mozilla 研究部门的联合创始人 Dave Herman 把这间会议室叫做“书呆子洞”，并在门外挂了一张牌子。据 Hoare 的估计，在接下来的十年里，Mozilla 雇用了十几名工程师从事 Rust 研发的全职工作。</p><p></p><p>“所有人都认为自己正在干一件很有意义的事。”Walton 回忆道。这种兴奋还蔓延到 Mozilla 大楼之外。</p><p></p><p>到 2010 年代初，Rust 已经在全球范围内吸引了许多来自技术领域的志愿者，其中一些人还在大型科技公司工作。德国一位高中生是其中一位重要的贡献者。2010 年，在不列颠哥伦比亚省举行的 Mozilla 会议上，Eich 站起身来，表示将有一场有关实验语言的演讲，Walton 回忆说：“如果你不是真正的程序设计语言爱好者，就别去，不然会议就开不完了。”</p><p></p><p>在 2010 年代早期，Mozilla 工程师和世界各地的 Rust 志愿者们逐步完善了 Rust 的核心——它被设计为管理内存的方式。他们创建了一个“所有权”系统，使得一个数据只能被一个变量所引用，这极大降低了内存问题发生的可能性。将你编写的几行代码编译成可以在计算机上运行程序的 Rust 编译器，将会严格执行所有权规则。如果程序员违反了这些规则，编译器将会拒绝编译代码并将其编译为可运行的程序。</p><p></p><p>Rust 所用的许多技巧都不是什么新点子：“它们大部分都是几十年前的研究成果了。”Manish Goregaokar 说，他管理着 Rust 的开发工具团队，早年为 Mozilla 工作。但是 Rust 的工程师们善于发掘这些成熟的理念，并将其转化为实际可行的特性。</p><p></p><p>随着团队对内存管理系统的改进，Rust 越来越不需要自己的垃圾收集器了。到了 2013 年，团队就将垃圾收集器移除了。用 Rust 编写的程序现在运行速度更快：在计算机进行清理时不会出现周期性停顿。</p><p></p><p>Hoare 指出，有些软件工程师可能会觉得 Rust 还是有一点类似于垃圾收集的东西，像“引用计数”系统，这也是它内存所有权机制运作方式的一部分。但是不管怎么说，Rust 的性能已经变得非常高效了。它更接近于裸金属，低至 C 和 C++ 的地位，但它是内存安全的。</p><p></p><p>Steve Klabnik 表示，移除垃圾收集“催生了一种更简洁、更低级的语言。”Steve 是一名程序员，在 2012 年参与了 Rust 项目，为该项目撰写了十年的文档。</p><p></p><p>一路走来，Rust 社区也形成了一种以非常友好和开放的方式对待新人的文化。“在 Rust 社区，没有人喊你菜鸟，”微软首席工程师 Nell Shamrell Harrington 说，他当时在 Mozilla 从事 Rust 的工作，“没有问题会被认为是愚蠢的。”</p><p></p><p>她说，部分原因是 Hoare 很早就颁布了禁止骚扰的“行为准则”，任何为 Rust 做出贡献的人都应该遵守这一准则。社区接受了它，而且 Rust 社区的资深成员表示，社区这一行为准则吸引了酷儿（指同性恋、双性恋和跨性别者）和变性者程序员参与到 Rust 中来，比例超过了其他语言。即使是程序员出错，编译器也会产生非常友好的错误信息；它们会描述这些错误，并且会很有礼貌地提出如何修复这些错误。</p><p></p><p>Shamrell Harrington 笑着说：“当我犯错误时，C 和 C++ 编译器会让我觉得自己很差劲。而 Rust 编译器更像是在指导你如何编写超级安全的代码。”</p><p></p><h3>终于推出了第一个版本</h3><p></p><p></p><p>到了 2015 年，该团队执着于最终推出一个“稳定”的 Rust 版本，这个版本足以让公司为真正的客户开发软件。自从 Mozilla 将 Rust 纳入其麾下以来，已经过去了六年，在这段漫长的开发过程中，开发者们都很想试用一下这个演示版本，虽然这个版本看起来有点粗糙：“编译器总是会出现故障。”Goregaokar 说。现在是时候将“1.0”版本推向世界了。</p><p></p><p>Walton 记得他花了几个小时俯身在笔记本电脑前，“在过去的两个礼拜里写了 45 页左右的文档。”他回忆道。2015 年 5 月 15 日，团队终于推出了第一个版本，成群的 Rust “书呆子”在世界各地举行派对庆祝。</p><p></p><p>Mozilla 的投资很快就开始有了回报。2016 年，Mozilla 的一支团队推出了 Servo，这是一个使用 Rust 构建的新浏览器引擎。第二年，另一个团队使用 Rust 重写了 Firefox 渲染 CSS 的部分，CSS 是一种用于指定网站外观的语言，这一改变极大地提高了浏览器的性能。Mozilla 还使用 Rust 重写了处理 MP4 多媒体文件的代码，而这些代码一直面临不安全、恶意代码的风险。</p><p></p><p>Rust 的开发者，开始称呼自己为“Rustaceans”（意为 Rust 开发者，Rust 用户，Rust 爱好者），他们很快收到了消息：其他公司会尝试使用他们的新语言。</p><p></p><p>三星的程序员告诉在法国 Mozilla 办公室工作的 Klock，他们已经开始使用 Rust。Facebook（也就是后来的 Meta）利用 Rust 重新设计他们程序员用来管理内部源代码的软件。如今为 Meta 工作的 Walton 说：“它的重要性怎么强调都不为过。”</p><p></p><p>“写 Rust 是一件很有意思的事情，虽然这听上去有些古怪，但它的语言太棒了。很有趣，你会有一种魔术师的感觉，这是在别的程序设计语言里不可能出现的，”他说。“我们肯定在这上面下了大本钱，这可是一项新技术。”</p><p></p><p>有些公司发现，Rust 缓解了他们对内存错误的恐惧；Mara Bos 使用 Rust 完全重写了她公司的无人机控制软件，而该软件最初是用 C++ 编写的。</p><p></p><p>其他人则发现了放弃垃圾收集的乐趣。在 Discord，工程师们一直对 Go 中的垃圾收集器（他们用来构建软件关键部分的程序设计语言）会减慢速度而感到恼火。尽管 Discord 的工程师们已经写得很仔细，没有垃圾需要收集，但他们的 Go 软件还是大约每两分钟就会执行一次程序。2020 年，他们用 Rust 重写了这个系统，发现现在的运行速度快了 10 倍。</p><p></p><p>就连科技巨头的云计算平台亚马逊云科技的网络服务的高管和工程师，也越来越相信 Rust 可以帮助他们编写更安全、更快速的代码。“Rust 具有独特的优势，这是我从其他语言中无法获得的。它在一种语言中能赋予你很多超能力。”Shane Miller 说，他在去年离开亚马逊云科技之前，在该公司创建了一支 Rust 团队。</p><p></p><p>对于这个云计算巨头来说，也许最关键的是，通过对基于 Rust 代码的研究发现，它的运行效率非常高，其耗电量是用亚马逊云科技常用语言之一 Java 编写的类似程序的一半。Miller 说：“所以我可以创建一个数据中心，它可以运行我今天工作负荷的两倍。”</p><p></p><h3>让人“不安”的成功</h3><p></p><p></p><p>Rust 的成功让一些长期贡献者感到有些不安。随着科技巨头们开始采用这种语言，他们对 Rust 的影响也越来越大。他们有足够的资金来支付工程师全职开发 Rust。例如，Rust 团队的几个领导人都是亚马逊和微软的员工。</p><p></p><p>其他有价值的贡献者不得不在业余时间从事他们的 Rust 工作。例如，Bos 除了经营她的无人机初创公司外，还要为华为从事 Rust 方面的合同工作，但她作为 Rust 库团队负责人的角色是无偿的。</p><p></p><p>Bos 表示，这在开源项目中是一种普遍趋势：大公司可以更多地参与进来，并且推动项目来解决他们所关注的问题，而小企业则可能不行。“这确实给了他们一些影响力，”她说，但迄今为止，还没有一家公司做过什么令人惊恐的举动。”</p><p></p><p>Klabnik（去年离开 Rust）也表示赞同她的观点，他对亚马逊加入 Rust 提出了担忧。他说：“我担心吗？是啊。它是特别糟糕还是比其他许多地方更糟糕呢？”</p><p></p><p>2021 年，各大科技公司出资成立了一家非营利性的 Rust 基金会，以资助志愿者程序员。在头两年中，Miller 负责为那些希望研究 Rust 某些重要特性的程序员提供 20000 美元的资金，以及需要短期经济需求的贡献者提供“困难”资助。</p><p></p><p>同时，它还资助了托管 Rust 代码的服务器和一家科技公司，保证它们 24 小时不间断地运行。Miller 说，在传统的开源模式下，这项工作以前是由“两个志愿者完成的，他们基本上 50% 的时间都是随叫随到，其中一个是意大利的学生。”</p><p></p><p>这门语言就这么不可思议地迅速成长起来。如果说 Rust 是在 2006 年诞生的，那么它现在正走出青春期、步入成熟期。</p><p></p><p>汽车公司正在采用 Rust 来构建运行汽车的关键代码；航空航天公司也在采用 Rust。Dropbox 的 Timmerman 预计，“它将会得到广泛的应用。”微软高管甚至公开表示，许多其他科技公司可能正在闭门思考的问题是：微软将会更多地利用 Rust 来编写新的代码，而 C 和 C++ 则会变得越来越少。最后可能永远都不会有。</p><p></p><p>所有那些已经在使用的 C 和 C++ 代码都不会消失，它们将会在未来的数十年中继续得到应用。但如果 Rust 成为编写需要快速和裸机的新代码的常用方法，我们就会开始注意到，慢慢地，我们的软件环境会越来越可靠，不会再像以前那样不稳定、不安全。</p><p></p><p>没有人比 Hoare 更惊讶了。“大多数语言，”他说，“都是半途夭折了。”</p><p></p><p>原文链接：</p><p></p><p>https://www.technologyreview.com/2023/02/14/1067869/rust-worlds-fastest-growing-programming-language</p>",
    "publish_time": "2023-05-04 12:13:12",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "中国信通院召开政企信息技术应用创新（信创）促进中心启动会",
    "url": "https://www.infoq.cn/article/cdb86ac892b5758fd820660a4",
    "summary": "<p></p><h4>摘要</h4><p></p><p></p><blockquote>2023年4月24日，企业数字化发展共建共享平台--政企信息技术应用创新促进中心（简称政企信创促进中心）启动会在中国信息通信研究院召开。中国信通院、招商局集团、中海油集团、联通集团、鞍钢集团、数字广东、中信云网、中化能源、中航信云智、国网思极、京港地铁、中交上航院、中国电子云、中电科数字、天翼云、联通数科、中移集成、中科曙光、浪潮云、浪潮通用软件、电科拟态、华为、腾讯云、用友、亚信科技、金蝶、中兴、优刻得、云轴科技、星环科技、云宏、飞腾、鲲鹏、海光、华诚金锐等成员单位代表参加。</blockquote><p></p><p></p><h3>首个政企信创促进组织成立</h3><p></p><p>中国信通院云计算与大数据研究所（简称云大所）组织并主持会议，会议首先由云大所所长何宝宏发表致辞，副所长栗蔚就政企信创促进中心成立背景进行说明，政企信创促进中心秘书长、云大所政企数字化转型部主任徐恩庆对中心架构与工作进行解读。</p><p><img src=\"https://static001.geekbang.org/infoq/dd/dd6f85b933168be0c83e75720ba2e6a3.jpeg\" /></p><p></p><p>会上举行了政企信创促进中心揭牌成立仪式，并为首批成员单位、专家委员会专家颁发证书，为中心联合实验室授牌。</p><p><img src=\"https://static001.geekbang.org/infoq/09/09cf8513019190512914a202de9c71ff.jpeg\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/bf/bfc3a068be713558e01e721bd5932d10.png\" /></p><p></p><p>中国信通院、招商局集团、中海油集团、数字广东、中国电子云、中电科数字、用友作为成员单位代表作专题分享，各成员单位陆续作交流发言。</p><p><img src=\"https://static001.geekbang.org/infoq/f7/f7e0f1447381eb3712f248bdc56c93b1.png\" /></p><p></p><h3>关于政企信创促进中心</h3><p></p><p>政企信创促进中心立足国内数字产业发展基础，融合产业数字化转型趋势，促进政府、国有企业信息技术应用创新发展建设，突破数字技术应用可信瓶颈，打造政策、产业、研究、应用一体化交流平台。</p><p><img src=\"https://static001.geekbang.org/infoq/6e/6edfe87cf1df3057a1e3eb14d54ecc97.png\" /></p><p></p><p>中心设专家委员会及秘书处，面向政务应用推进计划、央国企应用推进计划两个工作方向，下设数字基础设施、数字平台、应用兼容、集成服务、迁移适配工作组，配套飞腾、鲲鹏、海光、申威四个联合实验室。中心通过标准建设、联合攻关、产业合作、行业赋能等方式，开展兼容适配、质量验证、方案研发、生态交流等工作，推动政企信息技术应用创新加速实施。</p><p></p><p>政企信创促进中心联系人：</p><p>何　川  18810817952   hechuan@caict.ac.cn冉海芳  18618383848  ranhaifang@caict.ac.cn&nbsp;</p>",
    "publish_time": "2023-05-04 15:39:16",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "适配业务特征的持续业务交付｜ BizDevOps 公开课",
    "url": "https://www.infoq.cn/article/q6GaLP23eJ65NckVYwET",
    "summary": "<p><strong>内容简介：</strong><br />\nBizDevOps最新权威解读课程，由BizDevOps共促计划专家团成员共同创作，包括《必致（BizDevOps）白皮书》解读共 10 讲，阿里巴巴、招商银行、Thoughtworks等企业真实实践案例分享，以及需求管理、组织设计、组织数字化升级、数据运营和工具等设计专题精讲。</p>\n<p>白皮书下载链接：<a href=\"https://www.infoq.cn/minibook/lsB8GB2BbvLQj2u5mBKo\">https://www.infoq.cn/minibook/lsB8GB2BbvLQj2u5mBKo</a></p>\n<p><strong>你将理解：</strong></p>\n<ol>\n<li>如何应用BizDevOps，为数字化的业务打造数字化的组织</li>\n<li>理解BizDevOps的1个目标，3个能力和5个实践</li>\n<li>BizDevOps与DevOps的根本不同，以及如何实现从DevOps向BizDevOps的蝶变</li>\n<li>你将掌握BizDevOps的1-3-5框架，掌握驾驭数字化变革的力量</li>\n</ol>\n<p><strong>面向受众：</strong><br />\n数字化转型从业者和关注者，包括研发管理者、数字业务和数字化转型负责人、业务分析师等、研发工具负责人</p>\n<p><strong>发布计划：</strong><br />\n3.23日起，每周四下午16:00，准时开播。</p>\n<p><strong>本系列视频内容规划：</strong></p>\n<ol>\n<li>BizDevOps(必致)是什么，如何实施？ 整体框架</li>\n<li>产品导向的团队组织和交付 （实践一） 协作和管理实践</li>\n<li>业务驱动的组织协同机制 （实践二）</li>\n<li>数字业务的动态投资组合管理 （落地和案例）</li>\n<li>应用为核心的研发资产和流程管理（实践三） “工程和技术实践”</li>\n<li>适配业务特征的持续业务交付 （实践四）</li>\n<li>建设和改进持续业务交付能力 （落地和案例）</li>\n<li>全量、全要素和实时数据支持的度量和持续改进（实践五） 度量和持续改进实践</li>\n<li>度量和持续改进体系的设计和应用（落地和案例）</li>\n<li>BizDevOps（必致）：驾驭数字化变革的力量 总结</li>\n</ol>",
    "publish_time": "2023-05-04 16:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "谷歌用机器人大规模删除代码：二十多年积累了数十亿行，已删除5%C++代码",
    "url": "https://www.infoq.cn/article/0NoTQLqQh4GfIF9cfSLf",
    "summary": "<p></p><blockquote>来自系统的自动消息：“你的代码死亡已超六个月，建议彻底删除哦。”</blockquote><p></p><p>&nbsp;</p><p>任何大型项目都一定会积累下“死代码”，也就是那些不再使用的模块，或者在早期开发期间存在但已经多年没跑过的程序。事实上，很多项目在创建完成后都会先运行一段时间，之后再也无人问津。</p><p>&nbsp;</p><p>这些死代码会继续产生成本：自动化测试系统并不知道哪些代码无需再测，负责大规模清理的人们也会把很多不再运行的代码白白移来挪去。所以虽然这些代码的生产成本很高，但它同时也需要耗费大量时间加以维护。这类维护工作不能轻易跳过，否则未来就一定会造成更大的回溯管理成本。</p><p>&nbsp;</p><p>那么，能不能靠削减代码量来降低维护成本？代码仓库里的内容真的都有存在的必要吗？</p><p>&nbsp;</p><p></p><h2>谷歌的“死神”项目</h2><p></p><p>&nbsp;</p><p>我们通常不清理代码，清理它们需要大量的时间和精力，证明其到底还有没有用更是一件麻烦事：我们不能只靠“Chesterton's fence”法则，就是“看不出这个有什么用，那就让我们把它清除掉”，&nbsp;因为有一些灾难警报、闰年触发代码闲置时间更长，如果被清除了就有可能带来大麻烦。</p><p>&nbsp;</p><p>在谷歌里，代码清除更为艰难。</p><p>&nbsp;</p><p><a href=\"https://www.infoq.cn/article/2016/07/google-why-10\">谷歌跟业界其他公司不同</a>\"，它只有一个代码仓库，全公司的代码都放在这个库里，二十多年来，上万名软件工程师为同一个包含数十亿行的代码仓库提交贡献。这套代码仓库存储在Piper系统当中，与编码相关的共享库源代码、生产服务、实验程序、诊断和调试工具等一切都被集中在这里。</p><p>&nbsp;</p><p>这种开放方法极为强大。如果工程师不确定如何使用某个库，可以通过搜索找到示例；好心的贡献者还可以对整个代码仓库做重要更新，包括转向更新的API、引入Python 3或Go泛型等语言特性等。</p><p>&nbsp;</p><p>编写代码对应着极高的成本，所以代码往往被企业视为重要资产。然而，不再使用的代码也会在维护和清理等层面持续耗费时间和精力。一旦代码库达到一定规模，投入工程时间来做自动化清理就开始具有现实意义，特别是像谷歌这样拥有数十亿行代码的情况下。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f1/f1c17c301e004d3504d50fa85e118b8e.jpeg\" /></p><p></p><p>&nbsp;</p><p>但在这样的单一代码库的条件下，最坏最坏的情况就是不小心删掉了“源代码”，<a href=\"https://www.quora.com/What-if-someone-deleted-Google-s-source-code\">Google SRE 首席软件工程师说</a>\"，这种情况“意味着谷歌使用的每个数据中心、每个工作站都会突然停止运行——不仅仅是关闭，甚至连存储都无法使用。（虽然只有在世界末日时才会发生）。”</p><p>&nbsp;</p><p>那么，他们是怎么清理这些死代码的？谷歌最近在其博客中介绍了Sesenmann“自动删除代码”项目，该项目的目标是自动识别出无效代码，再发送代码审查请求（变更列表）以将其删除。</p><p>&nbsp;</p><p>Sesenmann在德语中代表“死神”的无情收割之义。据谷歌介绍，该项目非常成功，每周可提交超过1000个待删除的变更列表，而且截至目前已经删除了谷歌全部C++代码中的5%。</p><p>&nbsp;</p><p></p><h3>如何判断哪些代码能删？</h3><p></p><p>&nbsp;</p><p>谷歌的构建系统Blaze（即Bazel的内部版本）是达成这个目标的关键：它会以一致且可访问的方式表示二进制目标、库、测试和源文件之间的依赖关系，帮助维护者据此建立起依赖关系图。如此一来，大家就能找到未链接至任何二进制文件的库，并将其作为潜在的删除对象。</p><p>&nbsp;</p><p>但这还只是问题的一小部分：那些二进制文件又该如何处理？所有一次性数据迁移程序和已经被弃用的系统诊断工具呢？如果不把它们清理掉，相对应的各个依赖库也将被保留下来。</p><p>&nbsp;</p><p>了解程序是否有用的唯一完美方法，就是检查它们是否正在运行。所以对于内部二进制文件（即运行在谷歌数据中心或员工工作站上的程序），程序在运行时会写入一个日志条目，记录下时间和对应的特定二进制文件。通过汇总，得到谷歌内部所使用的各个二进制文件的活跃度信号。如果一个程序很长时间都没有被用到，该项目就会尝试发送相应的删除变更列表。</p><p>&nbsp;</p><p>当然，其中也有例外：某些程序代码仅仅是API的使用示例；有些程序的运行位置根本就没有对应的日志信号。对于凡此种种的各类情况，贸然删除代码肯定会惹出大麻烦。有鉴于此，建立一套阻止屏蔽列表系统就非常重要，可供大家标记异常，避免用虚假的变更列表打扰到已经忙碌不堪的软件工程师。</p><p>&nbsp;</p><p></p><h4>细节决定成败</h4><p></p><p>在谷歌的博客上，谷歌的工程师Phil Norman举了一个简单的例子。</p><p>&nbsp;</p><p>假定有两个二进制文件，它们各自依赖于不同的库，另外还同时共享第三个库。忽略源文件和其他依赖项的话，我们将这种关系绘制成以下结构：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/af/afc6a6436cf78a66b955e2dca29cc9d0.png\" /></p><p></p><p>&nbsp;</p><p>假如main1正在使用，但main2的最后一次使用却是在一年多之前，那就可以构建起树状传播活动信号将main1及其依赖的所有内容均标记为活动。余下的部分则可以去掉；由于main2依赖于lib2，所以这次我们希望在一次变更中同时删除这两个目标：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a1/a14054ed5b5640c404939fd1e05643b0.png\" /></p><p></p><p>到目前为止一切顺利，但真正的生产代码需要经过单元测试，其构建目标由测试的库决定。这就让整个遍历结构变得更加复杂：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d9/d94834cb4a9de4959d12054da82fb44c.png\" /></p><p></p><p>测试基础设施会运行所有测试，包括lib2_test，可是lib2从未被“真正”执行过。也就是说，我们不能单纯将测试运行作为“活跃度”信号：在这种情况下，可以误以为lib2_test保持活动，并导致lib2永远存在。只能清理未经测试的代码，而这会严重阻碍清理工作的有效进行。</p><p>&nbsp;</p><p>根本目标是让每个测试都能共享所测试库的使用情况，所以我们可以让库和测试相互依赖来达成这个目标，据此在图中创建循环：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1c/1c67d20d1d48099cbb5e4d33510a26ee.png\" /></p><p></p><p>这样就将各个库及其测试转化成了强连接组件，可以使用与以往相同的方法标记出“活”节点，之后寻找有待删除的“死”节点集合。区别在于这次使用了Tarjan强连通分量算法来处理循环。</p><p>&nbsp;</p><p>这样做很简单，但前提是能轻松看出测试及所测库之间的关系。遗憾的是，情况并不总是这么乐观。在以上示例中，由于遵循简单的命名约定，所以大家能将测试与库快速匹配起来。但这种方法在实际生产系统中往往并不奏效。</p><p>&nbsp;</p><p>比如以下两种情况：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/17/17dde40aa4349df3afaa89e54ba2eff0.png\" /></p><p></p><p>左边的是LZW压缩算法实现，分别存在单独的压缩器和解压缩器库。该测试实际上是对两者都进行测试，以确保数据在压缩和解压缩后不致损坏。在右侧，web_test负责测试Web服务器库，它使用URL编码器库来提供支持，但实际上并不会测试URL编码器本身。这就希望将左侧的LZW测试和两个LZW库视为同一连接组件，而在右侧则希望排除掉URL编码器，只将web_test和web_lib视为连接组件。尽管需要不同的处理方式，但这两种情况的基本结构是相同的。在实践当中，可以建议工程师将url_encoder_lib之类的库标记为“纯供测试”（即仅用于支持单元测试），这样就能解决web-test需求。</p><p>&nbsp;</p><p>除此之外，Phil 表示目前谷歌的方法是使用测试和库名称之间的编辑距离来选择最可能与给定测试相匹配的库。至于如何识别LZW这类一项测试对应两个库的情况，这可能需要涉及测试覆盖率数据，谷歌并没有讨论这类方法。</p><p>&nbsp;</p><p></p><h3>如何消除抵触情绪？</h3><p></p><p>&nbsp;</p><p>自动代码删除对很多工程师来说可能是个陌生的概念，就如同20年前单元测试刚刚诞生一样，那时候很多人对此也抱有抵触态度。</p><p>&nbsp;</p><p>虽然删除死代码最终会给软件工程师自己带来助益，大家也肯定希望管理的代码项目能够保持整洁，但“Sesenmann”运行过程中，谷歌也发现很多工程师并不愿意经常收到用于删除代码的自动变更列表。这就是项目当中社会工程的部分了，而且重要程度丝毫不亚于软件工程。</p><p>&nbsp;</p><p>改变人们的想法需要时间和努力，更需要大量细致的沟通。Sensenmann的沟通策略主要分三个部分。</p><p>&nbsp;</p><p>最重要的就是变更描述，这也是审查人员首先看到的内容。变更描述必须简明扼要，同时又保证能为审查人员提供充分的背景信息以做出正确判断。这样的平衡其实很难达到：内容太短，很多人会找不到自己需要的信息；内容太长，则可能导致满屏文字令人头痛。事实证明，如果能附上标注清晰的支持文档和常见问题解答链接，会大大提高变更描述的易读性和接纳度。</p><p>&nbsp;</p><p>第二部分则是配套文件，这里同样要使用简洁明了的措辞和良好的导航结构。不同的人需要不同的信息：有些人需要保证源代码控制系统中的删除可以回滚，有些人希望了解要如何处理变更造成的负面影响，例如修复对构建系统的误用。通过认真思考和迭代用户反馈，支持文档将成为满足这些需求的宝贵资源。</p><p>&nbsp;</p><p>第三部分是处理用户反馈。有时候，这可能也是最困难的部分：由于负面反馈多于正面反馈，往往就需要冷静的头脑甚至是不少“外交手腕”。总之，务必牢记这些反馈总体上反映出系统改进的最佳方式，尽量让用户更满意、避免未来继续出现类似的负面反馈。</p><p>&nbsp;</p><p></p><h2>写在最后</h2><p></p><p>&nbsp;</p><p>Phil 在谷歌博客中讲道，以谷歌的业务规模出发，估计自动删除代码已经为他们带来了数十倍的投入回报，大大节约了维护成本。</p><p>&nbsp;</p><p>自动删除代码需要解决技术和文化这两大难题。在博客中，他总结道，“虽然我们已经在这两个领域取得了显著进展，但仍不能说彻底解决。不过随着改进的继续，自动删除的接纳度会越来越高，产生的积极影响也将越来越大。这笔投资的价值因人而异，如果您也掌握着一个巨大的单体代码仓库，那不妨认真考虑一下。至少在谷歌，将C++代码总量的维护负担降低5%已经标志着一场巨大的胜利。”</p><p>&nbsp;</p><p>如果删除代码也能带来巨大的收益，那是否意味着是时候为删除代码行设置 KPI 了？</p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://testing.googleblog.com/2023/04/sensenmann-code-deletion-at-scale.html\">https://testing.googleblog.com/2023/04/sensenmann-code-deletion-at-scale.html</a>\"</p><p><a href=\"https://news.ycombinator.com/item?id=35755841\">https://news.ycombinator.com/item?id=35755841</a>\"</p><p>&nbsp;</p>",
    "publish_time": "2023-05-04 20:55:53",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "花8年转型微服务却得不到回报，问题出在哪儿？",
    "url": "https://www.infoq.cn/article/TBauHzvPIj4SP8Gg2qy7",
    "summary": "<p>采访嘉宾 ｜ Davide Taibi 博士</p><p>编辑 ｜ Tina</p><p>&nbsp;</p><p></p><blockquote>我预计未来几年架构分析将出现质的飞跃，这要归功于新的 AI 技术。</blockquote><p></p><p>&nbsp;</p><p>市场上的新技术层出不穷，但有些新技术只有在特定情境下才能带来好处，在其他情况下可能会适得其反。微服务是其中之一。Davide Taibi 博士是芬兰奥卢大学的教授，长期致力于研究从单体架构到<a href=\"https://www.infoq.cn/article/O01i9lalNBIc3h1RzkuM\">微服务架构</a>\"的转换，以及云原生系统架构及其中的技术债务的发现与检测。他深入研究了许多软件工程案例。在 Davide Taibi 博士参加上海ArchSummit大会之际，InfoQ采访了他，了解他对当前技术热点的看法。</p><p>&nbsp;</p><p>InfoQ：从微服务得到明确定义发展到现在，差不多十年了。结合您的演讲主题来看，您认为在微服务这个架构领域是否还有炒作行为？</p><p>&nbsp;</p><p>Davide Taibi：微服务的大肆宣传并未结束。但是，十年前一些企业受此宣传和炒作的影响转向微服务，很多情况也只是盲从竞争者的脚步。而如今，大多企业都已对微服务的优劣了如指掌。</p><p>&nbsp;</p><p>在我们看来，这些转向的企业的一个最大的问题是在开始阶段对微服务带来的好处的过高期待。企业相信微服务可以轻松降低开发成本和维护难度并提升速度和可扩展性。可过了一段时间却发现微服务的开销甚至还高于传统单体架构，而且并不是默认自动规模化。支持高可扩展性也是需要手动采用扩展机制才行。</p><p>&nbsp;</p><p>InfoQ：过去有很多企业选择了从单体迁移到微服务，看起来是一个单向的发展过程。那么在您看来，在这十几年间，架构设计模式有着什么样的演进原则，有没有哪些以前认为是“良好”的架构设计风格在演进中逐渐消失了的？</p><p>&nbsp;</p><p>Davide Taibi：绝大部分的设计模式会逐渐被新的模式取代，就像之前流行的MVC(模型、视图和控制器)以及SOA(面向服务的架构)。微服务可以被看做是一种恰当地实现的面向服务的架构，尽管还是有一些区别。</p><p>&nbsp;</p><p>近些年，新的风口又转向了无服务方法并引领企业转向了“纳米服务”。但是，试探之后很多企业又选择退回到微服务，或使用无服务方法来创建微服务。</p><p>&nbsp;</p><p>InfoQ：您有一篇论文，讲到您们采访过很多从单体迁移到微服务案例相关开发人员，虽然迁移前大家无法清楚判断利弊，但多年后再次回顾这些案例的话，您认为这些迁移都是值得的吗？</p><p>&nbsp;</p><p>Davide Taibi：基于我们的经验，向微服务的转型需要很长时间，一般是几年。我们了解的实例中有一些拥有大型代码库的公司花了八年来转型。其中的优势一般在于各团队的高独立性，而并不是简单的低开销低维护成本。在很多实例中，转型都没得到应有的回报，期待的好处也没能实现。</p><p>&nbsp;</p><p>InfoQ：您的论文“On the Definition of Microservice Bad Smells”涉及非常多的微服务不良做法，但如果要用几个大类别来列举危害性比较大的微服务反模式，您认为会是哪几类？另外，您能再大概分析说明下造成这个几个反模式的原因吗？</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/08/08cd8f63d9eea43aecd007ab207aa1ae.jpeg\" /></p><p></p><p>&nbsp;</p><p>Davide Taibi：就我个人而言，最坑的反模式存在于组织中，而非技术之罪。</p><p>&nbsp;</p><p>技术上的反模式很容易修复(如，循环依赖)，而解决组织上的问题没那么简单。比如，错误的开发团队分组将团队按水平功能划分而不是垂直划分(分成数据库团队、前端团队、后台团队)。</p><p>&nbsp;</p><p>另一种组织结构问题可被称为“微服务贪心（Microservice Greedy）”，指的是开发者对于任何可能的功能都创建新的微服务。他们都没有查看是否能重用代码，甚至确认这个功能是不是已经存在就开始实现了。结果就导致微服务数量暴涨，结构迅速退化，维护的复杂度和成本也随之激增。</p><p>&nbsp;</p><p>InfoQ：最近<a href=\"https://www.infoq.cn/article/GeVe9RdwiVQkPWJlicui\">谷歌开源了Service Weaver</a>\"，谷歌称此框架为模块化单体（modular monolith），称其能兼顾单体应用的开发速度，以及微服务的可扩展性、安全性和容错性。但有人认为这就是一种“分布式单体”。您能解析对比分布式单体与模块化单体之间的异同吗？</p><p>&nbsp;</p><p>Davide Taibi：在我看来，“分布式单体”只是对于“维护不了的分布式系统”的一种误导性的称呼。</p><p>&nbsp;</p><p>我坚决同意一个设计优良具有模块化功能的单体系统维护起来可以很简单。但主要的问题不是软件本身而在于组织结构。过大的组织结构将导致团队缺少独立部署的能力。</p><p>&nbsp;</p><p>InfoQ：您如何看待这种模块化单体方法？它能解决单体和微服务架构的痛点吗？模块化单体会成为一种主流发展趋势吗？</p><p>&nbsp;</p><p>Davide Taibi：我相信模块化单体系统已存在有20多年了。我并不期待有革命性地变化。我觉得模块化单体的目标系统要比那些受益于微服务的系统要小一些。</p><p>&nbsp;</p><p>InfoQ：微软的Dapr框架如今也已进入大厂实践，许多架构师在更多地考虑 Dapr 级别的东西，这是否说明这条路是走得通的？它会影响到微服务技术的未来发展走向吗？</p><p>&nbsp;</p><p>Davide Taibi：这可能会影响.Net应用的未来趋势。不过我觉得现在做预测还是为时尚早。</p><p>&nbsp;</p><p>InfoQ：微服务发展几乎是伴随着云服务的，像&nbsp;Netflix当年的改造，也是云+微服务同时进行的，那么在微服务的发展过程中，您认为微服务的复杂性主要来自哪里？跟技术债务相关吗？</p><p>&nbsp;</p><p>Davide Taibi：云服务其实也仅是一项支持软件系统开发和运行的技术。不幸的是，其技术负债需要单独处理。一个值得考量的重要方面是，只要更多的“可以动”部件（moving parts）被应用到系统中，更高的技术负债将会累积。</p><p>&nbsp;</p><p>InfoQ：云原生架构也意味着“技术大爆炸”，涉及到了多个方面，开发人员认知负荷很重，如果我们希望自己成为架构师，那我们如何去学习这些知识？企业应该如何去传承云原生领域的架构知识和实践经验？</p><p>&nbsp;</p><p>Davide Taibi：我认为企业之间应该共享他们的经验，特别是开始在一些在线授课平台和维基百科收集经验。</p><p>&nbsp;</p><p>主要的问题是新的技术总会最终应用到市场，软件架构师应该不停地扩充知识，与时俱进。</p><p>&nbsp;</p><p>InfoQ：对架构的未来发展趋势，您有怎么样的判断？结合当前的GPT的热点，“架构”是否是最难被AI改造的领域？</p><p>&nbsp;</p><p>Davide Taibi：我相信边缘计算和云到边系统会很快成为主流。同时，我期望看到服务网格很快成为焦点。</p><p>&nbsp;</p><p>目前，架构或架构分解可能是最具挑战性的任务。原因是，在我看来，要指定架构，我们需要用自然语言提出问题，正确解释需求，并理解系统应该如何组成。</p><p>&nbsp;</p><p>无论如何，我预计未来几年架构分析将出现质的飞跃，这要归功于新的 AI 技术，而不仅仅是 GPT。</p><p>&nbsp;</p><p>InfoQ：对于当前并不确定是否要选择云原生架构的企业，您有哪些建议？</p><p>&nbsp;</p><p>Davide Taibi：我给一些还不确定时候应用云原生架构的企业的建议是，真实考量你的需求，你的组织结构，以及公司开发者的经验。</p><p>&nbsp;</p><p>如果有庞大数量的开发团队致力于不同的系统功能，你可以考虑微服务。如果有些功能你需要极限可扩展性，那么你可以考虑无服务方法。其他的情形都需要准确地考量。</p><p>&nbsp;</p><p>考虑到架构迁移的成本和影响，雇佣有经验的咨询顾问是很明智的。他们会提供一个“外来人”的视角在作出重要决定之前对企业和系统进行合理评估。</p><p>&nbsp;</p><p>活动推荐：</p><p>上海站 ArchSummit 会议刚结束，我们就已经无缝衔接在准备 7 月 21-22 日在深圳举办的 ArchSummit 会议了，会议主题还是会围绕数字化，架构思维，和架构师成长来展开。如果你想要分享演讲话题，可以在这里提交议题思路：<a href=\"https://jinshuju.net/f/7wUiwn\">https://jinshuju.net/f/7wUiwn</a>\"</p>",
    "publish_time": "2023-05-04 21:06:15",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "开发者的好日子要来了？苹果即将在iOS 17迎来大变化",
    "url": "https://www.infoq.cn/article/BhAJ2DJhhH73fB7zpfl6",
    "summary": "<p></p><blockquote>根据彭博社和福布斯消息，iOS 17 将包括苹果对其 iPhone 软件的最大改变之一：能够从 App Store 以外的来源侧载应用程序。</blockquote><p></p><p>&nbsp;</p><p>在与iPhone上的第三方侧载应用商店展开多年斗争之后，苹果别无选择，终于对欧洲法律做出让步，决定在即将发布的iOS 17上开放这项功能。彭博社报道称，苹果的侧载项目已经在公司工程副总裁Andreas Wendker的领导下启动，Wendker直接向苹果软件工程高级副总裁Craig Federighi汇报工作。</p><p>&nbsp;</p><p>欧洲《数字市场法》（DMA）即将于明年生效，各企业必须在2024年之前遵守相关规定。根据新的条文，大型科技企业必须开放其设备平台上的第三方<a href=\"https://www.infoq.cn/article/q48yZJQL8JhVZ4YCwKf5\">应用商店</a>\"，为用户提供更多软件来源选择。而苹果所做的一切，自然是为了满足新规要求。随着DMA的落地，巨头苹果只能忍气吞声对侧载放行。虽然侧载变化目前仅限于欧盟的客户，但随着其他国家通过类似于欧洲数字市场法案的立法，苹果可能会扩展该功能。</p><p></p><h2>侧载是什么？</h2><p></p><p>&nbsp;</p><p>所谓iPhone应用侧载，就是说除了官方App Store之外，进一步开放来自其他来源的软件安装。</p><p>&nbsp;</p><p>这可是iPhone上前所未有的大事件，之前App Store始终是官方唯一指定应用来源。现在实现应用侧载的唯一方式，就是将iPhone设备“越狱”，另外您的设备型号和iOS版本还得同时支持才行。</p><p>&nbsp;</p><p>问题是，Windows、macOS和Android等主流操作系统平台都已经支持应用侧载，所以用户们才一直敦促苹果能在iPhone端也开放这项颇为便利的功能。</p><p>&nbsp;</p><p>可苹果始终立场坚定，宣称开放侧载可能导致恶意黑客向毫无戒心的用户传播恶意软件。这个风险确实存在，任何非官方应用的安装都有可能威胁用户安全。</p><p>&nbsp;</p><p>另外，在iPhone上开放侧载支持也将给第三方应用商店打开大门，甚至最终导致其与苹果的官方App Store展开竞争。</p><p>&nbsp;</p><p>苹果现在还没有具体介绍侧载功能是如何在iPhone上实现的，但不难推测具体实现方式。依靠Apple ID中的位置信息，就能轻松限制对侧载功能的使用。只要大家在iOS 17设备上使用欧盟国的Apple ID，就能轻松安装来自任意来源的应用。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/cb/cb9d7aa6f49ce2346dbafe0cac132e66.jpeg\" /></p><p></p><p>&nbsp;</p><p>将您的Apple ID所在地设置为欧盟，之后再改回实际所在国即可。应该还有其他方法，但用VPN可能不行。</p><p>— 941 (@analyst941)&nbsp;<a href=\"https://twitter.com/analyst941/status/1646700052637798401?ref_src=twsrc%5Etfw\">2023年4月14日</a>\"</p><p>&nbsp;</p><p>知情人士analyst941表示只需要找个欧洲Apple ID就能在iPhone和iPad上安装任何应用。当然，大家也可以专门创建一个欧洲ID。但是，新的Apple ID无法继承已经购买和安装的App Store应用。</p><p>&nbsp;</p><p>另外，Apple ID可能只是苹果用于控制侧载功能的手段之一，比如同时访问用户的真实地理位置以评估访问权限。如果某位iPhone用户不在欧洲，那么要想使用欧盟Apple ID进行应用侧载的话，可能还得挂上VPN。当然，这些关于iOS 17侧载功能的观点还仅仅只是猜测，最终仍要以苹果给出的官方声明为准。</p><p>&nbsp;</p><p></p><h2>对开发者来说，是好还是坏？</h2><p></p><p>如果苹果能在其设备上开放第三方应用商店，那开发者们就用不着向其支付高达30%（在某些情况下为15%）的应用内购抽成。如此一来，Spotify、Tinder/Match Group和Twitter等一直对苹果抽成结构不满的公司也会在态度上有所缓和。</p><p>&nbsp;</p><p>苹果目前允许部分开发者在某些市场内使用第三方支付系统——例如韩国的全体软件开发商，还有荷兰的约会类应用开发者。然而，他们仍然要向苹果支付高昂的软件收入抽成。</p><p>&nbsp;</p><p>另外，还有开发者指出，“与在 App Store 上发布相比，错误修复可以更快地发布，”“等待长达 20 天的错误修复令人沮丧，尤其是当它超出我的控制并且我无法就此联系 Apple 时。”</p><p>&nbsp;</p><p>如果DMA能迫使苹果在欧盟区内开放第三方应用商店，那么其他区域的监管机构也有可能纷纷效仿。苹果目前在iOS 17上开放的侧载功能，也有望由此扩展到其他司法管辖区内。</p><p>&nbsp;</p><p>消息发布之际，总部位于葡萄牙的Aptoide（曾为Android推出第三方应用商店）正在给苹果“越狱”用户打造iOS版本。该公司联合创始人兼CEO Paulo Trezentos在采访中表示，他相信苹果确实会放行第三方应用软件商店。</p><p>&nbsp;</p><p>彭博社的报道还提到，欧盟新规可能会进一步迫使苹果公司开放其生态系统中的更多部分，包括相机、NFC技术栈和浏览器引擎。</p><p>&nbsp;</p><p>目前，iPhone上的所有浏览器，包括Chrome和Firefox，使用的其实都是苹果自己的WebKit引擎。但苹果正在考虑去除这样的生态设计。让我们期待苹果的官方声明，看看未来iOS能够运行哪些引擎、浏览器又将迎来哪些功能。</p><p>&nbsp;</p><p>至于开放NFC技术栈，可能意味着除了Apple Pay之外，其他支付公司也可以整合自家服务以实现点击支付。欧盟已经在今年2月批评苹果公司，认为像NFC这样的非接触式支付标准技术应该向所有供应商开放。也就是说，苹果的竞争对手（例如Stripe和Square）也可以在iPhone上构建自己的集成支付解决方案。</p><p></p><h2>苹果表示不服</h2><p></p><p>根据相关<a href=\"https://www.businessofapps.com/data/app-revenues/\">统计数据</a>\"，iOS 占移动设备市场的 15%，但产生了 67% 的应用收入。因此长久以来，苹果公司一直反对开放侧载功能，其高管一直在强调侧载功能会对用户安全造成巨大危害。</p><p>&nbsp;</p><p>早在 2021 年，苹果发布了一份长达 16 页的报告，认为只有该公司自己的应用商店才能保护 iPhone 用户免受欺诈和恶意软件的侵害。当被问及为什么 Mac 可以拥有多个应用程序商店，而 iPhone 却不行时，Craig Federighi 解释道，“iOS 为客户保护设立了一个更高的标准。”</p><p>&nbsp;</p><p>苹果甚至在iOS 16中引入了开发者模式，以防止用户“无意中在自有设备上安装可能有害的软件”。在苹果与Epic之间的长期斗争中，侧载和App Store抽成比例也是被反复提及的核心问题。</p><p>&nbsp;</p><p>在荷兰和韩国，<a href=\"https://www.infoq.cn/article/e5JQptqbfFE8hOmzgNXi\">苹果被迫稍微开放了其封闭平台</a>\"，允许软件开发商能使用其他第三方支付系统。但苹果仍然要求开发商在替代支付系统上向用户显示详尽的警告信息，甚至要求为特定软件市场单独缴纳申请文件。</p><p>&nbsp;</p><p>虽然在技术上完全符合当地监管机构的规定，但苹果公司的霸道行为无疑制造了摩擦，甚至可以说是在强迫软件开发商放弃自有支付系统。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1a/1aa0c3a2f8f4b52c5633297783f90574.png\" /></p><p></p><p>&nbsp;</p><p>同样，如果苹果根据欧盟法规要求在iOS 17上稍做放开，也可以选择一些放开了、但却让用户和开发者都非常难受的设计。到那时候，恐怕只有那些最有耐心、最懂技术的用户才愿意使用侧载。更重要的是，苹果也可以给第三方应用商店拉上警告和横幅，用种种心理暗示逼迫用户重新回到苹果的官方应用商店。</p><p>&nbsp;</p><p>由Basecamp、Match Group和Spotify等成员共同建立的应用公平联盟，一直在发动反抗苹果和谷歌等科技巨头、打造公平软件分发渠道的集体斗争。他们在一份声明中表示，苹果决定开放侧载功能的消息“代表着他们承认自己在竞争中存在倾轧行为。”</p><p>&nbsp;</p><p>“很明显，苹果只会在法律和政策的压力之下，才愿意放弃对其iOS设备上应用软件分发的控制权、才愿意放弃他们在App Store内主宰一切的地位。欧盟通过〈数字市场法〉迫使苹果采取行动，这也证明在移动应用生态系统当中，强有力的执法行动能够为开发者创造出更公平的竞争环境。”</p><p>&nbsp;</p><p>应用公平联盟还敦促美国立法者关注并尽快通过《开放应用市场法》（OAMA），在美国本土迫使苹果和谷歌开放对第三方应用商店、侧载功能和替代性支付系统的支持。Epic公司的Tim Sweeney也参与其中，呼吁美国政府应效仿欧洲的先进经验。</p><p>&nbsp;</p><p>距离 iOS 17 的发布只有一个月的时间，那么我们会在 iPhone 上看到侧载功能吗？欢迎在评论中留言～</p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://news.ycombinator.com/item?id=35671968\">https://news.ycombinator.com/item?id=35671968</a>\"</p><p><a href=\"https://news.ycombinator.com/item?id=35599315\">https://news.ycombinator.com/item?id=35599315</a>\"</p><p><a href=\"https://www.forbes.com/sites/kateoflahertyuk/2023/04/21/ios-17-iphone-sideloading-is-coming-but-how-safe-is-it\">https://www.forbes.com/sites/kateoflahertyuk/2023/04/21/ios-17-iphone-sideloading-is-coming-but-how-safe-is-it</a>\"</p><p><a href=\"https://appdevelopermagazine.com/Ios-17-to-allow-sideloading-apps-on-iphone\">https://appdevelopermagazine.com/Ios-17-to-allow-sideloading-apps-on-iphone</a>\"</p><p><a href=\"https://bgr.com/tech/how-to-sideload-iphone-apps-with-ios-17/\">https://bgr.com/tech/how-to-sideload-iphone-apps-with-ios-17/</a>\"</p><p><a href=\"https://www.businessofapps.com/data/app-revenues/\">https://www.businessofapps.com/data/app-revenues/</a>\"</p><p><a href=\"https://9to5mac.com/2021/06/23/apple-publishes-new-user-guide-detailing-how-sideloading-and-third-party-app-stores-would-undermine-iphone-security/\">https://9to5mac.com/2021/06/23/apple-publishes-new-user-guide-detailing-how-sideloading-and-third-party-app-stores-would-undermine-iphone-security/</a>\"</p><p></p><h2>&nbsp;</h2><p></p>",
    "publish_time": "2023-05-04 21:17:26",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]