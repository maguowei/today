[
  {
    "title": "规避代码被“投毒”，开源软件供应链安全面面观",
    "url": "https://www.infoq.cn/article/6jm3rPVwybGMbJl358Fx",
    "summary": "<p>开源软件供应链当前面临的主要是两大风险：一是安全风险，一是许可证、版权、专利和出口管制等方面的法律合规风险。当然针对使用开源软件的企业来说，还有供应链风险及运维风险。这些风险如何更好地规避？开源协议、开源组织都做了哪些事情？企业如何自查内部开源项目的安全性？本期<a href=\"https://www.infoq.cn/video/EgmPvTu4Ik9xeFJ8qToL\">《极客有约》</a>\"，我们邀请到了 Zilliz 合伙人，首席布道师顾钧，上海安势信息技术有限公司资深解决方案架构师朱贤曼共同解答上述问题。</p><p></p><p></p><p></p><p>&nbsp;</p><p>InfoQ：开源软件供应链到底应该如何理解？</p><p>&nbsp;</p><p>顾钧：我觉得开源软件供应链和传统制造业类似，只是开源软件供应链会有很多新的挑战。传统制造业供应链的供应商承担的责任相对清晰，因为合作方之间会在成熟的法律条框下签订商业合同。但是，用户在使用开源软件时可能没有特别意识到已经对其形成依赖，该项目已经成为上游。传统意义上，可以将该开源项目理解为是供应商，但其又不承担供应商的职责。这个新的挑战就是，上下游之间没有强制的商务合作，没有法律条框可以限制使用过程，想要确保安全会有很多不确定的地方。</p><p>&nbsp;</p><p>朱贤曼：开源软件供应链面临的最大挑战就是企业自己都不知道用了哪些开源软件，大一点的公司可能开始关注到开源合规治理的内容，但是很多小公司可能还没有这个意识。</p><p>&nbsp;</p><p>InfoQ：国内当前在软件供应链安全方面的意识形态大概是什么样的？</p><p>&nbsp;</p><p>顾钧：站在使用者的角度，Zilliz开发服务的新一代向量数据库Milvus ，希望提供给最终用户云服务，所以我们既是一个开源软件的供应商，但同时我们Milvus也引用了大量第三方开源组件，是供应链上的消费者。项目初期引用上游其他开源组件的时候，我们会有一些比较简单的规则，比如说考虑许可证的兼容性问题，加入到Linux基金会时也会有一些开源项目合规性检查，回溯其中引入的开源项目许可证的合规性。</p><p>&nbsp;</p><p>站在用户的角度，明显分为两类：一类是动手能力较强的互联网类型的技术公司或者创业公司，可能没有那么严格的要求，不强制开源项目的开发团队提供一个质量保证的书面化内容，也不会尝试商务合同；另一类社区当中的用户，比如金融机构等，非常关心这个问题，尤其是想要投入到生产上的时候。我觉得国内目前有严格内部规范的企业，对开源软件供应链还是比较在意的，希望引入的开源软件有服务商提供质量保证。</p><p>&nbsp;</p><p>朱贤曼：国内企业做这件事的动力来源大部分都是外部压力，比如欧盟的运营商会在合同里面要求提供开源软件清单，写清楚项目中使用了哪些开源软件，且保证后续不会造成法律风险。国内的部分厂商是因为下游客户的要求，在合同里面签订相关条款，保证代码合规性，整个供应链环环相扣，这些是外部的压力。</p><p>&nbsp;</p><p>此外，国家层面也在慢慢重视开源合规，国内有很多安全相关的法律法规，尤其是金融行业。</p><p>&nbsp;</p><p>InfoQ：如果企业的业务在规划或正在做出海，会着重考虑这一块吗？</p><p>&nbsp;</p><p>顾钧：现在的厂商一般偏向于提供SaaS型云服务，像我们这样的创业团队是从基础软件开始做云服务，早期是在做基础软件，后来慢慢做云服务，再去做合规。海外则有很多上来就做SaaS相关云服务的公司，最重要的事情就是先把合规全部完成，这是很不一样的地方。</p><p>&nbsp;</p><p>朱贤曼：开源软件在出口管制层面的合规性要求，在美国是有法条规定的，如果不特别注意，可能会无意识当中触犯美国的出口管制条款。在中美贸易合规大背景下，企业可能就得额外关注这种合规性。所以，开源软件治理的驱动力是合规和安全，以及环境影响，比如国内之前发生的GPL诉讼，这会让很多公司逐渐关注开源合规并识别风险。</p><p>&nbsp;</p><p>顾钧：GPL开源协议和法律条款容易引人误会的地方是传统上，大家觉得要白纸黑字签署过才有法律约束，但开源协议是使用时默认代表接受整个协议，如果不接受就不能使用。</p><p>&nbsp;</p><p>InfoQ：随着国内使用开源的人越来越多，大家对开源协议的理解程度大概是什么样子的？</p><p>&nbsp;</p><p>顾钧：开源协议的数量还是挺多的，GitHub上也有一些专门的许可证选择器，帮助用户选择适合自己的许可证，基本上大家都会集中选择几大主流协议。</p><p>&nbsp;</p><p>首先是Apache 2.0，因为国内很多项目都加入了Apache软件基金会，很多新项目也是希望遵循这种方式进行治理，很多都默认选择了Apache 2.0许可证，所以对该许可证的解读会比较充分。</p><p>&nbsp;</p><p>其次是MIT许可，因为MIT许可相对宽松，所以很多个人项目或者程序库型的项目，直接就选择了该许可。因为大家都比较容易理解。当然这之中可能会潜藏一些专利问题。整体上MIT因为最简单，大家都能理解，用的人也比较多。</p><p>&nbsp;</p><p>最后是GPL，名声大，受到的攻击就比较多，很多人的错误解读，造成了GPL的评价特别两极分化。GPL协议的开源项目近期国内不是特别多，大家一般不会选择GPL，但是会有一些项目选择AGPL。</p><p>&nbsp;</p><p>朱贤曼：近几年，国内对许可证的理解程度要好很多，中大型企业都会关注，很多公司已经成立了专门的开源治理办公室，但实际业务当中会发现仍有很多问题需要解决。根据我目前的了解，国内对GPL还是能不用尽量不用，毕竟需要承担更多的合规业务。对商业应用比较友好的是Apache，宽松、不需要开放源代码、条款也相对严谨，如果商业公司使用，法务风险相对较低。AGPL、SSPL这种一般很多公司直接禁用。一般的分发概念，需要实际发布代码，以前的分发是寄光盘，现在可能是把源代码包上传到应用商店，但AGPL的分发可能通过远程访问云服务就算，这个范围就大了，所以很多公司不会选择这两种协议。如果公司内部有类似开源办公室这种角色，制订规则的时候一般会将这两者禁用。企业在对外发布开源项目时，如果希望商业化之后保留一个商业版本、一个社区版本，可能会选择类似GPL的许可，一方面可以收集到用户意见，也就是开源的反馈意见，用于改进商业版，同时也不希望被直接白嫖。</p><p>&nbsp;</p><p>InfoQ：国内在供应链管理方面有没有比较好的软件工具可以推荐的？</p><p>&nbsp;</p><p>朱贤曼：供应链是一个系统工程，肯定不是单一工具可以解决的，需要一整套的工具。因为这个链条很长，很多都需要DevOps这一套工具链。但如果想知道开源治理部分的潜在风险，最基本的是要知道到底使用了哪些开源软件，由于现在软件使用的开源软件数量众多，调用关系错综复杂，且层层依赖，靠人工去梳理基本不太现实，所以一般稍大点的公司都会引入专业的SCA工具，用于梳理企业的产品中使用了哪些开源软件，这些开源软件存在怎样的安全风险和许可证风险。</p><p>&nbsp;</p><p>InfoQ：发生漏洞事件之后，可以做哪些事情尽量降低不好的影响？</p><p>&nbsp;</p><p>顾钧：从开发人员的角度讲，如果发现了一个漏洞，首先要找到可行的绕过方法，在用户不需要进行系统更新、不需要改动任何代码的情况下将问题危害降到最低，找到方法后尽快公布，通知用户漏洞详情，如果没有也需要告知用户漏洞信息，毕竟对用户来讲是非常危险的，哪怕连夜完成修复，比较严谨的大型公司也很难将新的修复版本上线生产环境。因为这类公司有自己的流程且不易打破，连夜赶出来的修复版本也没有经过完善的测试，对企业来讲是不可取的。</p><p>&nbsp;</p><p>朱贤曼：如果是开源软件出现漏洞，我们一般建议升级版本，成本相对来说偏低，当然企业内部一般会有完备的应急预案，肯定不是随便发版升级的。</p><p>&nbsp;</p><p>InfoQ：如果一个开源项目总是频繁发布漏洞修复信息，是应该使用还是尽量少用？</p><p>&nbsp;</p><p>顾钧：我觉得这个问题挺有趣的。首先肯定要看开源软件本身的代码质量以及Issue里的反馈，对开源项目本身有一个整体评判。如果觉得软件不行就不要使用，如果用户反馈比较积极，经常更新漏洞信息说明真的有很多人在用，经常有用户给出反馈，说明项目质量在稳步提高。此外，也要注意频繁升级带来的成本。</p><p>&nbsp;</p><p>朱贤曼：我在做行管时，如果软件频繁出现安全漏洞升级信息，不建议使用。当然也分情况，开源软件同类型的项目很多，要多方面综合考虑，但是一般不建议选择频繁出现漏洞，或者漏洞版本很多的开源软件，建议选择基金会支持或者商业公司主导的项目，当然这种项目也曾出现过较大漏洞，但相对来说可能会有保障一些。</p><p>&nbsp;</p><p>InfoQ：开源项目有什么样的措施保证安全性？</p><p>&nbsp;</p><p>顾钧：代码托管在GitHub上，平台就有专门的工具扫描依赖，如果有比较严重的安全性问题会提示是否升级到新的版本。软件升级本身是一个复杂的过程，有时升级太快会引入一些新的问题，如果只是一些简单修复，对其他的影响不大，我觉得是需要积极升级的。当然有时候，这种修复也可能会引入新的问题。企业在生产当中要具体问题具体分析。</p><p>&nbsp;</p><p>InfoQ：开源项目背后的商业公司在整个过程中起到什么样的作用，或者说会引入一些什么样的风险吗？</p><p>&nbsp;</p><p>顾钧：早期来看，很多开源软件都是社区驱动的，要保证项目长期发展，光靠社区志愿是很难的，没办法要求太高。只有商务合同或者有现实利益分配时，才能确保需要的项目按时交付，个人业余时间做的项目出现在依赖上，无法提出太多要求。如果开源项目成立自己的商业公司，用户可以与其签订法律合同，提出SLA或问题修复时效相关的承诺，这些开源软件背后的公司扮演了一个让供应链更牢固的角色。</p><p>&nbsp;</p><p>朱贤曼：我非常认可顾老师的观点，站在企业的角度，选择开源软件，我会建议考量这些因素。如果自己没有支持能力，建议选择有商业背景的公司，可以购买公司提供的服务。有时免费的才是最贵的，有人帮助对整个项目兜底，至少能够解决很多问题，这是值得做的方式。</p><p>&nbsp;</p><p>InfoQ：请两位分享开源软件供应链可能面临的风险或者问题？</p><p>&nbsp;</p><p>顾钧：我觉得从早期许可证的角度来讲，很容易出现类似MIT、BSD这种过于宽松的协议，因为其不带专利所有权。代码虽然是开源的，但不代表不能就这些代码申请专利。开发者可以在代码开源之前，先递交专利申请。如果开源项目的协议是Apache 2.0，提交代码时已经默认授权用户在项目范围内使用专利，这也是相对安全的。类似MIT或者BSD这些可能就没有这个显式过程，会有另外的方式去弥补，比如通过CLA的方式将专利授权给项目用户使用，这是从许可证兼容性和专利层面的考量。</p><p>&nbsp;</p><p>另一个显著问题是需要将企业内部流程或者习惯做法更加规范化。因为之前开源的JavaScript生态当中的一些开源项目，作者直接往npm站点上传所谓的“有毒”代码，正常情况不应该在生产环境中直接下载mpn包做升级，肯定有测试环境，验证升级没问题再搬到生产环境，用户需要有这样的流程。</p><p>&nbsp;</p><p>朱贤曼：一般来说，开源软件的风险可能来自四个方面：一是安全风险，其中又分为开源软件本身的安全漏洞导致的风险和目前关注度很高的软件供应链攻击的风险，个人建议不信任所有从外面下载的组件；二是法律风险，其中又分为许可证本身的协议，如果未履行开源合规义务，可能会造成侵权而遭到索赔、诉讼、产品下架、商誉受损等风险。另外一个是专利方面的风险，一种是本身的创建者/贡献者实现的专利，有可能预埋专利陷阱，另一种是第三方专利维权风险。此外，还有商标侵权及出口管制方面的风险；三是供应链断供风险，比如俄乌事件后，可能GitHub直接就不允许俄罗斯开发人员下载代码了，甚至把俄罗斯账号的代码提交删掉了。还有上次faker.js删库事件，导致后续版本和代码更新都没有了；四是运维风险，如果企业自己没有能力支撑，没有商业公司帮忙的话，维护成本很大。</p><p>&nbsp;</p><p>InfoQ：请两位老师简单分享开源软件供应链常见的攻击类型。</p><p>&nbsp;</p><p>顾钧：首先是专利，比如潜水艇专利，预留专利埋坑，这类是很不容易防范的，因为专利审核对一般公司来讲需要一些代价。其次是恶意代码，现在主流的开源软件分发方式就是npm、GitHub，从公开站点获得开源软件后一定要做验证，这能够帮助大家减少很多麻烦。</p><p>&nbsp;</p><p>朱贤曼：一种是恶意代码，前段时间也有新闻提到可以在GitHub上把恶意代码装上去且不留下任何记录，这是很恐怖的，我们还是比较信任GitHub上面下载下来的内容，因为我们认为这是官方网站。另外一种最近提的比较多依赖混淆攻击，npm包管理器的设计存在一些问题，比如用户创建了一个私人组件，其版本是一个范围，如果同名组件更新源码，但其中存放了恶意代码，也会自动拉取过来，同名组件的代码就跑到用户环境中了，企业内部在引入组件时则需要做更多校验，我们建议企业建立自己的开源软件库，在组件进来之前有个准入机制，做测试验证，保证所使用的组件都是受信任的。当然这个成本是相对较高的，但确实很有必要。</p><p>&nbsp;</p><p>InfoQ：关于断供问题怎么解决？</p><p>&nbsp;</p><p>顾钧：开源本身不限制地域，但是承载开源这件事情的通常是一个商业实体，商业实体会受到所在地区的出口管制法，或者其他制裁条例的限制。很多时候，我们现在用到的开源软件，包括自己的开源软件都托管在GitHub上，GitHub是美国的公司，必然会受到美国的出口管制法的限制。从这个角度来讲，企业内部可以建内部代码库，所依赖的东西可以将其放在内部代码库上，万一有一天访问不了GitHub，总有个备份的源码池可以获得这些代码。从国家角度来讲，对此一直在做准备。目前来讲，我觉得大家都有各自的解决方法，似乎影响没有那么大。</p><p>&nbsp;</p><p>朱贤曼：我个人觉得，相比许可证合规和安全风险来说，断供风险只是开源众多风险之一，相对来说还是影响比较小的，开源治理更多的是许可证的法律法务的合规和安全性。</p><p>&nbsp;</p><p>讲师介绍：</p><p>&nbsp;</p><p>顾钧，Zilliz 合伙人、首席布道师，LF AI&amp;Data 基金会 TAC 成员，开放原子基金会开源导师。北大毕业 16 年以来专注于数据库、大数据技术，尤其对 OLTP 平台与场景有着丰富的经验，先后任职于工商银行、IBM、摩根士丹利、华为等企业。运营的视频号ID为「JUN不断向前」，不定期更新开源领域的热门趋势及重要内容解析。</p><p>&nbsp;</p><p>朱贤曼，上海安势信息技术有限公司资深解决方案架构师，十余年软件开发经验，先后从事出口管制合规、合规相关系统设计和实施、开源软件合规等工作。</p>",
    "publish_time": "2022-07-13 07:56:57",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "从10万npm用户信息被窃看开源软件供应链安全",
    "url": "https://www.infoq.cn/article/l63udT3Mj3m2xf3xpkmW",
    "summary": "<p>如今，所有热爱开源的开发者可能都心怀担忧：开源软件的供应链安全问题如何解决？关于开源代码维护者因反俄给node-ipc库添加恶意代码、GitHub封停部分俄罗斯开发者账号的讨论还未结束，10万npm用户账号信息被窃再登HN热搜，开源软件供应链的安全性成为业界关注的焦点话题。</p><p>&nbsp;</p><p>前段时间，ARM 开源项目宣布从 GitHub 迁移至 GitLab。当时，Arm 杰出工程师兼软件社区高级总监 Andrew Wafaa 解释道：“GitHub 其实是个黑箱，我们必须与之合作、或者把一部分工作交给对方来完成，而最终结果并不一定准确可靠，使得我们不得不规划更多审查。”本期<a href=\"https://www.infoq.cn/video/CFdQJA4Nir6k6aCruMY7\">《极客有约》</a>\"，我们邀请到了极狐（GitLab）的解决方案架构部负责人Gavin和我们一起交流如何提高开源软件供应链安全性以及极狐(GitLab)的一些想法。</p><p></p><p></p><p></p><p></p><h2>热点问题及概念探讨</h2><p></p><p>&nbsp;</p><p>InfoQ：请解读一下10万npm被泄露的事件？</p><p>&nbsp;</p><p>Gavin：该事件的引爆一方面源于GitHub的热度，由于GitHub是全球最大的开源软件协作平台，而且其本身的架构是闭源的，没有任何人知道其底层逻辑。此前，GitHub已经有很多安全相关的事件被爆出，故而GitHub一直不遗余力在做快速应对，GitHub也是在第一时间发布了问题的前因后果，证明不是自己的过错。</p><p>&nbsp;</p><p>回到问题本身，这是一个典型的软件供应链安全问题，本身与GitHub的架构没有关系，问题原因是有攻击者偷窃了GitHub的某个高级用户账号的OAuth令牌，从私有仓库下载数据，其中影响最大的是窃取了10万的npm用户数据。</p><p>&nbsp;</p><p>为什么说该事件与开源软件供应链安全相关，从整个问题逻辑上来讲，与GitHub并没有直接关系，是其合作伙伴非常重要的账号被盗导致的用户数据泄漏，但实际上已经对GitHub的品牌有一定影响，因为最终向用户呈现的是GitHub。GitHub的快速应对做得还是不错的，立刻让该令牌失效，又重置了所有受影响的用户。之后通过自查发现，由于npm与GitHub是完全独立的架构，所以本次泄漏不是由于GitHub技术原因导致的。此外，GitHub的SRE团队又进一步的分析，因为两个服务之间做了整合，故在GitHub日志系统里可以查到npm的日志信息，通过分析发现，npm日志中存在很多带有明文存放的用户密钥信息，这实际上非常危险，说明npm架构在数据库日志里没有对用户信息做加密。</p><p>&nbsp;</p><p>InfoQ：能否解释一下软件供应链安全、DevSecOps、安全左移分别是什么？以及它们之间的联系？</p><p>&nbsp;</p><p>Gavin：按时间来讲，“DevSecOps“这个概念出现的时间要比“软件供应链安全”要早一点。</p><p>&nbsp;</p><p>DevSecOps在DevOps中间加Security，即安全，这也说明其是DevOps在安全方面的延伸。我们知道DevOps是一种文化，从实践角度来讲，其解决的是软件研发生产的全生命周期管理，包括需求设计、研发测试、发布到生产运营等阶段，所以DevSecOps就是在软件全生命周期流程中加入安全，进而保护整个全流程安全的实践过程。</p><p>&nbsp;</p><p>软件供应链安全是DevSecOps的延伸，这个延伸点在哪里？实际上，软件供应链安全是一个更大的生命周期，在DevSecOps周期基础上，从软件供应链安全的角度，又有上游跟下游两个阶段，上游就是对入口的安全管控，比如依赖的开源软件、采购的商业组件，下游就是出口的安全管控，即该软件的安全分发，商用交付，包括可能做为另外一个更大软件的一部分的管理。</p><p>&nbsp;</p><p>安全左移的概念稍微小一点，对照DevSecOps软件生命周期，传统的安全方式不叫左移，是右置，企业软件开发完成，在上线之前请专门的安全厂商做一次针对运行环境的全方位扫描。这意味着出现任何问题都要返工，在国内软件研发，基本上工期都是非常紧凑的，能按时上线已经不不易，上线之后发现安全问题导致返工，研发人员的幸福感基本就葬送在这里了。安全左移指的是将安全前置，从需求设计到开发、测试、编译到部署上线的每一个阶段，都要进行安全管理，包括安全扫描引擎、管理措施、管理规范。而且要通过自动化工具实现，最终是在保障安全的前提下让应用上线变得高效。</p><p>&nbsp;</p><p>InfoQ：我们需要先把DevOps部署完全之后再做DevSecOps，还是直接做DevSecOps？</p><p>&nbsp;</p><p>Gavin：DevSecOps从定义上来讲是指软件全生命周期每个阶段都要注入安全，如果将DevOps的工程实践跟安全联系起来且能保证速率，才是真正的DevSecOps。如果没有通过DevOps的流水线集成全部的安全工具，即研发、测试、运维各阶段再安全方面都是各自为战，这就会造成运转缓慢，虽然每个阶段都在做安全，但实际上整个流程周期会特别长，作为开发、测试、运维人员，没有享受到工具带来的便利，只有管理带来的复杂，导致最终结果比较差。故最平滑的做法就是，先有DevOps的最佳实践，然后再在此经验基础上把安全工具嵌套进去，从而真正实现DevSecOps的价值。</p><p>&nbsp;</p><p>InfoQ：国内外软件供应链安全目前发展历程大概是什么样的？</p><p>&nbsp;</p><p>Gavin：根据我的观察，欧美尤其是美国在整个安全领域，包括软件供应链的细分角度，领先国内至少四年。很多细分的安全工具，头部企业基本清一色都是欧美企业，国内很多企业在一些关键场景上也是采购国外的工具。</p><p></p><p>政策分析：</p><p></p><p>一、美国方面：</p><p></p><p>1、美国政府对安全领域大力支持，2021年4月，美国正式制定软件供应链标准，由国家保护与计划局（CISA）和国家研究所标准与技术委员会（NIST）发布了论文“Defending Against Software Supply Chain Attacks”。</p><p></p><p>2、2021年5月12日，美国总统拜登签署名为“加强国家网络安全的行政命令”（Executive Order on Improving the Nation’s Cybersecurity）以加强网络网络安全和保护联邦政府网络。</p><p>&nbsp;</p><p>3、在2022年2月份，NIST发布《软件供应链安全指南》，其中核心要求：</p><p>&nbsp;</p><p>软件开发者应实施并证明采用了安全软件开发实践；安全开发环境；自动化工具确保代码完整性；自动化工具检查漏洞；</p><p>&nbsp;</p><p>4、2022年5月中旬，由Linux基金会与开源安全基金会举办了开源软件安全峰会，集结多家科技巨头的高层主管，以及美国白宫等多个联邦机关官员参会，这次会议具体指出将解决开源软件的十大挑战，同时这些科技巨头也承诺，在未来两年内，将投入1.5亿元经费解决相关问题。本次峰会进一步指出开源软件十大问题：</p><p>&nbsp;</p><p>安全教育风险评估数字签名内存安全安全应变强化扫描能力程序代码审核数据分享软件物料清单SBOM供应链改善</p><p>&nbsp;</p><p>二、欧洲方面：</p><p></p><p>2021年5月，英国政府宣布，正从治理IT供应链的组织及相关MSP，寻求防御数字供应链攻击的建议和服务。</p><p>&nbsp;</p><p>2021年5月，德国通过了《信息技术安全法案2.0》，作为对第一部法案的更新，该法案旨在“在日益频繁和复杂的网络攻击以及日常生活持续数字化的背景下提高网络和信息安全。”该法案影响到德国IT行业的许多领域，特别强调一点，针对供应商，即关键部件的制造商，也将承担一定的义务，以保护整个供应链。</p><p>&nbsp;</p><p>2021年7月，欧盟网络安全机构（ENISA）发布了一份题为《Understanding the increase in Supply Chain Security Attacks》的报告，分析了最近一年的软件供应链安全的信息。</p><p>&nbsp;</p><p>三、国内：</p><p></p><p>国内软件供应链安全整体相对比较滞后，从国家标准角度来讲，我们在供应链方面有一些偏硬件的标准，软件供应链安全标准正在制定中，具体为：</p><p></p><p>2022年4月《信息安全技术软件供应链安全要求》由&nbsp;<a href=\"http://std.samr.gov.cn/gb/search/gbDetailed?id=DDAD3E83D90FB52EE05397BE0A0A2737\">TC260</a>\"（全国信息安全标准化技术委员会）制定</p><p></p><p>在行业标准方面，中国信通标准化由中国信通院牵头，也在做软件供应链产品方面的标准。具体为：</p><p>《软件供应链安全保障基本要求》 中国通信标准化协会标准</p><p>&nbsp;</p><p></p><h2>开源软件合规性问题解答</h2><p></p><p>&nbsp;</p><p>InfoQ：开源协议及其基金会在整个开源软件供应链中扮演着一个什么样的角色，他们具体能解决哪些问题？</p><p>&nbsp;</p><p>Gavin：站在软件供应链安全的角度，开源只是其中一部分，但目前绝大多数安全事件都是因为开源软件导致的，所以大家潜移默化会把软件供应链安全与开源软件漏洞紧密结合起来。</p><p>&nbsp;</p><p>从开源软件管理角度，通常会有有三个主体：个人，企业，基金会，不同的开源项目会选择包含其中的一个或者三个主体，并不是每一个项目都要加入基金会才能运作的。而基金会的价值之一就如何保证用户的利益以及如何保证项目贡献者的利益，开源协议在这两个点发挥着重要作用，既能够保护使用者的利益，同时也能够保护生产者的利益。</p><p>&nbsp;</p><p>InfoQ：目前在整个开源软件供应链里面最常见的法律合规性的问题是什么？企业应该怎么应对这些问题？</p><p>&nbsp;</p><p>Gavin：回归到法律相关，开源软件供应链相关主要有两大问题：</p><p>&nbsp;</p><p>第一类是License违规使用，一些License会对使用者带来一些约束。比如之前很多云厂商通过售卖MongoDB云服务盈利，一定程度了影响了MongoDB的业务发展，所以MongoDB再2018年修改了License协议，改成了更加严格的SSPL，根据协议，云计算厂商在MongoDB的基础上共享，要么从MongoDB获取商业许可证，要么面向社区开源相关源代码。</p><p>&nbsp;</p><p>第二类，如果企业将产品出海到欧美市场，尤其是一些软硬结合的高科技产品，根据美国或者欧盟的法律要求，需要提供对应的供应链清单，比如产品中采用了哪些开源软件，包含了哪些商业软件，采购的商业软件的构成是什么样子？采用了哪些开源软件？版本是什么？这些版本存在哪些漏洞。如果提供不出来，可能在招投标层面会受到很多限制。如果发现违规使用License协议，甚至会被诉讼。</p><p>&nbsp;</p><p>针对第一类问题，企业需要对自身开源软件的使用进行合规管控，由法务部门制定相关开源软件引入的规范，然后由信息化部门落实在软件生产的日常管理中。</p><p>针对第二类问题，企业需要建立相应的软件供应链安全管理机制，同时引入软件成分分析工具，甚至构建软件供应链安全的平台，提前对自身软件进行分析。</p><p>&nbsp;</p><p>InfoQ：大家是否已经形成安全左移的意识形态？</p><p>&nbsp;</p><p>Gavin：第一类行业的头部企业，主要从品牌保护的角度出发，会实时关注安全技术的发展动向，即使引入最先进的安全管理技术，第二类，涉及到强监管的行业，如金融行业；第三类是出海企业，不做这件事情，产品就卖不出去，或者在竞标环节处于下风；第四类是医药领域，对用户信息数据安全非常严格，但是医药信息化相对来讲没有那么快，DevOps做得还一般，实现DevSecOps自动化工具可能还有一段路要走，但是目前是一个不错的切入点。</p><p>&nbsp;</p><p>InfoQ：从极狐(GitLab)视角去看，开源项目包括社区背后的公司在这块主要起到了哪些比较关键的作用？</p><p>&nbsp;</p><p>Gavin：首先，国内目前开源环境下，大家贡献相对较少，专门做开源软件的公司也很少，需要激励大家增加开源贡献，把国内的社区、开源软件项目做大做强。从社区角度来讲，我们需要建立相对公平的态势，不断提高开源项目的价值、热度与采纳度；其次，站在平台社区的角度，社区平台需要做一些事情，让大家了解如何合理合规使用开源项目，需要告诉大家满足合规安全的开发规范是什么，只有让广大开发者真正去使用起来，才能体会到软件供应链安全和相关服务带来的价值。比如极狐(GitLab)&nbsp;SaaS版本，会给用户一到两个月的旗舰版试用期，在试用期里可以体会如何通过一体化的DevSecOps解决方案实现端到端的安全，开箱即用，非常方便。如果让用户体会到产品的价值，在一定程度上也会帮助整个软件供应链安全的推广。</p><p>&nbsp;</p><p></p><h2>常见安全问题及阻止办法</h2><p></p><p>&nbsp;</p><p>InfoQ：从开发、交付和使用三个层面分别来看，常见的软件供应链安全问题有哪些？</p><p>&nbsp;</p><p>Gavin：开发层面主要有引入License不合规的软件、开源软件的漏洞、测试不充分（缓存溢出、SQL注入、跨站脚本）、密钥硬编码； 交付层面是制品库被篡改；运维层面是针对服务器、网络方面的攻击， DDOS等。</p><p>&nbsp;</p><p>InfoQ：从我们常见的一些安全问题的角度出发，从去年开始，只要提到开源软件工具，肯定要依赖项目工具，您是怎么看待的？</p><p>&nbsp;</p><p>Gavin：这是一个非常有意思的问题，依赖混淆攻击的攻击方法特别简单，主要针对JavaScript、Node.js包等，攻击者盲猜npm库的命名规则，上传一个带有漏洞的版本到外网的官方npm库中，版本号用最新的，这样企业在自动构建的时候，会从外网下载这些带有漏洞的版本号最新的最新依赖库，从而导致被攻击。其整个攻击原理非常简单，解决途径也非常简单，最直接的就是管理好用户，不要连外网，只从自己的内部工具下载，这样肯定就没有问题了。其次，如果有外网，就需要对制品过程做一些配置，不允许制品下载的过程去访问外网，避免到外网下载恶意版本。另外，从管理角度来讲，需要加强对包命名的规范，不要轻易被攻击者猜到。</p><p>&nbsp;</p><p>InfoQ：现在有哪些比较好的手段可以自查项目的安全性？</p><p>&nbsp;</p><p>Gavin：这里讲一些低成本，简单好用的方法给到大家。首先，引入开源软件扫描引擎工具，利用这些工具对现有的第三方开源软件进行License扫描、漏洞扫描，有专业的商业软件，也有一些入门级的开源软件；其次，对于一些关键开源软件，如MySQL，Redis，尽量关注其版本发布说明，软件升级除了增加功能之外，最重要的就是为了解决安全漏洞；第三，代码里面不要硬编码任何用户信息、密钥、Token，可以通过写一些脚本实现；最后，如果采用容器技术的话，我们可以引入一些容器镜像扫描工具保证镜像的安全。</p><p>&nbsp;</p><p>InfoQ：引入开源软件或者对外输出软件或者服务的时候，应该具体注意什么？</p><p>&nbsp;</p><p>Gavin：这涉及到选型过程。首先，企业需要建立真正适合自己的管理体系标准，管理好入口，满足一定要求才能引入该软件；其次，软件工具的采买要把涉及到赔偿的法规作为引入层采购的条款，这是非常重要的；第三，需要拿到采购的软件自身以及上游的软件引用清单，一定要清楚具体引入了什么软件以及对应的版本信息；最后，做整体审查，包括自己的代码和上游代码，实时关注漏洞信息，尤其是关键组件出现问题一定要第一时间解决。</p><p></p><h2>未来规划</h2><p></p><p>&nbsp;</p><p>InfoQ：关于软件供应链安全，国内有没有一些比较好的软件工具？</p><p>&nbsp;</p><p>Gavin：这个问题从乙方提供平台工具的角度来讲，大概分为两个流派，第一类是做安全工具厂商起家的，先有安全工具，然后再集成到DevOps体系中，安全工具厂商通常由多种工具解决软件供应链安全中的局部安全问题，随着DevSecOps兴起，安全工具厂商需要与客户的DevOps解决方案体系融合，慢慢形成DevSecOps平台类型的解决方案及产品；第二类是做DevOps起家的厂商，先有DevOps，然后再整合各类安全的工具，比如极狐(GitLab)，我们有DevOps端到端工具，支持云原生的Kubernetes和CI/CD，在这个基础上又收购了专业解决安全的软件厂商，包括一些测试工具，同时我们又集成了其他商业工具，先有DevOps再有Sec工具。从软件供应链平台角度来讲，类似极狐(GitLab)这样的DevSecOps厂商很少。</p><p>&nbsp;</p><p>InfoQ：现在很多企业在用云，选择某一家云平台之后，厂商本身是不是也会提供云安全的能力？这种安全能力足够保证软件在上面的安全性吗？</p><p>&nbsp;</p><p>Gavin：最近一两年，企业在引入与扩大使用云原生技术的时候，关注点已经向安全方面考虑。对于安全话题，我们要始终保持敬畏的，因为这是有一定的行业壁垒，需要专业的人经过时间的积累，才能形成不错的解决方案和比较优秀的产品。云原生厂商或者云原生延伸的安全更多在于云原生技术本身的安全，比如，如何保证网络安全？如何保障Kubernetes集群的安全？对于在云平台上面部署的应用的安全防护，从软件供应链的角度，开发阶段可以引入SCA、SAST、License检测等检测工具，发布阶段需要确保制品的安全性，在运行态，可以引入如IAST、DAST的检测技术，这背后是一整套安全体系，对应需要一系列的安全工具集。</p><p>&nbsp;</p><p>InfoQ：开源软件供应链安全未来三到五年要把一些事情大概做到什么样子？</p><p>&nbsp;</p><p>Gavin：这个问题很大，我结合个人看法提几点粗浅的看法。第一点是尽快出台国家标准，包括行业标准的建立，由政府机构牵头，要集合行业专家的智慧；第二点是需要出台行业评测体系化的指导意见；第三点是打磨更多产品出来，并且在更多的行业推广起来，尤其是头部客户，需要将最佳实践分享出来引领其行业在安全方面不断向前发展。</p><p>&nbsp;</p><p>嘉宾介绍：</p><p>&nbsp;</p><p>Gavin WANG（王斌峰） &nbsp; 极狐(GitLab)公司 解决方案架构部负责人</p><p>&nbsp;</p><p>Gavin致力于帮助企业开展DevOps实践、云原生转型、远程办公、软件供应链安全的技术咨询工作，参与过DevOps一体化平台、混合云管理平台、人工智能平台、微服务运维平台、数据技术中台、架构设计项目，曾拜访逾100家终端用户，熟悉多个行业的转型痛点及业务诉求。</p>",
    "publish_time": "2022-07-13 08:30:36",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Leyden延迟了OpenJDK AOT编译器，转而优化JIT编译器",
    "url": "https://www.infoq.cn/article/xH5DI20VgkxdVEgjogVM",
    "summary": "<p><a href=\"https://www.google.com/url?q=https://openjdk.java.net/projects/leyden/&amp;sa=D&amp;source=docs&amp;ust=1654694658621055&amp;usg=AOvVaw3rBIGTg6iHNtdqk4H53pBg\">Leyden项目</a>\"的目标是“解决Java启动时间慢、达到性能峰值慢和占用空间大等长期痛点问题”。它想通过在OpenJDK中“引入静态镜像的概念”来实现这一目标。静态镜像来自于对<a href=\"https://www.infoq.com/articles/native-compilations-boosts-java/\">原生可执行文件的提前（Ahead-of-Time，AOT）编译</a>\"。在两年没有公开的活动之后，Leyden项目在2022年5月改变了方向，首先优化即时（Just-in-Time,JIT）编译。由此产生的<a href=\"https://mail.openjdk.java.net/pipermail/leyden-dev/2022-May/000001.html\">优化几乎肯定要比最初计划的要弱</a>\"，它最早会在2025年底交付给主流Java开发者。Oracle的Graal项目已经实现了Leyden项目的目标，但其代价是该项目目前竭力想避免的。</p><p></p><p>Graal项目起源于Oracle Labs，并不是OpenJDK的一部分。它的<a href=\"https://www.infoq.com/articles/native-java-graalvm\">GraalVM Native Image</a>\"是一个Java AOT编译器，如今能够生成原生可执行文件。与Java的JIT编译器相比，它们有<a href=\"https://www.youtube.com/watch?v=EpcovUvQ-XA&amp;t=179s\">四个优势</a>\"，即启动更快、内存和CPU占用更低、安全漏洞更少以及文件更小。</p><p></p><p>但是，这些成就是有代价的，那就是GraalVM Native Image对Java应用有一个所谓的封闭性假设（closed-world assumption）的要求，这对所有的Java的应用来说都是很难接受的。为什么呢？因为Java是一个动态语言，它在运行时赋予了应用很多的权力，比如反射、类加载，甚至构建类。有些特性在GraalVM Native Image的<a href=\"https://www.infoq.com/articles/native-java-aligning/\">封闭世界里是无法正常运行的</a>\"。这也就是Leyden项目现在想要“探索比封闭性假设更弱的约束，并发现它们能够实现哪些优化”的原因。尽管如此，Leyden项目“依然有希望[...]生成完全静态的镜像”，只不过“这是长期来看”的目标了。</p><p></p><h3>OpenJDK以前曾经尝试过AOT编译</h3><p></p><p>Leyden项目是OpenJDK对AOT编译的第二次尝试。第一次尝试是JEP 295 Ahead-of-Time Compilation的jaotc，并于2017年9月在JDK 9中交付。与GraalVM Native Image类似，它使用了Graal项目。但是，与GraalVM Native Image不同的是，它非常不受欢迎：当Oracle在Java 16构建版中<a href=\"https://bugs.openjdk.java.net/browse/JDK-8255616\">移除</a>\"jaotc时，“没有受到任何人的抱怨”。于是，Oracle在JDK 17中，基于JEP 410 Remove the Experimental AOT and JIT Compiler，干脆利落地移除了它。</p><p></p><p>对于OpenJDK项目来说，Leyden有着不同寻常的历史。Java语言的架构师Mark Reinhold在2020年4月<a href=\"https://www.infoq.com/news/2020/05/java-leyden/\">提出了它</a>\"，随后，OpenJDK在2020年6月将其<a href=\"https://mail.openjdk.java.net/pipermail/announce/2020-June/000290.html\">批准</a>\"为一个项目。但是，从批准到2022年5月<a href=\"https://mail.openjdk.java.net/pipermail/leyden-dev/2022-May/000000.html\">创建邮件列表</a>\"的两年时间里，没有看到该项目任何明显的进展。这也就是该项目为何刚刚起步，现在主要关注的是“<a href=\"https://mail.openjdk.org/pipermail/leyden-dev/2022-May/000000.html\">概念，而不是代码</a>\"”的原因。Reinhold指出，像“HotSpot JVM、C2编译器、应用类数据共享（application class-data sharing，CDS）以及jlink链接工具”都是优化的目标。值得注意的是，列表里缺失的一个组件是<a href=\"https://youtu.be/0evEs_3yaEI\">CRaC</a>\"，它是一个OpenJDK项目，能够通过在磁盘中加载Java应用来减少启动时间。</p><p></p><p>通过反推可以得出可能的交付日期。现在，LTS版本的重要性已经超出了预期。Ben Evans，之前就职于性能监控公司New Relic，在Devoxx UK 2022上宣布“<a href=\"https://youtu.be/SYO-LmA647E?t=186\">没有任何一个非LTS版本的市场份额超过了1%</a>\"”。这表明，主流的Java开发人员只会从一个Java LTS版本迁移至另一个LTS版本。</p><p></p><p>因为Leyden项目现在刚刚开始，估计很少有成果能够以生产可用的状态进入2023年9月份发布的JDK 21（也就是下一个<a href=\"https://www.infoq.com/news/2021/10/oracle-java-two-year-lts\">LTS版本</a>\"）。所以，主流Java开发人员可能只有在2025年9月的LTS版本（JDK 25）中才能看到Leyden项目的第一批成果。基于这样的假设，Leyden项目最早会在2027年9月通过JDK 29向原生可执行文件提供AOT编译功能。InfoQ将继续关注Leyden项目的进展。</p><p></p><h3>Spring Boot对Leyden项目的反应</h3><p></p><p>在Leyden考虑的特性中，至少有一些需要应用框架的支持才能发挥最佳效果，比如jlink或CRaC。所以，InfoQ联系了Spring Boot、Quarkus和Micronaut的开发者，了解他们对Leyden公告的初步反应。</p><p>Spring Framework的项目负责人Juergen Hoeller对Leyden项目表示了认可：</p><p></p><p></p><blockquote>Leyden项目是一个很有前途的倡议，与我们在Spring Framework 6和Spring Boot 3的大方向上是一致的。</blockquote><p></p><p></p><p>Hoeller还欣然接受在Spring中支持CRaC：</p><p></p><p></p><blockquote>CRaC堆快照可以作为改善Spring应用的启动时间的通用方案。在应用启动的最后阶段生成快照，此时几乎没有任何处于打开状态的文件或网络资源，这符合CRaC的预期。Spring甚至已经在应用上下文刷新结束时重置了它的通用缓存，在用请求相关的元数据动态地重新填充缓存之前清除了启动相关的元数据。在 [......] 应用上下文对快照事件的具体反应，以及改进通用组件的“快照安全”方面，我们肯定会在技术上可行的情况下，在Spring Framework 6.x产品线中努力为早期采用者赋予更多的能力。</blockquote><p></p><p></p><p>Hoeller认为Spring将会很快支持jlink和Java平台模块系统（Java Platform Module System ，JPMS）：</p><p></p><p></p><blockquote>目前的Spring Framework 6.0的里程碑版本还不包括module-info描述符。但这在9月份M6里程碑版本的路线图上，在我们进入6.0的发布候选阶段时，会重新评估第三方生态系统的模块系统就绪情况。由于Leyden项目有可能将jlink变成一个更强大、更通用的工具，所以我们计划不仅为jlink目前的能力做好准备，也会考虑它进一步的演进。</blockquote><p></p><p></p><h3>Quarkus对Leyden项目的反应</h3><p></p><p>Quarkus的联合创始人和共同负责人Jason Greene对Leyden项目发表了评论：</p><p></p><p></p><blockquote>我们对Leyden项目修改Java语言规范以更好地支持静态镜像、原生编译和其他技术（如JVM检查点）的目标感到最为兴奋。此外，我们很高兴看到封闭性假设仍然可能是该项目的长期目标。</blockquote><p></p><p></p><p>Greene也欣然接受在Quarkus中支持CRaC：</p><p></p><p></p><blockquote>最近，对CRaC研究项目的初步支持已经由CRaC的负责人贡献给了Quarkus项目。不管运行时的目标类型是什么，Quarkus都会进行构建时的优化，所以在OpenJDK上运行时，我们依然能够看到相当可观的成本节省，而不仅限于GraalVM。在OpenJDK之上添加检查点的方式，比如CRaC，能够进一步优化启动时间。它无法带来类似于原生镜像那样的成本节省，但是对倾向于或必须采用JVM执行的应用来讲，未来这都是一个很有意思的可选方案。</blockquote><p></p><p></p><p>但是，Greene对于在Quarkus中使用jlink和JPMS并没有表现出太高的热情：</p><p></p><p></p><blockquote>截止到目前为止，jlink只是为基于JVM的应用的存储开销带来了好处（不管有没有它，内存开销和启动时间基本上都是一样的）。但是，在容器和Kubernetes应用中，常见的实践是在标准JVM基础镜像上建立新的层，这已经比将所有的应用切换到jlink上带来了更多的成本节省（因为每个人都会打包自己裁剪过的JVM）。在原生镜像的场景中，JVM的细粒度元素编译到了镜像中，所以在这种情况下，jlink也提供不了什么帮助。同样，对于JPMS，Quarkus已经通过Quarkus扩展实现了自己的模块化理念，允许我们将依赖集修剪到只包含所需的内容。Quarkus所采取的方式与简单扁平化classpath是兼容的，这也是大多数Java生态系统和构建工具如今所偏爱的方式。在成本方面，如果按照jlink的要求转向纯JPMS模块（没有自动模块），那么将意味着不仅对Quarkus，还对Quarkus构建所需的大量的库都会产生破坏性的变更。在考虑进行转换之前，我们希望看到这些因素能够更好地平衡。</blockquote><p></p><p></p><h3>Micronaut对Leyden项目的反应</h3><p></p><p>Object Computing, Inc.（OCI）的首席软件工程师Sergio del Amo Caballero对Leyden项目没有发表Micronaut框架的官方声明。但他在最近一个关于在Micronaut上添加对CRaC支持的<a href=\"https://github.com/micronaut-projects/micronaut-core/issues/7601\">GitHub issue</a>\"上对此进行了阐述。</p><p></p><p>Caballero还分享了2020年7月的一段<a href=\"https://youtube.com/clip/UgkxyPlY-jWrPCWnBdf-EeKd6iMklqp8a7df\">YouTube视频</a>\"，视频中Micronaut的创始人Graeme Rocher对JPMS进行了评论：Micronaut支持JPMS并发布了module-info文件，但必须要“在支持Java 8之间取得平衡”。JPMS是在Java 9中加入的，但Micronaut 3.5，即当前版本，仍然运行在Java 8上。</p><p></p><h3>结论</h3><p></p><p>到目前为止，OpenJDK还没有解决“Java启动时间慢、达到性能峰值慢以及占用空间大的问题”。首先，它的jaotc&nbsp;AOT编译器并没有得到足够的动力，并且已经废弃了。随后，Leyden项目开始对Java的原生编译进行标准化，但停滞了两年之久。</p><p></p><p>现在，Leyen项目已经转向首先优化JIT编译，情况正在好转：Spring和Quarkus都拥抱CRaC以减少启动时间。但是当涉及到实现较小的Java应用时，只有Micronaut坚持Leyden项目的建议，即使用JPMS。Spring计划在2022年底的6.0版本中支持JPMS，不过Spring生态系统可能还不会这样做。而Quarkus目前没有计划加入JPMS。</p><p></p><p>Leyden项目的成果，最早可以在2025年底以JEP的形式到达主流Java开发者手中。因此，至少在那之前，将GraalVM Native Image AOT编译器与Quarkus、Micronaut或即将推出的Spring Boot 3等框架结合起来，仍然是避免“Java启动时间慢、达到性能峰值慢以及占用空间大的问题”的最佳选择。</p><p></p><p>作者简介：</p><p>Karsten Silz全栈 Java 开发人员，Karsten Silz 在欧洲和美国工作了23年。2004年，他在美国合伙创立了一家提供软件产品的初创公司。Karsten领导了13年的产品开发，并在公司成功出售后离开。自2017年以来，他一直在德国和英国做承包商（Spring Boot、Angular、Flutter）。2020年，他作为CTO共同创立了SaaS初创公司“Your Home in Good Hands”。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/06/project-leyden-delays-aot/\">Project Leyden Delays OpenJDK AOT Compiler, Optimizes JIT Compiler Instead</a>\"</p>",
    "publish_time": "2022-07-13 09:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]