[
  {
    "title": "TypeScript中的Object.keys类型为什么非要这么设计？",
    "url": "https://www.infoq.cn/article/1RbbRPFKwQsGdDa8B7oJ",
    "summary": "<p>如果大家比较熟悉TypeScript开发，那肯定遇到过下面这种情况：</p><p>&nbsp;</p><p><code lang=\"null\">interface Options {\n  hostName: string;\n  port: number;\n}\n\n\nfunction validateOptions (options: Options) {\n  Object.keys(options).forEach(key =&gt; {\n    if (options[key] == null) {\n        // @error {w=12} Expression of type 'string' can't be used to index type 'Options'.\n      throw new Error(`Missing option ${key}`);\n    }\n  });\n}\n\n</code></p><p>&nbsp;</p><p>&nbsp;</p><p>乍看之下，这个错误完全是莫名其妙。我们完全可以使用options&nbsp;键来访问options&nbsp;，但TypeScript为什么还非要报错？</p><p>&nbsp;</p><p>只要通过将&nbsp;Object.keys(options)&nbsp;强制转换为&nbsp;(keyof&nbsp;typeof options)[]，就能有效规避这个问题。</p><p>&nbsp;</p><p><code lang=\"null\">const keys = Object.keys(options) as (keyof typeof options)[];\nkeys.forEach(key =&gt; {\n  if (options[key] == null) {\n    throw new Error(`Missing option ${key}`);\n  }\n});</code></p><p>&nbsp;</p><p>既然方法如此简单，TypeScript为什么不出手解决？</p><p>&nbsp;</p><p>查看Object.keys的类型定义，我们会看到如下内容：</p><p>&nbsp;</p><p><code lang=\"null\">// typescript/lib/lib.es5.d.ts\n\n\ninterface Object {\n  keys(o: object): string[];\n}\n\n</code></p><p>&nbsp;</p><p>这个类型定义非常简单，即接收object&nbsp;并返回string[]。</p><p>&nbsp;</p><p>也就是说，我们可以轻松让这个方法接收通用参数T&nbsp;并返回(keyof T)[]。</p><p>&nbsp;</p><p><code lang=\"null\">class Object {\n  keys(o: T): (keyof T)[];\n}\n\n</code></p><p>&nbsp;</p><p>&nbsp;</p><p>只要这样定义Object.keys，就不会触发任何类型错误。</p><p>&nbsp;</p><p>所以大家第一反应肯定是把Object.keys定义成这样，可TypeScript偏没有这么做。究其原因，与TypeScript的结构类型系统有关。</p><p>&nbsp;</p><p></p><h2>TypeScript中的结构类型</h2><p></p><p>&nbsp;</p><p>只要发现有属性丢失或者类型错误，TypeScript就会马上报错。</p><p>&nbsp;</p><p><code lang=\"null\">function saveUser(user: { name: string, age: number }) {}\n\n\nconst user1 = { name: \"Alex\", age: 25 };\nsaveUser(user1); // OK!\n\n\nconst user2 = { name: \"Sarah\" };\nsaveUser(user2);\n         // @error {w=5} Property 'age' is missing in type { name: string }.\n\n\nconst user3 = { name: \"John\", age: '34' };\nsaveUser(user3);\n         // @error {w=5} Types of property 'age' are incompatible.\\n  Type 'string' is not assignable to type 'number'.\n\n</code></p><p>&nbsp;</p><p>&nbsp;</p><p>但如果我们提交的是无关的属性，那TypeScript不会做出任何反应。</p><p>&nbsp;</p><p><code lang=\"null\">function saveUser(user: { name: string, age: number }) {}\n\n\nconst user = { name: \"Alex\", age: 25, city: \"Reykjavík\" };\nsaveUser(user); // Not a type error\n\n</code></p><p>&nbsp;</p><p>这就是结构类型系统的设计思路。如果A是B的超集（即A包含B中的所有属性），则可以将类型A分配给B。</p><p>&nbsp;</p><p>但如果A是B的真超集（即A中的属性比B更多），则：</p><p>A可被分配给B，但B不可被分配给A。</p><p>&nbsp;</p><p>注意：除了需要是属性的超集之外，具体属性类型也有影响。</p><p>&nbsp;</p><p>以上讲解可能过于抽象，下面咱们从更具体的例子入手。</p><p>&nbsp;</p><p><code lang=\"null\">type A = { foo: number, bar: number };\ntype B = { foo: number };\n\n\nconst a1: A = { foo: 1, bar: 2 };\nconst b1: B = { foo: 3 };\n\n\nconst b2: B = a1;\nconst a2: A = b1;\n      // @error {w=2} Property 'bar' is missing in type 'B' but required in type 'A'.\n\n</code></p><p>&nbsp;</p><p>其中的关键点在于，当我们面对一个类型T的对象时，也就相当于确定该对象至少包含T中的属性。</p><p>&nbsp;</p><p>但我们并不知道T是否切实存在，所以Object.keys的类型机制才会是现在这个样子。下面我们再举一例。</p><p>&nbsp;</p><p></p><h3>Object.keys的不安全用法</h3><p></p><p>&nbsp;</p><p>假设我们正为某项Web服务创建一个端点，此端点会创建一个新用户。我们的现有User接口如下所示：</p><p>&nbsp;</p><p><code lang=\"null\">interface User {\n  name: string;\n  password: string;\n}\n\n</code></p><p>&nbsp;</p><p>在将用户保存至数据库之前，我们先要确保这里的User对象有效。</p><p>name必须为非空。password必须有至少6个字符。</p><p>&nbsp;</p><p>因此，我们创建一个validators对象，其中包含User中每个属性的验证函数：</p><p>&nbsp;</p><p><code lang=\"null\">const validators = {\n  name: (name: string) =&gt; name.length &lt; 1\n    ? \"Name must not be empty\"\n    : \"\",\n  password: (password: string) =&gt; password.length &lt; 6\n    ? \"Password must be at least 6 characters\"\n    : \"\",\n};\n\n</code></p><p>&nbsp;</p><p>之后我们再创建一个validateUser&nbsp;函数，通过这些验证器运行User对象：</p><p>&nbsp;</p><p><code lang=\"null\">function validateUser(user: User) {\n  // Pass user object through the validators\n}\n\n</code></p><p>&nbsp;</p><p>因为我们需要验证user中的各个属性，所以可以用Object.keys迭代user中的属性：</p><p>&nbsp;</p><p><code lang=\"null\">function validateUser(user: User) {\n  let error = \"\";\n  for (const key of Object.keys(user)) {\n    const validate = validators[key];\n    error ||= validate(user[key]);\n  }\n  return error;\n}\n\n</code></p><p>&nbsp;</p><p>注意：这部分代码片段中存在类型错误，但我们暂不细究，稍后再进一步讨论。</p><p>&nbsp;</p><p>这种方法的问题是，user用户可能包含validators中不存在的属性。</p><p>&nbsp;</p><p><code lang=\"null\">interface User {\n  name: string;\n  password: string;\n}\n\n\nfunction validateUser(user: User) {}\n\n\nconst user = {\n  name: 'Alex',\n  password: '1234',\n  email: \"alex@example.com\",\n};\nvalidateUser(user); // OK!\n\n</code></p><p>&nbsp;</p><p>&nbsp;</p><p>即使User并没有指定email属性，由于结构类型允许提交无关属性，所以这里也不会触发类型错误。</p><p>&nbsp;</p><p>在运行时中，email属性会导致validator处于undefined状态，并在调用时抛出错误。</p><p>&nbsp;</p><p><code lang=\"null\">for (const key of Object.keys(user)) {\n  const validate = validators[key];\n  error ||= validate(user[key]);\n            // @error {w=8} TypeError: 'validate' is not a function.\n}\n\n</code></p><p>&nbsp;</p><p>好在TypeScript会在这段代码实际运行之前，就提醒我们其中存在类型错误。</p><p>&nbsp;</p><p><code lang=\"null\">for (const key of Object.keys(user)) {\n  const validate = validators[key];\n                   // @error {w=15} Expression of type 'string' can't be used to index type '{ name: ..., password: ... }'.\n  error ||= validate(user[key]);\n                     // @error {w=9} Expression of type 'string' can't be used to index type 'User'.\n}\n\n</code></p><p>&nbsp;</p><p>现在相信大家能够理解Object.keys的类型为什么要这样设计了。其实质，就是强制提醒我们对象中可能包含类型系统无法识别的属性。</p><p>&nbsp;</p><p>有了以上结构类型和潜在问题的知识储备，下面我们一起来看如何发挥结构类型的设计优势。</p><p>&nbsp;</p><p></p><h3>实际运用结构类型</h3><p></p><p>&nbsp;</p><p>结构类型带来了很大的灵活性，允许接口准确声明自己需要的属性。下面还是通过实例加以演示。</p><p>&nbsp;</p><p>设想我们编写了一个函数以解析KeyboardEvent，并返回触发器的快捷方式。</p><p>&nbsp;</p><p><code lang=\"null\">function getKeyboardShortcut(e: KeyboardEvent) {\n  if (e.key === \"s\" &amp;&amp; e.metaKey) {\n    return \"save\";\n  }\n  if (e.key === \"o\" &amp;&amp; e.metaKey) {\n    return \"open\";\n  }\n  return null;\n}\n\n</code></p><p>&nbsp;</p><p>为了确保代码按预期工作，下面我们编写一些单元测试：</p><p>&nbsp;</p><p><code lang=\"null\">expect(getKeyboardShortcut({ key: \"s\", metaKey: true }))\n  .toEqual(\"save\");\n\n\nexpect(getKeyboardShortcut({ key: \"o\", metaKey: true }))\n  .toEqual(\"open\");\n\n\nexpect(getKeyboardShortcut({ key: \"s\", metaKey: false }))\n  .toEqual(null);\n\n</code></p><p>&nbsp;</p><p>&nbsp;</p><p>看起来不错，但TypeScript会报错：</p><p>&nbsp;</p><p><code lang=\"null\">getKeyboardShortcut({ key: \"s\", metaKey: true });\n                    // @error {w=27,shiftLeft=48} Type '{ key: string; metaKey: true; }' is missing the following properties from type 'KeyboardEvent': altKey, charCode, code, ctrlKey, and 37 more.\n\n</code></p><p>&nbsp;</p><p>一个个指定37个额外属性根本就不现实，我们当然可以将参数转换为KeyboardEvent来解决这个问题：</p><p>&nbsp;</p><p><code lang=\"null\">getKeyboardShortcut({ key: \"s\", metaKey: true } as KeyboardEvent);\n\n</code></p><p>&nbsp;</p><p>但这可能遮盖掉其他可能发生的类型错误。</p><p>&nbsp;</p><p>所以正确的思路，应该是更新getKeyboardShortcut以确保仅从事件中声明它需要的属性。</p><p>&nbsp;</p><p><code lang=\"null\">interface KeyboardShortcutEvent {\n  key: string;\n  metaKey: boolean;\n}\n\n\nfunction getKeyboardShortcut(e: KeyboardShortcutEvent) {}\n\n</code></p><p>&nbsp;</p><p>现在测试代码需要满足的条件大大收窄，处理起来自然更加轻松。</p><p>&nbsp;</p><p>函数与全局KeyboardEvent类型的耦合也更少，且能够在更多上下文中使用。换言之，灵活性得到显著提升。</p><p>&nbsp;</p><p>而这一切之所以可行，显然要归功于结构类型。作为后者的超集，KeyboardEvent可被分配给KeyboardShortcutEvent，这就回避了KeyboardEvent中的37个不相关属性。</p><p>&nbsp;</p><p><code lang=\"null\">window.addEventListener(\"keydown\", (e: KeyboardEvent) =&gt; {\n  const shortcut = getKeyboardShortcut(e); // This is OK!\n  if (shortcut) {\n    execShortcut(shortcut);\n  }\n});\n\n</code></p><p>&nbsp;</p><p></p><h5>原文链接：</h5><p></p><p></p><p><a href=\"https://alexharri.com/blog/typescript-structural-typing\">https://alexharri.com/blog/typescript-structural-typing</a>\"</p><p></p><h5>&nbsp;相关阅读：</h5><p></p><p></p><p><a href=\"https://xie.infoq.cn/article/6ff79700fb3bfa972c1beebf3\">TypeScript 与 JavaScript：你应该知道的区别</a>\"</p><p><a href=\"https://www.infoq.cn/article/dDXbcLHT7teNYSPL3sm7\">“TypeScript 不值得！”前端框架 Svelte 作者宣布重构代码，反向迁移到 JavaScript 引争议</a>\"</p><p><a href=\"https://xie.infoq.cn/article/b7f556a866805cf5c71be7af8\">Typescript- 类型检测和变量的定义</a>\"</p><p><a href=\"https://xie.infoq.cn/article/5cf66bfa800154e86868a1849\">理论 + 实践：从原型链到继承模式，掌握 Object 的精髓 </a>\"</p>",
    "publish_time": "2023-08-28 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "“视象新生”火山引擎视频云 & AIGC 技术大会",
    "url": "https://www.infoq.cn/article/qG430Mt6jRohJ6eVYbkf",
    "summary": "<p>8 月 22 日，由火山引擎与 NVIDIA 联合举办的“火山引擎视频云 &amp;AIGC 技术大会”圆满落幕！本次大会以“视象新生”为主题，聚焦体验创新，火山引擎视频云将携手投资机构、意见领袖、合作伙伴、行业代表，共话全行业视频化时代新趋势，视频技术新边界，视频化普惠新进程和场景融合新体验，驱动企业创新增长。</p>",
    "publish_time": "2023-08-28 10:24:57",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "探秘金融大模型与AIGC新浪潮：QCon 2023 北京站闭门交流会，你准备好了吗？",
    "url": "https://www.infoq.cn/article/JZCu0u5R4LUatr0Fgxqg",
    "summary": "<p>有没有觉得最近金融科技和人工智能的发展简直是翻天覆地？如果你也像我一样对这些话题充满好奇和热情，那么我有个好消息要告诉你！在今年的 <a href=\"https://qcon.infoq.cn/202309/beijing/schedule\">QCon 2023 全球软件开发大会</a>\"（北京） 上，我们准备了两场非常硬核的闭门交流会，专门深挖这两个领域的前沿问题。</p><p>&nbsp;</p><p>这不是一场普通的讲座，而是一个真正能让你触摸到行业脉搏，和大咖近距离交流的平台。我们将一起探讨金融领域如何更好地运用大模型，以及在AIGC浪潮下如何提升研发效能。</p><p>&nbsp;</p><p>如果你对这些话题有兴趣，或者想要在这两个领域有所突破，千万不要错过这次机会！赶快继续往下看，了解更多详情吧！</p><p></p><h3>闭门交流会详细信息</h3><p></p><p>时间：9&nbsp;月&nbsp;3&nbsp;日下午&nbsp;14:00-18:00</p><p>地点：北京·富力万丽酒店</p><p>议程安排：</p><p>主题一：金融领域落地大模型落地探索时间：14:00-15:40话题介绍：在当今的金融领域，大模型不仅是一种技术趋势，更是推动金融创新和颠覆性变革的核心力量。随着大数据和算法的不断进步，如何高效地在金融领域落地这些大模型，已经成为行业的重要议题。子话题：金融大模型的核心技术与应用趋势。金融领域的数据挑战：如何训练和部署大模型。大模型在金融风控、量化交易和客户服务中的实际案例。金融大模型的伦理和合规性问题。主题二：AIGC&nbsp;浪潮下的研发效能提升时间：16:20-18:00话题介绍：AIGC&nbsp;浪潮为技术研发带来了前所未有的机遇，同时也伴随着巨大的挑战。在这个时代，如何提升研发效能，不仅关乎组织的竞争力，更关乎未来的可持续发展。子话题：AIGC浪潮的核心驱动因素与研发趋势。研发团队如何应对AIGC的技术挑战。AIGC在产品迭代、质量保证和持续集成中的作用。提升研发团队的协作和响应速度：最佳实践与工具。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d7/d7e2b72e12ddac9c386890e3144c0bfb.jpeg\" /></p><p></p><p>我们诚挚地邀请您参与这两场闭门交流会，与行业内的专家和先驱们一同探讨、交流和学习。无论您是金融领域的从业者，还是对AIGC和研发效能感兴趣的技术人员，这里都将是一个难得的学习和交流平台。</p><p></p><h3>报名方式</h3><p></p><p>本次闭门交流会专为QCon的购票观众量身定制。如果您对这场高端交流充满期待，赶紧<a href=\"https://chat.openai.com/?model=gpt-4-plugins#\">点击这里</a>\"进行报名吧！不仅能体验三天的激情碰撞和知识分享，还有机会与行业大咖进行面对面的深度对话。</p><p></p><h3>结语</h3><p></p><p>在这个快速发展和不断变革的时代，让我们一同把握机会，探索未来，共同推动行业的进步和发展。期待在 <a href=\"https://qcon.infoq.cn/202309/beijing/schedule\">QCon 2023 全球软件开发大会</a>\" 相见。</p><p>&nbsp;</p>",
    "publish_time": "2023-08-28 10:40:19",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "玉山银行数字化（下）：普惠金融、智慧金融、场景金融三大FinTech策略如何落地",
    "url": "https://www.infoq.cn/article/8cRoOQy6v5IXocCR2FYl",
    "summary": "<p></p><h3>引言</h3><p></p><p>玉山，海拔超过3900米，是台湾的第一高山；玉山银行名取自玉山，成立于1992年，是台湾最大的银行之一。</p><p></p><p>据InfoQ了解，台湾地区的银行分布密度极高，但利息差又极低。总面积3.6万平方公里，却聚集着近70家银行；而相较于大陆近几年平均2.1%的利息差，台湾地区银行的利息差只有1.4%左右。当地银行间的竞争之激烈可想而知。</p><p></p><p>面对市场的激烈竞争，风险管理能力成为决胜的关键点。为此，玉山银行早在2006年成立了大数据分析团队CRV（Customer Risk &amp; Value），开始利用数据分析帮助银行实现更精准的风险管控。</p><p></p><p>时机恰逢Bank 3.0时代伊始，银行服务无处不在，同样，风险也变得无处不在。</p><p></p><p>“但过去，一般面向客户KYC（Know Your Customer），我们只会收集最基本的顾客资料，例如性别、教育程度、收入等等，这样的资料是静态的。 ”玉山银行数位长唐枬在接受InfoQ专访时表示，而实际上，用户的经济状况会随着时间不停改变，“为此，玉山银行意识到必须要更动态、适时地理解顾客的状况及需求”。 </p><p></p><p>大数据分析团队CRV的成立，目的就是解决这个问题，通过瞄准客户风险价值，探勘既有的顾客KYC资料，更精细化地对客户进行分类。</p><p></p><p>此外，在玉山银行看来，数据的收集也与营销应用息息相关，这是持续提升客户体验的基础。玉山银行希望以内部的客户KYC资料作为基础，渐渐累积商业智能以外的数据处理经验，再辅以深度学习、语音识别、语音合成与影像识别等技术，将数据分析成果应用于数字业务及经营客群，向内外部客户提供更多具有创新、效率且有品质的服务。</p><p></p><p>自那之后，玉山银行的数字化转型，又分别经历了数字化、数字优化、数字转型三个阶段。 如今，经过十数年的实践，玉山银行明确了3大<a href=\"https://fcon.infoq.cn/2023/shanghai?utm_source=infoq&amp;utm_medium=conference\">FinTech</a>\"策略——普惠金融、智慧金融、场景金融，并采取了一系列举措推进策略的落地执行。比如分别在2013年成立了数据科学团队；2015年成立了数字金融事业处，设立台湾首位银行数字长；2019年成立了智能金融处，专注发展人工智能的应用等等。</p><p></p><p></p><blockquote>本文是「玉山银行数字化实践」的下篇，将解读玉山银行这3大FinTech策略背后的思考逻辑、具体的落地路径，以及目前取得的主要成绩。</blockquote><p></p><p></p><p>&gt;&gt;&gt; 点击阅读文章上篇<a href=\"https://www.infoq.cn/article/4IHu4Qv0hiJJgTwzo1W8\">《玉山银行数字化（上）：构建台湾地区第一个银行自建的“微服务架构”核心系统》</a>\"</p><p></p><p>以下为采访实录（经 InfoQ 编辑整理）：</p><p></p><h5>InfoQ：2017年，玉山银行明确了3大FinTech策略，即普惠金融、智慧金融、场景金融。是否可以分享一下背后的原因？</h5><p></p><p></p><p>唐枬：先说说普惠金融。</p><p></p><p>玉山银行的目标是把普惠金融的精神结合到金融本业中去，实现经济包容性成长、促进社会公平与福利，为企业及个人提供友善的金融服务。过去部分客群很少跟银行往来，对金融服务很无感，原因是因为“银行的服务通常都有门槛”，如果没有一定资产，在银行能够得到的服务通常很有限。 </p><p></p><p>而银行服务有门槛的原因，是因为必须靠人力来提供服务，但FinTech打破了这个阻碍。 因为数字网络把银行服务的单位成本降低了，让银行服务普罗大众也能够创造经济效益，市场规模让银行提供服务的质量跟意愿都大幅提升，普惠金融也因此有了可能性，并成为值得银行侧重经营的空间。</p><p></p><p>第二，<a href=\"https://www.infoq.cn/article/9SwCpK6cIk4sReXDDjq5\">智慧金融</a>\"。</p><p></p><p>银行该怎么去服务顾客，与顾客当下存在于什么场景高度相关。通常来说，只要一离开当下场景，顾客对金融服务的需求就会消失，因此为了随时都能够与消费者产生互动，掌握消费者产生金融需求的重要时机，银行必须要发展智慧金融。通过大数据了解顾客的行为，预先掌握信息，才能做到一对一客制化、及时提供可行方案。</p><p></p><p>第三，<a href=\"https://www.infoq.cn/article/DwEzOuzTXhom8J7c0M4L\">场景金融</a>\"。</p><p></p><p>从过往的全球消费者趋势分析中，玉山银行发现，顾客对于行动载具的需求已渐从优先使用转为唯一使用，消费者行为趋向碎片化且高频处理日常与金融事务，因此银行服务也需要跳脱自有通路，嵌入在生活场景中，才能配合在零碎时间中满足消费者的金融需求。</p><p></p><p>“场景”本身其实也与金融需求高度连结，譬如看电影、吃美食需要支付服务，在机场去旅游需要换汇服务等，只要用到钱的地方，就有银行的使力之处。 对于银行而言，能够从生活中找出消费者使用金融服务的痛点，也就是所谓的关键场景，并且针对性地设计出新的差异化服务，就能够取得竞争优势，此外发展场景也具有形成服务生态圈、获得消费者数据的潜力，因此值得投入经营。</p><p></p><p>总结来说，玉山银行希望透过发展普惠金融，让顾客能够更便利、快速、简易地取得服务，深化顾客的数字体验; 通过结合智能，让数字产品能够做到千人千面，可以更个性化、更直觉地使用; 最后，跨出金融领域，让金融服务与生活场景有更好地配合，透过普惠、智慧、场景，从全方面为顾客创造更大价值。</p><p></p><h3>用数字技术降低金融服务的门槛</h3><p></p><p></p><h5>InfoQ：普惠意味着银行要面向各种不同的客户人群提供服务，在这个过程中，如何做好差异化金融服务，真正实现普惠的目标？</h5><p></p><p></p><p>唐枬：在改善弱势服务方面，我们在2020年成立了e. Fingo数字品牌，串联玉山的数字产品，希望透过全方位的数字金融服务，在做到减少资源不平等之外，也突破金融的藩篱，并运用科技的力量提供弱势顾客“可轻松取得（可及性）”、“能便利使用（使用性）”且“高服务品质”的普惠金融服务。</p><p></p><p>举个例子，我们大量运用了人工智能及机器学习以进行流程再造，建立端到端全数字且零人工接触的流程，打造原生数字产品-“e速贷”，最快58秒就可以取得资金，使得边际成本趋近于零，让过去因为成本考量而设立的门槛一一被打破，实现普惠金融。</p><p></p><p>此外，玉山银行致力于提供身心障碍者友善金融服务。</p><p></p><p>比如，针对视障顾客提供金融友善网银、友善利汇率服务网、友善WebATM等，这些服务均取得了A等级以上的无障碍标章，符合无障碍网页设计规范第一优先等级要求。同时，我们还在官网汇整玉山金融友善相关服务信息，打造友善数字服务的统一入口，方便顾客快速查找，并在2022年6月获得了无障碍标章最高等级（AAA）标准。</p><p></p><p>再比如，面向听障顾客的无障碍服务也在持续优化。玉山银行基于对话式智能客服的服务，支持语音输入及图文选单，让听障顾客也能使用自己熟悉的方式解决金融难题，针对听障人士于访客留言版的反应、需求，都有专人联系协助。 另外，2022年2月，玉山还和听障人协会合作推出了“远程视讯手语翻译服务”，可以提供顾客视讯手语翻译服务，提升沟通流畅度及服务体验。</p><p></p><p>与此同时，针对偏远地区、低收入者我们也提供数位化服务。比如，偏远地区居民无须亲临分行即可完成开户手续，线上可同时申办的产品及服务领先同业（如：台外币存款、信用卡、台股、证券复委托），超过90%顾客在数字帐户开户流程中选择同时加办外币帐户，也透过跨业合作，将玉山银行独家专利的数字服务置入于日常生活场景当中，串联顾客的食衣住行，使偏远地区顾客能更便捷的使用金融服务。</p><p></p><p>而针对外籍人士或新住民，玉山网络银行会提供双语（中文与英文）版本服务，外籍顾客可轻松跨越语言的藩篱，享受实时的数字金融体验。 2019年，玉山银行成为民营银行中首家设立双语示范的分行，且首创“智能客服双语体验”；此外，为防范层出不穷短信OTP盗用事件，玉山银行还在2021年推出了“英文语音OTP”服务，让外籍顾客在服务流程中，可以通过接听玉山系统拨打语音通讯取得关键密码；对于高重要性功能设定，包含首次申请玉山个人网络银行及忘记密码等时机，提供安全性更高的验证方式。</p><p></p><h5>InfoQ：目前金融普惠的效果和成效如何？</h5><p></p><p></p><p>唐枬：基于这一系列举措，首先，玉山银行近四年数字顾客成长逾1.5倍，各项数字业务（外汇、信贷、信用卡及基金）数字申办占比均已超逾8成，其中信贷与外汇业务更超过9成，上述成绩位居亚洲金融同业领先群。此外，一站式数字开户流程整合申办存款、信用卡、证券账户共5项产品，审核时间下降8成以上。再者，玉山银行电子支付会员人数也超过180万人，是全台首家电子支付会员突破百万的银行。</p><p></p><h3>人机协作关键要给信赖感建立留一点时间</h3><p></p><p></p><h5>InfoQ：智慧金融依赖于AI相关技术为客户提供服务，具体涉及哪些具体的平台和应用的落地？带来了什么效果和价值？</h5><p></p><p></p><p>唐枬：玉山银行持续发展“认知运算”及“资料科学”等AI技术，应用于行内流程AI、<a href=\"https://www.infoq.cn/article/tXdg1xI1YWGYG6iGg4rj\">风控AI</a>\"、行销AI、服务AI、赋能AI五大服务模组。</p><p></p><p>流程优化AI：即以AI简化内部工作或对外服务流程。 比如，玉山银行将OCR（optical character recognition， OCR）识别技术应用到玉山证券线上开户流程，当顾客上传身份证件照时，网站可透过AI模型检查图片分类与清晰度，再将辨识后的资讯自动带入填写字段，这能减少顾客20% 操作时间和因格式不符合的退件比例，提供流畅的服务体验、增加开户成功率。</p><p></p><p>风控管理AI：以AI来判断每天近百万笔刷卡交易，从中找出可能是盗刷、冒用的信用卡交易，与过往人工设定盗刷规则的做法相比，AI模型捕捉伪冒交易的模型拦截率较既有模型工具高3倍，减少20%以上的人工监测案件量，每月平均预防遭诈欺造成之损失金额逾千万元，更借此提升顾客用卡安全。</p><p></p><p>精准营销AI：通过AI推荐符合顾客需求的金融商品或服务。比如，智能推荐系统运用AI模型预测出顾客可能喜欢的服务及活动内容，让顾客登入玉山行动银行APP就能看到最适合自己的信息。 与过往传统营销方法相比，提升最高达50%的点击率，更带动了平均50%以上的每日转换率。</p><p></p><p>互动服务AI：运用AI与顾客进行实时互动。 比如，智能IVR（Interactive Voice Response）语音导航服务，让顾客在接入客服时不用经过按键式选单，而可以直接用“说话”的方式表达来电意图并解决问题，这能减少顾客75%的操作与等待时间。 此外，玉山银行还与龙头房地产企业合作，让顾客可以在其会员平台体验“房贷线上试算服务”，加速进入房贷作业程序。</p><p></p><p>行员赋能AI：指的是运用AI强化行员作业能力。 如运用光学文字识别（OCR）技术处理汇款单，省去每日上千张汇款单的人工登打作业。该项目在推出当年度就获得了《The Asset》“台湾最佳数字升级专案”奖项。</p><p></p><h5>InfoQ：在这个过程中，人与AI 如何做好分工和协同？流程上如何形成闭环？</h5><p></p><p></p><p>唐枬：据玉山银行观察，人往往会因为对AI的决策过程感到困惑，而选择不相信。因此想要透过 AI 达到提升顾客体验，模型的对顾客及对内部的可解释性相当重要。而如何让人相信AI的决策，做到人机协作，关键在于给予时间建立人机之间的信赖感。 </p><p></p><p>因此，玉山银行在导入<a href=\"https://www.infoq.cn/article/xPds1taN1Xcgx1jWBXH4\">AI系统</a>\"时则采取相对保守的态度，不立刻让AI取代人力，比如80%让AI来决定，20%透过人抽样确认，又或是采取由AI给出答案，让人来判断是否正确的人机协作方式，慢慢让AI的比例愈来愈多。 </p><p></p><p>在这个过程中的首要工作，是协助业务单位知道 AI 如何做决策，以及决策过程中会有哪些差异，最后也需要有客观的评估以及平行验证，让人与 AI 同时进行。 在并行运作的期间，负责AI的部门（智能金融处）与业务单位同仁会充分讨论，让业务单位理解资料样貌，对决策结果做出合理解释，并且在上线后定期监控模型成效。 经过三个月或一定时间的评估后，会发现 AI 做得跟人一样好，甚至比人还要好。</p><p></p><h3>打造如水电般的场景金融服务，实现Banking as a Service</h3><p></p><p></p><h5>InfoQ：玉山银行希望通过场景金融的推进实现什么目标？目前是否达成？</h5><p></p><p></p><p>唐枬：我们希望通过外部合作场景，把玉山银行的多元金融服务延伸至前端顾客发生需求的场景中，让金融像水电一般融入顾客的生活，实现Banking as a Service之策略目标并创造本行获客及获利效益。目前已经有许多整合场景生态圈的实例：</p><p></p><p>比如，基于逾百万发行量的联名卡，玉山银行与大型量贩业者开展钱包App（2019上线）、无人商店（2020上线）等多项合作。由钱包APP提供一站式办卡至即时用卡（联名卡）的体验，无人商店则负责串联持卡人的消费资料，把数据分析及AI力应用于销售，提升营运效率。</p><p></p><p>比如，玉山银行还与电子支付品牌合作深入零售场域（2022上线）。包括与全台第二大连锁便利超商合作成立电子支付品牌“全盈支付”，这也是首家由实体零售、金融银行、网络电商产业背景共同合作的支付平台，通过嵌入合作超商所拥有的通路，连接千万以上会员，打造E.SUN Anywhere体验。“全盈支付”于2022年4月顺利上线，上线以来，会员绑定金融支付工具以玉山为首选，逐步展现了从支付服务延伸至场景金融的链接综效。</p><p></p><p>再比如，为响应主管机关资料共享政策，玉山银行携手纯互联网券商推出了银行及证券账户同开服务。 顾客只要填写一次资料，就可以同时开立台外币、信用卡、加入数字会员等多项产品，这大大增加了顾客与玉山多产品的往来，提升了客我价值，并且让顾客可以一站式完成开户与交割账户连结，解决重复填写开户资料的痛点。</p><p></p><h5>InfoQ：场景金融生态中的参与者众多，如何从技术到业务实现各个层面的链接？</h5><p></p><p></p><p>唐枬：玉山银行站在银行即服务（Banking-as-a-Service，BaaS）的角度，发展各式API 微服务，以便外部场景业者串接玉山金融服务。</p><p></p><p>在外部环境与市场需求快速变动的情况下，金融业信息架构必须具备能随时调整的弹性和应变突发状况的数字韧性，才能同时满足业务稳定发展与开发创新需求，为此，玉山银行规划了以混合多云架构为基础，结合微服务API的模式，从而将金融服务带到应用场景中。</p><p></p><p>在多云架构下，玉山银行以内稳外敏为核心理念，建置“API微金融服务平台”，将内部系统及流程整合在单一平台上，以便外部合作伙伴可以快速串接其金融服务; 以与互联网券商合作为例，透过API微金融服务平台将原有五套系统、十个API化繁为简，提供简单且具高安全性的串接接口，大幅缩减了串接复杂度及开发时程，以快速拓展嵌入式场景金融及建立创新商业模式，打造玉山金融生态圈。</p><p></p><p>同时，玉山银行也主动出击，与外部场景业者合作，尤其是具备刚性需求、高频次交易及高会员基础的场景，如量贩通路、大型电商平台等等。例如通过与全盈支付合作，将金融服务嵌入合作便利商店所拥有的通路，建构完善的导客引擎。</p><p></p><h4>嘉宾介绍</h4><p></p><p>唐枬（Danny Tang），玉山银行数位长，毕业于台湾大学工商管理系，并拥有加州大学洛杉矶分校的MBA学位。 在加入玉山之前，任职美国IBM公司近20年，担任全球银行业的解决方案总监，拥有丰富的国际金融创新经验，提供逾50国银行顾问服务。 Danny在国际的金融相关期刊发表过许多文章，也曾获选为全球银行业最值得追踪的意见领袖之一。2021年加入玉山后即针对玉山数字金融发展，提出以顾客为核心，聚焦在5个A，包含Access导客、Acquire获客、Activate活客、Adhere留客、Advocate悦客，以达成Simple、Smooth、Sweet的3S顾客服务体验为目标的顾客经营策略。</p><p></p><h4>互动福利</h4><p></p><p>AIGC 热度一路狂飙，金融行业作为前沿技术应用的引领者，将迎来哪些新的机会？又如何冲破阻力借势而上？在「InfoQ 数字化经纬」公众号文章评论区留言发表自己的观点和见解，将有机会获得精美礼品👇</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/12/6e/12cdc6ee765c5353e41da3555045e46e.png\" /></p><p></p>",
    "publish_time": "2023-08-28 13:59:45",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "2023年最受开发者欢迎的五大前端与后端技术",
    "url": "https://www.infoq.cn/article/PvAACrNjbQ0fTgje29Ef",
    "summary": "<p>前端与后端开发者们必须随时了解技术和框架变化趋势，知晓哪种技术和框架更有利于高效、快速开发工作。但面对这样一块瞬息万变的技术市场，从业者往往很难随时感知最新动向。</p><p>&nbsp;</p><p>但大家不必担心，本文替各位收集了五大前端与后端开发框架，并将详尽阐述这些服务各自适合哪些项目需求。</p><p>&nbsp;</p><p>闲言少叙，咱们马上进入正题。</p><p>&nbsp;</p><p></p><h1>2023年最受开发者欢迎的五大前端与后端技术</h1><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/98/984b1c50cdbe43bf9e919405fcd49331.png\" /></p><p></p><p>&nbsp;</p><p>只要将以下五种最重要的前端和后端技术纳入开发流程，您的应用开发能力将得到显著增强。</p><p></p><h2>2023年最受开发者欢迎的五大前端技术</h2><p></p><p>&nbsp;</p><p>前端开发的目标，是为最终用户打造引人入胜的交互式使用体验。前端开发者负责网站或应用程序的外观和视效，同时兼顾用户界面中的各项功能。2023年，开发者中最受欢迎的前端技术是React、Angular和Vue.js。这些技术被广泛应用于电子商务、社交媒体、金融等各个行业。</p><p>&nbsp;</p><p>下面，我们快速梳理一下这些技术的优势和短板。</p><p>&nbsp;</p><p></p><h3>React（最常用的框架选项）</h3><p></p><p></p><p>React是用于创建UI的JavaScript库，允许开发者创建出可重用的组件，大大提高后续开发的效率。它还具备很强的适应性，因此成为大型复杂项目中的理想选择。React拥有庞大且活跃的技术社区，因此开发者可以随时从中找寻丰富的学习和应用资源。</p><p>&nbsp;</p><p></p><h4>使用React的知名企业</h4><p></p><p></p><p>彭博社FacebookUber EatsDiscordInstagramSkypePinterestSalesforce</p><p>&nbsp;</p><p></p><h4>React的优势</h4><p></p><p></p><p>很容易找到出色的开发者适合创建跨平台应用庞大的技术社区良好的向下兼容性可复用的组件虚拟DOM</p><p>&nbsp;</p><p></p><h4>React的短板</h4><p></p><p></p><p>依赖于第三方库缺少通行约定</p><p>&nbsp;</p><p></p><h3>Angular</h3><p></p><p></p><p>众所周知，Angular是一款用于前端Web开发的JS框架。这是一套完整的前端开发解决方案，提供用于制作动态及交互式用户界面的各类工具与功能。Angular擅长创建复杂的大型项目，也是企业级应用程序开发中的流行选择。</p><p>&nbsp;</p><p></p><h3>使用Angular的知名企业</h3><p></p><p></p><p>微软Office德意志银行MixerSantanderGmail福布斯UpworkPayPal</p><p>&nbsp;</p><p></p><h4>Angular的优势</h4><p></p><p></p><p>具备MVC架构实现增强的设计架构模块自定义指令服务与依赖项注入</p><p>&nbsp;</p><p></p><h3>Angular的短板</h3><p></p><p></p><p>复杂且冗长SEO搜索引擎优化选项有限学习过程较为困难CLI说明文档缺乏详细信息</p><p>&nbsp;</p><p></p><h3>Vue.js</h3><p></p><p></p><p>对于Vue.js大家应该也不陌生，这是一款用于创建用户界面的JS框架。与React类似，它同样允许创建可重用组件，但学习曲线更加温和、易于上手。Vue.js具有很强的适应性，且能轻松同其他技术相集成，使其成为前端开发服务中的热门选项。</p><p>&nbsp;</p><p></p><h4>使用Vue.Js的知名企业</h4><p></p><p></p><p>FacebookNetflix小米AdobeThe Motley FoolTrivagoGrammarlyGitlab</p><p>&nbsp;</p><p></p><h3>Vue.Js的优势</h3><p></p><p></p><p>简单易用虚拟DOM直观的API质量在线的说明文档</p><p>&nbsp;</p><p></p><h3>Vue.Js的短板</h3><p></p><p></p><p>语言限制较多缺乏精简方法用户群体较小</p><p>&nbsp;</p><p></p><h3>Next.Js</h3><p></p><p></p><p>Next.js是一套用于创建服务端渲染类React应用的JS框架。它以React和Webpack为基础构建而成，允许开发者创建出SEO友好且性能出色的页面。Next.js还提供自动代码拆分功能，并可与其他技术轻松集成，这一切使其在前端开发服务中广受欢迎。</p><p>&nbsp;</p><p></p><h4>使用Next.js的知名企业</h4><p></p><p></p><p>沃尔玛苹果耐克NetflixTikTokUberLyft星巴克</p><p>&nbsp;</p><p></p><h4>Next.Js的优势</h4><p></p><p></p><p>卓越的性能、出色的加载时间良好的搜索引擎优化效果最佳用户体验为开发人员提供良好支持</p><p>&nbsp;</p><p></p><h4>Next.Js的短板</h4><p></p><p></p><p>对开发者而言较难掌握</p><p>&nbsp;</p><p></p><h3>Gatsby</h3><p></p><p></p><p>Gatsby是一款用于构建静态和渐进式Web应用程序的JS框架。它在构建过程中使用React和GraphSQL生成静态页面，并可实现良好的性能与SEO效果。Gatsby还提供一组丰富的插件与AIP，可用于处理各类前端任务，例如图像优化、离线支持和分析等。它特别适合创建网站和博客，在希望实现快速、流畅用户体验的前端开发者当中很受欢迎。</p><p>&nbsp;</p><p></p><h4>使用Gatsby的知名企业</h4><p></p><p></p><p>SnapchatTinderStackRevolutPayhereOxylabsMAK ITAffirm</p><p>&nbsp;</p><p></p><h4>Gatsby的优势</h4><p></p><p></p><p>页面加载速度快简单易学SEO优化效果好安全面向未来拥有更大的潜在客户群体良好的用户体验结构化数据社区较为活跃易于实现CI/CD</p><p>&nbsp;</p><p></p><h4>Gatsby的短板</h4><p></p><p></p><p>需要大量更新内容无即插即用功能不提供WordPress风格的插件</p><p>&nbsp;</p><p></p><h2>2023年最受开发者欢迎的五大后端技术</h2><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4b/4b962057fa241f8bdb98277ff8d48dbc.png\" /></p><p></p><p>后端开发着重强调为网站或应用程序创建服务器端逻辑和数据管理系统。身为后端开发人员，大家需要负责制作出能与前端交互的API和数据库。2023年，开发者最为欢迎的后端技术分别为Node.js、Python和Ruby on Rails。这些技术被广泛应用于电子商务、社交媒体和金融等各个行业。</p><p>&nbsp;</p><p>下面就让我们一起了解这些技术的优势和短板。但开始前要提醒大家，如果您正在为后端开发工作头疼，可以考虑直接选择一家后端开发服务商。他们将替您无缝完成项目，绕过这些难题。</p><p>&nbsp;</p><p></p><h3>Node.Js</h3><p></p><p></p><p>Node.js是一套基于JS的运行时环境，允许开发人员在服务器端运行JS代码。它已经成为精通JS的后端开发者们的理想选项。Node.js拥有良好的可扩展性，在聊天和游戏等实时应用当中应用广泛。如果您手上正好有个小型项目，那不妨考虑聘请一名Node.js开发人员。</p><p>&nbsp;</p><p></p><h4>使用Node.js的知名企业</h4><p></p><p></p><p>LinkedInNetflixUberTrelloPayPalNASAeBayMedium</p><p>&nbsp;</p><p></p><h4>Node.Js的优势</h4><p></p><p></p><p>健壮的技术栈可快速处理Web任务可针对微服务进行扩展丰富的生态系统强大的企业支持可支持JSON庞大的技术社区</p><p>&nbsp;</p><p></p><h4>Node.Js的短板</h4><p></p><p></p><p>在处理繁重任务时可能存在瓶颈令人抓狂的回调问题工具不够成熟依赖项管理不佳</p><p>&nbsp;</p><p></p><h3>Python</h3><p></p><p></p><p>Python是一种通用编程语言，适用于多种用途，Web开发当然也在其中。Python拥有庞大且活跃的社区，因此为Python开发者备下了大量库与框架。Python也是机器学习和数据分析领域的流行选项。</p><p>&nbsp;</p><p></p><h4>使用Python的知名企业</h4><p></p><p></p><p>英特尔IBMNASA皮克斯NetflixFacebook摩根大通Spotify</p><p>&nbsp;</p><p></p><h4>Python的优势</h4><p></p><p></p><p>灵活且可扩展拥有庞大的技术社区丰富的库选项高度可扩展可嵌入</p><p>&nbsp;</p><p></p><h4>Python的短板</h4><p></p><p></p><p>存在一些设计问题存在一些安全问题内存占用量大多线程机制较复杂速度不及编译语言</p><p>&nbsp;</p><p></p><h3>Ruby on Rails</h3><p></p><p></p><p>这是一款由Ruby编写而成的Web应用程序框架。它遵循约定的配置理念，能够改善后端开发的速度和效率。Ruby on Rails特别适合快速创建Web应用，因此在小型初创公司和大型企业中均得到广泛应用和欢迎。</p><p>&nbsp;</p><p></p><h4>使用Ruby on Rails的知名企业</h4><p></p><p></p><p>CrunchBaseTwitterEtsyShopifyGitHubAirbnbAsk.fmFab</p><p>&nbsp;</p><p></p><h4>Ruby on Rails的优势</h4><p></p><p></p><p>时间效率高拥有庞大且活跃的社区提供大量实用的工具和库选项严格遵守标准</p><p>&nbsp;</p><p></p><h4>Ruby on Rails的短板</h4><p></p><p></p><p>不够灵活仍须持续发展启动时间方面的性能较差一旦出错，可能引发严重后果</p><p>&nbsp;</p><p></p><h3>Express.js</h3><p></p><p></p><p>Express.js是Node.js的一款流行框架。它简单灵活，使开发人员能够轻松创建并维护自己的Web应用程序。Express.js在构建RESTful API方面特别好用，而且能够与其他Node.js库和框架结合使用。</p><p>&nbsp;</p><p></p><h4>使用Express.Js的知名企业</h4><p></p><p></p><p>Twitter埃森哲StackKevinClient PlatformIntuitTrustpilotPratilipi</p><p>&nbsp;</p><p></p><h4>Express.js的优势</h4><p></p><p></p><p>应用开发速度快I/O请求处理能力强开源且拥有庞大的技术社区可轻松集成第三方服务简单易学</p><p>&nbsp;</p><p></p><h4>Express.js的短板</h4><p></p><p></p><p>事件驱动的特性（回调）代码的组织形式不佳某些错误消息缺乏意义安全性稍差</p><p>&nbsp;</p><p></p><h3>Django</h3><p></p><p></p><p>Django是一款高级Python Web开发框架，鼓励用户快速开发出完美且务实的设计成果。它以Python为基础，往往被用于大型组织当中的Web开发项目。Django还提供内置管理界面，允许开发人员快速创建出可管理应用程序数据的后端。</p><p>&nbsp;</p><p></p><h4>使用Django的知名企业</h4><p></p><p></p><p>Instagram国家地理MozillaSpotifyPinterestDisqusBitbucketEventbrite</p><p>&nbsp;</p><p></p><h4>Django的优势</h4><p></p><p></p><p>由Python实现更好的内容管理和CDN功能处理速度快发展速度快可扩展安全</p><p>&nbsp;</p><p></p><h4>Django的短板</h4><p></p><p></p><p>Django采取单体式架构不太适合小型项目可能导致网站速度变慢缺乏通行约定</p><p>&nbsp;</p><p></p><h2>写在最后</h2><p></p><p></p><p>开发行业总在不断变化，因此前端和后端开发者们必须随时把握动态并适应变化，持续交付高质量的产品和服务。总而言之，谁能及时让最新的前/后端工具和成果为自己服务，谁就能带来更出色的用户体验。</p><p>&nbsp;</p><p></p><h2>读者福利，评论送书</h2><p></p><p></p><p>在本文下方评论，获点赞最多的前 5 名童鞋，即有机会获赠《安卓传奇：Android缔造团队回忆录》一书！欢迎留言呀，活动截止日期 2023年8月26日晚8点。</p><p>&nbsp;</p><p></p><h5>原文链接：</h5><p></p><p><a href=\"https://dev.to/quokkalabs/top-5-frontend-and-backend-technologies-used-by-developers-in-2023-4e2p\">https://dev.to/quokkalabs/top-5-frontend-and-backend-technologies-used-by-developers-in-2023-4e2p</a>\"</p><p>&nbsp;</p><p></p><h5>相关阅读：</h5><p></p><p><a href=\"https://xie.infoq.cn/article/8f7976ab813eb2897f6feded9\">前端精准测试实践</a>\"</p><p><a href=\"https://xie.infoq.cn/article/11fae95025c6909f50ba5fdfd\">Java&nbsp;后端有哪些不用学的技术？劝退。</a>\"</p><p><a href=\"https://www.infoq.cn/article/mNfTT4UBk5PQl3JpNt6M\">前后端分离技术体系</a>\"</p><p><a href=\"https://www.infoq.cn/article/2FhPNEatO5kkR7jeIsU5\">大前端测试的思考和在语雀的实践分享</a>\"</p>",
    "publish_time": "2023-08-28 14:08:03",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]