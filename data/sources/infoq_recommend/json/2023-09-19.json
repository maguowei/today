[
  {
    "title": "亚马逊云科技推出基于生成式AI的临床文档工具HealthScribe预览版",
    "url": "https://www.infoq.cn/article/8SHsU6p460shd9drTEWg",
    "summary": "<p>最近，亚马逊云科技新推出了一项符合<a href=\"https://en.wikipedia.org/wiki/Health_Insurance_Portability_and_Accountability_Act\">HIPAA</a>\"标准的服务，名为<a href=\"https://aws.amazon.com/healthscribe/\">AWS HealthScribe</a>\"。该服务尚处于预览状态，它可以利用语音识别和生成式人工智能（基于<a href=\"https://aws.amazon.com/bedrock/\">Amazon Bedrock</a>\"）来生成临床文档。</p><p>&nbsp;</p><p>按照该公司的说法，AWS HealthScribe是<a href=\"https://aws.amazon.com/machine-learning/ml-use-cases/conversational-ai/\">会话式</a>\"和<a href=\"https://aws.amazon.com/generative-ai/\">生成式人工智能（AI）</a>\"的结合体，可以减轻编写临床文档的负担并改善咨询体验。借助这项服务，用户可以利用一整套的人工智能功能来加快临床应用中临床文档的编制。</p><p>&nbsp;</p><p>AWS HealthScribe为医疗卫生软件提供商提供了一个API，可以自动生成完整的记录及提取关键的详细信息（如医疗术语和药物），并根据医患之间的讨论创建可输入电子健康记录（EHR）系统的摘要。</p><p>&nbsp;</p><p>例如，在HealthScribe中创建的笔记可以通过人工智能进行补充，包括诸如就诊原因、当前病史、评估和随访等细节。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a9/a9c0b5e197682706be65521de813caf8.png\" /></p><p>示例：医疗卫生软件开发人员可以使用AWS HealthScribe为用户提供的应用程序体验（图片来源：<a href=\"https://aws.amazon.com/blogs/industries/industries-introducing-aws-healthscribe/\">AWS for Industries博文</a>\"）</p><p>&nbsp;</p><p><a href=\"https://aws.amazon.com/blogs/industries/industries-introducing-aws-healthscribe/\">AWS for Industries博文</a>\"的作者是这样描述AWS HealthScribe的好处的：</p><p></p><blockquote>通过功能整合，AWS HealthScribe减少了训练、优化、集成单个的人工智能服务和构建自定义模型的需求，加快了实施速度。客户可以专注于为最终用户提供价值，而不必费力优化单个的AI组件。</blockquote><p></p><p>&nbsp;</p><p>另一方面，虽然该服务符合HIPAA，但公司必须签署一份称为商业伙伴附录的合同。对此，<a href=\"https://aws.amazon.com/compliance/hipaa-compliance/\">AWS的文档</a>\"做了详细说明，只有这样才能完全符合HIPAA。</p><p>&nbsp;</p><p>除了AWS，微软和谷歌也有像AWS HealthScribe这样的医疗卫生服务。例如，云服务<a href=\"https://www.microsoft.com/en-us/research/project/health-bot/\">Microsoft Healthcare Bot</a>\"就使得医疗卫生组织能够构建和部署可用于各种目的的会话代理，例如分诊和症状检查。还有<a href=\"https://cloud.google.com/healthcare-api\">Google Cloud Healthcare API</a>\"，该服务提供了一套基于Google Cloud Platform构建的专门用于医疗卫生领域的产品和服务。</p><p>&nbsp;</p><p><a href=\"https://twitter.com/Berci\">Bertalan Meskó</a>\"是医学未来学家协会（Medical Futurist Institute）的主任、哲学和医学博士，他在<a href=\"https://www.linkedin.com/posts/bertalanmesko_amazon-launches-generative-ai-based-clinical-activity-7090247186696802304-TeK2\">LinkedIn的一篇帖子</a>\"中评论道：</p><p></p><blockquote>看到科技巨头进军医疗卫生领域非常令人兴奋，我们都应该为此感到高兴，因为他们比医疗卫生/制药公司更擅长创造人们想要的技术。</blockquote><p></p><p>&nbsp;</p><p>此外，Batch首席执行官<a href=\"https://twitter.com/Virtualgoodz/status/1684892459682160640\">Simon Dawlat在推特上写到</a>\"：</p><p></p><blockquote>随着亚马逊加入微软/谷歌的竞争行列推出HealthScribe，基于人工智能的临床文档API淘金热正如火如荼地进行着——然而，与那些高度专注的公司（如@NablaTech）所提供的产品相比，所有FAANG的产品都显得有些尴尬。&nbsp;比赛开始了！</blockquote><p></p><p>&nbsp;</p><p><a href=\"https://www.nuance.com/healthcare.html\">Nuance</a>\"和<a href=\"https://www.cerner.com/\">Cerner Corporation</a>\"（Oracle）等公司也提供了其他一些类似的解决方案，前者为医疗卫生和客户互动提供了对话式人工智能，后者则是医疗卫生信息技术解决方案、服务、设备和硬件供应商。</p><p>&nbsp;</p><p>最后，AWS HealthScribe目前仅在美国东部（弗吉尼亚州北部）地区可用，客户可以<a href=\"https://pages.awscloud.com/GLOBAL-other-PT-AWS-HealthScribe-Preview-2023-reg.html\">填写表单完成注册</a>\"后访问该服务。了解定价细节可以查看<a href=\"https://aws.amazon.com/healthscribe/pricing/\">定价页面</a>\"，了解其他细节可以查阅<a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/health-scribe.html\">文档</a>\"。</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/08/aws-healthscribe-ai-preview/\">https://www.infoq.com/news/2023/08/aws-healthscribe-ai-preview/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/2SjM2FZqw7TB6SdxDaW7\">亚马逊云科技re:Inforce 2023中国站：企业如何提高数据、模型和应用安全？</a>\"</p><p><a href=\"https://www.infoq.cn/article/bHbaxQSIexCa63uzkJGl\">降本增效：Grab如何在亚马逊云科技上将Kafka消费者流量成本降到零</a>\"</p>",
    "publish_time": "2023-09-19 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "探寻互联网发展：如何利用“大模型+大数据”加速产业革新？ | 华为云联创营 MVP 专访",
    "url": "https://www.infoq.cn/article/8NZ6uCqWXg8W8OZqisGa",
    "summary": "<p>随着互联网行业的发展进入新阶段，互联网企业正在积极寻求外部增长机会，以推动业务的持续创新。在消费互联网时代，大多平台都是通过流量变现，然而当前互联网红利逐渐减少，“在保证流量基础上，降本增效的同时还要提高服务质量”成为了互联网平台角逐下半场的关键点，各大互联网平台向产业互联网转型已成为必然趋势。</p><p></p><p>更注重企业与产业的高质量发展的“产业互联网”，力求通过一切手段优化资源配置、降低交易成本、提高生产和服务效率。其中，大模型技术是推动消费互联网向产业互联网转型的关键技术之一。基于大模型，企业可以更加精准地预测用户需求，提供个性化的服务，并更好地优化生产和服务流程，提高生产效率和质量，成为了产业存量变革的来源，而企业也据此寻找到了第二增长曲线。可以说，大模型技术的发展将加速互联网产业升级。</p><p></p><p>大模型发展的前置条件是大数据技术的发展，超大参数规模的 AI 模型需要海量数据提供训练资源。行内人普遍认为，“大模型 + 大数据”的组合就像孪生双子，是推动世界向全面数字化目标迈进不可或缺的重要力量。在这样的背景下，很多企业技术先行者都正在积极努力，竭尽全力地将大模型 + 大数据的澎湃能量运用到生产实践中，实现真正的“降本增效、提升客户价值、改善用户体验”。在这些技术先行者中有这样一群人，他们有一个共同的身份——<a href=\"https://www.infoq.cn/article/ws2KFcwij5lcTV1v9WaU\">华为云联创营 MVP</a>\" （以下简称“ MVP”）。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/54/54165e02e7301053d5107e3f497d3021.jpeg\" /></p><p></p><p>“MVP 计划” 于 2023 年 3 月正式发布，经过重重选拔，数十位来自行业头部企业的 MVP 成员脱颖而出。MVP 的定位是“产业数字化的实践者”、“创新技术的布道师”、“不断探索边界的实干家”，旨在从产业数字化的实际问题出发，携手共探促进更多行业解决方案的孵化，丰富行业技术生态，让数字化价值更普惠共享、更公平可及。近期，InfoQ 与其中 2 位 MVP 代表成员围绕“AI 大模型 + 大数据”主题进行了交流， 一起探索了 MVP 们背后的故事。</p><p></p><p></p><h2>一、37 手游技术总监陶学诚：“大模型技术创新需要行业共同探索”</h2><p></p><p></p><p>37 手游是三七互娱集团旗下专注于移动游戏运营的标杆品牌，累计运营超过 2000 款游戏。作为 37 手游技术总监，陶学诚重构了公司原有的数据系统，在公司事业群层面实施了数字化迭代，构建了完整的数据平台，同时积极打通内外部数据通道。目前，他正在带领 37 手游技术团队，以公司事业群数字化转型工作为基础，全面推动产业数字化进程。</p><p></p><p>37 手游是华为云联创营活动的“常客”，陶学诚通过第七期<a href=\"https://www.infoq.cn/article/HG6u2XkBQsRbHAcx8c07\">华为云</a>\"联创营 CTO 领航班了解到了“MVP 计划”。谈及从“了解”到成为该计划的一员，他第一时间想到的是——与华为云联创营共同探索、共同成长。他负责的团队之前主要面向公司内部，华为云联创营为其提供了与外界加强交流学习的机会。他希望通过这样的形式提升自己和团队在行业内的技术影响力，同时也能收获更多行业优秀实践反哺企业，帮助团队进一步提升。所以当该计划“号召各领域的‘价值专家’加入到计划中，与华为云联创营一起进行第三方公益技术沙龙布道、技术交流，积极总结个人实践经验，完成产业技术布道，为更多人、企业乃至产业发展赋能”时，他毫无犹豫地选择加入了该计划。</p><p></p><p>如今，AI 和大模型技术在手游行业的应用已经风生水起，陶学诚也在积极为行业大模型的构建做出自己的努力。目前他观察到，手游领域主要有三大 AI 应用场景——游戏资产的 AI 绘图生成、在游戏内容中构建可以与玩家进行自然对话的 NPC 或虚拟玩家、代码的 AI 辅助编程。此外，大模型在文案生成、营销策划、智能客服等层面也开始有实践应用，同时“打击黑产”工作中也可以利用 AI 技术对其进行行为识别。</p><p></p><p>37 手游作为游戏发行商，主要希望通过大模型技术来提升运营效率，并丰富游戏内容生态。在具体实践中，37 手游团队主要使用大模型来生成游戏发行运营过程中所需的大量宣传素材、优化数据分析管道。与此同时，团队还发现，大模型和其他 AI 技术在内容生态改善方面潜力十分突出，比如运营方可以使用 AI 技术制作虚拟玩家，帮助真实玩家加快拼局速度，改善持续游玩体验；又比如，基于 AI 的内容过滤系统则可以有效管制游戏内的对话交流平台，实时屏蔽恶意、负面的聊天内容。</p><p></p><p>大模型的应用与大数据是相辅相成的，37 手游之前就在陶学诚的主导下构建了自己的数据平台，获得了更快的数据分析能力，为将来的大模型应用打下了良好基础。随着数据规模不断扩大，模型训练会变得更加容易，效果也会更加令人满意。</p><p></p><p>目前陶学诚并没有计划带领团队自研底层大模型，而是选择了与行业优秀的大模型合作构建上层应用级私有模型。他认为，AI 与公有云的能力是高度绑定的，大部分公司的运维能力和基础设施更新速度都很难跟得上公有云迭代速度。正因如此，对于 37 手游这样的企业来说，基于行业优秀大模型展开研发可以有效降低门槛，使企业可以将主要精力集中在模型的行业应用，以解决企业运营中存在的实际问题。</p><p></p><p>他在采访中也提到，“目前大模型的应用还存在很多实际问题。例如，基于 AI 辅助生成的代码可能存在一些难以预期的 Bug，因此不太适用于同业务强挂钩、问题描述不清的复杂场景。整个行业对大模型的应用落地都处于探索阶段，需要参与其中的企业多尝试、多分享，才能推动行业在这一方面持续发展，解决现存的诸多挑战。”</p><p></p><p>从业者的观念转变是陶学诚眼中大模型实践应用的另一大障碍。在大量以编码为工作的技术团队中，编码能力被认为是一项很有壁垒和创意的工作，而当 AI 编码工具可以很快速的写出很优质代码的时候，传统的程序开发者往往对大模型的应用存在抵触心理。如何转变他们的思路，让他们能够在工作中自然而然地运用 AI 技术提升效率，是行业共同面对的难题。他表示，希望在未来能够基于自己手中在做的技术实践，去推动解决大模型在行业应用中出现的种种难题。他坚信：“随着上述问题在未来逐渐得到解决，AI 大模型技术在游戏产业中的潜力是不可估量的。”</p><p></p><p></p><h2>二、汽车之家 CTO 项碧波：“构建大模型技术与行业应用间的桥梁”</h2><p></p><p></p><p>项碧波在搜索引擎、商业广告、推荐系统、自然语言处理及数据挖掘领域具备丰富的经验。加入汽车之家后致力于打造企业的数据和技术能力，构建用户数据生态和经营数据生态，助力主机厂与经销商业务流程数字化，赋能汽车产业数字化转型。</p><p></p><p>作为汽车之家 CTO，项碧波需要为“一年一度”的 818 晚会做好技术支持工作，华为云在其中提供的一系列“高可用”能力，给他留下了深刻的印象。后来随着合作的深入，他多次参加华为云联创营的活动，华为云联创营过去为不同行业和领域的专家创造了很多分享机会，这也为他带来了不少新启发，让汽车之家获取到了很多可用资源。当他在今年 3 月了解到了“MVP 计划”，一下就被该计划驱动产业数字化发展的理念所击中，而他过去也一直希望通过自己的努力来推动技术发展，两者不谋而合，第一时间便加入到了计划中来。</p><p></p><p>一直以来，汽车之家的企业定位都是“沟通消费者与汽车厂商的门户与桥梁”。因此，项碧波带领的技术团队非常重视 AI 技术创新，并在日常经营中有着大量应用。例如，汽车之家的 AI 智能推荐可以为几千万用户提供 200 多个智能推荐场景，在数十亿内容中快速、精准地提供汽车资讯。团队还基于大语言模型和多模态内容理解等技术建立了多层级内容标签体系，提升推荐系统的精准度与质量。此外，汽车之家的智能客服、智能搜索服务应用了自然语言处理、机器学习等技术加快响应速度、解决用户问题，并运用大数据分析和 AI 预测能力的智能营销系统为广告投放创造了更高的转化渠道。</p><p></p><p>2022 年，汽车之家品牌代言人谷爱凌的“数字人“形象与汽车之家 AI 体验官宫玖羽相继上线。谈到这两位数字人，项碧波最自豪的是团队在行业现有技术的基础上做了很多突破。首先，数字人的背后都有着汽车之家大语言模型提供的智能化支撑，能够帮助用户解答很多专业汽车领域的问题；其次，汽车之家在语音识别与合成方面的积累也运用到了数字人上，甚至能够准确识别四川话、粤语等方言；同时，为解决用户设备性能参差不齐的问题，数字人还运用了云端 3D 渲染技术来为用户带来高清、流畅的一致体验。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/9c/9ca6f9466c72578686b8f2240b7ea4f1.jpeg\" /></p><p></p><p>全新打造的能源空间站是汽车之家 2022 年实现的另一大创新成果。空间站中的全息体验仓利用全息投影技术，可以让用户一次体验多款经过数字建模的车型，选购效率大大提升。同时大数据与 AI 智能语音的赋能确保了全息投影的车体细节准确，也为用户带来了更真实的互动体验。</p><p></p><p>在以上提到的多个实践过程中，汽车之家技术团队充分意识到了 AI 技术对业务增效与企业长期发展的重要意义，项碧波也非常重视“大模型”这样的行业创新，带领团队在这一领域投入了大量资源。汽车之家目前正在内测一款名为“仓颉”的自研行业大模型，该模型是汽车之家技术团队将大模型技术运用在汽车行业垂直领域的成果，主要解决用户选车决策时面临的问题。对此，项碧波介绍到：“未来用户无需通过传统的搜索、浏览、筛选过程来选择车型，只需直接告诉了仓颉自己的用车场景、家庭人口、日常通勤距离、成本预算等信息，模型就可以直接给出非常适合的选项。”</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/cd/cd432ad9a26b74830e65521d57cdc578.png\" /></p><p></p><p>据悉，仓颉大模型在海量通用数据学习的基础上，利用汽车之家 18 年来积累的亿级别之家自有的高质量汽车领域专业数据，通过数据的筛选和有效利用增强了汽车领域模型的理解能力，在汽车领域问答打分评测仓颉大语言模型优于 ChatGPT （提升 13%）。值得一提的是，该模型在汽车垂直领域训练中，平衡通用能力和汽车领域能力，减少在通用的能力遗忘，并对训练的效率进行了多方法提升，使得该模型在通用能力方面，与开源的同级别模型相比，性能显著提升。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b6/b63dad4174cb709bf57e6086e241cbf6.png\" /></p><p></p><p>此外，汽车之家还开发了基于全链路智能营销的 AIGC 模型，覆盖了文案策划、创意视频内容定制等营销环节，可以帮助车企降本增效，带来更高的销售转化率。接下来，汽车之家还将进一步拓展大模型 + 大数据的应用场景，围绕具体的业务需求推动应用落地。项碧波认为，“汽车之家打造的大模型与相关产品相当于行业的一种基础设施，可以为 AI 产业和汽车行业应用之间建立起一座桥梁，降低 B 端和 C 端客户应用先进技术的门槛。”</p><p></p><p></p><h2>三、“互联网产业升级”是智能化时代的商业变革</h2><p></p><p></p><p>虽然以上两位 MVP 来自两个不同的行业，但他们对于大模型 + 大数据的行业应用却有着很多共同的观点。两位专家都高赞了大模型技术在垂直领域的应用潜力，并纷纷基于各自的业务实践，努力将这种潜力化为可衡量的价值。同时，两位技术专家都认可大数据与大模型应用“相辅相成”的关系，他们都认为——高水平的大数据底座是企业推进互联网产业化进程的前提，也是大模型能力落地的重要保障。</p><p></p><p>在这个背景下，企业不仅需要重视技术创新和应用，更需要在行业交流中持续吸收新知识、新成果，积极推动这些技术的业务落地和发展。但还需要注意的是，当前大模型正处于技术发展早期阶段，其在行业内的落地刚刚开始，无论是大模型研发厂商还是使用大模型的用户都缺乏足够的经验和实践。另一方面，大模型的产业应用潜力巨大，有希望充分调动现有海量数据的内在价值、简化工作流程、加强用户体验，但大模型在实际部署中遇到的很多问题和挑战也是难以预期的。而“MVP 计划”恰恰给了来自不同行业的企业技术贡献者一个推动行业“同交流、共使力”的机会，大家一起面对挑战，共同推进产业数字化发展。目前，MVP 计划第三期学员已启动招募工作，期待更多行业专家加入。</p><p></p><p>正如两位专家在访谈中所提到的那样，<a href=\"https://www.infoq.cn/article/FgogdjehRCRt9QjD4fMG\">华为云</a>\"在与伙伴的合作过程中展现的“开放共享、持续创新、一直与伙伴保持前沿的技术讨论”和“赋能千行百业的具体行动”是吸引各家企业加入华为云联创营的原因所在。就比如现在华为云的盘古大模型已迭代到了 3.0 版本，为大模型技术赋能千行百业按下了加速键。汽车之家 CTO 项碧波认为盘古大大降低了行业企业利用大模型技术改善业务的门槛；37 手游技术总监陶学诚也认为盘古这样的大模型未来将帮助越来越多的产业实现数智化重构。可以说，随着 AI 大模型、大数据等技术的发展，互联网与产业的融合将进一步加快。</p><p></p><p>众所周知，互联网产业升级不仅仅是技术的升级，更是一场深层次的商业变革，在这过程中，产业数字化需求端与数字技术供应侧，还存在着一条巨大的鸿沟，需要技术创新者和产业数字化深耕者不断双向奔赴。在这背景下，华为云将于 9 月 21 日，华为全联接大会 2023 期间，举办“华为云互联网产业峰会 &amp;AIGC 高峰论坛”，与互联网先锋企业、产业专家、技术大咖共探互联网产业升级之道，邀请各界同仁一起思想碰撞。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c2/c26aa7a504e9e7250b0731e9d90b81d6.jpeg\" /></p><p></p>",
    "publish_time": "2023-09-19 08:30:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Java并发Map的面试指南：线程安全数据结构的奥秘",
    "url": "https://www.infoq.cn/article/3c8eb933384aba7b39a2ff757",
    "summary": "<p></p><h2>简介</h2><p></p><p>在计算机软件开发的世界里，多线程编程是一个重要且令人兴奋的领域。然而，与其引人入胜的潜力相伴而来的是复杂性和挑战，其中之一就是处理共享数据。当多个线程同时访问和修改共享数据时，很容易出现各种问题，如竞态条件和数据不一致性。</p><p></p><p>本文将探讨如何在Java中有效地应对这些挑战，介绍一种强大的工具——并发Map，它能够帮助您管理多线程环境下的共享数据，确保数据的一致性和高性能。我们将深入了解Java中的并发Map实现，包括ConcurrentHashMap和ConcurrentSkipListMap，以及其他相关的知识点。无论您是初学者还是有经验的开发人员，都会在本文中找到有关并发编程的有用信息，以及如何在项目中应用这些知识的指导。让我们开始这个令人兴奋的多线程之旅吧！</p><p></p><h2>并发问题</h2><p></p><p>在深入了解并发Map之前，让我们首先探讨一下多线程编程中常见的问题。在多线程环境中，多个线程可以同时访问和修改共享数据，这可能导致以下问题：</p><p></p><h3>1. 竞态条件</h3><p></p><p>竞态条件是指多个线程试图同时访问和修改共享数据，而最终的结果取决于线程的执行顺序。这种不确定性可能导致不一致的结果，甚至是程序崩溃。</p><p></p><p><code lang=\"text\">class Counter {\n    private int value = 0;\n\n    public void increment() {\n        value++;\n    }\n\n    public int getValue() {\n        return value;\n    }\n}\n</code></p><p></p><p>在上面的示例中，如果两个线程同时调用increment方法，可能会导致计数器的值不正确。</p><p></p><h3>2. 数据不一致性</h3><p></p><p>在多线程环境中，数据的不一致性是一个常见问题。当一个线程修改了共享数据，其他线程可能不会立即看到这些修改，因为缓存和线程本地内存的存在。这可能导致线程之间看到不同版本的数据，从而引发错误。</p><p></p><h3>为什么需要并发Map？</h3><p></p><p>现在，您可能会想知道如何解决这些问题。这就是并发Map派上用场的地方。并发Map是一种数据结构，它专为多线程环境设计，提供了一种有效的方式来处理共享数据。它允许多个线程同时读取和修改数据，同时确保数据的一致性和线程安全性。</p><p></p><h2>Java并发Map的概述</h2><p></p><p>现在，让我们深入了解Java标准库中提供的不同并发Map实现，以及它们的特点和适用场景。</p><p></p><h3>1. ConcurrentHashMap</h3><p></p><p>ConcurrentHashMap 是Java标准库中最常用的并发Map实现之一。它使用分段锁（Segment）来实现高并发访问，每个分段锁只锁定一部分数据，从而降低了锁的争用。这使得多个线程可以同时读取不同部分的数据，提高了性能。</p><p></p><p><code lang=\"text\">ConcurrentMap map = new ConcurrentHashMap&lt;&gt;();\nmap.put(key, value);\nValueType result = map.get(key);\n</code></p><p></p><p>ConcurrentHashMap适用于大多数多线程应用程序，尤其是读多写少的情况。</p><p></p><h3>2. ConcurrentSkipListMap</h3><p></p><p>ConcurrentSkipListMap 是另一个有趣的并发Map实现，它基于跳表（Skip List）数据结构构建。它提供了有序的映射，而不仅仅是键值对的存储。这使得它在某些情况下成为更好的选择，例如需要按键排序的情况。</p><p></p><p><code lang=\"text\">ConcurrentMap map = new ConcurrentSkipListMap&lt;&gt;();\nmap.put(key, value);\nValueType result = map.get(key);\n</code></p><p></p><p>ConcurrentSkipListMap适用于需要有序映射的情况，它在一些特定应用中性能表现出色。</p><p></p><h3>3. 其他Java并发Map实现</h3><p></p><p>除了ConcurrentHashMap和ConcurrentSkipListMap之外，Java生态系统还提供了其他一些并发Map实现，例如Google Guava库中的ConcurrentMap实现，以及Java 8中对ConcurrentHashMap的增强功能。另外，还有一些第三方库，如Caffeine和Ehcache，提供了高性能的缓存和并发Map功能。</p><p></p><h2>ConcurrentHashMap详解</h2><p></p><p>现在，让我们深入研究ConcurrentHashMap，了解它的内部实现和线程安全机制。</p><p></p><h3>内部实现</h3><p></p><p>ConcurrentHashMap的内部实现基于哈希表和分段锁。它将数据分成多个段（Segment），每个段都是一个独立的哈希表，拥有自己的锁。这意味着在大多数情况下，不同段的数据可以被不同线程同时访问，从而提高了并发性能。</p><p></p><h3>常用操作</h3><p></p><p>ConcurrentHashMap支持许多常见的操作，包括put、get、remove等。下面是一些示例：</p><p></p><p><code lang=\"java\">ConcurrentMap map = new ConcurrentHashMap&lt;&gt;();\nmap.put(key, value);\nValueType result = map.get(key);\nmap.remove(key);\n</code></p><p></p><p>这些操作是线程安全的，多个线程可以同时调用它们而不会导致竞态条件。</p><p></p><h3>示例代码</h3><p></p><p>以下是一个简单的示例，演示如何在多线程环境中使用ConcurrentHashMap来管理共享数据：</p><p></p><p><code lang=\"text\">import java.util.concurrent.*;\n\npublic class ConcurrentMapExample {\n    public static void main(String[] args) {\n        ConcurrentMap map = new ConcurrentHashMap&lt;&gt;();\n\n        // 创建多个线程并发地增加计数器的值\n        int numThreads = 4;\n        ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n\n        for (int i = 0; i &lt; numThreads; i++) {\n            executor.submit(() -&gt; {\n                for (int j = 0; j &lt; 1000; j++) {\n                    map.merge(\"key\", 1, Integer::sum);\n                }\n            });\n        }\n\n        executor.shutdown();\n        try {\n            executor.awaitTermination(1, TimeUnit.MINUTES);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        System.out.println(\"Final Count: \" + map.get(\"key\")); // 应该是4000\n    }\n}\n</code></p><p></p><p>在上面的示例中，我们创建了一个ConcurrentHashMap来存储计数器的值，并使用多个线程并发地增加这个值。最终，我们可以得到正确的结果，而不需要显式的锁定或同步操作。</p><p></p><p>ConcurrentHashMap的强大之处在于它提供了高性能的并发操作，同时保持了数据的一致性和线程安全性。在多线程应用程序中，它是一个强大的工具，可用于管理共享数据。</p><p></p><h2>ConcurrentSkipListMap的用途</h2><p></p><p>在本节中，我们将探讨ConcurrentSkipListMap的独特之处以及在某些情况下为什么选择它。同时，我们将演示如何将有序映射与并发性结合使用。</p><p></p><h3>独特之处</h3><p></p><p>ConcurrentSkipListMap是基于跳表（Skip List）数据结构构建的，与传统的哈希表不同。它有以下特点：</p><p></p><p>有序性： ConcurrentSkipListMap中的元素是有序的，按键进行排序。这使得它非常适合需要按键顺序访问数据的场景。高并发性： 跳表的结构允许多个线程并发地访问和修改数据，而不需要像分段锁那样精细的锁定。动态性： ConcurrentSkipListMap具有自动调整大小的能力，因此它可以在数据量变化时保持高效性能。</p><p></p><h3>示例</h3><p></p><p>下面是一个示例，演示了如何使用ConcurrentSkipListMap来存储一组学生的分数，并按照分数从高到低进行排序：</p><p></p><p><code lang=\"text\">import java.util.concurrent.ConcurrentSkipListMap;\n\npublic class StudentScores {\n    public static void main(String[] args) {\n        ConcurrentSkipListMap scores = new ConcurrentSkipListMap&lt;&gt;();\n\n        scores.put(90, \"Alice\");\n        scores.put(80, \"Bob\");\n        scores.put(95, \"Charlie\");\n        scores.put(88, \"David\");\n\n        // 遍历并输出按分数排序的学生名单\n        scores.descendingMap().forEach((score, name) -&gt; {\n            System.out.println(name + \": \" + score);\n        });\n    }\n}\n</code></p><p></p><p>在上面的示例中，我们创建了一个ConcurrentSkipListMap来存储学生的分数和姓名，并使用descendingMap()方法按照分数从高到低遍历和输出学生名单。这展示了ConcurrentSkipListMap在需要有序映射的情况下的优势。</p><p></p><p>ConcurrentSkipListMap通常用于需要高并发性和有序性的场景，例如在线排行榜、事件调度器等。然而，它的性能可能会略低于ConcurrentHashMap，具体取决于使用情况和需求。</p><p></p><h2>其他Java并发Map实现</h2><p></p><p>除了Java标准库中的ConcurrentHashMap和ConcurrentSkipListMap之外，还有其他一些Java并发Map实现，它们提供了不同的特性和适用场景。</p><p></p><h3>1. Google Guava库中的ConcurrentMap</h3><p></p><p>Google Guava库提供了一个名为MapMaker的工具，用于创建高性能的并发Map。这个工具允许您配置各种选项，例如并发级别、过期时间和数据清理策略。这使得它非常适合需要自定义行为的场景。</p><p></p><p><code lang=\"text\">ConcurrentMap map = new MapMaker()\n    .concurrencyLevel(4)\n    .expireAfterWrite(10, TimeUnit.MINUTES)\n    .makeMap();\n</code></p><p></p><h3>2. Java 8中的ConcurrentHashMap增强功能</h3><p></p><p>Java 8引入了一些对ConcurrentHashMap的增强功能，包括更好的并发性能和更丰富的API。其中一个重要的改进是引入了compute和computeIfAbsent等方法，使得在并发环境中更容易进行复杂的操作。</p><p></p><p><code lang=\"text\">ConcurrentMap map = new ConcurrentHashMap&lt;&gt;();\n\nmap.compute(key, (k, v) -&gt; {\n    if (v == null) {\n        return initializeValue();\n    } else {\n        return modifyValue(v);\n    }\n});\n</code></p><p></p><p>这些增强功能使得ConcurrentHashMap更加强大和灵活，适用于各种多线程应用程序。</p><p></p><h3>3. 第三方并发Map库</h3><p></p><p>除了标准库和Guava之外，还有一些第三方库提供了高性能的并发Map实现，例如Caffeine和Ehcache。这些库通常专注于缓存和数据存储领域，并提供了丰富的功能和配置选项，以满足不同应用程序的需求。</p><p></p><h2>性能考虑</h2><p></p><p>在使用并发Map时，性能是一个关键考虑因素。以下是一些性能优化策略，可帮助您充分利用并发Map的潜力。</p><p></p><p>调整并发级别</p><p></p><p>大多数并发Map实现允许您调整并发级别，这决定了底层数据结构中的分段数量。较高的并发级别通常意味着更多的分段，从而减少了锁争用。但请注意，过高的并发级别可能会导致内存开销增加。在选择并发级别时，需要根据实际负载和硬件配置进行评估和测试。</p><p></p><p>选择合适的哈希函数</p><p></p><p>并发Map的性能与哈希函数的选择密切相关。好的哈希函数应该分散键的分布，以减少碰撞（多个键映射到同一个分段的情况）。通常，Java标准库中的并发Map会提供默认的哈希函数，但如果您的键具有特殊的分布特征，考虑自定义哈希函数可能会提高性能。</p><p></p><p>使用合适的数据结构</p><p></p><p>除了ConcurrentHashMap和ConcurrentSkipListMap之外，还有其他并发数据结构，如ConcurrentLinkedQueue和ConcurrentLinkedDeque，它们适用于不同的应用场景。选择合适的数据结构对于性能至关重要。例如，如果需要高效的队列操作，可以选择ConcurrentLinkedQueue。</p><p></p><p>性能测试和比较</p><p></p><p>在项目中使用并发Map之前，建议进行性能测试和比较，以确保所选的实现能够满足性能需求。可以使用基准测试工具来评估不同实现在不同工作负载下的性能表现，并根据测试结果做出明智的选择。</p><p></p><p>在多线程应用程序中，性能问题可能随着并发程度的增加而变得更加复杂，因此性能测试和调优是确保系统稳定性和高性能的关键步骤。</p><p></p><p>性能是多线程应用程序中的关键问题之一，了解并发Map的性能优化策略对于构建高性能的多线程应用程序至关重要。选择适当的并发Map实现、调整并发级别、选择良好的哈希函数以及进行性能测试都是确保应用程序能够充分利用多核处理器的重要步骤。</p><p></p><h2>分布式并发Map</h2><p></p><p>在分布式系统中，处理并发数据访问问题变得更加复杂。多个节点可能同时尝试访问和修改共享数据，而这些节点可能分布在不同的物理位置上。为了解决这个问题，可以使用分布式并发Map。</p><p></p><h3>分布式并发Map的概念</h3><p></p><p>分布式并发Map是一种数据结构，它允许多个节点在分布式环境中协同工作，共享和操作数据。它需要解决网络延迟、数据一致性和故障容忍等问题，以确保数据的可靠性和正确性。</p><p></p><h3>开源分布式数据存储系统</h3><p></p><p>有一些开源分布式数据存储系统可以用作分布式并发Map的基础，其中一些常见的包括：</p><p></p><p>Apache ZooKeeper： ZooKeeper是一个分布式协调服务，提供了分布式数据结构和锁。它可以用于管理共享配置、协调分布式任务和实现分布式并发Map。Redis： Redis是一个内存存储数据库，它支持复杂的数据结构，包括哈希表（Hash）和有序集合（Sorted Set），可以用于构建分布式并发Map。Apache Cassandra： Cassandra是一个高度可扩展的分布式数据库系统，它具有分布式Map的特性，可用于分布式数据存储和检索。</p><p></p><h3>分布式Map的挑战</h3><p></p><p>分布式并发Map面临一些挑战，包括：</p><p></p><p>一致性和可用性： 在分布式环境中，维护数据的一致性和可用性是一项艰巨的任务。分布式系统需要解决网络分区、故障恢复和数据同步等问题，以确保数据的正确性和可用性。性能： 分布式Map需要在不同节点之间传输数据，这可能会引入网络延迟。因此，在分布式环境中优化性能是一个重要的考虑因素。并发控制： 多个节点可能同时尝试访问和修改数据，需要实现适当的并发控制机制，以避免冲突和数据不一致性。</p><p></p><h3>结合分布式Map与其他并发数据结构</h3><p></p><p>在构建复杂的多线程应用程序时，通常需要将分布式Map与其他并发数据结构结合使用。例如，可以将分布式Map用于跨节点的数据共享，同时使用本地的ConcurrentHashMap等数据结构来处理节点内的并发操作。</p><p></p><p>在分布式系统中，设计和实现分布式Map需要深入了解分布式系统的原理和工具，以确保数据的一致性和可用性。同时，也需要考虑数据的分片和分布策略，以提高性能和扩展性。</p><p></p><h2>将并发Map与其他并发数据结构结合使用</h2><p></p><p>在多线程应用程序中，通常需要将并发Map与其他并发数据结构结合使用，以构建复杂的多线程应用程序并解决各种并发问题。以下是一些示例和最佳实践，说明如何将它们结合使用。</p><p></p><h3>1. 并发队列</h3><p></p><p>并发队列（Concurrent Queue）是一种常见的数据结构，用于在多线程环境中进行数据交换和协作。可以使用并发队列来实现生产者-消费者模式，从而有效地处理数据流。</p><p></p><p><code lang=\"text\">ConcurrentQueue queue = new ConcurrentLinkedQueue&lt;&gt;();\n\n// 生产者线程\nqueue.offer(item);\n\n// 消费者线程\nItem item = queue.poll();\n</code></p><p></p><h3>2. 信号量</h3><p></p><p>信号量是一种用于控制并发访问资源的机制。它可以用于限制同时访问某个资源的线程数量。</p><p></p><p><code lang=\"text\">Semaphore semaphore = new Semaphore(maxConcurrentThreads);\n\n// 线程尝试获取信号量\ntry {\n    semaphore.acquire();\n    // 执行受信号量保护的操作\n} catch (InterruptedException e) {\n    e.printStackTrace();\n} finally {\n    semaphore.release();\n}\n</code></p><p></p><h3>3. 读写锁</h3><p></p><p>读写锁是一种用于管理读写操作的锁机制，它允许多个线程同时读取数据，但只允许一个线程写入数据。</p><p></p><p><code lang=\"text\">ReadWriteLock lock = new ReentrantReadWriteLock();\n\n// 读取操作\nlock.readLock().lock();\ntry {\n    // 执行读取操作\n} finally {\n    lock.readLock().unlock();\n}\n\n// 写入操作\nlock.writeLock().lock();\ntry {\n    // 执行写入操作\n} finally {\n    lock.writeLock().unlock();\n}\n</code></p><p></p><h2>最佳实践和注意事项</h2><p></p><p>在多线程编程中，遵循最佳实践和注意事项是确保应用程序的稳定性和性能的关键。以下是一些关键的最佳实践和注意事项：</p><p></p><p>避免锁定整个Map： 尽量只锁定需要修改的部分数据，以减小锁的粒度，提高并发性能。例如，使用分段锁或读写锁来限制对特定部分数据的访问。考虑迭代器的安全性： 当在多线程环境中遍历并发Map时，需要确保迭代器的安全性。某些操作可能需要锁定整个Map来确保迭代器的正确性。避免空值： 注意处理并发Map中的空值。使用putIfAbsent等方法来确保值不为空。异常处理： 在多线程环境中，异常处理尤为重要。确保捕获和处理异常，以避免线程崩溃和数据不一致性。性能测试和调优： 在实际项目中，性能测试和调优是至关重要的步骤。根据实际需求进行性能测试，并根据测试结果进行必要的调整。文档和注释： 编写清晰的文档和注释，以便其他开发人员理解并发Map的使用方式和注意事项。线程安全编程： 线程安全编程是多线程应用程序的基础。确保您的代码符合线程安全原则，避免共享数据的直接访问，使用合适的同步机制来保护共享数据。异常情况处理： 考虑如何处理异常情况，例如死锁、超时和资源不足。实现适当的错误处理和回退策略。监控和日志记录： 添加监控和日志记录以跟踪应用程序的性能和行为。这可以帮助您及时发现问题并进行调整。并发安全性检查工具： 使用工具和库来辅助检查并发安全性问题，例如静态分析工具和代码审查。</p><p></p><p>最后，不要忘记线程安全编程的基本原则：最小化共享状态，最大化不可变性。尽量减少多个线程之间的共享数据，而是将数据不可变化或限制在需要同步的最小范围内。这将有助于减少竞态条件和数据不一致性的可能性。</p><p></p><h2>总结</h2><p></p><p>本文深入探讨了并发Map的概念、实现和性能优化策略。我们介绍了Java标准库中的ConcurrentHashMap和ConcurrentSkipListMap，以及其他Java并发Map实现和分布式并发Map的概念。我们还讨论了将并发Map与其他并发数据结构结合使用的最佳实践和注意事项。</p><p></p><p>在多线程应用程序中，正确使用并发Map可以帮助您管理共享数据，提高性能，并确保数据的一致性和线程安全性。同时，线程安全编程的良好实践是确保应用程序稳定性和可维护性的关键。希望本文对您在多线程编程中的工作有所帮助！</p><p></p><p></p><blockquote>更多内容请参考 <a href=\"https://www.infoq.cn/article/www.flydean.com\">www.flydean.com</a>\"最通俗的解读，最深刻的干货，最简洁的教程，众多你不知道的小技巧等你来发现！欢迎关注我的公众号:「程序那些事」,懂技术，更懂你！</blockquote><p></p>",
    "publish_time": "2023-09-19 09:51:46",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "用无代码搭建数据中台，竟然如此丝滑",
    "url": "https://www.infoq.cn/article/4a6d0c4bbbfdce748bcda9563",
    "summary": "<p></p><h1>需求背景</h1><p></p><p>企业飞速发展，各个业务部门快速扩张，企业数字化建设变得越来越重要。而开发一个一体化的数据资产管理平台、或者说数据中台系统，变得不可或缺。业务快速发展对企业带来的数据安全匮乏，数据治理成本高，数据口径难统一，数据质量问题多等一系列问题，也随着引入数据中台系统，变得迎刃而解。因为传统的数据中台又重又难用，使用成本高、开发运维成本也高，使用率低、价值不明显。而一个能够跟随自身业务管理灵活变更的轻量级数据中台，则具有更大优势。</p><p></p><h1>系统介绍</h1><p></p><p>要说数据中台用无代码平台构建可能大多数人不信，但smardaten确实有一点不容忽视，就是这个开发平台本身远远不止无代码开发。smardaten是一个以数据驱动的无代码平台，平台的前身就是大数据平台。现在把数据能力作为平台底层核心能力，包含了大多常见的数据处理能力。smardaten主要满足行业级复杂应用的开发，而不是通常的轻量级开发，由于自带大数据底座，数据层面可以减少大量的数据集成、数据清洗、数据治理、接口管理等开发工作，大大减少了业务系统的开发难度和设计难度。所以如果要构建数据资产管理、数据中台、数据集成处理平台等，几乎可以直接用他们工具，也可以通过无代码构建的方式新增应用场景。</p><p></p><p>本次我们做一个数据中台的搭建就使用了无代码平台smardaten。交付要求：6大数据模块、兼顾数据资产，数据服务，数据安全，数据集成，数据标准，质量报告等。</p><p></p><h1>配置说明</h1><p></p><p>因为数据中台中有很多模块是平台自带的，看下数据部分功能架构如图所示，功能比较齐全，满足大多数数据管理场景。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c2/c27a973bc267a792ec24730901135395.jpeg\" /></p><p></p><p>在smardaten界面中，以上数据部分主要功能模块位置大概是这样的。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0b/0baeb2b1f7efa921bb83f59be36e4f99.png\" /></p><p></p><p>数据服务界面是这样的，包含内外部服务、服务目录管理和服务内容编排。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d7/d7a37813c6f0a4796f365d0ed3fde2b4.png\" /></p><p></p><p>而当你通过无代码重新组装后，可能就变成了这样。通过添加业务流和逻辑最后支持将数据服务【上架】。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/23/2326feeeff97d3e2668990fd7d345f52.png\" /></p><p></p><p>所以总的来看，以上显示的功能基本上页面都是现成的，在数据中台组装构建时，需要什么功能就直接导入该页面，将其作为组件直接引用。剩下的功能需求（如表单、流程、仪表盘等）通过其他功能组件快速拖拽、组装即可，全程丝滑体验！</p><p></p><p>下面简单演示下如何引用数据模块和配置新增界面。</p><p></p><h2>1 菜单导航</h2><p></p><p>（1）首先我们通过平台首页上的创建应用，来新建一个空白的应用模板，后续的所有页面，都将在这个模板中一一实现。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/70/708f78b199cb821873bbaeebcdec2fc4.png\" /></p><p></p><p>创建应用（2）然后，我们使用的一键生成导航栏功能。也就是把一二级功能模块按照思维导图的方式记下来，然后一键生成导航菜单。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/68/686165896c80959cb6906f241ebd888c.png\" /></p><p></p><p>一键生成导航栏</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/17/1728b2bd5e732b9b835f385b57323048.png\" /></p><p></p><p>绘出导航栏具体样式</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/37/37376f1193d880a9868b08a3f37f06bb.png\" /></p><p></p><p>保存并生成对应页面通过框架设计，我们将整个数据中台系统，拆分成了六个大模块，数据资产，数据集成，数据服务，数据标准，数据标准和数据安全。并通过此功能，导航栏就已经自动生成了。当然也可以通过导航菜单一个个添加多级功能菜单。就像这样。、</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8e/8e4f56023e9e7952e3ca56ebc35d398a.png\" /></p><p></p><h2>2 系统自带组件导入页面</h2><p></p><p></p><h3>（1）数据集成相关组件</h3><p></p><p>数据服务部分的组件，直接可用的包括【数据流】、【数据流编辑】和【调度监控】。其他隐含的系统组件的需要通过【系统组件】添加隐藏的组件路径（常用组件路径需要在平台付费获取）。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c1/c1973b214b87b0e856dfc4738f2d7fea.png\" /></p><p></p><p>数据处理在平台中又叫做数据流，选择自带的【数据流】组件，可调用数据交换机主界面， 包括数据处理任务分类、数据流列表和控制流列表。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/cd/cd617ef13438403e48e9b2c383ea630f.png\" /></p><p></p><p>而具体的数据处理界面、也是数据集成的核心页面，添加【数据流编辑】组件，通过此功能完成数据采集、交换等任务。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/01/01ea5f113141c0f48f3faa1e1e35438b.png\" /></p><p></p><h3>（2）数据服务相关组件</h3><p></p><p>数据服务部分的组件，直接可用的包括【服务搜索】、【服务主题】、【服务部门】和【服务管理】。其他隐含的系统组件的需要通过【系统组件】添加隐藏的组件路径（常用组件路径需要在平台付费获取）。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/31/3135baef393147e23be10251d470fe7e.png\" /></p><p></p><p>（3）数据资产管理相关组件数据资产管理包括数据模型、数据源、数据关联关系、血缘关系、数据标签等页面组件，可完成多种形式功能组装、实现数据资产管理。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/3b/3b64da6fc757177a83cf7ec4a0ebf474.png\" /></p><p></p><h2>3 由系统组件路径添加页面</h2><p></p><p>除了已预置的功能组件，其他很多页面没有预置为组件，可以通过【系统组件】来添加隐藏的组件路径（常用组件路径需要在平台找到页面并复制路径）。</p><p></p><h3>（1）数据资产管理</h3><p></p><p>数据资产管理在平台中作为基础、且核心的能力，包含在平台多个模块中。包括数据源、数据连接器、数据图书馆等。例如添加【系统组件】、嵌入数据源组件路径。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f7/f72f3b055b9bf47d86d330b94fed7141.png\" /></p><p></p><h3>（2）数据标准管理</h3><p></p><p>平台中数据标准包括字典标准和标准目录管理等。例如添加【系统组件】、嵌入标准目录组件路径。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/15/15ef68e6f00fd80a7115ee88e219593c.png\" /></p><p></p><h3>（3）数据质量管理</h3><p></p><p>数据质量可将资产中的指定字段，根据数据质量标准规则进行记录处理和输出。</p><p></p><p>例如添加【系统组件】、嵌入数据质量稽核配置组件路径。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/44/448977a9c827ae1f0cb88e98fad15ae3.png\" /></p><p></p><p>例如添加【系统组件】、嵌入数据质量监控组件路径。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a1/a126bd0dbdfb9ec68766de8236f7c39e.png\" /></p><p></p><p>例如添加【系统组件】、嵌入数据质量稽核配置组件路径。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/44/448977a9c827ae1f0cb88e98fad15ae3.png\" /></p><p></p><h3>（4）数据安全管理</h3><p></p><p>smardaten提供了多种数据加密方式，数据模糊化，AES128，AES192等，管理员可以通过此功能对密码进行加密，并设置秘钥有效时间，加强数据访问和操作的安全性。同时我们也可以自己设定数据的安全级别，来区分不同数据的重要程度。</p><p></p><p>例如添加【系统组件】、嵌入数据安全密钥管理组件路径。可以设置密钥类型、有效时间等，加强数据访问和操作的安全性</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/11/1190001a634ef0c91b9787a9cd14634b.png\" /></p><p></p><h2>4、自定义配置页面和业务流</h2><p></p><p>除了平台自带的组件页面和隐藏的功能页面，剩下的功能需求（如表单、流程、仪表盘等）通过其他无代码功能快速拖拽、组装即可，可以完成比较复杂的业务逻辑和交互。下面简单介绍几个与数据资产管理相关的页面配置流程。</p><p></p><h3>（1）数据资产管理</h3><p></p><p>左边菜单栏点击新增、增加目录节点，在目录下增加数据对象：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/30/3058eeb837d35a2b61031077294e8c70.png\" /></p><p></p><p>新增数据源，并选择数据库类型：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e8/e840f825b353d05fdd09d62098356119.png\" /></p><p></p><p>实现数据目录管理页面：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a7/a74795ef02ba445452b99667435899df.png\" /></p><p></p><p>输入响应地址和参数名称，点击确定跳转资产配置</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f5/f5efafa8f459be24e6bbc3af577d6d7d.png\" /></p><p></p><p>在目录下绑定id字段</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/00/0073726ff5f993a64564c590b01c2704.png\" /></p><p></p><p>完成提交并保存，这样数据资产就配置完毕了。</p><p></p><h3>（2）数据服务申请</h3><p></p><p>在数据服务部分需要查看每个用户个人的申请信息。这个需要自定义创建页面，主要是构建申请表单、配置列表查看信息，用户可以查看不同目录下面的数据共享，可以提出订阅。申请字段包括资源名称、申请类型、表单ID、视图ID、审核状态等。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5c/5c97274857ffa7999ca324a18c8d3689.png\" /></p><p></p><p>填报组件包括选择、文本、字典数据等多种方式，例如申请类型根据服务情况，设置为2种申请类型：接口申请和授权申请。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d9/d953c7cd9ca044c9b16ff7a6e38adf28.png\" /></p><p></p><p>设置三种审核状态，已审核、待审批、已驳回等。这里的3个审核状态需要匹配当前表单的业务流审批状态。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/98/9896fd8e74ee4ad6640cecd14dfd7485.png\" /></p><p></p><p>完全依靠拖拉拽完成业务流程设计。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ab/ab8bf9d3b9dc6e799c956b6e4ec34359.png\" /></p><p></p><p>表单配置完成后，当前申请信息在列表中的显示字段，直接勾选已有的所有字段，并选择展示顺序。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e9/e926a1857adbed01dd5f00b7faa2afaf.png\" /></p><p></p><h3>（3）元数据录入</h3><p></p><p>配置一个多字段的元数据录入，</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/19/19ae5cac9517399da4dacf17476cf753.png\" /></p><p></p><p>支持对上报的元数据进行提交审核，只需配置相关业务逻辑按钮。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/fa/fa78f3b89073ec89a072cef7fa9520ca.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/92/9297e8f117f27fdabe53a35b90ac086b.png\" /></p><p></p><h3>（4）数据资产大屏</h3><p></p><p>通过数据分析和可视化大屏，可以配置数据资产大屏，展示各类数据资产情况、数据标准管理成功、数据服务调用次数等。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0c/0cf39fbc4c5810f36c3eae199a0ff78b.png\" /></p><p></p><h1>使用体验</h1><p></p><p>通过搭建数据中台系统，数据中台相对来说是数据处理要求比较高的应用，对业务逻辑也比较复杂，好在平台已基本具备主要功能模块直接使用，大大减少了上手难度，对于大多数人来说，只需当做数据资产管理工具直接上手即可。在一些复杂场景的实现上平台提供了完善的学习地图，视频讲解，和案例展示。对一些没有代码经验的小白十分友好。不用担心不会使用，所有初学者都能快速上手。同时还可以实现多人协助配置，让开发交付效率倍增。 smardaten兼具无代码构建、低代码开放集成、智能BI、数据中台等多元化能力，能够打造多行业、复杂的数字化应用，帮助客户轻松实现多种数字化需求。官网地址<a href=\"https://s3.smardaten.com/\">https://S3.smardaten.com/</a>\"</p><p><img src=\"https://static001.geekbang.org/infoq/16/1622e6ed4c3d58cdc7109e6b8edfd50a.png\" /></p><p></p><p></p>",
    "publish_time": "2023-09-19 07:47:12",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "中关村科金技术副总裁张杰博士确认出席 FCon ，分享金融领域大模型的应用实践",
    "url": "https://www.infoq.cn/article/zpSVPq3WGrA1KrvMiPkP",
    "summary": "<p><a href=\"https://fcon.infoq.cn/2023/shanghai/?utm_source=infoqweb&amp;utm_medium=atricle\">FCon 全球金融科技大会</a>\"，将于 11 月在上海召开。中关村科金技术副总裁张杰博士将发表题为《<a href=\"https://fcon.infoq.cn/2023/shanghai/presentation/5548?utm_source=infoqweb&amp;utm_medium=article\">金融领域大模型的应用实践</a>\"》主题分享，介绍大模型时代下的新型人机协同、大模型在金融领域应用的技术壁垒以及基于大模型的应用案例。</p><p></p><p><a href=\"https://fcon.infoq.cn/2023/shanghai/presentation/5548?utm_source=infoqweb&amp;utm_medium=article\">张杰博士</a>\"，天津大学本硕博学位，主要研究方向为知识工程、自然语言处理，曾出版《知识中台》《知识图谱》两部技术专著，发表学术论文十余篇，发明专利一百余项，主持或参与国家级课题八项，获第十届吴文俊人工智能技术发明一等奖。主持开发过推荐引擎、知识问答系统、客服机器人、大数据风控系统、行业知识图谱等多项商业系统，累计销售额数亿元。他在本次会议的演讲内容如下：</p><p></p><p>演讲：金融领域大模型的应用实践</p><p></p><p>随着人工智能技术的快速发展，大模型已经成为金融行业创新发展的重要驱动力。这不仅仅是金融行业的一项技术革新，更是推动金融业务升级和转型的重要引擎。基于大模型的应用层出不穷，势必为金融行业海量的数据和复杂的业务场景带来更优的处理方式。然而，金融行业有其独特的行业属性和监管要求，大模型在金融领域的应用过程中诸多的挑战亦是不可避免。</p><p></p><p>演讲提纲：</p><p></p><p>大模型时代下的新型人机协同大模型在金融领域应用的技术壁垒</p><p>○ 避免产生幻觉倾向的外挂知识库技术</p><p>○ 领先的多模态文档解析技术 </p><p>○ 基于大数据智能的思维链归纳技术 </p><p>○ 避免灾难性遗忘的领域模型训练技术</p><p>案例分享：基于领域大模型的企业智能知识库构建及其应用案例分享：基于领域大模型的理财师营销助手</p><p></p><p>你将获得：</p><p></p><p>○ 理解通用大模型和领域大模型的优劣势</p><p>○ 理解领域大模型的运行逻辑</p><p>○ 理解金融机构在大模型领域投入的方向</p><p>○ 理解领域大模型应用对金融业的作用</p><p></p><p>除上述演讲外，FCon 上海还将围绕&nbsp;<a href=\"https://fcon.infoq.cn/2023/shanghai/track/1580?utm_source=infoqweb&amp;utm_medium=atricle\">DevOps&nbsp;在金融企业落地实践</a>\"、<a href=\"https://fcon.infoq.cn/2023/shanghai/track/1591?utm_source=infoqweb&amp;utm_medium=atricle\">金融行业大模型应用</a>\"、<a href=\"https://fcon.infoq.cn/2023/shanghai/track/1576?utm_source=infoqweb&amp;utm_medium=atricle\">创新的金融科技应用</a>\"、<a href=\"https://fcon.infoq.cn/2023/shanghai/track/1577?utm_source=infoqweb&amp;utm_medium=atricle\">金融实时数据平台建设之路</a>\"、<a href=\"https://fcon.infoq.cn/2023/shanghai/track/1588?utm_source=infoqweb&amp;utm_medium=atricle\">金融安全风险管控</a>\"、<a href=\"https://fcon.infoq.cn/2023/shanghai/track/1589?utm_source=infoqweb&amp;utm_medium=atricle\">数据要素流通与数据合规</a>\"等进行交流。</p><p></p><p>FCon 上海 2023，相约 11 月！现在购票，前 100 人可享 5 折特惠购票，咨询购票请联系：17310043226（微信同手机号）。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a8/a8ec7f7fb25c7949931b2b8a5deffddd.png\" /></p><p></p>",
    "publish_time": "2023-09-19 11:30:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "配置语言 KCL 正式成为CNCF 沙盒项目",
    "url": "https://www.infoq.cn/article/Xyu9ZU6BDIO3qNGudsMg",
    "summary": "<p>&nbsp;</p><p>9 月 12 日，&nbsp;配置语言 <a href=\"https://kcl-lang.io/\">KCL 项目</a>\"通过了云原生计算基金会（CNCF）技术监督委员会评定，正式成为 CNCF 沙箱项目。</p><p>&nbsp;</p><p>KCL 是一个<a href=\"https://github.com/kcl-lang/kcl\">开源的</a>\"基于约束的记录及函数语言，旨在通过成熟的编程语言技术和实践来改进大量繁杂配置比如云原生 Kubernetes 配置场景的编写等，致力于围绕配置的模块化、扩展性和稳定性，打造更简单的逻辑编写体验，构建更简单的自动化和生态集成路径。KCL在2022 年 5 月正式开源，并在今年6 月 成为 CNCF Landscape 项目。</p><p>&nbsp;</p><p>当前，在轻量级客户端云原生动态配置领域，配置语言及工具存在如下问题：</p><p>&nbsp;</p><p>维度爆炸：大多数静态配置如云原生领域的 Kubernetes YAML 配置需要为每个环境单独进行配置；在最糟糕的情况下，它可能引入涉及环境交叉链接的难以调试的错误，稳定性和扩展性都较差。配置漂移：对于不同环境的静态管理应用程序和基础设施配置的方式，往往没有标准的方式去管理这些动态的不同环境的配置，采用非标准化的方法比如脚本和胶水代码的拼盘，会导致复杂度呈指数增长，并导致配置漂移。认知负担：Kubernetes 等作为构建平台的平台技术手段在底层统一基础架构细节方面出色，但是缺乏更上层的应用软件交付抽象，对于普通开发者认知负担较高，影响了更上层应用开发者的软件交付体验。</p><p>&nbsp;</p><p>在云原生配置和自动化的特定问题域内，KCL 使用专用配置和策略语言用于编写和管理规模化复杂配置及策略。不同于混合编写范式、混合工程能力的高级通用语言，专用语言的核心逻辑是以收敛的有限的语法、语义集合解决领域问题近乎无限的变化和复杂性，将复杂配置和策略编写思路和方式沉淀到语言特性中。具体来说，KCL 具备以下能力：</p><p>&nbsp;</p><p>在代码层面提升配置语义验证的能力，比如 Schema 定义、字段可选/必选、类型、范围等配置检查校验能力；提供配置分块编写、组合和抽象的能力，比如结构定义、结构继承、约束定义和配置策略合并等；用现代编程语言的方式以编写代码的方式提升配置的灵活度，比如条件语句、循环、函数、包管理等特性提升配置重用的能力；提供完备的工具链支持，丰富的 IDE 插件、语言和生态工具链支持用以降低上手门槛，提升使用体验；通过包管理工具 和 OCI 注册表，使得配置以更简单的方式在不同团队/角色之间分享，传播和交付；提供高性能的编译器满足规模化配置场景诉求，比如满足由一份基线配置根据部署上下文生成不同环境、不同拓扑配置的渲染性能以及配置自动化修改性能诉求；通过多语言 SDK、KCL 语言插件等手段提升其自动化集成能力，在发挥配置及策略编写价值的同时显著降低 KCL 的学习成本。</p><p>&nbsp;</p><p>作为一种配置语言，KCL 为应用程序和平台开发人员/SRE 提供的最重要的功能是动态配置管理。通过代码抽象，构建以应用为中心的模型屏蔽复杂的基础设施和平台概念，为开发人员提供一个以应用程序为中心且易于理解的界面。</p><p>&nbsp;</p><p>KCL 支持与 Kubernetes Resource Model (KRM) 规范直接集成。无论是使用独立的 KCL 还是 KRM KCL 配置形式， KCL 可以与各种 CI/CD 和 GitOps 工具的集成。此外，KCL 还与 CNCF 其他众多生态项目进行了集成，比如 Helm、Kustomize、kpt 等，还在运行时提供 KCL Kubernetes Operator，以满足不同场景的配置管理需求等。</p><p>&nbsp;</p><p>&nbsp;</p><p>更多信息可以查看：</p><p>项目地址：<a href=\"https://github.com/kcl-lang/kcl\">https://github.com/kcl-lang/kcl</a>\"</p><p>项目官网：<a href=\"https://kcl-lang.io/\">https://kcl-lang.io</a>\"</p><p>KCL 2023路线规划：https://kcl-lang.io/docs/community/release-policy/roadmap</p><p></p>",
    "publish_time": "2023-09-19 12:14:31",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "数据处理的下一阶段，容器驱动的边缘计算",
    "url": "https://www.infoq.cn/article/lWBu7U1YHcDAL9PSEXV3",
    "summary": "<p>最近一段时间以来，边缘计算和容器正变得越来越流行，为我们日常生活中与数据处理相关的各种挑战提供了创新的解决方案。现在，这些技术已经渗透到了用途广泛的设备中，包括汽车、电话，甚至冰箱，为各种使用场景释放了新的可能性，使我们能够更有效地解决数据处理方面的挑战。在本文中，我们将探讨边缘计算和容器的结合点，这些技术的重要性以及与之相关的挑战。</p><p>&nbsp;</p><p></p><h2>边缘计算和容器的使用场景</h2><p></p><p>&nbsp;</p><p>我们有多个行业都可以从边缘计算和容器的使用中受益，包括工业物联网（Industrial Internet of Things，IIoT）、医疗保健、智能城市和零售行业。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ec/ec937e9b613bf614f2f820bf65a72692.jpeg\" /></p><p>&nbsp;</p><p>图1：边缘计算和容器的使用场景</p><p>&nbsp;</p><p>边缘计算无处不在，几乎所有的行业都会涉及到它。如下是一些比较成熟的行业：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/44/44491b4a6acb798a6fef6ae41091a644.png\" /></p><p>&nbsp;</p><p>&nbsp;</p><p></p><h2>边缘计算与容器的结合点</h2><p></p><p>&nbsp;</p><p>边缘计算和容器有多个共同点，包括它们支持分布式应用的能力以及对降低延迟的关注。容器特别适合边缘计算，因为它们非常轻量级，能够很容易地部署到远程的位置中。但是，在边缘计算环境中，使用容器也有一些挑战，比如有限的资源和安全方面的问题。</p><p>&nbsp;</p><p>边缘容器的收益包括：</p><p>&nbsp;</p><p>灵活性：边缘容器具有高度的可移植性，可以在各种边缘设备上运行，提供了部署的灵活性和敏捷性。可扩展性：容器具有高度的可扩展性，可以在多个边缘设备上实现复制、部署和管理，从而能够更容易地扩展应用和服务。在边缘计算环境中，这一点尤为重要，因为在这种环境中资源有限，传统的单体应用可能并不合适。安全性：容器为运行应用提供了一个安全的环境，并将它们与边缘设备上的其他进程实现了隔离。低延迟：通过在更接近源头的地方处理数据，容器有助于减少数据在设备和数据中心之间传输的时间。这在需要实时处理的应用中尤为重要，如IIoT或健康医疗中使用的应用。减少带宽：由于所有的流量均集中在云供应商的数据中心内，所以集中式的应用往往会导致高昂的网络费用。而边缘容器可以更靠近终端用户，允许对数据进行预处理和缓存，这有助于减少网络费用。成熟度：作为一种容器技术，<a href=\"https://www.docker.com/\">Docker</a>\"被认为是非常稳定的，并在生产环境中得到了广泛应用。此外，开发人员可以利用他们现有的知识和技能来使用Docker，这意味着测试边缘容器时不需要额外的培训。</p><p>&nbsp;</p><p>边缘容器的挑战包括：</p><p>&nbsp;</p><p>受限的资源：边缘设备通常资源有限，比如内存、处理能力和存储，这可能会影响边缘容器的性能。复杂性：边缘容器需要容器化和分布式计算方面的专业知识，这对一些组织来说是一种挑战。管理：跨多个边缘设备管理容器可能会很复杂和耗时，需要强大的容器编排解决方案。安全性：边缘设备通常位于远程和不安全的位置，这可能会使得它们易于遭受攻击。容器也会带来安全风险，比如容器逃逸（breakout）或容器镜像中的漏洞。</p><p>&nbsp;</p><p></p><h2>实现边缘计算和容器</h2><p></p><p></p><p>边缘计算和容器提供了很多的收益，组织很快就会为不用的业务场景采用这些技术。但是，成功实现这些技术需要仔细考虑多个关键因素。</p><p>&nbsp;</p><p></p><h3>选择正确的容器平台</h3><p></p><p>&nbsp;</p><p>在实现边缘计算和容器时，选择正确的容器平台（如Docker）非常重要。这些平台提供了一系列的特性和功能，如容器的编排和管理，这有助于简化边缘计算环境中容器的部署和管理。不过，由于边缘设备的资源容量问题，广泛使用的常见平台，如<a href=\"https://kubernetes.io/\">Kubernetes</a>\"和<a href=\"https://docs.openshift.com/\">OpenShift</a>\"，并不适合边缘计算。建议切换到兼容的替代品，它们通常是开源方案，如<a href=\"https://k3s.io/\">k3s</a>\"、<a href=\"https://kubeedge.io/en/\">KubeEdge</a>\"、<a href=\"https://microk8s.io/\">microk8s</a>\"或<a href=\"https://github.com/baetyl/baetyl\">Baetyl</a>\"。</p><p>&nbsp;</p><p></p><h3>部署策略</h3><p></p><p>&nbsp;</p><p>在实现边缘计算和容器时，应该考虑部署策略。根据具体的使用场景，组织可以选择采用混合云模式，即一些服务部署在云中，而另一些部署在边缘设备上。另外，容器可以直接部署在边缘设备上，这可以减少延迟并提升性能。</p><p>&nbsp;</p><p>一旦部署完成之后，管理边缘计算和容器可能很具挑战性，尤其是存在大量边缘设备的环境中。容器编排和管理平台（如Kubernetes）有助于简化边缘计算环境中容器的管理。这些平台提供了自动扩展、负载均衡和健康监控等特性，可以帮助确保容器的运行效率和效果。</p><p>&nbsp;</p><p>此外，监控容器的性能/状态能够确保在一些问题造成重大影响之前将其识别和解决掉。这包括监控容器的资源使用情况、网络流量和应用的性能，并使用日志和度量指标来解决问题。开源的工具通常是一个很好的起点，如<a href=\"https://opentelemetry.io/\">OpenTelemetry</a>\"和<a href=\"https://prometheus.io/\">Prometheus</a>\"。</p><p>&nbsp;</p><p>为边缘设备的故障做好计划，边缘设备可能会出现意外的故障，因此必须要通过实施冗余措施来规划这种情况，例如在不同的边缘设备上运行容器的多个实例或使用边缘到云的故障转移机制。</p><p>&nbsp;</p><p></p><h3>安全考量因素</h3><p></p><p>&nbsp;</p><p>在实现边缘计算和容器时，安全考量因素是非常重要的。边缘计算依赖于大量容易受到网络攻击的设备和网络，包括恶意软件、勒索软件和网络钓鱼攻击。如果没有适当的安全措施，这些设备和网络可能会被破坏，导致数据泄露和其他安全事件。如果某个边缘设备遭到了破坏，它可能感染整个网络。另外一个挑战是数据保护，特别是当涉及到敏感数据时，我们很难阻止对设备的物理访问。</p><p>&nbsp;</p><p>最后，边缘计算缺乏标准化，这会造成安全方面的挑战，因为这会使得在设备和网络间实现一致的安全措施变得更加困难。安全依然是使用边缘计算的主要挑战，它可能需要付出大量的努力来减轻风险。</p><p>&nbsp;</p><p></p><h2>边缘计算和容器的未来</h2><p></p><p>&nbsp;</p><p>随着人工智能（AI）和机器学习的使用以及新容器技术的发展，这些新兴的趋势会使得边缘计算和容器的未来更具吸引力。例如，边缘设备越来越多地配备了人工智能和机器学习能力，这有助于提升数据处理的准确性和速度。今天，我们已经有了<a href=\"https://www.arrow.com/en/research-and-events/articles/5-levels-of-autonomous-driving-technology\">自动驾驶的汽车</a>\"，可以<a href=\"https://www.engadget.com/2016-11-02-netatmo-presence-ai-security-camera.html\">区分猫/狗或人（小偷）</a>\"的智能相机，<a href=\"https://techcrunch.com/2022/08/12/trashbot-uses-ai-to-sort-recyclables/\">回收行业的自动分拣机</a>\"，甚至简单的手表，它能够分析健康数据并探测<a href=\"https://www.health.harvard.edu/heart-health/can-a-smart-watch-diagnose-a-heart-attack\">心脏病的发作</a>\"。所有的这些都是通过边缘计算加上AI实现的，在未来的几年中，我们日常生活中的使用场景将会迅速增加。</p><p>&nbsp;</p><p>同时，为了跟上这些新使用场景的步伐，新的容器技术也在开发中，比如<a href=\"https://webassembly.org/\">WebAssembly</a>\"，它有助于提高边缘计算环境中容器的性能和安全性。</p><p>&nbsp;</p><p>有项关于边缘计算市场的研究宣布，未来10年将会有20-30%的同比增长，这证实了该项技术的潜力。大型科技公司将会进行投资，以简化部署方案的实施，使每个行业均能使用这些方案。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/81/815227d2dc06f36612528e73d85a7cac.jpeg\" /></p><p></p><p>图2：美国边缘计算市场（<a href=\"http://grandviewresearch.com/\">数据源</a>\"）</p><p>&nbsp;</p><p>边缘计算和容器对企业和社会的影响将持续增长，为创新和效率提升带来新的机会。例如，在农业领域，我们会看到放置在田间的设备，以收集土壤湿度、温度和空气湿度等数据。然后，这些数据可以使用人工智能算法进行实时处理，以优化灌溉、肥料使用和病虫害管理，从而提高作物产量，减少对环境的影响。</p><p>&nbsp;</p><p>所有类型的设备均可以使用相关的传感器来优化能源使用，有些设备可以配置人工智能算法，分析来自传感器和其他来源的数据，以便在设备出现故障之前发现潜在的问题。这有助于减少停机时间和维护成本，并提升设备的整体性能。</p><p>&nbsp;</p><p>&nbsp;</p><p></p><h2>结论</h2><p></p><p>&nbsp;</p><p>虽然边缘计算和容器的结合点存在着一些挑战，但是创新和效率提升的机会是巨大的。随着越来越多的行业采用这些技术，考虑与其实施相关的挑战和机会是非常重要的。通过选择正确的容器平台和部署策略，并做出最佳的安全决策，企业可以成功实施边缘计算和容器，以推动商业价值的实现。</p><p>&nbsp;</p><p>边缘计算和容器的未来是很有吸引力的，新的技术和使用场景一直在不断出现。通过紧跟这些趋势，企业可以继续创新并推动其各自行业的价值。</p><p>&nbsp;</p><p></p><h5>原文链接：</h5><p></p><p><a href=\"https://dzone.com/articles/the-edge-of-containers\">https://dzone.com/articles/the-edge-of-containers</a>\"</p><p></p><p></p><h5>相关阅读：</h5><p></p><p><a href=\"https://www.infoq.cn/article/CishxTBMTqUf6YIm7Zvd\">锚定数据处理几大痛点，企业如何利用数据云平台释放数据全部价值？</a>\"</p><p><a href=\"https://www.infoq.cn/article/UDGzuR869oAB9iURUOYN\">秒级启动万个容器，如何实现容器镜像的“加速冲刺”？</a>\"</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzI5ODQ2MzI3NQ==&amp;mid=2247504157&amp;idx=1&amp;sn=a9d4bf5386bc651586feb795638ca880&amp;chksm=eca7e859dbd0614f55c50c87dae769f72350799d72a2de6e00c0fbad3d73a6fbfb9e48bbff15&amp;scene=27#wechat_redirect\">自下而上学习容器</a>\"</p><p><a href=\"https://www.infoq.cn/article/U3uzsa3z03t92JB8p0iv\">开发容器：可重用的开发环境</a>\"</p>",
    "publish_time": "2023-09-19 12:54:40",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Dropbox 瘦身攻略：我们如何把JavaScript包缩小三分之一",
    "url": "https://www.infoq.cn/article/81hiCXm5osKRMxlThgKZ",
    "summary": "<p>不知道各位朋友是否还记得，上一次正打算点击网站上的按钮、结果页面突然变化导致你点上了错误的位置是什么时候。或者说，上一次你因为实在忍受不了缓慢的加载速度而愤然点叉又是在什么时候？</p><p>&nbsp;</p><p>这些问题在如今内容愈发丰富、交互度越来越高的应用场景中被无限放大。为了支持更复杂的功能，我们不得不编写出更多的前端代码，导致浏览器端需要接收、解析和执行的字节更多，最终性能自然变得更差。</p><p>&nbsp;</p><p>在Dropbox，我们深深了解此等糟糕体验是多么令人崩溃。所以过去一年来，我们的Web性能工程团队抽丝剥茧、将性能问题溯源到了一个常常被忽视的元素身上：模块捆绑器。</p><p>&nbsp;</p><p>米勒定律认为，人脑在任何给定的时间内只能容纳一定量的信息，所以大部分现代代码库（包括我们Dropbox的代码库）才会被拆分成一个个更小的模块。模块捆绑器负责把应用程序中的各类组件（例如JavaScript和CSS）合并成捆绑包，并在页面加载时由浏览器下载这些捆绑包。最常见的处理方式就是将捆绑包保存为最小JavaScript文件的形式，用以存放Web应用程序中的大部分逻辑。</p><p>&nbsp;</p><p>Dropbox模块捆绑器的首次迭代设计于2014年，当时以性能为先的模块捆绑方法才刚刚兴起（分别在2012年和2015年由Webpack和Rollup率先提出）。但毕竟年代久远，那时候的方案跟现代设计比起来还是太过简陋。我们的模块捆绑器并没多少性能优化，使用起来比较繁琐，既影响用户体验又会拖慢开发速度。</p><p>&nbsp;</p><p>随着捆绑器逐渐显露老态，我们决定面向未来做好性能优化、全面替换掉这位应当功成身退的老将。当前也是替换的最佳时机，因为我们正好在着手将页面迁移至Edison（我们的全新Web服务栈），统筹规划有望一箭双雕。替换之后，我们的静态资产管线也将迎来更现代的捆绑器，在架构层面让集成更为简单。</p><p></p><h2>现有架构</h2><p></p><p></p><p>虽然我们原本的捆绑器拥有相对较快的构建速度，但也存在着不少短板，包括捆绑包太过臃肿、工程师们感到难以维护等等。工程师们只能手动定义把哪些脚本跟包捆绑在一起，而且我们之前只简单提供页面渲染所需要的包，但几乎未做任何性能优化。随着时间推荐，这种粗糙的方案也带来了以下几大显著问题。</p><p>&nbsp;</p><p>问题一：捆绑代码有好几个版本</p><p>&nbsp;</p><p>直到不久前，我们还在使用名为Dropbox Web Server（DWS）的自定义Web架构。简单来讲，每个页面都由多个小页（pagelet，即页面中的子部分）组成，因此导致每个页面都有多个JS入口点，而各servlet也由后端处对应的控制器提供服务。虽然这种部署在多个团队同时处理同一页面时速度更快，但也往往导致pagelet指向不同的后端代码版本。这就要求DWS能支持在同一页面上交付不同版本的打包代码，而这经常会引发一致性问题（例如在同一页面上加载相同单例的多个实例）。我们向Edison的迁移将消除这种pagelet架构，从而更灵活地采取更符合行业标准的捆绑方案。</p><p>&nbsp;</p><p>问题二：需要手动分割代码</p><p>&nbsp;</p><p>所谓代码分割，就是把JS包分割成更小的块的过程，这样浏览器就能只加载当前页面所需要的代码库部分。例如，假设用户先访问dropbox.com/home，而后访问dropbox.com/recent，那么如果不进行代码分割，则浏览器会下载整个bundle.js，这无疑将显著减慢页面的初始导航速度。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/df/dffb4dc08a558a0fa145db5c6bc43a97.png\" /></p><p></p><p>所有页面的全部代码均通过单一文件提供</p><p>&nbsp;</p><p>但在代码分割之后，浏览器只需要下载页面所需要的各个代码块。由于浏览器下载的代码量更少，所以dropbox.omc/home的初始导航速度将大大提升。此外，代码分割可以保证先加载关键脚本，而后再异步加载、解析和执行非关键脚本。共享代码片段也将被浏览器缓存下来，进一步减少用户在不同页面间移动时所需下载的JS代码量。所有这些，都将大大减少Web应用程序的加载时间。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/19/196cab4ecde4fe539fdc6ef3d11e237d.png\" /></p><p></p><p>仅下载页面所需的新代码块</p><p>&nbsp;</p><p>由于我们现在的捆绑器没有任何内置的代码分割工具，所以工程师只能手动对包做定义。具体来讲，我们的打包map是个6000多行的庞大字典，具体指定了哪些模块该放进哪个包中。</p><p>&nbsp;</p><p>可以想见，随着时间推移这样一套架构的维护工作将变得异常复杂。为了避免非优打包，我们强制执行了一套严格的测试（打包测试），但因为每次变更都可能打乱原本的模块排列，所以工程师们变得神经紧张、苦不堪言。</p><p>&nbsp;</p><p>这也导致我们的实际代码量比页面所需要多得多。例如，假定我们有以下包map：</p><p>&nbsp;</p><p><code lang=\"null\">{\n  \"pkg-a\": [\"a\", \"b\"],\n  \"pkg-c\": [\"c\", \"d\"],\n}</code></p><p>&nbsp;</p><p>如果页面依赖于模块a、b和c，则浏览器只须进行两次HTTP调用（分别获取pkg-a和pkg-b），而非对各模块各进行一次（共三次）调用。这虽然会减少HTTP调用的开销，但同时也会加载不必要的模块——在本示例中就是模块d。由于缺乏摇树优化，我们不但加载了不必要的代码，还加载了页面不需要的整个模块，因此会拖慢整体用户体验。</p><p>&nbsp;</p><p>问题三：缺少摇树优化</p><p>&nbsp;</p><p>摇树是一种包优化技术，能够消除未使用的代码来帮助捆绑包瘦身。假设我们的应用程序需要导入包含多个模块的第三方库，如果没有摇树优化，则实际加载的大部分捆绑代码其实都毫无用处。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/23/236162ea8430597ebad7f1889968f903.png\" /></p><p></p><p>无论是否实际使用，所有代码都会被捆绑进来</p><p>&nbsp;</p><p>通过摇树优化，我们可以分析代码的静态结构，并删除一切未被其他代码直接引用的代码。这样最终的捆绑包就能更加精简小巧。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/01/01776742478855f4a8916b443dcbec8e.png\" /></p><p></p><p>只捆绑要使用的代码</p><p>&nbsp;</p><p>因为我们之前的捆绑器不太完善，所以其中没有任何摇树功能。生成的包往往包含大量未使用代码，特别是来自第三方库的代码，这会导致页面加载无用内容、延长等待时间。此外，因为我们使用protobuf定义来实现从前端到后端的高效数据传输，所以在检测某些可观察性指标时往往要引入高达几MB的未使用代码！</p><p></p><h2>为何选择Rollup</h2><p></p><p></p><p>多年来我们其实考虑过不少解决方案，并最终把核心需求梳理了出来：我们真正需要的，就只有自动代码分割、摇树优化，以及可以进一步优化捆绑管线的可选插件。Rollup就是当前最成熟、也能灵活融入到我们现有构建管线的工具，于是最终成为我们的首选解决方案。</p><p>&nbsp;</p><p>另一个原因是：有助于降低工程开销。因为我们已经在使用Rollup捆绑我们的NPM模块，所以继续扩大Rollup的使用范畴肯定比再引入新工具要划算得多。此外，这也意味着跟其他捆绑器相比，我们已经在之前的运营中掌握了更多关于Rollup特性的工程专业知识，能有效降低用不下去的可能性。最后，我们还算了一笔账，发现跟深入集成Rollup相比，在原有模块捆绑器中重现Rollup的功能需要投入更多工程资源。</p><p></p><h2>不负众望的Rollup</h2><p></p><p></p><p>我们都知道，安全、分步推出模块捆绑器绝非易事，毕竟我们在期间需要同时可靠支持两种模块捆绑器（并生成两种对应的捆绑包）。我们主要关心的问题包括如何保证捆绑代码稳定、无bug，如何增加构建系统和CI的负载，还有怎样激励团队接受在其页面中使用Rollup捆绑包。</p><p>考虑到可靠性和可扩展性等问题，我们把发布过程分成了四个阶段。</p><p></p><p>开发者预览阶段：允许工程师在开发环境中选择加入Rollup捆绑包。这样我们就能让开发者尽早发现Rollup捆绑包引发的任何意外，借此推动行之有效的众包QA测试。认真收集相关信息后，我们将有充足的时间解决bug、适应范围变更。面向Dropbox员工的内部预览阶段将全面推广Rollup捆绑包，借此收集早期性能数据并进一步获取关于应用程序行为变化的实践反馈。通用阶段，即逐步向所有Dropbox用户（包括内部和外部用户）推出Rollup捆绑包。在此之前，我们已经对Rollup包做过彻底测试并确定其稳定性已经达到较高水平。维护阶段，强调解决项目中遗留的所有技术债，再通过迭代让Rollup进一步优化性能和开发者体验。我们意识到，如此规模的大体量项目将不可避免地积累下一些技术债，我们应计划在某个阶段将其解决，而不能假装债务不存在。</p><p>&nbsp;</p><p>为了有效支持各个阶段，我们混合使用了基于cookie的门控和内部功能门控系统。以往，Dropbox的大多数部署都纯粹借助我们的内部功能门控系统得以完成。但这一次，我们决定允许基于cookie的门控在Rollup和旧捆绑包间快速切换，从而加快调试速度。每个发布阶段都以交替形式分步推出，包括从1%、10%、25%，到50%乃至最终的100%。这让我们能够灵活地收集早期性能与稳定性结果，当发现问题时进行无缝回滚，同时尽可能降低对内、外部用户造成的影响。</p><p>&nbsp;</p><p>因为我们需要迁移大量页面，所以除了建立安全可靠的Rollup切换策略之外，还得激励页面所有者主动执行切换。由于我们的Web栈将配合Edison进行一波重大改造，所以这应该是个可以一箭双雕的绝佳时机。如果把Rollup塑造成Edison所支持的独特功能，那开发团队应该会更愿意同时接受Rollup和Edison，我们也能借此将Rollup的迁移策略跟Edison升级紧密绑定起来。</p><p>&nbsp;</p><p>Edison也有望借此提高自己的性能和开发速度。我们认为，将Edison与Rollup相结合，会在整个公司内产生强烈的转型协同效应。</p><p></p><h2>挑战与障碍</h2><p></p><p></p><p>我们早就做好了迎接意外挑战的准备，但事实证明将一种构建系统（Rollup）跟另一种构建系统（基于Bazel的原有基础设施）进行复杂对接，其挑战性要远远大于我们的任何想象。</p><p>&nbsp;</p><p>首先，我们发现同时运行两种不同模块捆绑器，所消耗的资源要远超我们的估计。Rollup的摇树算法虽然相当成熟，但仍需要将所有模块都先加载到内存中，之后生成分析关系并摇出代码所需的抽象语法树。此外，我们将Rollup集成到Bazel中的作法，限制了我们缓存中间构建结果的能力。也就是说，我们需要持续集成以重建并重新缩小每个构建上的全部Rollup块。这导致我们的持续集成构建因内存耗尽而超时，显著拖慢了部署节奏。</p><p>&nbsp;</p><p>我们还发现了Rollup摇树算法中的几个bug，这会导致摇树优化过于激进。值得庆幸的是问题不大，我们在开发者预览阶段就将其修复，所以最终用户并未受到影响。此外，我们发现旧版捆绑程序会提供来自第三方库的某些代码，而这些代码与JS严格模式并不兼容。一旦将这些代码提交给采用严格模式的新捆绑器，则会在浏览器中引发极为严重的运行时错误。这就要求我们对整个代码库、特别是与严格模式不兼容的补丁代码，开展一轮全面审计。</p><p>&nbsp;</p><p>最后，在Dropbox内部员工预览阶段，我们发现Rollup和旧版捆绑器之间的A/B遥测指标并未体现出符合预期的TTVC性能提升。我们最终意识到，这是因为Rollup生成的代码块比旧版捆绑器生成的代码块要多得多。尽管我们最初假设HTTP2的多路复用能消除大量代码块引发的性能下降，但事实证明代码块过多还是会导致浏览器耗费更长的时间来获取页面所需的各模块。再有，模块数量的增加也会拉低压缩效率，因为Zlib等压缩算法使用的是滑动窗口方法执行压缩，就是说单一大文件的压缩效率要明显好于多个小文件。</p><p></p><h2>最终结果</h2><p></p><p></p><p>在向全体Dropbox用户推出Rollup之后，我们发现新项目将JavaScript包缩小了约三分之一，JS脚本总量减少了15%，TTVC也实现了适度改进。我们还通过自动代码分割显著提高了前端开发速度，开发人员现在不必在每次变量时都手动调整捆绑包定义。最后，也可能是最重要的一点在于，我们完成了捆绑基础设施的现代化改造，削减了自2014年以来积累的大量技术债，显著减轻了未来的项目维护负担。</p><p>&nbsp;</p><p>除了令人眼前一亮的实践表现之外，Rollup项目还帮助我们发现了现有架构中的几个瓶颈：例如多个渲染会阻塞RPC，对第三方库的函数调用过多，以及浏览器加载模块依赖性map效率太低等。凭借Rollup丰富的插件生态系统，解决原有代码库中此类瓶颈正变得越来越简单。</p><p>总而言之，全面采用Rollup作为模块捆绑器不仅给性能和生产力带来立竿见影的提升，也将在未来帮助Dropbox实现更为显著的性能改进。</p><p>&nbsp;</p><p></p><h5>原文链接：</h5><p></p><p><a href=\"https://dropbox-tech.translate.goog/frontend/how-we-reduced-the-size-of-our-javascript-bundles-by-33-percent?_x_tr_sl=en&amp;_x_tr_tl=zh-CN&amp;_x_tr_hl=zh-CN&amp;_x_tr_pto=sc\">https://dropbox-tech.translate.goog/frontend/how-we-reduced-the-size-of-our-javascript-bundles-by-33-percent</a>\"</p><p></p><h5>相关阅读：</h5><p></p><p><a href=\"https://xie.infoq.cn/article/e976363d22c7ffd126d9b6eb1\">最佳的 18 个 JAVASCRIPT 前端开发框架和库</a>\"</p><p><a href=\"https://www.infoq.cn/article/2SyNfw6RkyTV4gkRavIQ\">新一波 JavaScript Web 框架</a>\"</p><p><a href=\"https://www.infoq.cn/article/GDc7cryCCPOhQS9FuAKh\">JavaScript 框架大战已结束，赢家只有一个</a>\"</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&amp;mid=2247518116&amp;idx=1&amp;sn=74da7a01805480d6e0bb7f08c0f5ea13&amp;chksm=f95232e7ce25bbf16539c1ef807dfc132e9d72610dbe3d149dbda2db58f2f71163fb1ca6d21f&amp;scene=27#wechat_redirect\">跨过四个时代，JavaScript框架终于可以与原生应用SDK竞争了</a>\"</p>",
    "publish_time": "2023-09-19 12:57:23",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "和Node.js配置地狱说拜拜！Deno 零配置解决方案",
    "url": "https://www.infoq.cn/article/xzjZxV84u118R0GDTPii",
    "summary": "<p></p><p></p><blockquote>在使用Node.js进行构建时，配置问题常常会影响开发人员的工作效率。好在有了Deno，它的零配置、含“电池”设计让恼人麻烦就此讲拜拜。</blockquote><p></p><p>&nbsp;</p><p>在我们启动各种类型的Node repo时，root目录很快就会被配置文件塞满。例如，在最新版本的Next.js中，我们就有next.config.js、eslintrc.json、tsconfig.json和package.json。而在样式那边，还有postcss.config.js和tailwind.config.js。</p><p>&nbsp;</p><p>需要中间件不？加上middleware.ts。错误监控不能少吧？那就再上sentry.server.config.js、sentry.client.config.js和entry.edge.config.js。也别忘了我们的env文件、Git文件和Docker文件……</p><p>&nbsp;</p><p>于是还没等我们缓过神来，repo可能就已经变成了这个样子：</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/99/99333fb94ee56d8dc22fff63865ecdc4.png\" /></p><p></p><p>所有软件都需要配置。毕竟我们终归要用某种方法来设置自己正在使用的项目、工具、插件和软件。但是，真有必要用30个文件来运行单一项目吗？我们怎么就掉进了这么恶心的配置泥潭？</p><p>&nbsp;</p><p>或者说，有没有办法能摆脱困境？</p><p>&nbsp;</p><p></p><h2>配置，但要用上智能默认项</h2><p></p><p></p><p>软件领域没有“银弹”——一切用户的需求都会略有不同。配置能让用户更灵活地根据实际用例，从软件当中汲取最大价值。</p><p>&nbsp;</p><p>但“想用软件？先搞配置”确实是种非常糟糕的用户体验。</p><p>&nbsp;</p><p>咱们以向现有Next.js项目中添加TypeScript为例，看看整个流程要怎么推进。首先，我们需要安装TypeScript和类型：</p><p>&nbsp;</p><p><code lang=\"null\">npm install --save-dev typescript @types/react @types/node</code></p><p>&nbsp;</p><p>之后需要创建自己的&nbsp;tsconfig.json:</p><p>&nbsp;</p><p><code lang=\"null\">touch tsconfig.json</code></p><p>&nbsp;</p><p>接下来，如果大家刚刚开始使用TypeScript、搞不清自己需要什么配置，那肯定要祭起开发者都知道的“秘密武器”——从Stack Overflow上扒一套配置：</p><p>&nbsp;</p><p><code lang=\"null\">{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"esModuleInterop\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"strict\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\"],\n  \"exclude\": [\"node_modules\"]\n}</code></p><p>&nbsp;</p><p>不想手动往项目里添加TypeScript支持？可以试试Deno，它原生支持TypeScript。</p><p>而这，还仅仅是添加了个TypeScript。</p><p>&nbsp;</p><p>高效软件可以通过更智能的默认项来预测用户想要达成的效果。这些“预设选项”能为大多数用户提供经过优化的体验，而且无需手动配置。所以说，先给套能用的配置模板，等确有必要时再要求用户调整才是王道。</p><p>&nbsp;</p><p>其实直接把软件配置页面甩到用户脸上，绝对不利于品牌的声誉、更有损客户信任。设想一下，如果我们第一次使用Gmail，看到的是这样一幅图景：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/12/12cf3c0e14d38b15189495ad53a6030d.png\" /></p><p></p><p>那鬼才想用你谷歌呢，还不如继续留在Hotmail这边。</p><p>&nbsp;</p><p>所以，智能默认项先行，有必要的时候再做配置调整。</p><p>&nbsp;</p><p></p><h2>这些配置文件到底是干啥的？</h2><p></p><p></p><p>咱们再回到之前的列表，这些文件都在那设置啥呢？</p><p>&nbsp;</p><p>Ignore文件&nbsp;(dockerignore,&nbsp;eslintignore,&nbsp;gitignore,&nbsp;prettierignore,&nbsp;styleignore): 它们的作用就是从操作中排除某些文件和目录。它们有助于保持环境清洁、让执行流程更高效。运行命令文件&nbsp;(eslintrc.json,&nbsp;lintstagedrc.json,&nbsp;nvmrc,&nbsp;nycrc,&nbsp;stylelintrc.json,&nbsp;prettierrc.json,&nbsp;swcrc): 运行命令（rc）配置文件负责指定某些命令在运行时的设置或参数，例如eslint、lint-staged等。包文件&nbsp;(package.json,&nbsp;yarn.lock): 这些文件提供的是关于自动化依赖项和脚本的重要信息，从而对项目环境进行统一管理。Next.js文件&nbsp;(middleware.ts,&nbsp;next-env.d.ts,&nbsp;Next.config.js,&nbsp;tsconfig.json): 这些文件管理Next.js应用程序的设置和配置。Docker&nbsp;(Dockerfile,&nbsp;Dockerfile.deploy,&nbsp;docker-compose.yml): 这些文件管理应用程序在容器内的自动部署和扩展配置。其他(editorconfig,&nbsp;happo.js,&nbsp;babel.config.js,&nbsp;playwright.config.ts,&nbsp;sentry.client.config.js,&nbsp;sentry.server.config.js,&nbsp;sentry.properties, ): 这些配置文件负责自定义并管理开发环境中的各方面设置，包括第三方工具和库。</p><p>&nbsp;</p><p>Next.js. Docker. Sentry. Happo. ESLint. npm. Yarn. Playwright. Babel. VSCode. SWC. Stylelint. Prettier. NVM. NYC. lint-staged. Git.</p><p>&nbsp;</p><p>这些工具并不深奥，属于是将Next.js应用程序部署到生产环境所需要的常规集合。但问题是，真需要30个文件那么多吗？</p><p></p><h2>JavaScript生态系统（一般来说）并不强制要求</h2><p></p><p></p><p>虽然如今Node.js主要用于构建网站和Web应用，但它最初的设计目标其实没那么强烈的倾向性，更多是用事件驱动架构来启用异步I/O。但随着Node的流行，JavaScript突然就占领了高地：跟浏览器/DOM、文件系统和Unix交互，构建系统、捆绑、转译，等等。</p><p>&nbsp;</p><p>JavaScript的广泛实用性，在npm注册表中超过200万个模块上得到了深切体现。为了发挥作用，JavaScript模块必须能够支持越来越多的框架、元框架、构建工具等，以便在任何情况下都能针对各种工作流程顺利接入不同项目。最直接的方法当然就是用更广泛的配置文件来保持模块的泛用能力，所以一大堆配置文件体现的其实是JavaScript需要跟多种框架、工具和技术栈配合使用的客观复杂性。</p><p>&nbsp;</p><p>随着越来越多的工具被添加到Node.js项目当中，配置文件不仅变得愈发繁琐，还会降低开发人员的工作效率。</p><p></p><h2>化繁为简</h2><p></p><p></p><p>软件是达成目标的手段，真正高效的软件绝不会“恶心”用户，而是帮助他们快速完成任务。</p><p>&nbsp;</p><p>Node.js最初的构建目标是作为异步I/O、由事件驱动的JavaScript运行时，当时的缔造者并没预料到它会对Web开发的日后变革发挥关键作用（目前，每三个新网页或Web应用中，就有一个用到Node）。但是，当开发人员使用Node构建新产品时，往往需要花费大量时间来整合自己需要的技术栈和工作流程——比如设置TypeScript、设置自己熟悉的测试框架和构建流程等。</p><p></p><p>那有没有一种办法，能让我们的Web构建成果立即投入生产？</p><p>&nbsp;</p><p>这就是Deno项目的意义所在。它是一种具有零配置加智能默认项的Web原生运行时，您可以在开发新项目时即刻享受到它带来的效率提升。它具备原生TypeScript支持能力，因此无需额外花时间做设置。Deno还附带一套强大的工具链，提供内置的格式化、linting质量检查、测试等功能，全部开箱即用。最后，Deno还使用与Web兼容的API，所以如果大家已经在构建Web应用，那上手Deno应该不会有任何难度。</p><p>&nbsp;</p><p>编程的意义就在于此：管理复杂性、化繁为简。所以，让我们携手Deno，告别恼人的配置步骤。</p><p>&nbsp;</p><p></p><h5>原文链接：</h5><p></p><p><a href=\"https://deno.com/blog/node-config-hell\">https://deno.com/blog/node-config-hell</a>\"</p><p></p><h5>相关阅读：</h5><p></p><p></p><p><a href=\"https://xie.infoq.cn/article/be78c75026bf0ede1253828fe\">Node.js 未来发展趋势</a>\"</p><p><a href=\"https://www.infoq.cn/article/juXB8EaoJrlLx4vB7ttD\">Node 之父着急宣布：Deno&nbsp;将迎来重大变革，更好地兼容</a>\"</p><p><a href=\"https://xie.infoq.cn/article/aad4610523c72781f0dd5b5b7\">Node&nbsp;版本控制</a>\"</p><p><a href=\"https://www.infoq.cn/article/9QU4eRfjNmNjidpjRkUI\">Node.js 20 正式发布</a>\"</p>",
    "publish_time": "2023-09-19 12:58:29",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]