[
  {
    "title": "亚马逊云科技推出基于生成式AI的临床文档工具HealthScribe预览版",
    "url": "https://www.infoq.cn/article/8SHsU6p460shd9drTEWg",
    "summary": "<p>最近，亚马逊云科技新推出了一项符合<a href=\"https://en.wikipedia.org/wiki/Health_Insurance_Portability_and_Accountability_Act\">HIPAA</a>\"标准的服务，名为<a href=\"https://aws.amazon.com/healthscribe/\">AWS HealthScribe</a>\"。该服务尚处于预览状态，它可以利用语音识别和生成式人工智能（基于<a href=\"https://aws.amazon.com/bedrock/\">Amazon Bedrock</a>\"）来生成临床文档。</p><p>&nbsp;</p><p>按照该公司的说法，AWS HealthScribe是<a href=\"https://aws.amazon.com/machine-learning/ml-use-cases/conversational-ai/\">会话式</a>\"和<a href=\"https://aws.amazon.com/generative-ai/\">生成式人工智能（AI）</a>\"的结合体，可以减轻编写临床文档的负担并改善咨询体验。借助这项服务，用户可以利用一整套的人工智能功能来加快临床应用中临床文档的编制。</p><p>&nbsp;</p><p>AWS HealthScribe为医疗卫生软件提供商提供了一个API，可以自动生成完整的记录及提取关键的详细信息（如医疗术语和药物），并根据医患之间的讨论创建可输入电子健康记录（EHR）系统的摘要。</p><p>&nbsp;</p><p>例如，在HealthScribe中创建的笔记可以通过人工智能进行补充，包括诸如就诊原因、当前病史、评估和随访等细节。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a9/a9c0b5e197682706be65521de813caf8.png\" /></p><p>示例：医疗卫生软件开发人员可以使用AWS HealthScribe为用户提供的应用程序体验（图片来源：<a href=\"https://aws.amazon.com/blogs/industries/industries-introducing-aws-healthscribe/\">AWS for Industries博文</a>\"）</p><p>&nbsp;</p><p><a href=\"https://aws.amazon.com/blogs/industries/industries-introducing-aws-healthscribe/\">AWS for Industries博文</a>\"的作者是这样描述AWS HealthScribe的好处的：</p><p></p><blockquote>通过功能整合，AWS HealthScribe减少了训练、优化、集成单个的人工智能服务和构建自定义模型的需求，加快了实施速度。客户可以专注于为最终用户提供价值，而不必费力优化单个的AI组件。</blockquote><p></p><p>&nbsp;</p><p>另一方面，虽然该服务符合HIPAA，但公司必须签署一份称为商业伙伴附录的合同。对此，<a href=\"https://aws.amazon.com/compliance/hipaa-compliance/\">AWS的文档</a>\"做了详细说明，只有这样才能完全符合HIPAA。</p><p>&nbsp;</p><p>除了AWS，微软和谷歌也有像AWS HealthScribe这样的医疗卫生服务。例如，云服务<a href=\"https://www.microsoft.com/en-us/research/project/health-bot/\">Microsoft Healthcare Bot</a>\"就使得医疗卫生组织能够构建和部署可用于各种目的的会话代理，例如分诊和症状检查。还有<a href=\"https://cloud.google.com/healthcare-api\">Google Cloud Healthcare API</a>\"，该服务提供了一套基于Google Cloud Platform构建的专门用于医疗卫生领域的产品和服务。</p><p>&nbsp;</p><p><a href=\"https://twitter.com/Berci\">Bertalan Meskó</a>\"是医学未来学家协会（Medical Futurist Institute）的主任、哲学和医学博士，他在<a href=\"https://www.linkedin.com/posts/bertalanmesko_amazon-launches-generative-ai-based-clinical-activity-7090247186696802304-TeK2\">LinkedIn的一篇帖子</a>\"中评论道：</p><p></p><blockquote>看到科技巨头进军医疗卫生领域非常令人兴奋，我们都应该为此感到高兴，因为他们比医疗卫生/制药公司更擅长创造人们想要的技术。</blockquote><p></p><p>&nbsp;</p><p>此外，Batch首席执行官<a href=\"https://twitter.com/Virtualgoodz/status/1684892459682160640\">Simon Dawlat在推特上写到</a>\"：</p><p></p><blockquote>随着亚马逊加入微软/谷歌的竞争行列推出HealthScribe，基于人工智能的临床文档API淘金热正如火如荼地进行着——然而，与那些高度专注的公司（如@NablaTech）所提供的产品相比，所有FAANG的产品都显得有些尴尬。&nbsp;比赛开始了！</blockquote><p></p><p>&nbsp;</p><p><a href=\"https://www.nuance.com/healthcare.html\">Nuance</a>\"和<a href=\"https://www.cerner.com/\">Cerner Corporation</a>\"（Oracle）等公司也提供了其他一些类似的解决方案，前者为医疗卫生和客户互动提供了对话式人工智能，后者则是医疗卫生信息技术解决方案、服务、设备和硬件供应商。</p><p>&nbsp;</p><p>最后，AWS HealthScribe目前仅在美国东部（弗吉尼亚州北部）地区可用，客户可以<a href=\"https://pages.awscloud.com/GLOBAL-other-PT-AWS-HealthScribe-Preview-2023-reg.html\">填写表单完成注册</a>\"后访问该服务。了解定价细节可以查看<a href=\"https://aws.amazon.com/healthscribe/pricing/\">定价页面</a>\"，了解其他细节可以查阅<a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/health-scribe.html\">文档</a>\"。</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/08/aws-healthscribe-ai-preview/\">https://www.infoq.com/news/2023/08/aws-healthscribe-ai-preview/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/2SjM2FZqw7TB6SdxDaW7\">亚马逊云科技re:Inforce 2023中国站：企业如何提高数据、模型和应用安全？</a>\"</p><p><a href=\"https://www.infoq.cn/article/bHbaxQSIexCa63uzkJGl\">降本增效：Grab如何在亚马逊云科技上将Kafka消费者流量成本降到零</a>\"</p>",
    "publish_time": "2023-09-19 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "探寻互联网发展：如何利用“大模型+大数据”加速产业革新？ | 华为云联创营 MVP 专访",
    "url": "https://www.infoq.cn/article/8NZ6uCqWXg8W8OZqisGa",
    "summary": "<p>随着互联网行业的发展进入新阶段，互联网企业正在积极寻求外部增长机会，以推动业务的持续创新。在消费互联网时代，大多平台都是通过流量变现，然而当前互联网红利逐渐减少，“在保证流量基础上，降本增效的同时还要提高服务质量”成为了互联网平台角逐下半场的关键点，各大互联网平台向产业互联网转型已成为必然趋势。</p><p></p><p>更注重企业与产业的高质量发展的“产业互联网”，力求通过一切手段优化资源配置、降低交易成本、提高生产和服务效率。其中，大模型技术是推动消费互联网向产业互联网转型的关键技术之一。基于大模型，企业可以更加精准地预测用户需求，提供个性化的服务，并更好地优化生产和服务流程，提高生产效率和质量，成为了产业存量变革的来源，而企业也据此寻找到了第二增长曲线。可以说，大模型技术的发展将加速互联网产业升级。</p><p></p><p>大模型发展的前置条件是大数据技术的发展，超大参数规模的 AI 模型需要海量数据提供训练资源。行内人普遍认为，“大模型 + 大数据”的组合就像孪生双子，是推动世界向全面数字化目标迈进不可或缺的重要力量。在这样的背景下，很多企业技术先行者都正在积极努力，竭尽全力地将大模型 + 大数据的澎湃能量运用到生产实践中，实现真正的“降本增效、提升客户价值、改善用户体验”。在这些技术先行者中有这样一群人，他们有一个共同的身份——<a href=\"https://www.infoq.cn/article/ws2KFcwij5lcTV1v9WaU\">华为云联创营 MVP</a>\" （以下简称“ MVP”）。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/54/54165e02e7301053d5107e3f497d3021.jpeg\" /></p><p></p><p>“MVP 计划” 于 2023 年 3 月正式发布，经过重重选拔，数十位来自行业头部企业的 MVP 成员脱颖而出。MVP 的定位是“产业数字化的实践者”、“创新技术的布道师”、“不断探索边界的实干家”，旨在从产业数字化的实际问题出发，携手共探促进更多行业解决方案的孵化，丰富行业技术生态，让数字化价值更普惠共享、更公平可及。近期，InfoQ 与其中 2 位 MVP 代表成员围绕“AI 大模型 + 大数据”主题进行了交流， 一起探索了 MVP 们背后的故事。</p><p></p><p></p><h2>一、37 手游技术总监陶学诚：“大模型技术创新需要行业共同探索”</h2><p></p><p></p><p>37 手游是三七互娱集团旗下专注于移动游戏运营的标杆品牌，累计运营超过 2000 款游戏。作为 37 手游技术总监，陶学诚重构了公司原有的数据系统，在公司事业群层面实施了数字化迭代，构建了完整的数据平台，同时积极打通内外部数据通道。目前，他正在带领 37 手游技术团队，以公司事业群数字化转型工作为基础，全面推动产业数字化进程。</p><p></p><p>37 手游是华为云联创营活动的“常客”，陶学诚通过第七期<a href=\"https://www.infoq.cn/article/HG6u2XkBQsRbHAcx8c07\">华为云</a>\"联创营 CTO 领航班了解到了“MVP 计划”。谈及从“了解”到成为该计划的一员，他第一时间想到的是——与华为云联创营共同探索、共同成长。他负责的团队之前主要面向公司内部，华为云联创营为其提供了与外界加强交流学习的机会。他希望通过这样的形式提升自己和团队在行业内的技术影响力，同时也能收获更多行业优秀实践反哺企业，帮助团队进一步提升。所以当该计划“号召各领域的‘价值专家’加入到计划中，与华为云联创营一起进行第三方公益技术沙龙布道、技术交流，积极总结个人实践经验，完成产业技术布道，为更多人、企业乃至产业发展赋能”时，他毫无犹豫地选择加入了该计划。</p><p></p><p>如今，AI 和大模型技术在手游行业的应用已经风生水起，陶学诚也在积极为行业大模型的构建做出自己的努力。目前他观察到，手游领域主要有三大 AI 应用场景——游戏资产的 AI 绘图生成、在游戏内容中构建可以与玩家进行自然对话的 NPC 或虚拟玩家、代码的 AI 辅助编程。此外，大模型在文案生成、营销策划、智能客服等层面也开始有实践应用，同时“打击黑产”工作中也可以利用 AI 技术对其进行行为识别。</p><p></p><p>37 手游作为游戏发行商，主要希望通过大模型技术来提升运营效率，并丰富游戏内容生态。在具体实践中，37 手游团队主要使用大模型来生成游戏发行运营过程中所需的大量宣传素材、优化数据分析管道。与此同时，团队还发现，大模型和其他 AI 技术在内容生态改善方面潜力十分突出，比如运营方可以使用 AI 技术制作虚拟玩家，帮助真实玩家加快拼局速度，改善持续游玩体验；又比如，基于 AI 的内容过滤系统则可以有效管制游戏内的对话交流平台，实时屏蔽恶意、负面的聊天内容。</p><p></p><p>大模型的应用与大数据是相辅相成的，37 手游之前就在陶学诚的主导下构建了自己的数据平台，获得了更快的数据分析能力，为将来的大模型应用打下了良好基础。随着数据规模不断扩大，模型训练会变得更加容易，效果也会更加令人满意。</p><p></p><p>目前陶学诚并没有计划带领团队自研底层大模型，而是选择了与行业优秀的大模型合作构建上层应用级私有模型。他认为，AI 与公有云的能力是高度绑定的，大部分公司的运维能力和基础设施更新速度都很难跟得上公有云迭代速度。正因如此，对于 37 手游这样的企业来说，基于行业优秀大模型展开研发可以有效降低门槛，使企业可以将主要精力集中在模型的行业应用，以解决企业运营中存在的实际问题。</p><p></p><p>他在采访中也提到，“目前大模型的应用还存在很多实际问题。例如，基于 AI 辅助生成的代码可能存在一些难以预期的 Bug，因此不太适用于同业务强挂钩、问题描述不清的复杂场景。整个行业对大模型的应用落地都处于探索阶段，需要参与其中的企业多尝试、多分享，才能推动行业在这一方面持续发展，解决现存的诸多挑战。”</p><p></p><p>从业者的观念转变是陶学诚眼中大模型实践应用的另一大障碍。在大量以编码为工作的技术团队中，编码能力被认为是一项很有壁垒和创意的工作，而当 AI 编码工具可以很快速的写出很优质代码的时候，传统的程序开发者往往对大模型的应用存在抵触心理。如何转变他们的思路，让他们能够在工作中自然而然地运用 AI 技术提升效率，是行业共同面对的难题。他表示，希望在未来能够基于自己手中在做的技术实践，去推动解决大模型在行业应用中出现的种种难题。他坚信：“随着上述问题在未来逐渐得到解决，AI 大模型技术在游戏产业中的潜力是不可估量的。”</p><p></p><p></p><h2>二、汽车之家 CTO 项碧波：“构建大模型技术与行业应用间的桥梁”</h2><p></p><p></p><p>项碧波在搜索引擎、商业广告、推荐系统、自然语言处理及数据挖掘领域具备丰富的经验。加入汽车之家后致力于打造企业的数据和技术能力，构建用户数据生态和经营数据生态，助力主机厂与经销商业务流程数字化，赋能汽车产业数字化转型。</p><p></p><p>作为汽车之家 CTO，项碧波需要为“一年一度”的 818 晚会做好技术支持工作，华为云在其中提供的一系列“高可用”能力，给他留下了深刻的印象。后来随着合作的深入，他多次参加华为云联创营的活动，华为云联创营过去为不同行业和领域的专家创造了很多分享机会，这也为他带来了不少新启发，让汽车之家获取到了很多可用资源。当他在今年 3 月了解到了“MVP 计划”，一下就被该计划驱动产业数字化发展的理念所击中，而他过去也一直希望通过自己的努力来推动技术发展，两者不谋而合，第一时间便加入到了计划中来。</p><p></p><p>一直以来，汽车之家的企业定位都是“沟通消费者与汽车厂商的门户与桥梁”。因此，项碧波带领的技术团队非常重视 AI 技术创新，并在日常经营中有着大量应用。例如，汽车之家的 AI 智能推荐可以为几千万用户提供 200 多个智能推荐场景，在数十亿内容中快速、精准地提供汽车资讯。团队还基于大语言模型和多模态内容理解等技术建立了多层级内容标签体系，提升推荐系统的精准度与质量。此外，汽车之家的智能客服、智能搜索服务应用了自然语言处理、机器学习等技术加快响应速度、解决用户问题，并运用大数据分析和 AI 预测能力的智能营销系统为广告投放创造了更高的转化渠道。</p><p></p><p>2022 年，汽车之家品牌代言人谷爱凌的“数字人“形象与汽车之家 AI 体验官宫玖羽相继上线。谈到这两位数字人，项碧波最自豪的是团队在行业现有技术的基础上做了很多突破。首先，数字人的背后都有着汽车之家大语言模型提供的智能化支撑，能够帮助用户解答很多专业汽车领域的问题；其次，汽车之家在语音识别与合成方面的积累也运用到了数字人上，甚至能够准确识别四川话、粤语等方言；同时，为解决用户设备性能参差不齐的问题，数字人还运用了云端 3D 渲染技术来为用户带来高清、流畅的一致体验。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/9c/9ca6f9466c72578686b8f2240b7ea4f1.jpeg\" /></p><p></p><p>全新打造的能源空间站是汽车之家 2022 年实现的另一大创新成果。空间站中的全息体验仓利用全息投影技术，可以让用户一次体验多款经过数字建模的车型，选购效率大大提升。同时大数据与 AI 智能语音的赋能确保了全息投影的车体细节准确，也为用户带来了更真实的互动体验。</p><p></p><p>在以上提到的多个实践过程中，汽车之家技术团队充分意识到了 AI 技术对业务增效与企业长期发展的重要意义，项碧波也非常重视“大模型”这样的行业创新，带领团队在这一领域投入了大量资源。汽车之家目前正在内测一款名为“仓颉”的自研行业大模型，该模型是汽车之家技术团队将大模型技术运用在汽车行业垂直领域的成果，主要解决用户选车决策时面临的问题。对此，项碧波介绍到：“未来用户无需通过传统的搜索、浏览、筛选过程来选择车型，只需直接告诉了仓颉自己的用车场景、家庭人口、日常通勤距离、成本预算等信息，模型就可以直接给出非常适合的选项。”</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/cd/cd432ad9a26b74830e65521d57cdc578.png\" /></p><p></p><p>据悉，仓颉大模型在海量通用数据学习的基础上，利用汽车之家 18 年来积累的亿级别之家自有的高质量汽车领域专业数据，通过数据的筛选和有效利用增强了汽车领域模型的理解能力，在汽车领域问答打分评测仓颉大语言模型优于 ChatGPT （提升 13%）。值得一提的是，该模型在汽车垂直领域训练中，平衡通用能力和汽车领域能力，减少在通用的能力遗忘，并对训练的效率进行了多方法提升，使得该模型在通用能力方面，与开源的同级别模型相比，性能显著提升。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b6/b63dad4174cb709bf57e6086e241cbf6.png\" /></p><p></p><p>此外，汽车之家还开发了基于全链路智能营销的 AIGC 模型，覆盖了文案策划、创意视频内容定制等营销环节，可以帮助车企降本增效，带来更高的销售转化率。接下来，汽车之家还将进一步拓展大模型 + 大数据的应用场景，围绕具体的业务需求推动应用落地。项碧波认为，“汽车之家打造的大模型与相关产品相当于行业的一种基础设施，可以为 AI 产业和汽车行业应用之间建立起一座桥梁，降低 B 端和 C 端客户应用先进技术的门槛。”</p><p></p><p></p><h2>三、“互联网产业升级”是智能化时代的商业变革</h2><p></p><p></p><p>虽然以上两位 MVP 来自两个不同的行业，但他们对于大模型 + 大数据的行业应用却有着很多共同的观点。两位专家都高赞了大模型技术在垂直领域的应用潜力，并纷纷基于各自的业务实践，努力将这种潜力化为可衡量的价值。同时，两位技术专家都认可大数据与大模型应用“相辅相成”的关系，他们都认为——高水平的大数据底座是企业推进互联网产业化进程的前提，也是大模型能力落地的重要保障。</p><p></p><p>在这个背景下，企业不仅需要重视技术创新和应用，更需要在行业交流中持续吸收新知识、新成果，积极推动这些技术的业务落地和发展。但还需要注意的是，当前大模型正处于技术发展早期阶段，其在行业内的落地刚刚开始，无论是大模型研发厂商还是使用大模型的用户都缺乏足够的经验和实践。另一方面，大模型的产业应用潜力巨大，有希望充分调动现有海量数据的内在价值、简化工作流程、加强用户体验，但大模型在实际部署中遇到的很多问题和挑战也是难以预期的。而“MVP 计划”恰恰给了来自不同行业的企业技术贡献者一个推动行业“同交流、共使力”的机会，大家一起面对挑战，共同推进产业数字化发展。目前，MVP 计划第三期学员已启动招募工作，期待更多行业专家加入。</p><p></p><p>正如两位专家在访谈中所提到的那样，<a href=\"https://www.infoq.cn/article/FgogdjehRCRt9QjD4fMG\">华为云</a>\"在与伙伴的合作过程中展现的“开放共享、持续创新、一直与伙伴保持前沿的技术讨论”和“赋能千行百业的具体行动”是吸引各家企业加入华为云联创营的原因所在。就比如现在华为云的盘古大模型已迭代到了 3.0 版本，为大模型技术赋能千行百业按下了加速键。汽车之家 CTO 项碧波认为盘古大大降低了行业企业利用大模型技术改善业务的门槛；37 手游技术总监陶学诚也认为盘古这样的大模型未来将帮助越来越多的产业实现数智化重构。可以说，随着 AI 大模型、大数据等技术的发展，互联网与产业的融合将进一步加快。</p><p></p><p>众所周知，互联网产业升级不仅仅是技术的升级，更是一场深层次的商业变革，在这过程中，产业数字化需求端与数字技术供应侧，还存在着一条巨大的鸿沟，需要技术创新者和产业数字化深耕者不断双向奔赴。在这背景下，华为云将于 9 月 21 日，华为全联接大会 2023 期间，举办“华为云互联网产业峰会 &amp;AIGC 高峰论坛”，与互联网先锋企业、产业专家、技术大咖共探互联网产业升级之道，邀请各界同仁一起思想碰撞。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c2/c26aa7a504e9e7250b0731e9d90b81d6.jpeg\" /></p><p></p>",
    "publish_time": "2023-09-19 08:30:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Java并发Map的面试指南：线程安全数据结构的奥秘",
    "url": "https://www.infoq.cn/article/3c8eb933384aba7b39a2ff757",
    "summary": "<p></p><h2>简介</h2><p></p><p>在计算机软件开发的世界里，多线程编程是一个重要且令人兴奋的领域。然而，与其引人入胜的潜力相伴而来的是复杂性和挑战，其中之一就是处理共享数据。当多个线程同时访问和修改共享数据时，很容易出现各种问题，如竞态条件和数据不一致性。</p><p></p><p>本文将探讨如何在Java中有效地应对这些挑战，介绍一种强大的工具——并发Map，它能够帮助您管理多线程环境下的共享数据，确保数据的一致性和高性能。我们将深入了解Java中的并发Map实现，包括ConcurrentHashMap和ConcurrentSkipListMap，以及其他相关的知识点。无论您是初学者还是有经验的开发人员，都会在本文中找到有关并发编程的有用信息，以及如何在项目中应用这些知识的指导。让我们开始这个令人兴奋的多线程之旅吧！</p><p></p><h2>并发问题</h2><p></p><p>在深入了解并发Map之前，让我们首先探讨一下多线程编程中常见的问题。在多线程环境中，多个线程可以同时访问和修改共享数据，这可能导致以下问题：</p><p></p><h3>1. 竞态条件</h3><p></p><p>竞态条件是指多个线程试图同时访问和修改共享数据，而最终的结果取决于线程的执行顺序。这种不确定性可能导致不一致的结果，甚至是程序崩溃。</p><p></p><p><code lang=\"text\">class Counter {\n    private int value = 0;\n\n    public void increment() {\n        value++;\n    }\n\n    public int getValue() {\n        return value;\n    }\n}\n</code></p><p></p><p>在上面的示例中，如果两个线程同时调用increment方法，可能会导致计数器的值不正确。</p><p></p><h3>2. 数据不一致性</h3><p></p><p>在多线程环境中，数据的不一致性是一个常见问题。当一个线程修改了共享数据，其他线程可能不会立即看到这些修改，因为缓存和线程本地内存的存在。这可能导致线程之间看到不同版本的数据，从而引发错误。</p><p></p><h3>为什么需要并发Map？</h3><p></p><p>现在，您可能会想知道如何解决这些问题。这就是并发Map派上用场的地方。并发Map是一种数据结构，它专为多线程环境设计，提供了一种有效的方式来处理共享数据。它允许多个线程同时读取和修改数据，同时确保数据的一致性和线程安全性。</p><p></p><h2>Java并发Map的概述</h2><p></p><p>现在，让我们深入了解Java标准库中提供的不同并发Map实现，以及它们的特点和适用场景。</p><p></p><h3>1. ConcurrentHashMap</h3><p></p><p>ConcurrentHashMap 是Java标准库中最常用的并发Map实现之一。它使用分段锁（Segment）来实现高并发访问，每个分段锁只锁定一部分数据，从而降低了锁的争用。这使得多个线程可以同时读取不同部分的数据，提高了性能。</p><p></p><p><code lang=\"text\">ConcurrentMap map = new ConcurrentHashMap&lt;&gt;();\nmap.put(key, value);\nValueType result = map.get(key);\n</code></p><p></p><p>ConcurrentHashMap适用于大多数多线程应用程序，尤其是读多写少的情况。</p><p></p><h3>2. ConcurrentSkipListMap</h3><p></p><p>ConcurrentSkipListMap 是另一个有趣的并发Map实现，它基于跳表（Skip List）数据结构构建。它提供了有序的映射，而不仅仅是键值对的存储。这使得它在某些情况下成为更好的选择，例如需要按键排序的情况。</p><p></p><p><code lang=\"text\">ConcurrentMap map = new ConcurrentSkipListMap&lt;&gt;();\nmap.put(key, value);\nValueType result = map.get(key);\n</code></p><p></p><p>ConcurrentSkipListMap适用于需要有序映射的情况，它在一些特定应用中性能表现出色。</p><p></p><h3>3. 其他Java并发Map实现</h3><p></p><p>除了ConcurrentHashMap和ConcurrentSkipListMap之外，Java生态系统还提供了其他一些并发Map实现，例如Google Guava库中的ConcurrentMap实现，以及Java 8中对ConcurrentHashMap的增强功能。另外，还有一些第三方库，如Caffeine和Ehcache，提供了高性能的缓存和并发Map功能。</p><p></p><h2>ConcurrentHashMap详解</h2><p></p><p>现在，让我们深入研究ConcurrentHashMap，了解它的内部实现和线程安全机制。</p><p></p><h3>内部实现</h3><p></p><p>ConcurrentHashMap的内部实现基于哈希表和分段锁。它将数据分成多个段（Segment），每个段都是一个独立的哈希表，拥有自己的锁。这意味着在大多数情况下，不同段的数据可以被不同线程同时访问，从而提高了并发性能。</p><p></p><h3>常用操作</h3><p></p><p>ConcurrentHashMap支持许多常见的操作，包括put、get、remove等。下面是一些示例：</p><p></p><p><code lang=\"java\">ConcurrentMap map = new ConcurrentHashMap&lt;&gt;();\nmap.put(key, value);\nValueType result = map.get(key);\nmap.remove(key);\n</code></p><p></p><p>这些操作是线程安全的，多个线程可以同时调用它们而不会导致竞态条件。</p><p></p><h3>示例代码</h3><p></p><p>以下是一个简单的示例，演示如何在多线程环境中使用ConcurrentHashMap来管理共享数据：</p><p></p><p><code lang=\"text\">import java.util.concurrent.*;\n\npublic class ConcurrentMapExample {\n    public static void main(String[] args) {\n        ConcurrentMap map = new ConcurrentHashMap&lt;&gt;();\n\n        // 创建多个线程并发地增加计数器的值\n        int numThreads = 4;\n        ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n\n        for (int i = 0; i &lt; numThreads; i++) {\n            executor.submit(() -&gt; {\n                for (int j = 0; j &lt; 1000; j++) {\n                    map.merge(\"key\", 1, Integer::sum);\n                }\n            });\n        }\n\n        executor.shutdown();\n        try {\n            executor.awaitTermination(1, TimeUnit.MINUTES);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        System.out.println(\"Final Count: \" + map.get(\"key\")); // 应该是4000\n    }\n}\n</code></p><p></p><p>在上面的示例中，我们创建了一个ConcurrentHashMap来存储计数器的值，并使用多个线程并发地增加这个值。最终，我们可以得到正确的结果，而不需要显式的锁定或同步操作。</p><p></p><p>ConcurrentHashMap的强大之处在于它提供了高性能的并发操作，同时保持了数据的一致性和线程安全性。在多线程应用程序中，它是一个强大的工具，可用于管理共享数据。</p><p></p><h2>ConcurrentSkipListMap的用途</h2><p></p><p>在本节中，我们将探讨ConcurrentSkipListMap的独特之处以及在某些情况下为什么选择它。同时，我们将演示如何将有序映射与并发性结合使用。</p><p></p><h3>独特之处</h3><p></p><p>ConcurrentSkipListMap是基于跳表（Skip List）数据结构构建的，与传统的哈希表不同。它有以下特点：</p><p></p><p>有序性： ConcurrentSkipListMap中的元素是有序的，按键进行排序。这使得它非常适合需要按键顺序访问数据的场景。高并发性： 跳表的结构允许多个线程并发地访问和修改数据，而不需要像分段锁那样精细的锁定。动态性： ConcurrentSkipListMap具有自动调整大小的能力，因此它可以在数据量变化时保持高效性能。</p><p></p><h3>示例</h3><p></p><p>下面是一个示例，演示了如何使用ConcurrentSkipListMap来存储一组学生的分数，并按照分数从高到低进行排序：</p><p></p><p><code lang=\"text\">import java.util.concurrent.ConcurrentSkipListMap;\n\npublic class StudentScores {\n    public static void main(String[] args) {\n        ConcurrentSkipListMap scores = new ConcurrentSkipListMap&lt;&gt;();\n\n        scores.put(90, \"Alice\");\n        scores.put(80, \"Bob\");\n        scores.put(95, \"Charlie\");\n        scores.put(88, \"David\");\n\n        // 遍历并输出按分数排序的学生名单\n        scores.descendingMap().forEach((score, name) -&gt; {\n            System.out.println(name + \": \" + score);\n        });\n    }\n}\n</code></p><p></p><p>在上面的示例中，我们创建了一个ConcurrentSkipListMap来存储学生的分数和姓名，并使用descendingMap()方法按照分数从高到低遍历和输出学生名单。这展示了ConcurrentSkipListMap在需要有序映射的情况下的优势。</p><p></p><p>ConcurrentSkipListMap通常用于需要高并发性和有序性的场景，例如在线排行榜、事件调度器等。然而，它的性能可能会略低于ConcurrentHashMap，具体取决于使用情况和需求。</p><p></p><h2>其他Java并发Map实现</h2><p></p><p>除了Java标准库中的ConcurrentHashMap和ConcurrentSkipListMap之外，还有其他一些Java并发Map实现，它们提供了不同的特性和适用场景。</p><p></p><h3>1. Google Guava库中的ConcurrentMap</h3><p></p><p>Google Guava库提供了一个名为MapMaker的工具，用于创建高性能的并发Map。这个工具允许您配置各种选项，例如并发级别、过期时间和数据清理策略。这使得它非常适合需要自定义行为的场景。</p><p></p><p><code lang=\"text\">ConcurrentMap map = new MapMaker()\n    .concurrencyLevel(4)\n    .expireAfterWrite(10, TimeUnit.MINUTES)\n    .makeMap();\n</code></p><p></p><h3>2. Java 8中的ConcurrentHashMap增强功能</h3><p></p><p>Java 8引入了一些对ConcurrentHashMap的增强功能，包括更好的并发性能和更丰富的API。其中一个重要的改进是引入了compute和computeIfAbsent等方法，使得在并发环境中更容易进行复杂的操作。</p><p></p><p><code lang=\"text\">ConcurrentMap map = new ConcurrentHashMap&lt;&gt;();\n\nmap.compute(key, (k, v) -&gt; {\n    if (v == null) {\n        return initializeValue();\n    } else {\n        return modifyValue(v);\n    }\n});\n</code></p><p></p><p>这些增强功能使得ConcurrentHashMap更加强大和灵活，适用于各种多线程应用程序。</p><p></p><h3>3. 第三方并发Map库</h3><p></p><p>除了标准库和Guava之外，还有一些第三方库提供了高性能的并发Map实现，例如Caffeine和Ehcache。这些库通常专注于缓存和数据存储领域，并提供了丰富的功能和配置选项，以满足不同应用程序的需求。</p><p></p><h2>性能考虑</h2><p></p><p>在使用并发Map时，性能是一个关键考虑因素。以下是一些性能优化策略，可帮助您充分利用并发Map的潜力。</p><p></p><p>调整并发级别</p><p></p><p>大多数并发Map实现允许您调整并发级别，这决定了底层数据结构中的分段数量。较高的并发级别通常意味着更多的分段，从而减少了锁争用。但请注意，过高的并发级别可能会导致内存开销增加。在选择并发级别时，需要根据实际负载和硬件配置进行评估和测试。</p><p></p><p>选择合适的哈希函数</p><p></p><p>并发Map的性能与哈希函数的选择密切相关。好的哈希函数应该分散键的分布，以减少碰撞（多个键映射到同一个分段的情况）。通常，Java标准库中的并发Map会提供默认的哈希函数，但如果您的键具有特殊的分布特征，考虑自定义哈希函数可能会提高性能。</p><p></p><p>使用合适的数据结构</p><p></p><p>除了ConcurrentHashMap和ConcurrentSkipListMap之外，还有其他并发数据结构，如ConcurrentLinkedQueue和ConcurrentLinkedDeque，它们适用于不同的应用场景。选择合适的数据结构对于性能至关重要。例如，如果需要高效的队列操作，可以选择ConcurrentLinkedQueue。</p><p></p><p>性能测试和比较</p><p></p><p>在项目中使用并发Map之前，建议进行性能测试和比较，以确保所选的实现能够满足性能需求。可以使用基准测试工具来评估不同实现在不同工作负载下的性能表现，并根据测试结果做出明智的选择。</p><p></p><p>在多线程应用程序中，性能问题可能随着并发程度的增加而变得更加复杂，因此性能测试和调优是确保系统稳定性和高性能的关键步骤。</p><p></p><p>性能是多线程应用程序中的关键问题之一，了解并发Map的性能优化策略对于构建高性能的多线程应用程序至关重要。选择适当的并发Map实现、调整并发级别、选择良好的哈希函数以及进行性能测试都是确保应用程序能够充分利用多核处理器的重要步骤。</p><p></p><h2>分布式并发Map</h2><p></p><p>在分布式系统中，处理并发数据访问问题变得更加复杂。多个节点可能同时尝试访问和修改共享数据，而这些节点可能分布在不同的物理位置上。为了解决这个问题，可以使用分布式并发Map。</p><p></p><h3>分布式并发Map的概念</h3><p></p><p>分布式并发Map是一种数据结构，它允许多个节点在分布式环境中协同工作，共享和操作数据。它需要解决网络延迟、数据一致性和故障容忍等问题，以确保数据的可靠性和正确性。</p><p></p><h3>开源分布式数据存储系统</h3><p></p><p>有一些开源分布式数据存储系统可以用作分布式并发Map的基础，其中一些常见的包括：</p><p></p><p>Apache ZooKeeper： ZooKeeper是一个分布式协调服务，提供了分布式数据结构和锁。它可以用于管理共享配置、协调分布式任务和实现分布式并发Map。Redis： Redis是一个内存存储数据库，它支持复杂的数据结构，包括哈希表（Hash）和有序集合（Sorted Set），可以用于构建分布式并发Map。Apache Cassandra： Cassandra是一个高度可扩展的分布式数据库系统，它具有分布式Map的特性，可用于分布式数据存储和检索。</p><p></p><h3>分布式Map的挑战</h3><p></p><p>分布式并发Map面临一些挑战，包括：</p><p></p><p>一致性和可用性： 在分布式环境中，维护数据的一致性和可用性是一项艰巨的任务。分布式系统需要解决网络分区、故障恢复和数据同步等问题，以确保数据的正确性和可用性。性能： 分布式Map需要在不同节点之间传输数据，这可能会引入网络延迟。因此，在分布式环境中优化性能是一个重要的考虑因素。并发控制： 多个节点可能同时尝试访问和修改数据，需要实现适当的并发控制机制，以避免冲突和数据不一致性。</p><p></p><h3>结合分布式Map与其他并发数据结构</h3><p></p><p>在构建复杂的多线程应用程序时，通常需要将分布式Map与其他并发数据结构结合使用。例如，可以将分布式Map用于跨节点的数据共享，同时使用本地的ConcurrentHashMap等数据结构来处理节点内的并发操作。</p><p></p><p>在分布式系统中，设计和实现分布式Map需要深入了解分布式系统的原理和工具，以确保数据的一致性和可用性。同时，也需要考虑数据的分片和分布策略，以提高性能和扩展性。</p><p></p><h2>将并发Map与其他并发数据结构结合使用</h2><p></p><p>在多线程应用程序中，通常需要将并发Map与其他并发数据结构结合使用，以构建复杂的多线程应用程序并解决各种并发问题。以下是一些示例和最佳实践，说明如何将它们结合使用。</p><p></p><h3>1. 并发队列</h3><p></p><p>并发队列（Concurrent Queue）是一种常见的数据结构，用于在多线程环境中进行数据交换和协作。可以使用并发队列来实现生产者-消费者模式，从而有效地处理数据流。</p><p></p><p><code lang=\"text\">ConcurrentQueue queue = new ConcurrentLinkedQueue&lt;&gt;();\n\n// 生产者线程\nqueue.offer(item);\n\n// 消费者线程\nItem item = queue.poll();\n</code></p><p></p><h3>2. 信号量</h3><p></p><p>信号量是一种用于控制并发访问资源的机制。它可以用于限制同时访问某个资源的线程数量。</p><p></p><p><code lang=\"text\">Semaphore semaphore = new Semaphore(maxConcurrentThreads);\n\n// 线程尝试获取信号量\ntry {\n    semaphore.acquire();\n    // 执行受信号量保护的操作\n} catch (InterruptedException e) {\n    e.printStackTrace();\n} finally {\n    semaphore.release();\n}\n</code></p><p></p><h3>3. 读写锁</h3><p></p><p>读写锁是一种用于管理读写操作的锁机制，它允许多个线程同时读取数据，但只允许一个线程写入数据。</p><p></p><p><code lang=\"text\">ReadWriteLock lock = new ReentrantReadWriteLock();\n\n// 读取操作\nlock.readLock().lock();\ntry {\n    // 执行读取操作\n} finally {\n    lock.readLock().unlock();\n}\n\n// 写入操作\nlock.writeLock().lock();\ntry {\n    // 执行写入操作\n} finally {\n    lock.writeLock().unlock();\n}\n</code></p><p></p><h2>最佳实践和注意事项</h2><p></p><p>在多线程编程中，遵循最佳实践和注意事项是确保应用程序的稳定性和性能的关键。以下是一些关键的最佳实践和注意事项：</p><p></p><p>避免锁定整个Map： 尽量只锁定需要修改的部分数据，以减小锁的粒度，提高并发性能。例如，使用分段锁或读写锁来限制对特定部分数据的访问。考虑迭代器的安全性： 当在多线程环境中遍历并发Map时，需要确保迭代器的安全性。某些操作可能需要锁定整个Map来确保迭代器的正确性。避免空值： 注意处理并发Map中的空值。使用putIfAbsent等方法来确保值不为空。异常处理： 在多线程环境中，异常处理尤为重要。确保捕获和处理异常，以避免线程崩溃和数据不一致性。性能测试和调优： 在实际项目中，性能测试和调优是至关重要的步骤。根据实际需求进行性能测试，并根据测试结果进行必要的调整。文档和注释： 编写清晰的文档和注释，以便其他开发人员理解并发Map的使用方式和注意事项。线程安全编程： 线程安全编程是多线程应用程序的基础。确保您的代码符合线程安全原则，避免共享数据的直接访问，使用合适的同步机制来保护共享数据。异常情况处理： 考虑如何处理异常情况，例如死锁、超时和资源不足。实现适当的错误处理和回退策略。监控和日志记录： 添加监控和日志记录以跟踪应用程序的性能和行为。这可以帮助您及时发现问题并进行调整。并发安全性检查工具： 使用工具和库来辅助检查并发安全性问题，例如静态分析工具和代码审查。</p><p></p><p>最后，不要忘记线程安全编程的基本原则：最小化共享状态，最大化不可变性。尽量减少多个线程之间的共享数据，而是将数据不可变化或限制在需要同步的最小范围内。这将有助于减少竞态条件和数据不一致性的可能性。</p><p></p><h2>总结</h2><p></p><p>本文深入探讨了并发Map的概念、实现和性能优化策略。我们介绍了Java标准库中的ConcurrentHashMap和ConcurrentSkipListMap，以及其他Java并发Map实现和分布式并发Map的概念。我们还讨论了将并发Map与其他并发数据结构结合使用的最佳实践和注意事项。</p><p></p><p>在多线程应用程序中，正确使用并发Map可以帮助您管理共享数据，提高性能，并确保数据的一致性和线程安全性。同时，线程安全编程的良好实践是确保应用程序稳定性和可维护性的关键。希望本文对您在多线程编程中的工作有所帮助！</p><p></p><p></p><blockquote>更多内容请参考 <a href=\"https://www.infoq.cn/article/www.flydean.com\">www.flydean.com</a>\"最通俗的解读，最深刻的干货，最简洁的教程，众多你不知道的小技巧等你来发现！欢迎关注我的公众号:「程序那些事」,懂技术，更懂你！</blockquote><p></p>",
    "publish_time": "2023-09-19 09:51:46",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]