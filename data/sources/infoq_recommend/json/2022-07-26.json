[
  {
    "title": "议程速递 | 7月27日分论坛议程一览",
    "url": "https://www.infoq.cn/article/d9875ecec5da2d1d77fe8cdf0",
    "summary": "<p>（以下排名不分先后，以官网分论坛顺序排序）</p><p>OpenAtom openEuler分论坛</p><p><img src=\"https://static001.geekbang.org/infoq/be/bee5251ebd314b24f30e682d3402bf4f.png\" /></p><p></p><p>数字化、智能化开源生态分论坛</p><p><img src=\"https://static001.geekbang.org/infoq/55/5577944e3ffa6a470c69fdad0646ac69.jpeg\" /></p><p></p><p>开源技术应用与治理分论坛</p><p><img src=\"https://static001.geekbang.org/infoq/6d/6dd66addf74e40f1201a3a8462f70cc1.png\" /></p><p></p><p>开源社区三十年专题活动</p><p><img src=\"https://static001.geekbang.org/infoq/2d/2d571f24be2d950f94ec1c5bf12f5a58.png\" /></p><p></p><p>云原生分论坛</p><p><img src=\"https://static001.geekbang.org/infoq/a9/a986a26ee094ff00724ef86a9aeb72ae.png\" /></p><p></p><p>OpenAtom OpenHarmony分论坛</p><p><img src=\"https://static001.geekbang.org/infoq/7d/7d3913f4e07594661692fef8d6a2aea5.png\" /></p><p></p><p>OpenAnolis分论坛</p><p><img src=\"https://static001.geekbang.org/infoq/8c/8c5e8286916e2914f3ed3866508d9ba3.png\" /></p><p></p><p>数据库分论坛</p><p><img src=\"https://static001.geekbang.org/infoq/f8/f8073a8e3c512a65ca5dfabda6c9f181.png\" /></p><p></p><p>教育分论坛</p><p><img src=\"https://static001.geekbang.org/infoq/8c/8cd13004bb11495e006b2dd014f6cb85.png\" /></p><p></p><p>开源工业软件分论坛</p><p><img src=\"https://static001.geekbang.org/infoq/ff/ff25827fa2e3c93524211750a7401f2d.png\" /></p><p></p><p></p>",
    "publish_time": "2022-07-26 10:16:01",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "亚马逊云科技案例研究：焦点科技",
    "url": "https://www.infoq.cn/article/VWcXyicY1Iylo4Ikh2tJ",
    "summary": "<p>“ 焦点科技 TTNET站点全站使用亚马逊云科技的服务，台湾站点从传统的租用IDC机房的方式迁移上云，人力成本降低了50%左右。中国制造网70%以上图片需要回源访问，通过在全球使用Amazon S3服务部署四个图片缓存站点，大幅提升了用户访问站点的速度。”</p><p>陶延 焦点科技 运维总监</p><p>&nbsp;</p><p><a href=\"https://www.focuschina.com/\">焦点科技</a>\"成立于1996年，总部位于南京。公司始终致力于将传统行业与互联网深度融合，先后将互联网引入外贸、保险、企业采购、教育、医疗等多个领域，研发并运营了中国制造网（Made-in-China.com）、开锣（Crov.com）、百卓采购网（Abiz.com）、新一站保险网（xyz.cn）等电子商务平台，以及智慧教育、移动医疗等互联网项目。凭借多年来的不断积累，旗下中国制造网已成为全球采购商寻找中国供应商以及贸易伙伴的重要网络渠道。</p><p></p><h3>全球多站点部署，实现大幅降本提速</h3><p></p><p></p><p>中国制造网（Made-in-China.com）创立于1998年，由焦点科技开发及运营。作为全链路外贸服务综合平台，中国制造网致力于为中国供应商和海外采购商挖掘全球商机，为双方国际贸易的达成提供一站式外贸服务，现已成为中国外贸企业走向国际市场的重要桥梁和海外采购商采购中国产品的重要网络渠道。在使用亚马逊云科技前，焦点科技的IT系统环境在国内使用IDC托管服务，国外采用硬件租用服务，并没有使用云。</p><p>但由于焦点科技的客户在全球广泛分布，且占页面70%以上容量的图片都需要回源访问，因此，这样的方式直接影响用户页面访问速度。此外，原TTNET站点部署在台湾机房，随着服务器使用年限的增加，硬件故障率不断上升，已进入硬件的淘汰更换阶段。</p><p></p><p>业务层面如何降低人力、时间、硬件维护等成本；技术层面如何实现系统的全球数据传输，保证用户访问体验，以及如何实现多可用区的部署和负载均衡配置，成为焦点科技亟待解决的问题。在尝试使用第三方CDN，仍不能解决因距离导致的访问速度下降的问题后，云成了唯一的解决问题途径。</p><p></p><p>决定上云后，焦点科技对比了多家云服务商。一方面，考虑到亚马逊云科技的基础服务架构多区域可用，且能够满足自身备份容灾的需求；另一方面，考虑到亚马逊云科技原生服务丰富，结合之前使用的<a href=\"https://aws.amazon.com/cn/rds/\">Amazon Relational Database Service</a>\"&nbsp;(Amazon RDS)，可减少焦点科技在数据库方向的人力成本投入，最终，焦点科技选择与亚马逊云科技进行合作。</p><p></p><p>焦点科技和亚马逊云科技的技术服务团队结合具体的业务需求共同商议后，决定采用<a href=\"https://aws.amazon.com/cn/s3/\">Amazon Simple Storage Service</a>\"&nbsp;(Amazon S3) 部署四个图片缓存站点，分别位于法兰克福、孟买、新加坡和圣保罗。</p><p>通过在全球使用Amazon S3服务，焦点科技实现了站点图片在全球缓存系统的部署，并实现了数据的多点同步，互为备份，同时也大大提升了中国制造网的用户访问速度和平台稳定性。在使用亚马逊云科技后，焦点科技不再需要考虑硬件故障及更换的费用，减少了原IDC机房的人力成本。据陶延介绍：“焦点科技TTNET站点全站使用亚马逊云科技云服务，台湾站点从传统的租用IDC机房的方式迁移上云，人力成本降低了50%左右。”图1是焦点科技基于亚马逊云科技的全站架构示意图，所使用的亚马逊云科技服务包括：<a href=\"https://aws.amazon.com/cn/aurora/\">Amazon Aurora</a>\"、Amazon S3、<a href=\"https://aws.amazon.com/cn/cloudfront/\">Amazon CloudFront</a>\"等。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/d5/6d/d5e62d01086e7d7c705a78dc0ab9786d.png\" /></p><p></p><p>图 1 焦点科技基于亚马逊云科技的全站架构示意图&nbsp;</p><p></p><h3>尝鲜 Amazon Snowball，短时间完成大规模数据迁移</h3><p></p><p></p><p>在使用Amazon S3时，焦点科技面临着一个巨大的挑战。有接近70TB的大数据需要迁移，并且业务方要求在三个月内必须完成上线。由于时间紧迫，数据规模庞大，整个焦点科技团队承受着非常大的压力。采用网络的方式，不仅技术上行不通，而且没办法按照约定的时间上线。于是，他们找到了亚马逊云科技。在与亚马逊云科技技术团队几番沟通后，焦点科技决定采用<a href=\"https://aws.amazon.com/cn/snowball/\">Snowball</a>\"来完成迁移任务，做“吃螃蟹的人”。回忆起那次数据迁移经历，陶延表示：“我记得非常清楚，当时亚马逊云的工程师跟我说，这是国内的用户率先使用Snowball服务”</p><p></p><p>Snowball是一种边缘计算、数据迁移和边缘存储设备，非常适合完成焦点科技短时间迁移大规模数据的任务。Snowball Edge Storage Optimized设备同时提供数据块存储和兼容 Amazon S3的对象存储以及40个vCPU，可以在大约一周内迁移数TB的数据。这样的功能非常适合完成焦点科技短时间迁移大规模数据的任务。</p><p></p><p>亚马逊云科技技术工程师提供的方案是，通过Snowball到焦点科技美国的数据中心拷贝数据，完成拷贝后由亚马逊云科技的团队完成运输，将数据导入指定的Amazon S3中，然后从美国的Amazon S3节点，利用内部专线网络，同步到全球其他的三个站点。</p><p></p><p>陶延说：“在讨论的时候，我们的内心还是存疑的，因为整个过程涉及数据间的各种导入和转换，我们从来没有这么做过。但是亚马逊云科技的工程师对整个数据导入解决方案非常熟悉，帮助我们与美国数据中心对接，仅3天就开始数据导入，仅用了15天左右就顺利地完成了全部数据的导入。如果采用网络传输的方式，即使技术上行得通，也至少要一个半月时间” 。</p><p></p><h3>弹性扩容、防盗链，完美适配跨境电商需求&nbsp;</h3><p></p><p></p><p>除中国制造网、TTNET站点之外，焦点科技旗下还拥有众多子公司，<a href=\"https://www.focuschina.com/lingdongyunjisuan.html\">焦点领动云计算</a>\"就是其中的一家，也是整个焦点科技中最早采用亚马逊云科技的先锋。</p><p></p><p>焦点领动云计算是一家依托云计算SaaS技术，专注为中小企业提供云建站和云营销服务的创新型高科技企业。早在2017年，所有系统就已经全部上云。在采用Amazon S3前，领动云计算主要利用第三方厂商提供的CDN进行边缘节点缓存。但随着业务的扩大，缓存的方式命中率甚至会降低至30%以下。由于图片数量高达数亿张，如果自己部署、扩容、维护，成本将非常高。经过几番权衡，焦点领动云计算选择与亚马逊云科技进行合作。</p><p></p><p>焦点领动云计算主要为客户提供跨境电商独立站相关的服务。由于业务特性，经常会遇到黑五、秒杀活动等场景需要临时扩容。通过采用Amazon EC2、Amazon RDS等服务，焦点领动云计算实现了容量的自动化弹性伸缩。其扩容速度从原先的数天减少到30分钟。</p><p></p><p>除Amazon EC2等服务外，在使用亚马逊云科技的服务过程中，<a href=\"https://aws.amazon.com/cn/cloudfront/\">Amazon CloudFront</a>\"&nbsp;也令任睿印象非常深刻。焦点领动云计算副总经理任睿表示：“在边缘节点可编程上，亚马逊云科技是行业内非常卓越的”。通过这个功能，焦点领动云计算提供的服务在安全性方面得到了提升，极大地降低了盗链等行为的发生概率。</p><p></p><p>未来，焦点科技将考虑大规模使用<a href=\"https://aws.amazon.com/cn/sagemaker/\">Amazon SageMaker</a>\"，实现智能推荐方面的功能。 “采用亚马逊云科技的服务后，我们大幅提升了系统的可扩展性、稳定性和用户的访问速度，使用体验令人满意。” 焦点科技运维总监陶延总结道。</p>",
    "publish_time": "2022-07-26 11:00:50",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "苹果和英特尔说再见：拿掉最后一颗英特尔芯片",
    "url": "https://www.infoq.cn/article/YTKYzadIKrvbdRtbt9Sh",
    "summary": "<p></p><blockquote>兜兜转转，老朋友终于到了说再见的时候。</blockquote><p></p><p></p><h2>苹果拿掉了最后一颗英特尔芯片</h2><p></p><p></p><p>苹果的 Mac 电脑使用了十余年的英特尔处理器，但从 2019 年开始，苹果开始通过自研芯片等举措有意摆脱对英特尔的依赖。据快科技 7 月 26 日<a href=\"https://news.mydrivers.com/1/848/848032.htm\">报道</a>\"，苹果已经去掉了英特尔的最后一丝痕迹。</p><p></p><p>根据 iFixit 对苹果 MacBook M2 款的拆解介绍，之前使用的英特尔JHL8040R USB4/雷电 3 计时器芯片已经消失了，换成了不知名品牌的方案，表面只能看到一个编号 U09PY3。目前尚不清楚这颗新的芯片来自哪家厂商，从编号上也查不到任何有用信息。</p><p></p><p>此外，iFixit 7 月 19 日对苹果 MacBook M2 Air 款的拆解介绍显示，芯片板上出现了一个看似苹果制造的 Thunderbolt 3 驱动程序，而不是熟悉的英特尔芯片。</p><p></p><p><img src=\"https://static001.geekbang.org/resource/image/ef/33/ef8560f5d30b388509e69a1759ff8833.jpeg\" /></p><p></p><p>这意味着，苹果已经和英特尔彻底分手。</p><p></p><p>虽然苹果近几年持续在芯片研发上发力，但也有网友为苹果捏一把汗：“苹果每年投资上千亿，为啥 5G 研发还是失败？5G 芯片难在哪？”</p><p></p><h2>苹果和英特尔的“爱恨纠葛”</h2><p></p><p></p><p>在此之前，苹果和英特尔的合作曾维系了十余年。2019 年，苹果开始逐步摆脱对英特尔的依赖。</p><p></p><p>据了解，当时苹果在内部发起了<a href=\"https://www.infoq.cn/article/wLXQeEayVLEdQSJyd6Eq\">一项计划</a>\"，在 2020 年以前用基于 ARM 架构的处理器取代其 Mac 计算机中的英特尔芯片。</p><p></p><p>很快，苹果聘请了 ARM 公司的顶级芯片工程师之一 Mike Filippo，Mike Filippo 在服务器等更高级芯片方面的经验将有助于苹果实现这一目标。Mike Filippo 在 LinkedIn 的个人资料显示：在加入 ARM 之前，他曾在 AMD、英特尔出任过关键芯片设计师，并领导过一些重要项目。</p><p></p><p>2020 年 6 月，苹果正式宣布放弃英特尔处理器，转而使用基于 ARM 的芯片。2020 年 11 月，苹果正式发布了 M1 芯片。2022 年 6 月，苹果又带来了 M2 芯片。</p><p></p><p>英特尔近年来一直在努力改进其芯片设计，首席执行官 Pat Gelsinger 已将击败苹果的笔记本电脑列为首要任务。</p><p></p><p>Pat Gelsinger 曾在 2021 年 10 月表示，希望未来能通过创造比苹果能制造的“更好的芯片”来赢回苹果的业务。他正计划确保英特尔的产品“比他们的更好”，并表示英特尔拥有一个更加开放和充满活力的生态系统。</p><p></p><p>除了在芯片研发上互相较量，两家公司在人才招聘上也短兵相接。</p><p></p><p>今年 1 月 6 日，苹果 Mac 系统架构总监 Jeff Wilcox 在领英上宣布，他将离开苹果，前往英特尔担任新职位。他将担任英特尔研究员和设计工程组的首席技术官的领导职位，专注于客户端 SoC 架构。Jeff Wilson 说，他计划与英特尔一起打造开创性的 SoC。</p><p></p><p>Jeff Wilcox 曾是苹果桌面和笔记本电脑产品开发的关键角色。在苹果担任 Mac 系统架构总监的 8 年间，他主要负责 Mac 系统的系统架构、信号完整性和电源完整性等工作。他还是苹果 M1 团队的一员，他在苹果从英特尔芯片到 M1 芯片的过渡中发挥了关键作用。</p><p></p><p>不过有趣的是，Jeff Wilcox 的老东家正是英特尔。他从 1997 年开始就在英特尔任职，10 年后转为英伟达的首席架构师，又于 2010 年回到英特尔，3 年后入职苹果，担任 Mac 系统架构总监。</p><p></p><h2>苹果“换芯”之路：M 系列芯片顺风顺水，5G 芯片研发受挫</h2><p></p><p></p><p>自从踏上“换芯”之路，苹果开启了 M 系列芯片研发。</p><p></p><p>2020 年 11 月，苹果正式发布了 M1 处理器。截至当年底，苹果总计推出三款搭载 M1 芯片的产品：MacBook Air、13 英寸 MacBook Pro 和 Mac Mini。2020 年 10 月，苹果发布了 M1 的进阶款，性能更强大的 M1 Pro 和 M1 Max。这两款芯片的发布，标志着苹果的自研芯片之路又取得一突破性的进展。M1 处理器，M1 Pro 和 M1 Max，因其性能、兼容性和功耗效率而广受好评。</p><p></p><p>2022 年 6 月，苹果正式发布 M2 芯片。与 M1 芯片相似的地方在于，M2 同样是 Arm 芯片，基于 5nm 工艺，拥有 200 亿个晶体管——比原来的 M1 多 25%。所有这些晶体管都将提高性能，Apple 承诺与原始 M1 相比，M2 的 CPU 速度提高 18%，GPU 速度提高 35%。</p><p></p><p>据苹果公司表示，M2 芯片的性能比“最新的 10 核 PC 笔记本电脑芯片”快 1.9 倍。为了获得比 M1 更好的性能，苹果在 M2 上使用了新的性能和效率内核，以及 100Gbps 的内存带宽和 24GB 的统一内存——这比 M1 多出 50% 的带宽。此外，M2 上有四个高效内核，性能内核共享 16MB 缓存，效率内核共享 4MB 缓存。</p><p></p><p>正如前文网友所言，苹果在芯片研发上的确舍得投资，但 5G 芯片的研发失败也是一个不得不面对的现实。</p><p></p><p>今年 6 月 28 日，被业内誉为“地表最强苹果分析师”的郭明錤在Twitter上发文爆料称，根据他的“最新调查”，苹果公司 5G 基带芯片的研发现已停滞，这意味着高通仍将是 2023 款 iPhone 5G 芯片的独家供应商，为该款机型提供 100% 的芯片，而不仅仅高通此前预估的 20%。</p><p></p><p>那么，究竟 <a href=\"https://www.infoq.cn/article/NdcbENeJz1pZBfcoiDsE\">5G 芯片研发</a>\"到底有多难？</p><p></p><p>“因为 5G 芯片需要很大的运算量，可能是以前的十倍、几十倍，要把大带宽和低延时同时做到一起，还要保证能够跟以前的手机一样用，我们就需要做很多很特别的设计，需要做很多的这种仿真，甚至我们要去做很多芯片去测试，要保证用户体验到它的好处！”紫光展锐通信团队负责人王远在接受媒体采访时如是说。</p><p></p><p>5G 基带芯片需要同时兼容 2G/3G/4G 网络，并不是想做就能做的，必须要有大量技术的积累和测试的验证。深厚的技术积累、巨额的资金投入和成熟的研发团队是 5G 基带芯片研发三大必要条件，缺一不可。</p><p></p><p>虽然苹果当前在 5G 芯片研发上受阻，但郭明錤认为，此次的失败并不意味着苹果将放弃自研 5G 基带芯片项目，苹果将继续开发自己的 5G 芯片，但需要更长时间的打磨才能将其实际应用于 iPhone 和其他设备上。</p>",
    "publish_time": "2022-07-26 14:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "从 JavaScript 到 TypeScript：上手试试才知道答案",
    "url": "https://www.infoq.cn/article/EF9Kra3QjsROjMoGRrXl",
    "summary": "<p>嘉宾 ｜陈芸</p><p>编辑 ｜贾亚宁</p><p></p><p>TypeScript 在这几年的需求呈现指数级增长的趋势，越来越多的开源项目开始使用 TypeScript 进行重构。那 TypeScript 究竟好不好，好在哪里？什么样的重构方法和流程最高效？出于对这些问题的好奇，我们找到了陈芸老师。她是 FreeWheel 核心研发团队的高级软件工程师，负责前端开发工作。</p><p></p><p>同时陈芸老师也是已经上线的 <a href=\"https://time.geekbang.org/qconplus/home\">QCon+ 案例研习社</a>\"「<a href=\"https://time.geekbang.org/qconplus/album/72\">TypeScript 在中大型项目中的落地实践</a>\"」专题的讲师，因此我们带着对 TypeScript 相关的疑惑和好奇对陈芸老师进行了采访，让我们一起来看看老师的思考吧。</p><p></p><h5>InfoQ：你最近在负责什么样的工作呢？</h5><p></p><p></p><p>陈芸：我在组内主要负责前端相关的一些工作，包括产品的开发、前端技术探索、公共组件的开发等等。最近在做几个项目，有公司产品的前端大改版，也有公司内部的前端流程优化工具开发，还参与一些工程师自我驱动的项目。</p><p></p><h5>InfoQ：你在使用 TypeScript 的过程中，有遇到什么印象深刻的困难吗？</h5><p></p><p></p><p>陈芸：使用 TypeScript 的过程总体来说还是挺顺利的，得到的效果要比预想好得多。当然，困难肯定还是有的。</p><p></p><p>比如在对已有 JavaScript 项目 TypeScript 化的过程中，当我们发现有编译错误时，需要判断是逻辑本身的 bug 还是类型定义有问题，这样的 bug 往往是不会使页面直接出错的，而是数据展示不符合预期，需要对业务逻辑有足够的了解以及对类型定义有足够的自信才能快速定位问题。</p><p></p><p>再比如，我们做 JavaScript 迁移的项目是一个多团队参与的大项目，无法一步到位，且每个模块的迁移标准和方式都不同，代码检查的标准也不相同，所以我们给各个模块都配置了 tsconfig，各自 include 各自的模块路径，公共库则需要符合各个配置要求。于此同时，还未完成迁移的 JavaScript 代码也不能受到影响，这个配置体系是非常复杂的。</p><p></p><p>还有关于提升编译效率的问题，我们知道 TypeScript compile 的耗时比较大，一方面我们把 TypeScript compile 作为单独的进程进行类型检查，不阻塞主进程的打包过程；另一方面为了保证类型检查的效果，我们在把 TypeScript compile 作为 lint 的一部分，也就是说每一次代码提交都会跑一遍 tsc, 当项目已经发展到非常大型时，如果每次都对全部文件进行 compile，则会使得 lint 的时长越来越长，所以我们在这里做了一个优化，把每次修改的文件用脚本放到 tsconfig 的 include 中，动态生成一个临时的 tsconfig，这样 compile 的过程只会针对提交的有修改的文件，这就加速了 lint 的过程。</p><p></p><h5>InfoQ：你们团队在选择 TypeScript 时，是基于什么考虑呢？</h5><p></p><p></p><p>陈芸：我们的出发点其实很简单，就是为了提高代码质量，从而提高产品质量，像我们 ToB 的公司，一个小的前端 bug 就可能会影响到很多客户，从而给公司造成巨大的损失，所以产品的质量是重中之重。除此之外，由于我们的产品业务逻辑非常复杂，我们也希望代码能够有更好的可读性以及更易于维护。</p><p></p><h5>InfoQ：你认为从 JavaScript 迁移到 TypeScript 有哪些更加高效的方法？</h5><p></p><p></p><p>陈芸：说到效率，首先选择一个合适的编辑器绝对会大大提高效率，比如对 TypeScript 原生支持的 VS Code。然后，可以参考一些成熟的 TypeScript 项目的配置方案，类型定义公约等，站在巨人的肩膀上。</p><p></p><p>我们的项目由于是一个开发中的项目，为了兼顾产品的原有开发进度，我们选择了对项目进行逐个文件迁移的方式，这里值得说的一点是文件迁移的顺序。当时我们对项目做迁移时是从底层公共库入手，再到数据交互模块，最后是上层业务组件，这样的迁移顺序理论上是一个比较好的顺序，但也会有一些问题，比如如果负责迁移的人对原来的项目实现不是特别熟悉的话，对底层公共库的类型定义往往会有偏差，当我们做上层业务组件的迁移时，经常需要反复修改底层公共库的类型定义，这造成了许多额外的花销。如果条件允许，比较好的方式是由最熟悉某块代码的人（比如原作者本人）来做那部分的代码迁移。</p><p></p><p>最后一点，从项目决定 TypeScript 化开始，所有新提交的代码要求都是 TypeScript 的，否则项目将很难彻底完成 TypeScript 化的过程。</p><p></p><h5>InfoQ：TypeScript 已然成为前端新宠，那你认为什么情况下不适合使用 TypeScript 呢？</h5><p></p><p></p><p>陈芸：如果从项目规模上出发，我其实觉得都是适合的，即使是个人的小型项目，有类型约束也会使代码更加健壮。当然如果存在这样的客观情况，项目时间紧且团队成员中的大多数还没有对 TypeScript 有足够了解，我认为这个时候使用 TypeScript 是有风险的。另一种情况，目前的 JavaScript 项目非常成熟，且可预计的将来不会有大量的功能迭代，个人觉得也没有必要非要重写来做 TypeScript 化，这相当于把一个大型项目重新开发一遍，当然这不是最大的难题，最大的难题是还必须和原项目的所有业务逻辑保持一致。</p><p></p><h5>InfoQ：最后，你想对其他正在使用或者想要使用 TypeScript 的小伙伴说些什么呢？</h5><p></p><p></p><p>陈芸：首先，我肯定是支持小伙伴们使用 TypeScript 的，尤其是新项目，无论大小，都可以尝试一下，没有试过是很难感受到它带来的好处的，当它实实在在地帮助大家提升了开发效率，提前发现了隐藏的 bug 时，我相信就很难再回到 JavaScript 了。</p><p></p><p>前端的新技术日新月异，一方面我们需要及时了解前端资讯，比如定期看看 JS Weekly、CSS Weekly 这样的订阅；另一方面，我们最好能对自己感兴趣的技术做一些尝试，看看有没有一些日常工作中的痛点是这些新技术能帮助解决的，这样既可以得到自我提升，又可以帮助到实际的工作。</p><p></p><h4>嘉宾简介</h4><p></p><p></p><p>陈芸  FreeWheel 核心业务团队高级软件工程师</p><p></p><p>就职于 FreeWheel 核心业务团队，主要负责前端开发工作，对前端前沿技术非常热衷，致力于提升产品质量，优化用户体验。前豆瓣全栈开发工程师，对 ToB，ToC 的项目都有深刻的理解。</p>",
    "publish_time": "2022-07-26 14:47:10",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "微前端热度不再？qiankun 作者有话说",
    "url": "https://www.infoq.cn/article/toOk2eITwuo6p7TDyQxk",
    "summary": "<p>作者 ｜贾亚宁</p><p>嘉宾 ｜刘奎</p><p></p><p>近年来随着互联网的飞速发展，很多企业的业务复杂度都会上升，参与业务的人员也越来越多，这带来了严重的维护成本。为了解决这个问题，微前端一度成为技术热点，各大公司相继在微前端加大投入。面对微前端在落地实践中暴露的一些问题，很多公司也相继提出解决方案，比如蚂蚁集团的 qiankun，京东的 MicroApp 等等。</p><p></p><p>微前端是一种架构理念，它类似于微服务的架构，将微服务的理念应用于浏览器端，即将单页面前端应用由单一的单体应用转变为把多个小型前端应用聚合为一的应用。各个前端应用还可以独立开发、独立部署。微前端听起来美好，但是在具体的落地过程中会有很多问题：什么场景适合微前端，如何判断开展微前端的最佳时机？如何拆分业务最高效？微前端是否势头已过，它又将如何发展呢？</p><p></p><p>出于对以上问题的好奇，我们采访了蚂蚁集团体验技术部前端工程师刘奎老师，同时他也是 qiankun 作者，目前在 GitHub 上，qiankun 的 Contributor NO.1，妥妥的开源软件爱好者。</p><p></p><p>同时，刘奎老师也是 3 月中旬上线的 <a href=\"https://time.geekbang.org/qconplus/home\">QCon+ 案例研习社</a>\"「<a href=\"https://time.geekbang.org/qconplus/album/77\">微前端架构模式的实践与探索</a>\"」专题的讲师，带来了【<a href=\"https://time.geekbang.org/qconplus/detail/100091397\">蚂蚁微前端研发模式的产品化探索</a>\"】的分享。因此我们针对微前端技术的相关问题对刘奎老师进行了采访，一起来看看他的实践和思考吧。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/86/860d887fadfefaccb45283dad2724b48.jpeg\" /></p><p></p><p></p><h5>InfoQ：你最近在负责什么样的工作呢？</h5><p></p><p></p><p>刘奎：我目前在蚂蚁的工作主要分两部分：第一部分是和团队同学一起，去定义蚂蚁统一的微前端研发模式。这个研发模式不仅仅是去做一些微前端相关的基础框架、库的研发，更包括覆盖整个微应用研发生命周期中的一些产品化的流程设计。比如从一个微应用如何在内部研发平台上创建，到如何描述这个微应用跟其他微应用的关联关系、怎么在产品上清晰地表达出来，到如何实现微应用的灰度分发，以及最终上线后的监控、异常应急等能力。总的来讲我们在做的是一个针对微前端场景特性的研发平台。</p><p></p><p>第二部分是基于目前的微前端应用模型，如何将这一套动态化的机制应用到其他的中台场景，进而将我们内部的中台研发模式统一，以便解决其中的一些共性问题。比如中台应用的页面托管及灰度、应用多环境部署（公有云、专有云），这些是不论你是否使用微前端都会需要解决的问题。</p><p></p><h5>InfoQ：在微前端的日常工作中，你有遇到过什么困难吗？可以具体分享一下吗？</h5><p></p><p></p><p>刘奎：从我的视角来看，微前端研发中有几个比较典型，也是我们经常会讨论的问题：第一个是我们要如何对一个巨石应用做拆分，拆分的粒度和边界是什么；第二个是多个微应用之间如何去做依赖复用；第三个就是微应用如何治理的问题。</p><p></p><p>我们先来看第一问题。在对一个巨石应用做微前端拆分时，最常见的粒度是按页面维度来拆，这通常是没什么问题的。但也有一部分场景，我们期望将页面中某个局部的 UI 抽成一个微应用，供其他应用直接集成复用，这种时候就会比较纠结，到底是该往大了拆还是往小了拆？往大了拆容易出现一些组合场景不好复用从而造成代码冗余，往小了拆则可能导致微应用之间协作起来特别麻烦，反而降低了开发效率。</p><p></p><p>这里面其实涉及到一个问题，就是我们该怎么划分微应用的服务边界。比较合理的方式是按照服务完整性去划分，看这个微应用是否能独立地、完整地提供一个服务出来。而不仅仅从前端组件的角度，去是看这个 UI 是不是可复用的。有一个简单的评估手段：看你的微应用是否需要频繁跟其他微应用通信？如果答案是肯定的，那你可能就需要考虑下拆分的粒度是否过细了。</p><p></p><p>第二个问题，也是社区经常会讨论的问题：如何做微应用之间的依赖复用。其实在大部分情况下，这都是一个伪命题，因为复用依赖会导致微应用之间产生隐性的耦合，进而导致微应用无法独立地演进，而这正是与微前端架构背道而驰的。不过目前这个问题也不是无解的，基于 esm/bundless 等手段，我们可以实现微应用独立运行时使用自有依赖，而被集成时则尽可能复用容器同版本的依赖，不过这个目前社区还未有成熟的方案，我们也正在探索当中。</p><p></p><p>第三个是微应用的治理问题。当我们在公司内大规模实践微前端，或者微应用的数量变多、依赖关系变得复杂的时候，就很容易碰到架构治理相关的问题。比如如何确保宿主应用使用到匹配环境的微应用资源，而不会因为线上引用了线下的微应用导致故障；比如如何确保应用之间的高可用等级是对等的，而不会因为一个核心链路的应用，依赖了一个低服务级别的应用，而导致服务经常不可用的问题。要治理这些问题，我们需要尽早地从平台侧出发，做相关的研发阶段的数据收集跟统计，然后基于这些数据参考，去设计我们体系化的产品及研发思路，从整个平台层面收敛掉研发流程。</p><p></p><h5>InfoQ：你认为哪些场景下适合采用微前端，哪些场景不适合呢？</h5><p></p><p></p><p>刘奎：回答这个问题之前，我们可能要先来回答一下微前端解决了什么问题。</p><p></p><p>从工程角度来看，微前端其实解决的是在前端技术高速迭代、组织架构频繁变更的背景下，如何通过一些物理隔离的手段降低系统组件间的耦合，从而确保每个组件的开发独立、交付独立，进而实现整个系统渐进式演进的能力。</p><p></p><p>从产品角度来看，微前端解决的是如何在技术栈无感知的情况下，实现整个产品的平台性及动态性。针对不同的场景及用户角色，动态地将来自不同系统的服务组装起来。</p><p></p><p>明白了这两个要点，我们就能回答这个问题了，简单来说就是：</p><p></p><p>如果你不是要在一个长尾应用上做持续交付，你就不需要微前端；</p><p>如果你的产品都是同一个小的团队开发的，你就不需要微前端；</p><p>如果你的产品没有集成 / 被集成的诉求，你就不需要微前端。</p><p>反之亦然。</p><p></p><p>拓展阅读：<a href=\"https://zhuanlan.zhihu.com/p/391248835\">你可能并不需要微前端</a>\"（知乎）</p><p></p><h5>InfoQ：你认为微前端有哪些玩法？之后还会有哪些创新呢？</h5><p></p><p></p><p>刘奎：微前端最常见的玩法还是基于页面的：从现有系统中开辟出一个路由，供其他应用的页面集成进来，这种是比较粗粒度的方式。</p><p></p><p>但是在平台型应用的场景，我们可能希望用更细粒度的方式将其他微应用集成进来。比如在一个 DevOps 平台中，我们希望在点击发布单的查看详情时，弹出一个抽屉组件，在抽屉组件中展示另一个微应用的详情页；又或者在监控平台中，我们希望以卡片的形式集成其他二方的报表组件。</p><p></p><p>这其实给我们引入了一个新的话题：如何更高效地生产和消费微应用？</p><p></p><p>通常我们是希望直接复用某个现有系统中的局部 UI/ 功能，而不是从一开始便特地开一个仓库，把一些共用组件抽取出来。要知道从存量系统中抽取公共组件的工作通常不是那么容易的。那我们有什么方式可以快速从现有系统中提取 UI 呢？</p><p></p><p>这里有两个思路，一个是直接在现有仓库中开辟一个特殊目录，然后把所有需要共享出去的服务写到这个目录，研发框架在构建部署时，这部分目录的代码会以微应用的构建发布标准单独处理。但这个方式还是免不了一部分的组件抽取工作。</p><p></p><p>另一个是我们可以通过一些标记的方式，在现有的页面中直接给某块 UI 加上一些特殊的 wrapper，然后在静态构建阶段，直接把这部分代码以微应用的方式处理并发布，这个对于微应用的开发者而言几乎没有改造成本，但对于研发框架来说会有巨大的要求。目前我们内部也还在探索当中。</p><p></p><h5>InfoQ：目前微前端的势头减弱，你认为接下来它将如何发展？是否会有一个契机 / 机会让微前端再度回到主流视野中？</h5><p></p><p></p><p>刘奎：可能你想说的是话题度减弱吧，哈哈。</p><p></p><p>为了回答这个问题我还特地看了眼最近三年的 Google Trends，发现至少在全球范围内，微前端的搜索热度并没有减弱的趋势。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/76/76e33635160367a4aed6fd27d623d063.png\" /></p><p></p><p>而且最近一年我也开始频繁地在一些社招简历及 JD 中看到微前端的影子，说明微前端已经开始在越来越多的公司内实践落地了，而不是仅仅停留在早期的围观热议的阶段。</p><p></p><p>我认为目前微前端的一些基础技术已进入了相对稳定的发展阶段，但在基础技术之上，我们要如何打造一个覆盖微应用整个生命周期的研发流程，这个每个公司都会有自己的一套玩法。如果说我们有机会集合社区的力量，把这一套研发流程的标准定义出来：比如微应用要如何构建部署，它的产物协议是什么样的；宿主容器如何标准化地消费微应用；平台如何有效治理微应用。这些问题都标准化，形成一份微前端白皮书之后，可能会给微前端再造一波话题吧。</p><p></p><h5>InfoQ：qiankun 接下来还会有什么大动作吗？</h5><p></p><p></p><p>刘奎：目前我们正在筹备 3.0 这个大版本，Roadmap 大家可以直接在 GitHub 上看到。地址：<a href=\"https://github.com/umijs/qiankun/discussions/1378\">https://github.com/umijs/qiankun/discussions/1378</a>\"</p><p></p><p>3.0 主要会包含以下几个大的特性：</p><p></p><p>我们会将 qiankun 的能力拆分成几个独立功能的包，比如用于微应用资源加载的 loader，用于做运行时隔离的 sandbox 等。每个包都是独立且功能完备的，以便那些不需要完整 qiankun 能力的开发者按需取用。</p><p></p><p>qiankun 的 sandbox 会基于 ShadowRealm 这个新提案的 API 设计，以对未来可能出现的场景做兼容。并实现沙箱的插件化机制，方便用户在不同的场景下按需控制沙箱的松紧度。官方会提供一系列 UI 框架对应的组件化实现，方便开发者更高效地使用 qiankun 集成其他微应用。</p><p></p><h5>InfoQ：最后，作为一名投身在开源社区的大厂工程师，你想对其他的技术人说些什么呢？</h5><p></p><p></p><p>刘奎：对于工程师来说，开源是一个很好的与社区交流学习的方式，通常我会建议想参与开源的同学从手头上的项目开始尝试，从解决自己系统中使用的开源项目的 bug 开始，逐步深入地了解并参与到开源项目中去。</p><p></p><p>这里可以分享一下我个人的开源经验。我在 GitHub 上的第一个 pr 是给 SortableJS 提的，当时也是为了解决内部产品拖拽的一个体验问题。到后面因为项目使用了 AngularJS，并在实际工程中发现了一些藏得特别深的问题。虽然后来 pr 没有被合并，但是在跟 AngularJS team 交流的时候，也学到了不少在官方文档中看不到的知识点。再到后面也是在公司内推广 Mobxjs 时发现了它的一个很隐蔽的 bug，然后慢慢参与到它的生态建设中，到最后加入了 Mobx team。包括最近两年我在做的 qiankun，也是从公司内的项目的解决方案中，提炼出来的开源版本。</p><p></p><p>总体来说，以公司内项目作为切入点参与开源，不仅能在过程中获得极大的个人成就感，对公司也能产生直接的价值，这样才比较容易形成一个良性的、可持续性的开源贡献路径。</p><p></p><h4>嘉宾简介</h4><p></p><p></p><p>刘奎  蚂蚁集团前端工程师</p><p></p><p>开源软件爱好者，qiankun 作者。在社区 / GitHub/ 知乎通常以 kuitos 这个 ID 出现。前端相关的技能大都点在了 web 应用架构、前端工程化等方向，目前在蚂蚁主要负责微前端及中后台等研发模式的建设及探索。</p>",
    "publish_time": "2022-07-26 15:11:28",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]