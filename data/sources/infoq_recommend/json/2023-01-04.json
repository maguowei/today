[
  {
    "title": "不要把自己“困死”：论大型企业的项目协调管理",
    "url": "https://www.infoq.cn/article/FzVSOWKXSWNP7aMtXEjv",
    "summary": "<p>当组织的“改进”想法可以通过给已经在做的工作重贴标签而迅速采纳时，你可以很容易地看出，那不会取得多大的成果。这不是真正的变革，这只是重新包装。&nbsp;</p><p>&nbsp;</p><p>表面上看，<a href=\"https://www.tasktop.com/value-stream-management/\">价值流管理</a>\"的概念听起来很好：谁不想生成一个价值流？ 但通常情况下，最终，价值流管理与企业长期以来所做的事情没有太大区别：在大型企业中使用项目管理实践协调不同团队的工作。</p><p></p><h2>价值流只是传统组织的一件外衣</h2><p></p><p>传统组织是由“孤岛”或专注于单个相关技能集的部门组成，包括：应用开发、数据中心运营、质量保证、市场营销、业务管理、风险管理等等。</p><p>&nbsp;</p><p>在这些组织中，“企业”有了开发新产品或改进现有产品的想法，就像流水线上的工人一样，在开发的不同阶段，来自不同部门的人围绕这个想法开展工作，直到在这条“流水线”的尽头下线可供客户使用的东西。&nbsp;</p><p>&nbsp;</p><p>这种“流水线”模式的问题是，团队之间会为交接所累，对于所生产的产品的价值，团队得到的反馈极少，而他们却要据此来做决策（参见图1）。</p><p>&nbsp;</p><p>他们会以为“企业”知道客户想要什么，所以把重心放在尽量减少生产“价值”时所花费的时间和精力上。但是，由于缺少反馈，组织忽略了<a href=\"https://www.infoq.com/articles/empiricism-business-agility/\">最大的浪费源：向客户提供不符合客户需求的东西。</a>\"</p><p>&nbsp;</p><p>因此，即使是一个经过优化的“价值流”，也往往只是以更快的速度产生浪费。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0d/0da0af495187693d18fd1da474c6c65e.jpeg\" /></p><p></p><p>图1：“流水线”模型 vs. 获得授权的自治敏捷团队</p><p>&nbsp;</p><p>尽管这样叫，但价值流并不关注价值，而是把工作当成“生产线“来管理。每交付完一个“想法”，就开始关注下一个想法。几乎没有什么“学习”过程，因为想法是从“专家”那里自上而下地流向实施和交付这些想法的团队，后者往往很少甚至不对所交付的价值进行衡量，也很少甚至得不到反馈。当以这种方式实施时，价值流就不是敏捷的，因为他们从未收集和检查过反馈，也从未根据反馈调整其方法。</p><p>&nbsp;</p><p>这个缺陷似乎很容易弥补：只需增加反馈。在每次发布时，衡量下客户的体验是改善了，还是没变化，还是变差了，然后将结果反馈到构思新改进的过程中。这样一来，价值流就真得成了一个循环，关于价值的实验在其中得到了检验。增加反馈循环是有帮助的，但前提是那些循环非常快；如果很慢，需要数月甚至更长时间才能获得针对最初想法的反馈，那么在改善所提供的价值方面，它们就没有多大效果了。</p><p>&nbsp;</p><p>当价值流只是现有筒仓式组织的一件外衣时，从有想法到可以测试所经过的时间太长了，无法为快速测试想法带来真正有用的帮助。如果运行这些价值实验只需几天或一两个星期，那么组织就可以相对快速地决定什么东西有价值，但如果需要数月甚至更长的时间，那么组织就会浪费大量的时间和精力来构建客户既不想要也不需要的东西。</p><p></p><h2>制造思维如何削弱了敏捷性</h2><p></p><p>价值流概念与背后的敏捷和精益生产思维之间的矛盾，表现为多种不同的方式。制造的目标是按照标准规格生产出完全相同的标准产品副本，没有浪费或变化。它会将任何对可预测性的扰动视为需要消除的不良缺陷。精益生产是一种旨在最大限度地减少生产浪费的方法。</p><p>&nbsp;</p><p>敏捷方法的目标是确定需要解决的问题，并针对这些问题制定解决方案。在解决这些问题的过程中，很重要的一点是消除浪费和障碍，因为那可以帮助团队集中精力，用一个精心构建的解决方案来解决正确的问题，但是有些东西，从生产的角度来看会被称为浪费，比如错误问题的解决方案，在团队构建、交付给客户并度量结果之前，是根本无法预见到的。从另一个角度来看，优化产品的构建方式并不能防止生产出对客户没有任何用处的产品。</p><p>&nbsp;</p><p>制造思维完全符合传统组织的理念，即“专家”最擅长的是设计产品，他们以市场研究为基础，以自己的专业知识为依托。制造过程的目标是要完美地实现交给他们的产品定义。他们可能会调整规格，简化产品制造过程，但他们并不关心正在制造的产品是否正确。同样，这完全符合传统组织自上而下的控制理念。</p><p>&nbsp;</p><p>敏捷方法所要构建的产品一般都是一次性的。其目标不是构建一个标准产品的副本，因为在构建的时候还没有完全理解客户的实际需求。其目标是要发现什么才是正确的产品。对于有些产品，一旦组织了解了客户的需求，就可能需要制造更多这样的产品，这时，敏捷实践就不那么有用了，制造流程则会更适用。</p><p>&nbsp;</p><p>当客户的需求正在出现或快速变化时，自上而下的过程无法对反馈做出足够快的响应。更适合这种情况的流程是科学方法的一个变体——形成假设，实验检验，检查结果，并根据结果来调整方法。</p><p></p><h2>价值流会削弱团队的权力</h2><p></p><p>此外，价值流方法可能会削弱团队的权力，而这可能会导致团队成员的冷漠。<a href=\"https://www.youtube.com/watch?v=Ulx5d6nhqz8\">研究表明</a>\"，当团队有一个要实现的目标，可以自由决定向客户提供什么以达成这个目标，并自由决定如何工作以向客户提供解决方案时，他们的表现最好。在这种情况下，团队成员的自主性和目的性都很强，积极性也会很高。</p><p>&nbsp;</p><p>当许多团队必须协同工作时，就像他们在价值流中所做的那样，不能简单地给他们制定一个宽泛的总体目标，然后由他们自己决定要交付什么以及如何交付。管理价值流的人定义解决方案并将工作分配给团队，尽管他们可以给团队留一些决定工作方式的空间，但前提是赋予团队的这种自由不会造成团队之间的冲突。 在现实中，处于价值流中的团队只是在执行工作任务，这导致他们的内在动机水平低于他们可以自由定义解决方案的情况。为了做好工作，他们可能仍然会表现出高水平的专业精神，但他们缺乏拥有解决方案时的目的感。</p><p></p><h2>为什么组织会把自己困住？</h2><p></p><p>对于上述情况，他们中的许多人都比我们更了解，但他们觉得自己无法做得更好。他们的“产品”很庞大，不可能由一个小型跨职能团队开发和交付，甚至不可能像<a href=\"https://www.scrum.org/resources/scaling-scrum\">Nexus</a>\"那样少数几个跨职能团队协同工作。即使产品可以由一个小型跨职能团队开发，组织孤岛和技术专业化也会给组建跨职能团队造成障碍，因为没有一个具备合适技能的小团体可以开发产品。</p><p>&nbsp;</p><p>当这种情况发生时，组织会尝试创建更大的团队，团队成员在团队之间共享。在协调由兼职成员组成的团队时，他们通常会使用价值流的概念，协调人们跨多个项目开展工作。组织被卡住了，因为他们的产品太大了，他们的组织太分散了，他们无法以其他任何方式工作。 虽然称之为价值流，但它并不能改变一个基本的事实，即他们必须简化产品和组织才能获得更好的结果。</p><p></p><h2>价值流、产品和软件架构</h2><p></p><p>通常，价值流并不能解决的一个根本问题是，组织的“产品”庞大而零散，这就需要一个庞大而且零散的组织来开发和交付。这些“产品”实际上是不同功能的大集合，对它们感兴趣的潜在客户群也可能非常庞大，而且需求也很零散。这些功能的范围往往涵盖了整个业务线，确实非常广泛。</p><p>&nbsp;</p><p>这些“产品”的架构往往也庞大而零散，由许多不同的系统拼凑而成，这些系统开发了许多年，有时是几十年，用途也各不相同。它们的开发和维护由不同的团队负责，导致了一个筒仓式的组织结构。因此，根据定义，这些拼凑起来的“产品”的架构也是筒仓式的。</p><p>&nbsp;</p><p>通常，为了将所有这些不同的系统和团队联系在一起，组织会成立程序架构团队，负责整个价值流团队的整体软件架构。程序架构团队需要协调价值流团队创建的各种软件架构，以消除冗余并推广通用架构元素。</p><p>&nbsp;</p><p>当程序架构团队决定使用会产生浪费的 “预先”架构方法（由基于猜测而非事实的质量属性要求驱动的）时，他们将所有这些不同的架构组件联系在一起的努力往往会失败。结果，他们拖延了价值流团队的工作，提供了可能不符合这些团队要求的架构，而且很可能不得不反复重构。</p><p>&nbsp;</p><p>或者，程序架构团队可能会决定，在比较好地了解了每个价值流的QAR后再创建程序架构，这会导致波及每个价值流的延迟，并且随着了解的QAR越来越多，可能还需要重构。无论哪种方式，程序架构团队的方法都会放大跨团队的依赖性，从而扼杀了自主性，造成延迟和工作浪费。&nbsp;</p><p></p><h2>要想获得更好的结果，就要采取不同的方法</h2><p></p><p>价值流管理方法的基本问题是，需要很长的时间才能获得有价值的反馈，因此，大多数的产品决策都是基于直觉，而直觉很可能是错误的，也无法通过更严格的价值流管理来解决。虽然反馈循环的速度可以通过专注于消除过程浪费来逐步改善，但通常，那并不足以实现一个组织需要的巨大改进。</p><p>&nbsp;</p><p>为了解决问题，高管们经常寻找会引发急剧变化的短期解决方案，而管理咨询公司则非常乐意向他们推销这类快速解决方案。遗憾的是，他们所期望的结果几乎从来都没能实现。价值流无法解决的问题，其解决方案往往会引发急剧变化，甚至是革命性的，而时间跨度以年为单位。组织要收拾的烂摊子并不是一夜之间出现的，也就不是一朝一夕能解决的。</p><p>&nbsp;</p><p>如果组织想让他们的业务变得更加敏捷、响应更加迅速，那需要一个过程。这个过程涉及到很多工作，需要准备很长的时间。简而言之，包括：</p><p>他们需要简化产品。如上所述，相对来说，许多组织的“产品”都很零散，没有重点，为许多不同的人做了大量的事，但通常无法满足任何特定群体的需求。通常，这涉及到一组应用程序，它们以某种方式支持某条业务线，但它们是零散的，而且不完整。在这种情况下，组织无法做到让<a href=\"http://www.laputan.org/mud/\">这些大泥球快</a>\"速响应不断变化的客户需求。</p><p>&nbsp;</p><p>为此，组织需要围绕尚未满足的特定客户（当前或潜在客户）的具体需求来<a href=\"https://www.pragmaticinstitute.com/resources/articles/product/untangling-products-focus-on-desired-outcomes-to-decrease-product-complexity/\">创新产品</a>\"。组织不需要一下子就做到这一点，它应该将现有“产品”分解成更小、更聚焦的产品；这个过程非常有破坏性，会导致一团混乱，让所有努力都付诸东流。因此，组织要专注于特定的机会，把握契机，走上一条更好的路，而不需要试图一下子清理好整个大泥球。</p><p>&nbsp;</p><p>围绕这些新产品，他们需要组建和发展充分授权的跨职能自管理团队。这样可以减少团队之间的交接，<a href=\"https://www.scrum.org/resources/blog/if-you-want-go-faster-try-empowering-your-teams\">缩短决策延迟</a>\"，这是妨碍价值流方法产生组织所期望的结果的两个主要因素。</p><p>&nbsp;</p><p>对于这些充分授权的团队需要但不具备的技能，可以由专家提供支持，他们可以暂时加入团队，传授知识，或指导团队成员学习新技能。在这个过程中，要确保专家在团队需要的时候可以抽出时间，而不是像平常那样，让团队等待稀缺、昂贵的专家资源来提供帮助。这可能意味着要在短期内雇用更多的专家来支持团队，至少在团队自己能够应对之前。</p><p>&nbsp;</p><p>他们需要逐步将遗留的单体应用分解成比较小的产品和支持平台。这涉及到一些技术和方法，帮助团队<a href=\"https://www.infoq.com/articles/mvp-mva-legacy/?itm_source=infoq&amp;itm_campaign=user_page&amp;itm_medium=link\">分解遗留应用</a>\"，从“大泥球”中慢慢创建出可重用的服务，并针对这个过程中使用的模式和框架逐步<a href=\"https://www.scrum.org/resources/whitepaper-you-cant-scale-enterprise-agility-without-architecture\">创建出可重用代码的平台</a>\"。 随着这些平台的发展，组织需要奖励对共享平台做出贡献的团队，避免团队出现只关注自己当前需求的自然倾向。这意味着要创造一种技术卓越、成功共享、崇尚专业精神的文化，超越团队并渗透到组织中。</p><p>&nbsp;</p><p>他们需要衡量团队交付给客户的结果，并帮助他们提高交付价值的能力。这意味着团队必须经常向客户交付，度量结果，并<a href=\"https://www.scrum.org/resources/using-measurement-improve-scrum-team-performance\">通过检查结果和进行相应调整来改进</a>\"。</p><p>&nbsp;</p><p>他们需要将重复、单调、容易出错的手工任务自动化，让团队专注于交付价值，经常向客户提供有潜在价值的产品增量，持续不断地构建、测试和部署软件。如果团队不得不把精力花费在手工处理这些任务上，那么他们将无法足够快速地收集反馈信息，及时做出决策。此外，执行繁琐任务的人很容易犯错，造成浪费，而纠正错误时又会延误工作。将这些重复性的任务自动化有助于提高人们的工作效率，减少错误。总的来说，人们广泛将这类任务作为<a href=\"https://aws.amazon.com/devops/what-is-devops/\">DevOps实践</a>\"来讨论，没有它们，团队就无法运行有效的反馈循环。</p><p>&nbsp;</p><p>当一个组织始终如一地以这种方式对待新出现的机会，并专注提高收集和响应客户反馈的速度时，它就会逐个产品、逐个团队地打造其敏捷性。这种稳定、一致的方法不是很快捷，但它可以不断地取得增量进展，随着时间的推移，带来明显的改善。</p><p></p><h2>小结</h2><p></p><p>做同样的事情却期待不同的结果，那是一种精神错乱，然而，组织却在不断地避免真正的变革，因为他们觉得这会耗费太长的时间，而且会有很大的破坏性。真正的变革是有破坏性的，与组织的文化背道而驰，而且可能持续很长的时间，但只进行表面的变革只会使组织面临更大的挑战，而这样的变革只会招致嘲讽。</p><p>&nbsp;</p><p>通常，组织缺乏一个足够快的反馈循环来指导他们开展工作，使他们能够尝试新的想法并进行实验。此外，他们试图不惜一切代价避免失败，这使得他们不能进行有风险的实验。因为不能进行小而快的实验，所以他们会对那些最终未能达标的想法做过度投资，这使他们更不愿意进行实验了。&nbsp;</p><p>&nbsp;</p><p>对于需要数百或数千人开发的大型产品来说，是没有办法做到敏捷的，因为<a href=\"https://www.infoq.com/articles/dual-operating-impedes-agility/\">这样的大型组织无法运行快速的反馈循环</a>\"。解决办法不是创造一种伪敏捷，使传统组织变得稍微敏捷些；解决办法应该是打破传统的组织结构，大幅提高组织的敏捷性。</p><p>&nbsp;</p><p>这个旅程的第一步是将复杂的产品分解成更简单的产品，与客户结果和细分市场相一致，并通过一个内部开发的公共平台相互连接。充分授权的跨职能自主团队将围绕这些产品开展工作，自行提供各种技术支持，这有助于消除团队之间的依赖关系，减少浪费。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/value-streams-stuck-past/\">https://www.infoq.com/articles/value-streams-stuck-past/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/V5R45xKtTVizcIeg6fFS\">2023，可观测性需求将迎来“爆发之年”？ | 解读可观测技术的 2022</a>\"</p><p><a href=\"https://www.infoq.cn/article/VDwdDmSiTZglv6cthqCp\">如何用数据来提升系统质量</a>\"</p><p><a href=\"https://www.infoq.cn/article/oiYyLTdpp4Yx1iFhs4A8\">覆盖数万研发人员，字节跳动首次公开效能度量核心技术！</a>\"</p>",
    "publish_time": "2023-01-04 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "高性能且小巧的脚本语言 LuaJIT",
    "url": "https://www.infoq.cn/article/db7fc516aa9b4d4875a812a99",
    "summary": "<p></p><h2>What's JIT?</h2><p></p><p>Just-In-Time or JIT 是指在程序运行时进行代码编译的技术，像 Java，Python（这里指PyPy）、LuaJIT 都引入了这种技术。</p><p></p><p>一般 JIT 编译器与解释器一同工作，大部分时间代码由解释器进行转换成机器码进行运行，当某些代码运行的次数超过设定的阈值时，就会触发 JIT 编译进行工作，JIT 编译器会把这些热点代码编译为机器码，当下次运行到这些代码时，就不用解析器进行解释转换了，可以直接运行机器码来提高程序的运行速度。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/65/65701ad7b11c68919fa7a3a92f38f0c4.png\" /></p><p></p><h2>How does work of LuaJIT?</h2><p></p><p>顾名思义，LuaJIT 是一种即时(JIT) 编译器。这意味着函数是按需编译的，即当它们首先运行时。这既确保了应用程序的快速启动，也有助于避免无用的工作。例如，未使用的函数根本不会被编译。</p><p></p><p>另一种编译方法称为提前(AOT) 编译。这里所有的东西都是在运行任何函数之前编译的。这是许多语言的经典方式，例如 C、C++、Go、Rust 等等。</p><p></p><p>当启动 LuaJIT 时，一切都像在标准 Lua 中一样进行：初始化 Lua 核心，加载标准库并分析命令行。然后通常会加载第一个 Lua 源代码文件并将其转换为 Lua 字节码。最后运行初始主块的函数......</p><p></p><p>example.lua:</p><p></p><p><code lang=\"lua\">local s = \"hello,world!\"\n\nfor i=1,10000 do\n    for j=1,10000 do\n        string.find(s, \"ll\", 1, true)\n    end\nend\n</code></p><p></p><p>上面代码中，它会被先转换成 LuaJIT 自己定义的字节码，我们可以用下面的命令来查看：</p><p></p><p><code lang=\"bash\">$ luajit -bl example.lua\n</code></p><p></p><p><code lang=\"bash\">-- BYTECODE -- example.lua:0-8\n0001    KSTR     0   0      ; \"hello,world!\"\n0002    KSHORT   1   1\n0003    KSHORT   2 10000\n0004    KSHORT   3   1\n0005    FORI     1 =&gt; 0019\n0006 =&gt; KSHORT   5   1\n0007    KSHORT   6 10000\n0008    KSHORT   7   1\n0009    FORI     5 =&gt; 0018\n0010 =&gt; GGET     9   1      ; \"string\"\n0011    TGETS    9   9   2  ; \"find\"\n0012    MOV     10   0\n0013    KSTR    11   3      ; \"ll\"\n0014    KSHORT  12   1\n0015    KPRI    13   2\n0016    CALL     9   1   5\n0017    FORL     5 =&gt; 0010\n0018 =&gt; FORL     1 =&gt; 0006\n0019 =&gt; RET0     0   1\n</code></p><p></p><p>然后这些字节码再交给解释器去执行，当执行达到阈值设定时，就会触发 JIT 编译器的工作，LuaJIT 会先将它转换成 IR 中间码，然后转换成对应平台的机器码</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d7/d71b8320b66c6e9217d017b0075f9cd6.png\" /></p><p></p><p></p><h2>Not Yet Implemented</h2><p></p><p>在 LuaJIT 中，当 JIT 编译器编译成功后就会生成一个 trace 类型的 GC 对象，但是并不是所有的代码 LuaJIT 都能够成功编译。</p><p></p><p>当 LuaJIT 遇到不支持的函数或代码（一般叫它：NYI）时，就会中止当前的编译工作，重新回退到解释器执行的模式去。</p><p></p><p>例如上面的 string.find() 函数，只有 LuaJIT 2.1 以上的版本才支持，我们可以执行添加 -jv 选项来显示有关 JIT 编译器进度的详细信息。</p><p></p><p><code lang=\"bash\">$ luajit -v\nLuaJIT 2.0.5 -- Copyright (C) 2005-2017 Mike Pall. http://luajit.org/\n\n$ luajit -jv example.lua\n[TRACE --- example.lua:4 -- NYI: FastFunc string.find at example.lua:5]\n</code></p><p></p><p>当 LuaJIT 版本为 2.0.5 时，就会提示你 NYI: FastFunc string.find at example.lua:5，意思就是说LuaJIT 编译器不支持编译 example.lua 文件的第 5 行代码，第 5 行代码就是 string.find(s, \"ll\", 1, true)</p><p></p><p>当我们切换到 luajit-2.1.0-beta3 后，再执行看看：</p><p></p><p><code lang=\"bash\">$ luajit-2.1.0-beta3 -jv example.lua\n[TRACE   1 example.lua:4 loop]\n[TRACE   2 (1/3) example.lua:3 -&gt; 1]\n</code></p><p></p><p>TRACE 后面接着是数字，说明 JIT 编译成功了</p><p></p><h2>How does maintain speed of LuaJIT?</h2><p></p><p>要保证 LuaJIT 的运行速度时，就要避免使用 NYI 函数，如果调用 C 函数的话，尽量使用 LuaJIT 的 ffi 库来调用 C 函数。</p><p></p><p>尽量保持使用最新的 LuaJIT 版本，LuaJIT 的 2.1 版本加入了很多原先不支持的 NYI 函数，例如 string.find() 等，所以尽量使用最新版本来提升可被 JIT 编译的函数的数量。</p><p></p><p>如果需要使用 NYI 函数时，可以去看看网上或 OpenResty 中有没有对应替代函数。</p><p></p><h2>Speed Test between JIT and None-JIT</h2><p></p><p>那么，有 JIT 和没有 JIT 之间的速度差异到底有大呢？</p><p></p><p>由于 LuaJIT 2.0.5 的 JIT 不支持 string.find()，不会触发 JIT 的编译工作，所以我们可以用上面的代码，然后用 LuaJIT 2.0.5 和 LuaJIT 2.1.0-beta3 分别来执行测试下有 JIT 和 没有 JIT 之间代码执行的速度：</p><p></p><p>example.lua:</p><p></p><p><code lang=\"lua\">local s = \"hello,world!\"\n\nfor i=1,10000 do\n    for j=1,10000 do\n        string.find(s, \"ll\", 1, true)\n    end\nend\n</code></p><p></p><p>LuaJIT 2.0.5 的执行速度：</p><p></p><p><code lang=\"bash\"># 第一次测试\n$ time luajit-2.0.5 example.lua\nluajit-2.0.5 example.lua  2.14s user 0.00s system 99% cpu 2.140 total\n\n# 第二次测试\n$ time luajit-2.0.5 example.lua\nluajit-2.0.5 example.lua  2.17s user 0.00s system 99% cpu 2.169 total\n\n# 第三次测试\n$ time luajit-2.0.5 example.lua\nluajit-2.0.5 example.lua  2.17s user 0.00s system 99% cpu 2.176 total\n</code></p><p></p><p>LuaJIT 2.1.0-beta3 的执行速度：</p><p></p><p><code lang=\"bash\"># 第一次测试\n$ time luajit-2.1.0-beta3 example.lua\nluajit-2.1.0-beta3 example.lua  0.03s user 0.00s system 99% cpu 0.026 total\n\n# 第二次测试\n$ time luajit-2.1.0-beta3 example.lua\nluajit-2.1.0-beta3 example.lua  0.02s user 0.00s system 99% cpu 0.024 total\n\n# 第三次测试\n$ time luajit-2.1.0-beta3 example.lua\nluajit-2.1.0-beta3 example.lua  0.03s user 0.00s system 99% cpu 0.026 total\n</code></p><p></p><p>可以看到，两个的速度相差了差不多 100 倍，</p>",
    "publish_time": "2023-01-04 10:11:15",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "营销投入都去哪儿了？虎彩集团用区块链搞定追溯和信任问题",
    "url": "https://www.infoq.cn/article/bDJVbHPBaSHgbc5WpxBe",
    "summary": "<p>“我知道我的广告费至少浪费了一半，但我不知道是哪一半”，这是著名广告大师约翰·沃纳梅克提出的“哥德巴赫猜想”。即便是到了互联网时代的流量营销场景下，这个“魔咒”不仅没能破除，反而愈演愈烈。流量投入如流水，数据表现也不差，但实际转化就是屈指可数——很多企业的互联网营销都陷入了这样的怪圈。</p><p></p><p>成立于 1989 年的<a href=\"http://www.hucais.com/\">虎彩集团</a>\"，拥有亚太地区最大的按需出版印刷工厂，主要业务涉及印刷包装、按需出版、鲜檬摄影和泰山原浆啤酒。相较于传统印刷业务，鲜檬摄影和泰山原浆啤酒是数字化营销的主阵地。最初，虎彩集团投入使用区块链技术，目的就是解决“哥德巴赫猜想”的问题，利用<a href=\"https://xie.infoq.cn/article/9b83d5f763704c59d785fb7dc\">区块链</a>\"的公正、透明、可信机制，更好地连接消费者，让广告投入效果变得可追踪。</p><p></p><p>“借助区块链技术，我们清楚每一分钱都投到了哪些渠道、有没有带来效果、具体带来了什么效果、哪个渠道的投入产出比更高等等。目前，从前端的消费者连接，到获客拉新下单支付，我们都有统一的平台，整个交易在线上就可以完成；同时，在后台我们也建设了业务中台和数据中台，通过业务中台可以沉淀和支持前端的创新，基于数据中台还可以对会员打标签、做精准营销、精准投放。”在 InfoQ《超级连麦. 数智大脑》直播中，虎彩集团创新应用中心总经理<a href=\"https://archsummit.infoq.cn/2021/shenzhen/presentation/3772\">袁运亮</a>\"表示。</p><p></p><p>随着场景营销模式的推进，虎彩集团慢慢发现很多合作场景不只是面向个人，还要面向企业，而企业之间的合作通常会存在信任的问题，比如，企业 A 帮企业 B 做了引流和获客，那么这个数据究竟准不准？应该以谁的数据为标准？为了解决这一问题，虎彩集团又推出了场景营销，面对商城、蜂巢、社区等不同的场景，支持对应的合作模式。</p><p></p><p>在此基础上，虎彩集团进一步开发了异业联盟链——在里面，不同企业服务于类似的客户群体，但彼此之间又没有竞争关系，而是互补关系，基于这一前提，可以实现企业间的会员共享、流量引导以及精准的联合营销。</p><p></p><p>据了解，袁运亮所在的创新应用中心是虎彩集团数字化转型的主力军，除了<a href=\"https://www.infoq.cn/article/X9IT0Oj6awQNRQUFNsyg\">数字化营销</a>\"，自 2018 年来，虎彩集团还围绕<a href=\"https://www.infoq.cn/theme/161\">数字化供应链</a>\"、数字化经营管理基本实现了各个业务模块的在线化和数字化。</p><p></p><p></p><blockquote>本期 InfoQ《超级连麦. 数智大脑》，由虎彩集团创新应用中心总经理袁运亮，对话极客邦科技创始人兼 CEO 霍太稳（Kevin），和 InfoQ 极客传媒数字化主编高玉娴，探讨企业如何借助区块链技术，消除数字化营销障碍。内容有删减，感兴趣的同学可进入“霍太稳视频号”或“InfoQ 视频号”观看直播回放。</blockquote><p></p><p></p><p></p><h2>从见效更快的营销场景切入，增加数字化投入信心</h2><p></p><p></p><h5>InfoQ：虎彩集团是一家什么样的公司？</h5><p></p><p></p><p>袁运亮：虎彩集团成立于 1989 年，此前主要经营包装印刷，包括烟包、酒包、电子、日化等包装设计、印刷制作等业务，被誉为中国印刷行业的黄埔军校，一直引领中国印刷产业，为印刷行业培养了大量的人才。</p><p></p><p>除了印刷包装之外，虎彩集团还有其他三块业务，包括：按需出版、鲜檬摄影和泰山原浆啤酒。出版事业部主要的业务是图书的按需印刷和出版，服务于出版社和教育机构，现在也针对个人和企业提供一本起印的在线印刷服务，目前拥有亚洲最大的按需印刷<a href=\"https://www.infoq.cn/article/3dePZg9FS9v3ms7WVwXo\">数字化工厂</a>\"。</p><p></p><p>摄影业务这块，我们主要是通过整合影楼、拍摄基地、摄影师、化妆师等资源，提供婚拍、亲子和写真等服务，还有硬产品的个性化设计和定制，比如相册相框、家俬家纺、陶瓷摆件等等，定位是影像垂直生态平台，以前也是服务于影楼的 B2B 业务，现在也直接 2C 了。</p><p></p><p>此外，啤酒就是泰山原浆啤酒，这块可能很多人都听过、甚至喝过，在电梯广告应该看到过，我们的啤酒主打的是鲜啤，7 天鲜啤，保质期只有 7 天，口感醇厚，与其他工业啤酒有较大差异，我们泰啤现在是中国原浆啤酒第一品牌，目前有 3000 多家门店，覆盖全国，也是新零售模式，线上线下。</p><p></p><h5>InfoQ：在虎彩集团推动数字化转型的过程中，遇到过什么挑战？</h5><p></p><p></p><p>袁运亮：虎彩集团是一个比较传统的公司，从管理层的思维认知方面来说，一开始虽然有一些认知，但还不是很深刻。他们不知道数字化技术具体能帮助现有的传统业务带来什么价值，心里也有比较大的顾虑。</p><p></p><p>所以，我们当时在做顶层设计的时候，会着重找准一些切入点，优先推进一些比较小的项目，从点到线到面去推广数字化，通过让管理层看到相应的成果，无论是效率的提高还是成本的降低，从而提升大家的信心，在这基础上慢慢加快后续的投入。</p><p></p><p>除了管理层思维跟认知之外，后来我们发现，企业还非常缺数字化的<a href=\"https://www.infoq.cn/video/Q7iEvAi0XxZdtkcFgHlB\">人才</a>\"，正因如此，内部提不出来跟业务相匹配的数字化需求，最终导致数字化的效果不佳。所以，虎彩集团后来也陆续招聘了大量的数字化人才，包括营销、技术、管理等方面各类人才。</p><p></p><h5>InfoQ：最初虎彩集团是从哪些切入点开始的？</h5><p></p><p></p><p>袁运亮：虎彩的传统业务主要是针对 B 端大客户的，过去的合作关系和流程还是比较稳定的，所以，我们就先在鲜檬摄影和泰山啤酒这两块新的业务去做尝试。</p><p></p><p>具体来说，切入点还是营销。因为营销能最快体现数字化的价值，通过吸引线上客户，能直接帮助企业带来收入。以摄影业务为例，过去，摄影都是老客带新客，于是，我们就想是不是可以通过技术手段把这种“老带新”的方式，从线下搬到线上，解决时空限制的问题。加上一些推荐奖励的机制，后续的效果还是不错的，然后我们就逐渐把这种方式延伸到了其他领域。</p><p></p><p></p><h5>InfoQ：虎彩集团在数字化营销、数字化供应链、数字化经营管理等维度陆续开展了数字化转型工作，是否可以介绍一下目前三个方向下的转型进展和成果？</h5><p></p><p></p><p>袁运亮：虽然营销数字化、供应链数字化，以及经营管理数字化三部分的工作是同步推进的，但是，因为不同业务的情况不一样，转型的进展也不同。其中，比较传统的 toB 业务进展相对慢一点，直接连接消费者的 toC 业务进展会更快一点。</p><p></p><p>首先，还是数字化营销部分，由于摄影和啤酒都是直接面向消费者的，所以一定要通过线上方式做营销。一开始，我们也是从公域去获客，然后引流到<a href=\"https://www.infoq.cn/article/C0P2bZbE1IVrCkTZvGWi\">私域</a>\"。但是现在流量越来越贵，获取难度越来越大，流量的精准度也有限，导致早期我们投入了很多钱，但效果不是很明显。</p><p></p><p>所以，后来我们开始采用区块链技术去做流量追踪，就是希望投入的每一分钱，都知道投到了哪些渠道、有没有带来效果、具体带来了什么效果、哪个渠道的投入产出比更高等等。目前，从前端的消费者连接，到获客拉新下单支付，我们都有统一的平台，整个交易在线上就可以完成；同时，在后台我们也建设了业务中台和数据中台，通过业务中台可以沉淀和支持前端的创新，基于数据中台还可以对会员打标签、做精准营销、精准投放。</p><p></p><p>其次，是供应链的数字化。过去，采购计划、生产仓储等供应链相关的工作都是各做各的，无论是系统还是数据都是割裂的，没有进行协同。目前，我们通过与第三方公司的合作正在打造集成供应链平台，主要就是为了打通采购计划、生产仓储和物流，让供应链的不同阶段可以进行高效协同，从而发挥数据的价值，最终支持工厂的柔性供应和柔性生产。</p><p></p><p>再者，就是经营管理的数字化。目前，我们几乎把所有的流程都实现了线上化，包括采购、考勤、出差，甚至是绩效考核、招聘入职、合同签订等等，全部线上化。这不仅大大提高了各个流程的工作效率，同时也基于初步的数据应用，包括 BI 报表、营销生产大屏等等，可以辅助管理层进行运营决策。未来，我们希望可以做到真正的全流程的数据驱动运营和决策，实现经营管理的数字化。</p><p></p><h2>从全民营销到场景营销再到异业联盟，用区块链解决信任问题</h2><p></p><p></p><h5>InfoQ：针对不同产品和业务类型，数字化营销的策略和手段会有什么差异？请举例说明。</h5><p></p><p></p><p>袁运亮：确实，2B 和 2C 业务的营销方式很不一样。比如，印刷业务主要还是服务于大 B 客户，针对这些大客户，我们目前还是主要通过一对一的线下营销方式去触达，包括定期的拜访计划，或者通过展会、大会等各种线下的渠道进行营销拓展。</p><p></p><p>当然，还有一些小客户，他们一般会有定制化的需求：第一，体现自己的品牌；第二，降低成本；第三，定制个性化包装元素。通常来说，他们是缺少数字化能力的，也没有技术人员的支持。所以，对于这些客户，我们会提供一些数字化工具和平台，让他们通过自己的渠道去获客，在他们接单之后，再帮他们去做包装印刷。</p><p></p><p>摄影和啤酒两个新业务的营销模式就比较多元化。现在，我们主要采用 C2B2M 的模式去为门店赋能，各大门店通常都会有一个对应的“云店”，从下单、收款，到物流配货、活动管理、会员管理等一系列操作，都会通过相应的数字化工具完成，从而帮助门店提高运营效率，解决获客、物流配送、会员运营等各种问题。对于门店而言，只要经营好自己的生意就可以了。</p><p></p><h5>InfoQ：虎彩提出基于区块链技术打造营销平台，背后的思路和逻辑是什么？具体解决了数字化营销的哪些具体问题？</h5><p></p><p></p><p>袁运亮：区块链技术是虎彩集团工业互联网的五大能力之一，这五大能力具体包括了大平台、大数据、智能工厂、智慧物流以及区块链。那么，虎彩通过区块链解决了数字化营销的哪些问题？事实上，我们分了几个阶段：</p><p></p><p>第一，从鲜檬业务切入，如前面所说，把“老带客、老带新”的模式线上化，实现全民营销，然后利用区块链追踪新客户的来源，确保信息不会被篡改、是真实的，并且不会丢失。同时，我们也可以据此及时地奖励老客户，让他们更有积极性去引荐新客户；</p><p></p><p>第二，如今越来越多的营销数字化合作场景不只是面向个人，还要面向企业，而企业之间的合作通常会存在信任的问题，比如，企业 A 帮企业 B 做了引流和获客，那么这个数据究竟准不准？应该以谁的<a href=\"https://xie.infoq.cn/article/83bf769058e8dac7f97b359a1\">数据</a>\"为标准？为了解决这一问题，我们又推出了场景营销，面对商城、蜂巢、社区等不同的场景，支持对应的合作模式；</p><p></p><p>第三，随着场景营销模式的推进，我们又摸索出了其他的合作模式。比如鲜啤业务，我们定位基本上是 25~45 岁相对高收入的人群，那么，我们是不是可以跟服务于相似的客户群体的企业去合作，把会员进行共享？所以，我们开发了异业<a href=\"https://xie.infoq.cn/article/c3c62d174b253106636322b5f\">联盟链</a>\"，在里面，不同企业服务于类似的客户群体，但彼此之间又没有竞争关系，而是互补关系，在这一前提下，就可以实现会员的共享、流量的引导以及精准的联合营销。</p><p></p><p>总结而言，基于区块链营销平台，我们提供了三大核心功能：一是针对普通消费者的全民营销；二是针对特定场景和渠道的场景营销；三是针对服务于相类似客户的企业异业联盟。其中，区块链主要解决的就是信任和追溯的问题。</p><p></p><h5>InfoQ：是否可以具体介绍一下虎彩区块链营销平台的技术框架？</h5><p></p><p></p><p>袁运亮：其实我们用的也是比较主流的互联网技术，比如，在前端会用 Vue、React 、wepack 等技术栈，后端会基于比较主流的 springboot、redis、MongoDB、Mysql 以及 OSS 还有 MQ 等主流的一些技术和中间件去做。</p><p></p><p>在区块链方面，首先，我们自己研发了一个区块链服务层，在这之上开发了很多的智能合约（solidity/go/java），可以实现自动的分佣、自动的对账以及自动的结算，所有动作根据既定规则自动去执行，而不用再通过手工去做统计和计算。</p><p></p><p>在区块链底层，我们目前也支持比较多的主流底层框架，包括现在国际主流的 Hyperledger Fabric，以及现在国内比较流行 fisco bcos, 也正在跟长安链沟通，我们也通过了他们链引擎计划的审核，后续，我们也会基于长安链去做一些场景的探索。</p><p></p><h2>追赶数字化浪潮，技术从业者要亲自下场、不要观望</h2><p></p><p></p><h5>InfoQ：区块链营销平台本质上是区块链 + 营销的跨学科融合，在虎彩搭建这一平台的过程中，是如何进行人才培养的？</h5><p></p><p></p><p>袁运亮：做营销数字化，人才是非常重要的，没有人才，很多事情没有办法完成。</p><p></p><p>而对于人才培养，我们主要是通过训战结合的方式。虎彩集团有一个专门的培训学院，它会根据业务的需求开发一系列课程，同时邀请内部和外部的专家一起共创和教学，通过多维度、多层次的课程体系，一般是一年期，分多个阶段，每个阶段学完都要在工作中实战，然后还有导师制，有疑问随时约导师时间咨询，还有各个阶段的作业输出及最终毕业的答辩，保证了学以致用，理论和实践结合。</p><p></p><p>此外，在集团内部，针对高管每年也会有两次的集训，主要就是针对数字化营销这类前沿的知识的体系化培训。同时，在线上我们还有自己的网上课程，叫“云课”。在上面，员工可以选择自己感兴趣的课程，学习完成后还有对应的认证，对于想要参与内部竟聘或者职级认证的员工，这也是很好的提升渠道。通过这些方式源源不断的为虎彩培养各类<a href=\"https://www.infoq.cn/video/sCrEs13sPIU5xUTwVNkT\">人才</a>\"。</p><p></p><h5>InfoQ：在极客邦数字人才粮仓模型中，业务架构师是复合型人才的典型代表，他们的岗位能力主要被划分为六种思维模式和六种执行能力，可以具体介绍一下吗？</h5><p></p><p></p><p>霍太稳：其实我们也是在和很多公司的 HR 以及科技部门的一号位进行沟通的过程中发现，很多人对于如何进行数字化转型以及如何有针对性地培养数字化人才并不是非常清楚。</p><p></p><p>所以，我们在今年成立了极客邦双数研究院，第一个研究成果就是推出了“数字人才粮仓模型”，在这个数字模型中，我们把人才给分成了 5 类，包括数字思维管理人才、数字思维业务人才、业务架构人才、技术架构人才和专项技术人才。</p><p></p><p>而所谓的“双六模型”其实指的是面向业务架构人才，我们重点强调的“6 个思维”和“6 个能力”。其中，“6 个思维”包括了架构思维、流程思维、数据思维、产品思维、生态思维和历史思维，同时，这“6 个思维”又对应着“6 个能力”，比如，架构思维对应的是系统分析能力，流程思维对应的是流程建模能力，数据思维对应的是数据建模能力，产品思维对应的是产品建模能力，生态思维对应的是软件工程能力，历史思维对应的则是领导力。</p><p></p><p>通过这样一个模型，就可以呈现出来，作为一个合格的业务架构师，起码要了解哪些技术和哪些业务，如何才能把企业的数字化战略通过架构方式展现出来，帮助技术人员更好地去落地。而对企业来说，在进行人才培养的时候也能够更有针对性。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/87/83/87cc62ae17ca266fdd220b50157a9d83.png\" /></p><p></p><h5>InfoQ：作为 ArchSummit 的讲师，您如何看待线下大会这样的学习场景？</h5><p></p><p></p><p>袁运亮：我觉得这种大会是很开拓视野的，也能让参会者借此结交更多志同道合的朋友。</p><p></p><p>如今，技术更新迭代是很快的，网上的信息也铺天盖地，但是缺点是它们都很碎片化、很零散，这让很多技术从业者变得无所适从。所以，我认为 InfoQ 举办的一系列<a href=\"https://www.infoq.cn/article/NM7wNWeVLHSfpyjD29uz\">技术大会</a>\"的价值是可以给技术从业者提供一个指引或者方向，让大家少走很多弯路。</p><p></p><p>同时，线下大会的场景也能帮助参会者扩展他的朋友圈，把这么多优秀的技术从业者同时聚集到同一个时空下是很不容易的，这对于技术从业者的个人成长和职业发展也很有帮助。比如，我们可以借此了解各大公司都在使用哪些主流技术，他们用到了什么样的程度，自己的公司是不是要跟进。通过线下的交流和面对面的交谈，很多工作上的困惑也可以慢慢解开。</p><p></p><h5>InfoQ：您个人在传统企业和互联网公司都有从业经验，对于技术从业者来说，如果要赶上数字化浪潮，您还有什么建议？</h5><p></p><p></p><p>袁运亮：主要还是要亲自下场，不要观望。我们发现，现在很多互联网行业和科技企业的人才，很多还是在观望的状态，到底传统企业做数字化靠不靠谱，以及大家到了传统企业之后能不能适应，这些都是大家顾虑的关键点。但无论如何，数字化时代确实已经到来了。现在，数字经济占 GDP 的比重越来越高，数字化的浪潮非常明显，那么，技术从业者还有什么理由去怀疑、去犹豫，不亲自下场，不亲自去尝试呢？这的确是一个非常好的窗口期。</p><p></p><p>如果等到整个传统企业数字化都进行到中后期了，你再想着去切入就真的有点晚了。换句话说，无论你做哪个行业，前期进入的时候肯定会有风险，但是收益也是更大的。并且，当你用自己擅长的数字化技术真正帮助企业完成了转型，甚至找到了第二增长曲线，从中获得的价值感也是完全不一样的。</p><p></p><h4>嘉宾介绍</h4><p></p><p></p><p>袁运亮，虎彩集团创新应用中心总经理，亚洲区块链产业研究院专家委员，CSA 区块链安全工作组专家。曾任职于汇丰、阿里巴巴、美的集团等公司，并担任技术专家、技术架构负责人、技术委员会委员。深入理解区块链原理和相关核心技术，对架构和开发以区块链为中心的企业级平台有丰富的经验。对区块链 + 行业应用有较深的理解和丰富的实践经验，包括工业制造、新零售、供应链金融、数字化营销、政务、新能源、物流、公益等。</p><p></p><p>霍太稳，极客邦科技创始人兼 CEO，InfoQ 中国创始人，极客时间创始人，TGO 鲲鹏会发起人。2007 年创立 InfoQ 中国，2014 年创立极客邦科技，2015 年发起 TGO 鲲鹏会，2017 年创立在线职业教育学习品牌极客时间，2019 年开创极客时间企业版，拓展企业服务市场。</p>",
    "publish_time": "2023-01-04 14:34:07",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "中国企业研发高效能白皮书-CI/CD篇",
    "url": "https://www.infoq.cn/article/Q4eHZELtNaUvfZJV7lrK",
    "summary": "<p>近年来中国企业研发正在从粗放型走向精益型，研发工作的“高效能”成为几乎每个研发团队共同的追求。<br />\n中国软件服务产业也在近5-10年中得到了飞速发展，技术服务的边界不断拓展，赋能研发高效的产品层出不穷，适合中国研发环境的技术服务体系在不断完善。从结果上看，中国企业正在高效能研发的路径上快速前进。<br />\n本份报告以中国高效能研发企业为研究对象，尝试解读市场中具有代表性的高效能研发解决方案。本次报告由五个篇章组成，如CI/CD、企业级架构、价值流管理等主题。研究小组期待可以通过研究，帮助中国企业研发团队获得高效能研发新知。<br />\nCI/CD篇是本次报告的第一篇章，主要研究了CI/CD工具是如何帮助研发团队提升效率。该篇章不仅阐述了CI/CD的起源与发展背景，而且对CI/CD市场的相关数据、厂商分布进行了研究与洞察。此外，研究发现，CI/CD主要通过持续性、自动化、可追溯、高效迭代四大抓手赋能研发团队。<br />\n同时，通过极狐GitLab CI/CD的实例，读者可以更好地了解 CI/CD是如何通过四大核心优势赋能团队研发效率方面的。</p>\n<h2>目录</h2>\n<h3>CI/CD概念和背景介绍</h3>\n<p>CI/CD的概念——关于CI/CD<br />\nCI/CD发展的阶段——历经三阶段，平台型产品站上历史舞台<br />\nCI/CD的价值——CI/CD赋能研发的四大抓手<br />\nCI/CD的流程结构——CI/CD流程结构创新赋能研发效率</p>\n<h3>CI/CD行业发展概况</h3>\n<p>CI/CD市场基础数据——CI/CD市场蓬勃发展<br />\nCI/CD市场厂商分布——CI/CD行业厂商矩阵逐步形成<br />\nCI/CD市场特征洞察——行业发展推动市场需求呈现新特征</p>\n<h3>极狐GitLab CI/CD：带您开启新世界大门</h3>\n<p>极狐GitLab CI/CD简介——GitLab CI/CD使用前和工作流<br />\n极狐GitLab CI/CD特征——极狐GitLab CI/CD四大核心优势<br />\n极狐GitLab CI/CD真实用户使用反馈</p>",
    "publish_time": "2023-01-04 15:41:56",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Angular v15发布：可以脱离 NgModules 构建组件了",
    "url": "https://www.infoq.cn/article/oONc5r5opJF64kBCtzIv",
    "summary": "<p>在过去的一年间，我们移除了Angular的遗留编译器和渲染流水线，这使得我们能够在过去的几个月中开发了一系列针对开发人员体验的改善。Angular v15是这项工作的高潮，它有几十项改进，可以带来更好的开发人员体验和性能。</p><p>&nbsp;</p><p></p><h2>独立API结束开发人员预览阶段</h2><p></p><p>在v14中，我们引入了新的独立（standalone）API，它能够让开发人员在不使用NgModule的情况下构建应用。我们很高兴地向大家宣布，这些API已经从开发人员预览阶段毕业，现在成为了稳定API的一部分。从现在开始，我们将会按照语义化版本的方式逐步演进它们。</p><p>&nbsp;</p><p>为了确保独立API能够毕业，我们的一部分工作就是保证独立组件能够在整个Angular中运行，它们现在已经完全可以在HttpClient、Angular元素、路由器中运行了。</p><p>&nbsp;</p><p>独立API允许我们使用单个组件来引导应用：</p><p>&nbsp;</p><p><code lang=\"null\">import {bootstrapApplication} from '@angular/platform-browser';\nimport {ImageGridComponent} from'./image-grid';\n\n\n@Component({\n  standalone: true,\n  selector: 'photo-gallery',\n  imports: [ImageGridComponent],\n  template: `\n    … \n  `,\n})\nexport class PhotoGalleryComponent {\n  // component logic\n}\n\n\nbootstrapApplication(PhotoGalleryComponent);</code></p><p>&nbsp;</p><p></p><h2>路由器和HttpClient的可摇树独立API</h2><p></p><p>我们可以使用新的路由器独立API构建多路由的应用。为了声明根路由，我们可以采取以下的方式：</p><p>&nbsp;</p><p><code lang=\"null\">export const appRoutes: Routes = [{\n  path: 'lazy',\n  loadChildren: () =&gt; import('./lazy/lazy.routes')\n    .then(routes =&gt; routes.lazyRoutes)\n}];</code></p><p>&nbsp;</p><p>其中，lazyRoutes 的声明如下：</p><p>&nbsp;</p><p><code lang=\"null\">import {Routes} from '@angular/router';\n\n\nimport {LazyComponent} from './lazy.component';\n\n\nexport const lazyRoutes: Routes = [{path: '', component: LazyComponent}];</code></p><p>&nbsp;</p><p>最后，在bootstrapApplication调用中注册appRoutes：</p><p>&nbsp;</p><p><code lang=\"null\">bootstrapApplication(AppComponent, {\n  providers: [\n    provideRouter(appRoutes)\n  ]\n});</code></p><p>&nbsp;</p><p>provideRouter&nbsp;API的另外一个好处在于它是支持可摇树（tree-shakable）的。打包器可以在构建时移除路由器未使用的特性。在使用新API进行的测试中，我们发现从包（bundle）中移除这些未使用的特性后，应用包中路由器代码的大小减少了11%。</p><p>&nbsp;</p><p></p><h2>指令组合API</h2><p></p><p>指令组合API将代码的重用提升到了一个新的层次。该特性来源于GitHub上最受欢迎的一个<a href=\"https://github.com/angular/angular/issues/8785\">特性请求</a>\"，它要求提供向宿主（host）元素添加指令的功能。</p><p>&nbsp;</p><p>指令组合API使开发人员能够使用指令来增强宿主元素，并为Angular提供了强大的代码重用策略，这一点要归功于我们的编译器。指令组合API仅适用于独立指令。</p><p>&nbsp;</p><p>我们快速看一个样例：</p><p>&nbsp;</p><p><code lang=\"null\">@Component({\n  selector: 'mat-menu',\n  hostDirectives: [HasColor, {\n    directive: CdkMenu,\n    inputs: ['cdkMenuDisabled: disabled'],\n    outputs: ['cdkMenuClosed: closed']\n  }]\n})\nclass MatMenu {}</code></p><p>&nbsp;</p><p>在上面的代码片段中，我们使用两个指令HasColor和CdkMenu对MatMenu进行了增强。MatMenu重用了HasColor的所有输入、输出和相关的逻辑，以及CdkMenu的逻辑和选中的输入。</p><p>&nbsp;</p><p>这项技术可能会让你想起其他编程语言中的多重继承或trait，与之不同的是，我们有一个解决名称冲突的机制，而且适用于用户界面的基础元素。</p><p>&nbsp;</p><p></p><h2>图像指令的功能已经稳定</h2><p></p><p>在v14.2中，我们曾经宣布与<a href=\"https://web.dev/aurora\">Chrome Aurora</a>\"合作开发的Angular<a href=\"https://developer.chrome.com/blog/angular-image-directive/\">图像指令</a>\"的开发人员预览版。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ae/aee88117aa923afbd524a783927c056c.png\" /></p><p></p><p>优化前后的示例应用</p><p>&nbsp;</p><p>我们很开心的宣布，图像指令的功能已经稳定。<a href=\"https://www.landsend.com/\">Land's End</a>\"对这一功能进行了实验，在<a href=\"https://philipwalton.com/articles/my-challenge-to-the-web-performance-community/\">lighthouse lab</a>\"测试中观察到LCP有75%的改善。</p><p>&nbsp;</p><p>v15还包含了图像指令的一些新特性：</p><p>自动生成srcset：该指令会为我们生成一个srcset属性，确保请求一个大小适当的图像。这可以减少图像的下载时间。填充模式[实验性的]：该模式使用图像来填充其父容器，从而避免了声明图像的宽度和高度。如果你不知道图像的尺寸，或者想要迁移CSS背景图像以使用指令的话，这是一个非常便利的工具。</p><p>&nbsp;</p><p>在组件或NgModule中，你可以直接使用独立的<a href=\"https://angular.io/api/common/NgOptimizedImage\">NgOptimizedImage</a>\"指令：</p><p>&nbsp;</p><p><code lang=\"null\">import { NgOptimizedImage } from '@angular/common';\n\n\n// Include it into the necessary NgModule\n@NgModule({\n  imports: [NgOptimizedImage],\n})\nclass AppModule {}\n\n\n// ... or a standalone Component\n@Component({\n  standalone: true\n  imports: [NgOptimizedImage],\n})\nclass MyStandaloneComponent {}</code></p><p>&nbsp;</p><p>要在组件中使用它的话，只需将图像的scr属性替换为ngSrc，并确保为LCP图像声明了priority属性。</p><p>&nbsp;</p><p>你可以在我们的<a href=\"https://angular.io/guide/image-directive\">文档</a>\"中获取更多的信息。</p><p>&nbsp;</p><p></p><h2>函数式路由守卫</h2><p></p><p>与可摇树独立路由器API一起，我们致力于减少守卫中的样板式代码。我们看一个样例，它是验证用户是否登录的守卫：</p><p>&nbsp;</p><p><code lang=\"null\">@Injectable({ providedIn: 'root' })\nexport class MyGuardWithDependency implements CanActivate {\n  constructor(private loginService: LoginService) {}\n\n\n  canActivate() {\n    return this.loginService.isLoggedIn();\n  }\n}\n\n\nconst route = {\n  path: 'somePath',\n  canActivate: [MyGuardWithDependency]\n};</code></p><p>&nbsp;</p><p>LoginService实现了大多数的逻辑，在守卫中，我们只是调用了isLoggedIn()。即便守卫非常简单，我们依然有很多样板式的代码。</p><p>&nbsp;</p><p>借助新的函数式路由守卫，我们可以将代码重构为如下的形式：</p><p>&nbsp;</p><p><code lang=\"null\">const route = {\n  path: 'admin',\n  canActivate: [() =&gt; inject(LoginService).isLoggedIn()]\n};</code></p><p>&nbsp;</p><p>我们在守卫声明中表述了整个守卫的内容。函数式守卫是可组合的，我们可以创建类似工厂的函数，它接受一个配置并返回一个守卫或解析器函数。你可以<a href=\"https://github.com/angular/angular/blob/8546b17adec01de69bf314a959ef2d12f6638eb9/packages/router/test/integration.spec.ts#L5157-L5194\">在GitHub上</a>\"找到一个连续运行路由守卫的样例。</p><p>&nbsp;</p><p></p><h2>路由解包默认的导入</h2><p></p><p>为了使路由器更加简洁，并进一步减少样板代码，路由器现在能够在懒加载时自动解包默认的导出。</p><p>&nbsp;</p><p>假设我们有如下的LazyComponent：</p><p>&nbsp;</p><p><code lang=\"null\">@Component({\n  standalone: true,\n  template: '...'\n})\nexport default class LazyComponent { ... }</code></p><p>&nbsp;</p><p>在这项变化之前，要懒加载一个独立组件，我们需要这样做：</p><p>&nbsp;</p><p><code lang=\"null\">{\n  path: 'lazy',\n  loadComponent: () =&gt; import('./lazy-file').then(m =&gt; m.LazyComponent),\n}</code></p><p>&nbsp;</p><p>现在，路由器会寻找一个默认的导出，如果能够找到的话，将会自动使用它，这会简化路由的声明：</p><p>&nbsp;</p><p><code lang=\"null\">{\n  path: 'lazy',\n  loadComponent: () =&gt; import('./lazy-file'),\n}</code></p><p></p><h2>&nbsp;</h2><p></p><p></p><h2>更好的堆栈跟踪</h2><p></p><p>我们从每年的开发者调查中得到了很多的启示，所以我们要感谢你花时间来分享你的想法。深入研究开发人员在调试体验所面临的斗争之后，我们发现错误信息可以进行一些改进。</p><p>&nbsp;</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c8/c8173165ff258716146e70449f2b27f2.png\" /></p><p></p><p>关于调试所面临挑战的反馈</p><p>&nbsp;</p><p>我们与Chrome DevTools协作来解决这个问题。我们看一个在Angular应用中可能得到的堆栈跟踪样例。</p><p>&nbsp;</p><p><code lang=\"null\">ERROR Error: Uncaught (in promise): Error\nError\n    at app.component.ts:18:11\n    at Generator.next ()\n    at asyncGeneratorStep (asyncToGenerator.js:3:1)\n    at _next (asyncToGenerator.js:25:1)\n    at _ZoneDelegate.invoke (zone.js:372:26)\n    at Object.onInvoke (core.mjs:26378:33)\n    at _ZoneDelegate.invoke (zone.js:371:52)\n    at Zone.run (zone.js:134:43)\n    at zone.js:1275:36\n    at _ZoneDelegate.invokeTask (zone.js:406:31)\n    at resolvePromise (zone.js:1211:31)\n    at zone.js:1118:17\n    at zone.js:1134:33</code></p><p>&nbsp;</p><p>这个片段有两个主要的问题：</p><p>只有一行信息对应开发人员编写的代码。其他的都来源于第三方依赖（Angular框架、Zone.js、RxJS）。没有任何关于用户交互导致错误的信息。</p><p>&nbsp;</p><p>Chrome DevTools团队创建了一种机制，通过Angular CLI标注源码映射（source map）来忽略来自node_modules的脚本。我们还合作开发了一个异步堆栈标签API，它允许我们将独立的、调度的异步任务串联成一个堆栈跟踪。<a href=\"https://twitter.com/Jialipassion\">Jia Li</a>\"将Zone.js与异步堆栈标签API进行了集成，这使得我们能够提供链接在一起的堆栈跟踪信息。</p><p>&nbsp;</p><p>这两个变更极大地改善了开发人员在Chrome DevTools中看到的堆栈跟踪信息：</p><p>&nbsp;</p><p><code lang=\"null\">ERROR Error: Uncaught (in promise): Error\nError\n    at app.component.ts:18:11\n    at fetch (async)  \n    at (anonymous) (app.component.ts:4)\n    at request (app.component.ts:4)\n    at (anonymous) (app.component.ts:17)\n    at submit (app.component.ts:15)\n    at AppComponent_click_3_listener (app.component.html:4)</code></p><p>&nbsp;</p><p>在这里，我们可以跟踪从AppComponent中的按钮按下到出错的整个执行过程。你可以在<a href=\"https://developer.chrome.com/blog/devtools-modern-web-debugging/\">这里</a>\"阅读关于这些改进的更多信息。</p><p>&nbsp;</p><p></p><h2>基于MDC的组件发布稳定版</h2><p></p><p>我们很高兴地宣布，基于<a href=\"https://github.com/material-components/material-components-web\">Material Design Components for Web（MDC）</a>\"的Angular material组件的重构已经完成。这个变化使Angular更加符合Material Design规范，并使我们能够在最终确定style token后立即采用Material 3。</p><p>&nbsp;</p><p>对于许多组件，我们更新了样式和DOM结构，还从头重写了一些组件。我们为新组件保留了大多数TypeScript API和组件/指令选择器，使其与旧的实现方式完全相同。</p><p>&nbsp;</p><p>我们迁移了数以千计的谷歌项目，这使得我们确保外部迁移路径能够顺利进行，并且记录了所有组件的<a href=\"https://github.com/angular/components/blob/main/guides/v15-mdc-migration.md#comprehensive-list-of-changes\">变更清单</a>\"。</p><p>&nbsp;</p><p>由于使用了新的DOM和CSS，你可能会发现应用中的一些样式需要调整，尤其是如果你的CSS覆盖了已迁移组件的内部元素的样式的话。</p><p>&nbsp;</p><p>每个新组件的旧实现均已被废弃，但是依然可以通过“legacy”导入获取它们。比如，通过导入遗留的按钮模块，你可以导入旧的mat-button实现。</p><p>&nbsp;</p><p><code lang=\"null\">import {MatLegacyButtonModule} from '@angular/material/legacy-button';</code></p><p>&nbsp;</p><p>请访问<a href=\"https://github.com/angular/components/blob/main/guides/v15-mdc-migration.md#how-to-migrate\">迁移指南</a>\"获取更多信息。</p><p>&nbsp;</p><p>在幕后，我们将许多组件修改为使用design token和CSS变量，这为采用Material 3组件风格的应用提供了更平滑的迁移路径。</p><p>&nbsp;</p><p></p><h2>组件中的更多改进</h2><p></p><p>我们解决了投票第四多的问题，即<a href=\"https://github.com/angular/components/issues/1331\">滑块中的范围选择</a>\"。</p><p>&nbsp;</p><p>要获取范围输入，我们可以：</p><p>&nbsp;</p><p><code lang=\"null\">\n  <input />\n  <input />\n</code></p><p>&nbsp;</p><p>除此之外，所有的组件现在都有一个API来自定义密度，这解决了另一个很常见<a href=\"https://github.com/angular/components/issues/4597\">GitHub的问题</a>\"。</p><p>&nbsp;</p><p>我们现在可以通过自定义主题来声明所有组件的默认密度：</p><p>&nbsp;</p><p><code lang=\"null\">@use '@angular/material' as mat;\n\n\n$theme: mat.define-light-theme((\n  color: (\n    primary: mat.define-palette(mat.$red-palette),\n    accent: mat.define-palette(mat.$blue-palette),\n  ),\n  typography: mat.define-typography-config(),\n  density: -2,\n));\n\n\n@include mat.all-component-themes($theme);</code></p><p>&nbsp;</p><p>新版本的组件包括广泛的可访问性改进，包括更好的对比度、增加触摸目标尺寸，以及完善的ARIA语义。</p><p>&nbsp;</p><p></p><h2>实验性esbuild支持的改进</h2><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/cf/cf7137e484220299a178585063df9d4f.gif\" /></p><p></p><p>&nbsp;</p><p>在v14中，我们宣布在ng build中对<a href=\"https://esbuild.github.io/\">esbuild</a>\"的实验性支持，以实现更快的构建时间并简化我们的流水线。</p><p>&nbsp;</p><p>在v15中，我们现在有了实验性的Sass、SVG模板、文件替换和ng build --watch支持! 请通过更新你的构建器angular.json来尝试esbuild，将其从</p><p>&nbsp;</p><p><code lang=\"null\">\"builder\": \"@angular-devkit/build-angular:browser\"</code></p><p>&nbsp;</p><p>更改为：</p><p>&nbsp;</p><p><code lang=\"null\">\"builder\": \"@angular-devkit/build-angular:browser-esbuild\"</code></p><p>&nbsp;</p><p>如果你在生产环境构建中遇到任何问题，都可以在GitHub上<a href=\"https://github.com/angular/angular-cli/issues/new?assignees=&amp;labels=&amp;template=1-bug-report.yml\">提交issue</a>\"。</p><p>&nbsp;</p><p></p><h2>CLI的改进</h2><p></p><p>在Angular CLI中，我们引入了对稳定的独立API的支持。现在可以通过ng g component --standalone生成一个新的独立组件。</p><p>&nbsp;</p><p>我们还在简化ng new输出。作为第一步，我们通过删除test.ts、polyfills.ts和environments来减少配置。现在你可以直接在angular.json中的polyfills区域指定你的polyfills：</p><p>&nbsp;</p><p><code lang=\"null\">\"polyfills\": [\n  \"zone.js\"\n]</code></p><p>&nbsp;</p><p>为了进一步减少配置开销，我们现在使用.browserlist让你定义目标ECMAScript版本。</p><p>&nbsp;</p><p></p><h2>功能废弃</h2><p></p><p>主发布版本使我们能够使框架朝着简单化、更好的开发者体验以及与Web平台一致的方向发展。</p><p>&nbsp;</p><p>在分析了谷歌的数千个项目后，我们发现了一些很少使用的模式，这些模式在大多数情况下会被滥用。因此，我们废除的providedIn: 'any'就是这种情况，除了框架内部的一些晦涩情况外，它的用途非常有限。</p><p>&nbsp;</p><p>我们也将废弃providedIn: NgModule。它的用途并不广泛，而且在大多数情况下会导致使用不当，在这种情况下你应该选择providedIn: 'root'。如果你真的需要将提供者的范围扩大到特定的NgModule，请使用NgModule.providers。</p><p>&nbsp;</p><p>随着CSS中布局的不断发展，团队将停止发布@angular/flex-layout的新版本。我们会在明年继续提供安全性和浏览器兼容性方面的修复。你可以在我们的 “现代CSS”系列的<a href=\"https://blog.angular.io/modern-css-in-angular-layouts-4a259dca9127\">第一篇博文</a>\"中了解更多信息。</p><p>&nbsp;</p><p></p><h2>未来展望</h2><p></p><p>在<a href=\"https://blog.angular.io/version-9-of-angular-now-available-project-ivy-has-arrived-23c97b63cfa3\">2020年推出的Ivy</a>\"实现了很多全面性的改进，你可以发现这些改进已经开始浮现。可选的NgModules就是一个很好的样例。它有助于减少初学者需要处理的概念，它同时能够支持高级功能，如通过独立指令实现组合API。</p><p>&nbsp;</p><p>下一步，我们将处理服务器端渲染流水线和反应性的改进，同时带来全面的改进与增强。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://blog.angular.io/angular-v15-is-now-available-df7be7f2f4c8\">https://blog.angular.io/angular-v15-is-now-available-df7be7f2f4c8</a>\"</p><p></p><h5>相关阅读：</h5><p></p><p></p><p><a href=\"https://xie.infoq.cn/article/fd637cabb33b1ab82d5742dee\">AngularJS 进阶 (二十五)requirejs + angular + angular-route 浅谈 HTML5 单页面架构</a>\"</p><p></p><p><a href=\"https://xie.infoq.cn/article/7baec545b8202471064494a69\">2023 重学 Angular</a>\"</p><p></p><p><a href=\"https://xie.infoq.cn/article/61e968dd45368e77c03fcbe10\">谈谈企业级前端 Angular 应用的定制化二次开发话题</a>\"</p><p></p><p><a href=\"https://xie.infoq.cn/article/5841d84afc317bf27688bcd69\">SAP UI5 应用和 Angular 应用视图里控件 id 生成逻辑的异同比较</a>\"</p>",
    "publish_time": "2023-01-04 16:14:55",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "展望测试开发工程师的 2023 ｜InfoQ《极客有约》",
    "url": "https://www.infoq.cn/article/z0xL4IhkjkFQiWp5eq50",
    "summary": "<p>提起软件测试工程师，更多人联想到的是工作轻松，不需要敲代码、工资高、涨薪快，甚至可以发展成为管理层，那么现实真的是这样吗？测试工程师在过去一年发展如何？未来有哪些技术值得关注？本期《极客有约》带您展望测试工程师的2023</p>",
    "publish_time": "2023-01-04 16:32:07",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "微软计划将 ChatGPT 添加到 Bing 中，以吸引谷歌搜索用户",
    "url": "https://www.infoq.cn/article/mCH0RfLz8hIPx0LDS7yP",
    "summary": "<p>据<a href=\"https://www.bloomberg.com/news/articles/2023-01-04/microsoft-hopes-openai-s-chatbot-will-make-bing-smarter\">彭博社报道</a>\"，有知情人士透露，微软正准备将 OpenAI 的 ChatGPT 聊天机器人添加到其 Bing 搜索引擎中，以吸引竞争对手谷歌的用户。</p><p>&nbsp;</p><p>这位知情人士表示，微软相信，对于搜索用户来说，提供更具对话性和上下文回复，可以比链接提供更好的答案，从而赢得用户。微软可能在未来几个月内推出附加功能，但现在仍在权衡聊天机器人的准确性以及将其纳入搜索引擎的速度。该知情人士表示，最初的版本可能是对一小部分用户的有限测试。</p><p>&nbsp;</p><p>微软的 Bing 服务规模远小于Alphabet Inc.占主导地位的谷歌搜索引擎，这位知情人士表示，微软几个月来一直在试用 ChatGPT。The Information 早些时候&nbsp;<a href=\"https://www.theinformation.com/articles/microsoft-and-openai-working-on-chatgpt-powered-bing-in-challenge-to-google\">报道</a>\"了微软的计划。</p><p>&nbsp;</p><p>由微软投资 10 亿美元支持的人工智能研究机构 OpenAI 在 11 月公开发布了 ChatGPT 供用户测试。其可以写代码、编剧本、甚至写论文的功能吸引了大批用户，一跃成为大家<a href=\"https://www.infoq.cn/article/AWWsrfb54zTvglZ0I5qS\">关注的焦点</a>\"。甚至马斯克也发推表示“ChatGPT 好得吓人，我们离强大到危险的人工智能不远了”。</p><p>&nbsp;</p><p>与此同时，谷歌及其母公司 Alphabet 的首席执行官 Sundar Pichai 也在为谷歌做好准备以应对他所感知到的威胁。</p><p>&nbsp;</p><p>根据外媒报道，Pichai 参与了一系列探讨谷歌 AI 战略的会议，而且为了应对 ChatGPT 带来的威胁甚至推翻了内部众多团队的原有工作，并正在从其他部门抽调员工，以应对 ChatGPT 的威胁。谷歌的研究、信任与安全等部门和团队u饿将进行组织重整，旨在帮助开发和发布新的 AI 原型和产品。据报道，谷歌管理层已经发布了<a href=\"https://www.infoq.cn/article/lxDIGR1fQU5BRyH47mbe\">“红色代码”警报</a>\"。在硅谷，这就意味着拉响了“火警”。</p><p></p><p></p><p>参考链接：</p><p>https://www.bloomberg.com/news/articles/2023-01-04/microsoft-hopes-openai-s-chatbot-will-make-bing-smarter</p>",
    "publish_time": "2023-01-04 16:48:22",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "“白嫖”完AWS后，为了节省成本，我们最终选择了Fly.io",
    "url": "https://www.infoq.cn/article/gHRBdyC8BpfPyJ9oUvw9",
    "summary": "<p>多年来，AWS凭借其快速部署、快速调整、多区域部署、灵活、稳定等特性在市场上备受好评，根据Synergy Research Group的2022年第二季度统计数据，全球云服务器市场本季度营收547亿美金，过去12个月营收达到2050亿美金。各大云服务供应商中，亚马逊云以接近34%的市占率排名第一，比第二、第三名加起来都高。</p><p></p><p>但优势明显的<a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651124439&amp;idx=4&amp;sn=62a689cb15df69b8fb7c0471e8b7c791&amp;chksm=bdb90a848ace83927afe475b487935cd6c69b611088cded812504b180989a149b876e894c3a7&amp;scene=27#wechat_redirect\">AWS</a>\"却并非适合所有企业，对于很多全公司员工甚至不足10人的小型初创公司来讲，AWS的使用成本还是超出了他们的预期，无奈之下，这些企业不得不另辟蹊径，选择一些更加经济实惠的代替方案。</p><p></p><p>相比于AWS，Fly.io带来了卓越的开发者体验，且上手难度很低。当然，<a href=\"https://fly.io/\">Fly.io</a>\"也有一些仍显粗糙的部分。如果大家愿意自己打理基础设施，并能够接受缺乏一流技术支持的现实，那Fly.io的确值得关注。</p><p></p><p>总的来说，主流云服务商的产品更“花里胡哨”，Fly.io则更加简单务实。</p><p></p><h3>Terrateam公司简介</h3><p></p><p><a href=\"https://terrateam.io/blog/flying-away-from-aws\">Terrateam </a>\"是一个 CI/CD 平台，该公司由实践经验丰富的软件工程师创立，对于 Terrateam 来说，保持简单而有效很重要。</p><p></p><p>跟其他初创公司一样，Terrateam刚刚起步的时候，大家都想快速行动、看看业务方向有没有搞头。AWS当然是最直观的选择，能帮Terrateam在短时间内站稳脚跟。只用一点免费积分，整整一年都不用担心基础设施了，简直堪称完美。</p><p></p><p>但时间过得很快，免费积分用完了。看着AWS的账单，Terrateam团队发现这样的开销对一家全靠自己的初创公司来说实在太高了。于是Terrateam团队开始四下寻找更便宜的替代品，同时又不能影响稳定性、安全性和可扩展性。</p><p></p><h3>为什么要“逃离”AWS？</h3><p></p><p>迁移的主要动机当然是成本。<a href=\"https://www.infoq.cn/article/tTWtyKOqhBtGmJWzTZk5\">AWS可不便宜</a>\"，Terrateam团队表示：“其中很多功能我们也用不上。也许未来用得上吧，但目前没必要”。</p><p></p><p>在设计上，Terrateam需要的是一个体量较小的简单基础设施堆栈，具体包括：</p><p></p><p>一套Postgres数据库；Web服务：一个简单的Docker容器，负责监听一个端口，需要能横向扩展且保持轻量化。这样一套简单堆栈的好处，就是能为他们提供很多供应商选项。Terrateam知道自己的需求：便宜的PaaS，同时剔除一切非必要元素。Terrateam需要的其实是一种类似于现代版Heroku的产品。</p><p></p><p>经过快速实验和概念验证之后，Terrateam把目光投向了Fly.io，并决定建立一套登台环境来充实更多细节。</p><p></p><h3>准备工作</h3><p></p><p>在建立登台环境时，Terrateam想要一一映射现有AWS基础设施中的所有部分，把它们跟Fly.io组件匹配起来。</p><p></p><p>AWS ALB → Fly.io Load BalancerAWS ECS → Fly.io NomadAWS RDS → Fly.io Postgres (大差不差)下一步，则是创建Fly.io应用程序和配置文件。</p><p></p><p>Fly.io拥有强大的CLI，允许用户为每个应用程序指定相应的fly.toml配置文件。使用此配置，Terrateam团队创建了应用程序并轻松完成必要配置。整体体验相当不错。</p><p></p><p>来看看Terrateam的登台&nbsp;fly.toml:</p><p></p><p><code lang=\"plain\">app = \"terrateam-app-staging\"\nkill_signal = \"SIGINT\"\nkill_timeout = 60\n\n[env]  \nDB_HOST = \"terrateam-db-staging.internal\"  \nDB_NAME = \"terrateam\"  DB_PORT = \"5432\"  \nDB_USER = \"app\"  \nTERRAT_PORT = \"8180\"  \nTERRAT_PYTHON_EXEC = \"/usr/bin/python3\"\n\n[[services]]  \ninternal_port = 8080  \nprotocol = \"tcp\"  \n[services.concurrency]    \nhard_limit = 25    \nsoft_limit = 20    \ntype = \"connections\"\n\n [[services.http_checks]]    \n grace_period = \"10s\"    \n interval = \"10s\"    \n method = \"get\"    \n path = \"/health\"    \n protocol = \"http\"    \n restart_limit = 0    \n timeout = \"3s\"    \n tls_skip_verify = false    \n [services.http_checks.headers]\n \n [[services.ports]]    \n force_https = true    \n handlers = [\"http\"]    \n port = 80   \n \n [[services.ports]]    \n handlers = [\"tls\", \"http\"]    \n port = 443 \n \n [deploy]  \n strategy = \"rolling\"\n</code></p><p></p><h3>测试</h3><p></p><p>在着手构建Terrateam登台环境时，技术团队很快遇到了以下障碍。好在这些问题都有简单的修复办法。</p><p></p><h4>IPv6</h4><p></p><p>Fly.io应用端点会解析为IPv6地址。</p><p></p><p>josh@elmer:~ $ fly ssh console --app terrateam-app-stagingConnecting to fdaa:0:c037:a7b:c6ef:47dd:247:2... complete/ # dig terrateam-db-staging.internal A terrateam-db-staging.internal AAAA +shortfdaa:0:c037:a7b:c207:e395:9a80:2/ #</p><p></p><p>但Terrateam的应用程序并不支持IPv6。这是Terrateam团队自身的问题，但用上Happy Eyeballs算法后，麻烦立马解决。</p><p></p><h4>Postgres与SSL</h4><p></p><p><a href=\"https://www.infoq.cn/article/K30UQfJt7TqDVLDgjIK2\">数据库</a>\"连接不正常。虽然Terrateam团队可以通过应用程序解析并抵达数据库端点，但却始终无法连接。技术团队使用的数据库强制要求用SSL建立安全连接。当然可以直接覆盖掉这项要求，但这里用SSL配置Postgres明显更安全。</p><p></p><p>搜索Fly.io文档，似乎没找到用fly.toml文件来配置SSL的简便方法。经过进一步调查，Terrateam团队意识到Fly.io Postgres跟AWS RDS还是有一定区别。官方文档也明确提到，“这不是托管Postgres。”</p><p></p><p>Fly.io CLI提供对创建新数据库的特别支持，但也就只限于创建环节。后续的管理、扩展、升级、故障转移和配置都得由用户亲自动手。这并不是在抱怨，毕竟Fly.io的态度非常诚恳坦率，会明确说他们能实现什么、不能实现什么。</p><p></p><p>要用SSL配置Postgres，首先需要创建证书，之后是在postgresql.conf中部署正确配置。到这里，第二个问题顺利解决。</p><p></p><h3>正式迁移</h3><p></p><p>在解决了登录环境中的问题之后，是时候创建Terrateam Fly.io生产应用程序并正式启动迁移了。</p><p></p><p>Terrateam团队讨论了两种迁移方法：</p><p></p><p>零停机实时迁移尽可能缩短停机时间的快速迁移</p><p></p><h4>实时迁移</h4><p></p><p>根据个人经验，每次谈起迁移时，大家都会先讨论零应用停机完成迁移的实施难度。Terrateam团队后来整理了一份涉及复杂Nginx配置的方案，但最终没有采用。</p><p></p><p>与实时迁移所对应的努力和复杂程度相比，Terrateam团队觉得还不如选择短暂停一会儿机的快速迁移。有些事情确实是越简单、越“傻瓜”越好。再加上能够重新发送期间错过的GitHub webhook，进一步坚定了技术团队用短时间停机换简单迁移的决心。</p><p></p><h4>快速迁移</h4><p></p><p>快速<a href=\"https://www.infoq.cn/article/4u0MQ4321CGS7uEAygpY\">迁移</a>\"就很直观了：</p><p></p><p>用低DNS TTL更新app.terrateam.io阻断AWS ALB上的传入连接将AWS RDS数据库迁移至新的Fly.io数据库更新app.terrateam.io&nbsp;以指向新的Fly.io应用端点重新发送遗漏的GitHub webhook（事实证明并不存在遗漏）优势</p><p>在用Fly.io托管Terrateam之后，技术团队表示体会到了不少优势，而且都跟Fly.io组织有关。事实证明，Fly.io非常了解典型工程团队的基础设施构建需求。</p><p></p><h4>可观察性</h4><p></p><p>Fly.io免费提供良好的可观察性。创建新应用程序时，系统会自动提供Grafana仪表板，其中包含各种常用图表。此外，还能轻松在现有图表和仪表板之上，创建更多新型图表和仪表板，大大降低应用程序的观察难度。与AWS CloudWatch，这简直就是一股清新的空气。</p><p></p><p>另外，如果将应用程序配置为公开Prometheus端点，这些指标也能自动显示在Grafana仪表板上。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/78/78fa9710242a92f9643f28d62d52f3ee.png\" /></p><p></p><h4>远程访问</h4><p></p><p>跟AWS相比，这又是Fly.io另一个大放异彩的特性。Terrateam经常需要远程访问运行中的容器，特别是在首次构建基础设施或解决持续存在的问题时。有时候，只需要一个shell。</p><p></p><p>Fly.io CLI提供一种非常简单的访问权限获取方式：</p><p></p><p>josh@elmer:~ $ fly ssh console --app terrateam-app-stagingConnecting to fdaa:0:c037:a7b:c6ef:47dd:247:2... complete/ #</p><p></p><p>这样做真是太棒了，终于不用受VPN、SSH密钥、堡垒主机的折磨，fly ssh console命令才是真正的便利！</p><p></p><h4>IPv6专用网络</h4><p></p><p>每位Fly.io客户都会收到一个带有IPv6端点的自动安全专用网络。对于像Terrateam这样的简单应用，这可太方便了。用不着自己建立单独的专用网络，也不必担心CIDR、子网、路由及网络复杂性带来的其他问题。一切都正常运行，一切都刚刚好。</p><p></p><h4>多区域可扩展性</h4><p></p><p>Fly.io的多区域可扩展性表现极佳。通过在fly.toml中指定多个区域，Terrateam的应用程序就能神奇地存在于多个区域中。这些区域可以随时变更，无需停机。对其他云服务商来说，同样的效果可没这么容易实现。</p><p></p><h4>简洁的UI</h4><p></p><p>Fly.io的仪表板非常简洁、条理清晰且易于导航。它不像其他云厂商的仪表板那样杂乱无章。事技术团队总能在其中轻松找到自己需要的条目，请务必保持下去。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f4/f47a665383c773fccb0d667f1880042e.png\" /></p><p></p><h3>短板</h3><p></p><p></p><h4>Terraform提供程序</h4><p></p><p>当然，免费的软件也有其自身短板。技术团队原本想用Terraform创建所有内容，但很快意识到根本不行。Fly.io Terraform的提供程序不够强大，无法创建完整环境。虽然令人失望，但技术团队还是决定继续前进。请注意，这对Terrateam是个大问题，因为Terrateam是一家强调易用性的公司。但技术团队已经定下计划，后续会逐渐为Fly.io Terraform提供程序做贡献。</p><p></p><h4>Postgres的可用性问题</h4><p></p><p>Fly.io使用<a href=\"https://github.com/sorintlab/stolon\">Stolon</a>\"集群管理器来实现Postgres的故障转移。技术团队表示：“Stolon的故障转移可靠性并不好。这是个问题，毕竟它就是专为这事而存在的。”</p><p></p><p>技术团队成员表示，自己曾经历过一次事故，被迫以手动方式创建新数据库并从备份中恢复。Fly.io已经收到反馈，并努力用更强大的方案取代Stolon。</p><p></p><h4>日志记录</h4><p></p><p>Fly.io提供的容器日志方案确实有点简陋了。虽然用Fly.io CLI和Fly.io仪表板都能轻松查看日志，但其中只保留少部分内容。所以，技术团队只能在应用之内或将日志发送至外部服务，借此为各Fly.io应用程序建立单独的远程日志记录方案。这会带来额外的运营开销，希望以后会有改善。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0e/0eaa79faadf8f6884f0ecc5bd5c00cda.png\" /></p><p></p><h4>技术支持</h4><p></p><p>Fly.io并不是那种服务很周到的企业，如果大家特别需要随时获取技术支持，但Fly.io恐怕不太合适。</p><p></p><p>在通过电子邮件发送支持时（目前只提供邮件联络选项），往往要几个小时甚至几天后才能得到回复。有时候Fly.io那边干脆没有跟进，感觉他们的支持水平不如其他云服务商。</p><p></p><p>但毕竟Fly.io强调的就是客户自主运营基础设施，他们只负责提供构建块。有良好的服务支持当然好，但他们认为环境的管理工作最终还是客户的事。</p><p></p><p>Terrateam团队表示，对于Fly.io还是充满了期待的，还是希望未来能有更好的支持体验。即使没法直接从工作人员那得到具体答案，至少也应该得到一点指引。</p><p></p><h3>写在最后</h3><p></p><p>没有哪套平台真正完美无缺，而且在Terrateam看来，Fly.io甚至已经在可能的范围内做得足够好。Terrateam团队在使用后表示对它没有太多抱怨，特别是考虑到他们明确解释了自己的产品能做什么、不能做什么。</p><p></p><p>Terrateam的堆栈设计非常简单，也许这才是Fly.io特别契合需求的原因。Terrateam不需要太多活动部件或基础设施，最核心的元素就是数据库加容器。</p><p></p><p>但各位读者朋友的需求可能并非如此，如果大家需要消息中间件、S3存储桶、IAM等更完备的服务组件，那Fly.io可能不适合你。</p><p></p><p>参考链接：</p><p></p><p><a href=\"https://terrateam.io/blog/flying-away-from-aws\">https://terrateam.io/blog/flying-away-from-aws</a>\"</p>",
    "publish_time": "2023-01-04 16:55:45",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]