[
  {
    "title": "Just：Spring Boot应用的新命令行界面",
    "url": "https://www.infoq.cn/article/KUFfYLk4zWcQ1VZXflpp",
    "summary": "<p>命令行工具<a href=\"https://just.maciejwalkowiak.com/\">Just</a>\"，无需任何配置即可自动加载有变动的源码、构建文件或Docker编排文件，提升Spring Boot应用构建时的Java开发体验，同时该项目也支持生成（原生）应用及（原生）Docker镜像。</p><p>&nbsp;</p><p>自由职业建筑师兼开发者<a href=\"https://www.linkedin.com/in/maciejwalkowiak/\">Maciej Walkowiak</a>\"，在代码首次提交恰好一个月后，正式<a href=\"https://www.linkedin.com/posts/maciejwalkowiak_java-development-springboot-activity-7008736461634084864-KiUs\">发布</a>\"了Just。这款被编译为原生二进制文件的Spring Boot应用借助<a href=\"https://picocli.info/\">picocli</a>\"编写出功能丰富的命令行应用、<a href=\"https://www.testcontainers.org/\">Testcontainers</a>\"运行容器的JUnit测试、<a href=\"https://sentry.io/welcome/?utm_source=google&amp;utm_medium=cpc&amp;utm_campaign=9575834316&amp;utm_content=g&amp;utm_term=sentry&amp;device=c&amp;gclid=CjwKCAiAnZCdBhBmEiwA8nDQxZFxbL9mxyZDFYYNTXDhGLT2ryvDzmhpacSGQIRT1zDXtQtCpeOTnBoCl-sQAvD_BwE&amp;gclid=CjwKCAiAnZCdBhBmEiwA8nDQxZFxbL9mxyZDFYYNTXDhGLT2ryvDzmhpacSGQIRT1zDXtQtCpeOTnBoCl-sQAvD_BwE\">Sentry</a>\"监测问题错误，以及<a href=\"https://jreleaser.org/\">JReleaser</a>\"发布项目。</p><p>&nbsp;</p><p>Just可以自动检测源码变动，并在自动重构后使用<a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.devtools\">Spring Boot开发工具</a>\"重新加载应用。此外，修改pom.xml或build.gradle文件的构建都会导致应用暂停，并在构建文件刷新后重新启动。与Spring Boot开发工具不同，执行run子命令时Just会启动数据库、通过<a href=\"https://docs.docker.com/compose/\">Docker编排</a>\"定义的服务等基础设施服务，执行just命令可以自动触发应用构建配置检测。Just支持Maven和Gradle对应的封装器，也支持Maven Daemon。仅需执行一次run子命令，Just就能够处理好应用中的变更。</p><p>&nbsp;</p><p>与run子命令相比，build子命令执行时会根据构建目标正确地转换成对应的Maven或Gradle命令：</p><p><code lang=\"null\">just build [--quick] [--skip-test] </code></p><p>&nbsp;</p><p>使用其中的quick选项会跳过测试、文档生成、格式检测以及静态分析。Just提供jar、native、image，以及原生native-image几种不同buildTarget选项以创建（原生）应用或（原生）Docker镜像。另外，format子命令会根据项目配置中默认设置、<a href=\"https://github.com/spring-io/spring-javaformat\">Spring Java格式</a>\"、<a href=\"https://github.com/diffplug/spotless\">Spotless</a>\"配置规则格式化代码库。运行中进程可通过kill子命令终止，默认设置下端口8080上运行的进程会被终止，但端口号也可以通过-p 参数指定，-9参数则会强行执行kill子命令。</p><p>&nbsp;</p><p>Just可通过命令行执行，在IntelliJ IDEA则需要先通过init idea子命令新增运行配置，手动新增配置则可以在“运行”菜单栏的下拉选项中选择“修改配置”，新增“Shell脚本”并重命名，“执行”选项选择“Script Text”，输入框“Script Text”中输入just run。取消勾选“命令行执行”后应用配置，“运行”菜单中就会显示行shell脚本的名称，我们也可以点击启动Just了。</p><p>&nbsp;</p><p>在MacOS上安装Just可通过<a href=\"https://brew.sh/\">Homebrew</a>\"执行：</p><p><code lang=\"null\">brew install maciejwalkowiak/brew/just</code></p><p>在Windows上则通过<a href=\"https://scoop.sh/\">Scoop</a>\"：</p><p><code lang=\"null\">scoop bucket add maciejwalkowiak https://github.com/maciejwalkowiak/scoop-just.git\nscoop install just</code></p><p>&nbsp;</p><p>此外，也可以手动安装应用至maxOS、Windows或Linux，以Linux命令为例：</p><p><code lang=\"null\">curl -Lo just.zip https://github.com/maciejwalkowiak/just/releases/latest/download/just-0.12.0-linux-x86_64.zip &amp;&amp; unzip just.zip &amp;&amp; chmod +x just &amp;&amp; sudo mv just /usr/local/bin/just &amp;&amp; just help</code></p><p>其中的help子命令可用于验证安装结果。</p><p>&nbsp;</p><p>Just并非开源项目，其在GitHub<a href=\"https://github.com/maciejwalkowiak/just\">仓库</a>\"中仅包含二进制、发布说明以及问题追踪，并没有发布源码。目前项目仍处于Alpha测试阶段且可免费使用，所有的发布版本中都含有内置过期时间，过期后可能需要购买应用或安装最新版本。</p><p>&nbsp;</p><p>关于Just更多信息可查看“<a href=\"https://just.maciejwalkowiak.com/docs/getting-started/\">开始使用</a>\"”文档。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/01/just-spring-boot-cli/\">Just, a New CLI for Spring Boot Applications</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/iCQ44j3XyAEl2FgHSPQy\">Spring Boot 3 和 Spring Framework 6 使用 Java 17 和 Jakarta EE 9，并支持基于 GraalVM 的原生 Java</a>\"</p><p><a href=\"https://www.infoq.cn/article/M8Tcely7QZhZYx4od2t1\">Spring&nbsp;Boot&nbsp;Migrator 简介</a>\"</p><p><a href=\"https://www.infoq.cn/article/LAvbFBiTzeXeqQ2CzAsi\">Dubbo 正式支持 Spring 6&amp;Spring&nbsp;Boot&nbsp;3</a>\"</p>",
    "publish_time": "2023-02-01 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "谷歌开源部门裁员“大地震”：多名开源功臣粗暴被裁，61岁程序员被迫再求职",
    "url": "https://www.infoq.cn/article/FB6BxlokIrMQgNLl3Vzt",
    "summary": "<p></p><blockquote>谷歌最近宣布裁员大约 1.2 万人，其中波及多名资深开源开发者。</blockquote><p></p><p></p><h2>谷歌裁掉多位知名开源开发者</h2><p></p><p></p><p>近日，谷歌母公司 Alphabet 宣布将<a href=\"https://www.infoq.cn/article/qQS8ErzXTjKoMu4NJhCJ\">裁员</a>\"约 1.2 万人，占该公司员工总数的 6%。有报道称，本次部分裁员名单是通过算法来完成的。在这些被裁的员工中，有人刚得到高绩效评估或高级管理职位，年薪在 50 万至 100 万美元不等。此外，裁员名单中还包括多位知名开源开发者，其中还有不少来自谷歌开源项目办公室的员工。</p><p></p><p>据 The Register 消息，被裁的开源大佬包括 18 年前创建谷歌开源项目办公室的 Chris DiBona，Samba 的联合创始人、谷歌工程师 Jeremy Allison；前开发者生态系统项目经理 Cat Allman；负责谷歌开源安全项目的新员工 Dave Lester。</p><p></p><p>其中，Chris DiBona 出生于 1971 年，今年 52 岁。在加入谷歌之前，Chris DiBona 是热门在线网站 Slashdot.org 的编辑/作者，也是国际知名的开源软件倡导者。他共同编辑了获奖论文集《开源》和《开源 2.0》，并为大量出版物撰稿。他曾经还是 TechTV 上的 Linux 人物，并在国际上就各种开源问题发表演讲。2004 年 8 月，Chris DiBona 加入谷歌，并创立了谷歌开源项目办公室(OSPO)。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0f/0fd8ba8d3e7008d0a2060d52d761bc0d.png\" /></p><p></p><p>Jeremy Allison 也是谷歌开源项目办公室的一员，同时也是知名开源软件 <a href=\"https://xie.infoq.cn/article/ee574fc25cbdcf486cdb02fea\">Samba</a>\" 的联合创始人。Samba 是在 Linux 和 UNIX 系统上实现 SMB 协议的一个免费软件，主要用于实现 Windows 和 Linux 之间互相共享资源。1 月 21 日，Jeremy Allison 在推特上表示：“刚被谷歌解雇。如果有人需要 SMB 1/2/3 协议或者开源经验，我很感兴趣。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/21/2126bc96773c63b84737c9917a30b502.png\" /></p><p></p><p>在过去几十年中，谷歌一直积极参与和推动开源发展，不少软件更是依托开源的力量才能屹立不倒。甚至有声音认为，谷歌的生死存亡全靠开源软件。</p><p></p><p>既然如此，为什么谷歌会裁掉这些在开源圈里很有地位的开发者？</p><p></p><p>据 The Register 报道，谷歌的普通员工中没有人知道具体情况。一位谷歌高管表示：“我们现在还不能完全了解所有的后果，但所有的人都还在公司的架构中。我想，经理们只了解他们的直属部下，其他啥也不知道。这儿乱七八糟的，连个沟通都很少。”</p><p></p><p>一个可能的原因是为了缩减成本。财务数据显示，谷歌母公司 Alphabet 第三季度营收为 691 亿美元，较上年同期增加 6%，尽管利润减少了 16%，但是依然高达 463.4 亿美元。</p><p></p><p>但市场对这一数据似乎并不满意。纽约时报以《Alphabet 的盈利同比下滑 27%》为标题报道这一新闻，这一新闻“糟糕”到足以让激进的对冲基金投资者 TCI 基金管理公司哀嚎：“该公司员工太多了，而且每个员工的成本都太高了。”数据显示，2021 年，谷歌的平均薪酬为 295884 美元。</p><p></p><p>TCI 表示：“Alphabet 雇佣了一批最有才华、最聪明的计算机科学家和工程师，但是他们在整个公司的员工中所占比例很低。”TCI 领导人Sir Christopher Hohn 认为谷歌裁掉数千名员工的做法是“迈向正确方向的一大步”，他认为谷歌“管理层应该将员工人数缩减到 15 万人左右……这意味着要削减大约 20% 的员工。”</p><p></p><h2>谷歌裁撤开源力量或将自毁长城？</h2><p></p><p></p><p>本次裁员，谷歌开源项目办公室损失惨重。对于谷歌本次裁掉多位知名开源开发者，InfoWorld 认为这是一种极其短视的行为。这些被解雇的开源大佬们曾为谷歌开源储备做出卓越贡献，是当之无愧的开源功臣。</p><p></p><p>比如，Chris DiBona 虽然没有直接参与到谷歌多年来数量质量双丰收的各个开源项目当中，但他是谷歌开源贡献文化的奠基人，带来的积极影响超过任何其他员工。Cat Allman 协助谷歌举办大获成功的谷歌编程之夏（GSoC）活动。一位直接受益于 GSoC 的用户评论道，“你在谷歌的工作，通过 GSoC 对全球成千上万人产生了巨大的积极影响。这种影响在发展中国家体现得尤其明显，我也曾经是那群孩子中的一员。”</p><p></p><p>这些年，谷歌和开源早已密不可分。早在 2019 年，谷歌就曾以开源为主线建立起合作伙伴关系，与七家开源数据公司建立合作（包括 MongoDB），又协助建立了开源安全基金会，通过提高关键开源项目安全性的方式降低用户使用门槛。事实上，开源已经渗透到谷歌云业务中的各个层面。虽然谷歌云中有很多项目是闭源的（比如BigQuery），但开源的项目更多。</p><p></p><p>凭借着 TensorFlow 和 Kubertnets 等大获成功的开源项目，谷歌得以在公有云市场的竞争中进展迅速，甚至与 AWS 打得有来有回。虽然 AWS 也能运用这些开源成果并获得更高收益，但谷歌的开源战略无疑为其自身带来了可观的红利。</p><p></p><p>此外，谷歌也在积极参与更多外部项目，这同样有助于增强其社区影响力。看看云原生计算基金会的 Devstats 页面，就会发现谷歌在 Envoy、etcd、Knative、<a href=\"https://www.infoq.cn/article/tfJtw1pWmbEIFNSxDK8q\">Istio</a>\" 等项目中都扮演着关键、甚至是头号贡献者的角色。</p><p></p><p>InfoWorld 表示，也许谷歌的算盘是，既然开源贡献已经被纳入谷歌的标准运营流程，那就不需要 DiBona 这类谷歌员工的个人影响力了。但这忽略了一个基本事实，即正是 DiBona 及其他被解雇的贡献者完成了幕后的架构设计、战略制定、社区游说和倡议执行工作，最终让开源成为谷歌企业基因中的组成部分。</p><p></p><p>当前，开源已经成为谷歌在云计算大战中保持优势的重要因素，粗暴裁撤开源功臣，怎么可能不引起人心浮动？</p><p></p><p>在未来，如果谷歌还打算继续借开源这股东风，就必须认真考虑该怎么规划开源人才。归根结底，行之有效的开源政策能带来远超投入的可观回报，谷歌务必得记住这一点。</p><p></p><p>参考链接：</p><p><a href=\"https://www.theregister.com/2023/01/27/google_open_source\">https://www.theregister.com/2023/01/27/google_open_source</a>\"</p><p><a href=\"https://www.infoworld.com/article/3686511/google-blew-it-with-open-source-layoffs.html\">https://www.infoworld.com/article/3686511/google-blew-it-with-open-source-layoffs.html</a>\"</p>",
    "publish_time": "2023-02-01 14:12:03",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "顶会论文 | 虚拟网络探测技术的探索与实践",
    "url": "https://www.infoq.cn/article/1945392d337d2234b67047c22",
    "summary": "<p>作者：吕彪 阿里云网络齐天负责人</p><p></p><p></p><blockquote>云网络由物理网络和虚拟网络共同组成，两者都会影响网络性能。过去的研究主要集中于解决物理网络探测，而在虚拟网络探测领域的相应研究则较少。本文将为大家分享一种专为大规模多租户虚拟网络设计的主动探测系统Zoonet，从技术层面解读Zoonet系统的设计背景、面临挑战、技术架构，以及大规模部署的经验分享。</blockquote><p></p><p></p><p>近日，阿里云洛神云网络的一篇论文“Zoonet: A Proactive Telemetry System for Large-Scale Cloud Networks” 被 ACM CoNEXT 2022 会议录取。今年CoNEXT总计收到了151篇投稿，成功入选28篇，录取率仅为18.5%。该论文在大规模虚拟网络探测领域作出了全球领先的研究探索，并且基于该研究的Zoonet网络探测系统已在阿里云全球数据中心部署应用。</p><p></p><p>为了方便大家更通俗地理解这篇论文，本文将从技术层面解读Zoonet系统的设计背景、面临挑战、技术架构，以及大规模部署的经验分享。</p><p></p><p></p><h1>一、背景介绍</h1><p></p><p></p><p>如今的公共云已成为整个社会的基础设施，可以同时为数百万租户提供服务。其中，云网络可以帮助每个租户构建可靠以及租户隔离的网络环境，使得租户可以互不干扰地运行自己的应用程序以及互相通信。云网络由底层的物理网络（physical network）和上层的虚拟网络（virtual network）共同组成。物理网络主要提供基础网络的连接能力，而虚拟网络可以为租户提供更高级的网络服务，比如网络地址空间隔离、虚拟路由转发、多IP共享带宽、Internet访问接入、租户级跨地域网络、租户级混合云网络等。由于物理网络和虚拟网络都会影响租户的网络性能，因此云厂商有必要对两层网络都进行探测，以保障租户的服务水平协议（SLA）。</p><p></p><p>通过文献调研，我们发现之前的研究主要解决物理网络探测的问题，比如Pingmesh[SIGCOMM'15]、Everflow[SIGCOMM'15]、007[NSDI'18]、dShark[NSDI'19]、NetBouncer[NSDI'19]等。而在虚拟网络探测领域，相应研究非常少。我们调研发现只有一篇VNET Pingmesh[IMC'18, short paper]尝试做虚拟网络探测。但是它只做了初步的方案设计和部署，并没有探讨以及解决大规模虚拟网络探测所面临的问题，比如虚拟网络的快速更新、对异构中间件（middlebox）的支持、租户级公网以及跨地域网络探测、完整的VM-VM探测链路覆盖等等。</p><p></p><p>因此本文提出一种专为大规模多租户虚拟网络设计的主动探测系统Zoonet。该系统包含云网络全网的覆盖性探测以及针对异常链路的按需探测。覆盖性探测以有限的带宽开销提供高路径覆盖，对冗余路径和路由/ACL限制路径进行剪枝，然后使用最简单的端到端探测模式。而按需探测实现网络异常的快速定位，对异常路径启动逐跳模式的探测。特别的，Zoonet在如下几个方面有亮点设计：</p><p></p><p>Zoonet支持异构的中间件。云网络中存在大量的异构中间件，因此Zoonet设计了一套通用探测模型，可以帮助这些中间件快速适配Zoonet。</p><p></p><p>Zoonet虚拟网络快速拓扑更新。为了处理频繁的拓扑更新，Zoonet订阅了拓扑变化的信息，并采用了一系列优化策略以提高更新效率。而对于更新不及时带来的测量噪音，Zoonet通过验证最新拓扑的方式来进行过滤。</p><p></p><p>Zoonet通过不断扩展探测边界来发现更多的虚拟网络场景问题。除了普通的私网、跨地域等场景，Zoonet还支持对公网、有状态中间件、虚拟机“最后一公里”等场景的探测。</p><p></p><p>Zoonet已经在阿里云部署了两年多，覆盖了数十个地域。在部署期间，Zoonet 发现了许多有趣的案例，包括虚拟网络协议栈错误、虚拟网络拥塞、虚拟路由异常、物理网络故障和虚拟机“最后一公里”异常。由于很多疑似网络问题并不是真正由网络引起的，Zoonet帮助云厂商在最大程度上实现了自证清白。</p><p></p><p></p><h1>二、物理网络探测局限</h1><p></p><p></p><p>多数人直观的感觉是可以通过物理网络探测结果来推测虚拟网络的状况，但是接下来我们会具体分析物理网络探测存在的局限，说明我们为什么必须要做虚拟网络探测。</p><p></p><p></p><h2>2.1 物理网络探测无法覆盖虚拟网络协议栈问题</h2><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/22/22393ef1b32b2d2ee85374657fc25a4c.png\" /></p><p></p><p>如上图所示，在物理主机上，物理网络协议栈和虚拟网络协议栈是分开实现的。物理网络协议栈基于内核转发的。在阿里云早期，虚拟网络协议栈是在用户空间和内核空间共同支持实现的。如今，为了实现更高性能的转发，虚拟网络协议栈完全在用户空间实现，使用基于DPDK的内核旁路模型。这样虚拟转发路径就与内核空间完全解耦了。由于物理网络探测仅通过物理网络协议栈发送探测，因此无法检测虚拟网络协议栈的问题。</p><p></p><p></p><h2>2.2 虚拟网络和物理网络之间没有精确的拓扑映射</h2><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/67/67a647224f2e4621a47057962dd49662.png\" /></p><p></p><p>上图给出了一个拓扑映射的例子。虚拟网络中一个简单的VM到VM路径对应于物理网络的四个底层ECMP路径。在这个例子中，即使物理网络检测到一条路径已经中断，也很难推断虚拟网络是否有问题，因为流量可能会旁路底层中断的路径（例如，flow 2）。更糟糕的是，即使我们注意到一个flow正在虚拟网络中丢包（例如，flow 1），我们也无法确定有故障的物理路径位置，因为四个ECMP路径弄乱了虚拟和物理拓扑之间的映射关系。</p><p></p><p></p><h2>2.3 物理网络探测可能会旁路中间件</h2><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/77/77160e49ca2795481ec758778e535c73.png\" /></p><p></p><p>上图显示了阿里云的物理网络拓扑，其中包含物理服务器、交换机、地域边界网关和挂载在负载均衡器下的各种中间件。在这样的拓扑中，中间件被部署为远离物理服务器和交换机的独立设备。将流量转发到这些中间件需要在发送方额外重写数据包目标地址。也就是说，依赖于主机启动的端到端探测方法将绕过这些“off-the-path”中间件。</p><p></p><p></p><h2>2.4 物理网络探测无法覆盖基于租户粒度的跨地域网络或Internet边界</h2><p></p><p></p><p>一个阿里云的租户可以购买多个VPC，分布在不同地域，通过跨地域网络连接。然而，地域内的物理网络探测无法覆盖地域边界网关以及租户粒度的跨地域网络，无法为特定租户提供跨地域端到端故障排除。同样的，虚拟机与互联网之间存在巨大的流量需求，因此云厂商需要解决租户对网络故障发生在云端还是ISP端的疑问。因此，网络探测应该覆盖云和Internet之间的边界，以消除这种疑问。然而，物理网络探测无法完成这个需求。</p><p></p><p></p><h1>三、虚拟网络探测挑战</h1><p></p><p></p><p>进行虚拟网络探测，尤其是像阿里云这样大规模的虚拟网络探测面临非常多独特的挑战，照搬物理网络探测的方法是不可行的。接下来我们简单介绍一下具体的虚拟网络探测挑战。</p><p></p><p></p><h2>3.1 在超大规模虚拟网络上实现低开销的探测</h2><p></p><p></p><p>一个大的云地域在物理网络中包含数十万台服务器。然而，虚拟网络通常包含更多的虚拟节点。首先，一台物理服务器可以虚拟成数百个虚拟机（如果使用ENI trunking技术，一个虚拟机可以进一步托管多达1024个容器）。其次，虚拟网络为海量租户提供服务，例如一个地域服务数百万租户。第三，对于大的租户，单个VPC可以容纳超大规模的虚拟节点（例如，大于50万个虚拟机）。根据我们的分析，在这样大规模的虚拟网络下进行探测，采用传统探测方案的开销将比物理网络探测高出三个数量级。</p><p></p><p></p><h2>3.2 适应虚拟网络拓扑的快速更新</h2><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f4/f4a6c7bf44f05dff78a7eb09f245b0e5.png\" /></p><p></p><p>物理网络的拓扑相对稳定。根据我们的经验，阿里云物理网络的更新频率大约是每月几千次。相比之下，由于大量的活跃租户以及灵活的管理API，虚拟网络的拓扑结构变化非常快。如上图所示，租户的资源分配和释放在云地域中每小时触发数万次虚拟网络拓扑更新。对于探测系统，频繁的虚拟网络更新会导致额外的开销：1）基于租户配置的实时拓扑重新计算；2）根据拓扑更新实时计算端到端探测路径；3）从控制器实时下发探测路径带来的大规模带宽开销。</p><p></p><p></p><h2>3.3 多服务和多中间件覆盖</h2><p></p><p></p><p>对于物理网络中的二层和三层设备，一般是基于无状态转发规则的数据包转发，比较方便实现出、入双向探测。但是，虚拟网络包含多种有状态的中间件，他们就不能实现简单的出、入双向探测。比如基于会话（session）的中间件，在客户端发送会话的第一个数据包之前，这些中间件中没有会话关系，因此来自服务器的数据包不能通过中间件正确转发。例如，虚拟机依赖SNAT（由NAT网关提供）访问互联网，但互联网无法主动访问虚拟机，除非建立SNAT会话。此外，不同的中间件可以有不同的实现，甚至可以在不同的平台（例如，裸机、NFV、FPGA、ASIC）中构建相同功能的中间件。因此虚拟网络探测框架需要适应中间件的异构性。</p><p></p><p></p><h2>3.4 租户无感的VM到VM探测</h2><p></p><p></p><p>对于物理网络，端到端意味着主机到主机，而对于虚拟网络，端到端意味着虚拟机到虚拟机。对于物理网络探测，可以在终端主机上的操作系统进程中实现探测任务生成或数据采集功能。但是同样的方法不能直接应用于租户的VM，因为云厂商不能侵入租户的虚拟机，必须要保护用户隐私。但是，如果没有VM嵌入式探针，端到端路径的“最后一公里”将无法轻松覆盖。我们下文中会讨论使用ARP Ping来解决这个问题。</p><p></p><p></p><h2>3.5 区分虚拟和物理网络问题</h2><p></p><p></p><p>当网络发生异常时，需要区分是虚拟网络问题和物理网络问题，以缩小故障范围。在物理网络中，我们可以依靠traceroute进行逐跳的测量诊断。然而，将traceroute扩展到虚拟网络时，即使它返回了虚拟网络中与精确跳数相关的丢包，我们仍然无法确认是到底是虚拟设备问题还是底层物理设备问题，因为在两个相邻的虚拟网络设备之间存在物理网络域。在本文中我们通过专门设计的Zoonet逐跳模式来解决这个问题。</p><p></p><p></p><h1>四、Zoonet解决方案</h1><p></p><p></p><p></p><h2>4.1 整体设计</h2><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ae/ae2d5d485e7bb2edcb67e424b920eb41.png\" /></p><p></p><p>如上图所示，Zoonet由数据平面和控制平面组成。数据平面接收来自控制平面的探测任务，然后主动注入探测数据包来检测虚拟网络。一个探测任务的探测路径是从vSrc通过多个vBox到达vDst。vSrc和vDst是虚拟探测点，由Zoonet-agent（自主开发的运行在宿主机上的程序，独立于VM hypervisor）实现。vBox是指一系列虚拟网络中间件（如管理程序、负载平衡器、NAT网关、Internet网关等）。在Zoonet中，对vBox的特殊支持可用于异常路径的快速定位。为了覆盖Internet探测，Zoonet通过在云边界设置探测点pDst来扩展探测边界到ISP。pDst可以模拟Internet对探测包进行回包。</p><p></p><p>控制平面由三个模块组成：探测任务规划器（Telemetry task planner）、探测拓扑分析器（Telemetry topology analyzer）和探测数据分析器（Telemetry data analyzer）。探测任务规划器负责常态化探测和按需诊断探测的任务规划。探测拓扑分析器负责所有租户的虚拟网络拓扑计算和潜在的探测路径分析。它还必须根据租户的拓扑更新操作来更新拓扑和路径。探测数据分析器负责从数据平面收集探测数据以进行深入分析，并在发现异常时发送告警。为了消除更新不及时导致的无效探测任务，需要在告警前读取最新的拓扑进行一致性校验。</p><p></p><p></p><h2>4.2 Zoonet数据面</h2><p></p><p></p><p></p><h3>4.2.1 探测任务</h3><p></p><p></p><p>Zoonet 的数据面接收并执行控制平面下发的探测任务。一个探测任务被定义为：</p><p></p><p>Task=Probing(vSrc,vDst,options,modes)</p><p></p><p>其中vSrc和vDst是一个探测任务的源点和结束点，它会经过多个中间节点(vBox)。在大多数情况下，vSrc和vDst就是指VM，vBox是指虚拟网络中间件。为了实现租户无感，Zoonet的端到端探测开始和结束于VM代理（即Zoonet agent）。在Internet探测中，vDst也可以是Internet网关的VIP或放置在Internet边界附近的物理探测设备pDst。options定义如何封装和发送探测数据包，例如间隔、数量、探测包大小、协议等。modes定义vBox如何对探测数据包作出回应。使用options和modes，控制平面可以编程实现如何探测数据平面。</p><p></p><p>Zoonet包含如下三种类型探测数据包：</p><p></p><p>请求数据包（Request packet），从vSrc到vDst的探测包；</p><p></p><p>回复数据包（Response packet），从vSrc到vDst的探测包；</p><p></p><p>报告数据包（Report packet），携带探测数据的报文，vBox在收到请求或回复数据包时有可能会发送报告数据包。</p><p></p><p>同时，为了简化vBox上的探测逻辑，端测的vSrc会负责所有与控制平面交互，包括探测数据包的生成与注入、计算探测的延迟和丢包等。vBox只负责执行探测包转发和报文回复。</p><p></p><p></p><h3>4.2.2 探测模式</h3><p></p><p></p><p>简单的端到端探测不足以涵盖所有云探测场景：</p><p></p><p>1）云网络有大量的有状态中间件，而无状态探测只能从一个方向监控虚拟路径；</p><p></p><p>2）现有解决方案只提供地域内的探测覆盖，而互联网边界是目前探测的盲点；</p><p></p><p>3）端到端探测可以检测异常路径，但故障发生时，无法定位确切的故障点（即设备/链路）。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/7c/7c5e88d3f07fdb6cc8397efdf1d15373.png\" /></p><p></p><p>为了满足这些探测需求，Zoonet开发了三对原子探测模式，如上表所示。在这些模式中，One-Way和PingPong模式表示单向或双向探测，Non-Transparent和Transparent模式表示是否把探测边界从vDst扩展到pDst，End-to-End和Hop-by-Hop模式表示转发路径上的每个vBox是否会参与探测过程。三对探测模式有8种组合，我们在下面举例说明其中4种常见组合用例，以及对应常见的云网络探测场景：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d3/d3874babff6fafc641a199fb2c6681b0.png\" /></p><p></p><p>举例一：常态化探测，无状态中间件。在常态化探测用例中（OW+EE+NT的模式组合），vSrc发送请求探测数据包，该数据包经过端到端路径到达vDst。vDst然后向vSrc发送report报文。请注意，在常态化探测情况下，vBox只转发探测报文。对于全网虚拟路径覆盖，默认情况下启用常态化探测。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/9e/9e01d64941a1755a508aa01e328a5e26.png\" /></p><p></p><p>举例二：常态化探测，有状态中间件。在有状态探测用例（采用PP+EE+NT的模式组合）中，除了报告数据包，vDst还会发送一个回复数据包。此类用例主要用于对有状态中间件（如 SNAT）进行探测。请注意，PingPong不等同于双向进行的两个单独的单向探测。因为在有状态中间件建立会话前，数据包从反向进入会被丢弃。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/35/3521ca2be35e6fa745a483f1564613be.png\" /></p><p></p><p>举例三：常态化探测，Internet边界。在Internet边界探测用例（OW+EE+TR模式组合）中，我们依赖Transparent模式和pDst进行Internet边界探测覆盖。探测包会在通过vDst之后进一步转发到pDst。在这里，我们并没有将pDst放置在Internet上（例如，在ISP的机房中），主要是因为Internet上的pDst是云厂商无法控制的，即使监控到路径故障，我们也无法确定网络异常是发生在云端还是ISP网络。在Zoonet中，我们将pDst放置在Internet边界附近的公共云中。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ba/bab330dc12fbaad7df239e07d7ab6079.png\" /></p><p></p><p>举例四：按需诊断探测。在按需诊断用例（OW+HH+NT的模式组合）中，与前面用例不同的是，从vSrc发送的请求包将触发转发路径上的每个vBox回复报告包。这种Hop-by-hop的方式与traceroute类似，但具有更清晰和更通用的设计。具体来说，报告数据包由vBox发送两次，一次在ingress方向，一次在egress方向。这种设计可以快速区分链路故障和节点故障。假设来自ingress和egress的两个报告数据包遇到不同的问题，则故障发生在该节点。否则，肯定是中间一段链路发生了故障。由于一条虚拟链路对应一个物理网络域，因此Zoonet的Hop-by-Hop模式可以区分出物理网络与虚拟网络问题。Hop-by-Hop在vBox和控制平面上都是计算密集型的。因此，最好先使用End-to-End进行网络覆盖探测，然后使用Hop-by-Hop进行异常定位。</p><p></p><p></p><h3>4.2.3 其它数据面支持</h3><p></p><p></p><p>Zoonet协议：我们自研了一套虚拟网络探测协议，该协议的数据包格式已在论文中公开。</p><p></p><p>Zoonet agent：自研开发的收发包代理软件，部署在VM宿主机上，是一个独立进程，并且有专门绑CPU控制核。这样可以有效避免对租户以及租户VM造成干扰和影响。</p><p></p><p>VM hypervisor：识别Zoonet数据包之后，主要封装、解封装隧道包头，以及打上一些标记位。</p><p></p><p>中间件：软件中间件比较好支持Zoonet。对于一些可编程中间件，比如Tofino芯片，由于它们的片上资源有限，一般会把Zoonet数据包送给控制面处理。</p><p></p><p>最后一公里探测：从Zoonet agent发出的探测包无法覆盖从VM到hypervisor这一小段容易被忽视的链路，我们使用ARP探测解决这个问题。之所以选用ARP探测，是因为ARP协议是非常底层且基础的协议，一般的VM都默认支持。</p><p></p><p></p><h2>4.3 Zoonet控制面</h2><p></p><p></p><p>Zoonet的控制面主要解决如下三个问题：</p><p></p><p>探测任务产生的巨大测量开销；</p><p></p><p>频繁拓扑更新带来的问题；</p><p></p><p>探测数据采集与消费的巨大开销。</p><p></p><p></p><h3>4.3.1 分层探测路径规划</h3><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c8/c8ad9e79c0cb107ebcd7a41acb66ad07.png\" /></p><p></p><p>在讨论Zoonet如何计算探测路径之前，我们先来看一下云网络的拓扑结构。上图显示了阿里云中一个租户的虚拟网络概况。我们可以看到VM是挂载在虚拟交换机上的（虚拟交换机是一个逻辑节点，理论上承载的虚拟机数量是无限的）。一个地域内的虚拟交换机之间的链路是全互通的。分布在不同地域的多个VPC可以通过跨域链路连接。此外，虚拟机还可以通过公网IP或SNAT访问Internet。接下来我们讨论Zoonet如何通过分层探测的方法降低探测开销。</p><p></p><p>层次一：同一个虚拟交换机下的VM 成对探测。如果每个虚拟交换机下的VM可以fullmesh相互探测，会导致O(n^2)探测复杂度，其中n表示虚拟机数量。而对于虚拟网络，虚拟交换机下的虚拟机数量是理论上是无限的（我们在实际部署中已经观测到了数千个虚拟机连接到同一个虚拟交换机）。因此，fullmesh探测会遇到探测复杂度问题。Pingmesh可以在同一ToR下的服务器之间进行fullmesh探测，是由于每个物理ToR都有固定数量的端口，所以探测复杂度得到了很好的控制。为了减少探测开销，在每个虚拟交换机上，我们将VM分成两组，每组数量相等，并进行VM成对探测，这将探测复杂度从O(n^2) 降低到O(n/2)。此外，我们有意根据虚拟机在不同服务器上的分布对虚拟机进行区分，以保证最大程度的跨物理服务器探测。</p><p></p><p>层次二：虚拟交换机之间的fullmesh探测。为了完全覆盖虚拟网络，一个直接的解决方案是对虚拟网络中的每个端到端VM进行fullmesh探测。然而，这样的fullmesh探测开销太大了。为了降低复杂性，我们使用了聚合探测。具体来说，fullmesh探测可以从聚合级别的虚拟交换机发起，而不是从叶节点的VM发起。</p><p></p><p>层次三：跨地域路径剪枝。租户会在地域边界网关设置路由/ACL配置以限制跨地域流量。这样一来，虽然跨地域通信的underlay网络是fullmesh，但是overlay网络流量不会走所有的路径。根据这种overlay网络特点，我们基于路由表和ACL规则进行跨地域路径剪枝，以进一步降低跨地域探测的复杂度。</p><p></p><p>层次四：VM到VM的top-N热点路径探测。我们发现云网络流量遵循二八定律，即大多数流量由少数路径承载。利用这一点，我们可以进一步优化探测策略。具体来说，我们可以定期分析流量日志，选择前N个VM到VM热点路径作为关键探测路径，这样可以经济高效地覆盖大部分流量。top-N路径覆盖可以很好的补充之前的路径规划策略。</p><p></p><p></p><h3>4.3.2 频繁拓扑更新</h3><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/98/984b395184cb3c3b80eb8ca31603382d.png\" /></p><p></p><p>上图显示了拓扑更新的过程。租户更新操作将影响虚拟网络的所有方面，例如：</p><p></p><p>虚拟网络实例，如VPC、虚拟交换机、VM等；</p><p></p><p>地域内、跨地域、接入Internet/IDC的路由；</p><p></p><p>其它如ACL、每个租户的Internet带宽等。</p><p></p><p>当虚拟网络配置发生变化时，它们将被推送到探测拓扑分析器。由于更新频率很高，不可能在每次更新到达时都做出响应。因此，Zoonet使用消息队列来缓冲最近到达的更新，并以一定的时间间隔批量读取。在处理更新时，我们执行以下策略来提高效率和准确性：</p><p></p><p>策略一：删除与拓扑无关的更新。有一些租户的变更不会影响虚拟网络的拓扑，例如租户调整上网带宽。这样的更新会从消息队列中移除。</p><p></p><p>策略二：删除add-del更新。对于从消息队列中读取的一批更新，如果有相同实例、路由或其他配置的先加后删或先删后加，我们会识别并一起移除。</p><p></p><p>策略三：按 VPC 粒度聚合更新。探测拓扑分析器从设备控制器订阅拓扑更新。设备控制器是为了高可用性而分布式实现的，这可能会导致更新的无序到达。例如，探测拓扑分析器可能会收到在 VPC 中创建 VM 的更新，但相应的 VPC 创建事件可能会在下一轮才能从队列中读取，这将导致更新错误。我们的解决方案是按照VPC粒度聚合所有从队列中读取的更新。</p><p></p><p></p><h3>4.3.3 探测数据采集与消费</h3><p></p><p></p><p>Zoonet 使用分布式流处理框架Flink来实时处理云规模的探测数据。通过部署更多计算单元，Zoonet可以轻松地扩展数据分析器以应对不断增长的工作负载。最初，我们利用一个统一的用户定义函数（UDF）来解决所有探测模式的数据处理。然而，不同探测模式的计算复杂度差异是很大的。在分析了不同探测模式调用频率和计算开销之后，我们为Hop-by-Hop模式设计了一个专用的UDF，为其他模式设计了一个更简单的Flink SQL。当这样的计算逻辑分离之后，Zoonet的计算成本降低了75%。</p><p></p><p></p><h1>五、线上部署发现的问题</h1><p></p><p></p><p>Zoonet已经在阿里云生产系统大规模部署超过两年的时间。在此期间帮助我们发现以及修复了很多网络问题。下面我们将根据其中一个月内基于Zoonet发现的307异常案例来进行分享。我们总共将其划分为6个大类：</p><p></p><p></p><h2>5.1 虚拟网络协议栈错误</h2><p></p><p></p><p>由于物理网络探测不通过虚拟网络协议栈，所以Zoonet检测到了很多物理网络探测方法无法发现的虚拟网络协议栈错误，这些错误又可以细分为如下三类：</p><p></p><p>终端主机上的错误。云网络是高度动态的，每小时在一个地域产生数万个拓扑更新。当发生拓扑更新时，终端主机也需要更新它们的配置表。在实际部署中，Zoonet帮助检测到许多在终端主机的控制和数据平面之间存在配置不一致的情况，其中大部分会影响租户VM的流量转发。例如，Zoonet曾经检测到由于带宽配置错误导致的VM数据包丢失。我们当然可以在每台终端主机上启动表项对比发现此类错误，但由于表项数量很多，表项对比时间会很长。Zoonet可以更及时地帮助我们发现此类问题。</p><p></p><p>中间件上的错误。在中间件的开发过程中，会不可避免地引入系统错误。虽然我们会在中间件上线前做大量的测试，但是对于一些灰色故障（gray failures），尤其是那些只涉及特定租户、虚拟机或流量的故障，我们要花很长时间去定位，甚至很多时候无法发现。借助Hop-by-Hop模式，通过不同参数的海量任务，Zoonet极大提高了发现灰色故障的概率。最近一个月，Zoonet帮助我们发现了10起因SDN控制程序错误导致的中间件配置错误。这些错误仅由特定租户触发，使用传统方法极难定位。例如，Zoonet检测到一个租户的SNAT哈希函数配置错误，导致该租户无法建立新的SNAT会话。</p><p></p><p>虚拟网络升级程序的错误。云网络对外提供灵活的网络业务，为不断适应新的网络业务，通常会经历频繁的升级。其中一小部分使用冷升级，我们有足够的时间来验证升级是否成功。但是大部分虚拟设备使用热升级。由于热升级带来的业务短暂中断或升级失败有时候是在所难免的。但是我们希望可以尽早发现它，然后通过快速回滚或绕过故障点以减少损失。有了Zoonet之后，我们会在升级过程中通过持续不断的Zoonet带内监控来反映当前的网络服务质量，一旦发现问题就可以快速响应。</p><p></p><p></p><h2>5.2 虚拟网络拥塞</h2><p></p><p></p><p>租户在公共云上构建租户互相隔离的网络环境，进而独立运行应用。但是虚拟网络拥塞可能会通过耗尽底层共享资源来打破这种隔离性。在所有网络拥塞情况中，CPU过载是最常见的一种。许多虚拟设备基于CPU转发。但是由于单核性能有限（例如1Mpps），大量突发流量可能会耗尽CPU并导致虚拟网络拥塞。虽然通过监控CPU利用率很容易检测到此类问题，但如何准确评估影响范围（例如，有多少受影响的租户/VM/服务）是一个未解决的问题。Zoonet通过将异常探测任务与租户信息匹配到拥塞组件来解决这个问题。例如，在一个线上案例中，当中间件的CPU内核过载时，Zoonet精确检测到157个相关任务出现丢包（通过该中间件任务总数的3%）。</p><p></p><p></p><h2>5.3 虚拟路由异常</h2><p></p><p></p><p>虚拟网络会为引流对外发布几种类型的虚拟IP(VIP)。具体来说，中间件集群会将VIP发布给云的其余部分，而公共云会将公共IP通告给ISP。通常情况下，这些VIP发布对租户是透明的。但有时，异常的路由通告（如路由配置错误）会影响租户的流量转发。在一个案例中，互联网服务中间件集群的VIP发布异常导致少数租户网络转发的静默丢包。Zoonet通过检测多个Internet实例的明显丢包来帮助识别此类异常。</p><p></p><p></p><h2>5.4 虚拟链路故障/物理网络故障</h2><p></p><p></p><p>Zoonet可以区分虚拟节点故障和虚拟链路故障。在实际部署中，Zoonet帮助检测到很多虚拟链路故障。由于虚拟链路由多个物理交换机和链路组成，它们也可以叫物理网络故障。物理网络探测可以检测到这些网络故障，但是，物理网络探测无法将它们与租户/虚拟机/服务相关联。例如，如果物理网络探测检测到ToR switch down事件，则无法确认该事件是否影响某个租户业务的包转发，因为有可能故障ToR的流量被静默切换到备份ToR。在这种场景下，如果Zoonet检测到相应的虚拟链路有明显的丢包，Zoonet可以更准确地推断出ToR down事件影响了租户的数据包转发。</p><p></p><p></p><h2>5.5 VM“最后一公里”异常</h2><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/3f/3f83712d56a1ae9d12ce484b09e6ffba.png\" /></p><p></p><p>VM和hypervisor之间的“最后一公里”主要有两种问题，即VM异常和virtual-queue（VM和hypervisor之间的队列）异常。通常此类问题是由底层协议栈和隐藏的错误引起的，一旦发生就会影响成千上万的终端主机。我们使用ARP Ping来覆盖“最后一公里”。在实际部署中，我们发现ARP Ping延迟不稳定，受VM和宿主机的CPU使用率影响。因此，我们主要依靠ARP Ping的丢包率来检测问题。上图显示了VM内存异常事件期间的ARP Ping延迟和丢包率。可以看出ARP Ping的延迟在100~300微秒左右抖动，而丢包率在确切的异常点达到100%。</p><p></p><p></p><h2>5.6 自证清白</h2><p></p><p></p><p>租户投诉的疑似网络问题，实质原因是租户的流量超过了购买的带宽/会话配额、或是自身配置错误以及自己的应用问题。我们也遇到过疑似网络问题最终被诊断为VM问题或ISP网络问题。这些案例虽然不是网络问题，但在我们的异常排查工单中占据了很大一部分，消耗了大量的研发人力。Zoonet通过大范围虚拟网络主动探测覆盖虚拟网络路径，提高了云网络主动性自证清白的能力。并且我们一直在将探测边界进行扩展，预期可以实现更高范围的自证清白。</p><p></p><p></p><h1>六、经验分享</h1><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/48/4826de9352eb962412d50ec07c0a8c17.png\" /></p><p></p><p>经验一：虚拟网络拓扑更新有非常多的corner case。在Zoonet的设计之初，我们考虑了可能导致虚拟拓扑变化的事件，例如VM关闭、VM释放、VM迁移等。但是，云服务的复杂性导致很多corner case令我们根本没想到。例如，一种情况是VPC之间的VM迁移，这最初被认为是不可能的，因为VM总是被认为与其VPC绑定。另一个没有考虑的情况是，如果检测到虚拟机有网络攻击行为（或被攻击），其虚拟IP将被封禁。上图显示了由于corner case覆盖不全而导致的异常探测任务（即探测噪声）的比例。Zoonet经历了先小规模部署，再大规模部署。随着隐藏的错误暴露，探测噪音随着部署规模迅速增长。经过一个月的bug-fix之后，探测噪音最终收敛了。</p><p></p><p>经验二：Zoonet控制平面多重优化。虚拟网络配置最初存储在关系型数据库中。Zoonet在拓扑计算之前需要读取多个关系表，例如VPC资源表、VPC路由表、VM-server映射表、VM-pubIP映射表等。但是，关系型数据库的读写速度有限，扩展性差。因此，我们开发了一个带有键值内存数据库的虚拟网络拓扑缓存以进行加速。此外，我们使用基于地域的数据库分片等技术进一步扩展Zoonet控制平面。</p><p></p><p>经验三：通过诊断树进行自动化故障诊断。Zoonet运行常态化的网络探测，并在检测到网络异常时向网络运营人员发出告警。网络运营人员负责分析告警以及根因定位。在部署初期，我们被“告警风暴”淹没了，于是我们开始编写用于故障诊断的自动化脚本。逐渐地，脚本数据库成长为一棵诊断树，每个叶节点都包含一个根因。有了诊断树之后，发现异常时会首先遍历这棵树，然后找到叶节点通知网络运营人员。这件事的收益是非常大的，例如，它将VPC团队中从事网络故障排查的人员从11人减少到1.5人。</p><p></p><p></p><h1>七、总结</h1><p></p><p></p><p>阿里云洛神云网络尝试去解决在实际运营云网络时面临的两大难题：一是如何说明一个问题不是网络问题，另一个就是快速发现以及定位影响范围很小的网络问题。Zoonet采取了实时常态化轻量级的探测方法，配合众多虚拟网络节点对探测协议的广泛支持，比较好的解决了上述问题。该系统耗费了数十位研发同学的心血打磨而成，并且该系统已在大规模云网络系统上得到了充分的验证。希望Zoonet的分享可以对业界以及学术界带来重要参考价值。</p><p></p><p></p><h2>扩展阅读</h2><p></p><p></p><p>Zoonet论文原文：</p><p>https://dl.acm.org/doi/pdf/10.1145/3555050.3569116</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/41/414f81812d4f34f16ec99e685c59347d.png\" /></p><p></p>",
    "publish_time": "2023-02-01 12:55:16",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "《2022 龙蜥操作系统生态用户实践精选 》",
    "url": "https://www.infoq.cn/article/yG6Nzdi4OYHXLvZ8WYNV",
    "summary": "<p>龙蜥社区的愿景是成为全球数字创新基石，短期目标是开发龙蜥操作系统（AnolisOS）作为 CentOS 替代版，助力广大用户无缝迁移。龙蜥社区的长期使命是，与生态合作伙伴联手，共同打造一个面向未来的操作系统，建立统一的开源操作系统生态，孵化创新开源项目，繁荣开源生态。<br />\n《2022 龙蜥操作系统生态用户实践精选》中，我们通过政务（某医疗保障项目 、政采云政务采购平台、某智慧城市平台、某省政务云），金融（某城市商业银行消息中心平台、某商业银行、某省农村信用联合社、某金融行业企业、某大型证券公司、某大型保险企业），交通（某航空公司触达中心、某供应链服务平台、某物流平台、某铁路局集团），电力（某水利水电），电信（某运营商业务平台），教育（某教育软件平台），文娱（杭州西软酒店管理平台、某社交平台、某文娱集团）以及其他（IPFS、Redis、Kata Containers）等8个方面为广大用户提供成熟实践样板。欢迎点击《2022 龙蜥操作系统生态用户实践精选》查看。</p>",
    "publish_time": "2023-02-01 15:48:47",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "为谷歌工作 16 年被当“垃圾”无情辞退，数千网友留言：为公司“卖命”不值得",
    "url": "https://www.infoq.cn/article/t4ozQBr8wfLJ41jMNgUX",
    "summary": "<p></p><p></p><blockquote>在谷歌工作了 16.5 年之后，我的账户在今天凌晨 3 点似乎被自动注销了，成为 12000 名“幸运儿”中的一员。我没有任何其他的信息，因为没人与我做任何沟通，也没有告诉我“你已经被解雇”的网站（我现在也不能访问）。</blockquote><p></p><p></p><p>前谷歌工程经理 Justin Moore 在 LinkedIn 上分享了他被解雇的经历。今年 1 月下旬，谷歌（Google）母公司 Alphabet 宣布将裁员约 1.2 万人，约占全球总员工数的 6%，这也成为该公司史上最大规模的一轮裁员。在回顾谷歌工作的时光时，他说道：</p><p></p><p></p><blockquote>很大程度上来说，这是美好的16年，我真的为我和我的团队多年来所做的工作感到骄傲。我和一些很棒的人一起工作，在公民和选举领域帮助了世界各地的许多用户。我是如此的幸运。这也说明了工作不是你的生活，雇主——尤其是像谷歌这样的大老板——认为你是100%一次性的。享受生活，而不是工作。在这种时刻，我父亲最喜欢引用一句来自 Andrew Barton爵士的歌谣:“我要躺下来流一阵子血，然后我再站起来战斗。”</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/f0/f01d1490e7add0acb1491ba33151b3df.png\" /></p><p></p><p>在谷歌工作了 20 多年的 Jeremy Joslin 跟 Moore 有着相同的经历。“很难相信，在谷歌工作了 20 年后，我意外地通过一封电子邮件得知了我的 last day，”他在推特上写道。“真是一记耳光。我希望我能当面和大家说再见。”</p><p></p><p>他在自己的 LinkedIn 中表示，他一大早就失去了谷歌所有访问权限，也没有人联系过他。Joslin 坦言，仅仅通过一封交易邮件而被解雇、却不承认你的个人努力或对公司的贡献，这是一种让人“意难平”的离开方式。但凡有一点点的同情和事前沟通接触都可以让人欣慰很久。</p><p></p><h3>“公司不关心你”</h3><p></p><p></p><p>“我无法消化的一件事是‘自动帐户停用’。”Anirban Goswami 在 Moore 的帖子下评论称：一个服务了大约 17 年的人，他不配用一周的时间来接受这种决定吗？”无论谁因裁员而失去工作，都要保持坚强。”</p><p></p><p>CertRP Steph Brown 评论称：我以前在大公司工作过，在那里艰难地学会了做一个“数字”。“我最喜欢 Bermuda 客户的一点是，他们的人力资源管理流程中仍然有人为因素 – 没有设置关键词让机器人浏览简历选择候选人，也没有太多的公司在查看简历流程之前让你临场填写申请表。”</p><p></p><p>像 Moore、Joslin 这样以机器人、自动化、无人工干预的方式，被冷酷告知被裁掉的人还有很多，而采用这种方式的企业似乎也没有觉得有什么不妥。实际上，大规模裁员及其处理方式将消除部分大厂光环。</p><p></p><p>很多时候，公司为了快速推出某项产品或服务会在短时间内招聘很多员工，大厂也是很多人的优先考虑，但当项目完成后就很快直接或变相解雇员工。这种情况下，员工实际上成为一种商品，可以随意使用或更换。“员工和求职者都会记得企业在经济低迷时期的管理方式，以及他们在送员工出大门时的表现。”软件公司 Veeam 首席技术官 Danny Allan 说道。</p><p></p><p>Moore、Joslin 的遭遇也引起了大家的共鸣：为公司“卖命”不值得。</p><p></p><p>“我只花了几年的时间就意识到，美国公司的工作保障只存在神话里。”Julio Reguero 写道，如果你在工作协议中看到“at-will”，则表示你是“一次性”的。Reguero 表示，在美国，首先关心的是利润，而不是人。</p><p></p><p>“停止浪漫化你的工作，你只是交易的一部分，即用你的时间和可以增加的价值来换取金钱。除非你是创始团队的一员或拥有优先股的投资者，否则实际上你在这场游戏中连‘皮肤’都没有。”Reguero 总结称，“你只有一条命。尽你所能地专业，但绝不要以牺牲你的健康和安心为代价。”</p><p></p><p>Anees Fatima 也分享了自己的经历。“在我最后一个项目中，我每天工作 11 个小时，大部分的时间都花在了工作上，很多天因为工作而没有吃晚饭。但我连一封简单的感谢邮件都没有收到。然后我常常告诉自己，公司在这段日子里正在剥削员工。我也曾经告诉自己要严格将工作时间设置为 8 小时，这样至少可以留出 2 个小时的个人时间，但我永远做不到。”</p><p></p><p>Jagan Nathan Vaman 对 Moore 帖子里的最后一句话表示赞赏：奋起再战是点睛之笔！“不要被 CEO 的甜言蜜语或经理人的胡说八道而打乱了自己的生活。”Vaman 分享道，“我那个时代的大多数德国公司员工从没有超过规定的工作时间，并与家人共度美好时光。从 CEO 到普通员工，每年都会休息 2-4 周。那些在工作时间之外或假期里工作的人会被认为是效率低下，或者没有家庭生活，甚至有什么可疑活动。”</p><p></p><h3>良药还是毒药？</h3><p></p><p></p><p>裁员如今已经成为企业应对技术快速进步、市场动荡和激烈竞争等不确定因素的默认反应。根据裁员网站 Layoffs.fyi 的数据，2022 年超过 100 家公司裁员 154,336 人。</p><p></p><p>为什么这么多公司在大量裁员？斯坦福大学商学院教授 Jeffrey Pfeffer 表示，答案很简单：模仿行为。Pfeffer 表示，科技行业裁员基本上是社会传染的一个例子。如果寻找公司裁员的原因，那就是其他家都在这样做。裁员是模仿行为的结果，并不是特别基于证据。</p><p></p><p>“有人对我说，他们知道裁员对公司福祉有害，更不用说员工福祉了，而且这也不会带来多大效用，但就是每个人都在裁员。他们的董事会都在问为什么不裁员。”Pfeffer 说道。</p><p></p><p>合同自动化平台 Juro 的首席执行官 Richard Mabey 认为，最近大量裁员的一个可能解释是不负责任的招聘，原因是公司在繁荣时期过度扩张。</p><p></p><p>“现在正在发生的裁员似乎是对过去几年某些过度行为的纠正，虽然不是所有情况，但某些时候，资金一直很便宜也易得。”Mabey 表示，盲目裁减某些团队将导致这些领域的增长放缓，对未来收入产生负面影响，这是“短期节省现金，中期会很痛苦”。即使裁员在财务上是明智的，也会损害公司的声誉和长期增长。</p><p></p><p>不过 Pfeffer 在采访中直接指出，裁员通常不会削减成本，也不能解决根本上的问题，这基本上就是一个糟糕的决定。公司要支付遣散费，这也是一笔不小的开支。很多被解雇的员工会被重新雇用为外包，公司向外包支付费用。裁员不会提高股价，也不会提高生产率。另外，公司有时会解雇他们刚刚招聘的人员，但在未来经济回暖时，企业将用更高的薪水招聘他们。</p><p></p><p>德克萨斯大学阿灵顿分校的 Deepak Datta 在 2012 年对经历裁员公司进行了 20 项研究后发现，企业宣布裁员在数天中对股价产生了中性到消极的影响，大多数公司裁员后的盈利能力下降，一项相关研究表明，利润下降持续了三年。来自奥本大学、贝勒大学和田纳西大学的一个研究小组发现，裁员公司申请破产的可能性是没有裁员公司的两倍。</p><p></p><p>根据 2002 年斯德哥尔摩大学和坎特伯雷大学的一项研究发现，裁员后，留下来的员工工作满意度下降 41%，工作表现下降 20%，对企业承诺下降 36%。</p><p></p><p>现实也是如此。谷歌员工 Jessika Duquette 表示，自己的团队失去了 7 名在谷歌工作了 13-18 年的员工。“他们也像垃圾一样被解雇了。我为在这样一家公司工作感到痛心和羞愧，这个公司不尊重那些为大家熟知和敬仰的产品贡献多年心血和人。今天，IT 行业面临着很大的现实考验，而谷歌已经没有心了。”</p><p></p><p>另外，Pfeffer 指出了可能很多人没有注意的一点，就是裁员对生命的危害。研究表明，裁员使自杀几率增加了 2.5 倍，即使在比美国社会网络更安全的新西兰等国家也是如此。</p><p></p><p>对于正在裁员的管理者以及留下来的员工，健康和态度也会受到影响。这也不奇怪，裁员会增加人们的压力。与许多态度和情绪一样，压力具有传染性。不健康的压力还会导致各种不良行为，如吸烟、饮酒、暴饮暴食等。</p><p></p><h3>裁员有替代方案吗？</h3><p></p><p></p><p>实际上，有公司一直在尝试用更好的方法来应对不断变化的劳动力需求，比如 AT&amp;T。</p><p></p><p>2013 年，AT&amp;T 领导总结称，在 24 万名员工中，有 10 万人从事的工作在未来 10 年内将不再有意义。因此，AT&amp;T 决定在 2020 年前对所有 10 万名员工进行再培训，而不是裁员并雇佣新的人才。这样，公司不会失去员工已经掌握的知识，也不会破坏大家对高级管理人员的信任。</p><p></p><p>这项措施的结果似乎非常积极。在 2016 年《哈佛商业评论》(HBR) 的一篇文章中，AT&amp;T 当时的首席战略官 John Donovan（后担任 AT&amp;T Communications CEO，现已退休）指出，该项目启动 18 个月后，公司的产品开发周期缩短了 40%，实现营收的周期缩短了 32%。2017 年，AT&amp;T 首次跻身《财富》100 家最适宜工作的公司榜单。</p><p></p><p>根据哈佛商学院管理实践教授 Sandra J. Sucher 的研究，有效的劳动力变化战略有三个主要组成部分：一种哲学、一种方法，以及各种经济条件的选择。</p><p></p><p>其中，劳动力变革哲学是领导人的行为指南，建立在公司价值观之上，阐明了企业在变革时将遵守的承诺和优先事项。明确的方法则使企业探索裁员的替代方案，即使无法避免也可以尽量减少裁员造成的伤害。而企业劳动力变化战略则应该考虑到健康、短期波动和不确定等各种经济环境。</p><p></p><p>（注：感兴趣的读者可以在下面链接上查看详细内容：<a href=\"https://hbr.org/2018/05/layoffs-that-dont-break-your-company%EF%BC%89\">https://hbr.org/2018/05/layoffs-that-dont-break-your-company）</a>\"</p><p></p><h3>结束语</h3><p></p><p></p><p>随着全球大规模裁员的来临，企业裁员过程中也暴露出了一些问题。如果企业在做裁员决定前做好功课、裁员中多一些人文关怀，而非用一封邮件冷酷地打发员工，那么未来可能会赢得更多人心。</p><p></p><p>参考链接：</p><p></p><p><a href=\"https://www.linkedin.com/posts/justin-moore-468145b8_so-after-over-165-years-at-google-i-appear-activity-7022217049342902273-aVlF/\">https://www.linkedin.com/posts/justin-moore-468145b8_so-after-over-165-years-at-google-i-appear-activity-7022217049342902273-aVlF/</a>\"</p><p><a href=\"https://news.stanford.edu/2022/12/05/explains-recent-tech-layoffs-worried/\">https://news.stanford.edu/2022/12/05/explains-recent-tech-layoffs-worried/</a>\"</p><p><a href=\"https://hbr.org/2018/05/layoffs-that-dont-break-your-company\">https://hbr.org/2018/05/layoffs-that-dont-break-your-company</a>\"</p><p><a href=\"https://www.businessinsider.com/laying-off-staff-is-a-mistake-experts-say-2022-8\">https://www.businessinsider.com/laying-off-staff-is-a-mistake-experts-say-2022-8</a>\"</p><p></p>",
    "publish_time": "2023-02-01 15:50:10",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "数据库内核杂谈（二十六）- 精读 DynamoDB 2022 论文（1）",
    "url": "https://www.infoq.cn/article/aEUY5kcI1a3iqGUyGzUy",
    "summary": "<p>欢迎阅读新一期的数据库内核杂谈。 这是兔年后的第一篇内核杂谈，祝大家新年快乐，也希望内核杂谈新一年里不断更。这一期，我们一起来学习 AWS 在 USENIX 2022 上发表的关于Amazon DynamoDB 的最新论文： Amazon DynamoDB: A Scalable, Predictably Performant, and Fully Managed NoSQL Database Service。</p><p>&nbsp;</p><p>自2012年发布以来（见下图），<a href=\"https://aws.amazon.com/cn/dynamodb/\">DynamoDB</a>\" 经历了多个版本的迭代，更新了很多功能。它作为底层的基础软件，支撑着 Amazon 和 AWS 的发展。这篇论文，汇聚了一些关键的系统设计和实现思路，介绍了DynamoDB如何从一个需要程序员自主维护，配置和使用的数据库系统，演进为一个超高可靠（highly available），超大规模（highly scale），超级稳定（predictable performant）的全自动化数据库服务（fully managed database as a service）。文中介绍了很多关键的设计细节，这些细节，不仅仅对数据库设计有帮助，对于通用的系统服务建设也很有启发。这篇文章是我很长一段时间内读到的最好的技术论文。借此博客，和大家一起学习，共同进步。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/14/1443c5981c8cba2f47b2a2f1b6282fbf.png\" /></p><p>DynamoDB launch 时间线</p><p></p><p>&nbsp;</p><p></p><h1>DynamoDB历史和简介</h1><p></p><p>&nbsp;</p><p>论文的一开始，AWS肯定要先展示一下肌肉。DynamoDB是一款key-value（但同时也支持schema definition, document, secondary index等其他功能）的NoSQL数据库服务。在2021年的66个小时的Amazon Prime Day促销时，Amazon systems（包括Amazon.com, Alexa, Amazon fulfillment center等）总共调用DynamoDB 超过trillion级别（10^12次方， a million million），峰值更是将近9000万（89.2M）QPS。更大的肌肉在于，在如此高的峰值下，DynamoDB依然可以保证高可用以及几毫秒级别的返回时长（文中用的是single-digit milisecond）。</p><p>&nbsp;</p><p>DyanmoDB最初是以自助维护（on-demand）的数据库系统的形式对外提供服务，即每个用户需要申请硬件资源，做好数据库配置，运维，甚至升级。使用DynamoDB的学习曲线非常高，团队通常需要配备一两个专业的DBA来运维DynamoDB。这使得DynamoDB的推广和使用并不是一帆风顺。</p><p>&nbsp;</p><p>随后，AWS推出了S3，<a href=\"https://www.infoq.cn/article/2008/12/SimpleDB\">SimpleDB</a>\" 等的 SaaS 服务，这些服务完全是自动化运维，对于用户仅仅暴露API调用接口（插一句题外话，SimpleDB: <a href=\"https://en.wikipedia.org/wiki/Amazon_SimpleDB\">https://en.wikipedia.org/wiki/Amazon_SimpleDB</a>\", 是一款用Erlang编写的分布式NoSQL系统，也具备弹性，高可用，高性能的特点，但也有其局限性，比如数据量大小限制等等）。因为其易用的特点，SimpleDB的推广远比当时的DynamoDB要好得多。这也推动了DynamoDB的研发团队的转型之路，TA们希望能够让DynamoDB集Dynamo Database以及SimpleDB SaaS的优点于一身。</p><p>&nbsp;</p><p>DynamoDB Service作为基础底层软件，是绝大多数AWS服务（包括，但不限于，AWS Lambda，AWS lake formation, AWS SageMaker）等上层应用的构建基石。这些上层的AWS服务对于很多其他用户而言，却是平台级别的基础服务。也因此，这些服务本身对于性能，高可靠，高可用，高扩展就有极大的诉求。这些诉求传递到DynamoDB后，使得条件变得更加苛刻。尤其是稳定的性能表现（consistent low latency），这里稳定的性能表现不是均值，不是中位数，而是P90，甚至是P99。因为DynamoDB作为底层服务，任何性能抖动（高latency的return）就会在上层服务中被放大，致使影响整个上层服务不稳定甚至不可用。所以，DynamoDB的一个设计目标就是要确保所有的调用都能在几毫米级别返回。除了稳定的性能外，DynamoDB的设计挑战还在于需要支持大量不同类型的服务，这也意味着需要支持多租户。且逐渐需要添加新的功能进入新版本比如secondary-index，transaction支持等等。研发团队总结了DynamoDB演进过程中始终贯彻的6个设计理念：</p><p>&nbsp;</p><p>1) DynamoDB是一个完全自动化运维的数据库SaaS服务。对于用户来说，就是100%的<a href=\"https://xie.infoq.cn/article/b032aec5f409807e0e0dc9d94\">Serverless</a>\" API的调用。其他如软件升级，故障修复，硬件资源申请, 扩容，集群维护，故障恢复，对用户来说都是黑盒且无感知的。</p><p>&nbsp;</p><p>2）DynamoDB是一个多租户SaaS服务。DynamoDB需要支持不同类型的用户和服务，但考虑到SaaS服务的收费模式以及服务SLA，需要保障高效的资源利用。底层的数据存储，以及计算节点在不同类型的服务和用户之间要做到物理共享，但又逻辑隔离。整体服务需要做好资源预留，服务监控，来保证不同类型的服务不会相互影响（最坏情况下造成雪崩效应）。</p><p>&nbsp;</p><p>3）支持几乎无限制的横向扩展（典型的全球型分布式数据库）。DynamoDB并不限制一个表能存多少量的数据（表可以根据业务需求弹性地增加和扩容），也不限制有多少用户：一个表的数据会被分散存储到不同的物理机上，如果有需要，可以分配到上千台物理机上。</p><p>&nbsp;</p><p>4）稳定的高性能（&gt;P99）：当服务和DynamoDB部署在同一个AWS region里，对于读写，需要保证几毫秒的延时。挑战在于，这种稳定的延时，即使当数据增长到百亿千亿级别，仍然能够保持（文中也给出了和MySQL的对比，见下图，很能说明情况）。通过分布式数据存储和routing，DynamoDB可以做到几乎无限的横向扩展。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/0e/0e8955f44d0af7abfcd0d5874d18e338.png\" /></p><p>调用延时无关数据量大小，始终保持几毫秒级别</p><p></p><p>&nbsp;</p><p>5）超级高可用：数据会被复制到多个数据中心，AWS中称为 availability zones（AZ）。默认情况下，数据会有3个备份。并且，当发现某一个replica出现了节点故障，会自动申请一个新的replica来保证高可用。文中写到DynamoDB的普通表数据提供4个9的高可用保障，全域表（global table）提供5个9的高可用保障（因为全域表会备份到多个region，一个region包含多个AZ）。</p><p>&nbsp;</p><p>6）功能丰富，支持多类型的应用和服务：DynamoDB在功能上，不像其他服务（比如SimpleDB）来限制用户使用某个固定的Data model。支持多种收欢迎的功能如支持可扩展的Schema，支持不同的数据类型（包括array类型的数据），secondary index，transaction，强一致读（strong read）和最终一致读（eventual consistency read)等等。</p><p>&nbsp;</p><p>研发团队在迭代过程中，确保上述的6个设计理念始终被贯彻，才造就了DynamoDB的成功。其实，在平时的系统研发中，我们也需要贯彻清晰的设计理念（虽然，不需要像DynamoDB那样苛刻），好的设计理念会让系统在迭代中不会点错技能树。</p><p>&nbsp;</p><p></p><h1>DynamoDB 数据模型和high-level架构</h1><p></p><p></p><p>一个DynamoDB的表是一个Item数据的集合，每个Item都会分配一个全局唯一的key，即primary key。每个Item是一系列的attributes的集合。Primary key包含一个partition key或者是一个partition值+sort key（复合primary key）。Partition key的值的hash值，配合上sort key（如果存在的话）会决定这个数据存储在哪里。Partition key或者{partition value, sort key}需要保持唯一。 每个DynamoDB的表支持一个或者多个secondary index，来提升非primary key的查询速度。DynamoDB支持对Item对象进行操作的CRUD API，并且支持ACID transactions。</p><p>&nbsp;</p><p>DynamoDB通过把一张表分成多个partitions来应对数据量增大带来的存储和读写压力。Partition可以被认作是存储和计算调度的基本单元。DynamoDB通过把不同的partition分配到不同的物理节点上来保证每个partition都分配到足够多的资源来保证读写的稳定表现，从而保证整个表的读写SLA。每个partition存储了一部分连续的key的item，而不同partition之间的item各无交集。每个partition都会有多个备份（默认情况是3备份），每个备份会被分配到不同的AZ来保证高可靠，节点间的通信和状态同步通过<a href=\"https://xie.infoq.cn/article/46e2e8f61c981541af3c0969d\">Multi-Paxos</a>\" consensus protocol来实现。只有leader replica支持写操作和强一致读。当接受到写操作时，leader replica会先生成一个WAL (write-ahead log），并将WAL同步给其他的replica，只有当满足quorum setting的replica也存储好了WAL，这个写操作才认为被执行。除了强一致读，其他replica节点支持最终一致读。</p><p>&nbsp;</p><p>如果leader节点因为节点硬件，网络等原因故障导致unavailable，replica group会根据consensus protocol重新选择一个新节点来做leader。就partition而言，绝大部分的分布式数据库都有类似的设计。每个标准replica节点（storage replica）除了会存储WAL，也会存储 B-tree 形式的key-value数据。DynamoDB 的一个创新是，当 replica 节点发生故障，导致 3 备份被打破时，为了保证高可靠，引入了一种新的replica节点，log replica。Log replica节点只存储WAL，而不保留key-value。因此Log replica节点不接受读写操作，也不能被选为leader节点，只是确保写操作依然能满足quorum setting，比如2/3写成功。</p><p>&nbsp;</p><p>下面两张图展示了storage replica和log replica的区别。</p><p><img src=\"https://static001.geekbang.org/infoq/d9/d97f80f0271f0f8ec78df275e12e01fb.png\" /></p><p>Storage replica</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4b/4bb7b84de073bec20663b4fc36668533.png\" /></p><p>Log replica</p><p></p><p>&nbsp;</p><p>除了replica节点，DynamoDB的组成包含了十几个辅助服务。这其中，关键的服务有metadata service，request routing service和autoadmin service（见下图的架构）。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/df/df015122986fc89f8f05bb4102c790a1.png\" /></p><p>DynamoDB architecture</p><p></p><p>&nbsp;Metadata service存储元信息包括表，partition，index存储的路由信息。Request routing service负责授权，验证和具体的路由工作（通过查询metadata service得到路由信息）。Autoadmin service负责DynamoDB的集群控制工作来确保集群的稳定性，每个partition的读写稳定性，以及scaling request等等。Autoadmin service会持续监控集群，replica节点，表，partition的关键信息来判断是否其出于不健康状态，并通过控制命令来恢复，比如，下线某个不健康的replica节点，将上面原先存储的partition转移到其他健康节点上，对某个partition做扩容分离（split）等。这些辅助服务的具体工作在后文中会详细介绍。</p><p>&nbsp;</p><p></p><h1>总结</h1><p></p><p></p><p>这一期是DynamoDB 2022技术论文精读的第一篇。我们介绍了DyanmoDB的发展历史，6个具体的设计理念以及high-level架构。下一期，我们会深入学习Dynamo引入的新设计思路，看这些思路如何保证当数据规模超大的情况下，DynamoDB依然能够保证稳定的低延迟返回。感谢阅读。</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/mtyRVkfZ9dQNcqlslfJe\">数据库内核杂谈 (二十二) 自动驾驶数据库 - Behavior Modeling</a>\"</p><p><a href=\"https://www.infoq.cn/article/clOUD2iRFTk7NUaPcb3J\">数据库内核杂谈（二十三）- Hologres，支持 Hybrid serving/analytical Processing 的数据引擎</a>\"</p><p><a href=\"https://www.infoq.cn/article/65zC4wl1zoDko1GRvQFS\">数据库内核杂谈（二十四）- Hologres，支持 Hybrid serving/analytical Processing 的数据引擎</a>\"</p><p><a href=\"https://www.infoq.cn/article/zgcYo1o62QXeWDdUhE8Q\">数据库内核杂谈（二十五）- 数据湖前世今生</a>\"</p>",
    "publish_time": "2023-02-01 16:04:27",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "英特尔大规模降薪：CEO降薪25%，小时工和底层员工不受影响",
    "url": "https://www.infoq.cn/article/vsoNmp3DK0zVwtpGiBe9",
    "summary": "<p>2月1日，据《华尔街日报》报道，在几天前公布的季度财报中，<a href=\"https://www.infoq.cn/article/YMaAfipUq5wux6ceIBm5\">英特尔</a>\"的收益增长不及分析师们的预期，英特尔表示将全面削减管理层薪酬，以节约资金用于扭亏计划。</p><p>&nbsp;</p><p>财报显示，2022年英特尔第四季度营收为140亿美元，低于市场预期的145.8亿美元，创下2016年来最低季度收入，同比大幅下降32%。在盈利能力方面，英特尔毛利率从2021年四季度的53.6%大幅下降至2022年第四季度的39.2%，同时净亏损近7亿美元，而上年同期净利润为46亿美元，同比盈转亏，下滑幅度达到114%。</p><p>&nbsp;</p><p>面对营收和利润的快速下滑，英特尔公司CEO<a href=\"https://www.infoq.cn/article/07JFquThmH4DbC9iMqIx\">基辛格</a>\"和其他管理人员将降薪，其中，CEO Pat Gelsinger的基本薪资将下调25%、最高行政领导团队的薪资将下调15%、高层管理人员减薪10%、中层管理人员减薪5%，小时工和公司体系中7级以下的员工不会受到影响。</p><p>&nbsp;</p><p>作为全面削减成本行动的一部分，<a href=\"https://www.infoq.cn/article/SBvuCMSKhdFQlvRbovdZ\">英特尔</a>\"去年曾表示还将进行裁员。英特尔力争今年削减30亿美元成本，并且到2025年底，通过成本节约和效率提高举措使年度节支规模增至100亿美元，这些措施中包括裁员。英特尔上周表示，仍在朝着这个目标前进。</p><p></p><p>参考链接：</p><p>https://www.wsj.com/video/china/12ED6A42-76EF-4E4C-9244-06D8FA63AD13.html</p>",
    "publish_time": "2023-02-01 16:51:40",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]