[
  {
    "title": "Airbnb从Buck 迁移到 Bazel，大幅改善开发者体验",
    "url": "https://www.infoq.cn/article/DG7z4ahDSM5RNKmOeMpE",
    "summary": "<p>随着其他组织将他们的构建管道迁移到Bazel 之后，Airbnb 也发布了一个详细的说明，分享了他们弃用 Buck 并改善构建时间以及项目生成和加载时间的过程。</p><p></p><p>正如 Airbnb 的工程师 Qing Yang 和 Andy Bartholomew 所说的，转向 Bazel 是为了提供一种跨平台（包括后端和前端）统一而高效的构建体验。</p><p></p><p>从他们的 iOS 开发管道开始，Airbnb 的工程师们主要关注两个方面的问题：构建配置和 IDE 集成。</p><p></p><p>Bazel 和 Buck 有一些相似之处，包括相似的目录结构和命令行调用，最重要的是使用相同的配置语言 Starlark，这在某种程度上简化了构建配置的迁移。</p><p></p><p>尽管 Buck 和 Bazel 有相似之处，但它们在所提供的规则方面有所不同。</p><p></p><p></p><blockquote>例如，Buck 提供了 apple_library 和 apple_binary 等规则，而 Bazel 根据外部规则集的不同提供了 swift_library 和 apple_framework 等规则。即使在两个系统具有相同名称的规则（例如 genrule）的情况下，用于配置这些规则的语法通常也是不同的。</blockquote><p></p><p></p><p>在 Airbnb 的案例中，解决这个问题的方法是创建一个包装本地和外部规则的薄片（shim）层。为了在过渡阶段同时处理两个薄片，Airbnb 的工程师创建了一个包含两个不同目录rules_shim/buck和rules_shim/bazel的存储库，然后为每个构建系统定义了一个规则，将rules_shim标识符与正确的目录关联起来。</p><p></p><p>rules_shim层也是处理 genrule 的关键。在 Airbnb，genrules 用于生成 iOS 代码库中的样板代码，并且在两个构建系统上有不同的语法。多亏了这个包装层，Airbnb 的工程师可以在两个系统中使用相同的 genrule 脚本。</p><p></p><p>构建配置所需的最后一个问题是支持条件配置。Buck 提供了一个read_config函数来读取命令行参数，而 Bazel 不支持这个函数，因此 Bazel 和 Buck 之间出现了不匹配。解决方案是向下移动一个抽象层，并通过select重新实现两个系统都支持的命令行参数。</p><p></p><p>在 IDE 集成方面，Airbnb 工程师的目标是用一个以 Bazel 为中心的解决方案替换他们现有的以 Buck 为中心的解决方案来创建 Xcode 项目，同时又可以使用他们围绕 Buck 开发所使用的工具。为了达到这个目的，他们决定使用 XcodeGen 开发自己的 Xcode 工作区生成器。</p><p></p><p>最重要的是，他们分三个步骤执行迁移过程，避免对开发人员的工作流造成干扰。第一步，将新的生成器与他们现有的基于 Buck 的解决方案集成，确保一切都按预期工作。在第二阶段，他们添加了新的 Bazel 命令，这些命令与 Buck 中使用的命令相同，并可以在两者之间切换。最后，在新系统看起来足够稳定时，他们移除了对 Buck 的支持。</p><p></p><p></p><blockquote>迁移的最终结果令人印象深刻。与 Buck 生成项目相比，使用 XcodeGen 生成的时间缩短了 60%，Xcode 的打开时间缩短了 70% 以上。</blockquote><p></p><p></p><p>除此之外，新的基于 Bazel 的构建系统缩短了构建时间，特别增量构建时间，并支持进行进一步优化，以改善共享和协作流程。如果你对完整的细节感兴趣，请务必阅读原文。</p><p></p><p>查看英文原文：</p><p></p><p><a href=\"https://www.infoq.com/news/2024/02/airbnb-bazel-migration-ios/\">https://www.infoq.com/news/2024/02/airbnb-bazel-migration-ios/</a>\"</p>",
    "publish_time": "2024-03-01 10:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "全球首个隐私计算一体机国际标准发布，中国企业主导",
    "url": "https://www.infoq.cn/article/46hx13bHDkOD1vF7hxxf",
    "summary": "<p>近日，IEEE 标准协会（IEEE-SA）正式发布并推行了由我国企业主导的全球首个隐私计算一体机国际标准《隐私计算一体机技术要求》（IEEE 3156-2023）。IEEE-SA是权威国际标准制定机构，该标准的成功发布意味着中国的隐私计算技术与应用探索受到国际高度认可，可为全球提供参考方案。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/47/477a553aa6bc3433dbc4354442baf32e.png\" /></p><p></p><p>（图：IEEE标准协会官网发布“隐私计算一体机技术要求”国际标准）</p><p>&nbsp;</p><p>隐私计算一体机作为隐私计算产业落地的重要技术探索，通过软硬件结合方式构建从硬件、固件、操作系统到应用软件的一站式隐私保护计算解决方案，提供了开箱即用、安全可证、隐私保护的数据价值流转服务，在国内外受到行业关注。</p><p>&nbsp;</p><p>信息显示，此次发布的国际标准由蚂蚁集团推动，中科院信息工程研究所、北京交通大学、中国信息通信研究院、中国电子技术标准化研究所等近20家单位共同编制。</p><p>&nbsp;</p><p>该标准针对隐私计算一体机的参考架构、功能需求、性能需求和安全需求等提出了标准解决方案，并对隐私计算一体机的硬件、系统软件、隐私保护协议、软件应用等多个层面给出了建议。IEEE专家一致认为，通过这一标准，可使得业内形成对隐私计算一体机的共识，提高隐私计算一体机的产品形态水位，引导业内利用隐私计算一体机解决多源数据计算与价值共享的难题，有效降低协作成本。</p><p>&nbsp;</p><p>隐私计算作为一种新兴的数据安全技术范式，已成为全球科技布局的焦点。公开资料显示，蚂蚁集团从2016年开始布局隐私计算技术，涵盖了多方安全计算、同态加密、可信执行环境等技术能力，推出了可信隐私计算开源框架“隐语”、隐私计算软硬一体化平台等产品，并实现规模化商业应用落地。截至目前，蚂蚁集团隐私计算领域专利申请量超过2000件，连续多年位列全球第一，并参与了多项隐私计算国际标准的制定。&nbsp;</p><p>&nbsp;</p><p>IEEE全称“电气和电子工程师协会”，是目前全球最大的非营利性专业技术学会，会员人数超过40万人，遍布全球160多个国家。IEEE在太空、计算机、电信、生物医学等领域已制定了1300多个行业标准，是新兴技术领域标准的核心来源。</p>",
    "publish_time": "2024-03-01 10:17:40",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "数据要素×汽车｜“数字原生”车企是如何实现全流程数据拉通的？",
    "url": "https://www.infoq.cn/article/iBN4mNvboJPH6UmzK2OX",
    "summary": "<p>《超级连麦.数智大脑》是InfoQ重磅推出的一档连麦直播栏目，由数字化领域的思想领袖、技术大咖及企业先行者等多方连线，聚焦企业数字化实践、数字人才培养、数字化技术管理等话题，剖析和拆解典型数字化场景及其痛点，意在帮助各行业企业扫清转型障碍、探寻变革路径。今晚主持人高玉娴（InfoQ极客传媒数字化主编）对话赵松（某知名电动汽车大数据专家），探讨数字化背景下的车企行业的一系列建设和发展问题。</p>",
    "publish_time": "2024-03-01 11:45:19",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "亚洲唯一！京东荣获 2024 年度 Gartner 供应链技术创新奖背后的创新探索",
    "url": "https://www.infoq.cn/article/I6PzFomBpDF0iFmhr5KS",
    "summary": "<p></p><h2>序言：</h2><p></p><p></p><p>2 月 14 日晚间，<a href=\"https://www.infoq.cn/article/NCsTBGFfEhAi9SmEDkEa?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">Gartner</a>\" 公布了 2024 年度 Garter Power of the Profession 供应链大奖，京东集团荣获供应链技术创新奖，成为获得该奖项的唯一亚洲企业。Gartner Power of the Profession 供应链奖项已经举办十年，是衡量企业供应链创新能力的国际权威奖项。入围决赛的共有 5 家企业，另外 4 家分别是谷歌、思科、MTN 集团、Allina Health。<a href=\"https://www.infoq.cn/article/2017/11/618-jingdog-ai-11?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">京东智能供应链 Y </a>\"业务部研发的“基于概率分布预测以及解释性 AI 的弹性计划技术”，在激烈的竞争中获得冠军，历年的冠军包括微软、辉瑞、壳牌等。此外，几个月前，京东还凭借端到端库存管理等技术入围了 2023 年弗兰兹厄德曼奖（Franz Edelman Award）总决赛，这是一项由美国运筹学与管理科学学会(INFORMS)设立的管理科学界的最高奖项，被誉为工业工程领域的“诺贝尔奖”，旨在表彰运用运筹学和管理科学在实际应用中产生巨大价值的工作。</p><p></p><p>过去一年，<a href=\"https://xie.infoq.cn/article/67845cda5d0468afadbd45e31?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">京东零售技术</a>\"团队持续探索创新。在供应链方向，通过提出并应用端到端库存管理技术和可解释 AI 技术，实现了更快的库存周转和更高效的供应链决策、协同。这是 2023 京东零售技术年度盘点深度文章系列的第三篇，希望能为技术同学们带来一些启发或帮助。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6e/6e9c22c08b49e62713fd364103211f19.webp?x-oss-process=image%2Fresize%2Cp_80%2Fformat%2Cpng\" /></p><p></p><p></p><h2>一、供应链决策中的超级难题：如何在保证可解释性的情况下提升预测精度？</h2><p></p><p></p><p>销量预测是供应链决策的关键组成部分，其准确性直接影响库存控制、资金安排、生产计划和市场策略。销量预测在传统上依赖于基于统计方法的时间序列模型，但是随着计算能力的提升和数据采集技术的进步，预测方法逐渐演变为更为复杂的机器学习算法，能够处理更多维度的数据并捕捉更深层次的非线性关系。</p><p></p><p>总体来看，销量预测的发展经历了三个阶段：传统统计方法、机器学习方法以及混合算法。传统的统计方法如 ETS、ARIMA 等，具有清晰的数学结构，但只能处理简单的时间序列数据，无法捕获外生变量的影响，很难进一步提高预测精度。随着电商规模快速发展，商品规模越来越大，传统方法在复杂场景的效果劣势则逐渐显现出来，而机器学习算法由于其强大的拟合能力开始备受追捧，如 xgboost、LSTM、Transformer 等。</p><p></p><p>然而，目前的机器学习算法普遍是黑盒化的，可解释性的缺乏已经成为这些算法在供应链实践中的一个关键障碍。针对传统方法及机器学习方法的劣势，混合算法逐渐走进大众的视野。混合算法通过将统计模型与黑盒 ML 算法相结合以提高预测准确性和可解释性，如 N-BEATS 和 NBEATSx 。但是这些混合算法存在明显的问题：一方面，现有的混合算法与供应链场景匹配度低，仅仅考虑趋势、季节等固有的时序因素，无法量化营销、促销等特有因素的影响，因此在供应链场景下无法保证可解释性；另一方面，现有的混合算法通常依赖于具有统计假设的理论模型，只关注各成分的准确性，不考虑全局信息，导致准确性的下降。</p><p></p><p>而对于京东供应链来说，商品补货的决策直接影响生产，所以对于算法的要求不仅仅是准确率，而需要有高度的可解释性，才能获取业务的信任。尤其是针对头部商品，会有补货不足的风险，造成缺货，影响采销的销售计划达成，所以业务需要知道预测结果是如何得到的，比如预测考虑了哪些因素，每种因素带来的影响有多大等等，提升业务的可控度及信赖度。京东智能供应链团队致力于打造一套针对供应链场景下全新的可解释预测算法，其中如何保证可解释性的情况下提升预测精度是最主要的挑战，关键要解决两个技术难点：</p><p></p><h4>（1）高可解释性约束下现有的算法准确性较差</h4><p></p><p></p><p>在时间序列预测中，基于时序分解的算法将时序分解为不同的成分，可解释性较强，因此被广泛使用，但是基于传统统计的时序分解算法由于其无法考虑多序列预测及对于复杂场景的拟合能力较差，所以准确性较差。采用这些方法会造成大量的低质量的备货及库存冗余，增加仓储成本。因此如何保证可解释性的情况下提升预测准确率是最大的技术难点。</p><p></p><h4>（2）现有的混合算法全局拟合能力差，与供应链场景匹配度低</h4><p></p><p></p><p>为了提高预测精度，最近的可解释算法通常将机器学习方法（ML）与分解相结合，但是现有的混合算法通常依赖于具有统计假设的理论模型，只关注各成分的准确性，不考虑全局信息，而供应链场景下各成分的因素相互依赖，采用统计假设的理论模型难以拟合，这种方式脱离了实际的业务场景，从而导致系统使用率较低，补货不及时等，缺货导致用户买不到自己想要买的商品，影响商品的销售额。</p><p></p><p>由此，智能供应链团队提出了一种新的可解释预测技术，这是一种新的混合算法，构建了通用的可解释算法框架保证高扩展性，在不同的复杂场景下可解释性及准确性均大幅的提升，主要创新包括：</p><p></p><p>1.预测流程及结果可解释，大幅提升用户的信任</p><p></p><p>新的可解释预测技术输出给下游的预测不再是一个最终预测值，预测输出由多个需求因素组成，如基线、促销、营销等，并且基于京东大规模的订单销售、促销等数据，通过因果推断的方式实现数据到模型输入及过程的因果逻辑，既提升了复杂场景的拟合能力，同时让业务了解整个预测流程的流转。比如促销场景下，通过因果算法刻画促销预测量的上升是由于输入的促销数据中业务提报的秒杀促销引起，从而让业务了解整个预测流程的流转，最终通过可解释性的预测指导用户做出准确的补货决策，大幅提升用户的信任。</p><p></p><p>2.提出了一种通用的结合分解和 ML 的可解释预测算法</p><p></p><p>智能供应链团队提出了一种通用的结合分解和 ML 的可解释预测算法（W-R 算法），W-R 算法构建了一种通过加权变体的加法组合函数形成的可解释加法模型，既通过分解的范式保证时序的可解释性，又通过深度的权重及残差网络考虑全局信息提升预测准确性，提升了模型全局化拟合能力，解决了现有时序分解算法准确性较差问题。W-R 算法整体分成两个阶段，第一阶段是初始分解模块，通过自定义的分解模块去估计分解的成分，保证预测的可解释性，如在自营场景下：预测 = 基线+促销+营销 。第二阶段为 ML 调整模块，通过构建加权变体加法组合函数去拟合初始分解成分的全局参数，提升预测准确性，自营场景下：预测 = 基线权重基线+促销权重促销+营销权重*营销 +残差，根据权重及残差网络估计相应的权重及残差，最终输出加权的加法组合预测，总体来看既保证可解释性，也保证了准确性。</p><p></p><p>未来来看，可解释的预测将是供应链领域的重点方向之一，后续智能供应链团队将从全流程可解释、自动诊断归因、计划可解释等多个方向迭代优化可解释预测技术，从而更好的服务下游决策，提升供应链效率。</p><p></p><h2>二、端到端库存管理的策略和模型设计</h2><p></p><p></p><p>库存管理是供应链管理中重要的一环，决策者需要根据用户需求、销售计划和供应商能力等信息，安排合理的补货和销售计划。实践中，诸多因素导致库存管理是一项复杂的难题。例如用户需求具有高度的不确定性，商品的种类和数量十分庞大，供应链中间环节较多，供应商送货时间和送货量也有波动性。另一方面，如果库存管理的决策失准，造成的影响也是巨大的。如果对消费者需求预估不足，导致补货数量偏低，会造成频繁的缺货现象，从而影响消费者购物体验，也给平台造成销售损失。如果过高估计了消费者需求，造成补货数量偏高，会导致大量的冗余库存，产生过高的存储费用，同时也占用大量现金流，造成资金浪费。因此，如何应对库存管理这一既重要又有挑战的任务，成为供应链管理中的首要任务。</p><p></p><p>传统的库存补货方法大多先基于历史数据来预估未来需求，再结合供应商补货提前期（VLT，从向供应商订货到收货完成的时间）等信息，来确定合适的补货策略。这种方式被称为“先预测再优化”框架（Predict-then-optimize, PTO）。然而，PTO 框架将整个补货过程拆分为了预测和优化两个阶段，而输入数据经过第一阶段处理后往往会造成信息损失，因此在后续的优化阶段中无法充分利用原始数据，导致决策偏差。而对于京东场景而言，庞大的商品种类和数量，用户需求的高度随机性，各类意外事件（例如恶劣天气、疫情等）对供应链的影响和冲击，均会进一步提升需求预测中的误差，最终导致供应链成本增加，消费者满意度下降。</p><p></p><p>为解决上述问题，京东智能供应链团队提出端到端（End-to-end）库存管理技术，基于多分位数循环神经网络（MQRNN）算法，利用商品历史销量、历史采购节奏、供应商履约等数据，直接通过模型来决策最佳补货量。</p><p></p><p>该模型先使用历史采购数据、销量数据、库存数据，采用基于动态规划框架提出的最优补货量决策模型，确定历史各个下单时间的最优补货量；再基于历史销量信息、送货提前期信息、下单周期、初始库存以及最优补货量构建特征库并生成学习样本；随后设计基于多分位数循环神经网络的深度自学习模块，针对学习样本进行训练优化；最后基于学习后的深度自学习模块进行预测销量、送货提前期以及下单量，实现端到端补货方法。</p><p></p><p>如图所示，端到端模型的输入项包含 5 类，分别是需求预测相关特征、商品基础特征（例如品类、品牌、仓库信息等）、供应商送货时长特征、库存盘点周期特征和初始库存水位信息。这些输入信息经处理后进入隐藏层，包括需求预测子模块、送货时长模块和优化决策模块。模型最终输出项包括 3 类，第一项是最终的补货决策，是模型的主要输出，第二、三项是同时生成的需求预测结果和供应商送货时长预测结果。由于缩短了决策流程，减少了中间环节预测误差累积对决策效果的影响，端到端模型提升了补货精准度，有效降低成本。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/84/84e29d16593629c2f8635396a6da8765.webp?x-oss-process=image%2Fresize%2Cp_80%2Fformat%2Cpng\" /></p><p>图 端到端补货模型示意</p><p></p><p>这两项技术上线以来，供应链预测准确度提升 7%，现货率提升 2%，库存周转优化接近 2 天，带来数亿元的持货成本节约。以这两项技术为基础的自动补货系统，已实现超过 85%的自动化率。</p><p></p><p>目前，京东作为中国最大的零售商，为近 6 亿活跃用户提供超过 1000 万种自营商品。京东自建的覆盖全国的完善物流体系，管理着超过 1600 个库房，运营着超大规模的物流车队。京东如此庞大的零售和物流业务，背后离不开卓越的供应链管理技术，包括库存管理、库房运营、配送履约等。得益于完善的供应链设施和先进的数智化技术，超过 95%的京东自营订单可以实现当日达或次日达，平均库存周转天接近 30 天，现货率高于 97%，达到了行业领先水平。未来，京东将继续通过数智化技术持续优化成本、效率、体验，致力于创造更大的产业价值和社会价值。</p><p></p><p>本文相关的具体技术细节，可分别参考论文：</p><p><a href=\"https://xie.infoq.cn/link?target=https%3A%2F%2Flink.juejin.cn%2F%3Ftarget%3Dhttps%253A%252F%252Fdoi.org%252F10.1287%252Fmnsc.2022.4564\">doi.org/10.1287/mns…</a>\"</p><p><a href=\"https://xie.infoq.cn/link?target=https%3A%2F%2Flink.juejin.cn%2F%3Ftarget%3Dhttps%253A%252F%252Farxiv.org%252Fabs%252F2212.06620\">arxiv.org/abs/2212.06…</a>\"</p>",
    "publish_time": "2024-03-01 11:54:38",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "万字干货 - 京东零售数据资产能力升级与实践",
    "url": "https://www.infoq.cn/article/t8G6sdTHu20yfcLFg367",
    "summary": "<p></p><h2>开篇</h2><p></p><p></p><p><a href=\"https://www.infoq.cn/article/Idl1P18pvSSWDqtZ2mHc?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">京东</a>\"自营和商家自运营模式，以及伴随的多种运营视角、多种组合计算、多种销售属性等数据维度，相较于行业同等量级，数据处理的难度与复杂度都显著增加。如何从海量的数据模型与数据指标中提升检索数据的效率，降低数据存算的成本，提供更可信的数据内容和多种应用模式快速支撑业务的数据决策与分析，是数据团队去年聚焦解决的核心课题。</p><p></p><p>通过 23 年的打磨与应用，我们在数据指标开发与共享效率大幅提升，分析看板搭建时间从天级别缩短到小时级别，日均指标消费频次从 23 年初的百万级增长到年末的数千万。</p><p></p><p>本文会基于我们的实践，通过如下几个章节和大家进行分享交流，希望能为技术同学们带来一些启发或帮助。这也是“2023 <a href=\"https://xie.infoq.cn/article/67845cda5d0468afadbd45e31?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">京东零售技术</a>\"年度盘点的深度文章系列”的第二篇，欢迎持续关注。</p><p></p><p>1、 数据资产篇--资产认证与治理</p><p>2、 数据能力篇--指标中台实践</p><p>3、 数据展现篇--数据可视化工具</p><p>4、 数据智能篇-- 基于大模型的智能化应用</p><p></p><h2>1、数据资产篇--资产认证与治理</h2><p></p><p></p><h4>背景与挑战</h4><p></p><p></p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1NDA4NjU2MA%3D%3D&amp;chksm=fbea5f11cc9dd607c1584e34fbe0dfa95ff4c6bb5a1dee75a4393c702bc759e6a8475a77630f&amp;idx=2&amp;mid=2247493342&amp;scene=27&amp;sn=135b40673741b64c5b29be8ba0bb2f87&amp;utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search#wechat_redirect\">零售</a>\"数据模型有几万张，其中有大量的临时表、无效表等，零售数据资产用户(尤其是分析师角色)一直存在找模型、理解模型、使用模型困难的情况，面对业务用数、分析需求，在找模型探数据的环节经常消耗较多的时间精力，用户普遍希望可以节约找、用模型的时间，提升交付数据结果、分析结果的效率，而且有些错误的或重复的资产在公司部门内流通，重复资产一方面浪费成本，另一方面无法保证数据的一致性。</p><p>为解决用户诉求，同时从产研角度希望优化数据资产的质量和标准化程度，从生产到消费均进行一定程度的优化改造，提升端到端的资产建立标准化程度，进而提升用户使用体验。</p><p></p><h4>数据统一语言</h4><p></p><p></p><p>目标：如下图所示，拉齐资产建设者和资产消费者之间的沟通语言，提升找表效率、增强表的可解释性。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0e/0e5209772728d5bdec73a42cb01336dd.png\" /></p><p></p><p>通过数据维度建模的三个阶段(概念模型、逻辑模型、物理模型)，形成描述模型的标准定义。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d3/d3ed54a3568b9f308fce5e0f336367d3.png\" /></p><p></p><p>总结为一句话：</p><p></p><p>业务域&nbsp;**&amp;&nbsp;主题&nbsp;**下，描述了&nbsp;**X1 业务过程&nbsp;，&nbsp;X2 业务过程&nbsp;**的&nbsp;**X 主体&nbsp;**表，每&nbsp;**更新频率&nbsp;**更新&nbsp;更新周期&nbsp;数据的&nbsp;存储方式&nbsp;表，表主键是&nbsp;数据粒度</p><p></p><p>比如：&nbsp;adm_d04_trade_std_ord_det_snapshot 通用域 &amp; 交易 下，描述了 取消,完成,成交,订单出库,下单 的 大盘订单 表，每天更新近 1 日的增量快照 表，表主键是 ord_type+sale_ord_det_id</p><p></p><h4>维度建模方法论</h4><p></p><p></p><p>3 个阶段：概念模型 &gt; 逻辑模型 &gt; 物理模型 (1:N:M )</p><p></p><p>概念模型</p><p></p><p>在一个分析领域内，描述实体以及实体之间的关系，等同于业务图谱。一个主题下一个概念模型。</p><p>实体之间的关系包括引用关系和继承关系，引用关系：一个实体是另外一个实体的属性。继承关系：实体比另外一个实体更细化具体，比如事件和浏览。</p><p></p><p>where [业务域]+ why[主题]+who[主体集合] + what [业务过程集合]</p><p></p><p>举例：交易的业务流程图：</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b2/b2f78a4c181f1db51a8c50f2f75fd880.png\" /></p><p></p><p>将业务流程中的实体（包括业务活动和业务对象）之间的关系构建出来，变成交易主题下的概念模型：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c5/c5a0702dbe64072b1b1141dfd45acf08.png\" /></p><p></p><p>逻辑模型</p><p></p><p>逻辑模型：是将概念模型转化为具体的数据模型的过程。一个概念模型下会拆分成多个逻辑模型。拆分原则：根据主体或者业务过程进行拆分。</p><p></p><p>where [业务域] + why[主题] +who[主体] + what [业务过程]</p><p></p><p>这里的业务过程可以是单个，也可以是多个。一般根据业务将业务相似度高，同粒度的业务过程放在一起。</p><p>举例：</p><p></p><p>where [主站] + why[交易] +who[订单] + what [下单、支付、出库、完成] where [主站] + why[交易] +who[订单] + what [下单、支付] where [主站] + why[交易] +who[移动订单] + what [下单]</p><p></p><p>物理模型</p><p></p><p>用技术手段将逻辑模型通过不同的加工方式和周期频率等物化形成多个不同的物理模型。一个逻辑模型对应一个或者多个物理模型。更新周期：每次更新多久的数据。更新频率：多久更新一次。加工粒度：描述模型每一行的业务含义，也就是主键。</p><p></p><p>where [业务域] + why[主题] +who[主体] + what [业务过程]</p><p>when [更新周期+更新频率]how much [加工粒度]how [更新方式]</p><p></p><p>举例：</p><p>[主站] + [交易] +[订单] + [下单、支付、出库、完成] + [未归档/日]+[订单号] + 增量</p><p>[主站] + [交易] +[订单] + [下单、支付、出库、完成] +[未归档/日]+[销售订单明细编号] + 增量</p><p>[主站] + [交易] +[订单] + [下单、支付、出库、完成] +[近 1 日/日]+[销售订单明细编号] + 增量</p><p>[主站] + [交易] +[订单] + [下单、支付、出库、完成] +[近 180 日/日]+[销售订单明细编号] + 增量</p><p>[主站] + [交易] +[订单] + [下单、支付] +[近 1 日/日]+[销售订单明细编号] + 增量</p><p>[主站] + [交易] +[移动订单] + [下单] +[近 1 日/日]+[订单号] + 增量</p><p></p><h4>资产认证</h4><p></p><p></p><p>基于数据标准，推进资产认证，通过资产完备性、唯一性治理，存量资产关停并转，提升认证资产的需求覆盖率，降本增效。目前，覆盖零售范围内的交易、用户、流量、营销、财务等核心主题数据资产建设。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4e/4e24db362041362cd034c6eb62bc052f.png\" /></p><p></p><p></p><h4>资产可感知</h4><p></p><p></p><p>从全局到局部，端到端的全面了解数据资产，提升资产可感知的能力，包含：</p><p></p><p>1）推进数据资产图谱的自动化构建能力，从资产全景上快速了解到业务流程及业务数据化的资产模型（数据孪生）；</p><p>2）丰富模型详情页，归一所有信息源，并增加对模型行高、数据范围、常见问题等信息，提升用户理解模型的效率；</p><p>3）标准字段库，通过对字段标准口径、业务描述、特殊场景、常见问题等信息的补充和完善，提升用户理解模型、用模型的效率。</p><p></p><h4>未来计划</h4><p></p><p></p><p>•以用户反馈问题出发，完善和优化数据标准 5W2H，使其确保数据资产清晰易理解的目标达成；</p><p>•依据样板间的效果反馈，完善样板间的功能和内容，并推广到其他主题资产；</p><p>•加强数据资产运营，扩展渠道，提升用户找数用数体验。</p><p></p><h2>2、数据能力篇--指标中台实践</h2><p></p><p></p><h4>背景与挑战</h4><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c9/c9e8a78287039df87594c0c8678256ce.png\" /></p><p></p><p>❌1&nbsp;、口径歧义与存算不受控：指标通常散落在 BI 报表工具、数据产品、ETL 过程与各种中间表中，看不清，改不动；如何系统化保障存算资源使用合理？</p><p>❌2、研发资源缺口：数据 BP 缺少 OLAP 数据研发、数据服务研发、前后端研发，在不扩招的情况下如何满足各业务单元的用数诉求，降低指标加工门槛，使少量 BP 同学即可完成自交付？</p><p>❌3、指标开放共享难：如何让原本锁定在数据应用产品内部的指标无需重复加工即可对外开放共享，让指标流通起来？</p><p></p><h4>技术先进性</h4><p></p><p></p><p>纵观业界比较成熟的指标中台相关建设，针对零售场景口径变化快、用户类型多且数量大、数据产品形态丰富等特点，我们打造了核心优势项能力：</p><p></p><p>1.全量的指标明细资产管控能力【指标、维度资产】</p><p>2.系统原生的拓扑能力【指标市场】</p><p>3.业务公式统一沉淀能力【规则引擎】</p><p>4.指标异常主动预警能力【指标巡检】</p><p>5.基于逻辑宽表的智能加速和扩维能力【定义驱动生产】</p><p></p><p>结合以上我们特有的优势项能力，在业界首次实现了生产与消费联动互相促进，打造了数据收集、数据安全、指标计算、监控、分析以及决策支持的指标生态，提供一站式的中台化、服务化的指标服务平台，让用户可以高效地管理和分析各种业务指标，主要解决用户在数据处理和分析过程中遇到的以下几个问题：</p><p></p><p>（1）数据孤岛：&nbsp;不同的部门或业务线可能使用不同的系统来记录数据，导致数据分散在不同的地方，集中分析变得困难。</p><p>（2）数据标准一致性：&nbsp;保证整个组织内部使用统一的数据指标定义和计算逻辑。</p><p>（3）实时性：&nbsp;业务决策往往需要实时或近实时的指标来支持，一站式指标中台化解决方案可以提供实时监控和即时分析。</p><p>（4）自助式分析：&nbsp;业务人员和分析师可以通过友好的界面进行自助式的数据探索和分析，而不需要依赖于专业的数据团队。</p><p>（5） 数据治理：&nbsp;包括数据安全、质量管理、合规性监控等多方面确保数据的准确性和可靠性。</p><p></p><h4>总体架构设计</h4><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b1/b12fbcba39d2a31a21625f1fb71a6e08.png\" /></p><p></p><p>在架构设计上我们参考了 MDA 和 DDD 的思想，希望通过口径组件实现自动生成代码并统一查询语言，支持全链路行为决策；通过 DRY 的原则抽象指标定义相关可积木化执行的原语，以便于基于数据应用的场景连接底层平台能力；从图中可以看到整体架构分为物化层，语义层，和查询层。在整个过程中都会伴随数据加速，通过统一接入层开放给各个产品端或可视化工具来使用，物化层用来回答前面的存不存，存多久，存哪里，怎么存的问题；语义层用来通过系统将业务语言转化为机器语言，查询层用来回答数据去哪拿、怎么拿、怎么拿最快的问题，最上面蓝色部分为各个消费指标产物的产品端，深绿色是可视化工具，浅绿色是正在孵化阶段的基于 GPT 的数据分析工具。</p><p></p><h4>详细设计展开</h4><p></p><p></p><p>查询层 ：统一查询语言，最佳查询策略、最优查询性能</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/31/3143cbf31921ca84bb3e94c3011443f8.jpeg?x-oss-process=image%2Fresize%2Cp_80%2Fauto-orient%2C1\" /></p><p></p><p>统一的 DSL</p><p></p><p>在查询语言层面，需要将自然语言分析需求转换为结构化的查询语言从而达到书同文、车同轨的目的，使得指标数据所见即所得，开箱即用。我们通过如下案例来说明语言抽象的思路，例如一个常见的分析需求：</p><p></p><p>「23 年 12 月 21 日 XX 品牌在各店铺'成交金额'排名 top5 的情况」</p><p></p><p>如果将该需求进行结构化抽取，可以做如下解释：</p><p>聚合条件：【按‘店铺’聚合】，筛选条件：【时间范围 = '2023-12-21'、品牌 = 'XX'（id 是 8557）】 ，要查的指标 = 【成交金额】，排序 = 【按‘成交金额’降序】， 返回维度属性 = 【店铺】，分页 = 【第一页-5 条】。</p><p>通过这样的结构化思维的理解，则统一的指标查询语言可以由五要素组成：指标、聚合条件、筛选条件、排序分页、返回维度属性。基于此五要素，设计出统一查询 DSL。如下结构体所示，语法规则设计类似 Json 语法风格。</p><p></p><p><code lang=\"undefined\">{\n    \"indicators\": [\n      \"ge_deal_standard_deal_ord_amt\"\n    ],\n    \"attributes\": [\n      \"shop\"\n    ],\n    \"criteria\": {\n      \"criterions\": [\n        {\n          \"propertyName\": \"main_brand\",\n          \"values\": \"8557\",\n          \"type\": \"string\",\n          \"op\": \"=\"\n        },\n        {\n          \"propertyName\": \"dt\",\n          \"value\": \"2023-12-21\",\n          \"type\": \"string\",\n          \"op\": \"=\"\n        },\n        ...\n      ],\n      \"orders\": [\n        {\n          \"ascending\": false,\n          \"propertyName\": \"ge_deal_standard_deal_ord_amt\"\n        }\n      ],\n      \"maxResults\": 5,\n      \"firstResult\": 0,\n      \"group\": [\n        \"shop\"\n      ]\n    }\n}\n</code></p><p></p><p>智能寻址拆分</p><p></p><p>在实际应用情况中，在简单的五要素基础上，真实业务场景还存在一些同环比、复合指标计算类似的分析及提数场景，则一次取数任务并不是提交一次引擎查询就可以满足需求。所以按照实际场景，查询引擎在处理一次取数任务时，会生成一个执行计划 DAG，主要包含两层拆分原则：</p><p></p><p>（1）语义拆分：按照查询引擎提供的 DSL 语义进行第一层拆分，结合统一的包含“指标、维度、数据服务”的基础元数据中心，进行寻址物料的归堆分组，根据决策策略表进行拆分，包含取寻址最大必要集、在线转离线的策略以及可手动调配的权重等，一个 Job（对应用户一次取数任务）会拆分为多个 Task，每个 Task 表示一批逻辑的指标/维度查询。</p><p></p><p>（2）引擎拆分：按照指标维度所存在的数据服务（表引擎）进行第二层拆分，一个 Task 会拆分多个 Query，每个 Query 表示一次面向引擎的查询，包括上图里当期查询、同期查询等并针对 Task 按照实际查询场景进行主从/并行的 Query 决策。</p><p></p><p>查询逻辑加速</p><p></p><p>包含根据执行计划发起的主从/并行和点查/批查的查询，通过这个逻辑加速可以减少 2/3（整体的统计，一批指标越多越明显）的冗余数据查询，从而提升整体 TP99 表现，同时在查询层通过动态获取集群 CPU 负载等情况可以用来进行自动切流、潮汐滚动等加速优化，比如在双流情况下，当其中一条流集群 CPU 负载超过预设的阈值时，启动自动切一部分流量到另一个流从而来前置降低集群负载避免影响查询速度。又如在近线的查询场景中（分页逻辑异步发起多次请求，用户预期分钟级响应内），通过获取集群 CPU、负载的使用情况来动态调节请求的流速，从而通过最大化利用集群资源来实现查询提速。当然在查询加速上少不了缓存的介入，通过 JIMDB+本地缓存的方式进行多级缓存的加速。</p><p></p><h4>语义层：数据知识系统化，使资产放心好用、治理有依据</h4><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2b/2b9872003acc70f3961b1ea0c4242c6d.jpeg?x-oss-process=image%2Fresize%2Cp_80%2Fauto-orient%2C1\" /></p><p></p><p></p><h4>数据知识系统化：</h4><p></p><p>在数据知识可视化上要做的事儿是如何将业务语言转化为机器语言，并根据设定的标准及规则进行执行，对此分别从指标维度体系化标准定义模型、指标维度的数据安全保障模型、指标消费应用管理模型三个层面进行了系统化设计，为自动化生产、消费及全链路血缘可视化做数据治理打好基础。</p><p></p><p>•指标、维度体系化标准定义模型：</p><p></p><p>通过定义 4w1h 构造原子指标并结合标准维度定义的裁剪口径进行唯一的、标准的衍生指标定义。</p><p>复合指标指建立在衍生指标之上，通过一定运算规则形成的计算指标集合（二次逻辑计算），如 ARPU 值、渗透率等；包括比率型、比例型、变化量型、变化率型、统计行（均值、分位数），复合指标采用了“积木化+服务化”双重解决方案，在既满足业务灵活场景下，又做到了复合指标的资产沉淀。</p><p>又如以复合维度的模型为例在维度模型上结合较频繁变动的维度（维度的定义会周期性变动）调整项如何统一，对需求进行了抽象，设计复合维度模型，进一步扩充\"指标-维度-修饰\"的概念体系，既保证了维度口径定义的透明,又保证了逻辑一致且可被系统执行;一次定义,多处使用，结合上面提到的统一查询的服务化能力做到了真正的开放、共享（可复用，不用单独开发）。</p><p></p><p>•指标、维度数据安全保障模型：</p><p></p><p>对人在数据应用产品上能看到什么样的数据范围需要有安全保障，避免数据泄露风险。对此通过把看数视角【维度+维度值】定义到数据角色里，可做到数据角色被多个人或者岗位所复用。在数据角色基础上抽取岗位的模型把人与角色关联起来，保证一个人可有多个身份切换不同视角进行灵活看数。在岗位下通过设计功能角色把资源（菜单）的权限进行管控，在资源下进行具体指标和维度组的关联，从而达到在基础的行列之外，提供了各种“视图”级别的权控，而每一个“视图”是展示的最小单元。而资源内的指标维度叉乘关系是数据权限全集的真子集从而达到快速分配权限的目的。</p><p></p><p>•指标消费应用管理模型：</p><p></p><p>当一个指标被申请消费时，需要知道被用在来什么平台、什么端，应用场景是什么样的，从而来评估是否允许接入、是否需要重保、资源如何分配等。对此构建消费应用管理模型，从指标到资源、场景、应用端、应用平台的关系把消费血缘需要体现出的具体消费情况都能涵盖。</p><p></p><h4>资产放心好用：</h4><p></p><p></p><p>在数据知识系统化的前提下，需要大量对外开放，基于三道防线保障了日常和大促的资产放心好用，为系统稳定运行保驾护航：</p><p></p><p>•第一道防线：前置避免故障发生：</p><p></p><p>通过资源隔离来进行各平台、端甚至看板级别的隔离保障，保障的是一些非重保看板查询变慢或者阻塞不影响其他核心业务；压测相关是在平台层面上基于历史调用采集分析对现实场景的高度还原，进行全链路节点高保真压测，并且针对压测期间通过动态别名切换技术，来实现业务无损压测及数据产品无感知压测；在混沌工程演练上将核心的数据链路注入问题点，自动识别潜在风险，防患于未然。</p><p></p><p>•第二道防线：巡检与监控，主动发现</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5d/5d93752169a47aa34c542ba334ef7dd0.png\" /></p><p></p><p>在态势检测及预警上，结合调用情况对预计算、预热命中率等趋势预警，防止有些预计算未命中或者预热未覆盖到的情况；在数据 SRE 的体系建设上，对调用情况通过全链路的 uuid 进行串联，并进行可视化展示，提升数据可观测性，打破多系统监控数据孤岛，提升监控效率；巡检能力是通过日常的访问日志分析及梳理，以及各核心业务场景的输入，如上图所示，基于统一查询服务的巡检配置场景及对应告警规则，结合巡检自动化任务，可在任意时间按任意频次动态执行任务，防止数据空窗、跌 0、异常波动等情况。先于用户无感的在系统层面发现问题；从发现、跟进、分析、解决、经验沉淀做到全流程自动化。在实战中巡检的问题主要分以下几类：</p><p></p><p>（1）对于实时数据异常的巡检，第一时间发现后马上进行数据流切换，用户完全无感知；</p><p>（2）BP 的战报、日报通过巡检无需人工确认，自动将结果发送给对应业务，可以及时介入；</p><p>（3）大促期间有很多指标数据有“异常”大波动（以 23 年 618 期间为例，巡检发现 16 个线上异常情况），产品研发收到巡检结果后第一时间进行业务分析，从经营状态角度确保数据在预期之内。</p><p></p><p>•第三道防线：应急预案</p><p></p><p>对于一些已发生的问题，一定要有应急预案才能真正做到临危不乱，服务化对于限流、熔断实现了精准靶向，可做到针对某一个页面的某个主题指标进行细粒度限流或者熔断处理，也可做到整体的看板或者集群粒度的处理，保证容灾的灵活性。同时对降级策略有更友好的设计，在降级后默认返回兜底 0 的基础上，通过缓存机制，可返回最后一次请求成功的结果，增加了系统灵活性及减少业务的损失。在应急预案上由于压力过大导致服务或容器出现异常时，会应急启动热备容器，争取更多的修复及问题定位时间。</p><p></p><h4>存算成本集约化治理：</h4><p></p><p></p><p>指标体系开放，在生产、消费间进行系统化流转，基于指标体系及指标消费应用管理模型首次解决消费链路可追踪，结合指标的生产血缘，形成清晰的全链路血缘。</p><p>打通全链路血缘的必要性主要基于以下三大视角：</p><p>（1）用户视角：让用户从指标展示入口（标准化产品、数据工具）到口径与资产血缘清晰可见，知道数据从哪来、怎么来、怎么用。</p><p>（2）治理视角：通过数据标准消费端反向治理，可清晰的知道某些模型或者表在消费侧的使用情况如何，访问少或功能相似的看板做整合，关停并转，实现了从消费价值来反推资产 ROI。</p><p>（3）监控视角：当大促期间发现某一数据任务延迟或者某一实时流积压时，可通过血缘关系快速确定应用上的影响范围，从而能快速介入进行分析并判断是否公告用户。</p><p></p><h4>物化层：基于数据消费行为(HBO)、系统内置规则(RBO)自动加速</h4><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/36/36cbdf7da2d45bd196ac9c2d961e0cc3.png\" /></p><p></p><p></p><h4>中间结果物化</h4><p></p><p></p><p>大数据量预计算有着耗资源、易失败的特点，数据同步会因为网络抖动或集群异常造成同步失败，整个链路失败率高、重试成本高。用户在定义驱动生产只配置基于数仓做预计算，结果数据同步到目标数据源，中间过程并没有做配置。为提高任务稳定性，系统内置 RBO 判断为预计算任务会自动优化生产路径：首先生成预计算 SQL，之后通过 SQL 做读时建模，在数仓中自动创建模型并将预计算结果数据写入到模型中，模型会继承逻辑表 5W2H 并写到元数据中，避免模型重复创建。最后基于模型生成数据同步任务。这样任务失败只需要重跑预计算或同步任务即可，无需全链路重跑，降低任务重试成本。更为关键的是，系统会给中间结果(包含系统创建模型)配置生命周期，让数据合理生产与消亡，如果不被下游依赖则会全部清理直至下次使用再创建，避免人工开发场景只生产不治理的情况。</p><p></p><p>双流场景，定义驱动生产内配置双流策略则会默认生成一个计算任务，中间结果物化到临时表并基于中间表数据生成两个同步主备集群的任务。</p><p></p><h4>数据索引增强</h4><p></p><p></p><p>多维分析场景中，经常使用 Groupings Sets 将多个维度组合进行计算，通常每个维度组合都对应唯一编码(命名为 LVL code)供消费侧查询使用。之前人工开发大多数据研发和服务研发共同维护维度组合与 LVL code 映射表，在脚本和服务中通过硬编码方式实现双方联动，维护成本极高。定义驱动生产判断预计算目标源是 ClickHouse 则自动使用 Groupings Sets 生成轻聚合数据，生产侧通过调用生成 LVL code 函数获取维度组合对应的 LVL code 值，并自动将二者写入到\"数据索引\"表中，消费侧查询时同样通过\"数据索引\"表获取编码值生成 SQL，生产、消费自动联动。</p><p></p><h4>自动加速与引擎优选</h4><p></p><p></p><p>除用户手动创建加速方式外，系统还支持基于代价与用户消费行为智能物化。用户申请指标填写 QPS、TP99 两个信息，用户可在加速策略模块选择高阶功能\"智能物化\"，并可配置存储上限、构建频率、构建结束时间等信息。系统分析访问日志，会对指标+维度粒度 TP99 大于目标值进行自动生成加速策略，默认将数仓数据进行预计算并同步到 HBase 中，系统判断逻辑表配置了介质加速 如 HIVE2ClickHouse，则会通过引擎优选功能判断基于数仓和 ClickHouse 哪个计算更快、更省资源，一般会优化为 ClickHouse2HBase。</p><p></p><p>智能物化是整个系统的核心，解决业务敏捷与无序增长的困境，用户定义完虚拟数据模型的业务逻辑后，引擎不会直接将其物化，而是按消费端对模型字段的产出时间和查询速度的要求，分析全局数据的查询情况，选择性按全局最优的策略进行物化编排（通过物化视图实现），并持续 HBO 优化。</p><p></p><h4>业务贡献和价值</h4><p></p><p></p><p>覆盖数据中台内所有场景和数据团队，零售内 4 个 C-1，及 4 个外部子集团产研。日均 4000w+次数据调用，支持零售 8000+个指标，并支持了 22 个数据产品。做到了无 OLAP 数据和服务端研发资源使用指标服务平台交付需求，数据整体交付效率由 3 天缩短到 0.8 天，提升需求交付效率 70%。</p><p></p><h2>3、数据展现篇--数据可视化工具</h2><p></p><p></p><h4>背景与挑战</h4><p></p><p></p><p>从行业来看，未来所有成功的企业都将是数字化转型中表现卓越的组织。在数据展现能力上，持续探索数据可视化理论、丰富数据分析方法和可视化表达，推动数据可视化自动化、场景化、智能化快速落地，助力京东各业务单元敏捷作战，激发个体创造力，不断适应市场和业务需求的变化。</p><p></p><h4>技术先进性</h4><p></p><p></p><p>通过持续建设系统能力，赋能看板、报告、大屏、分析、提数等多个业务场景，同时从 4 大方向纵向拉通系统质量保障建设，提升系统稳定性，最终实现在复杂多变的业务场景下，通过功能插拔、动态配置，构建一站式的解决方案，主要具备以下优势能力：</p><p></p><p>1.分析可视化组件：&nbsp;引用业界先进的图形语法理论结合 SVG、D3 等技术沉淀，自研 9 类可视化分析能力，如杜邦分析、异动分析、交叉分析等。相较于行业方案，更加贴合京东零售业务分析思路。</p><p>2.低代码编排：&nbsp;设计并实现了编排技术方案，包括状态管理机制、可视化编排系统、数据集编排系统、代码生成与注入系统，可将万行代码的看板完全配置化实现。</p><p>3.PC、移动端双端支持：&nbsp;基于移动端组件库和低代码平台高效支持移动分析诉求，支持多端、多网络、多设备，交互体验媲美原生 App。</p><p>4.报告、洞察等场景化能力：&nbsp;基于底层通用系统能力和能力基座打造。报告场景下业内首次支持复杂数据 PPT 报告的自动化输出，大幅提升分析师效率。洞察场景下基于标准化协议实现洞察配置化，并支持快速横向扩展分析能力，高效支持不同业务场景下的问题自动发现与诊断归因。</p><p></p><p>以上数据可视化技术方案目前在零售内得到充分应用，有效支撑日常迭代和大促期间复杂多变的业务场景，能够实现降低研发成本，提升研发效率，完善用户体验。</p><p></p><h4>整体架构介绍</h4><p></p><p></p><p>在数据驱动业务运营的策略下，以高效灵活、场景化、智能化为目标，整合数据资产和工具，以可视化组件和低代码平台为核心，打造黄金眼、商智等标杆的数据应用，实现对不同业务场景的快速赋能。我们通过持续建设系统能力，赋能看板、报告、大屏、分析、提数等多个业务场景，同时从 4 大方向纵向拉通系统质量保障建设，提升系统稳定性，最终实现在复杂多变的业务场景下，通过功能插拔、动态配置，构建一站式的解决方案。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b7/b7bfa45e7a3110dbdada711a7339f564.png\" /></p><p></p><p>整体来看，数据分析可视化的能力建设，主要可以分为 PC 端能力建设和移动端能力建设两个方向，接下来将从 PC 端的分析可视化组件建设、低代码编排、数据推送，以及移动端能力建设和多端一体建设几个方向，详细介绍数据分析可视化的核心技术方案以及在业务中的应用。</p><p></p><h4>详细设计展开</h4><p></p><p></p><p>分析可视化组件</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a8/a8feb1d94961fa7e57a592ccb528f48e.png\" /></p><p></p><p></p><h4>图形语法理论</h4><p></p><p></p><p>分析可视化组件底层均采用了业界先进的图形语法理论。图形语法是一种将抽象基本元素组合成图表的规则。图形语法深层次地反应出统计图形的层次结构。在图形语法学中，一般统计图表的规格主要包含 6 个要素：</p><p></p><p>•DATA：一组从数据集创建变量的数据操作</p><p>•TRANS：变量转换（如排序）</p><p>•SCALE：度量（如对数）</p><p>•COORD：一个坐标系统（如极坐标）</p><p>•ELEMENT：图形及其艺术审美属性（如颜色）</p><p>•GUIDE：一个或多个辅助物（如轴线、图例）</p><p></p><p>和传统枚举图表相比，使用图形语法生成每一个图形的过程就是组合不同的基础图形语法。故而它的灵活和强大之处就在于，只需要改动其中某一步骤，就能得到完全不同的、全新的图表。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/98/98e71fc4f790bdfc3d5f8e363391ab45.png\" /></p><p></p><p>基于灵活的图形语法理论基础，沉淀了大量可视化分析能力，接下来将具体介绍几种特色能力。</p><p></p><p>杜邦分析</p><p></p><p>杜邦分析法（DuPont Analysis）&nbsp;是一种综合利用多个财务指标比率关系来拆解企业财务状况的分析方法。其基本思想是将企业净资产收益率逐级分解为多项财务比率乘积，这样有助于深入分析、比较企业的经营业绩。由于这种分析方法最早由美国杜邦公司使用，故名杜邦分析法。 使用杜邦分析法可以清晰描述指标体系内指标的层次和指标间的关系。如下图所示，杜邦分析法通过树形结构自顶向下的展示了指标间的构成和层级关系，同时通过指标之间的运算符号清晰展现出指标之间的计算关系，例如“净资产收益率=总资产净利率 * 权益乘数”、“总资产净利率=销售净利率 * 总资产周转率”、“销售净利率=净利润 / 销售收入”、“总资产周转率=销售收入 / 资产总额”。采用这一方法，可使财务比率分析的层次更清晰、条理更突出，为报表分析者全面仔细地了解企业的经营和盈利状况提供方便。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/59/597193d5da54a403ed7f91c4abad8ce7.png\" /></p><p></p><p>•布局策略：设计 12 种布局方案，分为两大类：垂直方向（自顶向下、自底向上）、水平方向（自左向右、自右向左），通过 d3-hierarchy 对层次结构数据进行布局计算，实现 node 布局。</p><p>•节点关系：node 节点关系绘制（父子、兄弟）、node 节点辅助信息绘制（提示、预警等），实现关系 ICON 位置计算、辅助信息位置计算。</p><p>•交互：设计了收缩展开、缩放能力，支持大数量图表的交互，通过 viewBox 实现。</p><p>•异动分析</p><p>在实际的业务场景中，为实现对全链路监测部分的可视化展示，沉淀了可复用的可视化组件：网格指标卡。该组件适用于异常监控分析、全链路转化分析等分析场景，主要包括以下几部分：</p><p>•指标卡：集成指标卡全部功能，并通过对异常指标的特殊标识来达到预警能力</p><p>•流转线：反映指标间的转化关系</p><p>•标题：业务流程的标识</p><p></p><p>主要的实现流程如下：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8a/8a74d1a17deafa763da28ffdbdf181e0.png\" /></p><p></p><p>在具体的技术实现上，针对点、线、卡片的位置计算和绘制，采用了类似杜邦分析的技术思路，前端动态计算节点、链接关系位置，并使用 svg 等前端技术进行渲染。除此之外由于图表结构和逻辑比较复杂，如何设计该图表的配置化方案，成为了另一个技术难点。为此，针对标题部分我们抽离行、列标题组，复用流程标签组件的配置逻辑；针对卡片本身，复用了原先指标卡的配置逻辑；针对指标卡的位置和连接关系，用户能够通过行列坐标的设置和关系绑定来进行细粒度配置，同时为了节省用户的配置成本，组件会在初始化的时候进行默认编排。</p><p></p><p>最终在商家异常全链路监测需求中使用网格指标卡组件，针对 3 个环节、7 个模块、19 类的核心指标与异常类型商家数量，让用户能够从商家经营整体环节通过预警功能进行风险监控和异常定位。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/dd/dd1d634cad319c5753e4acf0cd9e720a.png\" /></p><p></p><p>交叉分析</p><p></p><p>为解决复杂的数据分析场景，创建了一种基于 React 技术自研的交叉分析表格组件，将常见的表格操作与交叉数据分析的思路结合起来：在传统可下钻表格的基础上，创新地抽取分析动作层，能够类比数据分析中的切片、切块和下钻思路，进行数据分析，使用时允许用户在多个合法维度中选择，形成一条自定义下钻路径，成功地实现多种维度下，在表格中进行可下钻的交叉数据分析，满足了多元复杂的数据分析需求。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8c/8c667ff83c1a9b4c91ee2c892fea2028.png\" /></p><p></p><p>具体的实现原理是将表格的上卷下钻逻辑与交叉数据分析逻辑结合起来，这里面的重点处理在于对从调用参数中过滤条件、维度字段和指标字段的进行动态处理，从而实现交叉分析的数据获取查询。首先，对维度字段和指标字段分别进行遍历，能够获取到过滤条件、维度字段和指标字段这三种参数，对于同一个表格来说，数据查询的返回字段是一致的，于是在每一次遍历中，都可以在查询字段结果中增加一项，用于构建最终数据查询的结果集；接下来，从第一步触发下钻的的动作中，获取到父层级的维度信息和具体的值，设置为过滤条件，通过这一步，可以查询出当前父级条件下的数据；接下来，同理如果该维度是子级维度，那么就把该维度条作为聚合维度进行操作；最后，将上述封装好的操作条件，传递给后端进行查询，并将获取到的数据，根据父级指标的维度值，拼接到该项的子节点字段中，这样便语义化的可以了“在父级维度某个维值的过滤条件下，按子级维度聚合的”数据，再整体将最新的数据拼接到的表格数据中，至此便实现了交叉数据分析的分析动作。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6b/6b2958b6d2b35d692c235e924e1ab78e.png\" /></p><p></p><p>自动化分析</p><p></p><p>在沉淀分析可视化组件的同时，也在自动化、智能化的数据分析方面进行探索和建设。其核心思路是，通过贡献度和基尼系数等算法，计算出最需要关注的品牌、品类等，并基于增强分析技术，如洞察文案生成技术和图表标注技术等，自动生成数据报告。</p><p></p><p>同时，基于自动分析结果，还可以进一步通过多因素分析等可视化分析组件进行更深入的探查。基于表格组件，通过组件联动能力，组合多个表格形成联动下钻分析。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/88/88d5bd63fc716bcef479e61743fb47b0.png\" /></p><p></p><p></p><h4>低代码编排</h4><p></p><p></p><p>数据产品页面具有复杂的业务逻辑。一方面页面布局复杂，一个页面可能包含数十种组件，涵盖布局、筛选、可视化等多种组件；另一方面组件间存在大量联动逻辑，如筛选组件间联动、筛选组件和可视化组件联动、可视化组件间的联动以及和外部系统的联动等；此外，业务场景灵活多变，例如在作战单元模式下，Boss、采、销、控等角色数据分析思路均不一致：这些都对编排能力提出了极大的挑战。为解决这个问题，持续调研学习行业先进的低代码技术理论，同时结合数据产品的特性，设计并实现了一整套编排技术方案。</p><p></p><p>首先是自研了基于 MVC 模型的 JMT 状态管理框架，在 redux 的基础上，升级了状态的更新和变化响应机制，支持复杂异步状态管理，以一种通用状态模型支撑了数据产品逻辑的配置化。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ff/ff483124349b2354ded418ebb3a01526.png\" /></p><p></p><p>其次是基于 JMT 组件库自研了可视化编排系统，一方面，通过多种灵活的布局组件，支持复杂页面布局的编排。另一方面，提供了灵活的组件配置面板，除常规样式的编排外，还充分发挥底层数据可视化能力，支持如杜邦分析等指标关系的编排。此外，通过对底层 React 框架的灵活使用，创新组件嵌套机制，支持可视化组件互相嵌入形成联动分析，如在杜邦分析中既展示 GMV 的拆解，也展示 GMV 的达成进度等。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/09/09e50f4edecccd116c587db0e85b2099.png\" /></p><p></p><p>第三是构建数据产品特有的数据集编排系统，支持对数据资产、EasyData 等多种数据源，通过编排维度、指标、过滤构建数据分析模型，并基于图形语法技术将可视化组件和数据服务的 olap 能力做充分打通，实现数据驱动可视化。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ac/ac7a7ae2646965e8f7315cbbb679bacf.png\" /></p><p></p><p>第四是自研了一套代码生成和注入系统。可视化编排和逻辑编排使用一套标准 Schema 进行驱动，在页面发布时，会基于 Schema，结合 React 和 JMT 状态管理，自动生成代码。此外，对于页面中的尚未被组件功能覆盖的个性化逻辑，可以通过代码注入，配合 JMT 函数库快速解决。在百亿补贴等紧急需求中，代码注入功能解决了大量个性化逻辑，在时间紧任务重的情况下，保质保量交付需求。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/55/5559d67aee8f7be686911c861bf3c182.png\" /></p><p></p><p></p><h4>数据推送</h4><p></p><p></p><p>邮件作为现有工作模式下一种不可或缺的通信方式，在邮件里查看看板数据（定时汇总为小时/日/周/月等不同时间粒度），成为诸多用户的强烈诉求。</p><p></p><p>各业务服务调用统一的后端服务创建定时推送任务，任务通过前置配置项检查后，被添加到消费队列中依次处理，处理的产物包括图片、Email HTML、附件等，最终按照用户配置的触发方式推送出去。</p><p></p><p>下图梳理出任务处理的关键流程：素材处理服务（Node）主要承担推送任务消费及提供获取素材的 HTTP 服务两大功能。在任务消费过程中，素材处理服务会模拟用户权限打开浏览器去做页面 Canvas 图像转换、看板截图、PDF 生成等操作。如果触达方式为邮件，则会将所有素材填充生成为 Email Html 文本文件，通过回调返回给后端，推送给用户呈现的内容是数据看板。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d2/d2a9a6a2a8fd02ced83b3d8efcba8c46.png\" /></p><p></p><p>在素材生产过程中，服务通过捕获屏幕快照来实现这一目的。但是某些情况下，比如设备性能较差或者页面进行缩放而 Canvas 图像尺寸没有随之调整时，快照图片会变得模糊。为了解决这个问题，我们直接获取 Canvas 对象。通过 Chrome DevTools 协议，可以将 JS 代码发送到浏览器并在上下文中执行，执行结果会被序列化为 JSON 格式返回给 Node.js 环境，从而达到 Node 服务与 chromium 上下文通信的目的。</p><p>在处理阶段，由于 Canvas 对象是 Web API 的一部分，只能在浏览器环境中使用。而常用的 Node 下操作 Canvas 的工具包几乎都依赖底层的图形库，例如 Cairo 或 Skia 等。这对于开发环境（MacOS）和部署环境（CentOS）不一致的研发来说，调试难度较大。为了解决这个问题，通过 Node.js 环境提供的 Buffer 对象承接 Canvas 对象的 Data URL，配合 JPEG 图像编解码器处理。这样就无需考虑底层图形库的兼容性和安装问题，实现素材图片的顺利生成。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/49/494a281f1f46b49b277ba094cd3f1fb9.png\" /></p><p></p><p>依托于数据推送和低代码能力组合的建设，在 618 大促期间，已将其应用到业务小时报、作战单元日报中，快速实现了基于看板的批量报告功能，帮助 3C、大商超等数据 BP 快速实现面向作战单元的日报和小时报推送，为多场景报告做到了很好的支撑。</p><p></p><h4>移动端能力</h4><p></p><p></p><p>通过复用 PC 端的低代码编排能力，利用 jmtm 基础组件库和 jmtm-charts 图表库，能够快速搭建起移动端的数智化分析功能。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/63/63a5696c42dda9c2cbd014bf1449520f.png\" /></p><p></p><p>针对移动端看数场景，使用自研的主题配置工具：将组件字号、颜色、圆角、尺寸等样式变量化，从而可以根据具体需求进行灵活配置。其中色板变量的引入保证了组件库的底色充足，而公共变量的使用则提高了配置效率。另外我们还引入组件变量，实现个性化的定制需求。支持在线预览和一键发布等功能：用户可以通过在线预览功能，在配置过程中即时查看效果；一键发布功能则可以快速将配置好的主题应用到移动端低代码平台中。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c5/c5c76c95949cfad3d5857fd1ef488e46.png\" /></p><p></p><p>针对移动端的性能优化，通过优化动效的执行时机，将动画交互与耗时的 DOM 渲染分离开来，提高动效的流畅度，减少页面加载时的卡顿感，确保用户能够得到良好的交互体验。</p><p>针对移动端多页面交互场景，创造性的采用类似原生多开 webview 的翻页卡片机制并对多个页面进行缓存处理，使整个应用体验更加接近原生化。基于多人协作及应用的可扩展性考虑，我们借鉴业内成熟的微应用方案，并结合自身需求场景，支持微应用嵌套微应用的方案，为较复杂应用的场景提供了可能。</p><p></p><h4>多端一体建设</h4><p></p><p></p><p>为了提高研发效率并满足用户在不同端的看数需求，我们在 PC 端逻辑编排的基础上引入了 hybrid 概念，使编排引擎可以发布到移动端的多个产品线。在页面打包及部署过程中，使用 webpack 插件 jmtbuild-hybird-plugin，发布为能适配到多端的 js-sdk 资源。最后通过前端微服务平台在对应的容器中加载并展示页面。</p><p></p><p>通过低代码平台生成的标准页面需要在不同的业务端进行展示，在权限方面，针对嵌入到客户端的场景进行了 token 校验，对于浏览器 H5，采用 cookie 解析的方式进行登录校验和数据安全保护。标准页面默认在公司内网进行访问，使用 colorAdapter 适配器函数可以使接口一键转化，接入网关。网关统一接入了神盾、反扒、防刷等功能，保障外网访问的数据和网络安全。</p><p></p><h4>业务贡献和价值</h4><p></p><p></p><p>在研发提效方面：在大促期间 Boss 作战单元的模式下，在战报的应用场景上，通过低代码加数据推送能力的快速整合，在两周内，支持多个部门的报告推送；此外，在百亿补贴重点项目中，面对紧急多变的业务场景，协同业务团队通过低代码线上配置化+二次开发的方式，2 周内交付 5 个看板、2 个大屏，80%的需求在 24 小时内交付。</p><p></p><p>在创新业务支持方面：业务对体系化看数需求强烈，期望使用移动端查看业绩达成情况。通过移动端低代码能力，仅用 1 个产品经理、4 个数据研发短时间内从 0 到 1 打造出一个基于低代码的黄金眼移动端应用，快速解决业务移动端看数的诉求。</p><p></p><p>此外，随着零售架构扁平调整，Boss 单元需要更高效的数字化决策工具，自动化分析能力也得到了充分的应用：基于丰富的可视化组件和低代码编排能力，结合后端的智能化算法，快速打造零售自动化分析看板，应用于每日的经营过程控制中，将诊断提前至每天的工作中，以提高发现问题和解决问题时效。</p><p></p><p>展望未来，我们会持续打磨现有能力，并不断结合新的业务场景和行业调研，沉淀新的数据可视化分析能力。首先在智能化方向上，会基于图形语法的可视化理论，并整合 AI 等能力，建设增强分析能力，打造增强图表和自动化报表，实现自动洞察数据关联、异常及趋势等，将数据分析从描述性分析跃升到预测性分析和决策性分析；同时在质量体系建设方面，会从监控预警、代码质量等方向持续建设，在不断提升交付效率的同时持续提升交付质量：最终期望能够通过数据分析技术能力的综合运用，降低研发成本，提升研发效率，完善用户体验，高效推进人人都是分析师的战略落地。</p><p></p><h2>4、数据智能篇-- 基于大模型的智能化应用</h2><p></p><p></p><h4>背景与挑战</h4><p></p><p></p><p>目前，数据分析服务主要通过数据产品、BI 工具和配备数据分析师等方式来支持，在数据响应效率、分析能力应用的广度、深度和频率等方面各有不足，但业务时常需要通过数据驱动决策，就出现了数据获取难、数据分析难等用户痛点。大模型在数据消费领域的应用，为用户痛点的解决带来了新的思路。</p><p></p><h4>基于 LLM 的解决方案</h4><p></p><p></p><p>对于京东复杂的业务和数据体系，大模型在数据服务领域的应用很有价值，同时也面临着挑战。当前的架构设计充分考虑了已具备的底层数据服务能力，结合 LLM 实体识别、上下文推理、决策辅助能力将用户查询与复杂数据集的相关指标匹配，实现快速准确的数据查询。通过 NER 识别将用户的筛选条件、查询指标、聚合方式抽取出来，利用 Norm(归一化)把实体转换成标准数据服务的调用参数，并且构建索引将归一化依赖的数据资产进行存储，来实现自然语言查询准确数据的全链路，与此同时，建立完善的评估体系、利用本地模型优化等机制，不断提升应答准确率，为用户带来更优质的使用体验。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/66/6630a0833e993b1e1f598c3579a5f608.png\" /></p><p></p><p></p><h4>基于业务知识和数据知识的 Prompt 工程</h4><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/15/15040ce917e1c4885e0bb88e687b35ef.jpeg?x-oss-process=image%2Fresize%2Cp_80%2Fauto-orient%2C1\" /></p><p></p><p></p><h4>Prompt 工程建设</h4><p></p><p></p><p>•目标确认：针对用户对数据的诉求，整理用户问题确定输入数据，基于不同任务目标确认不同输出格式，如实体识别输出标准格式的{实体类别：实体名称}，指令生成输出标准格式的{分析能力：分析指令}等。</p><p>•工程建设：确认目标后，从环境预设、指令描述、输出规范等角度生成规范 Prompt，不断微调输入结合业务知识的个性化案例。并通过中英互译、预设负样本、增设输出校验和边际检验、动态 Prompt 生成等方案优化，兼顾时效性的同时，提高输出结果的稳定性和准确性。</p><p></p><h4>准确率提升</h4><p></p><p></p><p>模块归一化模块会把实体转成数据服务支持的参数值，难点在于区分出相同名称或者相似名称， 为用户匹配出最符合用户需求的结果，包括指标、筛选条件、聚合维度等实体的转化，具体思路可以拆解成以下步骤：</p><p></p><p>•精确匹配：入参类型、指标名称或 id、用户权限多维度叠加判断得到精准结果；</p><p>•相似性匹配，在精准匹配没有结果之后，使用大模型对实体进行 embedding 操作，从库里查询出相似度最高的结果；</p><p>•建立索引：对实体建立别名层，满足用户个人习惯，如部门的简称、指标的别名，来提升识别准确率；</p><p>•用户行为数据辅助：通过用户在数据产品、数据工具等系统的行为数据，生成用户对指标、筛选条件、聚合维度的偏好数据，辅助提升准确率。</p><p></p><h4>评测体系</h4><p></p><p></p><p>数据服务场景对准确率要求较高，同时数据指标相似度、数据口径复杂等实际情况对大模型的准确率有较高挑战，如何保障回答的准确性是产品设计之初就重点考虑的问题。目前通过周期性大样本量评测集生成、检验，以及线上监控的组合方式来保障。</p><p></p><p>•样本设置：采用人工样本和大模型生成样本结合的方式，快速、多频次对不同句式、不同场景的问答（1000+）做评测，来保障样本的多样性和丰富度。</p><p>•准确率测评：通过批量调用接口返回大模型结果，离线代码支持批量结果自动化比对，从而高效输出任务的准确率、时效性等指标，同时同一批样本会多次调用来评估任务的稳定性。</p><p>•构建产品功能：用户可以在答案上点赞或点踩来反馈满意度，产品侧持续针对用户反馈问题进行阶段性优化。</p><p></p><h4>本地大模型 SFT</h4><p></p><p></p><p>基于 LLM 对 prompt 工程输入 token 数量的限制及数据隐私安全的考量，我们也选用本地大模型进行 Fine-tuning。它涉及在一个预训练模型的基础上进行额外训练，以使其更好地适应特定的任务场景，实现准确率提升和影响时长降低，具有很好的效果。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/29/294d60143fdd49876b772543a9ccb2bf.jpeg?x-oss-process=image%2Fresize%2Cp_80%2Fauto-orient%2C1\" /></p><p></p><p></p><h4>指标查询场景</h4><p></p><p></p><p>在指标查询场景中，用户的提问方式具有高度多样性，同时，影响查询结果的关键因素也呈现出复杂的组合形态。为了提升查询效率和准确性，建立京东专属的业务域知识库来支持样本的批量生成</p><p>•按场景构建多样化问题库，如单/多指标查询、分维度查询、维度 id 和 name 查询、排序查询等</p><p>•按查询因素构建变量知识库，建立时间、指标、维度、筛选条件知识库，方便后续新增场景的快速扩充</p><p>模型训练前后准确率对比提升明显</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/31/31debb04fa3310e25ea22eb76c96707f.png\" /></p><p></p><p></p><h4>数据分析场景</h4><p></p><p></p><p>本地大模型可支持数据交互，解决数据在传输过程中可能遭遇的安全风险和隐私泄露问题。通过问题引导，降低用户的使用成本，使用户能够智能化分析。通过用户数据查询的当前表现，由大模型提供\"分析线索\"引导用户进一步分析下探，线索包括：</p><p>•描述性分析，如销量达成情况、趋势分析、摘要总结</p><p>•探索性分析，如维度拆解、相关性指标推荐、异常值识别等</p><p></p><h4>业务价值评估</h4><p></p><p></p><p>•数据查询提效：通过自然语言对话，完成快速数据指标查询，单次查询时效降至 7.8 秒，大大降低用户数据获取的时间，并且很好的支持了用户个性化需求的满足</p><p>•数据分析赋能：依托丰富指标维度数据，通过思维链实现自动化数据分析，并依据用户的习惯喜好等选择更贴合的数据路径，非“分析师”角色用户轻松实现多场景的快速智能分析</p><p>•数据消费拓展：通过产品赋能，为每一个用户配置一个专属的 AI 数据分析师，可以扩大数据消费用户的规模，并且大幅提升数据消费的能力，支持业务应用数据驱动决策</p>",
    "publish_time": "2024-03-01 11:54:42",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "端智能：面向手机计算环境的端云协同 AI 技术创新",
    "url": "https://www.infoq.cn/article/86TtlGtiB3Bk3AFlIxAs",
    "summary": "<p>近年来，随着移动端设备软硬件能力的进步，移动端的算力有了很大提升，同时面向移动端的机器学习框架和模型轻量化技术越来越成熟，端上的 AI 能力逐渐进入大众视野，端智能在电商领域也开始逐步走向规模化应用。通过持续探索，京东零售技数中心团队创新突破了端侧高性能推理引擎、端侧模型分发、异构环境及复杂任务兼容等技术卡点，完成了多个业务应用和落地，并获得信通院边缘计算产业全景图行业认证。目前，<a href=\"https://www.infoq.cn/article/Idl1P18pvSSWDqtZ2mHc?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">京东</a>\"众多业务已集成至端智能 SDK，流量分发、图像识别等算法场景运行情况良好，日推理计算量已经达数亿次，为用户带来了更好的购物体验。</p><p></p><p></p><h2>1、什么是端智能</h2><p></p><p></p><p>目前，大多数的模型服务主要基于云服务端进行计算。模型的训练和推理都在云端，使用时移动端用户通过向云服务器发送请求，包含用户的原始数据。云服务器在接收到请求后，进行数据预处理和推理计算等操作，并将结果返回给移动端用户。<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA%3D%3D&amp;chksm=8863860cbf140f1add1f86fab6267b28e0173350e571ac7192f9a794e2526cadf6dab765d8e2&amp;idx=1&amp;mid=2650240867&amp;scene=27&amp;sn=d56fceac5b343ccc4a90cd422c490df0&amp;utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search#wechat_redirect\">云服务器</a>\"承担了几乎所有的计算负载，而移动端仅作为用户交互的界面。所以云端智能面临着一些瓶颈，包括高延迟、高成本，以及隐私安全风险。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e2/e2006221674bcb93ef84ed744d320287.png\" /></p><p></p><p>为了打破云端智能的瓶颈，端智能应运而生。<a href=\"https://xie.infoq.cn/article/9acbe1d77b1f4bbe5bd5582ff?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">端智能</a>\"技术是将模型推理计算过程迁移至移动端，供移动端直接调用。使用时用户在端上触发推理计算，将原始数据给到模型进行特征加工和推理计算，最后将结果返回给用户。相比云端智能，端智能有三大优势：</p><p></p><p>实时性高：端上实时响应用户请求，为用户提供实时 AI 反馈，提升用户体验；</p><p></p><p>隐私合规性强：端上数据端上消费，无需上传云端，隐私合规性强；</p><p></p><p>具备离线服务能力：推理服务无需请求云端，在无网或者弱网环境下也可以使用；</p><p></p><p></p><h2>2、问题与挑战</h2><p></p><p></p><p>受限于移动端设备的性能和多样性，在移动端设备上部署端智能并非易事，在端智能开发过程中，遇到了各种挑战，这些挑战会一直伴随着端智能开发过程，需要一直去优化解决，才能将端智能的体验做到极致。</p><p></p><p>计算性能</p><p></p><p>由于使用移动设备的计算资源有限，要兼顾用户体验与计算效率的平衡，需要针对移动端设备 的 CPU/GPU 使用率、内存使用率、耗电量、数据获取、任务调度等影响推理耗时的问题进行持续优化。</p><p></p><p>灵活性</p><p></p><p>业务算法模型确定后，其输入输出就得遵循固定的格式。不同端智能应用场景需要的模型和特征数据处理格式存在着较大的差异，如果想调整就需要改客户端逻辑，功能验证和迭代效率受到极大的限制。如何在不发版的情况下解决不同业务场景需求，也是需要优先解决的问题。</p><p></p><p>稳定性</p><p></p><p>端智能需要在客户端进行数据的收集、存储、处理，推理任务的管理与调度，推理引擎和操作系统的兼容等处理，这些环节均可能引起 APP 的崩溃。作为一家客户为先的公司，因为端智能的不稳定性导致影响用户体验，这是不被允许的，如何在复杂的端上环境做到零崩溃是非常大的挑战。</p><p></p><p>安全性</p><p></p><p>端上存在大量的数据，端智能的数据处理逻辑和推理逻辑都是在端上进行，防止数据泄露、数据篡改、保证数据的隐私合规是非常重要的。</p><p></p><p></p><h2>3、京东端智能系统架构</h2><p></p><p></p><p>京东零售端智能系统整体系统架构设计如下：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ce/ce781e07a11ca029bad7acc4d6fbd999.png\" /></p><p></p><p>京东端智能系统架构遵循通用性和可规模化应用的设计原则，主要为云-边-端三层，分别对应着算法模型的生产、部署和执行三个环节。</p><p></p><p>云对应的是由京东零售-技术研发与数据中心研发的九数算法中台，负责模型训练、模型编译、模型调试。端智能模型生产和训练在云端进行，在九数算法中台训练好模型后，需要对模型进行裁剪和压缩，实现模型的轻量化，再对轻量化的模型进行编译转换，以生成在端上可执行的模型文件。</p><p></p><p>边对应的是由京东零售-技术研发与数据中心研发的端智能平台，负责模型的管理和模型部署分发。端智能管理平台提供了业务接入、模型管理、配置管理、模型部署、模型分发等一系列的框架能力。端智能平台模型支持 A/B Test，以验证算法策略的效果；同时支持分级部署，针对不同机型部署不同的算法模型。</p><p></p><p>端对应端智能 SDK，负责端上用户行为感知、数据加工，以及推理任务的调度和计算。端智能 SDK 包含数据管道和基础容器两部分，数据管道负责端上用户行为感知、数据加工、数据存储和数据上报，为端智能推理提供原始数据和特征数据，基础容器为端智能算法模型提供了端上的运行环境，支持不同推理任务并行处理，让端上推理计算高效地运转起来。</p><p></p><p></p><h2>4、主要工作</h2><p></p><p></p><p></p><h4>4.1 超实时端数据流处理</h4><p></p><p></p><p></p><h4>数据存储</h4><p></p><p></p><p>端上的数据存储高性能移动端数据库，支持数据加密，支持并发数据读写，满足端上数据的安全要求和高频数据读写。</p><p></p><p>端上数据的存储和获取作为推理计算的前置环节，如果耗时偏高必然会增加整个端智能推理的耗时。为了最大提升数据库的性能，前置了数据库路由，根据数据类型，需要加密的数据会存储到加密数据库，不需要加密的数据会存储到非加密数据库，数据库设计上采用单库单表的设计模型，可以减少单个数据库文件的大小，降低文件锁的竞争概率，提高并发性能。同时引入了数据库的自管理机制，长时间不被使用的旧数据会被删除，降低数据库存储量，提升数据库的读写性能。</p><p></p><p></p><h4>数据处理</h4><p></p><p></p><p>端上用户的原始行为通常不能直接作为模型输入进行计算，京东搭建了一套数据流框架，用来进行模型特征生产和特征计算。端侧模型用到的数据源大致可分为 3 类：云端下发、端侧批量存储数据、端侧实时行为感知。云端下发是通过请求后端服务获取到的，通常会在云端处理好，APP 内无需额外的处理，可以直接使用。端侧批量存储数据指对不会实时发生变化的数据进行定期存储更新，端侧实时行为感知指用户在使用 APP 过程中的实时行为，经过加工处理后再进入模型计算。</p><p></p><p>端侧批量存储数据采用非实时批量处理模式，使用数据库 SQL 能力进行粗粒度加工，也可以在 Python 脚本中执行个性化处理逻辑。端侧实时行为感知采用实时计算的模式，实时对用户行为进行过滤、规则匹配、关联聚合等操作，生产为模型输入需要的特征数据。生产好的特征会再进一步经过特征计算，包括离散特征编码、连续特征归一化等操作，计算好的特征即可输入模型进行推理计算。</p><p></p><p></p><h4>4.2 高效端事件触发和调度</h4><p></p><p></p><p>基础容器为端智能提供轻量化、高性能的执行环境，同时支持模型频繁的实验和部署，支持端智能在不同设备上高效运行。当算法模型下发到移动端设备后，触发推理计算有两种方式：API 触发和事件触发。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/13/13200188fe91fbc2d99afc9012c39a83.png\" /></p><p></p><p>API 触发： 算法工程师通过调用端智能提供的推理触发 API 进行触发，调用方式如代码示例如下。API 使用 Router 协议，使用时传入 systemCode 和 businessCode 业务标识，支持自定义输入数据，在回调方法中获取推理计算结果。</p><p></p><p>JDRouter.to(\"JDEdgeAI\", \"infer\").putString(\"systemCode\", \"xxx\").putString(\"businessCode\", \"xxx\").extraObject(\"extData\",HashMap).callBackListener(new CallBackWithReturnListener() {@Overridepublic void onComplete(Object value) {android.util.Log.d(TAG, \"onCompleteWithValue \" + value.toString());}</p><p></p><p><code lang=\"text\">        @Override\n        public void onComplete() {\n            android.util.Log.d(TAG, \"onComplete\");\n        }\n\n        @Override\n        public void onError(int errorCode) {\n            android.util.Log.d(TAG, \"onError errorCode = \" + errorCode);\n        }\n    }).jump(this.getContext());\n</code></p><p></p><p>事件触发： 算法工程师可以在算法模型资源包中配置需要触发推理计算的埋点事件 ID，当基础容器监测到有对应的埋点事件时，则会触发推理计算执行。基础容器中的功能均已任务化，事件触发的方式不仅可以触发模型推理，也可以触发特征数据计算、模型预加载等操作。触发配置如下所示，taskName 是任务类型，events 是任务触发的事件。</p><p><code lang=\"text\">{\n  \"triggers\": [\n    {\n      \"taskName\": \"InferTask\",\n      \"events\": [\n        {\n          \"type\": \"mta\",\n          \"pageId\": \"JD_XXXX\",\n          \"needPv\": false,\n          \"clickIds\": [\n            \"JD_XXXX\",\n          ]\n        }\n      ]\n    },\n    {\n      \"taskName\": \"CalcTask\",\n      \"events\": [\n        {\n          \"type\": \"mta\",\n          \"pageId\": \"JD_XXXX\",\n          \"needPv\": false,\n          \"clickIds\": [\n            \"JD_XXXX\",\n            \"JD_XXXX\"\n          ]\n        }\n      ]\n    }\n  ]\n}\n</code></p><p></p><p>触发器每触发一次即创建一个任务，基础容器内部的任务调度模块会对任务进行统一的编排与处理。一次推理过程会产生多个任务，每个任务都包含唯一 ID、前置依赖、任务优先级、后置依赖等属性。</p><p></p><p>为了高效执行任务，降低推理计算耗时，京东采用多任务队列，按任务优先级并行执行的策略。基础容器内部预置了三个任务队列，分别核心任务队列、常规任务队列、低优任务队列，按照任务类型分别放入对应的任务队列中，每个任务队列都有自己的执行线程，执行线程会轮询执行任务队列中的任务，直到产生推理计算结果，本次推理任务链路结束。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d3/d32e52b8e3a32a270af91c39df8c1ffa.png\" /></p><p>\n为了使任务调度执行频率更高，执行速度更快，京东支持了多种能力：</p><p></p><p>高并发： 支持多任务并发、多线程调度的任务管理模式；</p><p></p><p>优先调度： 支持设置任务优先级，保证高优任务优先执行；</p><p></p><p>熔断保护： 对于连续 N 次运行失败或者崩溃，会暂时阻止其运行；</p><p></p><p>防卡死： 推理链路某环节超时，会立即停止当前任务。</p><p></p><p>基础容器为每一个任务提供独立的运行环境，并通过对外提供 API 来进行模型推理等。基础容器还对推理流程和任务链路进行了高度的抽象，最大程度上的满足了不同算法场景的使用需求。</p><p></p><p></p><h4>4.3 高兼容性 PythonVM 端计算容器</h4><p></p><p></p><p>为了在端侧 APP 满足算法模型快速迭代的需求，同时降低算法工程师参与 APP 移动端开发的门槛，我们上线了 Python VM 的计算容器。Python VM 容器提供了一定的动态执行的能力，在不依赖 APP 发版的情况下，可以随时更新由 Python 编写的 AI 算法服务逻辑，调整业务策略，优化业务效果。</p><p></p><p>选用 Python 语言主要考量其与 AI 技术栈的契合，Python 是算法工程师最熟悉和熟练使用的语言。算法工程师在训练好模型以后，将整个模型服务逻辑通过 Python 脚本部署在 APP 中，无需使用 JAVA、Object-C 等 APP 开发语言，显著提升算法开发效率。此外，Python VM 与原生 APP 开发环境解耦的方式，使得我们可以在安卓、iOS 双端使用同一套方案，无需分别兼容和适配。将 Python VM 集成至 APP 中，我们针对性地解决了以下 3 个问题：</p><p></p><p>包体积缩减：只保留了 Python 核心执行器功能，非核心的三方库也做了裁剪，编译功能前置至云端完成，移动端直接执行字节码；</p><p></p><p>字节码加密：对动态下发的字节码采用自定义加密，防止下发过程中被篡改，保障安全；</p><p></p><p>线程级并行：移除 GIL 锁的限制，在 APP 单进程环境内，使用多个线程并行执行多个任务。</p><p></p><p></p><h4>4.4 高性能端推理引擎</h4><p></p><p></p><p>AI 模型对计算和存储资源都有较高的要求，因此，高性能推理引擎是 AI 模型能在手机侧运行的核心要素。端侧推理引擎的架构与云侧推理框架整体类似，包括计算图、算子的抽象等。但由于移动端资源受限，一方面对引擎包体积有一定约束，端侧推理引擎的算子种类需要尽量收敛，实现原子算子，通过原子算子组合出高阶功能算子。另一方面，移动端设备硬件差异性较大，CPU、GPU、NPU 都包含多种型号，推理引擎需要兼容各类设备。在这些通用能力之外，为了保障复杂模型性能，我们重点优化了以下 2 个维度：</p><p></p><p>算子内核：针对热点算子及部分算子的低精度实现，定向分析性能瓶颈，利用向量化指令优化内核实现，提升算子性能。</p><p></p><p>多硬件混合调度：将模型计算图拆分为多个子图，不同子图可拆分至 CPU、GPU、NPU 多种硬件分别执行，建模寻优最佳拆图方案，充分挖掘利用所有硬件的算力；</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2e/2ee50e33e9323fa7c757dc57eab7800f.png\" /></p><p></p><p>此外，为了支持原生 APP 之外的场景，例如 H5 页面、小程序等场景，我们还拓展了 JavaScript 版本的推理引擎。JavaScript 引擎提供与原生 APP 一致的计算接口，在 JS 环境中自闭环使用，是一套更为轻量和灵活的解决方案。</p><p></p><p></p><h2>5、业务实践</h2><p></p><p></p><p>端智能技术目前已经在京东流量分发、图像识别等多种算法业务场景落地。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/61/6141002f3a8c49231f5e3abab15dd747.png\" /></p><p></p><p>流量分发：通过用户实时浏览行为，理解用户意图，增强实时商品分发效果，提升用户购物体验。</p><p></p><p>图像识别：端上实时识别用户拍摄图片的合规性，降低算法计算延时，提升实时识别效果。</p><p></p><p>由于数据与模型的计算均发生在端上，不依赖网络，没有网络延迟。因此端智能相比云端智能的耗时有显著的降低，推理效率有数十倍的提升。通过实践发现对于实时性要求高，计算相对简单的场景适合端上执行。</p><p></p><p></p><h2>6、总结与展望</h2><p></p><p></p><p>端智能建设过程围绕计算性能、灵活性、稳定性、安全性展开，动态预加载、任务调度、高性能数据存取提升了推理链路性能，模型动态下发、策略配置、数据动态处理为端智能业务开发带来充足的灵活性，异常监控、控制开关、兼容处理保证了端智能在线上运行的稳定性，加密传输，隐私合规为端智能提供了安全性保障。目前，京东众多业务已集成至端智能 SDK，流量分发、图像识别等算法场景运行情况良好，日推理计算量已经达数亿次，为用户带来了更好的购物体验。</p><p></p><p>端智能的出现，弥补了云端智能在网络延时、数据丰富、隐私安全、算力成本方面的不足，但是端智能与云智能本身就不是割裂的技术体系，而是相辅相成的，未来端上模型可以作为云端模型的子模型进行前置推理，端上运行小模型，云端运行大模型，更好地提升推理效果和速度。</p><p></p><p>端智能未来的建设方向：</p><p></p><p>平台能力建设： 随着算法场景复杂性的增加，开发效率将受到影响。端智能团队将通过平台能力建设，提供开发、调试工具，提升算法工程师的模型开发、上线效率。</p><p></p><p>多端场景覆盖： 京东中存在大量的 H5、小程序等场景，端智能后续将在多端进行落地，算法能力将覆盖移动端全场景。</p><p></p><p>算法场景扩展： 端智能团队致力于在端上覆盖流量分发、CV、NLP 等多算法场景，将更多云端算法模型迁移至移动端前置计算。</p>",
    "publish_time": "2024-03-01 11:54:45",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]