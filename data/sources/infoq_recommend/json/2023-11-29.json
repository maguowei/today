[
  {
    "title": "微软更新其Well-Architected框架",
    "url": "https://www.infoq.cn/article/zJqBVpZMmwo8viWXFcpu",
    "summary": "<p>微软最近宣布全面更新用于在Azure上设计和运行优化工作负载的<a href=\"https://learn.microsoft.com/en-us/azure/well-architected/\">Well-Architected框架（Well-Architected Framework，WAF）</a>\"。</p><p>&nbsp;</p><p>微软的WAF是一套质量驱动原则、架构决策点和审查工具，其目标是帮助解决方案架构师为其工作负载建立技术基础。此次更新不仅为用户工作负载的架构权衡提供了指导，而且还就如何在组织范围内实施这一指导提供了更精确的说明。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/bf/bf38cd49b568bfd5c0488376d468d94a.png\" /></p><p></p><p>Well-Architected框架的更新概述（图片来源：<a href=\"https://learn.microsoft.com/en-us/azure/well-architected/\">微软网站</a>\"）</p><p>&nbsp;</p><p>微软公司的副总裁<a href=\"https://www.linkedin.com/in/ulrichhomann/\">Uli Homann</a>\"这样写道：</p><p></p><blockquote>在过去的六个月中，微软的云解决方案架构师通过整理10000多个利用WAF及其评估的项目所得到经验和教训，更新了Well-Architected框架。现在，Well-Architected框架的所有五大支柱都采用了通用的结构，均由设计原则、设计审查清单、权衡、建议指南和云设计模式组成。</blockquote><p></p><p>&nbsp;</p><p>设计原则提出了面向目标的原则，为工作负载奠定了基础；设计审查清单粗略定义了已成文的建议，以便于推动行动的开展；权衡描述了与其他支柱之前的取舍。同时，建议指南是与一个或多个设计审查清单相关联的，而云设计模式则提供了经过验证的通用架构模式。</p><p>&nbsp;</p><p>此次更新尤其关注作为“<a href=\"https://learn.microsoft.com/en-us/assessments/azure-architecture-review/\">Well-Architected审查评估</a>\"”一部分的“核心Well-Architected审查”，现在它与Well-Architected框架中的新内容保持一致。此外，正如<a href=\"https://learn.microsoft.com/en-us/azure/well-architected/whats-new#well-architected-framework-assessments\">文档</a>\"所述，每个支柱中的每个问题都与该支柱的设计审查清单相对应。所有问题的选项都与相关检查清单条目的推荐指南相关联。</p><p>&nbsp;</p><p>微软架构内容负责人<a href=\"https://www.linkedin.com/in/stephen-t-sumner/\">Stephen Sumner</a>\"在一篇Azure的架构博客中解释说：</p><p></p><blockquote>评估更新以通用工作负载设计的最佳实践为目标。你可以在任何平台的任何工作负载上运行评估，而不仅仅是Azure中的工作负载。评估在更深的技术层面涵盖了工作负载的更多方面。</blockquote><p></p><p>而且：</p><p></p><blockquote>相对于上一版的评估，它增加了20多条建议（总计375条），但是它也减少了124个选项。这意味着你只需更少的输入，就能获得更具针对性的指导。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4a/4ade9d6239caccdf2b0a2f51a9d10630.png\" /></p><p></p><p>Well-Architected评估的样例（图片来源：<a href=\"https://techcommunity.microsoft.com/t5/azure-architecture-blog/azure-well-architected-review-assessment-updates/ba-p/3981023\">微软架构博客</a>\")</p><p>&nbsp;</p><p>另外的两大云提供商AWS和Google也通过Well-Architected框架为其平台提供指导。此外，AWS最近<a href=\"https://www.infoq.com/news/2023/04/aws-well-architected-framework/\">更新</a>\"并<a href=\"https://www.infoq.com/news/2023/11/aws-well-architected-framework/\">重构</a>\"了其<a href=\"https://aws.amazon.com/architecture/well-architected/\">Well-Architected框架</a>\"。</p><p>&nbsp;</p><p>最后，你可以通过名为“Well-Architected框架的新变化”的<a href=\"https://www.youtube.com/watch?v=XV_E4WtqNrE\">视频</a>\"了解有关更新的更多详情。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/11/azure-well-architected-framework/\">Microsoft Refreshes Its Well-Architected Framework</a>\"</p>",
    "publish_time": "2023-11-29 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "全方位深度测评 AI 代码助手 Amazon CodeWhisperer",
    "url": "https://www.infoq.cn/article/W5RzCzfZ6imJQrCk2lW9",
    "summary": "<p></p><h3>背景</h3><p></p><p></p><p>随着互联网技术的不断发展，<a href=\"https://so.csdn.net/so/search?q=%E7%A8%8B%E5%BA%8F%E5%91%98&amp;spm=1001.2101.3001.7020\">程序员</a>\"们面临着越来越多的挑战，如代码复杂度不断提高、代码错误难以避免、团队协作效率低下等。传统的开发工具已经无法满足程序员们的需求，因此这几年基于人工智能技术的代码助手应运而生。AI代码助手的目的是通过自动化的方式帮助程序员提高开发效率、减少错误、提高代码质量，同时还可以帮助程序员快速学习新技术、更快，更安全地构建应用程序，提高团队协作效率。可以说AI代码助手成为当今软件开发领域的重要趋势之一。本篇文章就来深度测评一下AI 代码助手&nbsp;<a href=\"https://aws.amazon.com/cn/codewhisperer/?trk=cndc-detail\">Amazon CodeWhisperer</a>\"。</p><p></p><h3><a href=\"https://aws.amazon.com/cn/codewhisperer/?trk=cndc-detail\">Amazon CodeWhisperer 介绍</a>\"</h3><p></p><p></p><p>Amazon CodeWhisperer&nbsp;是亚马逊云科技推出的AI代码助手，目的是帮助开发者更快，更安全地构建应用程序。作为智能编程助手，它经过了非常多的优秀开源代码训练，参与训练的代码都是具有良好的扩展性，安全性，优雅等特点，利用它编写的代码能够很快地写出健壮，优雅，具有很高扩展性的代码。 此外它还可以扫描代码来检测难以发现的漏洞，获取代码建议来立即修复漏洞。总的来说它具有以下特性：</p><p></p><h4>特性</h4><p></p><p>实时生成代码片段或全函数的代码建议获取相关开源项目的存储库信息扫描代码漏洞，给出修复建议支持 Python，Java，JavaScript 等15中编程语言支持 VS Code，IntelliJ IDEA，Amazon Cloud9、Amazon Lambda 控制台、JupyterLab 和 Amazon SageMaker Studio 等集成开发环境</p><p>以上就是&nbsp;<a href=\"https://aws.amazon.com/cn/codewhisperer/?trk=cndc-detail\">Amazon CodeWhisperer</a>\"&nbsp;的介绍，下面进入正在的测评阶段。</p><p></p><p>主要从以下几方面进行测评：</p><p>用户体验 （包括，安装，配置，文档资料）功能使用（包括，上手难度，使用复杂度，安全，准确度）场景实践（以具体业务场景体验功能）</p><p>安装，配置也是测评的一部分，下面就从最开始的安装开始体验。</p><p></p><h3>安装配置&nbsp;<a href=\"https://aws.amazon.com/cn/codewhisperer/?trk=cndc-detail\">Amazon CodeWhisperer</a>\"</h3><p></p><p></p><p>本次安装使用的在 Windows 10 的 VS Code 上进行的。作为 AI 智能代码助手，它是以 IDE 插件的方式存在的。这样能够很好地与 IDE 相关功能无缝结合。提升开发效率，增强用户体验。</p><p>打开 VS Code，在插件列表中搜索&nbsp;&nbsp;Amazon Toolkit</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f6/f6001aab889f12da44c240e236b393a0.png\" /></p><p></p><p>找到名称为&nbsp;Amazon Toolkit&nbsp;的插件，点击 Install 按钮进行安装。有时安装后，需要重载一下 VS Code 才能用。</p><p></p><p>笔者写这篇文章时，Amazon Toolkit 最新的版本是&nbsp;1.91.0，如果有读者安装的与笔者的功能不同，请检查下版本是否一致。以下是该插件的一些基本信息：</p><p></p><p>版本：1.91.0</p><p>下载次数：1,663,326</p><p>Git仓库：<a href=\"https://github.com/aws/aws-toolkit-vscode\">amazon-toolkit-vscode</a>\"</p><p>插件地址：<a href=\"https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.aws-toolkit-vscode\">Amazon Toolkit</a>\"</p><p>开源协议：<a href=\"https://marketplace.visualstudio.com/items/AmazonWebServices.aws-toolkit-vscode/license\">Apache License Version 2.0</a>\"</p><p>从下载次数来看，Amazon Toolkit 是一个非常受欢迎的插件。</p><p></p><p>在安装完成后，你可以在左侧的侧边栏，看到一个 Amazon 的图标，点击它就会出现插件的面板。如下：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/cf/cf5282612c54c8bbfe19fc90a4330893.png\" /></p><p></p><p>该插件主要包括三种功能：</p><p>Amazon CodeCatalyst 统一的软件开发服务，可在 Amazon 上快速构建和交付应用程序。CDK 云应用程序资源<a href=\"https://aws.amazon.com/cn/codewhisperer/?trk=cndc-detail\">Amazon CodeWhisperer</a>\"&nbsp;智能代码助手。</p><p></p><p>要使用这些功能，需要用户先连接 Amazon 服务。</p><p>当我们需要使用&nbsp;<a href=\"https://aws.amazon.com/cn/codewhisperer/?trk=cndc-detail\">Amazon CodeWhisperer</a>\"， 只需要点击 CodeWhisperer 下的 Star 按钮，然后再点击 Sign in 按钮，如下图：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1e/1eef9b4b08c3caf3531f5de0359ea4ef.png\" /></p><p></p><p>如果你没有 Amazon 账号，也没关系，点击按钮后，会弹出一个重定向弹窗，点击 Proceed To Brower，使用浏览器继续。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0d/0dfbfdcf8bf635a46abd91a6d1c87101.png\" /></p><p></p><p>点击按钮会 页面显示大致如下</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/38/38a25646300243dc95df751500b13575.png\" /></p><p></p><p>点击确认并继续</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/00/001bf944dc6ac743c9447bda273ba7d3.png\" /></p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/af/af604608b158437bc40c52737e655a4b.png\" /></p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0d/0d1b5f33d305b5bcc8814fb78275e49d.png\" /></p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/22/22751317effcc0fd3da7517310242f5b.png\" /></p><p></p><p>总体步骤就是，输入邮箱，姓名 → 验证邮箱 → 填写密码 → 允许 Amazon Toolkit 访问数据</p><p>整体流程非常顺畅，安装，配置三分钟内就能完成。</p><p>授权后，插件就开始工作了。我们也可以开始愉快地工作了。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/04/049a734c47975b7b61254a680a2ea7a7.png\" /></p><p></p><p>此外值得一提的是，该插件还提供了一种专业版的功能，不过要配置 IAM 身份中心，这部分我们暂时不表。</p><p></p><p>在安装并配置&nbsp;<a href=\"https://aws.amazon.com/cn/codewhisperer/?trk=cndc-detail\">Amazon CodeWhisperer</a>\"&nbsp;后，在编码时会自动开启代码建议。同时你也可以收到去获取代码建议。在 Windows 平台的 VS Code 上，使用 Alt + C 键，使用 Tab 键来插入当前的建议代码块。使用左右键来切换代码块。</p><p></p><h3>具体场景</h3><p></p><p></p><p>下面我们在具体的场景中来体验&nbsp;<a href=\"https://aws.amazon.com/cn/codewhisperer/?trk=cndc-detail\">Amazon CodeWhisperer</a>\"。</p><p></p><h4>使用&nbsp;<a href=\"https://aws.amazon.com/cn/codewhisperer/?trk=cndc-detail\">Code Whisperer</a>\"&nbsp;开发数据可视化图表</h4><p></p><p></p><p>场景一：作为一名前端开发者，我们经常会遇到使用图表库开发一些可视化的图表，比如使用 Echarts 来开发一个折线图。</p><p></p><p>我们创建一个简单的 html，在页面内写入必要的信息，并在 script 标签中写入注释：</p><p></p><p><code lang=\"text\"></code></p><p></p><p>然后按下 Alt + C 键，这时在 VS Code 会调出，html is currently not supported by CodeWhisperer。</p><p>如下图：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f2/f2da98c8bac8acc7f71497714af82c2d.png\" /></p><p></p><p>目前&nbsp;<a href=\"https://aws.amazon.com/cn/codewhisperer/?trk=cndc-detail\">CodeWhisperer</a>\"&nbsp;还不支持 html 文件的代码建议。所以我们需要先创建一个 js，然后在 html 文件中引入。</p><p></p><p>我们在 js 文件中，使用注释写下需要实现的功能，然后按下 Alt + C 键。就会出现如下图：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/71/716980467f988fd2dcdacba2d6a3d3bf.png\" /></p><p></p><p>在检查过给出的建议代码后，确定是我们需要的，按下 Tab 键，来获取插入当前区域。</p><p>更加具体的交互可以先下面的动图：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d2/d22e5bdeb330a5005e81a78905ad46c3.gif\" /></p><p></p><p>这是一个非常实用的场面，避免了花费大量时间去查询 Echarts 文档。要知道 Echarts 的配置文档是非常多的。下图是密密麻麻的 Echarts 图表配置项：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f0/f009865a68020e1730d96b161fc79a89.png\" /></p><p></p><p></p><h4>编写一个 Python 的浏览器自动化脚本</h4><p></p><p></p><p>作为一名开发人员，我们经常会遇到一些重复的工作，比如这样一个场景，在某个网站上有一个销售榜单，我们需要实时监控这个表单，并将每天的数据汇总发到邮箱里。对于这样的重复性没有技术含量的工作，我们通常使用脚本来编写自动化脚本。下面我们就使用&nbsp;<a href=\"https://aws.amazon.com/cn/codewhisperer/?trk=cndc-detail\">Amazon CodeWhisperer</a>\"&nbsp;来编写一个这样的脚本，看看它是否能够帮助我们快速实现功能。</p><p></p><p>创建一个 auto-run.py 的文件，在文件里引入 selenium，并且使用代码注释写下要实现的功能，按下 Alt + C 键。交互动图如下：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/72/72dc7a512bd67b79380a853d44a65105.gif\" /></p><p></p><p>根据动图大家可以看到，当按下 Alt + C 键时，只提供了一行代码建议，在按下左箭头键后，出现了四行的代码建议。整个流程是非常快速的。</p><p></p><p>给出的代码建议地完整地实现了， 使用 webdriver 打开 Chrome 浏览器，并且访问百度首页，但在输入关键词时，却把\"拿我格子衫\" 写成了“拿战校衫”。个人猜测是由于中文在大模型中有偏差造成的。换成英文就无此问题。</p><p></p><p>使用&nbsp;<a href=\"https://aws.amazon.com/cn/codewhisperer/?trk=cndc-detail\">Amazon CodeWhisperer</a>\"&nbsp;时，代码建议是非常快速的，这个快，除了靠个人感觉来评估，也有一些更为准确的数字来评估。<a href=\"https://aws.amazon.com/cn/codewhisperer/?trk=cndc-detail\">Amazon CodeWhisperer</a>\"&nbsp;提供了一个日志面板，我们可以在 VS Code 的 Setting 配置面板里，找到 Amazon Toolkit 的配置项，找到 Log Level，将其调整为 debug。如下图：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f5/f57ad175da4f88acfaa7ca349b5a8e18.png\" /></p><p></p><p>调整后，我们选中 OUTPUT 面板，并将输出选位 Amazon Toolkit Logs，如下图：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/9b/9b2ea6250202ee1d78e1fe58cace1c75.png\" /></p><p></p><p>当我们在编辑器中按下 Alt + C 键，底部的日志面板会打印出整个流程的日志：</p><p>打印信息大致如下</p><p></p><p><code lang=\"text\">2023-09-25 11:36:41 [DEBUG]: command: running \"aws.codeWhisperer\"\n2023-09-25 11:36:41 [DEBUG]: command: running \"_aws.auth.autoConnect\"\n2023-09-25 11:36:41 [VERBOSE]: telemetry: emitted metric \"vscode_executeCommand\"\n2023-09-25 11:36:41 [DEBUG]: codewhisperer: Connection expired = false,\n                           secondaryAuth connection expired = false,\n                           connection is undefined = false\n2023-09-25 11:36:41 [DEBUG]: codewhisperer: isValidCodeWhispererConnection = true\n2023-09-25 11:36:41 [VERBOSE]: telemetry: emitted metric \"vscode_executeCommand\"\n2023-09-25 11:36:41 [DEBUG]: CodeWhisperer finished fetching crossfile context out of 0 files\n2023-09-25 11:36:41 [DEBUG]: CodeWhispererSupplementalContext:\n    isUtg: false,\n    isProcessTimeout: false,\n    contentsLength: 0,\n    latency: 0.2452000007033348,\n\n2023-09-25 11:36:41 [DEBUG]: SSO token cache: loaded key: 5fa44ff1-8f20-4ed5-89be-548baeb748aa\n2023-09-25 11:36:42 [DEBUG]: Request ID: db72446b-5ee6-439f-af87-87800aa93d90,\n                timestamp(epoch): 1695613002378,\n                timezone: Asia/Shanghai,\n                datetime: 9/25/2023, 11:36:42 AM,\n                vscode version: '1.82.2',\n                extension version: '1.91.0',\n                filename: 'hello-selenium.py',\n                left context of line:  '',\n                line number: 2,\n                character location: 0,\n                latency: 1047.5229000002146 ms.\n2023-09-25 11:36:42 [VERBOSE]: Recommendations:\n2023-09-25 11:36:42 [VERBOSE]: [0]\ndriver = webdriver.Chrome()\n2023-09-25 11:36:42 [VERBOSE]: telemetry: emitted metric \"codewhisperer_serviceInvocation\"\n2023-09-25 11:36:42 [DEBUG]: SSO token cache: loaded key: 5fa44ff1-8f20-4ed5-89be-548baeb748aa\n2023-09-25 11:36:42 [VERBOSE]: telemetry: emitted metric \"codewhisperer_perceivedLatency\"\n2023-09-25 11:36:43 [DEBUG]: Request ID: b69b0f19-bf91-4fe3-b335-96268b567126,\n                timestamp(epoch): 1695613003423,\n                timezone: Asia/Shanghai,\n                datetime: 9/25/2023, 11:36:43 AM,\n                vscode version: '1.82.2',\n                extension version: '1.91.0',\n                filename: 'hello-selenium.py',\n                left context of line:  '',\n                line number: 2,\n                character location: 0,\n                latency: 1041.122000001371 ms.\n2023-09-25 11:36:43 [VERBOSE]: Recommendations:\n2023-09-25 11:36:43 [VERBOSE]: [0]\ndriver = webdriver.Chrome()\ndriver.get(\"http://www.baidu.com\")\ndriver.find_element_by_id(\"kw\").send_keys(\"拿战校衫\")\ndriver.find_element_by_id(\"su\").click()\n2023-09-25 11:36:43 [VERBOSE]: [1]\ndriver = webdriver.Chrome()\ndriver.get(\"http://www.baidu.com\")\ndriver.find_element_by_id(\"kw\").send_keys(\"拿战校衣\")\ndriver.find_element_by_id(\"su\").click()</code></p><p></p><p>根据打印日志的信息，基本的流程大致是这样的：</p><p></p><p>时间戳：2023-09-25 11:36:41，日志以DEBUG级别开始，表示调试信息。命令执行：运行\"aws.codeWhisperer\"和\"_aws.auth.autoConnect\"两个命令。遥测数据：emitted metric “vscode_executeCommand”，表示执行了一个 VS Code 命令。检查&nbsp;<a href=\"https://aws.amazon.com/cn/codewhisperer/?trk=cndc-detail\">CodeWhisperer</a>\"&nbsp;连接状态：isValidCodeWhispererConnection为true，连接有效。检查&nbsp;<a href=\"https://aws.amazon.com/cn/codewhisperer/?trk=cndc-detail\">CodeWhisperer</a>\"&nbsp;获取 crossfile 上下文的结果：完成从一个文件中获取crossfile上下文。检查&nbsp;<a href=\"https://aws.amazon.com/cn/codewhisperer/?trk=cndc-detail\">CodeWhisperer</a>\"&nbsp;补充上下文信息： isUtg 为 false，isProcessTimeout 为 false，contentsLength 为0，latency 为0.245秒。SSO令牌缓存：加载了SSO令牌缓存的键值对。请求ID、时间戳、时区、日期时间、VS Code 版本、扩展版本、文件名、行号、字符位置、延迟等信息被记录。推荐建议：[0]，建议使用 webdriver.Chrome() 来创建一个 Chrome 浏览器驱动对象。遥测数据：emitted metric “codewhisperer_serviceInvocation”，表示服务调用的度量数据。…</p><p></p><p>使用 token 发起的 Request，整个请求中包含了这些信息：</p><p></p><p><code lang=\"text\">timestamp(epoch): 1695613003423,\ntimezone: Asia/Shanghai,\ndatetime: 9/25/2023, 11:36:43 AM,\nvscode version: '1.82.2',\nextension version: '1.91.0',\nfilename: 'hello-selenium.py',\nleft context of line:  '',\nline number: 2,\ncharacter location: 0,\nlatency: 1041.122000001371 ms.</code></p><p></p><p>其中有一个指标是 latency，表明延迟，即从用户按下 Alt+ C 键，到代码块出现这段时间。可以看到生成4行代码只用了 1s 左右，非常的迅速。</p><p></p><p>通过上述的两个实战案例，相信大家已经了解&nbsp;<a href=\"https://aws.amazon.com/cn/codewhisperer/?trk=cndc-detail\">Amazon CodeWhisperer</a>\"&nbsp;的常规使用。在使用时需要以下几点</p><p></p><h4>使用时注意点</h4><p></p><p></p><p>实现功能需要提供一些上下文，比如使用的库和功能注释最好使用英文，中文可能出现乱码或繁体使用左箭头键和右箭头键选择最合适的代码块html 和 yaml 文件暂时不支持</p><p></p><p>另外在使用的过程中，发现了一个不知是 VS Code 的问题还是插件的问题，就是在用鼠标切换代码建议时，当前索引没有改变，详见下图：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/52/5251601e3e9e3553667a3607f4d627bc.gif\" /></p><p></p><p>根据上图 可以看到 切换代码建议，&nbsp;1/5&nbsp;一直都没有变， 用户无法感知当前显示的是第几个代码块。</p><p></p><h4>插件代码解析</h4><p></p><p></p><p>为了更加了解这个产品，我仔细阅读了该插件的源码，它的代码托管在 GitHub，主要功能代码存放在&nbsp;src/codewhisperer&nbsp;目录里。</p><p></p><p>Amazon CodeWhisperer 的插件入口在此处，<a href=\"https://github.com/aws/aws-toolkit-vscode/blob/master/src/codewhisperer/views/securityPanelViewProvider.ts\">https://github.com/aws/aws-toolkit-vscode/blob/master/src/codewhisperer/views/securityPanelViewProvider.ts</a>\"</p><p>这段代码是一个名为&nbsp;SecurityPanelViewProvider&nbsp;的类，它实现了&nbsp;vscode.WebviewViewProvider&nbsp;接口。这个类主要用于在 Visual Studio Code 中打开一个特定的文件并在安全扫描面板中显示代码扫描结果。</p><p></p><p>以下是该类的主要方法和功能：</p><p></p><p>makeUri(...args: Parameters): vscode.Uri：&nbsp;这个方法用于根据给定的路径和行号范围创建一个 URI，用于在 openEditorAtRange 方法中打开编辑器。</p><p>openEditorAtRange(path: string, startLine: number, endLine: number)：&nbsp;这个方法接受一个文件路径和开始、结束行号，然后在 VS Code 中打开该文件并在指定的行范围内高亮显示问题。</p><p>persistLines()：&nbsp;这个方法用于持久化处理过的行信息。</p><p>addLines(securityRecommendationCollection: AggregatedCodeScanIssue[], editor: vscode.TextEditor | undefined)：&nbsp;这个方法用于将扫描结果添加到安全面板中，并更新视图。</p><p>update()：&nbsp;这个方法用于更新视图，将处理好的HTML内容设置到 webview 中。</p><p>persistLine(panelSet: SecurityPanelSet, index: number)：&nbsp;这个方法用于持久化单个处理过的行信息。</p><p>addUnclickableWarningItem(item: SecurityPanelItem) 和 addUnclickableInfoItem(item: SecurityPanelItem)：&nbsp;这两个方法分别用于添加不可点击的警告项和信息项。</p><p>addClickableWarningItem(item: SecurityPanelItem) 和 addClickableInfoItem(item: SecurityPanelItem)：&nbsp;这两个方法分别用于添加可点击的警告项和信息项，它们会生成一个包含文件路径和行号范围的 URI，并将其设置为链接的 href 属性，以便用户可以点击查看文件并在 VS Code 中打开。</p><p></p><h4>学习资料与文档</h4><p></p><p></p><p>虽然 Amazon CodeWhisperer 使用起来非常简单，但官方还是提供了很多学习资料，覆盖各个阶段的学习者。</p><p>如果你想要获取更多有关它的资料 可以查阅官方文档&nbsp;<a href=\"https://aws.amazon.com/cn/codewhisperer/\">https://aws.amazon.com/cn/codewhisperer/</a>\"下面是几篇帮助你快速了解 Amazon CodeWhisperer 的视频教程。</p><p><a href=\"https://dev.amazoncloud.cn/video/videoDetail?id=6445fcdec9a819396b2fe24a\">利用 VS Code 开始使用 Amazon CodeWhisperer</a>\"</p><p><a href=\"https://dev.amazoncloud.cn/video/videoDetail?id=6445fa2413eafe780ecafaac\">利用 Amazon CodeWhisperer 创建基于 Python 的事件驱动型 Serverless App</a>\"</p><p><a href=\"https://dev.amazoncloud.cn/video/videoDetail?id=6445fb816afa68650f58e0df\">利用 Amazon CodeWhisperer 创建基于 Java 的事件驱动型 Serverless App</a>\"</p><p></p><h3>总结</h3><p></p><p></p><p>总的来讲，<a href=\"https://aws.amazon.com/cn/codewhisperer/?trk=cndc-detail\">Amazon CodeWhisperer</a>\"&nbsp;是一款非常优秀的智能编程助手，它能够理解代码的功能和结构，并根据这些信息自动生成注释。这有助于提高代码的可读性和可维护性，同时也能帮助开发人员更好地理解他们正在编写的代码。</p><p></p><p>本文介绍了<a href=\"https://aws.amazon.com/cn/codewhisperer/?trk=cndc-detail\">Amazon CodeWhisperer</a>\"&nbsp;的背景和特性，并测评了它在实际开发场景中的优秀表现。此外，也给出了一些&nbsp;<a href=\"https://aws.amazon.com/cn/codewhisperer/?trk=cndc-detail\">Amazon CodeWhisperer</a>\"&nbsp;的教程视频。</p><p></p><p>总之，<a href=\"https://aws.amazon.com/cn/codewhisperer/?trk=cndc-detail\">Amazon CodeWhisperer</a>\"&nbsp;是一种借助AI大模型创新性的工具，它有助于改善代码质量和软件开发效率，并帮助开发人员更快速，更安全地开发应用，大家快快用起来，也期待&nbsp;<a href=\"https://aws.amazon.com/cn/codewhisperer/?trk=cndc-detail\">Amazon CodeWhisperer</a>\"&nbsp;能够更新更多的功能。</p>",
    "publish_time": "2023-11-29 10:40:36",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "楷同科技有限公司 CEO 黄益聪确认出席 QCon 上海，分享基于时间序列数据预测模型的智能量化交易系统性能优化实践",
    "url": "https://www.infoq.cn/article/r14f5E9kJAxbaN7dMWdS",
    "summary": "<p><a href=\"https://qcon.infoq.cn/2023/shanghai/?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_campaign=8&amp;utm_term=1129&amp;utm_content=huangyicong\">QCon 全球软件开发大会</a>\"，将于 12 月在上海召开。快手基础平台部系统软件中心 / 系统软件负责人熊刚将发表题为《<a href=\"https://qcon.infoq.cn/2023/shanghai/presentation/5626?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_campaign=8&amp;utm_term=1129&amp;utm_content=huangyicong\">基于时间序列数据预测模型的智能量化交易系统性能优化实践</a>\"》主题分享，探讨系统全链路从数据采集 - 数据计算 - 模型预测 - 交易下单，全流程进行优化的实践，包括怎样高效的在 Java 处理计算 C++ 高频产生的时间序列数据，怎么降低高频产生、长生命周期数据对 Java GC 的影响等。</p><p></p><p><a href=\"https://qcon.infoq.cn/2023/shanghai/presentation/5626?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_campaign=8&amp;utm_term=1129&amp;utm_content=huangyicong\">黄益聪</a>\"，曾担任 Intel 高级工程师，阿里巴巴高级技术专家，中国互联网百强独角兽企业技术副总裁、CTO，有 15 项中国发明专利，3 项美国发明专利，专注于大数据与人工智能领域，AI 量化交易系统实践。他在本次会议的演讲内容如下：</p><p></p><p>演讲：基于时间序列数据预测模型的智能量化交易系统性能优化实践</p><p></p><p>金融市场的行情数据，如股票价格、成交量、交易队列等是典型的时间序列数据，具有很强的时间性和顺序依赖性。智能量化交易系统需要对市场上高频产生的时间序列数据进行处理计算，输入深度学习模型进行预测，执行交易策略，生成交易行为进行交易。整个过程需要覆盖全市场一万以上的品种，并且需要在很小的时间窗口，比如秒级完成。进一步的，我们使用了多语言进行系统开发。其中数据采集模块使用了 C++ 以达到高性能，交易策略引擎使用了 Java Spring Boot 搭建服务，AI 模型使用了 Python 基于 TensorFlow 和 Torch 框架。</p><p></p><p>业务需求的系统低延迟计算和多语言系统模块的交互，给我们的性能优化带来了挑战。这次分享，将带来我们对系统全链路从数据采集 - 数据计算 - 模型预测 - 交易下单，全流程进行优化的实践分享，包括怎样高效的在 Java 处理计算 C++ 高频产生的时间序列数据，怎么降低高频产生、长生命周期数据对 Java GC 的影响，怎么高效部署调用低延迟、多模型、多版本的 AI 模型预测服务，系统故障的数据断点快速恢复等。</p><p></p><p>演讲提纲：</p><p></p><p>背景与项目概况</p><p>○ 量化交易系统介绍</p><p>○ 项目技术架构</p><p>○ C++/ Java / Python 多语言交互</p><p>全链路数据流优化</p><p>○ 实时行情数据收集与处理</p><p>○ 低延迟、高吞吐性能挑战</p><p>○ 尝试的优化手段：GC Tuning，Direct Buffer</p><p>○ 我们的解决方案</p><p>○ 性能优化效果</p><p>服务化 AI 模型预测</p><p>○ Tensorflow 模型性能优化实践</p><p>○ Torch 模型转换</p><p>总结与展望</p><p>○ 复杂模型和低延迟预测性能的权衡</p><p>○ 目标展望：更快、更准</p><p></p><p>听众收益点：</p><p></p><p>○ 构建高性能、低延迟的智能量化交易系统</p><p>○ 多语言开发的复杂系统的全链路性能分析和优化</p><p>○ AI 模型在智能量化交易系统的实践</p><p></p><p>除上述演讲外，QCon 上海还将围绕&nbsp;<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1595?utm_source=infoqweb&amp;utm_medium=teacherart\">GenAI和通用大模型应用探索</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1596?utm_source=infoqweb&amp;utm_medium=teacherart\">AI&nbsp;Agent&nbsp;与行业融合应用的前景</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1597?utm_source=infoqweb&amp;utm_medium=teacherart\">LLM&nbsp;时代的性能优化</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1598?utm_source=infoqweb&amp;utm_medium=teacherart\">智能化信创软件&nbsp;IDE</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1602?utm_source=infoqweb&amp;utm_medium=teacherart\">面向人工智能时代的架构</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1604?utm_source=infoqweb&amp;utm_medium=teacherart\">性能工程：提升效率和创新的新方法</a>\"等专题进行交流。</p><p></p><p>QCon 上海 2023，相约 12 月！ 8 折优惠还剩最后 3 天，现在购票立减￥1360！咨询购票请联系：18514549229（微信同手机号）。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/01/0113b3dfb187d5f9988b7eb16d2e0594.png\" /></p><p></p>",
    "publish_time": "2023-11-29 11:30:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]