[
  {
    "title": "改变游戏规则，微软推出TTS语言模型VALL-E",
    "url": "https://www.infoq.cn/article/YSD6qEoeH0TQZE2EtNGy",
    "summary": "<p>微软推出了<a href=\"https://valle-demo.github.io/\">VALL-E</a>\"，这是一种用于<a href=\"https://en.wikipedia.org/wiki/Speech_synthesis\">文本到语音合成</a>\"（TTS）的新型语言模型方法，它使用音频编解码器代码作为中间表示，只需听三秒钟的音频录音，即可复制任何人的声音。</p><p>&nbsp;</p><p>VALL-E是一种神经编解码器语言模型，其中AI对语音进行标记，并使用其算法利用这些标记来构建听起来像演讲者的波形，包括保持演讲者的音色和情绪基调等。</p><p>&nbsp;</p><p>根据<a href=\"https://arxiv.org/abs/2301.02111\">该研究论文</a>\"，VALL-E只需作为声音刺激的间接演讲者的三秒注册录音，就可以产生高质量的个性化语音。这样做不需要额外的结构工程、预先设计的声学特征或微调。它支持上下文学习和基于提示的<a href=\"https://en.wikipedia.org/wiki/Zero-shot_learning\">零样品</a>\"TTS方法。</p><p>&nbsp;</p><p>VALL-E提供了AI模型的音频演示。样例之一的“Speaker Prompt”是VALL-E必须复制的三秒钟听觉提示。为了便于比较，“Ground Truth”是同一位演讲者使用特定短语（有点像实验中的“对照组”）录制的摘录。“Baseline”样例代表了一个典型的文本到语音合成的示例，“VALL-E”样例代表了VALL-E模型的输出。</p><p>&nbsp;</p><p>根据评估数据，与最先进的零样本TTS系统相比，VALL-E在<a href=\"https://paperswithcode.com/dataset/librispeech\">LibriSpeech</a>\"和<a href=\"https://paperswithcode.com/dataset/vctk\">VCTK</a>\"上的表现要好得多。在LibriSpeech和VCTK上，VALL-E甚至产生了最尖端的零样本TTS结果。</p><p>&nbsp;</p><p>近年来，由于神经网络和端到端建模的发展，语音合成领域取得了显著的进展。目前，声码器和声学模型通常用于级联的文本到语音（TTS）系统，其中<a href=\"https://en.wikipedia.org/wiki/Mel-frequency_cepstrum\">mel谱图</a>\"作为中间表示。来自单个演讲者或一组演讲者的高质量语音可以由复杂的TTS系统合成。</p><p>&nbsp;</p><p>TTS技术已经被集成到广泛的应用程序和设备中，如亚马逊的Alexa和谷歌助手等虚拟助理、导航应用程序和电子学习平台等。它还被用于娱乐、广告和客户服务等行业，以创造更具吸引力和个性化的体验。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/01/microsoft-text-to-speech-valle/\">https://www.infoq.com/news/2023/01/microsoft-text-to-speech-valle/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/oE48Dili0Oa9NSd0yY4W\">微软 Azure Neural TTS 新增对 9 个“小语种”语言及口音支持</a>\"</p><p><a href=\"https://www.infoq.cn/article/TVY7hNIN8BjvLm6G0mYU\">微软联合浙江大学提出全新 TTS 模型 FastSpeech，语音生成速度提高 38 倍</a>\"</p>",
    "publish_time": "2023-02-15 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "开源指南针发布在即：估量有尺，开源有道",
    "url": "https://www.infoq.cn/article/e01c85b880e59aba151f287c2",
    "summary": "<p>2 月 21 日，“开源指南针 OSS Compass”发布会将正式召开，欢迎关注。地址：北京 Blue Note（前门东大街 23 号）线上直播地址：https://shangzhibo.tv/watch/10935779</p><p></p><p>OSS Compass 是一个用于开源生态健康评估的平台，面向 GitHub、Gitee 等托管平台上托管的所有开源项目开放。开源生态健康的评估一直是业界一大难题，此次发布会将全面介绍 OSS Compass 背后的理论研究及实践成果，同时还将公布 OSS Compass 开源社区治理结构、评估工具以及首份开源项目评估白皮书。开源生态体系评估是一项复杂的大型工程，在实践操作中往往涉及多方人员，其结果对开源项目发展影响深远，因此，开源指南针的愿景是：通过开源指南针, 我们帮助需要对社区进行数据分析的人。包括但不限于 OSPOs、社区管理人员、学术研究人员、项目所有者、维护者、开发者等。通过分析大量公开来源项目的实际数据，并参照行业最佳实践和学术界的研究结果，我们创建一个开源社区生态体系评估系统，加以不断改进和优化，并通过开源指南针反哺到开源社区。</p><p></p><p>发布会议程如下：</p><p><img src=\"https://static001.geekbang.org/infoq/20/20a53ccb3f2e0aab7cd35ab1bf730b8d.png\" /></p><p></p><p>发布会将邀请来自业界的专家将分享 OSS Compass 综述起源、社区概况、治理结构、评估模型等，全面介绍 OSS Compass。南京大学教授学者将深入解读项目模型依据，剖析开源生态评估体系的内在逻辑。更有多位大咖展开圆桌探讨，共同探讨开源运营与治理的门道。</p><p><img src=\"https://static001.geekbang.org/infoq/5c/5c2672c608350c902d126880ef850deb.png\" /></p><p></p><p>估量有尺，开源有道。2 月 21 日，开源指南针发布会期待您拨冗莅临！地址：北京 Blue Note（前门东大街 23 号）</p><p><img src=\"https://static001.geekbang.org/infoq/9f/9f72c859a16e87dd2552ae7424529f63.png\" /></p><p></p><p>欢迎开源爱好者扫描报名，现场参会！</p><p></p>",
    "publish_time": "2023-02-15 11:38:22",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "重新构想前端开发！Kotlin 推出新功能：无需同时了解 Kotlin 和 JavaScript",
    "url": "https://www.infoq.cn/article/WBIxUbWPE4OhI7Q4wtS2",
    "summary": "<p>近日，JetBrains 发布了<a href=\"https://kotlinlang.org/docs/whatsnew-eap.html#leave-your-feedback-on-the-new-k2-compiler\">Kotlin 1.8.20 beta 版本</a>\"，其中包括一项名为“Kotlin/Wasm”的实验性功能，明确将 WebAssembly 设为编译目标。据介绍，新版本依赖于原生Wasm垃圾收集功能WasmGC，后者同样处于早期开发阶段。</p><p>&nbsp;</p><p>JetBrains 总结了 Kotlin/Wasm 的优势：</p><p>&nbsp;</p><p>与wasm32 Kotlin/Native 目标相比，Kotlin/Wasm的编译速度更快，因为后者不必使用 LLVM。由于 <a href=\"https://github.com/WebAssembly/gc\">Wasm 垃圾收集</a>\"支持，与wasm32目标相比，Kotlin/Wasm 与 JS 的互操作性、与浏览器的集成更容易。与 Kotlin/JS 和 JavaScript 相比，Kotlin/Wasm 应用程序启动时间可能更快，因为 Wasm 具有紧凑且易于解析的字节代码。与 Kotlin/JS 和 JavaScript 相比，Kotlin/Wasm 应用程序运行时性能更快，因为 Wasm 是一种静态类型语言。</p><p>&nbsp;</p><p>不过，目前还没有 IDE 为 Kotlin/Wasm 提供支持。JetBrains 在版本发行说明中提到，“我们以开箱即用的形式，为 Kotlin/Wasm 提供 Kotlin 标准库（stdlib）和测试库（kotlin/test）。”</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2a/2ad899da188777f5e1789a60212f23b9.png\" /></p><p>&nbsp;</p><p>浏览器中运行的Kotlin/Wasm演示</p><p>&nbsp;</p><p>此前，通过基于 LLVM 的 Kotlin-Native 编译指向和 LLVM Wasm 支持，Kotlin 已经能够在某种程度上实现向 Wasm 的编译，这种旧方法被称为wasm32。随着新版本的发布，该方法将成为被弃用的多种Kotlin/Native编译目标之一。</p><p>&nbsp;</p><p>作为一种JVM语言，Kotlin具备垃圾收集机制，但此前Wasm一直无法原生支持垃圾收集，这就要求各垃圾收集语言自行提供解决方案。Wasm-gc就是其中一项提案，承诺“对高级语言做出有效支持”。此次，这一设计有望超越自定义解决方案，并减少应用程序的二进制文件大小。Wasm-gc可通过浏览器Flag在最新版本的Chrome、Firefox和Edge上启用。</p><p>&nbsp;</p><p></p><h2>Kotlin 的“通用型语言”理想</h2><p></p><p>&nbsp;</p><p>早在2017年，主流浏览器都已经支持 WebAssembly。随着WebAssembly的蓬勃发展，各种编程语言也在增加对其的支持。比如，C/C++、Rust、Golang 等已支持将语言编译到 WebAssembly 目标平台，Lua、JavaScript、Ruby和Python等支持将语言的虚拟机或解释器编译到 WebAssembly 平台。</p><p>&nbsp;</p><p>2021 年，WebAssembly 开源项目开始支持 GC（垃圾回收器），为实现 WebAssembly 支持像 Java、Kotlin 这样的前端语言做准备。同年，Kotlin 程序语言开发团队更新了发展路线，其中的一个重点就是增加WebAssembly支持。</p><p>&nbsp;</p><p>Kotlin总项目经理 Egor Tolstoy 表示，他们认为 WebAssembly 会成为未来创建丰富网页应用程序的新标准，而 Kotlin 必需要能够完美的提供支持。因此官方火力全开，组建了一个专门团队来开发 Kotlin/Wasm 工作，并且与 WebAssembly 垃圾回收提案作者紧密合作，要实现Kotlin语言的基本功能、函数库和基本 Gradle 的支持，还要添加实验性 JavaScript 互通操作功能。</p><p>&nbsp;</p><p>Kotlin 在2017 Google 发表声明后总被当成是安卓专用开发语言，但实际上，Kotlin 正在积极地向多平台语言演进，即“通用型语言”。</p><p>&nbsp;</p><p>如今，JetBrains 提供了多个支持多平台的库，如 kotlinx.coroutines、kotlinx.serialization、kotlinx-datetime。而 Kotlin 社区也紧跟着这样的趋势发展，出现了愈来愈多的库、框架来支持多平台，如 Arrow、Okio、Apollo 等在新版本中都支持了多平台开发。</p><p>&nbsp;</p><p></p><h2>Kotlin/Wasm 究竟有什么潜力</h2><p></p><p>&nbsp;</p><p>在最初的设计中，WebAssembly 只是C、C++或Rust这些低级语言的编译目标。至于 Python、Ruby 甚至是 JavaScript 等动态语言，能充当解释性的虚拟机即可。</p><p>&nbsp;</p><p>但 WebAssembly 垃圾收集（GC）的贡献者们正努力把它打造成垃圾收集语言（例如Java、Kotlin或Dart）的编译目标，并停止使用 JavaScript 作为Web字节码。此外，他们还考虑把其他语言也都转化成前端开发中的理想选项，而不必像 TypeScript 那样把一切先编译成JavaScript。</p><p>&nbsp;</p><p>请注意，这些语言已经能够在各个应用程序内提供自己的自定义垃圾收集，借此实现对 WebAssembly 的编译。这样做的缺点就是这样生成的工件会更大，所以也不知道 WasmGC 真正推出时，原来的这种处理方式还有没有竞争力。</p><p>&nbsp;</p><p>WasmGC 的实现源自 Chrome、Firefox、Edge 和 Safari 四大浏览器的一个持续性项目，目前需要使用 Flag 加以启用（例如，在Chrome或Edge上，需要使用--js-flags=--experimental-wasm-gc命令行参数）。正是因为达不到开箱即用的程度，所以该技术目前还没能得到广泛采用。</p><p>&nbsp;</p><p>但是，当WasmGC步入第四阶段并在大多数浏览器中实现开箱即用后，能够利用WasmGC的语言将迎来显著的竞争优势。</p><p>&nbsp;</p><p>在 VMware 从事 Spring Framework 工作的 Sébastien Deleuze&nbsp;称，Kotlin/Wasm很早就在关注WasmGC，谷歌也在使用 J2CL 和 Dart 在 Google Sheets 中将 Java 编译为 WasmGC。</p><p>&nbsp;</p><p></p><h4>前端（及全栈）开发</h4><p></p><p>&nbsp;</p><p>“因为要求开发者同时了解 Kotlin 和 JavaScript 两套生态系统，所以我个人一直对 Kotlin/JS 不太感冒，但 Kotlin/Wasm 确实是个重塑前端开发面貌的好机会。”Deleuze&nbsp;表示，“当然，Kotlin/Wasm 必须要提供良好的 JavaScript 互操作性（它也确实做到了），并作为可选项。”</p><p>&nbsp;</p><p>目前，Kotlin/Wasm 提供 DOM API，所以某些 Kotlin/Wasm 前端框架可能已经足够成为前端开发的理想选择。Deleuze&nbsp;表示自己可能也会试试将 Kotlin/Wasm 用于前端开发，再配合Spring Boot Kotlin/JVM 后端实现 Kotlin 中的全栈开发。</p><p>&nbsp;</p><p>但从另一个角度来看，WebAssembly还有更多值得发掘的亮点。如果 Compose for Web（Android上使用的多平台版Jetpack Compose）能够用Kotlin/Wasm代替Kotlin/JS来完美执行基于Canvas的像素渲染，结果又会如何？（稍做剧透，其实已经实现了。）</p><p>&nbsp;</p><p>如果Kotlin/Wasm能够用WebAssembly来取代JavaScript，支持一种新的Jamstack架构，结果又会如何？</p><p>&nbsp;</p><p></p><h4>WebAssembly组件模型</h4><p></p><p>&nbsp;</p><p>要想充分理解Kotlin/Wasm的巨大潜力，就不能不提 WebAssembly 组件模型。正是它的存在，让我们能使用任意支持WebAssembly的语言，为 WebAssembly 开发组件。这项工作的基石正是 WIT 格式，可用于描述导入和展出并生成特定于语言的binding。</p><p>&nbsp;</p><p>Deleuze&nbsp;亲自实践了一下，看看WIT是如何被转译成Kotlin的，结果看起来还不错。例如，其尝试将 WIT&nbsp;&nbsp;variant&nbsp;定义为：</p><p>&nbsp;</p><p><code lang=\"null\">variant filter {\n    all,\n    none,\n    some(list),\n }</code></p><p>&nbsp;</p><p>转译出的Kotlin代码如下：</p><p>&nbsp;</p><p><code lang=\"null\">sealed interface Filter {\n   object All : Filter\n   object None : Filter\n   class Some(val value: List): Filter\n}</code></p><p>&nbsp;</p><p>利用 String 提供的 null 安全特性，WIT&nbsp;option&nbsp;能够被准确转译为 Kotlin 惯用的选项值处理方式。在 Deleuze&nbsp;看来，Kotlin 协程也将成为组件模型异步支持绑定中一个强大的竞争优势。</p><p>&nbsp;</p><p></p><h4>用 warg&nbsp;实现 WebAssembly 包管理</h4><p></p><p>&nbsp;</p><p>大家可能会好奇WebAssembly要如何发布和使用。别担心，面向WebAssembly包的标准化管理项目Warg，有望带来各种包repo实例，其中的关键就是 WebAssembly 包 repo 将支持多语言。</p><p>&nbsp;</p><p>没错，Maven Central 或者 NPM 在 Java 和 JavaScript 之外的语言中也有使用，但无论是生产还是消费都摆脱不了“二等公民”的阴影。Warg 和 WebAssembly 将真正把多语言组件推向全新的高度。</p><p>&nbsp;</p><p>Deleuze预测，像Rust/C/C++这样的语言将主要用于生产Wasm组件（强调效率，只为非共享方法提供极小、甚至干脆不提供运行时）；而 Kotlin/Wasm 这类能利用WasmGC的语言，则主要负责构建使用这些组件的应用程序。当然，Rust 也可以用来开发Wasm应用程序，但Deleuze 猜测 WasmGC 语言才是这类用例中的主导者。</p><p>&nbsp;</p><p></p><h4>WASI&nbsp;</h4><p></p><p>&nbsp;</p><p>所谓WASI，简言之就是在定义标准化系统接口（包括文件系统、时钟、环境变量、命令行参数或者标准输入/输出）应该如何被公开给Wasm应用程序。机器学习、人工智能或者云存储等其他用例也可以通过WASI进行标准化。</p><p>&nbsp;</p><p>Kotlin/Wasm 目前还不支持 WASI，但开发团队已经提供低级 API 实现。有趣的是，只需要提供WASI平台中的特定部分，就能使用Kotlin的多平台库（例如kotlinx-datetime或Okio）。</p><p>&nbsp;</p><p>“ Kotlin/Wasm + WASI ”将并发出惊人的潜能：它可以提供Kotlin/JVM的替代方案，将应用程序部署到云端、边缘甚至是Serverless函数的形式；也被大量用作容器镜像的替代方案，能在几微秒内完成实例化、提供更高的安全性且不依赖于任何特定硬件或操作系统。这样的特性可能让人想起 Java 在1995年提出的“一次编写，随处运行”（WORA）口号。</p><p>&nbsp;</p><p>目前实现这一愿景的主要障碍在于，Wasmtime 等纯 WASI 运行时还不支持 WasmGC。目前，运行Kotlin/Wasm WASI应用程序的主要途径是利用 Node WASI 支持。</p><p>&nbsp;</p><p></p><h4>附：如何启用 Kotlin/Wasm</h4><p></p><p></p><p>要启用 Kotlin/Wasm 并对其进行测试，请更新您的build.gradle.kts文件：</p><p><code lang=\"null\">plugins {\n    kotlin(\"multiplatform\") version \"1.8.20-Beta\"\n}\n\n\nkotlin {\n    wasm {\n        binaries.executable()\n        browser {\n        }\n    }\n    sourceSets {\n        val commonMain by getting\n        val commonTest by getting {\n            dependencies {\n                implementation(kotlin(\"test\"))\n            }\n        }\n        val wasmMain by getting\n        val wasmTest by getting\n    }\n}</code></p><p>&nbsp;</p><p>可查看<a href=\"https://github.com/Kotlin/kotlin-wasm-examples\">包含 Kotlin/Wasm 示例的 GitHub 存储库</a>\"</p><p>&nbsp;</p><p>要运行 Kotlin/Wasm 项目，您需要更新目标环境的设置：</p><p>&nbsp;</p><p>Chrome，对于版本 109 或更高版本：</p><p>&nbsp;</p><p>在您的浏览器中转到chrome://flags/#enable-webassembly-garbage-collection。重新启动浏览器应用程序。</p><p>&nbsp;</p><p>Firefox，对于版本 111 或更高版本：</p><p>&nbsp;</p><p>在您的浏览器中转到about:config。启用javascript.options.wasm_function_references和javascript.options.wasm_gc选项。重新启动浏览器应用程序。</p><p>&nbsp;</p><p>Edge，对于版本 109 或更高版本：</p><p>&nbsp;</p><p>使用命令行参数运行应用程序-- js-flags=--experimental-wasm-gc。</p><p></p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://devclass.com/2023/02/14/kotlin-debuts-experimental-kotlin-wasm-target-in-new-beta-a-new-approach-to-frontend-development/\">https://devclass.com/2023/02/14/kotlin-debuts-experimental-kotlin-wasm-target-in-new-beta-a-new-approach-to-frontend-development/</a>\"</p><p><a href=\"https://seb.deleuze.fr/the-huge-potential-of-kotlin-wasm/\">https://seb.deleuze.fr/the-huge-potential-of-kotlin-wasm/</a>\"</p><p><a href=\"https://kotlinlang.org/docs/whatsnew-eap.html?utm_campaign=1.8.20-Beta&amp;utm_medium=social&amp;utm_source=twitter#leave-your-feedback-on-kotlin-wasm\">https://kotlinlang.org/docs/whatsnew-eap.html?utm_campaign=1.8.20-Beta&amp;utm_medium=social&amp;utm_source=twitter#leave-your-feedback-on-kotlin-wasm</a>\"</p>",
    "publish_time": "2023-02-15 14:03:41",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "core-js作者快被缺钱“拖垮”了：全职做开源维护9年，月均收入从2500美元锐减到400美元",
    "url": "https://www.infoq.cn/article/S8JSFyHXU8vowD1UphKP",
    "summary": "<p></p><p>大家好，我是 @zloirock （Denis Pushkarev），一名全职开源开发者。</p><p></p><p>其实我不爱写长文，这篇文章原本只想聊聊 core-js 的后续主要版本和发展路线图。但受到近期一系列事件的影响，这篇文章变得这么长。</p><p></p><p>我就直说了……我烦透了，免费开源软件的根基已经崩塌了。其实我可以直接转身离去，但面对这片自己曾经倾注了热情的社区，我还是想最后说点什么。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/01/01a1e71a80f6158cde43da6e5e581c1e.png\" /></p><p></p><p></p><h2>Core-js 项目前景</h2><p></p><p></p><p>Core-js 是什么？</p><p></p><p>它是 JavaScript 标准库中最流行也最常用的 polyfill，为最新的 ECMAScript 标准和提案提供支持，包括古老的 ES5 功能到迭代器助手等前沿选项；就连与 ECMAScript 密切相关的 structureClone 等 Web 平台功能也离不开它的协助。</p><p></p><p>它是目前最复杂也最全面的 polyfill 项目。截至本文撰稿时，core-js 包含约 5000 个复杂度各异且彼此协同的 polyfill 模块 — 包括 Object.hasOwn、Array.prototype.at 到 URL、Promise 和 Symbol 等等。虽然在其它架构中，大家也可以把各模块作为单独的包来使用，但总归不如 core-js 这么方便。</p><p></p><p>它高度强调模块化——大家可以轻松、甚至自动选择只加载要用到的功能，而且 core-js 能在不污染全局命名空间的前提下起效（有人称这类用例为「ponyfill」）。</p><p></p><p>它在设计上充分考虑到了工具集成需求，并提供所需的一切支持——@babel/preset-env、@babel/transform-runtime 以及基于 core-js 的类 SWC 功能等。</p><p></p><p>就是因为有了 core-js，开发人员多年以来才能随意使用现代 ECMAScript 功能，只是大多数人并不知道背后的功臣就是它。 因为 core-js 在间接起效，所以用起来让人感觉支持是由转译器 / 框架 / 中间包（例如 babel-polyfill 等）实现的。</p><p></p><p>Core-js 并不是框架或者库，所以开发者不用了解相应的 API 或者说明文档就能享受它的好处。即使是直接使用，开发者也只需要导入某些行或者配置，之后就可以撒手不管了。深藏身与名的 core-js 会默默提供 Web 标准中的各类功能，包括开发工作中必不可少的各种 JS 标准库功能。</p><p></p><p>Core-js 的月均 NPM 下载量为 2.5 亿次，总下载量高达 90 亿次，1900 万次 GitHub 仓库依赖 — 这些都是相当惊人的数字。但这仍不足够概括 core-js 的真正热度。</p><p></p><p>我写了个简单的脚本，用来检查 Alexa 热门网站列表中 core-js 的使用情况。可以看到，这里包含的都是最明确的 core-js 用例和相应版本（仅限较新的几个版本）。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/92/923c95e8763a0cc7080a81b043b33955.png\" /></p><p></p><p>目前，在对全球 TOP 1000 网站进行统计后，脚本发现有 52% 的测试对象在使用 core-js。根据月度波动，实际结果可能会有几个百分点的变化。但这还只是使用现代浏览器在初始页面上进行的粗糙检测，有很多用例没有被真正纳入统计。人工检查后，数字还能再增加百分之几十。例如，以上截图中有很多公司的初始页面中包含 core-js 但却被我这脚本给漏掉了，例如：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5e/5e31d689c0122db4dba8adc5a2edf5dc.png\" /></p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c7/c7e6aa81fcf61fe6464d17ed3a5fd730.png\" /></p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/88/88020f75797d4a50109fd7a01b63366f.png\" /></p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/38/38de2327fbcc8e56e76cf00570e9450d.png\" /></p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e0/e031b7dde84cfd9746c0052e1e128b6e.png\" /></p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/52/52957ffe681531b21ceade2531a36e19.png\" /></p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/30/300442720efcf7db5987a5c4db4852b7.png\" /></p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/11/11f4b76be0a834d8a3d8da2447668203.png\" /></p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/fa/fae24f3f475c801ed28674492b5bc20d.png\" /></p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/54/54e7027bda494ed487eafd2b5ba08dbe.png\" /></p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/df/df5d2a1653ea749132b0f0b581933a0d.png\" /></p><p></p><p>在手动检查之后，前百大网站中有 75 到 80 个中包含 core-js，而脚本给出的数字则只有 55 到 60 个。把样本量进一步放大，统计缺失也会更加严重。</p><p></p><p>Wappalyzer 可以使用浏览器插件来检测技术使用情况，也包括 core-js。之前我做过测试，但现在他们的网站只提供约 500 万条公开结果。从现在的 Wappalyzer 来看，core-js 在 800 万个移动页面和 500 万个桌面页面当中，分别占比 41% 和 44%。而根据 Built With 的调查，core-js 在 TOP 10000 站点中的覆盖率为 54%。同样的，我并不确定这两项检查是否完整。</p><p></p><p>总而言之，我们可以自信地说，大多数流行网站都在使用 core-js。对部分大公司，即使他们的主站点上没用 core-js，它的身影也一定存在于某些项目当中。</p><p></p><p>那网站上普及度最高的 JS 库是什么？答案既不是 React 或者 Lodash，也不是其他备受关注的库或框架，而是“已显陈旧”的 jQuery。</p><p></p><p>而且 core-js 负责支持的不只是网站前端，同时也被广泛应用在一切跟 JavaScript 有关的场景下。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b6/b6457b0a391bc8f9667a81cee0ae5393.png\" /></p><p></p><p>但因为不显山、不露水，几乎没人意识到自己正在使用 core-js。我为什么要强调这一点？这可不是想邀功，而是向大家证明目前的开源生态有多恶劣。</p><p></p><p></p><h2>从一张流行图说起</h2><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ef/efc7788d62bd6f427def8887472277a8.png\" /></p><p></p><p></p><h3>起源</h3><p></p><p></p><p>2012 年，我开始把自己的开发堆栈转为全栈 JavaScript。那时候的 JS 还太过原始，IE 也仍是市场上份额最高的浏览器。ES3 时代的浏览器拥有不小的比例，最新的 Node.js 刚刚来到 0.7 版。必须承认，这时的 JS 还不适合编写严肃应用程序，开发人员需要使用 CoffeeScript 等语言的编译器解决 JS 在语法、标准库和 Underscore 等库的缺失问题。当然，这些慢慢都成了历史，关注未来的我决定全面拥抱即将发布的 ECMAScript 6 标准。</p><p></p><p>但陈旧的 JS 引擎太流行了，加上用户并不急于忙着更新换代，所以即使在实质上已经没有任何采用门槛，ECMAScript 在之后的很多年里也仍然依赖于 JS 引擎。但我们也可以尝试借助某些工具，挖掘出 ECMAScript 标准中的支持特性。那时候，解决语法问题还得靠转译器，标准库问题则依赖 polyfill。而各种现在大家离不开的工具包当时也才刚刚出现。</p><p></p><p>在此期间，ECMAScript 转译器大行其道并蓬勃发展。但与此同时，polyfill 则没能跟上用户和项目的实际需求。它们缺乏模块化特性，必须得污染全局命名空间才能正常起效，所以并不适合搭配库来使用。虽然选择由不同作者编写的 polyfill 库并搭配使用并不算特别复杂，但在很多场景下仍然阻碍重重。总之，其中缺少大量必要的基本语言功能。</p><p></p><p>为了解决这些问题，我从 2012 年开始为自己的项目开发起了解决方案，这就是后来的 core-js。我希望能让所有 JS 开发者工作起来更省心，所以在 2014 年 11 月，我把 core-js 发布为开源项目。而这，也许是我一生中最大的错误。</p><p></p><p>我显然不是唯一受语言功能缺失困扰的开发者，所以短短几个月后，core-js 就成了 JS 标准库实现 polyfill 的最优选项。当时的 core-js 被集成至 Babel 当中，而 Babel（当时还叫 6to5）的诞生比 core-js 只早几个月。</p><p>之前提到的问题同样困扰着这个年轻的项目。经历了更名，core-js 开始以 -babel-polyfill 的名义接受贡献。经过几个月的合作，出现了另外一款工具，并最终深化成了 bael-runtime。又过了几个月，core-js 被整合进核心框架当中。</p><p></p><p></p><h3>为整个 Web 提供兼容性保障</h3><p></p><p></p><p>我犯的第二个错误，就是没有认真推销自己或者项目。</p><p></p><p>Core-js 没有网站或者媒体账户，只有 GitHub 代码仓库。我没在开源会议上搞宣传，甚至连帖子都很少发。我只想做个既实用、又能支持现代开发堆栈的工具，这样就挺好。在它的帮助下，开发人员能够享受到最现代、最实用的 JS 功能，不用再坐等这一切被缓缓纳入 JS 引擎。另外，core-js 也消除了兼容性和 bug 隐患，于是项目开始广泛传播，很快得到几十个流行网站的采用。</p><p></p><p>但这还仅仅只是开始。</p><p></p><p>接下来就是持续多年的艰苦工作，我每天都要花几个小时来维护 core-js 和相关项目（主要是 Babel 和 compat-table）。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a1/a10acf64b9ac4c5bab9753213424fa46.png\" /></p><p></p><p>Core-js 绝不是那种写完之后就万事大吉的小库。 跟绝大多数库不同，它会受到 Web 状态的约束，需要对 JS 标准或提案中的变更、新的 JS 引擎版本、JS 引擎中的 bug 检测等做出反应。</p><p></p><p>于是乎，ECMAScript 2015 发布新提案、ECMAScript 推出新版本、新的非 ECMAScript Web 标准 / 引擎 / 工具等出现之后，core-js 也一直在随之变化。项目的演进、改造和对 Web 现状的适应从未停止，而普通用户几乎完全感受不到这一切。</p><p></p><p>只有工作规模在不断扩大，不断扩大……</p><p></p><p>长久以来，我一直在用各种方式寻找其他维护者，至少能找几位持续贡献者也行。但所有尝试，无一例外全部失败。</p><p></p><p>几乎每位 JS 开发者都间接用到过 core-js，也知道 babel-polyfill、babel-runtime 或者框架 polyfill 的各种功能，但却没人听说过 core-js。在部分关于 polyfill 的帖子里倒是提到过 core-js，但用的表述是“一个小库”。</p><p></p><p>反正 core-js 没啥人气、也没啥讨论热度，既然它就在那静悄悄地干活呢，何必要费劲去帮忙维护？随着时间推移，我终于对整个社区绝望了，剩下就完全是凭着一股责任感继续独自工作。</p><p></p><p>几年之后，我发现全职做开源开发已经彻底没戏了——既没人愿意向开源贡献者付钱，也没多少人愿意拿出业余时间参与其中。</p><p></p><p>但我没办法，有时候 core-js 会整整耗上我几个礼拜的时间，但为了让社区能继续有强大的 polyfill 可用，我只能把经济问题先放在一边。</p><p></p><p>这就是我，不仅辞去了原本的高薪工作，后来还拒绝了好几份相当诱人的邀约。因为一旦接受，我知道自己就再没精力从事开源工作了。这就是我的全职开源生存状态，没有任何人愿意掏钱支持。</p><p></p><p>我其实还抱有一点期待，希望早晚能找到一份可以全身心投入的开源 Web 标准工作。为了撑起开源开发和日常工作，我只能定期找几份短工。</p><p></p><p>我回到了俄罗斯，这边生活成本比较低，所以我对收入的容忍度也就更强了。但这又是另一个错误——钱很重要，我稍后会具体向大家解释。</p><p></p><p>到 2019 年 4 月，我已经参与 core-js 项目一年半了，全职做开源也有半年左右。我心无旁骛地开发 core-js@3，对 polyfill 相关的 Babel 工具做了全方位改进，让它真正成为几乎无处不在的重要工具包。</p><p></p><p></p><h2>意外终于来了</h2><p></p><p></p><p>在 core-js@3 发布的三周之后，我遇上了重大变故。</p><p></p><p>那是四月的一个晚上，我凌晨 3 点开车回家，路上遇到两个喝得烂醉、穿着深色衣服的年轻女孩，她们当时正摇摇晃晃穿过一条昏暗的高速公路。我撞上了她们，后面的事情记不太清楚了。</p><p></p><p>有目击者说其中一个直接躺在车底，另一个在使劲想把她拽出来。虽然证人证明之前这两个人确实是在高速路上打闹，但这里是俄罗斯，只要你不是那种达官显贵的子女，那撞人者几乎必然要被判有罪。</p><p></p><p>行人是弱势群体，开车的人有责任注意路况。这就是我，一瞬间被打落谷底的普通人……检察官最终要求入狱 7 年，或者用钱跟“受害者”私下和解。事故之后又过了几周，我收到了“受害者”亲属给出的条件，按当时汇率计算赔款是 8 万美元。这还不算聘请律师的费用。</p><p></p><p>其实对于优秀的软件工程师来说，8 万美元也不能算是特别大的一笔钱。但那段时间，我一直埋头于 core-js@3 的发布，期间不光没人付钱给我，反倒把我之前的积蓄给掏空了。 所以我拿不出那么多钱，也想不到能从哪里快速筹钱。我的时间不多了。</p><p></p><p></p><h2>求助于开源社区</h2><p></p><p></p><p>当时，core-js 已经全面铺开。虽然我一直没能给 core-js 找到贡献者，但这毕竟是个需要主动维护的项目，不能一直停留在原地。一旦入狱，不光我自己完蛋了，core-js 也会成为那么多用户的大麻烦。那可是世界上一半的网站，必须重视起来。</p><p></p><p>在之前几个月，我曾经尝试筹集资金来支持 core-js 的开发（主要是在 GitHub 和 NPM 上发布了 README）。结果是……每月进账 57 美元。是的，这就是开源社区愿意给一位保障网络兼容性的全职开发者开出的报酬😂</p><p></p><p>我决定做个小实验——向 core-js 用户直接求助，就是那些在 core-js 失去维护后会受到影响的人们。我在 core-js 安装上添加了这样一条消息：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6f/6f70aec0e0bb63613171386bb326f7ea.png\" /></p><p></p><p>我知道自己很难通过捐款获得全部资金，但每一块钱对我都很重要。我还发了一条求职消息，希望能通过工资消化掉一部分。我在 NPM 安装日志里也写了求助信息，大家不爱看可以隐藏，为 core-js 付出这么一点点代价不算过分吧？我本来以为，有几周时间事情就会有转机，但事实再次证明我根本就不懂人性……</p><p></p><p></p><h2>换来的只有恶言恶语</h2><p></p><p></p><p>我知道肯定有人不想看这条求助信息，但没想到这却成了舆论的主流。一天之内，几百条消息、帖子和评论直冲我的天灵盖，千言万语汇成一句：让这个弱智 zloirock 和他的 core-js 滚蛋！</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/31/314ec7e17623aaf8d3ca9fa3c80e9fbc.png\" /></p><p></p><p>比这激烈的言语还很多，但这里就不多说了。我的生活已经是一团糟，何必再纠结于这些让人心烦的东西。</p><p></p><p>开发人员之所以喜欢用免费开源软件，就是因为它们既不要求、效果又好。 他们对这些软件是怎么来的、耗费了多少精神根本不感兴趣，也不关心背后贡献者自己的问题和需求。他们觉得在自己用惯了的产品里添加信息，是对其用户空间的侵犯，甚至是对他们的侮辱 。对他们来说，开源社区应该是台精密而且任劳任怨的机器——只管干活，不要出声。</p><p></p><p>所以成千上万的开发者开始辱骂我，声称我无权向他们寻求帮助。我的求助信息激怒了他们，甚至导致他们要求限制我对代码仓库和软件包的访问，最好把权限直接移交给他人。很明显，他们几乎没人了解 core-js 的作用、项目的规模，也没人愿意真的站出来接过维护的重任。“该有人为社区做点什么了”，但绝对不能是他们自己。看到这一切，我觉得不能被他们牵着鼻子走，反而决定长期保留这些求助信息。</p><p>肯定有公司在 core-js 的帮助下赚了钱吧，比如那些大企业？但他们的脑回路其实是这样的：</p><p>公司：“我们想用 SQL Server Enterprise。”</p><p></p><p>微软：“一次性支付 25 万美元，之后每月 2 万美元。”</p><p>公司：“没问题！”</p><p>...</p><p>公司：“我们想用 core-js。”</p><p>core-js：“好啊，npm I core-js 就行。”</p><p>公司：“爽！”</p><p>core-js：“你们愿意在经济上提供点支持吗？”</p><p>公司：“哈哈，没门。”</p><p></p><p>几个月后，因为受不了用户的抱怨，NPM 启动了 npm fund——这可不是真想解决问题，只是为了安抚人心。大家扪心自问，你多久会用一次 npm fund？你身边有人向 npm fund 捐过款吗？你见过有人愿意向我这样的库维护者伸出援手吗？不仅没有，这还给 NPM 后面的一系列神奇操作埋好了伏笔。</p><p></p><p>前后过了 9 个月，成千上万的开发者，包括那些高度依赖于 core-js 的项目开发人员，都了解到我的困境。但没人愿意帮忙，连接替我做维护都不行。 几个月内，我跟一些依赖 core-js 的重要项目的维护者沟通过，但没有任何进展——他们不想浪费这个时间。因此，我只能求助于几位跟开源没有任何关系的朋友，至少大家想想办法让我免除牢狱之灾。</p><p></p><p>期间其实是有几位用户和几家小公司帮助过 core-js 的，我要感谢他们。但 9 个月过去，我只勉强筹集到预期捐款的四分之一。</p><p></p><p>虽然骂声不断，但 core-js 的单日下载量在这段时间几乎翻了一番。</p><p></p><p>2020 年 1 月，我锒铛入狱。</p><p></p><p>提前释放</p><p></p><p>我不想回忆在监狱里的那段时光了，总之我参加了劳动改造、身体健康受到严重破坏，身边不是毒贩、小偷就是杀手。当然，我上不了网，连台电脑都摸不着。</p><p></p><p>大概 10 个月后，我就被提前释放了。</p><p></p><p>出狱之后，我看过几十篇文章、几百条帖子和上千条评论，内容基本可以总结为这样一句话：</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b8/b8ce6bb2d3a886665929ea571e6fdf71.png\" /></p><p></p><p>这混蛋简直是最烂的维护者，在整个 GitHub 上简直绝无仅有。不知道他是怎么进去的，但我觉得他活该。</p><p></p><p>其实我也看到有人支持 core-js 的开发，提了问题、意见还发了私信，只是不像负面消息那么多。现在 core-js 更流行了，流行到超乎我的想象。</p><p></p><p></p><h2>再次为 Web 的兼容性而战</h2><p></p><p></p><p>我像以前一样回归了 core-js 维护岗位，但不再对靠这个项目找份固定工作抱任何期望。</p><p></p><p>Core-js 在资助平台上得到了一点支持，但不多，还不到开发 core-js 之前那个岗位的几分之一。但我就是一个人生活，所以基本够用。我愿意用困乏的生活换取全职搞开源……我不再考虑那数额庞大的诉讼费，不考虑自己的未来，我只关心 Web 能不能平稳走下去。当然，我希望有公司能给我个岗位，让我有机会直接参与 Web 标准方面的工作，能给 polyfill 和开源开发一点赞助就更好了。但也只是想想，不当真。</p><p></p><p>之后的两年间，项目取得了不少成果，但基本还是顺着之前的老路在走。我维护的仍然是 core-js@3，可它确实变得更好了。大家也能猜到，这些工作还是藏在幕后，普通用户根本接触不到。</p><p></p><p>基础性工作就是这样，整天跟标准和提案打交道，唯一能抚慰人心的就是自己的很多建议被写进了 ECMAScript 提案。但这不是我个人的成就，更多是拥护者和用户们的成就。我需要面对各种引擎，通过 bug 跟踪器找问题，在成百上千的环境 / 构建 / 测试套件组合中不断自动加手动测试，确保标准库能随处正常运行并收集兼容数据。通过一套几天内开发的设计原型，core-js 兼容数据终于能在内外部工具的支持下快速转化为详尽数据集。我还得设计各种项目内尚未出现的功能和原型，诸如此类。</p><p></p><p>前面已经提到，core-js 在大部分流行网站中广泛存在，提供了一套几乎完整的 JavaScript 标准库，并修复了各种错误实现。用 core-js 打开网页的次数，甚至大于 Safari 与 Firefox 打开网页的次数。所以从某个角度来看，core-js 可以说是最流行的 JavaScript 运行时之一。</p><p></p><p>维护 core-js 期间，我几乎成了所有现代和未来 JS 标准库功能的首个实现者，几乎所有功能中都有我的反馈和相应修复。Core-js 成为试验 ECMAScript 各类提案的最佳平台。一次又一次，用户们是在体验过 core-js 的提案实现之后，才对原始提案做出反馈。</p><p></p><p>JavaScript 的理想发展方式，就是让 TC39 与 core-js 继续为它保驾护航。例如，TC39 会邀请 Babel 等项目成员作为专家，但 core-js 明显得不到这样的重视。相反，我个人或者 core-js 这边提出的问题常常被忽略，甚至 TC39 的成员会公开给我使绊子：</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/cd/cdf1ba8dda38a87c4457fa25e4e3dae9.png\" /></p><p></p><p>现在最大的麻烦，就是怎么阻止 core-js 作者掺和进来。</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/27/27070e16f851cb180d6323873ea3df31.png\" /></p><p></p><p>过了一段时间，NPM 那边决定“支持”。在 2020 年底，作为 npm fund 继任者的 npm@7 中，安装后脚本将无法在控制台上输出信息。于是乎，人们看不到我的求助内容了，再加上大家感受不到自己在使用 core-js，所以支持者的数量开始下降。真正得益的，只有直接使用我的成果来开发具体项目的人们。</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/07/07c09ed42cd88ac53cc5445989cb53e6.png\" /></p><p></p><p>另外，还有一个重要因素。虽然资助额下滑，但 core-js 的质量却更高了。Core-js 库维护得怎么样？几乎没有公开报告的 bug，即使出现也几乎会被立即修复。库已经给了大家所需要的几乎一切，那还何必继续捐钱支持呢？毕竟在多数人看来，这不过是个“小库”，所以许多之前支持过 core-js 都慢慢停止了。</p><p></p><p>Core-js 代码中其实有我的版权。文章开头提到，目前约有半数网站在用它，经常有人在有害站点 / 应用程序的源代码中看到它，只是不知道这个“core-js”究竟是什么。后来警察曾给我打过电话，甚至有人据此敲诈勒索。这个过程很痛苦，真的。</p><p></p><p>美国和加拿大的记者曾多次联系我，因为他们在美国各大新闻和政府网站上发现了 core-js。抱着搞个大新闻的心态，他们在发现我并不是想象中那种“干预美国选举的邪恶俄罗斯黑客”后，毫不掩饰自己的失望之情。</p><p></p><p>随着时间推移，网上对我的谩骂倒是少多了，但也还是有。只是其中大部分不再通过 GitHub 问题或者 Twitter 帖子，而是直接给我发邮件或私信。前几天，就有开发人员给我发了条私信，说我是开发者社区里的寄生虫，赚了很多钱却啥也不管。他甚至把我描绘成那种靠收买法官而逍遥法外的杀人犯。他诅咒我本人和我全家。其实这也没啥，每个月我都会收到好几条类似的消息。毕竟去年，就有人说我是“来自俄罗斯的法西斯分子”了。</p><p></p><p></p><h2>你觉得，core-js 一个月能帮我赚多少钱？</h2><p></p><p></p><p>我在全职维护 core-js 期间，不算其他短工项目的收入，我每个月的回报大概是 2500 美元——只相当于我能找到的其他全职岗位的四分之一到五分之一。</p><p></p><p>但我愿意接受这一切，因为这能让 Web 变得更好。而且我觉得这一切只是暂时的，等问题和 bug 减少了，等产品的质量达到一定高度，咱这项目肯定能得到重视，对吧……对吗？</p><p></p><p>几个月后，月均收入减少到大约 1700 美元——其中 Tidelift 那边有 1000 美元，Open Collective 有 600 美元，Patreon 大概是 100 美元。除了这笔固定收入，还会有些比较稳定的一次性捐款，平均下来每月还有 100 美元吧。</p><p></p><p>至于加密货币，这倒是个挺时髦的通道。但自始至终，我的加密钱包只收到过 2 笔转账，总金额是 200 美元，上次收钱还是在一年多以前。GitHub 赞助者？这里可是俄罗斯，没这回事的。PayPal？俄罗斯人用不了 PayPal。但就算之前在国外，core-js 在这边的收益也就收到过大概 60 美元。开源补贴我也申请过很多次，但完全没有回音。</p><p></p><p>Bower 那边的每月捐款大概有 400 美元，这是另一个开源社区。我很感谢各位支持者，因为你们的捐赠，我才能在 core-js 上继续坚持下来。</p><p></p><p>但可以看到，这里没有任何一家大公司，也没有来自前 1000 名网站列表的企业。老实讲，目前的支持者主要是个人，还有几家小公司，每月付给我几美元。</p><p></p><p>但千万别说他们不知道我缺钱，我在网上看到过好多类似的图了：</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/41/41005cb0e0e7a58030f467a3004232f9.png\" /></p><p></p><p>一年前，Tidelift 不再给我发钱。他们说受政治局势影响，他们使用的 Hyperwallet 不再支持俄区（但我之前试过，只要改一下个人设置就能使用，直到上个月才彻底被封禁）。为了安全起见，他们会暂时把钱存起来。之前几个月中，我试着把这笔钱转进银行卡或者 Hyperwallet 账户，但对方只是回复说他们会尽量帮忙。到去年年底，他们干脆连邮件都不回了。现在我收到的结果如下：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2e/2e584718e19d744f376b329c1a261e06.png\" /></p><p></p><p>“您在 Hyperwallet 的账户已被封禁，因此我们无法支付。我们将立即中止您的转账协议。若您的 Hyperwallet 账户解封，请立即联系我们。”</p><p></p><p>好笑的是，我之前一年的钱就这么没了。所以从今年起，我的月收入不是 1800 美元，而是只有 800 美元了。 虽然他们不回我的邮件，但通过网站查询，我发现那边仍然在收捐赠者们发给我的钱。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1a/1a111cce8183a416120c331b8dda5144.png\" /></p><p></p><p>不知道如果同样的状况发生在其他用户身上，大家会做何反应。</p><p></p><p>另外，我从 OpenCollective 上收到的每月资金从 600 美元减少到了 300 美元左右。很明显，Bower 的财政储备快断了，所以这个月我总共能拿到大约 400 美元。</p><p></p><p>之前几个月，我衡量了一下自己在 core-js 上投入的时间。事实证明，每月大约是 250 个小时，相当于是一天都没休息。没有任何一份正经的全职工作会是这个样子。250 小时，换来 400 美元……每小时折合不到 2 美元。哪怕是在情况稍好的去年，时薪也就是 4 美元上下。虽然我有时候会缩短自己花在项目上的时间，但波动不会很大。</p><p></p><p>我仍然愿意为保障整个 Web 的兼容性承受这一切，包括没有福利、没有保险。</p><p></p><p></p><h2>搞开发的，肯定不缺钱、不缺 offer 吧？</h2><p></p><p></p><p>没错，各大 IT 巨头的高级软件工程师岗位确实薪酬可观，我也收到过不少 offer。但是，这些选择都会影响到我对 core-js 的维护和贡献。</p><p></p><p>除了常见的威胁、指责、要求和侮辱，我还经常听到类似“别搁这要饭了，找个班上”之类的话语。有趣的是，他们中有很多人年收入超过 30 万美元（我跟他们的同事交流过，所以这点属实），而 core-js 的存在大大降低了他们日常工作的难度。</p><p></p><p></p><h2>一切都变了</h2><p></p><p></p><p>当初为 core-js 奉献一切的时候，我是一个人。但现在我有了家庭，一年前儿子也出生了。现在，我得为他的生活和发展考虑。</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/54/540c2b9d2d000655ff59ae5017aae50a.png\" /></p><p></p><p>我妻子有时候也会想要一双新鞋、想要个包，想买部 iPhone 或者一块 Apple Watch。我的父母年纪也大了，在经济上需要我的支持。</p><p></p><p>很明显，指望继续维护 core-js 来满足这些需求根本就不可能。我的储备金确实顶了一阵子，但现在也用完了。</p><p></p><p>很多人指责我“别再开源社区混了，这是自我放弃。好好找个班上吧。某某才干了一年开发，技术根本就不行，但挣的已经是你的好几倍了。”</p><p></p><p>所以我真的受够了。我喜欢开源，喜欢维护 core-js。但我到底为什么要坚持，为了谁在坚持？</p><p></p><p>请允许我做个小总结：</p><p></p><p>我保证没有兼容性问题，并从 2014 年起为大多数 Web 提供各平台上的前沿功能。我几乎把所有时间都投入了进来，但现在连吃饭都成问题。我没看到任何感激和致谢，反而被恶言恶语持续痛击……我的工作不是让他们的生活更美好了吗？通过使用 core-js 节约并赚取几百万美元的公司，对 core-js 的资金需求完全熟视无睹。即使是在我最危急的情况下，人们对我的求助仍然冷漠以对，甚至落井下石。我不但没机会跟参与 Web 标准和浏览器开发的同行们一起改善 JavaScript，反而成了他们的眼中钉。</p><p></p><p>其实对负面言论，我已经心如止水，否则我早就离开开源社区了。</p><p></p><p>我可以容忍标准制定者对我的忽视，毕竟我的贡献对象首先是用户，之后才是 Web 崩溃时影响到标准开发者。</p><p></p><p>但钱很重要，钱可太重要了。我受够了以牺牲自己和家人生活品质的方式白做贡献。我要保护我的家人，让我的孩子能过上幸福的生活。</p><p></p><p>Core-js 上的工作几乎占用了我所有的时间，比全职岗位还多。 它保障了大多数流行网站的正常运行，这项工作也值得一份适当的报酬。我不会再继续无偿，或者以每小时 2 美元的低薪工作了。对于现在的我，时薪至少要达到 80 美元。这个要求并不过分，eslint 团队成员一小时就赚这么多。如果开源项目需要，我也愿意付清诉讼费并离开俄罗斯——但我现在没钱。</p><p></p><p>我经常看到这样的评论：</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/bc/bc8b52043a4faed3c8ff40fcef637c5c.png\" /></p><p></p><p>这个项目每月都需要资助，否则就得不到维护、没有更新、修复不了 bug 和安全漏洞。这是个很好的项目，别让它就这么毁了。</p><p></p><p></p><h2>未来方案</h2><p></p><p>听你们的，下面我打算采取这样的方案。</p><p></p><p>根据反馈，core-js 接下来将选择以下发展思路之一：</p><p></p><p>适当的财务支持</p><p>希望读到这篇文章的企业、小公司和开发者能认真考虑现有开发堆栈的可持续性，并适当为 core-js 提供支持。有你们的帮助，core-js 将得到适当维护，我也能专注于添加更多新功能。</p><p></p><p>随着工作规模越来越大，我一个人肯定是不够的。有些工作，比如提高测试覆盖率、增加说明文档之类，虽然简单但却要耗费大量时间。所以我想用捐赠款至少招一到两位开发人员（最低是在校学生，有经验更好）。</p><p></p><p>考虑到额外的人手和其他费用，我觉得目前一个月 3 万美元就足够了。能有更多的钱当然好，可以让产品质量继续提升、开发进度再上个台阶。如果钱达不到，我也愿意继续一个人维护项目，但在效率上肯定没法跟团队相比。</p><p></p><p>我可能会去找份工作，从事开源和 Web 标准方面的工作。</p><p></p><p>这样我会存点钱，给后面的开源贡献积攒资本。</p><p></p><p>如果始终得不到用户的适当支持，core-js 将转为商业项目。</p><p></p><p>目前的 core-js 包没法做商业延展，所以后续的主要版本很可能会变更许可证。免费版将面临很大限制，一切额外功能都要收费。Core-js 还将保持发展，项目范围内会有更多新工具来保障 Web 兼容性。这种方式会大大缩小 core-js 的传播空间，也会给很多开发者带来问题。但即使能有一小部分转化成付费客户，都足够让我养家糊口了。</p><p></p><p>慢慢退出，让 core-js 自生自灭。</p><p></p><p>我其实认真规划过转为商业项目后的路线，也有不少理想的岗位选择，但这些都会大大消耗我的个人时间。当然，我不会立马完全停止对 core-js 的维护，但作为志愿者我能付出的时间肯定不如之前。按目前的工作选项推断，那我每月能参与维护的时间只有几个小时。这意味着 core-js 将不再发展，最多是修修小 bug 和更新一下兼容性数据。一段时间后，core-js 将逐渐失效并宣告死亡。</p><p></p><p>我仍然怀抱美好的愿望，希望大家能选择第一种方式。毕竟 core-js 已经成为现代数字基础设施中的关键组成部分之一，但从过往的经历来看，我也做好了走其他几条路的心理准备。谢谢大家。</p><p></p><p>原文链接：</p><p></p><p>https://github.com/zloirock/core-js/blob/master/docs/2023-02-14-so-whats-next.md</p>",
    "publish_time": "2023-02-15 14:20:38",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "“开发和运维”DevOps只是一个开始，最终目标是质量工程",
    "url": "https://www.infoq.cn/article/rUdJbb6hGtxw2hTJcerX",
    "summary": "<p>DevOps始于2009年，这种范式让许多组织能够加快软件交付速度和提升业务绩效，正如“<a href=\"https://cloud.google.com/blog/products/devops-sre/announcing-dora-2021-accelerate-state-of-devops-report\">Accelerate报告</a>\"”及其著名的DORA指标——速度、稳定性和恢复——所描述的那样。</p><p>&nbsp;</p><p>敏捷首当其冲，与DevOps成为组合，在相同的工作流中平衡业务价值和技术交付。</p><p>&nbsp;</p><p>最近的一些实践，如可靠性或安全性，都采用了“SRE”和“DevSecOps”这两个术语。</p><p>&nbsp;</p><p>然而，来自<a href=\"https://cloud.google.com/blog/fr/products/devops-et-ingenierie-sre/2021-accelerate-state-devops-report\">谷歌</a>\"、<a href=\"https://circleci.com/resources/state-of-devops-report-2020/\">Puppet</a>\"、<a href=\"https://circleci.com/resources/state-of-devops-report-2020/\">CircleCI</a>\"和<a href=\"https://info.dynatrace.com/global-all-wp-cxo-devops-report-2021-public-sector-18730-registration.html\">Dynatrace</a>\"等公司的各种DevOps状态报告都揭示了他们对这个生态系统的一些相似的发现——难以持续及时交付业务价值和创新、孤立的团队缺乏一致性、碎片化的工具链和质量的牺牲。</p><p>&nbsp;</p><p>本文将分享如何利用过去几年积累的经验和实践，通过质量工程来改进DevOps范式，从而带来更多的价值，并解决这些已知的痛点。</p><p>&nbsp;</p><p></p><h2>“开发和运维”DevOps只是一个开始</h2><p></p><p>&nbsp;</p><p>DevOps没有固定的宣言，理由很简单——为演进留下空间。</p><p>&nbsp;</p><p></p><blockquote>“我们并没有对DevOps做出确切的定义。我们让它朝着各个方向扩展，研究不同方向之间的改进可能意味着什么。人们很纠结DevOps究竟是应该是怎样的。”——Patrick Debois，Snyk（之前的DevOpsDays）顾问，摘自由Puppet和CircleCI提供的“<a href=\"https://circleci.com/resources/state-of-devops-report-2020/\">2020年DevOps状态报告</a>\"”</blockquote><p></p><p>&nbsp;</p><p>最初促进开发和运营流程的DevOps概念走向了多个方向。在安全性方向有了“DevSecOps”，在深入<a href=\"https://cloud.google.com/blog/products/devops-sre/using-the-four-keys-to-measure-your-devops-performance\">研究企业实践</a>\"后，谷歌甚至将可靠性作为指标的一部分添加了进去。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/be/be1aa159d01c886811b157f477e30db4.png\" /></p><p></p><p>图1. DevOps继续在许多方向上发展演进</p><p>&nbsp;</p><p>但当前生态系统中的创新和竞争在不断提高参与者的门槛。一些新公司可以在<a href=\"https://openvc.app//blog/how-to-unicorn-startup\">不到3个月的时间</a>\"里达到10亿美元的估值，这给同一领域现有的公司带来了压力。因此，<a href=\"https://www2.deloitte.com/us/en/pages/about-deloitte/articles/press-releases/deloitte-launches-2021-quality-engineering-report.html\">85%的公司</a>\"感到有必要通过软件来重塑他们的业务以求得生存。</p><p>&nbsp;</p><p>对于许多组织来说，软件交付仍然是一个业务限制因素。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e6/e657fba012fee096d6334aae6463958f.png\" /></p><p></p><p>图2. 软件限制因素会直接对业务造成限制</p><p>&nbsp;</p><p>因此，DevOps目前的发展状态水平还不够高。业务价值、安全性和可靠性只是保持竞争力需要满足的部分需求。平衡质量和速度需要一个跨越整个软件生命周期（从业务想法到运维）的范式转换，要“构建得更好，构建得更快”。</p><p>&nbsp;</p><p>要达到这一水平，DevOps必须能够发展到通过全速质量软件（Quality at Speed Software）在工程系统的所有领域实现持续的价值交付。</p><p>&nbsp;</p><p></p><h2>用集成方式来简化有价值的活动</h2><p></p><p>&nbsp;</p><p>DevOps最初在从代码到运维方面进行了大量改进，这导致出现了许多专注于加速开发团队和运维团队之间的流程的方法。</p><p>&nbsp;</p><p>然后，敏捷和精益等方法与DevOps结合，以便用更高的效率更好地关注价值交付，旨在实现“全速软件（Software at Speed）”。还增加了一些具体的要求，如持续性实践，包括监控、安全性或测试。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ac/acacec4cd291815a7c9933266a9982fd.png\" /></p><p></p><p>图3. 即使有了Accelerate报告中所提及的发现，质量需求也只是刚刚开始被考虑到</p><p>&nbsp;</p><p>Accelerate报告解释了软件交付和业务结果之间的正相关关系，定义了执行者类别——“精英”执行者们每天稳定地进行多次发布。</p><p>&nbsp;</p><p>但随着每天多次交付成为当今竞争的常态，只能通过交付更多的价值来获得竞争优势。因此，DevOps必须进行转变，以便更好地与现有方法集成，创建全速质量（Quality at Speed）流程。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8f/8fcaa01f2eaa3d408fe0dd2bbe9a829b.png\" /></p><p></p><p>图4. DevOps必须简化质量流程</p><p>&nbsp;</p><p>第一个改变是综合“从客户到代码”和“从代码到客户”这两个数字转型流程，正如米其林集团首席信息官Yves Caseau在《<a href=\"https://www.amazon.com/Lean-Approach-Digital-Transformation-Customer/dp/1032225017\">数字转型的精益方法</a>\"》一书中所说的那样。</p><p>&nbsp;</p><p>DevOps必须从一开始就将敏捷、全面质量和精益启动与全局视角相结合。将用户描述与CI/CD平台中的代码部署联系起来只是一个开始。共享的工作方式和支持工具必须进行更好地集成，以便实现更快、更有价值的从业务想法到运维的迭代。</p><p>&nbsp;</p><p>第二个改变是创建专门的实验、核心业务和技术平台价值流。与DevOps打破端到端孤岛的思维模式保持一致，每个流必须能够相互解耦迭代，以确保它们对质量和速度的需求能够得到满足。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1c/1c3ec2008d31026efdea0b18db8bc70f.png\" /></p><p></p><p>图5. 左移是实现全速质量软件的范式之一</p><p>&nbsp;</p><p>SRE和DevOps是专门用于满足可靠性和安全性非功能性需求的流程。后续的演进目标是满足软件生命周期中的其他需求，如可观察性、可用性和可持续性，避免无法实现它们或试图在之后通过高成本的返工来恢复。</p><p>&nbsp;</p><p>最后一个改变是系统性地应用端到端价值流约束理论。整个生命周期中最薄弱的一点是确定<a href=\"https://www.leanproduction.com/theory-of-constraints/\">整个系统</a>\"的质量和速度水平，价值流映射和移除限制因素必须成为DevOps改进习惯的一部分。</p><p>&nbsp;</p><p>虽然这些演进改进了协作流程，获得了更多价值，但预期的加速需要的不仅仅是方法。技术必须让组织能够快速地演化和采用软件。</p><p></p><p></p><h2>用最小可行架构来构建平台</h2><p></p><p>&nbsp;</p><p>为了支持更快的迭代，DevOps非常强调集成和部署阶段的自动化。部署自动化通过为开发人员提供原生管道提升了软件质量，并降低了总体维护成本。<a href=\"https://circleci.com/resources/state-of-devops-report-2020/\">2020年Puppet报告</a>\"显示，超过60%的公司表示他们的DevOps处于中期演进阶段。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ad/ad5e946ff82ba4229bd2d96c893a3e4a.png\" /></p><p></p><p>图6. GitLab 2022年全球DevSecOps调查报告显示，现代DevOps提升了安全性，但缺乏集成</p><p>&nbsp;</p><p>好的方面是在利用技术和思维方式的变化为开发人员提供自助服务功能方面取得了进展。所有这些逐步利用云原生功能的自动化经验让我们能够更好地设想目标架构，从而帮助我们实现“更好、更快的构建”。</p><p>&nbsp;</p><p>通过自助服务改进的自动化和协作生成了更多关于流程执行、性能和交互的数据。随着运维数据科学的不断成熟，部署的MLOps和AIOps组件将能够提供跨生命周期的持续可见性和自动化，就像<a href=\"https://www.sealights.io/\">Sealights</a>\"那样。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/58/58bd8219386a75d763abe4772658db1f.png\" /></p><p></p><p>图7. DevOps架构必须整合全速质量平台</p><p>&nbsp;</p><p>DevOps转变需要整合以下这些平台。</p><p>&nbsp;</p><p>基础设施平台；开发者平台；实验平台。</p><p>&nbsp;</p><p>每一个平台都是在彼此的基础上逐步成熟，以最小的承诺和返工来满足质量要求。这种渐进式实现就是所谓的<a href=\"https://www.infoq.com/articles/minimum-viable-architecture/\">最小可行架构</a>\"，通过交付最小的架构增量来支持产品迭代，实现更好的目标匹配和更快的采用。</p><p>&nbsp;</p><p>基础设施平台让运维团队能够通过自动化和云能力来提升生产力。这些改进可以用于构建开发者平台，支持更快的核心业务变更迭代，同时又能满足多种质量需求，包括功能可用性、性能和安全性。</p><p>&nbsp;</p><p>然后，业务可以利用满足质量需求的软件交付加速周期来迭代业务变更。在这个阶段，公司可以主张独特的价值，并且可以通过实验平台提供的自助工具和集成解决方案更快地实现它们。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ee/ee9718ab932574109ead09a0c04522c5.png\" /></p><p></p><p>图8. <a href=\"https://www.uber.com/en-FR/blog/xp/\">Uber</a>\"的实验平台</p><p>&nbsp;</p><p>构建基础设施的工程师、开发人员和实验平台都要将用户视为他们的客户。每个平台的满意度和性能直接与它们试验和改进业务的能力挂钩，并最终提供良好的用户体验。</p><p>&nbsp;</p><p>MACH（微服务、API、云、Headless）架构显著提升了平台组件的模块化、可组合性和可伸缩性。它不再是关于构建孤立的模块和框架，而是关于构建可伸缩的平台，为企业价值交付的加速周期提供支持。</p><p>&nbsp;</p><p>这种技术转变需要团队在同一个愿景上保持一致，具备使其成为现实的灵感和动力，克服组织的阻力，并有效地改变在软件生命周期中参与协作的参与者的习惯。</p><p>&nbsp;</p><p>这里是管理发挥关键作用的地方。</p><p>&nbsp;</p><p></p><h2>管理和驱动端到端价值交付</h2><p></p><p>&nbsp;</p><p><a href=\"https://puppet.com/resources/report/2021-state-of-devops-report\">Puppet的DevOps报告</a>\"中提到了让公司陷在DevOps转变中间阶段的文化障碍——阻碍冒险（21%）、责任不明确（20%）、缺乏快速确定优先级的能力（18%）——导致反馈循环不足，限制了公司加快价值主张的速度。</p><p>&nbsp;</p><p>成功实现DevOps转变的公司明白，有效的管理对于打破现有的藩篱并实现更快的迭代流程是必要的。但是，从遗留文化模型到DevOps模型的重大转变让许多管理人员被困在技术和工程问题的泥潭里。</p><p>&nbsp;</p><p>DevOps团队需要专注于他们的工作，以便提高组织的成熟度和改进组织流程。然而，这导致一些人认为DevOps只是与工程问题有关。为了对迭代的端到端流程产生更大的影响，并交付更多的业务价值，管理者必须走出他们的舒适区。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c6/c6938516fdb729fd8a92e1f86cf756d5.png\" /></p><p></p><p>图9. DevOps中的管理转变必须是端到端的，并且能够增加价值交付</p><p>&nbsp;</p><p>DevOps中的管理者角色必须改变其定位。</p><p>&nbsp;</p><p>提升（Shift Up）DevOps的价值定位并增加交付；分享愿景，为产出结果赋能；驱动端到端转型变化。</p><p>&nbsp;</p><p>Shift Up这个概念<a href=\"https://qeunit.com/blog/shift-up-quality-beyond-technicity/\">来自软件质量</a>\"，软件质量的定义、沟通和度量是在运维团队之外完成的，以使整个组织系统在质量需求上保持一致。例如，与C级高层、总监和业务线经理协作定义软件产品的质量需求。</p><p>&nbsp;</p><p>其好处是通过让关键利益相关者对每个角色的价值和对软件产品的期望保持一致来改进变更管理。然后利用这个共识来获得必要的投资和支持，以实现质量需求和组织变化，特别是当它们涉及到技术时。</p><p>&nbsp;</p><p>要让DevOps成为实现成功的数字化转型的必要条件也需要同样的转变。凤凰项目就是一个很好的例子，它向我们展示了DevOps是如何帮助改进业务的。推动DevOps的管理者必须走出他们的舒适区，与业务利益相关者互动，促进一种观念上的改变——即DevOps不是关于工程，而是关于加速业务再造。</p><p>&nbsp;</p><p>第二个关于管理上的改变是在公司的所有团队之间系统地共享DevOps愿景，而不是将想法局限在工程领域。这种鼓舞人心的愿景必须涉及业务目标、设想的未来、即将到来的变化、风险和计划，这有助于团队实现这些变化。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/41/415c43239f6f3afd69cb1ffffe497fd4.png\" /></p><p></p><p>图10. DevOps管理必须消除最重要的限制因素</p><p>&nbsp;</p><p>这就要求管理者关注端到端的领导力变革。他们首先需要实现控制管理，为他们的团队赋能，解决跨组织的障碍，并改进业务价值交付。他们必须适当地分配工作，推动最大程度的变化发生。例如，当团队需要花费几天或几周时间定义规范时，却花时间在改进只能减少几分钟时间的自动化上。</p><p>&nbsp;</p><p>管理层还要负责让组织保持一致，创建与目标业务架构保持一致的生态系统。</p><p>&nbsp;</p><p></p><h2>让组织与目标架构和流程保持一致</h2><p></p><p>&nbsp;</p><p>许多公司的重组都会更新可视化的组织结构图，但没有做日常的业务做出任何改变。他们通常试图让每个人都参与进来，让他们感受到“参与”和“包容”，但却未能给陷入重组周期的公司带来持久的变化和改善。</p><p>&nbsp;</p><p>表面的重组有一个共同的问题，那就是没有让组织与流程保持一致，缺乏对不断变化的交互和强有力决策的关注，比如哪些团队应该首先做出改变，哪些职责必须发生改变，以及如何实现有效的责任模型。</p><p>&nbsp;</p><p>DevOps组织是关于如何实现业务再造。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/46/46ab0247a5771d884357425a11c23e20.png\" /></p><p></p><p>图11. DevOps组织必须在以产品为中心的组织中与业务相结合</p><p>&nbsp;</p><p>为了扩大DevOps的影响，必须进行结构化的改变。</p><p>&nbsp;</p><p>定义真正的产品组织；建立真正的“平台即产品”团队；与职责模型保持一致。</p><p>&nbsp;</p><p>要让公司采用产品组织模式，首先需要消除“产品管理”（即业务）和“产品工程”（即“IT”）的藩篱，从全局考虑问题。这种人为的分离仍然在许多组织中存在，让人们觉得藩篱仍然很重要，从而限制了沟通互动，造成了许多低效率的放任。</p><p>&nbsp;</p><p>团队必须作为单一的跨职能单位，在拥有端到端流程全部所有权的地方专注价值流的交付。挑战在于如何组合团队，以满足他们职责范围内的特定质量需求。例如，致力于用户体验的部门与财务后台部门所面临的挑战是不一样的。</p><p>&nbsp;</p><p>实现DevOps产品组织的第二个变化是采用《团队拓扑》一书中所描述的“平台即产品”方法。其目标是通过逐步创建一个提供自助服务平台、支持跨职能团队的专业角色或交付领导角色的平台团队让<a href=\"https://www.thoughtworks.com/insights/articles/demystifying-conways-law\">团队的结构</a>\"和交互与目标架构保持一致。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c0/c080eb4459c8a2b8d06cab2fc496032b.png\" /></p><p></p><p>图12. 用团队拓扑建立全速质量增量组织</p><p>&nbsp;</p><p>为了实现上述的措施奏效，领导层必须做出强有力的投资决策，并向组织阐明这些投资决策。由于资源有限，公司不得不对投资做出权衡，但过多的妥协会导致绩效降低，远远达不到要求。</p><p>&nbsp;</p><p>领导层必须决定哪些团队获得更多的资源——甚至可以超出保证服务持续性所需的资源，而让一些团队仍然使用有限的资源。他们需要阐明哪些团队必须为复杂的子系统（如单体系统）尽最大努力地工作，或者哪些决策仍然是中心决策，如为了保持一致性而采用的中心架构。</p><p>&nbsp;</p><p>近来的演变还包括为实现“全速质量”目标而出现的特定角色。“交付所有者”负责价值交付流程，“实践领导者”负责高标准地开发专业技能，并确保知识得到共享。</p><p>&nbsp;</p><p>组织一致性是促进和维持业务和架构转变的主要动力之一。在日常工作中，结构和交互的定义依赖于技术，但主要还是依赖于参与者跨生命周期的协作。最后一个重要的转变是技能。</p><p>&nbsp;</p><p></p><h2>构建可持续发展技能的生态系统</h2><p></p><p>&nbsp;</p><p>对DevOps技能的关注反映了生态系统的成熟度，对“云工程师”的培训侧重于自动化、基础设施即代码，或特定的云服务部署。虽然这些基本能力都是必要的，但还不足以为公司再造提供足够的质量和速度。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/9b/9bd497c8265f879dac5d498c945ae5a7.png\" /></p><p></p><p>图13. DevOps路线图仍然停留在较底层的技术上（<a href=\"https://www.linkedin.com/pulse/devops-roadmap-2021-2022-sandip-das/\">LinkedIn</a>\"）</p><p>&nbsp;</p><p>面临的一个主要挑战是技能专业化虽然提升了质量，但同时也降低了交付速度。一方面，专业知识引入了更多的垂直领域，如“SRE”或“安全性”，但由于技能之间存在区别，这些专业角色之间的协作变得更加困难，这可能会影响价值交付的速度。</p><p>&nbsp;</p><p>全球技术人才稀缺不利于应对这一挑战。组织努力吸引和保留转型所需的人才，而全球都面临着直接限制公司转型的人才稀缺的压力。一些重新转化人才和简化技术的措施有所帮助，但还不够。</p><p>&nbsp;</p><p>为了实现全速质量，组织必须通过以下几个要素来平衡技能。</p><p>&nbsp;</p><p>灵活和开放的职业道路；在可扩展的技能（即平台）上的投入；用于技能发展的专门资源。</p><p>&nbsp;</p><p>第一个转变是拥抱更灵活、更开放的职业道路。许多组织甚至为DevOps引入了Taylorism模型，为特定任务设置了“云工程师”职位。不过，在利用他们的互补技能的同时，他们可以学习工作的中部分内容，从而让公司能够加速进一步的转型。</p><p>&nbsp;</p><p>“T型”技能出现在那些能够结合垂直技能（如软件工程师）和水平技能（如敏捷）的人身上。研究表明，这种模式正在朝着“π型”甚至“梳子型”的方向发展，人们能够结合多种专长，从而让与个人的合作变得更加快速，并让他们可以有更丰富的职业生涯。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ac/acd3b245a66ad2450f97b85504da74fd.png\" /></p><p></p><p>图14. 在一个持续学习的生态系统中，DevOps技能获得横向发展</p><p>&nbsp;</p><p>这种适应和持续学习的能力意味着组织必须改变范式和生态系统来支持这种变化。他们必须为指导计划进行专门的投入，引入实践领导的角色来激励人们，并确保每周有系统的培训时间，而不是一年一次。</p><p>&nbsp;</p><p>其他的实践，如实践社区、会议和演讲，对于培养一个有吸引力的生态系统来说仍然是很有用的。在这里，人们可以获得自我发展。Zalando、Uber或Netflix等公司成功地将开源作为吸引人才的方式，同时对产品进行内源化，让人才能够在产品上进行全球性协作。</p><p>&nbsp;</p><p>虽然并非所有的公司都有这些巨头那样的规模和资源，但所有的公司都可以直接在可重用和可扩展的技能上投入，如技术集成和平台。在一个技术组件变成模块化服务的生态系统中，公司需要构建的东西将更少，需要组合的东西将更多。</p><p>&nbsp;</p><p></p><h2>全速质量DevOps是持续的价值交付</h2><p></p><p>&nbsp;</p><p>这种跨越方法、架构、管理、组织和技能领域的DevOps转变要求整个软件工程系统进行横向的演进，以便实现持续的价值交付。</p><p>&nbsp;</p><p>文化、方法和自动化都是DevOps的良好开端，但我们的竞争生态系统只会维持那些能够通过全速质量软件迅速改造和扩展其价值主张的组织。</p><p>&nbsp;</p><p>我们在想，基于这种演变，DevOps是否还应该保持同样的叫法，毕竟它超越了“Dev”和“Ops”的界限，并成为支持组织数字化转型的不可或缺的支柱。</p><p>&nbsp;</p><p>DevOps的未来是质量工程。</p><p>&nbsp;</p><p>原文链接：<a href=\"https://www.infoq.com/articles/devops-enable-quality-speed/\">https://www.infoq.com/articles/devops-enable-quality-speed/</a>\"</p><p></p><h5>相关阅读：</h5><p></p><p><a href=\"https://xie.infoq.cn/article/4e6da4299b1db08ed21b52680\">落地 DevOps 的路线图</a>\"</p><p><a href=\"https://xie.infoq.cn/article/77df3cbbbbadda5f5870777e3\">如何理解 DevOps？</a>\"</p><p><a href=\"https://www.infoq.cn/article/kxOYolQQcddhKtCyim4E\">DevOps 的未来是无代码</a>\"</p><p><a href=\"https://xie.infoq.cn/article/db3f75b66c63635a604aa27d0\">DevOps 实践多年，最痛的居然是？</a>\"</p>",
    "publish_time": "2023-02-15 14:39:14",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "为什么说Next.js 13是一个颠覆性版本",
    "url": "https://www.infoq.cn/article/VbDui4DRa2Lhq3h0ad2Z",
    "summary": "<p>Next.js 是一个基于 React（一个用来构建用户界面的流行库）之上而构建的 JavaScript 框架。这意味着你可以使用 React 来构建应用程序，而 Next.js 提供了更多的工具和功能来使这个过程更简单。</p><p></p><p>Next.js 的主要优点之一是它支持服务器端渲染。这意味着服务器可以为页面生成 HTML 并将它发送到客户端，而不是在客户端使用 JavaScript 生成 HTML。这可以提升性能和应用程序的 SEO（搜索引擎优化）。</p><p></p><p>Next.js 还包括一些在构建和部署 Web 应用程序时非常有用的其他功能。例如，它具有自动代码拆分功能，应用程序只会加载当前页面所需的代码，而不是一次性加载所有代码。这可以提升应用程序的性能。Next.js 还有一个内置的开发服务器和用来部署应用程序到生产环境的工具链。</p><p></p><p>通过上面的介绍，你对 Next.js 应该有了更多了解。现在让我们一起看看 Next.js 13 又带来了哪些新功能。</p><p></p><p></p><h2>Next.js 13 有哪些新功能?</h2><p></p><p></p><p>Next.js 13 是集成 React 的两个身份（UI 库和框架）的第一次全面尝试。那么，它有哪些新功能？</p><p></p><p></p><h3>1. 可选的 App 目录用于基于文件的路由</h3><p></p><p></p><p>Next.js 最佳特性之一就是基于文件的路由。它可以使用项目目录结构来指定路由，而不是在诸如 react-router 之类的程序中处理复杂的路由设置。通过在目录页中增加入口点，你可以创建一个新路径。</p><p></p><p>Next.js 13 通过新目录更新了文件路由。可选的 app 目录引入了新的布局结构以及一些新功能和改进。</p><p></p><p>由于新的路由机制，目录结构发生了微小的变化。路由中的每个路径都有一个包含 page.js 文件的专用目录，这个 page.js 文件是 Next.js 13 中的内容入口点。</p><p></p><p></p><h4>路由上的差异</h4><p></p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/bb/bb38778ded7818eb71b16fa50dd8d701.png\" /></p><p></p><p>由于采用了新的结构，我们现在可以在每个路径目录中包含其它文件。例如，page.js 针对一个路由：</p><p></p><p>layout.js — 一个路径及其子路径系统。loading.js — 一个基于 React 的即时加载系统。</p><p></p><p>基于底层机制和 error.js，如果主组件不能加载，则会显示一个异常组件。</p><p></p><p>我们现在可以在路径目录中定位源文件，因为每个路径就是它的目录。</p><p></p><p></p><h3>2. React 服务器端组件</h3><p></p><p></p><p>Next.js 新版本中最令人兴奋的就是对 React 服务器端组件的扩展支持。服务器端组件使我们可以在服务器端运行和渲染 React 组件，从而实现更快的交付、更小的 JavaScript 包以及开销更少的客户端渲染。</p><p></p><p>此外，根据生成路由所需的数据类型，服务器端组件会在构建时或运行时自动缓存来提高性能。</p><p></p><p>结合服务器端组件和客户端组件，你可以将服务器端组件用于程序中快速加载、非交互性的部分，将客户端组件用于交互、浏览器 API 和其它功能。</p><p></p><p></p><blockquote>在为 Next.js 应用程序构建客户端组件时，你可以在文件顶部使用’use client’指令将其指定为客户端组件。如果你使用了任何第三方包，则可能需要创建一个客户端包装器。</blockquote><p></p><p></p><p></p><h3>3. 异步组件和数据获取</h3><p></p><p></p><p>此外，Next.js 13 引入了异步组件，这是一种为服务器端渲染的组件收集数据的新方案。当使用异步组件时，我们可以通过 async &amp; await 使用 Promises 来渲染系统。</p><p></p><p>当从返回 Promise 的外部服务或 API 请求数据时，我们将组件声明为 async 并等待响应：</p><p></p><p><code lang=\"javascript\">async func getData() {\n  const res = await fetch ('https://api.shamim.com/...');\n  return res.json();\n}\n\nexport default async function About() {\n  const name = await getData();\n  return '...';\n}</code></p><p></p><p>下面的例子演示了 Next.js 12 从第三方服务获取数据的方法：</p><p></p><p><code lang=\"javascript\">\nexport default function About({data}) {\n  return '...';\n}\n\nfunction getServerSideProps(){\n    // Fetch data from external API\n    const res = await fetch(https://.../data)\n    const data = await res.json()\n\n    // Pass data to the page via props return\n    return { \n        props: { data } \n    }\n}</code></p><p></p><p>这种方式简化了 API 请求，并且在新版本中非常直观且易于理解。</p><p></p><p></p><h3>4. 流式加载</h3><p></p><p></p><p>以前，用户可能需要等待生成完整的页面。现在，服务器会在生成 UI 小片段时直接传送给客户端。这意味着较大的片段不会阻碍较小的片段。当然，到目前为止，该功能只支持 app 目录，而且这一点看起来不会改变。</p><p></p><p>这项新功能给具有强信号网络连接或快速 Wi-Fi 的人所带来的好处比不上给那些弱信号网络连接的人带来的好处。事实上，它们所带来的好处比你想象的要多得多。更快的站点加载时间将提升用户体验，这点是非常棒的。</p><p></p><p></p><h3>5. Turbopack</h3><p></p><p></p><p>Next.js 13 版本中引入的最后一个重要变化是一个名为 Turbopack 的新 JavaScript 包，它被称为“Webpack 的继任者”。Webpack 是最常用的 JavaScript 构建工具之一，功能强大且可配置，但有时会非常慢且复杂。</p><p></p><p></p><blockquote>Turbopack 是由 Webpack 的创建者开发，用 Rust 创建，其速度有望比最初的 Webpack 快 700 倍（比更现代的替代品 Vite 快 10 倍）。</blockquote><p></p><p></p><p></p><h2>其他升级</h2><p></p><p></p><h3>next/image</h3><p></p><p></p><p>Next.js 中的新 Image 组件包括更少的客户端 JavaScript、样式和配置，改进了可访问性。在代码层面的变化，next/legacy/image 导入变成了 next/image，next/future/image 导入变成了 next/image。有一个 codemod 可以用来进行快速迁移。</p><p></p><p></p><h3>next/font</h3><p></p><p></p><p>你可以将 Google Fonts（或者任何其它自定义字体）与 @next/font 一起使用，无需浏览器提交任何查询。除了其它静态资源外，CSS 和字体文件都是在构建时下载。</p><p></p><p></p><h3>next/link</h3><p></p><p></p><p>这是一种新颖的字体系统，通过提供自动字体优化、集成自定义字体以及所有这些功能无需使用任何外部网络请求，从而提高了效率和隐私。</p><p></p><p></p><h2>结论</h2><p></p><p></p><p>Next.js 13 无疑包含了几个很酷的功能和显著的更新。但是由于它的很多功能给人感觉是未完成的半成品，所以只能算是一个预览测试版本。甚至最新的 React 中一些尖端功能（这些功能被大量使用但仍处于 RFC 阶段）也经常不包括在内。</p><p></p><p>虽然我不建议在生产环境中使用 Next.js 13，但你上手应该试一试。</p><p></p><p></p><h5>原文链接：</h5><p></p><p><a href=\"https://blog.bitsrc.io/why-next-js-13-is-a-game-changer-2167658d9de2\">https://blog.bitsrc.io/why-next-js-13-is-a-game-changer-2167658d9de2</a>\"</p><p></p><h5>相关阅读：</h5><p></p><p><a href=\"https://www.infoq.cn/article/sITi66wc3mvcNs3PeRkb\">Next.js 13 新的实验性特性，实现 App“动态无限制”</a>\"</p><p><a href=\"https://www.infoq.cn/article/9G0lBWi2W58114ggfyge\">我们如何使用 Next.js 将 React 加载时间缩短 70%</a>\"</p><p><a href=\"https://xie.infoq.cn/article/777cb637c41ed18a746f575d2\">前端食堂技术周刊第 57 期：Turbopack、Next.js13、Chrome107、Vite3.2、图解 TLS 1.3</a>\"</p><p><a href=\"https://xie.infoq.cn/article/23c0e8d06602d53336408571b\">Next.js 在 Serverless 中从踩坑到破茧重生</a>\"</p>",
    "publish_time": "2023-02-15 15:14:35",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "InfoQ宣布接入百度文心一言能力，打造内容生态人工智能全系产品/服务",
    "url": "https://www.infoq.cn/article/F3wfMpdNNJEg3ho4RYgI",
    "summary": "<p>2月15日，InfoQ极客传媒宣布成为百度文心一言（英文名：ERNIE Bot）首批生态合作伙伴。后续，InfoQ将全面体验并接入文心一言的能力。</p><p>&nbsp;</p><p>接下来，InfoQ将把百度领先的智能对话技术成果应用在内容生态领域。此举标志着 InfoQ 优先获得领先 AI 技术的加持，也标志着对话式语言模型技术在国内科技内容创作场景的首次着陆。</p><p>&nbsp;</p><p>文心一言（英文名：ERNIE Bot）是百度基于文心大模型技术推出的生成式对话产品。百度在人工智能领域深耕十余年，拥有产业级知识增强文心大模型ERNIE ，具备跨模态、跨语言的深度语义理解与生成能力，在搜索问答、内容创作生成、智能办公等众多领域都有更广阔的想象空间。</p><p>&nbsp;</p><p>此外，文心一言将全面接入百度智能云，未来企业通过百度智能云就可以调用文心一言的服务，通过人工智能产品逐步落地到生产的实际场景中。</p><p>&nbsp;</p><p>InfoQ将可优先内测试用文心一言，集成文心一言的技术能力，与百度在产品研发、标准制定等多个领域展开深化合作，在百度技术团队协助下，打造联合解决方案，通过技术共享、培训赋能、联合营销等方式，强化竞争力，为用户打造全场景内容生态人工智能解决方案及服务，同时依托智慧互联、创新互联，引领技术媒体的产业变革与升级。</p><p>&nbsp;</p><p>截至目前，已有爱奇艺、集度汽车、小度、宇信科技、汉得信息、金蝶软件、宝宝巴士、智联招聘、太平洋汽车网等知名企业加入百度文心一言生态圈，获得该领先AI技术的“加持”。我们也期待以百度文心一言为起点，今后能看到更多国内 AI 技术产品的推出，也期待看到相关技术在更多应用场景的落地。</p>",
    "publish_time": "2023-02-15 15:15:17",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "OpenAI 一直在挖谷歌墙脚？ChatGPT发布前多名谷歌前员工曾参与准备工作",
    "url": "https://www.infoq.cn/article/7oYfCjaI0rbbpGsBSYWk",
    "summary": "<p>2月15日，据报道，OpenAI 一直在挖走谷歌的一些 AI 员工。</p><p>&nbsp;</p><p>据The Information援引消息来源报道，最近几个月，火爆全球的聊天机器人ChatGPT和图像生成器DALL-E背后的初创公司聘请了十几名前谷歌员工。</p><p>&nbsp;</p><p>一位知情人士告诉The Information，至少有5名前谷歌研究人员帮助ChatGPT在11月的推出做了准备工作。</p><p>&nbsp;</p><p>谷歌前研究人员Barret Zoph、Liam Fedus、Luke Metz、Jacob Menick 和 Rapha Gontijo Lopes——都出现在了OpenAI 宣布推出ChatGPT的博客文章的致谢部分。</p><p>&nbsp;</p><p>The Information进一步指出，OpenAI还在继续从谷歌吸引人才。据报道，上个月，这家初创公司聘请了一名谷歌研究员，他帮助创建了一种谷歌用于其搜索引擎的机器学习模型。该模型随后被 OpenAI 用于 ChatGPT。</p><p>&nbsp;</p><p>此外，有消息称，最近几周，至少有4名来Google Brain的其他研究人员已转向了OpenAI。</p><p>&nbsp;</p><p>事实证明，OpenAI 的聊天机器人广受用户欢迎，在第一周就积累了超过100 万用户。据报道，ChatGPT的流行促使谷歌管理层在其发布后的下个月就宣布了“红色代码” 。在硅谷，这就意味着拉响了“火警”。</p><p>&nbsp;</p><p>Google Brain 的两名前员工告诉 The Information，一些员工认为谷歌内部的文化已经老态龙钟了。据 The Information报道，工作人员认为谷歌条条框框的规定过于繁琐，并且对新产品的举措过于谨慎，导致一些员工不得不另寻出路。</p><p>&nbsp;</p><p>谷歌与微软这两家科技巨头都宣布了将大型语言模型（LLM）整合到Bing和谷歌搜索中的计划。Bing 已经向一些用户开放了这项新技术，而谷歌上周宣布其 AI 搜索在更广泛地推出之前向“受信任的测试人员”开放。</p><p>&nbsp;</p><p>&nbsp;</p><p>参考链接：</p><p>&nbsp;</p><p><a href=\"https://www.businessinsider.com/chatgpt-openai-google-ai-employees-hired-report-2023-2\">https://www.businessinsider.com/chatgpt-openai-google-ai-employees-hired-report-2023-2</a>\"</p>",
    "publish_time": "2023-02-15 16:28:22",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "老牌数仓企业Teradata正式退出中国",
    "url": "https://www.infoq.cn/article/fy1U7xqJpvH454VrXo1g",
    "summary": "<p>近日，老牌数仓企业Teradata宣布将逐步结束在中国的直接运营，后续将进入中国公司关闭程序。这是继Tableau后，又一家IT外资企业宣布退出中国。</p><p>&nbsp;</p><p>Teradata成立于1979年，是美国前十大上市软件公司之一。经过三四十年的发展，Teradata已经成为全球最大的专注于大数据分析、数据仓库和整合营销管理解决方案的供应商。IT圈大多熟知的啤酒加尿布案例，据称就是Teradata公司一位经理编出来的故事。根据财报数据，2021年，Teradata净收入为1.47亿美元（可对比大数据新贵Snowflake的负净收入情况）。</p><p>&nbsp;</p><p>据相关人士消息，Teradata今日正式召开全中国员工会议，宣布退出中国，表示这是根据Teradata对中国当前和未来商业环境的慎重评估，做出的艰难决定。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/53/53b7e522e2d8fee91341489718fba847.jpeg\" /></p><p></p><p>&nbsp;</p><p>Teradata在全球拥有近两万名员工，在美洲集团，和国际集团包含欧洲、<a href=\"https://baike.baidu.com/item/%E4%B8%AD%E4%B8%9C/386447?fromModule=lemma_inlink\">中东</a>\"和<a href=\"https://baike.baidu.com/item/%E9%9D%9E%E6%B4%B2/81619?fromModule=lemma_inlink\">非洲</a>\"（<a href=\"https://baike.baidu.com/item/EMEA/354274?fromModule=lemma_inlink\">EMEA</a>\"）、大中华区、日本地区、亚太区，都设有办公室。Teradata在1997年正式进入中国，大中华区是Teradata业务增长的重要市场。目前，Teradata大中华区设有8个分支机构，逾1200名员工，涵盖市场、研发、技术和解决方案推广、销售、咨询服务、售后<a href=\"https://baike.baidu.com/item/%E6%8A%80%E6%9C%AF%E6%94%AF%E6%8C%81/10722525?fromModule=lemma_inlink\">技术支持</a>\"，及在<a href=\"https://baike.baidu.com/item/%E5%A4%A7%E8%BF%9E/152852?fromModule=lemma_inlink\">大连</a>\"的全球<a href=\"https://baike.baidu.com/item/%E5%92%A8%E8%AF%A2%E4%B8%AD%E5%BF%83/9344845?fromModule=lemma_inlink\">咨询中心</a>\"等业务。</p><p>&nbsp;</p><p>在中国的26年，其业务巅峰期曾占据中国大半壁数据仓库市场。关闭中国区业务后，逾1200名员工面临失业……</p><p>&nbsp;</p>",
    "publish_time": "2023-02-15 18:30:53",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]