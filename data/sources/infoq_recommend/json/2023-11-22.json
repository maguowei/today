[
  {
    "title": "报名倒计时最后 5 天！全球 AI、区块链人才都将齐聚“2023 深圳国际金融科技大赛”！",
    "url": "https://www.infoq.cn/article/Dt3GNwxdeb0t2Lh5UQ0y",
    "summary": "<p>“2023 <a href=\"https://www.infoq.cn/video/JiD6qU8GNwgKA4lhg98e?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">深圳国际金融科技大赛</a>\"——西丽湖金融科技大学生挑战赛”AI、区块链赛道报名倒计时 5 天！无论你是成为 <a href=\"https://www.infoq.cn/article/2017/01/AI-DAO-rule-world?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">AI</a>\" 大牛的潜力股，还是区块链技术的浸心钻研者，这里都有你的舞台！</p><p>&nbsp;</p><p>你不仅有机会获得丰厚的奖金和实习机会，还将获得<a href=\"https://www.infoq.cn/article/2K0clWV5ZGjlPumJhf9G?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">金融科技</a>\"领域专家、企业的关注，与来自世界各地的优秀人才切磋交流，共同探索金融科技的未来趋势。来自金融科技领域的多位专家、教授担任本届大赛评委，他们将从创新性、实用性等方面对你的作品进行评估和指导。这对于在校生的你来说，是一次绝佳的学习机会！</p><p>&nbsp;</p><p>时间紧迫，抓住这个机会，让你的创意和专业在西丽湖畔璀璨闪耀！</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/dd/ddb6d8e1573784b78e9145887ca13608.jpeg\" /></p><p></p>",
    "publish_time": "2023-11-22 09:42:28",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Shopify开源WebAssembly工具链Ruvy",
    "url": "https://www.infoq.cn/article/EZ9OizChmbSAxNYM3BLV",
    "summary": "<p>最近，Spotify开源了<a href=\"https://shopify.engineering/introducing-ruvy?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDA2MTg4NjIsImZpbGVHVUlEIjoidlZBWE1hcDRhZ0Z3eU0zbSIsImlhdCI6MTcwMDYxODU2MiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.V1JYan63aRzID2qKfn1FHoCtHQuamedLnLArpZl--Ic\">Ruvy</a>\"，一个WebAssembly工具链，能够将Ruby代码转换为Wasm模块。Ruvy基于<a href=\"https://github.com/ruby/ruby.wasm?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDA2MTg4NjIsImZpbGVHVUlEIjoidlZBWE1hcDRhZ0Z3eU0zbSIsImlhdCI6MTcwMDYxODU2MiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.V1JYan63aRzID2qKfn1FHoCtHQuamedLnLArpZl--Ic\">ruby.wasm</a>\"， 用Rust实现，提升了性能并简化了Wasm模块的执行。</p><p></p><p>Ruvy利用了ruby.wasm提供的Ruby解释器模块，并使用<a href=\"https://github.com/kateinoigakukun/wasi-vfs?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDA2MTg4NjIsImZpbGVHVUlEIjoidlZBWE1hcDRhZ0Z3eU0zbSIsImlhdCI6MTcwMDYxODU2MiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.V1JYan63aRzID2qKfn1FHoCtHQuamedLnLArpZl--Ic\">wasi-vfs</a>\" (WASI虚拟文件系统)将其与所有指定的Ruby源文件一起打包到单个模块中。wasi-vfs创建了一个虚拟文件系统并嵌入到.wasm二进制文件中，它提供了一种机制，让Ruby源文件对ruby.wasm可读，但不允许在WebAssembly运行时访问主机文件系统。</p><p></p><p>在构建Wasm模块时预先初始化Ruby VM，而不是在将其加载到内存中执行时(默认使用ruby.wasm/wasi-vfs)，从而提升了性能。Shopify高级Wasm开发人员Jeff Charles解释说，这将使运行时性能提升了20%。</p><p></p><p>此外，Charles解释说，Ruvy使得使用Cranelift编译器将Wasm编译成本机代码所需的时间缩短至30%。</p><p></p><p>Ruvy的另一个好处是，由于它将所有必需的文件打包在一起，不需要文件路径作为WASI参数，因而简化了执行语法。这对于各种边缘计算服务来说特别有用，因为这些服务不允许向主要端点函数提供额外的WASI参数。</p><p></p><p>目前，Ruvy只提供了源代码发行版，所以你需要自行进行构建。这个过程很简单，原则上，<a href=\"https://github.com/Shopify/ruvy#build?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDA2MTg4NjIsImZpbGVHVUlEIjoidlZBWE1hcDRhZ0Z3eU0zbSIsImlhdCI6MTcwMDYxODU2MiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.V1JYan63aRzID2qKfn1FHoCtHQuamedLnLArpZl--Ic\">在安装了所有必需的依赖项</a>\"，包括rustup、wasm32-wasi、cmake和 Rosetta 2（macOS）之后，只需运行make，然后像下面的示例一样执行Ruvy来从ruby_examples/hello_world.rb创建index.wasm模块：</p><p></p><p><code lang=\"text\">$ cargo run --package=cli ruby_examples/hello_world.rb -o index.wasm</code></p><p></p><p>如上所述，你可以使用--preload命令行标志来指定包含Ruby文件的目录，这些文件应该会被传给Ruby VM。</p><p></p><p>Charles强调，Ruvy目前只能运行简单的Ruby程序。具体来说，它还不能requireRuby gem，也就是说大部分Ruby标准库仍然不可用。未来，他们计划支持从标准库和非本地第三方gem中加载代码以消除这一限制。</p><p></p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/11/shopify-ruvy-ruby-wasm/\">https://www.infoq.com/news/2023/11/shopify-ruvy-ruby-wasm/</a>\"</p>",
    "publish_time": "2023-11-22 10:07:55",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "揭秘高效编程“武功秘笈”，手把手带你用 Amazon CodeWhisperer 写一波！",
    "url": "https://www.infoq.cn/article/sEM2KRuq2BAaiPtIGNHx",
    "summary": "<p>随着今年 AI 技术的大火，越来越多的领域正在接受和利用这项强大的科技，以实现更高效、更智能的工作方式。在软件开发领域，AI 技术更是为我们的工作带来了前所未有的变革；从自动代码生成到智能编程助手，AI 正在逐步改变开发者的工作方式，提高开发效率和代码质量。</p><p></p><p>对于程序员传统的开发来说，完成一些业务逻辑代码或者特定代码，需要自己从 0 手动去敲代码、查 Bug、找思路、做优化，这个过程会需要耗费较多的时间和精力来完成。但是在今天，时代已经发生了变革。</p><p></p><p>亚马逊云科技推出了一款前沿的 AI 编程助手——<a href=\"https://www.infoq.cn/article/JcIQOLpgqVK3AAgQxNQt?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">Amazon CodeWhisperer</a>\"。这款工具利用了先进的深度学习技术，通过训练几十亿行代码，能够快速理解开发者的需求，提供即时的、强大的代码建议和错误检测，使开发者能够更快、更安全地构建应用程序。</p><p></p><p>为了大家更好地了解和掌握 Amazon CodeWhisperer，在本文中，我将带你手把手沉浸式体验一下 Amazon CodeWhisperer 的魔力和强大之处！</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/39/39f5a1126d896067cab32dc465556597.png\" /></p><p></p><h3>01 Amazon CodeWhisperer 功能概览</h3><p></p><p></p><p>可能有些小伙伴对 Amazon CodeWhisperer 的具体的能力还不太清楚，这里先给大家详细介绍一下 Amazon CodeWhisperer 拥有的一些实用和强大功能。用上这些功能，再也不怕被“卷”开发效率了！</p><p></p><h4>1.1 强大的代码建议</h4><p></p><p></p><p>Amazon CodeWhisperer 是基于数十亿行代码训练而成的，所以它能够理解用自然语言编写的各种代码，并且可以实时地生成多个代码建议来提高开发人员的工作效率。该服务直接在集成式开发环境（IDE）的代码编辑器中提供针对完整函数和逻辑代码块（通常由多达 10–15 行代码组成）的建议。</p><p>并且不用担心它生成的代码不符合你的代码风格，Amazon CodeWhisperer 将学习你的代码写法与风格，遵循你的设定的风格和命名规则。</p><p></p><h4>1.2 支持多种语言与 IDE</h4><p></p><p></p><p>在公司开发中，可能每个程序员们开发的语言或者 IDE 都是不大一样的，但是请放心，目前市面上主流的各类开发语言，例如 Python、Java、Go、Rust、PHP、C++、C、JavaScript、TypeScript 等等都是支持的！并且支持各种主流 IDE 工具，IDEA、Pycharm、VS Code 等等这些，Amazon CodeWhisperer 都支持。</p><p></p><p>还有的朋友可能会说，如果是 SQL Boy 呢？能用 Amazon CodeWhisperer 吗？我的回答是，那是必须的！</p><p></p><h4>1.3 安全扫描</h4><p></p><p></p><p>在写完代码之后，可以使用 Amazon CodeWhisperer 帮助我们进行代码的安全扫描，它将帮助我们分析出代码漏洞，并且会针对业务代码中的漏洞提出更改优化建议与代码。这个功能很实用，能够帮助我们排除不必要的安全隐患。</p><p></p><h3>02 沉浸式体验使用 Amazon CodeWhisperer 实战开发代码</h3><p></p><p></p><p>相信大家看到这里已经很期待 Amazon CodeWhisperer 的实战表现了。我将为大家展示下 Amazon CodeWhisperer 是如何智能地帮助开发者们在日常生活中，提高学习与工作效率的！</p><p></p><p>首先，我们使用 Amazon CodeWhisperer 来帮助快速构建一些常见算法及代码。在这里我选择 Python 语言。</p><p></p><h4>2.1 Pycharm 中快速导入 Amazon CodeWhisperer</h4><p></p><p></p><p>在 Pycharm 的设置 Settings 中，找到插件，然后搜索 “Amazon Toolkit”。点击 Install，等待下载完成后，重启 Pycharm 即可。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/fe/fedacb55b6247966a35a3827b0b0702b.png\" /></p><p></p><p>然后我们在插件中进一步处理，使用个人亚马逊云科技账号去使用 Amazon CodeWhisperer。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1b/1b43804112a57d84fd2593c968776e53.png\" /></p><p></p><p>我们需要将这个代码贴进来进行验证，并根据后续的操作进行邮箱注册创建 Amazon Builder 账号即可。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f3/f3d16ecaf6ce5926b35d495eb8e296bc.png\" /></p><p></p><p>一切就绪之后会提出弹窗：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/af/afb980abf6fdd827afb48a5905a09501.png\" /></p><p></p><p>当在 Pycharm 中出现如下界面之后，就代表能够顺利使用 Amazon CodeWhisperer 了。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ff/ff8ab824e2a320cc6f1527450e109ff6.png\" /></p><p></p><p>话不多说，开始用起来吧！</p><p></p><h4>2.2 使用 Amazon CodeWhisperer 快速构建 Python 代码</h4><p></p><p></p><p>我们先来使用 Amazon CodeWhisperer 写一个简单的冒泡排序试试效果。首先，输入我们的注释，这样 Amazon CodeWhisperer 就知道要干什么了；然后我们输入 import，就可以看到 Amazon CodeWhisperer 自动帮我们补全了 random 函数。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a4/a4c582731b3a2d5d0f8b54733dbab95b.png\" /></p><p></p><p>看到上面这个图，或许你会以为 Amazon CodeWhisperer 只是简单补齐一行代码，千万别小看它了，接着往下看：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a0/a0e0411e4d4e8fea59a56e2e79d3c3cc.png\" /></p><p></p><p>不单单只是那一行，Amazon CodeWhisperer 可以直接帮我们补完所有实现代码！</p><p>这里我们选择了方案 2 中的代码补全，然后当输入符到达代码最后一行时，新的一行就会自动跳出：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/77/775c3e78fb19b52da0a31d1975f047e5.png\" /></p><p></p><p>也就是 print(a[i],end = ' ') 这一行是在我没有给出任何指令的情况下，Amazon CodeWhisperer 自动提示是否需要补充。如果需要，只需按下 Tab 回车键或者鼠标点击 Insert Code 按钮即可。</p><p></p><p>与其他的 AI 代码助手不同的是，Amazon CodeWhisperer 是真正能够进行“预判式”的辅助你写代码，并且最开始的一切只是“源于”一个不起眼的小注释，Amazon CodeWhisperer 通过这个注释已经帮我们算好了接下来 2-3 个步骤。是不是很高效？</p><p></p><p>测试了一下，使用 Amazon CodeWhisperer 写冒泡排序的时间，只需要按下三次 Tab 键即可，大概是 2s 的时间！如果按正常编写的速度，只使用 Pycharm 自带的代码 Tab 补写，就算手速再快，也需要大概 15-20s 左右。2s 相比于 20s，是近乎 10 倍的时间开销差距。Amazon CodeWhisperer 是真正意义上做到了帮助开发者节省时间，用户体验感 Max！</p><p></p><p>除了上面突出的“预判式”速度优势外，Amazon CodeWhisperer 不仅仅只是提供一种代码思路，而是提供了三种以上的代码建议，能够让我们有多种选择。</p><p></p><p>很明显，我们能够根据具体代码的开发需求以及个人习惯进行选择，可以说是把个性化体验拉满了。简单快速易上手，难度一点都没有，还不快速速用上 Amazon CodeWhisperer？</p><p></p><h4>2.3 Amazon CodeWhisperer 支持各种领域方向的代码编写</h4><p></p><p></p><p>可能有开发者朋友会觉得，上面举的例子太简单了，还是对 Amazon CodeWhisperer “超级魔力”看的不过瘾。那我们来点“高质量”的“狠货”一起试试吧！</p><p></p><p>”狠货“的情况是这样：前两天，一个还在读研的同学在打全国研究生数学建模竞赛问我，如何用 Python 写一些高效的数学算法模型，例如二维马尔科夫链这种。我当时查了很多资料，东拼西凑给同学发了一份二维马尔科夫链算法模型的代码。只能说短短三四十行的代码至少花了我两三个小时，而且做的很难受，很心累。</p><p></p><p>而如今，我用 Amazon CodeWhisperer 来试试看看需要多久，或者看看写出算法模型的难度。</p><p>首先，还是按照上面一样写个注释，让 Amazon CodeWhisperer 明白我要做什么。</p><p></p><p>可以看到，如下图，我只是简单输入了 import math，Amazon CodeWhisperer 就已经帮我补全了其他所需要的常见数学计算包。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/35/355c1f4a39224f3b83e247511365f5d6.png\" /></p><p></p><p>下一步，我继续在注释中写明我需要做到哪些事情。比方说我想继续写一个状态转移方程，用来求马尔科夫链模型的概率矩阵。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ef/efd0921dba726be99e72d8c013b1f177.png\" /></p><p></p><p>可以看到，Amazon CodeWhisperer 直接提供好了一个初始矩阵给我，非常的方便。</p><p>我们再进一步提出要求，注释中写清楚即可。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/18/18b089d23049813680cba8a45122b9c2.png\" /></p><p></p><p>补全之后，下一步 Amazon CodeWhisperer 又根据新的注释帮我进行了代码建议，不仅十分专业，且代码风格看起来赏心悦目，非常整齐和清爽。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/18/18eecf9abc0e66eb343f944460966e1a.png\" /></p><p></p><p>然后我们简单对状态矩阵进行判断返回即可。根据 Amazon CodeWhisperer 的代码建议补全如下。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/7c/7cabba7c05f65d54f77fbf59173d0206.png\" /></p><p></p><p>短短三五分钟，它就能够大概地把这种算法模型的架构搭出来，省去了很多不必要的麻烦。这说明，Amazon CodeWhisperer 是真的能够覆盖很多场景，就连高级的数学知识、数据科学类方面的代码，也是能够进行补全编写的。在简单易上手的基础上，Amazon CodeWhisperer&nbsp;主打的就是一个全能，能够覆盖多领域多方向需求。</p><p></p><h4>2.4 Amazon CodeWhisperer 的安全扫描功能</h4><p></p><p></p><p>我找了一份研究生数学建模的参考示例代码，按照惯例，参考示例代码应该是没有问题的。我们一起看看 Amazon CodeWhisperer 的安全扫描会不会提出什么安全漏洞建议：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f0/f0acf2cebb2fc22384a96159f9ead5b9.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/cf/cf42ceb6a575e1d94bc88a6440e1fb03.png\" /></p><p></p><p>结果显示，扫描一切正常，说明这份参考示例代码是没有问题的，符合预期。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b8/b85bdf88173a6298ebd973af5994ed21.png\" /></p><p></p><h3>03 Amazon CodeWhisperer 总结</h3><p></p><p></p><p>通过上面的讲解和实践，相信各位开发者朋友肯定很心动了。还等什么，赶紧用起来吧！</p><p>总结一下 Amazon CodeWhisperer 的优点：</p><p></p><p>对小白友好，不存在什么引入难度。大家可以看到 Amazon CodeWhisperer 导入及使用大概两分钟就能操作完，十分便捷，不需要什么时间。上手简单。其实使用 Amazon CodeWhisperer 就几个快捷键，Tab 这种，使用起来也是完全没有任何的难度。覆盖面广，功能全面。可以看到，对于一些高级数学知识，它也能够很快的给出代码建议。这一点非常实用，因为在开发中我们会遇到各种各样的问题与需求，代码助手的全面性决定了是否能够帮助更多的开发者。所以我觉得 Amazon CodeWhisperer 是非常优秀的，功能全面无死角。维护了代码开发安全。可能很多刚工作几年的开发者，对于代码安全方面并不是非常有经验，但 Amazon CodeWhisperer 刚好就能够有效识别和修复潜在的安全漏洞，这是非常重要的一个功能。</p><p></p><p>综上所述，我觉得 Amazon CodeWhisperer 是一款各方面都非常不错的 AI 代码助手！</p>",
    "publish_time": "2023-11-22 10:42:07",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]