[
  {
    "title": "Error Prone 通过检测常见错误帮助改善Java代码",
    "url": "https://www.infoq.cn/article/lpOyO0ClfYLGmmakS3is",
    "summary": "<p><a href=\"https://errorprone.info/\">Error Prone</a>\"是谷歌开源的一个Java编译插件，可以在编译时进行静态分析、bug检测，或者对可能的优化提出建议。插件中包括了超过500个<a href=\"http://errorprone.info/bugpatterns\">预定义的bug检查</a>\"，并且允许第三方和自定义插件。检查到问题之后，Error Prone能够将问题通过warning显示出来或者用预定义的解决方案自动修改代码。Error Prone 支持 Java 8、11，以及17，可以被用来修复bug或者大规模重构。文档中提供了使用 Maven、Bazel、Ant以及Grandle的安装和配置教程。需要将Error Prone在编译器中配置为annotation processor（注解处理器），下面是通过Maven创建测试工程的示例：</p><p><code lang=\"java\">\n    org.apache.maven.plugins\n    maven-compiler-plugin\n    3.10.1\n    \n        17\n        UTF-8\n        \n            -XDcompilePolicy=simple\n            -Xplugin:ErrorProne\n        \n        \n            \n                com.google.errorprone\n                error_prone_core\n                2.15.0\n            \n        \n    \n\n</code></p><p></p><p>接下来可以创建一个示例类。下面的方法使用了 equals  方法来对比两个数组，更准确地说，此处所比较的是对象本身而不是数组的内容。</p><p></p><p><code lang=\"java\">public boolean compare(String firstList[], String secondList[]) {\n    return firstList.equals(secondList);\n}\n</code></p><p></p><p>执行  mvn clean verify  触发Error Prone 分析，下面是运行结果中的错误信息中：</p><p></p><p><code lang=\"java\">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.10.1:    \n    compile (default-compile) on project ErrorProne: Compilation failure\n[ERROR] …/ErrorProne/src/main/java/org/example/Main.java:[5,28] \n    [ArrayEquals] Reference equality used to compare arrays\n[ERROR]   (see https://errorprone.info/bugpattern/ArrayEquals)\n[ERROR]   Did you mean 'return Arrays.equals(firstList, secondList);'?\n</code></p><p></p><p>报出了<a href=\"http://errorprone.info/bugpattern/ArrayEquals\">ArrayEquals</a>\"错误，Error Prone的建议是修改实现方式，以比较数组的内容而不是比较对象。</p><p></p><p><code lang=\"java\">return Arrays.equals(firstList, secondList);\n</code></p><p></p><p>报错不仅可以帮助改善代码，也可以让Error Prone自动应用解决方案。   -XepPatchChecks  参数的应用应该包含由逗号分隔开的bug模式列表，在上面的情况中，只有ArrayEquals解决方案用于这段代码。 -XepPatchLocation  参数用于具体定位解决方案文件位置，在当前情境中是修改了源文件：</p><p></p><p><code lang=\"java\">\n    -XDcompilePolicy=simple\n    -Xplugin:ErrorProne -XepPatchChecks:ArrayEquals    \n        -XepPatchLocation:IN_PLACE\n\n</code></p><p></p><p>现在，在执行  mvn clean verify 之后，类文件被自动修改为：</p><p></p><p><code lang=\"java\">public boolean compare(String firstList[], String secondList[]) {\n    return Arrays.equals(firstList, secondList);\n}\n</code></p><p></p><p>文档里提供了更多关于<a href=\"https://errorprone.info/docs/flags\">命令行标识</a>\"的信息。除了内置的bug模式，也可以使用例如<a href=\"https://github.com/KengoTODA/errorprone-slf4j/blob/master/README.md\">SLF4J</a>\"等第三方发布的插件，或创建自定义插件。内置规则的源码提供了多种可用于定义插件的不同<a href=\"https://github.com/google/error-prone/tree/master/core/src/main/java/com/google/errorprone/bugpatterns\">示例</a>\"模板。例如，自定义一个能够用新的JUnit 5 @BeforeEach注解器代替旧版@Before JUnit注解器的Error Prone插件。</p><p></p><p>和前文例子不同，自定义的Error Prone插件应该被放置于Maven模块。Error Prone通过<a href=\"https://www.infoq.com/articles/java11-aware-service-module/\">服务加载器</a>\"机制来加载bug检测。这类之际通常一定的配置，然而谷歌的<a href=\"https://github.com/google/auto/tree/master/service\">AutoService</a>\"项目借助@AutoService注解简化了配置工作。@BugPattern注解用于定义bug的名称、简介以及严重性。在下面的例子中，如果没有找到@Before 注解器会返回Description.NO_MATCH ，否则<a href=\"https://errorprone.info/api/latest/com/google/errorprone/fixes/SuggestedFix.html\">SuggestedFix</a>\"会用@BeforeEach注解替代@Before注解。</p><p></p><p><code lang=\"java\">@AutoService(BugChecker.class)\n@BugPattern(\n    name = \"BeforeCheck\",\n    summary = \"JUnit 4's @Before is replaced by JUnit 5's @BeforeEach\",\n    severity = BugPattern.SeverityLevel.SUGGESTION\n)\npublic class BeforeCheck extends BugChecker implements BugChecker.AnnotationTreeMatcher {\n    private static final Matcher matcher =    \n        isType(\"org.junit.Before\");\n\n    @Override\n    public Description matchAnnotation(AnnotationTree annotationTree, \n            VisitorState visitorState) {\n        if (!matcher.matches(annotationTree, visitorState)) {\n            return Description.NO_MATCH;\n        }\n        return describeMatch(annotationTree, \n            SuggestedFix.replace(annotationTree, \"@BeforeEach\"));\n    }\n}\n</code></p><p></p><p>构建自定义Error Prone 插件的时候都是需要Error Prone和AutoService依赖的。</p><p></p><p><code lang=\"java\">\n  com.google.errorprone\n  error_prone_annotations\n  2.15.0\n\n\n  com.google.errorprone\n  error_prone_check_api\n  2.15.0\n\n\n  com.google.auto.service\n  auto-service-annotations\n  1.0.1\n\n</code></p><p></p><p>AutoService应该被配置为一个注解处理器。</p><p></p><p><code lang=\"java\">\n    \n        com.google.auto.service\n        auto-service\n        1.0.1\n    \n\n</code></p><p></p><p>现在，自定义的Error Prone 插件可以通过  mvn install 命令，安装在本地的Maven仓库。执行命令后，示例工程应该会被配置为使用新的自定义插件作为注解处理器。</p><p></p><p><code lang=\"java\">\n    \n        org.example.custom.plugin\n        ErrorProneBeforeCheck\n        1.0-SNAPSHOT\n    \n\n</code></p><p></p><p>新的  BeforeCheck  应该被加入到了Error Prone 分析中。</p><p></p><p><code lang=\"java\">\n  -XDcompilePolicy=simple\n  -Xplugin:ErrorProne -XepPatchChecks:BeforeCheck  \n          -XepPatchLocation:IN_PLACE\n\n</code></p><p></p><p>添加一个示例测试类，其中包含@Before和@BeforeEach的两个注解。</p><p></p><p><code lang=\"java\">public class ErrorProneTest {\n  @Before\n  void before() {\n  }\n  @BeforeEach\n  void beforeEach() {\n  }\n}\n</code></p><p></p><p>运行 mvn verify 时，新的自定义Error Prone插件将用@BeforeEach注解替换@Before注解。</p><p></p><p><code lang=\"java\">public class ErrorProneTest {\n  @BeforeEach\n  void before() {\n  }\n  @BeforeEach\n  void beforeEach() {\n  }\n}\n</code></p><p></p><p>Error Prone所使用的Java internal目前处于隐藏状态，可能会导致如下错误：</p><p></p><p><code lang=\"java\">java.lang.IllegalAccessError: class com.google.errorprone.BaseErrorProneJavaCompiler \n(in unnamed module @0x1a6cf771) \ncannot access class com.sun.tools.javac.api.BasicJavacTask (in module jdk.compiler) \nbecause module jdk.compiler does not export \ncom.sun.tools.javac.api to unnamed module @0x1a6cf771\n</code></p><p></p><p>Maven的<a href=\"http://errorprone.info/docs/flags#maven\">解决办法</a>\"是通过在项目根目录下创建.mvn目录来暴露Java internal，在目录中创建一个jvm.config文件，其中配置如下：</p><p></p><p><code lang=\"java\">--add-exports jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED\n--add-exports jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED\n--add-exports jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED\n--add-exports jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED\n--add-exports jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED\n--add-exports jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED\n--add-exports jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED\n--add-exports jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED\n--add-opens jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED\n--add-opens jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED\n</code></p><p></p><p>或者可以将--add-exports和--add-opens 参数配置添加到Maven编译器插件的pom文件中：</p><p></p><p><code lang=\"java\">\n    org.apache.maven.plugins\n    maven-compiler-plugin\n    3.10.1\n    \n        \n            --add-exports\n            jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED\n          …\n</code></p><p></p><p>更多在Bazel、Ant和Gradle中使用Error Prone的信息可参见<a href=\"https://errorprone.info/docs/installation\">安装引导</a>\"。</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/qQFYqekRrzwOp8KPNVD4\">Java 近期新闻：顺序集合、Spring 6.0-RC1、Tomcat、Reactor 2022.0-RC1</a>\"</p><p><a href=\"https://www.infoq.cn/article/5VMP2p3hLyEKpYIILxLr\">Spring Boot 3 将于 2022 年 11 月发布，延迟了对 Java 模块系统的支持</a>\"</p><p></p>",
    "publish_time": "2022-10-26 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "谷歌、微软发布最新财报：营收持续增长，但利润萎缩",
    "url": "https://www.infoq.cn/article/ev51N1uqoPPp8iPdaieu",
    "summary": "<p>当地时间10月25日，谷歌母公司 Alphabet 公布 <a href=\"https://abc.xyz/investor/static/pdf/2022Q3_alphabet_earnings_release.pdf?cache=4156e7f\">2022 年第三季度业绩</a>\"。报告显示，Alphabet第三季度总营收为690.92亿美元，与上年同期的651.18亿美元相比增长6%；按照美国通用会计准则净利润为139.10亿美元，与上年同期的189.36亿美元相比下降26.5%；每股摊薄收益为1.06美元，上年同期的每股摊薄收益为1.40美元。财报发布后，Alphabet股价盘后跌超6%。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/97/978a66ace373ce06597ffa507292dfbb.png\" /></p><p></p><p>根据报告，谷歌的大部分业务都在逐年增长：广告收入从 531 亿美元增长到 544 亿美元，谷歌云从 2021 年第三季度的 49 亿美元跃升至 2022 年的近 69 亿美元，但值得注意的是，该公司云部门的亏损也从 6.44 亿美元增加到 6.99 亿美元。</p><p>&nbsp;</p><p>据报道，在今年9 月 1 日的谷歌内部全员会议上，首席执行官Sundar Pichai 声称，谷歌正在一个“具有挑战性的宏观经济环境”中运作，员工应该“深入思考变化”，并且宣布了名为“Simplicity Sprint，简单冲刺）”的方案，旨在提供员工的生产效率。</p><p>&nbsp;</p><p>为此，谷歌一直在努力审查其员工人数。尽管如此，该公司报告称其与上一季度相比有所增长：7 月份，谷歌拥有 174,014 名员工，而截至今年9月底，这一数字为 186,779 人。</p><p>&nbsp;</p><p>谷歌并没有悄无声息地<a href=\"https://xie.infoq.cn/article/c6e399bfb791cb4905aea1095\">裁员</a>\"，而是通过解雇或重组特定团队，给前成员在公司内部找到新职位的机会，因为谷歌也知道并非所有人都会这样选择。但这也意味着，这些人的名单可能不会在数周或数月内正式从谷歌消失。“我们放慢招聘步伐的行动将在 2023 年变得更加明显，”首席财务官 Ruth Porat 在公司的财报电话会议上表示。</p><p>&nbsp;</p><p>同天，微软发布了<a href=\"https://click.linksynergy.com/deeplink?id=nOD/rLJHOac&amp;mid=24542&amp;u1=[]vg[p]23186944[t]w[r]https://techurls.com/[d]D&amp;murl=https://www.microsoft.com/en-us/Investor/earnings/FY-2023-Q1/press-release-webcast\">2023财年第一财季财报</a>\"。报告显示，微软该财季营收为501.22亿美元，与去年同期的453.17亿美元相比增长11%；净利润为175.56亿美元，与去年同期的205.05亿美元相比下降14%；每股摊薄收益为2.35美元，与去年同期的2.71美元相比下降13%。具体业务数据如下：</p><p>&nbsp;</p><p>生产力和业务流程收入为 165 亿美元，增长 9%（按固定汇率计算增长 15%）：</p><p>&nbsp;</p><p>Office Commercial 产品和云服务收入增长 7%（按固定汇率计算增长 13%），受 Office 365 Commercial 收入增长 11%（按固定汇率计算增长 17%）的推动；&nbsp;Office Consumer 产品和云服务收入增长 7%（按固定汇率计算增长 11%），Microsoft 365 Consumer 订阅者增长至 6130 万；LinkedIn 收入增长 17%（按固定汇率计算增长 21%）；Dynamics 365 收入增长 24%（按固定汇率计算增长 32%）推动 Dynamics 产品和云服务收入增长 15%（按固定汇率计算增长 22%）。</p><p>&nbsp;</p><p><a href=\"https://www.infoq.cn/article/YPEcYYPmN4uCJb5pqjIG\">智能云</a>\"收入为 203 亿美元，增长 20%（按固定汇率计算增长 26%）：</p><p>&nbsp;</p><p>服务器产品和云服务收入增长 22%（按固定汇率计算增长 28%），受 Azure 和其他云服务收入增长 35%（按固定汇率计算增长 42%）的推动。</p><p>&nbsp;</p><p>更多个人计算的收入为 133 亿美元，略有下降（按固定汇率计算增长 3%）：</p><p>&nbsp;</p><p>Windows OEM 收入下降 15%；Windows 商业产品和云服务收入增长 8%（按固定汇率计算增长 15%）；Xbox 内容和服务收入下降 3%（按固定汇率计算增长 1%）；不含流量获取成本的搜索和新闻广告收入增长 16%（按固定汇率计算增长 21%）；设备收入增长 2%（按固定汇率计算增长 8%）。</p>",
    "publish_time": "2022-10-26 11:05:33",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]