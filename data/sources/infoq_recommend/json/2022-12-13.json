[
  {
    "title": "深入解读云场景下的网络抖动",
    "url": "https://www.infoq.cn/article/rk3MfrSmf4TaXKCcJ6Nl",
    "summary": "<p></p><h2>1. 网络抖动背景</h2><p></p><p></p><p>延时高，网络卡，卡住了美好！应用抖，业务惊，惊扰了谁的心？当你在观看世界杯梅西主罚点球突然视频中断了几秒钟；当你在游戏中奋力厮杀突然手机在转圈圈无法响应；当你守候多时为了抢一张化妆品优惠券突然迟迟加载不出来……</p><p></p><p>我们经常在观看视频、手机游戏、网上购物时，会遇到上面这些烦心事，作为用户，我们总有被卡在“临门一脚”的感觉，此时的你，是否有种想把手机或电视砸掉的冲动？或者破口大骂网络服务商的线路不稳定？是的，这种现象一般是网络抖动引起的。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0c/0ceecf2483d038d58e3646f46a18bcc8.png\" /></p><p></p><p>“高频率、难攻克”一直是业界对抖动问题的评价，特别是在我们云计算场景下，复杂的网络拓扑，众多的业务承载形态，容器、虚拟机和传统的物理机并存，业务的应用也出现了微服务众多、多语言开发、多通信协议的鲜明特征，这给我们定位这类问题带来非常大的挑战。</p><p></p><p>试想从我们的手机或者 PC 浏览器发出的一个付款请求，可能要经过你的家庭路由器，运营商网络，云服务商物理网络、虚拟网络，以及电商服务器，容器或者虚拟机，最后才是具体的服务程序对请求进行处理，这里面每个节点都可能存在延迟。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/42/42d6569cb61eb714e81636fc6bbf62f5.png\" /></p><p></p><p>购物、游戏、视频、金融等领域，受限于传统的 IDC 物理网络的环境因素，多样化的云网络场景，以及业务系统的复杂性，所有涉及到网络请求和处理的地方，都会存在业务网络抖动的情况。</p><p></p><p>在云服务商内部，业务所在的 ECS 服务器，日志的存储和上传、数据库访问，可能分散在不同的节点，节点之间也有各种网关和内部网络。当出现抖动时，每个功能模块都只能维护自己的节点诊断信息，无法通过统一平台呈现具体时延信息，相互之间的自证清白的能力比较弱。</p><p></p><p>到具体业务和应用处理上，由于操作系统上面跑着各种任务，相互之间的调度和处理都会有干扰，内存分配、报文解析、IO 访问延迟等等，都给我们分析抖动问题带来困难。</p><p></p><h2>2. 网络抖动的定义</h2><p></p><p></p><h3>2.1 网络抖动的定义和现象</h3><p></p><p></p><p>前面我们一直在提延迟，提抖动，以及抖动如何难分析。现在我们回到一个最初的问题，什么是网络延迟？什么是网络抖动？云计算场景中抖动都有哪些具体的现象？</p><p></p><p>网络延迟是指报文在网络中传输所用的时间，即从报文开始进入网络到它开始离开网络所经历的时间。各式各样的数据在网络介质中通过网络协议(如 TCP/IP)进行传输，如果信息量过大不加以限制，超额的网络流量就会导致设备反应缓慢，从而造成网络延迟。</p><p></p><p>而抖动是 Qos 里面常用的一个概念，当报文经过交换机、路由器等设备时，容易出现网络拥塞，通常报文会进行排队，这个排队延迟将影响端到端的延迟，并导致通过同一个连接进行传输的报文经历的延迟各不相同，所以抖动，就是用来描述这样一延迟变化的程度。网络抖动值越小说明网络质量越稳定。举例说明，假设 A 网络最大延迟是 15 毫秒，最小延迟为 5 毫秒，那么网络抖动值是 10 毫秒。</p><p></p><p>总结起来，网络抖动是指在某一时刻业务的流量下跌、正常业务指标受损，网络出现延迟等。延时和抖动主要的后果是影响用户体验，特别是在游戏场景中更是来不得半点抖。试想当你在打怪买装备时抖了那么 20ms，装备没了，此时捶胸顿足砸键盘也于事无补啊。</p><p></p><p>另外，云场景下，用户不仅关心正常场景的平均延迟，对异常场景下的长尾延迟，也越来越关注。影响长尾延迟的因素，如宕机、网络延时、磁盘抖动、系统夯机等等。长尾延迟还存在着放大效应，比如系统 A 串行向系统 B 发送 5 个请求，前一个请求返回才能进行后一个请求，当系统 B 出现一个慢请求时，会堵住后面 4 个请求，系统 B 中的 1 个 Slow IO 可能会造成系统 A 的 5 个 Slow IO。所以，每个节点的每一个系统服务都有义务主动减少或降低处理延迟。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/74/7440b15757dd481e7908ca6e909ec872.png\" /></p><p></p><p>我们通常说的网络抖动，拿云计算场景来看，可能有如下现象：</p><p></p><p>1、两台 ECS 服务器之间从发出 ping request 到 reply 回复的正常水平是 5ms，在某个时间点突然发生抖动，增加至 50ms，随后马上恢复。</p><p>2、负载均衡 SLB 上的 HTTP 请求平均延迟的正常水平在 10ms，在某个时间点突然发生抖动，整体延迟增加至 100ms，随后马上恢复。</p><p>3、通过 ECS 访问 RDS 数据库，在某个时间点突然打印大量日志如\"SocketTimeOut\"、\"Request timeout\" 等，持续时间为秒级，随后马上恢复。</p><p></p><p>从上述现象可以看出，网络抖动在云计算场景下有了新的理解，它产生的原因可能是由于发送端和接收端之间的链路、系统内部的一个瞬时抖动，比如业务所在 Linux 系统 crash、链路有丢包重传、网卡 up/down、交换机缓存瞬时打满等。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/33/33dc8614e4f3d67c77c66eefb9ed7d50.png\" /></p><p></p><p>我们先看一下解决网络延迟和抖动的一般方法：</p><p></p><p>1、交换机和路由器等设备，主动避免网络报文排队和处理时间。</p><p>2、云网络及上云等网关设备主动降低处理延迟，通过硬件提高转发速度，通过 RDMA 技术降低时延。</p><p>3、业务应用所在的虚拟机或者容器的内核协议栈打开 tso 等硬件加速方案，采用零拷贝等技术降低延迟。</p><p></p><h3>2.2 网络抖动的分类</h3><p></p><p></p><p>在云计算场景下，通过对抖动问题进行分析，根据抖动发生的时刻和是否可复现，将抖动分成三大类：</p><p></p><p>1、当前还在发生的抖动问题，且这个现象还继续存在，我们称之为&nbsp;Current 当前抖动。这类问题一般由于链路中有持续性或周期性丢包、Qos 限流引起。</p><p>2、过去某一时刻出现的抖动，当前现象已不存在，我们称之为历史抖动。这类抖动问题一般在日志中打印“socket timeout”，或者有重传报文记录，这类问题相对来说少，很难定位。</p><p>3、通过 ping 包去检测连通性或网络状态，经常有几十甚至上百 ms 的延迟，而正常情况是几个 ms 不到。ping 毛刺问题，有可能该现象还一直存在，或者是间歇性地出现。这类问题一般是业务负载高(load 高)，系统卡顿，或者存在虚拟化环境中的 CPU 争抢问题。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f5/f5f7bdea67167d7569158526c3d8c884.png\" /></p><p></p><p>一般的，丢包和重传会引起当前和历史抖动问题，拿 tcp&nbsp;协议来说，只要从&nbsp;tcp&nbsp;发出去的报文在链路上出现了丢包，内核协议栈就会对该报文进行重传，大量的重传会导致业务超时和引起网络抖动。因此，丢包问题，也是网络抖动的头号宿敌。</p><p></p><p>但还得明确一个概念：网络丢包可能造成业务超时，但是业务超时的原因不一定是丢包。原因前面也提到过，包括链路上的硬件转发或路由等设备，以及其上的系统及应用软件的每一个环节都存在引起业务超时的情况。</p><p></p><h3>2.3 网络抖动的衡量指标</h3><p></p><p></p><p>衡量“网络抖动”的指标，大家能想到的肯定是看业务的请求和回复报文的延迟是多少，即 latency 或者 RT(Reponse Time)，在云计算场景中，具体化到了一些特定的网络指标，比如 RT、请求数、连接数、bps、pps 等。其中一些指标的含义如下：</p><p></p><p>1. 响应时间(RT Response Time)</p><p></p><p>响应时间是指执行一个请求从开始到最后收到响应数据所花费的总体时间，即从客户端发起请求到收到服务器响应结果的时间。RT 是一个系统最重要的指标之一，它的数值大小直接反映了系统的快慢。</p><p></p><p>对于一个游戏软件来说，RT 小于 100 毫秒应该是不错的，RT 在 1 秒左右可能属于勉强可以接受，如果 RT 达到 3 秒就完全难以接受了。而对于编译系统来说，完整编译一个较大规模软件的源代码可能需要几十分钟甚至更长时间，但这些 RT 对于用户来说都是可以接受的。所以 RT 的多少，对不同系统的感受是不一样的。</p><p></p><p>2. 吞吐量(Throughput)</p><p></p><p>吞吐量是指系统在单位时间内处理请求的数量。</p><p></p><p>系统的吞吐量（承压能力）与 request 对 CPU 的消耗、外部接口、IO 等紧密关联。单个 request 对 CPU 消耗越高，外部系统接口、IO 速度越慢，系统吞吐能力越低，反之越高。影响系统吞吐量几个重要参数：QPS（TPS）、并发数、响应时间。</p><p></p><p>3. 并发数</p><p></p><p>并发数是指系统同时能处理的请求数量，这个也是反映了系统的负载能力。一个系统能同时处理的请求数量，连接数量都有一个规格要求，当请求数越多时，系统处理的速度就会出现瓶颈。</p><p></p><p>4、QPS 每秒查询数量(Query Per Second)</p><p></p><p>QPS 是一台服务器每秒能够响应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。</p><p></p><p>5、TPS 每秒执行的事务数量(throughput per second)</p><p></p><p>TPS 代表每秒执行的事务数量，可基于测试周期内完成的事务数量计算得出。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。例如，用户每分钟执行 6 个事务，TPS 为 6 / 60s = 0.10 TPS。</p><p></p><p>指标：</p><p>QPS(TPS)：每秒钟的请求/事务数并发数：系统同时处理的请求/事务数响应时间：一般取平均响应时间</p><p></p><p>这三者之间的关系：</p><p>QPS(TPS) = 并发数/平均响应时间并发数 = QPS * 平均响应时间</p><p></p><p>为了描述更广泛意义上的网络抖动，云场景中我们一般用 RT 这个术语，我们会有监控检测某个业务的 RT 值，比如 nginx 服务的 RT 值。一般本文所述的延迟、超时、响应慢、卡顿等词汇，只要影响到了用户的体验，都认为是抖动问题。</p><p></p><p>下图是衡量指标的汇总：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/de/deb4cc4079828416aa74e90c826527a0.png\" /></p><p></p><h2>3. Linux 内核网络抖动</h2><p></p><p></p><h3>3.1内核网络抖动点</h3><p></p><p></p><p>用户的业务部署在云上，一般运行在容器里或者直接部署在 guest OS 上，前面也提到过，操作系统内部、业务进程的调度运行、业务的请求和处理也会存在网络抖动的点。其中，报文的收发过程也存在诸多耗时的地方。首先看一个 Linux 内核网络协议栈的分层架构图。</p><p><img src=\"https://static001.geekbang.org/infoq/2e/2e26ee28c6b34a565d7ed83f4c60b43b.png\" /></p><p></p><p>我们先来回顾一下&nbsp;Linux 的网络收包流程：</p><p></p><p>1、数据报文从外部网络到达网卡。</p><p>2、网卡把数据帧通过 DMA 送到系统内存保存。</p><p>3、硬中断通知 CPU 有报文到达。</p><p>4、CPU 响应硬中断，简单处理后发出软中断。</p><p>5、软中断或者通过 ksoftirqd 内核线程处理报文，然后通过网卡 poll 函数开始收包。</p><p>6、帧被从 Ringbuffer 上摘下来保存为一个 skb。</p><p>7、协议层开始处理网络帧，经过 netdev、IP、tcp&nbsp;层处理。</p><p>8、协议层处理完之后，把数据放在 socket 的接收队列中，然后通过唤醒用户进程来进行收包。</p><p>9、用户进程经过操作系统的调度获得 CPU，开始从内核拷贝数据包到用户态进行处理。</p><p></p><p>Linux 网络的发包流程如下：</p><p></p><p>1、应用程序通过 send 系统调用发送数据包，从用户态陷入到内核态，内核会申请一个 sk_buff，然后将用户待发送的数据拷贝到 sk_buff ，并将其加入到发送缓冲区。</p><p>2、网络协议栈从 Socket 发送缓冲区中取出 sk_buff，并按照协议栈从上到下逐层处理，最后报文进入网络接口层处理。</p><p>3、网络接口层会通过 ARP 协议获得下一跳的 MAC 地址，然后对 sk_buff 填充帧头和帧尾，接着将 sk_buff 放到网卡的发送队列中，一般使用 qdisc 设置排队规则，进行入队和出队处理。</p><p>4、网卡驱动会从发送队列中读取 sk_buff，将这个 sk_buff 挂到 RingBuffer 中，接着将 sk_buff 数据映射到网卡可访问的内存 DMA 区域，最后触发真实的发送。</p><p>5、当发送完成的时候，网卡设备会触发一个硬中断来释放内存，主要是释放 sk_buff 内存和 RingBuffer 内存的清理。</p><p></p><p>处理流程如下图所示，数字编号不一定完全对应。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/7c/7ce69282e29bf86b630c0189d4c0e3c1.png\" /></p><p></p><p>上面所述的报文收发过程，存在网络抖动的地方是：协议栈和驱动的入口和出口处，以及内核态和用户态的衔接处。比如接收报文到达后发出中断到报文真正得到处理这段时间的耗时，这个耗时很多时候都是由于某个进程长时间关中断导致中断和软中断处理延迟；另一个是数据到达接收队列后，唤醒用户进程到真正调用 recvmsg 收包处理的这段时间的耗时，这个主要由于系统繁忙而出现调度延迟，被唤醒的进程长时间未能真正去处理收到的包。</p><p></p><p>因此，Linux 内核里，网络抖动一般是在中断和软中断处理的延迟，进程的睡眠和唤醒延迟，qdisc 排队延迟，Netfilter 处理延迟，tcp&nbsp;的超时重传延迟等。</p><p></p><h3>3.2 三类抖动的根因探寻和解决之道</h3><p></p><p></p><p>云计算涉及到的网络节点较多，且每个点都有发生抖动的可能，限于篇幅，同时由于操作系统和业务最贴合，本文只基于节点内部操作系统的视角。针对前面提到的三类抖动：当前抖动、历史抖动、ping 毛刺，来讨论一下如何去发现和解决这三类抖动的问题。</p><p></p><p>经过我们在实践中的摸索和分析总结，提出以下抖动根因的探测方法和抖动问题解决之道：</p><p></p><p>1. 针对 Ping 毛刺问题，提出在用户态构造报文进行探测的方法：Pingtrace。不同于大家常用的 ping 程序，Pingtrace 通过在 icmp/tcp/udp 的基础上增加 pingtrace 协议头，在 pingtrcace 报文沿途经过的节点填上对应的收发时间戳，最后通过计算各个节点的延时信息，构建一个拓扑来描绘节点详细信息，从而找到抖动的节点和抖动原因。</p><p></p><p>2. 针对当前抖动问题，对真实报文直接跟踪挖掘时延：Rtrace。它对真实业务报文所经过的内核处理函数特别是协议栈处理函数进行 tracing， 得到每个函数点的时间戳信息，支持 icmp/tcp/udp/lacp/arp 等协议报文调用路径的获取和时延信息的统计，还能清楚知道某个协议包在哪里由于什么原因丢包的，或者哪个函数处理慢了。</p><p></p><p>3. 针对历史抖动问题，提出常态化抖动监控系统：Netinfo。它对容器（pod）、流、逻辑接口的各项指标进行监控，追踪业务抖动的根因，进行集群和单机的告警上报。深度加工丢包、重传、拥塞控制、窗口变化、流量突发、中断延迟等指标进行分析，归一化成简单的健康度指标；同时在数据处理中心进行离群检测，找出影响抖动的几个重点指标和具有集群共性的指标。</p><p></p><p>4. 针对不同的业务应用，提出应用观测引擎 Raptor。业务应用的内在问题是客户直接能看到的，但是如何与系统指标关联，是当今观测领域的难点，它通过把应用内部的细节进行展开，结合系统的 profiling 剖析，能找到应用抖动的密码。</p><p></p><p>通过网络抖动三剑客和应用观测引擎 Raptor，我们能系统的监控和观测在节点内部出现的抖动，同时能定界出是业务应用自身的问题，还是外部网络的问题。下面的章节我们将简单介绍网络抖动三剑客的原理。</p><p><img src=\"https://static001.geekbang.org/infoq/95/9546df62af3ca46f49479ec0c70443e1.png\" /></p><p></p><h2>4. 瞬时毛刺的主动探测：Pingtrace</h2><p></p><p></p><h3>4.1 背景</h3><p></p><p></p><p>在碰到网络联通性较差或者系统比较卡时，我们喜欢用系统自带的 ping 命令向目标地址发送请求包进行检测，然后通过目标机回复的响应包来判断是否出现了延迟，这种方法简单又高效。但有时我们想知道，这个 ping 包延迟了，和业务的关系怎样？是否延迟高了或者又丢包了，业务应用就真的出问题了？延迟和丢包的具体点在什么地方？是系统内部还是外部链路？原因是什么？</p><p></p><p>经过这么几个灵魂拷问之后，我们发现，对于瞬时 ping 延迟突然冲高的问题（ping 毛刺），传统的 ping 工具已经不能直观的拿到背后的信息。为此我们提出了通过构造新报文（pingtrace 报文）的方式进行主动的探测，通过在 pingtrace 沿途经过的点填充 timestamp 的方式，把系统内部的延迟精细化到用户态和内核态的函数处理点，然后通过可视化方式展现延迟高的模块。</p><p><img src=\"https://static001.geekbang.org/infoq/d4/d45cca96714cf9ec7396783ab0273613.png\" /></p><p></p><h3>4.2 pingtrace功能介绍</h3><p></p><p></p><p>Pingtrace 通过在用户态构造探测协议报文，在独有的 pingtrace 头部增加 icmp、&nbsp;tcp&nbsp;及 udp 协议头，可以进行多种协议探测，同时基于 eBPF 技术，可以做到无侵入的方式实现系统内部细节的窥探，开销远远小于 tcpdump 等已有工具，并可实时展示各个数据链路的时延信息，快速发现问题边界。</p><p></p><p>下图是 icmp pingtrace 的协议实现（icmp 头可以替换为&nbsp;tcp&nbsp;和 udp 协议头）。在各个节点，要求其他节点捕获到特定 pingtrace 报文时填入 node id 和 timestamp（变通的实现方法是通过 eBPF 把报文送到用户态，然后补发带有 timestamp 的报文回送到源端），为了让报文尽可能小于 1500 个字节，可以通过控制表项数量来避免沿途的 IP 报文分片。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f9/f9e573e06ac58ccd6a37645eba1614cf.png\" /></p><p></p><p>下图是其工作过程：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/cc/cc72e35b2162af70de96bb56481432fe.png\" /></p><p></p><p>下图是最终呈现出来的效果，每个蓝点地方鼠标放过去会显示延时信息：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b1/b11e0cda9ec439420b55be9b6364c808.png\" /></p><p></p><p>注意：很多人关心发送端和接收端的时钟源不统一，如何来进行延迟节点的判定。我们在边界点采取了相对延迟的计算方法，而不是像其他几个点的绝对延迟计算方法。</p><p></p><p>计算方法如下：通过对边界的两个采集点时间戳信息计算出差值，以最近 100 个报文中最小的差值作为基准值，对下一个报文的差值进行校正（校正就是用当前算出来的两台机器时间戳差值相减得到 delta，减去基准值 base 算出来的结果），最后得到相对延迟。如果发现相对延迟较高，则说明链路上出现了问题。</p><p></p><p>这个是 udp 的 pingtrace 探测：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/83/830eb1139a65b5535610f26c0b2aee39.png\" /></p><p></p><p>这个是 tcp&nbsp;的&nbsp;pingtrace 探测：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c7/c732ccbd24130cd126dbcf31beb35c57.png\" /></p><p></p><p>&nbsp;tcp&nbsp;和 udp 的延迟探测，主要目的是为了探测系统&nbsp;tcp&nbsp;和 udp 处理路径是否出现延迟，因为绝大部分业务都会采用&nbsp;&nbsp;tcp&nbsp;和 udp（icmp pingtrace 不能满足此需求），由于端口号的原因，它主要多了一个端口探测和学习的过程。</p><p></p><h3>4.3 pingtrace 如何进行探测</h3><p></p><p></p><p>具体的使用上，有界面和命令行两种方式。界面方式只需要填入对应的源和目的 IP，它会自动下发安装命令到 client 和 server，然后开始进行诊断，诊断结果可以直接呈现是哪个节点的哪个阶段出现的延迟。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/9e/9e77a9fd9cec42e5be96541052459ec8.png\" /></p><p></p><p>或者通过命令行方式：</p><p></p><p><code lang=\"null\">sysak pingtrace_raw -c 127.0.0.1 -m 1000 -o log</code></p><p></p><h2>5. 真实业务报文延迟挖掘：Rtrace</h2><p></p><p></p><p>使用自定义报文探测方式虽然可以了解当前的系统负载和链路情况，但很难说明对某个业务或者协议是否真的有影响，所以我们还需要对实际业务的报文，包括&nbsp;tcp&nbsp;、udp、icmp、arp 及 lacp 等报文进行跟踪确定报文走的路径和每个函数的耗时。</p><p></p><p>rtrace 是一款基于 eBPF 的网络诊断工具，利用 eBPF 技术动态打点来取得报文时间信息，以及每个网络层的详细信息，比如&nbsp;tcp&nbsp;常见的 memory 使用情况，拥塞和回复 ack 情况，记录在日志里，可以辅助问题的定界和丢包查看。如下图，rtrace 监控的部分协议栈处理函数点：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/40/40c1aae5c80e4c5190787b8800dd31f3.png\" /></p><p></p><p>在云计算的集群环境里，抓取到的单个节点的延时和&nbsp;tcp&nbsp;连接信息，有时还是很难去判断是否真的有问题，如果能从集群的维度，或者多个节点的共性事件的方式，或许能收获更多。rtrace dump 功能还支持集中式抓包的能力，类似一键发起抓包功能，然后进行集中式分析，比如分析 tcp&nbsp;的发送接和接收到 ack 时间，到底是慢在哪个节点上，通过对比&nbsp;tcp&nbsp;的 sequence 来汇总数据，很快就能得到结果。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0d/0d1c3ff6882b4da09a2c33314239e6f6.png\" /></p><p></p><h2>6. 历史抖动监控：Netinfo</h2><p></p><p></p><p>历史抖动问题，是几种抖动问题里最难解决的，由于问题不再复现，我们能想到的是增加一些监控手段，把历史某个时间点的系统状态、协议交互情况等信息收集起来是不是就能解决抖动问题了？答案是否定的。如果单纯从网络本身的丢包和&nbsp;tcp&nbsp;连接状态信息来判断，显然还不够。还需要看当时 IO 是否 hang 住，内存是否 oom，系统是否宕机，中断是否有突发，调度是否延迟等。</p><p></p><p>如何在上百个指标中快速找到异常点？Netinfo 在检测到抖动后(业务的 RT 值或者健康度指标)，会先汇集所有指标进行组合，进行离群检测。最终把集群里的共性事件，通过离群统计算法来确定抖动根因。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ee/ee1e4d1afcb0be5392ee77050abe96de.png\" /></p><p></p><p>Netinfo 主要由数据采集和数据分析告警两部分功能组成：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1a/1a1046bead950ca7def35b297ffdb332.png\" /></p><p></p><p>关于 Netinfo 可以参考文章&nbsp;<a href=\"https://mp.weixin.qq.com/s?__biz=MzUxNjE3MTcwMg==&amp;mid=2247485921&amp;idx=1&amp;sn=213fb935d2bcc8f35926a85ac657d2dd&amp;scene=21#wechat_redirect\">Netinfo：揭开网络抖动面纱的神器</a>\"。Netinfo&nbsp;的功能，后面会移到 SysAK 里，同时，后端的数据处理部分，也会移到 SysOM 统一平台分析。</p><p></p><p></p><blockquote>SysOM&nbsp;平台链接地址：http://www.sysom.pro/welcome</blockquote><p></p><p></p><h2>7. 网络抖动探测标准化设想及未来展望</h2><p></p><p></p><p>借助于网络抖动三剑客（Pingtrace、Rtrace、Netinfo），我们很容易知道系统的抖动点和原因。但是这些可能只是我们自己的理解，我们基于云场景做了很多探索，并把这些探索沉淀到了龙蜥操作系统，还进行了很多优化。而目前操作系统呈现百花齐放的态势，网络抖动的发现和检测方法不统一，将很难在一些指标评测和系统对接时，有一个有效的验收标准。</p><p></p><p>因此我们觉得有必要形成一个标准，比如：</p><p>1）云计算场景下抖动的定义和表现是什么？不同类型的业务有什么具体现象就算是抖动了？</p><p>2）抖动包含哪些内容和衡量指标？指标的范围是什么？</p><p>3）如何检测网络抖动？有没有统一的工具进行探测？探测哪些点合适？</p><p>4）需要在哪些点增加时间戳统计？比如 Linux 用户态到内核态的发包点，网卡的发包点。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/de/dee0643a5727c0583d62993d8f300dd3.png\" /></p><p></p><p>针对网络抖动，每个人的理解可能不一样，上文 2.1 节提到抖动的几个现象，就是具体的案例。如果能结合具体的指标去衡量，就会有很大的可实操性。比如 RT 这个指标，我们选择 nginx 的业务作为衡量对象，RT 在多少范围算是异常的？10ms 或者 100ms 都可能，关键评判是不同用户场景，是否这个 RT 值影响到了用户体验，如果用户体验很差，就认为是发生了抖动。</p><p></p><p>当然最重要的，我们需要制定出一套方案和工具去进行探测，只要工具说探测到 nginx 业务的 RT 指标高了，那么就说明在同一个系统负载下，你的整个云服务网络抖动大，网络质量不太好，这个时候我们就要根据探测到的根因去解决问题。</p><p></p><p>回到操作系统层面，我们需要指定哪些探测点呢？只有大家形成一个统一认识，在Linux 内核收发包的出入口进行时间戳信息的提取是合适的。例如在内核 sendmsg 系统调用函数和网卡发包的地方（比如 virtio-net 的 start_xmit 函数）增加时间戳信息。这样大家实现的工具，就能统一到一个衡量维度。</p><p></p><p>比如，我们在 virtio-ne 驱动里，我们也在积极推动增加一个时间戳的点，将有助于我们在发包处时间戳的统一：</p><p></p><p><code lang=\"null\">+#define VIRTIO_NET_HDR_F_TSTAMP</code></p><p></p><h2>8. 总结</h2><p></p><p></p><p>最后做一个总结，抖动的检测和治理是一个长期的任务，如果能将 Linux 系统内部的检测工作标准化起来，将有助于我们制定统一的性能评测方案，以及运维自动化的实现。</p><p></p><p>另外，上述工具几乎全部采用无侵入的方式实现，基于eBPF实现给了我们很大的发挥空间，它们将会在 SyaAK 里全部开源（目前已大部分开源）敬请关注，后面也会有系列文章再次详细介绍。</p><p></p><p></p><blockquote>相关链接地址：SysAK 的开源项目链接：git@gitee.com:anolis/sysak.gitSysOM 的运维平台链接：git@gitee.com:anolis/sysom.git</blockquote><p></p>",
    "publish_time": "2022-12-13 11:19:40",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "放出狠话又自打脸，特斯拉将重新在车辆上安装雷达，最快下个月发布",
    "url": "https://www.infoq.cn/article/SINxMyTD46V2NRNMm84q",
    "summary": "<p>特斯拉最近向美国联邦通信委员会（FCC）提交了一份申请，暗示有意在车辆上重新安装雷达。有些朋友可能还记得，不久之前特斯拉刚刚放出狠话，称自家汽车不需要任何雷达。这次恢复的将是高清或“成像”雷达，其技术指标要远优于之前宣布去除的雷达。</p><p>&nbsp;</p><p>根据媒体披露的细节来看，特斯拉提交的这份材料，其主要目的是申请延长60天的保密期，雷达的具体细节、外观照片暂不对外。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f9/f98ddc58e4304e75beb3c1fa3b47b01c.png\" /></p><p></p><p>&nbsp;</p><p>早在 6 月份，特斯拉就已向FCC申请在其车辆中使用一种新雷达——在文件中被描述为“76-77 GHz 汽车雷达”。技术专家认为，从工作频率 (76-77GHz) 以及特斯拉提交给 FCC 的传感器的机械设计来看，这款雷达应该是用于 ADAS 辅助驾驶。美国联邦通信委员会 (FCC) 已授予特斯拉保密待遇，以对新雷达的细节保密。上个月末，特斯拉申请将该保密待遇从到期日（即 12 月 7 日）起再延长 60 天。</p><p>&nbsp;</p><p>给 FCC 的授权信上写着：“......该设备要到 2023 年 1 月中旬才会上市。为避免在我们的产品发布前发生任何不必要的披露和竞争损害，我们要求将上述展品再保留 60 天，直到2023-02-07。”FCC 文件显示，监管机构已批准特斯拉的延长保密请求。</p><p>&nbsp;</p><p></p><h2>不久前，特斯拉刚割完了“阑尾”</h2><p></p><p>&nbsp;</p><p>自 2016 年以来，特斯拉声称其未来生产的所有车辆都拥有“所有必要的硬件”，未来的车辆将彻底由计算机视觉所驱动，这也意味着全面移除不必要的硬件，比如各种雷达。</p><p>&nbsp;</p><p>马斯克对雷达相当嫌弃。自动驾驶中传感器品种主要有毫米波雷达、激光雷达、超声波雷达和摄像头。2019年他就曾放话“用激光雷达的都是傻子，像是人身上长了一堆阑尾。”我们知道早期激光雷达相当昂贵，虽然近年来价格有所下降，<a href=\"https://electrek.co/2020/10/22/tesla-4d-radar-twice-range-self-driving/\">但是马斯克还是表示</a>\"“即使它是免费的，我也不会把它放上去”。</p><p>&nbsp;</p><p>此前特斯拉的传感器方案为 8 摄像头，辅以1 个前置毫米波雷达，12 超声波雷达。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e1/e1df241c22ef076c25d5fe21578d8538.png\" /></p><p></p><p>&nbsp;</p><p>2021 年 5 月，特斯拉宣布去掉了毫米波雷达。然后马斯克还在去年 6 月特斯拉停止使用其雷达后<a href=\"https://electrek.co/2022/12/06/tesla-radar-car-next-month-self-driving-suite-concerns/\">说</a>\"，“纯视觉的安全概率会比视觉+雷达更高”。</p><p>&nbsp;</p><p>今年，他们再次去掉了新车型上的超声波短程传感器：自 2022 年 10 月上旬开始，为北美、欧洲、中东和台湾制造的 Model 3 和 Model Y 车型的 12 个超声波传感器正式宣布被移除。</p><p>&nbsp;</p><p>特斯拉坚称，此举是为了让汽车从传感器融合（即将来自不同传感器的信息流结合起来以观察同一物体）的“泥潭”中解放出来，打造一个更简洁、更可靠的感知系统，为汽车的终极“全自动驾驶”目标奠定基础。</p><p>&nbsp;</p><p>但不少业内人士对此抱有怀疑态度，认为特斯拉取消雷达的决定仅仅是因为供应链危机期间雷达元件采购困难，阻碍了该公司正常出货。事实证明，在移除雷达之后，特斯拉不得不禁用部分由雷达提供的重要功能，隔了很长一段时间才逐渐恢复。</p><p>&nbsp;</p><p>事实上，不少特斯拉驾驶员报告称，转为纯视觉驱动后，车辆莫名其妙刹车的情况开始增加——即虽然车前什么都没有，但车辆却突然开始减速。在超声波雷达被移除后，泊车辅助和自动泊车功能也一并失效。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ee/ee113b1ecdf2c0ccdf804a127b01c838.png\" /></p><p></p><p>一辆特斯拉汽车在Autopilot模式下撞上路边的警车。</p><p>&nbsp;</p><p></p><h2>雷达又回来了</h2><p></p><p>&nbsp;</p><p>特斯拉的原有雷达采用非常传统的设计，而且功能不强。新雷达将是一枚“高清”雷达，能够为车前的探测目标生成低分辨率图像。与其他雷达一样，其不仅能够提供与目标间的精确距离，还可以检测目标接近/远离车辆的速度。在老式雷达上，这种速度测量功能至关重要。这是因为图像分辨率太低，系统根本无法准确判断交通指示牌，所以用户只能直接忽略车机屏幕上那到处“荡漾”的障碍物回波。</p><p>&nbsp;</p><p>而成像雷达则更像是马斯克本人之前尖锐抨击过的“拐杖式”激光雷达。该雷达的分辨率虽然较低，但却有以下几大优势：</p><p>&nbsp;</p><p>与传统激光雷达相比，成像雷达总能更快读取速度参数。激光雷达难以穿透雾气或其他阻挡性天气，但成像雷达可以看得很清楚。成像雷达更加坚固耐用、成本低廉且容易制造。</p><p>&nbsp;</p><p>其他不少自动驾驶团队也在使用成像雷达。之前，Waymo公司就发布过自家成像雷达的部分技术细节。在演示视频中，可以看到信号的分辨率非常之低。其中最好的分辨率大概是0.5度，大多数情况下分辨率为1度。而典型的激光雷达可以达到0.1度，精度高出10倍。</p><p>&nbsp;</p><p>虽然各有优劣，但还是很难理解为什么马斯克强调激光雷达是一根终将被抛弃的拐杖，而成像雷达却不是。大多数研究团队其实两者都要，特斯拉前段时间则表示两者都不需要。</p><p>&nbsp;</p><p>这样的雷达能帮助特斯拉解决几个众所周知的问题。首先，特斯拉的自动驾驶模式曾多次撞上右侧路肩并过来的紧急车辆，事故过多导致公司正在接受调查。普通雷达能够观察到目标，但难以将对方车辆跟路侧护栏区分开来。成像雷达或激光雷达分辨起来要更容易些。计算机视觉其实也能区分，只是还需要雷达作为辅助的“拐杖”。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b3/b3e5d427618e39a6047a04fab172deb6.png\" /></p><p></p><p>这种成像雷达（并非特斯拉使用的型号）称其特殊天线可提供0.5度分辨率。</p><p>&nbsp;</p><p>另外，添加雷达还能减少莫名其妙的制动。雷达能让自动驾驶系统确定前方是否有车，该车是否在移动。漏报有可能导致碰撞，这无疑是驾驶过程中最糟糕的状况；误报则是前方无车却突然制动，雷达的引入有望同时降低这两种问题的发生几率。</p><p>&nbsp;</p><p>如果消息得到证实，那就代表着特斯拉称之为“occupancy network”的视觉型虚拟激光雷达并没能达成理想的可靠性。人脑能够观察移动画面并计算出对象距离自己有多远；神经网络工具虽然也有这种能力，但在质量和可靠性上远无法与人脑相比。激光雷达和成像雷达则是个取巧的办法，不用像大脑那样强劲的推理算力，它们通过直接读取信息来获得测量指标。</p><p>&nbsp;</p><p>对马斯克来说，这事好像挺无所谓的。</p><p>&nbsp;</p><p>虽然他经常对激光雷达口诛笔伐，但对于成像雷达却持较为开放的态度。外媒electrek曾放出消息称特斯拉在研究一款新的4D毫米波雷达，可以将特斯拉原有毫米波雷达（ARS410射程为160米）的探测范围扩大约一倍，达到300米。而FCC文件中的提及的“76-77 GHz 汽车雷达”也是一种高清或毫米波“成像”雷达。毕竟成像雷达相较于激光雷达确实有着不少优势，而且特斯拉就算被迫收回之前对于“传感器融合”的谴责，也还不至于彻底否定自己的技术路线。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/71/71c0b2ea83bae81d028df88e84039808.png\" /></p><p></p><p>&nbsp;</p><p>&nbsp;</p><p>唯一的影响，就是特斯拉需要改装所有预购了“FSD”套件的车辆。好在这种成像雷达零售也只要几百美元，而且车上已经预留了安装点位。既然车主花了那么多钱买FSD，那肯定是够特斯拉完成这项小改装的。另外，估计特斯拉这次还可能提供更新、质量更高的摄像头，甚至升级处理器——毕竟他们之前就已经为不少车主做过升级了。</p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://www.forbes.com/sites/bradtempleton/2022/12/12/tesla-may-be-adding-a-radar-which-is-the-crutch-they-definitely-need/?sh=c6848c473e7f\">https://www.forbes.com/sites/bradtempleton/2022/12/12/tesla-may-be-adding-a-radar-which-is-the-crutch-they-definitely-need/</a>\"</p><p><a href=\"https://techcrunch.com/2022/12/07/tesla-appears-to-be-turning-back-to-radar-for-its-vehicles/\">https://techcrunch.com/2022/12/07/tesla-appears-to-be-turning-back-to-radar-for-its-vehicles/</a>\"</p><p><a href=\"https://electrek.co/2022/12/06/tesla-radar-car-next-month-self-driving-suite-concerns/\">https://electrek.co/2022/12/06/tesla-radar-car-next-month-self-driving-suite-concerns/</a>\"</p>",
    "publish_time": "2022-12-13 13:21:53",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]