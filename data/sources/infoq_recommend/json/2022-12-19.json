[
  {
    "title": "2022 Gartner全球数据库魔力象限发布，腾讯云数据库入选",
    "url": "https://www.infoq.cn/article/bdb91d86f14adb16009dd76ec",
    "summary": "<p>12月16日，在刚刚发布的 Gartner® 2022年度《云数据库管理系统魔力象限》研究报告中，腾讯云数据库进入特定领域者（Niche Players）象限。同时，据Gartner云数据库管理系统运行用例关键功能报告，腾讯云数据库在OLTP（TDSQL/TDSQL-C）及轻量级TP能力（KeeWiDB）得分均为国内第一。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/46/4646552a55022bda3e3db9b31fb9d67f.png\" /></p><p></p><p></p><p>根据Gartner云数据库管理系统运行用例关键功能报告，腾讯云数据库TDSQL在OLTP事务、轻量级事务和增强事务三个用例中得分均高于3.0（总分5分，3分以上代表满足要求），其中OLTP事务用例得分最高（3.7）。</p><p></p><p></p><h1>OLTP 第一</h1><p></p><p></p><p>截止目前，腾讯云数据库TDSQL核心代码自研率已达到100%，管理超过50万个节点，金融级容灾要求下，单实例存储规模达到PB级别，单实例日请求次数超百亿次，服务客户资源完成百万核和百PB的“双百”里程碑。</p><p></p><p>市场对腾讯优异的OLTP产品能力进行了印证：TDSQL正在被国内各行业广泛采用，以取代Oracle 和IBM在其核心业务中的应用。</p><p></p><p>通过对OLTP数据库能力的持续投入，腾讯云数据库TDSQL迅速抓住了中国金融行业数字化转型的需求，并在其核心系统国产化替换场景中表现抢眼。目前，腾讯云数据库TDSQL已经服务了TOP 10银行中的七家，在TOP 20银行中也服务过半，在不同金融机构核心系统中的渗透率均有显著提升。</p><p></p><p></p><h1>轻量级事务 第一</h1><p></p><p></p><p>腾讯云自研的分布式数据库KeeWiDB实现国内首个三级存储架构设计，搭载全自研存储引擎，一举解决了IO放大、性能抖动等KV存储难题，单节点性能可达到18万写入、28万读取，P99.9延迟小于10ms。</p><p></p><p>KeeWiDB通过日志实时持久化来实现数据的高速存储，支持数据的冷热分级、优化了存储成本，分布式架构支持单集群可线性堆叠至千万级并发吞吐量、PB级存储规模，解决了键值存储场景在性能、持久化、成本和规模存在的四大挑战。</p><p></p><p>凭借产品优势和独特价值，KeeWiDB已在电商、社交、媒资、游戏等行业核心业务中获得了广泛应用，助力企业完成存储系统性能、成本、易用性的优化。</p><p></p><p></p><h1>OLAP&nbsp;大提升</h1><p></p><p></p><p>在OLAP方面，腾讯云数据库TDSQL集高并发、高SQL兼容度、高扩展性、以及企业安全审计等多项能力于一身。产品采用无共享架构，支持海量数据高并发实时在线交易和完整的事务分布式 ACID 能力，支持海量数据多维统计分析。今年6月，新升级后的TDSQL带来了通用场景下查询性能10倍以上的提升。</p><p></p><p>基于持续的产品与生态建设，腾讯云数据库TDSQL已应用于超过50万客户，包括主流金融、政务、运营商、工业制造企业，并在亚太、日本和欧洲等海外市场拥有广泛业务布局。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b9/b90bf1a99164f659153659a504507c7c.gif\" /></p><p></p><p></p><p>在产品能力上，腾讯云数据库TDSQL旗下已涵盖金融级分布式、云原生、分析型等多引擎融合的完整数据库产品体系，提供了业界领先的金融级高可用、存算分离、数据仓库、企业级安全等能力，同时具备智能运维平台、Serverless版本等完善的产品服务。</p><p></p><p></p><p>Gartner, Magic Quadrant for Cloud Database Management Systems, December 2022.</p><p>Gartner, Critical Capabilities for Cloud Database Management Systems for Operational Use Cases, December 2022.</p><p>Gartner Peer Insights,&nbsp;https://www.gartner.com/reviews/market/cloud-database-management-systems/vendor/tencent-cloud/product/tencent-cloud-database, as of 15th December 2022</p><p>Gartner不对其研究出版物中所述的任何厂商、产品或服务做背书，也不建议技术使用者只选择那些评价最高或其他指定的厂商。Gartner 研究出版物包含 Gartner 研究组织的观点，不应被解释为事实陈述。Gartner 对这项研究不提供明示或默示的所有担保，包括适售性之任何担保或符合特定目的之任何担保。Gartner Peer Insights 内容包含个人用户根据自己的经验发表的意见，不代表 Gartner或其附属公司的观点。GARTNER, Magic Quadrant和Peer Insights是 Gartner, Inc 和/或其在美国与全球关係企业的注册商标和服务标章，经许可使用。著作权所有，并保留一切权利。</p>",
    "publish_time": "2022-12-19 12:03:13",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "谷歌开源安全的机器学习操作系统KataOS",
    "url": "https://www.infoq.cn/article/aXGs7kI0AqYMwd0KiqDJ",
    "summary": "<p>谷歌的AmbiML团队最近开源了<a href=\"https://opensource.googleblog.com/2022/10/announcing-kataos-and-sparrow.html?m=1\">KataOS</a>\"，这是一个适用于嵌入式机器学习硬件的可证明安全操作系统。KataOS基于<a href=\"https://sel4.systems/\">seL4</a>\"微内核，使用<a href=\"https://www.rust-lang.org/\">Rust</a>\"实现。除了KataOS，谷歌正在发布Sparrow，这是针对基于<a href=\"https://riscv.org/\">RISC-V</a>\"架构安全硬件平台的操作系统参考实现。</p><p></p><p>该版本发布是在谷歌开源博客上宣布的。AmbiML团队在安全的嵌入式环境上为机器学习构建工具，他们开发了KataOS，以解决智能设备所收集的数据在隐私和安全性方面所面临的挑战。该解决方案的基础是seL4，一个在数学上已证明其安全性的微内核。其他组件是使用Rust编写的，该团队选择Rust的部分原因在于其内存安全性。KataOS是使用<a href=\"https://docs.sel4.systems/projects/camkes/\">CAmkES</a>\"构建系统构建的，适用于RISC-V或ARM架构。按照AmbiML团队的说法：</p><p></p><p></p><blockquote>我们的目标是开源整个Sparrow，包括所有的硬件和软件设计。目前，我们刚刚开始在GitHub上发布KataOS的早期版本。所以，这只是一个开始，我们希望你能加入我们，构建智能环境（ambient）机器学习系统的可信任的未来。</blockquote><p></p><p></p><p>近年来，始终在线或环境智能设备已经变得越来越普遍，它们收集和使用个人数据进行机器学习，这引起了人们对隐私的关注。尽管像谷歌这样的公司已经开发了诸如<a href=\"https://www.infoq.com/articles/federated-ml-edge/\">联合学习</a>\"这样的技术，以帮助保护机器学习数据集的隐私，但是这仍然有设备被破坏或黑客攻击的隐私风险。</p><p></p><p>作为提升这些设备安全性的基础，谷歌最近与<a href=\"https://antmicro.com/\">Antmicro</a>\"合作，为RISC-V矢量指令开发了<a href=\"https://opensource.googleblog.com/2022/09/co-simulating-ml-with-springbok-using-renode.html\">Renode仿真支持</a>\"。这项工作是谷歌开发Springbok的一部分，这是一个基于RISC-V的机器学习硬件加速器。Renode仿真环境允许谷歌团队共同开发适用于安全嵌入式机器学习平台的硬件和软件。</p><p></p><p>谷歌团队<a href=\"https://antmicro.com/blog/2022/08/running-rust-programs-in-sel4/\">继续与Antmicro合作</a>\"开发了KataOS。团队通过开发seL4-sys crate为seL4微内核添加了Rust支持。他们还为面向微内核的RISC-V实现做出了贡献，并为Renode添加了针对sel4的调试功能。</p><p>在Twitter上，有些用户想知道KataOS的发布是不是意味着谷歌会将<a href=\"https://en.wikipedia.org/wiki/Fuchsia_%28operating_system%29\">Fuschia</a>\"淘汰，Fuschia是一个由谷歌开发并在Nest设备中使用的嵌入式操作系统。软件开发人员<a href=\"https://twitter.com/DThompsonDev/status/1582704902630875141\">Danny Thompson指出：</a>\"</p><p></p><p></p><blockquote>根据我的理解，它依然在运转之中。Fuschia会作为Android和其他系统的操作系统，我认为KataOS的意图更加倾向于嵌入式设备。</blockquote><p></p><p></p><p>KataOS项目组负责人<a href=\"https://github.com/jtg-google\">June Tate-Gans</a>\"参加了Hacker News上的讨论，并<a href=\"https://news.ycombinator.com/item?id=33222400\">回答了用户的问题</a>\"。当一位用户指出，可证明安全的硬件和软件是更安全的系统的“筹码”时，Tate-Gans回答说：</p><p></p><p></p><blockquote>绝对如此，这也是为何我选择开启seL4并使用Rust作为用户层的原因。seL4已经有一个验证框架，所以可以使用它来确保我们的系统设计和实现是良好的。我们花了一些时间与seL4的人合作，在这些变化中找到了一个很好的中间地带，我们在这个过程中会不断验证设计，但我们想尽快把这些东西公布出来，而不是一直等待，因为这有助于获取反馈和合作。我们唯一的遗憾是不能公开整个源码树。但我们会做到这一点的，在此期间，这是一个很好的开端。</blockquote><p></p><p></p><p><a href=\"https://github.com/AmbiML/sparrow-kata-full\">KataOS的源代码</a>\"可以在GitHub上找到。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/11/google-kataos-ambient-ml/\">Google Open-Sources Secure ML Operating System KataOS</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/kRwmRjy1uqro43McteIj\">医学生自学机器学习，利用GPT-3开发写作助手，收入月月翻倍，项目被收购后成人生赢家</a>\"</p><p><a href=\"https://www.infoq.cn/article/bNkyoLzwxU7Li2v94Noe\">InfoQ 2022年趋势报告：人工智能、机器学习和数据工程篇</a>\"</p><p><a href=\"https://www.infoq.cn/article/ipYGCdLZ7O1ON8opTH17\">机器学习工程化，企业AI的下一个起点</a>\"</p>",
    "publish_time": "2022-12-19 13:52:27",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "从优化持久谈起，如何让NoSQL数据库更加灵活易用？",
    "url": "https://www.infoq.cn/article/f0whs5tlNlTkXiMw9ZLa",
    "summary": "<p>大数据时代，数据体量和复杂性对于数据库提出更高要求，仅依靠关系型数据库难以处理这些数据，非关系型数据库得以快速发展壮大。主流的的非关系型数据库有<a href=\"https://s.geekbang.org/search/c=0/k=Redis/t=\">Redis</a>\"、Memcache、MongoDB、HBase等。</p><p>&nbsp;</p><p>为了满足广泛的业务场景对于数据库提出的高可用、高效率、高可扩展性的要求，Redis的应用场景也早已突破了缓存的范畴，并提供了<a href=\"https://s.geekbang.org/search/c=0/k=%E6%8C%81%E4%B9%85%E5%86%85%E5%AD%98/t=\">持久内存</a>\"的解决方案。业务数据量爆炸式增长，Redis的内存消耗在不断增加。这意味着，作为一个基于内存的数据库，Redis的内存是否被高效合理的利用至关重要。在持久内存的主流思路下，是否有一种方案可以平衡企业对于性能、成本、持久化和规模的需求？</p><p></p><h1>Redis提供的持久化方案行不通了吗？</h1><p></p><p></p><p>我们先来系统看下Redis提供的AOF和RDB两种持久化方案。AOF可以通俗地理解为日志记录，将每一个收到的写命令都通过write函数追加到文件中，好处在于写入性能高，没有磁盘寻址的开销，后台重写不影响客户端读写，秒存的方式能够紧急回复误删的数据，但劣处在于日志文件过大，写QPS相对低，数据恢复不能保证100%实现。</p><p>&nbsp;</p><p>RDB的持久化通过在指定的时间间隔内将内存中的数据集快照写入磁盘来实现。生成RDB文件时，Redis主进程不需要进行任何磁盘IO操作，通过子进程来进行保存，适合进行备份和灾难恢复，并且恢复速度比AOF更快。但RDB也有自己的局限，正是因为保存动作由子进程来实现，所以在快照持久化期间修改的数据不会被保存，丢失数据的可能性变大。</p><p>&nbsp;</p><p>所以Redis 4.0提出了混合式持久化策略，取两种方案的优点，但兼容性不佳。如果从内存消耗的角度来看，Redis内存消耗主要在于其主进程的自身内存、对象内存、缓冲区内存、内存碎片方面，和子进程的AOF/RDB重写时的内存消耗。通过优化管理Redis内存的使用，达到用更少的内存存储更多数据、节省成本的目的，才能真正实现Redis的高性能和高可用，但难以从根本上缓解内存消耗大带来的成本压力问题。业内也有一些基于磁盘的KV存储产品，例如Pika、Kvrocks、SSDB等，难比Redis的性能。</p><p>&nbsp;</p><p>行业内有句话，软件优化三年不如硬件更新一代。Redis提供的持久化方案是软件角度的解决方案，或许我们可以从硬件角度来找到解决内存成本、容量限制以及持久化等一系列问题的方法。&nbsp;</p><p></p><h1>从硬件的角度能否优化持久内存？</h1><p></p><p>&nbsp;</p><p>英特尔®傲腾™持久内存(PMem)和Redis的结合提供了一个思路。传统的内存和存储架构中，通过DRAM内存直接访问存储设备，虽然快但是容量有限，成本也高，并且无法做到持久内存。持久内存处在内存DRAM和外存（HDD或者SSD）之间，性能优于外存输于内存，既可以当做内存使用，也可以当做持久化外存设备使用。英特尔®傲腾™持久内存通过在DRAM内存和块存储之间加入大容量持久内存层，提供了接近DRAM内存的性能、更大的存储容量、降低了数据的易失性。</p><p>&nbsp;</p><p>英特尔®傲腾™持久内存(PMem)和Redis的结合一度被业内视为“天作之合”。但是仅仅基于内存的Redis依然给企业带来了不小的成本压力。传统数据库的设计原则中，默认以存储IO为瓶颈进行设计。而英特尔®傲腾™持久内存(PMem)存储模式优化，主要解决的就是外部数据存储IO性能瓶颈的问题。云时代高并发场景下大量的IOPS，也要求数据存储找到新的解决方案。</p><p>&nbsp;</p><p>腾讯云数据库团队一直在寻找让Redis“快和低成本兼具”的优化方案，曾推出Redis4.0集群版解决方案。为了进一步释放英特尔®傲腾™持久内存(PMem)的性能，如今，腾讯云数据库团队基于全新的架构设计思路推出了首款软硬件结合、高速低延迟的NoSQL数据库产品——KeeWiDB键值数据库，提供了高性能、低成本的分布式KV存储方案。</p><p>&nbsp;</p><p>据悉，KeeWiDB整体架构由代理层和服务层两个部分构成，代理层负责与客户端进行交互，服务层负责数据的存储以及在机器发生故障时可以自动进行故障切换。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ce/ced8bddbdd75b184c243fa24984bedd0.png\" /></p><p></p><p>值得关注的是，KeeWiDB服务层后端集群架构的具体实现上参考了Redis的集群模式，用多个分片和节点实现一主多从的高可用架构，并通过每个分片的主节点Slot数据实现弹性扩缩容。据悉，KeeWiDB的设计目的，就是为了解决Redis的痛点问题，目标实现更大容量，更高性能以及更低延迟。所以与Redis的数据存储在内存中不同，KeeWiDB的数据主要存储在持久内存（PMEM）和固态硬盘（SSD）上。</p><p><img src=\"https://static001.geekbang.org/infoq/c0/c0469d00fdc8430fdde380b959809ecd.png\" /></p><p>KeeWiDB采取了“内存（DRAM）+持久内存（PMEM）+固态硬盘（SSD）”分级存储的架构设计，根据数据访问热度自动分级、自动升热降冷，将不同的同访问密度的数据存储到不同成本的介质中，预期在实现高性能和低延迟的同时，提高性价比。</p><p>&nbsp;</p><p>以查询操作为例，如果查询操作命中DRAM中存储的少量高速索引，则最多仅需要一次IO就可以定位到value的位置；如果没有命中，才会通过PMEM来做热数据的查找；如果依然没有命中，才会从SSD中读取冷数据。这意味着在主要读的场景下，KeeWiDB的性能优势将更加明显。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e9/e9bf9e980d3d12579b3610d7515322db.png\" /></p><p></p><p>值得关注的是，在写入方面，KeeWiDB采用了英特尔®傲腾™持久内存(PMem)作为高速写入的存储介质，通过持久内存对数据进行实时持久化，延迟相对SSD降低了2个数量级，IO更少吞吐更高；在读取方面，KeeWiDB自研了一个基于Hash存储的KV引擎，而Hash结构和KV存储在数据模型、访问模型上天然的匹配。</p><p>&nbsp;</p><p>在文件操作场景，从大容量低成本的角度出发，KeeWiDB将数据文件存放在SSD上，在处理用户请求期间不再直接操作SSD上的数据页，而是操作读写延迟更低的PMem，使数据库的性能和吞吐量得到了进一步的提升。</p><p>&nbsp;</p><p>为了避免日志文件在写入的过程中涉及到的持久化操作有可能会成为整个系统的瓶颈，KeeWiDB通过将WAL存放在PMem上，可以大幅降低日志持久化操作耗时。由于PMem比SSD更快的读写速度，数据库整体的故障恢复速度也得到了大幅提升，进而提升了整个系统的可用性。</p><p>&nbsp;</p><p>来自腾讯云的压测数据显示，KeeWiDB在长时间压测中，P99和P99.9都保持非常稳定且达到个位数的响应延迟；吞吐量方面，KeeWiDB的延迟始终能保持在12万以上，比基于RocksDB方案要高50%以上。KeeWiDB完全兼容Redis协议，使用Redis的业务无需修改任何代码便可以迁移到KeeWiDB上。原生分布式架构，让KeeWiDB可以提供百TB级的存储容量，并且支持水平扩展。</p><p>&nbsp;</p><p>总体而言，KeeWiDB实现了：</p><p>&nbsp;</p><p>性能（单节点）：28万读取，18万写入，P99&lt;2ms可水平堆叠，性能线性提升；</p><p>成本：分级存储，冷数据成本下降97%；</p><p>持久化：命令级持久化；毫秒级稳定写入延迟；SSD提供低成本持久化；</p><p>大容量：单节点提供TB级容量空间；集群方式提供128TB容量空间。</p><p>&nbsp;</p><p>虽然<a href=\"http://www.dostor.com/p/82025.html\">第四代英特尔®傲腾™持久内存不再开发</a>\"有些遗憾，但是第四代英特尔®至强®可扩展处理器（Sapphire Rapids）将内置一系列加速器，包括新的指令集架构和集成IP，能够高效应对人工智能、数据分析、网络、存储和其他高需求的工作负载，为提升软硬件性能提供了灵活的解决方案。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/43/4352d7fc092d1d28862f05c2f245d23a.png\" /></p><p></p><p>出色的数据库性能优化离不开计算、网络、存储以及监控运维等各方面技术优化，腾讯云数据库依托英特尔在硬件平台、架构层、应用层提供全栈优化的技术支持：除了前文提到的持久内存，在计算层面，英特尔至强处理器内置的密码操作加速，可以把数据库上的加密负载卸载到专用芯片上，从而降低CPU的负载，提高整体吞吐量。同时，在软件平台优化、参考架构设计、性能测试验证和创新技术应用方面，英特尔和腾讯云数据库团队展开了全面的合作，构筑了坚实的技术创新基座。&nbsp;</p><p></p><h1>NoSQL数据库需要更加灵活易用</h1><p></p><p>&nbsp;</p><p>无论是对于持久内存方案的探索，还是对于硬件性能的进一步挖掘，都是为了打造一款更加灵活易用的NoSQL数据库，满足业务场景的需求。从电商、游戏、直播、短视频等一系列移动端应用场景的发展态势来看，“高并发、低延迟、低成本”的需求只会越来越旺盛。</p><p>&nbsp;</p><p>无论是因“快”备受追捧的KV数据库Redis，还是用文档取代关系型数据库的表格后，赋予数据更大的灵活性的MongoDB，都在试图将NoSQL数据库在架构层面进一步提升高并发、易扩展和灵活易用等特性，服务海量并发访问和大数据业务场景。</p><p>&nbsp;</p><p>随着数字化转型在企业内部的进一步深入，大量的数据被分层，海量语音、图像视频等非结构化的数据亟待被挖掘价值，将推动NoSQL数据库拥有更细颗粒度和更高水平的技术创新出现。NoSQL数据库需要更加灵活易用，也将朝着更加灵活易用的方向发展。</p>",
    "publish_time": "2022-12-19 14:19:55",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "vivo 云原生容器探索和落地实践",
    "url": "https://www.infoq.cn/article/68x6LkEOQz1avz5NwkJc",
    "summary": "<p></p><blockquote>本文根据潘良彪老师在“2022 vivo 开发者大会\"现场演讲内容整理而成。</blockquote><p></p><p></p><p>2018 年起，vivo 以容器作为基础底座，打造了一站式云原生机器学习平台。向上支撑了算法中台，为算法工程师提供数据管理、模型训练、模型管理、模型部署等能力，为广告、推荐和搜索等业务赋能，成功为算法实现了降本、提效，让云原生和容器价值初露锋芒。基于机器学习平台的试点成果，经过算法场景的试点实践和价值分析，对内部战略做了升级。确定基于云原生理念去构建行业一流的容器生态，实现规模化的降本提效目标。</p><p></p><p>本文会详细介绍 vivo 在容器集群高可用建设中的具体实践，包括在容器集群高可用建设、容器集群自动化运维、容器平台架构升级、容器平台能力增强、容器生态打通等层面的打磨和建设。目前，vivo 容器产品能力矩阵逐渐趋于完善，并将围绕全面容器化、拥抱云原生和在离线混部三个方向继续发力。</p><p></p><p>云原生和容器，是当下比较火热的话题，其中 Kubernetes 更是成为容器编排领域的事实标准。</p><p></p><p>国内外各企业在内部落地云原生和容器的过程中，基于自己的业务场景和发展阶段，会遇到各种问题和挑战，本文是 <a href=\"https://www.infoq.cn/article/Om6jCm9eyAXS1Ar36hbi\">vivo</a>\" 在云原生容器领域的探索和落地实践，希望能对读者有一些借鉴和帮助。</p><p></p><p></p><h2>一、容器技术和云原生理念</h2><p></p><p></p><p>首先是容器技术和云原生理念的介绍。</p><p></p><h4>1.1 容器技术简介</h4><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/96/9621bc7d28d3b61d2a0030be496aee5b.jpeg\" /></p><p></p><p>容器技术不是一个新技术，从 1979 年 unix 系统的 chroot 诞生到现在，历经 40 多年的发展，共经过了四个阶段，分别是：技术萌芽期、技术迸发期、商用探索期和商用拓展期。</p><p></p><p>每个阶段，解决了不同的技术问题，分别是：环境隔离、软件分发和编排、商用服务形态、规模化和场景拓展。</p><p></p><p>相比于虚拟机，容器技术少了一层虚拟操作系统的损耗，因此它比虚拟机具有更好的性能表现。另外容器在系统资源、启动时间、集群规模、高可用策略等方面，也有非常明显的优势。</p><p></p><p>2020 年 CNCF 中国云原生调查报告显示，接受调查的中国企业，有 68% 已经在生产环境使用容器技术。</p><p></p><p>从行业发展看，不管是云厂商还是各大科技公司，都在基于容器技术构建自己的新一代基础架构，推动企业数字创新。容器技术已经得到广泛的认可和普及。</p><p></p><h4>1.2 云原生理念介绍</h4><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2b/2b68d97541891f26b50631390de762fc.jpeg\" /></p><p></p><p>容器技术催生了云原生思潮，云原生生态推动了容器技术的发展。那么云原生的准确定义和含义是什么呢？</p><p></p><p>云原生其实没有标准定义，如果非要给他一个定义，行业有两种观点：</p><p></p><p>一个定义来自 Pivotal 这家公司，它是云原生应用的提出者，是云原生的先驱者、探路者。Pivotal 最新的官网对云原生的介绍有四个要点，分别是：DevOps、持续交付、微服务和容器。</p><p></p><p>另外一个定义来自 CNCF，CNCF 建立于 2015 年，它是一个开源组织，其存在的目的，是支持开源社区开发关键的云原生组件，包括 Kubernetes、Prometheus 监控等。</p><p></p><p>它把云原生分为 3 种核心技术和 2 个核心理念：</p><p>3 种核心技术：分别是容器、微服务、服务网格。2 个核心理念：分别指不可变基础设施和声明式 API。</p><p></p><p>但是，不管是那一种定义，容器都是其基础，是云原生落地的核心技术手段。</p><p></p><h4>1.3 云原生价值分析</h4><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/fb/fb2dd54e6608b297edf02a38d8589b91.png\" /></p><p></p><p>任何技术和理念，都必须有实际的业务价值。从效率、成本、质量三个维度，来分析云原生和容器的技术价值，可总结如下：</p><p>效率：可实现持续交付部署快、镜像封装可移植、弹性计算秒扩容。成本：可实现按需分配不浪费、统一调度高填充、混合部署少碎片。质量：可实现运行状态可观测、故障发生可自愈、集群管理可运维。</p><p></p><p></p><h2>二、vivo 容器技术探索与实践</h2><p></p><p></p><p>新技术的引入带来新的价值，也必然会引入新的问题，接下来介绍 <a href=\"https://xie.infoq.cn/article/5d2c6c0dc4282ea2d9e4a75e9\">vivo</a>\" 在容器技术上的探索和实践。</p><p></p><p></p><h4>2.1 试点探索</h4><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c4/c4b97e43bd4f9e819fba99ef63778374.jpeg\" /></p><p></p><p>在 vivo 的算法场景中，机器学习平台负责算法模型迭代，是互联网算法业务中核心的一环，早期的平台基于传统的架构，在效率、成本、性能和体验上均有一定的不足，无法满足算法业务快速增长的诉求。基于此，我们首先在算法场景进行容器的试点探索。从 2018 年开始，我们以容器作为基础底座，打造了 vivo 的一站式云原生机器学习平台，向上支撑了公司的算法中台，为算法工程师提供数据管理、模型训练、模型管理、模型部署等能力，为广告、推荐和搜索等业务赋能。</p><p></p><p>vivo 的云原生机器学习平台具备如下 5 大优势：</p><p>场景全：业务端到端，覆盖推荐、广告、搜索多场景。体验好：排队时间短，用户体验优，任务 P99 排队时长小于 45 分钟。成本低：调度能力好，资源利用率高，CPU 利用率均值大于 45%。效率高：网络规模大，训练跑得快，训练速度 8.3 亿样本每小时。结果优：算法迭代稳定，训练成功率高，训练成功率大于 95%。</p><p></p><p>vivo 云原生机器学习平台，成功为算法实现了降本、提效，让云原生和容器价值初露锋芒。</p><p></p><p></p><h4>2.2 价值挖掘</h4><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/45/45838dbcc4c86e4ccf7c02777cb899a1.jpeg\" /></p><p></p><p>基于前面机器学习平台的试点成果，我们深入分析和挖掘容器和云原生的价值，结合 vivo 的情况，我们发现容器和云原生是企业大规模降本和提效的最佳方案。</p><p></p><p>1）在降本方面</p><p></p><p>当前我们内部服务器资源的利用率较低，以 CPU 利用率为例，当前 vivo 服务器整体利用率均值在 25% 左右，相比行业一流水平的 40%～50%，还有不少的提升空间。容器在资源隔离、统一调度和在离线混部等方面的优势，均是提升资源 ROI 的有效技术手段。</p><p></p><p>2）在提效方面</p><p></p><p>当前我们在中间件版本升级、机器迁移、测试环境管理、突发流量应对和全球化部署的环境一致性等方面均有业务痛点。容器的快速交付、弹性自运维、微服务、服务网格等云原生技术和架构，则是提效的有力措施。</p><p></p><p></p><h4>2.3 战略升级</h4><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/79/798207d6d7fd425ff530ad91b155479a.jpeg\" /></p><p></p><p>经过算法场景的试点实践和价值分析，我们对内部战略做了升级， 确定基于云原生理念去构建行业一流的容器生态，实现规模化的降本提效目标。</p><p></p><p>为了更好匹配战略落地，拥抱云原生，我们还对内部技术架构重新规划和升级，新增引入统一流量接入平台、容器运维管理平台、统一名字服务、容器监控等平台和能力，支撑容器生态在公司内部的全面建设和推广。</p><p></p><h4>2.4 面临挑战</h4><p></p><p></p><h5>2.4.1 集群挑战</h5><p></p><p><img src=\"https://static001.geekbang.org/infoq/fc/fc7ec7d33383f1cb0a26cbc56e2f0ff6.jpeg\" /></p><p></p><p>要提供大规模的生产可用的容器服务，容器集群的可用性首先会面临诸多挑战。下面介绍<a href=\"https://xie.infoq.cn/article/2fc79f1433f12212fd6d7e6da\"> vivo </a>\"容器化，在生产集群建设过程中遇到的 4 个比较大的挑战。</p><p></p><p>集群规模快速增长：vivo 集群服务器规模上万个宿主机节点，管理的集群数十个，单集群规模 2 千 +，实例数 10 万 +，对集群性能和机器管理挑战极大。集群运维、运营和标准化：由于早期集群管理不规范，黑屏化操作和人为误操作等问题层出不穷，集群运维人员每天因为各种救火忙得焦头烂额。集群容器监控架构和可观测性：随着集群规模快速增长，容器的监控组件面临极大压力，对容器监控的采集、存储和展示，提出更高的要求。线上 K8s 版本升级迭代：面对 Kubernetes 版本的快速迭代，需要实现给飞行的飞机换引擎。</p><p></p><p>针对挑战，我们的应对方案分别是：高可用、可观测、标准化和自动化。其中容器监控和 k8s 版本无损升级的挑战，vivo 公众号有详细技术方案的介绍，本文侧重介绍集群高可用和运维自动化两部分。</p><p></p><h5>&nbsp;2.4.2 平台挑战</h5><p></p><p><img src=\"https://static001.geekbang.org/infoq/75/75803499e624d7ac035535d5f4651ceb.jpeg\" /></p><p></p><p>除了集群稳定性的挑战，平台也将面临各种挑战，由于容器平台和周边生态能力不完善，对业务存在较高的适配和迁移成本。总结起来我们遇到的挑战主要有 4 点：</p><p>容器 IP 的变化：k8s 早期把业务都设计成无状态的，其原生实现是每次发布容器的 IP 都会变化，这对部分依赖固定 IP 的传统业务不太友好，业务改造成本较高。周边生态的适配和兼容：包括发布系统、中间件微服务平台、内部开发框架和流量接入层等用户使用习惯：vivo 有比较成熟的发布平台，用户习惯按机房发布，习惯资源分配和发布分开操作。价值输出：运维研发效率的提升不好量化，容器成本优势短期不好衡量。</p><p></p><p>上面这些挑战，推动我们要进行容器周边生态打通，同时通过增强容器平台产品能力，来适配各种业务场景，降低用户的迁移成本。</p><p></p><h4>2.5 最佳实践</h4><p></p><p></p><h5>&nbsp;2.5.1 容器集群高可用建设</h5><p></p><p></p><p>接下来，介绍 vivo 在容器集群高可用建设中的最佳实践，我们是从故障预防、故障发现和故障恢复，3 个维度来构建容器集群可用性保障体系的。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/04/048b78fa1dcc54c5d13e06b56973dd25.jpeg\" /></p><p></p><p>在故障预防上，我们分别从流程工具、容灾能力和基础架构 3 个方面来进行建设：</p><p>流程工具：主要包含故障预案和故障演练，以及通过建设运维管理平台，来实现运维标准化、白屏化和自动化。容灾能力：主要是构建业务跨故障域容灾能力，保障集群故障时，服务和业务流量能跨集群调度和快速一键迁移等。基础架构：主要是通过屏蔽用户对底层集群的感知，一个机房多套集群，一个业务同时部署在多个集群上，避免单集群故障对业务造成影响。</p><p></p><p>在故障发现上，我们主要是通过，自建的监控大盘、日常集群巡检、核心组件监控、集群外拨测等措施，对故障及时发现和处理，降低对业务影响。</p><p></p><p>在故障恢复上，主要是基于前面的故障预案，快速恢复，及时止损，并做好故障的复盘，不断改进我们的故障预防和发现机制，沉淀宝贵经验。</p><p></p><p>另外，集群的可观测性是可用性保障的一个重要依据，我们通过建设自己的 SLO 面板，对集群状态实时地进行监控，只有对运营状况了如指掌，才能做到稳如泰山，沉着应对一切变化。</p><p></p><h5>&nbsp;2.5.2 容器集群自动化运维</h5><p></p><p></p><p>除了容器集群自身稳定性建设，在运维自动化方面，我们建设了容器多集群管理平台，实现集群配置标准化，核心运维场景白屏化，来提升运维效率。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c5/c57a1315f89c7bc922e1c7f0552fa819.jpeg\" /></p><p></p><p>我们的容器集群管理平台，是以云原生的方式来管理云原生，简单来说，就是基于 K8s 的 operator 机制，实现 K8s on K8s。</p><p></p><p>当前，我们的平台已经能够实现多集群的统一纳管，集群部署也是自动化、标准化的，还实现了底层 IAAS 层打通，集群节点能全流程化、可视化的一键扩缩容，而集群巡检功能，可以帮助我们及时发现集群的问题和隐患。</p><p></p><p>通过平台进行日常运维和操作，不仅能提升效率，也具备审计能力，有操作和变更日志可追溯，便于问题定位。</p><p></p><h5>&nbsp;2.5.3 容器平台架构升级</h5><p></p><p></p><p>为适应业务容器化在内部的快速普及和推广，我们升级了 vivo 的容器平台架构。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/fe/fed26fe99974e15fe1cd350d76c4f2a7.jpeg\" /></p><p></p><p>新的架构分为 4 层，容器 +k8s 则作为基础的统一底座，向下对接公司 IAAS 层的基础设施，向上提供容器产品和平台能力，并通过开放 API 供上层调用和定制自己的上层逻辑。</p><p></p><p>API 之上是容器支持的各种服务类型，包括在线服务、中间件服务、大数据计算、算法训练、实时计算等，最上面是为 vivo 互联网各个业务进行赋能。</p><p></p><p>基于这套容器平台架构，业务能实现资源隔离部署、快速交付和按需使用，同时也具备更好的弹性伸缩能力。对平台，我们可以统一资源的调度，实现资源的分时复用、在离线混部等，来提升资源的利用率。</p><p></p><h5>2.5.4 容器平台能力增强</h5><p></p><p></p><p>vivo 内部容器化场景比较多样化，为了让业务能够安心、低成本的接入和使用容器的能力，在推广过程中，我们基于开源 + 自研做了容器的适配和原生能力的增强。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f0/f0ff6e646a4114f41fd57850e277f9c6.jpeg\" /></p><p></p><p>下面对 6 个产品能力增强进行简单的分享：</p><p>云原生工作负载增强：基于开源的 openkruise，对原生 deployment、statefulset 等 workload 进行了增强，实现诸如原地升级、发布暂停、流式和配置优先级等扩展能力。服务无损发布增强：基于内部框架和平台自主研发，实现 HTTP、RPC 等协议框架的流量无损发布。容器镜像安全：基于开源的 Harbor 定制开发，实现容器镜像安全扫描和卡控能力。容器镜像加速：基于开源 dragonfly2 定制扩展，让大规模集群镜像的分发性能提升 80% 以上。IP 固定能力增强：基于有状态服务和 CNI 进行自研，支撑黑白名单、有状态服务场景诉求，降低业务接入改造成本。多集群管理能力增强：基于开源 Karmada 进行功能优化和扩展，提升业务容灾能力，支撑单集群横向扩展能力。</p><p></p><p>当然，在充分享受开源红利的同时，我们也持续地参与开源协同，回馈社区。在使用和自研的过程中，我们也把自己生产实践过程中发现的问题和积累的经验提交到社区，例如 Dragonfly2、Karmada 等。</p><p></p><p></p><h5>2.5.5 容器 CICD 一体化</h5><p></p><p></p><p>除了平台能力的增强，容器平台作为一个 PaaS 平台，需要和周边的生态打通，才能让业务更好的迁移和使用，其中最重要的就是发布系统的打通，也就是 CICD 平台。</p><p></p><p>几乎每个科技公司都会有自己的 CICD，它是一个 DevOps 自动化的工具，可进行业务构建和编排部署的流水线。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/16/165cda5d9c832bce0dd8ab210aece417.jpeg\" /></p><p></p><p>vivo 的 CICD 平台底层架构是基于 JenKins+Spinnaker 实现的，整个容器构建和部署流程如下：</p><p>首先，用户在 CICD 平台上创建好发布过程的流水线配置并保存。其次，CI 环节可实现和内部 GitLab 对接，拉取代码，基于 jenkins 进行代码编译和镜像构建，构建好的镜像经过安全扫描后，推送到开发环境的镜像仓库。最后，在 CD 环节，CICD 平台会调用容器平台提供的 API，进行开发、测试、预发和生产环境的部署操作。</p><p></p><p></p><h5>2.5.6 统一流量接入</h5><p></p><p></p><p>接下来，介绍容器生态里，最重要的业务流量接入层的打通。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2d/2d6aaae86ab4a660f05bc9dca8fdf62f.jpeg\" /></p><p></p><p>早期，vivo 内部是基于 Nginx，来实现的南北流量和东西流量的转发。在虚拟机和物理机场景能比较好的支撑，随着容器在内部全面的推广，传统的 Nginx 架构已不能适配。</p><p></p><p>主要体现在，容器场景业务实例数量，相比原来虚拟机和物理机成倍数增长，容器发布过程 IP 的频发变化和状态同步，都会对 Nginx 集群造成非常大的压力，在业务请求量非常大的情况下，接入层的配置文件刷新和加载，会造成业务的抖动，这是我们不能接受的。</p><p></p><p>基于这个背景，我们基于 APISIX 构建了云原生流量接入层，来适应全面容器化的需求。经过一年多的建设，当前我们的统一流量接入平台已经能够很好的支撑容器化的接入，同时具备更好的扩展能力。</p><p></p><h4>2.6 实践成果</h4><p></p><p></p><h5>2.6.1 产品能力矩阵完善</h5><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5b/5b5fc096b39d0cee44cc74d8e51224a5.png\" /></p><p></p><p>经过多年的打磨和建设，vivo 容器产品能力矩阵趋于完善，整个产品能力矩阵，分为 4 层：</p><p>基础服务层：包含 3 类服务，镜像管理、集群运维和集群监控。能力层：包含 6 个核心能力，分别是集群调度、CAAS-API、容器配置、容器业务监控告警、容器日志和平台扩展能力。平台层：包含 2 大平台能力，分别是 CI 和 CD。业务层：当前覆盖了 vivo 互联网所有业务场景。</p><p></p><p></p><h5>&nbsp;2.6.2 业务接入成果凸显</h5><p></p><p></p><p>接下来，会具体介绍下 vivo 容器推广情况。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/33/33b2be4ad2c2d610dbe6658cda61bd5c.jpeg\" /></p><p></p><p>目前容器在 vivo 内部主要覆盖 4 大场景，分别是：互联网在线业务、算法在线、大数据计算和 AI 算法训练等。接下来，会从接入规模和价值来简单介绍。</p><p></p><p>互联网在线服务：内部各个业务线均有大量服务运行在容器上，例如 vivo 商城、账号、浏览器、快应用、天气等，已经接入服务 600+。算法在线服务：当前接入 500+ 服务，3000+ 服务器，涉及推广搜的各个业务线。大数据计算服务：包含离线计算如 Spark，实时计算如 Flink、Olap 等场景，当前接入集群 20+。AI 算法训练：主要是提供 GPU、CPU 异构计算，业务场景如 Tensorflow、mpi 等场景，算力十几万核，以及若干 GPU 卡。</p><p></p><p>业务容器化后，给业务在降本提效上带来的效果非常明显，包括但不限于扩缩容效率、弹性伸缩能力、业务自愈能力、资源成本等方面。</p><p></p><h4>2.7 实践总结</h4><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e9/e9490d98ff60dd082f20bcca1cfb4fbe.jpeg\" /></p><p></p><p>基于我们的探索和实践，可总结为技术价值、推广策略、平台建设和云原生突破 4 个维度的思考。</p><p>找价值：关注新技术，但不执着于技术本身，必须结合业务痛点和价值。定策略：自下而上小范围试点探索，产生实际的业务价值，影响自上而下的战略调整。建平台：当已经有比较完善的平台和能力时，要找到容器的切入点，进行融合共建，切忌推到重来；对于需要从 0 到 1 建设的新能力，需要果断的孵化创新。求突破：在业务容器化过程中，为了快速容器化，我们做了许多的兼容和适配。为了更好的降本提效，未来，我们希望引导用户，实现从使用云原生，到用好云原生的突破。</p><p></p><p>总的来说，技术服务于业务，企业应基于自身现状，寻找合适的解决方案，并为业务创造价值。</p><p></p><p></p><h2>三、vivo 对云原生的未来展望</h2><p></p><p></p><h4>3.1 vivo 基础架构发展</h4><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/be/beb9da9c3c0f23a0a619cb85c5490e17.jpeg\" /></p><p></p><p>从过去看未来发展，回顾过去 10 年历程，vivo 基础架构的发展经历了 3 个阶段：</p><p>阶段一：传统研发运维阶段，从 2011 到 2018 年，从早期的 do 分离研发模式，到基于 openstack+kvm 的虚拟化方案落地。阶段二：应用架构互联网化阶段，从 2018 到 2020 年，容器化开始在 vivo 内部兴起。阶段三：云原生基础架构演进阶段，从 2021 年到现在，云原生和容器将会在 vivo 内部有更多场景的应用和推广，如在离线混部等。</p><p></p><h4>3.2 vivo 云原生未来展望</h4><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5e/5e492bb5604df3f7fc2b73ba483c7aca.jpeg\" /></p><p></p><p>回归事物本源思考，做正确的事，并把事情做正确。不盲从，有定力，基于价值，客观看待新技术发展，大胆假设、小心验证、实践出真知。vivo 云原生的未来，将会朝着 3 个方向发展，分别是全面容器化、拥抱云原生和在离线混部。</p><p></p><p>我们的愿景是：一次开发到处运行，通过自动运维实现极致效率和成本最优！对开发人员：我们希望大家成为那只遨游海上的蓝色鲸鱼，驮着我们的业务应用，一次构建到处分发，灵活调度和运维。对管理者：我们希望追求效率的同时，能够实现成本最优。</p>",
    "publish_time": "2022-12-19 15:31:30",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "金蝶云苍穹云中间件管理架构实践",
    "url": "https://www.infoq.cn/article/x8yzEaDWmmTPgKgZ93Ly",
    "summary": "<p>中间件是解决共性问题的标准化工具，是一种支撑技术，不可或缺。但因其种类多，数量大的特性，给运维管理带来了很高的难度。本次分享将介绍基于 Kubernetes 构建的云原生中间件平台架构,介绍kubebuilder的脚手架构建流程,以及Operator的工作原理.并以数据库为例，介绍在实际推进的场景中遇到的问题与解决方案，同时也分享云原生中间件面临的挑战的思考与对未来的展望。</p><p>&nbsp;</p><p>分享主要分为四个部分展开：第一部分中间件管理现状；第二部分借助云原⽣优势，提供更好的管理；第三部分云中间件管理平台架构之路；第四部分未来展望。&nbsp;&nbsp;</p><p></p><p>本文整理自金蝶云苍穹云原生部门高级研发李仲玄、金蝶云苍穹云原生部门产品经理徐瑛在<a href=\"https://dive.infoq.cn/2022/beijing/track/1205\">DIVE全球基础软件创新大会2022</a>\"的演讲分享，主题为“<a href=\"https://dive.infoq.cn/2022/beijing/presentation/4543\">金蝶云苍穹云中间件管理架构实践</a>\"”。</p><p></p><p>以下为整理内容：</p><p></p><h2>中间件管理现状</h2><p></p><p></p><p>中间件是为了解决复杂问题的支撑技术，在一般的软件架构中是不可或缺的一部分。它是研发利器，其定义非常广泛，包含非常多种类型，常见的包括像数据库中间件、消息队列中间件，还有微服务组件中间件，可见中间件的特征是种类非常的多，涵盖范围非常广，数量也非常大，这就给我们的管理上增加了难度。</p><p></p><p>中间件常用的管理方式主要有四种，分别是混合云、公有云、私有云和本地管理。这四种管理方式各有优劣，像本地安装包管理方式，它可以使用本地物理资源降低成本，但运维都是纯人工的，通常都是直接使用运维脚本，运维门槛就比较高，并且人工出错的概率比较大，整体运维效率会比较低。</p><p>&nbsp;</p><p>第二种私有云方式是建设一朵私有云，把整个中间件的资源和运维都给管理起来，其劣势在于，需要专项投入建设。</p><p>&nbsp;</p><p>第三种公有云方式是把需要的资源和运维能力完全托管到公有云厂商，我们可以减少运维和资源管理这部分的麻烦，但是会和公有云厂商深入绑定，整个运维状况不是很透明，不是很了解底层到底是怎么样的运维状态。</p><p>&nbsp;</p><p>第四种是混合云方式，目的是希望能够将资源分布在多种云上，以降低整体的风险，其劣势在于统一管理比较难。</p><p>&nbsp;</p><p>上述四种管理方式共同的担忧主要分为两大类，一类是运维管理，一类是成本控制。运维管理主要围绕着可用性、可靠性、性能优化这几类问题。而资源缺乏、人员配备的问题，都属于成本控制类的问题。</p><p></p><p>解决这些担忧的最终目的是要降本增效，我们认为可以有以下四点去达到这个目的：</p><p>&nbsp;</p><p>第一点是拒绝资源绑定，采用松耦合的架构去屏蔽底层资源差异，从而降低成本，分担风险；</p><p></p><p>第二点是资源池能够弹性扩缩，根据不同时期的业务需求进行整体的扩缩容，去满足我们的业务需求；</p><p></p><p>第三点是运维操作要简单，做到可视化的部署、容灾、监控分析、告警全生命周期的运维管理；</p><p></p><p>第四点是高可用、高可靠的保障。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6a/6a6938ab3aba8a8fb42b32fe6765bcce.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8d/8df72ac43401b3f0407422346327d49d.png\" /></p><p></p><p>上述说的这几点，我们运用云原生都能很好地解决。</p><p>&nbsp;</p><p>第一点松耦合，它刚好与容器契合，将中间件本身、应用和它的配置打包成镜像，能在不同的资源池上进行，不同的环境上部署，通过容器编排工具可以根据申请的资源在资源池中选择合适的节点调度、部署，轻松实现多实例面向混合资源池的部署。</p><p>&nbsp;</p><p>第二点弹性扩缩，它主要分为两类，一类是资源池的弹性扩缩，另一类是中间件自身利用的弹性扩缩。基于资源池的弹性扩缩，使用计算存储分离架构，我们可以去实现计算资源和存储资源独立灵活的扩缩容，去满足我们实际的业务需求。基于中间件应用，也可按需实现中间件规格的扩缩容。这两种弹性扩缩，我们都可以通过容器编排工具实现。</p><p>&nbsp;</p><p>第三点是运维操作简单，需要具备快速发布部署、中间件的管理、异地容灾整个生命周期的可视化界面管理。基于容器中间件，自身就具有快速部署和发布的能力，能够自动隔离故障结点，将应用迁移至健康的结点，让整个应用系统具有比较强的资源能力，简化运维管理的复杂度。</p><p>&nbsp;</p><p>最后一点是可观测性，它不仅是中间件运维平台能力，还是所有运维平台都需要的能力，它就包含监控、日志、告警等等一系列的内容。云原生本身就有比较成熟的可观测服务工具。&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/65/6570d3e0d89400630c653febcefe8112.png\" /></p><p></p><p>中间件本身是一个比较复杂的系统，运维也比较烦琐，部署、故障恢复、监控、报警、测试都需要比较专业的运维人员手动完成，不仅成本比较高，而且也可能会出现手工失误。将中间件做成云服务的优势是运维简单容易上手，能够高效实现大批量实例的自动化运维。我们主要是一个三到六台的小规模的K8S集群，主要分为Master节点跟Node节点，Master节点是集群的控制节点，负责整个集群的管理和控制，基本上所有的控制指令都是发给Master，并且由他来调度Node具体的执行命令。Node节点是工作负载节点，主要负责拉取容器。</p><p>&nbsp;</p><p>我们使用的是声明式API，只给出最终的状态，通过状态机去协调，目标系统就会对资源进行操作以达到要求，调用者不需任何干预。其优势是让分布式系统之间的交付变得简单，不需要关心任何过程细节，这种方式也大大减少了使用者的工作量，极大地提升开发效率。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0f/0f40aef958bf9cbb80a743dd57508f75.png\" /></p><p></p><p>&nbsp;Kubernetes现在已经是比较流行的云原生分布式操作系统，其最大的优势就在于拓展性，比如计算、存储、网络都可以根据使用者的需求进行拓展，另一个重要的拓展是CRD特性，通过Custom Resource Definition开发者可以定义自己的资源，对应的Operator来实现自身的控制逻辑。CRD本质就是一个YAML文件，需要我们自己去写，写完之后再通过Operator去控制，Operator也需要我们自己去写，将我们对中间件的理解、实践全部结合在一起，实现自动化的、可自我恢复的、可自我调节的功能。CR是该CRD定义的一个具体实际对象，根据我们自己的资源需求去实现。&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ba/baf1d52816df304a6c708d56f92d0577.png\" /></p><p></p><p>以前开发Operator需要开发者实现对资源的监听，对资源事件的队列化，以及后面整套控制逻辑，比较繁琐。正因为如此，市面上出现了多款的开发Operator的脚手架，比较常见的有Operator SDK和Kubebuilder。Kubebuilder是Kubernetes SIG官方团队原生打造的，它相对使用起来会比较简单，按如图步骤即可实现整个生命周期。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a2/a2b7375ad1a4149f7000b68a8629058f.png\" /></p><p></p><p>如图是Operator的主要架构，我们只要实现Reconciler这个函数，Kubebuilder帮助我们实现了大部分的功能。它遵从声明式编程理念，对象定义、控制器部署、Kubebuilder生成的代码、自动生成的Scheme、Kubernetes原生资源都会储存到我们自定义的CRD。GVK是资源种类的描述，一个JKV只会存在一个对应的Share informer，主要监听对应资源的创建、仓储、更新操作，通知所有Watch，Controller将对应的资源对象都添加到一个队列里面，最终触发到开发者的调和程序，即Reconcile函数，里面主要是我们要做的运维。这里需要遵守很多Kubernetes规范，比如针对Kubernetes标准的Resource使用编排，统一叫声明式调度，不需要自己操作，让Kubernetes帮你去部署。</p><p>&nbsp;</p><p>我们在实际使用中会出现了一些问题，我们总结了四个问题：</p><p>&nbsp;</p><p>第一个是过于自动化，比如自动主动切换类型，导致他们自己都无法感知到，害怕主从切换过程中会丢失数据；</p><p>&nbsp;</p><p>第二个是持久化存储的选择，之前我们优先考虑使用分布式存储，因为可以比较灵活，但是经过测试发现速度没办法达到预期，所以最终选择本地存储；</p><p>&nbsp;</p><p>第三个是需要更快的启动，比如需要快速测试；</p><p>&nbsp;</p><p>第四个是可以恢复数据、备份数据。</p><p>&nbsp;</p><p>下面介绍我们的五个功能实践。</p><p>&nbsp;</p><p>第一个是添加手动主从切换，一开始使用自动化的主从切换，但是自动化主从切换有些弊端，因为基于异步复制，自动切换可能在主机宕机的时候会丢失数据，所以增加了一个手动主从切换的特性，让用户更安心。</p><p>&nbsp;</p><p>第二个是纳管物理机数据库，为什么我们要使用纳管物理机？因为大部分老客户都是用物理机来部署MySQL的，直接让他们使用容器化，他们会有所顾虑，为了打消他们的顾虑，我们认为需要提供一种过度性的方案，让他们既能尝试又不影响现在的服务。</p><p>&nbsp;</p><p>第三个是兼容带数据的镜像，有一个测试平台想通过镜像的方式快速启动。我们在容器创建之前加入了一个init程序，通过这个init程序将镜像里面的数据拷贝到持久化存储PV，当MySQL容器真正启动的时候自动挂载到PV，它就会有镜像里面的数据从而不会被覆盖掉。</p><p>&nbsp;</p><p>第四个是针对于用户在使用过程中需要修改密码，我们中间添加了一个MySQL的User CRD，等于root这个账户由Operator统一使用，用户用自己定义的账户，当MySQL &nbsp;User创建完后，就会产生一个对象，Operator检测到，把这个User里的账户密码插入到数据库里，这样对多个用户的User进行管理，也可以做用户的级别分级，回收了root账户的功能。</p><p>&nbsp;</p><p>第五个是定时备份数据，我们一开始使用的是全量备份，但定时做全量备份花费的时间会比较长，并且占用的空间也比较浪费。于是我们增加了增量的数据恢复，这需要先有个全量的数据，基于它绑定增量备份时间点和增量数据的位置，要恢复某个时间点的时候，就先去恢复全量的数据，通过时间绑定的位置恢复增量数据。</p><p>&nbsp;</p><p>我们后续还会迎接一些挑战，这些挑战主要集中在以下四个方面：</p><p>&nbsp;</p><p>容器稳定性客户信任度兼容更轻量的容器编排引擎更完善的监控系统</p><p></p><h2>未来展望</h2><p></p><p></p><p>云计算是一个发展方向，是将业务无关的管理功能和运维功能尽量下沉到基础设施，应用可以聚焦在业务能力的开发、运营。这个趋势演化过程也影响了云计算的发展方向。从一开始的虚拟化到IaaS跟PaaS，到应用系统的部分管理职责交给平台的运维过程，我们应该重视软件开发人员和运维人员的沟通合作，通过自动化流程使软件构建、测试、发布更加迅速，并且可靠。云原生技术也是目前技术阶段、企业IT、系统的最佳模式的集合，企业通过遵循云原生技术和设计模式，可以充分发挥云计算平台优势，同时也可以最大限度地减少对开发效率的影响，实现稳定高效的系统。</p><p>&nbsp;</p><p>技术是一个不断发展的一个过程，云计算技术也是一个不断的迭代的过程，相应的开发习惯和方法也会试着改变。</p><p></p><p></p><h5>好文推荐：</h5><p></p><p><a href=\"https://xie.infoq.cn/article/29115d9f7d24bef56adbcf734\">GitHub 爆赞的 RocketMQ 分布式中间件学习手册，竟一夜下载量破 10W+</a>\"</p><p></p><p><a href=\"https://xie.infoq.cn/article/8f358068c4df0123b7b5d7402\">计算存储分离在京东云消息中间件 JCQ 上的应用</a>\"</p><p></p><p><a href=\"https://xie.infoq.cn/article/0b6fe66a131a042f517e4a62f\">一发一存一消费，跟着 p8 大佬深入学习 Java 中间件技术及其应用开发</a>\"</p><p></p><p><a href=\"https://xie.infoq.cn/article/5f4f70f38017f2ba81a82ea50\">深度解读｜NebulaGraph x 阿里云计算巢，云上构建超大规模图数据库</a>\"</p><p></p>",
    "publish_time": "2022-12-19 16:43:19",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "为什么说“无边界”是零售的未来？",
    "url": "https://www.infoq.cn/article/cS1UEOxZRAZFVDkx8dkH",
    "summary": "<p>从上世纪的百货、超市、专卖店，到互联网初期的电子商务，再到如今的<a href=\"https://xie.infoq.cn/article/af67eb6a0c13dbea04090741d\">新零售</a>\"。百年来，零售业态不断地演进变革，虽然其本质始终绕不开“人货场”三个字，但三者的形态和关系却持续发生着变化。</p><p></p><p>除了“场”的轮番变迁，另一大转变在于——过去是“人”追着“货”跑，今天是“货”追着“人”跑。过去，企业只要关心产品质量、渠道多寡，现在要考虑的是，如何把“合适的产品”在“合适的地点”用“合适的方式”在“合适的时间”以“合适的价格”卖给“合适的消费者”。并且，决定前面几个因素是否“合适”的密钥，就在“消费者”手上。</p><p></p><p>如果翻看零售业的演进史，不难发现，“以<a href=\"https://xie.infoq.cn/article/c5872edf1577e8e4d0044d2a3\">消费者</a>\"为中心”这样的字眼从未像今天一样，如此高频地出现过。</p><p></p><p>那么，今天的消费者究竟发生了什么样的变化？企业又该如何连接消费者？如何在这一轮零售变革中不掉队？</p><p></p><p>日前，IBM咨询与腾讯云、腾讯智慧零售联合发布了《无边界零售》白皮书（以下简称“报告”），基于IBM 商业价值研究院 (IBV) 与美国零售联合会 (NRF) 合作发布的《消费者需求多样化》研究洞察，以及腾讯智慧零售团队就智慧零售行业和案例所做的调研，其中既阐述了疫情之下整个消费格局的新变化，也提出了面向未来的转型和重塑建议。</p><p></p><h2>消费者越来越青睐于“混合购物”</h2><p></p><p></p><p>根据报告显示，中国消费格局的变化主要表现在三个方面：</p><p></p><p>第一，消费方式趋于混合购物、拥抱<a href=\"https://www.infoq.cn/article/X9IT0Oj6awQNRQUFNsyg\">私域</a>\"。如今，消费者的购物方式不再拘泥于线上或线下的二选一，而是在线上平台、线下门店、小程序等各种不同渠道之间不断切换频道，并组合使用不同的购物方式。线上种草、线下购买，线下体验、线上下单，变得稀松平常。其中，小程序等私域购物模式也日益流行，数据显示，2021年微信小程序日活突破4.5亿，商家自营实物交易额同比增速达100%。</p><p></p><p>第二，消费选择趋于<a href=\"https://www.infoq.cn/article/wK91ohatBuULkxsliMaa\">可持续性</a>\"、环保健康。2022 年，全球约 80%的消费者表示在选择品牌时，更看重可持续性以及健康，而这个数字在中国还要更高 ，达到90%。并且，在中国，Z 世代消费者支持可持续发展的积极性更高，他们中有 70% 的人使用更环保的交通方式，61% 的人通过改变日常购物习惯来减少对环境的影响。</p><p></p><p>第三，消费动机趋于理念驱动、价值观契合。换句话说，越来越多的消费者看重产品和品牌与自身价值观的契合程度。目前在全球和中国的主要四类消费者群体中，这类型消费者均成为人数最多的消费者群体，分别为 44% 和 55%。并且，在理念驱动型消费者心中，真实性是关键，他们希望品牌企业能够以清晰、坦诚、可信和开放的方式提供信息。</p><p></p><p>IBM 咨询大中华区高级合伙人、中国区消费流通行业群总经理龙如军在接受媒体采访时强调，混合购物方式下，虽然实体店不再是消费者首选的购物渠道，但是实体店仍然必不可少。调研发现，全球72%和中国56%的消费者依然将实体店作为他们主要购物方式的一部分；超过一半(57%) 的中国 Z 世代和千禧一代（80后）消费者仍保持每周至少去实体店一次的习惯。</p><p></p><p>换句话说，消费者并不给自己的购买方式设限；反之对于企业，有消费者在的地方就要有触点，那么，也不该给自己设界。</p><p></p><p>据此，IBM与腾讯在白皮书中首次提出“无边界零售”的零售新模式，该模式主要由6大核心要素组成，包括零售生态、<a href=\"https://xie.infoq.cn/article/139d51ead9f649d1c762eaed1\">全域经营</a>\"、科技和数据、可持续发展、最强零售人、<a href=\"https://xie.infoq.cn/article/7db4e622cd41ff2baed4c2e7b\">混合云</a>\"底座。其中，“全域经营”强调通过把企业内部、企业外部、企业外部之外的参与者紧密连接起来，共同为消费者创造线上线下全平台、公域私域全渠道、现在未来可持续的极致消费体验。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/29/29662d1959d46df2eb70a715729b9001.png\" /></p><p></p><p> IBM 咨询大中华区合伙人马勇用《庄子·天下》中的“至大无外，谓之大一；至小无内，谓之小一”来描述“无边界零售”，即大到极点的东西已无外围可言，小到极点的东西已无所包容，任何事物发展到极致都会变得无边无际，没有了界限——企业的发展也是如此。</p><p></p><h2>如何炼就“至大无外”的“无边界零售”企业</h2><p></p><p></p><p>那么，问题来了，这样一个“至大无外”的“无边界零售”企业如何炼成？</p><p></p><p>腾讯云副总裁陈平表示，企业完成这样的转型需要多种能力的加持。其中，首当其冲的，就是要有一个整体的战略性规划——而零售生态正是“无边界零售”的战略核心。对内，企业需要对内打破职能部门孤岛，无缝链接核心流程；对外，要打通上下游，与各类供应商、各级经销商、各类物流外卖快递商、各类公域及私域平台、各类线下门店建立高效协同；进而打造全面生态系统，和咨询服务、数据服务、代运营服务以及数字化工具服务等各类生态伙伴全面融合。</p><p></p><p>战术层面，全域经营强调从客户体验出发，实现人货场的无缝衔接和转化。一方面，连接各个场域的用户，并基于用户画像、用户生命周期、渠道特征达成\"运营一体化\"，以及在营销触达到最终消费转化环节，实现\"从营到销的一体化\"；另一方面，可以借助AI技术，实现对用户需求和用户圈层的深度洞察，分析消费者生命周期运营，包括预测触达人群效果和客户流失风险，进行<a href=\"https://xie.infoq.cn/article/7d0dc19f726b4a68306302f45\">智能化</a>\"运营；除此之外，AI还可以被用于重塑智能供应链，帮助企业优化库存和成本，提升供应链可视性、灵活性和响应能力。</p><p></p><p>从中我们也可以看到，在各种策略落地过程中，离不开科技和数据。报告显示，智能自动化能力通过改变企业运营方式，提高效率，实现数字化运营和创新，可以帮助企业降低平均 7% 的运营成本，将年收入增长率提高 10%。具体来说，智能自动化由接触、学习、推理、实施或执行4个要素组成，其中前三个要素由AI 驱动，最后一个要素由自动化驱动。通过将 AI 融入<a href=\"https://www.infoq.cn/news/VitTKb0zLljDj4QTPMpw\">智能自动化</a>\"，将使得机器能够不断学习。</p><p></p><p>而作为AI的“养料”，数据是基础中的基础。通过透视“人货场”和精准网点选址，将加速零售转型。比如，在“货找人”的过程中，通过分析商品的数据信息，能够更快找出具备爆款潜力或是处于滞销状态的商品，从而更合理地跟进处理货品情况；通过沉淀更多的消费者数字化资产，就能越精准洞悉消费者需求，并为此制定相关策略。</p><p></p><p>“比如，零售门店在给消费者推送相关内容的时候，什么时候推送？有的消费者习惯在晚上10点到11点睡前浏览消息，有的消费者可能8点到9点是活跃期，情况千人千面，提供差异化的推送和服务。”腾讯智慧零售垂直行业生态总经理王墨向InfoQ记者举例。</p><p></p><p>当然，这些战略和经营模式的落地离不开组织人才的支持——在“无边界零售”企业框架中，对应的是超强零售人这一环。虽然越来越多的企业正在利用智能技术提供特定场景下的体验和服务，但是，零售企业在向全域经营快速转型的过程中，对一类新兴的实体人才——私域<a href=\"https://www.infoq.cn/video/adUOPJKg2P4wHiZKKOIf\">人才</a>\"需求在激增，主要包括小程序商城运营师、用户运营师、数字导购三大最为典型和热门的人才类型。 </p><p></p><p>王墨表示：“针对行业私域人才紧缺与专业化要求日增的问题，腾讯推出了智慧零售私域人才认证计划，紧密结合招聘端与一线实际运营洞察，围绕小程序商城运营、用户运营和数字导购制定完善、立体的能力模型，开发出理论结合实践的定制化课程，帮助零售企业快速打造满足未来所需的新型零售人才队伍。”</p><p></p><h2>用混合云底座消除传统IT架构的“沟壑”</h2><p></p><p></p><p>如果说“全域经营”是一种业务模式的无边界，那么，开放、安全和技术一致性的混合云架构，则是技术平台无边界，是“无边界零售”企业的底座。</p><p></p><p>“贯穿和激活整个零售业发展的血脉将是数据，为此，企业必须构建企业级的数据能力。”马勇表示。对内，企业应该制定相应的数据规范和数据架构，包括统一的数据模型，通过对数据进行从收集、产生、流转、存储、分析、加工，到沉淀这样全生命周期的管控，真正实现对源头的管控，过程当中的布控，以及全局的智能化控制，建立起一个全新的数据价值体系的模型；对外，还要考虑如何对外进行数据供给，能够通过<a href=\"https://www.infoq.cn/article/SEJ62iIqiEpPfW0pRm7f\">数据中台</a>\"、数据沙箱等先进的技术和理念，为自身业务部门和生态合作伙伴提供比较灵活、动态的敏捷化的数据分析的方法。</p><p></p><p>“虽然包含零售在内很多的企业，本身已经积淀了大量的数据，但是由于过去信息化系统建设过于庞大和繁重，形成了很多的数据孤岛。”马勇表示，“这些遗留下来的IT架构阻碍的不仅仅是数据价值的释放，同时也影响了企业内部和外部的打通，更加阻碍了现在以及未来可持续发展的极致客户体验的打造。”</p><p></p><p>在他看来，要消除这些“沟壑”，必须采用<a href=\"https://www.infoq.cn/article/6vqgSEzh1ZXaTucSIUaZ\">混合云</a>\"架构。</p><p></p><p>首先，开放生态中的零售企业对快速部署 IT 能力、快速适应多平台多渠道的消费者需求、以及安全性都有极大的要求，混合云的运营模式能够帮助零售企业及时满足监管政策变化所需的安全性和灵活性；</p><p></p><p>其次，开放式的混合云平台不仅可以支持工作负载在内部环境、私有云和多云环境之间的迁移，还支持在不同供应商的云环境之间按需迁移，这样就可以让零售企业能够访问任何平台的物联网数据和设备，实现数据的无缝衔接，支持核心工作流变得更为智能；</p><p></p><p>最后，混合云平台还可以让企业随时随地扩展AI，借助边缘计算，将云功能部署到数据在的任何位置，实现 AI 规模化应用，赋能超强店员。 </p><p></p><p>而对于IBM自身而言，在2021年也已经全面转入混合云架构，包括内部的财务、采购、订单、合同，客户相关的服务体系，以及员工的绩效、薪酬、培训、文化转型相关的全业务领域等等均基于混合云运行。“通过混合云部署，加上AI、智能工作流等一系列举措的实施，我们在运营成本方面有40%的提升，供应链管理方面有95%的效率提升。”马勇透露。</p><p></p><h2>“从现在开始行动”</h2><p></p><p></p><p>总而言之，零售的未来一定是“以消费者为中心”，这一趋势无可逆转。从消费者需求出发，企业必须重构自己的业务模式，基于消费者数据，指导从产品研发、生产制造、营销销售到供应链的全生命周期。</p><p></p><p>“零售企业必须全线出击，向无边界零售不断演进，满足不断升级的消费者期望。”虽然每个零售商向无边界零售演进的道路都是独一无二的。但是，龙如军还总结了企业转型的三大成功要素：</p><p></p><p>第一，选择伙伴、众行致远，即找到正确的合作伙伴，依托丰富的经验、正确的方法，少走弯路，事半功倍；第二，统一认知、推进变革，在组织层面充分达成共识，扫清变革过程中的各种阻力；第三，快速迭代、加快落地，聚焦更容易形成成果转化的场景，加快迭代创新的节奏。</p><p></p><p>“如今，消费新格局基本确立，对于零售企业而言既是全新的挑战，更是千载难逢的机遇，如何超越消费者不断升级的预期，如何在行业激烈竞争中脱颖而出，答案只有一个——现在开始行动，那些积极拥抱无边界零售转型的企业必将会获得丰厚的回报。”龙如军总结道。</p><p></p><p></p><blockquote>《无边界零售》白皮书报告下载链接：<a href=\"https://www.ibm.com/downloads/cas/GB0XZEPY?mhsrc=ibmsearch_a&amp;mhq=%26%23x96f6%3B%26%23x552e%3B\">https://www.ibm.com/downloads/cas/GB0XZEPY?mhsrc=ibmsearch_a&amp;mhq=%26%23x96f6%3B%26%23x552e%3B</a>\"</blockquote><p></p>",
    "publish_time": "2022-12-19 16:46:24",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]