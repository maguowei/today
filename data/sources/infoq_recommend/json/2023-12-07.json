[
  {
    "title": "Android 新增 Telecom 库 jetpack，简化音频/视频通话应用开发",
    "url": "https://www.infoq.cn/article/aNLotE3G2UBH2ftFlpk4",
    "summary": "<p>Android 新增 Telecom 库 jetpack。该库目前为 Alpha 版本，旨在简化音频及视频通话应用的开发。它为 Android 开发人员提供了多个 API，支持应答 / 拒绝、音频路由等常见功能。</p><p></p><p>首先，新库会负责声明它使用哪些前台服务。这意味着开发者不需要显式遵守 Android 14 中新引入的的隐私要求。该库还可以确保用户离开应用时通话不会中断，而这对于开发者来说是透明的。</p><p></p><p>该 Telecom 库还为智能手表提供了一个 API，用于处理用户操作，如接听、拒绝、挂断和静音呼叫。该 API 可以流畅地在手表上显示与呼叫相关的信息，并且，当用户正在进行通话而又有另一个呼叫进入时，可以为用户保持当前呼叫。</p><p></p><p>新库提供的另一个主要功能是音频路由，因此，使用它的任何应用程序都不需要使用音频管理器来跟踪设备的音频状态及获取可用音频设备的列表等。该库可以列出所有可用的去向 / 来自蓝牙音频设备的流式音频端点。</p><p></p><p>该 Telecom 库引入了一个新的 CallsManager 类，取代了以前非 jetpack 库中提供的 ConnectionService 类。如果开发人员想要利用新类所带来的好处，就需要完成一项特定的迁移。</p><p></p><p></p><blockquote>从ConnectionService 迁移到 CallManager 非常简单，但也不是改下命名空间那么简单。你可以认为，CallManager 取代的是ConnectionService ，而CallControlScope 取代的是ConnectionService.</blockquote><p></p><p></p><p>下面的代码片段展示了如何添加一个具有给定属性的呼叫：</p><p></p><p><code lang=\"java\">val attributes = CallAttributesCompat( \n       displayName = displayName, \n              address = address,\n       direction = CallAttributesCompat.DIRECTION_INCOMING,\n       callType = CallAttributesCompat.CALL_TYPE_AUDIO_CALL,\n       callCapabilities = (CallAttributesCompat.SUPPORTS_SET_INACTIVE\n                or CallAttributesCompat.SUPPORTS_STREAM \n                               or CallAttributesCompat.SUPPORTS_TRANSFER), \n)\ncallsManager.addCall(\n        attributes\n      ) { \n                // Call control scope \n\n}\n</code></p><p></p><p>谷歌表示，在未来几个月，这个库会增加许多新功能，并且向后兼容至 Android O（API level 26）。如果你对使用它创建一个 Android VoIP 应用感兴趣，那么最好从谷歌的官方示例应用入手，它向开发者展示了如何使用各种 API。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/11/android-jetpack-telecom-library/\">https://www.infoq.com/news/2023/11/android-jetpack-telecom-library/</a>\"</p><p></p><p></p><p></p><p></p>",
    "publish_time": "2023-12-07 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "没必要非得固守纯向量数据库！专访亚马逊云科技数据库和迁移副总裁Jeff Carter",
    "url": "https://www.infoq.cn/article/LAvHdllNrSpdZlsAk9x4",
    "summary": "<p>采访 ｜ Kevin</p><p>编辑 ｜Tina、芳芳</p><p>&nbsp;</p><p>生成式AI时代的到来催生了向量数据库日益增长的需求和应用。亚马逊云科技也在多种数据库服务上实现向量搜索功能，并且他们也认为这是任何数据库都应当具备的一项核心功能。那亚马逊云科技在数据库产品上有什么样的规划、他们如何看待纯向量数据库需求？针对上述问题，近期在re:Invent现场，InfoQ采访了亚马逊云科技数据库和迁移副总裁Jeff Carter。</p><p>&nbsp;</p><p>Jeff Carter主要负责亚马逊云科技的关系数据库、非关系数据库和迁移方面的十几种服务。在加入亚马逊云科技之前，任职于Amazon.com网站，曾将亚马逊的原有Oracle分析环境迁移至亚马逊云科技，并将所有事务处理引擎从遗留技术栈中迁移至亚马逊云科技。Jeff 还担任过几年首席信息安全官，在加入亚马逊之前，曾在Tera Data工作过30年。</p><p>&nbsp;</p><p>以下为访谈实录，经过不改变原意的整理：</p><p>&nbsp;</p><p>InfoQ：针对当前技术趋势，亚马逊科技在数据库技术方面的规划是什么样的，包含了什么样的架构和关键产品？</p><p>&nbsp;</p><p>Jeff Carter：先从技术框架说起。在框架的最底层，我们拥有一套全面的数据库集合。在操作型数据库方面，我们之前提供15种不同服务，但到本周结束时服务数量会增加到17种。很多客户都问我为什么要有这么多服务。答案很简单，就是人确保客户在考虑使用亚马逊云科技时，能在商店中找到符合需求的充足数据库选项。</p><p>&nbsp;</p><p>所以我们一直在努力推出更多方案。除此之外，客户对于未来两到三年的发展肯定也设有愿景。有些愿景可能需要现有技术，也有一些可能依赖于新的技术。因此我们也会尝试提供能支撑未来需求的新技术。总之，必须密切关注客户的期望，而且这种期望是当下与未来的综合体。如我所说，到本周末我们将拥有17种不同的数据库服务，有些是关系数据库、也有些是非关系数据库。</p><p>&nbsp;</p><p>以非关系数据库为例，比如我们即将发布的新方案，我称之为操作型数据库。但实际上，它的应用更偏重于分析。还有Neptune，我们的老牌图数据库。除了Neptune之外，我们的图数据库阵容还会进一步扩展。而对于现有数据库，特别是关注操作型用例时，我们也将更多强调分析方面的应用。比方说，图领域中的分析。以社交图谱为例，对社交图谱的操作能显示当前用户有哪些联系人，并列出前十位，如果需要也可以列出几千位。Facebook就属于操作型案例。但有时候，大家可能希望查询谁在网络上的影响力最大，这往往就需要所谓全表扫描。不过毫无疑问，我们当然不希望把全表扫描当作操作型负载，事务数据库也不擅长执行这类操作。所以分析应该在内存内进行，这样速度会非常快。这是一种持久设计，而且可以基于我们已经在使用的相同技术，比如DynamoDB和MemoryDB，只是分析会在内存内实现。</p><p>&nbsp;</p><p>之后是核心层，本周之后我们将拥有17种不同的数据库。接下来最重要的就是如何集成数据，因为并不是每个人都想面对这么多不同的资产。所以我们希望在各种资产中建立起重要的共性，也就是零ETL。作为一项基本目标，现在我们已经围绕它建立起诸多案例，而我们真正关心的就是如何让数据无缝、顺畅地从事务引擎转移至数据仓库或者数据湖。而零ETL，就是实现这种无缝移动的关键。</p><p>&nbsp;</p><p>在我们执行插入、更新、删除等标准数据库操作时，数据其实就开始了流通和变化。数据要么进入RedShift，要么移动到使用端。接下来是把数据湖治理好。因此，我们最近才公布了Data Zone数据区。这样大家就能找到环境中的数据，我们也可以为数据创建权限组。用户可以为权限组指定成员，再把权限组分配给权限集。而且无论大家具体使用什么分析引擎，这些权限都能正确起效。&nbsp;</p><p>&nbsp;</p><p>最后是生成式AI，这里我要讨论两种生成式AI的应用形式。第一，我们要采取哪些措施来改善客户体验？第二，我们要如何帮助客户构建他们自己的应用程序？而改善客户体验的案例，就是我们本周发布的公告之一：Q。在本届re:Invent大会之前，亚马逊也有名叫Q的产品，就是QuickSight Q，主要通过自然语言处理建立仪表板和报告。这项功能现在仍然存在，但新的Amazon Q属于独立品牌，涵盖亚马逊云科技内部利用生成式AI增强客户体验的所有成果。我们这次着力宣传的一个例子就是：我们把所有用户文档同大语言模型相结合，这样用户就能随意用自然语言询问相关问题，Amazon Q则会根据文档信息给出建议和相应的详尽操作步骤。</p><p>&nbsp;</p><p>这样文档的交互性就更好了。不只是在搜索中使用生成式AI，我们还用Aurora在RDS领域做过类似的尝试。我们还开发了DevOps Guru for RDS，借此查看数据库中是否存在性能异常，并提前向客户发出提醒。我们还与负责GuardDuty的安全团队合作，随时监控那些指向您数据库的登录行为。</p><p>&nbsp;</p><p>一旦它发现异常，就会主动发出提醒。具体可能是有人在反复尝试密码，也可能是来自安全部门已知暗网或恶意IP地址的一次登录操作。哪怕只发生一次，它也能牢记在心。这就是我们利用生成式AI服务帮助客户的三个简单案例。我们还投入大量资金，希望帮助客户们取得更大的成功，而这方面成果就是Bedrock。在Bedrock之下，我们还推出了PartyRock等服务。如果大家还没试过，我强烈建议您马上体验。它非常简单也非常有趣，总的来说这就是一大堆不同大语言模型的集合。我们坚信至少就目前来看，还没有哪种单一模型能够证实世界，必须要借助多种不同的方法和模型，发挥它们各自擅长的专业知识。</p><p>&nbsp;</p><p>比如说一种模型可能擅长编辑图片，而另一种模型可能擅长编排音乐，第三种模型则擅长修改文本或者文字润色。它们各有自己的关注取向。因此，我们希望保证客户能轻松找到、并选择最适合自身需求的模型。我们当然支持多种模型，但不同用户对模型有不同的要求，毕竟大家的业务也是独一无二的。你可能需要添加本地数据，这个过程被称为检索增强生成，简称rag。</p><p>&nbsp;</p><p>使用时，大家可以指定共享驱动器，指定要启用的大模型，指定支持vss向量相似性搜索的数据库。数据库可以是Pincone向量数据库，也可以是Redis，或者我们支持的七种数据库中的任何一种。我们还在扩展，目前已经有七种不同数据库选项，包括OpenSearch、RDS Postgres、Aurora Postgres、MemoryDB等等，未来还会有更多。指定完成之后，点击开始，它就会读取文档，把文档拆分成块，用你选定的大语言模型将其转为向量、创建向量嵌入。之后则把它们放进支持vss的数据库，再把大模型和vss数据库组合起来，就能回答你提出的问题了。</p><p>&nbsp;</p><p>现在我们的模型已经掌握了这些来自数据存储的特定业务知识。在交互过程中，所有的知识都圆融一体，可供你随时选择并交付给客户。现在我们就能把大语言模型跟向量存储这套组合一并交给客户了。如果愿意，也可以只提供给内部员工。总之，大家可以随意挑选用户，指定他们能跟文档中的哪些部分进行交互。文档可以是任何形式，比如说网页或者PDF等等。总之我们提交一个文档，把它转换成向量。之后大模型就能识别这些数据，避免手动对程序进行处理。单靠Bedrock就能实现全面自动化。</p><p>&nbsp;</p><p>当然，本届re:Invent大会上还有很多其他案例。总之我们团队一直在与Bedrock团队密切合作，共同实现向量搜索功能，我们也认为这是任何数据库都应当具备的一项核心功能。</p><p>&nbsp;</p><p>InfoQ：我们要怎么判断哪种数据库最具性价比呢？</p><p>&nbsp;</p><p>Jeff Carter：我们可以在模型中设定多种参数，比如说召回率。整个所谓向量相似性搜索的过程，就是先提取数据、再立足多个维度创建数字，也就是说每个文档可能拥有20、30或者40个不同的维度。然后在这40个维度上，vss的作用就是在不同的维度间寻找最近邻。这就是我们想要向核心数据库中添加的功能，即快速执行vss查找的能力。这就是召回率，它是个介于0和1之间的数字。召回率越高，得出的答案质量越好，但也会消耗更多算力。你可以选择90%的召回率，也可以选择99%的召回率。根据选择召回率的不同，各种数据库的性价比也有差异。</p><p>&nbsp;</p><p>我觉得对于大多数用例，Aurora Postgres都表现出色，另外OpenSearch也很不错。但如果想要极高的召回率，那么作为最佳配伍，我觉得MemoryDB的性能表现最为极致。因为它会把所有数据都存放在内存内，而不必多次访问磁盘。</p><p>&nbsp;</p><p>InfoQ：亚马逊云科技今天公布了好几项关于零ETL的产品。我很好奇，这是不是代表随着越来越多的零ETL产品面世，不久的未来ETL就会彻底消失了？你怎么看这个问题？</p><p>&nbsp;</p><p>Jeff Carter：根据个人经验，我还是更关注消费者的感受这部分。ETL其实分为两层，其一就是从事务引擎中获取基础数据并放入数据环境，而零ETL其实实现的就是对这一层的自动化。而对基础数据进行业务层级转换以建立更高级别的业务组，即T的部分，则仍然要用到Glue或者第三方工具才能建立起更高级别的业务领域。从Amazon.com的角度来看，前一个级别的实例就是配送中心库存。核对我们配送中心里的每种产品还有多少库存，再把这些数据转移到数据湖中，这就是零ETL起效的部分。但要想把所有配送中心都整合起来，把全局数据显示在网站上，那就需要更多的T层，要用到Glue之类的工具。</p><p>&nbsp;</p><p>ETL通常是向数据仓库和数据湖读取和写入数据，但如果愿意，也可以使用Glue访问不同的数据库以获取信息。在亚马逊云科技中，当我们谈到数据仓库时，通常是指RedShift。而Glue能跟RedShift无缝对接。至于说数据湖，我们主要是指Lake Formation，还有EMR和Athena等其他几种项目。Redshift是一种作为数据仓库的并行列式数据库。</p><p>&nbsp;</p><p>那么未来，是不是人们会更多把数据传送到数据湖中？而不再大量使用列式数据库那样的数据仓库？我觉得这两种情况都会存在，具体取决于查询的大小、类型还有表的类型，不同的场景对应不同的方法。但我觉得从长远来看，我们目前正在研发、但还没有公布的很多技术应该能发挥创造性的作用，真正把这两种环境联系在一起。</p><p>&nbsp;</p><p>InfoQ：大家都知道，向量数据库领域的竞争非常激烈。在来这里之前，我跟中国技术社区的人们进行过很多交流，包括跟向量数据库相关的线上讨论。有些专家认为，搭配大语言模型的长期记忆组件不应该是单纯的向量数据库。所以作为亚马逊云科技的数据库和迁移服务负责人，你如何看待向量数据库的发展方向？未来几年又可能出现哪些潜在的挑战和机遇？</p><p>&nbsp;</p><p>Jeff Carter：首先，我们希望通过亚马逊云科技为客户提供更多选择。我之前用两家公司举了例子，当然还有很多其他案例。首先就是Pincone，他们作为纯向量数据库的代表。另外Redis Labs也有能支持vss的版本。只要客户愿意，我们非常乐意支持这些产品以供免费使用。</p><p>&nbsp;</p><p>他们对这些方案肯定都有自己的判断，而我们很高兴能支持他们的实际选择。但我一直觉得，没必要非得固守纯粹的向量数据库。正因为如此，我们才取其核心技术并融入其他方案，努力在不同技术之间做出权衡。这样客户就能做出最符合业务需求的明智选择。</p><p>&nbsp;</p><p>现在形势一直在快速变化，当下我们给出的答案未来都可能变成错误答案，比如6个月之后情况可能会大为不同。甚至未来3个月都可能出现变化。我相信所有企业都希望能用自己的业务信息来扩展基础模型。相信也会有企业愿意花几个月时间自行训练吧，只是成本会高得多。</p><p>&nbsp;</p><p>我觉得微调和检索增强生成（rag）的边界比较模糊，二者的适用范围也有交集。总之虽然大语言模型的表现令人惊叹，但还远称不上完美。</p><p>&nbsp;</p><p>InfoQ：我们都知道数据库技术已经诞生半个世纪了，在这样的老古董上搞创新也变得越来越艰难。那亚马逊云科技是如何在数据库技术领域不断创新的？近年来，您认为亚马逊在数据库领域取得的最重大、最显著的技术进步是什么？</p><p>&nbsp;</p><p>Jeff Carter：这是个好问题。首先，我们每年都会对所有产品进行创新，并投入大量时间跟客户和社区成员进行交流，了解客户在使用现有产品时遇到过哪些问题，并尝试做出改进。</p><p>&nbsp;</p><p>但也有很多比较长远的问题，例如如何适应未来几年可能出现的趋势、提前做好准备。我们目前开发的项目可能要到一年、两年或者三年之后发布，当然希望它们在亮相时仍然具有变革性。请原谅我无法透露目前的工作内容，但我想强调的是，我们会同时考虑短期和长期问题，考虑怎么把事情做好。就以生成式AI为例，我们已经意识到这是一项变革性的技术，而这样的技术可能每十年都会出现一次。我们内部已经在努力转向，讨论之前的哪些成果能与之对接，并且公开表态将积极向着这条路线推进。我们会始终保持旺盛的创新动力，并真正把心力投入到有希望的特定领域当中。</p><p>&nbsp;</p><p>所以像Bedrock、Titan还有PartyRock，这些都是我们能在相对较短的时间里拿出的现实成果。我们是一家专注于机器学习和AI的公司，我随随便便就能举出十几个在消费级业务领域应用机器学习的例子，比如利用机器学习改造搜索功能，借此在所有配送中心内建立起智能化的补货系统。这样的案例可以说数不胜数。</p><p>&nbsp;</p><p>而现在，我们又把目光投向了生成式AI，希望大家都能感受到我们严肃的态度。至于生成式AI方面的用例，我觉得不同的人可能会有不同的看法。生成式AI最神奇的能力就在于处理自然语言。是的，就像前面提到，它能阅读文档，再根据读取过的内容正确回答问题，相当于将语言承载的完整历史都纳入了模型自身。这真的太酷了。我相信肯定会有很多有趣的应用出现。</p><p>&nbsp;</p><p>InfoQ：2023年即将过去，如果用3个关键词来描述这一年来的数据库领域，你会选择哪3个？</p><p>&nbsp;</p><p>Jeff Carter：第一个词很简单，降本。第二个是生成式AI。第三个是集成或者说整合。过去18个月以来，人们一直在努力寻求能够降本增效的方法，亚马逊云科技只是其中之一。这也代表着这段时间以来的一大趋势。每一次交流，对方都会强调降本和AI，而且人们迫切需要更简单的实现方式。而要想实现二者，整合就是关键所在。</p><p>&nbsp;</p>",
    "publish_time": "2023-12-07 09:59:21",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "2023数字化践行者年度力量榜报名开始，覆盖企业、团队、个人3大维度",
    "url": "https://www.infoq.cn/article/MexDzN8ekKIKXH6d0vz8",
    "summary": "<p>我国正站在数字化发展的前沿，2023 年 3 月，《数字中国建设整体布局规划》的印发，为我国数字化规划确立了明确的方向，加速数字经济与实体经济的深度融合，推动全社会数字化转型，构建数字中国，成为我国战略顶层设计的重要组成部分。面对这一战略顶层设计，数字经济与实体经济的深度融合成为必然趋势，全社会数字化转型成为确定性。</p><p></p><p>数字化转型不仅是一场技术的变革，更是一场全面的战略调整和组织文化的重构，企业、团队和个人都必须思考如何创新发展模式、重塑竞争优势，并迅速采取行动。</p><p></p><p>正因为如此，极客邦科技双数研究院与中国信通院“铸基计划”、长城战略咨询、《培训》杂志联合发起「2023 数字化践行者年度力量榜」，旨在发掘并表彰在数字化转型领域取得显著进步的企业、团队和个人。通过数字化转型创新实践及关键成果的标杆案例分享，为整个行业带来启发和参考，帮助更多的企业在数字化转型的浪潮中找到前进方向，共同构建数字化未来。</p><p></p><h1>榜单类别</h1><p></p><p></p><h2>2023 年度数字化践行者标杆企业奖</h2><p></p><p>发掘并表彰在数字化转型领域取得显著进步的企业。评选维度包含数字化转型战略及路径制定、数字化转型落地成果、数字技术创新与应用、数字化组织变革、企业文化及人才发展、社会责任与贡献等方向。</p><p></p><h2>2023 年度数字化践行者基石奖</h2><p></p><p>发掘并表彰在企业数字化转型过程中起到关键攻坚作用的优秀团队。评选维度包含承接数字化转型战略及执行任务、具体的数字化项目推动落地成果、团队协作的变革与创新、关键数字技术的应用与实践、团队与个人学习成长等方向。</p><p></p><h2>2023 年度企业数字化人才发展高潜个人奖</h2><p></p><p>发掘并表彰在数字化转型过程中有着突出贡献和成绩的 HR、培训经理、人才发展官。评选维度包含企业数字化转型人才体系建设、数字化人才体系搭建、数字化人才培养、数字化人才创新等方向。</p><p></p><h1>参选价值</h1><p></p><p>专属荣誉证明：获奖方受邀出席 QCon 全球软件开发大会·上海站 2023 颁奖典礼，获得专属定制奖杯。品牌强力加持：获奖方可获得 InfoQ 极客传媒与榜单合作伙伴的全媒体渠道、持续性宣传与品牌曝光。典范案例沉淀：获奖方提报案例可入选《行知数字中国案例集》，提升企业数字化品牌影响力。同台领袖交流：为获奖方搭建与全球技术领袖、数字化转型先锋企业高管链接的场景，促进交流与业务合作。</p><p></p><h1>评选流程</h1><p></p><p>自主报名 (12 月 1 日 -12 月 17 日)组委会初审 (12 月 18 日 -12 月 20 日)专家终审 (12 月 21 日 -12 月 22 日)榜单公布 (12 月 28 日)</p><p></p><h1>申报流程</h1><p></p><p>根据榜单类别信息判断申报项目；添加组委会「茶茶」微信获取奖项申报表；填写完申报表后，以邮件形式发送至「business@geekbang.com」，邮件命名【榜单类别 + 企业 / 组织 / 个人名称】。</p><p>有关「2023 数字化践行者年度力量榜」的相关咨询和申报，可联系组委会「茶茶」。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ac/ac5f47e00d2a9a449d647368edc2ef2c.jpeg\" /></p><p>扫码立即参与评选</p><p></p><p>我们诚邀各位数字化践行者共同参与这一盛事，携手迈向数字化转型的未来，助力中国数字化发展蓬勃前行！</p>",
    "publish_time": "2023-12-07 10:06:01",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "小红书基础技术部通用网关负责人陈华昌（空古）确认出席 QCon 上海，分享 Edith 网关——面向小红书亿级 DAU 的网关大规模实践",
    "url": "https://www.infoq.cn/article/smvcY2DOCz1VMySMhrjx",
    "summary": "<p><a href=\"https://qcon.infoq.cn/2023/shanghai/?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_campaign=9&amp;utm_term=1207&amp;utm_content=chenhuachang\">Con 全球软件开发大会</a>\"，将于 12 月在上海召开。小红书基础技术部通用网关负责人陈华昌（空古）将发表题为《<a href=\"https://qcon.infoq.cn/2023/shanghai/presentation/5676?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_campaign=9&amp;utm_term=1207&amp;utm_content=chenhuachang\">Edith 网关——面向小红书亿级 DAU 的网关大规模实践</a>\"》主题分享，从 Edith 网关的设计理念，核心功能，以及如何在实际业务中发挥关键作用这三个方面，探讨网关研发所遇到的技术挑战和解决方案，以及如何在保障 C 端用户体验的同时，还能有效地进行服务治理和稳定性建设。</p><p></p><p><a href=\"https://qcon.infoq.cn/2023/shanghai/presentation/5676?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_campaign=9&amp;utm_term=1207&amp;utm_content=chenhuachang\">陈华昌（空古）</a>\"，曾就职于多家头部互联网公司，一直专注于计算机工程领域，专注于基础架构、计算机视觉工程、服务端工程等技术方向。目前聚焦在打造符合小红书业务特性的通用 API 网关技术产品方案。他在本次会议的演讲内容如下：</p><p></p><p>演讲：Edith 网关——面向小红书亿级 DAU 的网关大规模实践</p><p></p><p>Edith 网关是我们为了更好地适应小红书特有的社交业务模式，解决业务扩展性和微服务治理问题，提高系统稳定性和效率而研发的重要 API 网关产品。</p><p></p><p>在小红书整体云原生技术的加持下，南北向接入架构进行了一次革命性升级。本次分享将从 Edith 网关的设计理念，核心功能，以及如何在实际业务中发挥关键作用这三个方面进行深入剖析。既有介绍网关研发所遇到的技术挑战和解决方案，又有介绍如何在保障 C 端用户体验的同时，还能有效地进行服务治理和稳定性建设。</p><p></p><p>演讲提纲：</p><p></p><p>Edith 网关诞生历程和背景</p><p>○ 现实存在的问题，多次热搜事件</p><p>○ 主流解决方案的优劣分析</p><p>架构与设计</p><p>○ 小红书南北向接入架构设计</p><p>○ Edith 网关高可用架构设计，多租户跨云多活设计</p><p>○ 产品化设计</p><p>核心功能和业务落地实践</p><p>○ 元数据配置实时生效和灰度能力，版本快照能力</p><p>○ 个性化插件、实验平台、OpenAPI - 业务多样性落地</p><p>○ 稳定性能力：多维度流量控制、熔断、可观测、告警等</p><p>○ 性能优化和自动化提效</p><p>○ 业务服务通用降级能力（自动 / 手工）- 故障无感化</p><p>○ 故障演练和机房切流</p><p>未来展望</p><p>○ Serverless 化</p><p>○ 开源</p><p></p><p>听众收益点：</p><p></p><p>○ 了解小红书亿级 DAU 下南北向架构大规模落地经验</p><p>○ 了解 API 网关服务治理和稳定建设的实践经验</p><p></p><p>除上述演讲外，QCon 上海还将围绕&nbsp;<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1595?utm_source=infoqweb&amp;utm_medium=teacherart\">GenAI和通用大模型应用探索</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1596?utm_source=infoqweb&amp;utm_medium=teacherart\">AI&nbsp;Agent&nbsp;与行业融合应用的前景</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1597?utm_source=infoqweb&amp;utm_medium=teacherart\">LLM&nbsp;时代的性能优化</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1598?utm_source=infoqweb&amp;utm_medium=teacherart\">智能化信创软件&nbsp;IDE</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1602?utm_source=infoqweb&amp;utm_medium=teacherart\">面向人工智能时代的架构</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1604?utm_source=infoqweb&amp;utm_medium=teacherart\">性能工程：提升效率和创新的新方法</a>\"等专题进行交流。</p><p></p><p>QCon 上海 2023，相约 12 月！ 现在购票，享 9 折优惠，立减￥680！咨询购票请联系：18514549229（微信同手机号）。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/01/0113b3dfb187d5f9988b7eb16d2e0594.png\" /></p><p></p>",
    "publish_time": "2023-12-07 11:30:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "AI 帮写爬虫，真的吗？ CodeWhisperer：当然！",
    "url": "https://www.infoq.cn/article/QHhWqeXmAQYQahEFMN9j",
    "summary": "<p>文章作者：梦想橡皮擦</p><p>本文经亚马逊云科技授权转载</p><p></p><p>2023 年技术圈什么最火？答案毫无疑问是 AIGC，伴随该项技术的发展，新的编程方式也出现了，那就是用 AI 辅助编程，有了 AI 的加持，开发人员的效率和生产力可以得到大幅度的提升。今天我们就介绍一款非常棒的人工智能编程工具&nbsp;<a href=\"https://aws.amazon.com/cn/codewhisperer/?trk=cndc-detail\">Amazon CodeWhisperer</a>\"&nbsp;， 相信我，用上他之后，你的工作效率至少能翻一倍。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/30/3071333e43a26ad220c7f589e4e393dc.png\" /></p><p></p><p>在日常的编码工作中，你是否会碰到如下难题？接触了一款全新的 Python 模块，不知道如何开启 hello world；模块的某个方法，忘记了参数和返回值，反复切换手册会打断思路；不想写注释；写了一段代码，但是并不健壮，担心有难以发现的漏洞；……</p><p></p><p>如果你正在被这些问题困扰，那 Amazon CodeWhisperer 能非常好的解决上述问题。</p><p>下面跟随我的脚步，开启 CodeWhisperer 的实践吧！</p><p></p><h3>CodeWhisperer 初始化</h3><p></p><p></p><p>CodeWhisperer 支持的 IDE 包括 Visual Studio（VS）Code（本篇博客使用的 IDE） 和 JetBrains IDE（IntelliJ、PyCharm、CLion、GoLand、WebStorm、Rider、PhpStorm、RubyMine 和 DataGrip），安装过程只需要几分钟，这里我们不详细展开讲解，大家可以参考 官方文档 ，官方还贴心的准备的视频教程~</p><p></p><p>本篇博客我们使用 VSCode 完成一个爬虫项目实践，可以直接在 VSCode 插件中检索【CodeWhisperer】，直接安装即可（已经有将近 200W 的安装量啦，要抓紧跟上大家的节奏），安装完毕，在 VSCode 侧边栏中会出现 CodeWhisperer 插件图标，如下所示。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/fd/fd58707ab97f9bf0ab9c483b7fde5718.png\" /></p><p></p><p>初始化过程中最重要的就是账号的链接，点击上图【Connect to ……】链接，之后按照步骤登录账号，一系列的操作之后，浏览器出现下图绿色状态提示界面，此时账号对接已经完成。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/06/068d396ec69476da61eaad645918d483.png\" /></p><p></p><p>返回到 VSCode 中，会发现 Amazon CodeWhisperper 帮助手册已经打开，建议阅读一下 ，里面已经整理了插件的基础使用说明。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5b/5b6ba29acf55369185de5105cc45e891.png\" /></p><p></p><p>与此同时，VSCode 左下角开发者工具（DEVELOPER TOOLS）也已经显示链接到 Builder ID。至此，我们的前置工作已经全部完成，下面可以开始进行工具使用。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/48/4809824c0d5cfccbaf22c442ab7ec5f5.png\" /></p><p></p><p></p><h3>CodeWhisperper 使用</h3><p></p><p></p><h4>简单逻辑示例</h4><p></p><p></p><p>CodeWhisperer 插件安装完毕，默认会开启 Auto-Suggesions（自动建议模式），此时当我们在编写注释或代码之后，CodeWhisperer 会自动给我们提供代码提示，这个过程就像超强版的语法提示，如果你还没有安装好插件，可以先看一下动图，整体感受一下。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6f/6fa339d2a4d6c3fd2ebb2b139065c5d1.gif\" /></p><p></p><p>CodeWhisperer 的代码提示，在 VSCode 中可以使用左右方向键进行选择，使用&nbsp;Tab 进行确认，其他按键表示不采纳提示代码。初次体验下来，正如插件名称（Whisperer：低语者）所描述的一样，就像是编辑器在轻轻的和我们说着即将要敲入的代码，如果同意，可以一键采纳，不同意，直接忽略即可。</p><p></p><h3>代码翻译示例</h3><p></p><p></p><p>拥有此功能之后，很多简单的程序完全可以基于智能提示编写完毕，但这肯定不够，我们需要 CodeWhisperer 完成更有挑战的事情，在 Python 爬虫领域，经常需要将一段前端 JS 代码用 Python 重新实现。</p><p></p><p>下面提供一段 JavaScript 中生成&nbsp;UUID&nbsp;的代码，然后用 Python 复写。</p><p></p><p><code lang=\"text\"> p = function(e) {\n  var t = e || null;\n  return null == t &amp;&amp; (t = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (function(e) {\n      var t = 16 * Math.random() | 0;\n      return (\"x\" === e ? t : 3 &amp; t | 8).toString(16)\n  }\n  ))),\n</code></p><p></p><p>在 VSCode 中直接输入你的需求，然后 CodeWhisperper 会给我们一个完整的实现示例，可以看到代码重写完全正确。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/fa/fa312148d6faae8447f54ab7020557d0.gif\" /></p><p></p><p></p><h4>加密函数示例</h4><p></p><p></p><p>除了翻译代码外，在编写爬虫案例的时候，如果你对某些加密函数使用详情有遗忘，可以让 CodeWhisperer 直接给出示例，快速唤醒自己的记忆。</p><p>下图为输入注释&nbsp;# 使用 Python 实现 hmac_sha256 加密函数&nbsp;获取函数的使用示例代码。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1a/1a72bc1591d39b07d63aea20d8075411.gif\" /></p><p></p><p>如果在使用 CodeWhisperer 的过程中按错按键，即没有使用 Tab 确认代码，可以随时按下快捷键 Alt+C，CodeWhisperer 代码提示会再次出现，又可以继续加速你的开发效率了。</p><p></p><h4>混合加密示例</h4><p></p><p></p><p>如果将上述逻辑都定义为单逻辑，那下述需求就是一个复合逻辑示例了，在实际编码中，会碰到需要将两种加密混合使用的情况，需求如下：</p><p></p><blockquote>使用 Python 实现 Base64 + AES 加密字符串</blockquote><p></p><p></p><p>在 IDE 中输入上述注释信息，然后回车，CodeWhisperer 就会自动生成后续代码，其中部分逻辑可以一次性完成，效果如下，其中在核心逻辑部分，CodeWhisperer 表现非常优秀，答案秒输出，并且直接可用。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/aa/aa0812325e01fe12923f46f82dea7ae3.gif\" /></p><p></p><p></p><h4>算法模板示例</h4><p></p><p></p><p>在业务逻辑的编写过程中，有时会用到常见算法，例如快排、堆排、哈希等，这些算法很多都类似模板代码，在编写的时候，如果可以一键生成，能大幅度提高代码编写速度，包括算法改写速度，在 CodeWhisperer 中，可以通过注释快速生成。</p><p></p><blockquote>使用 Python 生成快排代码</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e8/e81689721f38323b56fde5ed41fa11b4.gif\" /></p><p></p><p>体验 5 个示例之后，CodeWhisperer 的使用非常简单，而且无需切换编辑窗口，在 IDE 的代码文件中直接完成了 AIGC 的问答流程，响应速度非常快，代码准确性很高。</p><p></p><p>单独的案例对 CodeWhisperer 已经没有难度了，接下来我们尝试完成一个完整的 Python 爬虫案例（咱们看一下只写注释，能不能完成一个合格的爬虫采集程序）。</p><p></p><h3>CodeWhisperer 项目实战</h3><p></p><p></p><p></p><blockquote>目标采集站点为作者博客，无侵权问题。</blockquote><p></p><p>编写爬虫基础框架注释，包含如下内容：</p><p>程序使用的采集模块目标采集站点地址采集的目标标签数据存储到文件发送采集到的数据到指定邮箱</p><p></p><h4>第一步：输入如下注释，获取网页响应内容</h4><p></p><p></p><p></p><blockquote>使用 Python requests 模块采集&nbsp;<a href=\"https://blog.csdn.net/hihell?type=blog\">https://blog.csdn.net/hihell?type=blog</a>\"</blockquote><p></p><p></p><p><code lang=\"text\"># 使用 Python requests 模块采集 https://blog.csdn.net/hihell?type=blog\n\nimport requests\n\nurl = 'https://blog.csdn.net/hihell?type=blog'\n\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)\n</code></p><p></p><p>写完注释，直接回车之后，CodeWhisperer 直接给我们生成了对应的代码，过程中只需要按下 回车和 Tab 键即可。</p><p></p><p>如果你觉得上述代码有些简单，可以在代码基础上继续完善，例如将请求头进行完善，增加 referer 和 host 参数，直接在需要修改的位置添加注释即可。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1a/1a770e2ee60a11dd5e2af601e4383985.gif\" /></p><p></p><p></p><h4>第二步：编写目标数据采集函数</h4><p></p><p></p><p>这一步，我们要使用 lxml 模块中的 etree 提取目标标签，继续将我们的逻辑输入到注释注释中，然后回车。</p><p></p><blockquote>使用 etree 模块提取网页响应中所有的 article 标签</blockquote><p></p><p></p><p><code lang=\"text\"># 使用 etree 模块提取网页响应中所有的 article 标签\n\nfrom lxml import etree\n\nhtml = etree.HTML(response.text)\n\narticle_tags = html.xpath('//article')\n\nprint(article_tags)\n</code></p><p></p><p>此时目标博客标签已经被初步提取，下面要将标题和超链接地址进行再次提取，这里的注释需要尽可能编写清晰，如果你对 Python 爬虫技术栈有一定了解，到这里就会发现 CodeWhisperer 对代码编写提速效果。</p><p></p><p><code lang=\"text\"># 循环 article_tags 提取其内部的超链接标签的 href 属性和 h4 标签文本\n# 注意标签结构是 超链接 a 标签含后代 h4 标签\nfor article in article_tags:\n    href = article.xpath('./a/@href')[0]\n    title = article.xpath('./a//h4/text()')[0]\n    print(href, title)\n</code></p><p></p><h4>第三步：数据存入到 csv 文件中</h4><p></p><p></p><p>写入文件的逻辑属于常见操作，直接输入函数需求，相信 CodeWhisperer 会直接生成的，输入的参考注释如下：</p><p></p><blockquote>编写一个 csv 文件写入函数，其包含 2 个参数，分别是 title 和 href</blockquote><p></p><p></p><p><code lang=\"text\"># 编写一个 csv 文件写入函数，其包含 2 个参数，分别是 title 和 href\n\ndef write_to_csv(title, href):\n    with open('codewhisperper_demo.csv', 'a', encoding='utf-8') as f:\n        f.write(title + ',' + href + '\\n')</code></p><p>write_to_csv()&nbsp;函数调用放到上述循环中即可完成本步骤。再次运行代码，在爬虫目录会生成对应的文件，打开文件得到目标数据，效果图如下所示。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0e/0e8cd71556d94b2f927b26be4c94d45a.png\" /></p><p></p><p>这里一个简单的爬虫写完了，但是我们的工作还没有完成，要继续优化这个程序。</p><p></p><h4>第四步：将采集到的数据，发送到 163 邮箱</h4><p></p><p></p><p>输入注释：# 编写一个邮件发送函数，将刚刚生成的文件 codewhisperper_demo.csv&nbsp;发送到指定邮箱，CodeWhisperer 瞬间就会帮助我们生成一个参考函数，实际效果如下图所示。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d7/d7b9d0ddc1c846a5640a4176db301926.gif\" /></p><p></p><p></p><blockquote>将上述代码中的账号和密码修改为自己真实数据，即可实现一键发送邮件。</blockquote><p></p><p>打开收件箱，可以看到刚刚的邮件已经发送成功，CodeWhisperer 给我们提供了一种邮件发送的实现，你可以再其基础上进行改造，以满足个性化的需求。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/96/965750f21ea6216147673ed3b1a92c95.png\" /></p><p></p><p></p><h3>CodeWhisperer 使用总结</h3><p></p><p></p><p>在博客开篇，我提出了编码过程中几个比较头疼的问题，尤其是第二个，程序员在编码过程中总是切出去查找代码示例和文档手册，从而打断编码思路，而 CodeWhisperer 非常完美的解决了该问题，在编码的过程中，Amazon CodeWhisperer 自动提供编码建议，同意就使用，不同意就舍弃，真正实现了沉浸式编程。</p><p></p><p>除此之外，CodeWhisperer 还可以基于代码和注释生成新的业务代码，尤其当我们 Python 工程师接触一个新的模块时，他可以快速的产出示例代码，而且生成的代码与我们编码风格非常相似，甚至编码风格和命名规则都可以完美学习到。在编码代码过程中，CodeWhisperer 还会自动为我们的代码提供注释参考，让我们将更多精力投入到业务逻辑中。</p><p></p><p>将 CodeWhisperer 用起来吧，几分钟之后，你就会深刻的感受到编码效率的提升！</p><p></p>",
    "publish_time": "2023-12-07 11:38:14",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]