[
  {
    "title": "全栈TypeScript CRUD框架 Remult",
    "url": "https://www.infoq.cn/article/iTzqoUwS31XXsXIbkZE8",
    "summary": "<p>Remult是一个全栈CRUD库，它利用TypeScript模型来简化开发，并提供了类型安全的API客户端和查询构建器。</p><p>&nbsp;</p><p>在软件开发中，为了确保系统功能正常，必须管理和同步两个数据模型：服务器模型和客户端模型。服务器模型指定数据库结构和API，而客户端模型定义API的传入传出数据。</p><p>&nbsp;</p><p>然而，维护单独的模型集和验证器可能会导致冗余，增加维护开销，以及模型不同步时出错的可能性。</p><p>&nbsp;</p><p>Remult通过提供一个集成模型来解决这个问题。该模型定义了数据库模式，暴露了简单的CRUD API，并支持客户端集成，使开发人员能够轻松地查询数据库，并且可以确保类型安全。</p><p>&nbsp;</p><p></p><h3>定义实体</h3><p></p><p></p><p>Remult使用装饰器将基本的JavaScript类转换为Remult实体。开发人员可以向类中添加Entity装饰器，并对每个属性应用相关的字段装饰器，从而轻松地完成这项工作。</p><p>&nbsp;</p><p>使用装饰器，Remult简化了创建实体及相关字段的过程，提高了开发人员的高效。</p><p><code lang=\"typescript\">import { Entity, Fields } from \"remult\"\n\n\n@Entity(\"contacts\", {\n  allowApiCrud: true\n})\n\n\nexport class Contact {\n  @Fields.autoIncrement()\n  id = 0\n  @Fields.string()\n  name = \"\"\n  @Fields.string()\n  number = \"\"\n}</code></p><p>&nbsp;</p><p></p><h3>服务器端设置</h3><p></p><p></p><p>要开始使用Remult，请将其与所选服务器上必要的实体一起注册。</p><p>&nbsp;</p><p>幸运的是，Remult针对几个流行的服务器框架提供了开箱即用的集成，包括Express、Fastify、Next.js、Nest和Koa。</p><p><code lang=\"typescript\">import express from \"express\";\nimport { remultExpress } from \"remult/remult-express\";\nimport Contact from \"../shared/Contact.ts\";\n\n\nconst app = express();\n\n\napp.use(\n  remultExpress({\n    entities: [\n      Contact\n    ]\n  })\n);</code></p><p>&nbsp;</p><p></p><h3>客户端集成</h3><p></p><p>配置完后端和实体后，下一步是将Remult与应用程序的前端集成。</p><p>&nbsp;</p><p>幸运的是，Remult的客户端集成被设计成库无关的。也就是说，它可以使用浏览器fetch功能或Axios进行操作。</p><p>&nbsp;</p><p>为了说明这一点，请看下面的例子：</p><p></p><p><code lang=\"typescript\">import { useEffect, useState } from \"react\"\n\n\nimport { remult } from \"remult\"\nimport { Contact } from \"./shared/Contact\"\nconst contactsRepo = remult.repo(Contact)\n\n\nexport default function App() {\n  const [contacts, setContacts] = useState([])\n\n\n  useEffect(() =&gt; {\n    contactsRepo.find().then(setContact)\n  }, [])\n\n\n  return (\n    </code></p><div><code lang=\"typescript\">\n      <h1>Contacts</h1>\n      <ul>\n        {contacts.map(contact =&gt; {\n          return (\n            <div>\n              {contact.name} | {contact.phone}\n            </div>\n          )\n        })}\n      </ul>\n    </code></div><code lang=\"typescript\">\n  )\n}</code><p></p><p>&nbsp;</p><p>从这个例子可以看出，将Remult集成到应用程序前端非常简单、灵活。然后，开发人员就可以在整个栈中无缝地利用Remult的强大功能了。</p><p>&nbsp;</p><p>Remult是遵循<a href=\"https://github.com/remult/remult/blob/master/LICENSE\">MIT许可</a>\"的开源软件。欢迎通过Remult <a href=\"https://github.com/remult/remult\">GitHub存储库</a>\"做贡献。</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/05/remult-crud-typescript/\">https://www.infoq.com/news/2023/05/remult-crud-typescript/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/dDXbcLHT7teNYSPL3sm7\">“TypeScript不值得！”前端框架Svelte作者宣布重构代码，反向迁移到JavaScript引争议</a>\"</p><p><a href=\"https://www.infoq.cn/article/SZZal8JbzaFq1O9YejCy\">三年回顾：JavaScript与TypeScript最新特性汇总</a>\"</p><p><a href=\"https://www.infoq.cn/article/wyGETHGV7BlRRkhIzcIF\">TypeScript 5.0 现已发布：全新的装饰器，速度、内存和包大小优化</a>\"</p>",
    "publish_time": "2023-06-05 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Visual Studio 2022 v17.6的第二个预览版本：效率提升、游戏开发和企业级管理",
    "url": "https://www.infoq.cn/article/wltEH9kJKZzQ1N0mAG4T",
    "summary": "<p>微软发布了<a href=\"https://visualstudio.microsoft.com/vs/preview/\">Visual Studio 2022 v17.6的第二个预览版</a>\"，其中包含了新的生产效率特性和功能改进，以增强游戏开发体验、移动开发和企业级管理，目前该版本已可以进行下载。</p><p></p><p>第二个预览版本为Visual Studio 2022带来了多个新特性，以提升开发人员的生产效率。开发团队回应了客户的反馈，推出了Git Stage和Commit During Build，允许用户在构建过程中暂存变更和提交。</p><p></p><p>Merge Dialog也进行了更新，让用户能够更好地观察合并操作的影响，并警告他们潜在的冲突。<a href=\"https://devblogs.microsoft.com/visualstudio/streamlining-your-debugging-process-with-breakpoint-groups/\">断点组的引入</a>\"能够让用户更好地组织其调试过程，面向C++的<a href=\"https://learn.microsoft.com/en-us/visualstudio/profiling/instrumentation-overview?view=vs-2022\">Instrumentation Profiling</a>\"为该编程语言提供了性能分析。除此之外，Create Member Function特性为C++提供了快捷方式来生成构造函数和相等操作符，这需要使用代码编辑器内的三个点和螺丝刀图标。</p><p></p><p>Visual Studio 17.6的第二个预览版本致力于为独立和AAA游戏创作者简化游戏开发。其中的改进包括集成<a href=\"https://docs.unrealengine.com/5.1/en-US/unreal-header-tool-for-unreal-engine/\">Unreal Engine Code Analysis</a>\"，它能够让用户直接在Visual Studio中看到来自Unreal Header Tool的警告和错误。该特性会在解析Unreal相关的C++头信息时发出警告和错误，这些警告和错误会显示在Error List中，并且在编辑器中以紫色的斜线直观地标记出来。</p><p></p><p>此外，由Tim Jones开发的、流行的<a href=\"https://github.com/tgjones/HlslTools\">HLSL Tools扩展</a>\"现在可以作为Visual Studio的一部分来使用，通过语法高亮、语句补全和跳转至定义处，它能够为用户提供更好的生产力。要使用HLSL工具，用户必须在Visual Studio Installer的Game development with C++或Game development with Unity启用该组件。</p><p></p><p>关于.NET移动开发，借助新的<a href=\"https://aka.ms/android/manifest\">Android Manifest Editor</a>\"，开发人员可以通过双击Solution Explorer中的AndroidManifest.xml文件，便利地设置可用的属性并请求设备的特定权限。这一特性有望简化安卓应用的开发过程，节省开发人员的时间和精力。</p><p></p><p>关于企业级管理，在最近的更新中，引入了两项新的特性。其中一个特性允许企业在文件共享之外，在企业内部网络中<a href=\"https://developercommunity.visualstudio.com/t/Host-Visual-Studio-layouts-on-a-webserve/10309488?beforeInstall=true\">托管和部署Visual Studio布局</a>\"。该选项可以简化布局维护，并提高使用多个全球网络文件进行共享的企业的安装性能。这项特性目前针对的是IT管理人员的远程部署，用户可以访问<a href=\"https://developercommunity.visualstudio.com/t/Host-Visual-Studio-layouts-on-a-webserve/10309488?beforeInstall=true\">反馈网站</a>\"，查看如何启用该功能体验的指导文档。</p><p></p><p>另外一个特性解决了在Installer中限制可用产品的需求。Installer的Available的Tab页现在可以很方便地访问当前预览，同时提供了通过禁用通道或使用新的HideAvailableTab策略禁用整个可用Tab页，达到限制特定产品的能力。</p><p></p><p>在版本发布的原始博客文章中，微软和开发团队最后<a href=\"https://developercommunity.visualstudio.com/home\">鼓励用户提供反馈</a>\"，并分享对新特性和改进的建议，强调他们正在持续增强Visual Studio的体验。</p><p></p><p>最后，有兴趣了解关于这个版本和其他版本的Visual Studio的开发人员可以访问关于Visual Studio 2022 IDE更新、变化和新功能的<a href=\"https://learn.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview\">详尽发布说明</a>\"。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/04/vs2022-v17-6-preview-2/\">Visual Studio 2022 v17.6 Preview 2: Productivity, Game Development and Enterprise Management</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/9sLcjI1YY9TAvmKjtUmo\">微软发布Visual Studio Extensibility SDK Preview 3</a>\"</p><p><a href=\"https://www.infoq.cn/article/m0CAVYPmFNZd76swapsu\">InfoQ专访Leslie Richardson及其团队：Visual Studio 2022发布，新功能与改进</a>\"</p>",
    "publish_time": "2023-06-05 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "AIGC浪潮下，企业研发探索持续创新 ｜QCon闭门会",
    "url": "https://www.infoq.cn/article/EMqUNaySjj3G8UAmHCoE",
    "summary": "<p>在5月26日，<a href=\"https://qcon.infoq.cn/2023/guangzhou/schedule\">QCon全球开发者大会（广州站）</a>\"顺利落地，在现场，InfoQ 特别策划了五场闭门会，主题分别为《企业在 LLM、AIGC 浪潮下的研发探索》《<a href=\"https://www.infoq.cn/article/4uHEPy7XI5ORkaTTiZXN\">DevOps vs 平台工程，必要性和 ROI 探讨</a>\"》《<a href=\"https://www.infoq.cn/article/ShUXt8wQpm9Zc17dXxDg\">破解成本优化后的稳定性问题</a>\"》《业务出海之架构、合规、运营》《<a href=\"https://www.infoq.cn/article/2SKxCHfga7XBmatYS0oW\">金融行业数据治理经验分享</a>\"》，本文为《企业在 LLM、AIGC 浪潮下的研发探索》研讨纪要整理～</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/80/808360ea04b9dc64747f84296c3b3b43.jpeg\" /></p><p></p><p></p><h4>参与嘉宾：（排名不分先后）</h4><p></p><p>主持人：杨攀&nbsp;极客邦科技副总裁、TGO&nbsp;鲲鹏会总经理</p><p>尹会生，珠海太乙人工智能技术合伙人刘熙，科大讯飞&nbsp;架构师Eddie&nbsp;lee，渣打银行&nbsp;Chief&nbsp;Architect杜玉杰，开放城市共同体发起人、天使投资人&nbsp;张晗，阳光保险科技研究院副院长&nbsp;李阳，海松资本&nbsp;快刀，得到&nbsp;CTO&nbsp;杜瑞罡，广发证券研发总监江南白衣&nbsp;唯品会资深架构师李翔，惟客数据AI算法专家</p><p>&nbsp;</p><p></p><h4>研讨话题：</h4><p></p><p>你的企业有在探索LLM、AIGC落地吗？目前是什么阶段了？在落地的过程中，有什么难点？目前LLM、AIGC真的帮你提效了吗？</p><p>&nbsp;</p><p></p><h4>精彩观点摘要：</h4><p></p><p>&nbsp;</p><p>快刀：现在AI非常火，许多团队预期非常高，我们应该适当降低预期。我们曾做过一个项目，失败了，那个时候机器理解无法作到像现在这样智能。目前在得到，通过大模型的使用可以提升电子书上架效率，原来10个人，每天仅仅能够上线200本书，现在一天可以上线1万本书，自动化测试可以每天测5000本书。他提到内部提效的东西相对较为容易可以做出来。</p><p>&nbsp;</p><p>张晗：小创新大厂赢，大创新小厂赢，AIGC 类型的革命性创新，对于小厂来说是巨大的机会，阳光保险的董事长对于AIGC比较焦虑，推动大家认识大模型的能力。不过，他也表示像销售的对话这类数据，无法提供到大模型的，这会涉及到数据安全问题，所以必须自研。但是现在的显卡非常紧俏，必须提前储备。目前公司AIGC 实践正在做一个传统销售的机器人，投产开发到第二期了。</p><p>&nbsp;</p><p>Eddie&nbsp;lee：银行还是一个比较高度监管的环境，所以我们这边也不敢说随便就上AIGC，在集团里边，我们也会有很多不同的监管机构，像英国的监管机构，香港监管局，包括新加坡那边看 AI 也看得蛮紧的。另外之前大家看很多笑话就说 ChatGPT 可能有一些就是歧视的成分在里面，这我们肯定要选的时候肯定需要小心，特别是对客人的时候会不会有一些歧视的成分，会不会对长者有一些偏见等等，目前正在小范围探索。</p><p>&nbsp;</p><p>汤海涛：麦当劳与互联网公司不同，我们的技术团队既充当与外部供应商的甲方沟通的角色，又以乙方身份与内部同事和业务部门交流。我们尚未看到AI如何能够直接促进订单增长或提高客单价。然而，我们正在努力尝试一些内部方案，例如建立统一的知识库解决文档管理问题，并希望通过AI助理为员工提供支持，解答问题和提供培训。此外，AI助理还可以帮助员工管理日程安排和会议安排。我们需要解决老板和一线员工的痛点，以获得他们对AI工具开发和应用的支持和投资。我们还在探索如何在B端内部提高效能，包括建立知识库和提供个人助理功能，以解决员工面临的问题。</p><p>&nbsp;</p><p>尹会生：在公司太乙，我们正在开发具备三头六臂的机器人，涉及机械臂技术。为了实现高精度控制，我们选择了生成网络（如GAN）而非大型语言模型。现代的6轴或7轴机械臂可以达到0.5毫米的精度，而7轴机械臂可以接近0.001毫米的极限。这种高精度意味着机械臂能够平稳地滑动一个立方体，不留任何缝隙。</p><p>&nbsp;</p><p>我们正致力于逐步将精度提高到0.01毫米，但在过程中遇到了问题。自研机械臂需要调整大量参数，例如大臂的微小抖动会导致小臂产生较大位移。为解决这个问题，我们尝试使用虚幻引擎。选择虚幻引擎的原因是我们自行研发整个电机和驱动程序，而现有软件缺乏与物联网接口的兼容性。虚幻引擎能够构建更丰富的接口解决方案，相较于成型的试校软件更适用于我们的需求。</p><p>&nbsp;</p><p>我们的尝试是使用生成模型生成简单的机器人动作，并根据调整后的参数在负载下测试精度。我们不断尝试，例如通过将机器人放入计算机中进行加倍运行，来模拟长时间的实际使用情况，提效相当明显。</p><p>&nbsp;</p><p>Yolanda：实际上，早在2017年，大型模型的概念就已经存在，并且许多企业已经在积极开展相关工作。在这个探索过程中，我们可以看到，尤其是在企业级场景中，像华为的盘古大模型已经深入应用，只是他们并没有对外公开市场开拓的情况。他们在领域预测方面取得了显著进展，例如在台风预测领域，他们使用欧洲气象局的数据进行了多年的内部训练，其准确度已经远高于三年前的欧洲气象局数据。同样，在铁路局领域也有类似的情况。华为盘古大模型与郑州铁路局合作多年，在货运方面不断进行自我训练，有效解决了火车运行中可能出现的各种问题，从而降低了人力成本和精力投入。</p><p>&nbsp;</p><p>李阳：最近投资领域热议大模型和语言模型，但主要集中在美元机构，国内反应较少。投资大模型主要机会在百度、阿里、华为等巨头，其他机构比较难进入。我们关注垂直应用和高级模型，但存在风险，过去AI应用故事多，落地和盈利稳定性不高。现在大模型可能在吸引中游和尾部的投资机构，排名前20机构对此不太买账。</p><p>&nbsp;</p><p>杜瑞罡：我们早已对大模型表示关注，在2021年，广发与盘古合作开发财务造假识别模型，取得了出色的效果。这引发了我们对大模型应用的兴趣。我们计划按照几个步骤进行探索和实施，首先是调研阶段，我们正在进行大量的调研工作，包括投行领域的文档生成和新招股说明书、撰写的资产报告等。在此过程中，我们还在同时调研国内各大厂商的模型，虽然我们目前没有训练模型的能力，但我们计划进行合作共建，先引入现有模型，然后利用我们现有的数据将金融领域的知识注入其中，以打造一个真正能够成为行业基础的模型。</p><p>&nbsp;</p><p>我们的计划分为两步，首先是赋能阶段，通过取代那些不需要创造新脑力劳动的工作来推动数字化转型。我们拥有数千名线下员工，许多工作可以逐步被替代。我们正在推动头部知识产权和内容产出，尽管目前产出速度较慢，但通过提供工具和审核支持，我们相信可以大幅提高产出效率。此外，我们在营销方面也做了改进，通过上平台，我们可以丰富活动内容并加快速度；赋能之后是替代，未来我们计划在研发方面减少外包合作，并将更多精力投入到高价值的关系维护上，以提高效率。</p><p>&nbsp;</p><p></p><h5>哪些职业会被替代？</h5><p></p><p>&nbsp;</p><p>杨攀：在2月份的时候，我与江浙地区的一家公司进行了沟通，他们所从事的行业即将彻底被替代。这个行业是金华地区的一个小生意，每年圣诞节卖掉的圣诞树上挂的球约值5亿美元。这个行业主要依赖插画师，但插画师的生产不稳定，而且依赖于特定风格的人。这个行业的特点非常明显，很容易被人工智能图像生成和设计工具所取代。</p><p>&nbsp;</p><p>我们仔细分析为什么这个工作能够被完全替代，原因在于它不需要精确的输入对应精确的输出，而是需要经验来产生结果。我们需要对这份工作的属性进行分析，看是否存在需要经验产出的精确输入，这类工作可以被完全替代。另一方面，微软正在采取的策略是通过Copilot来实现一切事物的辅助。副驾驶的概念就是一个人处理个人租车事务的助手，至少从微软的定义来看，这个阶段的目标就可以实现。我们不需要完全替代谁，而是可以赋予他们能力。</p><p>&nbsp;</p><p>快刀：最近我们公司也在大量尝试使用AI进行绘画。在内部群组中，可以明显看到两种观点：设计师努力证明自己有价值，其他人则努力证明设计师没有用处。以前一个公司需要100个设计师，现在可能只需要5个。未来肯定是普通级别的设计师会被替代，各种插画师也会被取代。但顶尖设计师的地位稳固、稀缺。举个例子，上个月我一直找不到符合我要求的设计风格的设计师。我向朋友描述后，他给了一个艺术词汇，称其为哥特风格。我就是想要这种风格。他问我：你觉得AI能取代我吗？他说这种风格是他在教堂看到的。</p><p></p><h4>活动推荐：</h4><p></p><p>&nbsp;</p><p>2023 年 9 月 3 - 5 日，在北京·富力万丽酒店，<a href=\"https://qcon.infoq.cn/202309/beijing\"> QCon 全球软件开发大会（北京站）</a>\"已开启，现已开启售票，提前订票，可享受7折早鸟价，购票参会可以直接电话 / 微信联系票务经理 18514549229。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e2/e2cc6621bc634e6d3fcacee922604626.jpeg\" /></p><p></p>",
    "publish_time": "2023-06-05 11:13:23",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "给所有开发者朋友的一封邀请函：Microsoft Build 要来中国啦！",
    "url": "https://www.infoq.cn/article/wBvsXQTcojkiWS2Za9X1",
    "summary": "<p>现阶段，如果要问科技圈最火热的话题是什么？智能技术一定榜上有名。</p><p></p><p>随着智能技术的出现和发展，开发者也逐渐收获了更多的资源和机会，使其可以更快、更好地完成工作。但正如低代码的出现一样，业内有不少人认为开发者的工作逐渐会被这类自动化所取代，而在智能技术问世以后，我们发现这类声音似乎变得更加尖锐了......</p><p></p><p>实际上，随着创新技术的不断发展与迭代，开发者的工作不仅不会被取代，反而会将其从繁琐、重复的工作中释放出来。那么，对于身处新时代的开发者来说，如何才能借助智能技术更好地创造未来？</p><p></p><p>作为开发者的你，如果已经对上述问题产生了好奇，6 月 15 日 12:30，Microsoft Build 即将给你答案！</p><p></p><h2>Microsoft Build 亮点提前知</h2><p></p><p></p><p>火爆出圈的智能技术将成为 Microsoft Build 的主角，在这里，你将聆听微软大佬对 Microsoft 下一代智能技术的展望。本次 Microsoft Build 还将开设「第二直播间」，微软公司副总裁、微软大中华区首席运营官康容以及微软生态伙伴事业部首席技术官徐明强还将在 「第二直播间」 中，进一步分享智能技术的技术趋向。此外，开发者还可以在「第二直播间」与大咖们直接互动，解答技术问题。</p><p></p><p>为了给线上的开发者朋友提供亲临现场的参与感，本次 Microsoft Build 还特别策划了 「会前探展」，Bilibili 微软官方发言人“田老师”将搭档微软比特熊，在大会现场带你直播探展。想知道本场大会策划了哪些有意思的环节？本个环节不容错过～</p><p></p><p>在 IT 圈广为流传的一句话便是：“Talk is cheap，show me the code”。所以在本次大会中，除了干货满满的技术议题以外，Microsoft Build 还将汇集一众技术社区达人，进行一场代码对决战。如果你也想见证智能新时代的技术变革，欢迎一起围观这场精彩对决。</p><p></p><h2>报名通道已开启，即刻扫码抢位</h2><p></p><p></p><p>在智能产品和技术备受关注的当下，开发者更需顺势而为，紧跟时代脚步。如果你对 Microsoft Build 感兴趣，欢迎扫码或<a href=\"https://aka.ms/BuildLocalInfoQ\">点击链接</a>\"注册～我们一同「Build · 未来」！</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/52/524507f7683fbc83028703dee005a390.png\" /></p><p></p>",
    "publish_time": "2023-06-05 11:24:43",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "数据库内核杂谈（三十三）- 向量数据库（1）",
    "url": "https://www.infoq.cn/article/MkmOCQKwKm0Rmakm4WIO",
    "summary": "<p>欢迎阅读新一期的数据库内核杂谈。近期，一类新型的数据库，vector database （或者vector-based database，向量数据库）火了，比如Pinecone （<a href=\"https://www.pinecone.io/\">https://www.pinecone.io/</a>\"，Pinecone最近还完成一笔新的融资：<a href=\"https://techcrunch.com/2023/04/27/pinecone-drops-100m-investment-on-750m-valuation-as-vector-database-demand-grows\">https://techcrunch.com/2023/04/27/pinecone-drops-100m-investment-on-750m-valuation-as-vector-database-demand-grows</a>\"）。也不乏一些关系型数据库往向量数据库转型或提供vector相关功能（如SingleStoreDB：<a href=\"https://www.singlestore.com/blog/using-singlestoredb-as-a-vector-database-for-qa-chatbots/\">https://www.singlestore.com/blog/using-singlestoredb-as-a-vector-database-for-qa-chatbots/</a>\"）。受到关注的原因就是向量数据库对于AI和机器学习系统，特别是在这波大模型热潮中，可以发挥非常重要的作用。对于LLM（large language model）应用，通常文本会被转换成向量vector embedding（VE）来存储。向量数据库就是专门用来存储这类语义向量，并提供针对VE的高效查询操作。内核杂谈也紧跟潮流，开启一个新系列，让我们一起来学习向量数据库vector database吧。</p><p>&nbsp;</p><p></p><h1>什么是Vector Embedding（VE）</h1><p></p><p></p><p>典型的数据应用场景下，我们会使用关系型数据库用结构化的数据来存储和描述一个对象实体。比如，我们可以用一张student表（id, name, class, ...）来描述学生实体。在人工智能，或者机器学习领域，要处理的对象的property（对应到关系型数据库中的column）会非常多且复杂。举个例子，我们希望构建一个预测模型来预测一个房子的房价，要考量的因素就很多了：地区，建筑年份，大小，房间数，周围环境等。在机器学习领域，构建对象的property叫做特征工程，feature engineeirng（插一句题外话，特征工程是影响模型准确性很关键的factor，不亚于对模型本身的改造）。但对于一些非结构化数据，比如自然语言处理中的文本、视觉的图片、视频或者音频，就很难做人工feature engineering，更别说再转换成结构化的column形式了。</p><p>&nbsp;</p><p>于是，科学家们发明了Embedding，将一个对象表达成一个N维的向量（[0.3, 0.2, 4.3, ...]）。从人工智能领域的门外汉角度，我来试着解释一下这个N维向量是如何生成的，以及为什么这个N维向量就可以是这个对象的feature engineering。</p><p>&nbsp;</p><p>在一个典型的深度神经网络里，前置的神经网络通常用来学习低维度的feature，随着神经网络layer的深入，不断把低维度的feature组合起来，形成更高维度的feature。最终，神经网络通常将某个数据归类到某个output（比如一个classification分类模型）。神经网络的最后一层layer通常是全连接层或者softmax层，将高维信息映射到最终的分类结果。而Embedding的计算逻辑就是，把这最后一层敲掉（chop off），直接输出倒数第二层的output，得到的结果就是一个N维的向量。所以，这边的N是被定义的（取决于模型的倒数第二层）。举个例子，常见的Word2Vec的embedding size在200到300，如果你用最新的OpenAI的embedding API（模型是text-embedding-ada-002），输出的embedding size是1536。但这1536个维度，每个维度分别代表什么含义，是不具备解释性的。或者说，每个维度不能用人类的理解来解释，但对机器和这个模型是有意义的。用机器学习的术语，就是将对象投射到一个低维度的空间（虽然，我觉得1536看着像一个高维空间，感觉越说越像三体）。</p><p>&nbsp;</p><p>那这个VE计算出来有什么用呢？ 首先，它提供了一个复杂对象的数学表达形式（N维向量），且这个向量记录了这个对象的高维语义信息。这句话解释起来就有些抽象了：不同对象的语义相似度，可以对应到这两个向量在向量空间的相似度。一图胜千言，用下面这张图来解释一下。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/51/51f4fa8ea65439ad0249e076111cadb9.png\" /></p><p></p><p>首先，这是一个高维的VE（我们只是画在二维平面上）。两个向量的距离，比如a little boy is walking和a sad boy is walking，这个距离和另一对向量，look how sad my cat is, 和look at my little cat的距离应该是非常接近。这就是语义相似度。另一个很常见的例子是，国王和王后的距离与男人和女人的距离非常接近。常见的向量的相似度计算方法是Cosine Similarity余弦相似度（<a href=\"https://en.wikipedia.org/wiki/Cosine_similarity\">https://en.wikipedia.org/wiki/Cosine_similarity</a>\"）。</p><p></p><p>读者可能会问，好神奇啊，为什么这个向量就能包含语义信息，且能体现不同对象的相似度呢？因为，这是一个后验事实：这个神经网络是用了大量被label过的数据训练以后得到的结果。即，这个分类模型，经过大量数据训练，预测结果已经很准确了。那去掉最后分类层的embedding也可以被认为是保留了高纬度的语义信息。即，如果语义信息没有被保留，那分类结果就不会这么准确。</p><p>&nbsp;</p><p></p><h1>Embedding的实际应用</h1><p></p><p></p><p>如上段所示，VE提供了一种机器能够理解和处理的方式来描述原本非常复杂的对象。并且，VE保留了高维度的语义信息：不同的对象投影在一个向量空间里面，就可以通过数学计算来找到相似性，similarity search（如上述示例所示）。实际情况中，绝大部分的应用都是基于寻找相似性的。下面是一些常见的应用介绍：</p><p>&nbsp;</p><p>1）推荐系统：推荐系统可以将用户和购买的物品都生成VE，并通过相似性来推荐新物品。</p><p>2）搜索系统：搜索和推荐类似，可以将查询生成VE，再去通过VE搜索相似的结果。</p><p>3）异常检测：VE可以用于检测数据中的异常模式或异常点。例如，在信用卡欺诈检测中，每个交易都可以用VE来描述。与正常交易明显不同的交易可能被标记为欺诈行为。</p><p>4）自然语言理解和语音识别：在Google翻译，或者语音助手（SIRI，Alexa等），文本和文字音频都是通过VE的形式输入到系统中做语义理解。相关应用有：机器翻译、情感分析、命名对象识别等。我自己通过OpenAI的embedding做了情感分析（sentiment analysis)：给一个评价（比如针对某个产品或者餐厅），判断是好评还是差评，下文会给出demo代码。</p><p>&nbsp;</p><p></p><h1>Play With Embedding</h1><p></p><p></p><p>接下来，咱们实操一下如何使用embedding。下面是我基于OpenAI的Embedding API（<a href=\"https://platform.openai.com/docs/guides/embeddings\">https://platform.openai.com/docs/guides/embeddings</a>\"）写的demo代码。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/bd/bdd95e8091ce27dcb89129782b8f3410.png\" /></p><p></p><p>代码非常简单，我们通过调用OpenAI的get_embedding方法获得文本\"The food is awesome!\"的embedding，并打印结果。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/76/76ec1bed64488b6468c46292c5ec4328.png\" /></p><p></p><p>可以看到，OpenAI的embedding size是1536，也试着打印出来一部分vector，虽然这部分的vector不具备任何解释性。</p><p></p><p>接下来，我们用embedding来做sentiment analysis（情感分析）。我的做法比较粗糙：首先创建两个anchor embedding来代表positive review和negative review；给定一个具体的review，分别求这个review embedding和上面两个embedding的cosine similarity再做差值。按照cosine similarity, 如果两个embedding的夹角更小（更相似），它们的值应该更接近1，也更大。因此，分别求出和positive embedding和negative embedding的值后相减，如果&gt;0就是positive的，反之这是negative的。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e6/e65e1baefa22e9856ca55033af3d4f69.png\" /></p><p></p><p>这段代码的输出如下：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/04/04a108c81c86f4d3bd46075493c22bef.png\" /></p><p></p><p>可以看到\"the food is awesome here\"的得分是正值，而\"I don't like the food here\"是负值。当然，我觉得，这边的anchor可以选两个更好的锚定embedding，结果应该会更好。</p><p>&nbsp;</p><p></p><h1>总结&amp;预告</h1><p></p><p></p><p>咱们花了一整期介绍什么是vector embedding，以及为什么需要vector embedding。有了这些背景，终于可以引出为什么需要vector database（向量数据库）了。向量数据库旨在提供一种原生的，更高效的对vector embedding的使用（无论是从存储，或者是查询的角度）。相比于传统的关系型数据库，向量数据库的挑战在于，如何能够存储下成千上亿个VE，并提供类似于相似度查询，聚类查询等基于VE的操作，同时，也需要具备典型数据库的功能。下一期，我们继续。感谢阅读！</p><p>&nbsp;</p><p></p><h1>内核杂谈微信群和知识星球</h1><p></p><p></p><p>如果觉得有收获，也愿意请我喝杯咖啡的话，可以在爱发电平台打赏我！</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/36/36c77ffaa6b1f335e3548176236cbac9.png\" /></p><p></p><p>目前我有全职工作，求打赏完全是出于可以让我分泌更多的多巴胺（任何非工作收入都算天降之财！）。重要的话说三遍：请完全出于自愿打赏（如果你是学生，请务必不要打赏）！请完全出于自愿打赏（如果你是学生，请务必不要打赏）！请完全出于自愿打赏（如果你是学生，请务必不要打赏）！</p><p>&nbsp;</p><p>内核杂谈有个微信群，大家会在上面讨论数据库相关话题。目前群人数超过400人啦，所以不能分享群名片加入。可以添加我的微信（zhongxiangu）或者是内核杂谈编辑的微信（wyp_34358），请备注：内核杂谈。</p><p>&nbsp;</p><p>除了数据库内核的专题blog，我还会push自己分享每天看到的有趣的IT新闻，放在我的知识星球里（免费的，为爱发电），欢迎加入。</p><p></p><p><img src=\"https://uploader.shimo.im/f/5cKrf6PcDS1EMVIw.png!thumbnail?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU5MzY5OTEsImZpbGVHVUlEIjoicnAzT012em1sREhOV2VrbSIsImlhdCI6MTY4NTkzNjY5MSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NjM1Mzc3OX0.wRU1p_VOiaq1VygGT1VoBzXmsbs0VyPkhoVlw3Ckes8\" /></p><p></p>",
    "publish_time": "2023-06-05 12:14:37",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "一个简单的代码拼写错误导致17个生产数据库被删！微软Azure DevOps宕机10小时始末",
    "url": "https://www.infoq.cn/article/9ZxYXzwUeflmIXgmWmfL",
    "summary": "<p></p><blockquote>由于低级错误，本该清理数据库快照的修复代码却删掉了整个服务器。</blockquote><p></p><p></p><h2>一个拼写错误致微软Azure DevOps宕机10小时</h2><p></p><p></p><p>微软<a href=\"https://www.infoq.cn/article/2016/02/Azure-Stack-Update\">Azure DevOps</a>\"是一套应用程序生命周期服务。5月24日，Azure DevOps在巴西南部（SBR）区域内一处scale-unit（微软Azure部署架构中最小的容量单元）设施发生宕机，宕机持续了10个小时。</p><p></p><p>近日，微软首席软件工程经理 Eric Mattingly对宕机事件表达歉意并透露了宕机原因：一个简单的拼写错误，致使17个生产数据库遭到删除。</p><p></p><p>Mattingly解释道，Azure DevOps工程师偶尔会保存生产数据库的快照，据此调查上报的问题或测试性能改进方向。为了清理这些快照数据库，会有专门的后台作业每天运行，并在快照超过一定期限后将其删除。</p><p></p><p>在最近的一波冲刺（敏捷上下文中的小组项目，编号为Sprint 222）中，Azure DevOps工程师执行了代码升级，想要用受支持的Azure.ResourceManager.* NuGet包替换掉已被弃用的Microsoft.Azure.Managment.*包。</p><p></p><p>这对应着一条巨大的pull request变更请求，会将旧包中的API调用替换为新包中的API调用。引发此次事件的拼写错误就出现在pull request内，导致后台快照删除作业删掉了整个服务器。</p><p></p><p>Mattingly表示，“这条pull request中的快照删除作业里隐藏着一条拼写错误，它会删除Azure SQL数据库调用，并替换成删除托管数据库的Azure SQL Server调用。”</p><p></p><p>Azure DevOps工程师使用安全部署实践（SDP）将Sprint 222部署到了Ring 0（微软内部Azure DevOps组织），这里不存在快照数据库，所以删除作业不会执行。在Ring 0测试几天之后，Azure DevOps工程师又将其部署至Ring 1，也就是在此期间巴西南部的scale-unit设施受到了影响。快照数据库的存在时间触发了这项bug，该作业在删除Azure SQL Server的同时，还删掉了scale-unit设施中所有17个生产数据库。从这时起，Azure DevOps的scale-unit无法处理任何客户流量。</p><p></p><p>据Mattingly介绍，此次宕机事件并未引发数据丢失。为了防止问题再次发生，Mattingly 称微软已经采取了各种修复和重新配置措施，并向所有受此中断影响的客户道歉。</p><p></p><h2>为什么耗时10小时才完成恢复？</h2><p></p><p></p><p>据了解，Azure DevOps是有检测此类问题的测试的。但根据Mattingly的介绍，“之所以以往没有发现，是因为这部分代码的运行条件非常罕见，我们的测试并没有切实覆盖这些极端情况。”有推测认为，这种极端条件要求删除脚本捕捉到特别陈旧的数据库快照。</p><p></p><p>虽然目前数据已经全部恢复，但整个宕机前后耗时10多个小时，为什么这么久才完成修复？Mattingly对此做出了解释说明：“我们在数据库被删除后的20分钟内检测到宕机，值班工程师立即参与修复。在快速理解问题来源之后，我们开始恢复SQL Server及所有数据库，并禁用了快照删除作业以防止该bug影响到其他客户。但由于问题数量较多，因此恢复时间也相对较长。”</p><p></p><p>首先，客户无法自行恢复Azure SQL Server，因此必须由Azure SQL团队参与恢复工作。确定需要Azure SQL值班工程师介入，接洽实际情况和问题，再加上服务器的实际恢复大约耗费了1个小时。</p><p></p><p>其次，所有数据库均配置有备份冗余，但部分数据库的创建时间早于区域冗余备份的上线时间。在恢复数据库时，Azure DevOps为所有数据库选择了Geo-zone-redundant，导致一部分还原数据按照此前配置的Zone-redundant备份被复制到了配对区域。这种匹配冲突又让恢复过程延长了好几个小时。对于这个问题，Azure DevOps将确保所有数据库备份均按Azure区域支持被配置为Geo-zone-redundant，使其覆盖Azure DevOps中的所有scale-unit。</p><p></p><p>最后，在数据库开始恢复上线之后，由于Azure DevOps的Web服务器出现了一系列复杂问题，尽管数据库内容已经完成还原，客户也仍然无法访问整个scale-unit设施。</p><p></p><p>这个问题源自服务器的预热任务，该任务会通过测试调用遍历可用的数据库列表。但恢复过程中数据库招聘了一项错误，导致预热测试“执行指数级退避重试，令预热耗时由正常情况下的不到一秒延长到了平均90分钟。”</p><p></p><p>更复杂的是，整个恢复过程是交错进行的，一旦其中一、两台服务器重新开始接收客户流量，就会因过载而再次宕机。最终，工程师在只能阻断所有流向巴西南部scale-unit的流量，确保一切准备就绪再重新加入负载均衡器并处理流量。</p><p></p><h2>如何避免此类问题再次发生？</h2><p></p><p></p><p>目前，Azure DevOps已经修复了快照删除作业中的bug，并为快照删除作业创建了新的测试，面向真实Azure资源充分反映快照数据库的删除场景。</p><p></p><p>Mattingly 表示，Azure DevOps正着手为关键资源添加Azure资源管理器锁，借此防止意外删除。同时，确保所有Azure SQL数据库备份均被配置为Geo-zone-redundant形式，并受到Azure区域的支持；确保未来的所有快照数据库，只会被创建在不同于生产数据库的Azure SQL Server实例之上。</p><p></p><p>此外，还会修复Web服务器预热任务的逻辑，确保即使数据库处于脱机状态时也能成功启动。并创建新的cmdlet来恢复已被删除的数据库，确保恢复结果使用与被删除前相同的设置（包括备份冗余）。</p><p></p><p>参考链接：</p><p><a href=\"https://status.dev.azure.com/_event/392143683/post-mortem\">https://status.dev.azure.com/_event/392143683/post-mortem</a>\"</p><p><a href=\"https://www.theregister.com/2023/06/03/microsoft_azure_outage_brazil/\">https://www.theregister.com/2023/06/03/microsoft_azure_outage_brazil/</a>\"</p>",
    "publish_time": "2023-06-05 14:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]