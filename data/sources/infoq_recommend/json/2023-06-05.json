[
  {
    "title": "全栈TypeScript CRUD框架 Remult",
    "url": "https://www.infoq.cn/article/iTzqoUwS31XXsXIbkZE8",
    "summary": "<p>Remult是一个全栈CRUD库，它利用TypeScript模型来简化开发，并提供了类型安全的API客户端和查询构建器。</p><p>&nbsp;</p><p>在软件开发中，为了确保系统功能正常，必须管理和同步两个数据模型：服务器模型和客户端模型。服务器模型指定数据库结构和API，而客户端模型定义API的传入传出数据。</p><p>&nbsp;</p><p>然而，维护单独的模型集和验证器可能会导致冗余，增加维护开销，以及模型不同步时出错的可能性。</p><p>&nbsp;</p><p>Remult通过提供一个集成模型来解决这个问题。该模型定义了数据库模式，暴露了简单的CRUD API，并支持客户端集成，使开发人员能够轻松地查询数据库，并且可以确保类型安全。</p><p>&nbsp;</p><p></p><h3>定义实体</h3><p></p><p></p><p>Remult使用装饰器将基本的JavaScript类转换为Remult实体。开发人员可以向类中添加Entity装饰器，并对每个属性应用相关的字段装饰器，从而轻松地完成这项工作。</p><p>&nbsp;</p><p>使用装饰器，Remult简化了创建实体及相关字段的过程，提高了开发人员的高效。</p><p><code lang=\"typescript\">import { Entity, Fields } from \"remult\"\n\n\n@Entity(\"contacts\", {\n  allowApiCrud: true\n})\n\n\nexport class Contact {\n  @Fields.autoIncrement()\n  id = 0\n  @Fields.string()\n  name = \"\"\n  @Fields.string()\n  number = \"\"\n}</code></p><p>&nbsp;</p><p></p><h3>服务器端设置</h3><p></p><p></p><p>要开始使用Remult，请将其与所选服务器上必要的实体一起注册。</p><p>&nbsp;</p><p>幸运的是，Remult针对几个流行的服务器框架提供了开箱即用的集成，包括Express、Fastify、Next.js、Nest和Koa。</p><p><code lang=\"typescript\">import express from \"express\";\nimport { remultExpress } from \"remult/remult-express\";\nimport Contact from \"../shared/Contact.ts\";\n\n\nconst app = express();\n\n\napp.use(\n  remultExpress({\n    entities: [\n      Contact\n    ]\n  })\n);</code></p><p>&nbsp;</p><p></p><h3>客户端集成</h3><p></p><p>配置完后端和实体后，下一步是将Remult与应用程序的前端集成。</p><p>&nbsp;</p><p>幸运的是，Remult的客户端集成被设计成库无关的。也就是说，它可以使用浏览器fetch功能或Axios进行操作。</p><p>&nbsp;</p><p>为了说明这一点，请看下面的例子：</p><p></p><p><code lang=\"typescript\">import { useEffect, useState } from \"react\"\n\n\nimport { remult } from \"remult\"\nimport { Contact } from \"./shared/Contact\"\nconst contactsRepo = remult.repo(Contact)\n\n\nexport default function App() {\n  const [contacts, setContacts] = useState([])\n\n\n  useEffect(() =&gt; {\n    contactsRepo.find().then(setContact)\n  }, [])\n\n\n  return (\n    </code></p><div><code lang=\"typescript\">\n      <h1>Contacts</h1>\n      <ul>\n        {contacts.map(contact =&gt; {\n          return (\n            <div>\n              {contact.name} | {contact.phone}\n            </div>\n          )\n        })}\n      </ul>\n    </code></div><code lang=\"typescript\">\n  )\n}</code><p></p><p>&nbsp;</p><p>从这个例子可以看出，将Remult集成到应用程序前端非常简单、灵活。然后，开发人员就可以在整个栈中无缝地利用Remult的强大功能了。</p><p>&nbsp;</p><p>Remult是遵循<a href=\"https://github.com/remult/remult/blob/master/LICENSE\">MIT许可</a>\"的开源软件。欢迎通过Remult <a href=\"https://github.com/remult/remult\">GitHub存储库</a>\"做贡献。</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/05/remult-crud-typescript/\">https://www.infoq.com/news/2023/05/remult-crud-typescript/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/dDXbcLHT7teNYSPL3sm7\">“TypeScript不值得！”前端框架Svelte作者宣布重构代码，反向迁移到JavaScript引争议</a>\"</p><p><a href=\"https://www.infoq.cn/article/SZZal8JbzaFq1O9YejCy\">三年回顾：JavaScript与TypeScript最新特性汇总</a>\"</p><p><a href=\"https://www.infoq.cn/article/wyGETHGV7BlRRkhIzcIF\">TypeScript 5.0 现已发布：全新的装饰器，速度、内存和包大小优化</a>\"</p>",
    "publish_time": "2023-06-05 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Visual Studio 2022 v17.6的第二个预览版本：效率提升、游戏开发和企业级管理",
    "url": "https://www.infoq.cn/article/wltEH9kJKZzQ1N0mAG4T",
    "summary": "<p>微软发布了<a href=\"https://visualstudio.microsoft.com/vs/preview/\">Visual Studio 2022 v17.6的第二个预览版</a>\"，其中包含了新的生产效率特性和功能改进，以增强游戏开发体验、移动开发和企业级管理，目前该版本已可以进行下载。</p><p></p><p>第二个预览版本为Visual Studio 2022带来了多个新特性，以提升开发人员的生产效率。开发团队回应了客户的反馈，推出了Git Stage和Commit During Build，允许用户在构建过程中暂存变更和提交。</p><p></p><p>Merge Dialog也进行了更新，让用户能够更好地观察合并操作的影响，并警告他们潜在的冲突。<a href=\"https://devblogs.microsoft.com/visualstudio/streamlining-your-debugging-process-with-breakpoint-groups/\">断点组的引入</a>\"能够让用户更好地组织其调试过程，面向C++的<a href=\"https://learn.microsoft.com/en-us/visualstudio/profiling/instrumentation-overview?view=vs-2022\">Instrumentation Profiling</a>\"为该编程语言提供了性能分析。除此之外，Create Member Function特性为C++提供了快捷方式来生成构造函数和相等操作符，这需要使用代码编辑器内的三个点和螺丝刀图标。</p><p></p><p>Visual Studio 17.6的第二个预览版本致力于为独立和AAA游戏创作者简化游戏开发。其中的改进包括集成<a href=\"https://docs.unrealengine.com/5.1/en-US/unreal-header-tool-for-unreal-engine/\">Unreal Engine Code Analysis</a>\"，它能够让用户直接在Visual Studio中看到来自Unreal Header Tool的警告和错误。该特性会在解析Unreal相关的C++头信息时发出警告和错误，这些警告和错误会显示在Error List中，并且在编辑器中以紫色的斜线直观地标记出来。</p><p></p><p>此外，由Tim Jones开发的、流行的<a href=\"https://github.com/tgjones/HlslTools\">HLSL Tools扩展</a>\"现在可以作为Visual Studio的一部分来使用，通过语法高亮、语句补全和跳转至定义处，它能够为用户提供更好的生产力。要使用HLSL工具，用户必须在Visual Studio Installer的Game development with C++或Game development with Unity启用该组件。</p><p></p><p>关于.NET移动开发，借助新的<a href=\"https://aka.ms/android/manifest\">Android Manifest Editor</a>\"，开发人员可以通过双击Solution Explorer中的AndroidManifest.xml文件，便利地设置可用的属性并请求设备的特定权限。这一特性有望简化安卓应用的开发过程，节省开发人员的时间和精力。</p><p></p><p>关于企业级管理，在最近的更新中，引入了两项新的特性。其中一个特性允许企业在文件共享之外，在企业内部网络中<a href=\"https://developercommunity.visualstudio.com/t/Host-Visual-Studio-layouts-on-a-webserve/10309488?beforeInstall=true\">托管和部署Visual Studio布局</a>\"。该选项可以简化布局维护，并提高使用多个全球网络文件进行共享的企业的安装性能。这项特性目前针对的是IT管理人员的远程部署，用户可以访问<a href=\"https://developercommunity.visualstudio.com/t/Host-Visual-Studio-layouts-on-a-webserve/10309488?beforeInstall=true\">反馈网站</a>\"，查看如何启用该功能体验的指导文档。</p><p></p><p>另外一个特性解决了在Installer中限制可用产品的需求。Installer的Available的Tab页现在可以很方便地访问当前预览，同时提供了通过禁用通道或使用新的HideAvailableTab策略禁用整个可用Tab页，达到限制特定产品的能力。</p><p></p><p>在版本发布的原始博客文章中，微软和开发团队最后<a href=\"https://developercommunity.visualstudio.com/home\">鼓励用户提供反馈</a>\"，并分享对新特性和改进的建议，强调他们正在持续增强Visual Studio的体验。</p><p></p><p>最后，有兴趣了解关于这个版本和其他版本的Visual Studio的开发人员可以访问关于Visual Studio 2022 IDE更新、变化和新功能的<a href=\"https://learn.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview\">详尽发布说明</a>\"。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/04/vs2022-v17-6-preview-2/\">Visual Studio 2022 v17.6 Preview 2: Productivity, Game Development and Enterprise Management</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/9sLcjI1YY9TAvmKjtUmo\">微软发布Visual Studio Extensibility SDK Preview 3</a>\"</p><p><a href=\"https://www.infoq.cn/article/m0CAVYPmFNZd76swapsu\">InfoQ专访Leslie Richardson及其团队：Visual Studio 2022发布，新功能与改进</a>\"</p>",
    "publish_time": "2023-06-05 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "AIGC浪潮下，企业研发探索持续创新 ｜QCon闭门会",
    "url": "https://www.infoq.cn/article/EMqUNaySjj3G8UAmHCoE",
    "summary": "<p>在5月26日，<a href=\"https://qcon.infoq.cn/2023/guangzhou/schedule\">QCon全球开发者大会（广州站）</a>\"顺利落地，在现场，InfoQ 特别策划了五场闭门会，主题分别为《企业在 LLM、AIGC 浪潮下的研发探索》《<a href=\"https://www.infoq.cn/article/4uHEPy7XI5ORkaTTiZXN\">DevOps vs 平台工程，必要性和 ROI 探讨</a>\"》《<a href=\"https://www.infoq.cn/article/ShUXt8wQpm9Zc17dXxDg\">破解成本优化后的稳定性问题</a>\"》《业务出海之架构、合规、运营》《<a href=\"https://www.infoq.cn/article/2SKxCHfga7XBmatYS0oW\">金融行业数据治理经验分享</a>\"》，本文为《企业在 LLM、AIGC 浪潮下的研发探索》研讨纪要整理～</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/80/808360ea04b9dc64747f84296c3b3b43.jpeg\" /></p><p></p><p></p><h4>参与嘉宾：（排名不分先后）</h4><p></p><p>主持人：杨攀&nbsp;极客邦科技副总裁、TGO&nbsp;鲲鹏会总经理</p><p>尹会生，珠海太乙人工智能技术合伙人刘熙，科大讯飞&nbsp;架构师Eddie&nbsp;lee，渣打银行&nbsp;Chief&nbsp;Architect杜玉杰，开放城市共同体发起人、天使投资人&nbsp;张晗，阳光保险科技研究院副院长&nbsp;李阳，海松资本&nbsp;快刀，得到&nbsp;CTO&nbsp;杜瑞罡，广发证券研发总监江南白衣&nbsp;唯品会资深架构师李翔，惟客数据AI算法专家</p><p>&nbsp;</p><p></p><h4>研讨话题：</h4><p></p><p>你的企业有在探索LLM、AIGC落地吗？目前是什么阶段了？在落地的过程中，有什么难点？目前LLM、AIGC真的帮你提效了吗？</p><p>&nbsp;</p><p></p><h4>精彩观点摘要：</h4><p></p><p>&nbsp;</p><p>快刀：现在AI非常火，许多团队预期非常高，我们应该适当降低预期。我们曾做过一个项目，失败了，那个时候机器理解无法作到像现在这样智能。目前在得到，通过大模型的使用可以提升电子书上架效率，原来10个人，每天仅仅能够上线200本书，现在一天可以上线1万本书，自动化测试可以每天测5000本书。他提到内部提效的东西相对较为容易可以做出来。</p><p>&nbsp;</p><p>张晗：小创新大厂赢，大创新小厂赢，AIGC 类型的革命性创新，对于小厂来说是巨大的机会，阳光保险的董事长对于AIGC比较焦虑，推动大家认识大模型的能力。不过，他也表示像销售的对话这类数据，无法提供到大模型的，这会涉及到数据安全问题，所以必须自研。但是现在的显卡非常紧俏，必须提前储备。目前公司AIGC 实践正在做一个传统销售的机器人，投产开发到第二期了。</p><p>&nbsp;</p><p>Eddie&nbsp;lee：银行还是一个比较高度监管的环境，所以我们这边也不敢说随便就上AIGC，在集团里边，我们也会有很多不同的监管机构，像英国的监管机构，香港监管局，包括新加坡那边看 AI 也看得蛮紧的。另外之前大家看很多笑话就说 ChatGPT 可能有一些就是歧视的成分在里面，这我们肯定要选的时候肯定需要小心，特别是对客人的时候会不会有一些歧视的成分，会不会对长者有一些偏见等等，目前正在小范围探索。</p><p>&nbsp;</p><p>汤海涛：麦当劳与互联网公司不同，我们的技术团队既充当与外部供应商的甲方沟通的角色，又以乙方身份与内部同事和业务部门交流。我们尚未看到AI如何能够直接促进订单增长或提高客单价。然而，我们正在努力尝试一些内部方案，例如建立统一的知识库解决文档管理问题，并希望通过AI助理为员工提供支持，解答问题和提供培训。此外，AI助理还可以帮助员工管理日程安排和会议安排。我们需要解决老板和一线员工的痛点，以获得他们对AI工具开发和应用的支持和投资。我们还在探索如何在B端内部提高效能，包括建立知识库和提供个人助理功能，以解决员工面临的问题。</p><p>&nbsp;</p><p>尹会生：在公司太乙，我们正在开发具备三头六臂的机器人，涉及机械臂技术。为了实现高精度控制，我们选择了生成网络（如GAN）而非大型语言模型。现代的6轴或7轴机械臂可以达到0.5毫米的精度，而7轴机械臂可以接近0.001毫米的极限。这种高精度意味着机械臂能够平稳地滑动一个立方体，不留任何缝隙。</p><p>&nbsp;</p><p>我们正致力于逐步将精度提高到0.01毫米，但在过程中遇到了问题。自研机械臂需要调整大量参数，例如大臂的微小抖动会导致小臂产生较大位移。为解决这个问题，我们尝试使用虚幻引擎。选择虚幻引擎的原因是我们自行研发整个电机和驱动程序，而现有软件缺乏与物联网接口的兼容性。虚幻引擎能够构建更丰富的接口解决方案，相较于成型的试校软件更适用于我们的需求。</p><p>&nbsp;</p><p>我们的尝试是使用生成模型生成简单的机器人动作，并根据调整后的参数在负载下测试精度。我们不断尝试，例如通过将机器人放入计算机中进行加倍运行，来模拟长时间的实际使用情况，提效相当明显。</p><p>&nbsp;</p><p>Yolanda：实际上，早在2017年，大型模型的概念就已经存在，并且许多企业已经在积极开展相关工作。在这个探索过程中，我们可以看到，尤其是在企业级场景中，像华为的盘古大模型已经深入应用，只是他们并没有对外公开市场开拓的情况。他们在领域预测方面取得了显著进展，例如在台风预测领域，他们使用欧洲气象局的数据进行了多年的内部训练，其准确度已经远高于三年前的欧洲气象局数据。同样，在铁路局领域也有类似的情况。华为盘古大模型与郑州铁路局合作多年，在货运方面不断进行自我训练，有效解决了火车运行中可能出现的各种问题，从而降低了人力成本和精力投入。</p><p>&nbsp;</p><p>李阳：最近投资领域热议大模型和语言模型，但主要集中在美元机构，国内反应较少。投资大模型主要机会在百度、阿里、华为等巨头，其他机构比较难进入。我们关注垂直应用和高级模型，但存在风险，过去AI应用故事多，落地和盈利稳定性不高。现在大模型可能在吸引中游和尾部的投资机构，排名前20机构对此不太买账。</p><p>&nbsp;</p><p>杜瑞罡：我们早已对大模型表示关注，在2021年，广发与盘古合作开发财务造假识别模型，取得了出色的效果。这引发了我们对大模型应用的兴趣。我们计划按照几个步骤进行探索和实施，首先是调研阶段，我们正在进行大量的调研工作，包括投行领域的文档生成和新招股说明书、撰写的资产报告等。在此过程中，我们还在同时调研国内各大厂商的模型，虽然我们目前没有训练模型的能力，但我们计划进行合作共建，先引入现有模型，然后利用我们现有的数据将金融领域的知识注入其中，以打造一个真正能够成为行业基础的模型。</p><p>&nbsp;</p><p>我们的计划分为两步，首先是赋能阶段，通过取代那些不需要创造新脑力劳动的工作来推动数字化转型。我们拥有数千名线下员工，许多工作可以逐步被替代。我们正在推动头部知识产权和内容产出，尽管目前产出速度较慢，但通过提供工具和审核支持，我们相信可以大幅提高产出效率。此外，我们在营销方面也做了改进，通过上平台，我们可以丰富活动内容并加快速度；赋能之后是替代，未来我们计划在研发方面减少外包合作，并将更多精力投入到高价值的关系维护上，以提高效率。</p><p>&nbsp;</p><p></p><h5>哪些职业会被替代？</h5><p></p><p>&nbsp;</p><p>杨攀：在2月份的时候，我与江浙地区的一家公司进行了沟通，他们所从事的行业即将彻底被替代。这个行业是金华地区的一个小生意，每年圣诞节卖掉的圣诞树上挂的球约值5亿美元。这个行业主要依赖插画师，但插画师的生产不稳定，而且依赖于特定风格的人。这个行业的特点非常明显，很容易被人工智能图像生成和设计工具所取代。</p><p>&nbsp;</p><p>我们仔细分析为什么这个工作能够被完全替代，原因在于它不需要精确的输入对应精确的输出，而是需要经验来产生结果。我们需要对这份工作的属性进行分析，看是否存在需要经验产出的精确输入，这类工作可以被完全替代。另一方面，微软正在采取的策略是通过Copilot来实现一切事物的辅助。副驾驶的概念就是一个人处理个人租车事务的助手，至少从微软的定义来看，这个阶段的目标就可以实现。我们不需要完全替代谁，而是可以赋予他们能力。</p><p>&nbsp;</p><p>快刀：最近我们公司也在大量尝试使用AI进行绘画。在内部群组中，可以明显看到两种观点：设计师努力证明自己有价值，其他人则努力证明设计师没有用处。以前一个公司需要100个设计师，现在可能只需要5个。未来肯定是普通级别的设计师会被替代，各种插画师也会被取代。但顶尖设计师的地位稳固、稀缺。举个例子，上个月我一直找不到符合我要求的设计风格的设计师。我向朋友描述后，他给了一个艺术词汇，称其为哥特风格。我就是想要这种风格。他问我：你觉得AI能取代我吗？他说这种风格是他在教堂看到的。</p><p></p><h4>活动推荐：</h4><p></p><p>&nbsp;</p><p>2023 年 9 月 3 - 5 日，在北京·富力万丽酒店，<a href=\"https://qcon.infoq.cn/202309/beijing\"> QCon 全球软件开发大会（北京站）</a>\"已开启，现已开启售票，提前订票，可享受7折早鸟价，购票参会可以直接电话 / 微信联系票务经理 18514549229。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e2/e2cc6621bc634e6d3fcacee922604626.jpeg\" /></p><p></p>",
    "publish_time": "2023-06-05 11:13:23",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "给所有开发者朋友的一封邀请函：Microsoft Build 要来中国啦！",
    "url": "https://www.infoq.cn/article/wBvsXQTcojkiWS2Za9X1",
    "summary": "<p>现阶段，如果要问科技圈最火热的话题是什么？智能技术一定榜上有名。</p><p></p><p>随着智能技术的出现和发展，开发者也逐渐收获了更多的资源和机会，使其可以更快、更好地完成工作。但正如低代码的出现一样，业内有不少人认为开发者的工作逐渐会被这类自动化所取代，而在智能技术问世以后，我们发现这类声音似乎变得更加尖锐了......</p><p></p><p>实际上，随着创新技术的不断发展与迭代，开发者的工作不仅不会被取代，反而会将其从繁琐、重复的工作中释放出来。那么，对于身处新时代的开发者来说，如何才能借助智能技术更好地创造未来？</p><p></p><p>作为开发者的你，如果已经对上述问题产生了好奇，6 月 15 日 12:30，Microsoft Build 即将给你答案！</p><p></p><h2>Microsoft Build 亮点提前知</h2><p></p><p></p><p>火爆出圈的智能技术将成为 Microsoft Build 的主角，在这里，你将聆听微软大佬对 Microsoft 下一代智能技术的展望。本次 Microsoft Build 还将开设「第二直播间」，微软公司副总裁、微软大中华区首席运营官康容以及微软生态伙伴事业部首席技术官徐明强还将在 「第二直播间」 中，进一步分享智能技术的技术趋向。此外，开发者还可以在「第二直播间」与大咖们直接互动，解答技术问题。</p><p></p><p>为了给线上的开发者朋友提供亲临现场的参与感，本次 Microsoft Build 还特别策划了 「会前探展」，Bilibili 微软官方发言人“田老师”将搭档微软比特熊，在大会现场带你直播探展。想知道本场大会策划了哪些有意思的环节？本个环节不容错过～</p><p></p><p>在 IT 圈广为流传的一句话便是：“Talk is cheap，show me the code”。所以在本次大会中，除了干货满满的技术议题以外，Microsoft Build 还将汇集一众技术社区达人，进行一场代码对决战。如果你也想见证智能新时代的技术变革，欢迎一起围观这场精彩对决。</p><p></p><h2>报名通道已开启，即刻扫码抢位</h2><p></p><p></p><p>在智能产品和技术备受关注的当下，开发者更需顺势而为，紧跟时代脚步。如果你对 Microsoft Build 感兴趣，欢迎扫码或<a href=\"https://aka.ms/BuildLocalInfoQ\">点击链接</a>\"注册～我们一同「Build · 未来」！</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/52/524507f7683fbc83028703dee005a390.png\" /></p><p></p>",
    "publish_time": "2023-06-05 11:24:43",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "数据库内核杂谈（三十三）- 向量数据库（1）",
    "url": "https://www.infoq.cn/article/MkmOCQKwKm0Rmakm4WIO",
    "summary": "<p>欢迎阅读新一期的数据库内核杂谈。近期，一类新型的数据库，vector database （或者vector-based database，向量数据库）火了，比如Pinecone （<a href=\"https://www.pinecone.io/\">https://www.pinecone.io/</a>\"，Pinecone最近还完成一笔新的融资：<a href=\"https://techcrunch.com/2023/04/27/pinecone-drops-100m-investment-on-750m-valuation-as-vector-database-demand-grows\">https://techcrunch.com/2023/04/27/pinecone-drops-100m-investment-on-750m-valuation-as-vector-database-demand-grows</a>\"）。也不乏一些关系型数据库往向量数据库转型或提供vector相关功能（如SingleStoreDB：<a href=\"https://www.singlestore.com/blog/using-singlestoredb-as-a-vector-database-for-qa-chatbots/\">https://www.singlestore.com/blog/using-singlestoredb-as-a-vector-database-for-qa-chatbots/</a>\"）。受到关注的原因就是向量数据库对于AI和机器学习系统，特别是在这波大模型热潮中，可以发挥非常重要的作用。对于LLM（large language model）应用，通常文本会被转换成向量vector embedding（VE）来存储。向量数据库就是专门用来存储这类语义向量，并提供针对VE的高效查询操作。内核杂谈也紧跟潮流，开启一个新系列，让我们一起来学习向量数据库vector database吧。</p><p>&nbsp;</p><p></p><h1>什么是Vector Embedding（VE）</h1><p></p><p></p><p>典型的数据应用场景下，我们会使用关系型数据库用结构化的数据来存储和描述一个对象实体。比如，我们可以用一张student表（id, name, class, ...）来描述学生实体。在人工智能，或者机器学习领域，要处理的对象的property（对应到关系型数据库中的column）会非常多且复杂。举个例子，我们希望构建一个预测模型来预测一个房子的房价，要考量的因素就很多了：地区，建筑年份，大小，房间数，周围环境等。在机器学习领域，构建对象的property叫做特征工程，feature engineeirng（插一句题外话，特征工程是影响模型准确性很关键的factor，不亚于对模型本身的改造）。但对于一些非结构化数据，比如自然语言处理中的文本、视觉的图片、视频或者音频，就很难做人工feature engineering，更别说再转换成结构化的column形式了。</p><p>&nbsp;</p><p>于是，科学家们发明了Embedding，将一个对象表达成一个N维的向量（[0.3, 0.2, 4.3, ...]）。从人工智能领域的门外汉角度，我来试着解释一下这个N维向量是如何生成的，以及为什么这个N维向量就可以是这个对象的feature engineering。</p><p>&nbsp;</p><p>在一个典型的深度神经网络里，前置的神经网络通常用来学习低维度的feature，随着神经网络layer的深入，不断把低维度的feature组合起来，形成更高维度的feature。最终，神经网络通常将某个数据归类到某个output（比如一个classification分类模型）。神经网络的最后一层layer通常是全连接层或者softmax层，将高维信息映射到最终的分类结果。而Embedding的计算逻辑就是，把这最后一层敲掉（chop off），直接输出倒数第二层的output，得到的结果就是一个N维的向量。所以，这边的N是被定义的（取决于模型的倒数第二层）。举个例子，常见的Word2Vec的embedding size在200到300，如果你用最新的OpenAI的embedding API（模型是text-embedding-ada-002），输出的embedding size是1536。但这1536个维度，每个维度分别代表什么含义，是不具备解释性的。或者说，每个维度不能用人类的理解来解释，但对机器和这个模型是有意义的。用机器学习的术语，就是将对象投射到一个低维度的空间（虽然，我觉得1536看着像一个高维空间，感觉越说越像三体）。</p><p>&nbsp;</p><p>那这个VE计算出来有什么用呢？ 首先，它提供了一个复杂对象的数学表达形式（N维向量），且这个向量记录了这个对象的高维语义信息。这句话解释起来就有些抽象了：不同对象的语义相似度，可以对应到这两个向量在向量空间的相似度。一图胜千言，用下面这张图来解释一下。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/51/51f4fa8ea65439ad0249e076111cadb9.png\" /></p><p></p><p>首先，这是一个高维的VE（我们只是画在二维平面上）。两个向量的距离，比如a little boy is walking和a sad boy is walking，这个距离和另一对向量，look how sad my cat is, 和look at my little cat的距离应该是非常接近。这就是语义相似度。另一个很常见的例子是，国王和王后的距离与男人和女人的距离非常接近。常见的向量的相似度计算方法是Cosine Similarity余弦相似度（<a href=\"https://en.wikipedia.org/wiki/Cosine_similarity\">https://en.wikipedia.org/wiki/Cosine_similarity</a>\"）。</p><p></p><p>读者可能会问，好神奇啊，为什么这个向量就能包含语义信息，且能体现不同对象的相似度呢？因为，这是一个后验事实：这个神经网络是用了大量被label过的数据训练以后得到的结果。即，这个分类模型，经过大量数据训练，预测结果已经很准确了。那去掉最后分类层的embedding也可以被认为是保留了高纬度的语义信息。即，如果语义信息没有被保留，那分类结果就不会这么准确。</p><p>&nbsp;</p><p></p><h1>Embedding的实际应用</h1><p></p><p></p><p>如上段所示，VE提供了一种机器能够理解和处理的方式来描述原本非常复杂的对象。并且，VE保留了高维度的语义信息：不同的对象投影在一个向量空间里面，就可以通过数学计算来找到相似性，similarity search（如上述示例所示）。实际情况中，绝大部分的应用都是基于寻找相似性的。下面是一些常见的应用介绍：</p><p>&nbsp;</p><p>1）推荐系统：推荐系统可以将用户和购买的物品都生成VE，并通过相似性来推荐新物品。</p><p>2）搜索系统：搜索和推荐类似，可以将查询生成VE，再去通过VE搜索相似的结果。</p><p>3）异常检测：VE可以用于检测数据中的异常模式或异常点。例如，在信用卡欺诈检测中，每个交易都可以用VE来描述。与正常交易明显不同的交易可能被标记为欺诈行为。</p><p>4）自然语言理解和语音识别：在Google翻译，或者语音助手（SIRI，Alexa等），文本和文字音频都是通过VE的形式输入到系统中做语义理解。相关应用有：机器翻译、情感分析、命名对象识别等。我自己通过OpenAI的embedding做了情感分析（sentiment analysis)：给一个评价（比如针对某个产品或者餐厅），判断是好评还是差评，下文会给出demo代码。</p><p>&nbsp;</p><p></p><h1>Play With Embedding</h1><p></p><p></p><p>接下来，咱们实操一下如何使用embedding。下面是我基于OpenAI的Embedding API（<a href=\"https://platform.openai.com/docs/guides/embeddings\">https://platform.openai.com/docs/guides/embeddings</a>\"）写的demo代码。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/bd/bdd95e8091ce27dcb89129782b8f3410.png\" /></p><p></p><p>代码非常简单，我们通过调用OpenAI的get_embedding方法获得文本\"The food is awesome!\"的embedding，并打印结果。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/76/76ec1bed64488b6468c46292c5ec4328.png\" /></p><p></p><p>可以看到，OpenAI的embedding size是1536，也试着打印出来一部分vector，虽然这部分的vector不具备任何解释性。</p><p></p><p>接下来，我们用embedding来做sentiment analysis（情感分析）。我的做法比较粗糙：首先创建两个anchor embedding来代表positive review和negative review；给定一个具体的review，分别求这个review embedding和上面两个embedding的cosine similarity再做差值。按照cosine similarity, 如果两个embedding的夹角更小（更相似），它们的值应该更接近1，也更大。因此，分别求出和positive embedding和negative embedding的值后相减，如果&gt;0就是positive的，反之这是negative的。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e6/e65e1baefa22e9856ca55033af3d4f69.png\" /></p><p></p><p>这段代码的输出如下：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/04/04a108c81c86f4d3bd46075493c22bef.png\" /></p><p></p><p>可以看到\"the food is awesome here\"的得分是正值，而\"I don't like the food here\"是负值。当然，我觉得，这边的anchor可以选两个更好的锚定embedding，结果应该会更好。</p><p>&nbsp;</p><p></p><h1>总结&amp;预告</h1><p></p><p></p><p>咱们花了一整期介绍什么是vector embedding，以及为什么需要vector embedding。有了这些背景，终于可以引出为什么需要vector database（向量数据库）了。向量数据库旨在提供一种原生的，更高效的对vector embedding的使用（无论是从存储，或者是查询的角度）。相比于传统的关系型数据库，向量数据库的挑战在于，如何能够存储下成千上亿个VE，并提供类似于相似度查询，聚类查询等基于VE的操作，同时，也需要具备典型数据库的功能。下一期，我们继续。感谢阅读！</p><p>&nbsp;</p><p></p><h1>内核杂谈微信群和知识星球</h1><p></p><p></p><p>如果觉得有收获，也愿意请我喝杯咖啡的话，可以在爱发电平台打赏我！</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/36/36c77ffaa6b1f335e3548176236cbac9.png\" /></p><p></p><p>目前我有全职工作，求打赏完全是出于可以让我分泌更多的多巴胺（任何非工作收入都算天降之财！）。重要的话说三遍：请完全出于自愿打赏（如果你是学生，请务必不要打赏）！请完全出于自愿打赏（如果你是学生，请务必不要打赏）！请完全出于自愿打赏（如果你是学生，请务必不要打赏）！</p><p>&nbsp;</p><p>内核杂谈有个微信群，大家会在上面讨论数据库相关话题。目前群人数超过400人啦，所以不能分享群名片加入。可以添加我的微信（zhongxiangu）或者是内核杂谈编辑的微信（wyp_34358），请备注：内核杂谈。</p><p>&nbsp;</p><p>除了数据库内核的专题blog，我还会push自己分享每天看到的有趣的IT新闻，放在我的知识星球里（免费的，为爱发电），欢迎加入。</p><p></p><p><img src=\"https://uploader.shimo.im/f/5cKrf6PcDS1EMVIw.png!thumbnail?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2ODU5MzY5OTEsImZpbGVHVUlEIjoicnAzT012em1sREhOV2VrbSIsImlhdCI6MTY4NTkzNjY5MSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NjM1Mzc3OX0.wRU1p_VOiaq1VygGT1VoBzXmsbs0VyPkhoVlw3Ckes8\" /></p><p></p>",
    "publish_time": "2023-06-05 12:14:37",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "一个简单的代码拼写错误导致17个生产数据库被删！微软Azure DevOps宕机10小时始末",
    "url": "https://www.infoq.cn/article/9ZxYXzwUeflmIXgmWmfL",
    "summary": "<p></p><blockquote>由于低级错误，本该清理数据库快照的修复代码却删掉了整个服务器。</blockquote><p></p><p></p><h2>一个拼写错误致微软Azure DevOps宕机10小时</h2><p></p><p></p><p>微软<a href=\"https://www.infoq.cn/article/2016/02/Azure-Stack-Update\">Azure DevOps</a>\"是一套应用程序生命周期服务。5月24日，Azure DevOps在巴西南部（SBR）区域内一处scale-unit（微软Azure部署架构中最小的容量单元）设施发生宕机，宕机持续了10个小时。</p><p></p><p>近日，微软首席软件工程经理 Eric Mattingly对宕机事件表达歉意并透露了宕机原因：一个简单的拼写错误，致使17个生产数据库遭到删除。</p><p></p><p>Mattingly解释道，Azure DevOps工程师偶尔会保存生产数据库的快照，据此调查上报的问题或测试性能改进方向。为了清理这些快照数据库，会有专门的后台作业每天运行，并在快照超过一定期限后将其删除。</p><p></p><p>在最近的一波冲刺（敏捷上下文中的小组项目，编号为Sprint 222）中，Azure DevOps工程师执行了代码升级，想要用受支持的Azure.ResourceManager.* NuGet包替换掉已被弃用的Microsoft.Azure.Managment.*包。</p><p></p><p>这对应着一条巨大的pull request变更请求，会将旧包中的API调用替换为新包中的API调用。引发此次事件的拼写错误就出现在pull request内，导致后台快照删除作业删掉了整个服务器。</p><p></p><p>Mattingly表示，“这条pull request中的快照删除作业里隐藏着一条拼写错误，它会删除Azure SQL数据库调用，并替换成删除托管数据库的Azure SQL Server调用。”</p><p></p><p>Azure DevOps工程师使用安全部署实践（SDP）将Sprint 222部署到了Ring 0（微软内部Azure DevOps组织），这里不存在快照数据库，所以删除作业不会执行。在Ring 0测试几天之后，Azure DevOps工程师又将其部署至Ring 1，也就是在此期间巴西南部的scale-unit设施受到了影响。快照数据库的存在时间触发了这项bug，该作业在删除Azure SQL Server的同时，还删掉了scale-unit设施中所有17个生产数据库。从这时起，Azure DevOps的scale-unit无法处理任何客户流量。</p><p></p><p>据Mattingly介绍，此次宕机事件并未引发数据丢失。为了防止问题再次发生，Mattingly 称微软已经采取了各种修复和重新配置措施，并向所有受此中断影响的客户道歉。</p><p></p><h2>为什么耗时10小时才完成恢复？</h2><p></p><p></p><p>据了解，Azure DevOps是有检测此类问题的测试的。但根据Mattingly的介绍，“之所以以往没有发现，是因为这部分代码的运行条件非常罕见，我们的测试并没有切实覆盖这些极端情况。”有推测认为，这种极端条件要求删除脚本捕捉到特别陈旧的数据库快照。</p><p></p><p>虽然目前数据已经全部恢复，但整个宕机前后耗时10多个小时，为什么这么久才完成修复？Mattingly对此做出了解释说明：“我们在数据库被删除后的20分钟内检测到宕机，值班工程师立即参与修复。在快速理解问题来源之后，我们开始恢复SQL Server及所有数据库，并禁用了快照删除作业以防止该bug影响到其他客户。但由于问题数量较多，因此恢复时间也相对较长。”</p><p></p><p>首先，客户无法自行恢复Azure SQL Server，因此必须由Azure SQL团队参与恢复工作。确定需要Azure SQL值班工程师介入，接洽实际情况和问题，再加上服务器的实际恢复大约耗费了1个小时。</p><p></p><p>其次，所有数据库均配置有备份冗余，但部分数据库的创建时间早于区域冗余备份的上线时间。在恢复数据库时，Azure DevOps为所有数据库选择了Geo-zone-redundant，导致一部分还原数据按照此前配置的Zone-redundant备份被复制到了配对区域。这种匹配冲突又让恢复过程延长了好几个小时。对于这个问题，Azure DevOps将确保所有数据库备份均按Azure区域支持被配置为Geo-zone-redundant，使其覆盖Azure DevOps中的所有scale-unit。</p><p></p><p>最后，在数据库开始恢复上线之后，由于Azure DevOps的Web服务器出现了一系列复杂问题，尽管数据库内容已经完成还原，客户也仍然无法访问整个scale-unit设施。</p><p></p><p>这个问题源自服务器的预热任务，该任务会通过测试调用遍历可用的数据库列表。但恢复过程中数据库招聘了一项错误，导致预热测试“执行指数级退避重试，令预热耗时由正常情况下的不到一秒延长到了平均90分钟。”</p><p></p><p>更复杂的是，整个恢复过程是交错进行的，一旦其中一、两台服务器重新开始接收客户流量，就会因过载而再次宕机。最终，工程师在只能阻断所有流向巴西南部scale-unit的流量，确保一切准备就绪再重新加入负载均衡器并处理流量。</p><p></p><h2>如何避免此类问题再次发生？</h2><p></p><p></p><p>目前，Azure DevOps已经修复了快照删除作业中的bug，并为快照删除作业创建了新的测试，面向真实Azure资源充分反映快照数据库的删除场景。</p><p></p><p>Mattingly 表示，Azure DevOps正着手为关键资源添加Azure资源管理器锁，借此防止意外删除。同时，确保所有Azure SQL数据库备份均被配置为Geo-zone-redundant形式，并受到Azure区域的支持；确保未来的所有快照数据库，只会被创建在不同于生产数据库的Azure SQL Server实例之上。</p><p></p><p>此外，还会修复Web服务器预热任务的逻辑，确保即使数据库处于脱机状态时也能成功启动。并创建新的cmdlet来恢复已被删除的数据库，确保恢复结果使用与被删除前相同的设置（包括备份冗余）。</p><p></p><p>参考链接：</p><p><a href=\"https://status.dev.azure.com/_event/392143683/post-mortem\">https://status.dev.azure.com/_event/392143683/post-mortem</a>\"</p><p><a href=\"https://www.theregister.com/2023/06/03/microsoft_azure_outage_brazil/\">https://www.theregister.com/2023/06/03/microsoft_azure_outage_brazil/</a>\"</p>",
    "publish_time": "2023-06-05 14:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "AI 时代背景下的平台工程之路 | 极客有约",
    "url": "https://www.infoq.cn/article/zxBarfLg4T9T1wivz0zx",
    "summary": "<p>嘉宾&nbsp; |&nbsp; 李倩 &amp; 杨振涛&nbsp;&nbsp;</p><p>整理  |  Zadig 团队</p><p>编辑 ｜ Tina</p><p></p><p>主导 ChatGPT 宿主公司 OpenAI 巨额投资的微软第三任 CEO、萨提亚·纳德拉（Satya Nadella），近期在和著名记者、作家，NYT 专栏作家，HBO 电影《大而不倒》原著作者安德鲁·罗斯·索金的采访对话中指出：“AI 时代，每个公司都是软件公司，他们需要更多的开发者。事实上，这个世界需要 10 亿开发者”。在 AI 的时代大背景下，作为 <a href=\"https://www.gartner.com/cn/newsroom/press-releases/2023-top-10-strategic-tech-trends\">Gartner 2023 年十大战略技术趋势之一</a>\"的“平台工程”对于企业和个人意味着什么？InfoQ 于 4/18 日再次请到特邀主持人、vivo 互联网研发总监杨振涛，对话平台工程践行者、KodeRover / Zadig 创始人兼 CEO 李倩，为大家带来了一场精彩的探讨。本次讨论内容摘要如下（完整版视频参看：<a href=\"https://www.infoq.cn/video/rt4CNXXlVbzmRCPumWPe\">https://www.infoq.cn/video/rt4CNXXlVbzmRCPumWPe</a>\"）</p><p><code lang=\"null\">平台工程如何创造价值（典型要素/应用实践/价值呈现、数字化启示、企业实践路径）\n以 Zadig 为代表的平台工程如何在企业落地实施\n平台工程和 AI 对行业、从业者的影响分析（行业的适用性、企业组织的迭代、从业者的职业发展）</code></p><p>我们先来回顾两位嘉宾在 4/3 日的第一次探讨时的内容提要（<a href=\"https://mp.weixin.qq.com/s/dZPNpyLSfKrg455xsIPcyA\">https://mp.weixin.qq.com/s/dZPNpyLSfKrg455xsIPcyA</a>\"）</p><p><code lang=\"null\">企业发展与工程师生存的矛盾\n企业大力投入开发者体验的意义\n提升开发者体验的典型工具和产品\n从自动化到 DevOps 实践，到 Xops 泛化\n平台工程的现实商业意义预测\n平台工程是否是造轮子，昙花一现？\n以 ChatGPT 为代表的 AI 技术是否会替代工程师？</code></p><p>以下为本次讨论内容整理全文：</p><p>&nbsp;</p><p>杨振涛：大家好，欢迎收看 InfoQ 特别直播栏目《极客有约》。我是今晚的主持人杨振涛。今晚，我们有幸邀请到 KodeRover 的创始人兼 CEO 李倩女士作为我们的嘉宾。今晚，李倩女士将与我们一同探讨的是从 DevOps 到平台工程的话题。现在，让我们热烈欢迎李倩女士与大家打个招呼！</p><p></p><p>Landy：大家好，非常荣幸能够与大家见面！我是 KodeRover 的创始人兼 CEO，同时也是 Zadig 产品的作者。很高兴能够参与这次关于平台工程的探讨。上次的讨论意犹未尽，所以我们将继续深入探讨这个话题。再次感谢大家的到来！</p><p>&nbsp;</p><p></p><h1>平台工程如何创造价值</h1><p></p><p></p><h2>DevOps 和平台工程之间的关系</h2><p></p><p>&nbsp;</p><p></p><blockquote>内容提要：平台工程可以被视为 XOps 概念的延伸和实践，平台工程让软件研发与商业世界建立更深入和直接的联系。</blockquote><p></p><p>&nbsp;</p><p>杨振涛：在直播的最后部分，我们将回答一些粉丝提出的问题。在观看直播的过程中，如果你有任何问题，请随时在评论区提出。我们的视频号小助手会收集这些问题，并邀请我们的嘉宾来解答。接下来，我们将延续上次直播的内容，请李倩老师先对目前为止的讨论进行总结。从您的角度来看，DevOps 和平台工程之间的关系是怎样的呢？</p><p>&nbsp;</p><p>Landy：实际上，DevOps 最初是从一种方法论或理念开始的，其本质是为了减少团队之间的沟通和认知负担，以共同实现交付目标。现在，我们在不断地对其进行广义化和扩展，出现了许多基于 Ops 的概念，例如 TestOps、MLOps、DataOps、FinOps 等等。在我看来，平台工程可以被视为这些 Ops 概念的延伸和实践，或者说是对其进行实例化的过程。更深层次地理解的话，我认为平台工程是软件研发与商业世界更深入联系的一种方式。这些观点是我在产品开发和实践过程中逐步形成的理解，当然，这些理解也在不断迭代中。</p><p>&nbsp;</p><p>杨振涛：嗯，好的。让我们来具体讨论一下平台工程。之前，InfoQ 发布了一些关于平台工程的文章，我们也注意到一些读者在评论区提到了一个观点，即平台工程可能涉及基础设施的可编程能力，以及 CI/CD 等方面。您认为这个观点是否准确？以及在整个基础设施及代码的发展历程中，不断出现了许多方法和工具，它们如何改变了整个 DevOps 实践呢？</p><p>&nbsp;</p><p>Landy：嗯，没错。我认同您提到的观点，平台工程确实包括了基础设施即代码（Infra as Code）和持续集成/持续交付（CI/CD）。平台工程是一个更广泛、更综合的概念。它涵盖了与开发者接近的一端，也涵盖了与基础设施接近的另一端。</p><p>&nbsp;</p><p>个人而言，我认为平台工程是软件交付生命周期的一个重要组成部分。它涵盖了如何构建软件以及管理整个交付过程。在其中涉及了 CI/CD、监控告警、系统集成以及各种支持系统。此外，它还包括了研发和运营的建设。</p><p>&nbsp;</p><p>对于 Infra as Code 的发展，我认为它主要是从基础设施方面解决复杂性问题。像 HashiCorp 等公司在创业初衷上就致力于解决基础设施的自动化和环境治理等问题。同时，AWS 和其他云服务提供商也提供了许多基础设施管理的 as code 实践。Infra as Code 在 DevOps 中扮演了重要角色，对其产生了明显的影响。</p><p>&nbsp;</p><p>过去，开发和运维之间存在很大的合作隔阂。但现在，我认为双方都希望进一步加强合作。一些公司甚至成立了专门的平台工程团队，以促进双方更密切的合作。这样的组织能够承载这种能力，并构建平台工程所需的基础设施和流程。</p><p>&nbsp;</p><p></p><h2>平台工程典型要素、应用实践及价值体现</h2><p></p><p>&nbsp;</p><p></p><blockquote>内容提要：平台工程是一个综合性的解决方案，核心要素可能包括以应用为中心的现代服务管理和交付管理，需要注重开发者体验、内部运维、安全等一系列建设。平台工程本质目标是让企业能够敏捷、可靠、安全、高效地交付应用，以提供更好的用户体验。</blockquote><p></p><p>&nbsp;</p><p>杨振涛：聊到这里，你认为平台工程到底是什么？它的典型要素有哪些？当我们采纳或者实施平台工程，这种实践会有哪些一些典型的表现，或者说我们如何判断某个团队或某家公司是有典型的平台工程应用的和实践的？</p><p>&nbsp;</p><p>Landy：平台工程类似于复杂的学科，它是系统工程范畴中综合性的方法。在这个过程中，它主要是构建、运行和管理整个流程所需的能力，并将技术和流程融合在一起。它有点像解决方案的存在。当然，在这个过程中面临的复杂性不仅仅是单一的连接。</p><p>&nbsp;</p><p>所以对于平台工程，我理解它是一个综合性的解决方案，面向企业内部构建更好的应用。它的核心要素可能包括以应用为中心的现代服务管理和交付管理。另外，它还注重开发者体验、内部运维、安全等一系列建设。它的本质目标是让企业能够敏捷、可靠、安全、高效地交付应用，以提供更好的用户体验。这是我对平台工程的一些核心要素的理解，以及对其好处的简单描述。</p><p>&nbsp;</p><p>我们可以将其分为几个视角来讨论价值体现：首先是组织协同的视角。平台工程可以减少组织之间的摩擦，让团队更高效地协同工作，提升整体工作的愉悦度，可以给研发团队带来更好的体验。其次是研发视角。在研发过程中，平台工程可以帮助加快发布应用的速度，提高稳定性和效率，保障应用的安全性。这方面。最后是面向业务需求的视角。平台工程可以缩短交付周期，让产品更快地上市或者试错，从而提升服务质量。因为万物都离不开为组织提供价值，所以这个视角是更高维度的。</p><p>&nbsp;</p><p>总体而言，平台工程在研发协作体验、研发交付和需求交付等方面都有一些典型表现，可以带来一些显著的好处，使其更加有效。</p><p>&nbsp;</p><p>我熟悉平台工程这个词汇并没有很长的时间，但实际上我了解到的一些实践案例比这个词汇出现的时间要早得多。在我们所涉及的一些企业中，比如最近极氪汽车，他们主要使用的就是 ZadigX 价值链平台。他们内部数字战略提出了“三化平台”，这是一种企业数字化战略的新方法。我觉得这个思路非常具有前瞻性，所以我将他们的三化平台视为平台工程的一个典型案例。甚至我认为在这个行业中，这个案例都有一定的借鉴意义，可以让我们思考和探索。</p><p>&nbsp;</p><p></p><h2>平台工程趋势的启示：数字化转型新解法</h2><p></p><p>&nbsp;</p><p></p><blockquote>内容提要：平台工程背后说明了我们正在经历数字化转型的巨大浪潮。平台工程回答了企业研发管理的可视化/数字化价值，同时回答了如何证明数字化的价值和投入产出比的关键问题。&nbsp;平台工程代表了一种复杂性，通过将用户界面放在平台上，将底层复杂度整合起来，实现可治理性，从无序变为有序。它的目标不是解决具体的业务问题，而是为业务发展提供了杠杆（乘法效应），增加数字价值。&nbsp;平台工程非常有变革性，从 DevOps 到平台工程，涉及到组织升级、研发模式转变，指向的是一种方法和解决方案，更好地是让企业能够推进自身的数字化转型发展，并使其 IT 架构更适应当下的市场变化。</blockquote><p></p><p>&nbsp;</p><p>杨振涛：好的，接下来的问题是关于平台工程的趋势发展。我们之前提到，不仅 Gartner 将平台工程列为了 2023 年的十大战略技术趋势，而且最近 CNCF 发布了云原生计算平台工程的白皮书。那么这些背后的趋势发展说明了一些什么呢？包括我们之前看到 Gartner 和 CNCF 关于平台工程的不同描述，以及他们从自己视角看到的企业实践。那么这些背后的趋势是什么，或者说有什么原因呢？让我们来分析一下。</p><p>&nbsp;</p><p>Landy：就 Gartner 和 CNCF 来说，我认为它们更多地是对这个趋势进行了报道。它们在当前的云计算、DevOps 和企业数字化转型等方面提出了一些新的要求。通过平台工程，可以很好地赋能现代企业的 IT 架构，以满足市场和各个方面的需求。我认为平台工程提供了一种解决方案，让企业的 IT 在数字化转型或数字经济下具备更强的竞争力。</p><p>&nbsp;</p><p>从 Gartner 和 CNCF 的报告中，我看了一下，实际上在视角上可能会有一些小的差异，但本质上它们都在提供一种完整的技术架构和实践，或者是一个集成的综合解决方案，这是我观察到的。但从本质上来说，我觉得这背后主要说明了我们正在经历数字化转型的浪潮，以及企业对于研发管理的可视化和数字化价值的呈现，以及如何证明数字化的价值和投入产出比的问题。平台工程给出了一个很好的回答。所以在这个大的背景下，平台工程更多地是让企业能够推进自身的数字化转型发展，并使其 IT 架构更适应当下的市场变化。</p><p>&nbsp;</p><p>杨振涛：其实我们可以从 CNCF 的白皮书中看到作为一个成功的平台所需的要素，或者作为一个成功的平台团队所需的要素。这些要素在某种程度上也有助于在当前行业内推动达成一些基本共识。</p><p>&nbsp;</p><p>Landy：是的，我非常认同这个说法。</p><p>&nbsp;</p><p>杨振涛：在刚才提到的车企、以及传统企业中，研发团队的规模是不尽相同的。在有数百甚至上千人的研发团队中，在大中型组织中实施规模化 DevOps 一般会存在哪些方面的挑战？平台工程是否能够给传统企业数字化这过程带来新的启示？</p><p>&nbsp;</p><p>Landy：嗯，我认为这个话题非常有价值，主要是关于组织的复杂度对于技术、产品和数字化转型的影响。在传统企业中，我观察到许多挑战实际上并不是技术上的挑战。例如，流程、数据和能力往往在孤立地建设，与早期建设的能力无法直接为公司或团队提供价值。这些老的工具、系统和思想在面对变革时成为挑战，有些人积极拥抱变革，而有些人保持守旧的态度。同时，也出现了一些人使用新工具却仍持有旧有思想的现象，这种情况与敏捷团队的战队模式不符。敏捷团队的目标是全栈小分队解决问题，但实际上交付方式却更像是瀑布模式，这可能是因为思想尚未完全转变。这种情况可能会导致奇怪的现象和不协调的局面。在大型企业中，这些挑战可能会更加严重，对 DevOps 实践和数字能力建设产生阻碍。</p><p>&nbsp;</p><p>在这方面，平台工程可能提供一些新的启示，涉及到组织升级、研发模式升级。平台工程代表了一种复杂性，通过将用户界面放在平台上，将底层复杂度整合起来，实现可治理性，从无序变为有序。它的目标不是解决具体的业务问题，而是提供一种乘法效应，为业务增加价值。因此，从平台团队组织建设以及平台工程所指向的方法和解决方案上看，它为实施 DevOps 和相应的平台建设带来了新的机会和可能性。</p><p>&nbsp;</p><p>杨振涛：这个角度来讲，平台工程是否具有一定的变革性，我们从传统工程环境和基础设施上过渡到更先进的这种实践上了吗？</p><p>&nbsp;</p><p>Landy：嗯，我认为平台工程非常有变革性，因为它涉及到组织和研发模式的转变。它的目标是打破过去传统的孤岛式流程和数据隔离，通过更多的协作和集成方式进行交付。其中包括基础设施的自动化和标准化，以提供标准化能力，并实现自动化构建和标准化模板化的组织模式，从而简化整个软件交付过程。这种变革可以提高整体质量和效率。</p><p>&nbsp;</p><p></p><h2>平台工程的企业路径实践</h2><p></p><p></p><blockquote>内容提要：小团队采用自下而上的方式解决痛点、产生价值，并逐步迭代。而大团队则根据当前的发展情况，采用自上而下的战略考量，将关键特征的业务或场景迭代进平台建设，并开始在内部推广或运营平台的雏形。</blockquote><p></p><p>&nbsp;</p><p>杨振涛：对于小型团队，例如三五十或者二三十人的这种小规模团队，他们是否有必要去考虑投入资源实施自己的平台工程？你认为什么样的团队或者企业需要或者更适合平台工程？不同规模的团队，如何平衡长期主义的平台建设和短期的业务交付的压力？</p><p>&nbsp;</p><p>Landy：刚才提到的是关于从传统到先进的过渡问题，这涉及到很多方面的思考。其中一个关键点是团队是否具备这样的能力，以及顶层设计是否能够支持这种过渡。例如，你的老板在组织层面上是否有这种意识。对于平台工程来说，它是一个重要但不紧急的事情，在许多业务开发中，大多数小公司主要是为了生存而战。因此，如果不是编写业务代码，其他角色可能只会暂时或短暂地参与，不会全力投入。通常情况下，可能会有一个人代表团队来开展项目开发或类似的任务。因此，在小团队中，可能不需要投入太多的资源来进行大规模的平台工程计划。但是，可以运用自动化的思想来沉淀一些最佳实践，例如确保持续集成/持续部署（CI/CD）的流程，实现自动化部署等。许多公司都在努力构建这种基本的自动化流程。随着团队规模的扩大和业务的增长，可以考虑建立一个专门的团队或者启动一个项目来进一步推进这个过渡。</p><p>&nbsp;</p><p>然后，刚才提到的另一个问题是平衡的问题。这个问题与基础设施迭代、软件研发模式迭代以及业务产品形态之间有很大的关联。在平台建设方面，我认为从本质上来说，如果能够在一段时间内满足业务需求交付，就不要过度制造轮子。对于特别小的团队，可以先采用自动化的方式，如前面提到的 CI/CD，由痛点驱动，采用一种自下而上的解决问题，先解决一些共性问题，然后在构建平台工程时应用这些最佳实践。对于稍微规模大一点的团队，根据现状分析，需要建设平台时，此时建议采用自上而下的方式推动变革，并针对一些共性问题，比如一些关键业务或典型业务，抽象出一些最佳实践或模式。然后通过平台建设，将这些东西固化下来一些模式，然后后续根据组织形态和流程不断迭代这种模式。</p><p>&nbsp;</p><p>总结下来有两种方式，小团队采用自下而上的方式解决痛点、产生价值，并逐步迭代。而大团队则根据当前的发展情况，采用自上而下的战略考量，将关键特征的业务或场景迭代进平台建设，并开始在内部推广或运营平台的雏形。然后再根据后续的迭代方向，根据技术的变化进行调整。</p><p>&nbsp;</p><p></p><h2>平台工程如何平衡研发效能和开发者体验</h2><p></p><p>&nbsp;</p><p>杨振涛：在企业评估是否需要采用平台工程实践时，研发效能是否可以作为一个关键的价值点进行考量？同时，开发人员可能更关注开发体验。这两个方面是否存在所谓的资方和劳方之间的博弈或矛盾？</p><p>&nbsp;</p><p>Landy：近年来，研发效能备受关注。我已有近10年的实践经验，起初研发效能是自我迭代和改进的概念。但由于各种原因，包括大公司对指标度量方式的问题，导致人们对指标抱有抵触情绪。度量工作通常由非开发或非技术人员负责，他们对研发工作了解有限，可能会采用不合理的度量方式，比如代码行数。这种方式就像认为飞机越重越好，与实际情况完全不符。</p><p>&nbsp;</p><p>因此，关键是确保科学度量指标。在投入平台工程和研发效能方面，我们需要确保使用的度量指标合理有效，能准确反映研发团队的实际效能，以更好地评估和改进研发团队的效能。</p><p>&nbsp;</p><p>在度量方面，我们应该关注需求到研发交付的整个过程，包括可行性分析、需求拆解、设计、编码测试，以及后续的运维和发布过程。可以按阶段划分，并建立关键节点和关键环节的度量体系。重点关注接口处的效率，并确保每个指标对应两个角色，而不仅仅度量开发。</p><p>&nbsp;</p><p>此外，在评估价值时，我们应注重证明平台工程的价值，而不仅仅关注研发效能。通过全流程分解确定可能的指标，包括过程指标和结果指标，以更全面地评估平台工程的价值。</p><p>&nbsp;</p><p>针对不同阶段，我们应向业务部门证明平台工程的指标或价值。例如，需求交付的平均周期可作为\"北极星\"指标来回答产品部门的上线时间问题。研发模式设计也应考虑，如从每月发布一次改为每周发布一次，具体取决于不同业务形态和核心发布速度的确定。此外，通过细粒度的度量，了解平均需求交付时长、从需求到研发拆解的时间等，清晰了解时间分配情况和结果产生的原因，以有效评估平台工程的建设情况。</p><p>&nbsp;</p><p>同时，我们还需评估平台工程对业务的最终效果和开发者体验。平台工程旨在解决组织系统流程复杂性问题，若未从更好的生产者角度或以人为本的角度设计系统，平台工程就无法发挥作用。解决劳资博弈问题是平台工程的目标，若未解决好，开发者会感到与平台产生博弈，形成恶性循环。这表明方向偏差，许多公司出现这种感觉实际上是因为平台工程还只是一个平台，而非真正的平台工程。它未考虑到复杂性降低和整体生产力提升，更多关注各部分之间的连接问题。</p><p>&nbsp;</p><p>因此，确保平台工程考虑到复杂性，降低复杂性并提高整体生产力至关重要。只有这样才能解决劳资博弈问题，否则将陷入恶性循环。因此，许多公司出现这种感觉实际上是因为平台工程未朝正确的方向发展。</p><p>&nbsp;</p><p>杨振涛：可能实践上，有一些把用来度量团队或组织的研发效能的指标落到开发者个人身上，变成一些考核的指标。</p><p>&nbsp;</p><p></p><h2>平台工程领域的国内外发展差异</h2><p></p><p>&nbsp;</p><p>杨振涛：内部开发者门户/平台 IDP 作为平台工程的典型表现之一，如果选择一个开源方案作为我们的内部开发者平台时，我们需要考察哪些关键要素？（或讲讲Zadig 和 Backstage等解决方案的思路、优缺点？）在此方面国内外是否存在显著的发展不同步现象？</p><p>&nbsp;</p><p>Landy：在选择和开发企业内部的开发者门户或平台时，有几个关键因素需要考虑。首先是评估复杂性，不仅关注结果，还要考虑组织的迭代和发展过程，以免导致不可持续性。避免盲目追求快速发展或重复造轮子的现象这一点非常重要。</p><p>&nbsp;</p><p>一个实体软件或平台不能单独带来价值，因为构建平台的抽象难度很高。需要具备业务和工程领域能力，并对基础设施有一定的理解，无论是采用开源解决方案还是自行构建。否则，所构建的东西可能失去平衡，无法满足真正的需求。选择平台开发方案时，需要具备全面的视角和理解，尤其在选择企业级应用方案时，需要具备功能性、安全性、可扩展性和可定制性等基本特性。还需要考虑应用性能指标和社区支持等因素，根据企业特点选择适合的方案。</p><p>&nbsp;</p><p>内部开发者门户或平台是平台工程的一种外在表现。在企业内部，从简单的资源提供演变为为用户提供界面。有人将其视为简单的资源提供平台，有人持续改进为工程平台，有人演化为内部产品和服务目录。</p><p>&nbsp;</p><p>Zadig 和 Backstage 是两种不同的解决方案，它们有不同的适用性和优缺点。Zadig 是基于云原生基础发展起来的，更注重作为基础平台的连接性和承载能力。它可以作为内部开发者平台的核心，提供整体连接和底层能力的管理。而 Backstage 则更像是一种表层的门户，提供UI和展示能力，让业务视角下的数据进行聚合和展示。相比之下，Zadig 更注重连接所有价值提供方，提供面向开发者的协作平面。</p><p>&nbsp;</p><p>国内外在这个领域的发展存在显著差异。国外生态链中的工具链和生态多样性更丰富，从代码管理到项目管理再到CI/CD和交付物管理等方面有众多工具可选。国内则主要依赖大型公司的能力溢出和国外工具的使用，工具生态主要集中在这些领域。这与国内云生态系统的支持体系和工具链与云生态建设有关。但是云原生方面，无论从业务场景还是平台产品，中国都有更优势的发展环境。</p><p></p><h1>以 Zadig 为代表的平台工程如何搭建</h1><p></p><p></p><h2>Zadig 配置管理解决方案</h2><p></p><p>&nbsp;</p><p>杨振涛：在 Zadig 中是如何进行动态配置管理的？大家都知道，DMS 动态配置管理是目前在基础平台中比较重要的一个实践点，我们是用到了哪些相关的方法或解决方案，包括涉及到哪些配置，我们涉及到哪些存储相关的文件，去降低它的复杂性，让整个开发的体验更好？包括在过程中有没有一些特殊的挑战？</p><p>&nbsp;</p><p>Landy：嗯，配置管理领域的复杂性确实存在。我们可以将配置划分为不同的层次。在当前业内常见的业务配置管理工具中，比较熟悉的有 Nacos 和 Apollo 等。此外，对于 Kubernetes 原生的配置管理，常用的是 configmap。从配置的形态上看，可以分为基础设施配置和业务配置两类。这两类配置的管理模式和变更流程是不同的。业务配置更多是动态配置，其动态能力取决于所使用的配置管理工具。而对于系统级的配置，例如与运行时环境相关的配置，变更点更多地是在平台级别，而不是针对特定业务的变更。对于平台而言，更注重的是大规模一致性的变更，而对于业务而言，更关注的是一次变更所带来的业务变化。业务变更通常由开发者或担任变更角色的人员发起。</p><p>&nbsp;</p><p>所以在配置管理方面，复杂性主要取决于你所选择的管理模式。在 Zadig 中有两种模式，一种是 GitOps，另一种是通过变量来抽象内部的几个模式，以实现相应的配置变更，从而降低复杂性。第一种我们可以通过 GIT 来管理配置，例如使用 GitOps 的方式来自动化业务和配置变更。但是是否开启自动同步机制取决于研发流程或者所期望的方式。而另一种则是模板加变量配置，配置中通常存在一些共性的部分，开发人员需要进行的实际变更并不多。因此 Zadig 的变量能力，可以区分不同环境，并在不同环境中对变量进行赋值。对于开发人员来说，他们可以在图形用户界面上更改特定环境下的服务配置。</p><p>&nbsp;</p><p>但实际上，对于管理平台或运维管理平台来说，它只是定义了开发人员可以选择的选项或类别，开发工程师处理的是填空题还是选择题不需要跟基础设施打交道，这样可以降低管理负担，并实现运维管理的统一化。举个例子，对于配置中的一些设置，比如 Skywalking，可以在变量配置中将其作为一项进行开启或关闭，无论是对于运维操作的一致性管理，还是对于开发人员的使用，这都是一个较好的方案。Zadig 对配置变更工具 Apollo 和 NACOS，数据变更 DMS 也提供原生自动化工作流支持，因此在这方面开发者并没有太多复杂的事情需要考虑。</p><p>&nbsp;</p><p></p><h2>Zadig 如何确保平台的灵活性与精简性</h2><p></p><p>杨振涛：作为一个偏基础平台的产品，在整个开发过程中，除了刚才提到的这种动态配置管理之外，还遇到过哪些关键性的挑战？在整个演进的过程中，是怎么去保证平台产品不会发展得过于臃肿？我们知道在长期的演进过程中，企业组织内部使用的平台产品经常会开发很多低频使用的功能，我们如何去平衡这种被低频使用的功能？</p><p>&nbsp;</p><p>Landy：当面对挑战时，我们在实现Zadig过程中遇到了一些问题。其中一个挑战是我们的抽象层次是否足够基础。这个问题关键在于你的抽象是否能满足更多的场景嵌入需求。我们需要平衡自由用户平面和管理平面，避免系统过于泛化和臃肿。在这个过程中，我们有两个重要的抽象概念。</p><p>&nbsp;</p><p>首先是对环境的抽象，环境指的是我们的产品在基础设施上的完整实例化，也就是说，将其部署到测试集群就是测试环境，部署到生产集群就是生产环境。环境提供了一个统一的开发者协作平台，使大家能够验证、测试和发布应用程序。无论是调试、自测还是联调，特别是在微服务架构下，开发者的交互变得非常复杂。通过环境的抽象，我们为开发者提供了一个协作平台，简化了这些复杂性，让大家能够更好地验证、测试和发布应用程序。</p><p>&nbsp;</p><p>其次是工作流的抽象，我们重新推出了一个自定义工作流引擎。这个引擎基于Kubernetes构建，但更注重业务的灵活性。企业可以自定义任务并编排到工作流中，实现流程与外部系统的衔接。我们已经内置了许多流行的工具，同时也支持企业和开源社区客户根据自己的需求进行任务定制和编排、OpenAPI 的全开放调用。这种灵活性为企业提供了强大的业务扩展性，同时避免了从头开始开发或堆积功能的痛苦。我们相信，基于平台属性进行开发，直接面向业务赋能，将会带来更有价值的产品，而不是仅仅堆砌一些少数特定情况的功能。</p><p>&nbsp;</p><p>我们与客户合作，通过收集问题来找到产品的方向。用户的反馈和易用性对于产品的价值至关重要。我们避免陷入一厢情愿的开发，而是注重倾听用户的需求和反馈。对于任何平台产品或其他产品，开发者的反馈和终端用户的友好易用性都是首要考虑的因素。只有通过这种方式，我们才能迭代出更有价值的产品，而不是开发一些很少使用或只适用于特殊情况的功能。</p><p>&nbsp;</p><p>在需求分析时，我们考虑时间和空间维度。空间维度更多考虑业务趋势的变化和迭代，而时间维度则考虑从零到一再到十的功能规模，以及其迭代路径。我们将问题从多个维度进行思考，而不仅仅线性分析。这样才能更好地理解产品的终态，并避免堆积代码和冗余功能。我们希望保持功能的精简和高效性，因为越少的功能意味着更少的维护工作。</p><p>&nbsp;</p><p>因此，在建立一个平台时，我们综合考虑架构演进、业务变化、时间空间和角色维度。通过考虑这些因素，我们确保产品具有高度的灵活性和扩展性，同时保持功能的精简和高效性。</p><p>&nbsp;</p><p></p><h2>Zadig 如何帮助用户避免平台锁定</h2><p></p><p>杨振涛：刚好我们提到这个开源的话题，KodeRover 是怎么基于或者面向社区去构建这种平台类的产品的？第二个部分是我们怎么保障使用平台的用户消除他担心平台锁定的问题？</p><p>&nbsp;</p><p>Landy：嗯，这一点非常重要。关于如何构建开发者平台，实际上我们的产品 Zadig 是面向开发者提供产品和平台服务的，通过开源方式持续提供给开发者更好用的产品。关于如何避免平台锁定问题，我们需要分层次探讨。首先什么是平台锁定？平台锁定指的是当你的组织、流程、技术或基础设施发生变化时，你无法自由、可扩展地调整。当你需要迁移时，会非常麻烦且成本高昂。我曾经见过一些公司将其业务从一个云迁移到另一个云，这个过程耗费了长达六个月的时间，这实在是令人恐惧而痛苦的经历。</p><p>&nbsp;</p><p>从平台的角度来看，云服务提供商的锁定问题确实比较严重，因为使用了他们的基础设施，就好比用了他们的水、电和管道，如果你现在要搬家，他们什么都没有提供。因为它们与其他平台不兼容，这一点非常痛苦。因此，解决平台锁定问题是首要任务，不过 Kubernetes 本身是解除厂商锁定的，也已被各个云厂商商业化支持，而 Zadig 是建立在 Kubernetes 之上，天生就是面向多云友好的，也天生帮助客户降低平台锁定的风险。</p><p>&nbsp;</p><p>实际上，很少有人询问 Zadig 平台锁定问题，相反，Zadig 从设计上尽可能的帮助客户识别容易被锁定的方面。例如，在设计系统之初，我们不依赖于某一特定云服务商。我们将整个云层作为一个抽象层来支持，可以接任何资源和基础设施，即使遇到基础设施中集成难度高的，Zadig 也可以通过工作流的能力来编排。因此，弱集成也是可行的。我认为做任何平台产品都需要考虑采用云原生的方式进行，否则很难发挥云原生最大化的价值，未来发展空间也会非常有限。</p><p>&nbsp;</p><p>另外一个方面是 Zadig 管理服务的方式使用原生的资源定义 YAML 或者 Helm Chart，运维同学使用模板库管理规范，开发者不需要学习另一种 DSL 语言可以很快使用起来。有些平台会定义自己的 DSL 语言，其本质上也是一种锁定，尤其是在面向应用交付领域中，离开后一种语言范式就无法应用到其他地方了，技术栈切换成本，迁移复杂度都非常高。在我们设计产品的时候会把云原生性作为最为重要的考虑因素，关注资源的定义的原生性、变更管道的可扩展性和基础设施的广泛兼容性等方面。举个最近的例子：我们有一个车企战略客户，从一家云服务商迁移到另一家云服务商，作为 Zadig 的用户，他们很愉快地完成了迁移，因为 Zadig 天然支持多云分发和全球部署模式，所以基本上没有网络障碍。这为他们提供了很大的价值，虽然这超出了商业合作范围，但意外地帮助他们实现了云迁移。</p><p>&nbsp;</p><p>总结来说，Zadig 平台是从云原生的角度来构建产品，并考虑整个生态系统，以确保产品在各个环节的定义或其他方面不受限制。您可以尝试使用 Zadig 平台，在现有构建的体系基础上，快速迁移到 Zadig 上，几乎不需要进行改动，只需导入服务定义或同步代码仓。此外，我们的工作流也支持使用 YAML 文件模式，尽管它本质上可能不算是一种锁定，因为工作流本身就是复杂的，您可以进行编排。因此，您可以选择自由地使用 YAML，或者选择使用 GUI 提供的最佳实践，以节省一些麻烦。</p><p>&nbsp;</p><p>另外，还有一种有益的锁定，即当某种模式成为一种被广泛认可的优秀模式后，您离不开它。这并不是因为它不好，而是因为您已经习惯了它，它真的非常好用。因此，从这个角度上来看，我认为锁定意味着您选择了一种正确的东西，它可以持续地与您进行迭代。总体而言，我觉得锁定并不是一件坏事。</p><p></p><h2>Zadig 全球化的实践之路</h2><p></p><p>杨振涛：刚才你也提到了，我们支持全球化部署，那作为一个开源项目，是否会有一些海外的用户？是否有观察到海外跟国内的实践上的一些差异？</p><p>&nbsp;</p><p>Landy：最开始是小鹏自动驾驶，他们的海外团队促进了我们迭代海外版本。后面遇到极氪、路特斯全球化战略又一次将国际化提到很重要的位置。</p><p>&nbsp;</p><p>杨振涛：客户的全球化推动了我们项目的全球化。</p><p>&nbsp;</p><p>Landy：在我看来，在中国这个复杂的市场环境下，工程平台的迭代非常有利。最初，我们选择在 GitHub 上进行开源，吸引了大量国内企业的关注。这些使用场景为我们打磨和积累产品能力提供了充足的机会，并为市场需求提供了所需的价值。在过去的一年半中，已有近 2000 家企业开始使用我们的产品，而且不断有更多的客户加入。这主要得益于市场需求的推动，因为国内供应链、电商物流和车企等行业的海外扩张正在成为重要趋势。我们的产品基本上是根据客户的业务需求推着我们国际化，并实现相应的能力迭代。目前，我们已经提供了国际化支持，并正在进一步完善产品文档。据我们了解，也有相当数量的国外用户正在使用我们的产品。在海外场景中，我们还需要解决许多问题，例如欧洲的 GDPR 合规要求等，这也是一个迫切的场景需求。</p><p>&nbsp;</p><p>如果有更多的推动力，我们可能会在这方面做出更多努力。尽管使用我们软件的海外用户的场景规模可能相对简单一些，且集成工具链更加多样化，但本质上并没有太大的差异。作为技术驱动的软件，我们并没有特殊性。然而，我们也针对不同规模的差异进行了优化和实践。因此，在这个领域，我们认为国外市场相对来说可能更容易一些。</p><p>&nbsp;</p><p></p><h2>Zadig 平台工程和 AI 是否会取代工程师？</h2><p></p><p>&nbsp;</p><p>杨振涛：面对整个平台工程当前的热度，持续的发展的背景，未来的产品愿景和预期是什么样子的？如果我们持续去推进平台工程，是不是未来开发人员自身会越来越多地被平台，包括所谓的 AI、ChatGPT、Copilot 等等所取代？从更长远的角度来看，软件行业的从业者应该从哪些方面去发展和增强自己的技术知识和能力？</p><p>&nbsp;</p><p>Landy：我们团队开源的 Zadig 实际上是典型的平台工程产品，早在“平台工程”概念兴起之前，Zadig 的平台工程实践就已经存在。在早期，由于市场对这一概念的认知不足，我们决定采用一个更易理解的定位，将 Zadig 定位为云原生的 CI/CD 平台。事实上，CI/CD 平台并不负责处理环境治理问题，而 Zadig 最早是从环境治理起步迭代的。最近，我们发布了商业产品 ZadigX，将其正式升级为 DevOps 价值链平台。</p><p>&nbsp;</p><p>尽管市场上有太多概念存在，但我们的核心目标始终不变，那就是将整个软件工程过程智能化，帮助企业实现数字化建设。我们希望在未来的发展中，工程师能够专注于高效的软件工程实践，发挥自身价值，而不仅仅是浪费时间与他人对齐、开会和争吵。对于企业而言，我们希望软件成为企业创新的内在动力，通过软件工程的数字化转型推动数字经济的发展，为各行各业提供快速、高质量、安全的数字化价值，提供更好的用户体验和客户服务。这是我们对产品愿景的期望。</p><p>&nbsp;</p><p>对于持续推进平台工程是否会导致工程师或开发者被平台或人工智能取代的问题，我认为这是一个相对简单、没有太多思考的提问。一个人的核心价值随着职业发展规划和技术趋势而不断进步，这是一个双向螺旋的迭代过程。在迭代过程中，不论你是开发工程师、测试工程师还是运维工程师，你都可以在垂直方向上进行专业能力的建设和持续能力的提升，更应该关注的是如何提供你的价值。如果一个职位容易被替代，那可能意味着这个岗位要么转变为更加熟练使用工具的人，要么它的生命周期就以不同的形式存在。例如，你可能会从测试转变为测试开发，或者从运维转变为关注基础设施的 SRE 或 DevOps。这与早年我们讨论的运维转向业务运维开发的逻辑是一样的。换句话说，你不再需要去操作机器，云服务提供商来处理那些事情。</p><p>&nbsp;</p><p>然而，提到这个话题时，隐含的意思是平台和 AI 有可能取代人类。在之前的讨论中，我们简单地探讨了这个话题，并且我们与 Google 的一些朋友也进行过深入的讨论。我的观点是，目前软件工程或软件系统的复杂度还没有达到完全被信息世界所表达的状态。尽管我可能表达得不够准确，但我的意思是它还没有完全被现实世界信息化的表达所取代。因此，它的迭代和推演更多地依赖于组织和技术的双向演进所产生的合力。所以，它本身并不是纯粹的技术演进问题。</p><p>&nbsp;</p><p>在相当长的一段时间内，如果被 AI 替代，那基本上可以理解为我们进入了下一个时代。因此，我核心观点的判断是，人类的创造力、好奇心以及对现实世界的感知和反馈能力，在相当长的一段时间内不会被 AI 所替代。所以，我个人并不感到焦虑，我也希望更多的工程师们不要感到焦虑。但是在不焦虑的情况下，我们应该更多地去拥抱这个新事物。为什么呢？因为从职业发展的角度来看，当别人已经骑上电动车时，你还在骑自行车是不可行的。</p><p>&nbsp;</p><p>另外，AI 确实是一个不容忽视的重要节点。所以，大家应该以一种新的思维方式去看待这个问题，看看能否将手边的一些事情交给那些可以靠高密度计算能力解决的部分，同时需要考虑全局架构，需要考验你的领导力等综合能力。我认为 AI 无法取代领导力，因为领导力是一个非常综合的概念。因此，你需要知道哪些是你独特的东西。AI 可以在一定程度上取代你的一部分工作，但相对来说还是单一的。还有一些东西，比如意识，到目前为止还没有定论，还没有达到那个阶段，但确实更高级别的知识密度和智慧正在涌现出来。</p><p>&nbsp;</p><p>长远来看，对于大家的职业发展建议，就像之前提到的，不管是工程师还是其他领域的人，都需要思考如何利用 AI 来提升自己的核心竞争力。无论如何，最终还是回归到价值本质上，思考自己到底能够创造什么价值。不要盲目跟从别人的意见，多动手实践，每个人都应该有自己的判断力。</p><p></p><h1>平台工程和 AI 对行业、从业者的影响分析</h1><p></p><p></p><h2>提问：平台工程发展趋势下，运维会失业？</h2><p></p><p></p><blockquote>所有新的趋势都是在老的模式下提供新的解决方案。平台工程的引入和发展使得运维工程师能够更好地扩展其支持的业务规模，专业属性和专业化程度越来越高。</blockquote><p></p><p>&nbsp;</p><p>杨振涛：在这个阶段，我们收到了一些观众的提问。有一个观众问到关于应用运维和业务运维的事情，我理解这个问题的背景是，一旦建立了平台工程，这些角色可能会失去任务或工作内容。</p><p>&nbsp;</p><p>Landy：实际上，所有这些新的趋势都是在老的模式下提供新的解决方案。因此，应用运维和业务运维这些岗位是永远存在的，只是它们的形态在不断迭代。工程师在这方面有两种属性，一种是面向业务形态，另一种是面向平台属性。这两种属性可以并行存在，而且在一段时间内可能会相互切换。所以，这些角色肯定不仅仅有平台工程的事情要做，主要的职责可能还是与其相关的业务运维或应用运维。</p><p>&nbsp;</p><p>杨振涛：是的，我能感受到大家对于这个问题的焦虑感。在过去的人肉运维时代，一个运维工程师可能只能支持一两个或两三个业务。但是现在，有了平台工程的存在，甚至在过渡期中，单个运维工程师支持的业务规模是持续增大的。也就是说，平台工程的引入和发展使得运维工程师能够更好地扩展其支持的业务规模。这样的变化确实带来了一些不确定性和焦虑，但也为运维工程师提供了更大的机会去适应和应对这种变化。</p><p>&nbsp;</p><p>Landy：相反地，随着业务范围的扩大，可以理解为这个职位的专业属性和专业化程度越来越高。换句话说，如果这个职位具有很高的可替代性，那么从本质上来说，它可能在今天或明天就会被取代。因此，人们不断努力拓宽自己的边界，将自己的职位不断迭代到更加有利于个人发展的状态。随着职位的发展，行业相关职位的薪资水平和职业发展路径也会有大幅度的提升。这种持续的进步有助于推动整个行业向前发展。</p><p>&nbsp;</p><p></p><h2>提问：平台工程是否更适合互联网？</h2><p></p><p></p><blockquote>在以互联网为代表的数字原生企业中，重点放在业务中台等领域的迭代上，而在行业场景中从事平台工程的迭代具有更大的意义。这些行业场景对一致性的要求更高，对基础设施管理和高质量、自动化的要求也更高。&nbsp;</blockquote><p></p><p>杨振涛：下一个问题是平台工程在金融制造场景是否有应用，还是说更适合互联网行业？</p><p>&nbsp;</p><p>Landy：就平台工程在哪些行业会更加成熟或具有应用场景这个问题，我认为实际上平台工程或类似的领域，并不特别敏感于行业属性的垂直度。它更关注于业务的安全性，更多关注于行业特定的安全、效率和合规等方面的特殊需求。但在共性需求方面，它本质上是一种工程，对行业并不挑剔。然而，在实践中肯定会有一些长短不一的情况。</p><p>&nbsp;</p><p>目前我观察到的平台工程更倾向于基于 DevOps 的能力向上延伸，或者说是基于链条的能力，即以封装或者更浅层次的平台形式存在。这种平台工程与工程本身仍然存在一定的距离。互联网行业的平台工程能力可能会相对较弱。原因可能在于互联网行业本身就是数字原生企业，或者是以数字经济为生的企业。这两类企业对平台工程的需求不同，数字原生企业更侧重于业务中台等领域的迭代。尽管早期它们也属于平台工程的一类，但垂直属性更加明显。因此，在更为严肃的行业中，我认为平台工程的迭代意义更为重大。这些行业对一致性的要求更高，对基础设施管理和质量较高的自动化要求更高。因此，我认为在传统行业中从事平台工程可能会更加稳健，不会过于急躁，而是经过深思熟虑后明确自己的目标。</p><p>&nbsp;</p><p></p><h2>提问：如何平衡长期对平台工程的投入和短期的业务优先级？</h2><p></p><p></p><blockquote>核心观点：平台的价值始终以业务为导向，平台工程团队的使命就是作为支持层，支撑各个业务的能力发展。评价业务平台工程团队成功的核心指标是业务对他们的认可和满意度，并且能够为各个业务带来共性价值。</blockquote><p></p><p>杨振涛：我们看到有一位观众分享了自己的观点。他说，短线产品价值和长线系统价值要靠开源来平衡，也需要对短线和长线两种价值进行两种不同的激励系统。我们怎么平衡长期对平台工程的投入和短期的业务的高优先级的开发任务？</p><p>&nbsp;</p><p>Landy：现在在业务迭代的过程中，很多公司通常只考虑业务需求，并且有时会纳入一些数据需求用于观测或为业务体验提供支持，以帮助老板做决策。然而，有一类非常重要的需求却没有得到认真评估，那就是技术需求。我的观点是，在每次大的迭代或一段时间内的结束时，应该评估技术需求。这些技术需求的依据应该来自业务的反馈，也就是说，你在处理了很多业务需求后，肯定要对这些问题进行复盘，包括事故和质量问题。复盘之后，你应该有一个结论，即确定这个问题最可能在哪个阶段解决。如果在架构期间需要关注它，那么你就要将一些技术需求纳入考虑范围。因此，平台的价值同样是由业务来决定，也就是说你需要证明平台的价值始终以业务为导向，而且能够体现业务价值的感受。但是，它需要通过不断迭代来实现。如果有一个平台工程团队，他们的使命就是作为支持层支持各个业务的能力发展，而业务团队则负责业务开发。</p><p>&nbsp;</p><p>对于如何评价平台工程团队的成功来说，核心指标就是业务对他们的认可，也就是他们的满意度很高，并且能够为各个业务带来共性价值。因此，你们两个团队的评价体系可能会有所不同。这已经到了一个相对的阶段，如果有独立的团队来负责平台工程；如果没有的话，那么这类平台工程很可能更多地依赖于对技术需求的评估时机：也就是说，当你的痛点明确，并且时机合适，而且老板的意识非常到位。在过去，他可能具备很高的素养和品味，我们就可以直接自上而下地推动这个过程，短期可能会有些阵痛，但中期会非常顺利，长期来看会展现出很高的远见。但是改革总是伴随着变革的阵痛，所以从上至下的人是有意识去面对的，但是从下至上的人大多不愿意承担责任。</p><p></p><h2>提问：平台工程团队的职能范围？</h2><p></p><p></p><blockquote>平台工程团队类似面向企业内部的 To B 服务商，他们需要提供面向业务的解决方案，包括制定相应的产品策略、市场推广等运营体系。&nbsp;</blockquote><p></p><p>杨振涛：我们再回答一个问题。平台建设和软性的体系建设是否都是平台工程团队的职责范围，我认为这个问题隐含了一个词，就是平台团队或者平台工程团队。因为我们知道在许多中大型企业中，都存在所谓的平台团队，但是大家对于平台团队的职责并没有非常明确的共识，每家企业可能都有自己的定义。这个问题聚焦在就这个团队而言，平台建设和软性的体系建设是否都是在这类似这种团队的职能范围？</p><p>&nbsp;</p><p>Landy：我认为任何平台从产品演化到平台阶段都需要具备解决问题的能力。作为一个内部团队（可以理解为平台团队），类似于面向企业客户的 To B 部门，你的服务对象是内部的各个团队，因此你必须提供相应的解决方案，包括制定相应的策略、推广等运营体系。可能性的路径：首先在某条业务树立一个标杆，然后进行更大规模的业务推广，并不断迭代和改进你的平台能力。从这个角度来看，它本质上是一个完整的 To B 循环。</p><p>&nbsp;</p><p>在我之前的公司，我负责平台工程的建设。最终团队成熟的形态有点像以流程变革为主导，用相应的工程平台来支撑（即平台工程），专门面向业务的服务化团队做下沉式服务（BP team）。BP 他们会不断整理技术需求，并对业务本身也非常了解。他们的目标是如何将平台和业务打通，实现效能平衡。最后很自然形成了一个改进循环，涵盖了“流程变革、工程沉淀、服务化（BP 化）“的三角形的闭环。</p><p>&nbsp;</p><p>因此，我认为这些建设都应该由平台团队承担，尽管在初期可能会有一些混乱，但这是很正常的，因为任何实践都需要时间去找到适合自己的方式。</p><p>&nbsp;</p><p>杨振涛：刚才提到的实践，其实也是我个人特别想问的一个不在计划内的问题。我们之前提到了平台工程，它倡导了一些实践方法，比如内部开发者平台、内部开发者门户以及开发者接口的自助能力等。平台级产品的引入可以改善开发者的体验，并提供丰富的文档供自助使用。另外，平台能力的接入以及上线后的自动运维等也是重要的考虑因素。然而，这些实践方法可能与你之前提到的需求存在一些矛盾，有时在特定场景下，确实需要一个业务合作伙伴来协助平台的导入。</p><p>&nbsp;</p><p>Landy：这是一个非常好的问题。就像任何产品一样，平台工程也经历了从零到一的建设阶段。我理解到目前为止，真正成熟的平台工程并不是很多，所以我描述的情况并不是指终态，而是我们希望达到的目标。当前的状态可能是混乱和孤立的，存在着流程不明确、冗余和一些难以解决的问题。这些问题包括企业内部的文化和组织问题。因此，这个终态是大家都希望实现的理想状态，即每个人都能够专心编写代码并感到开心，团队合作愉悦，工作不累且不需要加班。这是一个终极目标。</p><p>&nbsp;</p><p>然而，当真正实现自服务的时候，我们可能会对另一个问题产生怀疑。是否存在可能，像 ChatGPT 这样的生成式 AI 技术会将我们整个同化掉？因为一旦所有事物都可以被描述，它实际上可以生成新的模式。所以目前还存在许多人感到困惑，通过平台工程，我们试图降低这种混乱，将熵减少，并沉淀一部分能力，以便让所有角色都能发挥出核心价值。总的来说，这是一个相对能够达到的状态，至少是我目前认为可能实现的状态。</p><p></p><h2>提问：汽车制造业的 DevOps 开展的必要性和收益是啥？</h2><p></p><p></p><blockquote>内容提要：DevOps 并不是快速交付时才需要，目的是更好更有效的满足用户的需求。敏捷开发降低试错周期并提高成功的概率。在任何领域，不管是汽车制造企业还是其他行业，开展 DevOps 都是非常必要的。汽车制造是现代工业皇冠上的明珠，工程复杂度极高，通过平台工程可以降低成本、缩短科技研发时间。中国车企也正在软硬并行的推进 DevOps 建设和平台工程，以在全球范围内获得更大的优势和发展空间。</blockquote><p></p><p>&nbsp;</p><p>杨振涛：接下来我们进入答疑的环节，已经有不少的问题，我们来挑选一些。有一位观众说，能不能请老师聊一下汽车制造业的 DevOps 开展的必要性，或者说收益是啥？</p><p>&nbsp;</p><p>Landy：嗯，这让我想起了汽车领域，我曾经深入研究过汽车制造，因为造车并不是一件简单的事情。汽车可以说是现代工业皇冠上的明珠，它代表了完整的复杂度。我曾经花了大约三个月深入了解这个行业，并与一些客户合作，以获取关于这个行业的详细资料。实际上，汽车行业可以简单的分为两类，一类是新势力造车，一类是传统汽车制造商，很多会开辟新能源汽车领域。它们有着不同的战略打法和发展方式。</p><p>&nbsp;</p><p>关于 DevOps，我认为存在一个误区，即认为只有在需要快速交付时才需要 DevOps，以及只有在需要快速交付时才需要进行持续集成/持续交付（CI/CD）。这个观点本身是错误的。敏捷开发并不是为了让我们犯更多的错误，相反，敏捷开发的目的是降低试错周期并提高成功的概率。敏捷开发的理念包括一个很好的例子，就是\"四菜一汤\"的逻辑。当上菜时，如果四道菜和一碗汤都上来后发现全都很咸，那就没法改变了，这就是大规模交付的问题。然而，如果采用敏捷或者 DevOps 的方式交付，我会先尝一口汤，如果太咸了，厨房可以及时调整。这样，在一个小时内我就可以享受到四道菜和一碗汤，而且可以不断调整以满足我的口味。而那种一次性上齐的方式可能只需要 40 分钟或者 30 分钟上菜，但你会发现它不能满足用户的需求。所以，这是一个核心问题，就是要理解它是一个不同维度的问题。因此，在任何领域，不管是汽车制造企业还是其他行业，开展 DevOps 都是非常必要的。</p><p>&nbsp;</p><p>在车企领域，中国造车并没有核心的底层单点技术优势。要在市场占有率上获得优势，车企需要在差异化和成本优势方面下功夫。其中，平台工程和 DevOps 可以带来平台优势，尤其在成本和交付效率方面。举例来说，吉利集团的 SEA 浩瀚架构是一种硬件架构，可以理解为硬件工程的 DevOps。相比之下，我们更多地从事软件的 DevOps，因为只有通过这种平台工程，才能将成本优势最大化。与制造单车的成本相似，软件开发也遵循类似的原理。无论是制造一件产品还是开发软件，采用工程化的方式都会带来更高的效率、质量和迭代效果。我研究过的 SEA 浩瀚架构有四千多个 API，重新定义新三电。从硬件上支持从 A 级到 F 级车，是一种高度可扩展和自由弹性伸缩的硬件架构。实际上，DevOps 本身也提供了一种类似骨骼的能力，让你连接各种能力并建设各种能力。因此，在车企领域，我认为更需要进行这种 DevOps 实践。虽然这项工作难度较大，从企业收益的角度来看，通过平台工程降低造车成本是非常明确的目标。在我个人看来，如果能通过平台化的思想造车能大大的降低成本，让中国在全球范围内都具备更大的优势和发展空间。除此之外，其他优势可能很容易追平，但这个隐藏的优势非常重要。</p><p>&nbsp;</p><p>通过平台化造车可以降低成本、缩短科技研发时间，目前中国车企在硬件 DevOps 领域已投入大量资源。刚才提到的浩瀚架构，据估计大约花费了 180 亿。像极氪 X、极氪 001 和 smart 等车型，都是使用该架构作为支撑，这事其实非常有趣的。此外，在车企领域，整个研产供销服的全流程数字化、供应链的复杂度、难度都非常高。对于 C 端，可能涉及营销面向消费者的场景，例如相关的 APP 等。而对于 B 端，涉及到企业内部整个流程的数字化，以实现更好的衔接和服务。</p><p>&nbsp;</p><p></p><h2>提问：制造业信息化发展比较好的案例有哪些企业？</h2><p></p><p></p><blockquote>内容提要：信息化发展现状下，可以分为两类企业：一类是数字原生企业，像互联网大厂，另一类是利用数字技术提升行业生产效率的企业，它与行业成熟度和发展现状有关，制造业是我国重要发展方向，尤其像车企已经有大量的信息化尝试包括云原生、DevOps 等。并不能单纯以发展现状来评估是否前沿，制造业本身存在复杂度，是远远高于互联网形态的企业。成熟度方面，从企业内部迭代效率、组织的敏捷性以及业务的感知度来看，都还有很大的发展空间。</blockquote><p></p><p>&nbsp;</p><p>杨振涛：观众说总感觉信息化发展前沿还是以互联网大厂和移动端为主。那目前制造业信息化发展比较好的案例有哪些企业？</p><p>&nbsp;</p><p>Landy：嗯，就这个问题而言，我可能不能完全以大样本的方式回答，但可以通过一些自己的发现或者一些浅显的观点来探讨。我认为信息化发展主要包括信息化、数字化以及后续的智能化。刚才提到了互联网巨头或者互联网公司，它们本身就是数字原生企业。而我们更应该面向更有价值的场景，深入到产业和行业中去。要将数字化或者信息化提升到更高的层次。</p><p>&nbsp;</p><p>因此，可以将其分为两类：一类是数字原生企业，另一类是利用数字技术提高行业生产效率的企业。这似乎是信息化时代的发展趋势。但我更认为有价值的、真正积累价值的是在产业和行业中实现这种发展。而且，目前各行各业都在等待我们利用技术赋能它们，包括使用 Kubernetes 等技术。然而，各个行业的成熟度和现状各不相同，特别是在工业或者我认为在制造业方面，这是我国未来非常重要的发展方向。它需要利用数字能力、技术和工程能力来实现更好的发展。因此，从趋势上来看，大致是这样的理解。</p><p>&nbsp;</p><p>那么，哪些公司在这方面做得比较好呢？我认为刚才提到的平台工程中的案例，比如极氪，他们在这个领域相对较为出色。他们非常擅长做一些比较\"geek\"的工作，例如极氪全域数字化部门，提出数字战略“三化平台”，也就是平台工程商业化的体现，非常具备前瞻性。他们通过不断迭代这些平台来为业务的发展提供支持。然而，实践起来，造车的难度肯定很大，因为整个系统本身的复杂性很高。在制造业中，像他们这样走在前沿的公司可能会有一些相应的 DevOps 建设，包括蔚小理等公司。但是就成熟度而言，目前看来还没有达到一个相对成熟的状态。至少从内部的迭代效率、组织的敏捷性以及业务的感知度来看，都还有很大的发展空间。</p><p>&nbsp;</p><p></p><h2>提问：如何应对 AIOps 和 ChatGPT 对传统运维平台的挑战？</h2><p></p><p></p><blockquote>核心观点：AI 技术演进过程会对运维平台的形态会有变化，我们需要对技术保持敏感度，不断发挥更大的技术价值，同时根据个人擅长的领域去规划职业发展方向。AI 技术替代的更多的是事务性的低附加值劳动，反而随着应用规模会越来越大，运维需求更加多样，岗位价值会越来越高。</blockquote><p></p><p>&nbsp;</p><p>杨振涛：时间关系，我们再来挑选最后一个问题来回答，这个问题其实我们之前有提到一部分，观众提问说 AIOps 和 ChatGPT 对传统运维平台有啥挑战，大家如何面对这些变化？学习转型，感觉越来越全栈化。焦虑感十足。</p><p>&nbsp;</p><p>Landy：实践出真知，我们还是具体来看到底改变了你的哪些方面，不能臆想出一个人工智能来替代我，比如在运维领域它能做什么。我们可以列举一些实际应对变化的例子，确实会逐步朝某种形态发展。因为任何一个平台都不是静止的，不可能说你公司买了一个叫做\"AIOps\"的平台后你就下岗了，这是不可能的。它是有一个演进过程的，在这个演进过程中，首先要对技术保持敏感度，另外要勇于尝试新事物，抱着试试看的态度，它能带来价值，那你就获得了价值；如果没有带来价值，你也看清了真相。所以我认为作为工程师，我们要一直运用自己最擅长的东西，进行实践，采用这种方法论去做事情。我确实看到很多公司对运维岗位有一种泛化的趋势，上一期提到业务运维、平台运维，还有一些 DevOps 或 SRE，边界不是特别明确。</p><p>&nbsp;</p><p>我的建议是，对于那些想在技术领域发展的同学，可以向云原生方向转型。而如果你对公司业务非常了解，并且具备架构等能力，可以朝平台架构的方向发展，这两个方向都可以。目前我还没有看到太多关于运维平台的相关技术方面的挑战，相反，在代码生成方面，比如 ChatGPT 和 Codex，对于开发工程师的提效会有一些帮助。我认为对于传统的运维平台或者运维工作来说，你可能要面对的应用规模会越来越大，运维需求更加多样。为什么呢？因为人工智能带来了新的应用场景。所以它离你还有一段距离，如果非要推翻谁的命运，那么先影响到开发者，然后再到运维，因为运维的复杂度更高一点，相对来说会比较晚一点。</p><p>&nbsp;</p><p>杨振涛：其实从整个行业的发展规律或者说轨迹来看，运维的单个的人效是持续在提升的。</p><p>&nbsp;</p><p>Landy：非常认同，所谓的职位的垂直化和专精化程度越来越高，也就意味这个岗位的价值越来越高。</p><p>&nbsp;</p><p>杨振涛：好的，对于运维的同学们也不需要过于焦虑。我们的嘉宾李倩老师给出了很多关于学习、发展和转型的建议，非常感谢她和所有观众的参与。平台工程主题系列的三期直播访谈今天全部结束了，但平台工程仍将持续演进，我们也将继续关注。欢迎大家在我们的平台工程技术群中进行进一步讨论、交流，以及分享各自团队的实践经验。今天的直播到此结束，谢谢大家的参与。</p><p>&nbsp;</p><p>Landy：谢谢大家，非常高兴跟各位探讨。</p><p>&nbsp;</p><p>嘉宾简介：</p><p>李倩，KodeRover 创始人兼 CEO，开源持续交付产品 Zadig 作者，前七牛云工程效率部研发总监。</p><p></p><p>杨振涛，vivo 互联网研发总监，目前关注开源治理、技术社区与工程文化建设。具有 15 年多个领域的软件研发经验，此前先后从事生物信息与基因测序领域的科研工作、电商与 IM 架构以及搜索引擎研发。开源技术与技术传播爱好者，先后参与和负责 Circos、Redis、Jenkins、Elasticsearch 等社区的本土化，也是 TED Translator &amp; Reviewer。为了更加系统地收集并记录平台工程主题的技术趋势及发展历程，我整理并创建了一个 awesome list 供大家参考，欢迎各位参与贡献和维护。Github 地址：<a href=\"https://github.com/toptechevangelist/awesome-platform-engineering%E3%80%82\">https://github.com/toptechevangelist/awesome-platform-engineering。</a>\"</p><p>&nbsp;</p>",
    "publish_time": "2023-06-05 15:28:21",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "阿里巴巴 GTS 资深技术专家朱超健确认担任 ArchSummit 深圳专题出品人并演讲",
    "url": "https://www.infoq.cn/article/CmUUzJVxfkqSY7kBqVjF",
    "summary": "<p>7&nbsp;月&nbsp;21&nbsp;日&nbsp;-&nbsp;22&nbsp;日，&nbsp;在&nbsp;<a href=\"https://archsummit.infoq.cn/2023/shenzhen?utm_source=infoqweb&amp;utm_medium=teacherarticle&amp;utm_campaign=8&amp;utm_term=0531\">ArchSummit&nbsp;全球架构师峰会（深圳站）</a>\"，阿里巴巴&nbsp;GTS&nbsp;资深技术专家朱超健，将担任「可观测性与智能运维」的专题出品人，在此次专题中，你可以学习到可观测性在实践中的具体体现，了解到基于可观测性的智能化运维如何发挥更好的价值。</p><p></p><p>朱超健拥有十年互联网行业技术经验，专注于运维、安全、网络，具备丰富的运维平台产品建设经验，早期就职于安全公司，经历了从传统安全模式到云环境安全体系的运维工具平台建设及落地；后就职阿里云，经历了云技术快速发展的关键时期，有从云平台底层到业务最上层的全链路专家经验，洞察运维平台关键点，长期专注智能运维领域，从事技术服务工作，聚焦金融、互联网、教育、泛娱乐等行业客户，基于客户业务打造托管式的云上智能运维解决方案，擅长用云最佳实践、产品管理、研发管理、业务重保、疑难问题攻坚等。</p><p></p><p>朱超健也将在大会上发表题为《云环境下的企业运维平台演进历程》的主题分享，探讨处于不同阶段企业运维过程中的挑战与痛点，了解集团用云在智能化、微服务化、稳定性等方向的最佳实践。</p><p></p><p>除上述专题外&nbsp;，ArchSummit&nbsp;深圳还将围绕<a href=\"https://archsummit.infoq.cn/2023/shenzhen/track/1537?utm_source=infoqweb&amp;utm_medium=teacherarticle&amp;utm_campaign=8&amp;utm_term=0531\">基础架构技术</a>\"、<a href=\"https://archsummit.infoq.cn/2023/shenzhen/track/1536?utm_source=infoqweb&amp;utm_medium=teacherarticle&amp;utm_campaign=8&amp;utm_term=0531\">智能化数据治理</a>\"、<a href=\"https://archsummit.infoq.cn/2023/shenzhen/track/1532?utm_source=infoqweb&amp;utm_medium=teacherarticle&amp;utm_campaign=8&amp;utm_term=0531\">DataOps、Data&nbsp;Fabric&nbsp;等高效数据开发与服务模式</a>\"、<a href=\"https://archsummit.infoq.cn/2023/shenzhen/track/1534?utm_source=infoqweb&amp;utm_medium=teacherarticle&amp;utm_campaign=8&amp;utm_term=0531\">Mesh&nbsp;技术实践案例</a>\"、<a href=\"https://archsummit.infoq.cn/2023/shenzhen/track/1535?utm_source=infoqweb&amp;utm_medium=teacherarticle&amp;utm_campaign=8&amp;utm_term=0531\">QUIC&nbsp;传输和架构优化</a>\"等进行分享。</p><p></p><p>数十位业界专家，上百个国内外一线大厂前沿技术案例，一定会给你带来很多全新的开发灵感。期待与你线下交流！&nbsp;现在购票，享&nbsp;8&nbsp;折特惠，立省&nbsp;¥1760！咨询购票请联系&nbsp;18514549229（微信同手机号）</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/9d/9d6a27547062ee2e089f91bdc4ba1eaa.png\" /></p><p></p><p></p><p></p><h4>【直播推荐】</h4><p></p><p>本周三（6.7）晚&nbsp;20:00，我们特邀&nbsp;Mobvista&nbsp;技术&nbsp;VP&nbsp;蔡超，科大讯飞&nbsp;AI&nbsp;研究院副院长&nbsp;李鑫，共同探讨&nbsp;AI&nbsp;大模型时代，架构师面临哪些机遇和挑战？更有&nbsp;ArchSummit&nbsp;深圳站精彩专题提前剧透！知识豪礼任性送！</p><p>扫码预约直播，戳此查看&nbsp;&gt;&gt;&gt;&nbsp;<a href=\"https://archsummit.infoq.cn/2023/shenzhen/speaker?utm_source=0607as&amp;utm_medium=zhibo\">ArchSummit&nbsp;深圳站讲师阵容</a>\"</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/59/59c9053a8407d1597bd0e7023a466634.png\" /></p><p></p>",
    "publish_time": "2023-06-05 15:55:07",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "抗拒使用GPT-4和Copilot写代码，拥有19年编程经验的老程序员“面试”被淘汰",
    "url": "https://www.infoq.cn/article/aCtNDBJttaNPE07i6xIw",
    "summary": "<p></p><blockquote>一个成本低速度快，一个代码质量高程序可扩展性好，你会怎么选？</blockquote><p></p><p>&nbsp;</p><p>一位名叫Ab Advany的技术人员最近接了个小活儿，帮他的一位好友在其工作单位监督编程案例研究。这项案例研究总共花了两周时间，他们聘请了两名程序员为其创建最小可行产品（MVP）。</p><p>&nbsp;</p><p>这两名程序员都是为该机构工作了很长时间的承包商。Ab Advany之前也曾与二人合作，对两人的背景十分了解。首先是来自德国的Alex，拥有19年编程经验，采取100%纯手动编程。来自巴基斯坦的Hamid仅拥有4年开发经验，在编程中采用了手写代码+Copilot+GPT-4+无代码开发。</p><p>&nbsp;</p><p>Ab Advany表示他们原本以为Hamid大概能在8到10周内完成工作，而Alex可能要多花上1、2周时间。但最终结果却令他们大为意外！Hamid在一周之内完成了此项目，端到端测试与测试覆盖率均达到100%；Alex则只完成了7%。Hamid的开发总成本为3819美元，Alex的开发成本则为3520美元。</p><p>&nbsp;</p><p></p><h2>让不使用AI的老程序员出局？</h2><p></p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/32/32a8b85e23e7a5ba88276b0cedf96d0c.png\" /></p><p></p><p>具体来说的话，两位程序员都收到了Figma设计要求和详细规格。设计师会帮助他们获取所需资产，外加需要集成的现有代码。</p><p>&nbsp;</p><p>Hamid在一周之内就完成了首个版本，代码测试覆盖率和无代码部分的端到端测试均达到100%。95%的工作量似乎已经完成，而且基本看不出有什么问题……</p><p>&nbsp;</p><p>Hamid在@bubble中构建了UI和前端工作流，使用GPT-4生成Cloudflare Workers，使用Copilot集成现有代码，并使用GPT-4来生成测试。</p><p>&nbsp;</p><p>Hamid的开发成本细则：</p><p>&nbsp;</p><p>GPT-4: 211美元</p><p>Copilot: 20美元</p><p>Cloudflare: 5美元</p><p>Bubble: 134美元</p><p>总计: 2460美元 (共41个工时)</p><p>托管/运行成本：每月139美元</p><p>&nbsp;</p><p>Alex完成了总工作量的约7%，成本为：</p><p>&nbsp;</p><p>Vercel: 20美元</p><p>总计: 3500美元</p><p>开发所有内容的预期成本：4.5万美元。预计额外还需要1.1万美元进行测试。</p><p>托管/运行成本：每月20美元</p><p>&nbsp;</p><p>Ab Advany的好友跟Alex交流了研究感受，对方的结论是“但纯手动开发的应用运行成本要低得多，而且一切都在自己的掌握当中。”Alex显然没理解13倍的产品发布速度和1/25的开发成本到底意味着什么。</p><p>&nbsp;</p><p>他们让Alex出局了：因为他只相信手动编码，而不愿借助无代码/AI的力量……而Hamid则收到了该公司全职工作的邀请：他将培训其他程序员，让大家结合无代码+AI进行编码……</p><p>&nbsp;</p><p></p><h2>拉仇恨？！</h2><p></p><p>&nbsp;</p><p>Ab Advany将这个事情分享到了Twitter，他很好奇这样的比对会带来怎么样的结果。</p><p>&nbsp;</p><p>他还在Twitter线程里补充道：“我朋友所在的机构有100多位像Alex这样的开发人员。现在，他们打算对老程序员做重新培训，甚至用Hamid这种新兵取代他们……我觉得Hamid这类开发者五年之后也仍然不愁工作岗位，但Alex所代表的群体可能会被迫跳槽或者转行。大家怎么看？”</p><p>&nbsp;</p><p>案例发布后，大家对他进行了更仔细的问询：</p><p>&nbsp;</p><p>网友A：“为什么 Alex 不想使用这些工具？我从 1986 年开始编程，我就很喜欢使用 Copilot、ChatGPT 这些，它们让我的生活更轻松……”</p><p>&nbsp;</p><p>Ab Advany：“你阅读完这个Twitter线程的话，你会看到许多传统程序员对‘为什么不使用AI’的答复。其中比较重要的一点是，当前的 AI 有上下文限制。因此，要使其工作，我们需要进行函数式编程。”</p><p>&nbsp;</p><p>网友B：“用 GPT-4 武装的 Alex（老程序员） 会是一个更好的解决方案。难道只有我这样觉得吗？”</p><p>&nbsp;</p><p>Ab Advany：“Alex 不想使用 GPT-4。他认为会产生错误的代码。特别是这意味着 Alex 需要适应 AI，而不是 AI 适应 Alex。”</p><p>&nbsp;</p><p>同时Ab Advany也收到了非常多的反方意见：</p><p>&nbsp;</p><p>“当然，对于简单的项目、网站/应用程序等，你可以得出这个结论。但对于具有更高复杂度的新颖解决方案，你不应该运行你不理解的代码，它关乎到开发者的声誉。如果它们存在安全漏洞，甚至有相关法律责任，该怎么办？”</p><p>&nbsp;</p><p>“对于构建可扩展和可维护的长期关键任务项目，我会选择 Alex。”“解雇Alex是错误的举动。”</p><p>&nbsp;</p><p>“散布这样的谎言，你能得到什么？在营销吗？此外，这样的比较甚至没有提到代码质量。将来你肯定要为质量、性能和可维护性付费。”“可能有些人真不在乎代码质量吧？”</p><p>&nbsp;</p><p>……</p><p>&nbsp;</p><p>不出所料，仅两天后，他发了条新推文：“我的推文引起了程序员们的强烈不满。”</p><p>&nbsp;</p><p>更要命的是他的推文配图，“RIP，传统程序员”。他坚持认为大家必须更好地评估问题并选择正确的前进方向。因为太过激进，所以他得到了网友们对他进一步的评价：“真是越来越让人讨厌了！”</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/de/deae8ae9c7d82e73709c2ec012fe7e4f.png\" /></p><p></p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e0/e0940ec98129cd180a808bbbbc7f2f84.jpeg\" /></p><p></p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p></p><h2>抗拒AI辅助编程会是一场“必败仗”吗？</h2><p></p><p>&nbsp;</p><p>基于大型语言模型的 AI 工具，比如OpenAI Codex ，或来自微软的 GitHub Copilot ，亦或来自谷歌 DeepMind 的 AlphaCode，已经开始改变许多开发者的工作方式。虽然目前它们只可以用来编写代码片段、发现错误、编写注释、提供建议等，但这并不妨碍让大家见识到它的威力。</p><p>&nbsp;</p><p>去年，谷歌的研究人员发现，人工智能将“编码迭代时间”减少了 6%，这份研究主要针对谷歌内部的10,000&nbsp;名开发人员。</p><p>&nbsp;</p><p>GitHub 去年也调查了 2,000 名程序员，了解他们如何使用 GitHub 的 AI 编码助手 Copilot。大多数人表示 Copilot 帮助他们减少挫折感并增加成就感；88% 的人表示这提高了他们的工作效率。在报告中，GitHub说道：“使用 Copilot 辅助编程的开发人员完成任务的速度明显更快——比不使用它的快 55%。”</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f8/f8cf7b496c9788de464de1e4e6f9df1c.png\" /></p><p></p><p>&nbsp;</p><p>虽然生成式 AI 模型和工具还在改进中，但一点也不影响其普及速度，越来越多的开发者开始使用它们。以GitHub Copilot为例，微软于 2022 年 6 月首次面向个人推出该工具时，平均有超过 27% 的开发人员代码是由 GitHub Copilot 生成的。到了今年5月，微软再次统计时，这个数字已经变成了46%——而在 Java 编程语言环境中，这个数字跃升到了 61%。</p><p>&nbsp;</p><p>所以GitHub大胆断言，“鉴于这项技术可以帮助开发者加快构建速度，所以展望未来，不采用生成式人工智能工具的科技公司将在生产力方面处于明显劣势。”</p><p>&nbsp;</p><p>Ab Advany分享的案例，也许这并不是让我们单纯地比较哪个方案更好，而是让我们明白，我们已经有了很多选择，AI、低代码等工具都可以用来解决部分问题，那么该是时候让我们再次评估如何让开发人员进一步专注于核心业务逻辑、减少底层开发、让大家更高效更轻松地工作了。</p><p>&nbsp;</p><p>至于AI辅助编程是不是未来发展方向？这就像一位网友给Ab Advany的评论中那样：“纯粹的非AI辅助编程工程师在这里是在打一场必败仗，这很明显……现在谁会在没有Copilot 的情况下编写代码呢？”</p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://twitter.com/advany/status/1664451798793584642\">https://twitter.com/advany/status/1664451798793584642</a>\"</p><p><a href=\"https://archive.ph/o21uE#selection-819.4-819.11\">https://archive.ph/o21uE#selection-819.4-819.11</a>\"</p><p><a href=\"https://github.blog/2022-09-07-research-quantifying-github-copilots-impact-on-developer-productivity-and-happiness/\">https://github.blog/2022-09-07-research-quantifying-github-copilots-impact-on-developer-productivity-and-happiness/</a>\"</p><p><a href=\"https://github.blog/2023-05-09-how-companies-are-boosting-productivity-with-generative-ai/\">https://github.blog/2023-05-09-how-companies-are-boosting-productivity-with-generative-ai/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/HFSPasQ7SXZ9QzdFXhGO\">GPT-4 重磅发布，吊打 ChatGPT！编程能力牛到让我睡不着：10 秒做出一个网站，1 分钟开发一个游戏</a>\"</p><p><a href=\"https://www.infoq.cn/article/ZRjMrDXcL4XPskS7CgzJ\">集成 GPT-4 的编程神器来了，GitHub 发布 Copilot X：编程 30 年，突然就不需要手敲代码了？！</a>\"</p>",
    "publish_time": "2023-06-05 16:11:45",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "SeaTunnel毕业！首个国人主导的数据集成项目成为Apache顶级项目",
    "url": "https://www.infoq.cn/article/5IQEJ5QdztMBKrYDt7yW",
    "summary": "<p>北京时间 2023 年 6 月 1&nbsp;日，全球最大的开源软件基金会 Apache Software Foundation（以下简称 ASF）正式宣布 Apache SeaTunnel 毕业成为 Apache 顶级项目(TLP, Top Level Project)。这是首个由国人主导并贡献到 ASF 的大数据集成领域的顶级项目，这一里程碑的达成标志着 SeaTunnel 在开源软件开发领域的突破，并为其在技术、社区合作和开放创新方面的卓越表现获得了广泛认可。</p><p></p><p>Apache SeaTunnel 原名 Waterdrop，在 2021 年 10 月更名为 SeaTunnel 并申请加入 Apache孵化器。目前 Apache SeaTunnel 已发布 40+个版本，并在大量企业生产实践中使用，广泛应用于海量异构数据集成、CDC 数据同步，SaaS 数据集成以及多源数据处理等场景中。</p><p></p><p>2021 年 12 月 9 日，&nbsp;Apache SeaTunnel 以全票通过的优秀表现正式成为 Apache 孵化器项目。2023 年 5 月 17 日，Apache 董事会通过 Apache SeaTunnel 毕业决议，结束了为期 18 个月的孵化，正式确定 Apache SeaTunnel 成为 Apache 顶级项目。</p><p></p><p></p><h2>关于 Apache SeaTunnel</h2><p></p><p></p><p>Apache SeaTunnel 是新一代高性能、分布式、海量数据集成工具，支持上百种数据源 ( Database/Cloud/SaaS ) 支持海量数据的实时 CDC 和批量同步，可以稳定高效地同步万亿级数据。</p><p><img src=\"https://static001.geekbang.org/infoq/a8/a8340b201aaeee8fbdc32cc41a9b54ff.png\" /></p><p>Apache SeaTunnel 技术架构图</p><p></p><p>作为超高性能分布式数据集成工具，Apache SeaTunnel 整体的特征和优势包括：</p><p>支持上百种数据源、传输速度快、准确率高；降低复杂性，基于 API 开发的连接器能兼容离线同步、实时同步、全量同步、增量同步、CDC 实时同步等多种场景；简单易用，提供可拖拽和类 SQL 语言界面，节省开发者更多时间 ，提供了作业可视化管理、调度、运行和监控能力。加速低代码和无代码工具的集成 ；简单易维护，支持单机 &amp; 集群部署，如果选择 SeaTunnel Zeta 引擎部署，无需依赖 Spark、Flink 等大数据组件。</p><p></p><p>在社区发展方面，Apache SeaTunnel 在 ASF 孵化期间，从最开始的几万行代码发展到现在 25&nbsp;万行代码，共计创建了 2920+ 个 PR，合并 2850+ 个 PR。目前，SeaTunnel 在 GitHub 上 Star 数达 5.1 k+，社区达到 5000+ 人规模，贡献者 180+ 人。</p><p></p><p>在用户方面，Apache SeaTunnel 现已广泛应用于互联网、金融、零售、出行、智能家居、云服务等各行各业中，在海量数据集成、实时异构数据同步、数据聚合以及多源数据聚集等场景中，可高效地处理数万亿条规模以上的数据。</p><p></p><p>更多信息：</p><p><a href=\"https://mp.weixin.qq.com/s/NPC-Ll76UNdjTvXFKnFYLw\">SeaTunnel毕业！首个国人主导的数据集成项目成为Apache顶级项目</a>\"</p>",
    "publish_time": "2023-06-05 16:35:26",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Apache Doris 用户案例集",
    "url": "https://www.infoq.cn/article/XbUk5y5MPBiyGYwHmOik",
    "summary": "<p>过去的一年势必是 Apache Doris 在发展历程中有着浓墨重彩的一年，凭借对技术创新的执着与用户体验的追求，Apache Doris 已俘获全球范围内超过 2000 家企业的认可，拥有了极为广泛的用户规模、在企业实时数据分析的多种场景中得到广泛应用，并在广大社区用户和开发者的支持下，一举成为全球数据库和大数据领域最为活跃的开源项目之一。<br />\n为了帮助更多人更好地使用 Apache Doris ，我们从过去一年间 Apache Doris 在互联网、金融、物流、零售等众多行业的用户应用实践中，精心挑选出更具代表性和更具启发意义的最佳实践，并收录在《Apache Doris 用户案例集》中。<br />\n目录：<br />\n01｜<strong>Apache Doris 在 360商业化的统一 OLAP 应用实践</strong><br />\n02｜<strong>万亿数据秒级响应，Apache Doris 在 360数科实时数仓中的应用</strong><br />\n03｜<strong>千万数据计算时间缩短 40 倍，橙联基于 Apache Doris 的数仓架构建设实践</strong><br />\n04｜<strong>叮咚买菜基于 Apache Doris 统一 OLAP 引擎的应用实践</strong><br />\n05｜<strong>复杂查询响应速度提升10+倍，度言软件基于 Apache Doris 实时数仓建设实践</strong><br />\n06｜<strong>赋能直播行业精细化运营，斗鱼基于 Apache Doris 的应用实践</strong><br />\n07｜<strong>从 Clickhouse 到 Apache Doris，慧策电商 SaaS 高并发数据服务的改造实践</strong><br />\n08｜<strong>杭银消金基于 Apache Doris 的统一数据查询网关改造</strong><br />\n09｜<strong>并发提升 10 倍，领健从 ClickHouse 和 Kudu 到 Apache Doris 数仓升级实践</strong><br />\n10｜<strong>助力传统行业数字化革新，Apache Doris 在美联物业的数据仓库应用实践</strong><br />\n11｜<strong>查询提速 20 倍，Apache Doris 在 Moka BI  SaaS 服务场景下的应用实践</strong><br />\n12｜<strong>从 ClickHouse 到 Apache Doris，腾讯音乐内容库数据平台架构演进实践</strong><br />\n13｜<strong>Apache Doris 在小米亿级用户行为分析平台的实践</strong><br />\n14｜<strong>查询性能显著提升，Apache Doris 向量化版本在小米A/B实验场景的调优实践</strong><br />\n15｜<strong>小米 A/B 实验场景基于 Apache Doris 的查询提速优化实践</strong><br />\n16｜<strong>人群圈选效率提升 30 倍，云积互动基于 Apache Doris 构建统一数仓的实践</strong><br />\n17｜<strong>一文揭秘字节跳动基于 Apache Doris 的实时数仓探索</strong><br />\n18｜<strong>打破数据孤岛，Apache Doris 助力纵腾集团快速构建流批一体数仓架构</strong></p>",
    "publish_time": "2023-06-05 16:45:22",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "QCon 广州五场闭门会，深度交流企业研发、DevOps与平台工程、成本优化与稳定性等话题",
    "url": "https://www.infoq.cn/article/KLKfsTYPp305kvB6cj6x",
    "summary": "<p>闭门会对于深度交流来说是一个非常有益的形式。它提供了一个私密、安全、宽松的环境，让与会者能够在没有干扰和压力的情况下自由地交流、深入探讨和讨论敏感或复杂的议题。这种环境能够激发与会者的思维，促进他们分享观点、经验和解决方案。</p><p>&nbsp;</p><p>在刚刚过去的QCon 全球开发者大会（广州站）上，InfoQ特别策划了了五场闭门会议顺利落地，为与会者提供了一个独特的交流平台。这些闭门会议为来自不同领域的专家和开发者提供了一个汇聚的场所，共同讨论和探索与开发者社区相关的重要议题。</p><p>&nbsp;</p><p>首场闭门会以《<a href=\"https://www.infoq.cn/article/EMqUNaySjj3G8UAmHCoE\">企业在 LLM、AIGC 浪潮下的研发探索</a>\"》为主题。参与嘉宾有深入讨论了企业有在探索LLM、AIGC落地探索，特选取部分嘉宾观点供你参考。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/80/808360ea04b9dc64747f84296c3b3b43.jpeg\" /></p><p></p><p>得到&nbsp;CTO&nbsp;快刀：现在AI非常火，许多团队预期非常高，我们应该适当降低预期。目前在得到，通过大模型的使用可以提升电子书上架效率，原来10个人，每天仅仅能够上线200本书，现在一天可以上线1万本书，自动化测试可以每天测5000本书。他提到内部提效的东西相对较为容易可以做出来；阳光保险科技研究院副院长张晗：小创新大厂赢，大创新小厂赢，AIGC 类型的革命性创新，对于小厂来说是巨大的机会。目前公司AIGC 实践正在做一个传统销售的机器人，投产开发到第二期了；麦当劳中国数字化副总裁汤海涛：麦当劳与互联网公司不同，我们的技术团队既充当与外部供应商的甲方沟通的角色，又以乙方身份与内部同事和业务部门交流。我们正在努力尝试一些内部方案，例如建立统一的知识库解决文档管理问题，并希望通过AI助理为员工提供支持，解答问题和提供培训。</p><p>&nbsp;</p><p>第二场闭门会议于主题为《<a href=\"https://www.infoq.cn/article/4uHEPy7XI5ORkaTTiZXN\">DevOps vs 平台工程</a>\"》，必要性和 ROI 探讨。会议聚焦于你如何看待 DevOps与平台工程的关系、你认为是否有必要上平台工程？投入产出比怎么样？以及平台工程的落地难点等问题进行深入交流，以下为精彩摘要：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f7/f7a9fac33999697a391834dc72445172.jpeg\" /></p><p></p><p>华为云&nbsp;PaaS产品总监汪维敏：仅仅开发工具是不够的，我们需要将其以商业化的方式进行开发，以实现产品的精品化。了解方法论对于成功开工具至关重要。平台工程与DevOps相互关联，共同推动研发效能的提升；众安保险工程效能高级专家刘星辰：众安保险在研发运维方面建立了一套完善的体系，并通过科技公司的商业化输出来扩大影响。DevOps与平台工程的关系是相互补充的，DevOps关注整个从需求到上线的流程，而平台工程则为开发者提供自动化和产品化的服务；数澈科技联合创始人江鹏：对于Devops的理解在不同公司和行业之间存在差异。个人认为，Devops更像是一种文化，旨在推动研发和运维部门之间的协作，提高交付应用业务价值的速度。</p><p>&nbsp;</p><p>第三场闭门会议关注《<a href=\"https://www.infoq.cn/article/ShUXt8wQpm9Zc17dXxDg\">破解成本优化后的稳定性问题</a>\"》话题。与会者广泛讨论了公司对于稳定、效率、成本的取舍？降本之后，遇到了哪些稳定性的问题？以及在成本优化的背景下，如何通过技术手段保障稳定性？等问题。以下为部分嘉宾精彩观点：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/82/821c8b9b0cf4f284043d45334f20098e.jpeg\" /></p><p></p><p>虎牙基础架构总监王兴刚：目前的重点是提高效率，尽管作为技术部门负责人，成本仍然是重要因素。同时，要满足领导对效率的要求，你需要承担提高效率和降低成本的责任。在成本压力下，业务稳定性的要求有所降低，但仍需保证在不影响核心业务的前提下达到一定水平；B&nbsp;站高级技术总监张靖：在做成本优化方面，我们采取了三个步骤。首先，我们花了很多时间去计算降低成本的方法，包括服务器的采购成本和分摊逻辑，以及数据存储等。其次，制定了指标和资产运营统计的工作等。最后是一些治理的手段；神州泰岳事业部总经理王远航：交付质量如何持续提升、员工工作压力增大如何调节的问题突出。但降本增效的压力也驱动我们要引入更高效能技术应用，如：AI相关、低代码相关、数字化转型相关等。</p><p>&nbsp;</p><p>第四场闭门会议，则重点讨论了《<a href=\"https://www.infoq.cn/article/2SKxCHfga7XBmatYS0oW\">金融行业数据治理</a>\"》。与会者深入分析了针对不同监管部门发布的不同标准，你们是如何应对的？你们是如何尽可能地解决数据孤岛问题的？数据质量参差不齐，大家是如何通过技术手段解决的？等问题。以下为部分精彩观点：</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/71/71ac65d4f2dca76a9f3343485e4acd06.jpeg\" /></p><p></p><p>众安国际Fundamental&nbsp;Tech&nbsp;VP李龙：首先是内部需要有理解监管，而且为业务目标共同努力的联合团队；第二点，需要实时了解监管动态；第三，落地的时候，需要充分的保护好企业，进行相关证明材料、法律意见的存档；数果智能创始人兼&nbsp;CEO&nbsp;王劲：数据质量的关键在于回归到业务平台。从业务角度出发，大家需要确定基于特定场景和业务的数据指标体系，进行梳理和定义。通过分析，将整个数据链路串联起来，并在每个节点实现管控和监控；平安资管科技平台交易系统团队开发组负责人李杨：数据治理涉及数据质量、数据标准和数据安全。其中，数据质量指标包括一致性、完备性、完整性、及时性和有效性等。通过交叉验证和调度平台生成数据质量报告，满足对数据质量的要求和监控。</p><p>&nbsp;</p><p>最后一场闭门会议，聚焦于《业务出海的架构、合规和运营问题》。与会者就出海业务遇到的最困难的问题是什么？是如何解决的？从合规出发要做的事情分为几类？技术怎么去保障？等问题出发展开讨论。不过非常遗憾，由于合规要求，本次闭门会的内容仅供内部参考，不可对外发布。</p><p>&nbsp;</p><p>详细精彩观点，可点击每个文章的超链接进行查看，希望对你有所启发。这些闭门会议为与会者提供了一个宝贵的机会，深入探讨和交流各自领域内的重要问题。InfoQ 希望这些讨论能够推动行业发展，促进创新和进步。更多精彩闭门会，请关注 InfoQ 会议。</p><p></p><h5>活动推荐：</h5><p></p><p>2023 年 9 月 3 - 5 日，在北京·富力万丽酒店， QCon 全球软件开发大会（北京站）已开启，现已开启售票，提前订票，可享受7折早鸟价，购票参会可以直接电话 / 微信联系票务经理 18514549229。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/e2/e2cc6621bc634e6d3fcacee922604626.jpeg\" /></p><p></p>",
    "publish_time": "2023-06-05 17:20:40",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "精选一线企业最佳生产实践，《Apache Doris 用户案例集》重磅发布！",
    "url": "https://www.infoq.cn/article/2824c76453bc9cc48fcd391b5",
    "summary": "<p>过去的一年势必是 Apache Doris 在发展历程中有着浓墨重彩的一年，凭借对技术创新的执着与用户体验的追求，Apache Doris 已俘获全球范围内超过 2000 家企业的认可，拥有了极为广泛的用户规模、在企业实时数据分析的多种场景中得到广泛应用，并在广大社区用户和开发者的支持下，一举成为 全球数据库和大数据领域最为活跃的开源项目之一。</p><p></p><p>为了帮助更多人更好地使用 Apache Doris ，我们从过去一年间 Apache Doris 在互联网、金融、物流、零售等众多行业的用户应用实践中，精心挑选出更具代表性和更具启发意义的最佳实践，并收录在 《Apache Doris 用户案例集》 中。</p><p></p><p>目前《Apache Doris 用户案例集》已在全网重磅上线！扫描下方海报二维码，即可<a href=\"http://forum.selectdb.com/t/topic/621\">免费下载</a>\"完整案例集（PDF 版）！</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/64/64178c23005cb93c0d1d85b3b61e5d00.png\" /></p><p></p><h1>实体案例集免费领</h1><p></p><p>《Apache Doris 用户案例集》是一本值得收藏的实践手册，为回馈社区小伙伴的长期支持与鼓励，我们同样制作一些精美的实体版案例集赠予社区小伙伴们，领取步骤如下：</p><p></p><p>转发上方「案例集海报」至朋友圈，并集齐 39 个赞将转发「截图」 凭证上传至该链接或下方问卷：<a href=\"https://wenjuan.feishu.cn/m?t=seWnIfRCHVMi-km43%EF%BC%88%E5%A4%8D%E5%88%B6%E5%88%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%BC%80%EF%BC%89\">https://wenjuan.feishu.cn/m?t=seWnIfRCHVMi-km43（复制到浏览器打开）</a>\"</p><p></p><p>完成以上步骤，即可获得价值 150 元的实体的案例集 1 本！活动截止到 6 月 30 日，实体案例集将在活动结束后的 15 个工作日内完成邮寄，赶快行动起来吧！</p>",
    "publish_time": "2023-06-05 18:15:07",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]