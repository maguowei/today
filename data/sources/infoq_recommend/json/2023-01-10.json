[
  {
    "title": "麒麟桌面操作系统运行安卓移动应用的技术实践",
    "url": "https://www.infoq.cn/article/1xVxjMBVxadWOVu3eTdg",
    "summary": "<p>本文整理自麒麟软件桌面研发部资深研发工程师孟庆彬在<a href=\"https://dive.infoq.cn/2021/beijing/track/1205\">DIVE全球基础软件创新大会 2022</a>\"的演讲分享。</p><p></p><p>以下为孟庆彬演讲的精华内容，经编辑。</p><p></p><h1>国产操作系统目前生产现状</h1><p></p><p></p><p>以飞腾平台为例，截止到2022年1月，飞腾平台已经适配了4000+的生态软件。经过分类统计，主要的分类聚焦在办公软件、影音软件、金融软件、游戏软件、社交软件、安全和存储上。</p><p></p><p>需要强调的是，游戏软件也是一些小众的游戏，4000+的应用也基本只能覆盖到这几类的软件行业。考虑到目前国产操作系统使用的情况，现在的主要用户还是党政军企这些ToB的企业，以办公安全场景为主，其他的都没有，这也就导致了Linux原生的生态倾向性比较明显。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0b/0b5dfa3b04687a582bf7ccbe3b2bbc6e.png\" /></p><p></p><p>目前Linux生态的短板就是生态很不丰富，与移动或者Windows生态相比，没有什么可比性。相对而言，办公类的软件比较成熟，但是像Photoshop，还有重办公设计类的软件也是不足的。</p><p></p><h1>麒麟系统如何融合移动应用生态</h1><p></p><p></p><p>麒麟有KMRE，麒麟移动运行环境的技术，这个技术我们给它打了标签，包括技术、融合、便捷。今天重点介绍一下KMRE的主要功能和工作原理。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b6/b62ae95cb2bac8113627cc9c8ec30f1d.png\" /></p><p></p><p>首先介绍一下麒麟移动引擎主要的特点和主要的功能。它支持海量APP秒级启动。直接使用硬件，无性能损失。安卓与Linux窗口显示融合。统一的输入法，统一的音频设备，统一的输入设备，摄像头，视频通话。文件互通，剪切板互通，打开通知消息互通，打开方式互通。APP的统一管理，键盘辅助功能，鼠标滚轮功能，截图功能。APP同时运行，APP全屏切换，横竖屏切换，还有Linux共享桌面。这块功能下面会一一展开介绍。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/46/4657d39bbb2bd38ed800e113b62d26f7.png\" /></p><p></p><p>在Linux上，如果想运行安卓APP，主要有两个大的技术方向。第一个就是Google的Arc容器类的方案，Google的Arc是商业的Chrome组件，支持应用有限，效率一般。还有虚拟机和模拟器，像Bluestacks和GenyMotion效率都比较低，资源占用率很高，环境与宿主系统完全隔离。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c1/c18a81e944e82854c7391cb149a58a16.png\" /></p><p></p><p>KMRE不是虚拟机，它是类似于容器的一套方案，但也不是传统意义上的容器。它真正将Linux操作系统和安卓操作系统合二为一，从本质上让麒麟OS真正支持安卓APP的运行。 共用内核，直接使用硬件，无性能损耗，资源共享，目前支持arm和x86，也支持了多种CPU和GPU。</p><p></p><p>总结来讲，Linux目前运行安卓APP无非两套大的方案，要么就是容器，要么就是模拟器。我们是在容器的基础上改造了一个不是容器的方案，但也是继承了容器的方案。</p><p></p><p>KMRE显示目前有两种模式，一种是通用模式，通用模式主要是适配了驱动闭源的Nvidia卡、Intel显卡，兼容性比较高。另一种是高性能模式，目前适用于开源的驱动，比如AMD的显卡，目前是0性能损失。例如KMRE运行“和平精英”时，画质是不错的，实际的操作流畅度很高，帧率也很高，在高性能模式下体验非常好。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1c/1c90d0a512b706a53755515f4217043b.png\" /></p><p></p><p>在OS上运行安卓应用，大家都在讲的一个概念叫多APP多窗口同时运行。实际上对于安卓手机、安卓平板而言，它们基本上都是在一个屏幕同时只能运行一个应用。如果我们想多运行几个应用，会涉及到切换。对于用户的操作而言，他只能同时操作一个应用。但桌面系统大家已经熟悉了窗口式的应用，用多少个应用就开多少个窗口，同时可以看，可以用。而且对于大家熟悉的笔记本、台式机，它的屏幕是大横屏的形式，多开几个窗口显示器效果也会比较好。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4b/4bd2fd63ac0e0f1c5e99199d78a5a1f7.jpeg\" /></p><p></p><p>下面再介绍一下Linux下的桌面共享。正常的话，Linux应用，或者Windows上会议类应用的共享桌面，都是共享自己的主界面。当然对于安卓而言，只能共享安卓手机的窗口。对此，我们做了一些工作。我们现在共享的时候，Linux下跑腾讯会议，或者是QQ共享桌面，实际共享的是整个桌面。可以看到，图中是Linux原生的整个桌面，这保证了操作体验，也保留了在Windows下的共享桌面习惯，比较方便。去开会，去共享桌面，大概率会想要共享整个桌面，而不是单独的一个窗口。目前我们内部开会都是这样来做的，还是很方便的。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a6/a674fdc0cc2f8997fda838130111cf39.png\" /></p><p></p><p>文件互通。大家应该都比较熟悉Linux的文件系统以及安卓里面的文件系统，对于安卓而言，它的目录相对而言比较混乱，比较零散。对于Linux而言，显示更像是Windows这种可能用起来比较习惯。通过一些手段，一些努力，目前在安卓上面可以直接访问Linux文件。</p><p></p><p>图中是微信里面要给朋友发文件，正常的话都是微信打开文件系统，打开它的存储，去找对应的目录。我们做的优化是直接选择Linux目录下的文件直接传，通过微信发出去。下面的图片就是把安卓的文件系统在Linux下显示。这是一个Linux文管，能够直接看到安卓完整的目录结构，也可以按类型去看。安卓目录结构比较混乱，但如果按分类模式去看，也相对比较便捷。我们这块也是结合了各自的优劣，既能够按照符合Windows习惯的目录结构去看，也可以符合安卓便捷的方式去看，比如说按图片、音频、视频、文档分类，这两者都有。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d1/d1d80f8fe4d88280794907261d5ca6d1.png\" /></p><p></p><p>再来看看摄像头。因为安卓摄像头分辨率会比较高，摄像头可以跟着横竖屏方向去旋转。但PC上的摄像头一般分辨率比较低，且固定在某个位置，正常也不会有人去旋转它。这就导致了在摄像头使用上跟安卓存在着一些区别。由于我们的场景是PC上的摄像头使用安卓设备，所以在这方面也做了比较多的工作，目前已经适配了多款的摄像头。对于可以拍照、录像的APP，绝大部分适配的功能都是没有问题的。尤其对于重点的应用，像微信、腾讯会议，目前内部也一直在用，视频通话很流畅，体验也很好。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/45/45bb831b793964d2cf96177d6453a113.png\" /></p><p></p><p>对于手机输入法，大家可能比较习惯点一个位置，下面弹出手机各种各样的输入法，然后手动去打字。有很多种输入法，包括手写的、拼音的、九宫格。但实际上在Windows上，桌面OS的情况下，大家都习惯直接用键盘、鼠标去输入。PC上用键盘、鼠标打字速度是很快的，体验也不错，基于这一点，我们也在想怎么去实现。实际上现在也完成了可以用Linux的中文输入法直接输入到安卓系统里去。</p><p></p><p>图示就是在头条搜索，可以看到这个操作系统是安卓，输入法却是Linux的输入法，输入法会跟着光标走。另外，不管是Windows，或者是Linux，大家都习惯了用一些快捷键，像复制、粘贴、全选、撤销，就是对应的Ctrl+C、Ctrl+V、Ctrl+A， Ctrl+Z这些快捷键，而原生的安卓可能需要长按，因为它没有键盘、鼠标。这些我们都已经适配完成，可以通过快捷键去操作安卓这部分，这种体验是很流畅的。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/51/510339c8c9baac2b244050f457e487a7.png\" /></p><p></p><p>安卓里面的游戏也适配了Linux，包括PC机器的键盘、鼠标和游戏手柄。我们可以通过手柄，或者键盘、鼠标去玩一些游戏，体验很不错。为什么特别强调这块内容？因为我们在做游戏场景的时候也遇到了一些问题。打游戏可能需要十个手指多点触控，但实际上在Linux下这块支持不是特别友好。尤其像滚轮，像游戏的轮盘操作，以及手柄类自定义的组合键是比较多的。这块我们也是做了很多的事情，解决了轮盘的转换，还有在键鼠这块解决了多点触控和组合键的问题。目前，通过游戏手柄去玩大型的游戏是没有问题的。</p><p></p><p>什么叫打开方式互通？正常的安卓应用默认都是用安卓应用去打开，但安卓应用用Linux本地的应用去打开，Linux本地应用用安卓应用去打开，这样体验会更好。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/77/775215ec375862405731fdc9f428a33f.jpeg\" /></p><p></p><p>比如说用微信的时候，突然收到了一个文档，用安卓内置的WPS也可以，但是如果能够用Linux下的WPS，体验是不是更好？因为像WPS这种应用肯定是Linux原生操作起来更方便、更快捷。还有类似于图片查看器，也是在PC上直接操作更加灵活。网页也是一样，在PC上开网页可能开好几个，操作起来也比较便捷，但在安卓上，别人要给你发个网页或者发个网址都比较麻烦，效率或者体验肯定不如PC好。</p><p></p><p>我们在安卓里面做了一个插件，通过这个插件，可以把一些文件类型直接用Linux原生去打开，图片中就是别人给你发了一个Word文档，在右键的时候会打开右键菜单，这个时候我们就可以把应用用Linux原生的应用打开。</p><p></p><p>再介绍一下应用切换融合。希望让用户不要感知到跑的是一个安卓应用，还是一个Linux应用。我们从安装到使用都做了很多改进，比如说我们在安装的时候，让用户从应用商店下载、安装，在应用商店用户只需要去搜索对应的软件就可以，他不需要去关心这个软件到底是Linux软件还是安卓软件，他只要想用这个软件，去下载就可以了，我们就会给他自动安装。安装之后也符合常用的PC的操作习惯，安装之后会在桌面上有图标，任务栏也会有对应的图标，入口和Windows是统一的，用户用的时候，就可以直接点击，想用几个就开几个，是支持多窗口的。</p><p></p><p>对用户而言，都是完完整整、一个个独立的窗口，符合用户习惯。既然是窗口应用，当然支持用Alt+Tab快捷键进行应用切换。在任务栏可以预览它的效果，每个应用会有独立的预览情况，对用户而言，他不会感知到到底现在是一个Linux应用，还是一个安卓应用。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2c/2c185a12b363564b1c07d881214503ed.png\" /></p><p></p><p>我们从安装到使用，都是为了保证用户体验一致，安装好了之后在开始菜单就会有对应的图标，也可以在“自定义”大的桌面里面看到对应的图标。用户也可以把它固定到任务栏，或者直接右键发送到桌面快捷方式，用户会觉得这是PC上惯用的应用习惯。</p><p></p><p>正常的安卓手机通知都是在安卓的主界面上有一个下拉的通知栏，很多应用信息都会往那里发通知，现在为了和桌面PC深度融合，我们的通知会在系统的通知栏弹个气泡通知用户，如果你的应用是在任务栏下面，它就和QQ、微信的Windows的习惯是一样的，用闪烁来通知用户有消息来了。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5b/5bfe040c737341717fc0414321afb4c5.png\" /></p><p></p><p>以上是KMRE主要的功能介绍。目前通过KMRE已经完成了对4000+移动应用的适配，以后应用会上的越来越多。通过KMRE，也引入了4000+的移动应用。我们通过这些手段，已经可以把安卓的应用比较快速、低成本地迁移到Linux生态上面来，这样是对Linux生态很大的补齐。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e3/e36f72b4a34c8e799af27f98336cacee.png\" /></p><p></p><p>目前适配了以下这些重点应用。比如说金融类的同花顺，还有一些网银。影音类的像爱奇艺、抖音、QQ音乐。社交类的QQ、微信。教育类包括腾讯课堂、学习强国。游戏类的包括和平精英、QQ飞车。办公类的包括钉钉跟腾讯会议。也有一些应用，它可能现在还没有Linux原生应用，或者是Linux原生应用做得还不是特别好，然而移动应用已经很成熟了，这样的话能够很好地解决用户的实际需要。而且也可以支持多个窗口同时打开，随便开几个都没有问题。</p><p></p><h1>麒麟移动引擎主要工作原理</h1><p></p><p><img src=\"https://static001.geekbang.org/infoq/48/481d8f4a6df733d93fa220a877e1abae.png\" /></p><p></p><p>麒麟移动引擎的整体架构包括，KMRE的整体架构，最下面是硬件平台，有不同的CPU、GPU。比如支持国产的飞腾、麒麟990，还有Intel、AMD。GPU也有很多种，像AMD、Nvidia、Intel这种。对不同的硬件，我们都需要做适配，但因为抽象出了一个硬件的适配层，所以适配工作目前只是简单的配置工作就可以完成。</p><p></p><p>一个模块，为了解决安卓上网的问题，毕竟网络还是在Linux侧，安卓侧应用也要上网，我们搞了一个VirtWifi内核模块可以解决安卓内部的上网。这块目前也在努力，原来是一个虚拟的网络，目前已经基本上实现了安卓可以感知实实在在的网络。</p><p></p><p>在共用内核的基础之上，我们里面有两套系统，一个是Linux系统，一个是安卓系统。因为两个系统之间要紧密耦合，一些组件要交互或者共用。实际上在Linux下面有一个类似于启动进程的模块，这个模块可以理解为安卓的AMS，负责安卓应用的生命周期管理。</p><p></p><p>还有我们的管理服务，管理服务就是管理安卓的生命周期，因为对于安卓而言，如果用户用的话就把它用起来，如果不用就把它挂起来，既要保证它的响应速度，还要解决它的功耗问题。还有图形窗口，还有显示服务，实际上窗口跟显示都是在Linux侧来融合的，这两部分就是为了解决安卓显示窗口跟Linux怎么融合。</p><p></p><p>在软件商店方面，因为安装的时候用户无需感知是Linux还是安卓，所以我们对软件商店也做了一些修改。音频服务就是为了解决数据、音视频通话、输入输出设备问题。文件管理器插件就是怎么样把文件系统互相打穿。文件互通服务就是为了解决分享这块，用应用去打开时，这块涉及到一些文件路径的同步。还有OpenGL渲染库，这是显示相关的。还有通信模块，解决Linux跟安卓高效通信的问题。</p><p></p><p>在安卓部分我们也做了比较深度的修改。例如在应用层，我们有自己的KmreLauncher、KmreManager，还有InputMethod。KmreLauncher替代了安卓原生的Launcher，因为我们现在做的是跟PC的深度融合，所以安卓的Launcher是不需要的，把一些机制用自己的Launcher去替代了。</p><p></p><p>KmreManager就是为了解决Linux侧安卓端的管理以及通信问题的。InputMethod主要就是为了解决输入法。对于Framework修改，我们也做了一些修改，比如说显示SurfaceFlinger，还有输入的InputFlinger这些，都是为了更好地让这两个系统融合到一块。HAL在显示还有硬件方面做了修改，像Gralloc、Audio、EventHub、Camera。手机上的传感器设备会比较多，如果这些PC上有就用PC的，如果PC上没有，就要在PC上给安卓创建一个虚拟的设备。</p><p></p><p>经过这些模块组合之后，我们就在一套内核上跑了两套系统，两套系统就可以支持这两套系统的生态，比如Linux应用，安卓应用，使用起来比较灵活。</p><p></p><p>多窗口是怎么实现的？多窗口实际上是基于安卓11的虚拟屏技术，来实现窗口的多活。安卓本身它是有多个窗口显示的能力和接口的。但是考虑到安卓的实际产品，像手机、平板没有这种场景，所以这个技术用的人不是特别多。</p><p></p><p>目前安卓最新的版本也在往大屏方向切，这个技术可能会用得越来越多。我们是基于安卓的扩展屏这套技术，让应用打开到某些扩展屏的指定位置，再去控制扩展的生命周期，就是什么时候应该显示，什么时候应该销毁。通过这几个扩展屏之间的交互关系，来实现多窗口多活的问题。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a7/a76c0a86701b88683ec9a34ecc68690f.png\" /></p><p></p><p>再介绍下麒麟移动引擎文件互通是怎么做的。Linux可以访问安卓的文件管理器，安卓也可以访问Linux的文件管理器，这是怎么实现的？</p><p></p><p>Linux系统跟安卓系统本质上文件管理器整体的设计上是统一的，这块没有多大的差异，主要的差异点来自于权限的不足，Linux文件的权限体系跟安卓的权限体系不一样。目录显示、挂载都没有问题，但当访问时就会涉及到权限问题，只能看不能用是不可接受的。</p><p></p><p>我们主要修改了文件内核的一些模块，做了权限映射，这样就可以解决Linux跟安卓里面权限不同导致无法访问的问题。权限的问题解决了，其他的就只是文件的显示、挂载这些操作，这块可以做的场景是比较多。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4b/4bab4aed723c5506819b73ca4c543edd.png\" /></p><p></p><p>显示有两种模式，一种是性能模式，一个是兼容模式。如下图所示，对正常的安卓应用，就是安卓去显示，走SurfaceLinger，走OpenGL ES，走Gralloc，走fb，走正常的显示，这是安卓正常的流程。</p><p></p><p>但是、为了安卓和Linux窗口去融合，我们用Linux去做窗口管理，在安卓显示时把OpenGL ES这些指令都接到了Linux的Mesa库，通过Mesa库再去操作DRM，直接到窗口上去显示，这样性能会比较快。直接就相当于把Linux的显示系统，跟安卓的显示系统融合到一起，也形成了一个完整的显示系统。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4c/4c64ad6ef5e9d95404c961f0de518c8f.jpeg\" /></p><p></p><p>性能模式跟兼容模式的区别在于：性能模式主要参考了AMD驱动的开源方案。在沙箱中，移动环境执行图形渲染和合成，Linux端只做绘制和显示。这样的话，减少了JLES命令进行传输和翻页带来的性能损耗，提高了安卓的运行效率和显示效率。渲染和合成是在安卓部分做的，Linux只做绘制和显示。</p><p></p><p>对于兼容模式，有一些显卡可能没有开源出来，这块我们对沙箱中的移动环境中显示指令进行了转换，显示指令转换之后，Linux上面的显卡进行渲染合成，这可以满足大部分的硬件加速需求，对显示环境具有良好的适应性，能够更好地实现显卡的兼容效果。兼容模式可能会比性能模式多了一些指令的传输还有内存拷贝损耗。在性能模式下玩游戏，一点都不会感觉到卡顿。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6a/6aada8e5568a6769131465c756cdc6a5.png\" /></p><p></p><p>在视频编解码方面。正常安卓也有一套视频编解码能力，但这块跟Linux系统融合不能走软解，这样的话GPU占用太高了。安卓本身有OMX这套接口，这套接口是给一些移动厂商提供定制解码能力的。我们是用了这套接口，在硬件设备支持的情况下，优先使用解码芯片来加速解码，这样就减少了CPU的占用，系统的性能和流畅度就可以保证了，也充分利用了硬件加速能力。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c5/c5464fec3ee96063414242fad3a69f7a.png\" /></p><p></p><h1>麒麟系统在移动生态上的规划和布局</h1><p></p><p>麒麟系统在移动生态上的规划和布局方面。KMRE能够有效地把移动生态引入到Linux系统，补齐Linux系统生态不足的问题，随着一些新的技术的引用，应用会更快速地上架，以后应用会上的越来越多。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/84/841158c784b61bf2c779904d46184cbd.png\" /></p><p></p><p>我们在一套内核中跑了两个系统，一个安卓系统，一个Linux系统，虽然说有些模块、有些组件是复用的，一些模块做了一些深度的耦合，但实际上，它还是一套内核跑了两个系统。</p><p></p><p>我们现在也在思考，怎么样构造一个真正的融合的系统。我们也参考了业界好的一些实践，看一看怎么样去打造一款真正融合的系统，只有一个系统、一套内核的融合系统，不会从技术上看上去有分裂。我们也在朝着这方面努力，也在打造麒麟最新的一代OS系统，持续做探索和突破。</p><p></p><p>现在移动端设备非常丰富，手机、平板、穿戴设备随处可见。用户怎么样跟麒麟系统互动，麒麟系统在移动设备上怎么更好使用？这块我们也有自己的思考，我们也在打造麒麟系统自身的移动办公生态。毕竟我们的客户大部分还是在办公行业，也会有一些移动办公需求。在这方面，我们也在努力做一些不一样的产品，希望给用户不一样的体验，帮助用户解决一些实实在在的问题。</p><p></p><p>讲师介绍</p><p></p><p>孟庆彬，麒麟软件，桌面研发部资深研发工程师。拥有11年工作经验，长期从事Linux系统与Android系统融合方向的技术研究。在麒麟公司主要负责麒麟移动运行引擎的设计与开发，主要负责将安卓生态引入到国产操作系统。</p>",
    "publish_time": "2023-01-10 10:20:19",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Hyper 存在漏洞，Rust 项目易受拒绝服务攻击",
    "url": "https://www.infoq.cn/article/UiyjZqRp8Kpc2lW14WcN",
    "summary": "<p>近日，安全研究人员最近发现并披露了流行的 Rust 项目（例如<a href=\"https://github.com/tokio-rs/axum\">Axum</a>\"、<a href=\"https://crates.io/crates/salvo\">Salvo</a>\"和<a href=\"https://crates.io/crates/conduit-hyper\">conduit-hyper</a>\"&nbsp;）中的多个漏洞，产生这些漏洞的根源是没有在使用 Hyper 库时对 HTTP 请求设置适当的限制。</p><p>&nbsp;</p><p><a href=\"https://hyper.rs/\">Hyper</a>\"是一个非常流行的低级 HTTP 库，用 Rust 编写。该库不是功能齐全的 HTTP 服务器或客户端，但它包含了用于响应请求、解析请求主体和生成正确 HTTP 响应的方法，因此可以用作实现这些功能的“构建块”，是 Rust 最流行的 HTTP 库之一。</p><p>&nbsp;</p><p>安全公司 JFrog 发现，包含<a href=\"https://github.com/hyperium/hyper\">Hyper</a>\"的项目（如Axum、Salvo和conduit-hyper）容易受到为利用这些漏洞而精心设计的 HTTP 请求引起的拒绝服务 (DoS) 攻击。</p><p>&nbsp;</p><p>研究人员发现的问题在于<a href=\"https://docs.rs/hyper/latest/hyper/body/fn.to_bytes.html\">body::to_bytes</a>\"，这是一个将请求或响应主体复制到单个字节缓冲区的函数。该函数读取数据块，并可以创建一个具有足够空间的 Vector 来满足请求正文的预期长度。但是 Vector 的大小来自直接传递给 Rust 内存分配器的“Content-Length”标头，因此如果它太大，分配器就会崩溃进而使进程崩溃。</p><p>&nbsp;</p><p>据 JFrog 称，上面三个项目已经修复了他们的代码，但还有数量不详的、其他易受攻击的项目尚未做出回应。目前，Rust 的包存储库 crates.io 中列出的 2,579 个项目依赖于 Hyper，下载量已超过 6700 万次。</p><p>&nbsp;</p><p>JFrog 安全研究高级主管 Shachar Menashe 表示：使用 Hyper 时缺乏大小限制是一个非常严重的问题，攻击者可以很容易地利用它让 HTTP 客户端和服务器崩溃。</p><p>&nbsp;</p><p>这个问题实际上之前也出现过。<a href=\"https://github.com/hyperium/hyper/issues/187\">在 2014 年</a>\"和<a href=\"https://github.com/hyperium/hyper/issues/256\">2015 年</a>\"，Hyper 的开发人员修复了因接收到过大请求标头而导致的 DoS 漏洞。去年，在GitHub上的相关<a href=\"https://github.com/hyperium/hyper/issues/2414\">问题的帖子</a>\"中，Rust 开发人员 Michal Varner 建议采用合并警告机制。</p><p></p><p>参考链接：</p><p>https://jfrog.com/blog/watch-out-for-dos-when-using-rusts-popular-hyper-package/</p><p>https://www.theregister.com/2023/01/06/flaws_rust_projects_ddos/</p>",
    "publish_time": "2023-01-10 10:39:38",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "结束扩展安全更新计划，Win7彻底退出历史舞台",
    "url": "https://www.infoq.cn/article/kgKh7JomueAymwSIPtFe",
    "summary": "<p>作为Windows系列最为经典的版本，<a href=\"https://www.infoq.cn/article/2008/10/Windows-7-Official-Name\">Windows 7系统</a>\"计划在2023年1月10日结束ESU（付费外延扩展支持）。2020年，Windows 7系统结束外延支持后上线了ESU，允许通过付费的方式订阅安全补丁。如今，ESU的结束意味着即使企业用户想再付费，微软也不会再发布安全补丁。</p><p>&nbsp;</p><p>这也标志着，从2023年1月10日起，Windows 7系统将彻底退出历史舞台。</p><p>&nbsp;</p><p>微软建议受到影响的用户购买与 <a href=\"https://www.infoq.cn/article/t9IfZOEvdo7uvqFCsWkG\">Windows 11 </a>\"兼容的电脑，某些配备 Windows 7 的电脑符合条件，也可升级至 <a href=\"https://www.infoq.cn/article/6y3aEhAM21Als*W9zOko\">Windows 10</a>\"（需付费）。不过，微软表示，Windows 10也将于2025年1月14日结束支持，安装 Windows 10 可能出现无法修复电脑硬件的问题，或无法升级至 Windows 11。此外，它也不会启用 Windows 10 的硬件特定功能，如触摸屏或 Windows Hello。</p><p>&nbsp;</p><p>微软在其页面上提醒，“大多数Windows 7设备将不符合升级到Windows 11的硬件要求，作为替代方案，兼容的Windows 7电脑可以通过购买和安装完整版本的软件升级到Windows 10。在投资于Windows 10升级之前，请考虑到Windows 10将于2025年10月14日达到其支持期限。”</p><p>&nbsp;</p><p>公开信息显示，Windows 7发布于2009年10月；2015年1月13日，微软正式终止了对Windows 7的主流支持，但仍然继续为Windows 7提供安全补丁支持；2020年1月14日，微软停止对Windows 7系统的技术支持、软件更新和安全问题修复，但允许企业用户通过付费的方式订阅安全补丁。</p><p>&nbsp;</p><p>尽管Windows 7已经“老态龙钟”，但它依旧大受欢迎并被广泛采用。据数据统计公司 Statcounter的记录，截至2022年11月，Windows 7的市场份额为10.25%，排在Windows 7前面的分别是Windows 10（69.77%）、Windows 11（16.12%）。</p><p>&nbsp;</p><p>为什么个人/企业用户没有及时<a href=\"https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&amp;mid=2247490316&amp;idx=2&amp;sn=efcea4c47cf692fdde2da77cd3d27df3&amp;chksm=f951ae4fce26275950733390a79673d0966d5189f875df78efe37e2c330b368fa0efc3779eb8&amp;scene=27#wechat_redirect\">对操作系统进行更新</a>\"？有评论指出，原因之一是，企业的遗留应用程序与 Windows 新版本不兼容，他们不知道该怎么办，或者他们还没有进行应用程序兼容性测试——这是件大事。此外，还有一些人担心 Windows 更新的频率过高，以至于没有适当的流程来做出响应，也有一些人担心成本问题。</p><p>&nbsp;</p><p>研究公司 Forrester Research 的科技分析师 Andrew Hewitt 表示：“所有这些因素共同作用，导致大部分企业依旧选择继续使用 Windows 7。”</p>",
    "publish_time": "2023-01-10 10:53:59",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "OpenJDK提议Galahad项目合并GraalVM的原生编译",
    "url": "https://www.infoq.cn/article/uuNYxILPOMwEPf4Tt2aE",
    "summary": "<p>OpenJDK<a href=\"https://mail.openjdk.org/pipermail/discuss/2022-December/006164.html\">提出了一个新的项目</a>\"&nbsp;，代号为Galahad，以便于将GraalVM社区版代码库中的一部分功能合并到OpenJDK中。</p><p></p><p>这是一项长期努力的最新进展，也就是在程序执行之前将Java应用编译为机器码的能力。乍看上去，这似乎有些奇怪，毕竟，一位新的Java开发人员最先了解到的一点就是“Java不会编译成机器码，而是编译成JVM字节码”。</p><p></p><p>这句简单的格言有着深远的影响，其中最基础的就是，Java平台依赖一个强大的运行时来执行，也就是JVM。这个运行时实现了动态运行技术，比如类加载和反射，这些技术在提前编译（ahead-of-time，AOT）语言中并没有真正类似的特性。实际上，这是Java强大功能的起点，也是Java能够在25年左右的时间内一直位于软件舞台中央的重要原因。</p><p></p><p>尽管如此，人们始终对Java程序直接编译为机器代码并在没有JVM情况下独立运行的可能性抱有强烈的兴趣。这种期望有多种原因，比如为了减少Java程序达到峰值性能的时间，减少Java应用的内存需求，甚至只是为了避免将资源用到应用本身并不需要的运行时子系统中。</p><p></p><p>迄今为止，已经有多个项目尝试实现这种可能性。最近的一个，也可以说是到目前为止最成功的一个，就是GraalVM项目。这个项目并不是来自OpenJDK，而是来源于Oracle Labs的一个研究性项目。它的第一个生产级别的版本GraalVM 19.0是在2019年5月份发布的。</p><p></p><p>从那时起，它一直作为一个独立项目来运作，具有与OpenJDK不同的发布周期，并且与OpenJDK的互动有限。在为数不多的Java增强提案（Java Enhancement Proposal，JEP）中，有两个是与GraalVM相关的：</p><p>JEP 243：<a href=\"https://openjdk.org/jeps/243\">Java级别的JVM编译器接口（Java-Level JVM Compiler Interface）</a>\"JEP 295：<a href=\"https://openjdk.org/jeps/295\">提前编译（Ahead-of-Time Compilation）</a>\"</p><p></p><p>这两个JEP都是在Java 9中出现的，它们一起将Graal编译器引入到了OpenJDK代码库中。</p><p></p><p>Graal编译器是GraalVM的主要组件之一，它是一个操作Java字节码并生成机器码的编译器，可以在JIT或AOT模式下运行。在JIT模式下，它可以用来代替C2（有时被称为“服务器编译器”）。值得注意的是，Graal本身是用Java编写的，不像其他用于JVM的JIT编译器都是用C++编写的。</p><p></p><p>在Java 10中，Graal凭借<a href=\"https://openjdk.org/jeps/317\">JEP 317</a>\"作为实验性的、基于Java的JIT编译器添加了进来。但是，在Java 17（2021年9月发布）中，AOT和JIT编译器的实验性形式都被移除掉了。尽管如此，实验性的Java级JVM编译器接口（JVMCI）被保留了下来，因此，我们仍然可以使用外部构建的Graal编译器版本进行JIT编译。</p><p></p><p>如果最新的公告能够如期交付，将标志着Graal重新回到了OpenJDK代码库中。然而，更重要的也许是GraalVM流程和项目的变化。Galahad将作为OpenJDK的一个子项目来运作，并维护单独的仓库，定期与主线仓库进行rebase操作。当功能就绪时，它们将被迁移到主线仓库。这与长期运行的成功项目（如Loom和Lambda）所使用的模式是相同的。</p><p></p><p>Galahad将JDK 20作为初始基线。这基本上就是代码和技术的起点而已，因为<a href=\"https://www.infoq.com/news/2022/12/java-news-roundup-dec05-2022/\">JDK 20已经进入了Rampdown阶段</a>\"，所以至少在JDK 21（预计2023年9月）之前，不可能有任何重新引入的Graal代码作为Java的一部分交付。目前，Galahad将专注于贡献最新版本的GraalVM JIT编译器，并将其作为C2的替代方案进行集成。稍后，一些必要的AOT编译技术将被加入进来，以便于Graal JIT编译器在JVM启动时立即可用。</p><p></p><p>这是必要的，因为Graal本身就是用Java编写的，它可能会遭受我们广泛面临的启动缓慢问题：</p><p>Hotspot基于C1编译器和Graal（如果可用的话）启动；Graal会在Java解释器线程上执行，最初速度会很慢，直到它自己得到了编译。</p><p></p><p>将Graal编译器预编译为原生代码有可能会解决这个问题，<a href=\"https://openjdk.org/jeps/8223220\">有一个旧的JEP草案</a>\"提出了这种方式，但是目前还不知道它是否会被恢复或重新开始寻找新的方案。</p><p></p><p>需要注意的是，并不是所有的GraalVM代码库都会被提交至OpenJDK，它只包含核心的JIT和AOT组件，以及原生镜像工具。甲骨文公司在GralVM企业版中的专有特性预计不会捐献给该项目。</p><p></p><p>Galahad在项目之初就有一个值得关注的提交者名单，他们不仅来自甲骨文的OpenJDK和GraalVM团队，还有来自更广泛的OpenJDK社区的许多贡献者，包括来自Red Hat的Andrew Dinn和Dan Heidinga以及来自AWS的Roman Kennke。Galahad和Leyden项目（另一个研究AOT编译和相关技术的OpenJDK项目）之间的确切关系尚不清楚，但Galahad的一些贡献者也一直活跃在Leyden中。</p><p></p><p>尽管该项目仍处于早期阶段，但许多有影响力的社区成员对Galahad表示欢迎，认为它代表了在保持Java处于云原生技术栈的领先地位方面，这是一项重要的进展。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/12/openjdk-galahad-Dec22/\">OpenJDK Proposes Project Galahad to Merge GraalVM Native Compilation</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/NxuqQb5Xt6VaPu1mEWIG\">Oracle 将 GraalVM 贡献给 OpenJDK，以解决“采用障碍”</a>\"</p><p><a href=\"https://www.infoq.cn/article/SB6zvEdRIJuP2N4xkGak\">标准化原生Java：拉近GraalVM和OpenJDK的距离</a>\"</p>",
    "publish_time": "2023-01-10 11:21:06",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "VS Code有多么不安全：一个扩展就可能导致公司GitHub中的所有代码被擦除？",
    "url": "https://www.infoq.cn/article/zi0OdBgVJuoVsqc2S4rB",
    "summary": "<p></p><blockquote>安装一个扩展，就可能被勒索、被擦除掉所有代码？这是真的。</blockquote><p></p><p>&nbsp;</p><p>Aqua Security的研究人员用一项演示，证明了分发伪造Visual Studio Code（VS Code）扩展有多么简单。他们将这些实际来自不受信来源的扩展，伪装成了看似合法的流行插件，48小时内成功被安装了1000多次。而VS Code扩展会以同等于用户的权限运行，一旦安装了“恶意”扩展，就很可能造成非常大的危害。</p><p>&nbsp;</p><p></p><h2>VS Code 是迄今为止最受欢迎的 IDE</h2><p></p><p>&nbsp;</p><p>VS Code 是目前全球最受欢迎的集成开发环境 (IDE)，&nbsp;根据<a href=\"https://survey.stackoverflow.co/2022/#section-most-popular-technologies-integrated-development-environment\">StackOverflow</a>\"的一项调查显示，目前有 74.48% 的开发人员在使用它。</p><p>&nbsp;</p><p>VS Code 的强大之处在于它包含大量可用扩展，能帮助开发人员根据实际需求定制编辑器。这些扩展往往来自编辑器中内置的VS Code Marketplace。开发人员可以通过该市场直接在VS Code内查找和安装扩展。用户一般会输入一个搜索词，例如“Rust”或“Svelte”，而后得到一个返回的匹配扩展列表，其中显示各扩展的下载次数和用户评级。</p><p>&nbsp;</p><p>VS Code Marketplace中有超过 40,000 个扩展，可帮助程序员更高效地开发代码、集成特定语言的调试器，甚至将工件部署到生产环境中。一些扩展的安装下载数量非常大，例如，Jupyter 扩展有 52M 的下载量，Prettier 扩展有 27M，还有很多也已经超过 10M 。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/31/310dd442a30aba07b7608626ebd34bd4.png\" /></p><p></p><p>Marketplace 中的热门扩展</p><p>&nbsp;</p><p>这不可避免地引出了一个问题：作为 VS Code 用户，你有没有问过自己一些问题： VS Code 扩展是否值得信赖？如何检查扩展是否合法？然而事实却是，即使对于具有安全意识的开发人员来说，区分恶意和良性扩展也是一个挑战。</p><p>&nbsp;</p><p></p><h2>构建一个不安全的扩展很容易</h2><p></p><p>&nbsp;</p><p>VS Code 扩展可以实施各种各样的功能，有些扩展只是为了改变一下 IDE 的主题颜色。但所有扩展都以打开 VS Code而没有任何沙盒的用户的权限运行，这意味着该扩展程序可以在用户的计算机上安装任何程序，包括勒索软件、擦除器等。</p><p>&nbsp;</p><p>Aqua研究人员宣称：“事实上，通过不安全的扩展，黑客可以访问甚至更改开发者在本地拥有的所有代码，甚至可以通过使用开发者的 SSH 密钥更改企业或组织在 GitHub 中所有存储库中的代码！这可能会产生巨大的影响！”</p><p>&nbsp;</p><p>VS Code系统中也提供了好几项保护开发者免受恶意扩展侵害的功能，首先，微软保证“对每个新扩展和每项扩展更新都运行病毒扫描。只有扫描完成、安全无误，该扩展才会上架Marketplace供公众使用。”此外，微软还采取一系列措施来防止名称抢注——即发布者故意把名称跟知名方案混淆。开发人员也可以观察扩展是否带有蓝色对号，这代表着发布者已通过网络域所有权验证。</p><p>&nbsp;</p><p>这些举措当然也都有效果，但Aqua研究人员宣称“对恶意和良性扩展做正确区分颇有难度。”</p><p>&nbsp;</p><p>针对这个结论，他们给出了以下理由：</p><p>&nbsp;</p><p>任何人都可以利用新的一次性电子邮件地址，将自己注册为扩展发布者。扩展名称和发布者名称不必唯一，可以直接复制现有名称。在示例中，研究人员发布了一个名为Pretier的扩展，碰瓷的明显是Marketplace上的高人气代码格式化插件Prettier。发布者的蓝色对号仅代表其对域具备所有权。研究人员强调，“发布者完全可以买下一个域名并填写注册，这样就能获得经过验证的对号标记。”下载和评论肯定有指导意义，但这些东西同样可以伪造。只要精心策划，拉高下载量并不是难事。</p><p>&nbsp;</p><p>Aqua团队已经发现Marketplace 中存在几个可疑的 VSCode 扩展，例如“API Generator Plugin”和“code-tester”扩展。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/37/375e66760c607c2a15b055a45f03dedf.png\" /></p><p></p><p>&nbsp;</p><p>“code-tester”内部代码</p><p>&nbsp;</p><p>这些扩展有可能是代码写得很糟糕，也有可能是恶意软件。安全人员具体分析了“code-tester”的代码。如截图所示，你可以看到该扩展在安装后和 VS Code 启动运行的时候会激活函数，向具有专用子域（“<a href=\"http://$[hostname].robotnowai.top/vscode\">http://$[hostname].robotnowai.top/vscode</a>\"”）的外部 URL 发送请求，该子域是你的服务器的主机名。一旦收到来自 URL 的响应，它就会使用eval函数执行响应数据。此请求每 30 秒发生一次。最重要的是，由于通信使用 HTTP 而不是 HTTPS，因此很容易受到中间人攻击，从而允许其他不良行为者在使用此扩展时注入恶意代码。</p><p>&nbsp;</p><p>另外，Aqua团队为了验证制造“不良”扩展很容易的结论，还模仿了一个流行扩展，引诱毫无戒心的开发人员下载它。</p><p>&nbsp;</p><p>他们选择了流行的 VS Code 扩展 Prettier，仅仅是将发布者名称从esbenp 变为了 espenp，扩展名从prettier-vscode 变为了 pretier-vscode。当开发人员无意中输入“ pretier ”时，伪造的扩展是唯一的搜索结果。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e1/e13a4670af3a10de220e1bbb1ba888c3.png\" /></p><p></p><p>&nbsp;</p><p>&nbsp;</p><p>Aqua团队详细解释道，URL 中的微小变化，例如省略字母“t”或将“b”转换为“p”，称为域名仿冒 ( MITRE)。这是攻击者用来欺骗开发人员的一种流行技术。一些注册管理机构反对这种技术，通常不允许用户创建具有此类相似性的新包。根据 Microsoft 的指导网站，Microsoft 和 Red Hat 的官方扩展不受域名仿冒保护。在这种情况下，VS Code Marketplace 允许用户为一个非常受欢迎的包创建一个模拟包。而且，安装数量和评级也是可以通过“在暗网中可以购买各种服务”进行操纵的。也就是说，不管项目有多大影响力，任何人都可以给它构建一个伪装扩展，让越来越多的不知情用户会下载假扩展程序。</p><p>&nbsp;</p><p>Aqua团队并未演示恶意扩展可以通过微软的病毒检查程序，但这个假冒版的Prettier仍在48小时内成功被安装了1000多次。假货之所以成功，就归功于它使用了常见的拼写错误。一旦开发者在搜索时稍不留神，就会安装成Pretier这款伪造扩展。VS Code扩展会以同等于用户的权限运行，而一个真正的攻击者，绝对不会只有48小时的活动时间。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a5/a535f70f84fbd1cacf60c04ac1495e3f.png\" /></p><p></p><p>48小时的安装数量</p><p>&nbsp;</p><p>同样重要的是要注意 VS Code 扩展是用 Node 编写的，并且包是从 NPM 下载的，将恶意代码包上传到 NPM 等包管理器的威胁也一直存在。而且，像NPM或PyPi这样的大型软件包仓库体量甚巨，已经不太可能对每次提交都进行人工检查。在这种自动化检查的大背景下，恶意扩展往往在实际发现乃至下架前，就已经被下载了数千次。因此一旦安装恶意扩展被安装在许多开发人员的机器上，就会危及许多组织，其影响会非常大。当然，微软专门设置了“枪毙清单”，被列入其中的条目一经发现会被直接卸载。</p><p>&nbsp;</p><p>很多朋友都知道软件包仓库中存在不良依赖项风险，但在开发插件这边则容易掉以轻心。这可能是因为前者的安装过程更明确，这样编程者稍加关注就更可能发现问题。无论如何，插件同样有可能引发真实危害，此次研究报告就凸显出了现有保护措施中的软肋所在。</p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://devclass.com/2023/01/09/researchers-demonstrate-a-thousand-installs-of-fake-vs-code-extension-in-48-hours/?td=rt-3a\">https://devclass.com/2023/01/09/researchers-demonstrate-a-thousand-installs-of-fake-vs-code-extension-in-48-hours/?td=rt-3a</a>\"</p><p><a href=\"https://blog.aquasec.com/can-you-trust-your-vscode-extensions\">https://blog.aquasec.com/can-you-trust-your-vscode-extensions</a>\"</p>",
    "publish_time": "2023-01-10 16:03:55",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "下一个十年，我们需要一款什么样的分析型数据库？",
    "url": "https://www.infoq.cn/article/26ICMg30p0LS8UY8rbrw",
    "summary": "<p></p><blockquote>本文来自于 Doris Summit 2022 演讲实录，演讲人：陈明雨</blockquote><p></p><p></p><h1>十年对于数据库意味着什么？</h1><p></p><p></p><p>身处在日新月异的时代，我们见惯了技术的兴起与繁荣、变迁与衰落，甚至是朝荣夕灭。信息技术以前所未有的速度更迭，给周遭事物带来了颠覆性地变化。数据库亦是如此，无数数据库悄然湮没在技术更迭的浪潮里，直到在浩渺如海的代码片段中都找不到些许印记。而有的则历久而弥新，经受了时间的考验，彰显出强大的生命力，并以更加繁茂的姿态扎根生长。</p><p></p><p>十年对于数据库而言，可能是一段从诞生到消逝的完整软件生命周期，也可能是迈过里程碑之后的全新旅程。</p><p></p><p>所以从 MySQL 1.0 版本诞生，到具备颠覆性意义的 MySQL 5.7 版本正式发布，时间跨度刚好是十年，而十年之后的故事，大家已经都知道了。</p><p></p><p>所以从 Benoit、Thierry、Marcin 联合创建 Snowflake，到在纽交所成功上市、成为软件行业有史以来最大规模的IPO，再到全面开启云数据仓库时代，时间跨度也差不多十年。</p><p></p><p>而对于 Apache Doris，十年意味着什么？</p><p></p><p>留个悬念，在回答这个问题之前，我们不妨来回顾下社区发展历程。</p><p></p><p>尽管最早的历史可以追溯到 2008 年的百度凤巢广告系统，但彼时非 SQL 的单机查询引擎加 KV 存储系统在产品形态上与 OLAP 还有着较大的差异。</p><p></p><p>正式确立 OLAP 数据库这一形态是在 2013 年。通过自研全列式存储引擎 OLAP Engine 并基于 Apache Impala 改造了全新的 MPP 查询引擎，自此，<a href=\"https://xie.infoq.cn/article/46d475ef190f4f7757e295c36\">Doris</a>\" 真正成为了具备大数据量下高效支持数据分析能力的 OLAP 数据库，并在百度内部大规模应用，成为了百度内部统一的 OLAP 分析平台。</p><p></p><p>往往一个内部项目的发展会有两种演进模式，一种是随着需求的增加系统架构日益臃肿，当面对较为灵活的需求，常因改动成本过大而被彻底重构。另一种则是长期服务某一固定场景、需求逐渐收敛乃至停滞，最终被快速革新的外部技术彻底取代。而开源则是内部项目的一场新生，在更广阔的应用场景、更多样的开发者群体以及更高效的研发模式加持下开启新的篇章。</p><p></p><p>于是在数个版本的迭代与优化后，2017年 Doris 的前身在 GitHub 上开源，2018 年进入 Apache 基金会孵化，并正式更名为 Apache Doris。（GitHub 地址：<a href=\"https://github.com/apache/doris\">https://github.com/apache/doris</a>\"）</p><p></p><p>时至 2022 年，正是 Apache Doris 在 OLAP 领域深耕的十年之际。</p><p></p><h1>我们该如何回顾过去的 2022 年？</h1><p></p><p></p><p>2022 年，外部世界正处在前所未有的变化之中，无数魔幻时刻在现实中发生。需要庆幸的是，技术和开源的力量帮助我们穿越了许多不确定性。而这一年势必成为 Apache Doris 发展历程中有着浓墨重彩的一年，我们从几个角度来回顾一下 Apache Doris 过去一年的发展：</p><p></p><h3>社区重要指标</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/00/00ddea94c1257185fc1c091e503a3d5f.png\" /></p><p></p><p>过去一年中：</p><p></p><p>社区累计贡献者的数量从 200 余位增长至近 420 位，同比增长超过 100% ，目前仍在持续上升中。每月活跃贡献者的数量从 50 位增长至 100 位，同样呈现翻倍增长的趋势。GitHub Star 数量从 3.6k 增长至 6.8k，多次登上 GitHub Trengding 日/周/月度榜单前列。全部 Commits 数量从 3.7k 增长至 7.6k，过去一年新提交代码量超越了以往多年累加总和。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/24/243954b4cd9649ec070035e3c77c315c.png\" /></p><p></p><p>从这些数据中，我们可以感受到 2022 年是 Apache Doris 全面爆发的一年，各个维度数据指标几乎都有了 100% 的增长。这一年的努力也使 Apache Doris 成为了全球大数据和数据库领域最为活跃的开源社区之一，上方 GitHub Contribution 增长趋势图更是证明了这一点。而这一切，正是由社区所有的用户和开发者共同创造的。</p><p></p><p>另外值得纪念的是，在 2022 年 6 月， Apache Doris 迎来了开源以来最重要的里程碑之一，正式从 Apache 孵化器毕业、成为了 Apache 顶级项目。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b3/b3bc93c7d9607ae3f2ab8bc34ec12804.png\" /></p><p></p><h3>开源用户规模</h3><p></p><p></p><p>得益于社区成立的专职工程师团队，为 Apache Doris 社区用户提供义务的技术支持，2022 年我们在用户连接与沟通方面变得更加顺畅，可以更直面用户、去倾听用户真实的声音。</p><p></p><p>在过去的一年里，Apache Doris 已经在互联网、金融、电信、教育、汽车、制造、物流、能源、政务等数十个行业应用落地，尤其是在以海量数据著称的互联网行业。在中国市值或估值排行前 50 的互联网公司中，有 80% 企业在长期使用 Apache Doris 来解决自身业务中的数据分析问题，其中包含了百度、美团、<a href=\"https://www.infoq.cn/article/YDut4pry7PXQFOo4kLD3\">小米</a>\"、腾讯、京东、字节跳动、网易、新浪、<a href=\"https://www.infoq.cn/article/Wzg9whHzANPrVhOYJT5B\">360</a>\"、 米哈游、知乎等头部知名企业。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8b/8ba0d8304b625704927c1ac6734a49e5.png\" /></p><p></p><p>在全球范围内，Apache Doris 已经得到了超过 1000 家企业用户的认可，并且这一数字仍在快速增长中。这 1000 多家企业用户中，绝大多数与社区有着直接联系，并通过各种方式参与到社区建设中来。他们中的许多企业用户也参与到本次 Doris Summit 的议题分享中，将自身基于真实业务场景的实践经验分享给大家。</p><p></p><h3>版本更新迭代</h3><p></p><p></p><p>如果说过去版本将使用和运维的简易性作为第一追求的话，那么 2022 年发布版本则是在性能、稳定性、易用性等多方面特性的全面进化。</p><p></p><p>4 月份社区发布了自开源以来的首个 1 位版本—— Apache Doris 1.0，在 1.0 版本中，意义非凡的向量化执行初次与大家见面，标志着 Apache Doris 开始迈入极速数据分析时代。6 月份发布的 1.1 版本，我们对向量化引擎进行了进一步完善和优化，并将其作为正式功能默认开启。与此同时，社区建立了 LTS 版本发布机制，以每月发布一个 3 位版本的速度，对 1.1 版本进行快速地 Bug 修复和功能优化，力求满足更多社区用户在稳定性方面的高要求。在综合考虑版本迭代节奏和用户需求后，我们决定将众多新特性在 1.2 版本中发布。同时期社区的稳定性和质量保障工作也取得了显著的成效，测试 Case 得到了极大程度地丰富，并在 Master 分支上构建了流水线。通过一系列质量手段，Apache Doris 的代码质量和稳定性得到进一步提升，这也使得版本发布有着更加严格的准出标准。12 月初 1.2 版本正式面世。这一版本的发布不仅使查询性能有了近十倍的提升，同时我们还推出了过去半年时间里研发的诸多重磅功能，包括 Unique Key 模型 Merge-on-Write 的数据更新模式、支持无缝对接多种数据湖的 Multi-Catalog 多源数据目录、Java UDF 、Array 数组类型和 JSONB 类型等，让 Apache Doris 在更多数据分析场景具备了更强的适应性和可能性。我们也针对系统稳定性进行了大量的工作，一方面，利用 SQL Smith 等自动化测试工具以及各个知名开源项目的测试用例，构建了数以百万计的测试用例集；另一方面，通过社区准入流水线和完善的回归测试框架，保证了代码合入的质量。因此1.2 版本不论从功能、性能还是稳定性方面，都是一次厚积薄发后的全面进化，也是对所有开发者在 2022 年辛苦付出的最好回报。</p><p></p><h3>核心特性演进</h3><p></p><p></p><p>核心特性方面，社区的研发力量主要围绕四个方面开展工作，分别是性能、实时性、半结构化数据支持与 Lakehouse。</p><p></p><p>查询性能提升。从 1.0 版本面世到 1.2 版本发布，Apache Doris 在性能方面取得了极为显著的成绩。在单表场景上，Apache Doris 荣登 Clickhouse 公司推出的 Clickbench 数据库性能榜单，并取得了前三名的优秀成绩。在多表关联场景上，得益于向量化执行引擎及各种查询优化技术，相对 2021 年底发布的 0.15 版本 ，Apache Doris 在 SSB 和 TPC-H 等标准测试数据集下均取得了数倍乃至数十倍的性能提升。这一系列性能方面的优化，已经成功让 Apache Doris 跻身全球数据库性能最优阵列中！</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c8/c8beab01f3180c366b30ebac13040552.png\" /></p><p></p><p>实时场景优化。 在 1.2 版本中，我们在原有 Unique Key 数据模型上实现了Merge-On-Write 的数据更新方式，查询性能在高频更新时有 5-10 倍的提升，实现了在可更新数据上的低延迟实时分析体验。另外还实现了轻量 Schema Change 功能，对于数据的加减列不再需要转换历史数据，可通过 Flink CDC 等工具快速便捷地同步上游事务数据库中的 DML 或 DDL 操作，使数据同步工作能够更加流畅统一。半结构化数据支持。 目前 Apache Doris 支持了 Array 和 JSONB 类型，其中 Array 类型不仅能更方便地存储复杂的数据结构，还可以通过 Array 函数满足用户行为分析等场景的业务需求。而 JSONB 是一种二进制 JSON 存储方式，它不但比纯文本 Text JSON 的访问性能快 4 倍，同时也有更低的内存消耗。通过 JSONB 可以方便地导入各种 JSON 格式的日志数据结构，并能取得优异的查询效率。这也是 Apache Doris 在日志分析领域所做的探索之一。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4a/4a201fd471325d1230cd6d686fba9739.png\" /></p><p></p><p>Lakehouse。在最新发布的 1. 2 版本中，我们引入了全新的 Catalog 概念，正式将 Apache Doris 迈入湖仓一体时代。通过简单的命令便可以方便地连接到各自外部数据源并自动同步元数据，实现统一的分析体验。通过 Native Format Reader、延迟物化、异步 IO、数据预取等多项针对外部数据源的性能优化，并充分利用自身的高性能执行引擎和查询优化器，在对外表访问性能上，Apache Doris 可以达到 Trino/Presto 的 3- 5 倍、Hive 的 10-100 倍。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/3f/3fb26ea6a8143929076f5575bd3a93f5.png\" /></p><p></p><h2>2023 RoadMap</h2><p></p><p></p><p>承前而启后，2023 年，Apache Doris 社区在以上几方面特性持续完善的同时，也将开启更多有意义的工作。全年的 RoadMap 以及明年 Q1 的具体计划，可以参考以下的全景图：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f0/f00d8bffee68d38666107132462fb9e6.png\" /></p><p></p><p>稳定的版本发布和迭代速度对于开源软件至关重要。在 2023 年，我们将以每季度一个 2 位版本的节奏，开始 Apache Doris 2.x 版本的迭代。同时，针对每个 2 位版本，我们也将以每月一个 3 位版本的速度进行功能维护和优化。</p><p></p><p>从功能角度来看，后续研发工作将会围绕以下几个主要方向展开：</p><p></p><h3>高性能</h3><p></p><p></p><p>高性能是 Apache Doris 不断追求的目标，过去一年在 Clickbench、TPC-H 等公开测试数据集上的优异表现，已经证明了其在执行层以及算子优化方面做到了业界领先。未来我们也会不断优化各个场景下的性能表现，回馈用户极速的数据分析体验，具体包括：</p><p></p><p>更复杂SQL性能提升： 2022 年我们已经启动全新查询优化器的设计与开发，而这一成果在 2023 年一季度就将与大家见面。全新查询优化器提供了丰富的规则模型，实现了更智能的代价选择，可以更高效地支撑复杂查询，能够完整执行 TPC-DS 全部 99 个SQL。同时全新查询优化器还具备全查询场景的自适应优化，便于用户在面对不同分析负载和业务场景时都获得一致性的使用体验。更高的点查询并发： 高并发一直是 Apache Doris 所擅长的场景，而 2023 年我们将会进一步加强这一能力，通过 Short-Circuit Plan、Prepare Statement、Query Cache 等一系列技术，实现单机数万 QPS 的超高并发支持，并具备随集群规模的拓展进而线性提升并发的能力。更灵活的多表物化视图： 在过去版本中，通过强一致的单表物化视图，Apache Doris 加速了固定维度数据的分析效率。而全新的多表物化视图将会解耦 Base 表与 MV 表的生命周期，通过异步刷新和灵活的增量计算方式，满足多表关联以及更复杂 SQL 的预计算加速需求，这一特性将在接下来的 2023 年第一季度与大家见面！</p><p></p><h3>高性价比</h3><p></p><p></p><p>成本和效率对企业而言是赢得市场竞争的关键，对数据库而言亦是如此。过去 Apache Doris 凭借在易用性方面的诸多设计帮助用户大幅节约了计算与存储资源成本，后续我们也会引入一系列云原生能力，在不影响业务效率的同时进一步降低成本，具体包括：</p><p></p><p>更低的存储成本： 我们将探索与云上对象存储系统和文件系统的结合，帮助用户进一步降低存储成本，包括更完善的冷热数据分离能力，将冷数据智能转移至更廉价的对象存储或文件系统中。结合单一远程副本、冷数据 Cache 以及冷热智能转换等技术，保证业务查询效率不受影响的同时实现存储成本大幅降低，这一功能将于 2023 年第一季度发布。更弹性的计算资源： 剥离存储与计算状态，引入仅用于计算的 Elastic Compute Node 。由于不存储数据，弹性计算节点具备更加快速的弹性伸缩能力，便于用户在业务高峰期进行快速扩容，进一步提升在海量数据计算场景（如数据湖分析）的分析效率，这一功能已经处于最终调试阶段，即将与大家见面。后续我们还将通过对集群内存和 CPU 运行指标的监控和自动策略配置，实现自动的节点扩缩容（Auto-scaling）。</p><p></p><h3>混合负载</h3><p></p><p></p><p>随着用户规模的极速扩张，越来越多的用户将 Apache Doris 用于构建企业内部的统一分析平台。这一方面需要 Apache Doris 去承担更大规模的数据处理和分析，另一方面也需要 Apache Doris 同时去应对更多分析负载的挑战，从过去的实时报表和 Ad-hoc 等典型 OLAP 场景，扩展到 ELT/ETL 、日志检索与分析等更多场景的统一。为了能更好适配这些场景，许多工作已经进入紧锣密鼓的研发中，并将于 2023 年陆续与大家见面，具体包括：</p><p></p><p>更灵活的 Pipeline 执行引擎* *：**与传统的火山模型相比，Pipeline 模型无需手动设置并发度，可以实现不同管道之间的并行计算，充分利用多核的计算能力，实现更灵活的执行调度，提升在混合负载场景下的综合性能表现。Workload Manager： 在性能提升的同时，也亟需完善的资源隔离和划分的能力。我们将会基于 Pipeline 执行引擎实现更细粒度和更灵活的负载管理、资源队列以及共享隔离等功能，兼顾多种混合负载场景下的查询性能与稳定性。轻量级容错： 轻量级容错能力也是我们后续持续完善的地方，既能利用 MPP 的高效率又能对错误进行容忍，以更好适应用户在 ETL/ELT 场景的挑战。函数兼容与多语言UDF： 与此同时，后续也将支持 Hive/Trino/Spark 函数的兼容性以及多语言的 UDF，来帮助用户更灵活地进行数据加工，也可以更方便地从其他数据库系统迁移到 Apache Doris。</p><p></p><h3>多模数据分析</h3><p></p><p></p><p>在过去 Apache Doris 更多是是擅长于结构化数据分析，随着对半结构化、非结构化数据分析需求的增加，从 1.2 版本起我们增加了 Array 和 JSONB 类型以实现数据的 Native 支持，后续版本仍将持续加强这一能力，为日志分析场景提供性价比更高、性能更强的解决方案，具体包括：</p><p></p><p>更丰富的复杂数据类型* *：**除 Array/JSONB 类型以外，2023 年第一季度我们将增加对 Map/Struct 类型的支持，包括高效写入、存储、分析函数以及类型之间的相互嵌套，以更好满足多模态数据分析的支持。后续将支持更加丰富的数据类型，包括 IP、GEO 地理信息等数据类型，并会探索在时序数据场景的高效数据分析。更高效的文本分析算法： 对于文本数据，我们将引入更多的文本分析算法，包括自适应 Like、高性能子串匹配、高性能正则匹配，Like 语句的谓词下推、Ngram Bloomfilter 等，同时基于倒排索引实现全文检索能力，在日志分析场景提供比 ES 更高性能和性价比的分析能力。这些功能都已经处于就绪阶段，将在 2023 年初与大家见面。动态 Schema 表： 传统数据库在设计之初 Schema 是静态的，Schema 变更时需要执行 DDL ，而这一操作往往具有阻塞性。在越来越多的现代数据分析场景中，表结构会随时间推移而变化，因此我们引入了 Dynamic Table，可以根据数据写入自动适应 Schema ，不再需要执行 DDL，由过去的人工干预数据结构进化为数据自驱动，极大提升了灵活数据分析的便捷性。这一功能将在 2022 年第一季度正式发布。</p><p></p><h3>Lakehouse</h3><p></p><p></p><p>随着数据湖技术的发展，分析性能成为发挥数据湖效用、挖掘数据价值最大的掣肘。基于一款简单易用和高性能的查询分析引擎在数据湖之上构建分析服务，成为新的技术趋势。在过去一年，通过在数据湖上的诸多性能优化、结合自身的高性能执行引擎和查询优化器以及，Apache Doris 实现了数据湖上极速易用的分析体验，性能较 Presto/Trino 有 3-5 倍的提升。在 2023 年，我们将会继续完善这一能力，具体包括：</p><p></p><p>更简易的数据对接： 在 1.2 版本中我们发布了 Multi-Catalog，支持了多种异构数据源的元数据自动映射与同步，实现了数据湖的无缝对接，后续将对 Delta Lake 的支持以及 Iceberg、Hudi 等更多数据格式的支持。更完整的数据湖能力支持： 提供数据湖上数据的增量更新与查询，还会支持将分析结果写回数据湖、外表写入内表，实现数据分析流程的全闭环。同时还将支持多版本 Snapshot 读取和删除，并进一步在 Apache Doris 为数据湖数据提供物化视图。</p><p></p><h3>实时性与存储引擎优化</h3><p></p><p></p><p>数据价值会随着时间推移而降低，因此实时性对于高时效性要求的用户而言至关重要。在 1.1 版本中我们在 Compaction 和 Flink 实时写入方面进行了诸多优化，同时 1.2 版本的 Merge-on-Write 数据更新模式进一步使 Apache Doris 在实时更新与极速查询得以统一。2023 年我们将会持续强化对存储引擎的优化，具体包括：</p><p></p><p>更稳定的数据写入： 通过一系列 Compaction 操作和批量数据写入方面的优化，节省资源开销，降低写放大问题，并结合全新的内存管理框架提升写入过程的内存稳定性，进而提升系统稳定性。更完善的数据更新支持： 过去部分列更新是通过 Agg 模型上的 Replace_if_not_null 来实现的，后续我们将会增加 Unique Key 模型上的部分列更新支持，并完整实现 Delete、Update、 Merge 等数据更新的操作。更统一的数据模型： 当前 Apache Doris 的三种数据模型在各个场景均有丰富的应用，后续我们将尝试统一现有几种数据模型，使用户在使用体验上更加统一。</p><p></p><h3>易用性和稳定性</h3><p></p><p></p><p>除了功能方面的丰富与完善，更简单、更易用、更稳定同样也是 Apache Doris 一直追求的目标，2023 年我们将在以下几方面出发，让用户具有更简易和放心的使用体验：</p><p></p><p>简化建表： 目前 Apache Doris 在建表时分区已经支持了时间函数，后续我们将进一步消除 Bucket 设置，帮助用户最大程度简化建表建模。安全性： 目前已经实现基于 RBAC 模型的权限管理机制，使用户权限更安全可靠；并对 ID-federation、行列级别权限，数据脱敏等进行了优化，后续将进一步完善。可观测性： Profile 是定位查询性能问题的重要手段，后续我们将加强对 Profile 的监控并提供可视化 Profile 工具，帮助用户更快定位问题。更好的 BI 兼容性和更完善的数据集成迁移方案： 当前各 BI 工具可以通过 MySQL 协议连接到 Apache Doris，后续我们将对主流 BI 软件进一步适配，保证更佳的查询体验。随着 DBT、Airbyte 等新兴数据集成和迁移工具的兴起，越来越多用户使用此类系统将数据同步至 Apache Doris ，后续我们也会提供对此些系统的官方支持。</p><p></p><h2>开启下一个十年！</h2><p></p><p></p><p>或许有读者或听众还记得我在开头提的问题，对于 Apache Doris，十年意味着什么？</p><p></p><p>有两层含义，上一个十年和下一个十年。</p><p></p><p>上一个十年，是 Apache Doris 起源的十年。从诞生到开源、从默默无闻到被越来越多人熟知和使用，开源赋予了 Apache Doris 更加旺盛的生命力和创造力。</p><p></p><p>而下一个十年，则是一场新的旅程。</p><p></p><p>正如我在本次 Doris Summit 分享的主题，New Journey of Apache Doris。如果说过去 Apache Doris 更多是服务于在线报表场景和 Ad-hoc 分析的 OLAP 引擎的话，那么在所有社区和开发者的努力下，当前 Apache Doris 已经具备了更为广阔的定位，即极速、易用、实时、统一的多模分析型数据库。</p><p></p><p>这其中的统一，既包含了架构的统一、也包含了业务和数据的统一。用户可以通过 Apache Doris 构建多种不同场景的数据分析服务、同时支撑在线与离线的业务负载、高吞吐的交互式分析与高并发的点查询；通过一套架构实现湖和仓的统一、在数据湖和多种异构存储之上提供无缝且极速的分析服务；也可通过对日志/文本等半结构化乃至非结构化的多模数据进行统一管理和分析、来满足更多样化数据分析的需求。</p><p></p><p>这是我们希望 Apache Doris 能够带给用户的价值，不再让用户在多套系统之间权衡，仅通过一个系统解决绝大部分问题，降低复杂技术栈带来的开发、运维和使用成本，最大化提升生产力。</p><p></p><p>“我们已经出发了太久，以至于忘记了为什么出发。”</p><p></p><p>希望通过这一定位的转变迎接下一个十年的挑战，或许技术趋势会有变化，架构将会革新，但我们解决用户数据分析问题的初衷不会改变。</p><p></p><p>希望继续带着上一个十年出发的初心，开启下一个十年的旅程。</p>",
    "publish_time": "2023-01-10 16:42:57",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]