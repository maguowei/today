[
  {
    "title": "小语言才是编程的未来",
    "url": "https://www.infoq.cn/article/djCSHAYyOwAD33oCvIo8",
    "summary": "<p></p><p>本文最初发布于chreke的个人博客。</p><p>&nbsp;</p><p>我坚信，“小语言”——设计用来解决非常具体的问题——是编程的未来，特别是在阅读了Gabriella Gonzalez的著作《<a href=\"https://www.haskellforall.com/2021/04/the-end-of-history-for-programming.html\">编程历史的终结</a>\"》并观看了Alan Kay的演讲<a href=\"https://www.youtube.com/watch?v=YyIQKBzIuBY\">Programming and Scaling</a>\"之后。你也应该看看，因为它们都很棒。下面，我会解释下我所说的“小语言”是什么，以及为什么它们很重要。</p><p>&nbsp;</p><p></p><h2>什么是“小语言”</h2><p></p><p>&nbsp;</p><p>我认为，“小语言”这个词是Jon Bentley在其同名文章“<a href=\"https://dl.acm.org/doi/10.1145/6424.315691\">小语言</a>\"”中创造的，他给出了以下定义：小语言是专门针对特定问题领域的语言，常规语言提供的许多特性它都没有。</p><p>&nbsp;</p><p>例如，SQL是一种描述数据库操作的小语言，正则表达式是一种用于文本匹配的小语言，<a href=\"https://dhall-lang.org/\">Dhall</a>\"是一种用于配置管理的小语言等。这类语言还有其他一些名称，如领域特定语言（DSL）、面向问题语言等等。</p><p>&nbsp;</p><p>然而，我喜欢“小语言”这个词，部分原因是“DSL”这个词已经承载了太多的东西：从提供流体接口（<a href=\"https://en.wikipedia.org/wiki/Fluent_interface\">Fluent Interface</a>\"）的库到像SQL这样的成熟查询语言，还有就是“小语言”突出了它们“小”的特点。</p><p>&nbsp;</p><p></p><h2>为什么我们需要小语言？</h2><p></p><p>&nbsp;</p><p></p><blockquote>如今的大多数软件很像埃及金字塔，数百万块砖堆叠在一起，缺少结构完整性，只是借着蛮力和成千上万的奴隶完成。&nbsp;—— 摘自<a href=\"https://queue.acm.org/detail.cfm?id=1039523\">与Alan Kay的对话</a>\"</blockquote><p></p><p>&nbsp;</p><p>在软件工程社区，我们真正遇到的一个问题是：随着应用程序复杂性的增加，其源代码的大小也会增加。然而在很大程度上，我们理解大型代码库的能力仍然没变。根据Sourcegraph公司2020年的一项调查（<a href=\"https://info.sourcegraph.com/hubfs/CTA%20assets/sourcegraph-big-code-survey-report.pdf\">大代码的出现</a>\"），大多数受访者表示，他们代码库的规模导致了以下一个或多个问题：</p><p>&nbsp;</p><p>新员工很难适应因为缺乏对依赖性的理解而造成代码损坏代码变更难以管理</p><p>&nbsp;</p><p>更糟糕的是，应用程序似乎在以惊人的速度增长：在Sourcegraph的调查中，大多数受访者估计，他们的代码库在过去十年中增长了100-500倍。举个例子，Linux内核在1992年的时候是从大约1万行代码开始的，20年后，它的体量约为3000万行。</p><p>&nbsp;</p><p>这些代码是从哪里来的？“更多的功能”不足以解释这种代码量的增长。相反，我认为这与我们开发软件的方式有关。向程序中添加新功能的一般方法是将它们堆叠在已有的功能上，这与构建金字塔的方式没有什么不同。问题是，就像金字塔一样，后面每一层所需要的砖都比上一层多。</p><p>&nbsp;</p><p></p><h3>逆势而动</h3><p></p><p>&nbsp;</p><p>你真的需要数百万行代码才能创建一个现代操作系统吗？2006年，Alan Kay和他在<a href=\"http://www.vpri.org/pdf/rn2006002_nsfprop.pdf\">STEPS</a>\"项目中的合作者开始向这一假设发起挑战：</p><p>&nbsp;</p><p></p><blockquote>科学的进步是在实证调查和理论模型的交织中完成的，所以作为科学家，我们的第一个问题是：如果我们为个人计算现象建立一个工作模型，那么它是会简化为适用于所有电磁频谱的麦克斯韦方程组（Maxwell’s Equations）或者可以放在衬衫口袋里的美国宪法（US Constitution）这样简单的东西，还是会非常的杂乱无章（或实际上非常复杂），以至于需要像美国法律体系（或当前的软件实践）那样需要“3立方英里的判例法”？答案几乎可以肯定，是介于两者之间，在这种情况下，如果能够证明它更接近简单的一端，而不是那巨大而混沌的另一个极端，那将非常有趣。&nbsp;所以我们要问：本质上，个人计算体验（包括操作系统、应用程序和其他支持软件在内）是20亿行代码，还是2亿、2000万、200万、20万、2万、2000行代码？&nbsp;<a href=\"http://www.vpri.org/pdf/tr2007008_steps.pdf\">STEPS 2007进展报告</a>\"，第4-5页</blockquote><p></p><p>&nbsp;</p><p>Dr. Kay提到的<a href=\"https://en.wikipedia.org/wiki/Maxwell%27s_equations\">麦克斯韦方程组</a>\"是一组描述电磁学、光学和电路学的方程组。很酷的一点是，尽管涉及的范围很大，但它们却非常简洁：</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e3/e38bfb7e83942b66408a3cde8475692e.png\" /></p><p></p><p>&nbsp;</p><p>它们如此简洁的一个原因是使用了<a href=\"https://en.wikipedia.org/wiki/Del\">Del</a>\"符号（如∇）描述向量计算操作。需要注意的是，Del并不是一个真正的运算符——它更像是一种简写，为的是使向量计算中的一些方程更容易处理。</p><p>&nbsp;</p><p>是否有可能为编程创造出同等的Del符号呢？就像Del可以帮助我们使向量运算更易于管理一样，是否有符号可以以同样的方式帮助我们推断程序？这个问题是推动STEPS项目的“强大想法”之一：</p><p>&nbsp;</p><p></p><blockquote>我们还认为，针对要解决的问题创建合适的语言可以使问题更容易解决，使解决方案更容易理解而且也相对较小，这恰好符合我们“active-math”方法的精神。这些“面向问题语言”将被创建出来，用于大大小小的问题以及不同的抽象和细节层次。&nbsp;<a href=\"http://www.vpri.org/pdf/tr2007008_steps.pdf\">STEPS 2007进展报告</a>\"，第6页</blockquote><p></p><p>&nbsp;</p><p>其思想是：当你开始在应用程序中寻找模式时，就可以用一种小语言对它们进行编码——这种语言让你可以用一种比其他抽象方法更紧凑的方式来表示这些模式。这不仅可以防止应用程序不断变大的趋势，而且在实际的开发过程中还会使用代码库缩小！</p><p>&nbsp;</p><p>我觉得，STEPS项目一个特别令人印象深刻的成果是<a href=\"https://github.com/damelang/nile\">Nile</a>\"，这是一种描述图形渲染与合成的小语言。其目标是使用Nile实现与<a href=\"https://en.wikipedia.org/wiki/Cairo_(graphics)\">Cairo</a>\"（一种用于各种自由软件项目的开源渲染器，有大约44000行代码）同等的功能，但Nile代码大约只有300行。</p><p>&nbsp;</p><p></p><h2>为什么不用高级语言？</h2><p></p><p></p><blockquote>然而事实证明，Ada不会成为杀死软件生产率怪物的银弹。毕竟，它只是另一种高级语言，这类语言的最大回报来自于最初的过渡阶段，从机器附带的复杂性上升为更抽象的分步解决方案。一旦这些意外事件得到解决，剩下的意外事件就比较小了，解决它们的回报肯定会变少。&nbsp;—— Frederick P. Brooks，《<a href=\"http://worrydream.com/refs/Brooks-NoSilverBullet.pdf\">没有银弹</a>\"》</blockquote><p></p><p>&nbsp;</p><p>可能有人会问，为什么不能发明一种更高级的通用语言呢？就我个人而言，我相，通用语言的表达能力已经到了回报递减的阶段。如果有更高级的语言，那它会是什么样子呢？以Python为例，它非常高级，看起来已经很像伪代码了。</p><p>&nbsp;</p><p>通用语言的问题是，你仍然需要将问题转换为算法，然后用目标语言表达这个算法。高级语言非常擅长描述算法，但除非目标是实现算法，否则这只是附带的复杂性。</p><p>&nbsp;</p><p>写这篇文章时，我想起了一个关于Donald Knuth的故事：Jon Bentley邀请Knuth在其专栏《编程珠玑》中展示他的编程风格；他还邀请Doug McIlroy对Knuth的项目进行评论。其任务是计算给定文本中的词频。</p><p>&nbsp;</p><p>Knuth的解决方案是用WEB精心编写的，这是他自己的Pascal编程变体。他甚至还加入了一个专门用于记录单词数量的数据结构，所有这一切用了不到10页代码。虽然McIlroy毫不犹豫地称赞了Knuth解决方案的精巧，但他对程序本身并不是很满意。作为评论的一部分，他用Shell脚本、Unix命令和小语言编写了自己的解决方案：</p><p>&nbsp;</p><p><code lang=\"null\">tr -cs A-Za-z '\\n' |\ntr A-Z a-z |\nsort |\nuniq -c |\nsort -rn |\nsed ${1}q</code></p><p>&nbsp;</p><p>虽然对于非Unix骇客来说，这段代码可能读起来有点困难（McIlroy可能也会承认这一点，因为他认为提供一个带注释的版本比较合适），但可以说，与10页的程序相比，这个总结性的回复无疑更容易理解。</p><p>&nbsp;</p><p>Unix命令是为操作文本而设计的，这就是为什么用它可以编写出如此紧凑的单词计数程序——是不是可以将Shell脚本看成是文本操作的“Del表示法”呢？</p><p>&nbsp;</p><p></p><h2>少即是多</h2><p></p><p>&nbsp;</p><p>上面的Unix命令示例说明了小语言的另一个特征：语言功能较弱、运行时功能较强。Gonzalez在《<a href=\"https://www.haskellforall.com/2021/04/the-end-of-history-for-programming.html\">编程历史的终结</a>\"》一书中指出了如下趋势：</p><p>&nbsp;</p><p></p><blockquote>当我们研究上述趋势时，会发现一个共同的模式：- 把用户关注点变成运行时关注点，它- ……使程序更接近纯粹的数学表达式，并且- ……极大地增加了运行时的复杂性。</blockquote><p></p><p>&nbsp;</p><p>正则表达式和SQL只能分别用于表达文本搜索和数据库操作。这与C语言形成了鲜明的对比，C语言没有运行时，你可以用它表达任何在冯·诺依曼体系结构上可能的东西。像Python和Haskell这样的高级语言介于两者之间：它们帮你完成内存管理，但你仍然可以使用<a href=\"https://en.wikipedia.org/wiki/Turing_completeness\">图灵完备</a>\"语言的全部功能，也就是说，你可以表达任何可能的计算。</p><p>&nbsp;</p><p>与C语言相比，小语言处于能谱的另一端：不仅计算机的体系结构被抽象了，其中一些语言还限制了你可以表达的程序的种类——它们在设计上就是图灵不完备的。这听起来可能非常有局限性，但实际上，它为优化和静态分析打开了一个全新的可能性维度。而且，就像抽象掉内存管理可以消除一整类Bug一样，抽象掉尽可能多的算法工作，也有可能消除更多的Bug。</p><p>&nbsp;</p><p></p><h3>静态分析</h3><p></p><p>&nbsp;</p><p>功能不那么强大的语言更容易推理，并且可以提供比通用语言更强的保证。例如，<a href=\"https://dhall-lang.org/\">Dhall</a>\"是一种用于生成配置文件的<a href=\"https://en.wikipedia.org/wiki/Total_functional_programming\">全函数式编程语言</a>\"。因为你不想冒部署脚本崩溃的风险或者把它们放入无限循环，Dhall程序可以保证：</p><p>不崩溃，并且在有限时间内终止。</p><p>&nbsp;</p><p>第一点是通过不抛出异常来实现的；任何可能失败的操作（例如获取一个可能为空的列表的第一个元素）都返回一个Optional结果，该结果可能包含也可能不包含值。第二个点——保证终止——是通过不允许递归定义实现的。在其他函数式编程语言中，递归是表达循环的主要方式，但在Dhall中，你必须依赖于内置的<a href=\"https://en.wikipedia.org/wiki/Fold_(higher-order_function)\">fold</a>\"函数。缺少一般的循环结构也意味着Dhall不是图灵完备的；但因为它不是一种通用编程语言，所以它不需要是完备的（不像CSS）。</p><p>&nbsp;</p><p>如果语言很小，就更容易推理了。例如，对于任意一个Python程序，都很难确定它有没有副作用，但在SQL中就很简单——只需检查查询是否以SELECT[5]开始。</p><p>&nbsp;</p><p>对于Nile，STEPS团队认为需要一个图形化调试器[9]。Bret Victor（是的，就是那个做过“<a href=\"https://www.youtube.com/watch?v=PUv66718DII\">原则性发明</a>\"”演讲的Bret Victor）发明了一个工具，它可以告诉你在屏幕上绘制特定像素所需的确切代码行。你可以在YouTube上观看<a href=\"https://youtu.be/ubaX1Smg6pY?t=3304\">Alan Kay的演示</a>\"，也可以<a href=\"http://tinlizzie.org/dbjr/high_contrast.html\">自己尝试一下</a>\"。因为Nile是一种很容易推理的小语言，所以才可能有像这样的工具——想象一下，尝试用C++编写的图形代码做同样的事情！</p><p>&nbsp;</p><p></p><h3>速度追求</h3><p></p><p>&nbsp;</p><p>功能更强大的编程语言不仅会增加Bug的可能性，还会对性能造成不利影响。例如，如果一个程序不是用算法表达的，那么运行时就可以自由选择自己的算法；如果我们能证明它们生成的结果相同，就可以用速度较慢的表达式代替速度较快的。</p><p>&nbsp;</p><p>例如，SQL查询并不规定一个查询应该如何执行——数据库引擎可以自由使用它认为最合适的任何查询计划，比如，它是应该使用索引，索引组合，还是直接扫描整个数据库表。现代数据库引擎还收集列的值分布信息，因此，它们可以动态选择统计学上最优的查询计划。如果查询是用算法的方式描述的，就不可能这样了。</p><p>&nbsp;</p><p>使<a href=\"https://github.com/damelang/nile\">Nile</a>\"语言如此紧凑的“秘密武器”之一是<a href=\"http://www.vpri.org/pdf/tr2008002_jitblt.pdf\">Jitblt</a>\"，这是一种用于图形渲染的即时编译器。从<a href=\"http://www.vpri.org/pdf/rn2006002_nsfprop.pdf\">STEPS</a>\"团队和<a href=\"https://en.wikipedia.org/wiki/Cairo_(graphics)\">Cairo</a>\"团队的讨论中可以清楚地看到，Cairo的很多代码都是专门用于像素合成操作的手工优化；理论上，这些工作可以交给编译器。Cairo团队的Dan Amelang自愿实现了这样一个编译器，也就是<a href=\"http://www.vpri.org/pdf/tr2008002_jitblt.pdf\">Jitblt</a>\"。这意味着图形管道中的优化工作可以从渲染内容的纯数学描述中分离出来，使得Nile的运行速度可以像最初手工优化的Cairo代码一样快。</p><p>&nbsp;</p><p></p><h2>小语言，大潜力</h2><p></p><p>&nbsp;</p><p>那么，STEPS项目发生了什么呢？他们最终得到的是相当于“3立方英里判例法”的代码，还是设法创建了一个小到可以印在T恤上的操作系统？STEPS的最终结果是KSWorld，这是一个完备的操作系统，包括文档编辑器和电子表格编辑器，代码最终有大约17000行[10]。虽然要印下所有这些代码需要一件非常大的T恤，但我仍然认为这很成功。</p><p>&nbsp;</p><p>KSWorld的创建似乎可以证明小语言的巨大潜力。然而，仍有许多未解之谜，例如：这些小语言相互之间应该如何交互？是否应该将它们编译成通用的中间表示形式？或者同时存在多种不同的运行时并通过通用协议（例如UNIX管道或TCP/IP）相互通信？或者每种语言都足够小，可以用各种不同的宿主语言重新实现（比如正则表达式）？又也许，未来的道路会结合所有这些方法？无论如何，我都相信，我们需要想出一种不同的软件构建方法。也许小语言会成为这个故事的一部分，也许它们不会——重要的是，我们要停止互扔砖头的做法，想出更好的方法。</p><p></p><h2>延伸阅读</h2><p></p><p><a href=\"https://github.com/spec-first/connexion\">Connexion</a>\"是Zazzle开发的一个开源API框架；它的突出之处在于它可以根据<a href=\"https://www.openapis.org/\">OpenAPI</a>\"规范自动生成端点；通常，你会使用<a href=\"https://www.openapis.org/\">OpenAPI</a>\"来描述现有HTTP服务的端点，但<a href=\"https://github.com/spec-first/connexion\">Connexion</a>\"却采用了相反的方式：给定一个OpenAPI模式，它将配置一个带有端点、验证逻辑和在线文档的API服务器。<a href=\"https://law.mit.edu/pub/ideaflow8/release/5\">Catala</a>\"是一种声明式语言，用于将法律文本翻译成可执行的规范。因为它支持非单调推理（即后面的语句可以抵偿或进一步限定前面的语句），它允许用与编写法律文本大致相同的方式来表达程序，例如，作为一组语句，可以通过添加新语句来修改或扩展。<a href=\"https://racket-lang.org/\">Racket</a>\"是一种Lisp方言，专门为创建新语言而设计（这种技术有时被称为<a href=\"https://beautifulracket.com/appendix/why-lop-why-racket.html\">面向语言编程</a>\"）。我自己并没有太多的时间摆弄Racket，但它看起来是一个非常适合创建“小语言”的工具。如果你感兴趣，可以阅读“<a href=\"https://queue.acm.org/detail.cfm?id=2068896\">使用Racket创建语言</a>\"”的教程。虽然STEPS项目已于2018年结束，但所有的结果都可以从<a href=\"http://vpri.org/writings.php\">VPRI Writings</a>\"页面上获取。</p><p>&nbsp;</p><p>参考资料：</p><p>&nbsp;</p><p><a href=\"https://www.phoronix.com/news/Linux-Git-Stats-EOY2019\">https://www.phoronix.com/news/Linux-Git-Stats-EOY2019</a>\"</p><p><a href=\"http://www.vpri.org/pdf/tr2009016_steps09.pdf\">http://www.vpri.org/pdf/tr</a>\"<a href=\"http://www.vpri.org/pdf/tr2009016_steps09.pdf\">2009</a>\"<a href=\"http://www.vpri.org/pdf/tr2009016_steps09.pdf\">01</a>\"<a href=\"http://www.vpri.org/pdf/tr2009016_steps09.pdf\">6</a>\"<a href=\"http://www.vpri.org/pdf/tr2009016_steps09.pdf\">_steps09.pdf</a>\"</p><p><a href=\"https://news.ycombinator.com/item?id=1803815\">https://news.ycombinator.com/item?id=1803815</a>\"</p><p><a href=\"https://homepages.cwi.nl/~storm/teaching/reader/BentleyEtAl86.pdf\">https://homepages.cwi.nl/~storm/teaching/reader/BentleyEtAl</a>\"<a href=\"https://homepages.cwi.nl/~storm/teaching/reader/BentleyEtAl86.pdf\">86</a>\"<a href=\"https://homepages.cwi.nl/~storm/teaching/reader/BentleyEtAl86.pdf\">.pdf</a>\"</p><p><a href=\"https://news.ycombinator.com/item?id=15187150\">https://news.ycombinator.com/item?id=15187150</a>\"</p><p><a href=\"https://accodeing.com/blog/2015/css3-proven-to-be-turing-complete\">https://accodeing.com/blog/2015/css3-proven-to-be-turing-complete</a>\"</p><p><a href=\"http://www.vpri.org/pdf/tr2007008_steps.pdf\">http://www.vpri.org/pdf/tr2007008_steps.pdf</a>\"</p><p><a href=\"http://www.vpri.org/pdf/tr2012001_steps.pdf\">http://www.vpri.org/pdf/tr2012001_steps.pdf</a>\"</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：<a href=\"https://chreke.com/little-languages.html\">https://chreke.com/little-languages.html</a>\"</p>",
    "publish_time": "2023-10-01 07:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "日常沟通之道：走向果敢",
    "url": "https://www.infoq.cn/article/7qr6j0jUlA4P8b63CGoy",
    "summary": "<p>你知道当你勇敢地说“不”，然后又对此感到不舒服的那种感觉吗？我很清楚那种感觉。</p><p>&nbsp;</p><p>在我的职业生涯中，我周围的人曾多次为设定界限而挣扎。在经历了这些之后，我决定学习更多与沟通技巧相关的知识，我想与大家分享一下我所掌握的知识。</p><p>&nbsp;</p><p>在本文中，我们将会对什么是果敢的技能有一个正确的理解，并学习如何识别我们需要的沟通技能，以使自己变得更加果敢。你会得到与果敢的人相关的特征、技能信息。此外，我将分享我的个人经验，我与果敢技巧作的斗争以及我是如何实践果敢技能的。最终，我希望大家可以在日常沟通中做出一些小的改变。</p><p>&nbsp;</p><p></p><h2>为什么我会决定学习更多关于果敢的知识？</h2><p></p><p></p><p>在我之前工作的一家公司，我注意到我的许多同事都很难沟通他们自己的界限；他们不够勇敢，或者是缺乏果敢的知识。更让我惊讶的是，当我对上司表现得友善而果敢时，他们根本不知道该如何响应。</p><p>&nbsp;</p><p>当然，并不是每个人都是这样，但这仍然引人注目。对我们很多人来说，我在工作场所的果敢沟通和对它的响应都是一种新情况。我试图指导我的许多下属，帮助他们掌握果敢的技能，在我决定离开那家公司之后，我举办了一次关于果敢的会议。这对一些与会者和我自己来说都有很大的影响。</p><p>&nbsp;</p><p>在那次会议之后，我意识到这种分享是多么重要，并且它能改变生活。也许我应该更多地分享我的技能和知识。</p><p>&nbsp;</p><p></p><h2>定义果敢</h2><p></p><p></p><p>我一直在寻找一个好的定义，这不是一件容易的事情！每一种知识来源似乎都有自己的定义。如果让我选择一个，我会选择我在西澳大利亚政府临床干预中心网站上找到的那个定义：</p><p>&nbsp;</p><p></p><blockquote>“果敢是一种沟通风格。它是能够以一种不侵犯他人权利的开放方式表达你的感受、想法、信仰和观点。”</blockquote><p></p><p>&nbsp;</p><p>这与我的经验产生了共鸣，果敢不仅仅是一种技能，而是多种技能。作为一个果敢的人，你必须能够在不侵犯他人的情况下表达你的信仰和感受。在我担任测试负责人或质量经理的职业生涯中，我多次收到反馈，说我在表达自己时过于情绪化或过于“咄咄逼人”。</p><p>&nbsp;</p><p>在与作者一起研究反馈时，我们得出结论，与我共事的人根本不习惯以直截了当的方式进行果敢的沟通。</p><p>&nbsp;</p><p></p><h2>果敢的人所具备的技能</h2><p></p><p></p><p>你有没有想过，你应该具备多少技能才能变得果敢呢？</p><p>&nbsp;</p><p>在这里，你可以根据西澳大利亚政府临床干预中心的材料找到果敢的人所拥有的技能清单：</p><p>&nbsp;</p><p>说“不”给予赞美表达你的观点寻求帮助表达愤怒表达爱意陈述你的权利和需要给予批评受到批评开始并保持对话</p><p>&nbsp;</p><p>看到上面的清单，我对获得和实践果敢所需技能的长度和多样性感到惊讶。我很幸运，在我的童年，我的父母、老师和同学教会了我如何说“不”，并毫无顾虑地表达自己的意见或想法。</p><p>&nbsp;</p><p>我在日常生活中积极运用这些技能，例如，我拒绝喝咖啡，因为我不是一个超级咖啡迷。事实上，我不喜欢咖啡的味道，当有人给我提供咖啡或咖啡主题的甜点时，我经常需要使用我的果敢武器库。我发现有趣的是，我需要使用上面列表中的许多技能来保持果敢，以免自己成为“咖啡狂热”的一份子。我的同事和朋友让我品尝新的咖啡时，经常会说“它尝起来不像咖啡”或“也许你会改变主意的”。值得庆幸的是，我从小就练习了避免吃自己不喜欢的食物，后来我拒绝抽烟喝酒。</p><p>&nbsp;</p><p>有时，我会在一些果敢的技巧上挣扎，有时候我会尝试这些咖啡主题的甜点或饮料，只是为了确认我不喜欢它们。下面我将与大家分享一些我经常使用到的更果敢的沟通方式。我知道我仍然需要学习如何照顾自己的情绪，尤其是当有人试图突破我的界限而让我变得愤怒时。不果敢的影响不仅表现在我们同意自己不喜欢的事情的情况下，还可能导致下面将要提到的其他影响。</p><p></p><h2>人们不果敢的影响</h2><p></p><p></p><p>我提到的临床研究显示了果敢的人应该具备哪些技能，并且也说明了不果敢会带来哪些负面影响：</p><p>&nbsp;</p><p>不果敢的主要影响是会导致自卑。如果我们从不公开表达自己，隐藏自己的想法和感受，那就会让我们感到紧张、压力、焦虑或怨恨。它还会导致不健康和不舒服的关系。我们可以感觉到，我们最亲近的人好像也不能真正地了解我们。</p><p>&nbsp;</p><p>你是否还记得在工作中有人要求你承担额外的责任或更长时间地支持你的团队，但你已经有了计划，或者只是累了？如果你由于没有学会果敢的沟通而没有说出来，你可能会感到不舒服，甚至更累，更生气。</p><p>&nbsp;</p><p>作为缺乏果敢的一个例子，我记得有一次我请假去参加我爷爷祖母葬礼的情景。尽管我提出了善意的请求，我的老板还是让我留下来支持团队。多年来，我一直在工作，因为我在个人生活中的一个重要情况下做出了错误的决定，而且我没有与老板和团队进行适当的沟通，所以我感到很难过。</p><p>&nbsp;</p><p>更重要的是，我后来和我的老板讨论了这个问题，我们都认为这是一个错误的决定。我没有表达我感到的不舒服，我错过了生命中的一个重要时刻。从那天起，我列出了自己的人生价值观，直到今天，它们一直都在指引着我做出决定，这有助于我变得果敢。</p><p>&nbsp;</p><p>在疫情期间，我面临着另一种场景。我们都工作得太多了，感到压力很大，筋疲力尽。我们沟通得当吗？我不这么认为。后来，在人力资源业务合作伙伴的大力支持下，我的团队组织了一次会议，讨论如何应对压力，并意识到我们会何时筋疲力尽。对于我的许多团队成员来说，这是一次大开眼界的会议，也是关于设定界限对话的一个良好开端。我们了解到了我们有压力，我们相互分享了如何在新的虚拟现实中通过在线工具识别这种感觉。</p><p>&nbsp;</p><p>当我们感到压力时，我们会使用什么语言或采取什么行为呢？教练和我们分享了一些减轻压力的技巧，以及当压力持续太久时该怎么做。我们无法减轻与环境或工作有关的压力，但我们可以改变日常沟通，更多地相互支持。我们每个人都认识到什么价值观是最重要的，所以做决定变得容易多了。</p><p>&nbsp;</p><p>我需要在这里提到的是，当人们加入一个新的团队、组织或环境时，他们往往会不那么果敢；我们希望每个人都能接受我们，喜欢我们，承认我们是专业人士。这是一个陷阱，可能会导致我们产生上述所有的负面影响。这就是为什么我在工作场所的屏幕边放了有一份“果敢权利法案”的印刷本。下面让我们看看它到底是什么。</p><p>&nbsp;</p><p></p><h2>果敢权利法案</h2><p></p><p></p><p>我在读Manuel J. Smith的《强势：如何在工作、恋爱和人际交往中快速取得主导权》（When I Say No, I Feel Guilty: How to Cope - Using the Skills of Systematic Assertive Therapy）一书时，发现了“果敢权利法案”。这是一本旧书，我很惊讶我为什么这么晚才发现它。我强烈建议大家读一读。</p><p>&nbsp;</p><p>我相信“果敢权利法案”是我们所有人都应该打印出来并摆在我们眼前的东西之一，尤其是在商务会议上。正如我所提到的，我在工作场所有它，当我觉得有人对我有期望时，当有人与我分享他们的反馈时，或者当我需要改变自己所做的决定时，我都会读它。在波兰语中，我们说“Tylko głupi nie zmienia zdania”，翻译过来就是“只有傻瓜才会改变主意”，有时这可能是作为一个果敢的人应该做的事情！</p><p>&nbsp;</p><p>Manuel J. Smith的“果敢权利法案”：</p><p>&nbsp;</p><p>你有权判断自己的行为、思想和情绪，并为它们的产生和后果承担责任。你有权不提供任何理由或借口为自己的行为辩护。你有权判断自己是否有责任为他人的问题找到解决方案。你有权改变主意。你有权犯错误，并对错误负责。你有权说：“我不知道。”在与他人打交道之前，你有权不受他人善意的影响。你有权做出不合逻辑的决定。你有权说：“我不明白。”你有权说：“我不在乎。”</p><p>&nbsp;</p><p>现在我想为你提供一个练习：请提醒自己上一次你对自己的决定感到不舒服的场景。然后看看上面的清单。看完这份清单后，你的想法是否会有所不同？对我来说，经常是的。</p><p>&nbsp;</p><p>我在这里必须要提的是，当看到这本书是在1975年出版却没有被翻译成波兰语时，我是多么震惊。在波兰语中，我们有很多关于如何避免操纵的书，但关于如何果敢沟通的书却很少。希望在波兰语中，有更多这样的翻译书籍！</p><p>&nbsp;</p><p>我们现在知道了什么是果敢，我们应该拥有哪些技能，不果敢会导致什么后果，以及我们拥有的权利清单，但我们应该如何在实践中运用它呢？</p><p>&nbsp;</p><p></p><h2>实践果敢</h2><p></p><p></p><p>我相信我们每个人都需要找到自己的方式，在尊重他人的情况下更加果敢地进行沟通。我们需要考虑各种因素，例如性别、文化背景、我们所在的组织和我们的环境。</p><p>&nbsp;</p><p>与我自己周围的其他人相比，我倾向于比其他人更强烈地表达和争取自己的信仰和观点，因此我目前正在学习更加注意他们的观点、想法或信仰。</p><p>&nbsp;</p><p>其他人要向我表达自己的观点或改变我的想法并不容易。尽管如此，我发现我有很多同理心，我经常把别人的需求放在自己的需求之前，所以这是我必须要果敢应对的另一件事。</p><p>&nbsp;</p><p>当我与他人交流时，有很多事情我需要记住，不要跨越他们或我自己的界限。尽管我被认为是一个果敢的人，但我还是有很多东西要学。</p><p>&nbsp;</p><p>前段时间，我发现了一些关于更果敢沟通的技巧。我相信以下几点是有价值且有用的。让我们一起来看看：</p><p>&nbsp;</p><p>了解自己的需求和价值观。如果你的要求是合理的，要自信，并准备好理由说明你为什么需要它。了解对方的观点。通过提供适合你的选项来显示灵活性。说话时保持冷静和坚定。让自己成为替罪羊。使用破纪录技术。</p><p>&nbsp;</p><p>我想强调的是，上面的一些建议可能并不适用于所有人，也不适用于所有场合。例如，“让自己成为替罪羊。”这将取决于场景、你的人际关系和你的环境。你不能总是当替罪羊，也不能为别人的错误负责。</p><p>&nbsp;</p><p>让我们回到个人生活价值观的话题上来。基于个人价值观的决策是我在职业和私人生活中对所有我同意的事情都感到满意的关键。</p><p>&nbsp;</p><p></p><h3>怎么做？</h3><p></p><p></p><p>例如，你可以在脑海中想象“如果……会发生什么？”。例如，如果你的家人生病了，需要你全力照顾，你会辞去现有的工作吗？你应该怎么办？</p><p>&nbsp;</p><p></p><h3>我如何做决定？</h3><p></p><p></p><p>在我的职业生涯中，我学会了在我花时间思考并准备一系列问题来正确设定期望值和可能的时间表之前，不要同意任何事情。</p><p>&nbsp;</p><p>这让我的生活发生了很大的变化，因为我是那种即使是独自面对太有挑战性的任务也总是努力完成的人。在我学会处理这种情况并做出正确的决定之前，它经常让我感到压力、不舒服或疲惫。</p><p>&nbsp;</p><p>对我帮助很大的是学会了如何在截止日期或范围内寻求帮助或改变。每天，我都在练习为“为什么”某些事情必须要改变以及我看到了哪些选项而准备论据。</p><p>&nbsp;</p><p>它救了我很多次，我强烈建议你说“不”，至少提供2-3个你可以做的选择。如果你花时间把事情想清楚，你就能很容易进行果敢的沟通，你也会对自己的决定感到满意。</p><p>&nbsp;</p><p>正如你所看到的，果敢是一项具有挑战性的任务。它需要很多技能、沟通技巧和努力，但它可能有助于你实现自己的目标和保持良好的关系。</p><p>&nbsp;</p><p></p><h2>学习更多关于果敢的知识</h2><p></p><p></p><p>我不是专家，也不是受过良好教育的心理学家，而是一个愿意与你分享自己的经验的专业从业者。我想分享那些帮助我和与我共事的人变得更快乐、更准时的东西。</p><p>&nbsp;</p><p>下面你会发现一些我在研究过程中发现的有用材料。在阅读了我的文章并在谷歌上搜索之后，你可能会发现更多。</p><p>&nbsp;</p><p>我最后给你的建议是看看儿童读物，这可能有助于你理解情绪，更有效、更冷静地沟通。</p><p>&nbsp;</p><p>以下是我推荐的其他资料：</p><p>&nbsp;</p><p>Adam Galinsky的TED演讲：“<a href=\"https://www.ted.com/talks/adam_galinsky_how_to_speak_up_for_yourself\">如何为自己说话</a>\"”视频：“<a href=\"https://www.facebook.com/watch/?v=2117000204984319\">如何变得更加果敢：7个技巧</a>\"”文章：“<a href=\"https://rediscoveryofme.com/how-to-say-no-politely/\">如何礼貌地说‘不’</a>\"”Robert Glover的书籍：《<a href=\"https://www.drglover.com/no-more-mr-nice-guy.html\">不再是好好先生</a>\"》Manuel J. Smith的书籍：<a href=\"https://www.penguinrandomhouse.com/books/169305/when-i-say-no-i-feel-guilty-by-manuel-j-smith/\">《当我说不时，我感到内疚》</a>\"西澳大利亚政府下属的<a href=\"http://www.cci.health.wa.gov.au/docs/Assertmodule%201.pdf\">临床干预中心</a>\"</p><p>&nbsp;</p><p>我希望本文能给你一些启发，让你了解如何变得更果敢，并知道该做什么。祝你好运，你可以做到的！</p><p>&nbsp;</p><p></p><h2>锻炼你的沟通技巧和果敢</h2><p></p><p></p><p>你的任务是看看下面列出的沟通技巧，并分析你在与最熟悉的人沟通时感受到的舒适度：</p><p>&nbsp;</p><p>你的伴侣你的父母你的孩子你最好的朋友其他朋友陌生人你的老板工作的同事</p><p>&nbsp;</p><p>结果将会告诉你，你在未来的个人发展中应该掌握哪些沟通技巧。</p><p>&nbsp;</p><p></p><h3>技能列表</h3><p></p><p></p><p>说“不”给予赞美表达你的观点寻求帮助表达愤怒表达爱意陈述你的权利和需要给予批评受到批评开始并保持对话</p><p>&nbsp;</p><p>以上列出的技能来自西澳大利亚政府临床干预中心的一项关于果敢的研究：<a href=\"http://www.cci.health.wa.gov.au/docs/Assertmodule%201.pdf\">什么是果敢？</a>\"</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/becoming-more-assertive/\">https://www.infoq.com/articles/becoming-more-assertive/</a>\"</p>",
    "publish_time": "2023-10-01 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "加速机器学习模型开发：AirBnb利用Chronon实现特征工程",
    "url": "https://www.infoq.cn/article/2fI2S5hqu4NzwfiqEDYo",
    "summary": "<p>AirBnb经常要创建用于机器学习模型的新特征，为了提高生产力和可扩展性，他们构建了一个名为<a href=\"https://medium.com/airbnb-engineering/chronon-a-declarative-feature-engineering-framework-b7b8ce796e04\">Chronon</a>\"的解决方案，用于创建将原始数据转换为特征并进行训练和推理所需的基础设施。</p><p>&nbsp;</p><p>AirBnb工程师兼Chronon创始人Nikhil Simha解释说，将原始数据转换为特征并用于训练ML模型是一项复杂且耗时的任务，工程师需要从AirBnb数据仓库中提取数据，并编写复杂的ETL逻辑将其转换为特征。另一个难点在于要确保这个逻辑所生成的推理特征分布与训练时的相同。</p><p>&nbsp;</p><p>Simha说，Chronon就是为了解决这些问题，使机器学习工程师在训练和推理中以可复制的方式定义特征并中心化数据计算。</p><p></p><p></p><blockquote>作为用户，你只需要声明一次计算，Chronon就会生成所需的所有基础设施，不断地将原始数据转换为训练和服务所需的特征。AirBnb的机器学习从业者不用再花费数月的时间手动实现复杂的管道和特征索引。通常，他们用不到一周的时间就可以为他们的模型生成新的特征集。</blockquote><p></p><p>&nbsp;</p><p><a href=\"https://central.sonatype.com/namespace/ai.chronon\">Chronon</a>\"的第一个组件支持从各种数据源获取数据，包括事件数据源、实体数据源和累积事件源，从每个数据源收集不同类型的数据。</p><p>&nbsp;</p><p>摄取数据后，它就可以使用类似SQL的操作和聚合进行转换，从而生成服务于在线模型的低延迟端点，以及用于离线训练的Hive表。在底层，Chronon使用Kafka、Spark/Spark Streaming、Hive和Airflow来构建管道。类似SQL的操作包括GroupBy、Join和StagingQuery，它们是Spark SQL查询，每天脱机计算一次。聚合包括窗口、桶和基于时间的聚合。</p><p>&nbsp;</p><p>最后，它还有一个Python API，提供了类似SQL的原语，并将基于时间的聚合和窗口作为一级概念。例如，使用Python API，你可以过滤和转换用户在过去五个小时内查看某个物品的次数。</p><p>&nbsp;</p><p>Chronon有一个重要的概念是准确性，即特征值更新的频率，是实时更新还是固定时间间隔更新。要根据特定的用例选择合适的准确性，因此，Chronon让用户可以方便地将计算的准确性设为为temporal或snapshot。</p><p>&nbsp;</p><p>在写这篇文章的时候，我还不知道AirBnb是否会在GitHub上提供Chronon，但如果你想创建自己的特征工程管道，可以读下原文中的讨论，非常有趣。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/08/airbnb-chronon-ml-features/\">https://www.infoq.com/news/2023/08/airbnb-chronon-ml-features/</a>\"</p>",
    "publish_time": "2023-10-01 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]