[
  {
    "title": "华为盘古大模型3.0发布：不开源，现阶段谈投入和收益为时尚早",
    "url": "https://www.infoq.cn/article/Ay9xCWPdOe5rVBlpeXf0",
    "summary": "<p>2023年7日-9日，<a href=\"https://developer.huaweicloud.com/HDC.Cloud2023.html\">华为开发者大会2023（Cloud）</a>\"期间，华为发布盘古大模型3.0。华为盘古大模型最早在<a href=\"https://www.infoq.cn/article/uA57iVqYczit1b1ODjBi\">2021年发布</a>\"，发展到今天，盘古大模型已经在金融、制造、医药研发、煤矿、铁路等诸多行业发挥作用。</p><p></p><p>华为云CTO张宇昕在接受 InfoQ 采访时表示，华为盘古大模型全栈技术均由华为自主创新，从算力到基础的算子、基础的框架到盘古的开发平台以及模型均没有采用任何开源技术。另外，由于华为云盘古大模型的定位是“AI&nbsp; for&nbsp; Industries”，这些行业大模型里沉淀了客户的知识经验，所以华为不会、也不可能把客户的资产开放出来，也就是说盘古大模型不会开源，而是走商业闭源的道路。</p><p></p><p>据华为常务董事、华为云 CEO 张平安介绍，盘古大模型3.0是面向行业的大模型系列，包括“5+N+X”三层架构：L0层是5个基础大模型，包括自然语言、视觉、多模态、预测、科学计算，提供满足行业场景中的多种技能需求。</p><p></p><p>盘古3.0为客户提供100亿参数、380亿参数、710参数和1000亿参数的系列化基础大模型，匹配客户不同场景、不同时延、不同响应速度的行业多样化需求。同时提供全新能力集，包括NLP大模型的知识问答、文案生成、代码生成，以及多模态大模型的图像生成、图像理解等能力，这些技能都可以供客户和伙伴企业直接调用。无论多大参数规模的大模型，盘古提供一致的能力集。</p><p></p><p>L1层是N个行业大模型，华为云既可以提供使用行业公开数据训练的行业通用大模型，包括政务，金融，制造，矿山，气象等大模型；也可以基于行业客户的自有数据，在盘古大模型的L0和L1层上，为客户训练自己的专有大模型。</p><p></p><p>L2层是为客户提供X个细化场景的模型，更加专注于政务热线、网点助手、先导药物筛选、传送带异物检测、台风路径预测等具体行业应用或特定业务场景，为客户提供“开箱即用”的模型服务。</p><p></p><p>盘古大模型采用完全的分层解耦设计，一方面是为了快速适配、快速满足行业的多变需求，背后更是华为希望借此构筑出良好的商业模式的考虑。</p><p></p><p>在解耦的三层设计之上，客户既可以为自己的大模型加载独立的数据集，也可以单独升级基础模型，可以单独升级能力集。在L0和L1大模型的基础上，华为云还为客户提供了大模型行业开发套件，通过对客户自有数据的二次训练，客户就可以拥有自己的专属行业大模型。同时，根据客户不同的数据安全与合规诉求，盘古大模型还提供了公用云、大模型云专区、混合云多样化的部署形态。</p><p></p><p>张平安强调，盘古大模型的路标图价值将更注重于行业应用的深化和扩展。团队已经在铁路、煤矿、金融和政府等行业开展了大模型的应用，并且还有许多行业需要大模型的支持。未来，团队将加快行业大模型的开发速度，并且在行业垂直领域深化应用。</p><p></p><p>算力是训练大模型的基础。本次大会上，张平安还宣布单集群2000P Flops算力的<a href=\"https://www.infoq.cn/article/ZKKj2QMlrYopHAcLyMSJ\">昇腾AI</a>\"云服务在华为云的乌兰察布和贵安AI算力中心同时上线。昇腾AI云服务除了支持华为全场景AI框架昇思MindSpore外，还支持Pytorch、Tensorflow等主流AI框架。</p><p></p><p>毫无疑问，大模型的投入是巨大的。不过张平安亦坦言，现阶段讨论盘古大模型的成本与收益还为时尚早，华为在贵阳和乌兰察布投入了大量昇腾AI算力，并相信把昇腾AI算力做好之后，中国的许多行业以及重塑将会采用盘古大模型。</p>",
    "publish_time": "2023-07-10 07:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "C++变化太大！该重新学习这门语言了",
    "url": "https://www.infoq.cn/article/glGY3r8TpkNUaKf39si2",
    "summary": "<p>C++是一门古老但不断演进的语言。你几乎可以使用它来做任何事情，而且可以在很多地方找到它的身影。实际上，C++的发明者Bjarne Stroustrup将其<a href=\"https://accu.org/journals/overload/29/161/stroustrup/\">描述为</a>\"一切事物的隐形基础。有时，它可以深入到另外一门语言的库中，因为C++可以用于性能关键的路径中。它可以在小型的嵌入式系统中运行，也可以为视频游戏提供动力。你的浏览器可能正在使用它。C++几乎无处不在！</p><p></p><h2>C++为何如此重要</h2><p></p><p></p><p>迄今为止，C++已经存在了很长的时间，但是其变化也是非常大的，尤其是2011年之后。当时，推出了一个名为C++11的新标准，标志着一个频繁更新的时代正式开启。如果你从C++11就没有使用过C++，那么你有很多东西需要补习，这要从哪里开始呢？</p><p></p><p>该语言是需要编译的，面向特定的架构，如PC、大型机、嵌入式设备、定制硬件，或者你想到的其他东西。如果你需要代码在不同类型的机器上运行，那需要重新编译它。这有缺点也有优点。不同的配置会带来更多的维护工作，但编译到特定架构能够让你“因地制宜（down to the metal）”，从而获得速度方面的优势。</p><p></p><p>不管你的目标是哪种平台，均需要一个编译器。你还需要一个编辑器或集成开发环境（IDE）来编写C++代码。<a href=\"https://isocpp.org/get-started\">ISOCpp</a>\"给出了一个资源清单，包括C++编译器。Gnu编译器集（Gnu compiler collection，gcc）、Clang和Visual Studio均有免费版本。你甚至可以使用<a href=\"https://godbolt.org/\">Matt Godbolt的编译器探索器</a>\"，在浏览器上尝试基于各种编译器的代码。编译器可能支持不同版本的C++，所以必须在编译器标记中说明你所需要的版本，例如g++的-std=c++23或Visual Studio的/std:c++latest。ISOCpp网站上有一个<a href=\"https://isocpp.org/wiki/faq\">FAQ区域</a>\"，概述了最近的一些变化，包括C++11和C++14，以及整体的概览。另外，还有多本关于C++最近版本的图书。</p><p></p><h2>使用Vector快速了解C++11</h2><p></p><p></p><p>如果你已经被落下了，那么大量的资源可能会让你不知所措。但是，我们可以通过一个小例子来理解一些基础知识。停下来，亲自动手试一试往往是最好的学习方法。因此，我们从简单基础的东西开始吧！</p><p></p><p>一个很有用（且简单）的起点是不太起眼的vector，它位于std命名空间的vector头文件中。CppReference提供了一个<a href=\"https://en.cppreference.com/w/cpp/container/vector\">概述</a>\"，告诉我们vector是一个序列容器，封装了动态大小的数组。因此，vector包含了一个连续的元素序列，我们可以根据需要调整vector的大小。vector本身是一个类模板，因此它需要一个类型，例如std::vector。我们可以使用push_back将一个条目添加到vector的尾部。C++11引入了一个名为emplace_back的新方法，该方法取值来构造一个新的条目。对于int，代码看上去是一样的：</p><p></p><p><code lang=\"cpp\">std::vector numbers;\nnumbers.push_back(1);\nnumbers.emplace_back(1);\n</code></p><p></p><p>如果我们有比int更复杂的东西，那么就可能在emplace版本中获得性能方面的收益，因为emplace版本可以就地构造条目，从而避免对其进行复制。</p><p></p><p>C++11引入了_r-value引用_和_移动语义（move semantics）_来避免不必要的复制。潜在的性能改善是C++11的驱动力之一，后续的版本都是在此基础上进行的。为了解释什么是r-value引用，我们可以考虑前面样例中的push_back方法。它有两个重载形式，其中一个会接受一个常量引用，即const T&amp;值，另外一个接受一个r-value引用，即T&amp;&amp;值。第二个版本会将元素移动到vector中，这可以避免复制临时对象。与之类似，emplace_back的签名通过r-value引用来获取参数，Args&amp;&amp;…，同样允许移动参数而无需复制。移动语义是一个很大的话题，我们只是接触到了它的皮毛。如果你想了解更多详情的话，Thomas Becker在2013年撰写了一篇很好的<a href=\"http://thbecker.net/articles/rvalue_references/section_01.html\">文章</a>\"，介绍了它的细节。</p><p></p><p>我们创建一个vector并在其中放置几个条目，然后使用来自iostream头文件的std::cout展示其内容。我们使用流插入操作符&lt;&lt;来显示这些元素。我们基于vector的size编写一个for循环，并使用操作符[]来访问每个元素：</p><p></p><p><code lang=\"cpp\">#include \n#include \n\nvoid warm_up()\n{\n    std::vector numbers;\n    numbers.push_back(1);\n    numbers.emplace_back(1);\n    for(int i=0; i<<=\"\" numbers[i]=\"\" '=\"\" ';=\"\" }=\"\" '\\n';=\"\" int=\"\" main()=\"\" warm_up();=\"\" <=\"\" code=\"\"></code></p><p></p><p><code lang=\"cpp\">该代码会显示两个1。这段代码可以在<a href=\"https://godbolt.org/z/YeGrvsbb5\">编译器探索器</a>\"上找到。</code></p><p></p><h2><code lang=\"cpp\">类模板参数推断</code></h2><p></p><p><code lang=\"cpp\">让我们做一些更有意思的事情，并学习一下现代的C++。我们构建几个数字三角，会发现它们之间存在一个模式。数字三角的值是1，3，6，10……它们分别由1，1+2，1+2+3，1+2+3+4，……相加而成。如果我们这些斯诺克球架起来，就可以组成一个三角形，它也因此得名：</code></p><p></p><p><code lang=\"cpp\"><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/articles/relearning-cpp-11/en/resources/18figure-1-1683536195865.jpg\" /></code></p><p></p><p><code lang=\"cpp\">如果再增加一排，我们就会再增加六个斯诺克球。再加一排就会增加七个，以此类推。</code></p><p></p><p><code lang=\"cpp\">为了得到数字1，2，3等，我们可以构建一个充满1的vector，然后将这些数字相加。我们可以直接创建一个vector，比如18个1，而不必再增加另一个循环。我们说明想要多少个元素，然后再指明它的值：</code></p><p></p><p><code lang=\"cpp\"><code lang=\"cpp\">   std::vector numbers(18, 1);\n</code></code></p><p></p><p><code lang=\"cpp\">注意我们不需要再声明了。因为从C++17开始，_<a href=\"https://en.cppreference.com/w/cpp/language/class_template_argument_deduction\">类模板参数推断（CTAD）</a>\"就已经实现了。编译器可以推断出我们指的是int，因为我们要求的值是1，这是一个int。如果我们需要显示vector，那么可以使用_基于range的for循环。此时，我们不必使用基于vector索引的传统for循环，而是声明一个类型，甚至可以使用新的关键字auto，告诉编译器判断类型，然后是冒号和容器：</code></p><p></p><p><code lang=\"cpp\"><code lang=\"cpp\">   for (auto i : numbers)\n    {\n        std::cout &lt;&lt; i &lt;&lt; ' ';\n    }\n    std::cout &lt;&lt; '\\n';   \n</code></code></p><p></p><p><code lang=\"cpp\">CTAD和基于range的for循环是C++11以来引入的一些便利特性。</code></p><p></p><h2><code lang=\"cpp\">Range</code></h2><p></p><p><code lang=\"cpp\">有了由“1”组成的vector，我们就可以包含numeric头文件，并使用部分的和来填充一个新的vector，如1，1+1，1+1+1……，这样就有了1，2，3……我们需要声明新vector的类型，因为这里要从一个空的vector开始，如果没有任何值可供使用，那么编译器将无法推断其类型。partial_sum需要开头和结尾的数字，最后我们需要使用back_inserter，这样目标vector会根据需要增长：</code></p><p></p><p><code lang=\"cpp\"><code lang=\"cpp\">    #include \n…\n    std::vector numbers(18, 1);\n    std::vector sums;\n    std::partial_sum(numbers.begin(), numbers.end(),\n        std::back_inserter(sums));\n</code></code></p><p></p><p><code lang=\"cpp\">这样我们就得到了1到18的数字，均包含边界值。我们已经完成了数字三角的部分工作，但是C++现在可以让我们的代码更加简洁。C++11引入了iota函数，也位于numeric头文件中，它能够用不断增加的值填充一个容器：</code></p><p></p><p><code lang=\"cpp\"><code lang=\"cpp\">std::vector sums(18);\nstd::iota(sums.begin(), sums.end(), 1);\n</code></code></p><p></p><p><code lang=\"cpp\">实际上，C++23引入了一个range版本，它会为我们找到对应的begin和end：</code></p><p></p><p><code lang=\"cpp\"><code lang=\"cpp\">  std::ranges::iota(sums, 1);\n</code></code></p><p></p><p><code lang=\"cpp\">C++23还没有得到广泛的支持，所以可能需要等到你的编译器提供range版本。numeric和algorithm头文件中的很多算法都有两个版本，其中一个需要一对输入迭代器（即first and last），另一个则是range版本，只需要接受容器即可。ranges重载正在逐渐添加到标准C++中。ranges提供的功能远远超过我们这里避免声明两个迭代器的场景。我们可以过滤和转换输出，将这些东西连接在一起，并使用视图来避免复制数据。ranges支持惰性计算，所以视图的内容会在需要的时候才评估计算出来。Ivan Čukić的<a href=\"https://www.manning.com/books/functional-programming-in-c-plus-plus\">Functional Programming in C++</a>\"一书在这方面提供了更多的细节（书中还包含更多的内容）。</code></p><p></p><p><code lang=\"cpp\">我们需要做的最后一件事就是形成数字三角。查看vector的部分和：</code></p><p></p><p><code lang=\"cpp\"><code lang=\"cpp\">   std::partial_sum(sums.begin(), sums.end(), sums.begin());\n</code></code></p><p></p><p><code lang=\"cpp\">我们已经得到了想要的数字三角，即1，3，6，10，15……171。</code></p><p></p><p><code lang=\"cpp\">我们注意到，有些算法有ranges版本，那我们可以尝试一个。前两个三角数字是1和3是奇数，然后是两个偶数6和10。这个模式是不是可持续的呢？如果我们对vector进行转换，用点号“.”来标记奇数，用星号“*”来标记偶数，就能看出最终结果。我们可以声明一个新的vector来存放转换结果。对于每个数字，仅需要一个字符，所以我们需要一个char类型的vector：</code></p><p></p><p><code lang=\"cpp\"><code lang=\"cpp\">std::vector odd_or_even.\n</code></code></p><p></p><p><code lang=\"cpp\">我们可以编写一个简短的函数，它会获取一个int并返回对应的字符：</code></p><p></p><p><code lang=\"cpp\"><code lang=\"cpp\">char flag_odd_or_even(int i)\n{\n    return i % 2 ? '.' : '*';\n}\n</code></code></p><p></p><p><code lang=\"cpp\">如果i % 2的值不为零，这就是一个奇数，所以我们返回.，否则，返回*。我们可以在来自algorithm头文件的transform函数中使用这个自己的函数。最初的版本需要一对输入迭代器（first和last）、一个输出迭代器和一个_一元函数（unary function）_，该函数会接受一个输入，就像我们的flag_odd_or_even函数这样。C++20引入了一个ranges版本，它能够接受一个输入源，而不是一对迭代器，另外还需要一个输出迭代器和一元函数。这意味着我们可以通过如下方式来转换先前生成的和：</code></p><p></p><p><code lang=\"cpp\"><code lang=\"cpp\">   std::vector odd_or_even;\n    std::ranges::transform(sums,\n        std::back_inserter(odd_or_even),\n        flag_odd_or_even);\n</code></code></p><p></p><p><code lang=\"cpp\">输出将会如下所示：</code></p><p></p><p><code lang=\"cpp\"><code lang=\"cpp\">. . * * . . * * . . * * . . * * . .\n</code></code></p><p></p><p><code lang=\"cpp\">看上去，我们确实是不断地得到两个奇数，然后是两个偶数。Stack Exchange的数学网站<a href=\"https://math.stackexchange.com/questions/4511290/parity-pattern-of-triangle-numbers\">阐述了出现这种现象的原因</a>\"。</code></p><p></p><h2><code lang=\"cpp\">Lambdas</code></h2><p></p><p><code lang=\"cpp\">我们使用另一个新的C++特性对我们的代码做最后的改进。如果我们想要看一下实际的转换代码的话，那需要要转移到另外一个地方才能看到这个一元函数都做了些什么。</code></p><p></p><p><code lang=\"cpp\">C++11引入了匿名函数或<a href=\"https://en.cppreference.com/w/cpp/language/lambda\">lambda表达式</a>\"的特性。它们看起来与有名称的函数类似，将参数放在括号中，将函数主体放到花括号中，但是它们没有名字，不需要返回类型，并且有一个用[]表示的捕获组：</code></p><p></p><p><code lang=\"cpp\"><code lang=\"cpp\">[](int i) { return i%2? '.':'*'; }\n</code></code></p><p></p><p><code lang=\"cpp\">如果与有名称的函数进行对比，会看到两者的相似性：</code></p><p></p><p><code lang=\"cpp\"><code lang=\"cpp\">char flag_odd_or_even(int i){ return i % 2 ? '.' : '*'; }\n</code></code></p><p></p><p><code lang=\"cpp\">我们可以在捕获组中声明变量，这会给我们一个_闭包_。这些内容超出了本文的范围，但是在函数式编程中它们是非常强大和常见的。</code></p><p></p><p><code lang=\"cpp\">如果我们将一个lambda分配给一个变量，</code></p><p></p><p><code lang=\"cpp\"><code lang=\"cpp\">auto lambda = [](int i) { return i % 2 ? '.' : '*'; };\n</code></code></p><p></p><p><code lang=\"cpp\">那么，我们就可以像调用有名称的函数那样调用它：</code></p><p></p><p><code lang=\"cpp\"><code lang=\"cpp\">lambda(7);\n</code></code></p><p></p><p><code lang=\"cpp\">这个特性允许我们使用lambda重写转换调用：</code></p><p></p><p><code lang=\"cpp\"><code lang=\"cpp\">    std::ranges::transform(sums,\n        std::back_inserter(odd_or_even),\n        [](int i) { return i%2? '.':'*'; });\n</code></code></p><p></p><p><code lang=\"cpp\">这样的话，我们就可以在一个地方看到转换函数，而不必再去查看其他的地方了。</code></p><p></p><h2><code lang=\"cpp\">总结</code></h2><p></p><p><code lang=\"cpp\">将所有的内容组合在一起，就形成了如下的代码：</code></p><p></p><p><code lang=\"cpp\"><code lang=\"cpp\">#include \n#include \n#include \n#include \n\nint main()\n{\n    std::vector sums(18);\n    std::iota(sums.begin(), sums.end(), 1);\n    std::partial_sum(sums.begin(), sums.end(), sums.begin());\n\n    std::vector odd_or_even;\n    std::ranges::transform(sums,\n        std::back_inserter(odd_or_even),\n        [](int i) { return i%2? '.':'*'; });\n\n    for (auto c : odd_or_even)\n    {\n        std::cout &lt;&lt; c &lt;&lt; ' ';\n    }\n    std::cout &lt;&lt; '\\n';\n}\n</code></code></p><p></p><p><code lang=\"cpp\">我们使用了ranges、lambda和基于range的for循环，浏览了移动语义，并练习了对vector的使用。对于首次重回C++的人来说，这是一个不错的起点！</code></p><p></p><p><code lang=\"cpp\">你可以在编译器探索器中<a href=\"https://godbolt.org/z/xbWs9vjvs\">尝试上述的代码</a>\"。</code></p><p></p><p><code lang=\"cpp\">作者简介：</code></p><p><code lang=\"cpp\">Frances Buontempo有多年的C++经验，还有过使用Python和其他各种语言的经验。她曾发表过关于C++的演讲，并且是ACCU的Overload杂志的编辑。她有数学背景，为PragProg写了一本关于遗传算法和机器学习的书，并且正在为Manning写一本名为C++ Bookcamp的C++书，以帮助那些被现代C++落下的人迎头赶上。</code></p><p></p><p><code lang=\"cpp\">原文链接：</code></p><p><code lang=\"cpp\"><a href=\"https://www.infoq.com/articles/relearning-cpp-11/\">Relearning C++ After C++11</a>\"</code></p>",
    "publish_time": "2023-07-10 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "阿里转岗先离职：清空司龄裁员不给钱？大模型“国家队”亮相，6家公司名单公布；我国第一个独立开源操作系统正式发布｜Q资讯",
    "url": "https://www.infoq.cn/article/1gfWbQ9EdahUF8ZVUCuE",
    "summary": "<p></p><h4>蚂蚁集团回应被罚71.23亿元</h4><p></p><p>&nbsp;</p><p>证监会消息，近期，针对蚂蚁集团及旗下机构过往年度在公司治理、金融消费者保护、参与银行保险机构业务活动、从事支付结算业务、履行反洗钱义务和开展基金销售业务等方面存在的违法违规行为，金融管理部门依据《中国人民银行法》《反洗钱法》《银行业监督管理法》《保险法》《证券投资基金法》《消费者权益保护法》等，对蚂蚁集团及旗下机构处以罚款（含没收违法所得）71.23亿元。要求蚂蚁集团关停违规开展的“相互宝”业务，并依法补偿消费者利益。</p><p>&nbsp;</p><p>对此，蚂蚁集团回应称，“2020年以来，蚂蚁集团在金融管理部门指导下积极推进各项整改，目前已完成相关整改事项。今天，蚂蚁集团收到金融管理部门行政处罚决定书，我们对此诚恳接受、坚决服从，并将进一步夯实合规治理水平。”</p><p>&nbsp;</p><p></p><h4>GPT-4 API 全面开放使用</h4><p></p><p>&nbsp;</p><p>7 月 7 日，OpenAI 在官网宣布 GPT-4 API 全面开放使用。现所有付费 API 用户都可直接访问 8K 上下文的 GPT-4，无需任何等待。预计到 7 月底之前，OpenAI 会向全新的开发人员开放 GPT-4 API 使用权限。此外，OpenAI 还推出了 GPT-3.5 Turbo、DALL·E 和 Whisper API。</p><p>&nbsp;</p><p>API 详细使用说明地址：<a href=\"https://platform.openai.com/docs/guides/gpt\">https://platform.openai.com/docs/guides/gpt</a>\"</p><p>&nbsp;</p><p></p><h4>字节要造机器人，团队计划扩充到上百人</h4><p></p><p>&nbsp;</p><p>据了解，字节机器人团队已有约 50 人，计划年底扩充到上百人，并生产一些服务字节自己的电商履约需求，能在仓库里分拣、打包货物的机器人。字节机器人团队目前隶属于字节 AI Lab，其负责人是 AI Lab 总监李航。李航曾担任华为诺亚方舟实验室主任和首席科学家，2017 年加入字节，现在向字节副总裁、算法技术负责人杨震原汇报。</p><p>&nbsp;</p><p>据此前报道，字节跳动近年来已多次出手投资机器人相关公司，包括未来机器人、大寰机器人等，主要还是工业智能制造相关领域，与今日爆料的消息较为吻合。爆料还称，字节跳动对于人形机器人持观望态度，认为“像波士顿动力这种做了 30 年还不盈利的行为，可能不适合字节”。&nbsp;</p><p></p><h4>大模型“国家队”亮相，6家公司名单公布</h4><p></p><p>&nbsp;</p><p>2023世界人工智能大会期间，国家人工智能标准化总体组宣布我国首个大模型标准化专题组组长单位名单。据悉，我国大模型标准化专题组组长单位为上海人工智能创新中心。</p><p>&nbsp;</p><p>另外，北京百度网讯科技有限公司、阿里云智能集团、科大讯飞股份有限公司、三六零安全科技股份有限公司、华为云计算技术有限公司、中国移动通信有限公司研究院六家企业担任联合组长单位。现场进行了证书颁发并启动大模型测试国家标准制订。</p><p></p><h4>微软 Edge 浏览器用户数量正逼近 3 亿</h4><p></p><p>&nbsp;</p><p>根据 Atlas 公布的数据，<a href=\"https://www.infoq.cn/article/DRwEE6dPCooXz85r8jYS\">微软 Edge</a>\" 浏览器在整合必应聊天（Bing Chat）之后，用户规模快速增长了 5000 万，目前正逼近 3 亿大关。</p><p>&nbsp;</p><p>根据计算数据，谷歌 Chrome 浏览器拥有将近 34 亿用户；Safari 浏览器拥有 11 亿用户；微软 Edge 浏览器拥有 2.85 亿用户，逼近 3 亿。</p><p>&nbsp;</p><p></p><h4>扎克伯格发布 Threads“肉搏”马斯克：16小时3000万注册用户</h4><p></p><p>&nbsp;</p><p>美国时间7月5日，原计划在6日正式上线的 <a href=\"https://www.infoq.cn/article/WAb5hXYcthvYjYqVMyxN\">Threads</a>\" 意外提前发布，这是 Meta 旗下一款对标推特的应用 App，发布后，Threads 以风卷残云之势迅速笼络第一波用户，一些原先在推特上粉丝人数最多的名人，例如比尔盖茨、夏奇拉等人，都第一时间开设了 Threads 账号。</p><p>&nbsp;</p><p>Meta 创始人扎克伯格更是斗志满满，其本人的 Threads 账号一度成为了 Threads 实时“战绩”播报中心：“一小时突破500万”，“今天早上突破3000万”……据悉，发布不到24小时内，Threads 已经蹿升至美国苹果应用商店免费应用下载量榜首。</p><p>&nbsp;</p><p></p><h4>马斯克奇葩新规激怒用户！网友气炸狂喷，推特大宕机</h4><p></p><p>&nbsp;</p><p>近期，马斯克宣布推特新规：不登录不给看，被激怒的网友直接将推特搞宕机。随后马斯克表示：未经验证的用户只能浏览 600 个帖子。广大用户直接被气炸，推特“平替” Mastodon 一天新增账户超过 26000 个。马斯克阴阳怪气地表示：讽刺的是，因为抱怨浏览限制而导致了浏览限制。</p><p>&nbsp;</p><p>Twitter 搜索可见度24 小时下降 32%，“我们正在实时目睹，世界上有史以来最大的SEO上的自戕式毁灭。”推特网友表示。马斯克将这一切归咎于AI公司白嫖数据。实际上，有网友认为这是马斯克接手推特后，想方设法赚钱的途径之一。据悉，马斯克最近也被爆出患上抑郁症，正在服用药物做抵抗。</p><p>&nbsp;</p><p></p><h4>阿里转岗需先离职再入职，清空司龄裁员不给钱？</h4><p></p><p>&nbsp;</p><p>据报道，阿里计划将把绩效考核周期从半年改为季度，绩效奖金也将按季度发放，晋升、转岗等规则也将调整。另一项重大改变体现在内部转岗制度。以往阿里员工可以在集团各事业群自由转岗，新制度实施之后，员工要转岗至其他事业群，需要先离职再入职，以往司龄将清空。</p><p>&nbsp;</p><p>有员工透露，随着事业群拆分，一些变革已经在悄悄发生：新员工不再需要去杭州阿里总部参加为期两周的百阿（百年阿里）培训。此外，多名阿里员工表示，最近工作压力迅速增加，“996 又回来了”。</p><p>&nbsp;</p><p></p><h4>微软云 Azure 营收规模曝光，不及亚马逊 AWS 的一半</h4><p></p><p>&nbsp;</p><p>一份法庭文件显示，微软首席执行官 Satya Nadella 告诉公司董事会，在截至去年6月的12个月里，Azure 的云服务业务将产生340亿美元的收入，该数字不及竞争对手亚马逊云科技同期 720 亿美元营收规模的一半。这些文件后来从法院网站上删除了。</p><p>&nbsp;</p><p>多年来，微软一直对其 Azure 云业务部门的真实规模严加保密，使投资者无法了解它的实力到底如何。这一消息可能会让一些投资者感到震惊，因为这意味着 Azure 在云计算业务中的市场份额比大多数分析公司估计的要小几个百分点。</p><p>&nbsp;</p><p></p><h4>苹果公众号文章被批毁三观</h4><p></p><p>&nbsp;</p><p>日前，苹果官方公众号“Apple”发布了一篇“用 Mac 的斜杠青年，杠上开了什么花”的文章，其中部分文案被网友吐槽毁三观。文案提到，“一咬牙，卖掉有好感的男生送的演唱会门票，用这笔启动资金下了500份贴纸、胶带订单，自留一份，其余开网店售卖”。</p><p>&nbsp;</p><p>正是这句文案引来众多网友吐槽，称“这个真的有点三观不正了”“苹果这个文案也太败好感了吧&nbsp;”“苹果这文案要是性别一换”“寓意深刻啊”等等。苹果客服回应称，此事已登记记录，会向相关部门反馈。</p><p>&nbsp;</p><p></p><h4>ChatGPT&nbsp;暂停测试 Browse with Bing 功能</h4><p></p><p>&nbsp;</p><p>OpenAI 近日暂停了 ChatGPT 的 Browse with Bing 功能测试。该功能测试暂停的原因是因为借助 Browse with Bing 功能，用户可以绕过某些网站的付费机制，让用户免费阅读付费内容。Browse with Bing 功能是 OpenAI 为&nbsp;ChatGPT 付费用户提供的一个功能，他允许 ChatGPT 付费用户通过 Bing 搜索引擎来获取信息。</p><p>&nbsp;</p><p></p><h4>美国考虑限制中国用户使用美国云计算服务</h4><p></p><p>&nbsp;</p><p>WSJ 援引知情人士的消息报道，美国政府正准备限制中国企业使用美国云计算服务。这项新规如果被采纳，可能会要求亚马逊、微软等美国云服务提供商在向中国客户提供使用先进制程 AI 芯片的云计算服务之前，必须先获得美国政府许可。</p><p>&nbsp;</p><p>这项拟议的限制措施被认为是要堵上一个重大漏洞。中国的 AI 公司可能通过使用云服务绕开了现行的出口管制规定，比如使用英伟达的 A100 芯片。美国商务部预计将在未来几周内公布这一行动。</p><p>&nbsp;</p><p></p><h4>我国第一个独立开源操作系统正式发布</h4><p></p><p>&nbsp;</p><p>据报道，我国首个开源桌面操作系统“开放麒麟1.0”正式发布，标志着我国拥有了操作系统组件自主选型、操作系统独立构建的能力，填补了我国在这一领域的空白。</p><p>&nbsp;</p><p>据了解，包括“开放麒麟”在内的麒麟系列操作系统可以在电脑或手机等硬件产品上运行，目前已经应用在金融、海关、能源等众多行业中，除此之外，麒麟系列操作系统还保障了我国嫦娥探月、天问探火等重大航天工程的顺利实施。据机构测算，2025年中国操作系统市场规模高达586亿元。</p><p></p>",
    "publish_time": "2023-07-10 10:14:21",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "架构师特刊：天工开物 AIGC",
    "url": "https://www.infoq.cn/article/g1WRWQi0OhjlSdUI6kPI",
    "summary": "<h2>卷首语</h2>\n<p>史学家把十六、十七世纪的中国称为“天崩地解”的时代，社会经济关系、工农业内部结构发生变化，科学技术快速发展，因此，民间诞生了《天工开物》、《本草纲目》这样的奇书。三百余年过去了，我们再一次来到了科学技术重构社会经济关系的拐点——AIGC，这个最有想象力的词正在以巨大的影响力，渗透到各行各业。在这样的背景下，为了给大家带来经得住“拷问”的高质量内容，InfoQ 发起了《天工开物 AIGC》架构师特刊。</p>\n<p>在内容设计方面，我们决定从“水面上”、“水面下”两个维度着手。在“水面上”的部分，我们整理 AIGC 领域近期的热点新闻和测评，比如 ChatGPT 进入车载系统的消息、Google 等大厂对 AIGC 辅助开发的态度，希望借此最大限度地保证你的知情权。或许当下所处的行业、所任职的岗位并未受到 AIGC 太猛烈的冲击，但中立的、实时的内容报道，可以保证你时刻观测 AIGC 的最新行业进展，在变革到来之际早做准备。</p>\n<p>在“水面下”的部分，我们更注重弥合信息差，击破信息墙。近期有很多企业家在组织企业团队做调研，也有技术专家、产品专家远赴硅谷走近 OpenAI，建立了对 AIGC 更加深度的认知。我们借 Prompt 工程师的发展前景、AIGC 辅助编程实践、AIGC 大模型算力优化、AIGC 重构智能客服等几个维度，联系相关企业、负责人，做了深度访谈，希望有条理地、尽可能地把行业第一手信息同步给更多的读者。</p>\n<p>从实际访谈、调查结果来看，各行业对 AIGC 的理解和实践是超乎想象的，从去年 12 月，InfoQ 于国内第一次报道 ChatGPT 爆火至今，短短七个月，很多研发团队已经积累了成熟的 Prompt 方法论，在在线设计、在线文档、金融等领域做出了诸多产品研发尝试，甚至研发团队已经非常习惯 Copilot 的辅助。与过往的元宇宙、Web3 相比，AIGC 的影响更为深远，变革更为迅速。动作最为迅速的企业，其 AIGC 应用已经发布上线；Prompt 工程师岗位已经完成 JD 设计，并面向社会开始招聘。</p>\n<p>此外，我们特别发起了四期直播，针对以上话题，邀请了行业十余位有实操经验的技术高管、骨干圆桌讨论，超过三十万人在 InfoQ 视频号观看了这些直播。直播的回放我们一并附在本期架构师特刊中，以飨读者。</p>\n<p>这期特刊包含的内容很多，但我们不想给大家制造焦虑。信息的透明与同步，带来的应该是真正的平和。我们希望在这个信息爆炸的时代，去伪存真，通过经过调查的内容，给你带来足够的信息增量，有足够的参考价值。帮助你更便捷地享受这一波科技红利，更大程度地促成技术普惠。</p>\n<h2>目录</h2>\n<p><strong>热点 | Hot</strong></p>\n<p>用 AIGC 写 2023 高考语文作文，结果如何？</p>\n<p>程序员越“老”就越看不上 AI 辅助编程工具？Stack Overflow 2023 开发者调查 AI 特别报告</p>\n<p>ChatGPT 正式进入车载系统：奔驰首测 AI 语音助手，可进行复杂对话</p>\n<p>谷歌警告自家员工：不要使用 Bard 生成的代码</p>\n<p>微软也搞起了开源小模型！利用 OpenAI 的 ChatGPT 和 GPT-4 训练，实力碾压当前最强开源模型</p>\n<p>AIGC 领域最大收购：Databricks 花费 13 亿美元买下只有 15 名研发的小公司！</p>\n<p><strong>专题访谈 | Interview</strong></p>\n<p>实访用人单位：Prompt 工程师真是低门槛“香饽饽”？</p>\n<p>神器还是垃圾？那些用AIGC编程的人，实践得怎么样了</p>\n<p>AI大模型竞争白热化，算力优化才是“超车点”？</p>\n<p>AIGC重构智能客服，能否淘到大模型时代的第一桶金？</p>\n<p>要想用好GPT，我们必须跑得比“黑客”更快</p>\n<p>探索大模型智能：众安保险基于AIGC 的应用实践</p>\n<p><strong>推荐文章 | Article</strong></p>\n<p>GitHub Copilot：做出一个划时代的产品，只需要 6 个人</p>\n<p>大语言模型进化之谜：涌现现象的挑战与争议</p>\n<p>编程已死，AI 当立？教授公开“唱反调”：AI 还帮不了程序员</p>\n<p>LangChain：2023 年最潮大语言模型 Web 开发框架</p>\n<p><strong>视频推荐 | Video</strong></p>\n<p>本月，这些视频值得一看！</p>",
    "publish_time": "2023-07-10 12:32:34",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Python吞噬世界，GPT吞噬Python！ChatGPT 上线最强应用：分析数据、生成代码都精通",
    "url": "https://www.infoq.cn/article/e8WbklAwVvUxoiiirsKX",
    "summary": "<p>当地7月7日，OpenAI在社交平台表示，将向所有ChatGPT Plus用户开放<a href=\"https://openai.com/blog/chatgpt-plugins#code-interpreter\">代码解析器（Code Interpreter）</a>\"功能。消息一出便瞬间引发了开发者们的广泛关注，该功能被有的开发者认为是自OpenAI发布GPT-4以来最强大的功能。</p><p>&nbsp;</p><p>有了Code Interpreter，语言模型不仅可以生成代码，还可以独立执行代码。这个插件允许用户直接在ChatGPT 对话窗口直接调用Python，直接进行数据上传、下载、分析（统计）、作图，甚至进行文件格式转换及解决定性和定量数据问题。</p><p></p><h2>代替数据分析师？</h2><p></p><p>&nbsp;</p><p>在大数据时代，对复杂数据集进行可视化的能力已经不只是一项技术，更是一种必需。数据可视化是我们从日常浏览的海量数据中提取洞察的关键，让我们能够将规模庞大的原始数据转换为既具有视觉吸引力、又易于理解的图形。然而，实现可视化的具体过程往往令人生畏，其中涉及到复杂的数据处理、设计和调试环节。</p><p>&nbsp;</p><p><a href=\"https://www.infoq.cn/article/8EixxqlrSE5O10k76XyJ\">ChatGPT</a>\"的Code Interpreter 被很多网友认为是数据可视化领域的规则颠覆者。</p><p>&nbsp;</p><p>比如，之前如果要创建一份柱状图来说明不同产品在特定时期内对应收入，需要在Python中编写SQL查询或处理数据，这对缺乏编程背景的人来说比较困难。但有了ChatGPT Code Interpreter 后，我们唯一要做的就是提出问题。只需用简单的语言指导AI，它就能做好余下的工作，基于现实数据创建出详尽而准确的可视化结果。这种易用性不仅体现在柱状图中，饼状图、折线图、散点图等其他数据可视化类型也均可支持。</p><p>&nbsp;</p><p>Code Interpreter 实际上是“沙盒、防火墙执行环境以及一些临时磁盘空间”中的 Python 解释器，其中的所有数据可视化都是使用 Python 生成的。</p><p>&nbsp;</p><p>目前，已经有不少网友分享了自己如何让用这款AI工具如何生成富有洞见的可视化结果。Twitter 活跃用户、宾夕法尼亚大学沃顿商学院教授<a href=\"https://twitter.com/emollick/status/1652170706312896512?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1652170706312896512%7Ctwgr%5Eaad399089b2cc3417d264561ed2605dddd72a508%7Ctwcon%5Es1_&amp;ref_url=https%3A%2F%2Fdocs.kanaries.net%2Farticles%2Fchatgpt-code-interpreter\">Ethan Mollick</a>\"分享了自己使用ChatGPT Code Interpreter 的经验。他上传了一个XLS文件，并向AI提出三个问题：</p><p>&nbsp;</p><p></p><blockquote>“你能通过可视化和描述性分析，帮助我理解数据内容吗？”“你能试着用回归分析找到其中的模式吗？”“你能运行回归诊断吗？”</blockquote><p></p><p>&nbsp;</p><p>Code Interpreter 完成了数据处理，并根据Ethan的要求给出准确的可视化与分析结果，展现出轻松处理复杂数据解释任务的强大能力。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c8/c8d554090ed761cf6d7c914b2b3664ec.png\" /></p><p>部分结果示例</p><p>&nbsp;</p><p>在另一个示例中，Ethan要求Code Interpreter 执行敏感性分析。尽管AI无法访问原始数据，仍能解决问题并提出有用的见解。这凸显出该工具在处理计划外数据相关问题时，表现出的良好适应性和智能水平。</p><p>&nbsp;</p><p>Twitter用户<a href=\"https://twitter.com/heyBarsee/status/1654252233628819456?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1654252233628819456%7Ctwgr%5Eaad399089b2cc3417d264561ed2605dddd72a508%7Ctwcon%5Es1_&amp;ref_url=https%3A%2F%2Fdocs.kanaries.net%2Farticles%2Fchatgpt-code-interpreter\">Patrick Blumenthal</a>\"则向Code Interpreter 提交了原始UFO目击数据集。该AI根据数据内容生成了完备的HTML热图，表现出利用不同数据集快速创建数据可视化结果的潜力。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/bf/bfe58e555002e34bf3062be9b131c884.png\" /></p><p></p><p>&nbsp;</p><p>这些真实示例说明，ChatGPT Code Interpreter 在简化数据可视化过程方面有着强大能力。通过对话中提出的问题，用户无需编写任何代码即可获取有价值的见解和关于数据的图形表示。Ethan 对 Code Interpreter 的评价是“用过的最有用、最有趣的 AI 模式”。</p><p>&nbsp;</p><p>ChatGPT Code Interpreter 不仅是一款数据可视化工具，更是一款强大的数据分析工具。它能够解释复杂数据集、发现各种模式并为决策提供宝贵的信息和见解。</p><p>&nbsp;</p><p>数字营销公司的<a href=\"https://twitter.com/gregisenberg/status/1654189671721717770?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1654189671721717770%7Ctwgr%5E6a2381f235b9ab2a530741dabfc4c12559b1889c%7Ctwcon%5Es1_&amp;ref_url=https%3A%2F%2Fwww.searchenginejournal.com%2Fcode-interpreter-chatgpt-plus%2F490980%2F\">Greg Isenberg</a>\"表示，Code Interpreter 通过分析搜索引擎算法和用户行为，为内容优化生成数据驱动的见解，并通过定制的策略提高网站排名，从而彻底改变了SEO。随着进入新的排名，新公司将会增加数百万美元的收入。将Code Interpreter 与 Google Search Console 数据结合使用现在似乎已经成为一种流行的用法。</p><p>&nbsp;</p><p>另一个例子中，一位 <a href=\"https://twitter.com/SHL0MS/status/1652842277788692480?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1652842277788692480%7Ctwgr%5E5501571dfb87b8a07f1a69b54f63fbaffeccd20c%7Ctwcon%5Es1_&amp;ref_url=https%3A%2F%2Findianexpress.com%2Farticle%2Ftechnology%2Fartificial-intelligence%2Fopenai-code-interpreter-chatgpt-data-scientist-jobs-8818501%2F\">Twitter 用户</a>\"分析了他最喜欢歌曲的 300 小时 Spotify 播放列表。该聊天机器人提供了可视化功能，还帮助进行数据检索，并解释了如何使用 Spotify API。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/3c/3c6d9dda0714825ff834873cda782b7b.png\" /></p><p></p><p>&nbsp;</p><p>此外，Code Interpreter 不仅可以根据数据创建 GIF，还可以涉足其他格式的文件。一位名为 Riley Goodside 的提示工程师上传了一个 GIF，并要求聊天机器人使用 Zoom 将其转换为 MP4，Code Interpreter 也成功做到了。</p><p>&nbsp;</p><p>有人认为，这种以对话方式执行复杂数据分析任务的能力，彻底改变了行业中的传统游戏规则。它将数据分析能力交付至每一个人手中，打破了以往高水平编码人员或数据科学从业者对这类知识的“垄断”。无论是想要解读销售数据的小企业主、想要分析学生成绩数据的教师，还是致力于数据驱动故事的记者，ChatGPT Code Interpreter都能帮助大家更好地理解数据内容。</p><p>&nbsp;</p><p>不过也有人表示，没有想象的那么强大。“在合并多个复杂文件的时候，塔只会遵循一些特定的方法合并，如果遇到的这个方法不行，现场就崩给你看。”知乎答主“<a href=\"https://www.zhihu.com/question/611024514\">极萨学院冷哲</a>\"”表示，“它只适合做一些你看起来就知道怎么做，但是超级费工夫的批处理工作。但是对于那种你看起来都不知道怎么做、一脸懵的情况，他也会一脸懵。”另外需要注意的是，ChatGPT Code Interpreter 目前似乎对中文用户不太友好，不如使用英语带来的体验好。</p><p>&nbsp;</p><p>“这种匆忙的开放，其实OpenAI遇到了非常大的服务器计算压力，以至于他们肯定是在后台做了限制之前我看内测的时候大家常用的抠图或者图像和视频处理，现在都被进行了限制，要么说不能做，要么说计算能力不足。“极萨学院冷哲”推测道。</p><p>&nbsp;</p><p></p><h2>改变编码方式</h2><p></p><p>&nbsp;</p><p>ChatGPT Code Interpreter 也在改变我们的编码方式。</p><p>&nbsp;</p><p>Ethan 使用Code Interpreter 获取旧的scratch STATA文件和代码，并使用Python复制它们。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/35/35068af093e9bdd9cbc7e64717a713dc.png\" /></p><p></p><p>&nbsp;</p><p>ChatGPT Code Interpreter 基于机器学习技术，主要支持Python，但ChatGPT Code Interpreter 在设计上也兼顾了对其他编程语言的理解和交互能力，是一款功能完备、适用范围极广的编码工具。</p><p>&nbsp;</p><p>ChatGPT Code Interpreter 之所以大受欢迎，原因之一就是它能弥合技术知识与创造力之间的巨大鸿沟。大家不再需要精通Python、HTML或者JavaScript，即可将数据可视化由想法变成现实。反过来，我们也可以依靠ChatGPT Code Interpreter 的AI编码知识解决各种繁重的开发任务。</p><p>&nbsp;</p><p>ChatGPT Code Interpreter 是“无代码运动”这一整体趋势的重要组成部分。无代码运行的目标是消除编码需求，借此降低技术的获取门槛。其中涉及一系列工具和平台，希望帮助人们无需编写任何代码即可创建软件、网站和应用程序等。</p><p>&nbsp;</p><p>无代码运动正在蓬勃发展，ChatGPT Code Interpreter 等工具则引领着这股潮流。由于无需编写任何代码即可实现复杂的数据可视化与高级数据分析，ChatGPT Code Interpreter 正切实推动技术大众化、将数据之力交付到每个人手中。</p><p>&nbsp;</p><p>虽然 ChatGPT 的Code Interpreter 改变了游戏规则，但它也还有一些限制：</p><p>&nbsp;</p><p>Plus会员要求：目前，这项强大的功能仅适用于专业会员。此付费墙可能会限制无法负担专业会员资格的个人或组织访问，从而排除一部分潜在用户。等待时间：注意到代码执行的等待时间相对较长。虽然考虑到正在执行任务的复杂性，这是可以理解的，但在经常需要快速结果的快节奏环境中，这可能是一个问题。有限的互联网访问：出于安全原因，Code Interpreter 无法访问互联网。这意味着它无法进行外部 API 调用或实时从网络获取数据，这可能会限制其在某些用例中的功能。知识截止：截至目前，ChatGPT 的训练数据仅包含截至 2021 年 9 月的信息。虽然这是最近的事，但这确实意味着该模型可能不知道或无法利用技术的某些进步或变化，如编程语言，或从那时起出现的库。复杂错误处理：虽然 ChatGPT 在理解和执行代码方面做得值得称赞，但处理复杂错误或错误可能并不那么简单。对于初学者来说，如果没有集成开发环境 (IDE) 通常提供的详细错误消息，对代码进行故障排除可能会有点困难。</p><p>&nbsp;</p><p>但无论如何，ChatGPT Code Interpreter 仍被认为是编程未来在当前阶段的投射。ChatGPT Code Interpreter 用对话消解了编程过程中的技术元素，有助于推动编程能力的大众化。</p><p>&nbsp;</p><p>&nbsp;</p><p>参考链接：</p><p>&nbsp;</p><p><a href=\"https://docs.kanaries.net/articles/chatgpt-code-interpreter\">https://docs.kanaries.net/articles/chatgpt-code-interpreter</a>\"</p><p><a href=\"https://indianexpress.com/article/technology/artificial-intelligence/openai-code-interpreter-chatgpt-data-scientist-jobs-8818501/\">https://indianexpress.com/article/technology/artificial-intelligence/openai-code-interpreter-chatgpt-data-scientist-jobs-8818501/</a>\"</p><p><a href=\"https://medium.com/@abhijeetvichare76/revolutionizing-data-analysis-with-chatgpts-code-interpreter-30d6e0916fe6\">https://medium.com/@abhijeetvichare76/revolutionizing-data-analysis-with-chatgpts-code-interpreter-30d6e0916fe6</a>\"</p>",
    "publish_time": "2023-07-10 15:47:51",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "神器还是垃圾？那些用AIGC编程的人，实践得怎么样了",
    "url": "https://www.infoq.cn/article/WtKuT3HbC1UkYK4wsVyk",
    "summary": "<p>“大部分脚本，它写的都能运行，而且比我写的还要好。”这是刘立在小试ChatGPT之后的感受。现在，网上已经不乏对以ChatGPT为代表的代码生成工具的称赞，还有大量五花八门的使用教程。</p><p>&nbsp;</p><p>程序员是好奇心比较强的那批人，也愿意去先吃螃蟹。2020年 GPT-3 发布后，他们开始摸索用大模型或AI来辅助编程。GPT-3在当时虽被认为是“巅峰之作”，但还不能与人对话，并未引起全民高潮。</p><p>&nbsp;</p><p>对于绝大部分程序员来说，2021年发布的 Copilot 可能是用大模型辅助编程的启蒙。Copilot 由GPT-3 修改后的生产版本OpenAI Codex提供支持、接受了一系列公共GitHub 储存库和其他公开可用原始码训练的辅助编程工具。</p><p>&nbsp;</p><p>Copilot&nbsp;迅速引起了开发者们的注意，并得到了很多程序员的认可。“程序员比较喜欢的一种工作方式是，我讲清楚需求是什么，你能直接给我回答。”WasmEdge 创始人、核心开发者 Michael Yuan 说道。当时的 Copilot 做到了这一点，只要给出比较准确的描述，它就可以自动生成一段代码，使用起来很方便。</p><p>&nbsp;</p><p>“在此之前的产品，大家更多视为玩具，很有意思但不会真正使用，更不会真正花钱。Copilot&nbsp;做到了让我们付费使用。”Michael表示，这对一直将 GitHub 视为免费工具的团队来说，选择付费并不是容易的事。</p><p>&nbsp;</p><p>但在当时，Michael 公司内部的开发者对Copilot态度是两个极端：一部分程序员非常喜欢它，甚至到了离不开的程度，而另一部分程序员认为它非常“脑残”，甚至看不起用它的程序员。这种态度分化，可能至今仍然存在。</p><p>&nbsp;</p><p></p><h2>AIGC 为程序员带来了什么？</h2><p></p><p>&nbsp;</p><p>就像Copilot 创建者之一Alex Graveley 说的，“代码推理具有明确的线性，而AI模型比较适应这种一件事做下去、前一件事对后一件事产生影响的应用场景。”从 GPT-3 发布至今，大模型在生成代码上表现得比生成自然语言要先进一些，因为代码只有是或不是、不容乱说。</p><p>&nbsp;</p><p>到了GPT-3.5，大模型的编程能力和逻辑能力有了非常大的提高，不仅可以生成代码、添加注释，还可以跟程序员对话，进一步解释这段代码。而经过两年的验证，GitHub 证明了AIGC工具在写代码和Review代码这两个场景的可用性。</p><p>&nbsp;</p><p></p><h4>写代码，实习生水平？</h4><p></p><p>&nbsp;</p><p></p><blockquote>“我从刚开始的天天用它生成代码，到现在摸清楚了，基本上不用。”</blockquote><p></p><p>&nbsp;</p><p>给出描述、生成相应的代码，看似很酷炫的功能，但现在开发者还不能完全依赖这些AI工具生成的代码。</p><p>&nbsp;</p><p>以ChatGPT为例，ChatGPT 给出的很多答案其实谷歌+StackOverflow就可以查到，但是很多新手不会用这套组合，ChatGPT 只是降低了这个门槛，给出了各种质量参差不齐的答案。ChatGPT 通常很难一次就给到正确的代码，需要开发者反复调教。</p><p>&nbsp;</p><p>另外，有开发者评价ChatGPT生成的代码很难实际使用，越深层的东西越没用。“稍微进阶一点的代码，生成得又慢又难用, 不调整根本用不了。”</p><p>&nbsp;</p><p>南达科他州立大学生物信息学家 Xijin Ge 曾建议：把 AI 当作暑期实习生，一些开发者也认为其更很适合新手或者作为辅助工具。</p><p>&nbsp;</p><p>不过，还是有开发者表示，虽然是复制粘贴的水平，但能理解代码已经很不错了。在Michael 看来，代码产生问题的可能性是最低的，因为生成的代码可以立刻用起来进行检测。</p><p>&nbsp;</p><p>很多人吐槽ChatGPT总会先给错误代码，再让它检查一遍后就会给出正确答案，这是因为答案的给出是一个概率事件，它只是给出了其中一个答案。要提高正确率、不让它“胡说八道”就要给更详细、准确的提示词，让它能够更好地反馈出所知道的内容。</p><p>&nbsp;</p><p>“泛泛的提问，初次会有惊艳的感觉，但问多了会有错觉：不过如此，那是因为不会提问。”刘立也表示。“当你告诉它回答要有事实根据后，它的准确率就会提高很多。”</p><p>&nbsp;</p><p>这种需求也催生了“<a href=\"https://www.infoq.cn/article/7FGafFFFYkbMxW11u0BT\">Prompt 工程师</a>\"”这一岗位的大热，他们通过自然语言对预训练大语言模型进行操作，并对输出结果进行调优。凭借大模型的反馈机制，生成的代码马上编译测试，甚至可以有自动化机器人一直测试直到生成生产可用的代码。国内有企业开出60万年薪招聘Prompt 工程师，国外不仅岗位数量更多，年薪甚至最高达到了七位数。</p><p>&nbsp;</p><p>ChatGPT需要了解项目或需求后才能给出比较好的建议。但大模型的记忆量不大而且都是短程记忆，这常常导致“AI 幻觉”的出现。为解决这个问题，业内目前将目光聚焦在了向量数据库上，向量数据库擅长从非结构化数据中提取见解，查询延迟也更低，很适合 AIGC 应用。</p><p>&nbsp;</p><p>不过，即便可以给出正确的代码，用AI生成代码仍有很大的风险。</p><p>&nbsp;</p><p>各种AIGC编程工具会标注这些生成代码的来源，因此企业不清楚来源，即使是开源代码也有不同的许可证需要遵守，但许可证通常不可见。另外，对企业来说，使用第三方工具还有数据泄露风险。因此，Linux基金会也不鼓励项目直接用ChatGPT等来写代码，三星、苹果等公司都不允许员工在内部使用AI辅助编程工具，甚至谷歌也提醒自己的工程师避免直接使用Bard生成的代码。</p><p>&nbsp;</p><p>除此之外，生成代码还有版权问题。版权必须要百分之百匹配，只是部分匹配不算严格拥有版权。代码版权是可以检测的，比如发现某段代码是GPL的则可以重新生成。但这并不代表版权问题很容易解决，原理上可以用工程化方式解决，但要消耗大量的人力、时间和金钱。</p><p>&nbsp;</p><p></p><h4>Review代码，还能调节职场关系？</h4><p></p><p>&nbsp;</p><p></p><blockquote>“能用工具实现的尽量不需要人参与，人只做机器无法完成的事情。”</blockquote><p></p><p>&nbsp;</p><p>相对写代码，Review代码就没有上述问题。Review代码主要有两步：第一步是做自动化检测；第二步是提供反馈，至于对反馈是执行还是不执行、怎么执行，还是由人来决定。</p><p>&nbsp;</p><p>Review 代码很重要，但传统的方式又很麻烦。大项目中，可能是初级程序员花了数个小时写完代码，然后资深且对项目熟悉的人需要花上几天的时间来Review代码。</p><p>&nbsp;</p><p>因此，ChatGPT 刚出来没多久，Michael 团队就做了一次Review代码测试：在Patch文件故意添加了一个无限循环的Bug让ChatGPT检查，看它能否读懂Patch文件并找出其中的Bug。结果，ChatGPT不仅读懂了，还找出了这个无限循环，并礼貌地说：有时候无限循环是代码逻辑的一部分，但是这个是Bug，可以再检查下。</p><p>&nbsp;</p><p>“当时我们很震惊，觉得是不是又有一个产品需要付费了。”Michael 玩笑道。</p><p>&nbsp;</p><p>一方面，很多开发者会用 ChatGPT 等工具来 Review 公司的业务代码。公司团队成员彼此熟悉，很多时候同事之间碍于情面很难直接指出对方的问题，用工具Review代码就更直接些，没有其他因素干扰沟通。还有一些新的开发者不会读编码规则，ChatGPT等可以自动检查并指出不规范的地方，并耐心对待对总是犯错的人。</p><p>&nbsp;</p><p>另一方面，ChatGPT 等工具也可以用来帮助 Review 开源社区里提交的代码。开源社区的人互不认识，项目负责人也不清楚提交者的能力和目的，用工具Review会减少很多时间和沟通成本，也可以及时给提交代码的人反馈，避免拖延。</p><p>&nbsp;</p><p>“我们社区以前就遇到过这样的问题，因为人手有限，不能第一时间反馈，就有贡献者觉得不爽。用了工具后，我们可以知道新提交的代码大概在解决什么问题再检查反馈给提交者，这种体验对开源社区来说是很大的提升。”Michael 表示。</p><p>&nbsp;</p><p>Michael 认为，现在 ChatGPT 在纯算法题方面已经达到了很高的水平。他举了个例子：团队里有人用JavaScript写了一个Check Prime函数，用来检查输入的整数是不是质数。通常的做法是从2、3、4……一直试到√n，看能否被整除，能被整除就说明这个数不是质数。当用ChatGPT自动Review时，ChatGPT提出这个算法可以改进：偶数不用重新Check，因为不能被2整除的数必然不能被4、6、8等偶数整除。</p><p>&nbsp;</p><p>“这是很多人可能会漏掉的一点。ChatGTP不仅可以提醒出来，程序员还可以跟它继续对话，比如继续追问质数是不是也这样，达到举一反三的效果。”Michael 说道。</p><p>&nbsp;</p><p></p><h2>面向“需求”编程</h2><p></p><p>&nbsp;</p><p></p><blockquote>“有新需求，直接重写代码就好了。”</blockquote><p></p><p>&nbsp;</p><p>有人详细<a href=\"https://www.infoq.cn/article/aCtNDBJttaNPE07i6xIw\">对比了</a>\"用辅助编程工具与不用工具的程序员之间的差别。拥有 19 年编程经验Alex 100%纯手动编程，仅拥有 4 年开发经验的 Hamid 采用手写代码+Copilot+GPT-4+无代码开发。对于同个项目，Hamid 在一周之内完成，端到端测试与测试覆盖率均达到 100%，开发总成本为 3819 美元；Alex 则只完成了 7%，开发成本为 3520 美元。</p><p>&nbsp;</p><p>生产力上的巨大差异引发了网友们的广泛讨论。Michael 也以 Review代码为例说道，“PR &nbsp;Review代码通常需要3～4天，如果一个公司全面贯彻用ChatGPT，时间降到一天的可能性是很大的。”</p><p>&nbsp;</p><p>当然，有人提出这样的观点：有经验的程序员写的代码质量高，没有经验的程序员无非就是不停测试、跟工具讲正确的话让它生成短代码，但工具没有全局观，所以大概率生成出来的代码很难维护。</p><p>&nbsp;</p><p>Michael 对此的想法是，之前的代码要易管理是因为维护成本很高，如果有工具可以把写代码的成本降低10倍、速度提高20倍，那么业务代码根本就不需要维护，有了新需求直接重写就可以。就像今天没有人要维护编译器出来的二进制文件，只需要维护源代码就可以了。</p><p>&nbsp;</p><p>几十年前，程序员写汇编语言，之后成了写抽象的高级语言，后来有了Python等。之前的汇编语言程序员会觉得今天的程序员都不叫程序员，因为机器不能直接理解、代码还需要编译，他们会认为程序员的能力下降了。从这个意义上来讲，编程的门槛确实降低了。</p><p>&nbsp;</p><p>今天的程序员有个很重要的能力就是像机器那样思考，如果有一天用自然语言编程、用需求编程，这个技能或许就不重要了，但程序员需要思考的东西会更高一层。</p><p>&nbsp;</p><p>“我觉得未来，开发者需要维护的会是需求，一旦需求变了就可以直接重新生成代码，尤其在前端应用上。”Michael 表示，前端的需求相对比较直接、框架也多，这意味着前端领域有各种各样完成项目的方法，这是对工具友好的。</p><p>&nbsp;</p><p>随着各种AIGC工具的流行，写代码这件事可能会发生本质上的改变，今天写代码非常重要，也许在未来会变得不重要，会更倾向产品经理去做。</p><p>&nbsp;</p><p></p><h2>企业应用的另一种探索</h2><p></p><p>&nbsp;</p><p></p><blockquote>“谁也不会想到才3个月的时间，开源界就能够把LLaMA 推进到离ChatGPT越来越近的程度，让OpenAI 都想到开源去避免与天下为敌。”</blockquote><p></p><p>&nbsp;</p><p>如今，用软件写代码越来越“copy”化，很多新的开发工具完全围绕这个理念设计，用不用AI辅助编程工具的差距似乎越来越大。虽然有泄露数据、代码来源不明等风险，但对于企业来说，当这个差距到了一两倍时就会不可接受。</p><p>&nbsp;</p><p>在这种矛盾下，各企业开始寻求训练自己的模型，即使不对外商业化，但只要能用低成本训练出自己的模型供公司内部的开发者们使用，并提高了生产力就可以了。这促使很多企业和个人特别关注开源大模型，毕竟从零开始训练大模型的成本实在是太高了。</p><p>&nbsp;</p><p>众所周知，要做自己的大模型，预训练非常重要，但又非常容易出错和昂贵，没有几百万美金搞定不了。另外，由于GPU内存问题，OpenAI这样的公司都会对用户输入的上下文长度和一次输出的内容长度进行限制。</p><p>&nbsp;</p><p>Meta 2月“泄露”的 LLaMA 为开源大模型提供了实验的可能。LLaMA 已经用大量语料做好了预训练，其他人在上面微调即可，训练成本及训练速度都要优于GPT3.5。</p><p>&nbsp;</p><p>现在很多开源模型都是基于LLaMA 进行二次训练，如Vicuna、Alpaca、GPT4All-Snoozy等。以LlaMA的衍生模型Alpaca为例，其训练成本仅用了52k数据和600美元，这对企业来说是完全可以接受的。</p><p>&nbsp;</p><p>但现在的开源大模型还处于鱼龙混杂的阶段。虽然很多开源大模型都说自己跑分很高，但没有一个开源大模型能够证明训练数据集跟跑分数据集是分开的，事实上也很难分开，互联网上到处都是GPT生成的内容，很容易污染跑分水准点。所以虽然跑分很好，但真正用起来的时候就会发现，绝大部分并没有达到声称的90%的水平。</p><p>&nbsp;</p><p>开源虽然降低了企业使用大模型的门槛，但还不够低，有些公司已经开始重新组织自己的AI部门进行探索。</p><p>&nbsp;</p><p></p><h2>结束语</h2><p></p><p>&nbsp;</p><p>根据Stack Overflow的最新调查，44%的开发人员会在开发过程中使用 AI 工具，这也意味着有56%的人还没有用。实际上，经过调查和询问，确实有很多程序员只是初步试玩了下，并没有将ChatGPT或Copilot用在工作中。</p><p>&nbsp;</p><p>“只能说有没有关注新技术吧，没有在用的人估计还不清楚能给自己节约多少时间。”开发者张涛说道。虽然张涛所在企业明确不要在公司使用ChatGPT等，但他还是会自己偷偷使用。</p><p>&nbsp;</p><p>在Michael看来，如今的大模型虽然并不完美，但它更多是让大家看见了很多未来的希望。程序员与AIGC是赋能关系，而非取代的关系。拒绝AIGC工具的人可以不喜欢，但至少可以包容，对它们提出的意见可以视而不见但不用着急拒绝。</p><p>&nbsp;</p><p>“我可能就是属于比较乐观派的，认为这东西有用，不过我也说服不了不用的人。有人说这些工具有各种各样的问题，他们说得都对，只是我认为这些问题有办法解决而已。”Michael说道。</p><p>&nbsp;</p><p>注：刘立、张涛均为化名。</p><p></p><p>AIGC&nbsp;行业有哪些最新动态？Prompt&nbsp;工程师、AIGC&nbsp;辅助编程实践如何了？企业在算力优化、智能客服等表现如何？</p><p>&nbsp;</p><p>本期《架构师》，我们围绕“<a href=\"https://www.infoq.cn/minibook/g1WRWQi0OhjlSdUI6kPI\">天工开物&nbsp;AIGC</a>\"”主题，邀请了来自不同领域、不同行业的&nbsp;AIGC&nbsp;早期实践者进行分享，还汇集了最近备受关注的热门事件，尽可能为读者同步AIGC领域的第一手信息！<a href=\"https://www.infoq.cn/minibook/g1WRWQi0OhjlSdUI6kPI\">点击链接即可下载电子书！</a>\"</p><p></p>",
    "publish_time": "2023-07-10 15:54:30",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "温世欢确认出席 ArchSummit 深圳，分享《数智化消费金融高可用系统建设实践》话题",
    "url": "https://www.infoq.cn/article/gOeafMEaVthG6T2ZygZs",
    "summary": "<p>7&nbsp;月&nbsp;21&nbsp;日&nbsp;-&nbsp;22&nbsp;日，&nbsp;在&nbsp;<a href=\"https://archsummit.infoq.cn/2023/shenzhen?utm_source=infoqweb&amp;utm_medium=teacherarticle&amp;utm_campaign=8&amp;utm_term=0531\">ArchSummit&nbsp;全球架构师峰会（深圳站）</a>\"，中邮消费金融科技发展部规划及架构团队负责人温世欢，将于会上发表题为《数智化消费金融高可用系统建设实践》的演讲，详细介绍&nbsp;IT&nbsp;系统在支撑企业渠道拓展、营销获客、风险管控、资产保全、客户服务等方面的数智化演进过程，与之相匹配的应用架构和技术架构方案，以及在不同业务场景下保障应用系统稳定、安全、高效运行的高可用设计及实践。</p><p></p><p>温世欢毕业于华南理工大学，应用数学专业和工商管理专业，具有&nbsp;15&nbsp;年&nbsp;+&nbsp;的金融行业&nbsp;IT&nbsp;从业经验。曾任职世界&nbsp;500&nbsp;强跨国银行集团，作为主要研发人员参与亚太区&nbsp;20+&nbsp;国家和地区使用的业务应用系统设计和研发；作为中国团队负责人进行中国香港&nbsp;tier-0&nbsp;银行核心系统模块的设计和研发；作为架构师参与推动该集团的全球&nbsp;IT&nbsp;转型、DevOps&nbsp;及敏捷研发。</p><p></p><p>2018&nbsp;年加入中邮消费任职架构师，主导&nbsp;DevOps&nbsp;平台、容器云平台及微服务治理平台等技术平台的设计和建设；现为规划及架构团队负责人，主要负责中邮消费&nbsp;IT&nbsp;规划、IT&nbsp;架构设计、标准制定和管控、技术框架&nbsp;/&nbsp;组件及平台研发等工作；同时深度参与公司数字化转型相关工作。</p><p></p><p>相信通过温世欢的分享，你将了解到金融级高可用架构的要求和设计实践，了解在当中遇到的问题以及解决思路，学习到在分布式、大数据、AI应用等场景下如何结合较前沿技术（如容器、Service&nbsp;Mesh等）进行高可用设计和实践。</p><p></p><p>除上述议题外&nbsp;，ArchSummit&nbsp;深圳还将围绕<a href=\"https://archsummit.infoq.cn/2023/shenzhen/track/1537?utm_source=infoqweb&amp;utm_medium=teacherarticle&amp;utm_campaign=8&amp;utm_term=0531\">基础架构技术</a>\"、<a href=\"https://archsummit.infoq.cn/2023/shenzhen/track/1532?utm_source=infoqweb&amp;utm_medium=teacherarticle&amp;utm_campaign=8&amp;utm_term=0531\">DataOps、Data&nbsp;Fabric&nbsp;等高效数据开发与服务模式</a>\"、<a href=\"https://archsummit.infoq.cn/2023/shenzhen/track/1534?utm_source=infoqweb&amp;utm_medium=teacherarticle&amp;utm_campaign=8&amp;utm_term=0531\">Mesh&nbsp;技术实践案例</a>\"、<a href=\"https://archsummit.infoq.cn/2023/shenzhen/track/1535?utm_source=infoqweb&amp;utm_medium=teacherarticle&amp;utm_campaign=8&amp;utm_term=0531\">QUIC&nbsp;传输和架构优化</a>\"等进行分享。</p><p></p><p>数十位业界专家，上百个国内外一线大厂前沿技术案例，一定会给你带来很多全新的开发灵感。期待与你线下交流！咨询购票请联系&nbsp;18514549229（微信同手机号）</p><p><img src=\"https://static001.infoq.cn/resource/image/9d/aa/9d6a27547062ee2e089f91bdc4ba1eaa.png\" /></p><p></p>",
    "publish_time": "2023-07-10 16:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "AIGC、大模型、可观测性等十场闭门会已开放报名 ｜ ArchSummit",
    "url": "https://www.infoq.cn/article/cwdbN1StufvKJgHGzW9b",
    "summary": "<p>在以往的 InfoQ 举办的大会上，我们都会举办深度交流闭门会，发现听众和嘉宾非常喜欢面对面交流，并且每场交流过后，大家的收获也比较丰富。</p><p></p><p>7 月 21 日 -22 日 <a href=\"https://archsummit.infoq.cn/2023/shenzhen?utm_source=infoqweb&amp;utm_medium=bmhart&amp;utm_campaign=10&amp;utm_term=0710\">ArchSummit 全球架构师峰会深圳站</a>\"，我们将再次为您带来这样一次不容错过的机会，我们策划十场高端闭门交流会，既是交朋识友的好时机，也是思维碰撞的好场合，我们期待在这场交流中一起拓展视野，创新思维。</p><p></p><p>希望来参加交流的您是企业技术高管，高级技术总监及以上职位，相信您的观点和见解可以激发出更多的创新思维。无论是业界的趋势，最新的技术，还是您在工作中的实践经验，都是我们非常期待的洞见。</p><p></p><p>以下是是十场闭门交流会具体日程介绍：</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/51/53/5172a24be7edd2cbbcf8692bdd7d6753.jpg\" /></p><p></p><p>让我们在 ArchSummit 全球架构师深圳站的闭门交流会上相约，共同见证这个创新的时代，遇见未来，探索可能。期待与您的精彩碰撞。闭门会名额有限，您可<a href=\"https://jinshuju.net/f/pF3JOd\">点击此处进行报名</a>\"，目前仅对 ArchSummit 付费听众开放。</p><p></p><p>如想咨询 ArchSummit 大会，也可联系票务经理瑞丽：18514549229（微信同手机号）。</p>",
    "publish_time": "2023-07-10 16:13:29",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "东风风神成功落地“最强电混”技术;小鹏汽车计划年底推出全场景 NGP 和 AI 代驾；国轩高科与巴斯夫合作推动电池材料创新；V2M 公司开发声学传感器监控系统； | ...",
    "url": "https://www.infoq.cn/article/LUrVUgIcDSg9X0Cip2dW",
    "summary": "<p>东风风神发布第一款使用“最强电混”技术的量产车型--“皓瀚”；小鹏汽车将在今年年底推出全场景 NGP 和 AI 代驾的能力，并逐步实现不依赖高精度地图；后摩智能参展<a href=\"https://xie.infoq.cn/article/1b1521dd2afdfb47cb3dc5f4a\"> 2023 年世界人工智能大会</a>\"，展示了存算一体智驾芯片后摩鸿途 H30 及相关产品；Vector 开发出新 AI 软件 vAnonymize ，可在开发和测试过程中匿名化人和车辆牌照的视频和图像数据……本周汽车技术领域又有哪些新动作，一起来看。</p><p></p><h2>东风风神成功落地“最强电混”技术</h2><p></p><p></p><p>东风风神于 7 月 9 日发布了续航里程达 1350km 的 4 挡电混长续航 SUV 皓瀚，并开始盲订。皓瀚是东风风神新能源转型战略 1258“e 启”计划的第一款车型，采用了“星语星动”设计理念，拥有运动造型和超大空间。车型提供了皓瀚电混 PHEV 和皓瀚电混 HEV 两个版本。该车搭载了东风马赫混动专用发动机，0 百加速仅需 6 秒，是第一款量产车型使用“最强电混”技术的车型。皓瀚具备出色的综合功率和扭矩，HEV 车型续航达到 1200km ，PHEV 车型续航达到 1350km 。皓瀚还采用马赫电混 DH-i 技术，实现了高效的油耗和换挡控制。它不仅体现了东风风神作为高端性能普及者的愿景，也是东风风神在新能源转型中的领军车型。</p><p></p><p></p><h2>苹果公司积极研发全新车载立体声系统</h2><p></p><p></p><p>苹果公司正在积极研发一种全新的车载立体声系统。尽管未正式确认推出汽车，但该公司已提交了五项与汽车音响相关的专利申请。这些专利申请中包括在头枕和车门上安装扬声器的设计，以及具备切换功能将 iPhone 音乐传输到车内的功能。此外，还有一项关注在封闭环境中基于乘员的音频控制，以确保每位驾驶员和乘客都能获得最佳的声音平衡。综上所述，苹果的汽车有望拥有出色的音响系统。</p><p></p><p></p><h2>小鹏汽车计划推出全场景 NGP 和 AI 代驾</h2><p></p><p></p><p><a href=\"https://www.infoq.cn/article/pzUQxao7udgMbO2ObR0C\">小鹏汽车</a>\"计划在今年年底推出全场景 NGP 和 AI 代驾的能力，并逐步实现不依赖高精度地图。在 G6 的发布会上，小鹏展示了 AI 代驾的演示动画，小鹏 NGP 在 G6 上出厂就配备，有助于提升 NGP 的普及率。小鹏汽车自动驾驶中心算法专家刘德浩认为自动驾驶已经进入下半场，侧重于体系和效率，而小鹏汽车已经在上半场完成了泊车、城市 NGP 和高速 NGP 的能力搭建。为了做好智能驾驶的下半场，他们提前做了布局，包括软件和硬件，软件像 XNGP 软件的布局，不依赖高精度地图，不重度依赖激光雷达，另外还有像算力、传感器、域控制器方面的升级。</p><p></p><p></p><h2>TTTech&nbsp;Auto 和 ZettaScale&nbsp;合作推出统一通信平台&nbsp;Zetta&nbsp;Auto</h2><p></p><p></p><p>7&nbsp;月&nbsp;6&nbsp;日，TTTech&nbsp;Auto 和 ZettaScale&nbsp;technology 合作推出了 Zetta&nbsp;Auto 产品，旨在为汽车行业提供统一的通信平台，使 <a href=\"https://xie.infoq.cn/article/1fd47c097d4f8bd9be4a7d2ef\">SOA</a>\" 通信更安全、高效且可预测。该产品通过整合 DDS、TSN 和 Zenoh 的功能，提供适应性强的通信解决方案，满足汽车行业的特定需求。Zetta&nbsp;Auto 利用 ZettaScale 的核心 Cyclone&nbsp;DDS，实现了无缝互操作和开发人员友好的灵活性，同时保证了可预测的服务质量和高性能。它还与 AUTOSAR&nbsp;Classic 集成，简化了开发过程。Zetta&nbsp;Auto 的目标是成为基于服务架构的汽车行业的第一步。该产品与 MotionWise 兼容，能够与其他标准化软件堆栈进行互操作，并将于 2024 年初获得 ASIL-D 车载通信认证。TTTech&nbsp;Auto 表示，他们将与 ZettaScale 共同制定下一个安全可靠的行业标准，并为开发符合规定的安全和性能标准的车辆操作系统提供软件服务和工具。</p><p></p><p></p><h2>后摩智能携首款存算一体智驾芯片亮相 2023 世界人工智能大会</h2><p></p><p></p><p>后摩智能携带存算一体智驾芯片后摩鸿途 H30 及相关产品参展了 2023 年世界人工智能大会。该芯片基于存算一体架构，具有高计算效率、低计算延时和低功耗等特点，为智能驾驶提供强大的算力支持。后摩智能还展示了基于 H30 芯片打造的智能驾驶硬件平台，名为力驭。展会上，后摩智能还亮相了 PCIe 加速卡产品力谋，支持工业场景中的视频分析和实时监测预警。通过趣味科普视频，后摩智能向观众展示了存算一体架构的优势，解决了传统冯·诺依曼架构中的存储墙和功耗墙问题。后摩鸿途 H30 芯片自发布以来，备受市场关注，被期待为计算性能带来变革。</p><p></p><p></p><h2>国轩高科与巴斯夫签署战略合作协议，推动电池材料创新</h2><p></p><p></p><p>7&nbsp;月&nbsp;10&nbsp;日，国轩高科与巴斯夫签署战略合作协议，旨在加强材料科学领域的合作，推动动力电池的材料创新与技术进步。巴斯夫是全球领先的化工与材料领域企业，拥有超过 160 家全资子公司或合资公司。国轩高科是从事新能源汽车动力锂离子电池研发、生产和销售的企业，主要产品包括磷酸铁锂材料及电芯、三元材料及电芯、动力电池组等。此次合作将在原有合作基础上进一步拓展，共同开发和推广相关化学材料在电池领域的应用。双方表示希望通过合作推动新能源动力电池行业的发展，共同打造以材料科学和数字科学基础的能源科学体系。</p><p></p><p></p><h2>V2M 公司开发声学传感器监控系统，实现车辆故障预防性维护</h2><p></p><p></p><p>美国 V2M 公司近日宣布成功开发出一种基于人工智能的声学传感器监控系统，能够通过车辆发出的声音检测各类故障，并进行预防性维护。该公司已在特斯拉 Model&nbsp;3 上安装了原型声学传感器系统，并正在开发评分模型，以预测车辆潜在故障。</p><p></p><p>V2M 公司计划与一级汽车制造商合作，将其系统作为标配一次性安装于车辆中。他们的团队开发了基于多层神经网络的方法，能够确定故障声音模式的存在，并推断出车底板出现的故障。即使在噪音环境下，该系统也能识别故障声音。</p><p></p><p>该系统在汽车前面和后面安装了两个 MEMS 麦克风，并通过 I2S 链路连接到多路复用器板。第三个传感器位于汽车中部。通过该系统，故障声音能够在 2 秒内以 98% 的准确度被识别出来。一旦发现故障，该系统将通知驾驶员并提供详细的故障信息和报告。初期，该系统将通过 eSIM 连接到云端，但 V2M 也可以实现 100% 车载系统，无需 M2M 通信。这一创新将为车主提供更智能、及时的故障预警和维护服务。</p><p></p><p></p><h2>EV.Energy 与 Maxeon&nbsp;Solar&nbsp;合作，提供更可持续的 EV 充电方式</h2><p></p><p></p><p>电动汽车（EV）智能充电供应商 EV.Energy 与 Maxeon&nbsp;Solar&nbsp;Technologies 合作，在欧洲、中东和非洲地区推出智能和太阳能充电组合解决方案。这一合作意味着电动汽车驾驶员可以使用太阳能为汽车充电，或结合太阳能和电网能源进行充电，实现更可持续、更具成本效益的充电方式。未来，两家公司还计划整合电池存储解决方案，并开发漫游解决方案，实现跨不同网络的无缝充电体验。合作方案最初将在西班牙、意大利和比利时推出，随后还会推广至其他国家。每个国家/地区的客户将获得专门客户服务团队和使用当地语言应用程序的支持。这一合作标志着以净零方式驾驶电动汽车的重要里程碑，也是创造可持续交通未来的重要一步。</p><p></p><p></p><h2>Vector 开发 AI 软件 vAnonymize ，实现视频和图像数据匿名化</h2><p></p><p></p><p>德国软件与汽车技术供应商 Vector 宣布开发出新 AI 软件 vAnonymize，可在开发和测试过程中记录视频和图像数据时匿名化人和车辆牌照，从而无法识别到。vAnonymize 软件使用人工智能技术，可以检测人脸和车辆牌照，并随后将其匿名化。该软件可以在本地存储或服务器上对记录的数据进行匿名化处理，实现高数据吞吐量，而且不会将敏感数据传递给第三方。使用 vAnonymize 可以降低成本、时间和管理工作，同时符合隐私要求。vAnonymize 完全离线工作，无需与第三方共享敏感数据。</p>",
    "publish_time": "2023-07-10 16:15:36",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]