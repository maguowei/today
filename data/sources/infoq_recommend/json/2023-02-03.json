[
  {
    "title": "Traefik Hub支持简单而安全的容器发布",
    "url": "https://www.infoq.cn/article/QaNyBLbXAWNl7vZZJjEy",
    "summary": "<p><a href=\"https://traefik.io/\">Traefik Labs</a>\"宣布Traefik Hub（管理员可以用它快速安全地发布<a href=\"https://kubernetes.io/\">Kubernetes</a>\"和<a href=\"https://www.docker.com/\">Docker</a>\"容器）<a href=\"https://traefik.io/blog/announcing-the-general-availability-of-traefik-hub-1-0/\">全面可用</a>\"。</p><p>&nbsp;</p><p><a href=\"https://traefik.io/traefik/\">Traefik Proxy</a>\"从2015年起可用，提供了动态应用程序感知流量管理，与主要的<a href=\"https://www.redhat.com/en/topics/containers/what-is-container-orchestration\">容器编排器</a>\"集成良好。Traefik Hub是一款SaaS产品，基于Traefik Proxy构建，帮助用户将Kubernetes和Docker容器部署到用户的基础设施上。Traefik Hub的目标是更复杂和分布式的架构，在这些架构中，使用传统的工具在互联网上提供服务可能会过于复杂，有时会发生冲突，并且容易受到人为错误的影响。<a href=\"https://traefik.io/traefik-hub/\">Traefik Hub</a>\"于<a href=\"https://traefik.io/blog/announcing-traefik-hub-cloud-native-networking-platform/\">2022年6月首次推出测试版</a>\"，现在已全面可用。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ea/ea797324263fd638e96643148e37c0ea.png\" /></p><p></p><p>用户将一个轻量级代理部署到他们的基础设施中作为通道端点，它使用了行业标准的加密将容器部署到基础设施上，不需要将运行容器的服务器暴露给网络。这与<a href=\"https://www.infoq.com/news/2022/11/hashicorp-boundary-hcp-ga/\">Hashicorp Boundary</a>\"提供的对内部服务无边界安全外部访问所使用的技术类似。Traefik Hub为用户服务创建DNS名称，并实现了高级的<a href=\"https://www.upguard.com/blog/rbac\">RBAC</a>\"（基于角色的访问控制），负责将流量路由到用户容器，用户无需具备大规模配置云原生网络的技能。网络流量通过Traefik代理或运行在Traefik Hub内部的<a href=\"https://nginx.org/en/\">nginx</a>\"定向到容器，访问控制可以使用<a href=\"https://www.wallarm.com/what/what-is-basic-authentication-all-you-need-to-know\">Basic Auth</a>\"，也可以深度集成<a href=\"https://www.akana.com/blog/what-is-jwt\">JWT</a>\"或<a href=\"https://goteleport.com/blog/how-oidc-authentication-works/\">OIDC</a>\"。代理还会收集关键指标，Traefik Hub可以在仪表盘上向用户报告运行状况和流量，提供跨多个容器和集群的视图。</p><p>&nbsp;</p><p>对于运行Kubernetes集群的用户，Traefik Hub可以被<a href=\"https://traefik.io/blog/traefik-hub-in-a-world-of-gitops/\">集成</a>\"到<a href=\"https://about.gitlab.com/topics/gitops/gitops-workflow/\">GitOps工作流</a>\"中。Traefik Hub提供了实现<a href=\"https://doc.traefik.io/traefik-hub/publishing-services/publish-a-service/\">EdgeIngress</a>\"和<a href=\"https://doc.traefik.io/traefik-hub/access-control-policies/overview/\">AccessControlPolicy</a>\"对象的<a href=\"https://www.cloudreach.com/en/technical-blog/what-custom-resource-definitions/\">CRD</a>\"（自定义资源定义），这样可以完全自动化部署通过Traefik Hub访问的服务，无需使用GUI，服务和一些访问控制完全在代码中定义。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/bc/bc62a4cbe0203f90adf95ecb30851ba0.png\" /></p><p></p><p>Traefik Hub不遗余力地降低网络复杂性，有效地避免用户自己运行反向代理、负载均衡器或Ingress控制器。Traefik Hub将所有这些组件集成到产品中，并由Hub负责流量的路由。开发团队因此能够安全地将重要的安全实践自动化，并将应用程序发布到网络上。Traefik Hub还可以与现有的Traefik Proxy实例无缝集成，利用这些实例自动发现Traefik Hub要发布的服务。</p><p>&nbsp;</p><p><a href=\"https://traefik.io/traefik-hub/\">Traefik Hub</a>\"现已可用，只运行一个集群的用户可以免费使用，并带有简单的身份验证。<a href=\"https://traefik.io/traefik-hub/pricing/\">付费</a>\"的Traefik Hub提供了更多高级功能。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/01/traefik-hub-ga/\">https://www.infoq.com/news/2023/01/traefik-hub-ga/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/UDGzuR869oAB9iURUOYN\">秒级启动万个容器，如何实现容器镜像的“加速冲刺”？</a>\"</p><p><a href=\"https://www.infoq.cn/article/hhk37_UC1FgJFCQyIk7c\">云原生的新思考：为什么说容器已经无处不在了？</a>\"</p><p><a href=\"https://www.infoq.cn/article/TwPyHtEoBYuPSA0PizPx\">一文解读机密容器的崛起和发展</a>\"</p>",
    "publish_time": "2023-02-03 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "雄心勃勃的计划：沃尔沃正在将 Rust 用于其车载软件",
    "url": "https://www.infoq.cn/article/KlIR5fUPPJTmap3CQEcy",
    "summary": "<p></p><p><img src=\"https://static001.geekbang.org/infoq/35/35af8c419bdc2c009ba62284b8745272.png\" /></p><p></p><p>本文是对嵌入式 Rust 先行者 Julius Gustavsson 的采访。他是沃尔沃汽车公司的技术专家和系统架构师。</p><p></p><p></p><blockquote>JF = Johannes Foufas（采访者），JG = Julius Gustavsson（受访者） 。</blockquote><p></p><p></p><p>JF：你如何发现了 Rust？</p><p></p><p>JG：我想，那要追溯到 2014 年，那时，我从事 C 和 C++ 开发已经 15 年了。我当时是瑞典一家大型科技公司里一个新团队的一员。他们的代码风格很先进，他们以自己的代码库为荣。看起来很不错。你知道，我对开始在那里工作感到兴奋，但结果，我还是要调试和之前一样的内存模糊问题。</p><p></p><p></p><blockquote>我突然有个想法，这是最好的结果了吗？我的职业生涯就这样了吗？我下半辈子都要做这个吗？</blockquote><p></p><p></p><p>有趣的是，大概是在那一周或之后的一周，我在 Reddit 上看到了 Rust 1.0 最终版本即将发布的帖子。显然，它履行了承诺，和我在 2009 年前后第一次发现 Rust 时一样。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/59/5965e49c94cdb852566971c48bf8cb92.png\" /></p><p></p><p>左边是 Julius，右边是 Johannes</p><p></p><p>从那时起，我就开始在私下里关注 Rust 项目。几年后，当我加入沃尔沃汽车公司时，我已经被它所吸引，我认为它对沃尔沃汽车公司来说很有用，因为它的设计理念与你在开发安全关键软件时所秉持的原则是一致的。你肯定愿意将质量保证提前。</p><p></p><p>JF：那些模糊不清、难以发现的错误，最让人纠结。那不会经常发生，但一旦发生，就会让人痛苦不堪。</p><p></p><p>JG：是的，的确是。</p><p></p><p>JF：你那时会在业余时间编写 Rust 代码吗，私下里？</p><p></p><p>JG：没有什么重要的事。但当我开始在沃尔沃的工作时，我的第一个项目是在 Core Computer 的原型上对 Signal Broker 做 Android 集成。那是一个面向代理的硬件抽象层（HAL），本身是用 Elixir 编写的。我是用 Rust 和 async Futures 实现的。这也在很大程度上证实了这确实是一种有用的东西。所有东西从一开始就是有效的。我的意思是，只要构建完成，运行时通常都可以运行。当然，它不能解决现实存在的任何逻辑错误。但是，如果你的逻辑没问题，它就会很神奇，编译完了就可以工作。当然，有时候你可能会遇到编译难题，特别是当编译器认为你试图做的事情是错误的。</p><p></p><p>JF：你是从那以后变得更当真了？</p><p></p><p>JG：后来，我就向经理们推销说，“如果我们想在公司内部认真开展 Rust 项目，那么我愿意参与其中，并成为公司的一名员工。”我这样说是因为我那时还是一名顾问。</p><p>我就是这样成了沃尔沃的员工，也就是在那时，我遇到了 Niko（Nikolaos Korkakakis），我们的志向相同。因此，我们开始合作，研究核心计算机的低功耗节点。从根本上说，我们能拥有这个节点纯属侥幸，因为每个人都在忙着处理其他的节点，没有人真正注意到我们这个。而且，它碰巧运行在当时 Rust 在嵌入式裸金属领域支持最好的架构上。此外，它也不是安全关键部件，所以我们不必担心安全认证。</p><p></p><p>JF：是啊，那一般都很麻烦。</p><p></p><p>JG：我们不需要担心安全问题。</p><p></p><p></p><blockquote>但与此同时，它必须非常可靠，因为如果它不能工作，汽车将无法启动。</blockquote><p></p><p></p><p>此外，由于功能范围有限，我们在开展第一个项目时可以只是一个小团队。</p><p></p><p>JF：对你们来说，还缺什么东西吗？你们是否需要开源社区提供的什么东西，或者需要完全靠自己开发一个？</p><p></p><p>JG：是的，我们并不是什么都有。有些部分是缺失的。我们运行在一块 ATMEL/Microchip ATSAME 芯片上，有一个开源项目是专门针对它的。</p><p></p><p>Rust 提供了这样一个硬件抽象层，类似于 Autosar 中的 MCAL 。那个项目最近才开始，还只有少数几个外围设备，许多我们需要的外围设备还没到位。这和我们在汽车行业中经常使用的驱动程序（如 CAN）情况类似。为此，我们一直在积极参与那个项目。</p><p></p><p>JF：你们那时还与其他人合作了吗？</p><p></p><p>JG：是的，我们在 Rust 大会上了接触到了 Grepit。Grepit 成立于 2014 年，是 Luleå科技大学的下属公司。他们创建了 cortex-m-rtic，那是一个用于构建实时系统的并发框架。</p><p></p><p>有了它，你就可以在系统中实现实时行为，但也仅此而已。它不提供任何其他 RTOS 通常会提供的高级抽象或服务之类的东西。不过，我们可以从其他许多可用的开源组件中获得这些功能。所以，是的，我们和 Grepit 开展了合作，为的是让我们可以运转起来。开发驱动程序并将其推送给项目的上游。也有一些开源项目没有提供的实现，我们不得不从头开始开发，但这并没有对我们造成多大阻碍。可以使用的工具很多很多。</p><p></p><p>JF：你有 C++ 世界的经验。相比之下，使用 Rust 带来了什么直接的好处吗？我是说现在，当你们已经有一些用 Rust 编写的东西在运行的时候。</p><p></p><p>JG：我想说的是，我从一开始就看到的好处是，不必再考虑竞态条件和内存崩溃，以及一般的内存安全。你知道的，从一开始就编写正确而健壮的代码。我的第一印象基本就是这样，但现在，我也开始意识到，还有很多其他的方面。第一个方面的副作用也给我们带来了同样大的好处。首先，让我们回顾并简要描述一下 Rust 是如何实现内存安全的，非常独特。它对程序中数据的生命周期做静态分析，确保对该数据的任何引用都不会超过数据本身的生命周期。在任何给定的时间，永远都不允许有多个可变实例，或者，可以有多个读取数据的实例，但永远不能混合使用这两种实例。通过编译时的静态分析，你不必付出任何代价就实现了内存安全，因为编译器知道数据的生命周期何时结束，它会在相应的位置上注入清理代码。</p><p></p><p>JF：除非你使用 unsafe 关键字？</p><p></p><p>JG：恩，不安全的部分会提供额外的灵活性，让你可以搬起石头砸自己的脚。但那并不是说所有的一切都不可预料了。即使是不安全的情况也支持很多不变量。例如，有关生命周期的东西就仍然支持。区别在于，你可以使用原始指针了。从根本上说，它们擦除了所有的生命周期信息，或者你可以绕过编译器的限制。其中也包括编译器自己无法推断而必须留给人来做的东西，这类东西应该总是在一个明确标记为不安全的块中完成，以便可以专门审计。</p><p></p><p>但这并不像许多人想象的那样，仅仅因为不安全就回到了 C 语言。事实并非如此。你有很多安全措施可以采用，虽然与安全子集相比，它们要宽松许多。但是，由编译器强制实施这个内存模型、生命周期和所有权模型的好处是，所有人都在同一起跑线上，这使你更容易直接导入和使用第三方组件。因为 Rust 自带一个内置的工具链，负责构建、获取和解析依赖项，所以添加新的依赖项也变得更容易、更安全。</p><p></p><p>你不再需要检查：</p><p></p><p></p><blockquote>构建了吗？失败是构建系统导致的吗？</blockquote><p></p><p></p><p>你不必再为了构建和链接而修改构建系统。如果我不用再考虑下面这些问题，你在使用第三方组件时会感觉轻松很多：</p><p></p><p></p><blockquote>第三方库对于内存和所有权所做的假设和我一样吗？谁将负责释放这块内存？如果我必须创建一个缓冲区，谁来删除它，诸如此类。</blockquote><p></p><p></p><p>JF：这是有规则的吗？</p><p></p><p>JG：是的。</p><p></p><p>JF：程序包呢？你是把什么都拿过来，还是有足够的理由时才拿过来？</p><p></p><p>JG：我们尽量将依赖降到最低，因为我们正在创造的产品将会存在很长时间。因此，我们引入的所有依赖项都是我们自认为可以维护的东西，以防我们需要修复 Bug 或其他什么东西。有一个 Cargo 的内置插件，可以对代码进行审计，然后对照数据库进行检查，并报告在产品生命周期中可能出现的任何漏洞或其他问题。</p><p></p><p>还有一个我一开始没有意识到的好处是，让新员工加入进来更容易，因为新员工可以自由地使用代码库，尝试改进、更改或重构它，除非所有的不变量都被再次维护，否则编译器都不会编译。也就是说，你可以毫无顾虑地进行重构，新人可以开始编写代码，而且不需要进行详细的审核，因为你知道，有很多不成文的不变量，只有少数人知道。我很有信心，随着时间的推移，这也会减少维保问题，因为你将质量保证提前了。</p><p></p><p>JF：是的，你不需要在产品上运行那么多工具来确认它是否安全，而在 C 和 C++ 代码上，我们要运行一整套工具来设法找出那些难以发现的错误。</p><p></p><p>JG：是的，不需要到那样的程度。有一些运行时特征之类的东西，你可能需要检查一下。此外，这还取决于你希望代码得到多大程度的正式验证。你希望以静态的方式确保这些事情永远不会发生吗？</p><p>对于部分运行时行为，你总是需要借助一些其他的工具。</p><p></p><p>JF：有像这样的工具吗？</p><p></p><p>JG：有，而且越来越多。我不确定是否有工具可以完成所有我们希望它完成的工作，但我们正在试用几个这样的工具。</p><p></p><p>例如 Miri，从根本上讲，它是编译期间在虚拟机中运行代码，从而找出代码库中任何不健全之处。</p><p></p><p>JF：大学里不是也有人做了一个这样的工具吗？</p><p></p><p>JG：是的，有，比如 KLEE，这是一个基于 LLVM 编译基础设施构建的动态符号执行引擎，已经针对 Rust 做了调整。这个工具可以帮你确定，某个东西在某种情况下是否会成为慌乱之源。我们还没有开始使用它，但它是我们想要探索的东西。Kani 验证器看起来也不错。</p><p></p><p>JF：分析器呢，是语言自带的吗？</p><p></p><p>很遗憾，在嵌入式目标上没有，至少现在还没有。在 Rust 的最新版本中，你可以给编译器提供一个代码检测覆盖率标识，这样就能得到额外的说明信息。然后，它将为你显示实际执行的代码路径。我们需要做一些工作，把它应用到嵌入式目标上。我知道，它在台式机上有效，因为它可以动态生成那些文件。当然，嵌入式目标上没有文件系统或文件，所以你需要自己把它写入内部缓冲区。对于性能分析，你可以使用标准的桌面工具，但我不确定效果怎么样。在进行测试时，我们会设法将所有硬件无关的逻辑隔离到它们自己的 crate 中。因为这样，我们就可以运行它们并使用该语言提供的内置测试支持。我们可以在那些硬件上运行常规的测试基础设施，但是，当在实际的目标硬件上进行集成测试时，我们就会使用集成测试工具。</p><p></p><h5>JF：所以，你们可以大量依赖于 X86？</h5><p></p><p></p><p>JG：是的，我们为主机构建代码并在那里进行测试。这也是 Rust 的强大之处。它提供了完美的跨平台支持。它只是工具链的一部分，与 C 或 C++ 的体验完全不同。</p><p></p><p>JF：如何测试它们？我的意思是，Rust 是否提供了什么测试框架？</p><p></p><p>JG：有一个内置的单元测试框架。代码中的任何函数都可以作为一个测试来运行，只需用特定的标记对其进行注释。你可以在常规代码中穿插测试，当进行测试构建时，它们就会运行。单元测试几乎没有任何门槛。它是内置的，非常奇妙。编写基准测试来检查函数的改进情况也很容易。同样的测试框架也可以用于编写集成测试，在桌面上运行很容易，但当你在目标上执行时，就不是那么天衣无缝了。但是，有一个新的 Rust 项目 Probe-rs，让我们可以用一种相当流畅的方式与目标硬件进行通信。它提供了 GDB 类型的接口库，因此，你可以针对目标环境编写测试应用。在主机上时，它只是将 probe-rs 作为库加载，然后你可以进行交互，并像命令一样发送 GDB，或者作为测试的一部分，通过网络进行低级硬件操作。</p><p></p><p>JF：对于未来，你有什么看法？</p><p></p><p>JG：我们有雄心勃勃的计划。</p><p></p><p>我们希望在沃尔沃汽车公司将 Rust 扩展到更多的节点上，为此，对于某些硬件目标，我们需要获得编译器支持，对于其他目标，我们需要获得操作系统支持。替换已经开发完成并经过测试的代码没有意义，但是，只要可行，从头开发的代码肯定应该用 Rust 开发。这并不是说 Rust 是万能的。Rust 仍然有一些不完善的地方，你需要进行权衡，有时候，这可能并不是最好的做法。但总的来说，我认为 Rust 潜力巨大，可以让我们以更低的成本开发出更高质量的代码，降低我们的维护成本，最终实现双赢。</p><p></p><p>JF：但是，Rust 能和基于 C 的代码库共存吗？</p><p></p><p>JG：它几乎可以在任何粒度上与之共存，可以在模块级上共存，也可以在函数级上共存，这取决于你在做什么。例如，你可以重写需要网络安全的部分，那些容易遭受攻击的部分。C 和 Rust 之间的调用没有开销，C 可以调用 Rust，反之亦然。即使是 C++，也有一些方法，虽然还是得通过 C 接口，但有一些不错的 crate 可以帮助你生成额外的样板代码，使得 C++ 和 Rust 可以无缝通信。</p><p></p><p></p><blockquote>安全关键行业中还有许多可以吸收的东西，我们正设法提供尽可能多的支持。</blockquote><p></p><p></p><p>例如，有一个 Ferrocene 项目，旨在对编译器做 ASIL D 认证。Ferrocene 将是现有开源编译器 rustc 的 ISO26262 限定版本。</p><p></p><p>AUTOSAR 和 SAE 也成立了一个 Rust 工作组。</p><p></p><h5>原文链接：</h5><p></p><p>https://medium.com/volvo-cars-engineering/why-volvo-thinks-you-should-have-rust-in-your-car-4320bd639e09</p><p></p><h5>相关阅读:</h5><p></p><p><a href=\"https://xie.infoq.cn/article/87f398f84afec90a2897cdf3b\">企业架构治理指什么，如何做？</a>\"</p><p><a href=\"https://xie.infoq.cn/article/c25a8eb02485fdd0a85b8a225\">聚焦新基建，企业如何实现供应链管理再升级？</a>\"</p><p><a href=\"https://xie.infoq.cn/article/59ea323cefcf0e802818816fb\">10 年后，掌握 Rust 语言，是不是入行汽车软件的必要条件呢？</a>\"</p><p><a href=\"https://xie.infoq.cn/article/b8b721ecea37635c46ae24d20\">企业级业务架构设计：方法论与实践 学习笔记</a>\"</p>",
    "publish_time": "2023-02-03 10:13:28",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "身价近千亿的谷歌联合创始人在隐退多年后回谷歌写代码",
    "url": "https://www.infoq.cn/article/40yrDxcTp83fuwlFuaFK",
    "summary": "<p>据福布斯报道，1 月 24 日，谷歌联合创始人谢尔盖·布林 (Sergey Brin ) 重返谷歌投入到了软件编码工作之中，这是自 2019 年他将全权移交给谷歌 CEO 桑达尔·皮查伊 (Sundar Pichai) 和拉里·佩奇 (Larry Page) 后，多年来首次提交了访问代码的请求。</p><p>&nbsp;</p><p>根据去年彭博亿万富翁指数，现年 49 岁的谢尔盖·布林的身价接近 950 亿美元。·</p><p>&nbsp;</p><p>据两位消息人士称，该请求与谷歌的自然语言聊天机器人 LaMDA 有关——该项目最初于 2021 年宣布，但随着 OpenAI 的ChatGPT获得了越来越多的关注，显然因为竞争迫在眉睫，谷歌最近对其给予了更多关注。</p><p>&nbsp;</p><p>一位看到请求的人说，Brin 提交了一份“CL”（“changelist”的缩写），以获取训练 LaMDA 的数据。这是两行对配置文件的更改请求。数十名工程师给出了 LGTM 批准，LGTM 是“looks good to me”的缩写。该人士补充说，一些批准来自该团队以外的工作人员，他们似乎只是渴望能够说他们“已将代码审查批准授予公司联合创始人”。</p><p>&nbsp;</p><p>然而，并非所有谷歌员工都喜欢这个行为。“先去修复谷歌” ，其中一位在评论中说。</p><p>&nbsp;</p><p>谷歌没有回应多项置评请求。</p>",
    "publish_time": "2023-02-03 10:24:58",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "计算中间件 Apache Linkis 正式毕业成为 Apache 顶级项目",
    "url": "https://www.infoq.cn/article/uETpz8bm4AGxBBGrQtDI",
    "summary": "<p>Apache Linkis 是一种计算中间件，充当上层应用程序和底层引擎（例如<a href=\"https://spark.apache.org/\">Apache Spark</a>\"、<a href=\"https://hive.apache.org/\">Apache Hive</a>\"和<a href=\"https://flink.apache.org/\">Apache Flink</a>\"&nbsp;）之间的层。该项目由微众银行开源，于 2021 年作为<a href=\"https://incubator.apache.org/\">Apache 孵化器项目启动，并于 2023 年 1 月升级为</a>\"<a href=\"https://news.apache.org/foundation/entry/the-apache-software-foundation-announces-apache-linkis-as-a-top-level-project\">顶级项目</a>\"。</p><p>&nbsp;</p><p>Apache Linkis 通过提供 REST/JDBC/Shell 等标准接口，方便让上层应用连接访问 MySQL/Spark/Hive/Trino/Flink 等底层引擎，同时实现变量、脚本、函数和资源文件等用户资源的跨上层应用互通，以及通过 REST 标准接口提供了数据源管理和数据源对应的元数据查询服务。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/68/68ffc76d7d859d32bf372a1f830e5aaf.png\" /></p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/7a/7a8041167c9d0708d3b1b9cf9b2cfa52.png\" /></p><p></p><p>&nbsp;</p><p>其优势在于提供了强大的连通、复用、编排、扩展和治理管控能力。通过计算中间件将应用层和引擎层解耦，简化了复杂的网络调用关系，降低了整体复杂度，同时节约了整体开发和维护成本。</p><p>&nbsp;</p><p>目前Linkis支持Spark、Hive、Flink、<a href=\"https://www.python.org/\">Python</a>\"、Presto、<a href=\"https://www.elastic.co/\">ElasticSearch</a>\"、JDBC等多种计算和存储引擎，未来会支持更多如<a href=\"https://trino.io/\">Trino</a>\"、<a href=\"https://seatunnel.apache.org/\">SeaTunnel</a>\"等。Linkis 还支持各种脚本语言，例如<a href=\"https://spark.apache.org/sql/\">SparkSQL</a>\"、<a href=\"https://cwiki.apache.org/confluence/display/Hive/LanguageManual\">HiveQL</a>\"、Python、<a href=\"https://spark.apache.org/docs/latest/api/python/\">Pyspark</a>\"、<a href=\"https://www.scala-lang.org/\">Scala</a>\"和 JDBC。</p><p>&nbsp;</p><p>官网主页：</p><p><a href=\"https://linkis.apache.org/\">https://linkis.apache.org/</a>\"</p><p>仓库地址：</p><p><a href=\"https://github.com/apache/linkis\">https://github.com/apache/linkis</a>\"</p><p><a href=\"https://gitee.com/apacheLinkis/Linkis\">https://gitee.com/apacheLinkis/Linkis</a>\"</p>",
    "publish_time": "2023-02-03 11:14:01",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "ChatGPT 60天月活1亿后，微软又出手：GPT-4 可能会出现在 Bing 中",
    "url": "https://www.infoq.cn/article/N2DHuiaEtcIEeXvjbVLC",
    "summary": "<p>据The Register最新报道，由于担心自己可能会失去在线搜索领域的主导地位，有消息称，微软将在未来几周内将 OpenAI 即将推出的大型语言模型 <a href=\"https://www.infoq.cn/article/cTX3kDQHY2Ky6gdHcGHa\">GPT-4 </a>\"整合到 Bing 搜索引擎中。GPT-4 预计将比其前身 ChatGPT 和 GPT-3 更强大，具有生成更高质量文本和响应更广泛输入查询的新功能。</p><p>&nbsp;</p><p>作为 OpenAI 的主要投资者，微软获得了 OpenAI 产品的独家部署权。今年1月，有报道称微软计划<a href=\"https://www.infoq.cn/article/mCH0RfLz8hIPx0LDS7yP\">将 ChatGPT 添加到 Bing 中</a>\"，以吸引谷歌搜索用户。</p><p>&nbsp;</p><p>知情人士表示，微软相信，对于搜索用户来说，提供更具对话性和上下文回复，可以比链接提供更好的答案，从而赢得用户。微软可能在未来几个月内推出附加功能，但现在仍在权衡聊天机器人的准确性以及将其纳入搜索引擎的速度。该知情人士表示，最初的版本可能是对一小部分用户的有限测试。</p><p>&nbsp;</p><p>自去年年末问世以来，OpenAI 旗下人工智能聊天机器人ChatGPT正以前所未有的速度火爆蹿红。2月1日，瑞银发布研究报告称，<a href=\"https://www.infoq.cn/article/FRcz5vjOvl3bM2d57opX\">ChatGPT</a>\"在2022年11月推出后，今年1月的月活跃用户估计已达1亿，成为历史上用户增长最快的消费应用。</p><p>&nbsp;</p><p>该报告援引分析公司Similar Web的数据称，今年1月，全球每天约有1300万独立访问者使用ChatGPT，是去年12月份的两倍多。“在互联网领域发展20年来，我们想不出有哪个消费者互联网应用比它上升速度更快，”瑞银分析师在报告中写道。</p><p>&nbsp;</p><p>与此同时，谷歌那边也在加急测试ChatGPT竞品，并构建新的人工智能搜索产品，以保持竞争力。</p><p>&nbsp;</p><p>据悉，谷歌内部启动了一个代号为“Atlas”的项目，召集了工程师，并指派他们开发一个类似的系统。据CNBC报道，工作人员还在试验一种名为“Apprentice Bard”的聊天机器人，以构建基于其 LaMDA 语言模型的搜索桌面应用程序。</p><p>&nbsp;</p><p>目前还不清楚这些类型的模型是如何应用于网络搜索的。尽管有一些证据表明大型语言模型可以从其训练数据中回忆和提取信息，但它们往往会弄错事实。互联网在不断变化，新的网站和页面会随着新知识的出现而不断更新和添加。然而，像 ChatGPT 这样的工具只能在其训练数据的范围内运行。</p><p>&nbsp;</p><p>围绕搜索，微软和谷歌这两大巨头正在 AI 领域展开角逐。鹿死谁手还是个未知解，期待二者带来更多创新性的AI产品。</p>",
    "publish_time": "2023-02-03 11:42:13",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]