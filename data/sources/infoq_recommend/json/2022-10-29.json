[
  {
    "title": "简化跨微服务重用，API标准化过程中的左移法",
    "url": "https://www.infoq.cn/article/swp38OvkFIhIJO2K4wUT",
    "summary": "<p></p><h2>什么是API标准化？</h2><p></p><p>API设计就是创建一个有效的接口，使你可以更好地维护和实现API，同时使消费者能够轻松地使用这个API。</p><p></p><p>一致的API设计意味着，在组织或团队中对所有API及其公开的资源进行标准化设计。它是开发人员、架构师和技术作者共同遵守的蓝图，可以保证在API使用过程中品牌和体验的一致性。风格指南旨在确保API设计和实现方式的一致性，组织就是用它来标准化设计。下面是比较流行的两份风格指南：</p><p></p><p><a href=\"https://github.com/Microsoft/api-guidelines\">微软REST API指南</a>\"<a href=\"https://cloud.google.com/apis/design/\">谷歌API设计指南</a>\"在业余项目里，为了开发出一致的API，并遵循API开发的行业最佳实践，我经常参考这本<a href=\"http://apistylebook.com/\">风格手册</a>\"。</p><p></p><h2>为什么要标准化？</h2><p></p><p>清晰的设计方法可以确保API与业务需求相一致。API越标准，歧义就越少，合作成果就越多，质量就更有保障，API的采用也会相应增加。</p><p></p><p>清晰一致的API设计标准是良好开发体验和消费体验的基础。它们使开发人员和消费者都能够快速有效地理解API，缩短学习曲线，并按照一套指南进行构建。</p><p></p><p>API标准化还可以改善团队协作，提供提升准确性和降低延迟的指导原则，有助于降低总开发成本。标准对于API策略的成功如此重要，以至于许多科技公司（如微软、谷歌和IBM）以及行业组织（如SWIFT、TMForum和IATA）都使用并支持OpenAPI规范（OAS），并将其作为定义RESTful API的基本标准。</p><p></p><p>如果不进行标准化，那么个体开发人员在设计过程中就可以随意选择。虽然我们鼓励创造，但如果没有适当的风格指南，很快就会变得混乱。</p><p></p><p>如果不进行标准化，那么组织就无法在API设计和交付过程中提供质量保证。强化设计标准有助于提升预测成功结果的能力，让组织能够在保证质量的前提下快速扩展API开发。</p><p></p><h2>API标准化之旅</h2><p></p><p>如果没有一个正式的流程来强化标准化，就不可能成功地扩展API设计和开发过程，也不可能符合监管和行业标准。API设计风格指南提供了内外部团队在构建API定义和重用资产时开展协作所需的“护栏”。</p><p></p><p>最初，组织在内部以PDF或Wiki的形式发布API指南，供所有人参考，并制定相应的流程以确保团队遵循设计指南。确保开发一致性的一种方案是在API开发期间进行人工评审。</p><p></p><p>API以<a href=\"https://www.infoq.cn/article/2017/02/openapi-3\">OpenAPI</a>\"格式指定，并在版本控制系统中维护，API定义可以遵循与其他代码工件相同的评审过程。开发人员可以为API更改创建pull请求，并让同事提供反馈。这个过程是手动的，是保障治理以及确保遵循API指南的有效方法，但与所有手动过程一样，它容易受人为错误所影响，而且有时候不及时。</p><p></p><p>等待同事评审API更改可能会导致周期变慢，对开发人员的工作效率产生不利的影响，特别是涉及到评审过程中可以自动化的方面时。当组织规模扩大，更多的开发人员开始参与API开发时，这个过程也无法扩展。在这种情况下，可以提供API自动评审的左移法就很有用了。就像我们对其他工件所做的那样，借助一些自动化工具或分析器尽早获得反馈，这样最好了。</p><p></p><h2>什么是左移法？</h2><p></p><p>术语“左移”指的是软件开发中的一种实践。在这种实践中，团队会比以往更早地开始测试，帮助自己聚焦质量，致力于问题预防而不是检测。左移的目标是提高质量，缩短漫长的测试周期，并降低在开发周期结束时（或者更糟，在生产环境中）出现令人不快的意外情况的可能性。</p><p></p><h2>Open API验证器</h2><p></p><p>说到OpenAPI<a href=\"https://nordicapis.com/8-openapi-linters/\">分析器</a>\"，我见过一些。它们将API风格指南转换为一组规则，并根据Open API规范进行验证。这些分析器允许你根据组织风格指南自定义规则。一个名为<a href=\"https://opensource.zalando.com/zally/\">Zally</a>\"的分析器引起了我的注意，它是一个用Kotlin编写的工具，由Zalando开源。OpenAPI风格指南验证器的工作流程如下：</p><p></p><p>将API标准或风格指南表示成一组规则。<a href=\"http://zalando.github.io/restful-api-guidelines/\">这里</a>\"有Zalando提供的一份指南；根据<a href=\"https://xie.infoq.cn/article/7feb7997f6c8f0f26312b5d1b\">OpenAPI</a>\"编写API；像Zally、SonarQube、Spectra这样的检测工具可以验证开发人员编写的OpenAPI规范是否符合第1步中定义的规范规则。</p><p></p><h2>Zally是什么？</h2><p></p><p><a href=\"https://github.com/zalando/zally#readme\">Zally</a>\"是一个简单易用的API分析器。它的标准配置是根据<a href=\"http://zalando.github.io/restful-api-guidelines/\">Zalando RESTful指南</a>\"中定义的规则检查API，对任何人来说都是开箱即用的。它具有可扩展性，允许我们添加自己的规则集。它还提供以下特性：</p><p></p><p>根据需要在服务器端启用/禁用规则；接受JSON和YAML格式的Swagger V2和OpenAPI V3规范；可以编写并插入自己的规则；直观的<a href=\"https://github.com/zalando/zally/blob/master/web-ui/README.md\">Web UI</a>\"显示了实现的规则和规范验证的结果；使用Web钩子集成GitHub，验证每个pull请求中的OpenAPI，并在评论中回显违规情况。</p><p></p><h2>Zally Gradle插件背后的动机</h2><p></p><p>虽然Zally的编写方式更具可扩展性和可定制性，但我觉得，我们仍然可以进一步改进Zally当前的验证工作流，缩短开发反馈循环。由于Zally缺少像checkstyle、ktlint、spot bug这样的插件，所以我在使用Zally时遇到了以下几个痛点：</p><p></p><p>为了使用CLI工具，开发人员需要在本地或远程系统上托管Zally服务器；开发人员需要切换运行CLI工具的上下文，或是额外做一些工作，将CLI配置为Maven/Gradle构建过程的一部分，前提是第一条已经满足；在每个pull请求中使用GitHub集成组件验证API会增加反馈循环时间。所有这些都增加了向开发人员反馈的时间，并且还有托管Zally服务器的人工开销。所以我决定编写自己的Gradle插件，它既可以集成在本地开发环境中，也可以集成在CI工具中，帮助我验证和提取不同格式的验证结果。</p><p></p><h3>定制Zally插件</h3><p></p><p><a href=\"https://github.com/thiyagu06/zally-gradle-plugin\">zally-gradle-plugin</a>\"是一个用kotlin编写的Gradle插件，可以集成到构建脚本中。该插件根据规则集验证规范，并提供JSON和HTML格式的报告。</p><p></p><p>该项目包含一个<a href=\"https://github.com/thiyagu06/zally-gradle-plugin/blob/main/example/build.gradle.kts\">示例任务配置</a>\"：</p><p></p><p><code lang=\"java\">// settings.gradle.kts\npluginManagement {\n    repositories {\n        gradlePluginPortal()\n        mavenLocal()\n    }\n}\n\n// build.gradke.kts\nplugins {\n    id(\"io.github.thiyagu06\") version \"1.0.2-dev\"\n}\n\nzallyLint {\n    inputSpec = File(\"${projectDir}/docs/petstore-spec.yml\")\n    reports {\n        json {\n            enabled = true\n            destination = File(\"${rootDir}/zally/violation.json\")\n        }\n        rules {\n            must {\n               max = 10\n            }\n        }\n    }\n}\n\n//execute task\n./gradlew clean zallyLint\n\n```\n```\nRun ZallyLint task\n./gradlew zallyLint</code></p><p></p><p>有了这个Gradle插件，我就可以在API开发过程中实时获得反馈。这使我能够在进入手动检查步骤之前修复API的问题。该插件还可以与CI作业集成，用于风格指南的检查验证。因为所有开发团队都使用相同的规则，所以组织就可以为用户提供更加一致的API。该方法大致有如下好处。该插件提供了一个选项，可以将违规报告导出为JSON和HTML格式。它还提供了一种简单的规则配置方法，用于定义每个严重性级别下规范中可以存在的最大违规数。</p><p></p><p>可以将JSON格式解析并导出到任何数据库中，用于计算API设计兼容性得分，并构建一个仪表板，共享给更广泛的组织，作为API标准化方案的决策依据。同样，HTML报告也可以导出到S3桶或谷歌云存储，并以网站的形式提供给更广泛的受众。</p><p></p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/shift-left-api/\">https://www.infoq.com/articles/shift-left-api/</a>\"</p><p></p><p></p><p></p>",
    "publish_time": "2022-10-29 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]