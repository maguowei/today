[
  {
    "title": "零拷贝技术升级，V6D让数据传输更高效",
    "url": "https://www.infoq.cn/article/Qx4zJlivwd2B1XAzYxDr",
    "summary": "<p>零拷贝和内存数据管理器<a href=\"https://v6d.io/index.html\">Vineyard（v6d）</a>\"&nbsp;最近发布了<a href=\"http://github.com/v6d-io/v6d/releases/tag/v0.13.2\">0.13.2</a>\"版本，为Python/C++开发和Kubernetes部署带来了改进的功能。它是作为<a href=\"https://www.cncf.io/projects/vineyard/\">CNCF沙箱项目</a>\"来进行维护的，并提供了分布式操作符，可用于在集群节点内或跨集群节点共享不可变数据。V6d特别适用于大型（分片）数据集上（例如大语言和图模型）的深度网络训练。它的开发目前由阿里巴巴的一个工程团队领导。</p><p>&nbsp;</p><p><a href=\"https://en.wikipedia.org/wiki/Zero-copy\">零拷贝</a>\"和<a href=\"https://en.wikipedia.org/wiki/In-memory_database\">内存</a>\"数据分布是许多实时应用程序的核心问题。从图像处理管道到深度学习模型，如LLM和图挖掘算法等，许多数据处理应用程序都需要从许多独立的进程中获取大量数据。在机器学习工程中，随着深度网络变得越来越大，模型参数的分布要求访问共享状态和数据，这一瓶颈变得越来越明显了。作为一个早期项目，V6d旨在为此类用例提供一个高级API。</p><p>&nbsp;</p><p>实时应用程序的架构通常利用内存中的<a href=\"https://en.wikipedia.org/wiki/List_of_in-memory_databases\">键-值存储/缓存</a>\"（例如etcd、Memcached、Redis）来存储和交换频繁访问的数据。根据服务类型，工程团队必须考虑这些工具带来的相关权衡。V6d由两个主要组件组成：<a href=\"https://arrow.apache.org/docs/python/plasma.html\">Apache Arrow Plasma</a>\"派生共享内存数据管理器（在一个节点内）和由<a href=\"https://etcd.io/\">etcd</a>\"支持的元数据服务器（在不同节点之间）。虽然Plasma派生服务允许零拷贝数据传输，但etcd服务处理数据属性的全局分布（可能是分区的）。</p><p>&nbsp;</p><p>V6d将自己置于Python社区中。在某种程度上，可以考虑将Python原生的多进程<a href=\"https://docs.python.org/3/library/multiprocessing.shared_memory.html\">shared_memory</a>\"扩展到多台机器，以实现不可变的blob。V6d提供了两个不同的Python客户端接口<a href=\"https://v6d.io/notes/python-api.html#vineyard.IPCClient\">IPCClient</a>\"和<a href=\"https://v6d.io/notes/python-api.html#vineyard.RPCClient\">RPCClient</a>\"，分别用于操作本地和远程对象。两个客户端API都允许基于对象ID的统一数据插入和检索模式。然而，v6d<a href=\"https://v6d.io/notes/data-accessing.html#ipcclient-vs-rpcclient\">不会</a>\"在集群节点之间自动移动数据，除非被指示这样做，因为这种操作的高网络成本很高。</p><p>&nbsp;</p><p>我们可以提供了一个可以在本地机器上运行的简单示例，让我们先从创建本地v6d实例开始：</p><p>&nbsp;</p><p><code lang=\"null\">python -m vineyard --socket /tmp/vineyard.sock --size 16733650944</code></p><p>&nbsp;</p><p>作为第一步，让我们展示如何利用Python的原生API。为此，我们将使用NumPy创建一个10k分辨率的虚拟RGB图像，并使用shared_memory()接口来快速共享它：</p><p>&nbsp;</p><p><code lang=\"null\">import numpy as np\nfrom multiprocessing import shared_memory\nshape_, dtype_ = (3, 10000, 10000), np.uint8\narray_to_share = np.random.randint(0, high=255, size=shape_, dtype=dtype_)\n#创建共享内存\nshm = shared_memory.SharedMemory(create=True, size=array_to_share.nbytes)\narray_shm = np.ndarray(shape_, dtype=array_to_share.dtype, buffer=shm.buf)\narray_shm[:] = array_to_share[:] # Here we need to copy as we use existing array\n# 在另一个过程中使用共享内存名称、大小和类型信息来检索数据\nexisting_shm = shared_memory.SharedMemory(name=shm.name)\narray_retrieved = np.ndarray(shape=shape_, dtype=dtype_, buffer=existing_shm.buf)\n\n</code></p><p>&nbsp;</p><p>在这里，我们可以使用v6d执行相同的操作：</p><p>&nbsp;</p><p><code lang=\"null\">import vineyard\nclient = vineyard.connect('/tmp/vineyard.sock')\narray_id = client.put(array_to_share)\n# 在另一个进程中检索之前的array_to_share\narray_retrieved = client.get(array_id)</code></p><p>&nbsp;</p><p>如上所示，该API非常易于使用，并将数据类型和数组形状传播到检索到的对象中。由于是通用<a href=\"https://numpy.org/doc/stable/reference/arrays.interface.html\">数组协议</a>\"（又名缓冲协议），NumPy接口还接受对PyTorch、TensorFlow和MxNet张量的零拷贝操作。除此之外，v6d在Pandas/Arrow数据框架上进行了相同的操作。有关该库集成的更多详细信息，请访问<a href=\"https://v6d.io/notes/ml.html\">相关的文档页面</a>\"。 也可以在<a href=\"https://v6d.io/tutorials/distributed-learning.html\">网页中</a>\"找到机器学习培训教程的示例。</p><p>&nbsp;</p><p>对于多节点设置，V6d允许通过<a href=\"https://v6d.io/notes/deploy-kubernetes.html\">Python API</a>\"和<a href=\"https://v6d.io/notes/vineyard-operator.html#install-from-helm-chart\">Helm图表</a>\"在Kubernetes集群上部署vineyard操作。<a href=\"https://v6d.io/notes/architecture.html#architecture-of-vineyard\">官方文档</a>\"中还提供了更详细的架构概述。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/03/zero-copy-v6d/\">https://www.infoq.com/news/2023/03/zero-copy-v6d/</a>\"</p><p></p><p>相关阅读：</p>",
    "publish_time": "2023-04-27 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]