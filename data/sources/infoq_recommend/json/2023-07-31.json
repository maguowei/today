[
  {
    "title": "Java 近期新闻：Micronaut 4.0、Payara 平台、Spring Web Flow 3.0、JetBrains AI 助手",
    "url": "https://www.infoq.cn/article/IB9Yr9uBTePgDazjaiJq",
    "summary": "<p></p><h2>JDK 21</h2><p></p><p>JDK 21 的&nbsp;<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-21%2B31\">Build 31</a>\"&nbsp;在上周推出了<a href=\"https://jdk.java.net/21/\">抢先体验构建</a>\"，主要提供针对 Build 30 的<a href=\"https://github.com/openjdk/jdk/compare/jdk-21%2B30...jdk-21%2B31\">升级</a>\"和对多项<a href=\"https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2021%20and%20%22resolved%20in%20build%22%20%3D%20b31%20order%20by%20component%2C%20subcomponent\">问题</a>\"的修复。关于该构建的更多信息可参见<a href=\"https://jdk.java.net/21/release-notes\">发布说明</a>\"。</p><p></p><h2>JDK 22</h2><p></p><p>JDK 22 的&nbsp;<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-22%2B6\">Build 6</a>\"&nbsp;也于上周推出了<a href=\"https://jdk.java.net/22/\">抢先体验</a>\"构建，提供针对 Build 5 的<a href=\"https://github.com/openjdk/jdk/compare/jdk-22%2B5...jdk-22%2B6\">升级</a>\"和对多项<a href=\"https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2022%20and%20%22resolved%20in%20build%22%20%3D%20b06%20order%20by%20component%2C%20subcomponent\">问题</a>\"的修复。关于该构建的更多信息可参见<a href=\"https://jdk.java.net/22/release-notes\">发布说明</a>\"。</p><p>开发者们欢迎到&nbsp;<a href=\"https://bugreport.java.com/bugreport/\">Java Bug 数据库</a>\"中反馈在&nbsp;<a href=\"https://openjdk.org/projects/jdk/22/\">JDK 22</a>\"&nbsp;及&nbsp;<a href=\"https://openjdk.java.net/projects/jdk/21/\">JDK 21</a>\"&nbsp;中遇到的问题。</p><p></p><h2>Spring 框架</h2><p></p><p><a href=\"https://spring.io/projects/spring-webflow\">Spring Web Flow</a>\"&nbsp;3.0.0 版本<a href=\"https://spring.io/blog/2023/07/13/spring-web-flow-3-0-0-released\">发布</a>\"，主要提供：与 Spring 框架 6 和 Jakarta EE 的兼容；移除已退役且未被迁移至 Jakarta EE 的<a href=\"https://tiles.apache.org/\">阿帕奇 Tiles</a>\"&nbsp;项目；<a href=\"https://github.com/spring-projects/spring-webflow-samples/blob/main/README.md\">Spring Web Flow</a>\"&nbsp;示例也进行了对应的更新，<a href=\"https://github.com/spring-projects/spring-webflow-samples/blob/main/booking-mvc/README.md\">booking-mvc</a>\"&nbsp;示例现使用&nbsp;<a href=\"https://www.thymeleaf.org/doc/articles/layouts.html\">Thymeleaf 布局</a>\"而非原本的阿帕奇 Tiles。</p><p></p><p><a href=\"https://spring.io/projects/spring-framework\">Spring 框架</a>\"&nbsp;6.1 的<a href=\"https://spring.io/blog/2023/07/13/spring-framework-6-1-m2-released\">第二个里程碑版本发布</a>\"，提供问题修复、文档优化、依赖升级，以及诸多新功能，其中包括：HTTP 接口客户端架构以及&nbsp;<a href=\"https://docs.spring.io/spring-framework/docs/6.1.0-SNAPSHOT/javadoc-api/org/springframework/web/client/RestTemplate.html\">RestTemplate</a>\"&nbsp;类的适配器；新增&nbsp;<a href=\"https://docs.spring.io/spring-framework/docs/6.1.0-SNAPSHOT/javadoc-api/org/springframework/web/client/RestClient.html\">RestClient</a>\"&nbsp;接口；支持在&nbsp;<a href=\"https://docs.spring.io/spring-framework/docs/6.1.0-SNAPSHOT/javadoc-api/org/springframework/scheduling/TaskScheduler.html\">TaskScheduler</a>\"&nbsp;接口中使用&nbsp;<a href=\"https://docs.spring.io/spring-framework/docs/6.1.0-SNAPSHOT/javadoc-api/org/springframework/scheduling/annotation/Scheduled.html\">@Scheduled</a>\"&nbsp;注解的多个实例。关于版本的更多信息可参见<a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v6.1.0-M2\">发布说明</a>\"。</p><p></p><p>Spring 框架的 6.0.11、5.3.29 和 5.2.25.RELEASE 均已<a href=\"https://spring.io/blog/2023/07/13/spring-framework-5-2-25-release-5-3-29-and-6-0-11-available-now\">发布</a>\"，提供问题修复、文档优化、依赖升级及新功能，其中包括：简化了&nbsp;<a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.html\">DefaultSingletonBeanRegistry</a>\"&nbsp;类中定义的&nbsp;isDepedendent()&nbsp;方法；增加了&nbsp;<a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/ContentDisposition.Builder.html\">ContentDisposition.Builder</a>\"&nbsp;接口中缺失的&nbsp;@Nullable&nbsp;注解；扩展了&nbsp;<a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/util/ObjectUtils.html\">ObjectUtils</a>\"&nbsp;方法中定义的&nbsp;nullSafeConciseToString()&nbsp;方法所支持的类型。版本 6.0.11 及 5.3.29 将分别在 Spring Boot 的 3.1.2 和 2.7.14 中使用。因 Spring Boot 2.3.x 版本<a href=\"https://spring.io/projects/spring-boot#support\">即将退役</a>\"，周期外版本 5.2.25.RELEASE 将不会随着 Spring Boot 的版本一同发布。关于版本&nbsp;<a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v6.0.11\">6.0.11</a>\"、版本&nbsp;<a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.29\">5.3.29</a>\"&nbsp;及&nbsp;<a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.25.RELEASE\">5.2.25.RELEASE</a>\"&nbsp;的更多信息可参见发布说明。</p><p></p><p><a href=\"https://spring.io/projects/spring-data\">Spring Data</a>\"&nbsp;的<a href=\"https://spring.io/blog/2023/07/14/spring-data-2023-1-0-m1-released\">首个里程碑版本</a>\"&nbsp;2023.1.0，代号 Vaughn 发布：可与 JDK 21 兼容，支持&nbsp;<a href=\"https://kotlinlang.org/docs/inline-classes.html\">Kotlin 值类</a>\"；通过&nbsp;<a href=\"https://download.java.net/java/early_access/jdk21/docs/api/java.base/java/util/concurrent/Executor.html\">Executor</a>\"&nbsp;接口使用虚拟线程；对使用检查点协调还原（CRaC）优化的探索。关于该版本的更多细节可参见<a href=\"https://github.com/spring-projects/spring-data-commons/wiki/Spring-Data-2023.1-%28Vaughan%29-Release-Notes\">发布说明</a>\"。</p><p></p><p>Spring Data 的<a href=\"https://spring.io/blog/2023/07/14/spring-data-2023-0-2-2022-0-8-and-2021-2-14-available-now\">服务版本</a>\"&nbsp;2023.0.2、2022.0.8 及 2021.2.14 发布，提供问题修复以及对应子项目的依赖升级，其中包括：Spring Data MongoDB 4.1.2、4.0.8 及 3.4.14；Spring Data Elasticsearch 5.1.2、5.0.8 及 4.4.14；Spring Data Neo4j 7.1.2、7.0.8 及 6.3.14。</p><p></p><p><a href=\"https://spring.io/projects/spring-hateoas\">Spring HATEOAS</a>\"&nbsp;的<a href=\"https://spring.io/blog/2023/07/14/spring-hateoas-1-5-5-2-0-5-2-1-1-and-2-2-m1-released\">服务版本</a>\"&nbsp;2.2.0-M1、2.1.1、2.0.5 及 1.5.5 发布，提供问题修复、依赖升级，以及针对<a href=\"https://spring.io/security/cve-2023-34036\">利用 WebFlux 上的 Spring HATEOAS 进行转发头漏洞利用</a>\"（CVE-2023-34036）的修复。该漏洞中 Spring HATEOAS 所生成的基于超媒体的响应如果没有可信的代理，可能会暴露于恶意的转发头。关于这些版本的更多信息可参见版本&nbsp;<a href=\"https://github.com/spring-projects/spring-hateoas/releases/tag/2.2.0-M1\">2.2.0-M1</a>\"、<a href=\"https://github.com/spring-projects/spring-hateoas/releases/tag/2.1.1\">版本 2.1.1</a>\"、<a href=\"https://github.com/spring-projects/spring-hateoas/releases/tag/2.0.5\">版本 2.0.5</a>\"&nbsp;及<a href=\"https://github.com/spring-projects/spring-hateoas/releases/tag/1.5.5\">版本 1.5.5</a>\"&nbsp;的发布说明。</p><p></p><p><a href=\"https://start.spring.io/\">Spring Initializr</a>\"&nbsp;版本 0.20.0&nbsp;<a href=\"https://spring.io/blog/2023/07/11/spring-initializr-0-20-0-available-now\">发布</a>\"，提供新功能及优化项，其中包括：对 Spring Boot 3.x 及 JDK 17 的支持；优化代码生成，现可使用&nbsp;<a href=\"https://docs.spring.io/initializr/docs/current/api/io/spring/initializr/generator/language/CodeBlock.html\">CodeBlock</a>\"&nbsp;定义方法体内的任意语句；嵌套注解；支持 Gradle 8.x 版本；优化构建及原始文本断言。关于该版本的更多信息可参见<a href=\"https://github.com/spring-io/initializr/wiki/Spring-Initializr-0.20-Release-Notes\">发布说明</a>\"。</p><p></p><h2>Micronaut</h2><p></p><p>在五个里程碑版本及一个候选版本发布后，Micronaut 基金会现已<a href=\"https://micronaut.io/2023/07/14/micronaut-framework-4-0-0-released/\">发布</a>\"<a href=\"https://micronaut.io/\">Micronaut 框架</a>\"&nbsp;4.0.0，提供针对 JDK 17、Groovy 4.0、Kotlin 1.8 及 Gradle 8.x 版本的基线。</p><p></p><p>此外，也有对 GraalVM 23、虚拟线程、HTTP/3 及 io_uring 的支持。新版本中还引入了：允许开发者在注解中添加表达式的<a href=\"https://docs.micronaut.io/latest/guide/#evaluatedExpressions\">表达式语言</a>\"；<a href=\"https://guides.micronaut.io/latest/micronaut-http-client.html\">Micronaut HTTP Client</a>\"&nbsp;轻量级实现的新&nbsp;<a href=\"https://openjdk.org/groups/net/httpclient/intro.html\">Java HTTP Client</a>\"，可替代目前<a href=\"https://docs.micronaut.io/latest/guide/#nettyHttpClient\">基于 Netty</a>\"&nbsp;的实现。关于该版本的更多细节可参见<a href=\"https://github.com/micronaut-projects/micronaut-platform/releases/tag/v4.0.0\">发布说明</a>\"，InfoQ 将跟进更为详细的新闻报道。</p><p></p><h2>Payara</h2><p></p><p>Payara 已<a href=\"https://blog.payara.fish/whats-new-in-the-july-2023-payara-platform-release\">发布</a>\"&nbsp;<a href=\"https://www.payara.fish/\">Payara 平台</a>\"的 2023年七月版本，其中包括社区版的 6.2023.7 版本、企业版的 6.4.0 版本及 5.53.0 版本，提供问题修复与组件升级，其中包括可为每个套接字保持连接配置添加套接字选项的 Hazelcast 版本 5.3.1。然而，Hazelcast&nbsp;<a href=\"https://docs.hazelcast.com/hazelcast/5.3/clusters/network-configuration#configuring-tcp-keep-alive\">称</a>\"这一改动暂未上线 Windows 操作系统。此外，通过移除未使用的 POM 文件、过时的Jakarta 临时暂存库以及 jdk8 配置文件，改善了 POM 和 BOM 的重复问题。关于这些版本的更多信息可参见<a href=\"https://docs.payara.fish/community/docs/Release%20Notes/Release%20Notes%206.2023.7.html\">社区版 6.2023.7</a>\"、<a href=\"https://docs.payara.fish/enterprise/docs/Release%20Notes/Release%20Notes%206.4.0.html\">企业版 6.4.0</a>\"&nbsp;和<a href=\"https://docs.payara.fish/enterprise/docs/Release%20Notes/Release%20Notes%205.53.0.html\">企业版 5.53.0</a>\"&nbsp;的发布说明。</p><p></p><h2>Open Liberty</h2><p></p><p>IBM&nbsp;<a href=\"https://openliberty.io/blog/2023/07/11/23.0.0.7-beta.html\">发布</a>\"了&nbsp;<a href=\"https://openliberty.io/\">Open Liberty</a>\"&nbsp;的 23.0.0.7-beta 版本，其中包含对&nbsp;<a href=\"https://jakarta.ee/specifications/data/\">Jakarta Data</a>\"&nbsp;规范&nbsp;<a href=\"https://github.com/jakartaee/data/releases/tag/1.0.0-b2\">1.0.0-beta2 版本</a>\"的测试实现，以便于开发者尝试这些功能并提供反馈，从而影响规范的开发。Jakarta Data 的 1.0.0 版本已通过计划审查，很可能被纳入 Jakarta EE 11 版本，并计划于2024年第一季度发布 GA 版本。</p><p></p><h2>Helidon</h2><p></p><p>Oracle 已提供&nbsp;<a href=\"https://helidon.io/\">Helidon</a>\"&nbsp;的<a href=\"https://twitter.com/helidon_project/status/1679533754220519424\">第二点发布</a>\"&nbsp;2.6.2 版本，主要提供依赖升级和关键问题修复，其中包含：<a href=\"https://github.com/helidon-io/helidon/blob/helidon-3.x/webserver/webserver/src/test/java/io/helidon/webserver/CipherSuiteTest.java\">CipherSuiteTest</a>\"&nbsp;类中的间歇性故障；避免异常信息中回显用户数据；WebServer 组件在没有实体的情况下不应被分块。关于该版本的更多信息可参见<a href=\"https://github.com/helidon-io/helidon/releases/tag/2.6.2\">发布说明</a>\"。</p><p></p><h2>Hibernate</h2><p></p><p><a href=\"https://hibernate.org/reactive/\">Hibernate Reactive</a>\"&nbsp;的 2.0.3.Final 版本<a href=\"https://in.relation.to/2023/07/13/hibernate-reactive-2_0_3_Final/\">发布</a>\"为<a href=\"https://hibernate.org/reactive/documentation/2.0/javadocs/org/hibernate/reactive/mutiny/Mutiny.Session.html\">Mutiny.Session</a>\"&nbsp;及&nbsp;<a href=\"https://hibernate.org/reactive/documentation/2.0/javadocs/org/hibernate/reactive/stage/Stage.Session.html\">Stage.Session</a>\"&nbsp;接口交付了新的&nbsp;getFactory()&nbsp;方法，可分别用于生成&nbsp;<a href=\"https://hibernate.org/reactive/documentation/2.0/javadocs/org/hibernate/reactive/mutiny/Mutiny.SessionFactory.html\">Mutiny.SessionFactory</a>\"&nbsp;和&nbsp;<a href=\"https://hibernate.org/reactive/documentation/2.0/javadocs/org/hibernate/reactive/stage/Stage.SessionFactory.html\">Stage.SessionFactory</a>\"&nbsp;类的实例。关于该版本的更多信息可参见<a href=\"https://github.com/hibernate/hibernate-reactive/releases/tag/2.0.3\">发布说明</a>\"。</p><p></p><h2>阿帕奇软件基金会</h2><p></p><p>阿帕奇软件基金会已于上周发布<a href=\"https://tomcat.apache.org/\">阿帕奇 Tomcat</a>\"&nbsp;的&nbsp;<a href=\"https://www.mail-archive.com/announce@apache.org/msg08334.html\">11.0.0-M9</a>\"、<a href=\"https://www.mail-archive.com/announce@apache.org/msg08331.html\">10.1.11</a>\"、<a href=\"https://www.mail-archive.com/announce@apache.org/msg08329.html\">9.0.78</a>\"&nbsp;及&nbsp;<a href=\"https://www.mail-archive.com/announce@apache.org/msg08332.html\">8.5.91</a>\"&nbsp;版本。四个版本中均提供问题修复并引入新的类：可用于创建上下文命名信息环境条目的监听器&nbsp;<a href=\"https://tomcat.apache.org/tomcat-11.0-doc/api/org/apache/catalina/core/ContextNamingInfoListener.html\">ContextNamingInfoListener</a>\"；可用于从属性文件中获取上下文角色映射的监听器&nbsp;<a href=\"https://tomcat.apache.org/tomcat-11.0-doc/api/org/apache/catalina/core/PropertiesRoleMappingListener.html\">PropertiesRoleMappingListener</a>\"。11.0.0-M9 版本更新了&nbsp;<a href=\"https://jakarta.ee/specifications/expression-language/\">Jakarta 表达式语言</a>\"及&nbsp;<a href=\"https://jakarta.ee/specifications/websocket/\">Jakarta WebSocket</a>\"&nbsp;规范的实现，以保持与 Jakarta EE 11 最新计划变更的一致性。关于这些版本的更多信息请参见&nbsp;<a href=\"http://tomcat.apache.org/tomcat-11.0-doc/changelog.html\">11.0.0-M9 版本</a>\"、<a href=\"http://tomcat.apache.org/tomcat-10.1-doc/changelog.html\">10.1.11版本</a>\"、<a href=\"https://tomcat.apache.org/tomcat-9.0-doc/changelog.html\">9.0.78 版本</a>\"及&nbsp;<a href=\"https://tomcat.apache.org/tomcat-8.5-doc/changelog.html\">8.5.91 版本</a>\"的发布说明。</p><p></p><h2>Micrometer</h2><p></p><p><a href=\"https://github.com/micrometer-metrics/micrometer/blob/main/README.md\">Micrometer 指标</a>\"&nbsp;的 1.12.0-M1、1.11.2、1.10.9 及 1.9.13 版本现已发布，主要提供依赖升级及关键问题修复，其中包括：Micrometer&nbsp;<a href=\"https://docs.wavefront.com/micrometer.html\">Wavefront</a>\"&nbsp;在默认&nbsp;uri&nbsp;实现下的集成代理错误；移除了&nbsp;<a href=\"https://github.com/micrometer-metrics/micrometer/blob/main/micrometer-core/src/main/java/io/micrometer/core/instrument/binder/logging/LogbackMetrics.java\">LogbackMetrics</a>\"&nbsp;类中禁用日志级别的非必要&nbsp;<a href=\"https://download.java.net/java/early_access/jdk21/docs/api/java.base/java/lang/ThreadLocal.html\">ThreadLocal</a>\"&nbsp;开销；<a href=\"https://javadoc.io/doc/io.micrometer/micrometer-observation/latest/io/micrometer/observation/contextpropagation/ObservationThreadLocalAccessor.html\">ObservationThreadLocalAccessor</a>\"&nbsp;类中定义的&nbsp;setValue()&nbsp;方法在无当前作用域时生成的&nbsp;NullPointerException。1.12.0-M1 版本中的新功能有：通过&nbsp;ObservationThreadLocalAccessor&nbsp;类注册 Micrometer 观测结果时可配置基本时间单位；优化阿帕奇&nbsp;<a href=\"https://hc.apache.org/httpcomponents-asyncclient-4.1.x/current/httpasyncclient/apidocs/org/apache/http/nio/client/HttpAsyncClient.html\">HttpAsyncClient</a>\"&nbsp;接口实例，使用&nbsp;<a href=\"https://javadoc.io/doc/io.micrometer/micrometer-core/latest/io/micrometer/core/instrument/binder/httpcomponents/hc5/MicrometerHttpClientInterceptor.html\">MicrometerHttpClientInterceptor</a>\"&nbsp;以避免计量表的读写错误。关于这些发布的更多信息可参见&nbsp;<a href=\"https://github.com/micrometer-metrics/micrometer/releases/tag/v1.12.0-M1\">1.12.0-M1 版本</a>\"、<a href=\"https://github.com/micrometer-metrics/micrometer/releases/tag/v1.11.2\">1.11.2 版本</a>\"、<a href=\"https://github.com/micrometer-metrics/micrometer/releases/tag/v1.10.9\">1.10.9 版本</a>\"和&nbsp;<a href=\"https://github.com/micrometer-metrics/micrometer/releases/tag/v1.9.13\">1.9.13 版本</a>\"的发布说明。</p><p></p><p>同样，<a href=\"https://github.com/micrometer-metrics/tracing/blob/main/README.md\">Micrometer 追踪</a>\"&nbsp;的 1.2.0-M1 版本、1.1.3 版本及 1.0.8 版本也已发布，主要提供问题修复、依赖升级以及如下新功能：为基础跟踪操作额外提供&nbsp;<a href=\"https://github.com/openjdk/jmh/blob/master/README.md\">Java 微基准测试框架</a>\"（JMH）基准；为&nbsp;<a href=\"https://javadoc.io/doc/io.micrometer/micrometer-tracing/latest/io/micrometer/tracing/exporter/FinishedSpan.html\">FinishedSpan</a>\"&nbsp;接口新增&nbsp;getDuration()&nbsp;方法。关于这些版本的更多信息可参见&nbsp;<a href=\"https://github.com/micrometer-metrics/tracing/releases/tag/v1.2.0-M1\">1.2.0-M1 版本</a>\"、<a href=\"https://github.com/micrometer-metrics/tracing/releases/tag/v1.1.3\">1.1.3 版本</a>\"及&nbsp;<a href=\"https://github.com/micrometer-metrics/tracing/releases/tag/v1.0.8\">1.0.8 版本</a>\"的发布说明。</p><p></p><h2>Piranha</h2><p></p><p><a href=\"https://piranha.cloud/\">Piranha</a>\"&nbsp;的 23.7.0 版本<a href=\"https://github.com/piranhacloud/piranha/releases/tag/v23.7.0\">发布</a>\"，提供关键变更如：从JBoss Jandex 到&nbsp;<a href=\"https://smallrye.io/blog/jandex-3-0-0/\">SmallRye Jandex</a>\"&nbsp;的迁移；在已有&nbsp;<a href=\"https://javadoc.io/doc/cloud.piranha/project/23.2.0/cloud.piranha.feature.api/cloud/piranha/feature/api/Feature.html\">Feature</a>\"&nbsp;接口基础上新增&nbsp;<a href=\"https://github.com/piranhacloud/piranha/blob/current/feature/api/src/main/java/cloud/piranha/feature/api/FeatureManager.java\">FeatureManager</a>\"&nbsp;接口；新增&nbsp;<a href=\"https://github.com/piranhacloud/piranha/blob/current/feature/crac/src/main/java/cloud/piranha/feature/crac/CracFeature.java\">CracFeature</a>\"&nbsp;类，支持<a href=\"https://wiki.openjdk.org/display/crac\">项目 CRaC</a>\"。关于该版本的更多信息可参见该项目的<a href=\"https://javadoc.io/doc/cloud.piranha/project/latest/index.html\">文档</a>\"和<a href=\"https://github.com/piranhacloud/piranha/issues?q=is%3Aissue+-label%3Awontfix+milestone%3A23.7.0+is%3Aclosed\">问题追踪</a>\"。</p><p></p><h2>Reactor 项目</h2><p></p><p><a href=\"https://github.com/reactor/reactor/blob/main/README.md\">Reactor 项目</a>\"的<a href=\"https://github.com/reactor/reactor/releases/tag/2023.0.0-M1\">首个里程碑版本</a>\"&nbsp;2023.0.0 发布，提供对&nbsp;reactor-core&nbsp;3.6.0-M1 版本的依赖升级。此外，在针对 2023.0.0-M1 版本的调整中，reactor-netty&nbsp;1.1.9、reactor-kafka&nbsp;1.3.19、reactor-pool&nbsp;1.0.1、reactor-addons&nbsp;3.5.1 及&nbsp;reactor-kotlin-extensions&nbsp;1.2.2 则保持不变。有关该版本的更多信息可参见<a href=\"https://github.com/reactor/reactor/compare/2022.0.9...2023.0.0-M1\">更新日志</a>\"。</p><p></p><p>与之类似，Project Reactor 的<a href=\"https://github.com/reactor/reactor/releases/tag/2022.0.9\">第九维护版本</a>\"&nbsp;2022.0.9 也对&nbsp;reactor-core&nbsp;3.5.8、reactor-netty&nbsp;1.1.9、reactor-kafka&nbsp;1.3.19 及&nbsp;reactor-pool&nbsp;1.0.1 进行了依赖升级。在对 2022.0.9 版本的调整中，reactor-addons&nbsp;3.5.1 及&nbsp;reactor-kotlin-extensions&nbsp;1.2.2 保持不变。关于该版本的更多信息可查看<a href=\"https://github.com/reactor/reactor/compare/2022.0.8...2022.0.9\">更新日志</a>\"。</p><p></p><h2>JHipster</h2><p></p><p><a href=\"https://www.jhipster.tech/\">JHipster</a>\"&nbsp;的<a href=\"https://twitter.com/mraible/status/1679249296032665601\">第二 beta 版本</a>\"&nbsp;8.0.0 交付了问题修复及关键变更，其中包括：删除未使用的&nbsp;HttpServletRequest&nbsp;接口导入；移除&nbsp;spring-boot-maven-plugin&nbsp;中的&nbsp;&nbsp;参数，该参数对插件而言处于未知且会导致告警；优化 Heroku sub-generator。关于该版本的更多信息可参见<a href=\"https://github.com/jhipster/generator-jhipster/releases/tag/v8.0.0-beta.2\">发布说明</a>\"。</p><p></p><p><a href=\"https://www.jhipster.tech/jhipster-lite/\">JHipster Lite</a>\"&nbsp;的&nbsp;<a href=\"https://twitter.com/pascalgrimaud/status/1680275261114183683\">0.38.0</a>\"&nbsp;及&nbsp;<a href=\"https://twitter.com/pascalgrimaud/status/1678535579246403584\">0.37.0</a>\"&nbsp;版本现已发布，提供众多依赖升级和如下新功能：<a href=\"https://www.npmjs.com/package/prettier-plugin-svelte\">Prettier for Svelte 3</a>\"&nbsp;的组件升级；支持深色模式。关于这些版本的更多信息可参见&nbsp;<a href=\"https://github.com/jhipster/jhipster-lite/releases/tag/v0.37.0\">0.37.0 版本</a>\"及&nbsp;<a href=\"https://github.com/jhipster/jhipster-lite/releases/tag/v0.38.0\">0.37.0 版本</a>\"的发布说明。</p><p></p><h2>Yupiik</h2><p></p><p><a href=\"https://www.yupiik.io/fusion/\">Yupiik Fusion</a>\"&nbsp;的版本 1.0.5 提供：对无上下文数据库的支持；未找到或忽略 JSON 模块时提供了更精确的错误信息；优化&nbsp;resources.json&nbsp;及&nbsp;native-image.properties&nbsp;文件生成，以包含 Fusion JSON 元数据。关于该版本的更多信息可参见<a href=\"https://github.com/yupiik/fusion/releases/tag/fusion-1.0.5\">发布说明</a>\"。</p><p></p><h2>Maven</h2><p></p><p><a href=\"https://maven.apache.org/\">Maven</a>\"&nbsp;的<a href=\"https://github.com/apache/maven/releases/tag/maven-4.0.0-alpha-7\">第七 alpha 版本</a>\"&nbsp;4.0.0 主要提供以下变动：支持 JDK 20；将内部&nbsp;<a href=\"https://github.com/apache/maven-shared-utils/blob/master/src/main/java/org/apache/maven/shared/utils/StringUtils.java\">StringUtils</a>\"&nbsp;类迁移至<a href=\"https://commons.apache.org/proper/commons-lang/\">阿帕奇 Commons Lang</a>\"&nbsp;所提供的&nbsp;<a href=\"https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html\">StringUtils</a>\"&nbsp;类。将&nbsp;<a href=\"https://github.com/codehaus-plexus/plexus-utils/blob/master/README.md\">Plexus-Utils</a>\"&nbsp;提供的&nbsp;<a href=\"https://github.com/sonatype/plexus-utils/blob/master/src/main/java/org/codehaus/plexus/util/FileUtils.java\">FileUtils</a>\"&nbsp;类迁移至<a href=\"https://commons.apache.org/proper/commons-io/\">阿帕奇 Commons IO</a>\"&nbsp;所提供的&nbsp;<a href=\"https://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/FileUtils.html\">FileUtils</a>\"&nbsp;类。</p><p></p><h2>Gradle</h2><p></p><p><a href=\"https://gradle.org/\">Gradle</a>\"&nbsp;<a href=\"https://github.com/gradle/gradle/releases/tag/v8.2.1\">补丁版本</a>\"&nbsp;8.2.1 发布，提供 Gradle 8.2 版本中的关键问题，如：使用 Gradle 8.2 和 Quarkus 2.16.7 构建应用程序时的&nbsp;StackOverflowError&nbsp;异常；Micronaut&nbsp;JacocoReportAggregationPlugin&nbsp;崩溃；--no-feature&nbsp;标志中&nbsp;false&nbsp;值错误，应被设置为&nbsp;true。</p><p></p><h2>JetBrains</h2><p></p><p>JetBrains 在其所有基于 IntelliJ 的集成开发环境中都<a href=\"https://blog.jetbrains.com/idea/2023/06/ai-assistant-in-jetbrains-ides/\">引入</a>\"了新的人工智能助手。该服务由 IntelliJ 的<a href=\"https://www.jetbrains.com/legal/docs/terms/jetbrains-ai/service-providers/\">人工智能供应商</a>\"（目前仅有 OpenAI）赋能，将开发者与“不同大语言模型（LLM）”透明相连，“在 JetBrains 的多项产品中启用特定的人工智能化功能”。需注意，.NET 版本的工具仍处于开发阶段；在 EAP 阶段可免费使用；许可和定价模型将于后期推出；目前可能会受等候名单限制。有关 .NET 环境中的人工智能助手信息可参见 InfoQ 的<a href=\"https://www.infoq.com/news/2023/07/ai-assistant-resharper/\">详细报道</a>\"。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/07/java-news-roundup-jul10-2023/\">Java News Roundup: Micronaut 4.0, Payara Platform, Spring Web Flow 3.0, JetBrains AI Assistant</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/yO6pjms5izsxK5YrZ036\">开源 Java 性能分析器比较：VisualVM、JMC 和 async-profiler</a>\"</p><p><a href=\"https://www.infoq.cn/article/1NdPKQpZJGmKxm2v6SP2\">JDK 21 中的结构化并发：并发编程的一次飞跃</a>\"</p>",
    "publish_time": "2023-07-31 09:31:43",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "DevOps是否已死？AI和大语言模型给云计算和DevOps带来了哪些影响？｜InfoQ趋势报告",
    "url": "https://www.infoq.cn/article/22iU97szqsrquqVhrCvJ",
    "summary": "<p></p><h1>关键要点</h1><p></p><p></p><p>云计算创新已经从革命性阶段过渡到了进化性阶段，重点在于迁移和重构工作负载。云计算已经发展到可以提供对可伸缩资源和托管服务的按需访问，并重视简化交互和减轻团队的认知负担。通过降低认知负载和为即时管理、工单系统和代码生成等任务提供支持，人工智能（AI）和大型语言模型（LLMs）可能在云计算和DevOps领域发挥重要作用。主要的云计算供应商，如微软、谷歌和亚马逊云科技等，已经将AI集成到他们的产品和服务中，充分展示了行业在AI技术上的投入。受基于AI和类似ChatGPT的产品的影响，低代码和无代码领域开始为业务用户和软件工程团队提供协作机会。平台工程采用了平台即服务的思维方式，正朝着简化和价值交付的方向发展。平台工程团队的角色正在从复杂基础设施的管理者转变为专注于用户满意度和价值创造的服务提供者。对可观察性、财务相关性和可持续性的考量正在成为平台工程不可或缺的部分。OpenTelemetry被广泛用于收集指标和基于事件的可观察性数据，成为行业事实上的标准。它的标准化特性促进了供应商之间的优化和创新。对可持续性和绿色计算的关注推动了架构选择朝着效率和最小化碳足迹的方向发展。站点可靠性工程（SRE）团队在分析环境影响和推动可持续性倡议方面起到至关重要的作用。</p><p>&nbsp;</p><p>InfoQ趋势报告为架构师和技术领导者们关注的主题提供了有见解的概述。此外，它们还有助于InfoQ编辑团队撰写新闻和<a href=\"https://www.infoq.com/write-for-infoq/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">招募文章作者</a>\"来报道创新技术。</p><p>&nbsp;</p><p>除了报告内容和新的DevOps与云计算发展趋势图之外，还有一个配套的<a href=\"https://www.infoq.com/podcasts/cloud-devops-trends-2023/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">播客</a>\"，InfoQ编辑和一些朋友在博客中讨论了这些发展趋势。</p><p>&nbsp;</p><p></p><h1>趋势图更新</h1><p></p><p>&nbsp;</p><p>本报告的后面部分会有更多细节，但我们先来总结一下与去年的趋势图相比有哪些变化。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/52/5205e565e25a8c5ea0f0edba519da720.png\" /></p><p></p><p>&nbsp;FinOps，即高效管理云成本的实践，正向着早期大众的方向发展。FinOps基金会和一些云供应商，如微软、AWS和谷歌，在推动FinOps实践的采用，这些实践符合可持续性和优化资源使用的目标。最近，谷歌<a href=\"https://cloud.google.com/blog/topics/cost-management/google-cloud-is-officially-a-finops-certified-service-provider?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">成为</a>\"了FinOps认证服务提供商，微软也作为首席成员<a href=\"https://www.infoq.com/news/2023/02/microsoft-joins-finops-org/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">加入</a>\"了FinOps组织。</p><p>&nbsp;</p><p><a href=\"https://webassembly.org/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">WebAssembly</a>\"（Wasm）的持续演进正兑现着在云中实现“一次编写，到处运行”的承诺，提供了不同语言和平台之间的可重用性和互操作性。<a href=\"https://ebpf.io/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">eBPF</a>\"（Extended Berkeley Packet Filter）在可观察性和内核级别的安全性等领域受到关注。</p><p>&nbsp;</p><p>我们发现，通用<a href=\"https://en.wikipedia.org/wiki/Function_as_a_service?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">函数即服务</a>\"（FaaS）和<a href=\"https://en.wikipedia.org/wiki/Backend_as_a_service?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">后端即服务</a>\"（BaaS）的概念在“晚期大众”用户中受到了关注。无服务器技术的采用已经变得普遍。 “我们是100%无服务器”的说法不再像以前那样令人感到惊讶，因为无服务器已经成为行业采用的主流方法。</p><p>&nbsp;</p><p></p><h1>云计算是否从革命转向了进化阶段？DevOps是否已死？</h1><p></p><p>&nbsp;</p><p>在配套的云计算和DevOps趋势播客讨论中，与会者讨论了云创新和DevOps的现状。他们一致认为，云创新已经放缓，从“革命”转向了“进化”。虽然大量的组织已经采用了云技术，但还有许多企业想要迁移和重新架构工作负载。</p><p>&nbsp;</p><p>至于DevOps，它仍然还活着，但在一些组织中已经进入了停滞阶段。DevOps旨在通过提供自主权来创造业务价值的概念仍然存在，但在实现方面面临着挑战。与会者表达了他们对通过<a href=\"https://www.infoq.com/articles/value-stream-management/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">价值流管理</a>\"来解锁DevOps流程和价值实现的兴趣。</p><p>&nbsp;</p><p>公有云供应商已经从他们最初的目标——提供对可伸缩资源的按需访问——转变为更加关注提供托管服务。这种转变使得云计算变得更加普遍。然而，技术围绕着已有的服务在迅速发生变化，新的业务需求和挑战随之涌现。团队必须在不断交付业务价值和采用、更新技术栈之间做出平衡。InfoQ首席DevOps编辑<a href=\"https://twitter.com/BeardedCoder?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">Matthew Campbell</a>\"说：</p><p>&nbsp;</p><p></p><blockquote>企业也想快速演进和适应变化……我们现在处于这样的一个阶段，我们正在试图弄清楚我们如何能够可持续地利用我们发明和创造的所有东西和交互方式，并达到一种我们可以舒适地进行创新的阶段。</blockquote><p></p><p>&nbsp;</p><p>此外，云服务现在已经在小型和大型组织中得到了广泛的采用，甚至进入了晚期采用者阶段，而新冠疫情通常是其中的一个驱动因素。例如，自动化配置环境的演进——快速配置完整的开发和测试环境的能力现在已经变得很普遍。然而，弥合开发和运维之间的差距仍然存在挑战。身份和访问管理问题在开发和运维团队之间造成了一个感知上的边界。</p><p>&nbsp;</p><p></p><h1>AI和大语言模型给云计算和DevOps带来了哪些影响？</h1><p></p><p>&nbsp;</p><p>与会者讨论了<a href=\"https://www.infoq.com/articles/reduce-cognitive-load-devops-teams/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">认知过载</a>\"以及AI如何帮助降低认知负载。他们提到了一种特定的AI应用，叫作<a href=\"https://en.wikipedia.org/wiki/Artificial_Intelligence_for_IT_Operations?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">AIOps</a>\"，一种专注于IT运维的AI，在即时管理和工单系统方面表现出了有效性。大语言模型提供了实实在在的好处，例如使用ChatGPT来验证信息、生成教学笔记、辅助写作和创作。微软已经将AI集成到其产品和服务中，展示了其在AI技术方面的重大投入。InfoQ首席云编辑<a href=\"https://twitter.com/SteefJan?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">Steef-Jan Wiggers</a>\"说：</p><p>&nbsp;</p><p></p><blockquote>微软提供的很多服务，甚至最近的一些服务，如<a href=\"https://www.infoq.com/news/2018/07/azure-service-fabric-mesh/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">Fabric</a>\"，一个完整的SaaS数据湖解决方案，都充分融合了AI。</blockquote><p></p><p>&nbsp;</p><p>Fabric只是其中的一个例子，其他公有云供应商也推出了AI融合服务，如亚马逊的<a href=\"https://aws.amazon.com/pm/sagemaker/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">Sagemaker</a>\"和<a href=\"https://cloud.google.com/products/ai?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">谷歌的Vertex AI和AutoML</a>\"。想了解有关OpenAI的信息，可以关注InfoQ的<a href=\"https://www.infoq.com/openai/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">这个主题</a>\"。</p><p>&nbsp;</p><p></p><h1>基于AI和类似ChatGPT的产品给低代码和无代码带来了哪些影响？</h1><p></p><p>&nbsp;</p><p>将AI集成到低代码工具中是一个商业机会，AI将为业务用户提供安全和有价值的知识。这缓解了人们之前对影子IT的担忧，并促进了产品管理和软件工程团队之间的协作。</p><p>&nbsp;</p><p>此外，还有一个叫作“ClickOps”的概念，即用户在<a href=\"https://www.infoq.com/low-code/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">低代码平台</a>\"上能够通过点击实现交互，同时生成可控制版本、声明式和可适应的代码。例如，一些改进了AI代码生成能力的工具，如<a href=\"https://github.com/features/copilot?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">GitHub Copilot</a>\"和<a href=\"https://codeium.com/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">Codeium</a>\"，可以生成符合组织标准、具有可读性且可以不断演进的代码。大语言模型和AI驱动的代码生成能力的演进将为低代码领域带来令人兴奋的改变。</p><p>&nbsp;</p><p>最后，低代码环境中的数据治理和访问管理是必不可少的。它带来了一些挑战，比如在确保适当的治理和合规性的同时，为业务用户提供数据访问能力。Campbell指出，我们有必要在低代码增强平台工程中建立一个“DevOpsy”治理层，提供安全防护，防止超出某些配置边界。</p><p>&nbsp;</p><p>此外，DevOps Institute的DevOps战略顾问<a href=\"https://twitter.com/HelenHappyBee?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">Helen Beal</a>\"补充说：</p><p>&nbsp;</p><p></p><blockquote>我觉得很有趣的是，我们正处在一个转弯处，因为AI实际上是在支持商业人士，为他们提供可能是安全的知识。</blockquote><p></p><p>&nbsp;</p><p></p><h1>平台工程将如何演进？</h1><p></p><p>&nbsp;</p><p>平台工程的演进涉及向简化、关注价值交付和采用平台即服务思维方式的转变。这种变化涉及提供自助式平台、隐藏复杂性并减少应用程序开发者的认知负担。平台工程团队的角色正在从复杂基础设施的维护者转变为对组织其他部分提供服务的服务提供者。他们现在专注于处理与开发者关系、营销和客户参与度相关的问题，提升用户体验和驱动价值创造。</p><p>&nbsp;</p><p>Syntasso首席工程师<a href=\"https://twitter.com/a_bangser?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">Abby Bangser</a>\"解释说：</p><p>&nbsp;</p><p></p><blockquote>平台工程团队正在研究开发者关系和营销应该是什么样子的，研究如何与客户互动、获取反馈并制定能够满足他们需求的路线图。</blockquote><p></p><p>&nbsp;</p><p>一些技术，如Kubernetes，正在被推到更底层的技术栈，开始越来越注重 API 接口和简化交互。此外，对可观察性的关注度也在提升，包括服务水平和关键性能指标，以及与平台使用和成本合理性相关的财务指标。总体而言，平台工程的未来在于构建能够增加价值和为用户创造愉悦体验的平台，同时满足不断变化的业务需求和约束。</p><p>&nbsp;</p><p>想要了解更多关于平台工程的信息，可以关注InfoQ的<a href=\"https://www.infoq.com/platformengineering/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">这个话题</a>\"。</p><p>&nbsp;</p><p></p><h1>FinOps是否正在转向早期大众阶段？</h1><p></p><p>&nbsp;</p><p><a href=\"https://www.finops.org/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">FinOps</a>\"，即有效管理云成本，正在转向早期大众阶段。越来越多的公司加入了FinOps基金会，也有许多工具可以支持FinOps流程。但需要注意的是，FinOps不仅仅是工具，它还涉及流程，以及对成本价值的理解。FinOps基金会和云供应商（如<a href=\"https://cloud.google.com/blog/topics/cost-management/google-cloud-is-officially-a-finops-certified-service-provider?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">谷歌</a>\"和<a href=\"https://www.infoq.com/news/2023/02/microsoft-joins-finops-org/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">微软</a>\"）积极参与这个过程，并推动FinOps实践的采用。</p><p>&nbsp;</p><p>人们对FinOps的认知也在发生改变，并引发了关于为什么要配置和运行某些云资源以及它们是否被有效利用的讨论。可持续性和GreenOps也与FinOps相关，因为成本优化的关注点与资源利用效率的目标是对齐的。AI 在FinOps方面发挥了重要作用，它可以识别未使用的数据、帮助优化存储，节省财务成本，提升环保效益。</p><p>&nbsp;</p><p></p><h1>在构建基于云的应用程序或采用DevOps实践时，架构师和开发人员是否面临着过多的安全问题？</h1><p></p><p>&nbsp;</p><p>架构师和开发人员在构建基于云的应用程序或采用DevOps实践时，面临着越来越多的安全问题。特别是开发人员，他们可能会感到左移策略让他们不堪重负，因为他们需要在整个开发过程中识别和优先考虑安全问题。</p><p>&nbsp;</p><p>虽然组织对安全的重要性有了越来越多的认识，也有来自高层的推动力来解决这些问题，但开发人员往往需要在安全需求和交付新功能的压力之间做出平衡。</p><p>&nbsp;</p><p>安全工具的不断演变也是这个领域的一个考量因素。早期的解决方案是由专家为专家而设计的，对开发人员来说不够友好。然而，越来越多的人认识到需要使用更易于访问和使用的安全工具。我们的目标是使安全成为一种赋能功能，构建出能够简化安全实现并为开发团队提供教育和支持的平台。这种方法旨在弥合专家驱动的安全实现和开发人员实际需求之间的差距。</p><p>&nbsp;</p><p></p><h1>WebAssembly（Wasm）是不是云端“一次编写，到处运行”的最终实现？</h1><p></p><p>&nbsp;</p><p>Wasm 是实现云端“一次编写，到处运行”愿景的重要一步。它承诺了可重用性和互操作性，允许开发人员用一种语言（如Go）构建库，并在用其他可以编译为 Wasm 的语言（如Rust）编写的应用程序中调用它们。</p><p>&nbsp;</p><p>有了这种云端内部的组件模型，我们可以为多个目标平台创建应用程序，包括基于ARM架构的CPU（因其性能和成本优势在云基础设施中颇受欢迎）。Wasm的采用不仅限于应用程序开发，还涉及了云平台扩展格式。它被用来扩展云原生代理、API网关和服务网格。</p><p>&nbsp;</p><p>除了 WebAssembly，作为平台组件开发者工具的eBPF也<a href=\"https://www.infoq.com/articles/ebpf-cloud-native-platforms/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">受到了关注</a>\"。虽然应用程序工程师可能不会广泛使用eBPF，但我们确实可以在包含网络和安全用例的项目中找到它的身影。它允许开发人员访问内核级别的信息，并获得对容器系统操作的见解，提高可观察性和安全能力。</p><p>&nbsp;</p><p>总而言之，WebAssembly和eBPF为提升云应用程序的可移植性、可重用性和性能带来了有趣的可能性。</p><p>&nbsp;</p><p>想要了解更多关于<a href=\"https://www.infoq.com/webassembly/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">Wasm</a>\"和<a href=\"https://www.infoq.com/ebpf/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">eBPF</a>\"的信息，可以关注InfoQ的相关话题。</p><p>&nbsp;</p><p></p><h1>OpenTelemetry在收集指标和基于事件的可观察性数据方面的应用有多广泛？</h1><p></p><p>&nbsp;</p><p>作为一个收集指标和基于事件的可观察性数据的框架，<a href=\"https://opentelemetry.io/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">OpenTelemetry</a>\"已经得到了快速的采用，并且正在成为行业事实上的标准。许多有才华的个人和供应商的协作促成了它的跨供应商支持和跨语言兼容性，让它成为应用程序的必要组成部分。OpenTelemetry的广泛采用主要得益于它被纳入到主要云供应商的产品中，例如亚马逊云科技的<a href=\"https://aws.amazon.com/otel/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">AWS Distro for OpenTelemetry</a>\"、微软Azure的<a href=\"https://www.infoq.com/news/2023/06/azure-opentelemtry-distro/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">监控服务</a>\"和谷歌云平台的<a href=\"https://google-cloud-opentelemetry.readthedocs.io/en/latest/index.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">Google Cloud OpenTelemetry</a>\"。</p><p>&nbsp;</p><p>OpenTelemetry的标准化特性带来了众多好处。它与供应商无关，支持导出遥测数据并利用各种工具对数据进行分析。这种标准化促进了供应商之间的优化和创新，因为他们在努力提供超出数据收集和可视化这些基本功能的高级特性。作为一个开放标准，OpenTelemetry的出现标志着行业走向成熟，并促进了供应商之间的良性竞争，为行业提供有吸引力的解决方案，并获得市场份额。</p><p>&nbsp;</p><p>想了解更多关于OpenTelemetry的信息，可以关注InfoQ的<a href=\"https://www.infoq.com/opentelemetry/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">这个话题</a>\"。</p><p>&nbsp;</p><p></p><h1>当前无服务器技术的采用状况是怎样的？</h1><p></p><p>&nbsp;</p><p><a href=\"https://en.wikipedia.org/wiki/Serverless_computing?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">无服务器技术</a>\"在采用方面发生了转变，它正在成为一种常见的选择，而不是一种独特的架构概念。“无服务器”这个词不太经常被用来讨论一个独立的概念，因为它几乎变成了一种与托管服务（提供可伸缩性、微计费和抽象化的基础设施）具有相同含义的词。一些主要的云供应商，如亚马逊、谷歌和微软，已经将无服务器组件集成到他们的服务中，例如数据库（DBaaS）和容器运行时（CaaS），带来了自动缩放和简化计费结构方面的好处。人们的关注点已经从基于无服务器函数构建架构转移到利用托管服务，与平台工程方法保持一致，减少开发人员的认知负担。</p><p>&nbsp;</p><p>无服务器的价值，如伸缩至零费用和按请求计费，已经在传统的无服务器架构之外找到了新的表达。组织现在认识到了这些好处，并在各种架构决策中要求使用无服务器。虽然无服务器是获得这些优势的众多方法之一，但组织越来越多地要求他们的工程团队提供成本效益高的解决方案，并优化客户获取和支持成本。这种演变凸显了无服务器对更广泛的架构格局的影响。</p><p>&nbsp;</p><p>想要了解更多关于无服务器的信息，可以关注InfoQ的<a href=\"https://www.infoq.com/serverless/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">这个话题</a>\"。</p><p>&nbsp;</p><p></p><h1>对可持续性和绿色计算的关注对云计算和DevOps有怎样的影响？</h1><p></p><p>&nbsp;</p><p>对可持续性和绿色计算的关注对云计算和DevOps的实践产生了重大影响。越来越多的组织采用了关切应用程序和服务对环境和资源消耗的影响的定价模式。这种趋势鼓励组织做出优先考虑效率和可持续性的架构选择。托管服务受到组织的青睐，因为它们提供了优化的资源利用率和可伸缩性，使企业能够降低能耗，减少碳足迹。对架构定价的考量和对托管服务的采用与可持续性和绿色计算目标是对齐的。</p><p>&nbsp;</p><p>关于责任，人们存在一种认识，即解决可持续性问题属于<a href=\"https://www.infoq.com/sre/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">站点可靠性工程</a>\"（SRE）及相关角色的范畴。这些团队善于分析技术决策对环境的影响，并推动可以促进效率和可持续性提升的举措。现在，架构讨论包含了组件化、隔离、安全和成本效益等方面的考虑。组织正在评估他们的需求，并寻求能够满足安全需求但又不涉及非必要高昂成本的折中解决方案。这反映了组织正在向更加务实的安全性发生转变，试图找到企业级特性和成本效益之间的平衡。</p><p>&nbsp;</p><p></p><h1>我们对云计算和DevOps领域的未来有怎样的预测？</h1><p></p><p>&nbsp;</p><p>专家们对云计算和DevOps领域未来的预测主要与简化、降低认知负担和专注创新有关。我们热切希望能够简化流程和工具，让团队能够专注于他们特定的专业领域并最大化他们的影响力。</p><p>&nbsp;</p><p>AIOps、平台工程、可持续性和FinOps的融合是一种积极的转变，可能会让团队更专注、更有效和更愉快。这里的挑战在于要区分炒作和真正的机会，承认新兴趋势中的“价值点”，同时对“过度夸大”和广泛适用性的说法保持批判的态度。</p><p>&nbsp;</p><p>开源技术的采用、由OpenTelemetry和CloudEvents等促进的标准化，以及Copilot和ChatGPT等AI融合服务的潜力，都是令人感兴趣的点。总而言之，人们对正在发生的演进和它们带来的机会充满了热情。</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/cloud-devops-trends-2023/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTA0MzYwMzMsImZpbGVHVUlEIjoiQkp4MTBxSWw4RnNvSU8xRSIsImlhdCI6MTY5MDQzNTczMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.IWLGnbuTAwrMoXcsKVorz0fBoyHPs_uDlNhDtpEs-o0\">https://www.infoq.com/articles/cloud-devops-trends-2023/</a>\"</p><p></p><h5>相关阅读：</h5><p></p><p><a href=\"https://www.infoq.cn/article/Uhtx5rt3UR1flUoGtYvF\">“DevOps 的阴暗面”：左移的代价和降低成本的方式</a>\"</p><p><a href=\"https://www.infoq.cn/article/3jDMGKAMYx2eAcJUzOMJ\">DevOps&nbsp;的分与合</a>\"</p><p><a href=\"https://xie.infoq.cn/article/70bdfa7bae93467293c0fa7d0\">DevOps&nbsp;与平台工程：企业该如何选择？</a>\"</p><p><a href=\"https://xie.infoq.cn/article/33eca9c7752f397ba457af953\">DevOps&nbsp;与 FinOps：二者可以协同吗？</a>\"</p>",
    "publish_time": "2023-07-31 09:34:07",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Bun原生JavaScript打包器登场，引入宏",
    "url": "https://www.infoq.cn/article/96HJmatvOZ6yQ9tyiWJr",
    "summary": "<p>最近，Bun推出了它的快速<a href=\"https://bun.sh/blog/bun-bundler?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTAxNjczNTUsImZpbGVHVUlEIjoiZzVIekZmZ0lxcm92Z3dMYyIsImlhdCI6MTY5MDE2NzA1NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.khWiRCu6qIPwPzZhpdJBqsqrF7yG7xwMv0xZKIxFUzw\">原生JavaScript打包器</a>\"，为Bun生态系统带来了增强的打包能力。这个新的打包器现在处于测试阶段，提供了一整套功能和工具，简化并加速了构建前端应用程序的过程。此外，Bun还引入了<a href=\"https://bun.sh/blog/bun-macros?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTAxNjczNTUsImZpbGVHVUlEIjoiZzVIekZmZ0lxcm92Z3dMYyIsImlhdCI6MTY5MDE2NzA1NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.khWiRCu6qIPwPzZhpdJBqsqrF7yG7xwMv0xZKIxFUzw\">JavaScript宏</a>\"，可以在打包时执行JavaScript函数，并将其结果直接内联到打包文件中。</p><p>&nbsp;</p><p>Bun是一个用于JavaScript和TypeScript应用程序的一体化工具包，旨在取代Node.js。它包含了一个运行快速的JavaScript运行时——Bun运行时，提供了优秀的启动速度和内存使用效率。该工具包作为“bun”可执行文件发布，提供了各种功能，如测试运行器、脚本运行器和包管理器。</p><p>&nbsp;</p><p>原生的Bun打包器试图简化复杂的JavaScript和TypeScript打包所面临的挑战，如运行TypeScript文件、为生产环境构建和打包代码、处理依赖关系以及启用类似于源映射这样的功能，这些任务通常比较耗时，阻碍了开发速度和效率的提升。</p><p>&nbsp;</p><p>打包器提供了几个关键特性。首先，它通过轻量级Bun进程快速执行插件，从而缩短打包时间。此外，打包器生成针对Bun运行时优化的预编译文件，消除冗余的转换步骤并提高整体执行性能。统一插件API允许插件扩展打包器和Bun的运行时能力，并提升灵活性和代码重用性。此外，集成打包器和运行时可以无缝传递<a href=\"https://bun.sh/docs/bundler#outputs?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTAxNjczNTUsImZpbGVHVUlEIjoiZzVIekZmZ0lxcm92Z3dMYyIsImlhdCI6MTY5MDE2NzA1NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.khWiRCu6qIPwPzZhpdJBqsqrF7yG7xwMv0xZKIxFUzw\">BuildArtifact对象</a>\"，可以直接在HTTP API（如new Response()）中使用。打包器还引入了独立可执行文件生成，允许创建包含Bun运行时副本的自包含可执行文件。</p><p>&nbsp;</p><p>性能是Bun打包器的一个主要关注点。Bun与esbuild、Parcel 2、Rollup + Terser和Webpack等流行的打包器的基准比较测试表明，Bun在速度方面表现出色。Bun优于这些打包器，其速度提升令人印象深刻，从1.75倍到220倍不等（根据具体的基准测试而言）。</p><p>&nbsp;</p><p>开发人员可以使用Bun.build()函数或Bun的build CLI命令轻松构建前端应用程序。API支持入口点、输出目录、目标（浏览器、Bun或node）、格式（esm）、缩小、源映射配置等基本选项。此外，打包器支持摇树优化，以移除无用的代码。开发人员可以借助稳定的插件系统和加载器配置根据自己的具体需求定制打包过程。</p><p>&nbsp;</p><p>除了打包器之外，Bun还引入了Bun宏，可以在打包时执行JavaScript函数。开发人员可以使用特殊的导入属性语法将函数作为宏导入，将其结果直接内联到打包文件中。宏在打包过程的转换器阶段同步执行，并在多个JavaScript Worker之间并行化，确保高效执行。宏有助于在打包时执行获取请求等操作或提升开发者灵活性。</p><p>&nbsp;</p><p>出于安全考虑，必须使用{ type: 'macro' }属性显式导入Bun宏，确保是有意执行宏，以此来降低潜在的安全风险。也可以使用--no-macros标志禁用宏，通过完全阻止宏的执行来增加额外的安全层。此外，为了防范恶意包，不能从node_modules目录调用宏。这个限制确保宏只在应用程序代码中运行，试图从node_modules调用宏将触发特定的错误消息。</p><p>&nbsp;</p><p>虽然Bun宏提供了增强的代码执行能力，但也存在一些限制。宏的结果必须是可序列化的，以便无缝内联到抽象语法树（AST）中。与JSON兼容的数据结构可以全面被支持，但函数和大多数类的实例是不可序列化的。宏只接受在打包时静态、已知的值作为输入。动态值或依赖于运行时条件的值不允许作为宏输入。</p><p>&nbsp;</p><p>开发者社区对Bun宏存在不同的看法。一位名为explaininjs的用户在<a href=\"https://news.ycombinator.com/item?id=36518840&amp;accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTAxNjczNTUsImZpbGVHVUlEIjoiZzVIekZmZ0lxcm92Z3dMYyIsImlhdCI6MTY5MDE2NzA1NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.khWiRCu6qIPwPzZhpdJBqsqrF7yG7xwMv0xZKIxFUzw\">Hacker News</a>\"上评论道：</p><p>&nbsp;</p><p></p><blockquote>“非常好。这应该能够帮助我消除大量笨拙的webpack/esbuild/etc垃圾。”</blockquote><p></p><p>&nbsp;</p><p>另一位用户skybrian也表示支持：</p><p>&nbsp;</p><p></p><blockquote>“我喜欢它不允许在npm模块中使用。模块作者可以在他们自己的构建过程中进行任意编译时代码生成。”</blockquote><p></p><p>&nbsp;</p><p>然而，开源贡献者goranmoomin也表达了不同的观点：</p><p>&nbsp;</p><p></p><blockquote>“宏应该能够对代码执行语法转换。Lisp因其可以将代码表示为List而闻名于世。Rust的编译器级API可以接受节点（token）并运行任意代码，然后吐出新的节点（token）。”</blockquote><p></p><p>&nbsp;</p><p>Oven（Bun背后的公司）首席执行官Jarred Sumner接受了这些反馈，并提出重新审视宏设计的计划。</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/07/bun-native-bundler-macros/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTAxNjczNTUsImZpbGVHVUlEIjoiZzVIekZmZ0lxcm92Z3dMYyIsImlhdCI6MTY5MDE2NzA1NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.khWiRCu6qIPwPzZhpdJBqsqrF7yG7xwMv0xZKIxFUzw\">https://www.infoq.com/news/2023/07/bun-native-bundler-macros/</a>\"</p><p>&nbsp;</p><p></p><h5>相关阅读：</h5><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&amp;mid=2247516386&amp;idx=1&amp;sn=94bed4b16790a46359e19cf8c759949c&amp;chksm=f95235a1ce25bcb7531410a4fa25f0ab3e6de659d6189fb765a4de40eb2faa009a438824edbb&amp;scene=27#wechat_redirect\">Bun&nbsp;会是&nbsp;Webpack&nbsp;之后的下一件大事吗？</a>\"</p><p><a href=\"https://www.infoq.cn/article/m48tvaz8w2BbblIQKZZF\">比 Node.js 快三倍，新 JavaScript 运行时&nbsp;Bun&nbsp;火了</a>\"</p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&amp;mid=2247516765&amp;idx=1&amp;sn=b899b050ea9125222ed283bbe76acc85&amp;chksm=f952371ece25be08bcf259c6cd8a1a9fbd6fe5b5f75e9c9512f1f75799adacbc046aebdeb741&amp;scene=27#wechat_redirect\">亲身试用新&nbsp;JS&nbsp;运行时&nbsp;Bun&nbsp;后，我觉得未来可期</a>\"</p><p><a href=\"https://xie.infoq.cn/article/c03cd143a6604ee58b0d8cce4\">疑为针对最近大火的“Bun”</a>\"</p>",
    "publish_time": "2023-07-31 09:36:08",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]