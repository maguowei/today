[
  {
    "title": "我在实施蓝绿部署后遇到的问题和解决方法",
    "url": "https://www.infoq.cn/article/klDfAvSYzYoQY8KXC3cM",
    "summary": "<p>前几周，我被迫拒绝“<a href=\"https://docs.gitlab.com/ee/user/project/merge_requests/approvals/\">批准</a>\"”了GitLab项目的合并请求。我不喜欢他们提出的解决方案，即，对我们的应用程序代码库进行特定的更改，以支持<a href=\"https://martinfowler.com/bliki/BlueGreenDeployment.html\">蓝绿发布</a>\"。它向我发出了一个代码更改的警告：将部署与代码绑定了；在环境应该是不可见和可互换的情况下，以编写代码来支持环境。创建这些类型的依赖将我们与特定的平台和发布方法绑定了，而额外的代码会导致各种可能的缺陷和错误，这些缺陷和错误可能会因环境而异，因此极难测试。</p><p>&nbsp;</p><p>这是怎么发生的呢？它有一个非常有趣的背景，并且这样的事情非常普遍。这一切都是从一个愿望开始的，即改进发布，从而更频繁地将变更引入到生产环境中。</p><p>&nbsp;</p><p>我们团队的应用程序相对现代化且灵活：托管在Docker容器中，并能自动部署到云上，单元和组件测试根据更改运行，一旦通过了全套的自动化测试并满足了代码质量标准，部署就可以自动继续。我们有一个“发布”的概念，即部署到云环境中的多个服务的构建构件的标签集合。</p><p>&nbsp;</p><p>然而，将这些构件移动到“更高的环境”中（例如预发布环境、生产环境）需要停机时间来重新启动所有服务，并且必须安排在非工作时间，而且发布要由单独的团队来执行。如果我们希望运行某些类型的更新（例如，对Liquibase来说过于复杂或缓慢的数据库更改），则需要手动执行步骤，因此，这些发布窗口虽并不频繁，但对团队来说却很痛苦。更不用说那些令人筋疲力尽的反社会工时制了。总的来说，一个好的改进候选项和蓝绿发布应该要能有助于消除其所需的加班和停机时间。</p><p>&nbsp;</p><p>简而言之，蓝绿部署的概念是同时运行（至少）两个应用程序实例。当发布新版本时，它只能发布到一个（或一些）实例上，而让其他实例仍在旧版本上运行。一开始可以完全限制对这个新版本的访问，然后可能会发布给一部分消费者，直到对新版本产生信任为止。此时，可以逐渐限制对运行的旧版本实例的访问，当然也可以升级这些实例。这为用户创建了一个零停机时间的发布。</p><p>&nbsp;</p><p>当然，也有需要注意的地方。对数据源或API的任何破坏性更改都意味着旧版本的请求不能被新版本处理，这就排除了蓝绿发布的可能性。这是我最喜欢问的面试问题之一，问一个人如何在蓝绿环境中处理破坏性更改，以避免有人提出了一个很好的解决方案，但它可能会涉及一些定制的路由层来丰富或调整“旧”请求以适应“新”系统。在这一点上，你必须考虑一下，保留一些旧版本的停机时间是不是更好。虽然大多数软件团队都在尽最大努力避免破坏性更改，但破坏性更改通常是不可避免的。</p><p>&nbsp;</p><p>所以，让我们假设一下最好的情况，我们没有任何的破坏性更改。我们还假设，就像我的项目一样，我们正在将Docker容器直接部署到云服务上——<a href=\"https://learn.microsoft.com/en-us/azure/app-service/\">一个Azure应用服务</a>\"，而不是<a href=\"https://kubernetes.io/\">Kubernetes</a>\"或另一个支持自动扩缩和路由的PaaS层。那么，我们该怎么做呢？</p><p>&nbsp;</p><p>我们的架构由许多微服务组成的，这些微服务通过REST API进行通信，并作为单独的构件进行部署。但是当前所有的构件都在一个Git存储库中，并在单个版本中同时部署。假设我们有两个运行1.0版本的微服务A和微服务B，以及一个包含A接口的新版本（2.0版），该接口将由B中的新方法调用。假设我们在生产环境中部署了负载均衡的2个A实例和2个B实例；对于蓝绿来说，每个实例都将迁移到新版本上。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/47/47873eaf901bd0bbedf9bda8fee4d049.png\" /></p><p></p><p>&nbsp;</p><p>你可以立即看到问题所在：2.0版本的B实例只能调用2.0版本的A实例。如果它被定向到1.0的端点，则无法找到所需的新功能。由于这种特定的路由要求，服务B不能使用它从服务发现中所获取的负载平衡端点来调用服务A，而是需要特定的“绿”实例地址。</p><p>&nbsp;</p><p>我们团队也面临着同样的情景。来看看我们可以用的解决方案。</p><p></p><h2>按依赖顺序发布</h2><p></p><p>&nbsp;</p><p>在调用API的功能之前发布API。在上面的例子中，如果我们为微服务B做了一次蓝绿发布，检查它是否正常，然后确保微服务B的两个实例都迁移到了2.0版本，那么之后我们就可以安全地对微服务A做蓝绿发布。</p><p>&nbsp;</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/72/7280092fcf7be3190e0681e98956175c.png\" /></p><p></p><p>&nbsp;</p><p>这种模型是一种适应增量式、非破坏性API更改的良好且简单的方式，尽管它必然会导致更多的发布，因为在发布下一个服务之前，每个依赖项都需要就位。这确实让回答“我们线上有什么版本？”这个问题变得更加困难。你的标签版本跨越了多个微服务版本。但这确实是微服务、部署复杂性和计算效率之间的权衡。微服务架构意味着，如果系统的某个特定部分需要用更多的资源，你可以只水平扩展该部分，而不必扩展整个系统，但随后你必须要单独管理所有部分的生命周期。</p><p>&nbsp;</p><p></p><h2>API调用中的版本控制</h2><p></p><p>&nbsp;</p><p>有几种方法可以将版本控制引入到API调用中。例如，一种直接的方式是在RESTful端点的实际URL中放入一个版本。另一种方式是尝试使用HTTP头等元数据来表示版本控制；然而，这只适用于你能控制所有服务的服务内通信时。否则，你不能指定服务请求必须包含的版本控制信息。</p><p>&nbsp;</p><p>如果我们的API端点是版本化的，这对我们的发布有何帮助呢？它将允许我们的服务B的2.0版本管理任何HTTP 404“URL未找到”响应，如果它碰巧向服务B的1.0版本实例发送了一个V2请求，并且它将允许服务A托管端点的V1和V2，那么它就可以在前一个版本仍然存在时继续服务。一旦每个服务都迁移了，这将会导致一些工作，如管理和清理服务B中的V1-mitigation代码。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/3b/3bba5c6a3c1bca63de4ce253a099920c.png\" /></p><p></p><p>&nbsp;</p><p></p><h2>依赖基础设施</h2><p></p><p>&nbsp;</p><p>云原生选项。我们的团队将应用程序部署到Azure。如果你要问Azure是如何做蓝绿发布的，他们会向你介绍他们的<a href=\"https://learn.microsoft.com/en-us/azure/traffic-manager/traffic-manager-overview\">Azure Traffic Manager</a>\"产品。这是一种基于DNS负载均衡的解决方案，提供了一种加权轮询路由方法。权重可以用于逐渐向新迁移的服务器上引入流量，你还可以添加规则，以确保“蓝”服务器只路由到其他“蓝”的服务器，从而将你的蓝环境和绿环境分开。这确实是有<a href=\"https://learn.microsoft.com/en-us/azure/architecture/framework/cost/provision-networking#azure-traffic-manage\">成本的</a>\"，尽管成本不是很高。</p><p>&nbsp;</p><p>回到我们的具体问题。我们还没有构建版本化的API，正如我前面提到的，我们目前在一个版本中部署所有的微服务。我会将我们的服务归类为微服务，因为它们可以单独部署和扩展，但我们的发布过程有效地将它们合并到一个BBOM（Big Ball Of Mud，大泥球）了。</p><p>&nbsp;</p><p>对于选项三，如果没有Azure Traffic Manager（这被认为过于昂贵），当“蓝”前端向后端微服务发送请求时，我们的团队无法检查或强制执行，它将调用“蓝”后端。这意味着，除非我们首先从后端传播更改（这并不总是可行，特别是当蓝和绿共享同一个数据库时），否则我们将面临路由无法处理请求的风险。让我非常畏缩的一个解决方法是：包含一个可以设置为蓝或绿的配置变量，然后在来自前端的请求中设置一个HTTP头，通过指定该变量来在应用程序代码库中有效地重新创建Azure Traffic Manager功能。哎唷。</p><p>&nbsp;</p><p>代码可以在生成路由URL时使用这个HTTP头/配置变量作为标志，以决定是通过绿服务器还是蓝服务器来生成路径。因此，例如，“注销”链接将在前端配置中指定2个配置变量：一个用于绿，一个用于蓝，允许根据服务器“颜色”生成不同的注销链接......吃饱撑的吗？</p><p>&nbsp;</p><p>我们团队知道这是一种创建蓝/绿发布流程的糟糕方式，它们是被预算和时间压力这两个常见的恶魔所逼迫的产物。我们的要求是在一个月内创建一个蓝绿部署流程，并且不使用Azure云原生服务，考虑到我们的起点，我们的选择非常有限。但是我们应该早点看到它的到来，例如，当我们一开始知道我们要构建API时，就应该考虑到API版本控制。</p><p>&nbsp;</p><p>我们陷入了“DevOps鸿沟”，因为我们有两个优先级不同的团队，一个开发团队的首要任务是尽快将更改引入到发布管道，而另一个WebOps团队的首要任务则是确保云平台的可重复性和安全性。当有人提出构建微服务的请求时，开发团队认为WebOps团队会管理蓝绿发布之类的事情，并没有停下来考虑他们应该如何构建解决方案来帮助他们。由于这样的疏忽，它最终会反噬，从而伤害我们。</p><p>&nbsp;</p><p>那么我们现是做到什么地步了呢？目前，我们还没有使用硬编码版本的蓝绿发布；正如我所预测的那样，当我们尝试使用我们构建的流程时，我们会发现一些非常严重的路由缺陷。我期待的是，我们最终能改用Azure Traffic Manager。到那时，我们就会开始将我们的“微服务大球”分解为多个部署管道，这样我们就可以计划一个自下而上的新变更发布了。在我们最初的示例中，我们的第一个版本将服务A升级到2.0，以在API和数据库中可以使用新的端点字段，然后第二个版本则是更新服务B，以调用服务A的新端点。</p><p>&nbsp;</p><p>对我们来说，这是一个非常有价值的学习过程：让开发人员和WebOps团队更紧密地联系在一起，并与发布团队更密切地合作，以了解我们是如何帮助他们的。当技能组合不同时，人们很自然地会将他们认为属于其他人的任务委派给其他人（例如，负载均衡应用程序实例将委托给理解Azure云概念和各种模板语言的人来编写基础架构代码），但我们已经学会了分解这些任务，以便双方都能理解对方在做什么，从而帮助发现整个流程中的问题。</p><p>&nbsp;</p><p>&nbsp;</p><p></p><h2>经验教训</h2><p></p><p>&nbsp;</p><p>总之，我们从早期的蓝绿设置尝试中学到了很多东西。</p><p></p><h3>变革架构</h3><p></p><p>&nbsp;</p><p>我非常反对“面向未来”的应用程序。如果没有性能问题，请不要构建缓存。如果你没有删除内容的要求，那么就不要执行删除。你对需求的猜测很有可能是错误的。</p><p>&nbsp;</p><p>然而，你应该从一开始就让这些未来的变更变得可行且容易。这意味着在构建整体应用程序设计时，你应该考虑如何在数据库级别实现更改，以及如何向API中添加版本等。</p><p></p><h3>不要为了微服务而微服务</h3><p></p><p></p><p>微服务不必是设计的默认设置。如果你的架构中没有契合点，也没有比其他架构更容易被大流量冲击的点，并且如果你的组件只是彼此通信，而且部署在相同的近似位置（例如，相同的云或相同的数据中心），那么你可能无法从微服务架构中获得很大的收益。</p><p>&nbsp;</p><p>通过减少移动部件的数量以及减少组件调用之间的网络延迟，你可能能从简化部署中获得更多的好处。不要只是随大流，要好好思考你想要实现的目标。</p><p></p><h3>注意团队边界</h3><p></p><p></p><p>对于任何需要一起协作的团队，无论是用户体验设计师和开发人员、业务分析师和QA，还是开发人员和运营团队，我们都需要意识到项目中风险最大的领域是团队之间的边界。</p><p>&nbsp;</p><p>每个团队都会一直在做假设，例如，开发人员会假设用户体验设计师正在提供有效的HTML原型；业务分析师会假设QA团队已经根据文档化的需求进行了自动化测试；运营团队会假设他们已经收到了应用程序依赖项的通知。每当两个团队开始协作时，最好使用一些技术来消除这些假设，例如，你可以从领域驱动设计中获取一些工具，并运行事件风暴事件研讨会。</p><p>&nbsp;</p><p>在一个项目中，越早将这些假设作为风险项提出，事情就会越好，也就越安全！</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/blue-green-deployments/\">https://www.infoq.com/articles/blue-green-deployments/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/LW5JeoLR0Jcl1ktRNV0o\">亚马逊云科技为蓝绿及金丝雀策略引入 CloudFront 持续部署</a>\"</p><p><a href=\"https://www.infoq.cn/article/LEI4vSFPiw5A6eN-ASo4\">部署策略对比：蓝绿部署、金丝雀发布及其他</a>\"</p>",
    "publish_time": "2023-01-31 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "一个程序员的成功故事：从开源工具到75亿美元的软件帝国",
    "url": "https://www.infoq.cn/article/j9Mv7hyXEN9DA7Zs4bAT",
    "summary": "<p></p><p></p><blockquote>一针打给年轻程序员们的奋斗鸡血。</blockquote><p></p><p></p><p>Matt Mullenweg是WordPress.com及其母公司Automattic的创始人。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/99/09/9945e5ec4a88f767e0408e3717344409.png\" /></p><p></p><p></p><p>资料显示，Automattic在六轮融资中筹集了 8.46 亿美元。上一轮 2.88 亿美元的融资于 2021 年 2 月完成。去年8月，Automattic从现任和前任员工手中回购了价值2.5亿美元的股票。股票回购使该公司的估值达到了75 亿美元。</p><p></p><p>本文将带着大家回顾Matt Mullenweg的奇妙创业旅程，一场从零开始创建WordPress的梦幻探险。</p><p></p><p>统计数据显示，目前互联网上有四成的网站是由WordPress构建而成。</p><p></p><p>WordPress.org最初的定位是非营利性的博客平台。</p><p></p><p>作为博客和开源软件的双料爱好者，Matt的梦想就是建立一个可供任何人轻松创建博客的技术平台。</p><p></p><p>Matt曾经收到不少科技巨头伸来的橄榄枝，但他几乎全都一口回绝。他知道一旦加入任何一家科技巨头，自己手中的知识产权也将被瞬间夺走。</p><p></p><p>作为WordPress.com的母公司，Automattic目前在全球各地拥有约2000名员工。</p><p></p><h2>从Matt的童年聊起</h2><p></p><p>Matt和他的妹妹在休斯顿相伴长大。他母亲安心打理家庭，父亲则是一位为石油企业服务的计算机程序员。</p><p></p><p>青年时代，Matt的梦想是追寻艺术、创作音乐。他对萨克斯特别着迷，因为父亲没事就喜欢来几段。于是Matt进入一所艺术表演高中，学校的氛围很棒，他还经常靠表演萨克斯赚点外快。他的演奏舞台也多种多样，比如不同的意大利餐厅。</p><p></p><h2>为什么放弃了职业音乐人之路？</h2><p></p><p>“在学校里，很多孩子是真正的神童。我也有点天赋，但得非常努力才能向他们看齐……而且我不是顶尖的那类人，越学我就越能感受到这一点。”</p><p></p><p>Matt的父亲在单位有台办公用的电脑，后来又买了台家用电脑，这就成了Matt的计算机启蒙。</p><p></p><p>刚开始，他在上头接触过几款游戏。但随着时间推移，他逐渐着迷于各种互联网社区。</p><p></p><p>Matt回忆道：这些社区是围绕共同的关注点所形成的。社区就是结识他人的平台，我们使用的是名叫IRC的聊天系统……就是纯用文字随便闲侃。</p><p></p><h2>Matt的网站开发起点</h2><p></p><p>2000年初那会，网站的构建流程比如今要复杂得多。</p><p></p><p>Matt在高中时就学会了网站开发，但过程并不轻松，翻了很多书也着实演练了很多遍。</p><p></p><p>那时候的网站发布软件其实不少，有GeoCities、有Dreamweaver，还有FrontPage等等。</p><p></p><p>大多数时候，他都会直接点遍软件里的所有按钮，挨个看看到底是什么作用。他就是用这种“笨”办法，了解软件的工作方式。</p><p></p><p>当时的Matt创办了一个名叫footman的摄影网站。他在网站上发过不少照片，用的则是开源软件Gallery。总结来讲，这款软件就是个负责把照片发到网上的PHP脚本。至于我们如今熟知的Flickr和Facebook，在那个时代还没出现。</p><p></p><h2>与陌生人共同创办WordPress.org</h2><p></p><p>之后，Matt决定好好学学编程。</p><p></p><p>他参加了一个名叫b2 cafelog的开源博客平台。他觉得这平台不错，并提议对代码做一点修改。</p><p></p><p>Matt写的代码，深得b2首席开发者的好评。于是Matt按要求创建工单并提交了这批代码。贡献成果很快被接纳，成为后来正式发行版的一部分。也就是说，接下来每位更新软件的用户都会跑起Matt编写的代码。</p><p></p><p>“我太开心了，天哪，有成百上千个网站在运行我亲手写的代码……真的叫人激动。”</p><p></p><p>Matt就此频繁为b2平台贡献代码。除他之外，b2平台在世界各地还有很多其他贡献者。</p><p></p><p>可一个致命的隐患始终存在——b2的首席开发者Mitchell掌握着整个平台的生死。2002年，Mitchell离开了b2。失去了这位“仁慈的独裁者”，b2平台再无法进行任何后续代码更新。于是，世界各地的人们只能停止贡献。</p><p></p><h2>属于Matt Mullenweg的高光时刻</h2><p></p><p>Matt有个好习惯，他一直在博客上记录当时b2所发生的一切。</p><p></p><p>在一篇题为《博客软件的困境》的文章中，Matt提到他想打造一个与众不同的博客平台。他希望这个平台能美观一些，能让博文拥有高质量的排版功能。他提到平台应该跟博客本身一样简单，而且要像b2那样易于调整。</p><p></p><p>代码也得既优雅又灵活。</p><p></p><p>因为b2 cafelog属于开源项目并遵循GPL许可，所以首席开发者Mitchell所做的工作并没有丢失。</p><p></p><p>Matt想通过此文告诉社区的其他成员，即使一个人突然从地球上消失，他写下的代码也将永远存在。</p><p></p><p>人们可以直接使用这些代码，以此为基础进一步构建自己需要的功能。</p><p></p><p>帖子公开之后，一位名叫Mike Little的用户评论称，如果Matt想牵头这样的项目，他很愿意一同参与。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/18/18d43d29201ca405670eaf8772df7d8e.png\" /></p><p></p><p>Mike与Matt的联合创业之路，就此拉开序幕。</p><p></p><p>他们拿着b2 cafelog的代码进行了分叉，并以此为基础构建更多新内容。Matt和Mike曾在IRC上聊天，但至少在前三年从未谋面。他们之前曾相互发送过代码片段，还就代码注释进行过交流。不过，也就仅限于此了。</p><p></p><h2>WordPress.org因何而得名？</h2><p></p><p>Mike和Matt的b2分叉只是众多分叉中的一个。</p><p></p><p>当时的b2分叉有五、六种，很多人都在尝试用b2代码开发一些有意义的成果。</p><p></p><p>当时，Matt是社区里的活跃成员。之前，社区成员经常约在咖啡厅或酒吧见面，探讨博客开发技术。</p><p></p><p>有一次Matt说起自己正和Mike共同构建博客平台，一位名叫Christin的博主偶然想到了WordPress这个名字。</p><p></p><p>Matt很喜欢WorddPress，也就一直沿用了下去。之前不少b2社区的成员都喜欢Matt和Mike做的努力，所以其中大多数都转向了这个新项目。</p><p></p><p>当我们认真回顾WordPress.org的发展历程，就会发现它从来就没有以业务作为发展思路。他们关注的永远只有一点：让博客构建更轻松、更有趣，让每个人都能为此做出贡献。</p><p></p><p>正是这种纯净的追求，把项目参与者们紧密团结在了一起。</p><p></p><h2>一个伟大的点子，彻底改变了博客</h2><p></p><p></p><p>2003年5月，Mike和Matt正式将WordPress.org面向全世界公布。</p><p></p><p>大多数用过各类博客软件的博主，都对WordPress的横空出世感到兴奋。</p><p></p><p>此外，来自各个线上社区的开发者也对WordPress充满热情。</p><p></p><p>在WordPress亮相之前，Matt曾联系过b2的贡献者，希望把分散各处的力量重新汇聚到WordPress这边。他邀请大家共商大事，加入到WordPress的贡献中来。在启动之初，WordPress项目只有五、六名稳定开发者，余下的几百人只负责对项目做微波的变更或调整。</p><p></p><p>WordPress.org甫一登场，就被几百名用户用于撰写日常博客。</p><p></p><h2>WordPress.org人气日盛，运营总成本也在快速增长</h2><p></p><p>随着WordPress.org的用户规模越来越大，所需的服务器也面临着升级压力。那时候，亚马逊云科技（AWS）还根本没有诞生。</p><p></p><p>所以，他们租了一台服务器，以供用户在线上与它交互。这台设备的运营和租赁总成本为每月425美元。当时，这台服务器就是项目团队的主要成本来源。</p><p></p><p>为了支付这笔钱，Matt只能帮别人搭网站、配电脑，有时候还要捡回当初演奏萨克斯的老本行。</p><p></p><h2>雅虎与CNet等纷纷张开怀抱</h2><p></p><p>但好机会也一同到来，Matt Mullenweg收到了一大堆来自科技巨头的邀约。</p><p></p><p>这些公司想雇用Matt，借他的手帮自己搞定各种重大项目。其中就包括雅虎和CNet。</p><p></p><p>CNet是最早的互联网媒体企业之一，他们之前曾打造过一款内容管理系统。</p><p></p><p>当时，CNet给Matt开出的年薪大概是9万美元。Matt那会每月只能赚个1000美元左右。对于20岁的Matt来说，9万美元的报价就如同中了彩票。Matt接受了CNet的招徕，原因如下：“他们允许我保留正在创建的代码的知识产权……一般来说，一旦加入谷歌这样的企业，那期间所开发的一切都将归公司所有……对我来说，把握住知识产权非常重要。”</p><p></p><h2>一个20来岁的年轻人，为什么对知识产权如此敏感？</h2><p></p><p>“我在网上看过很多博客，而且也有音乐演奏方面的背景。我对知识产权非常熟悉……我仍然坚定支持版权制度。”</p><p></p><p>在CNet，Matt的职务是项目经理。在这里，他只负责管理某些特定项目。Matt在WordPress.org积累下丰富的助人经验，凭着这份沉淀，他帮助CNet的同事们快速完成设置流程。在此期间，他也从未间断对非营利组织WordPress.org的贡献。</p><p></p><h2>Matt为何推出营利性WordPress.com?</h2><p></p><p>Matt当时是这样向CNet CEO汇报的：</p><p></p><p>WordPress.org很酷，但设置过程还是太复杂……我们可以让用户轻松点击几个按钮就建立起自己的博客。我觉得这肯定会大受欢迎……让我们马上动手吧。</p><p></p><p>但CNet团队在集体讨论之后，认为不适合涉足博客托管业务。但Matt为自己的点子激动不已，所以在CNet工作期间就创办了Automattic公司。他还为公司雇用了最早的几名初始员工。</p><p></p><p>他的思路是建立商业实体，借此为WordPress提供附加组件和简单的托管服务。他们想在后续的开发计划中进一步降低WordPress使用门槛，让人们无需掌握开发知识也能构建自己的博客。</p><p></p><p>完成这一步，博客的大众化才能真正落地。</p><p></p><h2>Matt未借助任何融资就把Automattic公司运营了起来</h2><p></p><p>Matt Mullenweg最初独力支撑着这家新公司。他用自己的工资养活整个项目，不足的部分则借助信用卡。</p><p></p><p>Matt回忆道：我确实对自己太过自信了。</p><p></p><p>随着运营的推进，他逐渐意识到光靠自己的工资和信用卡已经不足以让WordPress转向商业化运营。</p><p></p><p>Matt还记得，当时曾有人联系他在WordPress.org上投放广告。那会在WordPress.org投一个月广告，开价2000美元。但广告商提醒他，WordPress.org最好能提升一下自己在谷歌引擎上的价值排名。当时其他很多网站会直接照搬WordPress.org的内容，所以这位正主在搜索结果中的位次并不靠前。</p><p></p><p>广告商的提议是，Matt应该在WordPress.org上开放各用户网站链接，这样就能在谷歌上获得更高排名。而且一定要注意高价值关键字，比如各种疾病，这对提升排名很有帮助。</p><p></p><p>为此，Matt发明了一种向用户发送广告邮件的新方法。Matt当时是这样使用CSS代码的：如果以用户身份在浏览器内访问WordPress.org网站，则外部链接将不可见；如果通过谷歌等机器人身份访问WordPress.org网站，则外部链接可见。</p><p></p><p>因为谷歌就是靠机器人来索引网站的，所以Matt的策略确实能帮广告商通过有价值关键字吸引数百万新用户。</p><p></p><p>简而言之，Matt Mullenweg收了广告邮件商的钱，并向有价值的WordPress.org用户发送推销邮件。</p><p></p><p>“当一个人靠不懂某事来养活自己的时候，就很难真正弄懂这件事。”</p><p></p><p>后来谷歌发现了这批带有欺骗性的CSS代码。谷歌员工对这种误导搜索引擎的行为非常生气，于是决定直接从搜索结果中删除WordPress。这一举动，导致WordPress几乎从互联网上彻底消失。</p><p></p><p>Matt Mullenweg的这种行为，也辜负了成千上万人的信任。</p><p></p><p>此后，Matt修复了代码并发布博文公开道歉。最终，谷歌原谅了Matt并把WordPress重新放回搜索结果。</p><p></p><h2>离开CNet，专心开发反垃圾邮件软件</h2><p></p><p>Matt随后离开CNet，悉心运营自己的Automattic。</p><p></p><p>公司的第一款商业产品名为AKismet，名称来自他的姐姐。这是一款反垃圾邮件软件。</p><p></p><p>它有一套机器学习系统，能够分析数百万博客中的垃圾邮件模式，之后由Akismet返回放行或屏蔽的结论。</p><p></p><p>如果返回放行，则邮件内容合法；若返回屏蔽，则代表是垃圾邮件、直接无视。</p><p></p><p>这样，人们就能自动清理网站中的垃圾邮件，全程无需人工干预。Akismet对个人用户免费，但对商业用途则必须收费。</p><p></p><p>Matt很早就决定WordPress.com要保持免费，他构想的商业模式是销售WordPress插件。</p><p></p><h2>Matt为何下决心筹集资金？</h2><p></p><p>Automattic的员工各自身在不同城市，遍布世界各地。那时候，Automattic全公司的月收入大约是2万美元。</p><p></p><p>Matt意识到，一旦出点什么变故，他们的收入很可能立马中断，公司也无力支付下个月的工资。</p><p></p><p>这时候的他感受到员工们的支持和信任，也深深感受到自己肩头背负的责任。</p><p></p><p>业务经营倒还有钱，但Matt希望能多点现金储备，这样就能耐心开发，或者在最坏的情况下帮员工们渡过跳槽前的空窗期。</p><p></p><p>Matt最初跟投资者会面时，对方总是要求他先为公司招聘齐CEO、CTO等高管人员。</p><p></p><p>但Matt觉得这时候压根没有必要。</p><p></p><p>后来Matt遇到了Tony Schneider，这是一位曾成功将自己创立的公司卖给雅虎的同行。两人相谈甚欢。</p><p></p><p>于是Matt聘请他担任Automattic的CEO，此举终于打消了私人投资者们的疑虑。</p><p></p><p>这时候的Matt，在公司里担任Automattic总裁职务。</p><p></p><h2>WordPress.com如何为平台和服务吸引客群？</h2><p></p><p>据Matt回忆：基本都是靠口口相传……我们当时唯一的宣传手段，就是在一切默认运行WordPress的网站模板中都写上“powered by WordPress”。</p><p></p><p>在访问任何运行WordPress的网站时，大家都能看到一个链接，表明该网站由WordPress提供支持。单击该链接即可转向WordPress官网。</p><p></p><p>在试用之后如果喜欢，用户就能轻松上手使用。另外，Matt也特别喜欢看其他人的博客。如果发现有人抱怨“呃……我的网站怎么越来越慢”，Matt都会向他们推荐WordPress.com服务。</p><p></p><h2>2亿美元要约收购与Automattic的当前估值</h2><p></p><p>Automattic团队当时已经有约20名成员。</p><p></p><p>2007年，Matt拥有公司超半数股份，而当时已经有买家打算以2亿美元收购WordPress.com。对于一家刚刚成立2年的年轻企业来说，这无疑是个极具诱惑力的条件。</p><p></p><p>就是说，23岁的Matt已经赚到了约1亿美元。于是他开始认真考虑这个选项。</p><p></p><p>自己有必要这么年轻就退休吗？最终让他放弃收购的，是他觉得这会就退休实在太无聊。</p><p></p><p>他还向姐姐、妈妈和爸爸提出了这个严肃的问题，问如果账户上有1亿美元，他们打算去干什么。他们能想到的，包括买辆超酷的车和买栋专门度假的房子。但种种梦想加起来，也只需要500万美元。</p><p></p><p>那剩下的钱，要用来干嘛？</p><p></p><p>他想的是每天写代码，环游世界并结识更多新朋友。他想跟自己喜欢的人们共事，仅此而已。想到这一层，他坚定了自己的念头——绝不要在这么年轻的时候卖掉公司。</p><p></p><h2>2009年，WordPress正式突破千万次下载</h2><p></p><p>2009年之前，WordPress团队新增一项功能——WordPress不仅能运行博客，还可以管理整个网站。</p><p></p><p>事实证明，这也是WordPress.com最核心的功能之一。从这一刻起，WordPress不再是过去那种特定的发布或博客软件，而真正成为完整的内容管理系统。</p><p></p><p>之后，更多大型企业被WordPress所吸引，并决定用它管理自己网站上的所有页面。</p><p></p><h2>收购扩张</h2><p></p><p>在不断壮大的旅程中，Automattic先后收购了WooCommerce、Tumblr、Simplenote等公司。</p><p></p><p>原文链接：</p><p></p><p><a href=\"https://levelup.gitconnected.com/meet-a-programmer-who-turned-an-open-source-platform-into-a-7-500-000-000-company-645e14c53c8\">https://levelup.gitconnected.com/meet-a-programmer-who-turned-an-open-source-platform-into-a-7-500-000-000-company-645e14c53c8</a>\"</p>",
    "publish_time": "2023-01-31 09:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]