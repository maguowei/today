[
  {
    "title": "释放团队的力量：洞察关键指标驱动的软件开发之路",
    "url": "https://www.infoq.cn/article/8TKQOFfwfjK4eri9kTZK",
    "summary": "<p>在一个所有东西都可以洞察、都有上下文和数据的世界里，如果将指标度量限制在软件开发过程的一部分里，那是没有意义的。部门的工作不会在提交到Git时停止，也不是在工单分配到你时才开始。从第一次关注一个工作项，到它进入生产代码，融于现有的解决方案，有许多地方可以做得很好，但也有更多的地方可能会出错。度量这些领域，就像度量管道中的其他领域一样，这对于改进至关重要。我们将花一点时间回顾相关的术语和概念，然后再深入研究Jobber的开发过程，看看我们如何：</p><p>为开发分支集成即时QA构建，简化QA过程；简化PR流程，加快相关工作的审批和测试；集成用于处理故障和中断的新服务；发现工程师没有足够的时间埋头工作的原因（是会议！），以及为什么与开发人员交谈和采用工程指标一样重要。</p><p>&nbsp;</p><p>对于这些度量，业界普遍接受的标准是由谷歌DORA团队制定的，包括部署频率（DF）、变更提前期（LTC）、平均恢复时间（MTTR）和变更失败率（CFR）四个关键指标。这4个指标分别度量将代码部署到生产环境的频率（DF）、开发完成和部署之间的时间间隔（LT）、从严重的生产问题中恢复所需的时间（MTTR）以及新增热修复代码在生产环境中引发问题的频率（CFR）。概括地说，这些关键指标是对客户影响、做事速度以及所提供服务的一致性或质量所做的一般分类。如果你关心的是影响、速度和质量这样的东西，那么你就需要某种形式的指标，让你可以跟踪进度。</p><p>&nbsp;</p><p>在<a href=\"https://getjobber.com/\">Jobber</a>\"（一家家居服务运营管理软件提供商），我们跟踪这些指标，更多的是作为产品开发部门，为的是以可度量的方式跟踪进展。这些指标可以帮助我们的团队在进行变更时保持敏捷，并在执行过程中以数据为驱动。如果一个团队想要尝试一种新的Bug分类方法，或者一种新的PR流程，那么我们不仅可以实时跟踪，并与他们之前的表现进行比较，还可以以部门为单位绘制这个指标，从而防止来自更大部门的噪音破坏我们的数据。然后，这些个人或团队战术层面的指标会向上汇总到小组、部门，最终到整个组织。这样，我们就能够根据需要准确下钻到任何层次，从个人一直到Jobber这个整体，并且可以与其他组织进行比较。</p><p>&nbsp;</p><p>我们不仅会追踪这4个关键指标，还会对收集到的数据做些说明，这很重要。在个人、团队或部门层面，都有一些噪音是非常符合人性的，那种上下文信息非常宝贵。当我们尽可能多地收集不同方面的数据时，我们也会考虑这些指标的人性方面、项目难度、任务转换或个人情况对个人、团队甚至部门的一个或多个关键指标的影响。</p><p>&nbsp;</p><p>也就是说，指标（DORA的4个关键指标及其他指标）帮助Jobber对开发过程做了一些更改。其中包括投资于按需构建的CI/CD管道（不仅适用于生产环境，也适用于开发环境），那使得我们在工程师提出修复方案几分钟内就可以向内部涉众和测试人员发布测试构建，极大地影响了我们的LTC。我们还简化了PR审查流程，减少了发布补丁、新成果和主版本所需的步骤，大大减少了DF。在审查了一些故障指标之后，我们集成了用于处理中断和技术事件的新服务，真正改善了我们的MTTR。下面，让我们更深入地了解下这些案例。</p><p>&nbsp;</p><p>当我们开始更仔细地研究我们的指标时，我们意识到，开发过程有许多可以改进的地方。具体地说，在研究变更提前期和部署频率时，我们发现自己落后于竞争对手的关键步骤是快速有效地向内部团队交付代码的能力。我们发现，与同等规模的公司相比，我们从第一次变更评审准备好到实际评审之间的时间间隔要长许多。通过进一步地研究，我们发现，加快将构建交付给产品所有者、涉众和其他QA负责人的速度，可以让这些循环更紧凑，提高部署速度。我们为所有新PR推出了按需的Bitrise移动构建，这意味着现在只需要30分钟就可以向所有感兴趣的人交付包含更改或修订内容的版本。这不仅加快了我们的特性开发速度，而且还加快了代码评审过程，对MTTR和CFR指标产生了重要的影响。</p><p>&nbsp;</p><p>在查看平均恢复时间和变更失败率指标时，我们发现，我们并没有像自己希望的那样高效。我们对故障的响应还算积极，但仍有改进的空间，特别是在事件的沟通和组织方面。我们将Allma整合为Slack频道中的一个问题协作层，围绕事件组织集中沟通。以前，人们很难“跳进去”帮助解决问题，因为它通常分散在多个不同的地方。Allma工作流让我们可以集中讨论切实的问题，让多方介入、监督或对问题的解决做出贡献，进而帮助我们理清其中的误解和困惑。这就和前面的情况一样，监视指标让我们不仅可以发现具体技术或框架的更改，还可以发现流程和工具的更改。</p><p>&nbsp;</p><p>我们来看一个具体的问题，它的出现方式非常有趣。在查看我们的工程度量工具Jellyfish时，我们注意到一个基本问题：我们的IC（个人贡献者）编码不够多！我们在评价工程师时会使用PR数和“编码日”，这是一个粗略的估计，即工程师一天中花在代码上的时间与花在其他事情上的时间比。我们看到，在过去的一年里，我们的IC花在代码上的时间越来越少，而花在其他事情上的时间越来越多。一个简单而又显而易见的解决方案是“多编码”，但就像任何指标或数据问题一样，有时候，一个信号在告诉你一些东西的同时，也经常会导致很多噪音。消除噪音的最佳方法是将指标放大，了解IC的切身经历，有时需要进行一些艰难的对话。</p><p>&nbsp;</p><p>开展这类对话的基础是信任，否则你将无法从中获得任何有用的上下文信息。在Jobber，虽然在决策时，我们会查看尽可能多的数据，但我们认识到，这最多只能占一半，另一半是被度量者的生活经历。我们从不以数据来评判Jobberino；数据要放在团队和小组的上下文中来考虑，而不是用数据给他们本人或他们的工作下定义。也就是说，我们将指标视为真实问题的线索，而不是用它衡量某人对于公司的价值。所以当我们着手分析PR减少的原因时，我们首先要做的就是找到问题的源头，直接与工程师进行探讨，看看是什么妨碍了他们开展构建特性和解决漏洞这些对他们而言很重要的工作。</p><p>&nbsp;</p><p>我相信，对于这一点，很多阅读这篇文章的人都了解。当我们深入研究数据和相关上下文时，不出所料，问题的源头是会议。具体来说，会议安排时间不合适经常会打断所有重要的技术流程。你或许也知道，许多需要工程师处理的问题都至少需要4个小时的时间才能解决。因此，会议会打断所有重要的流程，妨碍问题的解决。这些问题通常也是最难解决的，所以你还要付出机会成本，因为最重要的问题也是最难解决的。在这种情况下，一个相对正常的指标（IC花费在编码上的时间）背后隐藏了大量有用的更改和信息。现在，除了粗略地度量他们的生产时间之外，我们正积极监控工程师可用的大块时间。如果我们没有首先度量我们的工程工作，就永远不会发现这些信息，如果我们没有相互信任的环境，让我们处理信号而不是噪音，我们肯定也不会有那些关键的上下文对话。</p><p>&nbsp;</p><p>除了这4个关键指标之外，我们还有各种有趣的指标。我们不仅会度量已解决缺陷的数量，还会度量每周关闭的缺陷的数量，或者一个PR在关闭之前所花费的时间（以及已审核PR被的数量和对这些PR的评论！）我们甚至会度量团队和部门更新内部文档和维基资源的次数，以及每周重新投入到其他开发或文档中的次数。总之：如果你不跟踪它，你就无法度量它；如果你不度量它，你就无法改善它。特别是对于工程经理以及更高的级别，当他们对策略、流程和工具做小调整、修改和大调整时，他们会希望了解所有具体的更改是成功还是失败。我们不必担心自己的功能被打上OKR标签，我们应该把同样的热情和活力投入到追踪我们对业务发展的贡献上。一定要先确保脚踏实地，然后再去数据中寻找神奇的趋势线。</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/team-level-metrics-matter/\">https://www.infoq.com/articles/team-level-metrics-matter/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/RcpX4N8e6DUHIaG4eNTM\">软件技术栈商品化：应用优先的云服务如何改变游戏规则</a>\"</p><p><a href=\"https://www.infoq.cn/article/lffDWFY1Ch66CrQURbYy\">使用伪对象进行单元测试：避免过度设计，降低测试成本</a>\"</p>",
    "publish_time": "2023-05-26 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "商家可以用AIGC做什么？微盟发布大模型应用产品WAI",
    "url": "https://www.infoq.cn/article/VX7mJJCXc3LKoTycap0t",
    "summary": "<p>细数商家现在每年的促销活动，平均每个月至少就会有一场。而每场大促背后，商家要考虑的不仅仅是营销策划、优惠福利、商品配置，还包括店铺装修风格、商品种草文案的调整等等。举例来说，仅仅在6月期间，就有六一儿童节、“618”狂欢、端午节三大节日，每个节日的主打产品、页面风格截然不同，如果全由人工一一去写文案、做设计和页面切换，必然涉及巨大工作量。</p><p></p><p>而就在6月即将到来之际，微盟带来了一个惊喜——发布基于大模型的AI应用型产品WAI，可以帮助商家把很多过去的繁琐工作，变得轻松又快捷。比如，下面这个618<a href=\"https://www.infoq.cn/theme/171\">营销</a>\"流程设计就出自WAI之手（背景设定为女装电商）：</p><p></p><p></p><blockquote>1.预售：5月20日至5月31日，通过海报、广告等形式进行预售宣传，提前购买，享受优惠折扣。2.抢购：6月1日至6月17日，每日推出不同的抢购商品，顾客需要在规定时间内抢购，享受超值优惠。3.满减优惠：6月1日至6月18日，顾客在购物时满足一定条件即可享受满减优惠。4.赠品：6月1日至6月18日，顾客在购买指定商品时，可获得相应的赠品。5.联合营销：与其他相关品牌或商家进行合作，共同推广，提高影响力。</blockquote><p></p><p></p><p>这只是<a href=\"https://www.infoq.cn/article/6tiOQEV3UHCLAMGDXPXH\">微盟</a>\"WAI的能力之一。根据微盟首席运营官尹世明在2023&nbsp;Weimob&nbsp;Day&nbsp;微盟城市峰会北京站活动现场的介绍和演示，截至发布当天（5月24日）微盟WAI已经正式上线25个实际应用场景，包括“话术生产、短信模板、商品描述、种草笔记、直播口播稿、公众号推文、短视频带货文案”等等。并且，其中部分高频应用场景，此前测试商家反馈已达到日常使用的水平。</p><p></p><p></p><h2>让大模型走进千家万户，需要扫清五大障碍</h2><p></p><p></p><p>在过去半年里，AI的热潮因为<a href=\"https://www.infoq.cn/theme/173\">ChatGPT</a>\"再度被点燃，科技公司纷纷推出了自己的AI大模型，一时间，AIGC市场已经呈现出了百家争鸣的局面。但是，作为大模型前端的使用者，商家如何才能享受到这其中的红利呢？</p><p></p><p>尹世明表示，从大模型的“供给端”到以商家为代表的“使用端”之间隔着五大“障碍”：</p><p></p><p>第一，在商家场景，纯粹的自然语言交互模式是不够的，只有把多种形态叠加在一起，才能让AI走进千行百业；</p><p></p><p>第二，需要让AI在商家场景中做到“无孔不入”，包括商城搭建、营销赋能、会员洞察、数据分析等等；</p><p></p><p>第三，不同垂直行业之间的差异巨大，显然很难用一套通用的语料库去支持AI交互，因此能不能把行业Knowhow融入其中，是在垂直行业落地AI大模型的关键；</p><p></p><p>第四，如今，不同企业推出的大模型的能力矩阵差异较大，有的更擅长文字创作，有的更擅长图片生成，但是，对于具体商家来说，所需的必然是一个能力全面的“选手”；</p><p></p><p>第五，合规是2B业务场景的底线，因此，想把大模型引入到企业的业务流程中，进行规模化的应用，就必须进行风险管控，保障合规。</p><p></p><p>扫清这五大障碍，是微盟推出WAI这款产品的初衷，这从此次产品的命名中就足以窥见一二。尹世明解释，其中“W”包含四层寓意，即“Weimob（汇聚微盟AI技术能力）、Wide（覆盖更宽经营场景）、Wise（智慧经营辅助）、Wow（完美用户体验）”。</p><p></p><p>具体而言，WAI可以适应“自然语言形态、SaaS融合形态、聚合应用形态”三大交互形态，并全面融入微盟在包括“零售、电商、营销、私域”等业务在内深耕数字商业领域近十年的行业Knowhow，深度覆盖商家全经营场景，同时做到“图文并茂，博采众长”。&nbsp;此外，基于预设“针对性、高质量”的Prompt（模型输出）模板，微盟WAI还实现了零基础商家也能快速使用的“0门槛体验”，并通过充分的风险管控，确保商家可以放心合规使用。</p><p></p><p></p><h2>公布WAI发展布局全景图，演示三大场景能力</h2><p></p><p></p><p>在发布现场，尹世明公布了WAI的发展布局全景图，并详细演示了其中的几个核心能力。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/3d/6c/3d953fcbafa68ae666af28a50bc7e26c.jpeg\" /></p><p></p><p>以智能搭建为例，围绕“让开店更简单”这一目标，借助WAI商家可实现启动页快速生成。用户只需选好风格（比如节日、元素、色彩、人物等等），几乎在10s内就可以生成一个页面，大大节省了设计时间。同时还可以借助AI商品图智能生成能力，无需模特拍摄，就可以快速生成模特试穿图。</p><p></p><p>针对智能营销，WAI现场展示了公众号图文的创作（包含公众号封面和创作和推文创作），商品直播脚本的创作（适配各种直播风格，可智能提取商品信息，一键生成口播脚本）以及导购素材-推广话术（包括语气、表情、传播渠道和字数选择，实现不同角度及风格话术均可从容应对）。</p><p></p><p>举例来说，用户只要选择商品，写明商品的几个特性，使用场景（如朋友圈、小红书），以及语气风格等等，WAI就可以快速生成一段推广文案。以下是现场文案生成演示示例（背景设定是发布一款女鞋，特点轻便、耐脏，用于小红书种草）：</p><p></p><p></p><blockquote>今天为大家带来一款令人眼前一亮的女鞋——它轻便又耐脏......这双女鞋采用了全新的设计理念，让你在忙碌的生活中保持时尚。它采用了轻质材料制作，大大减轻了脚的负担......同时，鞋面采用特殊材料处理，无论是雨水还是灰尘都能轻松抵御......</blockquote><p></p><p></p><p>如果使用者对生成的文案不满意，只需点击“不满意”按钮就可以重新生成，同时，也可以点击“润色”按钮，对文案做再加工。然后，在文案确认后一键发布到相关页面。</p><p></p><p>此外，在智能经营板块，WAI通过现场录屏展示了“自然语言生成SQL脚本”能力，无需代码，通过自然语言指令就可以帮助商家实现一键式的报表生成，清楚地掌握每个门店的销量、营销、管理等经营相关的各种数据。</p><p></p><p>“WAI正在快速迭代中”，尹世明在现场表示，“以嵌入SaaS产品的融合形态为例，目前SaaS融合形态已经上线17个应用场景，结合微盟在数字商业全链路经营中丰富的SaaS产品和服务，未来则会有更多应用场景，希望真正帮助商家借助大模型释放生产力。”</p><p></p><p></p><h2>激活应用智能，还有赖大模型进一步开放</h2><p></p><p></p><p>据尹世明介绍&nbsp;，微盟旗下所有的产品和服务，包括“微商城、企微助手、OneCRM”等等将全面接入微盟WAI做升级，涵盖商家在数字商业经营中“智能搭建、内容创作、营销推广、智慧洞察”等多重业务需求。</p><p></p><p>在底层，微盟WAI基于的是百度文心一言等第三方LLM模型，加上微盟的自研技术（主要是基于行业Knowhow的图片生成）。“模型是松耦合而不是紧耦合的状态，我们希望可以在不同模型之间进行切换，甚至用户可以对使用的模型进行挑选。</p><p></p><p>不过，尹世明还强调，目前国内<a href=\"https://www.infoq.cn/theme/187\">AI大模型</a>\"主要通过邀请制来服务应用层的开发者，这种相对有限的能力开放，一定程度上限制了应用服务商基于大模型进一步推动场景落地的创新效率，也因此急需补充Finetune和Plugin等能力。以微盟规划中基于自然语言交互方式来实现的店铺首页装修为例，就是需要大模型厂商进一步开放能力共同建设的场景之一。</p><p></p><p>基于此，微盟还在现场发布了融合大模型厂商、应用提供商和商家在内的“AI大模型应用激活函数”。按照该函数呈现的大模型应用发展曲线，只有大模型厂商提供包括“大模型基础、Finetune能力、模型调度及生态开放”等价值，类似微盟这样的“应用提供商”借助行业knowhow和应用场景迭代，以及融合海量商家的“个性化需求，场景和数据”才能最终激活AI大模型的智能应用。</p><p></p><p>用尹世明的话说，“激活函数激活了神经网络算法世界的智能，而微盟将携手大模型激活应用智能”。</p><p></p><p>就像建造一座城市，层出不穷的AI大模型，仅仅是基建的部分。要让AI惠及每个人、每个家庭、每个企业，还有待更多AI应用在大模型基础上拔地而起。AI应用的前景，同样不可估量。</p>",
    "publish_time": "2023-05-26 09:32:26",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "谈谈ByConity存储计算分离架构和优势",
    "url": "https://www.infoq.cn/article/eDuYRT4rzgHBpqfV1T49",
    "summary": "<p></p><h2>引言</h2><p></p><p>ByConity是一款字节跳动开源的云原生数仓引擎。它的一个重要优势是采用存储计算分离的架构，实现了读写分离和弹性扩缩容。这种架构确保读操作和写操作不会相互影响，使得计算资源和存储资源解耦，两者可以按需的且独立的扩缩容，确保资源高效利用，同时保证数据读写的强一致性。此外，ByConity支持多租户资源隔离功能，保证不同租户之间不会互相影响，更加适合多租户环境，同时ByConity采用主流的OLAP引擎优化，提供更加优异的读写性能。</p><p></p><p></p><blockquote>延伸阅读：<a href=\"https://www.infoq.cn/article/VKvhBbZq1OBtO3wF76Sf\">字节跳动开源ByConity：基于ClickHouse的存算分离架构云原生数仓</a>\"</blockquote><p></p><p></p><h2>ByConity技术背景</h2><p></p><p>ClickHouse是一个开源的列式数据库管理系统，它采用Shared-Nothing的架构，这种架构有以下典型特点：</p><p>每个节点独立管理一部分数据节点之间没有数据共享存储和计算紧耦合</p><p></p><p>它的查询执行大致分为两个阶段。第一阶段是每个节点独立处理它管理的数据分片，负责I/O、查询和计算。第二阶段是Coordinator节点将第一阶段每个节点计算的结果进行默认汇总，然后返回给客户端。这种架构可以实现高性能和可扩展性，特别适合固定业务规模的情况下进行高并发查询。同时，由于节点之间无数据共享，扩展性也比较容易实现，可以实现线性扩展。</p><p><img src=\"https://static001.geekbang.org/infoq/b8/b8c5c153a3c6fcd1c56bd927a344959b.png\" /></p><p>图 1 Clickhouse架构</p><p></p><p>但在实际使用过程中，我们发现如下问题：</p><p>扩缩容代价高：对于快速发展的业务，需要频繁进行扩容操作，而数据的reshuffle以及数据搬迁会影响实际读写操作多租户之间可能会互相影响：不同业务之间可能会有不同的业务特征，导致某些业务在特定时间点上占用了整个集群的资源池，影响其他租户读写操作受到影响：每个节点都必须负责一部分读写任务，当节点资源使用较多时，查询性能可能会受到影响资源使用情况会存在浪费：特别是在多个中小型业务共用同一个集群的情况下，可能会存在资源预估不足或者其他情况导致资源浪费</p><p></p><h2>ByConity架构介绍</h2><p></p><p></p><p>基于以上使用过程中发现的问题，我们在开源的ClickHouse架构基础上进行了升级，引入了计算与存储分离的架构，将原本计算和存储分别在每个节点本地管理的架构转换为在分布式存储上统一管理整个集群内所有数据的架构，使得每个计算节点成为一个无状态的单纯计算节点，并利用分布式存储的扩展能力和计算节点的无状态特性实现动态的扩缩容。此外，该架构还支持多租户隔离和读写任务的分离。实现了以下优势：</p><p>高弹性、高扩展性：计算和存储独立扩缩容多租户隔离：不同租户使用不同计算组读写分离：读写使用不同的计算资源</p><p></p><h3>存储计算分离架构</h3><p></p><p></p><p>从总体架构上讲，ByConity的存储计算分离架构如图 3所示，主要分为三层：共享服务层、计算层和云存储层。</p><p>共享服务层：主要组件是Cloud Service，是所有查询的入口，会对查询进行解析和优化，生成Query Plan然后下发给计算层处理。它同时相当于一个协调者的角色，负责一些服务、组件和事务的管理，也包含元数据的管理--Metadata Storage。计算层：主要是计算资源组--Virtual Warehouse（简称VW） ，计算资源组件可以动态启停，包括一个 Read VW 和一个 Writer VW。在 Read VW 中，每个 Worker 节点都有一个 Optimizer 和 Runtime 模块，以及一个 Disk Cache 模块来缓存部分数据以减少对分布式存储远端系统的访问，热点数据存储在 Disk Cache 模块中。在 Writer VW 中，数据会先以 ClickHouse 格式写入本地磁盘--Local Disk，然后再批量写入分布式存储，以提高写入性能。云存储层：是分布式统一存储系统，ByConity所有的数据都存储在这一层，在计算层进行查询时，会从云存储层中读取数据。云存储层的具体实现可以采用各种云存储服务，如HDFS、S3等。</p><p></p><p>除此之外，ByConity还包括一些共享的服务组件，如TSO、Daemon Manager、Resource Manager、后台任务和服务发现等组件。</p><p><img src=\"https://static001.geekbang.org/infoq/ca/ca658cf185d98b015c968c0e6a1e0cc4.png\" /></p><p>图 2 ByConity存储计算分离架构</p><p></p><h2>ByConity架构优势</h2><p></p><p></p><h3>资源隔离</h3><p></p><p>在大数据场景下，资源隔离是非常重要的，它可以提高系统的资源利用率、性能、安全性、可靠性和灵活性，帮助企业解决诸多业务痛点问题，如：</p><p>避免不同租户之间的资源冲突，提高数据安全性和租户使用体验；根据不同的业务场景需求分配不同的资源，提高资源利用率和性能；提高数据安全性，通过隔离不同的数据处理任务或数据库实例，限制访问权限；实现弹性扩缩容，根据不同的业务和数据量需求动态调整资源分配；提高系统的可靠性和稳定性，隔离故障，避免对整个系统造成影响。</p><p></p><p>但ClickHouse并没有对资源隔离做专门的设计，它是通过集群和replication的配置、load_balanding策略，以及指定本地表的写入做到一定的读写分离。对于冷热分离，ClickHouse是通过配置存储策略和使用TTL、TO DISK、TO VOLUME等技术实现。</p><p></p><p>ByConity通过存储计算分离的架构设计很好的实现了资源隔离，它引入了计算组（Virtual Warehouse 简称：VW）的概念，Virtual Warehouse是计算资源的虚拟组织，可以将计算资源按需划分为多个虚拟集群，在不同租户之间提供物理资源隔离。同时，把原本与计算资源耦合的存储统一到分布式存储管理后，计算资源与存储资源是完全解耦的且无状态的，从而计算节点主要承担的是计算任务，这些任务可以是数据写入、用户查询，也可以是一些后台任务。因此ByConity通过部署和使用Virtual Warehouse来实现多级资源隔离：</p><p><img src=\"https://static001.geekbang.org/infoq/2b/2ba301f680677164d525b30db27b0336.png\" /></p><p>图 3 ByConity计算组</p><p></p><p>租户隔离：ByConity 的Virtual Warehouse是无状态的，可以根据不同的业务和场景进行按需的创建，且每个Virtual Warehouse是独占系统资源，所以会很轻松的实现多租户的隔离。当然，为了提高资源利用率，ByConity也支持Virtal Warehouse之间的资源租借，实现资源共享。计算资源隔离：Virtual Warehouse使得计算资源做到物理层面的隔离，且每个Virtual Warehouse可以包含多个 worker，可以被灵活创建。</p><p></p><h3>读写分离</h3><p></p><p>除了资源隔离外，我们还希望达到读写的分离，读写的分离是将读操作和写操作分别处理。因为在实际业务中，读操作和写操作对硬件资源的要求，以及时间的要求是不同的，所以我们希望用不同的硬件资源去执行读操作和写操作，避免读写互相影响，影响系统性能和浪费资源，具体好处如下：</p><p>降低存储成本：将读操作和写操作引导到不同的存储节点上，避免不必要的数据复制和冗余。提高查询效率：将读操作引导到专门的读节点上，减少查询等待时间，从而提高数据处理效率和用户体验。降低网络成本：将读操作引导到离用户更近的读节点上，减少数据传输的距离和网络成本。提高系统可用性：将读操作和写操作分别引导到不同的节点上，当某个节点发生故障时，只会影响到该节点上的读或写操作，不会影响到整个系统的可用性</p><p></p><p>ByConity可以通过Virtual Warehouse实现读写分离，用户可以通过指定读操作和写操作使用哪个Virtual Warehouse，系统会自动将不同的读写请求转发。例如Insert操作使用专门用于写入的计算组，Select操作使用专门用于读取的计算组，读写作业之间不会相互影响。但由于ByConity使用了统一的分布式存储，必然会存在性能的问题，这里ByConity是通过本地缓存（Local Cache）去解决的。</p><p></p><h3>本地缓存</h3><p></p><p>对于大容量的本地缓存管理，ByConity使用Bucket-LRU算法，它是在LRU算法的基础上进行了优化，会将缓存中的数据块分为多个桶，每个桶中保存一定数量的数据块，并对每个桶使用LRU算法进行淘汰。这样可以将缓存中的数据块分散到多个桶中，从而降低了缓存淘汰的频率，同时也减少了LRU算法的开销。即使在计算组扩缩容等导致网络拓扑发生变化时，也依然使用这种机制，避免数据的reshuffling。</p><p><img src=\"https://static001.geekbang.org/infoq/21/21c80998c1dd65ef06ed0b840f4116e9.jpeg\" /></p><p>图 4 ByConity的缓存力度 Segment</p><p></p><p>针对缓存的粒度，ByConity引入Segment概念，如图4，它是一个介于文件为单位和压缩块为单位的一个缓存粒度，大小可配置，并且适合文件存储。Segment是由多个 Mark 组成的，每个 Mark 包含多个压缩块。当查询需要读取某个Segment时，可以先检查缓存中是否存在该Segment，如果存在，则直接从缓存中读取数据，否则需要从磁盘读取数据。在实际使用中，需要根据数据的特点和需求选择合适的缓存策略，并进行优化和调整，以达到最优的性能和效果。ByConity的缓存策略有以下几种：</p><p>按照Segment的访问频次：根据数据访问的频次来判断哪些数据是热点数据，并进行缓存。按照Segment的访问范围：有些数据虽然访问频次不高，但是其查询范围较大，也需要被缓存。根据数据更新时间来决定热点数据：对于实时表等场景，新过来的数据往往是热点数据，需要被缓存。基于统计信息来优化缓存策略（开发中）：根据统计信息来决定哪些数据是热点数据，需要被缓存。</p><p></p><p>ByConity的本地缓存的主要目的是在分布式存储中，通过使用较少成本（容量）的本地高速缓存盘，来缓存数据以减少网络读取带来的性能延迟增加问题。本地缓存的使用可以提高数据的访问速度和响应速度，从而减少对网络的依赖，降低系统的延迟，提高系统的性能和稳定性。</p><p></p><h3>无感扩缩容</h3><p></p><p></p><p>随着业务数据翻倍增长，必须通过不断的扩容支撑业务发展，但在ClickHouse的基础上扩容的成本很高，这是因为ClickHouse从架构上没有专门考虑扩缩容，导致需要运维同学手动或者通过自动化脚本去创建新的ClickHouse节点和迁移副本数据来完成扩容，因此存在时间成本和迁移结果校验的问题。再者，在扩容中需要将新的分片部署到新的节点上，这会导致数据不再均衡，需要通过数据再均衡来解决。</p><p></p><p>ByConity的存储计算分离架构可以天然解决这个问题，能实现业务无感的扩缩容。ByConity扩容分为两种：一种是纵向扩容，即调整Worker的 CPU 核数和内存大小；另一种是横向扩容，通过增、减Worker的数量，提升系统并发能力。这些依然通过ByConity的Virtual Warehouse和Worker去实现：</p><p></p><p>一方面资源管理器（Resource Manager）负责对计算资源进行统一的管理和调度，能够收集各个计算组的性能数据，资源使用量，为读写任务和后台任务动态分配资源并进行扩缩容，提高资源使用率。ByConity 的组件都已经容器化，通过调整 Kubernets 的 replica 数量可以非常方便的对指定的计算组进行扩缩容。除此之外，还可以结合计算组资源使用量，通过设置 kubernets 的扩缩容阈值实现动态扩缩容。另一方面，ByConity的元数据和数据存储在远端，计算节点的无状态化使扩缩容变得十分轻量，只需等计算实例启动完成，即可立即服务，无需额外的数据迁移开销，实现实时扩缩容。</p><p></p><h2>ByConity使用场景</h2><p></p><p></p><p>ByConity 使用大量成熟 OLAP 技术，例如列存引擎、MPP 执行、智能查询优化、向量化执行、Codegen、Indexing、数据压缩，主要用于 OLAP 查询和计算场景。在实时数据接入、大宽表聚合查询、海量数据下复杂分析计算、多表关联查询场景下有非常好的性能。</p><p></p><p></p><p>表 1</p><p></p><h2>总结和展望</h2><p></p><p></p><p>总结来说ByConity使用了存储计算分离的架构，且在多个方面进行了优化和升级，具有以下的优势和特性：</p><p>资源隔离：对不同的租户进行资源的隔离，租户之间不会受到相互影响。读写分离：计算资源和存储资源解耦，确保读操作和写操作不会相互影响。弹性扩缩容：支持弹性的扩缩容，能够实时、按需的对计算资源进行扩缩容，保证资源的高效利用。数据强一致：数据读写的强一致性，确保数据始终是最新的，读写之间没有不一致。高性能：采用主流的OLAP引擎优化，例如列存、向量化执行、MPP执行、查询优化等提供优异的读写性能。</p><p></p><p>图 5是接下来ByConity未来发展规划图，未来我们计划从以下几个方面进行优化和改进：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/44/449344cf08c69d14b4163ea608563f7a.png\" /></p><p>图5 ByConity未来发展规划</p><p></p><p>支持分布式Disk Cache，一方面解决节点重启导致Local Cache丢失的问题，另一方面希望达到全局最优的Cache机制，提升Cache命中率。支持外表服务，例如Hudi和Iceberg等支持存储服务化，在ByConity存储数据层上，利用Spark引擎或Presto引擎的计算能力执行一些ETL任务等</p><p></p><h2>加入我们</h2><p></p><p></p><p>ByConity社区拥有大量的用户，同时是一个非常开放的社区，邀请大家和我们一起讨论共建，在Github上建立了issue：https://github.com/ByConity/ByConity/issues/2</p><p></p><p>延伸阅读：</p><p></p><p><a href=\"https://www.infoq.cn/article/VKvhBbZq1OBtO3wF76Sf\">字节跳动开源ByConity：基于ClickHouse的存算分离架构云原生数仓</a>\"</p><p></p>",
    "publish_time": "2023-05-26 10:04:14",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]