[
  {
    "title": "Java近期新闻：Spring Boot 3.2、Spring Pulsar 1.0、Hibernate 6.4、JEP 447",
    "url": "https://www.infoq.cn/article/3YlIPCkpt8cqREIQkVKH",
    "summary": "<p></p><h4>OpenJDK</h4><p></p><p></p><p>在结束了评审之后，JEP 447（<a href=\"https://openjdk.org/jeps/447?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">super()前置语句（预览）</a>\"），已经从Proposed to Target进入到Targeted（ JDK 22）状态。这个 JEP 来自<a href=\"https://openjdk.org/projects/amber/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Project Amber</a>\"，提议允许在构造函数的 this() 或 super() 之前出现不引用正在创建的实例的语句并保留构造函数现有的安全性和初始化保证。Oracle技术顾问成员<a href=\"https://www.linkedin.com/in/gavin-bierman-a0173075/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Gavin Bierman</a>\"为 Java 社区提供了这个 JEP 的<a href=\"https://cr.openjdk.org/~gbierman/jep447/jep447-20230420/specs/statements-before-super-jls.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">初始规范</a>\"，供社区评审并提供反馈意见。</p><p></p><p>JEP 461（<a href=\"https://openjdk.org/jeps/461?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Stream Gatherers（预览）</a>\"）已经从Candidate计入到Proposed to Target（ JDK 22）阶段。这个 JEP 提议增强 Stream API，让其支持自定义中间操作。“流式管道操作将可以通过现有内置中间操作不易实现的方式转换数据。”更多关于该 JEP 的细节可在Oracle Java 平台组软件架构师<a href=\"https://www.linkedin.com/in/viktorklang/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Viktor Klang</a>\"撰写的<a href=\"https://cr.openjdk.org/~vklang/Gatherers.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">原始设计文档</a>\"中找到。评审于2023年11月29日结束。</p><p></p><p>JEP 462（<a href=\"https://openjdk.org/jeps/462?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">结构化并发（第二次预览）</a>\"）已经从Candidate计入到Proposed to Target（ JDK 22）阶段。这个 JEP 建议在 JDK 22 中重新预览该 API，以获取自前一轮预览以来更多的反馈：JEP 453（<a href=\"https://openjdk.org/jeps/453?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">结构化并发（预览）</a>\"，已在 JDK 21 中发布）。这个功能通过引入结构化并发来简化并发编程，“将不同线程中运行的相关任务组视为单个工作单元，从而简化错误处理和取消操作，提高可靠性并增强可观察性。”评审于2023年12月1日结束。</p><p></p><p>JEP 458（<a href=\"https://openjdk.org/jeps/458?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">启动多文件源码程序</a>\"）已经从Candidate计入到Proposed to Target（ JDK 22）阶段。这个 JEP 提议增强 Java Launcher，可以执行作为一个或多个 Java 源代码文件提供的应用程序，让小型应用可以在延迟完整项目设置的情况下逐渐过渡到大型应用。评审于2023年12月1日结束。</p><p></p><p></p><h4>JDK 22</h4><p></p><p></p><p><a href=\"https://openjdk.org/projects/jdk/22/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">JDK 22</a>\" <a href=\"https://jdk.java.net/22/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">早期访问构建版本</a>\"的<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-22%2B25?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Build 25</a>\"已发布，其中包含来自Build 24的<a href=\"https://github.com/openjdk/jdk/compare/jdk-22%2B24...jdk-22%2B25?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">更新</a>\"，修复了各种<a href=\"https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2022%20and%20%22resolved%20in%20build%22%20%3D%20b25%20order%20by%20component%2C%20subcomponent&amp;accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">问题</a>\"。有关此版本的更多详细信息，请参阅<a href=\"https://jdk.java.net/22/release-notes?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">版本说明</a>\"。</p><p></p><p>对于<a href=\"https://openjdk.org/projects/jdk/22/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">JDK 22</a>\"，开发者可以通过<a href=\"https://bugreport.java.com/bugreport/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Java Bug Database</a>\"报告 Bug。</p><p></p><p></p><h4>Spring Framework</h4><p></p><p></p><p><a href=\"https://spring.io/projects/spring-boot?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Spring Boot</a>\" 3.2.0<a href=\"https://spring.io/blog/2023/11/23/spring-boot-3-2-0-available-now?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">发布</a>\"，包含了bug修复、文档改进、依赖项升级和新特性，例如：支持<a href=\"https://www.oracle.com/cloud/free/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Oracle Free</a>\"，它是<a href=\"https://www.oracle.com/database/technologies/appdev/xe.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Oracle XE</a>\"的替代品，包含了Testcontainers和Docker Compose；修改了参数名发现的方式，通过解析字节码替代推断参数名；支持Jetty 12；支持Spring Framework 6.1中引入的新<a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestClient.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">RestClient</a>\"接口。有关此版本的更多详细信息，请查看<a href=\"https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.2-Release-Notes?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">版本说明</a>\"。</p><p></p><p>类似地，Spring Boot <a href=\"https://spring.io/blog/2023/11/23/spring-boot-3-1-6-available-now?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">3.1.6</a>\"、<a href=\"https://spring.io/blog/2023/11/23/spring-boot-3-0-13-available-now?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">3.0.13</a>\"和<a href=\"https://spring.io/blog/2023/11/23/spring-boot-2-7-18-available-now?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">2.7.18</a>\"包含了bug修复、文档改进、依赖项升级，并新增了一个特性，即将默认的Cloud Native Buildpacks（CNB）升级为<a href=\"https://github.com/paketo-buildpacks/builder-jammy-full?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Paketo Jammy</a>\"，因为Paketo Bionic Builder被<a href=\"https://blog.paketo.io/posts/paketo-bionic-builder-is-unsafe/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">声明为</a>\"不安全的。有关这些版本的更多详细信息，请查看<a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v3.1.6?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">3.1.6</a>\"、<a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v3.0.13?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">3.0.13</a>\"和<a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.7.18?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">2.7.18</a>\"的版本说明。</p><p></p><p><a href=\"https://spring.io/projects/spring-framework?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Spring Framework</a>\" 6.1.1<a href=\"https://spring.io/blog/2023/11/23/spring-framework-6-1-1-available-now?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">发布</a>\"，修复了bug、改进了文档，并引入了新特性，例如：在<a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/util/StreamUtils.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">StreamUtils</a>\"类的copy(String)方法中跳过不必要的缓冲区分配；解决了<a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/Resource.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">JDK 17</a>\"中isReadable()方法并发泄漏大量非堆内存的问题。有关此版本的更多详细信息，请查看<a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v6.1.1?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">版本说明</a>\"。</p><p></p><p><a href=\"https://spring.io/projects/spring-security?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Spring Security</a>\" 6.2.0<a href=\"https://spring.io/blog/2023/11/20/spring-security-6-2-goes-ga?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">发布</a>\"，包含了bug修复、依赖项升级和新特性：在<a href=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/authorization/method/AuthorizationManagerBeforeReactiveMethodInterceptor.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">AuthorizationManagerBeforeReactiveMethodInterceptor</a>\"和<a href=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/authorization/method/AuthorizationManagerAfterReactiveMethodInterceptor.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">AuthorizationManagerAfterReactiveMethodInterceptor</a>\"类中支持Kotlin协程；简化了配置OAuth2客户端组件模型。有关此版本的更多详细信息，请查看<a href=\"https://github.com/spring-projects/spring-security/releases/tag/6.2.0?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">版本说明</a>\"和<a href=\"https://docs.spring.io/spring-security/reference/whats-new.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">新特性</a>\"页面。</p><p></p><p><a href=\"https://spring.io/projects/spring-authorization-server?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Spring Authorization Server</a>\" 1.2.0<a href=\"https://spring.io/blog/2023/11/21/spring-authorization-server-1-2-goes-ga?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">发布</a>\"，包含了文档改进、依赖项升级和新特性，例如：允许在Spring Security的<a href=\"https://github.com/spring-projects/spring-security/blob/main/oauth2/oauth2-core/src/main/java/org/springframework/security/oauth2/core/AuthorizationGrantType.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">AuthorizationGrantType</a>\"类中为AUTHORIZATION_CODE和REFRESH_TOKEN授权类型配置可配置的刷新令牌策略；引入了Ahead-of-Time（AOT）优化或<a href=\"https://docs.spring.io/spring-framework/reference/core/aot.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">AOT提示</a>\"，用于解决使用GraalVM生成原始镜像失败的问题。有关此版本的更多详细信息，请查看<a href=\"https://github.com/spring-projects/spring-authorization-server/releases/tag/1.2.0?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">版本说明</a>\"。</p><p></p><p><a href=\"https://spring.io/projects/spring-graphql?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Spring for GraphQL</a>\" 1.2.4<a href=\"https://spring.io/blog/2023/11/21/spring-for-graphql-1-2-4-released?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">发布</a>\"，包含了bug修复、文档改进、依赖项升级和新特性，例如：改进了在<a href=\"https://github.com/spring-projects/spring-graphql/blob/main/spring-graphql/src/main/java/org/springframework/graphql/client/ResponseMapGraphQlResponse.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">ResponseMapGraphQlResponse</a>\"类中解析GraphQL <a href=\"https://javadoc.io/static/com.graphql-java/graphql-java/21.0/graphql/language/SourceLocation.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">SourceLocation</a>\"类的line和column属性；在<a href=\"https://github.com/spring-projects/spring-graphql/blob/main/spring-graphql/src/main/java/org/springframework/graphql/data/method/annotation/support/ArgumentValueValueExtractor.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">ArgumentValueValueExtractor</a>\"类中使用isOmitted()方法而不是<a href=\"https://github.com/spring-projects/spring-graphql/blob/main/spring-graphql/src/main/java/org/springframework/graphql/data/ArgumentValue.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">ArgumentValue</a>\"类的isPresent()方法来实现null 参数验证。有关此版本的更多详细信息，请查看<a href=\"https://github.com/spring-projects/spring-graphql/releases/tag/v1.2.4?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">版本说明</a>\"。</p><p></p><p><a href=\"https://spring.io/projects/spring-integration?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Spring Integration</a>\" 6.2.0<a href=\"https://spring.io/blog/2023/11/22/spring-integration-6-2-goes-ga?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">发布</a>\"，包含了一些重要的变更，如：修复<a href=\"https://github.com/spring-projects/spring-integration/blob/main/spring-integration-hazelcast/src/test/java/org/springframework/integration/hazelcast/metadata/HazelcastMetadataStoreTests.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">HazelcastMetadataStoreTests</a>\"类中的竞态条件；<a href=\"https://docs.spring.io/spring-integration/docs/current/api/org/springframework/integration/ftp/session/FtpSession.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">FtpSession</a>\"类中更健壮的readRaw()和finalizeRaw()方法，消除由于<a href=\"https://www.serv-u.com/resources/tutorial/536-550-551-552-553-ftp-response-codes#:~:text=550%20FTP%20Response%20code,-A%20550%20response&amp;text=a%20local%20file.-,It%20is%20a%20permanent%20negative%20response%2C%20which%20means%20the%20client,not%20have%20access%20rights%20to.?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">550 FTP Response</a>\"错误引起的异常；由于MacOS上的未知延迟会导致测试失败，增加FTP <a href=\"https://github.com/spring-projects/spring-integration/blob/main/spring-integration-ftp/src/test/java/org/springframework/integration/ftp/inbound/RotatingServersTests.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">RotatingServersTests</a>\"类的超时时间。有关此版本的更多详细信息，请查看<a href=\"https://github.com/spring-projects/spring-integration/releases/tag/v6.2.0?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">版本说明</a>\"和<a href=\"https://docs.spring.io/spring-integration/reference/whats-new.html#whats-new?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">新特性</a>\"页面。</p><p></p><p><a href=\"https://spring.io/projects/spring-session?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Spring Session</a>\" 3.2.0<a href=\"https://spring.io/blog/2023/11/21/spring-session-3-2-goes-ga?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">发布</a>\"，包含了许多依赖项升级和一个新特性，即对于自定义实现<a href=\"https://docs.spring.io/spring-session/docs/3.2.0/api/org/springframework/session/web/http/CookieSerializer.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">CookieSerializer</a>\"接口中未设置rememberMeRequestAttribute属性的情况，改进了文档和日志记录。有关此版本的更多详细信息，请查看<a href=\"https://github.com/spring-projects/spring-session/releases/tag/3.2.0?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">版本说明</a>\"和<a href=\"https://docs.spring.io/spring-session/reference/whats-new.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">新特性</a>\"页面。</p><p></p><p><a href=\"https://spring.io/projects/spring-vault?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Spring Vault</a>\" 3.1<a href=\"https://spring.io/blog/2023/11/24/spring-vault-3-1-available?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">发布</a>\"，改进了文档、升级了依赖项并新增了特性，例如：在<a href=\"https://docs.spring.io/spring-vault/docs/current/api/org/springframework/vault/support/VaultTokenRequest.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">VaultTokenRequest</a>\"类支持HashiCorp <a href=\"https://www.hashicorp.com/products/vault?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Vault</a>\" role_name和entity_alias参数；新增了<a href=\"https://docs.spring.io/spring-vault/docs/current/api/org/springframework/vault/authentication/event/AuthenticationEventMulticaster.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">AuthenticationEventMulticaster</a>\"接口，用于管理多个<a href=\"https://docs.spring.io/spring-vault/docs/current/api/org/springframework/vault/authentication/event/AuthenticationEvent.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">AuthenticationEvent</a>\"和<a href=\"https://docs.spring.io/spring-vault/docs/current/api/org/springframework/vault/authentication/event/AuthenticationErrorEvent.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">AuthenticationErrorEvent</a>\"对象并向其发布事件。有关此版本的更多详细信息，请查看<a href=\"https://github.com/spring-projects/spring-vault/wiki/Spring-Vault-3.1-Release-Notes?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">版本说明</a>\"。</p><p></p><p><a href=\"https://spring.io/projects/spring-pulsar?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Spring for Apache Pulsar</a>\" 1.0.0<a href=\"https://spring.io/blog/2023/11/21/spring-for-apache-pulsar-1-0-0-goes-ga?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">发布</a>\"，带来了显著的变更，例如：<a href=\"https://github.com/spring-projects/spring-pulsar/blob/main/spring-pulsar/src/main/java/org/springframework/pulsar/core/PulsarAdministration.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">PulsarAdministration</a>\"类接受多个<a href=\"https://github.com/spring-projects/spring-pulsar/blob/main/spring-pulsar/src/main/java/org/springframework/pulsar/core/PulsarAdminBuilderCustomizer.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">PulsarAdminBuilderCustomizer</a>\"接口实例；避免Spring Boot依赖Spring for Apache Pulsar时的“鸡和蛋”问题。有关此版本的更多详细信息，请查看<a href=\"https://github.com/spring-projects/spring-pulsar/releases/tag/v1.0.0?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">版本说明</a>\"。</p><p></p><p><a href=\"https://spring.io/projects/spring-kafka?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Spring for Apache Kafka</a>\"和<a href=\"https://spring.io/projects/spring-amqp?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Spring for RabbitMQ</a>\" 3.1.0<a href=\"https://spring.io/blog/2023/11/21/spring-for-apache-kafka-spring-for-rabbitmq-3-1-releases-available?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">发布</a>\"，包含了bug修复、文档改进和依赖项升级。Spring for Apache Kafka的新特性包括：删除<a href=\"https://docs.spring.io/spring-kafka/docs/current/api/org/springframework/kafka/test/EmbeddedKafkaKraftBroker.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">EmbeddedKafkaKraftBroker</a>\"类的brokerListProperty属性设置，该设置可能导致在属性为null时抛出异常；提供了一种定义与<a href=\"https://docs.spring.io/spring-kafka/docs/current/api/org/springframework/kafka/annotation/KafkaListener.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">@KafkaListener</a>\"注解关联的<a href=\"https://docs.spring.io/spring-kafka/docs/current/api/org/springframework/kafka/config/ContainerCustomizer.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">ContainerCustomizer</a>\" Bean名称的方式。更多详细信息，请参阅<a href=\"https://github.com/spring-projects/spring-kafka/releases/tag/v3.1.0?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Apache Kafka</a>\"和<a href=\"https://github.com/spring-projects/spring-amqp/releases/tag/v3.1.0?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">RabbitMQ</a>\"的版本说明。</p><p></p><p><a href=\"https://spring.io/projects/spring-modulith?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Spring Modulith</a>\" 1.1.0和1.0.3<a href=\"https://spring.io/blog/2023/11/24/spring-modulith-1-1-ga-and-1-0-3-released?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">发布</a>\"，包含了Bug修复、依赖项升级和新特性，例如：使用Spring Framework的<a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/aot/BeanFactoryInitializationAotProcessor.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">BeanFactoryInitializationAotProcessor</a>\"接口而不是<a href=\"https://docs.spring.io/spring-modulith/docs/current/api/org/springframework/modulith/core/ApplicationModules.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">ApplicationModules</a>\"类在原生镜像上初始化执行器端点；Spring Data <a href=\"https://github.com/spring-projects/spring-data-mongodb/blob/main/spring-data-mongodb/src/main/java/org/springframework/data/mongodb/core/MongoTemplate.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">MongoTemplate</a>\"类中定义的updateFirst()方法不支持排序操作，开发者应该使用findAndModify()方法。有关此版本的更多详细信息，请查看<a href=\"https://github.com/spring-projects/spring-modulith/releases/tag/1.1.0?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">1.1.0</a>\"和<a href=\"https://github.com/spring-projects/spring-modulith/releases/tag/1.0.3?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">1.0.3</a>\"的版本说明。</p><p></p><p></p><h4>Eclipse Store</h4><p></p><p></p><p>Eclipse基金会发布了<a href=\"https://microstream.one/blog/article/eclipsestore-1-0-final-release-is-now-available/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">EclipseStore 1.0.0</a>\"，这是一个Java本地持久化库，从之前的<a href=\"https://github.com/microstream-one/microstream/releases/tag/08.01.01-MS-GA?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">MicroStream Storage 8.1.1</a>\"迁移而来，新版本首次由Eclipse基金会发布。有关此发布的更多详细信息，请查看<a href=\"https://github.com/eclipse-store/store/releases/tag/1.0.0?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">版本说明</a>\"。</p><p></p><p></p><h4>Quarkus</h4><p></p><p></p><p>Red Hat发布了<a href=\"https://quarkus.io/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Quarkus</a>\" <a href=\"https://quarkus.io/blog/quarkus-3-5-3-released/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">3.5.3</a>\"，其中包含了一些重要的变更，例如：<a href=\"https://github.com/quarkusio/quarkus/blob/main/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/multipart/MultipartFormDataOutput.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">MultipartFormDataOutput</a>\"类的HashMap切换到了<a href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/LinkedHashMap.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">LinkedHashMap</a>\"，以保持用户的输入顺序；确保在WebSocket注入器之前对GraphQL进行身份验证和授权。有关此版本的更多详细信息，请查看<a href=\"https://github.com/quarkusio/quarkus/releases/tag/3.5.3?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">更新日志</a>\"。</p><p></p><p>类似地，Quarkus 3.2.9.Final也已<a href=\"https://quarkus.io/blog/quarkus-3-2-9-final-released/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">发布</a>\"，包含了以下重要变更：解决了带有Throwable参数的<a href=\"https://github.com/quarkusio/quarkus/blob/main/independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/ServerResponseFilter.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">@ServerResponseFilter</a>\"注解在REST资源抛出异常时未被调用的问题；处理了通过<a href=\"https://github.com/quarkusio/quarkus/blob/main/extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/CacheResultInterceptor.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">CacheResultInterceptor</a>\"类缓存REST调用响应时发生的重复上下文混合问题。有关此版本的更多详细信息，请查看<a href=\"https://github.com/quarkusio/quarkus/releases/tag/3.2.9.Final?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">更新日志</a>\"。</p><p></p><p></p><h4>Hibernate</h4><p></p><p></p><p><a href=\"https://hibernate.org/orm/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Hibernate ORM</a>\" 6.4.0.Final<a href=\"https://in.relation.to/2023/11/23/orm-640-final/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">发布</a>\"，带来了一个新的@SoftDelete注解，用于支持软删除，删除与非删除对应值active/inactive；实现了在HQL和Criteria查询中处理数组的其余函数；支持在JDK Flight Recorder中编写Hibernate特定事件。</p><p></p><p><a href=\"https://hibernate.org/search/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Hibernate Search</a>\" 7.0.0的<a href=\"https://in.relation.to/2023/11/24/hibernate-search-7-0-0-CR2/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">第二个候选版本</a>\"发布，包括：Bug修复；与Jakarta EE、Hibernate ORM的<a href=\"https://docs.jboss.org/hibernate/orm/6.3/userguide/html_single/Hibernate_User_Guide.html#multitenacy-hibernate-TenantId?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">基于鉴别器的多租户</a>\"、Elasticsearch 8.11、OpenSearch 2.10和2.11兼容；依赖项升级到Hibernate ORM 6.4.0.Final和Apache Lucene 9.8。Hibernate Search 7.0.0.CR2需要JDK最低版本为11。</p><p></p><p></p><h4>Infinispan</h4><p></p><p></p><p><a href=\"https://infinispan.org/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Infinispan</a>\" 15.0.0.Dev05已<a href=\"https://github.com/infinispan/infinispan/releases/tag/15.0.0.Dev05?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">发布</a>\"，其显著变化包括：在Spring测试中使用Spring Framework的<a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/annotation/DirtiesContext.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">@DirtiesContext</a>\"注解来强制停止缓存管理器；改进了<a href=\"https://github.com/infinispan/infinispan/blob/main/core/src/test/java/org/infinispan/container/versioning/WriteSkewConsistencyTest.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">WriteSkewConsistencyTest</a>\"类，解决了随机出现失败问题；将<a href=\"https://jakarta.ee/specifications/jsonp/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Jakarta JSON Processing</a>\"的依赖从javax.*命名空间迁移到jakarta.*，以符合WildFly Elytron 2.x的要求。有关此版本的更多详细信息，请查看<a href=\"https://github.com/infinispan/infinispan/compare/15.0.0.Dev04...15.0.0.Dev05?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">问题列表</a>\"。</p><p></p><p>类似地，<a href=\"https://infinispan.org/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Infinispan</a>\" 14.0.21.Final也已<a href=\"https://github.com/infinispan/infinispan/releases/tag/14.0.21.Final?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">发布</a>\"，其显著变化包括：Java <a href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/concurrent/ConcurrentMap.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">ConcurrentMap</a>\"接口中的默认方法应确保在遇到错误时关闭迭代器；在实现虚拟线程方面的改进；创建用于测量节点之间延迟的指标。有关此版本的更多详细信息，请查看<a href=\"https://github.com/infinispan/infinispan/compare/14.0.20.Final...14.0.21.Final?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">问题列表</a>\"。</p><p></p><p></p><h4>JHipster</h4><p></p><p></p><p><a href=\"https://www.jhipster.tech/jhipster-lite/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">JHipster Lite</a>\" 0.49.0已<a href=\"https://twitter.com/pascalgrimaud/status/1727607069644136803?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">发布</a>\"，包含了Bug修复、依赖项升级和特性增强：GraalVM自动化构建；在<a href=\"https://github.com/jhipster/jhipster-lite/blob/main/src/main/resources/generator/server/springboot/mvc/dummy/feature/dummy.md?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Dummy</a>\"特性中添加了package-info.java文件。有关此版本的更多详细信息，请查看<a href=\"https://github.com/jhipster/jhipster-lite/releases/tag/v0.49.0?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">版本说明</a>\"。</p><p></p><p></p><h4>JBang</h4><p></p><p></p><p><a href=\"https://jbang.dev/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">JBang</a>\" 0.113.0和0.112.4带来了一些显著变化，例如：命令行新的展开方式，可以解析表达式内的依赖项并用类路径替换它（请参见下面的示例）；修复了通过--debug命令行参数提供自定义端口时仍然使用默认端口4004的问题；更新了docker-compose文件，修复测试代理需要身份验证的问题。有关这些版本的更多详细信息，请查看<a href=\"https://github.com/jbangdev/jbang/releases/tag/v0.113.0?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">0.113.0</a>\"和<a href=\"https://github.com/jbangdev/jbang/releases/tag/v0.112.4?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">0.112.4</a>\"的版本说明。</p><p></p><p>新的命令行展开特性允许开发者编写如下代码：</p><p></p><p> $ jbang sqlline@maxandersen -cp other args</p><p></p><p></p><h4>OpenXava</h4><p></p><p></p><p><a href=\"https://openxava.org/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">OpenXava</a>\" 7.2.0包含了Bug修复、依赖项升级和新特性，例如：支持JDK 21；改进日历，可以显示周或日；大量网络安全增强特性。有关此版本的更多详细信息，请查看<a href=\"https://github.com/openxava/openxava/releases/tag/7.2?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">版本说明</a>\"。</p><p></p><p></p><h4>Testcontainers for Java</h4><p></p><p></p><p><a href=\"https://github.com/testcontainers/testcontainers-java/blob/main/README.md?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Testcontainers for Java</a>\" 1.19.3已<a href=\"https://github.com/testcontainers/testcontainers-java/releases/tag/1.19.3?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">发布</a>\"，包含了Bug修复，例如：使用<a href=\"https://github.com/testcontainers/testcontainers-java/blob/main/core/src/main/java/org/testcontainers/containers/ContainerDef.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">ContainerDef</a>\"类注册缺失的默认网络别名；由于使用了<a href=\"https://github.com/testcontainers/testcontainers-java/blob/main/core/src/main/java/org/testcontainers/containers/GenericContainer.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">GenericContainer</a>\"类中定义的setImage()方法而导致的回归问题；以及在<a href=\"https://github.com/testcontainers/testcontainers-java/blob/main/modules/database-commons/src/main/java/org/testcontainers/ext/ScriptScanner.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">SQLScriptScanner</a>\"中出现的大型字符串文本和PostgreSQL标识符的Bug。</p><p></p><p></p><h4>Gradle</h4><p></p><p></p><p><a href=\"https://gradle.org/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Gradle</a>\" 8.5.0的<a href=\"https://github.com/gradle/gradle/releases/tag/v8.5.0-RC4?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">第四个候选版本</a>\"带来了一些新特性，例如：完全支持使用JDK 21进行编译、测试和运行；<a href=\"https://docs.gradle.org/8.5-rc-1/userguide/kotlin_dsl.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Kotlin DSL</a>\"的改进，包括<a href=\"https://docs.gradle.org/8.5-rc-1/release-notes.html#faster-first-use?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">更快的初次使用</a>\"和预编译Kotlin脚本插件的<a href=\"https://docs.gradle.org/8.5-rc-1/release-notes.html#catalog-precompiled?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">版本目录支持</a>\"；改进的错误和警告报告。有关此版本的更多详细信息，请查看<a href=\"https://docs.gradle.org/8.5-rc-4/release-notes.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">版本说明</a>\"。</p><p></p><p></p><h4>JCON World</h4><p></p><p></p><p><a href=\"https://2023.world.jcon.one/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">JCON World 2023</a>\"大会是由<a href=\"https://www.meetup.com/de-DE/jug-oberpfalz/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">Java User Group Oberpfalz</a>\"组织的国际在线Java社区大会，已于上周举行，来自Java社区的100多名<a href=\"https://2023.world.jcon.one/speaker?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">演讲者</a>\"在<a href=\"https://2023.world.jcon.one/schedule?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDE3NDEwNTAsImZpbGVHVUlEIjoiMWxxN3JQNmRYWGlMWUIzZSIsImlhdCI6MTcwMTc0MDc1MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.r5K_AhxXDCfnTPM4JAWZkoxrc0OS3-OzOguuXmUFS38\">三天</a>\"内做了主题演讲、组织了小时会和研讨会。</p><p></p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/11/java-news-roundup-nov20-2023/\">https://www.infoq.com/news/2023/11/java-news-roundup-nov20-2023/</a>\"</p>",
    "publish_time": "2023-12-06 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "度小满杨青：传统 AI 与大模型融合，引领金融科技创新浪潮",
    "url": "https://www.infoq.cn/article/Kmuok7Y278ktUSZox2PS",
    "summary": "<p>在金融科技领域快速发展的当下，人工智能（AI）扮演着日益重要的角色。虽然生成式AI技术和大模型时代备受关注，但传统AI在金融行业中的应用依然至关重要，对业务增长的推动作用不可小觑。如今，我们正步入一个将传统AI技术与大模型紧密结合的新时代。这种融合不仅极大提高了金融服务的效率和智能化水平，同时也为金融业的运营模式带来了革命性的改变。</p><p></p><p>在近期举行的<a href=\"https://fcon.infoq.cn/2023/shanghai/\">FCon全球金融科技大会</a>\"上，度小满技术委员会执行主席，数据智能部总经理杨青发表了主题为《人工智能在金融行业中的创新应用》的演讲。他深入分析了传统AI在金融领域的持续影响力，同时探讨了在大模型时代下，如何有效结合传统AI与新兴技术，以应对未来挑战。</p><p></p><p>杨青指出：“人工智能正在步入一个新的发展阶段，金融智能化的时代已然到来。在这一过程中，传统人工智能，尤其是有监督机器学习，依旧展现出巨大潜力，它在推动金融业务增长方面发挥着不可替代的作用。”</p><p></p><p>同时，杨青强调：“生成型人工智能的能力范围在不断扩展，它正从局部应用转变为全面赋能，从而重塑整个金融行业并创造巨大价值。未来，人与机器的合作关系将经历深刻变革，AI将在重塑金融业乃至整个社会的生产关系中发挥关键作用。”</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/05/05a9d504e66f0ea03726261ba7edece4.jpeg\" /></p><p></p><p>以下内容为演讲分享正文：</p><p></p><p>今天，我将分享人工智能在金融行业中的创新应用。尽管这一主题看似常见，但由于人工智能的快速发展，我们总有新的思考和发现。本次分享分为四个部分：</p><p>金融科技发展回顾：首先，我将快速梳理金融科技的发展历史，同时分析当前阶段我们面临的机遇与挑战。传统人工智能在业务增长中的作用：接下来，我将探讨传统人工智能，特别是有监督机器学习如何推动业务增长。生成式人工智能的探索与实践：鉴于任何关于人工智能的讨论都不可避免地涉及AIGC，我也将分享我们在生成式人工智能领域的最新探索和实践。未来展望：最后，我将提出对未来的一些思考和预测。</p><p></p><h4>人工智能与金融行业：正当其时，大有可为</h4><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/66/66efb35eb67d46a4e30d56dd1b6cc226.png\" /></p><p></p><p>金融科技的发展经历了三个阶段，每个阶段都有着其独特的特点。</p><p></p><p>第一阶段为信息化阶段，技术主要作为金融业务的基础设施，为金融机构提供支撑和保障，并实现后台开发和系统建设等功能。这一阶段的关键词是“驱动后台”。</p><p></p><p>第二阶段为数字化阶段，金融机构开始将线下业务向线上迁移，这不仅提升了用户体验和便捷性，同时也加速了金融业务的数字化进程。在这一阶段，科技逐渐从后台向前台转移，成为金融业务的核心驱动力。这一阶段的关键词是“驱动前台”。</p><p></p><p>第三阶段为数智化阶段，随着人工智能技术的不断发展，金融业务逐渐与人工智能深度结合，渗透到业务的每一个环节。大数据、风控智能、获客、营销、投顾等领域也逐渐实现了技术与业务的融合和创新。这一阶段的主题是“技术与业务的融合和技术创新驱动业务变革”。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d8/d84e2721661839bce1eb104acbf7950f.png\" /></p><p></p><p>在当前阶段，数字化转型已进行一段时间，但我们仍面临许多机遇和挑战。</p><p></p><p>机遇方面，首先是政策层面的显著机遇。新一代人工智能发展规划、十四五数字经济发展规划，以及中央金融工作会议都鼓励科技金融的发展，特别是数智化以增强金融科技含量；其次是数据、算力和算法的共同进步。</p><p></p><p>在讨论数据层面时，我们可以从宏观和微观两个角度来观察。宏观层面上，整个数据市场的规模正在不断扩大，数据资源日益丰富，流通机制也变得更加明确和高效。具体来说，中国的数据市场规模已经呈现出爆炸式增长。截至2020年，中国大数据市场的规模已达到5000多亿，年化增长率超过20%。同时，共享流通机制也得到显著改善，例如去年年底，已有48家数据交易机构支持的共享调用次数超过5000亿次。此外，国家数据局的成立对构建完整的数据流通体系和激活数据元素生产具有重大意义。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c5/c5d768be978995b7acef6c265bf932d4.png\" /></p><p></p><p>从微观层面来看，随着数字化转型的加速，金融领域的数据生产和利用正在迅速增长。比如，用户在使用产品过程中产生的行为数据，以及他们主动上传的信息，都为机器学习和人工智能提供了丰富的数据标签。以用户风险标签为例，这些由用户行为积累而来的标签，能够提高我们模型和算法的准确率。随着模型效果的提升，我们能够为用户提供更优质的服务，从而吸引更多用户，形成一个正向的飞轮效应。</p><p>&nbsp;</p><p>在算力方面，我们可以观察到中国在这一领域正在迎来一个新的发展阶段，得益于政策的支持和指导。近期，工业和信息化部联合发布了关于算力技术的设置和高质量发展的指导意见，标志着中国算力发展进入了一个新时期。</p><p></p><p>在过去五年中，我国的算力总规模平均年增长率接近30%，在处理复杂任务的速度、大规模并行计算能力以及解决复杂问题的能力方面均有显著提升。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/9d/9d5b69fa6043e53d46b55cf5da8d6448.png\" /></p><p></p><p>在算法层面，首先，算法技术的不断更新和迭代显著提升了我们的原有业务效果，其中最显著的例子是大数据风控。最初，大数据风控主要依赖于人工规则，随后我们发展到使用逻辑回归模型。随着技术的进步，我们开始采用更复杂的模型，如XGBoost，甚至进一步发展到复杂的深度学习算法。这些算法的迭代每次都显著提升了效果，促进了业务增长；第二个方面是新技术和新场景的出现加速算法创新，这里有两个关键例子：一是因果推断的应用，这是一种新技术，它在金融场景中的应用可以大幅提升我们的经营效率；二是时序网络的应用。鉴于用户具有大量的时序行为信息，我们通过构建复杂的时序网络，有效预测用户未来的需求和流失情况，特别是在存量市场中，这极大地帮助提升了用户留存率。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/fa/faa89e631614f675762860e8b755c5b4.png\" /></p><p></p><p>第三个重要的机遇是基于深度学习的生成式人工智能的发展。在过去六年中，人工智能技术的发展经历了迅猛的变革，尤其是从2017年的Transformer模型到去年底ChatGPT产品的推出，生成式AI技术已经得到了广泛关注。这个领域的发展呈现出两个显著的趋势：一是模型技术的更新迭代速度越来越快，二是模型的多模态表达能力逐渐提高；大模型的能力不断增强，为大模型带来了更多的应用想象力。回归到金融行业本身，它具有三个显著特点。首先，金融是一个数据驱动的行业。</p><p></p><p>其次，金融领域存在较高的专业知识门槛，不同的子领域，如信贷、保险和理财，各自有着独特的特点和要求。最后，金融业务流程通常较为复杂，涉及大量的人工操作和决策过程。这些特性与生成式人工智能的核心能力——理解、记忆和规划等高度契合。因此，我们认为金融行业是生成式人工智能的理想应用场景之一。金融与生成式AI的结合不仅能够充分利用AI的这些能力，还有可能打开更多的创新空间和可能性。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c9/c9f9a7b6a222df4a30fc32ee3acc4dec.png\" /></p><p></p><p>除了迎接机遇，我们还必须应对许多挑战。首先，数据合规和隐私保护是金融领域中的重大问题，这是因为金融数据通常包含敏感信息，因此必须遵守相关法规和规定；其次，我们必须努力吸引、保留和培养具备金融和人工智能双重专业知识的人才，这是一项极具挑战性的任务，因为这些专业知识在不断变化和发展；另一个挑战是在技术变革下的人机协作，这要求人们学会如何与机器交互和协作，以提高工作效率和生产力。这涉及到个人技能的提升和组织文化的建设，未来的工作流程可能更多涉及人与机器的交流，这对组织来说是一个重要的适应过程。此外，组织变革也是一个挑战，随着智能体（Agent）的出现，协作关系和业务流程可能会发生巨大变革。</p><p></p><h4>开始的结束：厚积薄发，传统式人工智能驱动金融业务</h4><p></p><p>尽管最近&nbsp;AIGC&nbsp;非常火爆，但我认为在传统时代，传统的有监督机器学习仍然拥有巨大潜力。目前，传统式人工智能已经在金融的每一个主要业务环节中得到深入集成，包括人脸识别、客户服务、营销和获客等方面。</p><p>以信贷为例，我们面临获客、风控、经营三大核心业务难题，而人工智能技术为解决这些问题提供了有效的手段。</p><p>首先，智能获客的挑战在于如何更有效地获取目标客户并提升获客效率；其次，大数据风控的关键在于如何提升风险识别能力，从而帮助降低风险；最后，第三个挑战是在客户经营阶段如何更好地管理客户，提供个性化的信贷额度和利率。传统方法在处理这些问题时，可能导致成本高、效率低下，且效果难以保证。通过运用AI技术，我们能够有效地赋能上述业务流程，解决这些难题。那么如何运用不同的技术手段来解决一系列问题呢？</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4f/4f73506fa824e9aff7acc4962ad4857d.png\" /></p><p></p><p>首先是NLP技术在大数据风控领域的应用。在日常运作中，我们处理大量文本信息，包括用户上传的合同、沟通对话以及征信报告中的文字。这些文本通常非结构化且信息稀疏，使得提取有价值的变量变得复杂。起初，我们通过人工统计词频来分析这些文本，如通过计数特定的风险词汇来评估风险。但这种方法对语义的深层理解有限。</p><p></p><p>例如，虽然能通过风险词汇识别潜在的不良用户，但无法准确洞察用户的真实意图或行为。</p><p>为了克服这一限制，我们引入了更先进的NLP技术，比如基于语义的模型。例如，词袋模型不仅考虑统计信息，还引入了语义量化，使我们能更有效地处理和理解长文本。此外，我们还引入了注意力机制，以学习长文本序列中的关键特征。最近，我们进一步发展了基于特定领域的预训练模型，这些模型专门针对风控领域的文本处理需求。与早期方法相比，这些模型在文本处理效果上取得了显著提升，大约提高了数倍。</p><p></p><p>其次是图机器学习在信贷领域的应用。对于金融企业而言，征信报告的重要性不言而喻，它包括了用户的借款行为、查询历史等关键信息。最初，风险评估主要依赖于从征信报告中人工提取特征，大概可能有十几维变量，使用逻辑回归进行建模。然而，这种传统方法未能充分利用报告中丰富的数据。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/26/266605ac31b4804a5dfd7ac4d2e91871.png\" /></p><p></p><p></p><p>为了深入挖掘征信报告的潜力，我们进入了人工特征衍生阶段。在这一阶段，结合对征信报告和业务的深入理解，我们从原始数据中衍生出了几百到上千维的特征，使用XGBoost模型进行风险评估，从而提高了预测的精度和效率。</p><p>随后，我们进一步发展到机器自动衍生特征的阶段。这个阶段，我们利用自动化的特征衍生框架，能够从一份征信报告中提取出千万维度的特征。考虑到这些特征的庞大数量，我们采用了有监督的机器学习方法，自动筛选出最具有价值的特征，最终从一份征信报里构建出一个含约40万维的有效特征，大大提高了风险评估的准确性和效率。</p><p></p><p>最终，我们转向深度学习和图机器学习阶段，专注于征信报告中的文本信息解析和报告间的关系分析。我们将单个征信报告视作一个图结构，深入分析各种关系，如企业间的投资和流水关系，以及报告内部的动态变化。这一新阶段的引入，不仅提升了征信报告的识别能力，也为风险评估带来了革命性的突破。今年3月，我们的项目因其在人工智能领域的创新贡献，荣获吴文俊人工智能科学技术进步奖。</p><p></p><p>通过这一系列的技术创新和应用，我们展示了如何在不增加额外数据的前提下，通过算法的创新和优化，显著提升征信报告的解读效果，并为业务带来了巨大的经济效益。</p><p>&nbsp;</p><p>第三个案例是计算机视觉技术的应用，它极大地提高了我们处理复杂信息的效率。例如，处理小微企业一年的交易流水，这些流水可能包含超过100页的PDF文件。通过智能文档处理技术，我们能够实现对这些多媒体材料的秒级审批，将人工审核效率提高了70%以上，同时显著降低了人工成本。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/2b/2b6ff40ff2860c62fd039341e0358ec4.png\" /></p><p></p><p>最后一个案例是因果推断技术在信贷领域的应用。通常情况下，因果推断被广泛应用于营销场景，比如通过模型决定发放什么样的优惠券以最大化收益。我们创新性地将因果推断技术应用于信贷领域，通过模型直接计算用户的贷款额度和利率。这种方法不仅提高了决策的准确性，也为业务增长注入了新动力。</p><p></p><p>首先解释一下因果推断。它是一种用于确定变量之间因果关系的技术。例如，在生活中我们可能会通过大数据样本分析运动与胆固醇之间的关系。初始数据可能显示运动量少的人胆固醇水平较低，这与我们的直觉相反。但当我们按年龄分组后，就会发现一个符合直觉的趋势：运动量少的人胆固醇水平反而更高。这种现象被称为辛普森悖论。</p><p></p><p>这在信贷领域存在类似的情况。例如，传统机器学习可能会错误地得出额度高风险低的结论，这显然是不符合实际的。在信贷领域，传统的额度分配方法通常基于用户画像、风险评级等静态因素，而未考虑到用户情况的动态变化。因果推断则能够识别这种风险迁移的动态变化，更精确地评估用户的综合情况。通过这种方法，模型直接决定的额度不仅更精准，也大幅提高了风险管理的效果。</p><p></p><h4>开始的开始：另辟蹊径，生成式人工智能重塑金融业务</h4><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/60/6095fe743c29534c719b2bc1161e7a8b.png\" /></p><p></p><p>接下来，我将探讨生成式人工智能与金融业务结合的方式，尤其关注大模型技术的应用。</p><p>这些技术不仅具备理解、生成和记忆逻辑的能力，还在金融场景中实现了更深层次的抽象，包括个性化内容生成、交互增强、预测模拟和强自动化等多项功能。这些功能被看作是专业知识的一部分，能够作为高效的辅助工具，解决专业领域问题并提高工作效率。以下是一些实际应用的案例：</p><p></p><p>营销场景：在这一领域，AI通过大模型实现智能获客，提高营销效率。例如，它能实时生成针对不同用户画像的个性化营销文案，实现千人千面的策略。当用户点击广告并申请服务时，AI&nbsp;即时分析用户需求和意图，匹配适合的产品，大幅提升获客效率。服务场景：大模型显著增强了对话机器人的能力，使得人机交流更自然。这不仅提高了人工坐席的工作效率（约25%），还能在特定场景中直接提供用户服务，同时保持高质量服务和增强服务能力。运营方面：金融业务本质上是数据驱动的。传统的数据分析和报表统计，既耗时又依赖于个人能力。大模型逐步降低了分析门槛，实现了日常统计和分析决策的自动化，提升了企业的经营效率。代码生成：这方面在内部应用中表现出色，它提高了大家的工作效率。它不仅协助生成和补全代码，还能进行代码检测。事实上，采纳率超过40%，研发效益提升近20%。智能办公：金融行业涉及广泛的专业知识，对新员工来说是一大挑战。通过行业大模型的应用，可以有效解决这一问题。它就像是员工身后的一个金融智能助手，辅助决策并提供相关知识，显著提升工作效率。大模型在风控中的应用：目前大模型不能直接用于风险决策，但结合传统有监督机器学习的风控决策引擎，可以有效提高了处理非结构化信息的能力。这种结合使得智能风控更加实时和主动。</p><p></p><h4>未来展望：传统与新兴融合，人工与AI协作</h4><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/28/28662cb06c38d683fd76872a0c5a24fc.png\" /></p><p></p><p>&nbsp;</p><p>首先，我更倾向于将传统&nbsp;AI&nbsp;视为业务流程的嵌入式模型。这些“嵌入式模型”可以视为业务的“肢体”，通过不断增强它们，我们能够推动整体业务的增长。相对地，生成型AI则像是一个“大脑”，拥有广泛的专业知识和高级功能，例如辅助绘图和编写代码。</p><p>&nbsp;</p><p>传统AI与生成型AI的结合，就如同肢体与大脑的协同，共同构成了我们金融业务的智能体。这个智能体具备规划和执行任务的能力，能够持续进行反馈和迭代。在金融领域，我们可以将复杂任务拆分为若干子任务，由人工和AI共同完成。这意味着未来的协作模式将超越传统的人与人互动，扩展到人与机器、机器与机器之间的合作。我认为，人工智能和人类的结合将深刻改变业务流程、组织架构，甚至是整个生产关系。</p><p>&nbsp;</p><p>回顾今天的演讲，我们首先指出，人工智能正在迎来新的发展阶段，金融智能化时代已经来临；其次，传统人工智能，特别是有监督机器学习，仍然拥有巨大的潜力，它能够持续推动金融业务的增长；第三，生成式人工智能正在逐渐扩展其能力范围，从局部应用走向全面赋能，重塑金融行业，创造出巨大的价值。最后，人与机器的合作关系将经历一次深刻的变革，AI将重塑金融业乃至全社会的生产关系。</p><p>&nbsp;</p><p>最后，介绍下度小满轩辕大模型，作为国内首个千亿级金融大模型，已在今年5月发布，并在后续几个月内陆续开源了其多个版本。它在国内知名榜单上排名第一，表现出色，尤其在金融知识问答领域的应用上。未来，我们计划在12月开源轩辕13B模型，并在1月发布一本总结我们在金融大模型实践经验的书籍。我们希望通过不断的开源工作，鼓励大家下载使用轩辕大模型，共同促进金融大模型行业的发展。谢谢大家。</p><p></p><p>活动推荐：</p><p>QCon 全球软件开发大会（上海站）即将在12月28-29日开始，届时将围绕&nbsp;<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1595?utm_source=infoqweb&amp;utm_medium=teacherart\">GenAI和通用大模型应用探索</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1596?utm_source=infoqweb&amp;utm_medium=teacherart\">AI&nbsp;Agent&nbsp;与行业融合应用的前景</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1597?utm_source=infoqweb&amp;utm_medium=teacherart\">LLM&nbsp;时代的性能优化</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1598?utm_source=infoqweb&amp;utm_medium=teacherart\">智能化信创软件&nbsp;IDE</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1602?utm_source=infoqweb&amp;utm_medium=teacherart\">面向人工智能时代的架构</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1604?utm_source=infoqweb&amp;utm_medium=teacherart\">性能工程：提升效率和创新的新方法</a>\"等专题进行交流。现在购票，享 9 折优惠，立减￥680！咨询购票请联系：18514549229（微信同手机号）。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/01/0113b3dfb187d5f9988b7eb16d2e0594.png\" /></p><p></p>",
    "publish_time": "2023-12-06 09:57:24",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "PayPal 合规平台研发总监朱琳确认出席 QCon 上海，分享图智能在 PayPal 的应用",
    "url": "https://www.infoq.cn/article/30kQk4C6UOvlrZJxiLNM",
    "summary": "<p><a href=\"https://qcon.infoq.cn/2023/shanghai/?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_campaign=9&amp;utm_term=1206&amp;utm_content=zhulin\">QCon 全球软件开发大会</a>\"，将于 12 月在上海召开。PayPal 合规平台研发总监朱琳将发表题为《<a href=\"https://qcon.infoq.cn/2023/shanghai/presentation/5675?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_campaign=9&amp;utm_term=1206&amp;utm_content=zhulin\">图智能在 PayPal 的应用</a>\"》主题分享，探讨 PayPal 如何利用图算法优化合规调查的流程，提高交易网络的调查效率，并有效预防金融犯罪，以及如何成功解决大规模交易量下合规调查所面临的独特挑战。</p><p></p><p><a href=\"https://qcon.infoq.cn/2023/shanghai/presentation/5675?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_campaign=9&amp;utm_term=1206&amp;utm_content=zhulin\">朱琳</a>\"，2008 年硕士毕业于复旦大学计算机系。2018 年加入 PayPal 合规平台部门至今。专注以人工智能技术为合规调查提供创新、实用的解决方案，在反洗钱、违反用户使用协议检测和反金融犯罪等领域积累了丰富的实战经验。她在本次会议的演讲内容如下：</p><p></p><p>演讲：图智能在 PayPal 的应用</p><p></p><p>作为一家电子支付公司，PayPal 每天处理着大量的交易，为了防止金融犯罪（如欺诈、洗钱、恐怖融资等）、保证 PayPal 合法合规运行，合规调查发挥了至关重要的作用。然而，合规调查也面临着诸多挑战，包括交易网络的复杂性，犯罪模式的多样性等等。</p><p></p><p>在本次分享中，我们将介绍 PayPal 如何利用图算法优化合规调查的流程，提高交易网络的调查效率。</p><p></p><p>演讲提纲：</p><p></p><p>PayPal 合规调查的背景和挑战基于交易网络的账户合规调查图可视化算法及技术助力合规调查交易模式的自动检测和发现</p><p></p><p>听众收益点：</p><p></p><p>○ 了解 PayPal 如何通过图算法显著提高交易网络合规调查的效率，并有效预防金融犯罪</p><p>○ 了解 PayPal 如何成功解决大规模交易量下合规调查所面临的独特挑战</p><p></p><p>除上述演讲外，QCon 上海还将围绕&nbsp;<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1595?utm_source=infoqweb&amp;utm_medium=teacherart\">GenAI和通用大模型应用探索</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1596?utm_source=infoqweb&amp;utm_medium=teacherart\">AI&nbsp;Agent&nbsp;与行业融合应用的前景</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1597?utm_source=infoqweb&amp;utm_medium=teacherart\">LLM&nbsp;时代的性能优化</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1598?utm_source=infoqweb&amp;utm_medium=teacherart\">智能化信创软件&nbsp;IDE</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1602?utm_source=infoqweb&amp;utm_medium=teacherart\">面向人工智能时代的架构</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1604?utm_source=infoqweb&amp;utm_medium=teacherart\">性能工程：提升效率和创新的新方法</a>\"等专题进行交流。</p><p></p><p>QCon 上海 2023，相约 12 月！ 现在购票，享 9 折优惠，立减￥680！咨询购票请联系：18514549229（微信同手机号）。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/01/0113b3dfb187d5f9988b7eb16d2e0594.png\" /></p><p></p>",
    "publish_time": "2023-12-06 11:30:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "抖音直播电商背后的技术实践：画面更高清、网络更低延迟、玩法儿更多",
    "url": "https://www.infoq.cn/article/TavkpylwzkTM7924wE8y",
    "summary": "<p>2023 年的“双十一”收官，品牌商家在这场“年终大考”中，纷纷交出了满意的“答卷”。</p><p></p><p>根据抖音发布的《玩法阶段战报》显示，在 2023 年双 11 好物节期间，抖音官方的立减玩法让商品的总计曝光达 1,341 亿；抖音平台的新商家数量同比增长 91%；抖音商城的消费人数同比增长 111%。从双十一的直播数据来看，10 月 20 日至 11 月 11 日，抖音电商里的直播间累计直播时长达 5,827 万小时，挂购物车的短视频播放量达 1,697 亿次。</p><p></p><p>视频化时代，直播电商的兴起改变了消费者的习惯和品牌商家的商业模式。但对于抖音电商来说，如何在“<a href=\"https://www.infoq.cn/article/d2vXbzccCxM1Ni5VRpGT?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">双十一</a>\"”这样的“流量大考”中，为消费者提供更高清、更沉浸、更互动的直播体验和新玩法，从而驱动品牌的业务增长？这是<a href=\"https://mp.weixin.qq.com/s?__biz=MzA4NTU2MTg3MQ%3D%3D&amp;chksm=84605d6bb317d47de854b51c767168481dd2859f0fe563f39c9a6c34ad082b846dfce4e14c11&amp;idx=3&amp;mid=2655189515&amp;scene=27&amp;sn=06a95fea7b2120b93c4bf3ffea3d3079&amp;utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search#wechat_redirect\">抖音电商</a>\"首要解决的命题之一。</p><p></p><h2>一、直播画面更高清，让商品细节纤毫毕现</h2><p></p><p></p><p>非专业的直播设备让商品展示时的画面变得模糊，进而影响消费者的购买决策。抖音电商携手<a href=\"https://www.infoq.cn/article/VhJrF0rKTF1fDRGlTcdo?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">火山引擎</a>\"打造了不同产品特性的定制化展示策略，通过自适应的方式做到场景化“满分”展示：</p><p></p><p>利用画质分析层对 ROI（Region Of Interest）、信号复杂度与基础画质进行特征分析；预测层接收特征，对场景进行分类，然后对画质 / 码率进行预测；通过决策算法，基于当前场景的目标画质、网络分析，决策出更优参数集合；最后将画质指标反馈给预测算法进行调优。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/93/93e56abe87d61c10d855ee4632cd9e46.png\" /></p><p>图：火山引擎内容自适应策略</p><p></p><p>火山引擎的人眼感兴趣区域检测（ROI 检测），通过深度的机器学习来对视频内容进行分析，进而辅助 CAE 在编码阶段就进行更合理的码率分配，以此提高人眼感兴趣区域的编码质量，同时做到无损压缩。与传统的 ROI 检测能力相比，火山引擎通过数据集的优化和性能的不断打磨，做到了通过客户端使用便可与视频内容、视频种类解耦，目前已涵盖了直播间中包含人脸、商品等大规模常见的 ROI 区域。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/30/3048da71efd88d55faa66cb6a88ed9a1.png\" /></p><p>图：火山引擎 ROI 检测与人眼兴趣区域高度重叠</p><p></p><p>在推流侧，火山引擎通过新一代自研 BVC 编码器，可实现内容自适应编码和感知视频编码。在电商场景下，受机型与系统编码能力的限制，会让推流侧出现时域上的画质波动（部分画面质量低）。这时，火山引擎新一代自研 BVC 编码器当会预测到低于既定的阈值，及时动态触发，调整码率与增强画质，实现高清画质相对恒定的直播体验。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/08/0838b8edd3f43a81b8d097eb0c68e009.png\" /></p><p>图：火山引擎视频时域画质</p><p></p><p>此外，在播放端，火山引擎以 SDR 转 HDR 算法，通过参考 SMPTE 相关标准并结合色调映射算法，将 SDR 视频源转换为 HDR10 标准格式的 HDR 视频，以提升画面的对比度、色彩丰富度，为消费者带来更好的直播视觉效果，帮助品牌商家全方位展示商品细节。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/65/65ba01b3e6e02ec4a82c6cd454cdd65c.png\" /></p><p>图：火山引擎 SDR 转 HDR 算法</p><p></p><h2>二、直播体验更低延迟，让消费者与商家云端同频</h2><p></p><p></p><p>直播延迟的高低，影响着消费者购买决策的是与否。</p><p></p><p>直播延迟主要分布在生产端、流媒体服务、消费端三个环节：</p><p></p><p>在生产端，一般情况下，网络延迟平均在 20~30ms，编码延迟依赖编码参数设置而定，因此在整体延迟中占比较小；在流媒体服务上，在拉流转码的场景下，会额外产生 300ms~2S 的转码延迟，如果直接播放源流，则不会产生转码延迟；在消费端，网络延迟一般在 100ms~200ms，延迟主要由链路分发节点之间的传输延迟产生。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/46/46b15ebd3232560fdfeac2d2c653e2d0.png\" /></p><p>图：火山引擎直播延迟分析</p><p></p><p>在抖音电商的直播场景中，评论、提问和解答，是消费者与品牌商家互动的主要方式，品牌商家是否及时反馈，对直播间的活跃度和成单转化起着关键性的作用。在抖音电商的直播实践过程中，基于火山引擎直播 SDK 的云端一体化解决方案，可以将 FLV 拉流延迟降低至 2-3s 内；RTM 超低延时拉流延时降低至 1s 内；同时也能做到面对网络不稳定时的灵敏响应、对抗弱网环境和提升带宽利用率。</p><p></p><h2>三、直播玩法更丰富，让电商业务获得新增长</h2><p></p><p></p><p>如今，消费者越来越倾向于能互动、有参与感的购物体验，直播电商平台的互动同质化已难以满足消费者的需求，导致电商平台的成单转化或成挑战。</p><p></p><p>以往直播间会采用「主播介绍 - 上链接 - 观众抢购」的模式，对于头部主播来说，可以有效提升商品流转效率，从而提升 GMV，但对于其他中腰部主播或官方品牌的直播间来说，丰富与消费者的互动玩法晚饭，让消费者更加深入地了解商品，才能提升消费者的购买动力。</p><p></p><p>抖音电商与火山引擎共同打造的互动直播方案，可以为品牌商家打造抖音同款的互动体验，支持嘉宾连麦、主播 PK 等丰富的直播形式，相较于传统直播的文本聊天和发弹幕的形式更具有互动性。从直播数据生产到直播数据的全链路数据驱动，帮助有效提升消费者粘性与业务营收。火山引擎互动直播方案目前已在抖音平台落地实践，并获得日均场次超 210 万、人均观看时长同比增长 15.4% 的成效。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/51/515a5cd3c6749ae03e5f74f8d4cc89ee.png\" /></p><p>图：抖音电商直播画面</p><p></p><h2>四、End</h2><p></p><p></p><p>从线下门店到线上购物再到直播电商，消费者的消费习惯不断变化，火山引擎视频云也将继续聚焦“消费体验”，持续升级迭代技术能力，助力品牌商家稳抓消费者心智、驱动业务新增量。未来，火山引擎将持续打造更安全、更稳定、更专业的云端直播服务，为消费者提供更低延迟、更高画质、更流畅的直播体验。</p>",
    "publish_time": "2023-12-06 12:02:57",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "钉钉发布新能源行业“3+3”新一代数字化解决方案，助力中国新能源企业出海",
    "url": "https://www.infoq.cn/article/v0wLLGFsUwRWGJWicD6U",
    "summary": "<p>12月6日，在数字动能——2023新能源行业钉峰会上（以下简称“钉峰会”），钉钉正式发布新能源行业“3+3”新一代数字化解决方案，并宣布与天合光能、特来电、高景太阳能、华宝新能源等新能源头部企业达成战略合作，共同致力于推动数字化升级，提升全行业、全球化竞争力。</p><p>&nbsp;</p><p>钉钉总裁叶军表示：“<a href=\"https://www.infoq.cn/article/Vzuau7dgxQvhsWZOhf3E\">数字化</a>\"不是买来的，真正的数字化源于企业对自身业务的理解。今天的企业面临着前所未有的挑战，面临着技术革新、市场变化等种种不确定性。数字化的价值，在于帮助企业的管理、生产、经营变得更具韧性，应对未来的不确定性。”</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/89/89d338b08f67f6d6c53ff7c1fb1de468.png\" /></p><p></p><p>据不完全统计，目前国内300余家新能源上市公司中，已有66%使用钉钉作为协同办公平台和业务开发平台。</p><p></p><h3>新能源行业面临安全管理和跨国协同等多重挑战</h3><p></p><p>&nbsp;</p><p>当前，光伏、储能等新能源行业正处于快速发展阶段，增长速度在<a href=\"https://www.infoq.cn/article/zvjR1E1wzUVeLbseYJ4r\">制造业</a>\"中名列前茅，大量企业积极走出国门，开拓海外市场。飞速的发展催生了这些企业对于科学管理、降本增效、提升核心竞争力的需求，以数字化建设应对未来不确定性，成为新能源企业的共同选择。</p><p>&nbsp;</p><p>快速增长的员工和业务规模，让企业往往难以兼顾数字化基础建设，大量部门和员工如何管理，流程如何规范完善，多种办公协同和业务应用如何集成，成为摆在企业管理者面前的问题，企业急需统一平台和统一入口。</p><p>&nbsp;</p><p>行业竞争激烈、技术迭代速度快是新能源行业的一大特点，例如在光伏组件领域，核心技术平均每半年就有代际更新，领先的技术是保障核心竞争力的根本，核心信息的外泄造成的损失不可估量，因此，新能源企业对于信息安全非常看重。</p><p>&nbsp;</p><p>安全生产，保障产线高效运转，减少故障和事故的发生；提升产品质量管理能力，增强售中售后追溯，本来就是制造业降本增效的刚需，也是新能源企业数字化建设的重要命题。此外，随着海外业务占比的提高以及众多分公司的设立，跨国协同也成为新能源企业的重要诉求。</p><p></p><h3>“3+3”新一代数字化解决方案发布</h3><p></p><p></p><p>针对<a href=\"https://www.infoq.cn/article/X68Q0yoLNplMg4RC5969\">新能源行业数字化</a>\"过程中的实际需求，钉钉发布新能源行业“3+3”新一代数字化解决方案，从员工、管理、生产业务以及组织保障等多重视角出发，为这一行业提供全球安全协同解决方案。</p><p>&nbsp;</p><p>“3+3”中，“三个统一”即通过统一的APP、统一的账号和统一的门户，为企业打造一体化的协同和业务平台。统一的APP意味着“一个钉钉就够了”，无需安装繁多应用；统一账号指员工可以以一个账号授权多个组织任职、登录多个应用；统一门户指多种应用和功能都集成于钉钉，数据、流程相互打通。</p><p>&nbsp;</p><p>“三大能力”包括全球协同能力、全域安全能力和业务智能化能力。全球协同能力为企业提供全球统一信息安全架构、数据跨境合规、数据和服务本地化等服务。全域安全能力提供数据防泄漏、风险行为预警等方案。业务智能化能力则包括智能生产线、智能车间、智能工厂、智能管理驾驶舱等多种智能化方案。</p><p>&nbsp;</p><p>“3+3”新一代解决方案还为数字化项目成功落地运营提供了三大组织保障建议。通过建立数字化转型组织、全员参与的创新机制和持续运营的机制，保障数字化从理念、顶层设计到落地执行一以贯之。</p><p>&nbsp;</p><p>峰会现场，钉钉与天合光能股份有限公司、高景太阳能股份有限公司、深圳市华宝新能源股份有限公司和特来电新能源股份有限公司举行战略签约仪式。未来，天合光能将基于专属钉搭建全球一体化IM沟通协作平台；高景太阳能将基于钉钉打造沟通协作、统一办公、安全合规、应用集成、项目任务等五大平台。华宝新能源通过钉钉IDaaS打造企业统一身份认证平台，基于专属钉钉实现全球协同办公，并运用低代码搭建培训、设计任务分配等业务系统；特来电将钉钉作为核心沟通工具，结合特来电云平台，建设智能办公、安全运营、业务集成、高效协作四大平台。</p><p></p><h3>钉钉×一财商学院《新能源行业数字化白皮书》发布</h3><p></p><p>&nbsp;</p><p>此次峰会上，一财商学院联合钉钉发布了《新能源行业数字化白皮书》（以下简称《白皮书》）。《白皮书》提到，新能源行业面临全球协同、信息技术安全、员工管理和业务效率等挑战，钉钉基于可集成的PaaS底座能力，联合开放的生态系统、AI能力的场景化应用以及安全防控能力，提供了敏捷的、个性化、智能化的数字化新模式。</p>",
    "publish_time": "2023-12-06 12:04:58",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "面向全闪数据中心的“答案”",
    "url": "https://www.infoq.cn/article/RxAIDgwMqdKUy5GhdJu9",
    "summary": "<p>作者：&nbsp;XSKY星辰天合&nbsp;CTO&nbsp;王豪迈</p><p>编辑：付秋伟</p><p></p><p>在数字化时代，企业追求的不仅仅是数据存储的速度和效率，还有对成本和能源的敏感把控。全闪数据中心顺应了这一趋势，因其固态存储解决方案相较传统硬盘在能源效率和总拥有成本（TCO）上的显著优势而脱颖而出。SSD&nbsp;的能耗远低于传统硬盘，而在速度和响应时间上，它们提供了无与伦比的性能，这使得数据中心可以在更小的能耗预算下处理更多的数据，提升运营效率。</p><p></p><p>随着&nbsp;SSD&nbsp;技术的不断进步，价格也逐渐降低，使得全闪存储的成本逐步接近传统存储解决方案。更重要的是，全闪数据中心在扩展性和维护上的便捷性进一步降低了长期运维成本，加上其出色的能源效率，全闪数据中心成为了现代企业在数据存储上的首选。</p><p></p><p>正是基于这些技术和经济优势，全闪数据中心代表了未来数据存储的发展方向，成为了云计算、大数据分析和人工智能等高速增长领域的基石。随着全闪存储技术的成熟，数据中心架构正经历着一场深刻的变革，这不仅预示着性能的飞跃，更代表着对传统存储模式的根本挑战。我们如何在这波趋势中找到平衡点，实现高性能与成本效益的双赢，是一个行业共同关注的问题。</p><p></p><p>本文旨在深入探讨全闪数据中心的未来趋势，展示&nbsp;XSKY星辰天合如何通过星海架构引领行业变革。文章分为四部分，首先回顾&nbsp;XSKY星辰天合在分布式存储架构方面的演进和启示；其次，探讨硬件技术的发展如何推动全闪数据中心成为新趋势，以及带来的挑战；接着，深入分析面向未来的分布式全闪架构设计和解决问题的方案；最后，通过实际的应用场景验证新一代全闪架构的有效性。</p><p></p><p></p><h2>回顾分布式架构的缓存技术演进</h2><p></p><p></p><p>XSKY&nbsp;自&nbsp;2015&nbsp;年创业以来，从早期的&nbsp;V2&nbsp;版本，经历&nbsp;V3&nbsp;的成长，直至最新发布的&nbsp;V6，每一步都见证了技术的进步和不懈追求。在不同版本里，存储架构层、协议层、功能和对接应用生态都不断进步，而其中最重要的则是存储引擎的架构，它会具备更长的生命周期。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/25/2514ef9af703d3eeb7c3f1c678d762af.jpeg\" /></p><p></p><p>XSKY&nbsp;从&nbsp;2016&nbsp;年正式发布基于&nbsp;XStore&nbsp;的&nbsp;SDS&nbsp;V2&nbsp;产品，XStore&nbsp;在当时是业内少数的用户态缓存技术，提供本地&nbsp;SSD&nbsp;缓存来加速读写性能，其后&nbsp;XSKY&nbsp;陆续增加了大块&nbsp;IO&nbsp;Bypass，可以自动识别大块&nbsp;IO&nbsp;直写&nbsp;HDD。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/da/daba582fe922508a506601bd140600da.png\" /></p><p></p><p>在&nbsp;2018&nbsp;年，我们意识到本地&nbsp;SSD&nbsp;缓存固然简单，但是随着集群的长期运行，在&nbsp;SSD&nbsp;故障或者寿命到期后，SSD&nbsp;对应的全量&nbsp;HDD&nbsp;数据都需要进行重构，大幅增加恢复时间，带来了更高的运维成本。同时，XStore&nbsp;仅能够支持副本模式，而三副本的硬件成本相比使用&nbsp;RAID&nbsp;技术的集中性存储并没有显著的规模化优势。</p><p></p><p>因此，XSKY&nbsp;设计了新一代全局缓存架构&nbsp;XSpeed，并在&nbsp;SDS&nbsp;V5&nbsp;发布会亮相。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/74/74cc61ab48e182bdd9d275ce6572d5a1.png\" /></p><p></p><p>XSpeed&nbsp;实现了集群中缓存介质的池化，可以整合全部缓存容量并以三副本冗余度提供高性能&nbsp;IO&nbsp;服务。整合后的全局缓存数据有更大的空间来进行回刷，在回刷过程中会使用&nbsp;EC&nbsp;纠删码技术和数据压缩功能，大幅提高集群的空间利用率。</p><p></p><p>新的架构变化，使得不管是&nbsp;SSD&nbsp;还是&nbsp;HDD&nbsp;故障，都可以只重构对应容量的数据，且&nbsp;SSD&nbsp;故障完全不会影响&nbsp;HDD。</p><p></p><p>在&nbsp;2021&nbsp;年&nbsp;V5&nbsp;发布会后的&nbsp;3&nbsp;年时间里，大量的客户享受到了新架构带来的收益，得盘率提高&nbsp;300%&nbsp;以上，运维成本降低&nbsp;94%。</p><p></p><p>从&nbsp;XStore&nbsp;到&nbsp;XSpeed&nbsp;的发展表明，在企业级存储系统中，存储软件架构是极其重要的。它可以决定系统的性能、TCO、扩展性和可靠性这些关键因素。</p><p></p><p></p><h2>硬件技术的发展带来机会和挑战</h2><p></p><p></p><p>在&nbsp;XSpeed&nbsp;发布之后的三年时间里面，硬件技术已经发生了非常大的变化。</p><p></p><p>在&nbsp;2019&nbsp;年，SATA/SAS&nbsp;SSD&nbsp;还是主流，HDD&nbsp;在持久化数据存储中正发挥着主要作用。PCIe&nbsp;还停留在&nbsp;3.0，存储&nbsp;的&nbsp;CPU&nbsp;还是&nbsp;8-12&nbsp;Cores&nbsp;为主，网络还是&nbsp;10Ge。</p><p></p><p>但在短短几年内，技术的飞跃式进步已经颠覆了这一格局。特别是随着&nbsp;AI&nbsp;相关业务驱动，硬件平台迎来了大跃进。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b0/b03786e7529a6e8b3bc4151d8650e335.png\" /></p><p></p><p>不管是&nbsp;x86&nbsp;还是信创&nbsp;CPU，单节点核数早已经跃升至&nbsp;32&nbsp;Cores，而今年的数据中心大赢家&nbsp;GPU&nbsp;也已经是主流算力，在网络上，基于以太网的存储网络已经&nbsp;25Gb&nbsp;起步，100Gb&nbsp;也已经普遍使用。SSD&nbsp;介质随着&nbsp;PCIe&nbsp;5.0&nbsp;落地和颗粒层数工艺进步，拥有了更大的容量、更好的性能和更低的价格。</p><p></p><p>面对这些硬件技术变化和客户需求，我们开始思考如何设计面向全场景的分布式闪存存储系统，其中会有哪些新的挑战。</p><p></p><p>而随着&nbsp;AI、大数据的发展，客户日益增长的存储需求中，一个突出的趋势是对高效存储解决方案的渴望。客户不仅需要通过分配更高性能的存储资源来处理更多任务，还追求更高的空间效率和完善的数据保护服务。</p><p></p><p>而现有的面向全场景的分布式闪存存储系统架构，很难完全满足需求：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/88/88faaa7bcd11ad07ba6d5bdc1e6ec939.png\" /></p><p></p><p>undefined&nbsp;可靠性较低：随着越来越低的性能延迟，应用实实在在享受到更好的存储性能所带来的好处，但更快的处理意味着对于存储可用性要求的提高。过去是&nbsp;10&nbsp;毫秒内的存储延迟，我们通常假设&nbsp;10&nbsp;秒内的节点故障规格可以接受，而在全闪化后，延迟降低到&nbsp;100&nbsp;微秒级别，之前秒级的异常规格就变得不可接受。但现有市场上分布式全闪产品中，仍然只提供长达数秒的故障切换指标。</p><p></p><p>undefined&nbsp;性能服务水平不足：在不断迭代的&nbsp;NVME&nbsp;SSD&nbsp;和高速网络加持下，性能绝对值基本不再是挑战。反而是在规模化的全闪存里，在支持大规模高效写入数据和元数据更新情况下，长期的尾部延迟结果才能真正衡量存储性能服务水平。因为在堆砌大量&nbsp;SSD&nbsp;并基于高速网络后，SSD&nbsp;的&nbsp;GC&nbsp;（垃圾回收）以及网络偶发丢包等因素，导致的长尾延迟抖动，是应用性能体验的关键。因此，我们认为需要更关注&nbsp;P99&nbsp;延迟的稳定性，它才意味着真实的服务水平。</p><p></p><p>undefined&nbsp;成本仍然过高：SSD&nbsp;和&nbsp;HDD&nbsp;的成本剪刀差在过去&nbsp;8&nbsp;年没有发生根本性变化。用户仍然期望在数据量持续增长的背景下，能以适当的成本获得全闪存的巨大优势。如果在全闪存下，分布式存储还依赖三副本且不具备任何数据缩减能力，它并没有长期竞争力。</p><p></p><p>因此，如果在这三方面，我们如果不能很好去解决，只是有了一个高性能的分布式存储系统，是很难与集中式全闪相提并论，甚至在很多场景下，集中式全闪阵列借助&nbsp;RAID&nbsp;和压缩技术，会有更好的性价比。</p><p>因此，我们希望能够利用新的硬件变化来进一步推动分布式存储架构变革，来更好解决这些最新需求。而最好的办法，就是推出全新的架构来适应新时期的硬件和需求，也就是&nbsp;XSKY&nbsp;最新推出的“星海（XSEA，eXtreme&nbsp;Shared-Everything&nbsp;Architecture，极速全共享架构）”架构。</p><p></p><p></p><h2>面向全闪数据中心的星海架构</h2><p></p><p>星海架构是&nbsp;XSKY&nbsp;过去&nbsp;8&nbsp;年在存储技术领域，不断磨砺与创新的结果，它仍然采用软件定义的技术，以最新的标准存储协议和网络技术作为基础，并引入了三项技术创新点。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a8/a8ee04e7df6466ea94dbff4feb790b98.png\" /></p><p></p><p>第一，星海架构采用了&nbsp;Shared&nbsp;Everything&nbsp;（全共享）模型来实现全共享数据存储，使得每个节点都能直接访问所有&nbsp;SSD，来提高了数据访问速度和灵活性；</p><p></p><p>其次，星海架构采用了单层闪存介质的设计，来专门面向&nbsp;TLC&nbsp;NVMe&nbsp;SSD&nbsp;进行优化，可以减少硬件配置复杂性；</p><p></p><p>第三，星海架构在&nbsp;IO&nbsp;路径中采用端到端的&nbsp;NVMe&nbsp;实现，不仅存储系统对外提供&nbsp;NVMF&nbsp;协议，内部复制网络和&nbsp;IO&nbsp;处理也同样采用&nbsp;NVMF&nbsp;技术，确保&nbsp;IO&nbsp;路径的高效处理。</p><p></p><p></p><h3>Shared&nbsp;Everything&nbsp;模型是新架构基石</h3><p></p><p></p><p>在过去十年乃至更久的时间里，Shared&nbsp;Nothing&nbsp;模型因其物理资源隔离的能力、易于扩展和管理的特点，在大规模存储解决方案中被广泛认可和应用。从超融合存储到分布式文件和对象存储，再到数据库、数仓系统等领域，都在使用&nbsp;Shared&nbsp;Nothing&nbsp;模型。</p><p></p><p>然而，随着&nbsp;NVMe&nbsp;规范标准化和&nbsp;100Gb&nbsp;以上高速网络的普及，远程访问&nbsp;SSD&nbsp;的性能已经可以媲美本地访问。Shared&nbsp;Nothing&nbsp;模型过去基于网络性能瓶颈的假设其实已经不再适用。</p><p></p><p>在面对新的可靠性、性能服务水平和成本的挑战，我们看到&nbsp;shared&nbsp;nothing&nbsp;模型的局限性：</p><p>undefined&nbsp;性能扩展性的局限性：在&nbsp;Shared&nbsp;Nothing&nbsp;架构中，每个节点独立处理数据，而随着节点增多，为了维持分布式事务的一致性，带来了额外的软件复杂性和&nbsp;CPU&nbsp;消耗，并可能导致写放大。这样的开销限制了扩容的收益，在全闪存系统里，这种瓶颈更为明显；</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c6/c632180fe1d30cd6dbb747b3607f5397.png\" /></p><p></p><p>undefined&nbsp;资源利用浪费：在&nbsp;Shared&nbsp;Nothing&nbsp;架构中，资源的独立性限制了灵活性，使得各节点资源无法统一利用。例如，在处理高负载时，每个节点必须配备足够的硬件资源，导致规划系统时需要进行提前预留，在大规模部署中，会造成更大的浪费。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c0/c08dadf8bbb97fc93252a2e4e2c0edd4.png\" /></p><p></p><p>undefined&nbsp;服务质量：在&nbsp;Shared&nbsp;Nothing&nbsp;架构中，故障检测和响应机制常常缺乏业务层面的敏感度。一旦发生故障，节点间需要进行复杂的一致性协商，导致故障切换时间过长。在系统出现亚健康状况时，这种机制会更加脆弱，故障处理过程难以迅速有效地进行。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b7/b7d631d9d0cc327341725e1845dd4817.png\" /></p><p></p><p>undefined&nbsp;局部视角问题：Shared&nbsp;Nothing&nbsp;架构将每个节点划分为独立的单元，这种划分会导致无法实施大比例的&nbsp;EC&nbsp;纠删码，数据恢复和后台&nbsp;IO&nbsp;操作也难以全局优化。结果是，这些操作可能占用过多带宽，影响正常的客户端&nbsp;IO&nbsp;请求，进而影响整体业务的稳定性。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d8/d847df627d782d9aa8d825cea671db14.png\" /></p><p></p><p></p><p>为应对&nbsp;Shared&nbsp;Nothing&nbsp;模型的挑战，星海架构使用了&nbsp;Shared&nbsp;Everything&nbsp;的设计，借助最新硬件平台的支持，这一架构可以克服&nbsp;Shared&nbsp;Nothing&nbsp;限制，来显著提升性能、资源效率和整体服务质量。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/39/399e2461a16252cc889862b05b64d956.png\" /></p><p></p><p>从上图可知，BlockServer、FileServer&nbsp;和&nbsp;ChunkServer&nbsp;作为一组无状态容器分布在多个服务器集群中，它们通过共享内存直接交互，无需通过网络。而&nbsp;IOServer&nbsp;会将所有&nbsp;SSD&nbsp;通过&nbsp;NVMe-oF&nbsp;协议暴露出物理卷，使得任意&nbsp;ChunkServer&nbsp;在启动时，都可以挂载集群里的所有&nbsp;NVMe&nbsp;卷。这意味着不管是块设备还是文件系统，都可以直接获得任意位置的&nbsp;SSD&nbsp;数据。</p><p></p><p>这样的架构设计在性能可扩展方面具有明显优势。</p><p></p><p>首先，随着集群的横向扩展，由于每个节点无需跟其他节点的服务进行通信，可以消除不必要的数据转发，实现了网络的线性扩展能力。</p><p></p><p>其次，存储容量和性能，可以与&nbsp;CPU、内存资源解耦，为不同业务场景提供更高的灵活性和资源利用率。例如，在备份场景，可以使用较低的&nbsp;CPU&nbsp;和内存资源；在&nbsp;OLTP&nbsp;场景中，则可以部署更高频率的&nbsp;CPU&nbsp;以实现更低延迟的&nbsp;IO&nbsp;处理。</p><p></p><p>第三，Shared&nbsp;Everything&nbsp;架构设计赋予了每个节点全局数据读写能力。这意味着，我们可以实施大比例的&nbsp;EC&nbsp;纠删码，如&nbsp;20+4，大幅提升空间利用效率。也可以更好的进行全局流控、后台任务调度，并根据全局&nbsp;SSD&nbsp;的状态进行磨损均衡。</p><p></p><p>此外，在关键的可靠性方面，Shared&nbsp;Everything&nbsp;架构显著提高了故障恢复能力。无论是节点、网络还是&nbsp;SSD&nbsp;故障，其他节点都能迅速接管，保证业务连续性。这是因为每个服务都可以访问到所有数据，而不用在故障时等待数据复制或状态同步。这样的设计可以在&nbsp;100ms&nbsp;内实现故障切换，为存储提供高可靠性保证。</p><p></p><p></p><h3>面向&nbsp;TLC&nbsp;SSD&nbsp;优化，单层闪存介质设计</h3><p></p><p></p><p>在定义存储池的构建方式时，星海架构挑战了传统的模式，该架构放弃了常规的缓存加数据盘的组合，转而采用了单层闪存介质构建，其背后是反映了&nbsp;XSKY&nbsp;对&nbsp;SSD&nbsp;技术和传输标准演进的深入理解。</p><p></p><p>从&nbsp;PCIe&nbsp;3.0&nbsp;到&nbsp;4.0，再到如今的&nbsp;5.0，我们见证了&nbsp;NVMe&nbsp;SSD&nbsp;在带宽吞吐方面的巨大飞跃。这意味着，现在我们可以用更少的&nbsp;PCIe&nbsp;通道实现更高的数据传输速率，使得&nbsp;TLC&nbsp;型&nbsp;NVMe&nbsp;SSD&nbsp;持续具备最好的性价比。</p><p></p><p>因此，星海架构采用单层&nbsp;TLC&nbsp;NVMe&nbsp;SSD&nbsp;来构建存储池，简化集群的存储硬件结构。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ca/ca8f8c578db9046386b72b832eee8cdb.png\" /></p><p></p><p>在使用方式上，我们利用&nbsp;Append&nbsp;Only&nbsp;方式实现数据写入，减少了写放大现象。并通过精心设计的空间布局，在单个&nbsp;SSD&nbsp;上实现了缓存和持久存储的双重功能。这些技术使得在没有专用缓存介质情况下，确保足够的性能稳定性。</p><p></p><p>根据&nbsp;XSKY&nbsp;的评估，在常规的混合读写业务场景中，相比分层缓存方式，单层闪存可以显著降低介质成本&nbsp;20%以上。</p><p></p><p>同时配合&nbsp;Shared&nbsp;Everything&nbsp;架构模型带来的全局&nbsp;EC&nbsp;和压缩功能，使得集群的得盘率超过了&nbsp;100%。就如去年，著名的&nbsp;HCI&nbsp;存储软件&nbsp;vSAN&nbsp;8.0&nbsp;发布，正式宣布其全闪架构从&nbsp;OSA&nbsp;演变为&nbsp;ESA，而&nbsp;ESA&nbsp;架构的关键设计就是采用了&nbsp;Single&nbsp;Tier。</p><p></p><p></p><h3>最大化硬件卸载，端到端的&nbsp;NVMe</h3><p></p><p></p><p>在端到端&nbsp;IO&nbsp;路径上，星海架构采用了标准&nbsp;NVMe&nbsp;over&nbsp;Fabric&nbsp;协议进行构建。</p><p></p><p>过去，在存储系统中，SCSI&nbsp;协议一直占据主导地位。然而，SCSI&nbsp;在并发处理能力和协议效率上存在约束。相比之下，NVMe&nbsp;协议以其更高的并发性和较低的协议开销脱颖而出，目前已得到主流操作系统内核的原生支持。</p><p></p><p>星海架构不仅在存储访问方面采用了&nbsp;NVMe&nbsp;over&nbsp;Fabrics&nbsp;协议，而且在存储内部网络中也全面实施了该协议。这意味着所有存储节点都可以通过&nbsp;NVMe&nbsp;over&nbsp;Fabrics&nbsp;高效地访问每一个&nbsp;NVMe&nbsp;SSD，从而避免了存储协议转换所带来的额外开销。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a9/a918ff6f787c6849b2c7fda108ee50ec.png\" /></p><p></p><p>在端到端的&nbsp;NVMe&nbsp;I/O&nbsp;路径上，也采用了高效的&nbsp;Polling&nbsp;模式处理每个&nbsp;I/O&nbsp;请求，并通过&nbsp;NUMA&nbsp;绑定优化了不同服务的内存访问效率。最后实现低至&nbsp;100&nbsp;微秒的端到端延迟。</p><p></p><p>此外，星海架构持续适应硬件技术的演进，通过与领先的智能网卡厂商合作，利用智能网卡来进行&nbsp;NVMF&nbsp;协议的硬件卸载，在存储设备上实现从计算节点到存储的高效数据传输。</p><p></p><p></p><h3>3&nbsp;个&nbsp;100&nbsp;的架构收益</h3><p></p><p></p><p>通过&nbsp;shared&nbsp;everything、单层闪存介质和端到端&nbsp;NVMe，星海架构可以实现&nbsp;3&nbsp;个&nbsp;100：</p><p>undefined&nbsp;在&nbsp;40%-60%负载下实现&nbsp;100&nbsp;微秒的超低延迟；</p><p>undefined&nbsp;通过&nbsp;EC&nbsp;和数据压缩技术实现超过&nbsp;100%的存储系统得盘率；</p><p>undefined&nbsp;在面对慢盘、亚健康网络问题时，能在&nbsp;100&nbsp;毫秒内快速切换，以保证系统的稳定运行。</p><p>这&nbsp;3&nbsp;个&nbsp;100&nbsp;的实现，不仅是技术的飞跃，也直接回应了前文提出的的三大主要挑战。因此，星海架构能够实现更高的可靠性、更优异的性能服务水平，并有效控制成本。</p><p></p><p></p><h2>成本优先架构，带来场景优势</h2><p></p><p></p><p>基于星海架构，XSKY&nbsp;已经发布了星飞软件和星飞&nbsp;9000&nbsp;一体机全闪存储，这也是业界首款采用全共享架构的分布式全闪主存储。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/77/7744dbe00f93c625f9a71b5748eea889.png\" /></p><p></p><p></p><p>如上图左侧所示，当前数据中心存储结构通常由高性能&nbsp;NVMe&nbsp;DAS、全闪存阵列、容量型存储及归档存储构成。在行业和用户共同的推动下，过去十年我们见证了容量型存储领域分布式架构的崛起，根据 &nbsp;IDC&nbsp;报告，分布式架构的市场份额在容量型存储持续增长。</p><p></p><p>而星飞产品有更大的野心，希望能横跨&nbsp;NVMe&nbsp;DAS、全闪阵列和容量型存储的使用场景，为了验证这一定位，我们精心设计了三个实际场景的测试项目，分别与合作伙伴和客户一同展现星海架构的领先性和创新成效：</p><p>undefined&nbsp;第一个是面向&nbsp;OLTP&nbsp;数据库场景，与本地&nbsp;NVMe&nbsp;DAS&nbsp;对比测试</p><p>undefined&nbsp;第二个是面向&nbsp;OLAP&nbsp;场景，与集中式全闪阵列对比测试</p><p>undefined&nbsp;第三个是在公有云上与高性能网盘的对比测试</p><p></p><p></p><h3>&nbsp;NVMe&nbsp;DAS&nbsp;对比测试</h3><p></p><p></p><p>过去数年中，很多用户反馈随着&nbsp;NVME&nbsp;SSD&nbsp;价格下降，越来越多用户在高性能应用场景都选用本地&nbsp;NVME&nbsp;SSD&nbsp;提供存储能力，但随着&nbsp;SSD&nbsp;的规模化使用和老化，存储介质的运维实际上是很大挑战，硬件亚健康问题、SSD&nbsp;容量和性能弹性需求都成为挑战。</p><p></p><p>XSKY&nbsp;联合了&nbsp;Intel&nbsp;Lab&nbsp;做了面向数据库场景的本地&nbsp;NVMESSD&nbsp;与星飞产品的对比测试，从性能、TCO&nbsp;方面进行评估。</p><p></p><p>根据英特尔中国区解决方案部技术总监高丰的介绍，经过双方联合测试，借助&nbsp;QAT&nbsp;加速数据压缩/解压缩的强大能力，与&nbsp;NVMe&nbsp;DAS&nbsp;配置相比，星飞&nbsp;9000&nbsp;获得相同延迟的同时，还可以实现更高的空间利用率，并大幅降低运维成本，提升业务连续性。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1a/1a823137b2eb7e64e62d2e1fc06cd253.png\" /></p><p></p><p>在测试中，采用了&nbsp;OceanBase&nbsp;数据库运行在计算节点上，占用&nbsp;48C&nbsp;和&nbsp;192GB&nbsp;内存。同时在计算节点上配备了两块&nbsp;&nbsp;NVMe&nbsp;SSD，通过&nbsp;RAID1&nbsp;来提供本地盘。</p><p></p><p>而星飞存储系统运行在配置&nbsp;16&nbsp;块&nbsp;1.92TB&nbsp;NVMe&nbsp;SSD&nbsp;的三节点上，计算节点通过&nbsp;2*100Gb&nbsp;的网络访问存储。</p><p></p><p>三节点的星飞系统使用&nbsp;EC&nbsp;2+1&nbsp;的冗余策略，启用了&nbsp;QAT&nbsp;压缩能力，并提供&nbsp;NVMe&nbsp;over&nbsp;RDMA&nbsp;协议的卷供&nbsp;OceanBase&nbsp;使用。</p><p></p><p>测试用例我们选择了&nbsp;SysBench&nbsp;中的&nbsp;Point&nbsp;Select，ReadOnly，WriteOnly&nbsp;和&nbsp;ReadWrite&nbsp;四种用例，针对每种用例，我们分别执行从&nbsp;32&nbsp;并发到&nbsp;1024&nbsp;并发的不同压力，主要关注&nbsp;QPS&nbsp;和&nbsp;P95&nbsp;延迟指标。</p><p>从下图中可以看到，橙色块是星飞系统的性能，另一个是本地&nbsp;NVMe&nbsp;SSD&nbsp;提供的性能。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/71/71853913d8306193f69ffb86bb739e3f.png\" /></p><p></p><p>从&nbsp;32&nbsp;到&nbsp;1024&nbsp;并发，星飞性能和本地&nbsp;NVMe&nbsp;SSD&nbsp;基本平分秋色，唯一的不足是在&nbsp;1024&nbsp;并发的情况下，星飞系统的延迟是本地&nbsp;NVMe&nbsp;SSD&nbsp;的&nbsp;2&nbsp;倍，后续我们会进一步探究问题原因。该结果也证明了星飞系统实际上已经达到了本地&nbsp;NVMe&nbsp;SSD&nbsp;的延迟水平，软件损耗非常低。</p><p></p><p>另一方面，在存储效率上，星飞通过&nbsp;EC&nbsp;加压缩的能力，在&nbsp;1TB&nbsp;的数据库空间里，实际只占用了 &nbsp;880GB&nbsp;的容量，压缩比达到了&nbsp;1.8，而使用&nbsp;RAID&nbsp;1&nbsp;的本地&nbsp;NVMe&nbsp;SSD，则占用了&nbsp;2TB&nbsp;的实际空间。相比而言，星飞系统只需要&nbsp;44%&nbsp;的本地&nbsp;RAID1&nbsp;方案的容量空间。再加上本地&nbsp;NVMe&nbsp;SSD&nbsp;的长期运维成本，星飞的图形化管理运维，以及闪存全局均衡，实际&nbsp;TCO&nbsp;下降到本地&nbsp;NVMe&nbsp;SSD&nbsp;的&nbsp;30%。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/71/71dc3cd1d8e8a6b5b10be447925a36d9.png\" /></p><p></p><p></p><h3>集中式全闪对比测试</h3><p></p><p></p><p>在银行业，数据库跑批是相当常见的一项业务。过去该业务一直运行在集中性存储厂商的全闪阵列上，江苏省农村信用社联合社（简称：江苏农信）也是如此。</p><p></p><p>随着业务规模的增加，集中全闪架构进一步制约了江苏农信云的弹性服务能力，因此江苏农信也开始考虑在分布式存储上进行数据库场景评估。</p><p></p><p>在面向&nbsp;OLAP&nbsp;数据库场景的集中式全闪对比场景中，XSKY&nbsp;与江苏农信进行了联合测试。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/68/68df1aaddc9c0e063d208290d9c6995b.png\" /></p><p></p><p>对银行场景来说，高并发低延迟要求更严格，对账差&nbsp;1&nbsp;分钱都不会过夜，晚上跑批对账，做不到高性能低延迟，可能当天的账就无法按时对完，统计核算报表就没法出。因此，做完这些基准性能测试后，在星飞环境测试了一下跑批业务，数据库跑批业务主要有以下过程，分别是解压、数据入库、数据仓库转换和数据集市处理。从这里可以看到，星飞相比混闪集群的运行时间降低了&nbsp;79&nbsp;分钟，而相比&nbsp; IBM&nbsp;FS9200&nbsp;基本持平，在数据集市处理阶段阶段表现更好。</p><p></p><p>通过这次测试，江苏农信坚定了上云信心。过去受限于性能，集中存储承接数据库跑批业务，分布式主要面向非数据库库业务，通过本次测试，新架构的高得盘率使得江苏农信对全闪分布式数据中心有了更多的信心，未来考虑建设大规模全&nbsp;NVME&nbsp;星飞云存储，进一步提升云平台存储服务能力。测试结果也验证了星飞产品可以与集中全闪阵列做到相当的性能时延，且规模化闪存池化后提升资源利用率，降低成本。</p><p></p><p></p><h3>公有云高速云盘对比测试</h3><p></p><p></p><p>公有云高性能云盘，实际上早已已成为众多互联网业务架构中不可或缺的部分。这些云盘不仅提供了弹性的存储能力，还满足了业务对高性能的迫切需求。但有一个不争的事实是，越来越多的客户在关注多云化&nbsp;IT&nbsp;架构，特别是数据密集型业务的下云。</p><p></p><p>对于星飞而言，我们不仅希望能在云下提供高效存储能力，也希望在公有云上也能支持，给客户带来一致的存储体验。</p><p></p><p>我们与某互联网客户成立了联合项目组，针对星飞产品在公有云环境中的性能和成本效益，我们进行了一系列详尽的对比测试。</p><p></p><p>我们选择基于&nbsp;AWS&nbsp;云进行测试，使用了高性能的虚拟机配置作为客户端节点，启动了&nbsp;3&nbsp;个适合作为存储配置的虚拟机作为存储节点，该配置会挂载&nbsp;4&nbsp;个&nbsp;7500GB&nbsp;的本地&nbsp;SSD，并部署了星飞系统，创建了&nbsp;EC&nbsp;4+2:1&nbsp;的存储池并提供&nbsp;12&nbsp;个总可用容量为&nbsp;116TB&nbsp;的&nbsp;NVMF&nbsp;卷。具体配置在这里就不赘述了。</p><p>在每个客户端节点上利用&nbsp;NVMe&nbsp;over&nbsp;TCP&nbsp;方式挂载分别挂载了&nbsp;4&nbsp;卷。我们通过简单性能压测，基本看到，这样三节点星飞大约提供&nbsp;615K&nbsp;IOPS&nbsp;的读写&nbsp;IOPS。</p><p></p><p>io2&nbsp;是&nbsp;AWS&nbsp;EBS&nbsp;的高性能云盘，可以按需灵活提供&nbsp;IOPS&nbsp;和容量，其中容量价格为&nbsp;0.125GB/月，每&nbsp;IOPS&nbsp;价格为&nbsp;0.065。为了跟星飞提供的容量近似，我们创建了&nbsp;16&nbsp;个总容量为&nbsp;116TB&nbsp;的&nbsp;io2&nbsp;类型卷。</p><p></p><p>在性能基准测试中，基于同等容量的&nbsp;16&nbsp;个&nbsp;LUN，我们主要关注单卷随机&nbsp;4KB&nbsp;延迟和集群整体延迟对比。</p><p></p><p>从性能对比中，可以看到在一致的&nbsp;IOPS&nbsp;性能下，AWS&nbsp;EBS&nbsp;io2&nbsp;和星飞卷实现了同等数量级的延迟。另外由于星飞运行在&nbsp;AWS&nbsp;虚拟网络上，并使用&nbsp;TCP/IP&nbsp;协议通信，延迟高于云下的&nbsp;RoCE/RDMA&nbsp;网络，导致延迟高于&nbsp;AWS&nbsp;EBS&nbsp;io2。针对该问题，后续计划支持公有云的&nbsp;RDMA&nbsp;网络方案，来显著降低延迟，接近或持平&nbsp;AWS&nbsp;EBS&nbsp;延迟。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1f/1f7a7d67265f1335596c1838a167b25a.png\" /></p><p></p><p>在&nbsp;TCO&nbsp;对比环节，我们分别计算了&nbsp;AWS&nbsp;星飞系统和&nbsp;AWS&nbsp;EBS&nbsp;io2&nbsp;的购置成本。</p><p></p><p>星飞全闪总共提供&nbsp;615K&nbsp;的&nbsp;IOPS，相比&nbsp;EBS&nbsp;io2&nbsp;预留&nbsp;615K&nbsp;IOPS&nbsp;的方案降低&nbsp;87%&nbsp;的成本。这个差距是巨大的。</p><p></p><p>我们都觉得这样的成本对比可能并不公平，因为星飞系统提供的性能&nbsp;IOPS&nbsp;超出了大多数工作负载所需，在公有云使用中，用户通常只会申请所需的&nbsp;IOPS&nbsp;来节约成本。因此我们将&nbsp;AWS&nbsp;EBS&nbsp;io2&nbsp;预留&nbsp;IOPS&nbsp;降低到&nbsp;61K&nbsp;来接近实际情况，但即使这样，依然能降低&nbsp;62%&nbsp;的&nbsp;EBS&nbsp;成本。</p><p></p><p>通过这次测试，我们看到星飞产品，不仅可以面向最新的硬件技术设计，也能够运行在公有云上，提供跟高性能云盘近似的性能。除了&nbsp;AWS&nbsp;外，后续星飞明年计划支持国内的&nbsp;Top3&nbsp;公有云平台。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/9c/9cccdeebc2f2a7b79fdeced42f51118d.png\" /></p><p></p><p>这次测试我们达成了这些目的：</p><p>1.&nbsp; 首先，星飞可以提供一致的数据服务，帮助实现多云化的&nbsp;IT&nbsp;架构，统一管理和运维技能；</p><p>2.&nbsp; 其次，相比公有云网盘的可用性承诺，基于公有云的星飞产品可以提供更高的冗余度和可靠性保证；</p><p>3.&nbsp; 最后，利用低廉的快照成本和数据缩减能力，星飞产品至少可以降低&nbsp;50%&nbsp;以上的&nbsp;TCO。</p><p>通过这些收益，我们认为星飞确实能够帮助用户一起实现云上云下，一致体验，成本节省一半。</p><p></p><p></p><h2>面向未来全闪数据中心的架构答案</h2><p></p><p></p><p>综上所述，无论从存储系统的架构演进，还是目前硬件产品的发展新趋势、市场和应用的需求，以及基于星海架构的星飞产品的验证结果而言，星海架构以及基于星海架构的全闪存储，是最值得考虑的选择。</p><p>作为行业的领先者，XSKY&nbsp;致力于通过创新的星海架构，推动全闪数据中心技术的发展，满足日益增长的数据存储需求。</p>",
    "publish_time": "2023-12-06 12:41:06",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]