[
  {
    "title": "DevOps 在施耐德：众人参与其中的变革之旅",
    "url": "https://www.infoq.cn/article/EahixYJRtoPSV4G1V1wk",
    "summary": "<p></p><h2>为什么施耐德决定走向DevOps</h2><p></p><p>要想真正认识到<a href=\"https://www.infoq.cn/topic/devops\">DevOps</a>\"在施耐德的发展，我们需要先了解为什么施耐德会对DevOps有需求。</p><p></p><p>施耐德（Schneider）是北美一家大型卡车运输和物流公司。和许多现代企业一样，施耐德逐渐将其业务转向电子化，其应用程序的开发、部署及管理都是维持公司业务运转的重要资产。</p><p></p><p>在应用DevOps之前，每个基础设施和应用程序都是零散的孤岛。或许你会对此感同身受，将所有的服务器、应用程序、技术等等都当作是独立独特的“事物”，都需要热爱它们的特定人群来关爱这些应用。除此之外，施耐德还应用了瀑布式项目管理方法，将项目分为不同且连续的阶段，每个新阶段只在前一阶段完成后才会开始。</p><p></p><p>这些都曾是，或者说在某些情况下，仍是当前项目管理最传统的方法。 可以说，这样的项目管理效率并不高，通常需要几个月甚至更长的时间才能为企业带来价值。</p><p></p><p>这种方式也有其相应的挑战点：</p><p></p><p>需求不明确，分析瘫痪，畏于结束当前阶段，以致无法进入下一阶段需求变更代价愈发高昂项目耗时长久，提高失败风险追赶进度时首先被牺牲的是测试时间大部分项目都无法按期准时交付</p><p>&nbsp;</p><p>随着对业务需求快速响应的要求迫在眉睫，2015年施耐德还只是零星应用敏捷，2016年施耐德的技术部门已经完成了全面的敏捷转型。但业务运转的速度仍然不尽如人意，敏捷优化了工作计划和优先级，也利用了仪式感，但到了测试和代码交付方面却仍是磕磕绊绊，因为这些流程依旧没有任何变化。快进到2017年，DevOps这个词已经成为了施耐德的流行词，是人人都在谈论的话题。鉴于DevOps的流行程度，人们开始猜想，像是施耐德这样的运输公司为什么要采用DevOps？是因为这东西很新潮，很酷吗？是人云亦云还是想解决实际问题并带来真正的影响？</p><p></p><p>与此同时，施耐德还有另一项构建实施新应用的大工程在进行中。施耐德借着这次机会，将参与工程的所有团队和任务都真正进行了可视化处理。以往都是由团队自行掌握工程进度，并不透明，从而导致外界很难真正认识到项目的工作量、参与团队以及交接事项。</p><p></p><p>为提高透明度，施耐德组织了一次演习，测试在环境中部署一个应用程序所需要的团队数量和工作量。这次演习的结果令人大开眼界，也正式推动了施耐德转型的开始。这次演习回答了以下这些问题：</p><p></p><p>如何在不额外增加如人员数量等资源的情况下完成更多工作？如果提高效率？如何让开发人员尽其所长，为企业创造更高质量的价值？如何快速应对市场变化，保持竞争力？</p><p></p><h2>变革的理由</h2><p></p><p></p><p>让我们回到开始，对部分主要影响因素或根因进行分析，了解施耐德的产品交付质量和速度提升背后所采取行动的必要性。这些影响因素涵盖了大量跨团队、跨环境的工作磨合，解释了为何工作流程不透明和缺乏自动化等因素会造成工作不一致和低效率等问题。</p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/articles/devops-meaningful-journey/en/resources/6figure-1-1663767031753.jpg\" /></p><p>在实践中，我们会尽可能展示当前项目状态的指标，并显示可能影响指标的因素。此外，引入利益相关者针对价值的意见，对能否成功达成预期功能非常重要。而施耐德的技术部门全力支持我们的转型也有很大帮助。</p><p></p><p>最重要的是，无论现况多么糟糕都要说出你的故事，掀开遮羞布、暴露出原始数据。尽管这个过程可能会让人有些不适，但这对推进变革是绝对必要的。花时间让变革不那么正式且具有实际意义，让人们能轻松参与其中。达成这点的最好方法是抛弃那些僵硬的模板，像故事一样设计转型案例，使出看家本领来宣传。利用简短的动画而不是枯燥的电子邮件或是一张PPT；定期组织非正式全体会议来收集反馈，听取人们的对你要做、想推销的事的想法；为不习惯公开发表正式反馈的人们提供匿名问卷调查，类似的手段有很多，跳出思维局限，让你的转型变得更加有趣。</p><p></p><h2>人人参与的变革</h2><p></p><p></p><p>协作是需要重点关注的。我们首先着眼整体技术部门，明确关键影响因素及创建跨职能团队来推动转型的关键决策人。在他们的帮助下，我们得以获取技术部门下所有团队的输入、反馈和协调关系。此外，我们还成立了由技术主管组成的指导委会，这两支队伍都高度参与了整个转型过程。</p><p>&nbsp;</p><p>以下是我们使用的一些策略：</p><p></p><p>通过不记名调查定期收集反馈；在转型案例和其他领导层演讲中引用调查反馈中原文，并以此作为转向过程中的整体基准线。在新流程开发、概念论证及结果展示中，邀请技术部门经理、主管及其他同事共同参与。定期开展学习和合作会议，概述下一步变动，收集当前反馈，并就原因、影响及收益展开公开且开放的讨论，回答“这对我有什么意义？”的问题。</p><p>&nbsp;</p><p>以下是我们在选择应用自动化发布工具集时收集到的部分反馈原文：</p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/articles/devops-meaningful-journey/en/resources/3figure-2-1663767031753.jpg\" /></p><p></p><p>下图是用于学习会中的一页PPT：</p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/articles/devops-meaningful-journey/en/resources/2figure-3-1663767031753.jpg\" /></p><p>在施耐德的转型中一个非常重要的点在于，作者并不是推动这项工作的唯一发言人。技术部门上下有足够多的人拥有同样的热情，他们作为这项转型的倡导者，会时不时在与领导的一对一会议上、和同僚的对话上、走廊闲聊中，或者其他与领导层的重要会议上提及这个话题。</p><p>&nbsp;</p><p></p><h2>一路以来的坎坷</h2><p></p><p>施耐德的DevOps转型是非常成功的，这一过程也教会了我们很多。我们不断向前迈步，但在某些情况下，也不得不暂时后退。</p><p>&nbsp;</p><p>例如，我们的目标之一是通过技术，然后是应用，有一个共同的部署过程，但要避免阶梯式。这在某些情况下说起来容易做起来难。当我们开始研究多个团队使用的技术时，我们发现他们在开发和部署这些应用程序的方式上有一些大的差异，但大多是小的。对于我们的一些老技术来说，为了达到一个标准而投入大量资金重写或重新配置这些应用程序，其实是没有意义的。在可能的情况下，我们围绕一个标准进行调整，在某些情况下，专注于将该标准应用于未来的一切新事物，并在稍后回来重新评估现有应用程序。最重要的收获是，我们学习、改进，并将继续这样做，不管一项工作是否被称为 \"DevOps\"，而且进步就是进步。改变不会在一夜之间发生，但在正确的方向上迈出一小步仍然是一种成功。</p><p>&nbsp;</p><p>归根结底，变革是困难的，如果没有领导的支持，没有专门的时间让开发人员真正消化 \"这对我意味着什么？\"和 \"我的工作如何改变？\"以及持续的强化和对话，要取得成功将是一个挑战。</p><p></p><h2>我们在旅途中所学到的东西</h2><p></p><p></p><p>有几个关键的经验，可能看起来很简单，但我觉得非常值得注意。</p><p></p><p>DevOps不是黑白分明的。你可以阅读关于如何做 \"DevOps \"的书籍和文章，但现实是，这可能不适合你的组织。DevOps是否意味着精简？DevOps是否意味着改变文化？DevOps是否意味着实施一堆你一直想做的新技术或酷技术？这看起来很简单，但是要定义DevOps对你的组织意味着什么，然后把这个定义贴在走廊上，在每次谈话中提出来，并确保每个人，如果被问到DevOps对组织意味着什么，都会做出同样的回答。DevOps和Scope Creep是同义词--总是回到你的DevOps转型的 \"原因\"，并把你的目标和目的作为你的真正方向，在你开始的时候验证你的进展。DevOps何时完成？这是我经常被问到的问题，现实是DevOps永远不会完成，但我认为很多人没有谈论的是，这种正式的努力或旅程何时会成为我们工作的方式？我们什么时候才能停止玩弄花招，把这些理想和价值观融入我们的日常工作中？而当你达到这一点时，下一个问题是你如何最好地做到这一点？... 最后一个问题是我们仍在努力回答的一个问题!</p><p></p><h2>应用DevOps的方法</h2><p></p><p></p><p>我想为那些正在考虑应用DevOps的人提供以下两点建议。</p><p></p><p>我们一定要叫它DevOps吗？想想这个问题，以及过去在你们的技术部门中引起如此骚动的所有其他流行语（*cough* <a href=\"https://www.infoq.cn/topic/agile\">敏捷</a>\"）。这些流行语是如此沉重，而且在一些组织中，伴随着巨大的猜测，特别是在某些级别的领导。当这些流行语变得沉重时，预算、所需资源、实施、形式等等也变得沉重。它需要如此沉重吗？它需要如此正式吗？在某种程度上是的，但我诚实的建议是，围绕你要实现的目标，创造你自己响亮的品牌形象。我不想承认我们花了多长的时间来协调和达成DevOps的定义。如果它不是一个朗朗上口的流行语，也没有大量的猜测，我真的相信我们所经历的旋风有一半会被消除，并且会更容易实现统一。在技术领域，我们经常花很多时间考虑如何营销我们正在开发或改进的产品，但当涉及到为技术而技术时，我们真的根本没有营销。营销科技产品，也就是营销你的技术组织用来为企业提供价值的技术、流程和实践，是非常重要的。没有人希望再收到一封无聊的电子邮件或文件，向他们介绍即将发生的变化。在你的技术部门内推广流程、工具集等方面的变化，不仅会引起人们的兴趣，也会增加人们的认同感，让人们兴奋地与他们的同事和经理谈论他们是多么期待这些变化，也会让人们参与进来，提出问题，并提供反馈。把你的技术部门看作是一个社区，花大量的时间制定一个计划，向这个社区推销你的 \"DevOps \"产品、流程和更多的东西--你不会后悔的!</p><p>&nbsp;</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/devops-meaningful-journey/\">Article: DevOps at Schneider: a Meaningful Journey of Engaging People into Change</a>\" </p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/7porVp7qVF03BVc2tDd6\">DevOps 已死，平台工程才是未来</a>\"</p>",
    "publish_time": "2022-10-23 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "60岁周星驰招聘Web3.0人才，要求“宅心仁厚”；马斯克计划裁掉推特75%的员工；Linus致开发者：不要再熬夜了 ｜ Q资讯",
    "url": "https://www.infoq.cn/article/helHPDyExQfDC3hGtvJd",
    "summary": "<p></p><blockquote>马斯克放话，计划裁掉推特75%的员工；60岁周星驰进军Web3.0，招聘人才希望“有项目管理经验且宅心仁厚”；华为 Link Now 在线协同办公软件宣布停止运营；腾讯市值反超贵州茅台，坐回中国上市公司“头把交椅” ；Gartner 发布 2023 年十大战略技术趋势；NGINX 开源社区发布升级通告，以应对漏洞风险；谷歌旗下开源 Go 应用程序容器项目 ko 申请成为 CNCF 沙盒项目；Linus Torvalds 致 Linux 开发者：不要再熬夜了......</blockquote><p></p><p>&nbsp;</p><p></p><h2>科技企业</h2><p></p><p>&nbsp;</p><p></p><h4>马斯克放话，计划裁掉推特75%的员工</h4><p></p><p>&nbsp;</p><p>10月21日消息，《华盛顿邮报》最近援引采访和内部文件报道称，马斯克在收购Twitter公司的交易中告诉潜在投资者，在收购完成后，他计划裁掉这家社交媒体公司7500名员工中的近75%。</p><p>&nbsp;</p><p>目前Twitter公司和埃隆·马斯克（Elon Musk）的顾问正在加紧推进各自的工作，希望在本月底之前完成双方达成的440亿美元收购交易。除此之外，Twitter还计划大幅削减基础设施运行开支，其中包括关闭为2亿多用户提供服务的部分数据中心。报道称，此前Twitter目前的管理层计划在明年年底前将公司的工资总额减少约8亿美元，这意味着要有近四分之一的员工离开，现在马斯克将裁员数变为了四分之三。</p><p>&nbsp;</p><p>马斯克多次提及想在收购Twitter后进行大幅裁员，在6月与Twitter员工的问答中，马斯克表示需要“合理化员工人数”，并表示：“任何对Twitter有重要贡献的雇员都应该没有什么可担心的。”</p><p>&nbsp;</p><p>马斯克的这些言论明显会让Twitter员工惴惴不安。对此，Twitter告知员工，没有全公司范围内的裁员计划。</p><p>&nbsp;</p><p></p><h4>60岁周星驰进军Web3.0，招聘人才希望“有项目管理经验且宅心仁厚”</h4><p></p><p>&nbsp;</p><p>10月18日，60岁周星驰首度开通Instagram账号，并在这个社交媒体上发布了第一条动态：招熟悉Web3.0人才。港媒曝其准备为进军元宇宙铺路，之后会在这个领域大展拳脚。</p><p>&nbsp;</p><p>周星驰还表示，自己对招聘相当重视，而且会亲自挑选人才。人才要求：熟悉Web3.0、有项目管理经验、有头脑又宅心仁厚。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/10/1080f1c8e765cd156598bec487d2ffde.png\" /></p><p></p><p>&nbsp;</p><p>&nbsp;</p><p>由于该社交账号并没有经过认证，很多网友都不敢相信真的是周星驰本人。港媒对此求证了周星驰的助理 Chris，他证实了这个账号确实是周星驰本人的，但并未回应招人以及之后的事业规划等问题。</p><p>&nbsp;</p><p></p><h4>华为 Link Now 在线协同办公软件宣布停止运营</h4><p></p><p>&nbsp;</p><p>10月20日消息，华为Link Now官网近日宣布，因产品策略调整，自12月16日24时起，Link Now业务将正式停止运营与服务。</p><p>&nbsp;</p><p>此前，Link Now已于10月16日24时起停止新用户的注册，不过已注册的用户仍可正常使用。已注册用户可在12月16日24时前，保存本地聊天记录。华为官网提供了Link Now导出聊天记录的操作步骤：打开会话，点击右上角进入聊天设置或群组设置，点击导出聊天记录，随后打开文件管理&gt;我的手机，依次点击download＞LinkNow&gt;Message＞Takeout，即可找到导出的聊天记录文件。</p><p>&nbsp;</p><p>资料显示，华为Link Now是在线协同办公软件，于2020年上线，主要提供会议和在线课堂服务。单场会议最多可同时参与300人（含主持人），同时启用音视频人数最多可为50人。</p><p>&nbsp;</p><p></p><h4>腾讯市值反超贵州茅台，坐回中国上市公司“头把交椅”&nbsp;</h4><p></p><p>&nbsp;</p><p>10月20日，据财经媒体消息，腾讯控股再度超越贵州茅台，坐稳“市值一哥”位置。截至19日收盘，贵州茅台A股股价下跌3.39%，收每股1648元(人民币，下同)，市值约2.07万亿元；腾讯控股港股股价跌幅为4.09%，收每股244港元，市值约2.34万亿港元，按当天的汇率计算，约为2.15万亿元。此前，根据金融数据服务商东方财富17日发布的三季度中国上市企业市值500强名单，贵州茅台以2.35万亿元市值，超过了腾讯控股，成为中国上市公司中的“市值一哥”。</p><p>&nbsp;</p><p></p><h2>IT业界</h2><p></p><p>&nbsp;</p><p></p><h4>Gartner 发布 2023 年十大战略技术趋势</h4><p></p><p>&nbsp;</p><p>近日，Gartner发布了企业机构在2023年需要探索的<a href=\"https://www.infoq.cn/article/RPeJFB2plzMHEvWQkpmS\">十大战略技术趋势</a>\"，为企业加快数字化转型的技术储备提供建议。值得注意的是，可持续性（Sustainability）贯穿在2023年的所有战略技术趋势中。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/dc/dc265864092c114ea34252a71a2a6ef3.png\" /></p><p></p><p>&nbsp;</p><p>Gartner将2023年十大战略技术趋势归纳为优化、扩展和开拓三大主题。优化主题中包括数字免疫系统（Digital Immune System）、应用可观测性（Applied Observability ）、AI信任、风险和安全管理（Trust, Risk and Security Management），均能够为企业规避风险和提升安全性打下基础。</p><p>&nbsp;</p><p>扩展主题分为行业云平台（Industry Cloud Platforms）、平台工程（Platform Engineering）、无线价值实现（Wireless Value Realization）。未来，企业通过相关平台、无线网络等基础设施的打造，不仅是连接，更将有助于实现更大的价值。</p><p>&nbsp;</p><p>开拓主题为元宇宙（Metaverse）、超级应用（Superapps）、自适应AI（Adaptive AI），都是未来科技领域的重要方向。其中，Gartner将元宇宙定义为一个由通过虚拟技术增强的物理和数字现实融合而成的集体虚拟共享空间。这个空间具有持久性，能够提供增强沉浸式体验。Gartner预计完整的元宇宙将独立于设备并且不属于任何一家厂商。</p><p>&nbsp;</p><p></p><h4>NGINX 开源社区发布升级通告，以应对漏洞风险</h4><p></p><p>&nbsp;</p><p>10月20日，<a href=\"https://www.infoq.cn/article/TWdMTS6gaPx6qPIgxNuq\">NGINX开源社区发布了</a>\"针对 NGINX Plus、NGINX 开源版、NGINX 企阅版以及 NGINX Ingress Controller 的更新，以应对最近在 NGINX 模块块 ngx_http_mp4_module 及 ngx_http_hls_module 中发现的漏洞——这两个模块用于以 MP4 以及 Apple HTTP Live Streaming (HLS) 格式进行视频流媒体处理。</p><p>&nbsp;</p><p>对这些漏洞的成功利用可能允许一个本地攻击者破坏 NGINX 的 worker 进程，导致其中止或其他潜在的影响。所有版本的 NGINX Plus、NGINX 开源版、NGINX 企阅版以及 NGINX Ingress Controller 均受影响，故强烈建议用户将软件升级到最新版本。</p><p>&nbsp;</p><p></p><h4>谷歌旗下开源 Go 应用程序容器项目 ko 申请成为 CNCF 沙盒项目</h4><p></p><p>&nbsp;</p><p>当地时间 10 月 18 日，谷歌开源博客发文称，ko 申请成为 CNCF 沙盒项目。</p><p>&nbsp;</p><p><a href=\"https://www.infoq.cn/article/F9z3g4r3MzWgl6AkQFUv\">ko 是一个 Go 应用程序容器镜像构建器</a>\"，适用于镜像包含单个 Go 应用程序、而对 OS 基础镜像没有很多依赖项（如没有 cgo 或 OS 包依赖项）的用例。ko 通过在本地机器上有效地执行 go build 来构建图像，因此不需要 docker。ko 也适合轻量级 CI/CD 用例，因为它具有多平台支持和自动 SBOM 生成功能。</p><p>&nbsp;</p><p>据悉，早在 2018 年，谷歌的 Knative 团队就需要一种更快的方法来迭代 Kubernetes 控制器。他们创建了一个新工具，专门用于将 Go 应用程序部署到 Kubernetes，而无需担心容器镜像。该工具在被证明是 Knative 社区不可或缺的工具后，谷歌在 2019 年 3 月将其作为一个名为 ko 的独立开源项目发布。</p><p>&nbsp;</p><p>GitHub 地址：<a href=\"https://github.com/ko-build/ko\">https://github.com/ko-build/ko</a>\"</p><p>&nbsp;</p><p></p><h4>Linus Torvalds 致 Linux 开发者：不要再熬夜了</h4><p></p><p>&nbsp;</p><p>从 10 月 2 日 Linux 内核 6.0发布起，为期两周的合并窗口现已关闭，当地时间 10 月 16 日，Linus Torvalds 发布了 Linux 内核 6.1 版的第一个候选版本，并准备好让测试者、早期采用者和尝鲜用户使用，最终版本预计在 2022 年 12 月初或中旬发布。Torvalds 在每周内核更新状态中，吐槽了“在合并窗口的最后几天收到相当多 pull 请求”一事，“这真的非常烦人。”</p><p>&nbsp;</p><p>“合并窗口需要两周的时间，这让我有足够的时间进行检查，而不是“用两周的时间匆忙地组装一个分支，然后在第二周的周五发布了”。Torvalds 表示，那种“在截止日期前一天，通宵达旦写作业”的行为在高中毕业后就应该不存在了，更别说用在内核开发上。</p><p>&nbsp;</p><p>更多阅读：</p><p>《<a href=\"https://www.infoq.cn/article/5QJcMPcdAeK1QpU2jACY\">Linus Torvalds 致内核开发人员：在截止日前收到相当多 pull 请求“非常烦人”</a>\"》</p><p>&nbsp;</p>",
    "publish_time": "2022-10-23 13:14:44",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Apache Pulsar 在微信大流量实时推荐场景下的实践",
    "url": "https://www.infoq.cn/article/LKBS54VlX2VtC9phdN0B",
    "summary": "<p></p><p>编者按：本文整理自 8 月 Apache Pulsar Meetup 上，刘燊题为《Apache Pulsar 在微信的大流量实时推荐场景实践》的分享。本文介绍了微信团队在大流量场景下将 Pulsar 部署在 K8s 上的实践与优化、非持久化 Topic 的应用、负载均衡与 Broker 缓存优化实践与 COS Offloader 开发与应用。</p><p></p><p>在通信社交领域，微信已经成为国内当之无愧的社交霸主。用户人数在 2018 年突破了 10 亿，截至 2021 年第三季度末，微信每月活动账户总数已达到 12.6 亿人，可以说，微信已经成为国人生活的一部分。</p><p></p><p>微信的业务场景包括推荐业务、风控、监控系统、AI 平台等。数据通过 SDK 和数据采集方式接入，经由 MQ、Kafka、Pulsar 消息中间件，其中 Pulsar 发挥了很大的作用。中间件下游接入数据计算层 Hadoop、Spark、Flink、ClickHouse、TensorFlow 等计算平台，由于本次介绍实时推荐场景，因此较多使用 Flink 和 TensorFlow。落地存储平台则包括 HDFS、HBase、Redis 以及各类自研 KV。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/59/5999917bcfcee6fa978e1c1dafbd4539.png\" /></p><p></p><p>团队选型 Pulsar 的初期目标是获得一个满足大数据流量场景并且运维管理便捷的消息队列系统。最终选择 Pulsar 的主要原因有五点：</p><p></p><p>在腾讯自研上云的大背景下，团队非常看重云原生特性。Pulsar 的云原生特性，包括分布式、弹性伸缩、读写分离等都体现出优势。Pulsar 逻辑层 Broker 无状态，直接提供服务。存储层 Bookie 有状态，但是节点对等，且 Bookie 自带多副本容灾；Pulsar 支持资源隔离，可以软隔离或硬隔离，避免不同业务之间互相影响Pulsar 支持灵活的 Namespace/Topic 策略管控，对集群的管理和维护有很大帮助；Pulsar 能够便捷扩容，逻辑层 Broker 的无状态和负载均衡策略允许快速扩容，存储层 Bookie 节点之间互相对等也便于快速扩容，可以轻松应对流量暴涨场景；Pulsar 具备多语言客户端能力，微信的业务场景中涉及 C/C++、TensorFlow、Python 等语言，Pulsar 可以满足需求。</p><p></p><p>实践 1：大流量场景下的 K8s 部署实践</p><p></p><p>微信团队使用了 Pulsar 官网提供的 K8s Helm chart 部署方式。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/4a/4a142ac0bc4ab5ffda25c78f3875a79d.png\" /></p><p></p><p>原生部署架构中，流量从 Proxy 代理层进入，经过 Broker 逻辑服务层写入 Bookie 存储层。Proxy 代理层代理客户端和 Broker 之间的连接，Broker 层管理 Topic，Bookie 层负责持久化消息存储。在上图中，入流量和出流量分别用 In 和 Out 进行标记，Replica 是配置的副本。</p><p></p><p>在应用的过程中团队发现了两个问题：首先 Proxy 代理了 Pulsar 客户端的请求，导致 Broker 无法获取客户端 IP，增加了运维难度；其次，当集群流量较大时，集群内部带宽会成为瓶颈。上图架构内，集群入流量为 （2+ 副本数）倍；出流量最大为 3 倍，Consumer、Proxy、Broker 和 Bookie 间分别有一倍流量，但是仅极端情况下流量会全量从 Bookie 流出。假设出入流量都是 10 GBps，副本数为 3，集群内入流量会放大为 50 GBps，出流量会放大为 30 GBps。另外默认情况下 Proxy 服务只有一个负载均衡器承载所有流量，压力巨大。</p><p></p><p>这里可以看出瓶颈主要出现在 Proxy 层，该层造成了很大流量浪费。而 Pulsar 实际上支持 Broker 直连，因此团队在此基础上进行了一些优化：</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/14/14487736115db2c23f4ee143ba39f436.png\" /></p><p></p><p>团队利用了腾讯云 K8s 集群的能力，给 Broker 配置了弹性网卡，并使 Broker 的 IP 直接暴露在集群外，可以被外部客户端直接访问。Broker 服务也配置了负载均衡器。这样客户端可以直接访问负载均衡器 IP，再经过 Pulsar 内部协议的 Lookup 操作找到要访问的 Topic 所处的 Broker。由此节省了 Proxy 带来的额外带宽消耗。</p><p></p><p>团队在 K8s 部署方面还做了以下优化工作：</p><p></p><p>如上文所述去 Proxy；Bookie 使用多盘多目录 + 本地 SSD 提升性能，由于原社区版本 Pulsar 不支持多盘多目录，这里团队做了改进支持并合并入社区 (<a href=\"https://github.com/apache/pulsar-helm-chart/pull/113\">https://github.com/apache/pulsar-helm-chart/pull/113</a>\")；日志采集使用腾讯云 CLS（日志服务），统一的日志服务可以简化分布式多节点系统的运维、问题查询操作；指标采集使用 Grafana + Kvass + Thanos，默认指标采集使用了单机服务，很快出现了性能瓶颈，优化后问题解决且支持水平扩容。</p><p></p><p>实践 2：非持久化 Topic 的应用</p><p></p><p>生产者和消费者是同 Broker 中的 Dispatcher 模块交互的，而持久化 Topic 中生产者数据会通过 Dispatcher 进入 Managed Ledger 模块，再调用 Bookie 客户端与 Bookie 交互。非持久化 Topic 中数据不会进入 Managed Ledger，而是直接发送给消费者。在大流量场景中，非持久化 Topic 由于不需要与 Bookie 交互，对集群的带宽压力会明显降低。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/6b/6b4d9d9d0bdf8887ef0b71992a75e39f.png\" /></p><p></p><p>非持久化 Topic 在大流量实时推荐场景中有应用，但具体的应用场景必须满足“可容忍少量数据丢失”的要求。实践中有三种场景满足这一要求：</p><p></p><p>大流量 + 消费端处理能力不足的实时训练任务；时效性敏感的实时训练任务；抽样评测任务。</p><p></p><p>实践 3：负载均衡与 Broker 缓存优化</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/32/32f1d6303c5417c6b5810c0b7b5c8d36.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/69/69100ad755b862fdae7ed42de91c764f.png\" /></p><p></p><p>以上是一个线上真实的场景。生产环境中出现了反复 bundle unload 的问题，导致 Broker 负载反复波动。</p><p></p><p>该场景中使用了以下负载均衡配置：</p><p></p><p><code lang=\"makefile\">loadManagerClassName=org.apache.pulsar.broker.loadbalance.impl.ModularLoadManagerImpl\nloadBalancerLoadSheddingStrategy=org.apache.pulsar.broker.loadbalance.impl.ThresholdShedder\nloadBalancerBrokerThresholdShedderPercentage=10\nloadBalancerBrokerOverloadedThresholdPercentage=70\nLoad bundle处理类(select for broker)：org.apache.pulsar.broker.loadbalance.impl.LeastLongTermMessageRate\n</code></p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/94/94f30946d087c211c7cc015dd0533a40.png\" /></p><p></p><p>如上图，假设三个&nbsp;Broker&nbsp;平均负载是&nbsp;50%，则阈值就是&nbsp;60%，超出&nbsp;60%&nbsp;的部分需要均衡。但实际应用中发现 Broker 1 的多余 20% 负载会卸载到 Broker 2 上，之后由于 Broker 2 超载所以又会卸载下来，还会回到 Broker 1 上。结果流量就在 Broker 1 和 Broker 2 上反复横跳。</p><p></p><p>跟踪代码发现，Load Bundle 处理类是根据 Broker 的消息量判断该承载多余流量的 Broker，但生产中消息量与机器负载并不完全正相关，且 Threshold shedder 是根据 CPU、出入流量、内存等多种指标平均加权得出 Broker 负载，所以 bundle 的加载和卸载逻辑并不一致。</p><p></p><p>对此团队进行了代码优化改进：</p><p></p><p><code lang=\"makefile\">loadManagerClassName=org.apache.pulsar.broker.loadbalance.impl.ModularLoadManagerImpl\nloadBalancerLoadSheddingStrategy=org.apache.pulsar.broker.loadbalance.impl.ThresholdShedder\nloadBalancerBrokerThresholdShedderPercentage=10\nloadBalancerBrokerOverloadedThresholdPercentage=70\n\nLoad bundle处理类(select for broker)：在低于平均负载的broker中随机选择\nloadBalancerDistributeBundlesEvenlyEnabled=false (相同的代码实现：PR-16059)\n</code></p><p></p><p>默认情况下，Pulsar 集群希望一个 Namespace 下的多个 bundle 尽量平均分散在多个 Broker 上，但这一逻辑会将上面的 Broker 3 剔除候选均衡 Broker 之列。所以这里修改了这一逻辑，使流量可以平均分布在三个 Broker 上。社区也有类似的代码实现：</p><p></p><p><code lang=\"makefile\">PR-16281:\nloadBalancerLoadPlacementStrategy=org.apache.pulsar.broker.loadbalance.impl.LeastResourceUsageWithWeight\n</code></p><p></p><p>优化后的效果如下，可以看到集群流量稳定许多：</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/4b/4bf971b21214b7a8779ba38499d4276e.png\" /></p><p></p><p>团队还在实时推荐场景下优化了 Broker 缓存。这种场景有以下特征：</p><p></p><p>消费任务数量众多；消费速度参差不齐；消费任务经常重启。</p><p></p><p>对此，社区原有的 Broker 缓存逻辑效果不佳。以下是 Broker 缓存的原有驱逐逻辑：</p><p></p><p><code lang=\"cs\">void doCacheEviction(long maxTimestamp) {\n    if (entryCache.getsize() &lt;= 0) {\n        return;\n    }\n    // Always remove all entries already read by active cursors\n    PositionImpl slowestReaderPos = getEarlierReadPositionForActiveCursors);\n    if (slowestReaderPos != null) {\n        entryCache.invalidateEntries(slowestReaderPos):\n    }\n    // Remove entries older than the cutoff threshold\n    entryCache.invalidateEntriesBeforeTimestamp(maxTimestamp);\n}\n</code></p><p></p><p>默认策略会找出当前消费不活跃（由阈值控制，Cursor 消费的 entry 超过阈值即被认为是不活跃）的 Cursor，对 Cursor 之前的数据做驱逐。对此，腾讯工程师向社区提交了代码改进：</p><p></p><p><code lang=\"cs\">void doCacheEviction (long maxTimestamp){\n    if (entryCache.getSize() (= 0) {\n        return;\n    )\n\n    PositionImpl evictionPos;\n    if (config.isCacheEvictionByMarkDeletedPosition()){\n        evictionPos=getEarlierMarkDeletedPositionForActiveCursors().getNext();\n    } else {\n        // Always remove all entries already read by active cursors\n        evictionPos=getEarlierReadPositionForActiveCursors();\n    }\n    if (evictionPos != null) {\n        entryCache.invalidateEntries(evictionPos);\n    }\n    // Remove entries older than the cutoff threshold\n    entryCache.invalidateEntriesBeforeTimestamp(maxTimestamp);\n}\n</code></p><p></p><p>这里将选择非活跃 Cursor 的逻辑改成了寻找需要删除的数据位置。这样消费速度相对较慢的数据就不会穿越到 Bookie 中增加集群压力，只要数据有 Backlog 就会被缓存。但这种方法会导致缓存空间吃紧，因为消费任务重启期间仍旧要无意义地保留缓存，占用缓存空间。</p><p></p><p>对此微信团队在社区改进的基础上又做了调整：</p><p></p><p><code lang=\"cs\">void doCacheEviction(long maxTimestamp){\n    if (entryCache.getSize() &lt;= 0) {\n        return;\n    }\n    \n    if (factory.getConfig().isRemoveReadEntriesInCache()){\n        PositionImpl evictionPos;\n        if (config.isCacheEvictionByMarkDeletedPosition()){\n            PositionImplearlierMarkDeletedPosition=getEarlierMarkDeletedPositionForActiveCursors();\n            evictionPos = earlierMarkDeletedPosition != null? earlierMarkDeletedPosition.getNext() : null;\n        } else {\n            // Always remove all entries already read by active cursors\n            evictionPos=getEarlierReadPositionForActiveCursors();\n        }\n        if (evictionPos != null) {\n            entryCache.invalidateEntries(evictionPos);\n        }\n    }\n    \n    //Remove entries older than the cutoff threshold\n    entryCache.invalidateEntriesBeforeTimestamp(maxTimestamp);\n}\n</code></p><p></p><p>这里简单地将一定时间内的数据缓存到 Broker 中，有效提升了场景中的缓存效率：</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/6b/6bd1520a6af078281faba5410ec113cd.png\" /></p><p></p><p>实践 4：COS Offloader 开发与应用</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/9f/9fbd1af5eac68f1ffe83b9561fa778a4.png\" /></p><p></p><p>Pulsar 提供了分层存储能力，可以将存储转移到廉价的存储层。Pulsar Offloader 可以将超过一定时长的 Ledger 搬运到远端存储，不再停留在 Bookie 层，由 Broker 接管这部分的数据管理。</p><p></p><p>团队使用 Pulsar Offloader 的原因有：</p><p></p><p>Bookie Journal/Ledger 盘都使用 SSD，成本较高；业务需求存储时间长、数据存储量大；数据消费任务异常，需要容忍较长时间的数据 Backlog；数据回放需求。</p><p></p><p>Pulsar 社区版本并不支持腾讯云对象存储（COS），所以团队开发了内部云上 COS Offloader 插件并应用于线上。</p><p></p><p>未来展望与计划</p><p></p><p>团队在部署与使用过程中一直和社区密切沟通，团队未来计划跟进社区版本升级与 bug 修复。微信团队将着重参与一些特性，比如 PIP 192(<a href=\"https://github.com/apache/pulsar/issues/16691\">https://github.com/apache/pulsar/issues/16691</a>\")Broker 负载均衡与缓存优化，计划重构负载均衡器；PIP 180(<a href=\"https://github.com/apache/pulsar/issues/16153\">https://github.com/apache/pulsar/issues/16153</a>\")&nbsp;通过影子 Topic 解决读放大问题，帮助精细化管理 Topic。微信团队也在关注 Pulsar 生态进展，如 Flink、Pulsar、数据湖全链路打通。</p><p></p><p>作者简介</p><p></p><p>刘燊，腾讯微信高级研发工程师，Apache Pulsar Contributor。</p><p></p><p>今日好文推荐</p><p></p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651144382&amp;idx=1&amp;sn=1a4899f4c73d68d936f5d1a2548e84b1&amp;scene=21#wechat_redirect\">60 岁周星驰招聘 Web3.0 人才，要求“宅心仁厚”；马斯克计划裁掉推特 75% 的员工；Linus 致开发者：不要再熬夜了 ｜ Q 资讯</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651144274&amp;idx=1&amp;sn=5dde6723cfa90ccf7650f3fdec31c6ce&amp;chksm=bdb8b8018acf3117d7281e6eb64eec1cb19bd0e9631ed148e78747ee06420066cb1ca2a79406&amp;scene=21#wechat_redirect\"></a>\"<a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651144274&amp;idx=1&amp;sn=5dde6723cfa90ccf7650f3fdec31c6ce&amp;chksm=bdb8b8018acf3117d7281e6eb64eec1cb19bd0e9631ed148e78747ee06420066cb1ca2a79406&amp;scene=21#wechat_redirect\">可能是最严重的云存储数据外泄事故之一：微软承认服务器错误配置导致全球客户数据泄露</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651144240&amp;idx=1&amp;sn=c82c4527773a774e6dae99271eb8ca2c&amp;chksm=bdb8b8638acf317550482d606e5b229b856e719c26dd8a97dfe5183979111144d03b91764ded&amp;scene=21#wechat_redirect\">上云“被坑”十年终放弃，寒冬里第一轮“下云潮”要来了？</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651143991&amp;idx=1&amp;sn=0da8c1a09121bf122d0c8836748dbdea&amp;chksm=bdb8c7648acf4e726be7d8010ae209f1204f346be938f80fbc647b12e9b1de7f08d025ee9a9f&amp;scene=21#wechat_redirect\">编程神器Copilot逐字抄袭他人代码？GitHub 回应：相似，但不同…</a>\"</p><p></p><p></p><p></p>",
    "publish_time": "2022-10-23 13:40:03",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "周星驰招聘Web3人才：要有头脑又宅心仁厚；微软回应“泄露2.4TB数据”；罗永浩AR创业公司获近4亿元融资 | AI一周资讯",
    "url": "https://www.infoq.cn/article/AKOACz96X5He3Vi1gGGX",
    "summary": "<p></p><blockquote>微软回应“泄露65000家公司的2.4TB数据”：事件范围被“严重夸大”；罗永浩AR创业公司获近4亿元融资；TikTok全球日活破10亿？内部人士回应：消息不实；传美国对华技术禁令范围将扩大到量子计算和AI软件；周星驰亲自挑选Web3人才：要求有管理经验，有头脑又宅心仁厚；编程神器 Copilot 逐字抄袭他人代码？GitHub 回应：相似，但不同......</blockquote><p></p><p></p><h2>资讯</h2><p></p><p></p><h4>谷歌洽谈向人工智能初创公司Cohere投资2亿美元</h4><p></p><p></p><p>据《华尔街日报》10月22日报道，知情人士透露，Alphabet Inc.旗下谷歌正在就向人工智能初创公司Cohere Inc.投资至少2亿美元进行谈判。知情人士说，作为谈判的一部分，Cohere还与芯片制造商英伟达就潜在的战略投资进行了讨论。目前还无法得知Cohere从任何潜在的新融资中获得的估值。</p><p></p><p>报道指出，Cohere成立于2019年，开发人员可以使用该公司创建的自然语言处理软件为企业构建人工智能应用程序，包括聊天机器人工具和其他可以理解人类语音和文本的功能。去年11月，该公司宣布与谷歌建立多年合作关系，由谷歌的云部门为Cohere提供训练软件模型所需的计算能力。</p><p></p><h4>传美国对华技术禁令范围将扩大到量子计算和AI软件</h4><p></p><p></p><p>10月21日消息，据彭博社援引知情人士的消息报道称，美国拜登政府正在探索新的出口管制的可能性，计划进一步限制中国获得一些最强大的新兴计算技术。</p><p></p><p>据知情人士透露，这些潜在计划仍处于早期阶段，重点会放在量子计算以及人工智能（AI）软件（之前限制的是AI芯片）这一类大多仍处于实验阶段的领域。他们表示，行业专家正在考虑如何设定这项新兴技术的限制参数。</p><p></p><h4>微软回应“泄露65000家公司的2.4TB数据”：事件范围被“严重夸大”</h4><p></p><p></p><p>据界面新闻报道，10月19日，网络安全供应商SOCRadar表示，该公司的内置云安全模块检测到微软维护的Azure Blob存储配置错误，其中包含来自知名云提供商的敏感数据。泄露的文件包括执行证明（PoE） 、产品订单、产品报价、客户文件、资产文件等，设计来自11个国家的65000多家公司的关键数据。经过调查，SOCRadar研究人员发现了公开可用的2.4TB数据，其中包含属于微软的敏感信息。目前SOCRadar研究人员已发现超过33.5万封电子邮件、13.3万个项目和54.8万名用户暴露。SOCRadar称提供免费服务以为公司查看是否遭到数据泄露。</p><p></p><p>对此，10月20日，微软安全响应中心回应称，确认存在一个错误配置的服务器，但认为SOCRadar“严重夸大了”该事件的范围。</p><p></p><p>微软在调查结果中表示，已确认存在一个<a href=\"https://www.infoq.cn/news/URgelsO6yMlOzUczfkb0\">错误配置的服务器</a>\"，导致可能未经认证访问一些与微软和潜在客户的互动所对应的业务交易数据。不过，问题是由一个不在微软生态系统中使用的终端上的“无意错误配置”造成的，而不是安全漏洞造成的。微软认为SOCRadar大大夸大了这个问题的范围，因为经过对数据集的深入调查和分析，其中多次出现相同的电子邮件、项目和用户。此外，微软认为，SOCRadar选择公开发布一个搜索工具“不符合确保客户隐私或安全的最佳利益”，有可能使客户面临不必要的风险。</p><p></p><h4>罗永浩AR创业公司获近4亿元融资</h4><p></p><p></p><p>据 36 氪爆料称，罗永浩新公司 Thin Red Line（细红线）近期完成近 4 亿元天使轮融资，并计划于 10 月底继续开放新一轮融资。据报道，细红线公司的天使轮融资由美团龙珠领投，经纬创投、蓝驰创投等九家机构跟投。据悉，目前罗永浩已经公开表示「将会正式退出微博和所有的社交平台，再次埋头创业」，正式进军 AR 领域。</p><p></p><p>天眼查App显示，Thin Red Line关联公司北京细红线科技有限公司成立于2018年7月，注册资本10万人民币，经营范围含软件开发；虚拟现实设备制造；电子产品销售等，由冯遥遥、王安琪共同持股。知识产权信息显示，该公司已备案域名为thinredline.com.cn的网站。据知情人士介绍，目前 Thin Red Line 的估值范围为 10-15 亿人民币。</p><p></p><h4>TikTok全球日活破10亿？内部人士回应：消息不实</h4><p></p><p></p><p>近日，有消息称TikTok达成了一个新纪录：日活用户突破10亿。甚至一度触发在线用户登录警报，开发人员临时扩容才允许新用户访问。目前，全球日活突破10亿的App有四个：Facebook、WhatsApp、Instagram和YouTube，微信日活在9亿左右。</p><p></p><p>据21世纪经济报道，对此，有字节跳动内部人士表示，该消息不实。</p><p></p><h4>周星驰亲自挑选Web3人才：要求有管理经验，有头脑又宅心仁厚</h4><p></p><p></p><p>10月18日，周星驰开通个人社交媒体账号，并发布“人才招募令”称，要在漆黑中找寻鲜明出众的Web3人才。据悉，周星驰提出的招聘要求是“熟悉Web3，有项目管理经验，有头脑又宅心仁厚”，工作范围是“祝我建造创意未来”，并表示自己会亲自挑选人才。</p><p></p><h4>传英特尔将自动驾驶部门Mobileye估值定为不到200亿美元</h4><p></p><p></p><p>据熟知内情的消息人士透露，英特尔计划将其自动驾驶汽车部门Mobileye以远低于此前预期的估值IPO（首次公开募股）上市。消息人士称，英特尔最初预计的Mobileye估值约为500亿美元，但现在的目标则仅为不到200亿美元，而且在IPO中发售的股票数量也将少于最初的计划。</p><p></p><h4>马斯克计划未来数月砍掉推特75%员工</h4><p></p><p></p><p>10月20日，有媒体援引知情人士的话说，推特预计将在未来几个月内进行大规模裁员。知情人士称，马斯克在收购推特的交易中告诉潜在投资者，他计划裁减推特7500名员工中近75%的员工。</p><p></p><p>在特斯拉周三召开的第三季度财报电话会议上，马斯克表示他为推特付出了太多：“虽然很明显，我自己和其他投资者现在显然为推特付出了过高的代价，但在我看来，推特的长期潜力比其当前价值高出一个数量级。”</p><p></p><h4>编程神器 Copilot 逐字抄袭他人代码？GitHub 回应：相似，但不同......</h4><p></p><p></p><p>日前，德州农工大学的一位计算机科学教授 Tim Davis 在推特上发文称，<a href=\"https://www.infoq.cn/article/INY1NFPzkCR0p6KhLe4a\">GitHub Copilot</a>\" 在没有标注来源也没有 LGPL 许可的情况下，输出了大量应该受版权保护的代码。</p><p></p><p>Tim Davis 还发了自己和 GitHub Copilot 在稀疏矩阵转置、稀疏矩阵加法的代码对比，并表示两者几乎一模一样，高度雷同。Tim Davis 的推文引发热议，System76 技术总监认为这算是 GitHub Copilot 非法洗代码行为。</p><p></p><p>对此，GitHub Copilot 的发明者 Alex Graveley 回应道，Tim Davis 写的代码和 Copilot 产生的代码不同，“相似，但不同”。他还提到，如果有人能提供一种方法可以自动识别代码是由某一方衍生出来的，那就可以申请专利了。</p><p></p><p>Alex Graveley 表示，到目前为止 GitHub Copilot 已被指控了诸多问题，包括剽窃代码、引入漏洞、代码不完美、太分散注意力、甚至让人变笨等等。他强调道，“我认为程序员永远不会被取代。Copilot 使人们的工作效率更高。”</p><p></p><h4>国产大数据基础软件第一股星环科技成功上市，开盘大涨超52%</h4><p></p><p></p><p>10 月 18 日，“国产大数据基础软件第一股”星环信息科技（上海）股份有限公司（简称“<a href=\"https://www.infoq.cn/article/TjgeNdDP6eij3TxXbN9e\">星环科技</a>\"”）正式登陆科创板，股票代号为星环科技（688031），发售价为每股 47.34 元，开盘后报每股 72 元，涨幅超52%。</p><p></p><p>据了解，星环科技成立于 2013 年，是一家企业级大数据基础软件开发商，围绕数据的集成、存储、治理、建模、分析、挖掘和流通等数据全生命周期提供基础软件及服务。今年 6 月 8 日，上交所科创板上市委员会 2022 年第 47 次审议会议上审议了星环科技上市请求，结果显示，星环科技首发符合发行条件、上市条件和信息披露要求，批准上市。</p><p></p><p>据天眼查显示，成立近十年间，星环科技完成了 10 轮融资，融资总金额近 20 亿，投资方不乏中金资本、启明创投、腾讯投资等知名投资机构和企业。</p><p></p><h4>不依赖极高端光刻机，国内首条多材料光子芯片产线即将建成</h4><p></p><p></p><p>据《北京日报》报道，从中科鑫通获悉，国内首条“多材料、跨尺寸”的光子芯片生产线已在筹备，预计将于2023年在京建成，可满足通信、数据中心、激光雷达、微波光子、医疗检测等领域需求，有望填补我国在光子芯片晶圆代工领域的空白。</p><p></p><p>光子芯片使用我国已相对成熟的原材料及设备就能生产，而不像电子芯片一样，必须使用EUV等极高端光刻机。随着芯片技术升级迭代，光子芯片有望成为新一代信息领域的底层技术支撑。</p><p></p><h4>Stable Diffusion 幕后开发公司 Stability AI 宣布获得 1 亿美元融资</h4><p></p><p></p><p>InfoQ 10 月 18 日获悉，开源人工智能公司 <a href=\"https://www.infoq.cn/article/V24vD7kvHyuT3byVVObJ\">Stability AI </a>\"宣布获得 1.01 亿美元融资。本轮投资由 Coatue、光速创投领投，O'Shaughnessy Ventures 参投。</p><p></p><p>所筹资金将用于加速开发面向全球消费者和企业用例的开放 AI 模型，包括图像、语言、音频、视频、3D 等。此外，这笔资金还将用于吸纳更多的人才。Stability AI CEO Emad Mostaque 表示，他预计明年，公司员工人数将从 100 人增加到约 300 人。最近，Stability AI 已招聘了几位有行业影响力的人才，包括来自 Google Brain 的研究科学家 hardmaru 以及未来学家、公共演讲者 Daniel Jeffries。</p><p></p><p>据彭博社报道，一位因细节未公开而要求不具名的知情人士称，这轮融资完成后， Stability AI 的估值约为 10 亿美元，这意味着，Stability AI 成为新晋 AI 独角兽。</p><p></p><p>资料显示， Stability AI 由 CEO Emad Mostaque 于 2020 年创立，Emad Mostaque 毕业于牛津大学，获得数学和计算机科学硕士学位。此前他曾在多家对冲基金担任分析师，之后转向更面向公众的工作。Mostaque 曾称他创业的动机是个人对 AI 的迷恋以及他认为，开源 AI 社区缺乏“组织”。Mostaque 曾在采访中表示，“计划使用我们的计算来加速开源基础人工智能。”</p><p></p><h4>“元宇宙第一股”飞天云动赴港上市：过半收入来自 AR/VR营销服务</h4><p></p><p></p><p>10 月 18 日，被称为国内“元宇宙第一股”的<a href=\"https://www.infoq.cn/article/GPIpvsBSvbsKNjdrqONl\">飞天云动</a>\"正式登陆港交所，开盘价报 2.21 港元 / 股。截至收盘，每股报价 2.12 港元，总市值 38.37 亿港元（约合 35.2 亿元人民币）。据悉，此次香港 IPO 的基石投资人包括浙江安吉国资、商汤科技、捷利交易宝等，申万宏源香港为独家保荐人。</p><p></p><p>关于此次 IPO 募资的用途，招股书表示，将主要用于增强公司的研发能力并改进服务及产品；提升销售和营销职能；选定合并、收购和战略投资；未来 12 至 36 个月开发飞天元宇宙平台；以及用作运营资金和一般公司用途。</p><p></p><p>值得一提的是，在招股书中，飞天云动提到了 300 多次“元宇宙”。</p><p></p><p>目前，飞天云动的业务主要包括元宇宙落地场景中 AR/VR 营销服务、AR/VR 内容、AR/VR SaaS 这三大部分。从营收结构来看，AR/VR 营销服务已经成为飞天云动目前最主要的收入来源，其在 2019 年、2020 年、2021 年的营收分别为 1.37 亿、1.42 亿和 3.76 亿，占当期营收比重的 54.6％、41.9％和 63.2％。此外，在这三年间，AR/VR 内容业务实现营收 0.45 亿、1.15 亿及 1.61 亿，占当期营收比重的 18.1％、33.9％和 27.1％。</p><p></p><h4>Gartner发布2023年十大战略技术趋势</h4><p></p><p></p><p>10 月 18 日，InfoQ 获悉，Gartner 发布了企业机构在 2023 年需要探索的<a href=\"https://www.infoq.cn/article/RPeJFB2plzMHEvWQkpmS\">十大战略技术趋势</a>\"。</p><p></p><p>Gartner 杰出研究副总裁 Frances Karamouzis 表示：“为了在经济动荡时期增加企业机构的盈利，首席信息官和 IT 高管必须在继续加快数字化转型的同时，将目光从节约成本转向新的卓越运营方式。Gartner 2023 年战略技术趋势围绕优化、扩展和开拓这三大主题，这些技术能够帮助企业机构优化韧性、运营或可信度、扩展垂直解决方案和产品交付并利用新的互动形式、更加快速的响应或机会进行开拓。”</p><p></p><p>值得一提的是，在十大战略技术趋势中，元宇宙、超级应用、数字免疫系统、平台工程等技术上榜。</p><p></p><h4>Docker宣布涨价</h4><p></p><p></p><p>近日，<a href=\"https://www.infoq.cn/article/g286WV9eCQ2LgfUwryQV\">Docker</a>\" 宣布，从 2022 年 10 月 27 日起，Docker Team 价格将提高约 28%，Docker Business 价格提高约 14%，并且还将 Team 帐户的规模限制为 100 个用户，超过该将规模的组织推向了成本提升近三倍的商业订阅，但可享受 30% 的折扣。</p><p></p><p>对此，官方给出了一个模糊的解释：价格上涨将使我们能够继续投资 Docker。</p><p></p><p>2021 年，Docker 将产品订阅划分为个人、专业、团队和商业不同版本，其中个人版本免费，其主要面向社区，其他版本有不同程度的收费。同时，大型企业（定义为超过 250 名员工或年收入超过 1000 万美元）如果需要 Docker Desktop，必须使用付费订阅。</p><p></p><h2>IT 业界热评新闻</h2><p></p><p></p><h4>Linus Torvalds 致内核开发人员：在截止日前收到相当多 pull 请求“非常烦人”</h4><p></p><p></p><p>10 月 16 日，Linus Torvalds 发布了 Linux 内核 6.1 版的第一个候选版本，并准备好让测试者、早期采用者和尝鲜用户使用，最终版本预计在 2022 年 12 月初或中旬发布。</p><p></p><p>值得一提的是，Linus 在每周内核更新状态中吐槽了“在合并窗口的最后几天收到相当多 pull 请求”一事，并称“这真的非常烦人。”</p><p></p><p>“合并窗口需要两周的时间，这让我有足够的时间进行检查，而不是“用两周的时间匆忙地组装一个分支，然后在第二周的周五发布了”。Torvalds 表示，那种“在截止日期前一天，通宵达旦写作业”的行为在高中毕业后就应该不存在了，更别说用在内核开发上。</p><p></p><p>Torvalds 解释道，“规则是合并窗口前把准备好的东西发给我，而不是在合并窗口期间准备。当然，生活总会有一些松懈的时候，但我真的感觉有些人把合并窗口的结束视作了截止日期，完全忽视了‘应该在合并窗口之前准备好’。”</p><p></p><p>对此，Torvalds 抱怨道，“这不是我第一次说这个，我怀疑也不会是最后一次。但请更多的人把它记在心里，好吗?”</p><p></p><p>网友热评：原来，大家都在赶 Deadline啊。</p><p></p><h4>微软CEO纳德拉：不要想当然地认为员工在办公室里工作更高效</h4><p></p><p></p><p>据报道，微软的最新调查发现，在远程工作究竟能否提高效率这个问题上，雇主和员工依然存在分歧。微软CEO萨提亚·纳德拉表示，企业应当通过数据来判断员工的表现，而不是想当然地认为他们在办公室里的效率一定更高。</p><p></p><p>纳德拉解释道：“85%以上的员工或职场人士认为自己很有效率。但却有85%以上的管理者认为效率有待提高。”“所以这其中存在矛盾。而我认为，弥合这种矛盾的最佳方式就是不能沿用教条思维，而是参考更多数据。我们不应该争论不休，而是应该利用数据来推进这件事情。”他说，“这是一种结构变化，现在虽然是疫后时代，但每个人都在行使他们在疫情期间获得的灵活性。”</p><p></p><h4>韩国根据大象鼻研发机器手</h4><p></p><p></p><p>近日，韩国机械研究院根据大象鼻子的工作原理，研发出一款可以轻松拿取不同大小和粗细物体的机器手。机器手的顶端由柔软的硅胶材质构成，内部的蜂窝结构可以使其如象鼻一般蜷缩起来，小到细针，大到快递箱都可以轻松拿起。研究组期待通过结合人工智能，使这款机器手在日常生活中为人类服务。</p>",
    "publish_time": "2022-10-23 14:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "KubeOS : 面向云原生场景的容器操作系统",
    "url": "https://www.infoq.cn/article/dK2pOJKbXM9OIC2wVX2t",
    "summary": "<p>在云原生场景下，容器和Kubernetes在开发、测试、生产中的应用越来越广泛，传统的操作系统往往会带来安全性、运维开销、OS版本等方面的问题，容器操作系统即容器OS是针对云原生场景设计的一种轻量化操作系统。本次分享首先介绍容器OS的理念，然后分享在openEuler社区孵化的容器操作系统KubeOS的设计思路和解决的问题，最后深入介绍KubeOS的架构、功能和使用。</p><p>&nbsp;</p><p>本文整理自华为操作系统开发工程师、KubeOS开源项目负责人李元戎在<a href=\"https://dive.infoq.cn/2022/beijing?utm_source=infoq&amp;utm_medium=conference\">DIVE全球基础软件创新大会 2022</a>\" 的演讲分享，主题为“<a href=\"https://dive.infoq.cn/2021/beijing/presentation/4496?utm_source=shishuo&amp;sign=iq_62332d2a74d8a\">KubeOS : 面向云原生场景的容器操作系统</a>\"”。分享主要分为三部分：1.云原⽣场景下OS管理问题与解决⽅法；2.KubeOS:⾯向云原⽣场景的容器操作系统；3.未来的工作。</p><p>&nbsp;</p><p></p><h2>云原⽣场景下OS管理问题与解决⽅法</h2><p></p><p></p><p>现在说起容器，大家想到的基本上都是Docker。</p><p></p><p>Docker在2013年开源以后就立即火爆了起来，可以说 Docker 将容器技术推向了巅峰。那么 Docker 技术到底解决了一个什么样的问题呢？Docker 自己宣传的口号是：一次构建到处运行。</p><p></p><p>它一举解决了开发、测试、生产中环境不一致这困扰业界多年的问题。从更高的维度来说，Docker其实解决的是软件到底应该通过什么样的方式进行交付。当软件的交付方式变得清晰明确以后，那么我们做托管软件的平台也就变得非常简单明了了。</p><p></p><p>Docker 提供了三个概念：容器、镜像和镜像仓库，通过 Docker Client 可以以 Restful API 的方式去管理容器的全生命周期。那么 Docker 最核心的创新是什么呢？其实就是Docker 镜像这个概念，通过 Docker 容器镜像，可以将一个应用软件运行依赖的全部环境都打包在一起，让这个程序通过 Docker 容器运行的时候可以与操作系统是无关的。这样也就基本上实现了它所宣传的 run anywhere。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5a/5a111868b991ef041cf010369bfc5125.png\" /></p><p></p><p>Docker镜像为了可以共享资源，在制作过程中引入了层的概念。也就是说如果想做一个新的容器镜像，不需要从头开始做，只需要找到一个有&nbsp;Root FS&nbsp;的&nbsp;Base Image ，以后需要什么就可以一层一层的往上叠加。Docker容器其实也是基于分层概念，容器运行的时候它就会在镜像上面增加一个可写层，也就是我们常说的容器层，然后容器层下面是镜像层，镜像层都是只读的。容器镜像的一个核心的特性就是copy on right，可以把对于容器的修改全限制在容器层下，不会影响其他共享这个镜像的容器。Docker在单机上的打包、发送、运行的性能是很优秀的，但只在单机上运行并不能发挥它最大的价值。业界更希望基于Docker技术可以形成云化的集群系统，然后进行业务容器的调度和编排。那我们就要说接下来的&nbsp;Kubernetes了。</p><p></p><p>Kubernetes现在可以说已经真正成为了全球的主流技术。2017年的时候，Kubernetes、Swarm 和&nbsp;Mesos&nbsp;三家容器编排系统的大战就基本上结束了，Kubernetes&nbsp;成为了最后的赢家，成为了容器编排系统的事实标准。Kubernetes&nbsp;的思想是将一切都视为资源，比如说&nbsp;node、POD、deployment、service，这些日常的、内置的资源对于一般的系统部署升级和管理是够用的。但是在一些特定的场景下，当内置的资源不满足需求的时候，Kubernetes&nbsp;又提供了一种扩展的机制，你可以把需要的新资源抽象成 Kubernetes&nbsp;的API对象，然后注册到集群中，和其他资源一起来使用，即&nbsp;CRD&nbsp;机制。说起&nbsp;CRD&nbsp;就不得不提&nbsp;operator。其实从 Kubernetes&nbsp;的设计和定义来看，它其实似乎更适用于无状态的应用。</p><p></p><p>但是 CoreOS 公司它基于 Kubernetes 的声明式API 机制提出的Kubernetes operator可以有效解决有状态的应用或者是分布式应用的状态描述，在operator当中的API对象不再是描述单状态应用的状态，而是去描述分布式应用集群的状态。也就是说它把一个完整的分布式应用的集群都算作 Kubernetes 它需要最终去维护的这种最终的状态。当你定义的分布式应用集群的状态发生改变以后，operator 会根据实现代码去执行相应的逻辑功能，然后达到向我们预期的状态不停演进的功能。</p><p></p><p>可以说容器和Kubernetes 促进了云原生生态的发展，在基础设施纷纷云化的情况下，云原生场景下OS管理的问题也就随之而来了。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/f0/f0e65533b96611e345939f7a06de0a2e.png\" /></p><p></p><p>首先是&nbsp;Kubernetes 并不能对集群节点的OS进行管理，所以云原生场景下OS管理的第一个问题，Kubernetes 和OS是分别独立进行管理的。Kubernetes也需要进行更新维护，然后进行用户权限控制，这和 OS&nbsp;的管理其实非常类似。所以当运维人员分别对Kubernetes 和OS进行管理的时候，他往往需要进行很多冗余操作。按理来说是希望它们互相能够感知的，但是实际上这两套系统互相协调非常困难，甚至它们之间根本就没有协调。所以当OS升级影响到了节点可用性的时候，Kubernetes&nbsp;无法进行感知。如果&nbsp;OS&nbsp;进行升级，又希望集群中业务不中断，运维人员首先需要锁定节点，让工作负载不再分配到这个节点，然后需要把这个节点上的&nbsp;POD&nbsp;调入到其他节点，然后才能去升级这个节点，最后再把这个节点解锁，恢复正常的应用，这无疑增加了运维的难度和开销。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/be/be3b6173687512685028967d62ca3233.png\" /></p><p></p><p>第二个问题就是OS的版本管理问题。一个通用的Linux操作系统，一般都会内置一个软件更新升级的包管理器，通过这个包管理器，每一个包独立进行安装、升级、删除，这对于操作系统来说非常灵活。</p><p></p><p>但是在云原生场景下，往往会带来版本分裂的问题。就像图中所示，一开始这个集群中两个节点的包版本都是一致的。但是随着使用，有的包升级了，有的包没升级，或者升级的版本不一致。时间久了集群中每一台节点都会有不同的软件包，不同的版本，这样造成的版本分裂问题是很严重的。</p><p></p><p>如果OS和业务耦合比较紧密的话，OS进行大版本的升级也会比较困难。业界比较主流的思想是通过改造OS来解决以上问题。因为容器把应用运行所需要依赖的环境都打包到了容器镜像里面。它对一个操作系统所需要的功能越来越少，所以就有了轻量级的操作系统。为了容器运行而设计的这种轻量级操作系统，我们叫它为容器OS，也就是 Container OS，也可以叫做 Container specific OS。</p><p></p><p>那么对一个容器OS来说，都需要它有什么呢？首先肯定是有一个 Linux kernel，然后要有容器引擎，比如 Docker，然后还需要一些安全的机制，这些就够了。所以容器OS第一个特点就是极简化，它包含的软件包比较少，相应的攻击面和漏洞肯定就少，容器OS就更安全。第二个特点是不可变，只有在部署的时候可以修改，一旦部署就是固定的。第三个是原子更新，因为它不可变，所以只能整体进行更新。最后是应用以容器的形式运行。</p><p></p><p></p><h1>KubeOS:⾯向云原⽣场景的容器操作系统</h1><p></p><p>&nbsp;</p><p>近几年容器&nbsp;OS&nbsp;又有了新的发展，Kubernetes OS&nbsp;除了刚才讲的容器&nbsp;OS&nbsp;的特征以外，最显著的特征是集成了&nbsp;Kubernetes 的某些社区版本。它会把OS的管理交由&nbsp;Kubernetes去控制，由&nbsp;Kubernetes来控制OS的更新。其实业界已经有一些主流的操作系统公司推出了这样的容器OS，KubeOS就是openEuler推出的这样一款容器OS。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e8/e84f5a405ae22f15e8b23ae026ccc40d.png\" /></p><p></p><p>KubeOS的镜像都是基于openEuler Repo源进行构造的。KubeOS部署以后，用户可以在master节点上只通过命令行和yaml文件就去管理集群所有worker node上面的OS版本。因为KubeOS将OS作为Kubernetes的一个组件接入到集群中,这样OS和其它的业务容器就位于同等地位，可以通过Kubernetes统一去管理容器和OS，实现OS和业务容器的协同调度。并且我们还基于openEuler的版本进行了一些定制化的改造，让KubeOS可以进行原子化更新升级，避免版本分裂的问题。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/05/0570cb63197658afcd968f99c29e171f.png\" /></p><p></p><p>下面对KubeOS进行一个详细的介绍。KubeOS的第一个特性是将OS作为组件接入到Kubernetes中。我们利用&nbsp;Kubernetes 的API扩展机制为OS设计了一个CRD的API对象，然后把它注册到集群中，并且依托于Kubernetes的operator扩展机制定义了一个OS controller，去对之前注册那个OS对象进行管理和监控。这样就让OS和集群中其他的内置资源处于同等地位，都可以通过kubernetes进行管理。用户只需要修改OS的CR，然后输入预期的OS版本和状态，其他操作都可以由KubeOS和&nbsp;Kubernetes完成。这样OS的管理就在云端进行了。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5b/5be31b0001c8c386e0d046a209780724.png\" /></p><p></p><p>KubeOS的第二个特性是OS是进行原子升级的，KubeOS中不提供包管理器，软件包的变化即OS版本的变化，也就是说每一个OS的版本都会对应一个确定的OS镜像，或者说一组确定的RPM包的组合。如图所示，软件包的更新即为OS版本的更新，这样可以让任何时候集群中的OS的版本是确定的、一致的，有助于大规模应用的部署。并且我们OS是尽量轻量化的，只包含Kubernetes和容器运行所需要的组件，这样不仅减少攻击面，让OS更加安全，也可以进行快速的更新，快速的升级。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/db/dbc07c54502c5123718c9cc74f81c841.png\" /></p><p></p><p>如图是KubeOS的架构设计，KubeOS一共分成三个模块，第一个模块OS operator部署在master节点上的，它是全局的OS管理器，会监控集群中所有节点的OS的状态。当用户去更改集群中OS信息的时候，比如说指定了新的版本，Operator会感知到，然后把升级任务下发到各个节点上。OSProxy它就是部署在每一个节点上，它就是单节点的OS管理器，会监控当前节点的状态，当他接到Operator下发的升级任务时，会去做比如说封锁节点、迁移Pod这些操作，并且把需要升级的OS信息转发给OS Agent，OS Agent是真正的OS升级的执行单元，它接收来自于OS Proxy的相关信息，完成升级和重启操作。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/89/8962336ccc05db1383b5f5de2091dc66.png\" /></p><p></p><p>如图是KubeOS的文件系统布局的设计，首先是Root分区，因为KubeOS我们采用了双分区升级的方式，每一个分区它会存放一个OS的版本，所以说分成了RootA和RootB，每次升级的时候会下载OS镜像到另外一个分区，在下次启动的时候将启动目录切换到另外一个分区，就完成了双分区的升级，并且KubeOS文件系统是只读的，这也是为了安全性的考虑，但是我们还是提供了一个persist分区，用它存放持久性的用户数据，它其中有一个Union Path，它采用overlay的形式，在镜像上增加叠加层，还有一个Writable Path，它主要使用bind mount形式，直接在镜像上面增加了一个可写层，最后是Boot分区，存放的是grub2文件。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/99/99d64899b4dac19450df5d5423ea57d0.png\" /></p><p></p><p>最后我们再介绍一下KubeOS的升级流程。首先第一步，用户通过修改 OS 的 Yaml文件，指定要升级的OS信息，比如OS的版本、存放镜像的地址，以及一次升级的OS的数量。</p><p></p><p>当集群中OS的状态发生了变化以后，OS Operator就会感知到这个变化，去查询集群中所有节点的状态，若发现和当前节点的状态不一致，就会把需要升级的节点标记为升级节点，相当于把任务下发到各个节点了。</p><p></p><p>OSProxy监控发现当前的节点被标记为升级节点了，就开始执行升级操作，从集群中获取要升级到的OS的版本，它把当前节点的所有Pod进行驱逐，并把当前节点锁定，把OS的信息发送给OS Agent，Os Agent接收到相关的信息以后，从一开始用户指定的升级镜像存放的服务器下载镜像，然后设置启动分区，进行重启和升级。升级以后OS Proxy看当前节点的状态发现已经升级完成了，就把当前节点重新解锁，并且取消升级标记。</p><p></p><p></p><h1>未来的工作</h1><p></p><p></p><p>我们接下来要做什么？首先我们需要去不断丰富KubeOS的功能，比如提供系统配置下发的功能，提供更多的安全策略。第二点是要不断完善，比如更全面的支持，提供支持更多的架构，更多的容器引擎等等。还有就是让KubeOS的使用和部署变得更加方便，比如提供一键式的部署。</p>",
    "publish_time": "2022-10-23 17:25:28",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]