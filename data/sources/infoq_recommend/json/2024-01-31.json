[
  {
    "title": "别踩坑！ 避开这些反模式会让事故处理事倍功半",
    "url": "https://www.infoq.cn/article/XjreJQO9s9omKNis3Zhi",
    "summary": "<p>事故会阻碍我们实现目标，无论你的目标是什么——例如销售 Taylor Swift 音乐会的门票，让人们在假期能够准时回家，或者在全球范围内运输货物——都有可能发生事故。我在 2023 年旧金山 QCon 大会的演讲中 分享了我的见解。</p><p></p><p>幸运的是，事故并不是孤立发生的。我们可以从过去的经验中汲取教训，在未来发生事故时减轻事故的影响。</p><p></p><p>一个注重弹性文化的组织能够迅速从事故中恢复，并将这些事故转化为机会。</p><p></p><p>弹性是指具备迅速抵御或从困境中恢复的能力，比如从故障、从事故中恢复。</p><p></p><p>弹性可以帮助我们将这些事故变成机会。</p><p></p><p></p><h2>事故生命周期</h2><p></p><p></p><p>无论我们多么努力，都不可能做到零事故。之所以发生事故，是因为我们不断发布代码，不断做出变更，而这是一件好事。</p><p></p><p>这是系统实现目标的一部分，是事故生命周期的一部分。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/56/567734d6334c1ef209130cdbc043c857.png\" /></p><p></p><p>事情在顺利进行（系统正常），然后发生了某些事故导致系统过载并崩溃（事故开始）。也许是因为你推出了一款炙手可热的新产品，或者开始销售有史以来最大型的音乐会的门票，导致热切的粉丝蜂拥而至。无论触发因素是什么，你现在都在努力应对一场全面的事故。</p><p></p><p>眼下的重点是恢复正常运营（事故解决），后面会有很多机会评估发生了什么（事故后活动），包括正式和非正式的事后总结。或许你的公司有正式的流程，有文档和确定的行动项，或许你的事后总结只是让一些同事在午餐或喝饮料时做一些回顾。然后，你们基于汲取到的关键教训来改进系统（应用教训），增加待命人员配备，改变请求队列的排队方式，或者在证实为系统问题时促使进行外部调查。</p><p></p><p>关键在于要认识到，“系统”不仅仅是一行行代码——它是将技术和团队结合在一起的一种社会性技术结构。每一个事故都提供了有助于改变人们处理未来事故方式的教训。我们的的大脑保持了这种成长的经历。基于事后智慧做出选择意味着系统在迭代演进。在应用了这些经验教训之后，我们最终回到了系统正常状态。</p><p></p><p>我们处理事故的方式可以引导我们走向更具弹性的基础设施和更明智的决策。事故为我们提供了一个学习的机会，我们的响应方式塑造了我们的系统以及整个团队在未来应对事故的能力。</p><p></p><p></p><h2>提高系统弹性的可能性</h2><p></p><p></p><p>为什么我们要关注这个问题？简单地说，公司需要为事故付出高昂的成本。这些成本可能会以多种方式体现：</p><p></p><p>网站故障可能导致用户无法访问和收入损失；声望受损可能意味着将来的用户减少；用户工作中断不仅发生在事故期间，也会延续到事故发生之后；目标和计划受到影响，因为工程师无法专注于推动这些工作进展。</p><p></p><p>在事故生命周期中有三个点，我们可以将时间和精力集中在改善学习周期上，并获得一些带宽来提高系统弹性。这并不容易，因为在这个过程中你通常需要做出一些小的调整和改变。如果还没有证据表明做一件事情是有用的，CTO 通常不会直接批准花 10 万美元用于跨事故分析（这对利益相关者来说可能不是一个有市场吸引力的改进）。</p><p></p><p></p><h2>专注于事故响应</h2><p></p><p></p><p>我们先从事故响应本身开始。我们可以在三个主要方面做出改进：</p><p></p><p>协调: 记录发生事故时你所遵循的工作流程，即使只是“打电话给那个在这里工作了 10 年的人”。找出可能存在差距的地方，并讨论如何缩小这些差距。协作: 如何将人们聚在一起解决问题？如何知道该打电话给谁？我曾在一家工作工作，当时我必须打开笔记本电脑，连接 VPN 并打开维基页，然后找到需要的电话号码。给一个人打电话可真费劲。你如何能够更容易地让人们聚在一起？沟通: 如何与利益相关者进行沟通？如何告诉客户发生了什么？他们的期望是什么？起草一些指南来管理期望，让每个人都了解响应应该是什么样子的。请记住，你的利益相关方和客户可能需要不同的信息。</p><p></p><p>这些改进都不需要完美。我们只需要找到小的改进和减轻认知负担的方法。也许你可以加入一些自动化功能来帮助解决这个问题。</p><p></p><p></p><h3>反模式：MTTX</h3><p></p><p></p><p>MTTX 是我用来指代发现的平均时间、恢复的平均时间、解决的平均时间等一些指标的术语。我先明确一下，这些指标数字没有任何意义。这并不是说我们不应该关心事故持续了多长时间，但这些单一的数字不应该成为我们的目标。</p><p></p><p>有一次我遇到了一个问题，我们的数据中心着火了，消防长不准我们进去。我们希望为我们的用户和工程师提供更好的体验，因为这是帮助我们取得成功的关键。我们可以做一些事情来简化事故响应，这样我们的工程师就能更好地解决问题。就像我们永远无法做到零事故一样，我们也无法完全控制从事故中恢复需要多长时间。</p><p></p><p></p><h2>专注于事故分析</h2><p></p><p></p><p>事故发生后，通过事故分析进行深入了解并从中学习是非常重要的。我发现基于叙述的方法有助于挖掘信息。这样，你就可以强调发生了什么以及人们从不同角度体验事故的方式。</p><p></p><p>首先，收集有关事故的数据，这个很重要。了解都有谁参与其中，他们在哪里，沟通是如何进行的——通过 Slack、Zoom 还是电话？将这些信息汇编到存储库中，并附上一个时间表，列出事故是如何发生的。记下数据中悬而未决的问题，然后决定是否需要召开会议，或者是否可以通过共享文档进行异步讨论。</p><p></p><p>你需要整个组织提供的各种视角。参与讨论的不应该只包括事故管理人员和推送错误代码的人。我发现市场营销人员、产品管理人员，尤其是客户支持人员对事故的影响也有着深刻的见解。</p><p></p><p>在开会时，请确保这是一场开放的对话——主持人说的话要少于其他人。这样，你可以了解到这次事故如何影响不同的群体。例如，你可能会了解到值班工程师缺少仪表盘的访问权限，或者客户支持收到了怎样的投诉。</p><p></p><p>最终，将主要见解和行动项提炼成适当的格式。领导可能需要简短的执行摘要，其他团队可能需要确定的行动项清单。分享这些信息，确保它们能够有效地提升组织的弹性。</p><p></p><p>我们的目标是有效地传达事故的促成因素和事故的影响，以此来推动变革。一些用于改进事故分析流程的额外的资源包括 Jeli Howie 指南 和 Etsy 的无过失事后分析促进指南。</p><p></p><p></p><h3>反模式：行动项工厂</h3><p></p><p></p><p>关键在于要避免常见的反模式，比如在事后分析当中只是生成行动项而不加以跟进。为特定问题创建警报或生成被遗忘在谷歌文档或待办事项列表中的修复程序，只会在整个流程中埋下不信任的种子。如果提出的修复和改进措施从未被实现，工程师和利益相关者会认为评审会议是在浪费时间。</p><p></p><p>为了抵制这种反模式，事故评审应该更广泛地评审组织的弹性，而不只是专注于行动项。很多时候，我们往往会看到要么是微小的行动项，要么是过于雄心勃勃的行动项，而我们需要找到一个平衡点——在影响范围和优先级方面都刚刚合适的“金发女孩（Goldilocks）”行动项。避开了狭隘的行动项，组织可能会发现更多增强系统弹性的机会，并确定怎样更好地分配资源。但是，如果我们想要保持对流程的信任和参与度，任何已确定的改进措施都必须得到推广。</p><p></p><p>完美的行动项是指那些可以比其他计划优先考虑，并在接下来的一两个月内完成的事情。而且，它还应该推动与事故相关的工作。</p><p></p><p></p><h2>专注于跨事故分析</h2><p></p><p></p><p>基于多个事后分析进行的跨事故分析对于识别系统性问题并进行有意义的改进来说至关重要。通过汇总来自个别高质量事故评审的见解，组织可以发现可能需要在整个公司范围内执行的举措或转变，如调整人员配置、供应商变更或采用新的解决方案。</p><p></p><p>这项分析应该是一项协作工作，需要结合来自工程、产品、客户支持、营销和领导的观点。不应该由任何一方单独拥有整个过程。以易于理解的方式呈现数据对于解决情境化问题并说服领导支持重大变革也至关重要。</p><p></p><p>目前，许多组织在有效进行跨事故分析方面面临困难，因为他们缺少来自事故评审的高质量数据，或者这些数据分散在多种媒介中，这给事故分析造成了阻碍。此外，大多数工程师没有接受过数据分析培训，无法用这种方式汇总见解。</p><p></p><p>如果做得好，这些见解可以清晰地描绘出事故中的痛点。我们的目标不是为了召集具体的团队，而是通过重新分配资源或更新流程来提供有用的支持。这种弹性水平使得工程师能够更好地避免未来可能发生得问题，并为创新创造了良好的环境。</p><p></p><p>通过跨事故分析获取见解的一个例子是了解事故发生在哪里。也许大多数事故发生在你的代码库的某个特定区域。你该如何更好地支持管理负责这个区域的团队？或者代码是否需要进行一些重构？</p><p></p><p>我在很多团队中都这样做过。他们能够基于事故趋势做出组织层面的决策。我们看到人们利用这些见解做出决定，例如使用特性标志，或更换供应商，甚至进行组织变更。所有这些都为工程师的成长创造了一个良好的环境。</p><p></p><p></p><h3>反模式：MTTX</h3><p></p><p></p><p>进行跨事故分析也存在陷入 MTTX 反模式的风险。一些高管可能会要求提供实际上不会提供实用见解的指标。工程师或分析师没有足够的理由去挑战 CTO，因此我建议在这里提供一些背景信息即可。我将这种方法叫作“意大利面酱中的蔬菜”。指标本身可能没有帮助，但你提供的上下文会让信息变得更加丰富。</p><p></p><p></p><h3>反模式：不沟通见解</h3><p></p><p></p><p>我想分享最后一个反模式，它与跨事故见解有关，但也适用于从评估事故中获得的任意见解。我们的工作不应该只是在完成后就将其束之高阁。</p><p></p><p>任何文档都应该能够在整个组织内阅读和分享，即使是在我们采取初始行动很久以后。我经常参加评审会议，工程师们说：“我们都知道该怎么做，我们只是不去做。”我的问题是——我们确实都知道吗？是否已经清楚传达了？</p><p></p><p>通常情况下，人们不愿意参与我们的学习，因为他们觉得这种形式与他们无关。不同的利益相关者需要掌握不同的见解。根据利益相关者调整语言和详细级别，专注于你的目标，不要纠结于不重要的细节。如果要为重新架构系统提供理由，请根据数据解释理由，然后就此结束。</p><p></p><p>还需要考虑你的格式，是否使用了见解、指标、叙述和技术细节？从最重要的见解开始。例如，“X 比例的事故与我们过时的 CI/CD 管道有关。这将影响所有的产品，并让用户难以上手。利益相关者和专家建议下个季度将重点放在重新架构上。”我们提出这个建议并不是凭空想象，而是因为数据为此提供了支撑。展示你的工作。获取到这些信息的人可以从个别事故分析追溯到跨事故见解，然后获得行动线索。</p><p></p><p></p><h2>总结</h2><p></p><p></p><p>我们永远不可能做到零事故。技术在不断发展，新的挑战不断出现，我们在关注事件响应、事件分析和跨事件洞察的同时，也要注意那些反模式，这样就可以降低事故成本。我们可以更好地为处理事故做好准备，这将带来更好的用户体验。这将培育出一种工程师参与的文化，他们不仅有能力完成工作，还能够创造性地解决问题，帮助我们实现组织的目标。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/incident-lifecycle-resilience/\">https://www.infoq.com/articles/incident-lifecycle-resilience/</a>\"</p><p></p>",
    "publish_time": "2024-01-31 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "金融产品和服务效率的角逐，背后竟是PaaS平台能力之争？",
    "url": "https://www.infoq.cn/article/RDAqLJTkm0VT7TdVugW4",
    "summary": "<p>去年10月的中央金融工作会议上明确提出，要做好科技金融、绿色金融、普惠金融、养老金融、数字金融“<a href=\"https://www.infoq.cn/article/BpAYeYkzIHtJaPlHC5TR\">五篇大文章</a>\"”。其中数字金融是基础，也是另外“四篇文章”的重要支持。而这篇“文章”的背后，是金融行业数十年来从电算化、信息化、网络化到数字化的持续演进和发展。</p><p></p><p>“金融行业的数字化转型涉及两个方面：一是金融机构本身的数字化，主要体现在数据驱动的决策制定、自动化和智能化的运营流程、以及风险管理能力；二是金融机构的服务和产品的数字化，主要表现为提供更加便捷、个性化的金融服务和创新金融产品，通过移动支付、在线银行、智能投顾等数字化服务，更加深入地了解和满足客户需求，拓宽服务范围，覆盖更广泛的客户群体，同时也提高交易的安全性和透明度。”浙江大学金融科技研究院执行副院长张瑞东表示。</p><p></p><p>这些变化要求金融机构的自我革新速度必须加快。以产品服务为例，随着与客户的连接越来越紧密，以及定制化服务日益普遍，为了适应客户不同场景需求，留给金融产品的开发周期越来越短。张瑞东强调，“产品的尽快推出，对于占领行业领先地位是非常有积极意义的。”</p><p></p><p>基于PaaS平台，构建在云中运行的应用程序，成为金融机构应对这一挑战的重要手段。</p><p></p><p>在日前的《金融行业云平台（PaaS）市场发展趋势白皮书》（以下简称“白皮书”）发布会上，张瑞东介绍了被云原生技术重新定义的PaaS平台如何帮助金融行业解决数字化痛点，以及成熟的PaaS平台所具备的基本特点，为金融机构数字化转型和PaaS平台<a href=\"https://www.infoq.cn/topic/technology-selection\">技术选型</a>\"提供了一定的思路参考。</p><p></p><h3>PaaS解决了金融行业哪些问题？</h3><p></p><p></p><p>金融行业是数字化转型的先行者，与云服务的结合也早早步入深水区。但随着上云进程的推进，许多金融机构已经遇到了新老系统架构出现交集、应用体系的开发运维效率、底层异构资源的复杂性等诸多新的问题。</p><p></p><p>这些新的问题促使金融机构在云计算方面的需求从IaaS层进一步迈向PaaS和SaaS层。</p><p></p><p>根据IDC此前发布的《中国金融云市场（2022下半年）跟踪》报告显示，2022下半年，中国金融云美金市场规模达到46.3亿美元，同比增长18.6%。其中，金融云IaaS美金市场规模为31.4亿美元，美元同比增长13.2%；金融云平台（PaaS）解决方案市场美金同比增速为42.7%，增速在所有子市场中排名第一。</p><p></p><p>那么，<a href=\"https://www.infoq.cn/article/M45ssycoZyWGh1P3I3hW?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">PaaS平台</a>\"究竟能够解决金融数字化过程中的哪些问题呢？</p><p></p><p>张瑞东指出，PaaS平台由于更面向业务价值，具备以下8大优势：简化开发、弹性扩展、数据驱动、支持跨平台和移动应用开发、提升效率、降低成本、支持多租户和多用户、高效实现DevOps。</p><p></p><p>具体对于金融行业而言，PaaS可以满足金融机构在开发、运营和生态3个层面的一系列需求。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/31/3110ad2e68f9bd1c1f056f158268d40d.png\" /></p><p></p><p>举例来说，面对前文提及的开发周期缩短的挑战，PaaS平台由于可以提供丰富的开发工具和服务，使得开发人员能<a href=\"https://www.infoq.cn/article/pzC0XXGzSWJwPkIOwSlz?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">高效地开发</a>\"和管理应用，并快速迭代和持续交付；此外，PaaS平台有着很强的可扩展性，能够满足金融行业根据实际需求动态增加或减少应用程序资源的需要。</p><p></p><p>从生态层面来看，金融跨界属性越来越强，与其它业态的业务紧密度和交互频率越来越高。这意味着底层的技术连接也要越来越顺畅。对此，PaaS平台一方面可以提供API管理和开放平台功能，允许金融机构将其数据和服务开放给合作伙伴和第三方开发者；另一方面，还可以提供数据集成和转换的工具和服务，使不同系统和数据源之间可以无缝地进行数据交换和共享。</p><p></p><p>再看运营，金融行业作为经济的“压舱石”，其业务可靠性和稳定性是基本前提。对此，PaaS提供的高可用性和弹性的基础设施，恰恰可以满足金融机构的应用程序始终可用且具备稳定性；在此基础上，PaaS还提供了丰富的开发工具和自动化功能，可以帮助金融机构提高运营效率并实现自动化。</p><p></p><p>“基于这些优势和特点，PaaS正在加速推进金融机构的用云方式从‘上云’向‘云上’转变。”张瑞东表示。</p><p></p><h3>企业如何选择合适的PaaS平台？</h3><p></p><p></p><p>根据需求和目的的差异化进行分类，PaaS平台可以大致分为应用开发、数据平台、通用技术、集成服务四种类型。</p><p></p><p>应用开发类，顾名思义是以应用开发为主要目的，核心价值是提升应用开发效率，简化部署过程，典型代表有低/无代码PaaS平台、mPaaS(移动开发平台)&nbsp;、BPM&nbsp;PaaS(业务流程管理平台)等；</p><p></p><p>数据平台类，主要关注数据存储、处理和分析，核心价值是解决数据孤岛问题，挖掘数据价值，典型代表有DBPaaS(云数据库平台)&nbsp;、BD&nbsp;PaaS(大数据平台)&nbsp;、BI&nbsp;PaaS(商业智能平台)等；</p><p></p><p>通用技术类，指的是以AI、区块链、IoT等某一种通用技术能力为主要目的的PaaS平台，核心价值是降低技术使用门槛，直接赋能前端应用和业务，典型代表有AIPaaS、IoT&nbsp;PaaS&nbsp;、安全技术PaaS等；</p><p></p><p>集成服务类，主要关注应用和服务之间的集成和连接，核心价值是帮助企业进行应用间交互的管理和监控，保障高可用性和可靠性，典型代表有应用集成PaaS&nbsp;、API集成PaaS、CMP&nbsp;PaaS(云管理平台)等。</p><p></p><p>据张瑞东介绍，金融业务拥有鲜明的特点，比如很多问题需要事先决策（如放不放贷、放了贷之后安全性如何等）。因此，对应的金融云PaaS平台要能够把这些能力集成进来，并且速度要快、风险要可控。</p><p></p><p>“对金融行业来说，一个优秀的PaaS平台服务，一是要与时俱进，能够把所有相关技术进行整合，从而帮助企业在进行二次开发、三次开发的时候，能够让开发人员随心应手，缩短开发周期，尽快推出定制化的金融产品或者服务。”张瑞东指出，“另一方面，还要支持多云战略，帮助金融机构能在不同的云服务平台间快速部署和管理应用，充分利用多核心技术的计算能力，从而提升数据处理能力和响应市场的速度。”</p><p></p><p>在此次发布的“白皮书”中，以<a href=\"https://www.infoq.cn/article/2che1Izc72EfbxARdQou?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">蚂蚁数科</a>\"提供的mPaaS和SOFAStack两大核心产品为例，描画了成熟PaaS平台的范式。</p><p></p><p>据蚂蚁数科数据智能与科技事业群产品解决方案总监曹诗洋在会上介绍，国内前50金融机构，超过60%已经选择了蚂蚁移动云平台服务和蚂蚁整体SOFAStack服务，这里面包括6家国有大型商业银行和11家股份制银行。</p><p></p><p>例如，浙江农商联合银行使用蚂蚁SOFAStack实施方案，完成了全方位分布式架构改造与应用容器化，实现了三地多中心分布和异地容灾，构建了自主可控的技术基础设施，而部署效率以往平台同城高可用架构提升60%，应用研发测试上线周期缩短近50%，PaaS平台运维可观测性提升了40%。</p><p></p><p>再例如，位于云南的<a href=\"https://www.infoq.cn/article/9FRdGfIdRe3OIoygTBrt?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">富滇银行</a>\"基于SOFAStack，使得系统每分钟交易量提升80倍，核心交易平均处理时间小于200毫秒；手机银行新增用户数同比增长305%。此外，基于mPaaS打造的新版手机APP，在用户体验优化、非金融高频场景和数字化运营营销的三重作用下，其手机银行用户活跃度大幅提升，带动AUM在年初增长31%，定期存款销售同比增长了2.39倍。</p><p></p><p>值得注意的是，虽然业务线上化是普遍需求，但是在采用PaaS层面，不同规模金融机构也表现出了差异化的策略和路径。曹诗洋举例：对于一些技术基础较好的大型金融机构，更倾向于在核心技术领域或垂直领域与技术服务商进行深度合作；而对于中小型金融机构，则更希望采用相对轻量、能够快速落地和见效的解决方案。</p><p></p><h3>PaaS和SaaS是未来云原生的主战场</h3><p></p><p></p><p>“白皮书”数据显示，PaaS在未来几年仍然保持快速发展，预计到2025年，中国PaaS市场规模将达到2155亿元，年均复合增长率将达到48%。面向金融这一垂直行业，PaaS产品将呈现以下发展趋势：</p><p></p><p>第一，PaaS+多云融合管理。</p><p></p><p>虽然去年以来业界翻起一阵“下云潮”，但是曹诗洋向InfoQ记者解释，下云不是目的，如何确保业务在云上和云下更好地协同才是关键。在这个过程中，<a href=\"https://www.infoq.cn/article/WIRXxsAV4V6HOhRivtmx?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">多云</a>\"模式一方面可以满足企业在ROI方面的要求，另一方面，还可以帮助企业降低被单一厂商绑定的技术风险，确保业务保持一致性和连续性。</p><p></p><p>第二，PaaS+智能化。</p><p></p><p>金融行业拥有较为扎实的数字化基础，经过过去多年的沉淀，下一个阶段的重要课题之一是如何更好地实现精细化运营，为业务价值赋能。在这个过程中，需要数据与智能手段的相互配合。尤其是在<a href=\"https://www.infoq.cn/news/eBpIOezhpdBY7LFPYZu3\">大模型</a>\"这一突破性技术发展的加持下，数据价值将有希望得到更大空间的发挥。再往下落，这也意味着PaaS平台必须具备智能化能力，能够与智能化平台相融合。</p><p></p><p>第三，PaaS+移动端。</p><p></p><p>业务和运营线上化、移动化的趋势不可逆转，手机端的云平台服务成为主战场。这要求PaaS平台能够更高效地支持移动开发、测试和运营，在前端能够满足动态灵活的客户端能力，在中台能够覆盖APP全生命周期，在后台则要能提供稳定的连接能力。</p><p></p><p>第四，集成化大模型与端到端管理。</p><p></p><p>通用模型解决不了专有领域的问题，那么，在大模型的流行趋势下，如何面向金融行业实现<a href=\"https://www.infoq.cn/article/kQOjfc1iCvObWXEleaGP\">最后一公里</a>\"的落地？从底层基础技术层面就要实现云平台与大模型技术的集成化和端到端管理，让行业数据能够流向垂直领域大模型，进而真正在金融业务场景下创造价值。</p><p></p><p>第五，低代码/无代码开发方案。</p><p></p><p>根据IDC预测，未来无代码/低代码全球市场将会持续上升，且涨幅基本集中在云平台。对此，张瑞东还进一步表示，<a href=\"https://archsummit.infoq.cn/2024/shenzhen/track/1643\">低代码/无代码</a>\"开发方案的未来也是与GPT技术相结合，二者强强联合将帮助开发者实现研发效能的进一步提升。</p><p></p><p>“总而言之，未来的云市场将从资源驱动演变到技术和业务驱动，其中所谓技术和业务驱动必须是面向垂直行业的。企业上云能产生什么价值？云原生价值如何被挖掘出来？这是企业关注的。此外，受AI大模型的影响，未来PaaS和SaaS都是云原生的主战场。中国云市场的主战场在于定制化应用的开发、云平台服务灵活性和高度集成，这几点做好了，云厂商的竞争力也会大大提升。”</p><p></p><p>“对于蚂蚁数科来说，我们在这个过程中看到了两个机会点：一是全面兼容，向多云、多芯方向发展；二是全面智能，向多端智能、智能应用、智能平台方向努力。”曹诗洋表示。</p>",
    "publish_time": "2024-01-31 10:09:13",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "发现Rust：从开发者角度谈编程之美（二）",
    "url": "https://www.infoq.cn/article/uC8FifDN5d3mAE8hD3Tu",
    "summary": "<p></p><blockquote>本文是“发现Rust”系列第二篇，第一篇参见：<a href=\"https://www.infoq.cn/article/azPrGf6BilmpD9RzeHpo\">《发现 Rust：从项目化角度谈效率之变（一）》</a>\"</blockquote><p></p><p></p><h2>1、前言</h2><p></p><p></p><p>Rust作为一种安全的系统语言，将语言层面的语义约束与编译器自动化推导深度结合，实现了更加严谨的编程风格和更加安全的编程方式。从Linux 6.1内核正式合入Rust支持开始，它与Linux内核的深度融合就再也不是悬念，未来的发展充满想象。</p><p></p><p>对于开发者，从传统语言切换到Rust语言，需要一定的心理准备和思维方式转换。但这并不是多么高的门槛，关键在于对于编程技术发展趋势的理解和对Rust所倡导的编程理念的接纳。一旦接受和开始使用Rust，你会发现一切门槛都不存在。我自己的感受是，一旦开始使用Rust进行编程，完成第一个项目后，就会无法逆转地喜欢上它，再也回不到传统的编程语言。</p><p></p><h2>2、体验</h2><p></p><p></p><p>我使用过很多种编程语言，其中最熟悉的应该是C语言。我从传统语言切换到Rust语言的过程，应该算是成功的。因为通过使用Rust我超预期地达成了项目目标，更重要的是在这个过程中我喜欢上了使用Rust进行开发，甚至希望参与到Rust本身的演进发展中。</p><p></p><h4>2.1.独一无二的Rust</h4><p></p><p></p><p>如果对于Rust带来的未来缺乏了解，那么很难对使用Rust产生多少兴趣。安全编程所需要解决的问题，Rust还在不断完善中，但是更加严谨的编程的理念已经不可阻挡。Rust本身能够发展到什么程度？它是否可能被更好的语言和编译器取代？我不知道。但是，Rust目前是独一无二的。</p><p></p><p>Rust更深地剖析了编程安全性的本质，并在语言层面提供了工具。内存安全和线程安全问题的本质，是数据对象的生命周期和所有权问题。内存回收和锁是在运行时解决这两个问题的方法。内存回收和锁的长期使用，给这两个问题蒙上一层迷雾，似乎他们就是运行时问题。但Rust挥开了这层迷雾，开创性的把这两个问题从运行时放到了语言层面解决。从而使编程语言迈进了一大步。</p><p></p><p>在语言设计进步的基础上，Rust的编译器设计有很大的不同，它可以完成更多的推导工作，使得很多编程错误可以在编译阶段被发现。这也是一个很大的进步，编译器有了进行推导的基础，使编译器的能力得到了释放，可以承担更多的逻辑分析、安全检查工作。这使Rust成为一种安全的编程语言。</p><p></p><p>另外，由于大部分的软件问题和所有的编码问题在编译阶段就已经被发现，这大大降低了调试的难度。本项目目前不涉及多线程处理，仅仅是单线程的前端解释器。因为不涉及更复杂的多线程处理，所以本项目开发过程中的所有问题，基本都是在编译阶段被发现和解决，除了极个别的在调用C语言库的时候，由于不熟悉FFI，在处理字符串的unsafe代码时，由于对规则细节了解不全导致的问题之外。整体的感受是，Rust编写的程序只要编译通过，就是可以正确运行，名副其实的安全语言。对于一个长期使用C语言开发，习惯于化大量时间debug的开发者来说，这是一个非常特别的体验。使我对于“零”调试的开发方式，充满了期待，我觉得这个可能就是未来。</p><p></p><h4>2.2.改变思维习惯</h4><p></p><p></p><p>传统开发中，我们大量的时间花费在调试各种Bug中，这带来低效、糟糕的体验，以及研发和测试的矛盾。但是Rust全然不同，Rust语言的表达能力很完善，同时Rust的编译器足够强大。大多数原本在调试阶段才能发现和处理的问题，在使用Rust的开过程发中，都提前到了编译阶段，这无疑是一大进步。</p><p></p><p>诚然Rust带来了进步，但Rust也全然不同于以往的编程语言，需要开发人员也做出相应的改变。</p><p></p><p>编程是一个交互行为，是人与机器之间的交互，是使机器的表现和人的期望达成一致的过程。人与机器的行为的伦理差异在于，机器的行为都是固定的、被设计的，效率也是固定的、受限的。而人的行为则更复杂，有波峰有波谷，有偏差有创新。人的行为整体取决于期望，但行为过程和效率取决于更多复杂的因素。对于编程行为来说，编程体验对于效率和结果的影响很大。</p><p></p><p>心理学家认为，成就感是主体心中的愿望和眼前的现实达到平衡时，产生的一种心理感受。编程行为中，成就感来源于机器反馈的结果，如果机器反馈符合预期，则很有成就感。编程过程中，是否能够高效地达成预期，决定了编程体验的好坏。</p><p></p><p>但高效这个词是模糊的，因人而异，跟习惯强相关。在传统的C语言编程中，由于C语言的自由、低约束和命令式，开发者更倾向于快速编写完成主要流程，尽快让程序运行起来，然后再解决其他问题。因此C语言的开发过程中，编码部分是简约的、不断被压缩的，而调试部分则拉得很长。相信大家体验过，开始的时候疯狂码代码，等程序运行起来就觉得很放松，然后转而进行反反复复修修补补的调试过程。前一阶段看似高效，但是遗留下很多问题，整个开发过程效率、质量其实是不高的。从开发体验来说，前一段像打了鸡血，后一段被BUG按在地上摩擦，整体感受也是很差的。</p><p></p><p>这样的开发过程比较符合“习惯”，因为每个人都希望尽快的看到结果，但这种模式是不科学的，因为前一阶段遗留的问题在后面的阶段是很难弥补，调试BUG的过程更谈不上享受，很容易遗漏BUG。</p><p></p><p>在Rust中这一切则恰恰相反，更加科学、严谨，但是不太符合“习惯”。所以需要开发者打破固有习惯，才能发现Rust之美。在Rust中，不仅需要开发者在逻辑层面清晰、完整、无漏地表述，还需要在语义层面明确借用和生命周期等约束。也就是说，在编码阶段不仅要大致表述清楚需要机器做什么，还需要表述清楚细节。</p><p></p><p>Rust更加适合希望严谨、准确表达想法的人，在编译阶段之前解决逻辑和编程问题，从而避免低效重复的调试过程。</p><p></p><p>打个极端点的比喻，使用Rust编写软件就像在写一部逻辑严密、环环相扣的推理小说，整个过程连贯一致、恰到好处；而用C语言则像在编写Tweet，快速直接，不断补充、修正。</p><p></p><p>从我的体验来说，Rust程序只要编译通过就一定是正确的，唯一的例外情况出现在与C语言的unsafe边界上，而这些边界以后随着Rust原生库的丰富，会逐渐消除。因此，Rust编程的重心在设计和编码上，调试的重要性大大降低。因此我们需要改变急于使程序运行起来，通过调试来修补程序的习惯，而应该在编码阶段更加严谨、细致，把大量花在与调试器交互的时间，花在与提示器和编译器上的交互上。</p><p></p><p>改变思维习惯，在编程发展历程中，并不是第一次发生。从机器语言、到汇编、到C、再到百花齐放的C++、Java、C#等，再到Rust。开发者的习惯一直在改变，开发者应该更多地提供信息而不是指令，编写严谨的程序而不是解决调试器发现的BUG。</p><p></p><h4>2.3.只需花费一周时间来阅读</h4><p></p><p></p><p>我的印象中，故往的每一种流行编程语言都有几本很厚的被冠以“圣典”的书。</p><p></p><p>但我学些Rust的体验是，学习Rust语言不需要看很多、很厚的书。Rust的编程帮助很丰富，可以一边做项目，一边学习。它是一种安全的语言，所以你的生疏并不会导致软件可靠性问题。这可能是学习Rust的过程中最奇妙的一点，一个懵懵懂懂的初学者编写出来的代码和一个经验丰富的早鸟编写出来的代码，一样的安全和可靠。</p><p></p><p>因人而异，取决于不同的编程基础和背景，但最短一周的熟悉时间，应该就可以使用Rust开始由浅入深的开发过程，在开发中不断扩展和加深学习，可以快速实现到Rust的过渡。</p><p></p><p>在这个逐渐上手的过程中，很大部分时间是根据自己的具体需要，查阅Rust语言手册的相关部分，加深理解。查阅Rust标准库手册，了解基于标准库，如何实现自己的功能需求。还有就是在crates.io上查找相关的例子程序，学习各种使用Rust解决具体问题的方法和技巧。</p><p></p><p>比较奇妙的是，在这个上手过程中，最初的时候，你对Rust可能只有最基础的概念，犹如一个婴儿，但是即使如此，你也不会写出包含隐晦的、难以调试的错误的程序。整个上手过程，是一个稳健的，逐渐由模糊到清晰的，充满正面感受的过程。绝不会出现其他语言那种，让你百思不得其解、需要推倒重来，或者绝望到放弃的晦涩的问题。</p><p></p><p>原因就在于，Rust的严密的语法逻辑以及强大编译推导能力，将你的一切编程错误都在编译阶段陈列在眼前，并给出了清晰的提示，甚至是准确的修改建议。这几乎是等于把菜整齐地排列在桌上，把筷子放在你的手里，耐心地等你五指捏紧，然后扶着你的手去夹菜。作为一个C程序员，从来没有被这样爱护过。</p><p></p><h4>2.4.函数式元编程</h4><p></p><p></p><p>元编程可以通过更高的抽象，使程序表达更加精炼，也可以使程序表达更加的严谨，消除内部自洽的问题，提高外部可复用性。元编程也可以克服不同语言之间的隔阂，更好地实现多语言的融合。</p><p></p><p>元编程是编程行为的必要部分，除了Hello world这样的简单程序，达到一定复杂度的程序，比如逻辑层次超过三层，可能就需要一定程度的元编程。元编程使代码更加简洁优美和更易维护。</p><p></p><p>C语言中能够与元编程相关的就是宏了，但是C语言的宏很简陋，不支持循环，实际上并不完整地具备元编程能力。因此使用C语言开发，越到后来越感觉力有不逮，总有些繁琐丑陋的部分无法清除。</p><p></p><p>Rust的元编程能力比C语言强太多，Rust的宏很丰富，支持安全的迭代。Rust的元编程能力初始设计很不错，起点很高。Rust虽然还在发展过程中，但其核心的语言要素已经基本固定，唯有元编程这部分，感觉还有很大的潜力可挖，对此我充满期待。</p><p></p><p>在解释器项目中，需要使用eBPF指令来实现Unliang的指令和内置函数，还需要封装C的数据定义，因此也使用了很多宏。比如：对FUSE的一些定义的封装。</p><p></p><p><code lang=\"text\">use std::ops::AddAssign;\nmacro_rules! define_event {\n    ($($name:ident = $val:expr,)*) =&gt; {\n        $(const $name:u32 = $val;)*\n        fn convert_event(evt: &amp;str) -&gt; Option {\n            let fuse_evt: String = String::from(\"FUSE_\") + evt.to_uppercase().as_str();\n            match fuse_evt.as_str() {\n                $(stringify!($name) =&gt; Some($val),)*\n                \"FUSE_*\" =&gt; Some(u32::MAX),\n                _ =&gt; None,\n            }\n        }\n    };\n}\ndefine_event! {\n    FUSE_LOOKUP= 1,\n    FUSE_FORGET= 2,  /* no reply */\n    FUSE_GETATTR= 3,\n    FUSE_SETATTR= 4,\n    FUSE_READLINK= 5,\n    FUSE_SYMLINK= 6,\n    FUSE_MKNOD= 8,\n    FUSE_MKDIR= 9,\n    FUSE_UNLINK= 10,\n    FUSE_RMDIR= 11,\n    FUSE_RENAME= 12,\n    FUSE_LINK= 13,\n    FUSE_OPEN= 14,\n    FUSE_READ= 15,\n    FUSE_WRITE= 16,\n    FUSE_STATFS= 17,\n    FUSE_RELEASE= 18,\n    FUSE_FSYNC= 20,\n    FUSE_SETXATTR= 21,\n    FUSE_GETXATTR= 22,\n    FUSE_LISTXATTR= 23,\n    FUSE_REMOVEXATTR= 24,\n    FUSE_FLUSH= 25,\n    FUSE_INIT= 26,\n    FUSE_OPENDIR= 27,\n    FUSE_READDIR= 28,\n    FUSE_RELEASEDIR= 29,\n    FUSE_FSYNCDIR= 30,\n    FUSE_GETLK= 31,\n    FUSE_SETLK= 32,</code></p><p></p><p>上面一段，是Rust的声明式宏。下面一段，是一段原生的C语句段，通过Rust宏进行转换为Rust的定义。</p><p>通过观察C语言语句片段的特征，利用宏提取语法规律，实现直接从C语言片段生成Rust的定义，这就是Rust元编程能力的一种体现。</p><p></p><h4>2.5.审美与表现力</h4><p></p><p></p><p>编程语言，去掉编程两个字，也是一种语言。人通过语言实现人与人、人与机器的交互。语言的美感，来源于人不仅通过语言交换信息，还通过语言传达思想。</p><p></p><p>不同的人对事物的审美存在着天地之别般的差异，对于编程语言也是一样。你是希望简介表达，还是深层次表达，决定了你对Rust的审美。如果你只关注当下的结果，Rust无疑是晦涩的，同样的事物在Rust中的表达，远比C语言中复杂。但是如果你关注的是软件本身的正确性和语义的完整表达，Rust的就非常犀利，它能够把你最严谨和微妙的想法准确表达出来。从这一点说，Rust有无与伦比的美。</p><p></p><p>要想充分体验编程的乐趣，我们需要理解不同编程语言的美与其表现力。</p><p></p><p>C语言的美集中在指针。指针是机器本质之美，因为指针是机器处理的灵魂，指针的发明使高级语言深入机器的灵魂，获得了魔力。指针也是自由、灵活之美，通过它可以打破类型、范围的约束，更直接高效的实现功能。但它是不安全的。</p><p></p><p>Rust是圆满如一、无缺无漏之美。Rust的美集中在始终。始终是数据的本质之美，万事万物皆信息，始终是更本质的美。理解Rust的美，是一种编程思想的涅槃。</p><p></p><h4>2.6.体验后的遗憾</h4><p></p><p></p><p>使用Rust开发项目是一个令人愉悦的体验，整个过程出乎我预料得成功，但也有“遗憾”。</p><p></p><p>在体验Rust编程的的安全可靠后，再次使用C编程的时候，我会有一种焦虑情绪。习惯了Rust那种严谨、完整的表达后，我对我写出来的C代码的信心大大降低，总觉得言之不尽，缺漏百出。因为对比Rust我们可以很轻易的发现用C编写的代码有很多深层语义约束是没有表达出来的，缺乏一种手段来保证代码的安全，这种感觉就像在裸奔编程。只能寄希望与更加详细的单元测试和集成测试，但事实早已证明这是不够。同时，这样做带来的是更多的测试开销，更加冗长反复的研发周期。</p><p></p><h2>3、结语</h2><p></p><p></p><p>Rust是实至名归的安全语言，它的安全性有坚强的内核，来源于语言本身的创新和编译器技术的发展。这是编程语言发展历程中的一次飞跃，对于编程这种交互行为中人与工具的边界进行了重新定义，不仅产生了全新的编程方式，也使工具的作用发生了突变。这种进步不仅蕴育出编程的安全性，还衍生出了在开发效率、学习门槛上的奇异变化。</p><p></p><p>在我们的长期认知中，调试是与编程伴生的行为，有多少编程输出，就有多少调试。但遗憾的是，一个让人沮丧的统计结论是，有多少调试就有多少BUG，有解决的BUG就一定有遗漏的BUG。本质上说，调试不是编程的伴生物，是开发安全性的提现，是不安全编程的标志。</p><p></p><p>随着Rust这样的安全语言的出现，调试的比重大大降低。甚至一定条件下可以完全消除，比如：在纯函数式编程的范围内。测试的复杂度也大大降低，单元测试、集成测试的定义可能会被改写，他们的工作量会降低、结论会更加准确、有效。</p><p></p><p>整个开发过程的重心将会发生偏移，开发过程变得紧凑，甚至缩短。软件的设计和编码会更加重要，不仅体现在时间占比上，也体现在技术与工具的支持，比如：提示器、编译器，甚至未来的AI辅助编程。开发者应该改变固有的习惯，尝试、接受和喜爱这种新的开发方式。</p><p></p><p>对于有想法使用Rust开发项目的经理等管理角色，需要明确的一个概念是，Rust是安全的语言，开发人员的编码水平和对语言的熟悉程度，并不会影响项目的质量，这一点和C语言项目完全不同，经验丰富的C开发人员对于软件质量有至关重要的影响。</p><p></p><p>使用Rust编程或者启动基于Rust的产品项目，其门槛并不像想像的那么高，一旦你决定尝试Rust，历史的车轮就会隆隆地开始转动。</p><p></p><h4>作者介绍</h4><p></p><p></p><p>钟俊，统信软件研发技术专家，专注于内核与编译器技术，长期在通信、云计算、安全、信创等多个行业从事底层软件技术研发及相关工作。</p>",
    "publish_time": "2024-01-31 11:07:23",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "刚收购VMware，博通就淘汰了其56款独立产品",
    "url": "https://www.infoq.cn/article/wWTQ4HkY6D34IVZ3JpaL",
    "summary": "<p></p><blockquote>VMware的根基无处不在，拔出它们定会掀起片片泥土。</blockquote><p></p><p></p><p>VMware的新东家博通公司认为，自己花690亿美元收购的VMware产品线过于复杂、分散，甚至可能在本世纪20年代中期变得无关紧要。</p><p></p><p>否则，为什么博通要淘汰其中的56款独立产品（这个数字还在增加中），要知道，这些产品在全球几乎所有的数据中心每天都在使用。</p><p></p><p>VMware的忠实客户现在可能会问出这个问题，这很合理，但问题远不止这些。</p><p></p><p>VMware价值132亿美元的业务最初由私人所有和运营，后来被戴尔旗下的EMC公司收购，后来又被一家私募股权公司收购，截至2023年11月22日，正式并入博通公司。</p><p></p><p></p><h2>虚拟化之家</h2><p></p><p></p><p>VMware的名字将永远与虚拟化联系在一起，人们普遍认为，有95%的数据中心至少使用了一个VMware的组件。</p><p></p><p>VMware的根基无处不在，拔出它们定会掀起片片泥土。这次收购严重改变了客户与这家公司之间的关系。</p><p></p><p>要想确切地知道VMware所提供的单个产品的数量是很棘手的，因为其产品组合包含了各种类型的产品——其中一些被归类为包含多个组件的套件或平台。根据客户所需的用例，平台套件的某些组件可以单独出售。</p><p></p><p>在以前的VMware，追踪单个产品的SKU是一项具有挑战性的工作，但显然，博通将不再需要这么做。</p><p></p><p>博通在正式收购VMware的第一天就改掉了VMware位于加利福尼亚州帕洛阿尔托山脚下的总部的Logo，然后迅速削减了上述产品的数量。博通的立场是简化VMware的产品组合，专注于几款“拥有最高精尖技术的产品”。被淘汰的产品包括网络和安全虚拟化平台NSX、应用移动性平台HCX、多云平台捆绑vSPhere+等（详情请参见https://blogs.vmware.com/cloud-foundation/2024/01/22/vmware-end-of-availability-of-perpetual-licensing-and-saas-services/）。</p><p></p><p></p><h2>许可问题是个重大的争议焦点</h2><p></p><p></p><p>许可的变化正在引发在大型、中型和小型企业中部署公有、私有和混合云的IT买家的广泛忧虑。</p><p></p><p>许多客户拥有一些基础设施应用程序的永久许可，只需要每年支付维护费用。如果博通坚持自己的做法，这些许可很快就会消失。客户担心，如果他们想要维持当前的部署，博通可能会试图迫使他们转向更昂贵的年度订阅。</p><p></p><p>对于一些客户来说，订阅模式可能在短期内会帮他们节约一些成本，但对于长期客户来说，他们将支付更多的费用，否则他们将被困在无法运行的IT基础设施中。这也影响到那些围绕VMware构建业务的小型集成商。</p><p></p><p>对于许可问题的疑问，VMware在1月15日的媒体咨询中给出了一个全面的回答，但后来又被撤下：“所有的许可选项，包括永久、支持和订阅（SnS）、SaaS/托管在内，以及每种产品的所有版本、套件和定价指标，除非另有说明，均包含在本公告中。这些产品均已无法购买。”</p><p></p><p></p><h2>博通向客户做出澄清</h2><p></p><p></p><p>随后，博通在1月22日发布了一篇博文，旨在澄清之前的信息（https://blogs.vmware.com/cloud-foundation/2024/01/22/vmware-end-of-availability-of-perpetual-licensing-and-saas-services/）。</p><p></p><p>云基础设施团队产品营销总监Rick Walsworth在文章中写道：“由于产品组合简化，许多VMware软件解决方案将仅作为VMware Cloud Foundation (VCF) 或 VMware vSphere Foundation (VVF) 的一部分提供。它们将不再作为独立的解决方案出售。</p><p></p><p>为明确起见，以下是我们对产品组合所做变更的概括：</p><p></p><p>VMware Cloud Foundation是VMware新的解决方案，旨在为客户提供全技术栈基础设施价值，提供具有完整Aria管理和编排套件（包括新服务）的vSphere、vSAN和NSX的平台。VMware vSphere Foundation是VMware为传统vSphere环境的数据中心优化提供的解决方案。除了Aria Operations和Aria Operations for Logs，它还将Tanzu Kubernetes Grid作为其标准功能套件的一部分。此外，那些对基本硬件整合或少量服务器虚拟化等要求较低的客户仍然可以订阅vSphere Standard和vSphere Essentials Plus Kit。VMware附加服务可用于VMware vSphere Foundation和VMware Cloud Foundation，覆盖额外的存储、安全，灾难恢复、生成式AI和其他特定用例。”</p><p></p><p>总而言之：博通将专注于销售VMware平台，而非单独的产品。</p><p></p><p></p><h2>定价和销售支持</h2><p></p><p></p><p>当然，定价是另一个重要的问题。VMware已经被认为是一项昂贵的技术，那么博通在未来是否会想要进一步提高其售价？</p><p></p><p>Oxide Computer联合创始人兼CTO Bryan Cantrill表示：“当博通收购VMware并暗示‘我们将提高价格，因为我们对客户有定价权’时，客户就像‘等等，我已经在VMware上花了很多钱了，你这是在逼我去寻找其他选择’。市场上的声音就是这样的。博通是一家与众不同的公司。我们熟知的VMware已经不存在了。”</p><p></p><p>VMware竞争对手Nutanix的产品和解决方案高级副总裁Lee Caswell表示：服务是第三个主要的问题。</p><p></p><p>Caswell说：“客户考虑替代方案，那说明他们担心未来的支持问题。因此，这里发生的变化是关于如何为合作伙伴提供支持的单方面决定，以及正在做出的改变没有充分了解其影响。”</p><p></p><p></p><h2>渠道的不确定性</h2><p></p><p></p><p>Caswell表示，由于这次合并，渠道存在很多不确定性。“VMware的产品由渠道合作伙伴、经销商合作伙伴提供支持，并交付给OEM合作伙伴。因此，经销商现在没有合约，他们在等待，这带来了不确定性，因此客户对支持服务的变化感到担忧”。</p><p></p><p>“坦率地说，他们已经看到了变化。因此，突然之间，在我看来，支持风险应该是客户需要去考虑的问题。”</p><p></p><p>Caswell表示，他认为博通团队在将基础设施视为应用程序方面可能存在重大误判，而这正是这家总部位于加州圣何塞的公司过去收购的东西。</p><p></p><p>他说：“这有点像，如果你家里的微波炉坏了，那很烦人，对吧？但你还可以用其他方法做饭。但我们现在看到的是：这不是微波炉。如果停电了，那就是另外一个问题了。这是运行所有应用程序并提供数据的基础设施。没有数据和应用程序，现代企业的业务就会停滞。”</p><p></p><p></p><h2>来到十字路口的VMware用户</h2><p></p><p></p><p>鉴于此次合并，2024年对于VMware用户来说将是一个潜在的转折点，他们可能会发现，这是一个转向基于AI应用和基础设施设计和构建新一代SaaS系统或数据中心的自然过渡。VMware技术可以追溯到1990年代末，尽管多年来一直在不断更新。</p><p></p><p>Caswell说：“公司将致力于在新的容器化应用程序中使用生成式AI，这些应用程序正在通过Kubernetes编排的应用程序进入内部部署环境，或者可能是一种新的混合多云操作模型，在本地和公有云运行应用程序。如果我想要一个经得起未来考验的系统，像Nutanix这样的公司或许可以帮得上忙。”</p><p></p><p>Virtuozzo，作为建立在OpenStack之上的VMware数据管理替代方案，是另一家有望赢得VMware用户的公司。</p><p></p><p>Virtuozzo美洲地区副总裁Rony Moyal表示：“CIO们正在努力将更多的工作负载转移到内部，或至少是大多数超大规模服务器。因此，我认为这是Red Hat尝试向上游移动、VMware向上游移动，以及CTO、CIO和云服务提供商跟进的综合结果。“</p><p></p><p>“在这之后，没有人知道它会怎样发展。我从云服务提供商那里得到很多消息，他们需要替代方案。它们不一定会立即替代VMware，但他们会建立一个并行平台，如果情况变得更糟，他们就有了替代解决方案。”</p><p></p><p>“因为收购，许多云服务提供商甚至是企业都没有更新他们的硬件。他们在等待，看看会发生什么。他们当中很多人都在寻找另一个平台。这一切将在第一季度末第二季度初达到高潮，这些服务提供商将不得不做出决定。”</p><p></p><p>据报道，博通打算以约50亿美元的价格出售VMware的终端用户计算部门，包括Workspace ONE和Horizon产品以及一套虚拟桌面产品。</p><p></p><p>【声明：本文由InfoQ翻译，未经许可禁止转载。】</p><p></p><p>原文链接：https://thenewstack.io/why-broadcom-is-killing-off-vmwares-standalone-products/</p>",
    "publish_time": "2024-01-31 12:14:47",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "WASM：计算的未来还有多远？",
    "url": "https://www.infoq.cn/article/8b50WxUtbZbOKSJ7dgcJ",
    "summary": "<p></p><blockquote>导读：在涉及到 WebAssembly（WASM）的未来前景时，不同的观点和声音交织在一起。虽然取得了许多重要进展，但也有声音指出在可靠高效地支持生产用例方面仍有很多工作要做。这种多元的看法不仅仅存在于个别观点中，分析师 Torsten Volk 也持有类似的观点。当然，还有其他经验丰富的专业人士表达了截然不同的看法。在这个引人入胜的讨论中，我们将探讨不同观点，并深入了解 WebAssembly 的潜力和挑战。</blockquote><p></p><p>&nbsp;</p><p>WebAssembly 正在受到广泛关注，但它是否真的能像一些人所期望的那样颠覆游戏规则呢？</p><p>&nbsp;</p><p>有人如此评价：自 1995 年起，JavaScript 作为 Web 脚本编程的翘楚已经历数十年风雨。虽然其才华横溢，但 JavaScript 在处理性能密集任务时亦有局限。随着 Web 发展，对 Web 应用程序功能、速度和灵活性的需求也与日俱增。因此，WebAssembly （WASM）应运而生。</p><p>&nbsp;</p><p>为满足在 Web 浏览器中运行代码的高效需求，万维网联盟（W3C） 和主流浏览器厂商联手研发新型二进制格式。该格式旨在快速、高效且安全，使开发人员能以接近本地速度运行代码。因此，2015 年，WebAssembly（WASM）作为一种低级虚拟机问世，执行从高级语言翻译而来的字节码。如今，WASM 并不是编程语言，而是一种紧凑的二进制指令格式。与解释执行的 JavaScript 不同，WASM 为一种低级字节码，在浏览器内部的沙盒环境中运行，确保速度与安全。</p><p>&nbsp;</p><p>开发人员热衷使用 WebAssembly，因为它让他们能以熟悉的编程语言如 C、C++ 和 Rust 编写代码。Web 开发人员也对此感到满意，因为他们无需替换 JavaScript 程序，而是能够<a href=\"https://hacks.mozilla.org/2017/02/creating-and-working-with-webassembly-modules/\">从 JavaScript 中调用 WASM 函数，反之亦然</a>\"，实现了两者之间的无缝集成。</p><p>&nbsp;</p><p>起初，WASM 只用于 Web 领域。然后情况发生了变化。2019 年，Mozilla 推出了其 <a href=\"https://www.theregister.com/2019/03/29/mozilla_wasi_spec/\">WebAssembly 系统接口</a>\"（WASI）以访问操作系统资源。这<a href=\"https://hacks.mozilla.org/2019/03/standardizing-wasi-a-webassembly-system-interface/\">使 WebAssembly 脱离了浏览器的限制</a>\"。</p><p>&nbsp;</p><p>一旦摆脱了浏览器的限制，就像 WASM 专家和 Fastly 工程总监 Lin Clark 所说，它成为了一种 “在所有机器上运行相同代码的快速、可扩展、安全的方式”。</p><p>&nbsp;</p><p>听上去耳熟能详，是吧？你可以用相同的描述来描述容器。但你不必全然相信。正如 Docker 的联合创始人 Solomon Hykes 当时在<a href=\"https://twitter.com/solomonstre/status/1111004913222324225\">推文</a>\"中所言：“若 WASM+WASI 早在 2008 年就存在，我们便无需创立 Docker 了。其重要性不言而喻。服务器上运用 WebAssembly 乃是计算的未来所在。而标准化的系统接口则成为缺失的一环。”</p><p>&nbsp;</p><p>最近，2023 年，云原生计算基金会（<a href=\"https://cncf.io/?utm_content=inline-mention\">CNCF</a>\"）生态系统负责人 Taylor Dolezal 指出：“WebAssembly 是未来趋势，因为其在无服务器、容器化和插件技术中的应用不断增多，预计将对 Web、无服务器、游戏和容器化应用产生深远影响。”</p><p>&nbsp;</p><p>言之凿凿。那么，WASM 是否将成为 “计算的未来”？</p><p>&nbsp;</p><p>从个人角度来看，Steven J. Vaughan-Nichols 一直对此心存疑虑。虽然诸如 WASI 之类的程序以及竞争对手运行时（如 WasmEdge）已经大大简化了在边缘和后端运行经过优化的 WASM 代码，但 Steven 认为仍有很多工作要做。而且，他并非唯一看到这个问题的人。</p><p>&nbsp;</p><p>正如企业管理协会分析师 Torsten Volk <a href=\"https://thenewstack.io/is-webassembly-really-the-future/\">所言</a>\"：“在可靠高效地支持生产用例方面还有很多工作要做。”确实如此。</p><p>&nbsp;</p><p>举个例子，Python 已经成为人们快速、轻松处理机器学习程序的首选方式，这要归功于 PyTorch。然而，将这些程序简单地放入 WASM 运行时并期望它们顺利运行是不现实的。问题在于，你还需要许多目前尚未支持的第三方依赖项。</p><p>&nbsp;</p><p>随着 WASM 受欢迎度的提升，公司和开源社区将需要承担起构建这些基础设施的艰巨任务。</p><p>&nbsp;</p><p>然而，你可能会提出疑问——Kubernetes 难道不是未来吗？是的，但正如 Adobe 最近指出的，WASM 和 Kubernetes 可以合作共存。他们找到了一种方法，使一个 “<a href=\"https://www.cncf.io/blog/2022/11/17/better-together-a-kubernetes-and-wasm-case-study/\">完整的微服务</a>\"，目前在 Kubernetes 中运行，也可以在 WASM 中运行”。</p><p>&nbsp;</p><p>这样做的原因何在？这为他们带来了一种更轻盈的模型，能够在流量激增时迅速扩展，相较于粗粒度容器更具调度灵活性，同时仍然借助 Kubernetes 进行编排。对 Adobe 而言，这是两全其美的完美选择，兼顾了两者的优势。</p><p>&nbsp;</p><p>虽然 Adobe 拥有比大多数公司更多的资源来解决这些问题，但展望未来，对于规模较小的企业来说，WASM 或许会变得更加适用于后端。</p><p>&nbsp;</p><p>这得益于 <a href=\"https://www.fermyon.com/blog/webassembly-component-model\">WebAssembly 组件模型</a>\"（WACM）和 <a href=\"https://github.com/bytecodealliance/preview2-prototyping\">WASI-Preview 2</a>\" 的存在。</p><p>&nbsp;</p><p>WACM 项目将逐步定义一个组件模型，它将为从 WASM 核心模块构建的、具有可移植性、加载和运行效率高的二进制格式提供支持，从而实现了可移植性强、跨语言组合的能力。它还将更好地支持可虚拟化、静态分析、能力安全和与语言无关的接口。</p><p>&nbsp;</p><p>WASI-Preview 2 是 WASI 的下一个版本，它将扩展 WASI 的 API，不仅包括 POSIX，还包括 WASI 文件系统、HTTP、云和网络套接字。它还将提供更好的绑定支持非 C 类语言。</p><p>&nbsp;</p><p>总而言之，Steven 认为 WASM 最终可能充分释放其潜力。然而，在开发人员的构想与实际生产代码之间仍然存在诸多挑战。不过，已经奠定了构建实际 WASI 后端设计所需的基础。到了 2025 年，我们将揭晓 WASM 是否确实能成为后端软件开发的未来。</p><p>&nbsp;</p><p>在著名的技术论坛 Hacker News，也有很多大佬对 <a href=\"https://news.ycombinator.com/item?id=37385197\">WASM 的未来</a>\"发表了各自独到见解。InfoQ 精选如下：</p><p>&nbsp;</p><p>网友 ivanmontillam 对 WASM 的期望和对 Javascript 在前端开发中的挑战有深刻的认识，他认为 WASM 有望提供一种更灵活、更容易处理多种技术栈的方式，从而摆脱 JavaScript 的统治地位。他的观点强调了对 Web 开发的包容性和多样性的重要性。</p><p>&nbsp;</p><p>ivanmontillam：</p><p>&nbsp;</p><p></p><blockquote>我对 WASM 获胜充满期待。在前端 Web 开发中，我一直对 JavaScript 的怪异之处感到沮丧。它充满了陷阱，对于新手来说很难调试，除非你在入门之前学习了一门正规的 JavaScript 课程，告诉你在遭受陷阱之前要小心。除了 JavaScript，我从未遇到一种编程语言在初次接触时没有按照我期望的方式运行。&nbsp;我深知 TypeScript 的存在，也明白转译器的优势，其语法（现代 ECMAScript）和规则更适应时代。然而，它们并非浏览器的 “原生” 部分，仍需转译成危险的旧 JavaScript。虽然转译器能避免许多陷阱，但我仍感觉自己在沙地上建造摩天大楼。&nbsp;关于这个话题的难点在于，我确信我的评论会触怒许多开发人员，因为这样谈论 JavaScript 会让人感觉我侮辱了他们的信仰。澄清一下，我无意如此。我来自静态类型编程语言的世界，所以我更倾向于我的编程是最正确的。&nbsp;对我来说，假设我们能创建一个主要执行虚拟机不是 JavaScript 的浏览器，WASM 将提供坚实的基础。我梦想拥有一个支持多种技术栈的浏览器，摒弃 HTML/CSS/JavaScript 的垄断。为何不考虑类似 HTML/CSS/Python 的选择呢？&nbsp;对我而言，JavaScript 在职业发展上已成为一种挫败因素。尽管我在后端 Web 开发方面表现出色，但我深信并非只有我一个人对 JavaScript 感到沮丧。Web 应该更加包容。</blockquote><p></p><p>&nbsp;</p><p>网友 Phil_kahrl 对 WASM 赞赏有加，尤其在与 JavaScript 相较之下。他盛赞 Rust 与 WASM 的强强联合，以及 Cargo 作为出色的包管理器，使他的项目依赖管理更加得心应手。他还强调了 WASM 捆绑包的潜在大小优势，以及使用 Rust 进行低级操作的便捷性。最重要的是，他认为使用 WASM 编写的应用程序比 React 编写的应用程序更迅捷，尽管这一点也与所使用的框架（Leptos）息息相关。这一观点凸显了 WASM 在前端开发的潜力和吸引力。</p><p>&nbsp;</p><p>phil_kahrl：</p><p>&nbsp;</p><p></p><blockquote>我坚信 WASM 将胜出。经过 25 多年的 JavaScript 使用，我最近尝试了使用 Rust/WASM 和 <a href=\"https://github.com/leptos-rs/leptos\">Leptos 框架</a>\"构建一个单页应用程序（SPA），并自此不再想回到 JavaScript。Cargo 作为出色的包管理器，让我的项目静置一两年后再回来构建运行时变得轻而易举，而无需进行大量的依赖更新（与 NPM 相比）。Rust 的坚实类型系统，加上借用检查器和模式匹配，使我能够编写可靠且难以破坏的代码。无需经过多个阶段的 Babel 和 Webpack 构建流程，只需将 Rust 编译为 WASM 目标即可。此外，WASM 捆绑包的大小可能比相应的 JavaScript 捆绑包更小。借助 Rust，在客户端高效地进行低级操作，比如从镜像二进制数据中进行特征提取，也更加便捷。而且，用 WASM 编写的应用程序比我用 React 编写的类似应用程序运行得更快，尽管这主要归功于 Leptos 不像 React 那样使用虚拟 DOM。</blockquote><p></p><p>&nbsp;</p><p>网友 jeroenhd 的见解深入透彻，对 WASM 和 JavaScript 的优势与局限进行了剖析，并引发了关于开发工具和开发者教育的重要议题。</p><p>&nbsp;</p><p>jeroenhd：</p><p>&nbsp;</p><p></p><blockquote>我倡导在浏览器中运行 TypeScript，但 WASM 只是另一种编译器，就像 TypeScript 一样。无论对转译器的担忧如何，一旦将代码编译成二进制代码块，调试和解决问题都会更加困难。如果信任 Python 解释器，也可以信任 TypeScript 转译器。处理糟糕情况如 IE11 或旧版 Safari 版本时，调试可能复杂，但我们已不再生活在 2010 年。&nbsp;JavaScript 非常不便，有大量奇怪的边界情况（例如，“分号是可选的，除了这三个边界情况”），通过使用进行作用域切换，不可预测的类型转换等。然而，编写一个转译器来处理这些规则并不是那么困难。将另一种语言转译成 JavaScript 可能会放弃一些优化机会，因为需要按照另一种语言期望的方式重新实现方法，而不是直接调用本机 JavaScript API。但至少它具备正常的 API 可供依赖。&nbsp;WASM 就像 Docker，在我机器上工作，但无法让你的机器上工作，所以我们将机器一起打包。你将标准库和 JSON 解析器发送到浏览器，就像推送代码到裸金属服务器上。&nbsp;JavaScript 并不难学，HTML 和 CSS 也不难。然而，许多 WASM 开发者试图在不了解浏览器工作原理的情况下编写浏览器代码，这是糟糕的想法，最终只会导致膨胀或抽象不当。试图将 “后端开发人员变成前端开发人员” 只会带来沮丧的 Java 小程序，几乎无法在桌面浏览器上运行，更不用说触摸屏和手机上了。&nbsp;“本地” 桌面开发之所以演变成 “运行过时的 Chrome 副本并加上一些操作系统胶水”，是因为 Web 开发相较前端开发更容易，尤其需要跨平台支持。WASM 无法让后端开发人员即刻成为前端高手，需学习新框架及难以使用的工具。&nbsp;只需使用 JavaScript，尽管可能有一些不便，但比提出的其他替代方案要好得多。</blockquote><p></p><p>&nbsp;</p><p>网友 jillesvangurp 对 WASM 和前端开发提出了一系列深刻见解，强调了 WASM 作为 Web 开发的重要趋势。他讨论了 WASM 对传统观念的影响以及未来的潜力，展示了对 Web 开发领域不断演变和创新的关注。</p><p>&nbsp;</p><p>jillesvangurp：</p><p>&nbsp;</p><p></p><blockquote>对于典型的单页应用程序（SPA），其代码库通常会变得混乱不堪，精简的 JavaScript 代码中难以找到透明和可发现的特点。除了少数个别开发人员外，大多数 Web 开发者将浏览器中的 JavaScript 视为一种编译目标。&nbsp;WASM 不过是更为出色的编译目标之一，更具通用性、易于优化、更紧凑，同时还支持逐步加载等特性。若必须编译代码，则最好选择适合的编译目标。&nbsp;广泛而言，我认为 WASM 开始挑战束缚了 Web 开发者二十年之久的传统观念，即 “只能使用 DOM/CSS/JavaScript”。虽然这在过去是唯一可行方案，但移动应用开发者和游戏开发者更倾向于本地开发，因为 Web 开发技术一直表现不佳。设计师追求理想效果的同时，Web 的能力一直受限。我们曾尝试过 Flash、Shockwave 和 Silverlight 等替代方案，但 HTML5 未能完全替代它们，而由于安全原因，浏览器插件逐渐被废弃，但我们始终未找到理想的替代品。&nbsp;现在，有了 WASM，我们不再有理由坚守传统的 DOM/CSS/Javascript 技术。如果愿意，可以使用这些技术，但现在有了其他选项。尽管目前仍需要使用 C++ 和 Rust 等语言，但 WASM 正在迅速发展。&nbsp;WASM 正处于迅速成熟的过程中，浏览器中一些功能标志（例如新的垃圾回收功能）正在后台开发中。一旦这些标志得到移除，WASM 的地位将更加平等。从那时起，主要的挑战将是 UI 框架和工具链需要适应这一新现实。实际上，Jetbrains 正在积极开发基于 WASM 的多平台 UI 框架 Compose，该框架可以渲染到画布上。尽管仍处于实验阶段且需要在浏览器中设置一些功能标志才能运行，但它允许开发人员使用 Compose 进行跨平台 UI 开发，支持 Android、iOS（尽管是 alpha 版本）、桌面（基于 JVM），并计划不久的将来支持基于 WASM 的 Web 平台。可能还会有其他一些 UI 堆栈很快开始面向 Web 开发。当然，Blazor 是 WASM 的早期采用者之一，但它使用自己的垃圾回收机制，可能会导致应用程序变得臃肿。&nbsp;总而言之，HTML5 不再是唯一的选择，它必须根据实际情况竞争，而不仅仅是依赖于垄断地位。这些变化反映了 Web 开发领域的不断演进，为开发人员提供了更多选择和灵活性。</blockquote><p></p><p>&nbsp;</p><p>网友 jeroenhd 提出的观点强调了 Web 开发领域的一些关键议题，包括调试工具的重要性、新技术的复杂性、性能和用户体验的重要性，以及技术的持续演进对开发者的影响。这些观点促使我们思考如何更好地利用现有工具和技术，并在采用新技术时保持警惕。</p><p>&nbsp;</p><p>jeroenhd：</p><p>&nbsp;</p><p></p><blockquote>我一直在使用 Firefox 中的 JavaScript 调试器来修改经过精简的 JavaScript 代码。尽管开发者可能会随意重命名他们的方法，但除非有故意的混淆（在这种情况下，请忽略我的措辞），阅读经过精简的 JavaScript 代码并非难事。事实上，Firefox 甚至内置了一些用于检测常见 Web 框架的功能，这使得与大多数缩小后的代码一起正常工作成为可能。在我接受 WebAssembly 与 JavaScript 一样晦涩难懂的观点之前，我们需要在浏览器中构建一个相当先进的 WebAssembly 反编译工具套件。&nbsp;我对 WebAssembly 作为 Web 应用程序平台以及对明目张胆滥用 <canvas> 元素的趋势感到不满。尽管它旨在为开发人员节省时间，但每次这样的技术出现时，Web 页面都变得更慢、更难以使用。React（Native）多年前就已经实现了跨平台应用程序和 Web 开发的无缝集成，而无需为每个访问的页面下载数兆字节的可执行二进制块。&nbsp;WebAssembly 实际上类似于 Java 小程序和 Flash 嵌入，只是该模式的第四次出现。它们都面临相似的问题，几年后可能导致相同的性能下降和麻烦。对开发人员来说，唯一的不同在于现在可以使用现代语言如 Rust 编写 WebAssembly 模块，且无法禁用加载这些二进制块的功能。</canvas></blockquote><p></p><p>&nbsp;</p><p>网友 3cats-in-a-coat 对 WASM 提出了合理的质疑，担心其在 Web 开发领域可能面临挑战，特别是在性能和用户体验方面。他强调了在采用新技术时需审慎考虑各种因素，并指出 WASM 或许能解决特定问题，但并非所有问题的唯一解决方案。</p><p>&nbsp;</p><p>3cats-in-a-coat：</p><p>&nbsp;</p><p></p><blockquote>你还可以在没有操作系统分裂的情况下运行相同的构建。假设所有 Windows 机器运行相同的构建。所有 iPhone 运行相同的构建（实际上不完全是这样，但假设他们在 App Store 上自动化并高效地隐藏了构建，零工作量）。总的来说，构建不是问题。如果它们成为问题，那是一个分裂的、不成熟的生态系统的症状，而事实上，许多 Linux/BSD 发行版在大局上仍然是如此。&nbsp;然而，所有这些都无关紧要。因为我们有 Java 和无数其他跨平台运行时环境。WASM 充其量只是相同主题的另一种变体，投放到同一个池中。我完全可以理解，虽然人们可以热情地说 WASM 是未来，因为它具有沙箱化和多平台特性。事实是它可能不会发生，因为 WASM 既不新鲜也不独特。这个领域已经有了解决方案。&nbsp;我们可以理论上认为，每个人都将拥有一个 WASM 编译器后端，因为它在浏览器中运行，因此对于服务器上的所有内容都有编译器后端可用于 WASM。然而，你自己说过，对于 WASM 来说，Web 并不是最有趣的地方。那么，什么东西将推动 WASM 生态系统变得有趣（使 Web 不再有趣）呢？这是一个棘手的问题。可能行得通，也可能不行。&nbsp;我曾经经历过 Web 上的一个时期，那时每种编程语言都有一个 JavaScript 编译器后端。你可以将 Java 编译成 JavaScript，将 Delphi 编译成 JavaScript，将 C# 编译成 JavaScript 等等。也许其中一些解决方案仍然以某种半废弃的形式存在，但它们大多被放弃了，因为人们意识到编写 JavaScript 的最佳语言就是 JavaScript 本身。这也是 TypeScript 取得如此成功的原因，因为它本质上就是 JavaScript（但带有类型）。&nbsp;对于 WASM，我们可以争论不存在 “在 JavaScript 中编写 JavaScript” 的压力，但它的价值有限，除了 “在 Web 上使用汇编语言” 的极客领域。我知道为什么 Google 需要它。它需要它来索引网络并在网络上放置广告，因此它希望一切都成为网络，这样 Google 就可以索引并在一切上放置广告。这对 Google 有利，但对其他人并非如此。在 Web 上下载并运行像 Photoshop 之类的数百 MB 应用程序的代码绝对是一种糟糕的体验。更不用说应用程序可用的人机交互输入能力和操作系统服务在浏览器中是有限的了。</blockquote><p></p><p>&nbsp;</p><p>关于 WebAssembly（WASM）的讨论就如同一场丰富多彩的辩论。就像技术界百家争鸣、百花齐放一样，我们有着各种各样的观点和解决方案。作为多平台运行时环境，WASM 引发了对 Web 开发和跨平台性能的思考。然而，我们必须认识到技术进步是多元的，不同的问题可能需要不同的解决之道。</p><p>&nbsp;</p><p>正如历史上编程语言和工具的竞争一样，我们或许会见证 WASM 在特定领域取得成功，而在其他领域面临挑战。重要的是要从各种观点中吸取智慧，创造更多元化、创新的技术生态系统。无论 WASM 的未来如何，让我们欣然接受这个多彩的时代，继续推动技术的前沿，为未来的 Web 开发和跨平台应用程序创造更好的解决方案。</p><p>&nbsp;</p><p>参考链接：</p><p>&nbsp;</p><p>https://www.theregister.com/2023/09/01/web_assembly_wasm_column</p><p>&nbsp;</p><p>https://news.ycombinator.com/item?id=37385197</p>",
    "publish_time": "2024-01-31 12:32:25",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Appsmith 为何放弃微服务，选择模块化单体架构？",
    "url": "https://www.infoq.cn/article/HwGH96PJXowBSKYLV3at",
    "summary": "<p></p><blockquote>导读：在这篇文章中，Appsmith 的联合创始人和首席技术官分享了他们如何将 Appsmith 平台转换为单体架构，以及这个决定是如何让他们的贡献者和用户受益的。作者还探讨了单体架构和微服务的历史、优缺点，并强调了选择最佳软件架构应该依据团队的需求和情况而定。最后，作者提出了关于单体架构的一些观点，包括其如何影响 Appsmith 的开源开发模式以及如何使最终用户受益。</blockquote><p></p><p>&nbsp;</p><p>当我在面试软件工程师候选人时，我总是会问这样一个问题：“你会怎么做来改进 Appsmith？” 候选人们往往会作出这样一个普遍的回答：“我会把 Appsmith 代码库改造成微服务架构。” 这个答案反映了当今微服务架构的普及性，以及一种误解，即所有单体代码库都应该采用这种较新的模型进行重写。在谈论了微服务及其带来的优缺点之后，我不可避免地不得不透露我们有意选择不使用微服务，并解释为什么。</p><p>&nbsp;</p><p>实际上，我认为对于大多数规模为中小型企业的团队（有 150 名以下工程师），使用微服务是不好的选择。即使像 Facebook、亚马逊、Netflix 这样的大型科技公司使用微服务，也并不意味着你也应该使用微服务。</p><p>&nbsp;</p><p>作为 Appsmith 的联合创始人和首席技术官，我们的平台可以帮助开发人员快速构建内部应用程序，如支持工具、仪表盘和资产跟踪应用程序。在这个过程中，我有一个独特的视角，观察了我们的架构和开发实践是如何从早期阶段发生了变化。我想借用这个三部曲的机会，概括一下我在这段时间里看到的一些情况。其中包括我的看法，“单体架构与微服务”问题，我们如何将 Appsmith 实现为单体架构，这种选择如何影响我们转向开源开发模式，以及最重要的是，单体代码库如何使 Appsmith 的最终用户受益。</p><p>&nbsp;</p><p></p><h2>单体架构与微服务</h2><p></p><p>&nbsp;</p><p>单体架构和微服务各有适用的开发和部署需求，因此，哪种架构更好这个问题本身就不是关键所在。</p><p>&nbsp;</p><p>最佳软件架构应该是能够让你的团队以最快的速度创建最高质量的软件的那个。具体采用哪种架构会因许多因素而异。为了了解这些因素，让我们回顾一下单体架构和微服务的历史、优点和缺点。</p><p>&nbsp;</p><p></p><h2>单体架构：简单但后期成本可能很高</h2><p></p><p>&nbsp;</p><p>在互联网普及和网络连接改进之前，微服务的概念还处于起步阶段。因此，唯一的可行选项是使用单体架构，包括单一代码库（通常是单一二进制文件）和一个（通常是大型的）应用程序，在本地或私有主机上运行。所有功能都是自包含的，虽然这种架构简单易于维护，但后期成本可能会很高。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/09/09ef21c8c418c74cc62f3ef589ae999a.jpeg\" /></p><p></p><p>&nbsp;</p><p>单体架构在软件生命周期的各个阶段都有优点。在开发和调试期间，能够轻松跳转到整个代码库以深入了解发生的情况非常有用。单体应用程序可以部署到一个统一的环境中，这样可以减少复杂性和安装错误。在运行期间，调用存储在本地内存中的函数而不是经过许多层远程应用程序的 API 调用，这使得应用程序运行更快。</p><p>&nbsp;</p><p>单体架构的缺点之一是，对功能的小修改会导致部署成本高昂，并且功能无法独立扩展。如果对某个功能进行小修改，通常需要重新运行回归测试并重新部署整个应用程序。根据应用程序的大小，这可能需要很多额外的工作。</p><p>&nbsp;</p><p>扩展也是有问题的，特别是对于 Web 应用程序。通常希望根据流量要求只扩展一个组件，同时保持其他低流量组件不变以降低成本。但是，在单体架构中，单独扩展组件并不容易实现。</p><p>&nbsp;</p><p>直到 2000 年代初，单体架构是开发者们的主要选择。互联网的早期增长几乎完全依靠这些架构，因为 Web 技术栈相对简单，易于打包成单个单体应用程序。单体架构经得起考验，但随着互联网的增长，出现了一种新的可扩展性需求的替代方案——微服务。</p><p>&nbsp;</p><p></p><h2>微服务架构：更复杂，理论上后期可扩展性更高。</h2><p></p><p>&nbsp;</p><p>随着互联网和构建其上的服务的性质不断发展，一些公司意识到单体架构可能对连接软件有所限制。其中最早的例子之一是 Netflix，在 2009 年决定用单体架构进行扩展将过于昂贵，无法适应其应用程序的需求。</p><p>&nbsp;</p><p>他们从根本上重新思考了其架构，考虑到不断变化的消费者景观和因更强大的互联网而带来的技术改进。这些改进使得开发分布式应用程序成为可能，从而使他们能够将业务模式从邮寄 DVD 转变为点播流媒体视频。为了实现这一目标，他们将主机从现场转移到云端，将软件架构从单体转变为分布式微服务。</p><p>&nbsp;</p><p>这是微服务架构的最早成功实施之一。微服务的主要思想是，功能不是自包含在单个大型应用程序中，而是拆分成许多较小的应用程序，通常分布在许多不同的服务器上，并通过定义良好的 API 进行通信。</p><p>&nbsp;</p><p>微服务架构的好处包括更有组织和模块化的功能，更容易扩展，以及在多种编程语言中进行开发的可能性。通常将不同组件拆分到每个微服务的级别，使每个微服务有一个任务。这比典型的单体方法更明确界限，有助于保持组织清晰。由于功能分布在不同的二进制文件中，这些二进制文件可以部署在不同的实例上，允许对单个微服务进行扩展，而无需对整个应用程序进行扩展。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/04/04391b82e4a0500fca1433a402d30f65.jpeg\" /></p><p></p><p>&nbsp;</p><p>这种架构对于流量规模较大或变化频繁的 Web 应用程序特别有益。另一个好处是，只要 API 定义清晰，每个开发微服务的团队都可以选择符合他们偏好和技能的语言，不必像在单体应用中一样被强制使用相同的语言。</p><p>&nbsp;</p><p>当然，这种模型也有缺点，包括需要更高的网络带宽、更高的开发人员技能和知识，以及更多的潜在安全漏洞。如果你正在实现一个基于微服务的架构，你必须拥有经验丰富的团队来处理这种增加的复杂性。</p><p>&nbsp;</p><p></p><h2>Appsmith 选择了哪种架构？</h2><p></p><p>&nbsp;</p><p>自从开始，我们就考虑和尝试了许多种架构。最初，我们考虑过基于微服务的架构，因为这是我们周围所有人都在做的事情。然而，我们最终拒绝了这个选项，因为基于微服务的应用程序本地部署存在太多问题需要解决。考虑到本地部署是我们业务的重点，我们不能使部署过程变得更加复杂化，从而影响最终用户的使用。</p><p>&nbsp;</p><p>相反，在 Appsmith 早期阶段，我们依赖于纯粹的单体架构。这使我们在项目上取得了很大进展，但最终我们遇到了单体代码库扩展问题的显著工程团队问题。</p><p>&nbsp;</p><p>我们知道这些扩展问题将继续阻碍我们的发展，所以我们回到了起点，重新考虑了我们从第一原则上需要的东西，而不仅仅是采用当时最流行的方法。我们最终在两种主要架构类型之间达成了一个妥协：模块化单体架构。</p><p>&nbsp;</p><p>当时我们并不知道，但我们已经独立地发现了一个解决方案，这个解决方案<a href=\"https://martinfowler.com/bliki/MonolithFirst.html\">已经存在于社区中</a>\"，让像 <a href=\"https://shopify.engineering/deconstructing-monolith-designing-software-maximizes-developer-productivity\">Shopify</a>\"、<a href=\"https://engineering.gusto.com/building-toward-a-modular-monolith/\">Gusto</a>\"、<a href=\"https://speakerdeck.com/axelfontaine/majestic-modular-monoliths\">Boxfuse</a>\" 和许多其他公司能够在不采用基于微服务的方法的情况下扩展他们的开发。</p><p>&nbsp;</p><p></p><h2>两全其美</h2><p></p><p>&nbsp;</p><p>模块化单体结构依赖于基于微服务架构的模块化概念，同时使用单体代码库进行结构化。</p><p>&nbsp;</p><p>在模块化单体代码库中，源文件按照不同的功能层次结构化，特定的团队负责管理这些目录的所有权和责任。这是两种架构的很好折衷方案，因为它可以在不引入其他性能和部署缺点的情况下，分离功能、所有权和责任。</p><p>&nbsp;</p><p>从实际角度来看，这意味着当你添加新功能时，可以为其创建一个新的目录结构并负责管理，同时可以确信不会干扰任何其他人正在进行的工作。如果你是 Appsmith 的贡献者，那么可以更快地发现需要更改的相关代码，并且无需核心开发人员提供更少的指导。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4c/4c0c449f6ec80dd01408a2628be2f594.jpeg\" /></p><p></p><p>&nbsp;</p><p>模块化单体架构还拥有单体架构的所有部署优点——用户只需部署单个二进制文件，而不是数百个独立服务。这对于 Appsmith 的终端用户来说非常重要，特别是那些本地部署应用程序的用户，因为他们只需考虑一个自包含的应用程序，而不是数百个相互通信的微服务。</p><p>&nbsp;</p><p></p><h2>为我们做出正确的选择</h2><p></p><p>&nbsp;</p><p>模块化的单体架构使我们能够维护一个大型的代码库并部署一个单一的二进制文件，同时以清晰、有组织的方式模块化功能。这使我们能够平衡我们最终客户的利益（他们希望部署过程更简单）和我们内部团队以及开源社区的利益（他们希望功能更清晰地分离并且为贡献提供更好的指导）。</p><p>&nbsp;</p><p>总的来说，转换到模块化的单体架构是我们在 Appsmith 做出的最好决定之一，这对我们、我们的贡献者和用户都有益。我们并不总是完美的，仍在学习如何最好地使用这个架构，但我们已经学到了一些重要的教训，将在我们关于选择正确架构的系列文章的下一篇中介绍。</p><p>&nbsp;</p><p>原文链接：</p><p>&nbsp;</p><p>https://www.appsmith.com/blog/monoliths-vs-microservices-1</p>",
    "publish_time": "2024-01-31 12:47:34",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "中国软件技术发展洞察和趋势预测研究报告2024",
    "url": "https://www.infoq.cn/article/YcyRCPwj38Upvdj4qVmx",
    "summary": "<h3>研究背景</h3>\n<p>2023年，大模型与生成式AI的崛起无疑成为了技术领域的焦点。在这一年里，大模型和生成式AI的讨论持续“破圈”，各类商用大模型和开源大模型的发布和更新将技术创新推向了新的高峰，相关产品不断发布。<br />\n然而，AI领域的巨大变革外，其他数字技术也在助力实体经济的道路上稳步迈进。5G、数据资产、云计算、数字孪生等技术正融入工业互联网的各个环节，产品设计、资源勘探、生产制造、设备管理、安全生产各个环节之间也日益融合。5G工厂、双跨平台等工业互联网建设成果不断累积和爆发。<br />\n在此背景下，InfoQ研究中心从人工智能新纪元和以数强实稳根基两大篇章，从数据定量和公开资料、专家访谈定性的角度，深入回顾2023年技术市场的重大进展和演进，并以此为基础，探究2024年技术发展的未来方向。<br />\n我们期望，这个VUCA时代，这份报告能够在帮助各位开发者、科技领导者以及各类对技术领域感兴趣的读者朋友，把握未来技术发展的脉络。InfoQ研究中心也将继续以专业、客观和持续的报告产出，同大家一起见证技术发展的每一个重要时刻。</p>\n<h3>数据来源</h3>\n<p><img alt=\"\" src=\"https://static001.infoq.cn/resource/image/80/68/80ece3203d3b06ff613f0c289d802e68.jpg\" /></p>\n<h3>技术成熟度</h3>\n<p><img alt=\"\" src=\"https://static001.infoq.cn/resource/image/51/d7/51c342704909de7d31fed9b361a9cdd7.jpg\" /></p>\n<h3>报告专家团</h3>\n<ul>\n<li>蔡超 汇量科技 Mobvista 技术 VP 兼首席架构师</li>\n<li>董晓聪 作业帮 基础架构 负责人</li>\n<li>冯嘉 分布式基础软件领域资深专家，现任华为云中间件首席专家，部门负责人</li>\n<li>郭炜 白鲸开源 CEO，Apache&nbsp;Software&nbsp;Foundation&nbsp;Member</li>\n<li>胡宗星 九章云极 DataCanvas 高级产品总监</li>\n<li>蒋林泉 阿里云CIO&amp;aliyun.com负责人</li>\n<li>李洁 北京阿哇科技 创始人</li>\n<li>李飞 数势科技AI负责人</li>\n<li>刘道儒 星汉未来CEO</li>\n<li>刘东 网易杭州研究院 人工智能专家，AI 算法团队负责人</li>\n<li>刘松 PingCAP 副总裁</li>\n<li>芦宇峰（肉山）小电科技 董事兼VP，TGO鲲鹏会（杭州）董事会成员</li>\n<li>孙百冬 中国石油昆仑数智&nbsp;数字化咨询中心副主任&nbsp;油气数字化转型资深专家</li>\n<li>吴晟 Tetrate 创始工程师，Apache SkyWalking创始人</li>\n<li>宜博 大模型农场 LLMFarm 创始人，&nbsp;TGO&nbsp;鲲鹏会（北京）董事会成员</li>\n<li>张文举 人工智能领域专家</li>\n<li>Fabarta技术团队</li>\n</ul>",
    "publish_time": "2024-01-31 12:53:27",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "React Native 跨界 MR 头显！苹 果Vision Pro 成新战场，开发门槛骤降",
    "url": "https://www.infoq.cn/article/axGBRHttwF04sj50kS8t",
    "summary": "<p></p><blockquote>一个新的开源项目将 React Native 引入了 Apple Vision Pro 平台，允许移动开发人员为这款混合现实头显设备开发应用。</blockquote><p></p><p></p><p>理论上来说，现有的移动应用应该是可以迁移到 Apple Vision Pro 的 visionOS 操作系统上的。</p><p>&nbsp;</p><p>Michał Pierzchała 在最近的一期 React Native 播客中估计，毕竟 visionOS 系统有多达 80-90%（甚至更多）的代码与 iOS 是相同的。Pierzchałan 是软件工程咨询公司 CallStack 的技术主管。负责该项目的 CallStack 软件工程师 Oskar Kwaśniewski 解释道，两大系统的基础都是 UIKit。</p><p>&nbsp;</p><p>不过，当 CallStack 与 Rebecker Specialties 的创始人 Matt Hargett 合作为 Vision Pro 开发一个 React Native 应用时，他们发现没办法在 visionOS 上使用这个框架。因此 CallStack 决定创建一个 React Native 的分支。通过这个分支，CallStack 构建了一个新的开源树外平台，可以支持 visionOS 操作系统。它允许开发人员将应用程序移植到到 Vision Pro 头显上，并完全支持这个平台的 SDK。</p><p>&nbsp;</p><p>“Apple Vision Pro 最显著的特点当然是这种沉浸式空间了，在这个空间中可以有几个并排排列的应用，”这个分支的开发者 Kwaśniewski 告诉 The New Stack。“这就是我们将为 React Native 带来的愿景，让用户可以轻松移植他们的应用，并充分利用 Apple Vision Pro 用户的虚拟空间。”</p><p></p><h2>VisionOS 开发的特殊之处</h2><p></p><p>我们可以将 VisionOS 看作具有三种类型空间内容的平台，这三种类型分别是：窗口、3D 体和空间。窗口是包含传统视图和控件的矩形框，并且可以包含一些 3D 内容。三维体更像是一个大立方体，可以向用户展示能够从任何角度观看的 3D 体验。空间就是剩下的所有内容。默认情况下，应用会启动到共享空间，它们并排排布，就像桌面上的多个应用一样。</p><p><img src=\"https://static001.geekbang.org/infoq/b6/b62146dc2a48ff013f20d8628901a0e3.png\" /></p><p>窗口和三维体，来自苹果的 visionOS 页面。</p><p>&nbsp;</p><p>“应用程序可以使用窗口和三维体来显示内容，并且用户可以将这些元素放到他们喜欢的任何位置上，”Apple VisionOS 网站是这样解释的。“为了获得更身临其境的体验，一个应用可以打开一个专用的完整空间，其中只会显示该应用的内容。在这个完整空间内，应用程序可以使用窗口和三维体创建无限的 3D 内容，打开通往不同世界的门户，甚至让人们完全沉浸在环境中。”</p><p>&nbsp;</p><p>Apple Vision Pro 是一款混合现实或扩展现实头显，而不是虚拟现实（提供完全身临其境的体验）设备。混合现实更像是一个虚拟叠加层，它允许用户与周围环境交互。Kwaśniewski 和 Pierzchałan 在播客中分享道，这款头显允许用户使用手、声音和眼睛来导航内容，所有这些都由系统层处理，不需要开发人员编程。</p><p>&nbsp;</p><p>Vision Pro 还是很难买——截至 1 月份的播客播出时，CallStack 还在等待产品发售——所以 Kwaśniewski 只能在模拟器上开发，但他表示，这个操作系统将高亮显示用户查看的位置并选择元素，然后可以通过手指动作来控制——就像点击触控板一样。</p><p></p><h2>替代方案</h2><p></p><p>Kwaśniewski 表示，他们的团队确实考虑了 Flutter 这个可能的选项，但最终选择了 React Native，因为后者是更成熟的框架，在 Apple App Store 和 Google Play 内发布的实际应用中所占的份额更大。他补充说，React Native 平台将允许这些开发人员将他们的移动应用扩展到 visionOS 上。</p><p>&nbsp;</p><p>NativeScript 是创建 VisionPro 应用的另一种选择。它为包括 React、Angular 和 Svelte 在内的多个 JavaScript 框架提供了 VisionOS 支持，允许开发人员将 JavaScript 与苹果的 SwiftUI 结合使用。但与之相比，React Native 更容易使用、速度更快，Pierzchałan 说。</p><p></p><h2>构建树外平台</h2><p></p><p>Kwaśniewski 将 Vision OS 的 React Native 分支与微软 Windows 的 React Native 分支做了比较。</p><p>&nbsp;</p><p>“它允许你复用自己之前用流行的 JavaScript 所编写的代码库，并运行在 macOS 和 Windows 上，我们还允许它在 visionOS 上运行，”他说。</p><p>&nbsp;</p><p>他补充说，在构建 React Native visionOS 框架时，团队利用了另一个框架 SwiftUI 来弥合 React Native 和 Vision Pro 在视觉展示方面之间的差距。</p><p>&nbsp;</p><p>团队发现不可能，甚至没有必要迁移所有的 React Native 代码。例如，有些 API 在 Vision Pro 上就没有意义。</p><p>&nbsp;</p><p>“检索当前用户屏幕信息的 API 对于这个平台来说没有意义，因为屏幕距离我们的眼睛只有一厘米，我们无法访问用户正在查看的屏幕；但对于视觉展示来说，我们使用窗口来显示内容，”他说。 “这就是为什么大多数库的开发和维护人员需要解决一些常见问题，才能让他们的库跑在这个平台上。”</p><p>&nbsp;</p><p>只有使用原生代码的库才需要迁移；根据 Kwaśniewski 一月份发布的一篇详细介绍如何迁移库的帖子来看，纯 JavaScript 库会是开箱即用的。当然，这个框架设计出来就是为了解决这方面的一些挑战的。Kwaśniewski 主动表示，希望迁移自己库的开发人员都可以向他寻求帮助。</p><p></p><p>另外，文章中提到的播客为“React Native for Apple Vision Pro and visionOS | The React Native Show Podcast”，可以直接访问这期播客的官网 https://www.callstack.com/podcasts/react-native-for-apple-vision-pro-and-visionos</p><p>&nbsp;</p><p>原文链接：<a href=\"https://thenewstack.io/react-native-fork-supports-development-on-apple-vision-pro/\">https://thenewstack.io/react-native-fork-supports-development-on-apple-vision-pro/</a>\"</p>",
    "publish_time": "2024-01-31 13:06:53",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Taylor Swift身陷不雅照风波：AI越强、Deepfakes越猖狂，微软和推特们无法推责",
    "url": "https://www.infoq.cn/article/TVspvQxKRBTdzYhMFFz5",
    "summary": "<p></p><p></p><blockquote>“他们没有认真对待我们的痛苦，所以现在我们有责任大规模举报这些人并让他们停职，”Taylor Swift Deepfakes 事件中参与平台举报的一位女性称。在Swift粉丝看来，平台上图片的消失是粉丝举报的结果，推特没有作为。同时，国外各大技术媒体也对“涉嫌”提供制作工具的微软表达了指责，技术开发商承诺的“安全”，似乎还差得远。</blockquote><p></p><p>&nbsp;</p><p>想象一下，你醒来发现有人在未经你同意的情况下制作了关于你的虚假不雅内容，而且它还在互联网上广泛流传……这样的事情就被流行乐巨星Taylor Swift遇上了。</p><p>&nbsp;</p><p>上周三，未经同意的Taylor Swift 的露骨深度Deepfakes在 X 上疯传，在发布这些图像的账户被暂停之前的 19 小时内，获得了超过 2700 万次观看和超过 26 万个点赞。由于内容过于露骨，这里就不展示涉事原图了。</p><p>&nbsp;</p><p>X 上描绘 Swift 裸体场景的 Deepfakes 内容继续激增，其中包括病毒式传播的 Deepfakes 图像，后来甚至获得了高达千万级别的浏览量。图像上的水印表明它们来自一个已有多年历史的网站，该网站以发布假冒名人裸照而闻名。该网站的一部分标题为“AI Deepfakes”。</p><p>&nbsp;</p><p>上周四，话题标签 #ProtectTaylorSwift 开始在 X 上流行。这些图像首先上传到 Telegram，随后迅速在社交媒体上转发，浏览量达数百万次，并且在某些平台上尚未被删除。</p><p>&nbsp;</p><p>作为回应，X 似乎在图像出现几天后禁止了对 Swift 名字的搜索，但在过去两年里削减了三分之一的内容审核员之后&nbsp;，这种努力太少、太晚了。</p><p>&nbsp;</p><p></p><h2>涉事其中的微软和X</h2><p></p><p>&nbsp;</p><p>这种未经当事人同意的疯狂行径，再次将AI Deepfakes问题推上了风口浪尖。其实在此次事件之前，人们就已经开始对网上流传的Deepfakes素人色情制品表达担忧。如今巨星Taylor Swift也被拖入泥潭，瞬间彻底引爆整个舆论场，而微软也被牵涉其中。</p><p>&nbsp;</p><p>404 Media的<a href=\"https://www.404media.co/ai-generated-taylor-swift-porn-twitter/\">报告表明，</a>\"那些图片来自基于 Telegram 的非自愿色情制作社区，该社区建议使用 Microsoft Designer 图像生成器。设计师理论上拒绝生成名人的图像，但人工智能生成器很<a href=\"https://www.theverge.com/2023/10/5/23905311/microsoft-bing-dalle3-generative-ai-images-twin-towers\">容易被欺骗</a>\"，可以通过对提示进行小的调整来打破规则。虽然这并不能证明 Designer 被用于 Swift 图片，但这是 Microsoft 可以解决的技术缺陷。</p><p>&nbsp;</p><p>微软首席执行官Satya Nadella对此做出了回应。Satya 称未经同意的模拟裸体的泛滥“令人震惊和可怕”，并表示，“保障网络世界的安全性对每个人都有好处。因此，我想没人愿意接受一个内容创作者和内容消费者都缺乏安全保障的网络环境。我们有必要以此事为契机迅速采取行动。”</p><p>&nbsp;</p><p>Satya称，已经成功地解决了漏洞，但回应中对具体技术问题的提及很少：</p><p>&nbsp;</p><p>“我们需要在技术周围设置护栏，以确保生产出更多安全的内容。目前有很多工作正在进行中，但仍有更多事情需要我们去做。但这是全球社会需要在某些规范上达成共识，特别是当法律、执法和技术平台能够紧密结合时，人类有能力管理比自认为要多得多的问题。”</p><p>&nbsp;</p><p>微软人工智能工程主管 Sarah Bird 证实称，“我们正在继续调查这些图像，并加强现有的安全系统，进一步防止我们的服务被滥用于生成类似的图像。”</p><p>&nbsp;</p><p>对于马斯克的X，虽然其已禁止可能对特定人群造成伤害的行为，但在解决平台上的露骨色情Deepfakes问题上却行动迟缓，甚至并未解决。</p><p>&nbsp;</p><p>1 月初，一位 17 岁的漫威明星<a href=\"https://www.nbcnews.com/tech/misinformation/teen-marvel-star-xochitl-gomez-speaks-deepfake-rcna134753\">公开表示</a>\"，她在 X 上发现了自己的露骨色情Deepfakes，但无法将其删除。2023 年 6 月，该平台上还流传着未经同意的 TikTok 明星露骨色情Deepfakes，在联系 X 征求意见后，仅删除了部分材料。</p><p>&nbsp;</p><p>随着AI技术变得更加复杂和普遍，这个问题似乎每年都变得更加严重。</p><p>&nbsp;</p><p><a href=\"https://regmedia.co.uk/2019/10/08/deepfake_report.pdf\">Deeptrace Labs 2019 年 9 月的</a>\"一份报告发现，未经同意的 Deepfakes 色情内容占所有在线 Deepfakes 视频的 96%。 2023 年 10 月，<a href=\"https://www.wired.com/story/deepfake-porn-is-out-of-control/\">《连线》</a>\"分享了一位匿名独立研究人员的调查结果，该研究发现 2023 年前 9 个月，有 113,000 个 Deepfakes 视频被上传到最受欢迎的 Deepfakes 色情网站，比 2022 年全年上传的 73,000 个大幅增加。</p><p></p><h2>“消失”的监管</h2><p></p><p>&nbsp;</p><p>不少“霉粉”在举报这些不当图像之余，也纷纷表达了对于法律监管缺失的失望之情。</p><p>&nbsp;</p><p>美国白宫新闻秘书Karine Jean-Pierre宣称国会“应采取立法行动”以杜绝伪造的不适宜工作场所（NFSW）图像。她在接受ABC新闻采访时表示，“我们对……此次色情图像广泛传播的报道感到震惊——更确切地说，应该叫伪造图像。”</p><p>&nbsp;</p><p>与此同时，Jean-Pierre还敦促包括X在内的各社交媒体应用删除这些图像，防止不当内容在网络上进一步扩散。她补充道，“虽然社交媒体公司在内容管理方面拥有独立的决策权，但我们相信，他们可以、也应当在执行管控规则、防止错误信息及未经本人同意的敏感图像传播等方面发挥重要作用。”</p><p>&nbsp;</p><p>本月早些时候，美国众议院议员Joe Morelle（纽约州民主党人）和Tom Kean（新泽西州共和党人）重新提出了《防止敏感图像Deepfakes法案》。该法案旨在将生成和传播未经本人同意的露骨图像定性为刑事犯罪，且最高可判处十年监禁。</p><p>&nbsp;</p><p>Dorota本人就是Deepfakes色情图像的受害者，并因无法阻止不当内容的传播而深感痛苦。</p><p>Francesca在发言中强调，“虽然我还年轻，但我的声音仍然充满力量。面对这样的事态，我绝不可能保持沉默。我们必须勇敢表达立场，反抗我们面临的不公。这件事已经对我本人和我的同学造成严重影响，我不会双手一摊、假装无事发生。”</p><p>&nbsp;</p><p>“我在这里强烈呼吁推动变革，为立法而战，这样才能避免更多人像去年10月20号的我那样深陷迷茫和无助。我们的声音就是我们的武器，我和妈妈要求建立一个更安全的网络世界——这不只是要存留公义和希望，更是为了改善大家身处的现实环境。”</p><p>&nbsp;</p><p>该法案已经于2023年被提交给国会，随后由众议院司法委员会接手，但当时并未采取任何行动。</p><p>&nbsp;</p><p></p><h2>我们可以做哪些事</h2><p></p><p>&nbsp;</p><p>我们并非没有对抗现实的武器，新的工具和法律有望遏止这类不当图像，并帮助我们有效追究肇事者的责任。</p><p>&nbsp;</p><p></p><h4>水印</h4><p></p><p>&nbsp;</p><p>社交媒体平台会筛选上传到其网站上的帖子，并删除其中有违政策的内容。但从X上传播的Swift视频来看，整个管控过程其实不够完整，可能漏掉大量有害内容。此外，如何区分真实内容与AI生成内容也是个重大难题。</p><p>&nbsp;</p><p>作为一种可行的技术解决方案，水印能够在图像中隐藏某些不可见信号，帮助计算机识别内容是否由AI生成。例如，谷歌就开发出名为SynthID的系统，该系统利用神经网络修改图像中的像素点，借此添加人眼无法察觉的水印。即使图像经过进一步编辑或截屏，该标记仍可被正确检测。理论上，这些工具能够帮助企业改进内容审核能力，更快发现包括未经同意Deepfakes图像在内的各类伪造内容。</p><p>&nbsp;</p><p>这种方式的优点是：水印的实用性很强，有助于轻松、快速识别AI生成的内容，据此发现被删除的有毒帖子。Hugging Face研究员Sasha Luccioni曾对AI系统中的偏见问题进行过系统研究，她表示默认在所有图像中包含水印，能够有效遏制不良分子生成Deepfakes内容的行为。</p><p>&nbsp;</p><p>不足则是：这类系统仍处于实验阶段，尚未得到广泛使用。顽固的恶意人士也能找到回避水印的手段。相关企业并没有将水印技术应用于全部AI生成图像。例如，谷歌Imagen AI图像生成器的用户可以自主选择是否在AI生成图像中添加水印。种种现实因素，无疑限制了水印技术在打击Deepfakes色情内容方面的作用。</p><p></p><h4>隐形护罩</h4><p></p><p>&nbsp;</p><p>目前，互联网上现存的一切图像都可能被用于生成Deepfakes内容。而随着新型图像生成AI系统复杂度的提升和效果的持续改善，我们其实越来越难以分辨什么是真、什么是假。</p><p>&nbsp;</p><p>但各种新型防护工具正尝试修改图像，扰乱AI系统对内容的理解和处理，从而保护个人免受Deepfakes伪造技术的侵扰。</p><p>&nbsp;</p><p>以麻省理工学院研究人员开发的PhotoGuard工具为例，它就像是一层隐形护罩，能够以人眼不可见的方式改变照片中的像素。而一旦有人使用Stable Diffusion等AI图像生成器处理这些经PhotoGuard修改的图像，将无法得到预期中的输出结果。</p><p>&nbsp;</p><p>芝加哥大学研究人员开发的Fawkes也属于同类工具，它会使用隐藏信号保护图像内容，保证人脸识别软件难以识别图像中的人脸。</p><p>&nbsp;</p><p>另一款新型工具名为Nightshade，同样可以保护人们免遭AI系统的影响。该工具也是由芝加哥大学研究人员开发，能够为图像添加看不见的“毒化”层。这款工具是为了保护受版权保护的艺术图像免受科技企业在未经创作者同意下的窃取和使用而开发的。但从理论上讲，这项技术也能帮助所有者的任何图像免受AI系统的戕害。一旦科技企业未经所有者同意从网上获取训练素材时，这些有毒图像将破坏AI模型，例如导致其将小猫、甚至是Taylor Swift的图像识别为小狗。</p><p>&nbsp;</p><p>这种方式的优点是：这些工具能够提高恶意人士利用网络图像生成有害内容的难度。Ajder表示，相关技术在个人防止AI图像滥用方面带来了希望，普及之后将大大增强约会应用和社交媒体公司对伪造内容的监管力度。</p><p>&nbsp;</p><p>不足则是：这类护罩虽适用于最新一代AI模型，但无法保证在后续模型版本中继续稳定起效。另外，它们并不适用于已经存在于网络上的图像，更无法保护随处可见的名人素材，毕竟名人们无法控制自己的哪些照片会被传播到网上。</p><p>&nbsp;</p><p>“这将掀起一场旷日持久的技术军备竞赛。”道德AI咨询与审计公司Parity Consulting创始人Rumman Chowdhury表示。&nbsp;</p><p></p><h4>政策监管</h4><p></p><p>&nbsp;</p><p>技术修复的力量是有限的，颠覆性的深远变化终究离不开严格监管的加持。</p><p>&nbsp;</p><p>Taylor Swift的Deepfakes事件不仅引发广泛关注，也给打击此类恶意行为注入了新的动力。美国白宫方面表示此次事件“令人震惊”，并敦促国会采取立法行动。</p><p>&nbsp;</p><p>截至目前，美国仍然在以各州为单位分别出台监管法规。例如，加利福尼亚州和弗吉尼亚州已经禁止未经本人同意生成Deepfakes图像，纽约州和弗吉尼亚州还禁止传播此类内容。美国国会最近重新提出一项新的两党法案，要求将传播伪造裸照定性为刑事犯罪。新泽西州一所高中的Deepfakes丑闻也曾敦促立法者认真对待《防止敏感图像Deepfakes法案》。此番Swift事件引发的广泛关注，或将为法案吸引到更多来自两党的支持力量。</p><p>&nbsp;</p><p>世界各地的立法机构正纷纷推动对Deepfakes技术的严格管控。英国去年通过的《在线安全法案》就禁止传播Deepfakes色情内容，但并未禁止相关创作。传播者可能面临最高六个月的监禁。</p><p>&nbsp;</p><p>在欧盟方面，一系列新法案也尝试从不同角度解决这个难题。全面的《人工智能法案》要求Deepfakes创作者应明确披露相关素材是由AI生成，而《数字服务常规赛》则要求科技企业加快有害内容的删除速度。</p><p>&nbsp;</p><p>中国在2023年生效的Deepfakes立法方面走得最远。在中国，Deepfakes创作者须负责采取措施以防止其服务用于非法或有害目的，且在制作Deepfakes内容前必须征求用户同意、验证真实身份，并将输出的内容标记为AI生成。</p><p>&nbsp;</p><p>这种方式的优点：监管机构将为受害者提供追索权，对未经同意制作和传播Deepfakes色情内容者追究责任，由此构成强大的威慑力。相关立法还发出了明确信号，即未经当事人同意制作Deepfakes属于违法行为。</p><p>&nbsp;</p><p>Ajder指出，随着法律和公众认知广泛将制作Deepfakes色情内容视为性犯罪活动，真正的转机也将由此出现。“这将改变一些人对此类内容的冷漠态度，打破内容无害或者不属于实际性虐待形式的错误认知。”</p><p>&nbsp;</p><p>有不足则是：此类法律的执行难度很高。从目前的技术形式来看，受害者仍很难揪出始作俑者并对其提起诉讼。另外，Deepfakes的实际制作者很可能身处不同司法管辖区，这也会进一步加大起诉难度。</p><p>&nbsp;</p><p></p><h2>结束语</h2><p></p><p>&nbsp;</p><p>Deepfakes并非新鲜事物，多年之前就已相当猖獗。然而，生成式AI技术的兴起，正在不断降低利用AI生成图像和视频制作Deepfakes色情及性骚扰内容的门槛。</p><p>&nbsp;</p><p>专门研究生成式AI与合成媒体的AI专家Henry Ajder表示，在与生成式AI相关的所有恶意行为当中，在非自愿情况下受Deepfakes影响的人数最多，而且女性在其中占极高比例。</p><p>&nbsp;</p><p>针对Deepfakes的解决方案通常侧重于区分“真”和“假”，但对于大多数受害者来说，这没有帮助：无论哪种方式，许多受害者都表示感觉自己受到了侵犯。抑郁、性创伤和创伤后应激障碍是受害者的常见经历，他们很难在心理上感到安全。</p><p>&nbsp;</p><p>因此，“技术向善”、“不作恶”是开发者、技术使用者共同的责任。</p><p>&nbsp;</p><p>&nbsp;</p><p>相关链接：</p><p><a href=\"https://www.technologyreview.com/2024/01/29/1087325/three-ways-we-can-fight-deepfake-porn-taylors-version/\">https://www.technologyreview.com/2024/01/29/1087325/three-ways-we-can-fight-Deepfakes-porn-taylors-version/</a>\"</p><p><a href=\"https://www.theregister.com/2024/01/30/nudes_taylor_swift_action/?td=rt-3a\">https://www.theregister.com/2024/01/30/nudes_taylor_swift_action/?td=rt-3a</a>\"</p><p><a href=\"https://www.theverge.com/2024/1/26/24052196/satya-nadella-microsoft-ai-taylor-swift-fakes-response\">https://www.theverge.com/2024/1/26/24052196/satya-nadella-microsoft-ai-taylor-swift-fakes-response</a>\"</p>",
    "publish_time": "2024-01-31 14:42:20",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "中国软件技术发展洞察和趋势预测报告2024",
    "url": "https://www.infoq.cn/article/YcyRCPwj38Upvdj4qVmx",
    "summary": "<h3>研究背景</h3>\n<p>2023年，大模型与生成式AI的崛起无疑成为了技术领域的焦点。在这一年里，大模型和生成式AI的讨论持续“破圈”，各类商用大模型和开源大模型的发布和更新将技术创新推向了新的高峰，相关产品不断发布。<br />\n然而，AI领域的巨大变革外，其他数字技术也在助力实体经济的道路上稳步迈进。5G、数据资产、云计算、数字孪生等技术正融入工业互联网的各个环节，产品设计、资源勘探、生产制造、设备管理、安全生产各个环节之间也日益融合。5G工厂、双跨平台等工业互联网建设成果不断累积和爆发。<br />\n在此背景下，InfoQ研究中心从人工智能新纪元和以数强实稳根基两大篇章，从数据定量和公开资料、专家访谈定性的角度，深入回顾2023年技术市场的重大进展和演进，并以此为基础，探究2024年技术发展的未来方向。<br />\n我们期望，在这个VUCA时代，这份报告能够帮助各位开发者、科技领导者以及各类对技术领域感兴趣的读者朋友，把握未来技术发展的脉络。InfoQ研究中心也将继续以专业、客观和持续的报告产出，同大家一起见证技术发展的每一个重要时刻。</p>\n<h4>数据来源</h4>\n<p><img alt=\"\" src=\"https://static001.infoq.cn/resource/image/80/68/80ece3203d3b06ff613f0c289d802e68.jpg\" /></p>\n<h4>2024年技术成熟度评估曲线</h4>\n<p><img alt=\"\" src=\"https://static001.infoq.cn/resource/image/51/d7/51c342704909de7d31fed9b361a9cdd7.jpg\" /></p>\n<h3>2024年技术发展十大趋势</h3>\n<ul>\n<li>趋势一：人工智能浪潮引领基础设施新必然——算力军备竞赛继续</li>\n<li>趋势二：人工智能浪潮引领基础设施新必然——数据库升级</li>\n<li>趋势三：大模型激战——国内场景争夺战打响，应用试炼拉开序幕</li>\n<li>趋势四：端侧AI序曲——优先改造原有终端，AI原生终端崭露头角</li>\n<li>趋势五：端侧AI智能大脑探索——多模态大模型与硬件躯体的协同进化</li>\n<li>趋势六：云 for AI 新阶段——支撑数字化 Ready for AI</li>\n<li>趋势七：云成本优化——云计算成本控制解决方案日益成熟</li>\n<li>趋势八：AI开发者版图形成——大模型层短期聚能效应明显</li>\n<li>趋势九：开发者概念泛化——编程与应用开发能力新天地</li>\n<li>趋势十：数字化转型企业类型下钻——转型成果向中小企业普及</li>\n</ul>\n<h3>报告专家团</h3>\n<ul>\n<li>蔡超 汇量科技 Mobvista 技术 VP 兼首席架构师</li>\n<li>董晓聪 作业帮 基础架构 负责人</li>\n<li>冯嘉 分布式基础软件领域资深专家，现任华为云中间件首席专家，部门负责人</li>\n<li>郭炜 白鲸开源 CEO，Apache&nbsp;Software&nbsp;Foundation&nbsp;Member</li>\n<li>胡宗星 九章云极 DataCanvas 高级产品总监</li>\n<li>蒋林泉 阿里云CIO&amp;aliyun.com负责人</li>\n<li>李洁 北京阿哇科技 创始人</li>\n<li>李飞 数势科技AI负责人</li>\n<li>刘道儒 星汉未来CEO</li>\n<li>刘东 网易杭州研究院 人工智能专家，AI 算法团队负责人</li>\n<li>刘松 PingCAP 副总裁</li>\n<li>芦宇峰（肉山）小电科技 董事兼VP，TGO鲲鹏会（杭州）董事会成员</li>\n<li>孙百冬 中国石油昆仑数智&nbsp;数字化咨询中心副主任&nbsp;油气数字化转型资深专家</li>\n<li>吴晟 Tetrate 创始工程师，Apache SkyWalking创始人</li>\n<li>宜博 大模型农场 LLMFarm 创始人，&nbsp;TGO&nbsp;鲲鹏会（北京）董事会成员</li>\n<li>张文举 人工智能领域专家</li>\n<li>Fabarta技术团队</li>\n</ul>",
    "publish_time": "2024-01-31 12:53:26",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "2023年，GenAI工具成为赌注",
    "url": "https://www.infoq.cn/article/uKgQIZksvpT1rkLPi4Hq",
    "summary": "<p>本文最初发布于The New Stack。</p><p></p><p></p><blockquote>2023年是GenAI帮助开发者开发应用的突破之年。工具创建者设法在开发人员最常从事的工作中满足他们。</blockquote><p></p><p>&nbsp;</p><p><a href=\"https://www.eweek.com/development/ibm-watson-provides-self-service-ai-for-developers/\">很长一段时间以来</a>\"，我一直想知道<a href=\"https://thenewstack.io/ai/\">AI</a>\"如何才能更好地帮助软件开发人员完成他们的工作。在软件开发领域，2023年是人工智能的关键一年，像<a href=\"https://thenewstack.io/github-copilot-a-powerful-controversial-autocomplete-for-developers/\">GitHub Copilot</a>\"这样的工具不断发展，帮助开发人员构建应用程序。</p><p>&nbsp;</p><p>至少十年来，我会时不时地向我的技术伙伴Grady Booch提出这个问题。他是<a href=\"https://www.ibm.com/?utm_content=inline-mention\">IBM</a>\"研究院软件工程首席科学家，并且是一名IBM杰出研究人员（IBM Fellow）。早些时候，他说他相信人工智能会在<a href=\"https://thenewstack.io/software-development/\">软件开发</a>\"中发挥作用，但他对应用的程度持怀疑态度。</p><p>&nbsp;</p><p>他一直这么认为。去年年底，Booch在Twitter（现在的X）上与Replit首席执行官<a href=\"https://www.linkedin.com/in/amjadmasad/\">Amjad Masad</a>\"就人工智能能给开发者带来什么进行了<a href=\"https://twitter.com/Grady_Booch/status/1595878463298105344\">激烈的辩论</a>\"。Masad写道，随着人工智能模型的发展，在某个时候，“世界上的每个人都将至少拥<a href=\"https://twitter.com/amasad/status/1595557798850461702?lang=en\">有John carmack级别的软件能力</a>\"。”<a href=\"https://twitter.com/ID_AA_Carmack\">Carmack</a>\"是一位著名的游戏开发者(《毁灭战士》和其他游戏的共同创建者）和AR/VR专家，曾担任Oculus VR的首席技术官，并在<a href=\"https://about.meta.com/?utm_content=inline-mention\">Meta</a>\"收购Oculus后担任顾问CTO。</p><p>&nbsp;</p><p>我们离那一步还远着呢。但就<a href=\"https://thenewstack.io/how-generative-ai-can-increase-developer-productivity-now/\">对开发人员生产力的提升</a>\"而言，2023年已经证明了人工智能的巨大作用。</p><p>&nbsp;</p><p>“对于人工智能辅助编码和软件开发来说，2023年确实是具有开创性的一年，”Omdia应用智能首席分析师<a href=\"https://www.linkedin.com/in/lianjye/?originalSubdomain=sg\">Lian Jye Su</a>\"在给The New Stack的电子邮件中表示，“Copilot和其他生成式人工智能工具在作为开发工具使用时，已经展示了很高的准确性、自动化程度，最重要的是，灵活性。开发人员可以使用自然语言来表达他们的意图，并专注于创造和评价方面，因为工具会处理那些单调枯燥的部分。</p><p>&nbsp;</p><p>“因此，有一些开发人员使用这些工具生成了近40%的代码。除了Copilot，其他关键工具还包括OpenAI Codex、Replit、<a href=\"https://www.tabnine.com/?utm_content=inline-mention\">Tabnine</a>\"、Codacy和Durable。”</p><p>&nbsp;</p><p>最近，JetBrains的一项关于<a href=\"https://thenewstack.io/jetbrains-developer-survey-tracks-rapid-adoption-of-ai-chatgpt/\">开发者生态系统现状</a>\"的<a href=\"https://blog.jetbrains.com/team/2023/11/20/the-state-of-developer-ecosystem-2023/\">研究</a>\"表明，如果有机会，56%的受访者会<a href=\"https://www.jetbrains.com/lp/devecosystem-2023/ai/#ai_delegate_activities\">让人工智能助手编写代码注释和文档</a>\"。</p><p></p><h2>Copilot的演进</h2><p></p><p></p><p>与此同时，46%的受访者表示他们<a href=\"https://www.jetbrains.com/lp/devecosystem-2023/ai/#ai_tools_experience\">使用Copilot</a>\"。</p><p>&nbsp;</p><p>GitHub于2022年6月推出了代码自动补全/结对编程工具Copilot。GitHub首席产品官<a href=\"https://www.linkedin.com/in/inbalshani/\">Inbal Shani</a>\"在接受The New Stack采访时表示，该网站目前拥有150多万用户。此外，她说，使用Copilot编写的新代码其比例已从35%增长到60%，预计未来几年将达到80-90%。</p><p>&nbsp;</p><p>Shani指出，像GitHub Copilot这样的人工智能开发工具正在大幅增长，并对软件开发产生了革命性影响，对生产力、质量和工作满意度也产生了积极的影响。</p><p>&nbsp;</p><p>开发人员对人工智能工具的采用呈指数级增长。根据GitHub的数据，92%的开发人员现在在工作中使用了某种形式的人工智能。这在很大程度上是因为GenAI模型的兴起推动了人工智能的民主化应用。</p><p>&nbsp;</p><p>现在，像GitHub Copilot这样的人工智能辅助工具已经可以生成完整的代码块、代码说明、文档以及开发人员所提问题的答案。<a href=\"https://www.linkedin.com/in/amandaksilver/\">Amanda Silver</a>\"是<a href=\"https://news.microsoft.com/?utm_content=inline-mention\">微软开发部门</a>\"的副总裁，负责产品、设计、用户研究和工程系统。他在接受The New Stack视频采访时表示，这有助于新的开发人员更快地参与到开发中来。</p><p>&nbsp;</p><p>此外，Copilot还可以优化和重构代码、排除问题、提出安全修复建议、辅助调试等等，这使得开发人员不需要在这些领域有很深入的专业知识。</p><p>&nbsp;</p><p>在微软内部，工程师们在构建自己的产品时会对Copilot的功能做“内部测试（<a href=\"https://thenewstack.io/what-launchdarkly-learned-from-eating-its-own-dog-food/\">dogfood</a>\"）”，并向GitHub提供反馈以改进这项技术。Silver说，事实上，微软的工程师们在使用Copilot执行大规模的内部系统迁移，这也有助于测试它的批量重构能力。</p><p></p><h2>CodeWhisperer</h2><p></p><p></p><p>去年，亚马逊也推出了Copilot的竞争对手<a href=\"https://aws.amazon.com/blogs/machine-learning/introducing-amazon-codewhisperer-the-ml-powered-coding-companion/\">CodeWhisperer</a>\"，就像Copilot和其他工具一样，到2023年，它才成为一款可供日常使用的工具。<a href=\"https://aws.amazon.com/codewhisperer\">Amazon CodeWhisperer</a>\"是一种<a href=\"https://thenewstack.io/the-ultimate-guide-to-machine-learning-frameworks/\">机器学习（ML）</a>\"驱动的服务，它可以基于开发人员之前的注释和代码提供代码建议，帮助提高开发人员的生产力。</p><p>&nbsp;</p><p><a href=\"https://aws.amazon.com/?utm_content=inline-mention\">Amazon Web Services</a>\"在生成式人工智能方面表现出色，它已经推出了CodeWhisperer（正式发布）、<a href=\"https://aws.amazon.com/bedrock/\">Bedrock</a>\"（用于构建自定义人工智能应用）以及<a href=\"https://aws.amazon.com/about-aws/whats-new/2023/11/partyrock-amazon-bedrock-playground/\">PartyRock</a>\"（用于无代码人工智能应用构建，目前处于预览阶段）。在去年秋末的re:Invent大会上，该公司还发布了一款名为<a href=\"https://thenewstack.io/amazon-q-a-genai-to-understand-aws-and-your-business-docs/\">Amazon Q</a>\"的GenAI助手，专用于工作场合，可以根据组织的业务进行定制。</p><p>&nbsp;</p><p><a href=\"https://www.linkedin.com/in/dseven/\">Doug Seven</a>\"是亚马逊软件开发总监、Amazon CodeWhisperer和<a href=\"https://aws.amazon.com/q/\">Amazon Q</a>\"的总经理。他在接受The New Stack采访时表示，根据亚马逊的研究，CodeWhisperer将开发人员的生产力提高了50%至60%，而像自定义这样的功能进一步提高了生产力。</p><p>&nbsp;</p><p>Seven表示：“从针对人工智能工作负载优化芯片到利用人工智能的开发工具，亚马逊在人工智能领域很有竞争力。”</p><p></p><h2>GenAI工具概览</h2><p></p><p></p><p>直到2023年，在整个数字计算的历史中，编程的核心活动一直是人类编写代码行。人工智能工具的出现增强了这种能力，但人类编码一直是核心。</p><p>&nbsp;</p><p>这种情况现在已经变了。Intellyx分析师<a href=\"https://www.linkedin.com/in/jasonbloomberg/\">Jason Bloomberg</a>\"在发给The New Stack的电子邮件中说：“今天，不断发展的核心编程活动是让人工智能（主要是生成式人工智能和神经网络）创建应用程序。人类不再编码，而是创建和管理训练人工智能的模型和数据集。”</p><p>&nbsp;</p><p>当然，手工编码还会存在，但Bloomberg表示，他认为手工编码已经退居次要地位。他说：“任何组织、供应商或企业，如果没有意识到这一点，就注定会失去竞争力，最终变得无足轻重。”</p><p>&nbsp;</p><p>事实上，正如GitHub的Shani所说，“人工智能现在成了软件开发的筹码。”GitHub希望他们的工具可以覆盖软件开发生命周期（SDLC）的更多部分。</p><p>&nbsp;</p><p>Gartner分析师<a href=\"https://www.linkedin.com/in/thomasmurphy4/\">Thomas Murphy</a>\"在电子邮件中表示：“显然，Copilot在上市时间和销量方面取得了先机，但Tabnine、CodeStory、Codium等其他工具也都在扩展GenAI的空间。”他说，除了AWS和谷歌，<a href=\"https://about.gitlab.com/?utm_content=inline-mention\">GitLab</a>\"和Atlassian等云提供商也在进军代码生成领域，并为SDLC提供更广泛的人工智能辅助功能。</p><p>&nbsp;</p><p><a href=\"https://www.jetbrains.com/\">JetBrains</a>\"也是一个杰出的开发工具制造商。他们一直在构建自己的AI助手特性，并在其最新的产品更新中发布。他们的工作重心在其旗舰产品<a href=\"https://thenewstack.io/jetbrains-formulates-ide-go-called-gogland/\">IntelliJ IDEA</a>\"集成开发环境（IDE）上。他们新推出的<a href=\"https://thenewstack.io/jetbrains-launches-new-ai-assistant-powered-by-multiple-llms/\">AI助手</a>\"插件引入了不同的功能——它可以“在更高、更抽象的层面上提供代码重构建议，而不仅仅是修复特定的模式，”JetBrains开发大使<a href=\"https://www.linkedin.com/in/mtellis/?originalSubdomain=uk\">Matt Ellis</a>\"告诉The New Stack。</p><p>&nbsp;</p><p>Ellis说，未来，他们希望改进这款助手，使其“更智能”——这样它就可以利用现有的内部代码索引和元数据更好地理解代码上下文，并探索其模型的企业托管选项。</p><p>&nbsp;</p><p><a href=\"https://thenewstack.io/appmap-releases-runtime-code-review-as-a-github-action/\">AppMap</a>\"首席执行官<a href=\"https://www.linkedin.com/in/elizabethlawler/\">Elizabeth Lawler</a>\"告诉The New Stack：“像Copilot这样的工具擅长于提供局部代码建议，但不了解应用程序背景。新玩家可以整合可观察性数据、架构信息等，提高建议的准确性。”</p><p>&nbsp;</p><p>然而，2023年已经使人工智能基础设施和模型的使用变得足够简单，现在，即使是比较小的公司也可以利用可定制的人工智能。Lawler指出，这将催生新的增值服务。此外，她补充说，人工智能生成的代码仍然存在质量问题，但它会要求开发人员必须认真评估这些建议。</p><p>&nbsp;</p><p>与此同时，从风险投资的角度来看，<a href=\"https://www.differential.vc/\">Differential Ventures</a>\"创始人兼管理合伙人<a href=\"https://www.linkedin.com/in/nickadams11/\">Nick Adams</a>\"表示，有些公司的业务分析师经常会编写重复的查询以提取数据，对于这些公司来说，利用GenAI来协助业务分析师是一个机会。</p><p>&nbsp;</p><p>Adams告诉The New Stack：“人工智能工具可以从业务用户那里获得自然语言问题，然后帮助生成SQL或Python查询，并允许分析师改进代码。这可以加快这个过程，避免每次都从头开始编写查询。”</p><p>&nbsp;</p><p>他指出，迁移像<a href=\"https://thenewstack.io/u-s-unemployment-surge-highlights-dire-need-for-cobol-skills/\">COBOL</a>\"这样的遗留代码也是一个机会。IBM在将旧的COBOL代码迁移到Java时就利用了watsonx的GenAI功能。</p><p>&nbsp;</p><p>Adams说：“许多老系统都是由即将退休的开发人员编写的。电气工程领域也有许多即将退休的专家，他们几十年来积累的知识需要通过现代工具和培训传递给下一代。”</p><p></p><h2>GenAI与低代码</h2><p></p><p></p><p>我曾经认为GenAI会以某种方式涵盖<a href=\"https://thenewstack.io/low-code-vs-no-code/\">低代码、无代码开发</a>\"，但<a href=\"https://thenewstack.io/pega-infinity-23-advances-low-code-application-development/\">Pegasystems</a>\"首席技术官和产品营销副总裁Don Schuerman让我看清了现实。</p><p>&nbsp;</p><p>GenAI对软件行业产生了重大影响，包括低代码平台，因为自动生成代码的工具可能会扰乱低端市场。</p><p>&nbsp;</p><p>Schuerman告诉The New Stack，“然而，企业级低代码更关注架构、集成、<a href=\"https://thenewstack.io/devops/\">DevOps</a>\"、<a href=\"https://thenewstack.io/security/\">安全性</a>\"、可重用性等。这种复杂性可不仅仅是生成代码片段”。</p><p>&nbsp;</p><p>Pegasystems正在使用GenAI自动生成低代码工件以加速开发，如标准工作流模板、测试数据、过程文档、数据映射等。</p><p>&nbsp;</p><p>来自亚马逊的Seven表示，CodeWhisperer帮助使用IDE进行开发的专业开发人员，而Party Rock则针对其他群体（如主题专家）用很少的代码或不用代码来构建应用程序。</p><p>&nbsp;</p><p>他说：“我不认为GenAI会让低代码、无代码过时。我认为它将使低代码变得更好。”</p><p>&nbsp;</p><p>在谈到人工智能是否会取代开发人员的问题时，Schuerman表示：“我不认为生成式人工智能会完全取代开发人员。它将通过完成一些初始工作及提供建议来提升他们的效率。无论如何，开发人员很少完全从头开始编写所有内容。”</p><p>&nbsp;</p><p>JetBrains的调查显示，60%的受访者认为<a href=\"https://thenewstack.io/how-will-generative-ai-change-the-tech-job-market/\">人工智能编码工具将从根本上改变就业市场</a>\"，51%的受访者认为这些工具将增加市场对专业软件开发人员的需求。然而，人们一致认为，人工智能永远不会完全取代开发人员编写代码的工作。</p><p></p><h2>Studio之年</h2><p></p><p></p><p>微软人工智能平台项目管理副总裁John Montgomery告诉The New Stack，去年11月，微软推出了<a href=\"https://azure.microsoft.com/en-us/products/ai-studio\">Azure AI Studio</a>\"预览版。这是一个新平台，旨在使拥有各种能力和偏好的开发人员能够利用人工智能进行创新，并以可靠的人工智能实践为基础，使用最新的人工智能工具和机器学习模型进行探索、构建、测试和部署。</p><p>&nbsp;</p><p>他说，“我们相信人工智能是终极放大器。这种向生成式人工智能的最新转变已经彻底改变了世界。它改变了应用程序的游戏规则。我已经在微软工作了25年；我从未见过客户如此迅速地接受一项技术。在不到一年的时间里，我们有超过1.8万名客户在用Azure OpenAI构建自己的东西。”</p><p>&nbsp;</p><p>他举例说，Instacart正借助<a href=\"https://thenewstack.io/dev-news-gpt-4-turbo-chrome-talks-pretty-and-worlds-merge/\">GPT-4 Turbo</a>\"&nbsp;with Vision使用户能够拍摄手写的购物清单，并在他们的应用程序中生成虚拟购物清单。</p><p>&nbsp;</p><p>Montgomery说道：“你可以将AI Studio视为生成式AI的终极工具包。它将恰当的模型、数据和可靠的人工智能系统结合在一起，这样客户就可以相信他们的解决方案是安全、可靠和可扩展的。”</p><p>&nbsp;</p><p>微软宣布支持自己最新的大型语言模型（LLM），以及来自<a href=\"https://thenewstack.io/beyond-chatgpt-exploring-the-openai-platform/\">OpenAI</a>\"、Meta、Nvidia、Mistral AI和<a href=\"https://thenewstack.io/how-hugging-face-positions-itself-in-the-open-llm-stack/\">Hugging Face</a>\"的最新模型。</p><p>&nbsp;</p><p>此外，该公司还宣布以Azure AI服务的形式推出Azure AI模型即服务。Montgomery说，“这将使客户更容易部署和运行尖端模型”。微软还推出了名为“<a href=\"https://learn.microsoft.com/en-us/azure/machine-learning/prompt-flow/overview-what-is-prompt-flow?view=azureml-api-2\">提示流</a>\"”的提示工程工具。提示流是一种先进的提示工程、评估和部署系统，是Azure AI Studio和Azure Machine Learning的关键组成部分。</p><p>&nbsp;</p><p>尽管OpenAI是这个领域的重要玩家，并且与微软有着密切的合作关系，但该公司的一位发言人告诉The New Stack，他们无法接受采访。</p><p>&nbsp;</p><p>与此同时，谷歌也不甘示弱，他们最近也发布了<a href=\"https://makersuite.google.com/\">Google AI Studio</a>\"。这是一个免费的工具，使开发人员能够快速开发提示，然后获取API密钥用于他们的应用开发。谷歌表示，该工具目前是有限免费使用，<a href=\"https://ai.google.dev/pricing\">未来的价格也将很有竞争力</a>\"。</p><p>&nbsp;</p><p>在新闻发布会上，谷歌实验室副总裁<a href=\"https://www.linkedin.com/in/joshwoodward/\">Josh Woodward</a>\"展示了如何用谷歌账户登录Google AI Studio，并使用每分钟允许60个请求的免费配额。Woodward还演示了如何通过简单地点击“Get Code”将开发人员的工作转移到他们选择的IDE中。</p><p>&nbsp;</p><p>谷歌Developer X和DevRel副总裁兼总经理<a href=\"https://io.google/2022/speakers/jeanine-banks/\">Jeanine Banks</a>\"在接受The New Stack采访时表示，在内部，谷歌一直在将其人工智能技术应用于代码补全、文档、聊天机器人等方面。她说，“在内部应用这项技术，确实让我们学到了很多东西，我们会把这些东西带回到产品中。”</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://thenewstack.io/generative-ai-in-2023-genai-tools-became-table-stakes/\">https://thenewstack.io/generative-ai-in-2023-genai-tools-became-table-stakes</a>\"</p>",
    "publish_time": "2024-01-31 15:01:58",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "原生 vs 跨端，聊聊鸿蒙应用开发的真实感受｜InfoQ《极客有约》",
    "url": "https://www.infoq.cn/article/MKCNpa5SPk3ucPLcdu8c",
    "summary": "<p>InfoQ 直播间特邀主持人曹立成携手特邀嘉宾宋浩波，付正宗，宗心，从原生开发、前端开发、跨端开发、跨语言开发、小程序开发等 5 个角度，分享鸿蒙应用开发最真实的体验！</p>",
    "publish_time": "2024-01-31 18:40:25",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]