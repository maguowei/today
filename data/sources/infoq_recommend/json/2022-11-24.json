[
  {
    "title": "Meta将百万行代码从Java移植到Kotlin",
    "url": "https://www.infoq.cn/article/aTY2ysTOjaEwUv9Hzls6",
    "summary": "<p>Meta一直在<a href=\"https://engineering.fb.com/2022/10/24/android/android-java-kotlin-migration/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjkxNjY4MzYsImZpbGVHVUlEIjoiOHFPMXJXMFVWNU1GYVI4aCIsImlhdCI6MTY2OTE2NjUzNiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.sCjTb5aVi_x1cnjBZ1jc4QWKIEUXgqkG1gYhh1RUxgE\">将他们的Android代码库从Java移植到Kotlin</a>\"。Meta的工程师Omer Strulovich解释说，在这个过程中，他们学到了许多有趣的经验教训，并积累了一些有用的方法。</p><p></p><p>Meta之所以决定采用Kotlin开发Android应用，是因为他们看到了<a href=\"https://www.infoq.cn/article/qt51vqATE7jf_bpw5ggJ\">Kotlin</a>\"相对于Java的优势，包括可空性和函数式编程支持、更简短的代码，以及创建特定领域语言的可能性。Kotlin工程师还清楚地知道，他们必须将尽可能多的Java代码库移植到Kotlin，以防止Java空指针问题潜入Kotlin代码库，并减少需要维护的Java代码。这不是一件容易的事，从一开始就需要做相当多的调研工作。</p><p></p><p>Meta工程师必须克服的第一个障碍是，Meta使用的几个内部优化工具无法与Kotlin正常兼容。例如，Meta必须更新<a href=\"https://github.com/facebook/redex?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjkxNjY4MzYsImZpbGVHVUlEIjoiOHFPMXJXMFVWNU1GYVI4aCIsImlhdCI6MTY2OTE2NjUzNiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.sCjTb5aVi_x1cnjBZ1jc4QWKIEUXgqkG1gYhh1RUxgE\">ReDex Android字节码优化器</a>\"和语法高亮显示工具Pygments的<a href=\"https://github.com/pygments/pygments/pull/1699?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjkxNjY4MzYsImZpbGVHVUlEIjoiOHFPMXJXMFVWNU1GYVI4aCIsImlhdCI6MTY2OTE2NjUzNiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.sCjTb5aVi_x1cnjBZ1jc4QWKIEUXgqkG1gYhh1RUxgE\">词法分析器组件</a>\"，并构建一个<a href=\"https://github.com/google/ksp?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjkxNjY4MzYsImZpbGVHVUlEIjoiOHFPMXJXMFVWNU1GYVI4aCIsImlhdCI6MTY2OTE2NjUzNiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.sCjTb5aVi_x1cnjBZ1jc4QWKIEUXgqkG1gYhh1RUxgE\">Kotlin符号处理（KSP）API</a>\"，用于创建Kotlin编译器插件。</p><p></p><p>在代码转换方面，Meta工程师选择使用Kotlin官方转换器J2K，它可以作为编译器插件使用。除了一些特定的框架（包括JUnit）之外，这种方法工作得非常好。但对于特定的框架，这个工具缺乏足够的知识，无法进行正确的转换。</p><p></p><p></p><blockquote>我们已经遇到了很多需要进行小修复的情况。有些很容易做到（比如替换isEmpty），有些需要做一些研究工作才能搞清楚（与JUnit规则的情况一样），还有一些是针对J2K本身的bug的变通方法，这些bug可能会导致出现任何问题——从构建时错误到运行时行为。</blockquote><p></p><p></p><p>处理这种情况的正确方法包括三个步骤：首先是准备好Java代码，然后在headless模式的Android Studio实例中自动运行J2K，最后对生成的文件进行后续处理，进行所有所需的重构和修复。Meta已经<a href=\"https://github.com/fbsamples/kotlin_ast_tools?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjkxNjY4MzYsImZpbGVHVUlEIjoiOHFPMXJXMFVWNU1GYVI4aCIsImlhdCI6MTY2OTE2NjUzNiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.sCjTb5aVi_x1cnjBZ1jc4QWKIEUXgqkG1gYhh1RUxgE\">开源</a>\"了许多重构工具，以帮助其他开发人员完成相同的任务。</p><p></p><p></p><blockquote>这些自动化转换过程并不能解决所有的问题，但我们能够优先解决最常见的问题。我们针对模块运行转换脚本（我们贴切地称之为Kotlinator），优先考虑活跃和简单的模块。然后我们观察生成的代码：它们可以通过编译吗？它们是否可以顺利通过我们的持续集成管道？如果可以，我们就提交它们。如果不可以，我们就研究问题，并设计新的自动重构过程来修复它们。</blockquote><p></p><p></p><p>Meta已经通过这种方式移植了超过1000万行Kotlin代码，让大多数的Meta Android工程师切换到<a href=\"https://www.infoq.cn/article/TaUjgp7HuFEXBcAu_rw8\">Kotlin</a>\"来完成他们的日常工作。这个过程也验证了许多预期的结果，包括更短的生成代码和不变的执行速度。但是，从消极的方面来看，Kotlin编译器比Java编译器慢得多。使用KSP来处理注解，改进Java存根生成和编译时间，这为优化带来了新的可能性，不过仍然需要持续的努力。</p><p></p><p>如果你对完整的细节感兴趣，请不要错过Meta的这篇关于迁移到Kotlin的文章。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/11/meta-port-java-kotlin/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjkxNjY4MzYsImZpbGVHVUlEIjoiOHFPMXJXMFVWNU1GYVI4aCIsImlhdCI6MTY2OTE2NjUzNiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.sCjTb5aVi_x1cnjBZ1jc4QWKIEUXgqkG1gYhh1RUxgE\">https://www.infoq.com/news/2022/11/meta-port-java-kotlin/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/lOCkY3lV2ADRvXcsZEb2\">Kotlin&nbsp;Multiplatform Mobile 进入 Beta 测试</a>\"</p>",
    "publish_time": "2022-11-24 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]