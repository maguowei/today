[
  {
    "title": "加速数字化转型：深度解析API成熟度模型",
    "url": "https://www.infoq.cn/article/IeNEgLeqmfLxzdjYeg4x",
    "summary": "<p>如果数字化转型得当，可以影响一个组织的各个方面。然而，API成熟度成为数字化转型需要解决的一个常见的问题。API是推动业务增长的桥梁，但随着API被广泛使用，可能会出现API蔓延。在解决日常业务问题的过程中，没有计划和管理的API激增会导致API蔓延。API蔓延说明有大量的API正在被创建，部署API的分布式基础设施也在发生物理扩散。</p><p></p><p>公司看到他们的API正以前所未有的速度在全球范围内蔓延。对于希望在分布式基础设施之间保持高质量和卓越体验的组织来说，API蔓延给他们带来了一个独特的挑战。</p><p></p><p>管理大规模的API需要自上而下的监督，它还需要一种实用的方法，并从旨在统一API的API程序计划开始。程序应该将API打包成产品或服务来推动API的采用，并促进对其整个生命周期的管理。问题在于，创建一个可行的程序来管理API成熟度是一个缓慢的过程。</p><p></p><p>本文将为构建成熟的API计划提供一个框架，这个框架使用了一个可以促进API驱动业务演化的四层API程序成熟度模型。</p><p></p><h2>什么是API成熟度模型</h2><p></p><p></p><p>关于API的成熟度和生命周期，我们可以用两个阶段来描述：API成熟度和API程序成熟度。</p><p></p><p>API成熟度与设计和开发相关，遵循的过程与软件开发成熟度一致。API成熟度确保API符合公认的API规范，比如REST。在讨论API成熟度时，你讨论的是为特定应用程序或目的而创建的一组API。</p><p></p><p>API程序成熟度主要是从整个公司层面来看的，即公司为满足各种业务目标而积累的大量API。对于API程序成熟度来说，将API构建成统一的服务是有必要的。API程序成熟度模型为通过简化API来促进业务创新提供了基准。</p><p></p><h2>API程序成熟度模型</h2><p></p><p></p><p>API程序成熟度从技术和业务的角度评估API的非功能性指标。API的技术指标包括性能、安全性、体验和可伸缩性。API的业务指标与间接影响时间和成本的流程和生产力的改进有关。</p><p></p><p>与其他业务流程一样，API程序也应该从小处开始，然后逐渐演化。API程序的结构必须能够遵循持续的改进周期。指标应该随着API程序从较低成熟度级别过渡到较高成熟度级别而得到改进。</p><p></p><p>在开始你的API成熟度模型之旅之前，你必须首先将API视为一种工具。然后，在模型的演进过程中，随着达到更高的成熟度级别，你需要基于API为日常业务所带来的能力将其视为组件、模型或生态系统。</p><p></p><h2>API程序成熟度的四个级别</h2><p></p><p></p><p>如果你将API程序成熟度视为企业数字化转型整体方法的一部分，API程序可以分为四个成熟度级别：</p><p></p><h4>级别1：“API的暗黑时代”——API作为数据采集工具</h4><p></p><p></p><p>从历史上看，构建API是为了方便数据采集，Salesforce和Amazon的早期API就是最好的例子。这类API的主要目的就是用于标准化跨多个业务应用程序的数据共享。</p><p></p><p>API程序成熟度的第一个级别是为可以提供单一事实来源的数据采集创建标准化的数据访问接口。这些API按照不同的业务功能分类。例如，你可以有分别用来访问财务、销售、员工和客户数据的API。</p><p></p><p>当你建立了API设计和架构最佳实践，你的组织就达到了API程序成熟度级别1。一些最佳实践包括：</p><p>在设计API时要考虑到集成便利性和可重用性；所有的API都保持一致的接口；在设计中结合版本控制，同时支持多个客户端；确保API的可伸缩性，适应不断变化的用户需求。</p><p></p><p>这些API相对简单，不需要高级的可编程功能。级别1也可以定义为一种相对不成熟的、手动的API部署方法。手动部署的个体API不支持API生命周期管理，技术的重点放在了将API构建为独立的工具上。</p><p></p><h4>级别2：“API的复兴时代”——API作为流程集成组件</h4><p></p><p></p><p>回顾API的发展历史，从2000年代开始，当它们开始被用作连接器来集成不同的系统时，迎来了它们的复兴时代。单点登录（SSO）就是一个典型的例子。SSO时一种被广泛使用的API集成工具，用于对用户进行身份验证，让用户能够安全访问多个应用程序和第三方服务。</p><p></p><p>当你的组织达到API程序成熟度级别2时，你的API程序将使用基于组件的方法。应用程序被分解为单独的组件，每个组件都可以独立于应用程序的其他部分进行开发和测试，然后再集成成一个完整的应用程序。这种方法降低了复杂性，易于维护，并提高了可伸缩性。</p><p></p><p>API将作为集成不同业务和特定领域流程的组件捆绑在一起。这些API包简化了运营和工作流，将多个部门连接起来，甚至可以集成与外部合作伙伴的工作流与交互。</p><p></p><p>当你达到级别2时，你的组织就迈出了将API应用于业务的第一步。在级别2，API被视为组件，为你提供了标准化和可重用的API目录。级别2通过CI/CD（持续集成/持续交付）管道实现标准化和自动化，改进了开发周期，从而推进了API开发和生命周期管理。</p><p></p><h4>级别3：“API的启蒙时代”——API作为统一体验的平台</h4><p></p><p></p><p>在API复兴时代，API被视为组件，以此来简化集成和提升可重用性。级别3是API的启蒙时代，它更进一步，让API变得对用户更加友好和有价值。</p><p></p><p>当你达到级别3，API就不再被视为改进业务工作流的组件或独立的工具。这一级别关注的是构建API套件，通过创建互连的体验来驱动更好的工作流程。API组件的作用在于，API提供者可以在设计和构建API时对应用程序进行分解。而API套件的作用在于，API提供者可以对功能进行分组，让API消费者可以与它们集成，从而获得更好的体验。</p><p></p><p>例如，物流公司依靠卡车和送货车车队来维持业务的连续性。它可以使用API套件来监控和管理其车队的各个方面。在级别3，你需要一个精心设计的包含多个API的API套件来监控卡车、绘制路线、提供性能分析，等等。</p><p></p><p>在级别3，API是用户体验（UX）的关键。API套件成为面向用户的应用程序的支柱。在上面的卡车车队示例中，公司用于车队管理的前端软件依赖于API来驱动最终的用户体验，因此API套件成为为整个软件包提供接口的后端平台。</p><p></p><p>当你达到了级别3，API程序将起着至关重要的作用，因为API套件成了任务关键型的服务。在这个阶段，API消费者做了大量的投入，API的可靠性和成熟度就变得非常重要。处于级别3的API程序都达到了一定程度的技术成熟度，包括：</p><p>部署：API套件进行批量部署，与API生命周期阶段和版本控制紧密结合。性能：API支持云原生环境，可以获得更好的可伸缩性和弹性工作负载。安全性：启用多层安全机制，确保严格的认证和授权过程。自动化：CI/CD管道是完全自动化的，包含了严格的API测试。体验：自助式API门户有助于开发人员快速上手。</p><p></p><h4>级别4：“API的自由化时代”——API作为业务转型的生态系统</h4><p></p><p></p><p>当你的组织达到了API程序成熟度级别4时，你将拥有完全外部化的API。API演进的最后阶段更多地是由业务需求而不是技术驱动的。在这个级别，你可能已经有了一个运行良好的技术栈，并且正在推动内部和合作伙伴采用API，因为API带来了很多业务价值。下一个合乎逻辑的进程是通过货币化将这种价值外部化。</p><p></p><p>在级别4，你将采用一种新的方法——API即产品。在这个级别，你可以通过服务订阅模型向客户提供API。API即产品可以作为独立服务或补充服务来提供，具体根据公司的业务性质来决定。无论采用哪种方式，API都紧密集成到了你的产品、营销和销售中，因此每个人都可以通过协作来推动这种新兴的价值流。</p><p></p><p>在级别4，API程序成为业务增长的引擎。是否已经达到级别4的一些指标包括：</p><p></p><p>API治理</p><p></p><p>你有一个专门的API产品管理小组。这个小组确保所有API都是基于一组预定义的规则开发的。它还定义了API生命周期进展策略，确保API具备架构和安全合规性。</p><p></p><p>API可观测性</p><p></p><p>你的团队不仅能够对API进行监视，还能够捕获API业务逻辑的内部状态，收集与性能有关的数据。</p><p></p><p>API生态系统</p><p></p><p>你建立了一个API社区，让开发人员和消费者有交换意见和寻求支持的地方。API论坛进一步增强了API生态系统，推动API的采用。</p><p></p><h2>API程序改进周期</h2><p></p><p></p><p>这个世界上没有完美的API程序。任何一个API治理框架都必须进行定期审计，确定API程序的当前成熟度级别。</p><p></p><p>无论处于哪一个API成熟度级别，采用DevOps方法并通过持续的小Sprint来提高API成熟度都是必要的。要采用DevOps方法，需要在组织范围内建立共识，实现更敏捷、更快的小增量改进周期。</p><p></p><p>理想的API程序改进周期包括五个阶段。</p><p></p><h4>评估和探索</h4><p></p><p></p><p>第一个阶段是在技术和业务层面评估API程序的当前状态，并探索改进它的可能性。当然，技术成熟度要先于业务成熟度，应该是级别1和级别2的核心关注点。</p><p></p><p>在探索需要改进的领域时，可以设定一些小目标，而不是试图从一个级别直接跳到下一个级别。你可以在内部定义子级别，改进API程序的某个特定方面，例如部署自动化、安全性或可伸缩性。</p><p></p><h4>设计与建议</h4><p></p><p></p><p>第二个阶段是改进周期中最关键的决策点。在这个阶段，你需要梳理来自不同利益相关者的技术规范和业务目标。然后，你可以建议对底层API管理技术栈做出修改，这些修改应该是当前改进周期的一部分。</p><p></p><h4>构建与实现</h4><p></p><p></p><p>第三个阶段是改进周期的实现阶段。这个阶段包含了基于建议的开发和配置增强。</p><p></p><h4>测试与监控</h4><p></p><p></p><p>在第四个阶段，你开始通过测试来驱动API。在这个阶段，你通过监控重要的性能和改进指标来判断API改进周期的总体有效性。这个阶段可能会很长，因为你需要在第三阶段和第四阶段之间来回转换，直到可以从指标上看到可度量的改进。</p><p></p><h4>启动新的API程序</h4><p></p><p></p><p>一旦完成了测试和监控阶段，并且看到了真正的改进，就来到了最后一个阶段——生产部署。在这个阶段，你将新的API程序产品化，并启动和运行它们。</p><p></p><h2>如何提升你的API程序成熟度</h2><p></p><p></p><p>这里给出的不同级别的API程序成熟度提供了一条带有逻辑里程碑的清晰路径，帮助你的组织从低级别API实现过渡到高级API实现，但这里还有一个更重要的挑战需要你去解决。</p><p></p><p>API程序象征着组织范围内采用其他API的氛围。将API的发展定位成推动业务增长的主要引擎之一，这是一个理想的愿景。然而，要让API程序取得成功，必须将其构建成横向的跨部门和团队的功能。</p><p></p><p>在大多数企业中，每一个部门都需要其他部门的清晰度和可见性，这也是为什么需要大量工作来执行治理和标准化的原因之一。缺乏可见性会增加创建重复API的可能性。</p><p></p><p>孤立的API团队可能会带来一些挑战，例如缺乏沟通、理解和可见性。彼此孤立的团队为建立API开发集成策略带来了挑战。此外，每个团队可能有不同的优先级，导致整个过程出现延迟和错误。此外，团队彼此孤立会导致协作和知识共享的机会变少，而这些本来可用于提高正在开发的API的质量。</p><p></p><p>横向的API程序功能跨越了这种部门间的孤岛，有助于确保API的统一治理和标准化。</p><p></p><p>以下是一些你可以用来应对持续改进周期挑战的规则。</p><p></p><h4>由外而内建立共识</h4><p></p><p></p><p>由外而内的方法需要对业务工作流进行分析，围绕它们设计出正确的数字体验。与由内而外的方法相比，由外而内的方法在捕获各种利益相关者的期望方面要有效得多。</p><p></p><h4>自上而下的文化转变</h4><p></p><p></p><p>寻求推动全公司文化转变的最佳实践是一个极具争议的话题。由于成功的API程序需要水平对齐，因此采用自上而下而不是自下而上的方法可以降低出现API蔓延的可能性。</p><p></p><p>自上而下的API开发方法有几个优势，例如缩短发布时间、缩短开发周期和更容易维护。它还为API架构提供了更大程度的清晰度，使得开发人员能够更容易地知道他们必须做些什么以及他们在整个项目中的职责。此外，自上而下的方法可以减少与API安全性、可靠性和文档相关的工作量。</p><p></p><h4>战略观点</h4><p></p><p></p><p>API程序成熟度的初始级别是将API视为技术工具包的一部分。记住，这是一种短期的战术视角。随着API程序的不断发展，必须不断努力构建战略愿景，让API程序带来可通过业务级KPI来度量的价值。</p><p></p><p>达到最高的API程序成熟度级别需要时间和精力，同时还要管理利益相关者的期望。但不管怎样，开发成熟的API程序将为加速业务创新和增长带来新的机会。</p><p></p><p>作者简介：</p><p>Darshan Shivashankar是APIwiz的创始人兼首席执行官。APIwiz是一个低代码API运营平台，旨在通过简化API生命周期管理来提高生产力和实现大规模治理。他有12年帮助企业进行数字化转型的经验。他曾为电信、医疗保健和金融行业的大型企业领导和实现API程序。</p><p></p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/api-maturity-model/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTAxNzA5MzUsImZpbGVHVUlEIjoiTVlneHNCOTVDTlU1TGx2NSIsImlhdCI6MTY5MDE3MDYzNSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.GnN_eCmUH_ihtMltPOgnFRsI72aQPdHIExmo9K95EHs\">https://www.infoq.com/articles/api-maturity-model/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/shlKO1bTHS2tCFiFpNe1\">API 设计评审已死，API 设计评审万岁</a>\"</p><p><a href=\"https://www.infoq.cn/article/mDlgpAcKK4V3Qr4r9d8E\">API 网关和负载均衡器，到底怎么选？</a>\"</p>",
    "publish_time": "2023-07-27 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]