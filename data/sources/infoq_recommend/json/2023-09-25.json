[
  {
    "title": "Java近期新闻：JDK 22发布时间表、巴比伦项目、Helidon 4.0-RC2、MicroProfile 6.1-RC1",
    "url": "https://www.infoq.cn/article/3F3uczlwd3ee361zhvId",
    "summary": "<p></p><h4>OpenJDK</h4><p></p><p></p><p>Oracle Java架构师<a href=\"https://www.linkedin.com/in/paul-sandoz-4704562/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Paul Sandoz</a>\"<a href=\"https://mail.openjdk.org/pipermail/discuss/2023-September/006226.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">发起了一个提案</a>\"，准备启动一个叫作巴比伦（Babylon）的Java项目，主要目标是“将Java扩展到外部编程模型，如SQL、可微分编程、机器学习模型和GPU中”。巴比伦可以通过<a href=\"https://cr.openjdk.org/~psandoz/conferences/2023-JVMLS/Code-Reflection-JVMLS-23-08-07.pdf?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">代码反射</a>\"实现将Java扩展到外部编程模型中，这是对Java反射机制的增强，支持以适当的形式访问、分析和转换Java代码。这样一来，通过Java库的形式来支持外部编程模型就变得相对容易。</p><p></p><p>Sandoz将领导这个新项目，并提供了一份初步评审人员名单，其中包括Oracle软件架构师兼Panama项目负责人<a href=\"https://www.linkedin.com/in/mcimadamore/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Maurizio Cimadamore</a>\"、Oracle软件架构师<a href=\"https://www.linkedin.com/in/gary-frost-8048575/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Gary Frost</a>\"和英特尔首席软件工程师<a href=\"https://www.linkedin.com/in/sandhya-viswanathan-4484942/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Sandhya Viswanathan</a>\"。想要了解更多信息的开发者可以观看最近的<a href=\"https://openjdk.org/projects/mlvm/jvmlangsummit/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">JVM语言峰会</a>\"YouTube<a href=\"https://youtu.be/xbk9_6XA_IY?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">视频</a>\"。</p><p></p><p>Sandoz上周还介绍了JEP草案8315945，<a href=\"https://openjdk.org/jeps/8315945?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Vector API(第七轮孵化器)</a>\"。这个JEP来自<a href=\"https://openjdk.org/projects/panama/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Panama</a>\"项目，整合了针对前六轮孵化的增强和改进：即将在JDK 21 GA版本中交付的JEP 448（<a href=\"https://openjdk.org/jeps/448?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Vector API (第六轮孵化器)</a>\"）、在JDK 20中交付的JEP 438（<a href=\"https://openjdk.org/jeps/438?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Vector API (第五轮孵化器)</a>\"）、在JDK 19中交付的JEP 426（<a href=\"https://openjdk.org/jeps/426?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Vector API (第四轮孵化器)</a>\"）、在JDK 18中交付的JEP 417（<a href=\"https://openjdk.java.net/jeps/417?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Vector API (第三轮孵化器)</a>\"）在JDK 17中交付的JEP 414（<a href=\"https://openjdk.java.net/jeps/414?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Vector API (第二轮孵化器)</a>\"）、在JDK 16中作为<a href=\"https://openjdk.java.net/jeps/11?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">孵化器模块</a>\"交付的JEP 338（<a href=\"https://openjdk.java.net/jeps/338?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Vector API (孵化器)</a>\"）。JEP 448最重要的变化包括为支持Vector API值而对<a href=\"https://docs.oracle.com/en/graalvm/enterprise/20/docs/reference-manual/compiler/#graalvm-compiler?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">JVM编译器接口</a>\" (JVMCI)进行的增强。</p><p></p><h4>JDK 21</h4><p></p><p></p><p><a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-21%2B35?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Build 35</a>\"仍然是JDK 21当前的<a href=\"https://jdk.java.net/20/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">早期访问构建</a>\"版本。关于该构建的更多细节可以在<a href=\"https://jdk.java.net/21/release-notes?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">发行说明</a>\"中找到。</p><p></p><h4>JDK 22</h4><p></p><p></p><p>JDK 22的<a href=\"https://jdk.java.net/22/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">早期访问构建</a>\"版本<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-22%2B14?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Build 14</a>\"提供了针对Build 13的<a href=\"https://github.com/openjdk/jdk/compare/jdk-22%2B13...jdk-22%2B14?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">更新</a>\"，其中包括对各种<a href=\"https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2022%20and%20%22resolved%20in%20build%22%20%3D%20b14%20order%20by%20component%2C%20subcomponent&amp;accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">问题</a>\"的修复。关于这个版本的更多细节可以在<a href=\"https://jdk.java.net/22/release-notes?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">发行说明</a>\"中找到。</p><p></p><p>Oracle Java平台组首席架构师<a href=\"https://www.linkedin.com/in/markreinhold?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Mark Reinhold</a>\"正式<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2023-September/008256.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">提议</a>\"JDK 22的发布时间表：</p><p></p><p>Rampdown Phase One(从主分支fork)：2023年12月7日Rampdown Phase Two：2024年1月18日初始候选版本：2024年2月8日最终候选版本：2024年2月22日普遍可用：2024年3月19日</p><p></p><p>JDK<a href=\"https://openjdk.org/census#jdk?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">提交者和评审者</a>\"对该提案的评论将在2023年9月15日23点 之前开放讨论。如果届时没有人反对，那么根据JEP 2.0<a href=\"https://cr.openjdk.org/~mr/jep/jep-2.0-02.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">流程建议</a>\"，这将是JDK 22的发布时间表。</p><p></p><p>对于<a href=\"https://openjdk.org/projects/jdk/22/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">JDK 22</a>\"和<a href=\"https://openjdk.java.net/projects/jdk/21/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">JDK 21</a>\"，开发者可以通过<a href=\"https://bugreport.java.com/bugreport/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Java Bug Database</a>\"报告缺陷。</p><p></p><h4>GraalVM</h4><p></p><p></p><p>Oracle Labs发布<a href=\"https://github.com/graalvm/native-build-tools/releases/tag/0.9.26?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">0.9.26</a>\"版本的<a href=\"https://github.com/graalvm/native-build-tools/blob/master/README.md?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">原生构建工具</a>\"，一个GraalVM项目，提供了可与GraalVM原生镜像互操作的插件。新版本包含了一些值得注意的变化，例如：使用<a href=\"https://docs.gradle.org/current/kotlin-dsl/gradle/org.gradle.api.attributes/-attribute-container/attribute-provider.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">AttributeProvider</a>\"API修复与Gradle 8.3的兼容性问题、显式声明<a href=\"https://github.com/codehaus-plexus/plexus-xml/blob/master/README.md?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Plexus-Xml</a>\"和<a href=\"https://github.com/codehaus-plexus/plexus-utils/blob/master/README.md?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Plexus-Utils</a>\"依赖项来修复与Maven 3.9.x的兼容性问题、为即将发布的GraalVM for JDK 21准备原生构建工具。关于该版本的更多细节可以在<a href=\"https://github.com/graalvm/native-build-tools/compare/0.9.25...0.9.26?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">变更日志</a>\"中找到。</p><p></p><h4>Spring Framework</h4><p></p><p></p><p>在过去的两周里，Spring一直很平静，但VMware的Spring开发者布道师<a href=\"https://www.linkedin.com/in/joshlong/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Josh Long</a>\"却没有闲着。除了他每周发表的“This Week in Spring”博文之外，Long还发表了针对SpringOne 2023的个人<a href=\"https://spring.io/blog/2023/08/29/my-springone-2023-recap?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">概述</a>\"。他最近的一篇<a href=\"https://spring.io/blog/2023/09/09/all-together-now-spring-boot-3-2-graalvm-native-images-java-21-and-virtual?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">博文</a>\"是关于Spring Boot 3.2、GraalVM原生镜像、Java 21和虚拟线程是如何协同工作的。他还与VMware Spring安全负责人<a href=\"https://spring.io/blog/2023/09/07/a-bootiful-podcast-spring-security-lead-rob-winch?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Rob Winch</a>\"、VMware Spring工程高级技术人员<a href=\"https://spring.io/blog/2023/08/31/a-bootiful-podcast-spring-security-and-kubernetes-legend-daniel-garnier?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Daniel Garnier-Moiroux</a>\"和Eventuate创始人兼CEO <a href=\"https://spring.io/blog/2023/08/25/a-bootiful-podcast-cloud-native-chris-richardson?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Chris Richardson</a>\"一起录制了“Bootiful”播客。</p><p></p><h4>Quarkus</h4><p></p><p></p><p><a href=\"https://quarkus.io/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Quarkus</a>\"3.3.2版本<a href=\"https://quarkus.io/blog/quarkus-3-3-2-released/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">发布</a>\"，带来了依赖项升级和一些显著的变化，如：改进了Dev UI的OIDC Auth0；删除<a href=\"https://www.javadoc.io/doc/io.fabric8/kubernetes-model/1.0.12/io/fabric8/openshift/api/model/BuildConfig.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">**`BuildConfig`**</a>\"类的imagePushSecret()方法，这个方法在使用内部注册表时是无效的；修复了Quarkus构建问题（使用quarkus.container-image.builder=jib属性时不考虑Podman的auth.json文件。关于该版本的更多细节可以在<a href=\"https://github.com/quarkusio/quarkus/releases/tag/3.3.2?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">变更日志</a>\"中找到。</p><p></p><h4>MicroProfile</h4><p></p><p></p><p>MicroProfile工作组发布<a href=\"https://github.com/microprofile/microprofile-wg/tree/main/microprofile-6.1?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">MicroProfile 6.1</a>\"的<a href=\"https://github.com/eclipse/microprofile/releases/tag/6.1-RC1?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">首个发行候选版本</a>\"，其中包括对<a href=\"https://microprofile.io/specifications/microprofile-config/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">MicroProfile Config</a>\"、<a href=\"https://microprofile.io/specifications/microprofile-metrics/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">MicroProfile Metrics</a>\"和<a href=\"https://microprofile.io/specifications/microprofile-telemetry/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">MicroProfile Telemetry</a>\"规范的更新。因此，MicroProfile 6.1的最终特性(定于10月初发布GA版本)将包含：</p><p></p><p>Jakarta EE 10 Core ProfileMicroProfile Config 3.1MicroProfile Fault Tolerance 4.0MicroProfile Metrics 5.1MicroProfile Health 4.0MicroProfile Telemetry 1.1MicroProfile OpenAPI 3.1MicroProfile JWT Authentication 2.1MicroProfile Rest Client 3.0</p><p></p><p>值得注意的是，<a href=\"https://jakarta.ee/specifications/coreprofile/10/jakarta-coreprofile-spec-10.0?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Jakarta EE 10核心概要</a>\"包含了七个规范中的四个，即：<a href=\"https://jakarta.ee/specifications/cdi/4.0/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Jakarta Contexts and Dependency Injection (CDI) 4.0</a>\"、<a href=\"https://jakarta.ee/specifications/restful-ws/3.1/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Jakarta RESTful Web Services 3.1</a>\"、<a href=\"https://jakarta.ee/specifications/jsonp/2.1/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Jakarta JSON Processing 2.1</a>\"和<a href=\"https://jakarta.ee/specifications/jsonb/3.0/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Jakarta JSON Binding 3.0</a>\"，这些是在MicroProfile早期从Java EE 7和Java EE 8发展而来的JSR规范。</p><p></p><p>MicroProfile Config 3.1的<a href=\"https://github.com/eclipse/microprofile-config/releases/tag/3.1-RC2?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">第二个候选发行版</a>\"带来了一些值得注意的变化，如：更新了TCK，与CDI 4.0的重大变更保持一致，包含了一个空的beans.xml文件，Bean发现模式从all改为annotated；<a href=\"https://github.com/eclipse/microprofile-config/blob/main/tck/src/main/java/org/eclipse/microprofile/config/tck/broken/MissingValueOnObserverMethodInjectionTest.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">**`MissingValueOnObserverMethodInjectionTest`**</a>\"类的更新，在<a href=\"https://github.com/eclipse/microprofile-config/blob/main/tck/src/main/java/org/eclipse/microprofile/config/tck/broken/ConfigObserver.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">**`ConfigObserver`**</a>\"被定义为@ApplicationScoped(可代理)和final(不可代理)时会抛出DeploymentException。关于该版本的更多细节可以在<a href=\"https://github.com/eclipse/microprofile-config/milestone/11?closed=1&amp;accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">问题列表</a>\"中找到。</p><p></p><h4>Helidon</h4><p></p><p></p><p><a href=\"https://helidon.io/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Helidon</a>\"4.0.0的<a href=\"https://github.com/helidon-io/helidon/releases/tag/4.0.0-M2?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">第二个候选发行版</a>\"包含：JDK 21基线；完全集成<a href=\"https://helidon.io/nima?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Helidon Níma</a>\"Web服务器；经过重度重构的Helidon SE API，优化了命令式/阻塞场景；对<a href=\"https://helidon.io/docs/v3/#/se/webserver?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Web Server</a>\"和<a href=\"https://helidon.io/docs/v3/#/se/webclient?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Web Client</a>\"组件的增强，实现与Helidon 3.0相同的功能。关于该版本的更多细节可以在<a href=\"https://github.com/helidon-io/helidon/blob/4.0.0-M2/CHANGELOG.md?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">变更日志</a>\"中找到。</p><p></p><h4>Open Liberty</h4><p></p><p></p><p>IBM<a href=\"https://openliberty.io/blog/2023/09/05/23.0.0.9-beta.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">发布</a>\"23.0.0.9-beta版<a href=\"https://openliberty.io/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Open Liberty</a>\"，包含：对<a href=\"https://openliberty.io/blog/2023/08/03/23.0.0.8-beta.html#sp3?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Liberty Spring Boot Support 3.0</a>\"的持续改进，可对在容器中创建的应用程序进行“瘦身”；<a href=\"https://jakarta.ee/specifications/data/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Jakarta Data</a>\"规范的<a href=\"https://openliberty.io/blog/2023/07/11/23.0.0.7-beta.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">早期预览版</a>\"。</p><p></p><h4>Hibernate</h4><p></p><p></p><p><a href=\"https://hibernate.org/search/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Hibernate Search</a>\"7.0.0的<a href=\"https://in.relation.to/2023/09/05/hibernate-search-7-0-0-Beta1/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">第一个测试版</a>\"包含了许多依赖项升级：JDK 11作为基准、迁移到Jakarta EE、Hibernate ORM 6.3.0.Final、Lucene 9.7.0、Elasticsearch 8.9.0和OpenSearch 2.9.0。</p><p></p><h4>Infinispan</h4><p></p><p></p><p><a href=\"https://infinispan.org/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Infinispan</a>\"<a href=\"https://github.com/infinispan/infinispan/releases/tag/14.0.17.Final?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">发布</a>\"14.0.17.Final版，包含了一些值得注意的问题修复，例如：由<a href=\"https://github.com/infinispan/infinispan/blob/main/server/runtime/src/main/java/org/infinispan/server/logging/events/ServerEventLogger.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">**`ServerEventLogger`**</a>\"类创建的缓存阻塞了可能导致死锁的缓存连接；<a href=\"https://docs.jboss.org/infinispan/14.0/apidocs/org/infinispan/executors/DefaultExecutorFactory.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">**`DefaultExecutorFactory`**</a>\"类创建的不必要的多个Java <a href=\"https://download.java.net/java/early_access/jdk21/docs/api/java.base/java/lang/ThreadGroup.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">**`ThreadGroup`**</a>\"；为<a href=\"https://docs.jboss.org/infinispan/14.0/apidocs/org/infinispan/remoting/rpc/RpcManager.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">**`RpcManager`**</a>\"接口的实现添加缺失的跨站点指标。关于该版本的更多细节可以在<a href=\"https://github.com/infinispan/infinispan/compare/14.0.16.Final...14.0.17.Final?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">问题列表</a>\"中找到。</p><p></p><h4>Eclipse Mojarra</h4><p></p><p></p><p><a href=\"https://projects.eclipse.org/projects/ee4j.mojarra?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Eclipse Mojarra</a>\"4.0.4<a href=\"https://twitter.com/OmniFishEE/status/1700439466500841842?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">发布</a>\"，带来了一些值得注意的变化，例如：修复了当<a href=\"https://weld.cdi-spec.org/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Weld</a>\"中的Bean Deployment Archive为空时Mojarra无法初始化的问题；更健壮的<a href=\"https://javadoc.io/doc/org.glassfish/jakarta.faces/latest/com/sun/faces/facelets/tag/composite/RetargetedAjaxBehavior.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">**`RetargetedAjaxBehavior`**</a>\"类实现；<a href=\"https://javadoc.io/doc/org.glassfish/jakarta.faces/latest/jakarta/faces/component/UIData.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">**`UIData`**</a>\"类的当前值是null时返回一个静态空数据模型。关于该版本的更多细节可以在<a href=\"https://github.com/eclipse-ee4j/mojarra/releases/tag/4.0.4-RELEASE?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">发行说明</a>\"中找到。</p><p></p><h4>JDKMon</h4><p></p><p></p><p>由Azul首席工程师<a href=\"https://de.linkedin.com/in/gerritgrunwald?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">Gerrit Grunwald</a>\"创建的JDK监控和更新工具<a href=\"https://github.com/HanSolo/JDKMon?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">JDKMon</a>\"发布了<a href=\"https://github.com/HanSolo/JDKMon/releases/tag/17.0.71?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">17.0.71</a>\"版本，从新版本可以知道关于JDK 21 GA版本和下一个OpenJDK更新的时间。</p><p></p><h4>JHipster</h4><p></p><p></p><p>JHipster 8.0.0的<a href=\"https://www.jhipster.tech/2023/09/05/jhipster-release-8.0.0-beta.3.html#jhipster-release-v800-beta3?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">第三个测试版</a>\"带来了以下增强功能：支持JDK 20和JDK 21；清理<a href=\"https://www.jhipster.tech/jdl/intro?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">JHipster领域语言</a>\" (JDL)，将文件操作、配置和验证转移到JDL生成器中；修复H2控制台由于路径设置错误而无法加载的问题。关于该版本的更多细节可以在<a href=\"https://github.com/jhipster/generator-jhipster/releases/tag/v8.0.0-beta.3?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">发行说明</a>\"中找到。</p><p></p><p>类似地，JHipster 7.9.4的<a href=\"https://www.jhipster.tech/2023/09/05/jhipster-release-7.9.4.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">发行版</a>\"修复了bug并支持Node.js 18。关于该版本的更多细节可以在<a href=\"https://github.com/jhipster/generator-jhipster/releases/tag/v7.9.4?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">发行说明</a>\"中找到。</p><p></p><h4>JavaZone大会</h4><p></p><p></p><p><a href=\"https://2023.javazone.no/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">JavaZone</a>\"大会在挪威奥斯陆的<a href=\"https://oslospektrum.no/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">奥斯陆光谱剧院</a>\"举行，来自Java社区的演讲者发表了<a href=\"https://2023.javazone.no/program?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">演讲</a>\"并举行了<a href=\"https://2023.javazone.no/workshops?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTU2MDUzNDcsImZpbGVHVUlEIjoiOTAzMEoxVkVtREkxSlJrdyIsImlhdCI6MTY5NTYwNTA0NywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ipZvuALQG_bbMXTIs6bTWlSK49j78imNY8lFRyAhosE\">研讨会</a>\"，主题包括：垃圾回收、量子计算、Haskell、Kubernetes、应用程序监控、微前端、JavaScript和Quarkus。</p><p></p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/09/java-news-roundup-sep04-2023/\">https://www.infoq.com/news/2023/09/java-news-roundup-sep04-2023/</a>\"</p>",
    "publish_time": "2023-09-25 09:27:58",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "ByConity 技术详解：Hive 外表和数据湖接入实践",
    "url": "https://www.infoq.cn/article/zTo0jazjLIhjweX2TmLw",
    "summary": "<p>随着大数据处理需求的不断增加，更低成本的存储和更统一的分析视角变得愈发重要。数据仓库作为企业核心决策支持系统，如何接入外部数据存储已经是一个技术选型必须考虑的问题。也出于同样的考虑，ByConity 0.2.0 中发布了一系列对接外部存储的能力，初步实现对 Hive 外表及数据湖格式的接入。</p><p></p><h1>支持 Hive 外表</h1><p></p><p>随着企业数据决策的要求越来越高，Hive 数据仓库已成为了许多组织的首选工具之一。通过在查询场景中结合 Hive， ByConity 可以提供更全面的企业决策支持和打造更完整的数据管理模式。因此从 0.2.0 版本开始，ByConity 可以通过建立外表的形式访问 Hive 数据。</p><p></p><h2>原理和使用</h2><p></p><p>ByConity 主要的表引擎为 CnchMergeTree。在连接外部存储时，需要基于不同的外表引擎。比如创建 Hive 外表时，需要通过 CnchHive 引擎读取 Parquet 以及 ORC 格式的 Hive 数据。</p><p><code lang=\"null\">CREATE TABLE tpcds_100g_parquet_s3.call_center\nENGINE = CnchHive('thrift://localhost:9083', 'tpcds', 'call_center')\nSETTINGS region = '', endpoint = 'http://localhost:9000', \n         ak_id = 'aws_access_key', ak_secret = 'aws_secret_key', vw_default = 'vw_default'</code></p><p></p><p>通过指定 HiveMetastore uri，Hive database 以及 Hive table。 ByConity 会获取并解析 Hive table 元数据，自动推断表的结构（列名，类型，分区）。查询时 server 通过 List 远端文件系统，来获取需要读取的文件，之后 server 下发文件给 workers，worker 负责从远端文件系统读取数据，整体的执行流程与 CnchMergeTree 基本一致。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d5/d58d244a05a3df67915b9cab52c84835.png\" /></p><p>通过配置 disk_cache，worker 端可以把远端的文件存入本地磁盘缓存来加速下一次读取的速度。</p><p></p><h2>性能优化</h2><p></p><p>此外，CnchHive 还实现了一些重要的性能优化手段以达到与 Presto/Trino 同水平的外表性能：</p><p></p><p>支持分区剪枝和分片级别剪枝</p><p>分区剪枝和分片级别剪枝是 Hive 的性能优化技术。分区剪枝允许 Hive 在查询时仅扫描与查询条件相关的分区，而不是全表扫描，从而大大减少查询的执行时间。对于一些文件格式，例如 Parquet，可以通过读取文件中每个 row group 的 minmax value，对 row groups 进行裁剪，进一步减少读取的数据量。</p><p></p><p>Hive 统计信息集成优化器</p><p>CnchHive 引入了统计信息集成优化器，它可以根据数据的统计信息自动选择最佳的执行计划。这使得查询的执行更加智能和高效，同时减少了手动调整查询计划的工作量。统计信息集成优化器可以在 benchmark 中显著提高查询性能。</p><p></p><p>Benchmark（ByConity vs Trino)</p><p>TPC-DS（Transaction Processing Performance Council Decision Support）是一个标准化的决策支持基准，用于评估数据仓库系统的性能。ByConity 0.2.0 发布的 CnchHive 引擎通过优化查询执行计划，不仅能完整跑通 TPC-DS 基准测试，同时在性能方面表现出色。</p><p></p><p>测试信息：</p><p>部署模式：Kubernetes 部署，基于 AWS EC2 r5.12large 机型物理资源规模：4 Worker(48cpu, 256Gb mem)测试使用的参数：enable_optimizer : 开启优化器dialect_type ANSI: 使用标准 Ansi SQLs3_use_read_ahead: 关闭 S3 的 ReadAhead 功能remote_read_min_bytes_for_seek: 两个读之间如果间隔小于 1MB， 不回 seekdisk_cache_mode=SKIP_DISK_CACHE 关闭 worker 的本地磁盘缓存，模拟纯冷读场景parquet_parallel_read=1 使用 parquet 的 parallel readenable_optimizer_fallback=0 优化器执行失败直接返回报错，用于测试场景exchange_enable_multipath_reciever=0 执行层的参数优化图例补充：纵坐标单位 毫秒，横坐标单位 TPC-DS 查询语句标号；</p><p><img src=\"https://static001.geekbang.org/infoq/eb/eb931a71a0e433d18970abbf4bf11225.png\" /></p><p></p><h1>支持 Hudi 外表</h1><p></p><p></p><h2>Hudi 主要概念</h2><p></p><p>从实际的业务场景出发，对于数据湖数据的需求可以先分为两大类：读偏好和写偏好；所以 Apache Hudi 提供了两种类型的表：</p><p>Copy On Write 表：简称 COW，这类 Hudi 表使用列文件格式（例如 Parquet）存储数据，如果有数据更新，则会重写整个 Parquet 文件，适合读偏好的操作；Merge On Read 表：简称 MOR，这类 Hudi 表使用列文件格式（例如 Parquet）和行文件格式（例如 Avro）共同存储数据。一般 MOR 表是用列存存储历史数据，行存存储增量和有更新的数据。数据更新时，先写入行存文件中，然后进行压缩，根据可配置的策略以同步或异步方式生成列式存储文件，适合写偏好的操作；</p><p></p><p>对于这两种不同类型的表和场景，Hudi 提供了不同的查询方式：</p><p><img src=\"https://static001.geekbang.org/infoq/ec/ec9d23eafa71bf03c290ab6e7f36c02c.png\" /></p><p>补充说明：Read Optimized Queries 是对 MOR 表类型快照查询的优化，通过牺牲查询数据的时效性，来减少在线合并日志数据产生的查询延迟。</p><p></p><h2>原理和使用</h2><p></p><p></p><h3>原理概述</h3><p></p><p>ByConity 实现了对 COW 表的进行快照查询。在开启 JNI Reader 后可以支持 MoR 表的读取。Hudi 支持同步 HiveMetastore，因此 ByConity 可以通过 HiveMetastore 感知 Hudi 表。</p><p></p><p>普通 CoW 表可以直接使用 CnchHive 引擎进行查询。</p><p><code lang=\"null\">CREATE TABLE hudi_table\nENGINE = CnchHive('thrift://localhost:9083', 'hudi', 'trips_cow')</code></p><p>开启 JNI Reader 后，ByConity 可以通过 CnchHudi 表引擎来读取 Hudi CoW 以及 MoR 表。</p><p><code lang=\"null\">CREATE TABLE hudi_table\nENGINE = CnchHudi('thrift://localhost:9083', 'hudi', 'trips_cow')</code></p><p>对于 Hudi MoR 表，ByConity 引入 JNI 模块来调用 Hudi Java Client 读取数据。Java 读取的数据会写入内存中的 arrow table，并且通过<a href=\"https://arrow.apache.org/docs/format/CDataInterface.html\">Arrow C Data Interface</a>\"实现内存数据在 Java 与 C++之间的交换 ， C++把 arrow table 转换成 Block 的数据进行后续的数据处理。</p><p></p><h3>通过 Hudi Docker 快速上手</h3><p></p><p></p><p>https://hudi.apache.org/docs/docker_demo/ 配置 Hudi 的 docker 环境后，确保 ByConity 集群连接 hivemetastore 后，可在 ByConity 中进行建 Hudi 外表及查询操作。</p><p><code lang=\"null\">CREATE TABLE hudi.stock_ticks_mor_rt\nENGINE = CnchHudi('thrift://hivemetastore:9083', 'default', 'stock_ticks_mor_rt')\n\n-- MOR 查询\nSELECT\n    symbol,\n    max(ts)\nFROM stock_ticks_mor_rt\nGROUP BY symbol\nHAVING symbol = 'GOOG';\n\n┌─symbol─┬─max(ts)─────────────┐\n│ GOOG   │ 2018-08-31 10:59:00 │\n└────────┴─────────────────────┘</code></p><p></p><h1>Multi-Catalog</h1><p></p><p></p><h2>透明的 Catalog 设计</h2><p></p><p></p><p>Multi-Catalog 设计的目的是为了更方便地连接到多个外部数据目录，以增强 ByConity 的数据湖分析和外表查询功能。在数据架构设计上，核心的数据对象依然只有数据库和表。将 Catalog 信息在处理的时候嵌入到数据库名字中， 根据不同的数据库的命名模式来实现对应的处理。此类设计可以透明的兼容之前已经创建的库表元数据，仅就新增的外部数据目录进行更新。</p><p></p><p> 比如，创建 Hive 的 catalog 后，如果 query 的表名中带了 hive 的 catalog 名字，就会走 external catalog 相关的逻辑，从 Hive Metastore 中获取库表相关信息。查询方式如下所示。</p><p><code lang=\"null\">select * from hive_s3.tpcds.call_center</code></p><p></p><h2>Multi-Catalog 便捷性</h2><p></p><p></p><p>多 Catalog 的设计允许用户在同一个 Hive 实例中同时连接多个不同的存储和元数据服务，而不必为每个存储创建单独的 Hive 实例。这简化了数据管理和查询的复杂性，使组织能够更好地管理和利用其多样化的数据资源。目前已经支持的外部 Catalog 有：Hive，Apache Hudi，AWS Glue。</p><p></p><p>用户可以使用创建一个基于 Hive 和 S3 存储的 Catalog</p><p><code lang=\"null\">create external catalog hive_s3\nproperties\ntype='hive',\nhive.metastore.uri = 'thrift://localhost:9083',\naws.s3.region= 'aws_s3_region',\naws.s3.endpoint = 'http://localhost:9000',\naws.s3.access_key = 'aws_access_key',\naws.s3.secret_key = 'aws_secret_key'</code></p><p>然后使用三段式的命名来直接访问 Hive 外表</p><p><code lang=\"null\">select * from hive_s3.tpcds.call_center;</code></p><p>也可以使用 query 来查看 external catalog 相关的信息</p><p><code lang=\"null\">show create external catalog hive_s3; // display information releated to hive_s3\nshow databases from hive_s3; // show databases in hive_s3\nshow tables from hive_s3.tpcds; // show tables in tpcds database in hive. </code></p><p></p><p><code lang=\"null\">show create external catalog hive_s3;\nshow databases from hive_s3; \nshow tables from hive_s3.tpcds; </code></p><p></p><h1>未来规划</h1><p></p><p>因为越来越多的数据需求时需要整合不同的数据存储，ByConity 会持续丰富对接数据湖和外部存储的能力，增强与上下游工具的集成。2023 年路线图可以查看 Github 上的讨论：https://github.com/ByConity/ByConity/issues/26。同时我们也会重点考虑先投入以下内容：对接 Iceberg，DeltaLake 等更多数据湖格式；引入 Native reader 提高 Parquet 文件读取效率；优化文件分配策略，使得每个 worker 的 workload 更加均匀等。</p><p></p><p>相关专题推荐：<a href=\"https://www.infoq.cn/theme/193\">《开源云原生数仓ByConity技术与实践全解》</a>\"</p><p></p><p></p>",
    "publish_time": "2023-09-25 09:57:10",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "ByConity 技术详解：内置 ELT 能力实现原理和使用",
    "url": "https://www.infoq.cn/article/6bWZDrEHV2DzNZef8qko",
    "summary": "<p>谈到数据仓库， 一定离不开使用Extract-Transform-Load (ETL)或 Extract-Load-Transform (ELT)，即将来源不同、格式各异的数据提取到数据仓库中，并进行处理加工。传统的数据转换过程一般采用Extract-Transform-Load (ETL)来将业务数据转换为适合数仓的数据模型，然而，这依赖于独立于数仓外的ETL系统，因而维护成本较高。</p><p></p><p>ByConity 作为云原生数据仓库，从0.2.0版本开始逐步支持 Extract-Load-Transform (ELT)，使用户免于维护多套异构数据系统。本文将介绍 ByConity 在ELT方面的能力规划，实现原理和使用方式等。</p><p></p><h2>ETL场景和方案</h2><p></p><p></p><h3>ELT与ETL的区别</h3><p></p><p>ETL：是用来描述将数据从来源端经过抽取、转置、加载至目的端（数据仓库）的过程。Transform通常描述在数据仓库中的前置数据加工过程。</p><p><img src=\"https://static001.geekbang.org/infoq/db/db9dfdb346e9b17b146a8baf590cc32d.png\" /></p><p>ELT 专注于将最小处理的数据加载到数据仓库中，而把大部分的转换操作留给分析阶段。相比起前者（ETL)，它不需要过多的数据建模，而给分析者提供更灵活的选项。ELT已经成为当今大数据的处理常态，它对数据仓库也提出了很多新的要求。</p><p></p><h3>资源重复的挑战</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/59/59e844ada9156d24a49cb2aa623df08f.png\" /></p><p></p><p>典型的数据链路如下：我们将行为数据、日志、点击流等通过MQ/ Kafka/ Flink将其接入存储系统当中，存储系统又可分为域内的HDFS 和云上的 OSS&amp; S3 这种远程储存系统，然后进行一系列的数仓的ETL操作，提供给 OLAP系统完成分析查询。</p><p></p><p>但有些业务需要从上述的存储中做一个分支，因此会在数据分析的某一阶段，从整体链路中将数据导出，做一些不同于主链路的ETL操作，会出现两份数据存储。其次在这过程中也会出现两套不同的ETL逻辑。</p><p>当数据量变大，计算冗余以及存储冗余所带来的成本压力也会愈发变大，同时，存储空间的膨胀也会让弹性扩容变得不便利。</p><p></p><h3>业界解决思路</h3><p></p><p>在业界中，为了解决以上问题，有以下几类流派：</p><p>数据预计算流派：如Kylin等。如果Hadoop系统中出报表较慢或聚合能力较差，可以去做一个数据的预计算，提前将配的指标的cube或一些视图算好。实际SQL查询时，可以直接用里面的cube或视图做替换，之后直接返回。流批一体派：如 Flink、Risingwave。在数据流进时，针对一些需要出报表或者需要做大屏的数据直接内存中做聚合。聚合完成后，将结果写入HBase或MySQL中再去取数据，将数据取出后作展示。Flink还会去直接暴露中间状态的接口，即queryable state，让用户更好的使用状态数据。但是最后还会与批计算的结果完成对数，如果不一致，需要进行回查操作，整个过程考验运维/开发同学的功力。湖仓一体&amp;HxxP：将数据湖与数据仓库结合起来。</p><p></p><h2>ELT in ByConity</h2><p></p><p></p><h3>整体执行流程</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/55/55fa10d8fdc390e0fd0003a0f217cff4.png\" /></p><p>ELT任务对系统的要求：</p><p>整体易扩展：导入和转换通常需要大量的资源，系统需要通过水平扩展的方式来满足数据量的快速增长。可靠性和容错能力：大量的job能有序调度；出现task偶然失败（OOM）、container失败时，能够拉起重试；能处理一定的数据倾斜效率&amp;性能：有效利用多核多机并发能力；数据快速导入；内存使用有效（内存管理）；CPU优化（向量化、codegen）生态&amp;可观测性：可对接多种工具；任务状态感知；任务进度感知；失败日志查询；有一定可视化能力</p><p></p><p>ByConity 针对ELT任务的要求，以及当前场景遇到的困难，新增了以下特性和优化改进。</p><p></p><h3>分阶段执行（Stage-level Scheduling）</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/6f/6feaa47877b8523f604b661a027ef754.png\" /></p><p></p><h4>原理解析</h4><p></p><p>当前 ClickHouse的 SQL 执行过程如下：</p><p>第一阶段，Coordinator 收到分布式表查询后将请求转换为对 local 表查询发送给每个 shard 节点；第二阶段，Coordinator 收到各个节点的结果后汇聚起来处理后返回给客户端；</p><p></p><p>ClickHouse 将Join操作中的右表转换为子查询，带来如下几个问题都很难以解决：</p><p>复杂的query有多个子查询，转换复杂度高；Join表较大时，容易造成worker节点的OOM；聚合阶段在Cooridnator，压力大，容易成为性能瓶颈；</p><p><img src=\"https://static001.geekbang.org/infoq/ec/ec35ad59497d898e76e6e5ab1df7b87a.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/53/53642ac5e0c232e8c5791e45d48a7d59.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/fe/fef407ce1f5dc6f4c34f3adb87ccc38a.png\" /></p><p></p><p>不同于ClickHouse，我们在ByConity 中实现了对复杂查询的执行优化。通过对执行计划的切分，将之前的两阶段执行模型转换为分阶段执行。在逻辑计划阶段，根据算子类型插入exchange算子。执行阶段根据exchange算子将整个执行计划进行DAG切分，并且分stage进行调度。stage之间的exchange算子负责完成数据传输和交换。</p><p></p><p>关键节点：</p><p>exchange节点插入切分stagestage schedulersegment executerexchange manager</p><p><img src=\"https://static001.geekbang.org/infoq/cc/cc3d3d1607d89c020a5256c1c8a72941.png\" /></p><p>这里重点来讲一下exchange的视线。上图可以看到，最顶层的是query plan。下面转换成物理计划的时候，我们会根据不同的数据分布的要求转换成不同的算子。source层是接收数据的节点，基本都是统一的，叫做ExchangeSource。Sink则有不同的实现，BroadcastSink、Local、PartitionSink等，他们是作为map task的一部分去运行的。如果是跨节点的数据操作，我们在底层使用统一的brpc流式数据传输，如果是本地，则使用内存队列来实现。针对不同的点，我们进行了非常细致的优化：</p><p>数据传输层进程内通过内存队列，无序列化，zero copy进程间使用brpc stream rpc，保序、连接复用、状态码传输、压缩等算子层批量发送线程复用，减少线程数量</p><p></p><h4>带来的收益</h4><p></p><p>因为ByConity 彻底采用了多阶段的查询执行方式，整体有很大的收益：</p><p>Cooridnator更稳定、更高效聚合等算子拆分到worker节点执行Cooridnator节点只需要聚合最终结果Worker OOM减少进行了stage切分，每个stage的计算相对简单增加了exchange算子，减少内存压力网络连接更加稳定、高效exchange算子有效传输复用连接池</p><p></p><h3>自适应的调度器（Adaptive Scheduler）</h3><p></p><p>Adaptive Scheduler 属于我们在稳定性方面所做的特性。在OLAP场景中可能会发现部分数据不全或数据查询超时等，原因是每个worker是所有的query共用的，这样一旦有一个worker 较慢就会导致整个query的执行受到影响。</p><p><img src=\"https://static001.geekbang.org/infoq/a8/a8a0cbbcc9483dfa450c22278ed120a4.png\" /></p><p>计算节点共用存在的问题：</p><p>Scan 所在的节点负载和不同查询所需的扫描数据量相关，做不到完全平均；各 Plan Segment 所需资源差异大；</p><p></p><p>这就导致worker节点之间的负载严重不均衡。负载较重的worker节点就会影响query整体的进程。因此我们做了以下的优化方案：</p><p>建立 Worker 健康度机制。Server 端建立 Worker 健康度管理类，可以快速获取 Worker Group 的健康度信息，包括CPU、内存、运行Query数量等信息。自适应调度：每个SQL 根据 Worker 健康度动态的进行选择以及计算节点并发度控制。</p><p></p><h3>查询的队列机制（Query Queue）</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/ad/ad3a3313d4dcc5abb1a30e6305fc4a28.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/96/96cb548b0092e6994faf05dda0da3fb7.png\" /></p><p>我们的集群也会出现满载情况，即所有的worker都是不健康的或者满载/超载的，就会用查询队列来进行优化。</p><p></p><p>我们直接在server端做了一个manager。每次查询的时候manager会去check集群的资源，并且持有一个锁。如果资源不够用，则等待资源释放后去唤醒这个锁。这就避免了Server端不限制的下发计算任务，导致worker节点超载，然后崩掉的情况。</p><p></p><p>当前实现相对简单。server是多实例，每个server实例中都有queue，所持有的是一个局部视角，缺乏全局的资源视角。除此之外，每个queue中的查询状态没有持久化，只是简单的缓存在内存中。</p><p></p><p>后续，我们会增加server之间的协调，在一个全局的视角上对查询并发做限制。也会对server实例中query做持久化，增加一些failover的场景支持。</p><p></p><h3>异步执行（Async Execution）</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/2e/2e73bab299f6f8583eaba569078ab6cb.png\" /></p><p>ELT任务的一个典型特征就是：相对于即时分析，他们的运行时间会相对较长。一般ELT任务执行时长为分钟级，甚至到达小时级。</p><p></p><p>目前 ClickHouse的客户端查询都采用阻塞的方式进行返回。这样就造成了客户端长期处于等待的情况，而在这个等待过程中还需要保持和服务端的连接。在不稳定的网络情况下，客户端和服务端的连接会断开，从而导致服务端的任务失败。</p><p></p><p>为了减少这种不必要的失败，以及减少客户端为了维持连接的增加的复杂度。我们开发了异步执行的功能，它的实现如下：</p><p>用户指定异步执行。用户可以通过settings enable_async_query = 1的方式进行per query的指定。也可以通过set enable_async_query = 1的方式进行session级别的指定。如果是异步query，则将其放到后台线程池中运行静默io。当异步query执行时，则需要切断它和客户端的交互逻辑，比如输出日志等。</p><p></p><p>针对query的初始化还是在session的同步线程中进行。一旦完成初始化，则将query状态写入到metastore，并向客户端返回async query id。客户端可以用这个id查询query的状态。async query id返回后，则表示完成此次查询的交互。这种模式下，如果语句是select，那么后续结果则无法回传给客户端。这种情况下我们推荐用户使用async query + select...into outfile的组合来满足需求。</p><p></p><h2>未来规划</h2><p></p><p>针对ELT混合负载，ByConity 0.2.0版本目前只是牛刀小试。后续的版本中我们会持续优化查询相关的能力，ELT为核心的规划如下：</p><p></p><h3>故障恢复能力</h3><p></p><p>算子SpillSort、Agg、Join 算子Spill；Exchange Spill 能力；Recoverability 容错恢复算子执行恢复：ELT任务运行时长较长时，中间 Task的偶发失败会导致整个Query失败，支持Task 级别重试可以极大地降低环境原因导致的偶发失败；Stage重试：当节点失败时，可以进行 Stage级别的重试；保存队列作业状态的能力；Remote Shuffle Service：当前业界开源的 shuffle service通常为Spark定制，没有通用的客户端，比如c++客户端。后续我们会补充这部分能力。</p><p></p><h3>资源</h3><p></p><p>计算资源可指定：用户可指定query需要的计算资源；计算资源预估/预占：可动态预估query需要的计算资源，并通过预占的方式进行调配；动态申请资源：当前worker均为常驻进程/节点。动态申请资源可以提高利用率；更细粒度的资源隔离：通过worker group或者进程级别的隔离，减少各query之间相互影响。</p><p></p><p>相关专题推荐：<a href=\"https://www.infoq.cn/theme/193\">《开源云原生数仓ByConity技术与实践全解》</a>\"</p>",
    "publish_time": "2023-09-25 10:15:12",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "使用 Ruby on Rails 构建 GitHub，每周做一次升级",
    "url": "https://www.infoq.cn/article/cKazWQfw5AxHobR4FcTI",
    "summary": "<p></p><blockquote>本文介绍了 GitHub 如何使用 Ruby on Rails 构建他们的应用程序，并且每周如何进行升级。文章中提到 GitHub 与社区合作来确保每个 Rails 发布版本在生产环境中运行，并强调了投资于 Rails 的重要性。</blockquote><p></p><p></p><p>自从成立以来，GitHub.com 一直是一个基于 Ruby on Rails 的单体应用。如今，该应用已经接近两百万行代码，每天有超过一千名工程师在上面协作。我们平均每天部署 20 次，几乎每周都会进行一次 Rails 的升级。</p><p></p><p></p><h3>每周升级 Rails</h3><p></p><p></p><p>每个周一，我们都会自动触发一个<a href=\"https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule\">计划好的 GitHub Action 工作流</a>\"，创建一个拉取请求，将我们的 Rails 版本更新到当天 Rails 主干分支的最新提交。我们所有的构建都在这个新版本的 Rails 上运行。一旦所有构建通过，我们会审核这些更改，并在第二天发布。从周一开始升级，用户就已经有一个打开的拉取请求，链接到此次 Rails 升级提出的更改和一个已经完成的构建。</p><p></p><p>这个过程与几年前我们进行 Rails 升级的方法大不相同。过去，我们花费数月的时间从自定义的 Rails 分支迁移到更新的稳定版本，然后我们维护了两个 Gemfiles，以确保我们能够与即将发布的版本兼容。现在，升级只需要不到一周的时间。（可以在这篇 <a href=\"https://github.blog/2018-09-28-upgrading-github-from-rails-3-2-to-5-2/\">2018 年的博文</a>\"中了解更多有关此过程的信息。）我们与社区密切合作，确保每个 Rails 发布版本在正式发布之前都在生产环境中运行。</p><p></p><p>使用最新版本的 Rails 有很多实际的好处：</p><p></p><p>我们为 GitHub 的开发人员提供最新版本的 Rails，确保他们可以使用所有最新的改进，包括更好的数据库连接处理、更快的视图渲染以及每天在 Rails 中发生的惊人工作，为他们提供最佳的工具版本。我们已经几乎删除了所有的 Rails 补丁。由于我们正在运行最新版本的 Rails，开发人员现在可以直接提交补丁到 Rails，无需等待 Rails 的更改。与团队共享 Rails 工作现在比以往任何时候都更容易！你不需要再告诉团队你在下一版中发现的 Rails 问题，而是可以在 Rails 上直接工作并在下周就看到结果！保持最新的依赖关系可以使我们拥有更好的安全姿态。由于我们每周进行升级，所以在出现安全咨询时添加升级是标准做法，不需要额外的工作。没有所谓的“大爆炸”迁移。由于每个 Rails 升级只包含少量更改，如果有不兼容性，更容易理解和深入挖掘。从一个未知的位置出现的意外更改是来自困难升级的最糟糕的问题。这种升级策略可以减轻这些问题。在主干分支中捕获错误并做出贡献可以加强我们的工程团队，并帮助我们的开发人员深入了解我们的应用程序及其依赖项。</p><p></p><h3>持续测试 Ruby</h3><p></p><p></p><p>为了确保应用在最新的 Ruby 版本上运行良好，我们采用了持续测试的方法。在 2022 年 2 月，我们升级到 Ruby 3.1，并开始使用并行构建来测试从 3.2-alpha 版本提交的 Ruby shas。当 CI 运行 GitHub Rails 应用程序时，会运行两个版本的构建：一个版本使用我们在生产环境中运行的 Ruby 版本进行构建，另一个版本则使用包括最新 Ruby 更改的最新 Ruby 提交进行构建。我们每周更新一次。</p><p></p><p>尽管我们每次更改都会构建 Ruby，但 GitHub 只会发布经过编号的 Ruby 版本到生产环境。这些构建帮助我们保持与即将到来的 Ruby 版本的兼容性，并为我们提供关于 Ruby 更改的见解。</p><p></p><p>2022 年 12 月初，CI 让我们有了信心，认为我们与即将发布的 Ruby 3.2 兼容。因此，我们可以使用部分生产流量测试 Ruby 发布候选版，并向 Ruby 团队提供我们发现的任何更改的见解。例如，我们可以复现由于<a href=\"https://bugs.ruby-lang.org/issues/19165\">关键字参数处理引起的分配</a>\"增加问题，并在 Ruby 3.2 发布之前得到修复。此外，我们还确定了在<a href=\"https://github.com/ruby/ruby/commit/7563604fb868d87057733f52d780d841fc1ab6bb\">应用</a>\" to_str 和 #to_i 时的微妙变化。由于我们不断升级，识别和解决这些问题已经成为标准惯例。</p><p></p><p>每周升级 Ruby 的过程使我们能够在一个月内从 Ruby 3.1 升级到 Ruby 3.2 的单体架构，毕竟，我们已经在生产中测试和运行过 Ruby 3.2！这是我们迄今为止完成的最快的 Ruby 升级。我们在 Ruby 3.2.1 发布当天打破了这个记录。</p><p></p><p>这个升级过程对我们与 Ruby 核心团队的合作证明非常宝贵。拥有这些构建的一个好的附带效果是，我们能够轻松地测试和分析我们自己的 Ruby 更改，然后再向上游建议。这使我们更容易识别我们自己应用程序中的回归，并更好地理解更改对生产环境的影响。</p><p></p><h3>我也应该这么做吗？</h3><p></p><p></p><p>GitHub 之所以能够频繁升级 Ruby 和 Rails，是因为具备了一定的工程成熟度。每周升级 Rails 需要一个全面的测试套件，许多优秀的工程师致力于维护和改进它。此外，我们还从拥有出色的测试环境和渐进式部署中获得信心。我们的测试套件很可能会捕捉到问题，如果没有，我们相信在部署之前会发现并解决它。</p><p></p><p>如果你拥有这些工具，你也应该每周升级 Rails，并使用最新的 Ruby 进行测试。GitHub 成为了更好的 Rails 应用程序，这使我们的团队能够进行我非常自豪的工作。</p><p></p><p>Ruby 专家 Eileen Uchitelle 在 2022 年的 <a href=\"https://www.youtube.com/watch?v=MbqJzACF-54\">Rails Conf Keynote</a>\" 中解释了为什么投资于 Rails 很重要：</p><p></p><p>归根结底，如果更多公司将框架视为应用程序的扩展，这将导致更高的韧性和稳定性。投资于 Rails 可确保您的基础不会在应用程序的重压下崩溃。将其视为应用程序中不重要的部分是一个错误，许多领导者都犯了这个错误。</p><p></p><p>感谢来自全世界的人们的贡献，使用 Ruby 比以往任何时候都更好。GitHub 和其他数百家公司一样，受益于 Ruby 和 Rails 不断改进。定期升级和投资于我们的框架是我们在 GitHub Ruby 架构团队上的工作的核心。我们始终感激 Ruby 社区，并很高兴我们能以一种改进我们的应用程序和工具以及为每个人改进它们的方式回馈。</p><p></p><p>作者介绍：</p><p>Adam Hess，软件开发者。</p><p></p><p>原文链接：</p><p>https://github.blog/2023-04-06-building-github-with-ruby-and-rails/</p>",
    "publish_time": "2023-09-25 12:06:07",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]