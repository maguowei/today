[
  {
    "title": "Java近期新闻：JDK 20进入Rampdown阶段，JDK 21专家组，Apache Tomcat，JakartaOne",
    "url": "https://www.infoq.cn/article/2ExYPtjbtxGvHCVqXw6y",
    "summary": "<p></p><h4>OpenJDK</h4><p></p><p>JEP 429，<a href=\"https://openjdk.org/jeps/429\">作用域值（孵化器）</a>\"，已从JDK 20的Proposed to Target状态<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2022-November/007225.html\">提升</a>\"为Target状态。这个<a href=\"https://openjdk.java.net/jeps/11\">正在孵化</a>\"的JEP，最初名为范围局部变量（孵化器，Extent-Local Variables），由<a href=\"https://wiki.openjdk.java.net/display/loom/Main\">Loom项目</a>\"赞助，提议在线程内部和线程之间共享不可变数据。这优于线程局部变量，尤其是在使用大量虚拟线程时。</p><p>&nbsp;</p><p>JEP 436，<a href=\"https://openjdk.org/jeps/436\">虚拟线程（第二次预览</a>\"），已从JDK 20的Proposed to Target状态<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2022-November/007223.html\">提升</a>\"为Target状态。在<a href=\"https://wiki.openjdk.org/display/loom/Main\">Loom项目</a>\"的支持下，该JEP基于JDK 19中提供的JEP 425，<a href=\"https://openjdk.org/jeps/425\">虚拟线程（预览版）</a>\"，提出了第二次的预览，以便有时间为该功能的演进提供更多的反馈和经验。需要注意的是，除了少量在JDK19中被固化的JEP 425 API外，本预览版本没有进行任何更改，因此没有在第二次预览中提出。</p><p>&nbsp;</p><p>JEP 437，<a href=\"https://openjdk.org/jeps/437\">结构化并发（第二个孵化器）</a>\"，在JDK 20中从Proposed to Target状态<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2022-November/007224.html\">提升</a>\"为Target状态。该JEP也是在<a href=\"https://wiki.openjdk.org/display/loom/Main\">Loom项目</a>\"的支持下，提议基于从JDK 19中提供的JEP 428，<a href=\"https://openjdk.org/jeps/428\">结构化并发（孵化器）</a>\"中重新孵化该特性，以便有时间提供更多的反馈和经验。唯一的变化是更新了 StructuredTaskScope 类，以支持在任务作用域中创建的线程继承作用域值。这简化了跨线程不可变数据的共享。</p><p>&nbsp;</p><p></p><h4>JDK 20</h4><p></p><p>JDK20<a href=\"https://jdk.java.net/20/\">早期访问构建版本</a>\"中的第<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-20%2B27\">27</a>\"版也已于上周发布，其中包括对第26版各种<a href=\"https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2020%20and%20%22resolved%20in%20build%22%20%3D%20b23%20order%20by%20component%2C%20subcomponent\">问题</a>\"的修复和<a href=\"https://github.com/openjdk/jdk/compare/jdk-20%2B22...jdk-20%2B23\">更新</a>\"。有关该版本的更多详细信息，请参阅<a href=\"https://jdk.java.net/20/release-notes\">发布说明</a>\"。</p><p>&nbsp;</p><p>根据JDK 20的<a href=\"https://openjdk.java.net/projects/jdk/20/#Schedule\">发布时间表</a>\"，Oracle Java平台组首席架构师<a href=\"https://www.linkedin.com/in/markreinhold\">Mark Reinhold</a>\"正式<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2022-December/007233.html\">宣布</a>\"JDK 20已进入Rampdown第一阶段。这意味着主线源代码库已经分支到JDK<a href=\"https://github.com/openjdk/jdk20/\">稳定代码库</a>\"，并且不会为<a href=\"https://openjdk.java.net/projects/jdk/20/\">JDK 20</a>\"添加额外的JEP。至此，计划于2023年3月发布的GA版本将最终包含如下七（7）个特性：</p><p>&nbsp;</p><p>JEP 429，<a href=\"https://openjdk.org/jeps/429\">作用域值（孵化器）</a>\"JEP 432，<a href=\"https://openjdk.org/jeps/432\">记录模式（第二次预览）</a>\"JEP 433，<a href=\"https://openjdk.org/jeps/433\">switch模式匹配（第四次预览）</a>\"JEP 434，<a href=\"https://openjdk.org/jeps/434\">外部函数和内存API（第二次预览）</a>\"JEP 436，<a href=\"https://openjdk.org/jeps/436\">虚拟线程（第二次预览</a>\"）JEP 437，<a href=\"https://openjdk.org/jeps/437\">结构化并发（第二个孵化器）</a>\"</p><p>&nbsp;</p><p>对于<a href=\"https://openjdk.java.net/projects/jdk/20/\">JDK 20</a>\"，鼓励开发人员通过<a href=\"https://bugreport.java.com/bugreport/\">Java缺陷数据库</a>\"报告缺陷。</p><p>&nbsp;</p><p></p><h4>JDK 21</h4><p></p><p>JSR 396、<a href=\"https://jcp.org/en/jsr/detail?id=396\">Java SE 21</a>\"上周提交，正式宣布JDK 21的六人专家组，分别是<a href=\"https://www.linkedin.com/in/siritter/\">Simon Ritter</a>\"&nbsp;（Azul Systems）、<a href=\"https://www.linkedin.com/in/jay-a/\">Jayaprakash Arthanareeswaran</a>\"（Eclipse 基金会）、<a href=\"https://www.linkedin.com/in/andrew-haley-3546112/\">Andrew Haley</a>\"&nbsp;（红帽）、<a href=\"https://www.linkedin.com/in/christoph-langer-764280208/\">Christoph Langer</a>\"（SAP SE）、&nbsp;<a href=\"https://www.linkedin.com/in/iris-clark-49159b13b/\">Iris Clark</a>\"（甲骨文）以及<a href=\"https://www.linkedin.com/in/briangoetz/\">Brian Goetz</a>\"（甲骨文）。 Clark和 Goetz将担任规范负责人。 其中值得<a href=\"https://openjdk.org/projects/jdk/21/spec/\">关注的日期</a>\"包括2023年6月至2023年8月的公开审查，以及2023年9月的GA版本发布。</p><p>&nbsp;</p><p>JDK 21<a href=\"https://jdk.java.net/21/\">早期访问构建版本</a>\"的<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-21%2B1\">第1版</a>\"也已于上周发布，其中包括最初的一组<a href=\"https://github.com/openjdk/jdk/compare/jdk-21%2B0...jdk-21%2B1\">版本更新</a>\"。</p><p>&nbsp;</p><p></p><h4>Spring框架</h4><p></p><p>SpringShell的2.1.4和3.0.0-M3版本<a href=\"https://spring.io/blog/2022/12/05/spring-shell-2-1-4-and-3-0-0-m3-are-now-available\">已经提供给</a>\"Java社区。2.1.4版构建在Spring Boot 2.7.6之上并提供了缺陷修复。3.0.0-M3版是构建在Spring Boot 3.0之上的第一个里程碑版本，它提供了缺陷修补和新的测试框架，以消除测试shell应用程序的传统艰巨任务，在这些任务中测试更复杂，也就是说，超出了方法目标的简单单元测试。有关这些版本的更多详细信息，请参阅<a href=\"https://github.com/spring-projects/spring-shell/releases/tag/v2.1.4\">2.1.4版本</a>\"和<a href=\"https://github.com/spring-projects/spring-shell/releases/tag/v3.0.0-M3\">3.0.0-M3版本</a>\"的发布说明。</p><p>&nbsp;</p><p>SpringTools 4.17.0<a href=\"https://spring.io/blog/2022/12/07/spring-tools-4-17-0-released\">已经发布</a>\"，其中包含对Spring Tools 4 for Eclipse 2022-12版本的更改。这个新版本还提供了对以下方面的实验性支持：Spring Boot版本验证，其中IDE将向Spring Boot项目提供更新的主要、次要或补丁版本的警报；Spring Boot升级支持，以协助将现有项目升级到更新的Spring Boot版本；以及特定于Spring的验证和重构，以指示是否可以或应该更改源代码中的某些内容，以使Spring项目与Spring中的最新建议或进步保持同步。有关该版本的更多详细信息，请参阅<a href=\"https://github.com/spring-projects/sts4/wiki/\">用户指南</a>\"。</p><p>&nbsp;</p><p></p><h4>Quarkus</h4><p></p><p>红帽（Red Hat）<a href=\"https://quarkus.io/blog/quarkus-2-14-3-final-released/\">发布</a>\"了Quarkus 2.14.3.Final，该版本对缺陷进行了修复，更新了文档，并将<a href=\"https://github.com/smallrye/jandex/blob/main/README.md\">SmallRye Jandex</a>\" 3.0.5、Stork 1.3.3和&nbsp;<a href=\"https://mina.apache.org/downloads-sshd.html\">Apache Mina SSHD</a>\"构件、 sshd-core 和 sshd-common 升级到了2.9.2版本。有关该版本的更多详细信息，请参阅<a href=\"https://github.com/quarkusio/quarkus/releases/tag/2.14.3.Final\">发布说明</a>\"。</p><p>&nbsp;</p><p>Quarkus 3.0.0的<a href=\"https://quarkus.io/blog/quarkus-3-0-0-alpha2-released/\">第二个alpha版本</a>\"提供了Jakarta EE 10流的第二次迭代，该迭代正在进行中，计划于2023年1月底发布下一个alpha版本。Quarkus 3.0.0.Alpha2基于Quarkus 2.14.3.Final。有关该版本的更多详细信息，请参<a href=\"https://github.com/quarkusio/quarkus/releases/tag/3.0.0.Alpha2\">阅变更日志</a>\"。</p><p>&nbsp;</p><p></p><h4>Open Liberty</h4><p></p><p>IBM<a href=\"https://openliberty.io/blog/2022/12/06/22.0.0.13-beta.html\">发布</a>\"了Open Liberty 22.0.0.13-beta，支持：Jakarta EE 10规范<a href=\"https://jakarta.ee/specifications/authentication/3.0/\">Jakarta Authentication 3.0</a>\"、<a href=\"https://jakarta.ee/specifications/authorization/2.1/\">Jakarta Authorization 2.1</a>\"、<a href=\"https://jakarta.ee/specifications/security/3.0/\">Jakarta Security 3.0</a>\"和<a href=\"https://jakarta.ee/specifications/faces/4.0/\">Jakarta Faces 4.0</a>\"；即将发布的<a href=\"https://microprofile.io/\">MicroProfile</a>\"&nbsp; 6.0；以及配置首次故障数据捕获（FFDC）日志以在FFDC日志文件达到指定期限后自动清除FFDC日志的能力。</p><p>&nbsp;</p><p>IBM还<a href=\"https://openliberty.io/blog/2022/12/07/relicense-eplv2-proposal.html\">提议</a>\"根据<a href=\"https://www.eclipse.org/legal/epl-2.0/\">Eclipse公共许可证2.0版</a>\"重新授权Open Liberty，以便Open Liberty可以继续作为MicroProfile和Jakarta EE规范的兼容实现以做出贡献。为Java社区创建了一个GitHub<a href=\"https://github.com/OpenLiberty/open-liberty/issues/23585\">议题</a>\"，以提供反馈并监控进度。</p><p>&nbsp;</p><p></p><h4>GraalVM Native Build Tools</h4><p></p><p>在通往1.0版本的道路上，<a href=\"https://labs.oracle.com/\">Oracle实验室</a>\"发布了<a href=\"https://github.com/graalvm/native-build-tools/blob/master/README.md\">Native Build Tools</a>\" <a href=\"https://github.com/graalvm/native-build-tools/releases/tag/0.9.19\">0.9.19</a>\"版本，这是一个GraalVM项目，由与GraalVM Native Image互操作的插件组成。这个最新版本提供了：修复了编译任务， nativeCompile ，每当本机运行参数发生变化时，它就会过时；修复了默认情况下无法从Maven Central下载的GraalVM元数据存储库的问题；并从工作流中删除了 dev 版本。有关该版本的更多详细信息，请参阅<a href=\"https://graalvm.github.io/native-build-tools/latest/index.html#changelog\">变更日志</a>\"。</p><p>&nbsp;</p><p></p><h4>Apache软件基金会</h4><p></p><p><a href=\"https://tomcat.apache.org/\">Apache Tomcat</a>\"的<a href=\"https://www.mail-archive.com/announce@apache.org/msg07803.html\">10.1.4</a>\"和<a href=\"https://www.mail-archive.com/announce@apache.org/msg07788.html\">9.0.70</a>\"&nbsp;版本提供了显著的变化，其中包括： WebappLoader 类的重构，因此如果配置为在加载类时使用转换器，则它仅对Jakarta EE的迁移工具具有运行时依赖性（仅10.1.4版本）；修复了当HTTP/2流被重置时当前活动流计数没有减少的问题；以及<a href=\"https://commons.apache.org/proper/commons-daemon/\">Apache Commons Daemon</a>\" 1.3.3的更新。有关这些版本的更多详细信息，请参阅<a href=\"https://tomcat.apache.org/tomcat-10.1-doc/changelog.html\">10.1.4</a>\"版和<a href=\"https://tomcat.apache.org/tomcat-9.0-doc/changelog.html\">9.0.70</a>\"版的发布说明。</p><p>&nbsp;</p><p>Apache Tomcat 11.0.0（alpha）的<a href=\"https://www.mail-archive.com/announce@apache.org/msg07789.html\">第一个里程碑版本</a>\"提供了：与<a href=\"https://jakarta.ee/specifications/servlet/\">Jakarta Servlet</a>\",&nbsp;<a href=\"https://jakarta.ee/specifications/pages/\">Jakarta Server Pages</a>\"和<a href=\"https://jakarta.ee/specifications/expression-language/\">Jakarta Expression Language</a>\"规范的当前开发版本保持一致；BASIC认证现在默认使用UTF-8；从字节到字符的转换现在将触发异常，而不再是替换给定编码的无效字节序列。有关该版本的更多详细信息，请参阅<a href=\"https://tomcat.apache.org/tomcat-11.0-doc/changelog.html\">变更日志</a>\"。</p><p>&nbsp;</p><p>用于Jakarta EE的<a href=\"https://tomcat.apache.org/download-migration.cgi\">Apache Tomcat Migration</a>\"工具1.0.6版本已经发布，其特性包括：正确处理1.0.5版本中引入的 javax.annotation 包的回归；并允许并行使用 ClassConverter 类。有关该版本的更多详细信息，请参阅<a href=\"https://github.com/apache/tomcat-jakartaee-migration/blob/main/CHANGES.md\">变更日志</a>\"。</p><p></p><h4>Hibernate</h4><p></p><p>Hibernate ORM 6.1.6.Final也已发布，提供了缺陷修复和性能改进，例如：在<a href=\"https://hazelcast.com/glossary/hibernate-second-level-cache/\">二级缓存</a>\"中发现引用时，初始化实体，避免不必要地调用属性setter方法；一个改进的方法，用于检查HQL查询结果的重复项，从而减少了内存中ORM处理的数量；以及JDK-8180450（<a href=\"https://bugs.openjdk.org/browse/JDK-8180450\">二级超级缓存问题不能很好地扩展</a>\"）中所描述的<a href=\"https://redhatperf.github.io/post/type-check-scalability-issue/\">性能限制缓解措施</a>\"。</p><p>&nbsp;</p><p></p><h4>Eclipse Vert.x</h4><p></p><p>针对在4.3.5版本中发现的大量缺陷报告，Eclipse Vert.x 4.3.6<a href=\"https://vertx.io/blog/eclipse-vert-x-4-3-6/\">发布</a>\"了新特性，例如：允许多个正则表达式在CORS中允许下游项目保留他们的配置（ vertx-web 模块）；对Hazelcast 4.2.6进行依赖项升级（ vertx-hazelcast 模块）；并为 Tuple 接口（ vertx-sql-client 模块）中的 of() 方法添加了类型检查。有关该版本的更多详细信息，请参阅<a href=\"https://github.com/vert-x3/wiki/wiki/4.3.6-Release-Notes\">发布说明</a>\"。</p><p>&nbsp;</p><p></p><h4>Resilience4j</h4><p></p><p>Java容错库<a href=\"https://resilience4j.readme.io/\">Resilience4j</a>\"的<a href=\"https://github.com/resilience4j/resilience4j/releases/tag/v2.0.2\">2.0.2</a>\"和<a href=\"https://github.com/resilience4j/resilience4j/releases/tag/v2.0.1\">2.0.1</a>\"版本已经发布，其特性包括：修复了未在 recordResultPredicate 属性上打开的 CircuitBreaker 、CheckedSupplier 和 CheckedFunction 接口的相应装饰器实现；通过 resilience4j-spring-boot3 和 resilience4j-spring6 构件支持Spring Boot 3.0；即使配置文件中没有实例条目，也可以应用Spring Boot定制程序。有关Resiliece4j的更多详细信息，请参阅<a href=\"https://www.infoq.com/news/2022/12/resilience4j-2-0-0/\">InfoQ的新闻报道</a>\"。</p><p>&nbsp;</p><p></p><h4>JDKMon</h4><p></p><p><a href=\"https://github.com/HanSolo/JDKMon\">JDKMon</a>\" <a href=\"https://github.com/HanSolo/JDKMon/releases/tag/17.0.41\">17.0.41</a>\"版本是一个用于监控和更新已安装JDK的工具，已于上周发布。这个新版本由Azul首席工程师<a href=\"https://de.linkedin.com/in/gerritgrunwald\">Gerrit Grunwald</a>\"创建，支持：对Gradle 7.6及其他版本的依赖升级；以及一个单独的GraalVM构建下载对话框，包括<a href=\"https://gluonhq.com/\">Gluon</a>\"、<a href=\"https://github.com/graalvm/mandrel/blob/default/README.md\">Mandrel</a>\"和<a href=\"https://bell-sw.com/liberica-native-image-kit/\">Liberica Native Image Kit</a>\"&nbsp;（NIK）。</p><p>&nbsp;</p><p></p><h4>Ktor</h4><p></p><p>JetBrains<a href=\"https://released/\">发布</a>\"了Ktor的2.2.1和2.2.0版本，这是一个用于创建微服务和Web应用程序的异步框架，其中包括：OpenAPI文档生成；用于创建自定义客户端插件的新API，以通过一组处理程序访问处理请求和响应的不同阶段；一个新的 RateLimit 插件，用于设置传入请求的速率限制；以及用于序列化/反序列化数据对象的新ProtoBuf<a href=\"https://ktor.io/docs/serialization.html?_ga=2.153931448.1066270626.1670799259-702398823.1656974717&amp;_gl=1*u7b6c5*_ga*NzAyMzk4ODIzLjE2NTY5NzQ3MTc.*_ga_9J976DJZ68*MTY3MDc5OTI1OC42My4xLjE2NzA3OTk0MTguMC4wLjA.#register_protobuf\">序列化器</a>\"。</p><p>&nbsp;</p><p></p><h4>JakartaOne Livestream 2022</h4><p></p><p>第四届<a href=\"https://jakartaone.org/2022/\">JakartaOne Livestream 2022</a>\"年年度会议于上周举行，来自Java社区的演讲嘉宾就以下主题进行了<a href=\"https://jakartaone.org/2022/#speakers\">演讲</a>\"：Jakarta EE Core Profile；MicroProfile 6.0；Piranha Cloud，Testcontainers；Jakarta NoSQL和Cosmos DB；和云原生Java。虚拟会议由Jakarta EE项目经理<a href=\"https://ca.linkedin.com/in/tanja-obradovic-095604\">Tanja Obradovic</a>\"、Jakarta EE高级营销经理<a href=\"https://www.linkedin.com/in/shabnam-mayel/\">Shabnam Mayel</a>\" 和Jakarta EE开发人员倡导者&nbsp;<a href=\"https://se.linkedin.com/in/ivargrimstad\">Ivar Grimstad</a>\"主持，会议还包括Eclipse基金会执行董事<a href=\"https://www.linkedin.com/in/mikemilinkovich/\">Mike Milinkovich</a>\"的主题演讲，以及代表Payara、Tomitribe、Oracle、Microsoft和IBM的Java知名人士进行的行业主题演讲。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/12/java-news-roundup-dec05-2022/\">https://www.infoq.com/news/2022/12/java-news-roundup-dec05-2022/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/vl9UfPTm6oOPAUgYpN5c\">InfoQ 2022 年趋势报告：Java 篇</a>\"</p><p><a href=\"https://www.infoq.cn/article/ZYvBqLEPNaY4FvJjyopx\">Java 近期新闻：JDK 20 的 JEP 提升为 Targeted 状态，亚马逊云科技推出 Lambda SnapStart 特性</a>\"</p>",
    "publish_time": "2022-12-28 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "复杂查询响应速度提升10+倍，度言软件基于 Apache Doris 实时数仓建设实践",
    "url": "https://www.infoq.cn/article/i4KDKeZwASbRcSALDi1D",
    "summary": "<p></p><blockquote>作者 | 杭州度言软件大数据团队编辑整理 | SelectDB</blockquote><p></p><p></p><p>杭州度言软件有限公司（度言软件）成立于2014年，是信贷不良资产处置技术服务供应商，以“智能科技赋能不良资产处置，推动贷后行业合规高效发展”为使命，运用云通讯、大数据、人工智能等智能科技为信贷不良资产处置业务赋能，提供贷后管理通信能力支撑，实现了催收作业的智能化管理，客户群体为银行、消费金融公司、AMC 等金融机构和为这些机构提供人力资源外包服务的相关公司，目前已拥有 2000 多家企业客户。</p><p></p><p>度言软件以围绕信贷不良资产案件高效流转管理为目的核心，从机构管理、团队管理、坐席管理、外呼作业、调解法诉等环节入手，帮助客户构建数智化的业务管理体系，以数字化系统提升管理效能、以智能化工具赋能处置作业，打通金融机构、外包服务公司、司法系统等多方的业务系统，并按照监管要求对外呼行为、录音文件、沟通记录等案件相关数据进行记录、汇集、稽核、统计和分析，具有海量账号同时登陆、数据请求高并发、多来源数据汇总接入的特点要求。</p><p></p><h1>业务需求</h1><p></p><p></p><p>2021 年之前，度言软件旗下产品的数据需求主要由传统数据库 MySQL、MongoDB、ElasticSearch 为主的技术架构来实现，近两年随着业务不断发展带而来数据量的高速增长，传统的数仓技术架构已初显瓶颈，难以满足客户日益丰富多样化的数据及分析需求。为了给客户提供更优质的服务体验，度言软件亟需对现有的技术架构做出优化和重构。</p><p></p><h1>早期架构及痛点</h1><p></p><p></p><h2>数仓架构 1.0 版本</h2><p></p><p></p><p>初创期间，由于公司业务量相对较少，主要还是以 OLTP 业务和少量的业务报表服务为主，并且对于数据分析方面的需求也很少，仅通过传统的数据库基本就能满足早期的业务数据需求。数仓架构 1.0 如下图所示：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/99/99bd91d4a88ebe985403b86270843e7a.png\" /></p><p></p><h2>数仓架构 2.0 版本</h2><p></p><p></p><p>随着公司业务的不断扩展，数据体量也出现极速增长的态势，业务侧对于数据分析方面的需求也逐渐多了起来，为此我们成立了专门的大数据团队，为搭建新的数仓及业务数据分析需求进行服务。如下图所示为数仓架构 2.0 ：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/7e/7ef27b959bcb0486c0e88f68e7d9ee0f.png\" /></p><p></p><p>数仓架构 2.0 版本是基于 MaxCompute + Hologres/MySQL 来搭建的。数据来源主要有 MySQL 和 <a href=\"https://xie.infoq.cn/article/7565f826ac0dea0b1989c3572\">MongoDB</a>\" 的业务数据以及埋点日志数据；数据首先采集到数据总线 DataHub 中，后经过 DataHub 直接导入到 MaxCompute，MaxCompute 作为一个离线数仓，我们将其进行了传统的数仓分层；数据的加工处理和分析计算主要在离线数仓中进行，并将计算好的结果导出到 MySQL中，来对接 QuickBI 展示报表。此外，我们还尝试了将 Hologres 用作实时数仓，作为 MongoDB 的替换方案，用于业务上的查询系统。</p><p></p><h2>早期架构存在的问题：</h2><p></p><p></p><p>响应速度较慢。MySQL 对于大表的聚合计算并不友好，响应速度较慢。产品侧要求数据查询响应时间在 5 秒以内，虽然我们也基于 MySQL 进行了许多优化，但优化效果十分有限，仍无法达到 5s 的响应要求；我们甚至尝试了直接用 MaxCompute 对接 QuickBI，希望基于 MaxCompute 的查询加速和 QuickBI 的缓存来帮助我们解决问题，然而结果并不理想。维系维度表成本高、难度大。 离线数仓在数据同步的时效性上并不占优势(每 5 分钟进行一次批量同步)，因此不太适合数据频繁更新和删除的场景，同时也给维度表的维护带来了额外的工作量。在数据更新和删除场景中，我们需要定期通过过滤和去重来保持数据的一致性，而事实上，大多时候需要报表数据实时关联维度表，这让我们直接放弃了在离线数仓中维系维度表的方案。不支持高并发点查询场景。 原实时数仓虽然可以满足我们对数据分析的部分性能要求，但其对高并发的点查场景并不太友好，不管是采用列式存储还是行级存储建表，优化之后的响应时长在 500 毫秒左右，综合来看性价比不算太高。</p><p></p><h1>解决思路</h1><p></p><p></p><p>为了解决上述问题，我们希望理想数仓能具有如下特性：</p><p></p><p>实现一站式实时数仓，能同时满足多种不同业务数据需求，大大简化大数据架构体系；可同时支持 OLAP，Ad-hoc 和高 QPS 点查场景；数据接入友好，写入即可见，对数据增删改和聚合等都有较好的支持；架构简单，运维部署和维护简单，有较好的监控体系。</p><p></p><h1>技术选型</h1><p></p><p></p><p>在 2022 年 3 月份，我们对市场上主流的的几款即席查询数据库进行了调研，调研中我们发现每个产品只能满足某 1 个或几个特定的使用场景，没有一个产品可以完全满足所有的选型要求，而同时采用多个产品，将大大增加开发运维成本，同时也会使架构变得更加庞大复杂，这并不符合我们对理想数仓的要求。</p><p></p><p>正在这时，我们从开源社区、技术媒体等渠道了解到了<a href=\"https://github.com/apache/doris\"> Apache Doris</a>\" ，经初步调研，我们发现 <a href=\"https://www.infoq.cn/article/lbsiDBw2R3HWYDiezOMH\">Doris</a>\" 基本可以满足我们对理想数仓的所有要求。接着我们对 Doris 展开了深入调研，并使我们最终决定使用 Doris：Doris 架构非常简单，只有 FE 和 BE 两类进程，这两类进程都可以进行横向扩展，单集群可以支持到数百台机器、数十 PB 的存储容量，并且这两类进程通过一致性协议来保证服务的高可用和数据的高可靠。这种高度集成的架构设计极大的降低了分布式系统的运维成本，同时也不需要依赖于 Hadoop，避免了我们需要投入成本来额外部署 Hadoop 集群。</p><p></p><h1>基于 Doris 的新数仓架构设计</h1><p></p><p></p><p>最初使用 Doris 的初衷是替换部分 MySQL 数据量较大的报表，基于 MySQL 的查询约需要几十秒的响应时间，在替换为 Doris 后，查询性能有了显著提升，几秒内即可返回结果，最长的 SQL 执行时间大概在 8 秒左右，速度相较于之前提升了8 倍。Doris 的初步应用就给了我们一个意外的惊喜，因此我们决定使用 Doris 完全替换掉早期数仓中的 MySQL，在这使用过程中，我们又发现 Doris 远比我们想象的要强大，目前已将客户报表及公司内部运营决策数据全部迁移至 Apache Doris，并计划用 Apache Doris 来替换 MongoDB 和 ElasticSearch，用于业务上高 QPS 的点查场景。以下是基于 Doris 的新数仓架构设计及使用情况：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/09/09bf7223d4167488e9279b49496a2798.png\" /></p><p></p><h2>数据建模：</h2><p></p><p></p><p>我们在业务上使用最多的是 Unique 模型和 Aggregate 模型，这两种模型基本能够满足业务需求。</p><p></p><p>Unique 模型主要用于维度表和业务表(原始表)的接入，确保数据导入过程中的一致性。Aggregate主要用于报表数据的导入，Aggregate 分为 Key (维度列) 和 Value（指标列），Value 列支持四种聚合方式：sum ,replace,max,min。当前主要以replace 聚合方式为主，方便统计数据重复导入和修正结果，后续也会尝试更多的方式来充分发挥 Doris 的性能。</p><p></p><h3>数据接入：</h3><p></p><p></p><p>使用 Flink-Doris-Connector 进行实时导入：主要用于业务数据的导入，基于MySQL 的 Binlog 日志写入到 Kafka 后，通过 Flink 解析加工后准实时写入 Doris。使用 DataX 进行离线导入：主要用于对接离线数仓已计算后的报表数据。</p><p></p><h3>数据开发：</h3><p></p><p></p><p>目前 Doris 主要以提供终端查询为主，复杂的 SQL 开发任务运行比较少，为尽可能减少 Doris 在数据加工方面的资源消耗，当前仅有报表集群在凌晨执行少量的 SQL 任务，主要以 Doris SQL 通过 insert into 的方式来导入。</p><p></p><h3>数据管理：</h3><p></p><p></p><p>Doris 支持将当前数据以文件的形式通过 Broker 备份到远端存储系统中，后可以通过恢复命令从远端存储系统中将数据恢复到任意 Doris 集群。通过该功能，Doris 可支持定期对数据进行快照备份，也可以通过该功能在不同集群间进行数据迁移。我们也会定期将集群数据备份到阿里云 OSS 上，作为备用数据恢复方案。另外，在这期间我们对 Doris 集群进行了一次拆分，将报表集群和业务上的高并发查询集群分开，采用了 Doris 的数据备份和迁移功能。</p><p></p><h3>监控和报警：</h3><p></p><p></p><p>我们使用官网推荐的 Prometheus 和 Grafana 进行监控项的采集和展示，Doris 本身提供了丰富的监控指标和标准监控模版，可以非常便捷地对 Doris 集群使用情况进行监控和报警。</p><p></p><p>另外，为了进一步对慢 SQL 进行优化，我们还部署了审计日志插件，对于特定用户和特定的慢 SQL 进行优化和资源限制。如下是我们日常使用中的一些指标：</p><p></p><p>慢 SQL 查询：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/64/64760aa7fa882aef9da731e07c94ec39.png\" /></p><p></p><p>对于一些长文本 SQL，无法完全展示，可以进一步查看fe.audit.log。</p><p></p><p>主要查询统计指标：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/aa/aa9e44bce5558508d0f24d273509b6cd.png\" /></p><p></p><h1>优化实践：</h1><p></p><p></p><h2>提高并发</h2><p></p><p></p><p>我们考虑在资源给定的情况下，如何最大程度地提高并发。刚开始引入 Doris 集群的时候，我们尝试对复杂 SQL 进行压测（SQL 层面优化已完成），但始终无法达到预期的压测效果。后来我们尝试调低 parallel_fragment_exec_instance_num 的值，顺利完成了压测目标。</p><p></p><p></p><blockquote>需要说明的是：parallel_fragment_exec_instance_num 指的是 Scan Node 在每个 BE 节点上执行实例的个数，相当于在整个查询计划执行过程中的并发度，调高该参数可以提升查询效率，但同时也会增加更多机器资源的消耗。因此在资源有限且查询耗时满足业务需求的情况下，通过调低参数来节省单个 SQL 的资源消耗，有助于提高并发表现。另外，我们通过 Doris 社区了解到，在即将发布的新版本中将实现参数自动设置，无需进行手动调整。</blockquote><p></p><p></p><p>如下图，我们可以看到，在参数设置为 16 的时候，异常率高达 82.84%，并且期间还出现了 BE 宕机重启，将参数调低至 8 后，异常率也同步降低到了 27.66%。最后我们将参数设置为最小值 1 后，异常率为 0，查询响应也能达到预期目标。</p><p></p><p>说明：测试环境已重新取数，配置较低，数据仅用来说明 parallel_fragment_exec_instance_num 变动所带来的效果。</p><p></p><p>当参数调整为 1：parallel_fragment_exec_instance_num = 1</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/59/59d5f3a73af0fb26595d155974c05b9c.png\" /></p><p></p><p>当参数调整为 8：parallel_fragment_exec_instance_num = 8</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/cd/cdb776a827f55e405cad098f6bf6033e.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/38/381617b229938f501da88a77d7eb465f.png\" /></p><p></p><p>当参数调整为 16：parallel_fragment_exec_instance_num = 16</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/03/0391526a20553cbba246161a9906699c.png\" /></p><p></p><h2>BE 内存问题</h2><p></p><p></p><p>最初我们使用的是 Doris 0.15 的<a href=\"https://xie.infoq.cn/article/2a11160bfc7e86b8412752cef\">版本</a>\"。由于刚开始处于测试阶段，Doris 集群配置比较低或参数配置的不合理，当某些 SQL 扫描数据量较大时，就可能因为内存问题导致 BE 宕机。</p><p></p><p>在向社区咨询后，了解到 Supervisor 是用 Python 开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台 Daemon，并监控进程状态，异常退出时能自动重启，因此我们参照官网给出的例子直接用 Supervisor 对 Doris 的 FE 和 BE 进程进行管理。</p><p></p><p>但是在运行了一段时间后，新的问题又出现了(已升级到 1.1.0 版本)。Doris 的 BE 节点内存一直在缓慢上升状态，并且达到了设置的最大内存参数 80% 后仍在继续上涨。后经分析发现 BE 存在内存泄漏问题，因此设置的参数并未生效。为此，我们将 Supervisor 切换为 Systemd 来守护 FE、BE 进程，限制整个节点的内存使用上限。不过在 Doris 1.1.3 推出之后，此问题已得到彻底的修复。</p><p></p><h2>资源占用</h2><p></p><p></p><p>在迁移完新集群后，我们发现通过 Flink-Doris-Connector 数据导入占用非常高的集群资源，虽然设置了按批次写入(每 3s 写入一次 )，以限制数据的导入频率，但集群资源的占用仍未得到较大改善。因此我们在集群资源和数据实时可见性方面做了权衡，介于我们对数据实时性的要求相对不是太高，所以我们将每 3s 写入一次改为每 10s 或 20s 写入一次，调整写入时间后，集群的 CPU 资源占用下降明显，得到改善。</p><p></p><h1>应用现状</h1><p></p><p></p><p>目前度言软件有 2 个 Doris 集群，1 个集群用作线上业务的查询系统，主要是应对高 QPS 的点查场景，我们将原先基于业务库 MySQL 和 MongoDB 的查询迁移至 Doris，一方面减少了业务库的读写压力，同时也提高了用户查询服务的使用体验。在 Doris 中，最复杂的查询在 1 秒以内即可响应，响应速度提升了十几倍；另外 1 个集群主要用作即席查询(AD-Hoc Query)和报表分析，具体包括公司内部使用的所有报表和一些临时查询、客户报表、数据实时大屏。</p><p></p><p>总而言之，使用 Doris 替换了部分业务使用场景后，用户在产品上的使用体验有了进一步得到提升，页面打开更加流畅，原本因为查询慢而不能实现的功能，当前已经实现并上线使用。同时在资源成本上也减轻了 MySQL 和 MongoDB 数据库的压力，不需要频繁进行升配和磁盘升级。</p><p></p><h1>总结规划</h1><p></p><p></p><h2>效果总结</h2><p></p><p></p><p>Doris 完美覆盖了原本需要多个技术栈才能实现的业务场景，极大地简化了大数据的架构体系。Doris 对 Join 支持较好，因此我们选择了将维度表放到 Doris 中进行维护，相较于之前在离线数仓中进行维护，明显地提高了开发的效率，并降低了数据出错的可能性，满足了业务上对维度表近实时更新的需求。Doris 支持 MySQL 协议和标准 SQL，开发人员学习成本低，上手简单，可以快速将原先的业务迁移至 Doris 上来。Doris 社区活跃，版本迭代速度快。在遇到任何问题时，都可以向社区求助，<a href=\"https://cn.selectdb.com/\">SelectDB</a>\" 为 Apache Doris 组建了一支全职专业的技术支持入队，24H 内即可得到社区的响应回复。</p><p></p><h2>未来规划</h2><p></p><p></p><p>到目前为止，基于 Doris 的实时数仓搭建已基本完成，但我们对 Doris 的进一步尝试才刚刚开始，比如 BE 的多磁盘部署，物化视图的使用，Doris-On-ES，Doris 多租户和资源划分等。</p><p></p><p>此外，我们也希望 Doris 未来能对以下功能进行进一步优化：</p><p></p><p>Flink-Doris-Connector 能支持单 Sink 同时写入多张表，不需要再通过分流后多个 Sink 写入。物化视图能够支持多表 Join，不再局限于单表。进一步优化数据的底层 Compaction，在保证数据可见性的同时能够尽可能降低资源消耗。Doris-Manager 提供对慢 SQL 的优化建议以及表信息收集，对于不合理的建表进行一定的提示。</p><p></p><p>从 3 月份使用 Doris 以来，我们一直都和 Doris 社区保持着密切的联系，后续我们也将继续围绕 Doris 作为实时数仓应用到更多的业务使用场景中，对于使用中遇到的问题和优化的方案，我们也会持续和社区保持热切联系，为社区进步贡献我们的一份力量。</p>",
    "publish_time": "2022-12-28 10:24:54",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]