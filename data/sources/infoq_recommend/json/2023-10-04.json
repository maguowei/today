[
  {
    "title": "WebAssembly 如何吞噬数据库",
    "url": "https://www.infoq.cn/article/acKp2Z82dgPzAJ0uUO0f",
    "summary": "<p>用户定义函数 （UDF） 一直都是数据库系统中的固有功能，允许用户扩展数据库的内置功能，用来补充SQL语句，使其用起来更方便。尽管传统的 UDF 是一个强大的工具，但开发人员经常被迫使用自己不熟悉的编程语言（这些编程语言是数据库独有的）。然而，随着具有沙盒安全控制和广泛语言支持（WebAssembly）的可移植、低级二进制格式的诞生，行业出现了我们乐见的一种新的UDF 实现。</p><p>&nbsp;</p><p>例如，Singlestore 的代码引擎为用户提供了使用Wasm代码创建 UDF 和表值函数 （TVF） 的能力，而InfinyOn和RedPanda让开发人员能够使用 Wasm操作数据流。我们自己的Extism是一个通用插件系统，在一个演示中展示了使用 Wasm UDF 扩展 SQLite3的能力。让我们在本文中更深入地了解驱动这个趋势的因素，并谈谈对未来的一些想法和思考。</p><p></p><h2>更多语言支持</h2><p></p><p></p><p>为UDF创建任务提供广泛的编程语言支持，可以使数据库提供商更广泛地接触到许多开发人员社区，从而扩大市场。另一方面，数据库用户希望用他们最喜欢、对他们而言更高效的编程语言编写 UDF。因此，对数据库创建者和使用者来说，更多的语言支持显然是双赢的，那么为什么过去我们对UDF语言的支持如此有限呢？时间和资源约束是最有可能的因素。</p><p></p><p>如果没有针对指定语言的通用的运行环境和执行模板，数据库供应商将需要构建/集成和维护各种语言运行环境，以提供 Wasm 的广泛语言支持。这是一项复杂且耗时的任务，因此需要进行取舍，显而易见，选择一种广泛使用的通用编程语言（例如JavaScript）或创建一种特定于领域的语言（DSL）是更合适的选项。</p><p>&nbsp;</p><p>对于前者，供应商将他们的UDF引擎的成功与所选择的语言联系起来，对于后者，他们也做了同样的事情，但由于强加的学习曲线和缺乏可转移的技能，也给产品采用带来了更多的阻力。</p><p>&nbsp;</p><p>我们很高兴地说，是时候吃你的UDF蛋糕了。在撰写本文时，有超过10种语言直接针对Wasm，由于未来有更多的语言能够这样做，数据库平台可以在几乎不需要增量工作的情况下获得这些额外的语言支持。</p><p></p><h2>安全</h2><p></p><p></p><p>除了支持各种语言运行环境，数据库提供者还必须确保适当的沙盒控制能力，以便主机系统（即数据库）免受任何意外或恶意的副作用。</p><p></p><p>Wasm特别适合这种情况，因为运行时被设计为在沙箱环境中执行代码，默认情况下对主机系统资源的访问受到限制。有了这种内置的隔离，数据库提供商可以花更少的时间来运行自己的安全运行时，而有更多的时间在Twitter上展示自己。</p><p></p><h2>性能和便携性</h2><p></p><p></p><p>Wasm代码最大的特性是占用空间小，因此可以很容易地对数据进行计算，并且接近原生的执行速度使其非常适合复杂的数据工作负载。</p><p>&nbsp;</p><p>数据集日益庞大，使得在数据库和应用程序之间来回传输数据进行处理变得繁琐和昂贵。除了由这种工作流造成的额外延迟之外，每个连接到数据库的新应用程序都会增加额外的故障点，与数据驻留相关的问题都使得直接在数据旁边运行Wasm非常有吸引力。能够将数据保存在它所在的地方，并将（至少部分）应用程序带到它上面，对于不明确和复杂的监管环境来说，这一简化的意义重大。</p><p>&nbsp;</p><p>此外，将计算引入数据的能力消除了系统对许多微服务的需求——取而代之的是在数据库中运行这些微服务!</p><p>&nbsp;</p><p>就可移植性而言，为什么数据库用户要一遍又一遍地针对不同的主机数据库实现UDF呢?编写一次，并在任何数据库的任何地方运行！UDF的一个传统优点是它可以跨SQL查询重用，但为什么要将可重用性限制在一个数据库平台上呢？通过混合使用Wasm，UDF重用的范围理论上可以扩展到任何支持Wasm运行时以及主机功能的标准化接口的数据库上。</p><p></p><p>在实践中，这需要跨数据库提供者的生态系统进行某种程度的协作，或者需要社区努力将各种接口虚拟化成一个公共标准，但这种可能性和相关的好处都是可预期的。</p><p></p><h2>其他想法和注意事项</h2><p></p><p></p><p>Wasm显然是UDF的力量倍增器，但是让我们讨论一下应该考虑的一些设计和实现方面的话题。</p><p></p><h3>主机界面和设施</h3><p></p><p></p><p>数据库提供程序必须支持一组导入和导出，这些导入和导出将作为数据库和Wasm UDF之间交互的基础。如上所述，如果接口能够标准化，将有利于整个生态系统。WASI SQL Embedding就是这样一个例子，它提出了一种将WASM模块作为扩展嵌入到SQL数据库中的标准。</p><p>&nbsp;</p><p>设计高质量的语言支持和库对于成功至关重要，因为UDF创建者将需要这样的支持来实现其实现目标。例如，Python开发人员希望NumPy可以用于分析工作。数据库提供者应该考虑在主机级别包含这种支持，特别是出于性能原因而需要本地扩展时。这样做使用户可以访问必要的库，而不必强制将它们直接编译到Wasm UDF中，因为这会增加模块本身的大小。</p><p>&nbsp;</p><p>如果可能的话，应该围绕任何导入提供特定于语言的包装器，以提供惯用语言支持。看看像Extism这样的开源项目，它为创建这些类型的实用程序的团队提供了一个良好的开端。</p><p></p><h3>事务隔离/完整性</h3><p></p><p></p><p>大多数生产环境的数据库已经在事务中运行UDF，允许在发生异常时进行无缝回滚，并且不需要在突变代码本身中实现故障补偿。也就是说，考虑事务如何适应Wasm口味的UDF及其世界观是很重要的，而且仍然是“留给读者的练习”，需要数据库实现者来解决。</p><p></p><h3>可观察性和验证</h3><p></p><p></p><p>数据库提供者和UDF创建者需要什么工具来观察和检查UDF的性能，并在意外发生时调试它们?在生态系统中，多租户可观察性是一个未得到充分满足的需求，应该仔细考虑。</p><p>&nbsp;</p><p>回到主机/客户机接口标准化的主题，如果必须使用定制接口，请考虑使用Modsurfer等工具，这些工具为数据库提供者和UDF创建者提供了一种以主动方式验证相互兼容性的方法。某些导入和导出的存在性、运行时复杂性、二进制大小和函数签名都是任何验证方案中应该包含的关键组件。</p><p>&nbsp;</p><p></p><h3>不止UDF</h3><p></p><p></p><p>除了UDF之外，数据库还有很多领域都已经可以用WebAssembly来提升扩展性了，存储过程、表值函数 （TVF） 和用户定义的聚合函数 （UDAF） 都在范围内。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://dylibso.com/blog/wasm-udf/\">https://dylibso.com/blog/wasm-</a>\"<a href=\"https://dylibso.com/blog/wasm-udf/\">UDF</a>\"<a href=\"https://dylibso.com/blog/wasm-udf/\">/</a>\"</p><p>&nbsp;</p>",
    "publish_time": "2023-10-04 07:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "设计强大UI：NDC大会分享构建用户友好设计的策略",
    "url": "https://www.infoq.cn/article/7BvJxSU3HExBESJzpKcF",
    "summary": "<p></p><p>UI开发的关键挑战在于如何平衡易用性和可维护性以及规模和复杂性。要开发出既健壮又对用户友好的UI，需要深思熟虑的组件设计和对常见使用路径的理解。而要提高代码库的效率和一致性，自动化是一个可以改变游戏规则的措施。</p><p></p><p>Glenn Reyes在<a href=\"https://ndcoslo.com/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTYyMTM4MzcsImZpbGVHVUlEIjoiYUJBWU04bGU1QmlvWW5BaiIsImlhdCI6MTY5NjIxMzUzNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.CJ47gu6VKsQeNcLAM_raJl1sl1wew2lF3xFBnq4_RK8\">NDC Oslo 2023大会</a>\"上谈到了如何开发健壮的UI组件。</p><p></p><p>Reyes提到，UI开发面临着一系列独特的挑战，尤其是在扩展方面。主要的困难在于如何在项目复杂性增长的同时保持简单性和健壮性。</p><p></p><p>Reyes说，UI开发的一个关键部分是保持组件的API表面积最小。这不仅可以减少出错的机会，而且组件更易于维护，更易于工程团队使用。这可以帮助他们避免深入到复杂的问题中，带来更顺畅、无错误的开发过程。</p><p></p><p></p><blockquote>你需要按照一种自然的、能够把用户引导到最常见的、有效的使用路径的方式来构建UI。要让常见的使用路径变得直观可能具有一定的挑战性，但这是确保组件被正确和有效使用所必需的。</blockquote><p></p><p></p><p>Reyes说，一些代码样式和格式化工具，如Prettier和ESLint，可以简化你的工作流程。它们可以自动让代码风格保持一致，这样就不需要在代码评审时讨论格式问题。他提到，这可以让团队更多地关注代码的逻辑和功能，而不是其外观。</p><p></p><p>为了确保用户界面代码是可维护的，Reyes提出了一些策略：</p><p></p><p></p><blockquote>采用设计系统：采用设计系统有助于保持UI组件的一致性和易维护性。它作为唯一的事实来源，提供了构成应用程序视觉语言的元素和指南。实现设计标记（Design Token）：设计标记可以表示颜色、排版、间距等元素的值，有助于保持应用程序不同部分的一致性。你只需要修改单个标记，就可以在所有组件之间传播变更，使得更新变得更简单、更高效。管理组件间距：组件之间的间距应该由它们的父组件控制，而不是硬编码到每个组件中。这确保了更好的关注点分离，并使组件更易于重用和维护。使用TypeScript：TypeScript的静态类型可以显著提升可维护性。它可以让你很清楚地知道你处理的是多态组件还是复合组件，并且它鼓励你避免使用原始的HTML属性来进行样式化，如“style”和“class”。这可以带来更好的类型安全，实现早期错误检测，改进开发者体验，让你的UI代码更易于维护。</blockquote><p></p><p></p><p>InfoQ就如何开发健壮的UI组件采访了<a href=\"https://www.linkedin.com/in/glnnrys/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTYyMTM4MzcsImZpbGVHVUlEIjoiYUJBWU04bGU1QmlvWW5BaiIsImlhdCI6MTY5NjIxMzUzNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.CJ47gu6VKsQeNcLAM_raJl1sl1wew2lF3xFBnq4_RK8\">Glenn Reyes</a>\"。</p><p></p><p>InfoQ：你是如何定义“健壮的UI”的？它们有什么特点？</p><p></p><p></p><blockquote>Glenn Reyes：“健壮的UI”是指强大、可靠且适用于所有人的UI。以下是让UI变得健壮的要素：1. 易于使用：它简单直观，便于人们理解和使用。2. 一致性：它在任何时候、任何设备或浏览器上的外观和工作方式都是一样的。3. 可以很好地处理错误：即使发生了意想不到的事情，比如遇到异常或错误的用户输入，它也不会发生崩溃。4. 扩展就绪：它的构建方式可以很容易地随用户或项目的需求增长做出改变。5. 无障碍：它的设计让每个人，包括残疾人，都可以舒适地使用。6. 易于更新：可以很容易地进行修复或更新，不会引发问题或影响到其他部分。总得来说，健壮的UI运行良好、对用户友好、可靠、扩展就绪，所有人都可以轻松使用，并且易于维护和更新。</blockquote><p></p><p></p><p>InfoQ：有哪些现成的工具？它们能带来什么样的好处？</p><p></p><p></p><blockquote>Reyes：在处理可变列表时，例如通过映射函数渲染的列表，可能会在代码中引入不可预测性。为了解决这个问题，你可以通过添加“顺序规则”来保证确定性。例如，按字母顺序排序或根据特定模式分组。这样可以确保一致性，并减少代码评审过程不必要的噪音，使评审过程更顺畅、更集中。如果你直接在应用程序中开发UI组件，在可以构建目标组件之前可能需要进行多次交互。这种方式效率低下，特别是在处理依赖于特定状态的组件时，例如表单字段的错误消息。你可以不用手动去诱导引发这些错误状态，而是使用其他工具或方法让你能够立即看到和处理这些状态。这不仅可以节省时间，还能够让你完全专注于手头的组件，不受到周围环境的干扰。</blockquote><p></p><p></p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/09/UI-robust-user-friendly/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTYyMTM4MzcsImZpbGVHVUlEIjoiYUJBWU04bGU1QmlvWW5BaiIsImlhdCI6MTY5NjIxMzUzNywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.CJ47gu6VKsQeNcLAM_raJl1sl1wew2lF3xFBnq4_RK8\">https://www.infoq.com/news/2023/09/UI-robust-user-friendly/</a>\"</p>",
    "publish_time": "2023-10-04 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Meta 开源文本生成音乐AI：AudioCraft 将文字转化为和声",
    "url": "https://www.infoq.cn/article/21b0Ov78WA25AaSrSyxp",
    "summary": "<p>Meta<a href=\"https://ai.meta.com/blog/audiocraft-musicgen-audiogen-encodec-generative-ai-audio/\">开源</a>\"了它的Text-to-Music生成式人工智能<a href=\"https://github.com/facebookresearch/audiocraft\">AudioCraft</a>\"，供研究人员和从业者训练他们自己的模型，并帮助推动前沿技术的发展。</p><p>&nbsp;</p><p>AudioCraft包含三个不同的模型：<a href=\"https://huggingface.co/spaces/facebook/MusicGen\">MusicGen</a>\"能够根据文本提示生成音乐；<a href=\"https://felixkreuk.github.io/audiogen/\">AudioGen</a>\"能够产生环境声音；<a href=\"https://ai.meta.com/blog/ai-powered-audio-compression-technique/\">EnCodec</a>\"是一个由AI驱动的编码器/量化器/解码器。</p><p></p><p></p><blockquote>今天，我们很高兴地发布了我们的改进版EnCodec解码器，它可以用更少的伪像（artifacts）生成更高质量的音乐；这个预训练的AudioGen模型可以生成环境声音以及狗叫、汽车喇叭声或木地板上的脚步声等音效；我们将分享所有的AudioCraft模型权重和代码。</blockquote><p></p><p>&nbsp;</p><p>据Meta介绍，AudioCraft能够使用自然界面生成高质量的音频。此外，他们还说，AudioCraft利用一种新方法简化了音频生成领域最先进的设计。</p><p>&nbsp;</p><p>具体来说，AudioCraft使用EnCodec神经音频编解码器从原始信号中学习Audio Token。这一步从音乐样本创建出了固定“词汇表”（Audio Token），并随后将其传递给自回归语言模型。这个模型训练了一个新的音频语言模型，利用Token的内部结构来捕捉它们的长程依赖关系，这对音乐生成至关重要。最后，这个新模型基于文本描述生成新的Token，并将其反馈到编解码器的解码器以合成声音和音乐。</p><p></p><p></p><blockquote>生成任何类型的高保真音频都需要在不同的尺度上对复杂的信号和模式进行建模。音乐可以说是最具挑战性的音频类型，因为它由局部和长程模式组成，从一组音符到使用多种乐器的整体音乐结构。</blockquote><p></p><p>&nbsp;</p><p>如前所述，AudioCraft是开源的，Meta希望能够帮助研究社区以它为基础做进一步地构建：</p><p></p><p></p><blockquote>坚实的开源基础将有助于推动创新，丰富我们未来制作和收听音频和音乐的方式：想象一下，配有音效和史诗音乐的丰富多彩的睡前故事读物。借助更多的控制，我们认为MusicGen可以变成一种新型乐器——就像合成器刚出现时那样。</blockquote><p></p><p>&nbsp;</p><p>虽然AudioCraft的大部分是开源的，但是他们为模型权重选择了<a href=\"https://github.com/facebookresearch/audiocraft/blob/main/LICENSE_weights\">CC-BY-NC许可</a>\"。Hacker News上有用户指出，<a href=\"https://news.ycombinator.com/item?id=36974030\">该许可限制较多，并不算完全开源</a>\"。</p><p>&nbsp;</p><p>具体来说，<a href=\"https://opensource.org/osd/\">非商业性使用条款违背了开源倡议对开源的定义中的第六点</a>\"，这很可能是因为Meta使用了Meta拥有并特别授权的音乐来计算这些权重。其余组件将在<a href=\"https://github.com/facebookresearch/audiocraft/blob/main/LICENSE\">MIT许可</a>\"下发布。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/08/meta-text-to-music-generative-ai/\">https://www.infoq.com/news/2023/08/meta-text-to-music-generative-ai/</a>\"</p>",
    "publish_time": "2023-10-04 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]