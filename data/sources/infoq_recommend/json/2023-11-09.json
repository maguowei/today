[
  {
    "title": "Java近期新闻：Helidon 4.0、Eclipse Serializer 1.0和JDK 22 JEP",
    "url": "https://www.infoq.cn/article/3Xjb2Fz2TxiGmg6d76Ii",
    "summary": "<p></p><h4>OpenJDK</h4><p></p><p></p><p>在经过评审之后，JEP 456（<a href=\"https://openjdk.org/jeps/456?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">未命名变量与模式</a>\"）从Proposed to Target进入到Targeted（JDK 22）状态。这个JEP提议在经过前一轮预览之后确定这个特性：在JDK 21中发布的JEP 443（<a href=\"https://openjdk.org/jeps/443?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">未命名变量与模式(预览)</a>\"）。这个特性将“通过增加未命名模式和未命名变量来增强语言，未命名模式可以匹配记录组件而无需声明组件的名称或类型，未命名变量是指被初始化但不被使用的变量。”这两者都以下划线字符表示，如r instanceof _(int x, int y)和r instanceof _。</p><p></p><p>JEP 460（<a href=\"https://openjdk.org/jeps/460?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Vector API (第七轮孵化)</a>\"）已经从Candidate进入到Proposed to Target（JDK 22）状态。这个JEP属于<a href=\"https://openjdk.org/projects/panama/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Project Panama</a>\"，在前六轮孵化的反馈基础上进行了增强：在JDK 21 GA版本中发布的JEP 448（<a href=\"https://openjdk.org/jeps/448?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Vector API (第六轮孵化)</a>\"）；在JDK 20中发布的JEP 438（<a href=\"https://openjdk.org/jeps/438?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Vector API (第五轮孵化)</a>\"）；在JDK 19中发布的JEP 426（<a href=\"https://openjdk.org/jeps/426?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Vector API (第四轮孵化)</a>\"；在JDK 18中发布的JEP 417（<a href=\"https://openjdk.java.net/jeps/417?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Vector API (第三轮孵化)</a>\"）；在JDK 17中发布的JEP 414（<a href=\"https://openjdk.java.net/jeps/414?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Vector API (第二轮孵化)</a>\"和在JDK 16中作为<a href=\"https://openjdk.java.net/jeps/11?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">孵化模块</a>\"发布的JEP 338（<a href=\"https://openjdk.java.net/jeps/338?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Vector API (孵化器)</a>\"）。自JEP 448以来最重要的变化包括对<a href=\"https://docs.oracle.com/en/graalvm/enterprise/20/docs/reference-manual/compiler/#graalvm-compiler?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">JVM编译器接口</a>\" (JVMCI)的增强和支持Vector API值。评审工作于2023年11月3日结束。</p><p></p><p>JEP 462（<a href=\"https://openjdk.org/jeps/462?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">结构化并发 (第二轮预览)</a>\"），已经从JEP Draft 8317302进入到Candidate状态。这个JEP没有发生变化，建议在JDK 22中继续预览API，以便获得更多来自上一轮预览的反馈：在JDK 21中发布的JEP 453（<a href=\"https://openjdk.org/jeps/453?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">结构化并发 (预览)</a>\"）。这个特性通过引入结构化并发来简化并发编程，将在不同线程中运行的相关任务组视为单个工作单元，从而简化错误处理和取消操作，提高可靠性并增强可观察性。</p><p></p><p>JEP 461（<a href=\"https://openjdk.org/jeps/461?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Stream Gatherers (预览)</a>\"）已经从JEP Draft 8317955进入到Candidate状态。这个JEP提议让Stream API支持自定义中间操作。 “这将允许流式管道以现有内置中间操作不容易实现的方式来转换数据。”更多有关这个JEP的细节可以在Oracle Java平台组软件架构师<a href=\"https://www.linkedin.com/in/viktorklang/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Viktor Klang</a>\"编写的<a href=\"https://cr.openjdk.org/~vklang/Gatherers.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">原始设计文档</a>\"中找到。</p><p></p><p></p><h4>JDK 22</h4><p></p><p></p><p><a href=\"https://openjdk.org/projects/jdk/22/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">JDK 22</a>\"的<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-22%2B21?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Build 21</a>\"已经可用，包含了来自Build 20的<a href=\"https://github.com/openjdk/jdk/compare/jdk-22%2B20...jdk-22%2B21?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">更新</a>\"，包括对各种<a href=\"https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2022%20and%20%22resolved%20in%20build%22%20%3D%20b21%20order%20by%20component%2C%20subcomponent&amp;accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">问题</a>\"的修复。关于此版本的更多详细信息可以在<a href=\"https://jdk.java.net/22/release-notes?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">版本说明</a>\"中找到。</p><p></p><p>对于<a href=\"https://openjdk.org/projects/jdk/22/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">JDK 22</a>\"，开发者可以通过<a href=\"https://bugreport.java.com/bugreport/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Java Bug Database</a>\"报告错误。</p><p></p><p></p><h4>Jakarta Data</h4><p></p><p></p><p>Jakarta Data 1.0.0的第一个里程碑版本提供了以下内容：一个用于执行实体基本操作的新接口<a href=\"https://github.com/jakartaee/data/blob/main/api/src/main/java/jakarta/data/repository/BasicRepository.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">BasicRepository</a>\"接口；<a href=\"https://github.com/jakartaee/data/blob/main/api/src/main/java/jakarta/data/repository/CrudRepository.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">CrudRepository</a>\"接口添加新的方法insert()和update()，用于扩展针对实体的基本操作能力，包括插入和更新操作；用于CRUD操作的新注解，<a href=\"https://github.com/jakartaee/data/blob/main/api/src/main/java/jakarta/data/repository/Insert.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Insert</a>\"、<a href=\"https://github.com/jakartaee/data/blob/main/api/src/main/java/jakarta/data/repository/Update.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Update</a>\"、<a href=\"https://github.com/jakartaee/data/blob/main/api/src/main/java/jakarta/data/repository/Delete.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Delete</a>\"和<a href=\"https://github.com/jakartaee/data/blob/main/api/src/main/java/jakarta/data/repository/Save.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Save</a>\"。关于该版本的更多详细信息可以在<a href=\"https://github.com/jakartaee/data/releases/tag/1.0.0-M1?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">版本说明</a>\"中找到。</p><p></p><p></p><h4>GraalVM</h4><p></p><p></p><p>Oracle Labs发布GraalVM for JDK 21 Community 21.0.1，包含了根据Oracle<a href=\"https://www.oracle.com/security-alerts/cpuoct2023.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">关键补丁更新</a>\"进行的修复，这些修复包括：一个新的<a href=\"https://github.com/oracle/graal/blob/master/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/c/function/CEntryPointErrors.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">CEntryPointErrors</a>\"类，用于在无法确定堆栈边界时返回错误；在取消未使用的内存分配时发生进程崩溃；以及在macOS上使用ProcessBuilder类时偶发崩溃。关于该版本的更多详细信息可以在<a href=\"https://www.graalvm.org/release-notes/JDK_21/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">版本说明</a>\"中找到。</p><p></p><p></p><h4>Spring Framework</h4><p></p><p></p><p><a href=\"https://spring.io/projects/spring-framework?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Spring Framework</a>\" 6.1的第二个发行候选版本带来了问题修复、文档改进、依赖项升级和新特性，如：支持在<a href=\"https://docs.spring.io/spring-framework/docs/6.1.0-RC2/javadoc-api/org/springframework/test/context/junit/jupiter/SpringJUnitConfig.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">@SpringJUnitConfig</a>\"和<a href=\"https://docs.spring.io/spring-framework/docs/6.1.0-RC2/javadoc-api/org/springframework/test/context/junit/jupiter/web/SpringJUnitWebConfig.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">@SpringJUnitWebConfig</a>\"注解中配置<a href=\"https://docs.spring.io/spring-framework/docs/6.1.0-RC2/javadoc-api/org/springframework/web/context/ContextLoader.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">ContextLoader</a>\"，保持与<a href=\"https://docs.spring.io/spring-framework/docs/6.1.0-RC2/javadoc-api/org/springframework/test/context/ContextConfiguration.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">@ContextConfiguration</a>\"注解兼容；改进<a href=\"https://docs.spring.io/spring-framework/docs/6.1.0-RC2/javadoc-api/org/springframework/aop/support/ControlFlowPointcut.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">ControlFlowPointcut</a>\"类的可扩展性，支持方法名称模式匹配；在<a href=\"https://docs.spring.io/spring-framework/docs/6.1.0-RC2/javadoc-api/org/springframework/test/context/TestContext.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">TestContext</a>\"接口中添加新注解<a href=\"https://docs.spring.io/spring-framework/docs/6.1.0-RC2/javadoc-api/org/springframework/test/context/aot/DisabledInAotMode.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">DisabledInAotMode</a>\"，用于跳过AOT处理。关于该版本的更多详细信息可以在<a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v6.1.0-RC2?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">版本说明</a>\"中找到。</p><p></p><p><a href=\"https://spring.io/projects/spring-modulith?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Spring Modulith</a>\" 1.1.0的第一个发行候选版本和服务版本1.0.2带来了问题修复、依赖项升级和改进，如：不再支持Google <a href=\"https://github.com/TNG/ArchUnit/blob/main/archunit/src/main/java/com/tngtech/archunit/base/Suppliers.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Suppliers</a>\"类的memoize()方法，而是支持Spring <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/util/function/SingletonSupplier.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">SingletonSupplier</a>\"类的of()方法；在参考文档中添加了一个任务说明。1.1.0-RC1的新特性包括：在org.springframework.modulith.events包中新增<a href=\"https://docs.spring.io/spring-modulith/docs/1.1.0-RC1/api/org/springframework/modulith/events/ApplicationModuleListener.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">@ApplicationModuleListener</a>\"注解，对应的原始org.springframework.modulith包中的注解被标记为已弃用；重构<a href=\"https://docs.spring.io/spring-modulith/docs/1.1.0-RC1/api/org/springframework/modulith/Modulith.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">@Modulith</a>\"注解，用于定义遵循Modulith结构约定的Spring Boot应用程序。关于这些版本的更多详细信息可以在1.1.0-RC1的<a href=\"https://github.com/spring-projects/spring-modulith/releases/tag/1.1.0-RC1?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">版本说明</a>\"和1.0.2的<a href=\"https://github.com/spring-projects/spring-modulith/releases/tag/1.0.2?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">版本说明</a>\"中找到。</p><p></p><p><a href=\"https://spring.io/projects/spring-vault?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Spring Vault</a>\" 3.1.0的第一个发行候选版本带来了文档改进、依赖项升级和新特性，如：<a href=\"https://docs.spring.io/spring-vault/docs/3.1.0-RC1/api/org/springframework/vault/support/VaultTokenRequest.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">VaultTokenRequest</a>\"类支持role_name和entity_alias参数；支持<a href=\"https://developer.hashicorp.com/vault/api-docs/secret/transit?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Transit Secrets Engine API</a>\"类的prehashed属性；为<a href=\"https://docs.spring.io/spring-vault/docs/3.1.0-RC1/api/org/springframework/vault/core/VaultTransitOperations.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">VaultTransitOperations</a>\"接口和<a href=\"https://docs.spring.io/spring-vault/docs/3.1.0-RC1/api/org/springframework/vault/core/VaultTransitTemplate.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">VaultTransitTemplate</a>\"类添加了rewrap()方法。关于该版本的更多详细信息可以在<a href=\"https://github.com/spring-projects/spring-vault/releases/tag/3.1.0-RC1?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">版本说明</a>\"中找到。</p><p></p><p></p><h4>Helidon</h4><p></p><p></p><p>在Helidon 4.0.0-ALPHA1发布一年多时间之后，Oracle发布了<a href=\"https://helidon.io/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Helidon</a>\" 4.0.0，带来了新的Helidon Níma服务器、对MicroProfile 6.0的支持，以及从异步API到阻塞API的转变。Helidon Níma服务器是从头开始设计和构建的，充分利用了虚拟线程（这是JDK 21的特性之一）。关于该版本的更多详细信息可以在<a href=\"https://github.com/helidon-io/helidon/releases/tag/4.0.0?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">版本说明</a>\"中找到，InfoQ将会发布更详细的报道。</p><p></p><p>Helidon的服务版本<a href=\"https://github.com/helidon-io/helidon/releases/tag/3.2.3?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">3.2.3</a>\"和<a href=\"https://github.com/helidon-io/helidon/releases/tag/2.6.4?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">2.6.4</a>\"都带来了显著的变化，如：<a href=\"https://www.infoq.com/news/2023/10/java-news-roundup-oct23-2023/HttpSignProvider?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">HttpSignProvider</a>\"类中定义的tarketKeys变量现在返回Java类<a href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">ConcurrentHashMap</a>\"的实例，而不是之前的HashMap类；max-payload-size属性现在被解析为Long类型，与Helidon 4.0保持一致，并移除了在值大于Integer.MAX_VALUE时抛出IllegalArgumentException；为<a href=\"https://github.com/helidon-io/helidon/blob/main/integrations/cdi/jpa-cdi/src/main/java/io/helidon/integrations/cdi/jpa/NonTransactionalEntityManager.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">NonTransactionalEntityManager</a>\"和<a href=\"https://github.com/helidon-io/helidon/blob/main/integrations/cdi/jpa-cdi/src/main/java/io/helidon/integrations/cdi/jpa/ExtendedEntityManager.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">ExtendedEntityManager</a>\"类添加了无参数非私有构造函数。关于这些版本的更多详细信息可以在<a href=\"https://github.com/helidon-io/helidon/blob/3.2.3/CHANGELOG.md?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">3.2.3</a>\"和<a href=\"https://github.com/helidon-io/helidon/blob/2.6.4/CHANGELOG.md?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">2.6.4</a>\"的变更日志中找到。</p><p></p><p></p><h4>Eclipse Serializer</h4><p></p><p></p><p>Eclipse基金会发布<a href=\"https://github.com/eclipse-serializer/serializer/blob/main/README.md?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Eclipse Serializer</a>\" 1.0，这是一个专为处理具有复杂对象结构和高度安全性的Java对象而设计的项目。该项目就是以前的MicroStream Serializer，它让开发者能够序列化任意的Java对象，但与传统的Java序列化不同，无需实现<a href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/Serializable.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Serializeable</a>\"接口，也不需要使用特定的接口、超类或注解。</p><p></p><p></p><h4>Quarkus</h4><p></p><p></p><p>Red Hat发布<a href=\"https://quarkus.io/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Quarkus</a>\" 3.5.0，带来了问题修复、文档和性能改进，以及一些重要的变化，如：支持JDK 21；改进了OIDC令牌传播过滤器，可以自定义交换状态并提供客户端名称；允许并行执行阻塞健康检查。关于该版本的更多详细信息可以在<a href=\"https://github.com/quarkusio/quarkus/releases/tag/3.5.0?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">变更日志</a>\"中找到。</p><p></p><p></p><h4>BellSoft</h4><p></p><p></p><p>BellSoft发布了JDK 11.0.10、17.0.9和21.0.1的Liberica Native Image Kit版本<a href=\"https://bell-sw.com/blog/liberica-native-image-kit-22-3-4-23-0-2-23-1-1-builds-are-released/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">22.3.4</a>\"、<a href=\"https://bell-sw.com/blog/liberica-native-image-kit-22-3-4-23-0-2-23-1-1-builds-are-released/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">23.0.2</a>\"和<a href=\"https://bell-sw.com/blog/liberica-native-image-kit-22-3-4-23-0-2-23-1-1-builds-are-released/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">23.1.1</a>\"，作为上述关键补丁更新发布周期的一部分，解决了以下这些问题：<a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22025?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">CVE-2023-22025</a>\"，允许未经身份验证的攻击者通过多种协议访问网络攻击Oracle Java SE、Oracle GraalVM企业版和Oracle GraalVM for JDK，从而未经授权地更新、插入或删除可访问数据；<a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22067?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">CVE-2023-22067</a>\"，允许未经身份验证的攻击者通过CORBA访问网络攻击Oracle Java SE，从而未经授权地更新、插入或删除某些可访问的Oracle Java SE数据；<a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22081?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">CVE-2023-22081</a>\"，允许未经身份验证的攻击者通过HTTPS访问网络攻击Oracle Java SE和Oracle GraalVM for JDK，从而未经授权地导致Oracle Java SE和Oracle GraalVM for JDK部分拒绝服务。</p><p></p><p></p><h4>Hibernate</h4><p></p><p></p><p><a href=\"https://hibernate.org/orm/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Hibernate ORM</a>\" 6.4.0的<a href=\"https://in.relation.to/2023/10/26/orm-64cr1/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">第一个候选版本</a>\"提供了以下功能：新的@SoftDelete注解，用于支持软删除，可以将值标记为已删除/未删除，而不是活动/非活动；实现了在HQL和Criteria查询中处理数组的其余功能；支持在JDK Flight Recorder中编写特定于Hibernate的事件。</p><p></p><p><a href=\"https://hibernate.org/search/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Hibernate Search</a>\" 7.0.0的<a href=\"https://in.relation.to/2023/10/23/hibernate-search-7-0-0-CR1/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">第一个候选版本</a>\"包含了以下功能：问题修复；与Hibernate ORM<a href=\"https://docs.jboss.org/hibernate/orm/6.3/userguide/html_single/Hibernate_User_Guide.html#multitenacy-hibernate-TenantId?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">基于鉴别器的多租户</a>\"、Elasticsearch 8.10和OpenSearch 2.10/2.11的兼容性；依赖项升级到Hibernate ORM 6.3.1.Final和Apache Lucene 9.8；因为迁移到<a href=\"https://jakarta.ee/specifications/batch/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Jakarta Batch</a>\"规范，为保持一致，将一些与JSR-352（<a href=\"https://jcp.org/en/jsr/detail?id=352&amp;accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Java平台的批处理应用程序</a>\"）相关的Maven构件进行了重命名。</p><p></p><p></p><h4>Apache Software Foundation</h4><p></p><p></p><p>Apache Maven 4.0.0发布<a href=\"https://www.mail-archive.com/announce@apache.org/msg08617.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">第八个alpha版本</a>\"，带来了一些重要的变化，如：不再支持<a href=\"https://codehaus-plexus.github.io/plexus-xml/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Plexus XML</a>\"，而是改为使用<a href=\"https://github.com/FasterXML/woodstox?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">StAX/Woodstox</a>\"进行XML解析；引入了用于未来Maven版本的4.1.0 POM模型；在构建POM中附加了一个build分类器，用于简化构建/使用者实现。有关该版本的更多详细信息可以在<a href=\"https://maven.apache.org/docs/4.0.0-alpha-8/release-notes.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">版本说明</a>\"中找到。</p><p></p><p>Apache Camel 4.0.2<a href=\"https://www.mail-archive.com/announce@apache.org/msg08624.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">发布</a>\"，带来了问题修复、依赖项升级和新特性/改进，如：可以使用旧的Micrometer计量名称或遵循新的Micrometer命名约定；Dev控制台支持子文件夹上传；对<a href=\"https://github.com/apache/camel/blob/main/core/camel-support/src/main/java/org/apache/camel/support/EndpointHelper.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">EndpointHelper</a>\"类中定义的matchEndpoint()方法进行了优化，避免使用端点正则表达式。有关该版本的更多详细信息可以在<a href=\"https://camel.apache.org/releases/release-4.0.2/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">版本说明</a>\"中找到。</p><p></p><p>为了保持与Quarkus的一致性，<a href=\"https://github.com/apache/camel-quarkus/blob/main/README.adoc?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Camel Quarkus</a>\"发布了版本3.5.0，解决了一些问题，如：由于未初始化时区信息而导致的<a href=\"https://github.com/apache/camel-quarkus/blob/main/integration-test-groups/jdbc/oracle/src/test/java/org/apache/camel/quarkus/component/jdbc/oracle/CamelOracleJdbcTest.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">CamelOracleJdbcTest</a>\"执行失败；在配置了SSL的情况下Kafka容器启动失败；与<a href=\"https://github.com/apache/camel-quarkus/blob/main/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/FastCamelContext.java?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">FastCamelContext</a>\"类相关的UnsupportedOperationException。有关该版本的更多详细信息可以在<a href=\"https://camel.apache.org/releases/q-3.5.0/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">版本说明</a>\"中找到。</p><p></p><p></p><h4>JHipster</h4><p></p><p></p><p>JHipster Lite 0.46.0已经发布，带来了文档方面的改进、依赖项升级和增强特性，如：使用更通用的脚本shebang行，修复与<a href=\"https://nixos.org/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">NixOS</a>\"的兼容性问题；在Landscape MiniMap中添加了交互功能，如悬停和选择。有关该版本的更多详细信息可以在<a href=\"https://github.com/jhipster/jhipster-lite/releases/tag/v0.46.0?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">版本说明</a>\"中找到。</p><p></p><p></p><h4>JDKMonitor</h4><p></p><p></p><p>在摩洛哥Devoxx大会上，Azul首席工程师<a href=\"https://de.linkedin.com/in/gerritgrunwald?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">Gerrit Grunwald</a>\"介绍了一款新的macOS桌面小部件JDKMonitor，用于显示距离下一个OpenJDK发布/更新的天数。这个小部件还可以显示最近四个长期支持版本的最新版本的特性，可以将它们作为JDK或JRE下载，还可以选择是否捆绑JavaFX。这个小部件需要macOS Sonoma才能运行，并可以从<a href=\"https://apps.apple.com/us/app/jdkmonitor/id6468484792?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTkyNDc3MDAsImZpbGVHVUlEIjoiNWJxbmRXMG9PenRMRTJBeSIsImlhdCI6MTY5OTI0NzQwMCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.MSOwj4JyGgHekMUD6iRrt8yGn-H7TC6DlB_r0L5jaIU\">App Store</a>\"下载。</p><p></p><p></p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/10/java-news-roundup-oct23-2023/\">https://www.infoq.com/news/2023/10/java-news-roundup-oct23-2023/</a>\"</p>",
    "publish_time": "2023-11-09 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Next.js 14：虽无新API，但不乏重大变更",
    "url": "https://www.infoq.cn/article/9m0LCuroLWbpCk5RTBN9",
    "summary": "<p>2023&nbsp;Next.js Conf大会已经于加利福尼亚州旧金山的SFJazz中心举行，众多行业专家和优秀演讲者汇聚一堂。本文梳理了本届Next.js&nbsp;Conf大会的重要内容。</p><p>&nbsp;</p><p></p><h2>要点汇总</h2><p></p><p></p><p>Turbopack又提速了！Server Actions迎来稳定版。Partial Prerendering部分预渲染功能推出预览版。Next.js Learn免费课现已上线。</p><p>&nbsp;</p><p></p><h3>Next.js编译器进一步增强</h3><p></p><p></p><p>自版本13以来，Next.js团队就一直在孜孜不倦地提升本地开发性能。新版本又带来了增量化增强方法，而一系列改进的核心就体现在基于Rust的Turbopack引擎身上。通过快速刷新，本地服务器启动速度提高了53.3%，代码更新速度提高了94.7%。相应的稳定版也将按计划发布，有望带来更加可靠、高效的开发体验。</p><p>&nbsp;</p><p></p><h3>Server Actions迎来稳定版</h3><p></p><p></p><p>在Next.js 14当中，Server Actions终于迎来稳定版。开发者无需为后端任务手动创建API路由，现在可以直接在React组件中定义服务器端功能，从而允许客户端与服务器间实现无缝交互，甚至可以在App Router模型当中合并错误处理、缓存、重新验证与重新定向。此次更新的意义在于简化开发者工作流程，同时增强用户与应用之间的交互。对于各位TypeScript用户来说，稳定版功能还能更好地保障客户端与服务器间实现类型安全。此次稳定升级凸显出Next.js项目为增强客户端与服务器间协作所做出的持续努力，也承诺带来更加精简、愈发强大的Web开发体验。</p><p>&nbsp;</p><p><code lang=\"null\">// app/page.tsx\nexport default function Page() {\n  async function create(formData: FormData) {\n    'use server';\n    await db.form.insertOne({ formData });\n  }\n  return (\n    </code></p><form action=\"{create}\"><code lang=\"null\">\n      <input name=\"name\" type=\"text\" />\n      <button type=\"submit\">Submit</button>\n    \n  );\n}</code></form><p></p><p></p><h3>Partial Prerendering 部分预渲染&nbsp;(预览版)</h3><p></p><p></p><p>部分预渲染旨在将静态渲染的速度优势，与动态个性化响应的灵活性相结合。这项编译器优化依靠Rewact Suspense来提供快速的初始静态响应，同时可根据用户交互或其他触发器动态替换组件。新功能简化了渲染模型，无需学习新的API，且目前正在积极开发当中。</p><p>&nbsp;</p><p><code lang=\"null\">// app/page.tsx\nexport default function Page() {\n  return (\n    </code></p><code lang=\"null\">\n      <header>\n        <h1>My Store</h1>\n        }&gt; // skeleton loads while data is being loaded from your database\n           // Replaces the skeleton when data loading is finished\n        \n      </header>\n      \n      }&gt;\n        \n      \n      \n    </code><code lang=\"null\">\n  );\n}</code><p></p><p>&nbsp;</p><p></p><h3>元数据改进</h3><p></p><p></p><p>Next.js 14解决了在传输页面内容的数据流之前，向浏览器发送相关视口、配色方案和主题的关键元数据这一难题。这项工作有助于防止屏闪或布局变化，从而增强用户体验。部分已弃用的元数据选项将被新选项取代，以进一步推动改造效果。</p><p>&nbsp;</p><p></p><h3>教育和社区</h3><p></p><p></p><p>Next.js的全新免费课程现已发布，涵盖从样式、字体与图像优化到数据库设置、错误处理等广泛主题。这批新增内容也再次证明，围绕Next.js建立的社区和教育资源仍在不断扩展。</p><p>&nbsp;</p><p>教育社区：</p><p><a href=\"https://nextjs.org/learn\">https://nextjs.org/learn</a>\"</p><p>&nbsp;</p><p></p><h3>重大变更</h3><p></p><p></p><p>新版本还迎来了几项重大变更和弃用，为改进功能和简化开发体验铺平了道路。</p><p>最低Node.js版本要求已更新至18.17。WASM Target 被移除。@next/font&nbsp;被替换为&nbsp;next/font。ImageResponse&nbsp;导入由&nbsp;next/server&nbsp;变更为&nbsp;next/og。next export&nbsp;被弃用; 现在使用&nbsp;output: 'export'。</p><p>&nbsp;</p><p></p><h2>主题演讲</h2><p></p><p></p><p>受篇幅所限，下面推荐会议期间的部分精彩演讲。</p><p>&nbsp;</p><p></p><h3>“没有新API”（No New APIs）</h3><p></p><p></p><p>在这场主题演讲中，Guillermo Rauch讨论了Next.js的发展和未来前景。演讲重点介绍了Next.js 14版本的定位，即提高性能并简化开发流程，而非引入新的API。Guillermo还谈到Next.js 14如何立足React Server Components 等基础技术进行构建，并在预览中引入了名为“Partial Prerendering”部分预渲染的新功能，旨在加快初始与动态视觉效果且不影响开发者体验。</p><p>&nbsp;</p><p>演讲链接：</p><p><a href=\"https://www.youtube.com/live/8q2q_820Sx4?si=fO_5hPPaKEPLKbiw&amp;t=1387\">https://www.youtube.com/live/8q2q_820Sx4?si=fO_5hPPaKEPLKbiw&amp;t=1387</a>\"</p><p>&nbsp;</p><p></p><h3>Next.js如何实现React的未来前景（How Next.js is Delivering React’s Vision for the Future）</h3><p></p><p></p><p>Sam讨论了Next.js如何实现React的未来愿景，而且特别关注了如何将服务器组件与Server Actions服务器操作集成至Next.js当中。他解释称，服务器组件和服务器操作提供“一流的数据获取和处理方式”，对React的固有强项可组合性做出有力补充。🍻</p><p>&nbsp;</p><p>Twitter上出现了一张断章取义的截图：</p><p><a href=\"https://twitter.com/peer_rich/status/1717609270475194466\">https://twitter.com/peer_rich/status/1717609270475194466</a>\"</p><p>&nbsp;</p><p>这个Twitter在网络中引发了不少争议。但如果大家耐心观看演讲，就能明确理解Sam想要表达的观点：Server Actions是个好设计！</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d5/d5df253d4a52f9c9462ff96fc3c88ae4.png\" /></p><p></p><p>&nbsp;</p><p>演讲链接：</p><p><a href=\"https://www.youtube.com/live/8q2q_820Sx4?si=Ds8T7XLCd9g4Mwz1&amp;t=4253\">https://www.youtube.com/live/8q2q_820Sx4?si=Ds8T7XLCd9g4Mwz1&amp;t=4253</a>\"</p><p>&nbsp;</p><p></p><h3>使用Vercel Stack将灵感转化落地（Executing on Inspiration with the Vercel Stack）</h3><p></p><p></p><p>Michelle分享了她组织React迈阿密开发者大会的历程，还谈到Vercel及Next.js如何提高流程效率、降低管理门槛。由于之前没有组织此类活动的经验，所以Michelle分享了她所面临的挑战，以及Vercel功能套件（包括免费Next.js模板和AI驱动的CMS方案等）如何帮助她专注于处理最重要的工作：建议社区，并将世界级科技大会引入南佛罗里达。</p><p>&nbsp;</p><p>演讲链接：</p><p><a href=\"https://www.youtube.com/live/8q2q_820Sx4?si=orTYufNa7c0yZKjC&amp;t=6596\">https://www.youtube.com/live/8q2q_820Sx4?si=orTYufNa7c0yZKjC&amp;t=6596</a>\"</p><p>&nbsp;</p><p></p><h3>使用Next.js构建生成式UI（Building Generative UI with Next.js）</h3><p></p><p></p><p>在演讲中，Vercel公司AI副总裁Jared Palmer介绍了v0的使用方式——这是一款可根据自然语言提示生成UI代码的AI产品。v0使用Vercel的AI SDK并能够与Next.js无缝集成，为AI原生产品提供简化架构。Palmer还讨论了生成式用户界面时代的逐渐来临，以及Next.js 14将如何为这个新时代奠定基础。</p><p>&nbsp;</p><p>演讲链接：</p><p><a href=\"https://www.youtube.com/live/8q2q_820Sx4?si=HOUMd0cdM4zD0dOi&amp;t=12777\">https://www.youtube.com/live/8q2q_820Sx4?si=HOUMd0cdM4zD0dOi&amp;t=12777</a>\"</p><p>&nbsp;</p><p></p><h3>关于无头CMS的大骗局（The Big Headless CMS Lie）</h3><p></p><p></p><p>Payload（可支持MongoDB的无头CMS）公司联合创始人James分享了在Web开发中使用无头CMS时的缺点和局限性。他本人对于无头CMS的种种承诺经常提出质疑，例如关注点分离和内容迁移便捷性等等，并认为这些说法跟开发者和客户面临的实际情况往往对不上号。James正考虑将Payload与Next.js直接集成，借此克服局限并提供更好的开发者体验，包括开箱即用的功能和更简单的部署流程。</p><p>&nbsp;</p><p>演讲链接：</p><p><a href=\"https://www.youtube.com/live/8q2q_820Sx4?si=jJ-rFUopxbZxl6f0&amp;t=13647\">https://www.youtube.com/live/8q2q_820Sx4?si=jJ-rFUopxbZxl6f0&amp;t=13647</a>\"</p><p>&nbsp;</p><p></p><h3>React与Next.js中的性能问题（Performance in React and Next.js）</h3><p></p><p></p><p>Lydia的演讲重点关注React 18中的Web性能增强，并讨论Next.js该如何利用这些进步。她提到主线程上长任务带来的挑战，及其对用户体验造成的影响。Lydia还谈到React 18的并发功能，这些功能将带来更灵敏、无阻塞的用户交互和流畅的状态更新效果。她重点介绍了Next.js如何进一步优化这些功能，为开发者提供开箱即用的解决方案，借此提高应用程序性能。</p><p>&nbsp;</p><p>演讲链接：</p><p><a href=\"https://www.youtube.com/live/8q2q_820Sx4?si=RA90SGQxr_uJFHMd&amp;t=15612\">https://www.youtube.com/live/8q2q_820Sx4?si=RA90SGQxr_uJFHMd&amp;t=15612</a>\"</p><p>&nbsp;</p><p></p><h3>Next.js大会直播：Twitch最佳（Live from Next.js Conf: Twitch Takeover）</h3><p></p><p></p><p>Theo、Madison和Prime都在会议期间对Next.js进行了现场直播。向大家推荐Theo的Twitch直播，这边的观看氛围和实时评论最好。</p><p><a href=\"https://www.twitch.tv/theo\">https://www.twitch.tv/theo</a>\"</p><p>&nbsp;</p><p>演讲链接：</p><p><a href=\"https://www.youtube.com/live/8q2q_820Sx4?si=8NKSU2YotvgXKmpR&amp;t=8421\">https://www.youtube.com/live/8q2q_820Sx4?si=8NKSU2YotvgXKmpR&amp;t=8421</a>\"</p><p>&nbsp;</p><p></p><h3>使用App Router解锁可组合内容（Unlocking Composable Content with the App Router）&nbsp;-&nbsp;Kapehe&nbsp;&amp;&nbsp;Grant Sander</h3><p></p><p></p><p>Kap和Grant讨论了在Next.js中使用App Router的好处和挑战，而且重点强调了该功能对于Formidable业务的影响。对话涉及App Router如何通过服务器组件与异地数据获，以及将Sanity Studio直接嵌入Next.js应用程序的方式来提高使用体验。演讲还讨论了迁移问题，主要集中在库兼容性方面，并深入分析了如何使用revalidateTag函数在Sanity与Next.js之间进行缓存和重新验证。</p><p>&nbsp;</p><p>演讲链接：<a href=\"https://youtu.be/FdiX5rHS_0Y?si=ynq58oFRm89KuVp7&amp;t=605\">https://youtu.be/FdiX5rHS_0Y?si=ynq58oFRm89KuVp7&amp;t=605</a>\"</p><p>&nbsp;</p><p></p><h3>使用Vercel扩展开源学习平台（Scaling an Open Source Learning Platform with Vercel）</h3><p></p><p></p><p>Chris（花名Trash）讨论了TypeHero团队如何利用Next.js和Vercel生态系统快速扩展其开源学习平台。他强调了这套框架的突出优势，例如用于高效数据渲染的React Server Components和用于嵌套路由的基于文件路由设计。他还分享了现实应用中的挑战和解决方案，包括使用Turborepo大幅缩短构建时间，并利用Vercel的协作功能进行UI/设计反馈。</p><p>&nbsp;</p><p>演讲链接：</p><p><a href=\"https://youtu.be/FdiX5rHS_0Y?si=Ox5rYirYInQa0n46&amp;t=1639\">https://youtu.be/FdiX5rHS_0Y?si=Ox5rYirYInQa0n46&amp;t=1639</a>\"</p><p>&nbsp;</p><p></p><h3>为Next.js应用注入实时与协同特性（Make Your Next.js App Realtime and Collaborative）</h3><p></p><p></p><p>Sylwia以开发投票应用为例，讨论了如何让Next.js应用程序获得实时与协同特性。她介绍了PartyKit工具，能够在简化实时数据WebSocket实现过程的同时，避免运行自有服务器。通过将PartyKit与Next.js相结合，她演示了如何创建一款功能全面的实时民意调查应用，用户可以与之交互并查看代码和部署过程。</p><p>&nbsp;</p><p>演讲链接：</p><p><a href=\"https://youtu.be/FdiX5rHS_0Y?si=DhBaNB8DNcTEPJHr&amp;t=3350\">https://youtu.be/FdiX5rHS_0Y?si=DhBaNB8DNcTEPJHr&amp;t=3350</a>\"</p><p>&nbsp;</p><p></p><h3>如何让RSC与SSR紧密配合（RSC and SSR: How it Fits）</h3><p></p><p></p><p>Tejas深入研究了React服务器组件（RSC）的复杂性，及其如何在Next.js场景下与服务器端渲染（SSR）相集成。他以狗狗品类展示网站为例剖析了React元素的概念，并解释了如何让RSC与SSR紧密协作。Tejas还演示了Next.js中的软导航机制，强调服务器组件输出的是JSX对象、而非HTML字符串，这就实现了更流畅且愈发出色的用户体验。</p><p>&nbsp;</p><p>演讲链接：</p><p><a href=\"https://youtu.be/FdiX5rHS_0Y?si=4twi_q-XuaosTi85&amp;t=9523\">https://youtu.be/FdiX5rHS_0Y?si=4twi_q-XuaosTi85&amp;t=9523</a>\"</p><p>&nbsp;</p><p></p><h3>Vercel不会告诉你的秘密（The Things Vercel Won’t Show You）</h3><p></p><p></p><p>Theo在Next.js中探索了Vercel一般不推荐的非常规、甚至“被诅咒”的反模式。演讲涵盖了一系列从勉强可以接受、到堪称“大逆不道”的策略，例如通过Server Actions进行分页、使用globalThis作为SSR帮助程序，甚至使用generator函数来实现服务器到客户端的组件更新等。这些策略虽然很少用到，但却有助于突破Next.js的可能性边界。</p><p>&nbsp;</p><p>演讲链接：</p><p><a href=\"https://youtu.be/FdiX5rHS_0Y?si=21zZ4aQXCLdoFFDs&amp;t=11375\">https://youtu.be/FdiX5rHS_0Y?si=21zZ4aQXCLdoFFDs&amp;t=11375</a>\"</p><p>&nbsp;</p><p></p><h3>使用Next.js中的AI实现客户邮件处理自动化（Automate All of Your Customer Emails with AI in Next.js）&nbsp;</h3><p></p><p></p><p>Joel整理了一份关于在Next.js环境中用AI自动处理客户邮件的综合指南。此次演讲强调建立一套灵活、立足代码层级且由事件驱动的邮件处理流程，并推荐了inngest这款自动化管理工具。演讲的核心就是演示hooks如何利用摄取功能，根据用户的特定操作来触发邮件处理，并通过基于GPT的AI模型进行多轮生成并完善邮件内容本体，从而输出高质量、与上下文相匹配的客户邮件。</p><p>&nbsp;</p><p>演讲链接：</p><p><a href=\"https://youtu.be/FdiX5rHS_0Y?si=3I3TZTY7y_EQUngA&amp;t=13145\">https://youtu.be/FdiX5rHS_0Y?si=3I3TZTY7y_EQUngA&amp;t=13145</a>\"</p><p>&nbsp;</p><p>&nbsp;</p><p>本文灵感来自Vercel团队撰写的综述文章。</p><p>&nbsp;</p><p>要深入了解并探索文中提到的各项功能，请参阅Vercel Next.js 14原始博文：</p><p><a href=\"https://nextjs.org/blog/next-14\">https://nextjs.org/blog/next-14</a>\"</p><p></p><p></p><h5>相关阅读：</h5><p></p><p><a href=\"https://www.infoq.cn/article/sITi66wc3mvcNs3PeRkb\">Next.js 13 新的实验性特性，实现 App“动态无限制”</a>\"</p><p><a href=\"https://www.infoq.cn/article/9G0lBWi2W58114ggfyge\">我们如何使用 Next.js 将 React 加载时间缩短 70%</a>\"</p><p><a href=\"https://www.infoq.cn/article/VbDui4DRa2Lhq3h0ad2Z\">为什么说 Next.js 13 是一个颠覆性版本</a>\"</p><p><a href=\"https://xie.infoq.cn/article/93e23e080e828a8989a57a622\">Next.js&nbsp;实践：从 SSR 到 CSR 的优雅降级</a>\"</p>",
    "publish_time": "2023-11-09 10:13:53",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "KusionStack 项目开源负责人柴树杉，确认担任 QCon 构建本土编程语言生态的实践专题出品人",
    "url": "https://www.infoq.cn/article/RVN7yTgS45HWd9rBNGRh",
    "summary": "<p><a href=\"https://qcon.infoq.cn/2023/shanghai/?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_term=1109&amp;utm_content=chaishushan\">QCon 全球软件开发大会</a>\"，将于 12 月在上海召开。KusionStack 项目开源负责人柴树杉将担任「<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1603?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_term=1109&amp;utm_content=chaishushan\">构建本土编程语言生态的实践</a>\"」的专题出品人。在此次专题中，你将了解到任何语言和芯片要真正进入生产领域都需要编译器的支持，编译优化和多芯片等异构平台的支持始终是芯片、编译器、语言需要面临的问题。</p><p></p><p><a href=\"https://qcon.infoq.cn/2023/shanghai/track/1603?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_term=1109&amp;utm_content=chaishushan\">柴树杉</a>\"，凹语言联合发起人。同时也是国内最早一批 Go 语言和 WebAssembly 技术爱好者。出版了《WebAssembly 标准入门》《Go 语言高级编程》《Go 语言定制指南》等畅销图书。</p><p></p><p>相信柴树杉的到来，可以帮助提升此专题的质量，让你学习到最近几年国内在本地编程语言和编译器方向的尝试和取得的发展，以及 Go、Rust、WASM、云原生、多芯片等不同技术对新编程语言发展带来的影响，能够给对新编程语言、编译器等技术感兴趣，有志于推动国产基础软件发展，崇尚技术，追求技术实践，乐于倾听、分享 / 思考、提问的人员，带来新的思考和方向。</p><p></p><p>除上述专题外，QCon 上海还将围绕&nbsp;<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1598?utm_source=infoqweb&amp;utm_medium=teacherart\">智能化信创软件&nbsp;IDE</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1595?utm_source=infoqweb&amp;utm_medium=teacherart\">GenAI和通用大模型应用探索</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1597?utm_source=infoqweb&amp;utm_medium=teacherart\">LLM&nbsp;时代的性能优化</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1599?utm_source=infoqweb&amp;utm_medium=teacherart\">LLM&nbsp;时代的大前端技术</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1602?utm_source=infoqweb&amp;utm_medium=teacherart\">面向人工智能时代的架构</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1604?utm_source=infoqweb&amp;utm_medium=teacherart\">性能工程：提升效率和创新的新方法</a>\"等专题进行交流。</p><p></p><p>QCon 上海 2023，相约 12 月！现在购票，享 7 折优惠，立减￥2040！咨询购票请联系：18514549229（微信同手机号）。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/01/0113b3dfb187d5f9988b7eb16d2e0594.png\" /></p><p></p>",
    "publish_time": "2023-11-09 11:30:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "重塑GitHub、颠覆程序开发：GitHub Universe 2023发布重大更新",
    "url": "https://www.infoq.cn/article/bwZ5qPQsZKyRLXkC1Mit",
    "summary": "<p>GitHub 的东家微软看到了生成式 AI业务的大幅增长，其首席执行官萨蒂亚·纳德拉 (Satya Nadella) 告诉华尔街，GitHub Copilot 软件的付费客户在第三季度比上一季度增长了 40%。纳德拉表示：“我们在超过 37,000 个组织中拥有超过 100 万付费Copilot用户。”</p><p>&nbsp;</p><p>现在，该平台以现有的全球用户群为基础，在正在进行的年度 GitHub 会议——Universe 2023上发布了新的人工智能重大公告：GitHub公布Copilot企业计划，允许客户根据代码库做功能定制，并公布了Copilot Chat的明确推出时间。</p><p>&nbsp;</p><p>GitHub 首席执行官Thomas Dohmke表示，他们正在逐步将 Copilot 与 GitHub 各方面融合，并将其作为一个重要组成部分。可以说，这是GitHub的一次重塑，正如他所说：“就像 GitHub 是在 Git 基础上构建的一样，今天我们正在 Copilot 的基础上重新构建它。”</p><p>&nbsp;</p><p>关于这次的“重建”，一些网友评论说这似乎朝着使每个人都能够编写代码的方向迈出了坚实的一步。但也有人担心微软这个举动会破坏掉GitHub的协作能力，因此有人建议保留Git部分，单独建立一个GitHub Copilot平台。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/3f/3fbdfbe29da62eca24bcaedca669c01b.jpeg\" /></p><p></p><p>&nbsp;</p><p>&nbsp;</p><p>无论如何，今年的开发者工具取得了非常显著的进展，GitHub的意义也不再仅作为一个代码托管平台了。我们还总结了 GitHub Universe 2023 上的重大更新：&nbsp;</p><p>&nbsp;</p><p></p><h2>Copilot Chat将全面上线</h2><p></p><p>&nbsp;</p><p>GitHub早在今年3月就公布了Copilot Chat的相关消息，7月向企业用户交付了beta公测版，并于9月将个人用户也纳入公测范围。下个月（12月），Copilot Chat将全面上线，不过GitHub没有给出通用版本的确切落地日期。</p><p>&nbsp;</p><p>简而言之，Copilot Chat是一款聊天机器人，运行在开发者的集成开发环境（IDE）之内，允许用户就当前正在处理的代码询问相关问题，包括让它们识别特定程序中的bug并提供修复建议，甚至可以就特定代码行做出内联反馈。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/73/73d91365465b27bcb41740dbbd68d703.png\" /></p><p></p><p>GitHub Copilot Chat。</p><p>Copilot Chat由最新OpenAI大语言模型（LLM）GPT-4提供支持，并作为标准Copilot订阅套餐的组成部分，个人用户每月10美元，企业用户每月19美元。</p><p>&nbsp;</p><p></p><h2>企业级新套餐</h2><p></p><p>&nbsp;</p><p>GitHub同时表示将推出新的企业级Copilot订阅套餐，每月收费为39美元。Copilot Enterprise将于2024年2月正式发布，将包含现有业务套餐中的所有内容，外加一些值得关注的附加功能——包括允许公司利用自有代码库进行底层模型微调，从而获得更加个性化的Copilot Chat使用体验。</p><p>&nbsp;</p><p>基本使用方式为：公司将Copilot接入自己的代码库，开发者即可获得关于内部私有代码的相关建议。这又与前面提到的Copilot Chat新功能有所关联。对于订阅了Copilot Enterprise的用户来说，Copilot Chat将超越代码编辑器和IDE，一路延伸至GitHub.com，帮助开发人员深入研究自己的代码、文档和PR，提供更为广泛的问题摘要、建议和答案。</p><p>&nbsp;</p><p>GitHub CEO Thomas Dohmke在最新发布的评论博文中表示，“通过将Copilot Chat接入您在GitHub.com上的代码仓库，Copilot Enterprise可以帮助您的开发团队快速厘清代码库、搜索和构建文档、根据内部及私有代码获取建议，并快速审查PR。组织代码库中的集体知识将跃然于您的指尖，开发人员不仅可以加快代码编写速度，更能够以领先于竞争对手的方式部署应用程序、功能和更新。”</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c0/c0121c7ac431131f834b9e458f782c2a.png\" /></p><p></p><p>Copilot Enterprise：通过“智能操作”生成PR摘要。</p><p>&nbsp;</p><p>其实在此之前，Copilot Chat就已经能够与IDE中的私有工作区配合使用，只不过后者要求用户在本地保存一份代码仓库副本。Copilot Enterprise所做的就是围绕云端代码及相关文档开放各种形式的AI对话，同时允许企业用户微调底层模型，以便Copilot能够更好地补全代码、并回答关于给定代码库提出的具体问题。</p><p>&nbsp;</p><p>GitHub产品管理副总裁Mario Rodriguez在采访中表示，“我们的最终目标就是提供一款对话式、无处不在、个性化且值得依赖的Copilot，这种种诉求就实际转化成了我们现在看到的Copilot Enterprise。”</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2e/2e00b810eb4b7e25e51162b94b9c391e.png\" /></p><p></p><p>在GitHub Copilot Enterprise中创建定制化模型。</p><p>&nbsp;</p><p>参与这项功能初始测试的，就有GitHub的合作伙伴、芯片巨头AMD公司。该公司表示微调之后的Copilot模型能够支持Verilog等硬件设计语言，这在标准Copilot版本中显然是无法实现的。</p><p>AMD公司软件开发高级总监Alexander Androncik在一份声明中指出，“定制化Copilot模型为众多AMD硬件工程师带来了AI辅助功能，可提供准确且质量卓越的AI建议，同时紧密契合我们的产品设计风格。”</p><p>&nbsp;</p><p>在相关新闻中，GitHub还透露将“在未来几个月内”推动Copilot Chat登陆GitHub移动应用，同时增加对JetBrain IDE套件的支持（当前仅支持VS Code与Visual Studio代码编辑器）。此举明显是在回应广大用户的需求和期盼——“你们既然要求了，我们当然会明确做出回应，”Dohmke表示。</p><p>&nbsp;</p><p></p><h2>进一步扩展Copilot</h2><p></p><p>&nbsp;</p><p>本届GitHub Universe大会上发布的另一份重量级公告，则是Copilot的合作伙伴计划。该计划将推动GitHub与更广泛的开发者社区建立合作，具体将以第三方开发工具厂商构建的插件形式出现，包括正在为Copilot打造集成方案的Daastax、LaunchDarkly、Postman、HashiCorp及Datadog等。</p><p>&nbsp;</p><p>Dohmke强调，“随着这一生态系统的不断扩大，GitHub Copilot能够为开发者分担的工作也将越来越多、用例愈加丰富。从协助提高数据库查询性能、到检查功能标记的状态，再到查看A/B测试结果——所有这一切、乃至更多应用场景将很快成为可能。这都要归功于那些正在为GitHub Copilot持续开发插件的合作伙伴们。”</p><p>&nbsp;</p><p>本次大会公布了包含25家合作厂商的首批名单，GitHub还在积极向更多希望参与进来的公司开放早期访问计划。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/36/360244574f5de55429cefc69c9ca81b8.png\" /></p><p></p><p>GitHub Copilot合作伙伴计划：以Datastax为例。</p><p>&nbsp;</p><p>最后一条与Copilot相关的消息，就是GitHub初步介绍了所谓Copilot Workspace，据称它能以自然语言方式帮助开发者在短短几分钟内将设计灵感转化为可运行代码。开发人员首先在Copilot&nbsp;Workspace当中提出问题，之后AI会给出自动生成的计划，指导如何实现变更需求。当然，开发者也可以灵活编辑这些计划，通过“引导”让AI更好地理解问题、提供建议。这项功能预计将在2024年年内落地。</p><p>&nbsp;</p><p>Dohmke表示，“Copilot Workspace的使用感受，类似与合作伙伴进行结对编程。它了解项目中的方方面面，而且会跟随你的指引，依托AI的力量在代码仓库中完成问题回应和PR变更等各种用例。”</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/05/05e555977b007fd0d9093c819ad5f4e6.png\" /></p><p></p><p>Copilot Workspace.</p><p></p><h2>安全保障，以及更多</h2><p></p><p>在安全方面，GitHub还对2020年首次内置在IDE中的功能进行了增强。其中包括secret扫描与代码扫描，向GitHub用户开放漏洞自动智能检测，并发现那些无意中被遗漏在公共代码中的secret（例如密码）。</p><p>&nbsp;</p><p>现在，GitHub还在添加新的AI元素，包括用于代码扫描的“autofix”自动修复功能，可帮助开发人员快速完成安全修正。AI能够根据PR中的CodeQL、JavaScript及TypeScript警报生成相应修复方案。</p><p>&nbsp;</p><p>GitHub产品管理副总裁Asha Chakrabarty在博文中提到，“这些新功能带来的可不只是修复意见，而是精确、可操作的操作指导，能帮助开发者快速了解漏洞情况和修复思路。”</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4e/4e515ba4b341fbbfc560a31ba4ca5919.png\" /></p><p></p><p>GitHub Copilot中的代码扫描autofix自动修复功能。</p><p>&nbsp;</p><p>开发人员可以通过单击将这些修复直接提交到代码当中，也可以先对修复方案进行编辑修改、之后再合并进代码库。</p><p>&nbsp;</p><p>Chakrabarty总结道，“这项功能的优点，在于它带来了无摩擦的修复体验。用户可以在编码的同时快速修复漏洞，这不仅缩短了修复耗时，而且实际准确性也完全能够达到用户的预期。”</p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://github.blog/2023-11-08-universe-2023-copilot-transforms-github-into-the-ai-powered-developer-platform/\">https://github.blog/2023-11-08-universe-2023-copilot-transforms-github-into-the-ai-powered-developer-platform/</a>\"</p><p><a href=\"https://techcrunch.com/2023/11/08/github-teases-copilot-enterprise-plan-that-lets-companies-customize-for-their-codebase/\">https://techcrunch.com/2023/11/08/github-teases-copilot-enterprise-plan-that-lets-companies-customize-for-their-codebase/</a>\"</p><p><a href=\"https://twitter.com/ashtom/status/1722313836798320715\">https://twitter.com/ashtom/status/1722313836798320715</a>\"</p><p><a href=\"https://twitter.com/LinusEkenstam/status/1722320525454676063\">https://twitter.com/LinusEkenstam/status/1722320525454676063</a>\"</p>",
    "publish_time": "2023-11-09 14:05:07",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "里程碑式技术与应用突破！YashanDB V23.1三大新品重磅发布",
    "url": "https://www.infoq.cn/article/55af544caf3f07469876d4c7a",
    "summary": "<p>11月8日，YashanDB 2023年度产品发布会在线上成功召开。本次产品发布会以“惟实·励新”为主题，宣布YashanDB内核能力、产品形态、生态创新全面升级，标志着YashanDB商业化进程又迈出了重要一步！</p><p></p><p></p><p>01</p><p>╱ 三大新品重磅发布 ╱</p><p></p><p>面向企业级核心应用、大数据分析、空间数据管理场景，YashanDB精心打造了自主内核的企业级完整产品体系，首次发布YashanDB for Cluster共享集群、YashanDB for Data Warehouses分布式实时数仓以及YashanDB for GIS空间数据库三大产品形态，用户可以结合业务特点，灵活选择适用的产品形态，极大了降低企业数据管理的成本，实现了高端核心替代以及实时分析、GIS等创新业务场景的全覆盖。</p><p></p><p>目前YashanDB在金融、政务、能源等行业核心业务系统得到验证和应用，以高度兼容性、卓越性能以及高可用能力高效支撑了业务创新发展。</p><p></p><p>内核增强 “理论+技术+场景”三架马车齐头并进</p><p>2023年，YashanDB通过理论算法、关键技术以及行业场景“三驾马车”驱动产品快速成熟。</p><p></p><p>理论算法层面，YashanDB融入原创的有界计算理论和跨模融合计算理论，实现“大数据变小”和破除结构化数据与非结构化数据的壁垒。同时计算架构采用自适应异步并行架构与并发事务调度，实现了算法级别的创新。</p><p></p><p>关键技术层面，YashanDB V23.1自研优化器、并行与向量化计算能力、分布式计算能力全场景覆盖，使得全形态性能大幅度提升。此外，YashanDB V23.1在ARM服务器等国产硬件平台上持续优化，性能较22.2版本提升30%以上。</p><p></p><p>行业场景层面，基于金融、政务、运营商等多行业的打磨与应用，YashanDB在兼容性、安全性以及生态工具方面持续增强。以Oracle兼容性为例，YashanDB V23.1 UDT具备灵活扩展能力，DBLink实现多库协同，组合分区支持集中式和分布式，高级特性方面的兼容程度得到了进一步扩展与深化。</p><p><img src=\"https://static001.geekbang.org/infoq/e7/e7bc7cccdef34eb02c70fe3ac25e072c.png\" /></p><p></p><p>YashanDB for Cluster 共享集群重磅发布</p><p>YashanDB首次推出面向金融关键行业核心系统的共享集群产品形态（YashanDB for Cluster）。该形态采用单数据库多实例架构，所有节点之间以强一致性方式实现并发读写，为高端核心业务提供了应用透明的高可用、高扩展、高性能数据库能力。</p><p></p><p>共享集群完美承继集中式系统的能力，应用层能够以透明的方式实现对多个实例的平等访问。此外，基于高性能内核、Cohesive Memory以及并行文件系统等技术，共享集群性能表现优异，在同等硬件条件之下，YashanDB双节点集群的TPCC性能达到了210万，超主流商业数据库50%。</p><p></p><p>共享集群架构为应用连续性保驾护航，任一节点故障，故障自动恢复，业务无感知，故障恢复时间RTO小于20s，数据丢失量RPO为零。发布会现场在“拔网线、掐电源”极端操作下，系统即刻快速恢复，依旧运行平稳。</p><p><img src=\"https://static001.geekbang.org/infoq/cd/cd804408d93cd107901ba05828c8adfe.png\" /></p><p></p><p>作为企业级应用的核心支撑与根技术，数据库产品的稳定可靠是企业的生命线。YashanDB基于共享集群以及数据备份、备份厂商、多地多中心灾备等多层备份容灾架构，构筑了6层金融级高可用架构能力。</p><p></p><p>近期，金融信息化研究所联合YashanDB等多家单位共同启动金融多主数据库应用行动计划，共同推动我国金融行业核心系统数据库多主架构的升级。</p><p></p><p>分布式实时数仓 TPCH性能是开源数据库10倍以上</p><p>YashanDB发布基于MPP架构的分布式实时数仓，采用独特的实时列存引擎与稳态列式引擎，提供高性能写入与更新、事务强一致、大容量、高压缩和分析查询能力。</p><p></p><p>23.1版本自研优化器、向量化执行、并行计算以及分布式计算能力全场景覆盖，使得AP并行分析查询能力进一步突破，Benchmark测试TPC-H性能是国外某著名开源数据库的10倍以上，每节点导入性能达到300MB/s。</p><p><img src=\"https://static001.geekbang.org/infoq/55/55fe7554b29defad6ca9141242bf3fe3.png\" /></p><p></p><p>YashanDB for GIS 首次发布</p><p>YashanDB for GIS是一款具备对矢量地图、激光云点、栅格、轨迹、遥感影像等空间数据建立统一存储、查询与分析能力的新型数据库形态，基于“原生GIS数据库引擎”与“GIS引擎+数据库”两种模式，形成GIS引擎与SDE引擎双形态空间能力。</p><p></p><p>YashanDB 23.1版本对地理空间数据管理模型进行了扩展，增加了对空间坐标系，矢量、栅格、网络等数据类型，空间索引等功能的支持，性能是开源空间数据库的3倍以上。</p><p><img src=\"https://static001.geekbang.org/infoq/c8/c84c8be6207afd13d8ceb0eb4e264bad.png\" /></p><p></p><p></p><p>02</p><p>╱&nbsp;聚力创新</p><p>&nbsp; &nbsp;5大行业解决方案发布&nbsp;╱</p><p></p><p>深入行业，以硬核技术为行业数字化发展注入新的活力。在发布会现场，YashanDB携手合作伙伴发布智慧城市、金融核心、可组装企业级PaaS平台、空间数据管理以及数据交互5大行业解决方案。</p><p><img src=\"https://static001.geekbang.org/infoq/9a/9a2ae47071dbfca29ba74d852032a611.png\" /></p><p></p><p>深智城&nbsp;&amp; YashanDB智慧城市解决方案</p><p>深智城集团副总经理隆颢介绍，深智城与YashanDB共同发布的智慧城市联合解决方案，实现了大规模时空数据高效存储与快速访问，助推深圳智慧城市与数字政府的高质量发展；基于YashanDB在强一致性、复杂查询、可扩展性以及空间数据支持方面的优势，有力地支撑深圳市全市域时空信息平台的建设。</p><p></p><p>长亮科技 &amp; YashanDB金融核心解决方案</p><p>长亮科技数金解决方案部副总经理唐诗介绍，长亮科技与YashanDB共同携手，以国产技术助力金融业高质量发展。该方案以YashanDB为数据库底座，具备性能极致稳定、金融级高可用、Oracle语法高度兼容、全栈国产化的优势，为金融行业的核心业务、结算、资产等关键应用加速，全面保障银行核心业务系统数据安全。</p><p></p><p>金蝶云·苍穹 &amp; YashanDB企业级PaaS平台解决方案</p><p>发布会上金蝶云·苍穹与YashanDB的可组装企业级PaaS平台解决方案正式发布。金蝶中国苍穹平台解决方案事业部技术总监赵永介绍，YashanDB以高效的资源效率、数据导入性能以及监控运维能力，与金蝶云·苍穹平台实现了深度技术融合，形成可组装企业级PaaS平台解决方案，为财务、供应链、HR、创新应用等SaaS层应用提供一体化解决方案。</p><p></p><p>超图&nbsp;&amp;&nbsp;YashanDB空间数据管理解决方案</p><p>YashanDB联合超图软件推出空间数据管理联合解决方案。超图软件研究院内核研发中心副总经理云惟英介绍，基于YashanDB 分布式并行计算、空间索引、空间大数据对象以及跨模融合查询等能力，与超图SuperMap GIS平台深度适配，具备更高效、更灵活的行业空间数据管理及空间大数据挖掘分析能力。</p><p></p><p>DSG &amp; YashanDB数据交互解决方案</p><p>迪思杰数据高级售前经理李雪健介绍，DSG与YashanDB联合打造的数据交互解决方案完美契合市场需求，通过DSG大型高性能复制平台与YashanDB开放生态的优势互补，实现关系型数据库、云数据库、大数据平台等多种数据源与YashanDB之间的异构数据双向复制与同步，基于实时日志解析技术充分确保数据同步的时效性与稳定性。</p><p></p><p></p><p>03</p><p>╱&nbsp;面向广大用户</p><p>&nbsp; &nbsp;个人版全面开放下载╱</p><p></p><p>在产品的持续迭代与演进过程中，真实场景和实际用户的使用与反馈起着至关重要的作用。</p><p></p><p>发布会上，YashanDB产品总监王南正式宣布YashanDB个人版已正式向所有用户和开发者全面开放下载，该版本已在官网同步上线（download.yashandb.com），供大家免费下载使用。</p><p></p><p>个人版包含YashanDB数据库所有基础核心能力，支持单机主备部署形态，配套开发者工具，供个人用户或开发者用于学习、测试以及开发用途。我们诚挚邀请您前往YashanDB官网下载使用，并期待您的体验反馈！</p><p><img src=\"https://static001.geekbang.org/infoq/2b/2b075bddea214f2dd3f2658d5fd9df38.png\" /></p><p></p><p>YashanDB产品总监王南表示，基础软件的发展需要基础理论、核心技术与人才、应用生态和场景的合力，三者缺一不可。只有这样，数据库发展才能走得稳、走得远。中国基础软件行业已经具备了“根技术创新”的能力和“向上生长”的动力，产业发展的黄金时代已经到来！</p><p></p><p></p><p>关于崖山数据库系统</p><p>崖山数据库系统YashanDB是深圳计算科学研究院自主研发设计的新型数据库系统。在经典数据库理论基础上，融入原创的有界计算理论、近似计算理论、并行可扩展理论和跨模融合计算理论，支持单机/主备、共享集群、分布式等多种部署方式，覆盖OLTP/HTAP/OLAP交易和分析混合负载场景，全面兼容私有化及云基础设施，为客户提供一站式的企业级融合数据管理解决方案，满足金融、政府、电信、能源等关键行业对高性能、高并发及高安全性的要求。</p><p></p>",
    "publish_time": "2023-11-09 10:16:16",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "安全不是主角，中国银联：低侵入、少打扰是高效安全研发体系的前提",
    "url": "https://www.infoq.cn/article/Hx2R2OGwCmOV4gsmPiKE",
    "summary": "<p>在当前金融科技行业中，安全问题已经成为各大公司和机构关注的焦点。随着敏捷模式的普及，由于前台市场需要的是高质量的快速响应，软件研发周期日益缩短，传统的安全措施逐渐显示出其局限性，新的安全策略和方向成为业内热议的话题。如何在研发的早期阶段就整合安全措施，以及如何在整个研发生命周期中确保产品的安全性，是当前面临的两大挑战。</p><p></p><p>2017 年前后，以“<a href=\"https://fcon.infoq.cn/2023/shanghai/presentation/5554\">安全左移</a>\"”为核心的 <a href=\"https://www.infoq.cn/article/fv25HvvTwYfkGdOVFGQ7?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">DevSecOps</a>\" 概念开始出现，强调将安全测试环节尽量前置，在研发测试过程中完成一些安全工作，给开发留出整改时间，从而避免影响软件上线进度，或导致应用“带病”上线。</p><p></p><p>但是，安全手段真的是越“左”越好吗？在中国银联技术开发中心安全攻防团队总监蔡水捷看来，事实并非如此。</p><p></p><p>“安全左移与内生安全都旨在提高产品安全，但责任定位有显著差异。安全左移强调尽早集成安全措施，但过度强调可能导致责任推诿。每个研发阶段都有其特点，而过分侧重早期阶段可能会忽略后期的安全工作。实际操作中应结合组织特点，确保整体安全性，而非仅追求左移。”</p><p></p><p>在日前的 InfoQ《超级连麦·数智大脑》直播节目中，蔡水捷深入介绍了中国银联的安全研发体系建设实践。他表示，有效的安全措施应低侵入、少打扰，尽量融入到现有的研发流程中。在各个阶段，中国银联都明确了安全的重点，比如，在需求阶段主要关注合规性和数据安全，并设计了易于理解的场景式安全问卷；而在编码和测试阶段，则利用自动扫描和各种测试工具来保障代码的安全。</p><p></p><p>以下是全文（经 InfoQ 进行不改变原意的编辑整理）：</p><p></p><h5>InfoQ：我们看到，研发安全保障的技术和理念是随着软件研发模式而演化的，根据您在金融行业应用安全领域的多年经验，软件研发模式及背后的安全理念，近年来经历了哪些里程碑式的演变和发展？</h5><p></p><p></p><p>蔡水捷：软件研发在历史进程中主要经历了三个核心模式。首先，是传统的瀑布式模式。其次，随着市场对快速响应的需求，<a href=\"https://www.infoq.cn/article/7thTCYelKa8POr7ghzZE\">敏捷模式</a>\"应运而生，其中包括结对编程等方法。最后，人们可能最为熟知的就是研运一体化模式，简称 DevOps。</p><p></p><p>然而，在软件研发模式的演变过程中，安全的发展相对滞后。早期，人们对于软件安全的认知大多停留在工具扫描阶段，即在版本上线或交付前做一次扫描并出报告。如果当时有专业安全人员参与人工渗透测试，那已经算是非常细致的工作了。但随着敏捷模式的兴起，市场对于高质量、快速响应的需求日益增强。传统的上线前的安全检测方式，如发现安全漏洞，往往会处于尴尬的地步，因为交付时间已经确定，此时要么推迟版本上线，要么带有安全隐患上线，都可能对公司的信誉造成损害。</p><p></p><p>为了解决这个问题，安全工作开始提前介入，不再集中在交付的最后阶段，而是融入到研发测试的中间环节。这样既可以为问题修复留出更多时间，又能保证软件的安全性。进入研运一体化的时代，它的初衷是为了满足软件开发和基础设施管理更高效、可靠的需求，将开发与运维整合在一起，实现持续集成和持续交付。在这个阶段，软件开发所需的基础设施已经相对完善，自动化能力如发布、安装等也日趋成熟。传统的安全检测方式，如黑盒扫描、白盒扫描等，纷纷与流水线集成，进行自动化扫描、开单和跟踪，从而提高信息化程度。</p><p></p><p>总体来看，随着研发模式的变化和企业基础能力的完善，安全也逐渐从原始的手动扫描转变为更自动化、信息化的方式。</p><p></p><h5>InfoQ：能不能具体介绍一下“左移”和“内生”这两个概念的本质区别？是什么导致谈了这么多年的“安全左移”无法再发挥优势？</h5><p></p><p></p><p>蔡水捷：首先，左移和内生本身字典的解释就不一样，一个强调的是移动，将能力赋予下一个对象，一个强调的是内部自我进化。我认为左移和内生本质区别在于责任担当的定位。</p><p></p><p>我查了一些资料，关于安全左移是何时提出的，有个说法是在 2017 年的 RSAC 会议引入了 DevSecOps 概念，国外某个科技公司负责 DevSecOps 的一个总监的，我也进一步查了这个人的背景，是数据中心出身。包括后来很多人提的左移，大都是站在尽量避免安全测试等在应用系统上线前一刻才做的角度去讲。</p><p></p><p>将安全越左越好，但是真的是这样吗？我认为不是的，从软件研发生命周期来看，每个阶段都有自己的特点，比如需求阶段，这个时候我们关注的是什么，是需求中侧重安全合规性的内容，因为需求是产品人员、非技术人员写的，我们能说在需求阶段就把后续一系列安全工作包圆了吗？很难。从另一个角度看，我把研发安全的工作堆积到左侧，那右侧是不是不用做了，因为左侧显然从组织分工上也是不现实的。</p><p></p><p>我认为发展至今，安全左移的优势已慢慢退怯，现在的工作是越来越精细化了，组织结构也是越来越完善，职责边界很清楚，各方都擅长自己熟悉的领域，一味强调左移，造成了安全工作的推诿扯皮，重心都在“我希望在你的地盘把安全做的再好一点，使得自己这一端的压力小一点”。可是凭什么呢？到最后，整体的安全没有多少提升。</p><p></p><h5>InfoQ：中国银联整体的安全研发体系思路是如何设计的？其中有哪些亮点？</h5><p></p><p></p><p>蔡水捷：在整合安全保障措施的各个环节中，一个至关重要的前提是企业组织的研发过程必须是完备且相对成熟的。这是因为安全不能脱离研发过程单独存在。如果安全措施过于强硬或太过侵入地插入研发过程，可能会对整个研发产生较大的影响，甚至阻碍整体工作的进展。</p><p></p><p>安全保障并不是自然而然地存在于每个环节中，而是需要与组织的成熟度相结合。没有了这样的基础，谈论如何自动化或嵌入就毫无根基可言。幸运的是，由于我们的研发过程相对成熟，可以基于现有的技术平台进行工作。在实际操作中，我们遵循的原则是低侵入、少打扰，因为安全不能，也不应该成为主角。</p><p></p><p>我们的策略是尽量将安全活动融入到<a href=\"https://www.infoq.cn/article/RZJDKpFIZ7erv9EuYiVd\">研发流程</a>\"中，明确各个阶段的安全边界。例如，在需求阶段，我们主要关注合规性、数据安全和监管红线等问题。为此，我们设计了场景式的安全问卷，使用业务语言，如“是否使用验证码登录？”或“是否处理身份证号码等敏感信息？”这样，业务和产品人员可以轻松地理解并回答。</p><p></p><p>在编码阶段，我们的策略已经相对成熟，例如代码入库时自动触发扫描。在测试阶段，我们利用各种工具，如灰盒测试和黑盒测试。关键是，所有这些工作都是基于常用的研发流水线和平台，使其自然地融入研发过程中，对开发的影响也较小。</p><p></p><p>总的来说，我们的策略确实对开发人员有所帮助。当然，在初步实施安全策略时，我们采取了逐步的方法，首先关注大家普遍关心的问题，然后再逐渐扩大范围。</p><p></p><h5>InfoQ：什么样的研发过程可以被视为“完备和成熟”？它具备哪些核心特点或标准？</h5><p></p><p></p><p>蔡水捷：完备的研发过程首先要求企业组织有其自身的研发模式，无论是瀑布式还是敏捷式，都应有一个相对统一和标准的方法论。例如，当需求提交时，应该拆分功能点、进行开发，并在上线前进行变更委员会评审等一系列工作。整个研发管理流程应完备。缺乏这样的流程，谈论安全实际上是没有理论基础的。</p><p>只有当组织有了完整的研发管理过程，我们才能在其中找到合适的时机和点，将安全措施融入其中。制度的生命力在于落地执行。这些安全措施能否真正落地，取决于是否有一个数字化的研发平台供所有开发人员使用。</p><p></p><p>通过这样的平台，结合管理要求，我们可以将安全的自动化工具和其他数字化能力融入其中，形成一个有机组合。否则，任何措施都可能成为空谈。例如，一个组织如果没有任何流程，随性而至，那么在这样的环境下很难说要全方位开展安全工作的。可能只会在最后关头进行简单的安全扫描。所以，这些基础设施是推动安全实施的关键，不能被忽视。</p><p></p><h5>InfoQ：在从设计、编码、测试到发布的整个开发流程中，涉及到的各个角色比如开发、设计和测试等等，大家都有自己的关注点。如何平衡这些不同角色的需求和关注点呢？</h5><p></p><p></p><p>蔡水捷：为了确保研发过程中的安全，深入地调研是必不可少的。在需求阶段，与需求和产品人员的沟通显得尤为重要。当前的大环境下，监管要求日益严格，而需求和产品人员对此也持关注态度。他们同样希望产品能够做到安全。因此，这为安全团队提供了与他们沟通的契机，可以从安全的角度分享多年来内外部发生的安全风险事件。</p><p></p><p>例如，当涉及到个人敏感信息时，如何确保数据安全和加密需求成为关注焦点。这时，安全团队需要与业务方明确如何进行数据脱敏，以及脱敏后可能对业务带来的影响。引导业务和产品团队意识到敏感信息的脱敏是非常关键的。</p><p></p><p>在这个阶段，安全团队主要的任务是启发式地帮助他们框定在做需求时应考虑的安全点。有的产品或需求人员由于资历较老，可能已经踩过一些安全的坑，他们可能会自然地将安全因素考虑进需求中。但对于资历较轻的人员，他们的安全意识可能存在差距。这时，安全团队可以设计一些安全问卷，但问题数量不宜太多，大约 7-10 个问题，帮助他们框定安全考虑点，确保不偏离安全红线。</p><p></p><p>总的来说，如果一个团队在进行前期需求和设计时能综合地考虑到安全因素，并规避<a href=\"https://www.infoq.cn/article/hSjZFzB98kH74Jrm5XJH?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">安全和合规</a>\"红线，那对于整个开发部门而言，已经是很大的幸运了。在这个阶段，我们不能对他们的安全意识要求过高。只要他们能按照给定的框架去思考，并确保不违反相关规定，那就已经达到了我们的目标。</p><p></p><h5>InfoQ：在数字化转型的过程中，经常听到业务方向技术方提出的所谓“伪需求”，即那些看似重要但实际上并非真正业务需求的请求。在安全领域中，是否也存在类似情况？</h5><p></p><p></p><p>蔡水捷：对于业务方提给安全侧的需求，实际上并不能简单称之为“伪需求”。当业务人员在填写我们提供的安全问卷时，这个过程实际上已经促使他们进行了一次自我思考。例如，当问卷询问“是否采集个人敏感信息”时，业务人员在选择“是”或“否”的过程中，其实已经对自己的业务需求进行了一次反思。</p><p></p><p>我们的问卷背后有一个完善的知识库，涵盖了各种合规要求和相应的最佳实践方案。因此，业务人员提出的需求大多数都能在知识库中找到匹配。当然，也存在一些之前未被考虑的需求，这对我们来说，实际上是一个机会，促使我们更进一步思考是否有遗漏。</p><p></p><p>如果真要说安全领域的“伪需求”，我认为更多的是过度保护。但这种过度保护是可以通过引导和沟通来调整的，确保既满足安全要求，又不妨碍业务的正常运作。</p><p></p><h5>InfoQ：您提到了在各个阶段明确划分安全边界的重要性。如何具体界定这些边界，并确保过程中避免双方就责任界定产生争议？</h5><p></p><p></p><p>蔡水捷：关于各个阶段明确安全边界的问题，我们首先要确定的是问题导向。在软件研发的生命周期中，每一阶段我们都要清晰地知道我们在安全方面关心的是什么。以需求阶段为例，安全人员应该明确在这个阶段希望解决或发现什么安全问题。</p><p></p><p>例如，在设计阶段，我们作为安全人员期望的是一些关键的安全设计方案，如数据加密。我们希望开发团队能使用统一的加密算法和组件，而不是自行设计。在这个阶段，我们的目标并不是要求开发团队详细展示如何调用这些组件，而是确保他们在设计中纳入了这些安全要求。</p><p></p><p>进入编码阶段，职责转变。如果我们在设计阶段规定要使用某种统一的加密组件，那么在编码阶段，我们的任务就是检测开发团队是否真正地使用了这个组件。例如，如果我们要求使用国密算法而不是国际算法，那么在编码阶段我们要验证代码中是否存在任何国际算法。</p><p></p><p>简而言之，设计阶段我们提出安全要求，而编码阶段我们验证这些要求是否得到满足。通过问题导向的思路，我们可以更清晰地界定每个阶段的安全工作要点，确保整个流程的安全性。每个阶段都应有明确的安全目标，并采取相应的措施来实现这些目标。</p><p></p><h5>InfoQ：要实现全生命周期的有机联动，不仅需要引入新技术，还涉及人、文化、流程等各个关键点，在中国银联实施和落地内生安全研发体系的过程中，最大的难题和挑战有哪些？</h5><p></p><p></p><p>蔡水捷：首先，在我们的实践中，安全与发展的动态平衡是最大的挑战。尽管适可而止很重要，但实现它并不容易。由于工种的差异，对同一事物的看法和处理方式可能各不相同。以需求阶段的安全为例，我们最初采用了等保要求中的 Checklist。为了确保全面性，其中包含了许多安全术语，这对非安全人员来说可能难以理解。</p><p></p><p>尽管我们的初衷是好的，但实际效果并不理想。有的人认为安全团队是在甩锅，有的则彻底放弃，只关注自己的工作。这种做法并没有助于提高研发的安全性。为了解决这个问题，我们与需求和开发团队进行了深入沟通，并进行了反思。我们考虑了研发和安全各方的需求，最终形成了一个以业务场景为切入点的轻量化威胁建模方案。用大家都能理解的语言来描述安全问题，并提炼出大家关心的内容，如合规和数据安全。通过长期的实践和反馈，逐渐形成了共识。</p><p></p><p>其次，各阶段安全活动的联动是另一个较大的挑战。各阶段的安全活动如果没有联动，那还是一座座孤岛，各自为政，难以发挥乘数效应。安全已经从粗犷发展到精细化，我们需要考虑如何提高效率，而不是不管什么样场景，一成不变地使用同样的安全方法。软件研发来源于各种需求，每个需求都包含了不同的功能。对于安全而言，这些功能就是当前需求的安全重点。我们需要考虑如何将这些重点分散到后面的各个阶段，并验证前面的工作是否真的达到了预期。</p><p></p><p>为了做到这一点，我们需要非常了解安全工作的特点。例如，需求中提到的自建用户体系，我们在需求阶段需要考虑密码存储、登录方式、账户锁定等功能。在设计、编码和测试阶段，我们还需要考虑对应的方案、密钥存储方法、验证码设计、关键函数的使用和检测等问题。</p><p></p><p>最后，在建设过程中，我们还面临着许多其他挑战，如工具检测的准确率和闭环验证手段等。我们仍然在不断地探索和前进。</p><p></p><h5>InfoQ：前沿技术的发展（尤其是 AI 大模型）会如何塑造和影响未来的研发安全模式？</h5><p></p><p></p><p>蔡水捷：我认为现有的研发安全模式已经趋近于一个发展的天花板。大部分的工作都在做细化和优化。然而，新兴的技术可能会引发一些变革。例如，当前兴起的 <a href=\"https://www.infoq.cn/article/sJzsW7aMIglaaKFa9EqX\">AI 技术和大模型</a>\"可能会将研发工作推向一个全新的领域。我们已经开始尝试使用 AI 进行需求分析，根据需求特点开展安全工具自动编排。此外，我们还在探索 AI 的其他应用，如安全知识图谱，自动修复漏洞等。</p><p></p><p>研发安全当前及过去都是在出现了新的研发模式后随之产生的，随着新技术发展及安全环境的变化，很有可能出现安全推动新研发模式的产生。</p><p></p><p>总的来说，虽然 AI 技术为研发安全带来了新的机会，但也带来了新的挑战。我们应该保持警惕，不断探索和学习，以确保在利用新技术的同时，也能确保安全。</p><p></p><h4>关于 FCon</h4><p></p><p>首届<a href=\"https://fcon.infoq.cn/2023/shanghai/track?utm_source=szh&amp;utm_medium=art&amp;utm_campaign=5\">FCon全球金融科技大会</a>\"将于 11 月 19-20 日在上海举办。本次大会已邀请到工商银行、招商银行、汇丰银行、兴业银行、中信银行、北京银行、平安人寿、度小满、蚂蚁集团等业界知名银行以及金融机构的大咖，前来分享大模型、 Web 3.0 、隐私计算、数字货币、区块链等前沿技术在金融领域的落地案例。</p><p></p><p>我们诚挚地邀请您加入我们，共同探索金融科技的未来，扫码或<a href=\"https://fcon.infoq.cn/2023/shanghai/track?utm_source=szh&amp;utm_medium=art&amp;utm_campaign=5\">点击链接</a>\"即可查看全部演讲专题。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/67/67694c9e94825b4431c43c9feb660757.png\" /></p><p></p><p>目前是 <a href=\"https://fcon.infoq.cn/2023/shanghai/apply?utm_source=szh&amp;utm_medium=art&amp;utm_campaign=5\">8折特惠购票</a>\"，报名立减 ¥1360，咨询购票可联系：17310043226（微信同手机号）。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/e2/ca/e205602269fc52b1557a8c4a4e7b91ca.png\" /></p><p></p>",
    "publish_time": "2023-11-09 14:50:36",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "AI驱动的算力变革：如何突破智能算力瓶颈？",
    "url": "https://www.infoq.cn/article/6TBscTYlUozuf1cQpz0R",
    "summary": "<p>AI 大模型热潮进一步加速了智能算力的稀缺，在这一背景下，如何找到更高效的算力解决方案成为很多企业需要面对的难题。回顾算力的整个演化趋势，从通用算力到智能算力发生了哪些变化？智能算力紧缺的根本原因是什么？如何更好地解决智能算力供应不足的问题？如何提高智能算力的利用率？近日，InfoQ《极客有约》邀请到了首都在线生态副总裁吴锦晟、中关村科金研发总监王素文，共话《AI 驱动的算力变革：如何突破智能算力瓶颈？》。</p><p>&nbsp;</p><p>以下为访谈实录，完整视频参看：<a href=\"https://www.infoq.cn/video/2I8SXyLdICQOjje6gkao\">https://www.infoq.cn/video/2I8SXyLdICQOjje6gkao</a>\"</p><p>&nbsp;</p><p>王素文：欢迎大家来到 InfoQ 极客有约，我是今天的特邀主持人，中关村科金研发总监王素文。本期直播，我们邀请到了首都在线生态副总裁吴锦晟来给我们做分享。我们今天直播的主题是《AI 驱动的算力变革：如何突破智能算力瓶颈？》。首先请吴锦晟与网友们打个招呼。</p><p>&nbsp;</p><p>吴锦晟：非常感谢各位能够抽出时间来参加今天的直播活动，我们将一同深入探讨智能算力领域的重要议题，同时也会探讨整个行业的发展趋势。今天，我们希望大家在这次交流中积极提出问题，共同探讨整个行业未来的发展方向。让我们一起来思考如何推动这个行业的进步。</p><p></p><h2>AI 大模型带来哪些趋势变革？</h2><p></p><p>&nbsp;</p><p>王素文：吴老师在人工智能领域有着丰富的经验。现在让我们回到今天的主题，即算力问题。您在今年 9 月初举办的 QCon 全球软件开发大会·北京站中，分享了《<a href=\"https://qcon.infoq.cn/202309/beijing/presentation/5422\">大模型时代下的个人成长</a>\"》主题演讲。事实上，ChatGPT 这种大型模型的智能化应用已经引起了广泛的关注，而且在各个方面都带来了革命性的变化。您能从个人和行业两个角度，谈谈这轮 AI 大模型热潮带来的变化吗？</p><p>&nbsp;</p><p>吴锦晟：我认为可以从两个层面来回答这个问题。</p><p>&nbsp;</p><p>从个人角度来看，我认为有三个方面的变化。首先，对于我的个人工作效率来说，大模型应用对我产生了巨大的提升。以前，我需要处理许多 PPT 或产品文档等工作，但现在我可以委托模型来生成初步的输出，然后基于这个结构化的输出进行进一步的编辑，这显著提高了我的工作效率。其次，在编写代码方面。如果需要生成代码，以前我可能会查阅各种文档，去 Google 或 Stack Overflow 查找解决方法。但现在，我养成了使用大模型工具的习惯，用它来生成一些代码脚本，这极大地减轻了我的负担。此外，许多软件应用，如办公软件 WPS 或 Office，都具有集成的 AI 助手功能，进一步提高了工作效率。大模型在各种应用场景中都发挥了积极作用，未来预计将在更多场景中带来工作效率的改进。</p><p>&nbsp;</p><p>第二个方面是个人职业发展的拓宽。从技术角度来看，过去我们可能只需要学习一门编程语言并编写业务代码，但现在我们需要学习各种框架、多种编程语言，以解决不同业务或场景的问题。我们还需要深入研究深度神经网络和深度学习，以及与人工智能相关的算法和应用，包括模型训练和推理。这些要求使得个人职业发展更加广泛，从程序员逐渐演变为智能化工程师。</p><p>&nbsp;</p><p>第三个方面是生活方式的改变，这是基于工作效率和职业发展的改变。我们开发的产品和应用已经开始改变我们的生活方式，包括家庭、汽车等各种场景，智能化的交互应用为我们的生活带来更多便利和乐趣。因此，大模型的应用对个人和行业层面都产生了深远的影响。</p><p>&nbsp;</p><p>从行业层面来看，我认为也存在三个方向的变化。首先，大模型需要应用场景，因此行业中的创新应用领域受到广泛关注。大模型为各种应用提供了创新的可能性，如文本生成、意图理解以及多模态应用等，这在金融科技、办公软件等领域都有着广泛应用。</p><p>&nbsp;</p><p>其次，产业链升级是不可避免的。大模型的应用涵盖了应用层、算法层和基础设施层，包括云计算、芯片和服务器等，形成了庞大的产业链。这个产业链会随着大模型的发展而不断升级和演进。</p><p>&nbsp;</p><p>第三，行业格局也会发生变化。随着大模型的诞生和应用推进，行业内的竞争格局会发生一些变化。许多大公司都在强调 AI 驱动的发展，这表明 AI 领域是一个新兴的蓝海市场，吸引了许多新的参与者，这将导致行业格局的变化。因此，大 AI 和国内的 AI 大模型热潮将带来多方面的变革，从个人到整个行业都将受益。</p><p>&nbsp;</p><p>王素文：我个人也在使用大模型等工具，确实能够提高个人工作效率，这对我来说非常有帮助。同时，大模型确实为我们的社会带来了巨大的价值和潜力，这是难以估量的。它可以帮助我们解决各种复杂的问题，并极大地推动各行各业的变革，对每个个体都产生深远的影响。它提高了我们的生活质量，推动了整个社会向前发展，并有可能开辟新的领域和可能性。AI 大模型的快速发展也带动了算力需求，加速智能算力的稀缺，这轮 AI 算力需求的爆发给您带来最大的感受是什么？</p><p>&nbsp;</p><p>吴锦晟：我想从三个方面分享我的主要感受。首先，由于我从事公有云服务行业，我最明显的感受是产品不断加速迭代。例如，我们通常的计算产品，如 CPU 核心的云主机，现在逐渐演变为以 GPU 核心为主的云主机，这从底层逻辑计算转向了并行计算，这是一项重大变化。</p><p>&nbsp;</p><p>其次，产品的选择也在发生变化，包括在 CPU 领域，我们有 AMD、Intel 等，还有一些国产 CPU。在 GPU 领域，目前竞争格局主要由 NVIDIA 等主导，但也有许多国内的 GPU 制造商。未来的发展趋势可能会以一云多芯为主，涉及到异构计算平台。异构计算平台的不同层面也需要进行快速迭代，以提供更出色的云服务产品。</p><p>&nbsp;</p><p>第二个方面是供应链问题，特别是关于 NVIDIA 产能和国内政策的影响，导致供应链不稳定。这对整个行业都产生了一定影响，所以供应链问题需要被解决。此外，国内 GPU 制造和英伟达之外的解决方案也需要度过基础瓶颈，以使供应链更加稳定。</p><p>&nbsp;</p><p>最后，整个产业链的每个环节，从芯片到服务器到云，再到 AI 框架层、算子融合和模型训练，甚至应用层，都还不够成熟或不够稳定。由于技术在快速迭代，商业模式目前还不够明确，所以这个领域仍然充满了创新机会。在这个背景下，我们正面临一个非常具有创新潜力的蓝海市场，这是我个人的最大感受。</p><p></p><h2>如何更好地解决智能算力供给不足问题？</h2><p></p><p>&nbsp;</p><p>王素文：我们面临挑战，但同时也蕴藏机遇。特别是对国内企业来说，这是一个创新和创业的机会，我认为这非常有潜力。我个人的感受是，从深入学习期间开始，英伟达等公司抓住了宝贵的机会，一路走到大模型的爆发阶段，因此取得了巨大的成功。您认为过去十年，AI 领域主要的算力载体是否发生了变化？从通用算力到智能算力，算力的演化趋势呈现哪些特点？</p><p>&nbsp;</p><p>吴锦晟：我认为，技术栈正在经历一些分叉。首先，在算力层面，我们看到通用算力正在转向专用算力，也可以称为智能算力。专用算力包括以 GPU 为核心的并行训练加速，例如，英伟达正在研发第二代 DPU，谷歌也有自己的 GPU，还有新型的算力形态，如 NPU 等，用于加速 AI 载体。</p><p>&nbsp;</p><p>第二个趋势是从单点到分布式的发展。在十多年前，我们可能只需要使用 CPU 进行 AI 模型训练，然后逐渐转向 GPU 加 CPU 的方式。当时由于 CPU 和 GPU 的编程方式不同，需要重新编译两次才能在 CPU 和 GPU 上运行，因此在那个时候，AI 模型通常在单台机器上单卡上运行。随着模型参数的增加和模型类型的多样化，从单机单卡逐渐演变成了单机多卡，然后随着 GPU 的崛起，从单机多卡又发展为分布式训练。</p><p>&nbsp;</p><p>第三个趋势是能耗和可持续性。随着训练集群的出现，能耗上升成为一个问题，数据中心需要进行改建和升级以满足能耗要求，这也引发了合规和可持续性的关注。高能耗需要政府批准，因此降低能耗、实现绿色和节能成为趋势。</p><p>&nbsp;</p><p>第四个趋势是软硬结合。从纯硬件走向软硬件结合，尤其是英伟达等公司竞争，软件生态系统变得至关重要。软件工程师和人工智能算法工程师的参与推动了这一趋势。</p><p>&nbsp;</p><p>王素文：有观众提问，得算力者达得大模型吗？</p><p>&nbsp;</p><p>吴锦晟：目前，我认为一个关键因素是模型的参数量以及模型是否具有涌现能力。大模型的核心在于其巨大的参数量，而关键在于这些参数是否能够展现出所谓的涌现能力。要实现这种涌现能力，模型训练过程通常需要一个超大规模的算力集群的支持。因此，在目前这个阶段，算力对于大模型的发展确实至关重要。</p><p>&nbsp;</p><p>王素文：我非常认同吴老师的观点，因为在大模型、大数据、和强大算力这三个核心要素中，算力确实扮演着至关重要的角色。大模型通常是开源可用的，而各行各业都积累了大量的数据，但是只有通过强大的算力，才能够高效地训练出这些大模型，以实现更好的效果。另外，我也关注到信通院去年发布的《中国算力发展指数白皮书》显示，2020 年中国智能计算的算力为算力总规模的 41%，而到 2023 年，占比将迅速攀升到 70%。智能算力已经成为新趋势了吗？当前智能算力主要应用在哪些领域？</p><p>&nbsp;</p><p>吴锦晟：这绝对是一个趋势，而且是与国家战略相一致的趋势。中国政府已经将提升整体算力规模作为重要目标，响应了国家发改委的要求，使智能算力的发展成为现实。此外，智能算力的发展也是为了配合人工智能的快速发展。正如你所说，人工智能需要高效的算力，就像没有高速公路，好车也无法发挥作用。这已经成为一个非常明确的趋势。</p><p>&nbsp;</p><p>智能算力的主要应用领域是人工智能，而在人工智能领域中有许多细分场景，包括智慧城市、自动驾驶、智能制造、金融科技、互动娱乐、电子商务等等。举个例子，智慧城市领域的摄像头需要大量的智能算力来计算车流量、人流密度等，从而改善城市运营。对于一个拥有 2000 万人口的城市，可能需要使用 1000P 的算力来支持这些场景，特别是随着自动驾驶车辆的普及，对算力的需求将进一步增加。未来，各种场景都需要强大的算力支持。</p><p>&nbsp;</p><p>王素文：我认为现在基本上只要涉及到人工智能，都需要算力支持，无论是在训练模型还是进行推理的场景下，都离不开强大的算力。因此，人工智能的需求正在不断增加，越来越旺盛。那么，根据您的观察，造成智能算力紧缺的根本原因是什么？整个产业链如何才能更好地解决智能算力供应不足的问题？</p><p>&nbsp;</p><p>吴锦晟：我认为造成智能算力紧缺的根本原因有三个方面。第一，AI 技术的创新突破出乎意料之外，两年前我们对大型模型或基于神经网络的模型的讨论还处于假设阶段，但现在已经确信这些技术的成功。这种技术创新驱动了对算力和智能算力的需求急剧增长，推动了规模的扩大，这是最关键的原因。</p><p>&nbsp;</p><p>第二，尽管需求不断增长，但供应跟不上，导致供需失衡。供需失衡的背后原因复杂多样。首先，智能算力高度依赖于高性能计算卡，受到相关政策限制，造成了困扰。其次，国内加速芯片的生态系统尚不完善，也导致了短期内的供应不足。</p><p>&nbsp;</p><p>第三，规模的快速增长导致了底层智算中心建设跟不上节奏，能耗受到限制。这三个因素是造成智能算力短期内供应不足的根本原因。</p><p>&nbsp;</p><p>那么，如何更好地解决智能算力供给不足的问题呢？我认为有三个关键方面需要考虑。首先，需要政策的正确引导，加大基础设施建设的力度，以根本性解决算力供需不足的问题。第二，需要提高算力效率，尤其在供需失衡的情况下，通过软件优化和算法优化，提高算力的效率以及算力资源的利用率，以帮助解决问题。第三，关键的一点是技术攻关，国内的技术需要在适当的时间点攻克，快速量产，确保产能能够跟上需求，这也是根本性解决智能算力供给不足问题的关键解决方案。</p><p>&nbsp;</p><p>除了前面提到的三个关键解决方案，我认为还有两个值得关注的方面。第一个关注点是新型的算力计算形式。虽然目前的智能算力领域取得了技术突破，但在技术层面可能还存在一些未来的可能性，例如量子计算等。此外，专用芯片的发展也将带来新的计算方式，结合 GPU 等应用，可能会出现新的解决算力不足问题的计算形式。第二个关注点是培育算力产业生态。目前，国内的 GPU 生态还不够完备，因此需要整个产业链的从业者共同努力，才能够发展和完善这个生态系统。这一方面也非常重要。</p><p>&nbsp;</p><p>王素文：除了供应不足，目前智能算力还存在着资源利用不均衡的问题。大型公司拥有足够的资源来提前储备算力资源，但中小型企业或个人可能很难找到可利用的算力资源。有些个人可能拥有算力资源，但不知道如何共享或者利用这些资源，要想提高智能算力的利用率，技术层面需要做出哪些改进和优化？目前行业有哪些比较成熟的解决方案？</p><p>&nbsp;</p><p>吴锦晟：综合来看，解决智能算力不足问题可以从以下四个主要方面着手：</p><p>&nbsp;</p><p>算法优化：通过算法层面的优化，包括算子层面的矩阵调优和元素级算子的融合等，提高现有算法的效率，同时在大规模训练集群调度层面进行并行策略的调优，以提高算力利用率。这需要大量的研究和技术努力。算力调度：通过动态的算力调度和任务调度，提高算力的利用率。这包括不同颗粒度的调度，在国内已经有一些相关技术努力。硬件加速：利用新型专用芯片和硬件来加速特定领域的 AI 任务。通过专用硬件的加速，可以提高算力的效率。例如，在视频分析领域可以使用专用硬件（如 DPU）来处理。云资源共享：充分利用云计算的特性，建立共享的资源池，以提高资源的复用率和利用率。这可以通过公有云构建的共享资源池来实现，为业务提供更敏捷的资源分配。</p><p>&nbsp;</p><p>需要指出的是，在这些方面已经有一些成熟的解决方案，例如在算法优化层面的训练框架、云计算基于&nbsp;Kubernetes&nbsp;的容器化方案、以及硬件加速方面的 CUDA 等。我们公司已经在建设 GPU 为核心的资源池，以提供可复用的算力资源。这些解决方案可以为解决智能算力不足问题提供帮助。</p><p>&nbsp;</p><p>王素文：绿色计算也是当前大家比较关心的话题，当前绿色计算面临的主要挑战是什么？在智能算力的应用中，如何平衡算力需求和环保要求？</p><p>&nbsp;</p><p>吴锦晟：环保与能耗之间的平衡问题确实是非常重要的。我认为主要有以下三个方面的挑战：</p><p>&nbsp;</p><p>合理的能耗：确保在提高智能算力的同时，能够实现合理的能耗。这需要关注环保方案的成本和效益，以确保能源消耗与投入成本之间的平衡。同时，需要考虑消费者是否愿意分担环保支出的成本，以解决谁来买单的问题。强制监管政策也可以在此方面起到作用，例如对数据中心的 PUE（能源使用效率）进行监管。宏观布局：在国家层面进行数据中心的布局规划是一个重要的考虑因素。将实时计算与底线计算在不同地区分布，可以有助于减少对某一地区的能源消耗压力。这种宏观规划有助于实现地理上的平衡，并减轻某些地区的环境负担。微观层面：在数据中心的微观层面，可以采取低功耗芯片的设计和使用，以减少能源消耗。此外，持续进行绿色能源计算方面的研究和迭代，以寻找更环保的能源来源。这包括太阳能、风能、水能等可再生能源的利用。</p><p>&nbsp;</p><p>综合来看，需要在多个层面采取措施来解决智能算力的环保和能耗问题，包括政策层面的监管、宏观层面的规划，以及微观层面的技术创新。这些努力可以帮助平衡环保和成本之间的关系，同时提高能源利用效率。</p><p>&nbsp;</p><p>王素文：当前算法模型愈加复杂，AI 应用不断延伸，这些都对智能算力的发展提出了更高要求，怎样才能进一步推动智能算力的发展和应用？在技术、人才、产业链建设等方面，有哪些可探索的方向？</p><p>&nbsp;</p><p>吴锦晟：这个问题比较大，我尝试回答，后面我也想听听王素文老师的意见。推动智能算力发展和应用的关键因素有以下几点：</p><p>&nbsp;</p><p>应用场景导向：智能算力的发展必须与实际应用场景的需求相匹配。建立国产联盟或合作方式，可以帮助政府、企业和研究机构更好地理解并应对不同行业中的具体问题，以确保技术的发展具有实际意义。技术多维度深耕：在技术层面，硬件、软件、算法和应用等多个维度都有潜力深入研究和开发。这需要不断的技术创新和专业人才的支持，以满足不断变化的需求。人才培养：当前对于与大模型和智能算力相关的高级人才的紧缺情况。提出了培养体系化的人才的重要性，这包括高校、培训机构和企业内部的培训，以确保新一代的工程师和科学家能够胜任复杂的任务。产业链建设：产业链上下游之间的协作和连接的重要性。建议通过建立生态系统，将不同领域的参与者连接起来，以便共同解决问题和实现创新。</p><p>&nbsp;</p><p>王素文：我们中关村科金作为需求方，也希望在智能算力领域发挥供给端的作用，以降低算力成本、加大供给，并推动各种大模型应用产品的更快推出。这种需求确实非常重要，特别是在当前和未来的技术和市场环境下。有观众提问，现在无人驾驶领域的算力需求是什么样的？</p><p>&nbsp;</p><p>吴锦晟：我认为，在智能算力的发展方面，可以从三个不同的角度来考虑。首先是在无人驾驶领域，特别是车辆端。现在，许多汽车配备了强大的车载芯片，具备处理大量任务的算力能力。这为满足无人驾驶的需求提供了供给方式。</p><p>&nbsp;</p><p>第二个方面是近端计算，也就是边缘计算。未来可能会出现一种称为 AIDN（智能算力分发网络）的技术，类似于现在的 CDN（内容分发网络），但专注于智能算力。这意味着在边缘设备上进行处理，例如在无人驾驶汽车、路上通信设备以及车辆之间的通信中，都需要进行智能算力处理。这是第二个方面。</p><p>&nbsp;</p><p>第三个方面是云端计算，其中数据采集后可以进行在线或离线的业务计算。</p><p>&nbsp;</p><p>在这三个端上，都需要提供智能算力。尽管都提供智能算力，但从无人驾驶需求的角度来看，需要根据不同的场景需求，采用不同的供给方式来满足对延迟和静态计算能力的需求。</p><p>&nbsp;</p><p>王素文：确实，在无人驾驶领域，各个新能源汽车厂商采用了不同的传感器和处理方案。最早的一些方案包括使用激光雷达等传感器技术，这些方案对算力需求也相对较高。然而，现在一些公司，例如特斯拉，采用了计算机视觉（CV）技术，这种方法也需要更多的算力来处理图像和视频数据，因此对智能算力的需求也相对旺盛。这说明了在不同的无人驾驶技术路线上，都需要强大的算力支持。</p><p>&nbsp;</p><p>吴锦晟：是的，使用激光雷达等传感器的处理通常在车辆本身的车端进行，而使用计算机视觉（CV）等视觉处理技术的处理则在近端进行。因为不同的无人驾驶场景具有不同的需求，所以对算力供给的方式也会因情况而异。</p><p></p><h2>技术突破是推动算力发展的核心驱动力</h2><p></p><p>&nbsp;</p><p>王素文：现在企业在构建大模型算力基础设施时通常关注哪些方面？不同行业和应用场景对于算力基础设施的需求和特点是什么？对于那些感兴趣，但还未建设算力基础设施的企业，您会给他们哪些建议？</p><p>&nbsp;</p><p>吴锦晟：在构建大模型算力基础设施时需要精确测算投入和产出比。先回答下需要关注哪些方面：</p><p>&nbsp;</p><p>首先，关注成本是核心，因为企业需要精细化运营。在算力基础设施的构建过程中，必须准确测算投入和产出比（ROI）。</p><p>&nbsp;</p><p>其次，算力规模是一个重要的考虑因素。企业需要决定是一次性投入还是通过云来满足需求的弹性问题，这涉及算力规模的估算。</p><p>&nbsp;</p><p>第三，要考虑算力基础设施的建设周期和供应链问题。这是构建基础设施时必须考虑的因素。</p><p>&nbsp;</p><p>第四，选择适当的技术方案非常重要，因为不同的应用场景需要不同的计算、存储和网络解决方案。</p><p>&nbsp;</p><p>第五，进行可行性研究，考虑性能、安全性、可靠性和可扩展性等多个方面的因素来确定基础设施方案的可行性。</p><p>&nbsp;</p><p>最后，需要理解业务生命周期的理论，这是一个重要的方法论，可以指导企业在业务不同阶段采取不同的策略，包括上云、运营自建和进行生命周期管理。在一个业务的平稳期、生命周期的末端或衰退期，我们通常会考虑进行维护和管理，因为即使业务已经衰退，仍然有用户在使用，我们不能直接关闭它。因此，我们会采取一种语义上的迁移策略，以处理生命周期的尾部工作。这是整个发展过程中的一个重要步骤，与互联网的生命周期理论相似。这个过程确实需要关注如何优化、维护和管理旧业务，以最大程度地提供价值，并且在适当的时候进行有序的退出。这样可以确保资源的有效利用，同时满足用户的需求。</p><p>&nbsp;</p><p>王素文：有观众提问，国内外目前算力产业链现在都存在哪些差距？咱们怎么能才能超越他们？</p><p>&nbsp;</p><p>吴锦晟：首先，我认为算力的核心在于计算芯片。就目前国产 GPU 的发展情况而言，我们在设计能力方面已经不逊色于国外一些大厂，包括 NVIDIA、英特尔。然而，目前最大的问题在于芯片制程方面存在瓶颈。我们缺乏光刻机，而在制程方面与海外厂商相比仍然存在较大差距。最近，我们看到台积电已经不再代工生产国产 GPU，这对国内算力产业链的发展有直接影响。不过，也有一些积极的迹象，例如华为 Mate 60 的发布为我们带来了希望。因此，关键问题在于我们何时能够克服这些挑战，即何时能够迅速缩小与国外的差距，这是一个关键的变数。</p><p>&nbsp;</p><p>第二个关键层面是软件生态。为什么 NVIDIA 能够独领风骚？主要是因为他们以扩大为核心的软件生态做得非常出色。然而，目前国产 GPU 在这方面仍然没有实现行业内的统一，各家仍然各自为战。政策引导、行业倡议，以及国内算力联盟等方式都可能有助于我们解决这个关键的软件生态问题。</p><p>&nbsp;</p><p>第三个关键点是除了计算本身之外，还有其他核心问题，包括大型模型的推理和训练场景对存储的不同需求。如何选择适用于不同场景的存储方案是一个重要问题。此外，通信领域也需要关注，特别是网络方面。我们知道 NVIDIA 已经收购了 IB 公司，这对于通信和集群内网络的供给是一个重要的发展。因此，我们需要联合努力解决这些网络层面的挑战。</p><p>&nbsp;</p><p>王素文：确实，如果我们想要迎头赶上国外，国内的企业需要更加努力，这还包括整个行业和政府层面。我们需要共同努力来建设一个更加健全的生态系统，大家需要全力协作，以实现一些重要突破。最后一个问题，有观点认为“技术突破是算力发展的根本”，您对此怎么看？展望未来，算力发展将呈现怎样的趋势？</p><p>&nbsp;</p><p>吴锦晟：我认为技术突破确实是推动算力发展最核心的驱动力。因为从本质上来说，智能算力的需求呈现出快速增长趋势，所以我们可以将其类比于过去讨论的 CPU 的摩尔定律，现在我们可以谈论新型摩尔定律，这同样对智能算力的发展具有指导性作用。</p><p>&nbsp;</p><p>第二个方面是，我认为智能算力的发展可能会在技术上出现分叉。这个分叉可以在两个层面上发生。首先，大模型的训练层面可能更像高性能计算（HPC）。并非每个公司都需要进行大模型的训练，因此基础大模型的数量可能最终会有限。因此，依托于超大规模训练集群的基础大模型属于高性能计算范畴，它将是科技领域的一个重要存在。</p><p>&nbsp;</p><p>第二个方向是模型应用层。基于大模型进行二次预训练、特征提取和推理等操作需要更多通用性和工程化的智能算力。在这种情况下，我们需要云计算、AIDN（智能算力分发网络）以及边缘计算等解决方案，以推动这一方向的发展。这个趋势对于实现AI算力的广泛应用至关重要。</p><p>&nbsp;</p><p>经常会听到一种说法，即让算力像水电一样随时可用。尽管这句话听起来很容易，但在底层，实际上需要产业从业者共同努力才能实现这个目标。</p><p>&nbsp;</p><p>王素文：我认为现在的算力就像是基础能源一样重要。从这个角度来看，我们需要在社会层面，包括技术、人才以及整个产业链建设方面，增加更多的投入。只有这样，我们才能逐步解决这个问题，特别是在国内算力领域。最后我们再回答一个观众问题，国内光刻机有重大突破了吗？</p><p>&nbsp;</p><p>吴锦晟：这个信息相对较为机密，我也没有相关的详细情况。然而，在 7 纳米制程方面，似乎取得了一些突破，因为通过多次反复的多层光刻，Mate 60 芯片似乎可以生产出来。但是，这个过程中会面临两个问题。首先是良品率可能会有问题，第二是产能跟不上。目前，如何解决这些问题还需要进一步观察。</p><p></p><h3>嘉宾介绍</h3><p></p><p>&nbsp;</p><p>特邀主持：</p><p>&nbsp;</p><p>王素文，中关村科金研发总监。</p><p>&nbsp;</p><p>嘉宾：</p><p>&nbsp;</p><p>吴锦晟，首都在线生态副总裁、TGO 鲲鹏会（上海）学员，技术专家，在政法、钢铁、互联网、人工智能等行业的信息化建设方面有着丰富经验。近几年，致力于智能化应用助力社会变革，并因此对于人工智能与行业应用的复杂关系与互动产生了浓厚兴趣。曾编写《云渲一体技术与应用白皮书》、《Docker 技术入门实践》等多本行业领域的技术书籍。</p>",
    "publish_time": "2023-11-09 15:21:43",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "招商信诺人寿基于 Apache Doris 统一 OLAP 技术栈实践",
    "url": "https://www.infoq.cn/article/LUbVE12wZzTx2xV5o0kP",
    "summary": "<p></p><blockquote>本文导读：当前，大数据、人工智能、云计算等技术应用正在推动保险科技发展，加速保险行业数字化进程。在这一背景下，招商信诺不断探索如何将多元数据融合扩充，以赋能代理人掌握更加详实的用户线索，并将智能分析贯穿业务全链路，实现对用户、产品、场景策略的全面洞察与闭环迭代。本文将详细介绍招商信诺在大数据基础建设方面的探索之旅，从最初为线报表、Ad-hoc 分析提供服务的 OLAP 引擎，逐步发展至基于 <a href=\"http://doris.apache.org/\">Apache Doris</a>\" 构建的统一实时数据仓库，通过一套架构实现各业务领域的多元数据实时分析与融合统一管理，最终实现保险一线业务降本增收的目标。</blockquote><p></p><p></p><p>作者：招商信诺大数据平台研发团队</p><p></p><p>招商信诺人寿是由招商银行与信诺集团中外合资的寿险公司，为企业和个人提供涵盖保险保障、健康管理、财富规划等产品及服务。目前，招商信诺已累积服务客户超千万、完成理赔客户超百万，并凭借一站式便捷的健康管理服务、可灵活配置“定制化”的保险方案获得广大用户的持续选择与信赖。</p><p></p><p>面对全球数据量爆炸性增长的趋势，数据的时效性与准确性对企业精细化运营越来越重要。我们希望通过数据能够快速感知客户行为、定位客户问题、高效匹配用户所需的产品与服务，以达到精细化业务营销、拓宽可保边界等目标。</p><p></p><p>随着业务不断拓展、分析场景逐渐多元化，业务分析师的要求也变得更为复杂，不仅要求数仓能够快速开发数据报表，还需要实现流批一体、湖仓一体、多元化数据类型的统一分析与管理。在大数据基础建设中，这些融合统一的特性变得至关重要。在这样的背景下，持续升级与改进数仓架构，从最初仅支持 BI 报表、数据大屏的一代架构到采用多个系统和组件提供数据服务的二代架构，再到如今新一代统一实时数据仓库 ，通过 Apache Doris 一套组件实现了架构的简化、技术栈的统一、数据的统一管理与分析，不仅提升了数据处理效率，并且满足了更多样化的数据分析需求。</p><p></p><p>本文将详细介绍招商信诺在数仓架构迭代与升级过程中如何基于 Apache Doris 统一存储、计算和查询出口、如何满足写入时效性的要求、如何在高并发点查与多表关联等场景下实现极速查询性能，为销售线索高效写入与查询、客户留存信息高频更新、服务场景数据一致打通等方面提供助力，进一步将客户线索转化为私域商机，赋予企业在经营、服务、营销等多方面的能力。</p><p></p><h1>架构 1.0 ：多组件准实时数仓</h1><p></p><p></p><p>最初的业务需求是希望通过数仓来承载面向 C 端用户的保单自助查询、面向业务分析人员的多维分析报表以及面向管理者的实时数据大屏（Dashboard）三类业务场景。数仓需要满足业务数据的统一存储和高效的查询能力，以支持业务高效分析决策，同时还需要支持数据回写，以实现闭环式业务运营。</p><p></p><p>保单自助查询：用户通过招商信诺 APP 根据保单 ID 自助查询承保合同，或者通过不同维度（如承保时间、保险类别、理赔金额）进行自定义筛选查询，查看保单生命周期内的信息。多维报表分析：依据业务需求，业务分析人员通过开发明细数据、指标维度报表，获得关于保单在产品创新、费率、反理赔欺诈等方面的业务洞察，并据此支持经营策略调整。数据大屏（Dashboard）：主要用于某银行渠道、某分公司的实时大屏，通过对指标等数据的统一汇总，将热门险种、每日销售额、保险种类缴纳总额与占比、历年保险缴纳涨幅趋势等信息展示于实时大屏中。</p><p></p><p>业务初期对数据服务的要求较为单一，主要是以提升报表数据的时效性为主，因此在数仓搭建的过程中，我们采用典型的 Lambda 架构，通过实时与离线两条链路分别进行数据采集、计算与存储，其中数仓主要采用宽表模型设计以支持对指标数据、明细数据的查询分析。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/36/36be32e4d64684f9534b39202ac3e89b.png\" /></p><p></p><p>由架构图可以看到，FlinkCDC 负责实时数据采集，我们自研的 Hisen 工具（包括 Sqoop、DataX 以及 Python）负责离线数据采集。原始数据采集后，实时数据利用 Flink 进行计算、离线数据交由 Hive 进行批处理，最终导入至不同的 OLAP 组件（包括 Presto、Clickhouse、HBase 以及 MySQL）中，由 OLAP 向上层业务提供数据服务，其中各组件在架构中分别扮演不同的角色：</p><p></p><p>MySQL</p><p></p><p>按照业务需求，在数据完成计算后主要用于存储指标数据。目前，数仓表的数据量已经突破千万级， 而 MySQL 存储具有局限性，容易出现执行时间过长、系统返回错误等问题。</p><p></p><p>Clickhosue</p><p></p><p>Clickhouse 在单表数据读取的性能上表现出色，在大表 Join 性能较弱。随着业务场景的增加，实时数据量不断叠加与更新下，Clickhouse 面对新的业务需求存在一定局限：</p><p></p><p>为减少指标重复计算，需要引入星型模型进行多表关联与高并发点查询，而 Clickhouse 无法支持；当保单内容发生变更时，需要数据实时更新写入，而 Clickhouse 缺少实时事务的支持，面对数据变更时需要重新生成宽表以覆盖旧数据，在数据更新时效性要求方面存在一定不足；</p><p></p><p>HBase</p><p></p><p>主要用于主键查询，从 MySQL 与 Hive 中读取用户基础状态数据，包括客户积分、承保时间、累积承保保额。由于 HBase 不支持二级索引，对于非主键的数据读取较为局限，无法满足关联查询场景，同时 HBase 也不支持 SQL 语句查询。</p><p></p><p>Presto</p><p></p><p>由于上述组件在数据查询方面的场景限制，我们还引入了 Presto 作为离线数据的查询引擎，用于与 Hive 中的数据进行交互式分析，为上游端提供报表服务。</p><p></p><p>在数仓 1.0 版本上线后，已在超过 10 余家分公司中上线使用，开发了大量的数据大屏以及 BI 报表。随着业务范围的不断拓展，营销、运营以及客户服务等场景对数据写入与查询性能提出了更高的要求，然而混合使用四个组件提供数据服务的 1.0 版本架构在实际业务中存在一些挑战。为了避免由于架构组件过多所产生的运维成本升高、研发人员学习成本升高等问题，也为了确保在离线与实时链路中多源数据的一致性，我们决定展开架构更新迭代之旅。</p><p></p><h1>组件需求与系统选型</h1><p></p><p></p><p>为满足业务需求，我们需要为架构“减负”，尽可能地缩短数据处理过程。而 1.0 架构由于组件过多，链路冗余等问题势必降低了数据存储与分析的性能与时效性。因此，我们希望寻找一个 OLAP 系统既能覆盖大部分的业务场景，也能够降低复杂技术栈带来的开发、运维和使用成本，还能最大化的提升架构性能。具体要求如下：</p><p></p><p>导入性能：具备实时写入、实时更新的能力，并支持高吞吐的海量数据写入。查询性能：提供维度数据以及交易数据的查询服务，具备高性能的海量数据实时查询的能力。灵活性多维分析、自助查询能力：不仅能够支持主键索引以提供点查与范围查询，还能够支持多维度检索分析，提供对亿级数据的表关联查询，实现灵活动态、下钻上卷的业务数据分析。数据平台架构简化：需要一款综合能力强的组件以替换当前冗余架构，满足在实时与离线数据的读写、不同场景下的高查询性能、简单易用的 SQL 语句查询等能力。</p><p></p><p>基于此，我们开始系统选型，将市面上热门组件与现有架构进行多方面对比，评估是否满足业务方对组件的需求，最终在众多 OLAP 中锁定了 Apache Doris，具体原因如下：</p><p></p><p>支持低延迟实时写入： 支持 FlinkCDC 在海量数据下的高吞吐写入，提供实时数据对外服务；支持主键表模型写时合并，实现微批高频实时写入；支持 Upsert 与 Insert Overwrite，保证高效的数据更新。保证数据一致有序： 支持 Label 机制和事务性导入，保证写入过程中 Exactly Once 语义；支持主键模型 Sequence 列设置，保证数据导入过程中的有序性。查询性能优异： Doris 支持 Rollup 预聚合与物化视图完成查询加速；支持向量化处理以减少虚函数调用和 Cache Miss；支持倒排索引以加速文本类、普通数值、日期类等全文检索或范围查询。支持高并发点查询： 支持分区分桶裁剪，通过 Partition 将时间分区、设置 Bucket 数量过滤非必要的数据，以减少底层数据扫描，实现查询快速定位；此外，在 Doris 2.0 版本中还新增了行式存储格式、短路径点查、预处理语句等一系列优化，进一步提升点查执行效率、降低 SQL 解析开销。支持多种数据模型： 支持星型模型，满足亿级数据表关联查询需求；支持大宽表聚合，提供单表极速查询性能与多维分析能力。架构简单、易运维、易扩展、高可用： Doris FE 节点负责管理元数据与多副本、BE 节点负责数据存储与任务执行。这使得架构在部署与配置方面操作简单，易于运维；同时 Doris 能够一键加减节点、自动副本补齐与节点间的负载均衡，易于扩展；且当单节点故障时，Doris 依旧能够保持集群稳定运行，满足我们对服务高可用、数据高可靠的要求。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/41/41bd61ca7d2108065ef610722242b5b2.png\" /></p><p></p><p>从对比图中我们也可以看出，不论是实时还是离线场景，Apache Doris 的综合能力最均衡也是最优秀的一个，能够支持自助查询、实时与离线 OLAP 分析能力、高并发点查与表关联等查询场景，并且写入性能、高可用、易用性等方面表现优异，是一款能够满足多个业务场景的组件。</p><p></p><h1>架构 2.0：基于 Apache Doris 统一技术栈</h1><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/43/43f864f61728fbe8b1ecd963932704b2.png\" /></p><p></p><p>数仓架构的两代版本主要在存储、计算、查询分析方面有很大不同。1.0 版本依赖于多个组件共同构建 OLAP 分析引擎，在业务拓展阶段逐步出现架构存储冗余、数据延迟、维护成本过高等问题。架构 2.0 版本基于 Apache Doris 升级改造，替换了 Presto、MySQL、HBase、Clickhouse 四个组件并将数据迁移至 Apache Doris 中，以提供统一的对外查询服务。</p><p></p><p>新架构不仅实现了技术栈的统一，还降低了开发、存储与运维等各方面的成本支出，实现了业务与数据的进一步统一。基于 Apache Doris 一套系统能够同时支撑在线与离线任务处理，实现数据存储统一；能够满足了不同场景的数据分析服务，支持高吞吐的交互式分析与高并发的点查询，实现业务分析统一。</p><p></p><h3>01 加速数据分析效率</h3><p></p><p></p><p>通过 Doris 极速分析性能，在面向 C 端用户的高并发点查询场景中，QPS 能够达到数千至数万，对于数亿或者数十亿数据的查询达到毫秒级响应； 利用 Doris 丰富的数据导入方式和高效的写入能力，实现秒级写入时延，并利用 Unique Key 写时合并来进一步加速在并行读写阶段的查询性能。此外，我们还利用了 Doris 冷热分层将海量的历史冷数据存储于廉价的存储介质中，降低了历史数据的存储成本并提升了对热数据的查询效率。</p><p></p><h3>02 降低各类成本支出</h3><p></p><p></p><p>新架构较于原有架构，核心组件的数量减少了一半，平台架构得以大幅简化，运维成本大大降低。此外，Apache Doris 使数据无需再通过不同组件完成存储与查询服务，统一了实时与离线业务负载、降低了存储成本；数据服务 API 对外提供服务时也无需再合并实时与离线数据，使数据服务 API 接入时的开发成本缩减至 50 %；</p><p></p><h3>03 保证数据服务高可用</h3><p></p><p></p><p>因为 Doris 的统一存储、计算和服务的数仓架构，平台整体灾备方案易于实施，不再担心多个组件造成数据丢失、重复带来的问题。更重要的是，Doris 自带的跨集群复制 CCR 功能，能够提供集群间数据库表秒级至分钟级的同步，当系统崩溃导致业务中断或者丢失时，我们可以从备份中快速恢复。</p><p></p><p>Doris 跨集群复制 CCR 功能两大机制满足了我们在系统服务可用性方面的抢需求，保证了数据服务高可用，具体如下：</p><p></p><p>Binlog 机制：当数据发生变更时，通过该机制我们可以自动记录数据修改的记录与操作，并且对每个操作构建了递增序列的 LogID，实现数据的可追溯性与有序性。持久化机制：在系统崩溃或者发生突发事件后，通过该机制能够将数据持久化至磁盘来确保数据的可靠性和一致性。</p><p></p><h1>保险一线业务收益与实践</h1><p></p><p></p><p>目前，基于 Apache Doris 统一技术栈的实时数仓已经在 2022 年 Q3 上线并投入生产环境使用，用于支撑海量数据的 OLAP 高效分析能力，并在平台上支撑了更多业务相关的场景。在业务经营方面，销售线索的规模也在不断扩大，目前已达到亿级。随着 Apache Doris 的功能的进一步引入，由数仓支持的一线业务营收也在持续增长中。</p><p></p><p>销售线索高效追踪： 目前，我们已经在销售与业绩类追踪上线 30 + 新场景应用，业务人员能够基于销售线索准确、快速地获取客户在官网、APP、商城、公众号、小程序等渠道的保险测评、直播参与数据、企微活动参与数据、免险投保等轨迹与数据，并通过 Apache Doris 多维分析进行线索转化，最终实现精准触达客户、有效抓住客户动机、及时跟进成单。客户留存信息高频更新： 在新客户转化与老客户关怀类已上线 20 + 新场景应用，业务场景的顺利进行离不开数据平台对于客户留存信息的高频更新能力，通过 Apache Doris 对老客户数据定期分析，能够有效查询客户在不同阶段的保险业务需求，发现老客户的保障缺口，拓宽老客户可保边界，进一步增加业务经营收益。业务场景数据一致打通： 在客户服务方面，我们更关注为客户提供一致化的体验与快速响应的服务。目前，我们已经上线了 20 + 相关服务体验的新场景应用，避免出现信息不对称、数据不一致的情况，保证各个销售环节的数据在承保、理赔、客服咨询、会员中心等流程中能够一致统一。</p><p></p><h1>未来规划</h1><p></p><p></p><p>Apache Doris 的引入在实时数仓架构简化与性能提升方面起到了至关重要的作用。目前，我们已经基于 Apache Doris 替换了 Presto、Clickhouse、MySQL、HBase 多个组件以实现 OLAP 技术栈统一、各类成本降低，并提升导入与查询性能。</p><p></p><p>同时我们也计划进一步基于 Doris 在批处理层（Batch Layer）的尝试应用，将离线数据批处理统一在 Doris 中进行，解决 Lambda 架构在实时和离线链路中成本叠加、无法兼容的问题，真正实现架构在计算、存储、分析的统一。同时，我们也将继续发挥 Doris 统一的优势，利用 Multi-Catalog 让数据在湖与仓之间自由流动，实现数据湖和多种异构存储之上无缝且极速的分析服务，成为一套更完整、更开放统一的大数据技术生态系统。</p><p></p><p>非常感谢 <a href=\"https://selectdb.com/\">SelectDB</a>\" 团队一直以来对我们的技术支持。至此，招商信诺数据仓库不再局限于简单的报表场景，通过一套架构支撑了多种不同场景的数据分析、满足了实时与离线数据的统一写入与查询，为产品营销、客户运营、C 端以及 B 端等业务提供数据价值，使保险人员更高效地获取数据、更准确地预知客户需求，为企业获得先机。</p><p></p><p>未来，我们也会持续参与到 Apache Doris 社区建设中，贡献保险行业在实时数仓的建设经验与实践应用，希望 Apache Doris 不断发展壮大，为基础软件建设添砖加瓦！</p>",
    "publish_time": "2023-11-09 15:53:26",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "中国信通院泰尔终端实验室数字生态发展部主任王景尧博士确认出席 FCon，分享中国信通院金融数字化转型探索",
    "url": "https://www.infoq.cn/article/8b9zWx3BDrKA0W7dtUce",
    "summary": "<p><a href=\"https://fcon.infoq.cn/2023/shanghai/?utm_source=infoqweb&amp;utm_medium=atricle\">FCon 全球金融科技大会</a>\"，将于 11 月在上海召开。中国信通院泰尔终端实验室数字生态发展部主任王景尧博士将发表题为《<a href=\"https://fcon.infoq.cn/2023/shanghai/presentation/5600?utm_source=infoqweb&amp;utm_medium=article\">中国信通院金融数字化转型探索</a>\"》主题分享，介绍从数字金融的基本理解出发，深入到对公业务和个人业务的数字化转型，再到物联网在金融领域的应用，绿色金融的新业务探索，以及关于数据网络、数据治理以及服务优化的一些新思考。</p><p></p><p><a href=\"https://fcon.infoq.cn/2023/shanghai/presentation/5600?utm_source=infoqweb&amp;utm_medium=article\">王景尧博士</a>\"，中国信通院泰尔终端实验室数字生态发展部主任，高级工程师，博士毕业于北京邮电大学。长期从事移动互联网及数字化转型的工作，参与制定了我国 4G、5G 终端标准，发起成立了统一推送联盟，并任联盟秘书长。联合中国互联网协会打造统一移动互联网基础服务，相关服务已经覆盖我国 15 亿以上设备。牵头构建了面向企业数字化转型的“微中台”产品，目前已经在金融，运营商，能源等多行业应用。他在本次会议的演讲内容如下：</p><p></p><p>演讲：中国信通院金融数字化转型探索</p><p></p><p>随着技术的飞速发展，数字化转型已经成为金融行业的核心趋势。这不仅改变了传统的业务模式，还为金融机构带来了新的机会。然而，如何正确地理解和应用数字金融，并在这一过程中解决诸多挑战，成为了每一个金融机构必须面对的问题。我将从数字金融的基本理解出发，深入到对公业务和个人业务的数字化转型，再到物联网在金融领域的应用，以及绿色金融的新业务探索。同时，我还将与大家分享关于数据网络、数据治理以及服务优化的一些新思考。</p><p></p><p>演讲提纲：</p><p></p><p>对公业务的金融数字化探索个人业务的金融数字化探索基础 IT 能力的数字化创新</p><p></p><p>你将获得：</p><p></p><p>○ 金融数字化转型的多维度探索</p><p>○ 物联网在金融领域的应用</p><p>○ 数字金融在数据管理和服务优化上的新思考</p><p></p><p>除上述演讲外，FCon 上海还将围绕&nbsp;<a href=\"https://fcon.infoq.cn/2023/shanghai/track/1580?utm_source=infoqweb&amp;utm_medium=atricle\">DevOps&nbsp;在金融企业落地实践</a>\"、<a href=\"https://fcon.infoq.cn/2023/shanghai/track/1591?utm_source=infoqweb&amp;utm_medium=atricle\">金融行业大模型应用</a>\"、<a href=\"https://fcon.infoq.cn/2023/shanghai/track/1576?utm_source=infoqweb&amp;utm_medium=atricle\">创新的金融科技应用</a>\"、<a href=\"https://fcon.infoq.cn/2023/shanghai/track/1577?utm_source=infoqweb&amp;utm_medium=atricle\">金融实时数据平台建设之路</a>\"、<a href=\"https://fcon.infoq.cn/2023/shanghai/track/1588?utm_source=infoqweb&amp;utm_medium=atricle\">金融安全风险管控</a>\"、<a href=\"https://fcon.infoq.cn/2023/shanghai/track/1589?utm_source=infoqweb&amp;utm_medium=atricle\">数据要素流通与数据合规</a>\"等进行交流。</p><p></p><p>FCon 上海 2023，相约 11 月！大会 8 折优惠报名倒计时仅剩 2 天，现在购票立减￥1360。咨询购票请联系：17310043226（微信同手机号）。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/54/b9/5433d78e10775d0b9a2e467d349c48b9.png\" /></p><p></p>",
    "publish_time": "2023-11-09 16:30:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "效率提升11倍，PODsys如何快速部署大模型AI算力平台？",
    "url": "https://www.infoq.cn/article/pMUTkGIW2puumDIJiaWT",
    "summary": "<p>大模型是通用人工智能的底座，但大模型训练对算力平台的依赖非常大。大模型算力平台是指支撑大模型训练和推理部署的算力基础设施，包括业界最新的加速卡、高速互联网络、高性能分布式存储系统、液冷系统和高效易用的大模型研发工具和框架。在算力平台的部署过程中，大模型研发机构常常需要面对一系列的问题：大模型算力平台是什么样的？如何快速构建大模型算力平台？如何确保算力平台稳定可靠？如何提升部署效率？如何提升算力平台的性能……这些问题能否顺利解决，直接关系到大模型研发和应用落地的速度。</p><p>&nbsp;</p><p>为了帮助用户加速大模型的技术创新与应用落地，浪潮信息发布了大模型智算软件栈OGAI（Open GenAI Infra）。OGAI由5层架构组成，从L0到L4分别对应于基础设施层的智算中心OS产品、系统环境层的PODsys产品、调度平台层的AIStation产品、模型工具层的YLink产品和多模纳管层的MModel产品。</p><p>&nbsp;</p><p>其中L1层PODsys是一个为客户提供智算集群系统环境部署方案的开源项目，具备基础设施环境安装、环境部署、用户管理、系统监控和资源调度等能力。用户只需执行两条简单的命令，即可完成大模型算力平台的部署，将大模型算力平台部署效率提升11倍，帮助用户顺利迈出大模型研发的第一步。（下载地址：<a href=\"https://podsys.ai/\">https://podsys.ai/</a>\"）</p><p></p><h2>大模型算力平台部署难题亟待求解</h2><p></p><p>&nbsp;</p><p>大模型参数量和训练数据复杂性快速增加，对AI算力平台的建设提出了新的要求，即需要从数据中心规模化算力部署的角度，统筹考虑大模型分布式训练对计算、网络和存储的需求特点，并集成平台软件、结合应用实践，充分关注数据传输、任务调度、并行优化、资源利用率等，设计和构建高性能、高速互联、存算平衡的可扩展集群系统，以满足AI大模型的训练需求。</p><p>&nbsp;</p><p>强大的大模型算力平台不仅需要高性能的CPU、GPU、存储、网络等硬件设备，还需要考虑不同硬件和软件之间的兼容性和版本选择，确保驱动和工具的适配性和稳定性。当算力平台的规模从十几台服务器扩展到几百台，平台部署难度会呈指数级上升。</p><p>&nbsp;</p><p>首先，算力平台部署需要的相关驱动程序、软件包往往高达数十个，正确安装、部署并优化这些驱动程序与软件，需要专业的运维工程师和大量调试时间，严重影响部署效率。其次，为了确保算力平台的高性能和稳定运行，需要验证不同硬件环境下的软件适配，优化BIOS、操作系统、底层驱动、文件系统和网络等多项指标，找到最优的选择，这一工作同样费时费力。此外，算力平台的资源状态处于时刻的变动中，如果不进行合理的资源调度与管理，很容易影响平台的资源利用率。</p><p></p><h2>如何快速部署大模型算力平台？</h2><p></p><p>&nbsp;</p><p>PODsys专注于大模型算力平台部署场景，提供包括基础设施环境安装、环境部署、用户管理、系统监控和资源调度在内的完整工具链，旨在打造一个开源、高效、兼容、易用的智算集群系统方案。</p><p>&nbsp;</p><p>PODsys整合了大模型算力平台部署所需的数十个驱动、软件等安装包以及对应的依赖和兼容关系，并提供了一系列的简化部署的脚本工具。使用这些工具只需要简单2个步骤，PODsys即可帮助用户快速部署大模型算力平台。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e2/e28d58db02463f721b6aeff171d7cb6f.png\" /></p><p></p><p>步骤1：使用docker run命令快速启动PODsys系统。</p><p>&nbsp;</p><p>PODsys系统集成了大模型算力平台部署所需的操作系统、GPU驱动、网卡驱动、通信加速库等数十个驱动程序、软件和安装包，并提供了一系列脚本工具来简化部署，让用户可以快速安装、配置和更新集群环境。PODsys大量选用了业界广泛使用的主流开源系统、工具、框架和软件，来保障整个部署方案的开放性、兼容性和稳定性。</p><p>&nbsp;</p><p>步骤2：使用install_client命令快速部署大模型算力平台的并行软件环境。</p><p>&nbsp;</p><p>PODsys将单机部署方式改成集群部署方式，可将部署效率提升11倍以上。在管理节点运行一句简单的命令（install_client.sh），即可完成大模型算力平台的环境配置，集成了高速文件系统接口、自动化运维工具、NVDIA CUDA编程框架、NCCL高性能通信库，支持NGC 加速平台等功能。并能实现多用户、多租户管理集群。</p><p>&nbsp;</p><p>PODsys提供了全面的系统监控和管理，帮助用户实时监控集群的状态和性能指标。通过可视化的界面，用户可以查看集群资源的使用情况、作业的执行情况和性能瓶颈，从而及时调整集群配置和优化作业性能，来保证算力平台的高性能和稳定运行。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e3/e363a8e01822b72342b27975ba39fbec.png\" /></p><p></p><p>此外，PODsys具备高效的资源调度和作业管理功能，可以根据用户的需求自动调度和管理作业，确保集群的资源利用率和作业的执行效率。</p><p>&nbsp;</p><p>伴随着大模型的快速应用，算力平台的鲁棒性、易用性、部署效率成为用户关注的首要问题。针对商业用户，PODsys还提供专业的算力平台性能调优服务。总之，PODsys提供了一套完整的工具链，将大模型平台部署变得像系统安装一样简单，让用户省时、省力地部署大模型算力平台，助力大模型创新走好第一步。</p>",
    "publish_time": "2023-11-09 17:18:44",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Hi-Finance成为FCon全球金融科技大会特邀支持单位",
    "url": "https://www.infoq.cn/article/kBYHvDO1sEFuHHfdZXcB",
    "summary": "<p>11 月 19-20 日，InfoQ中国旗下首届<a href=\"https://fcon.infoq.cn/2023/shanghai/www.hi-group.cn\">FCon全球金融科技大会</a>\"将在上海中谷小南国花园酒店盛大开幕，金融机构人才培养一站式解决方案服务商 <a href=\"https://www.hi-group.cn/#/home\">Hi-Finance</a>\" 成为特邀支持单位，助力大会顺利举办。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/7f/7f627f733b915a35e55026ec5b07f389.png\" /></p><p></p><p>关于 Hi-Finance</p><p></p><p>Hi 成立于 2014 年，秉承着“一切为结果负责”的教研原则与学习运营思路，聚焦于金融与通用管理能力的精品线上与线下课程内容的研发与运营。旗下育有 Hi-Finance 和 Hi-Management 两大内容品牌。</p><p><img src=\"https://static001.geekbang.org/infoq/43/434d080cf91d3b396c6e0c785a3bd5b3.png\" /></p><p>经过多年发展，公司服务的客户数量超过 500+ 家，行业覆盖银行、证券、基金、保险、地产、医药和消费零售，企业类型包括央企、国企、大中型民企及外资企业。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f6/f61c18e3f366e522159ff7192b160686.png\" /></p><p></p><p>&nbsp;</p><p>目前，Hi-Finance拥有自研版权线上课程600+门，总交付时长超3,000小时，为企业和金融机构提供“体系+内容+运营+技术”的一站式系统性人才成长解决方案。<a href=\"https://fcon.infoq.cn/2023/shanghai/www.hi-group.cn\">&gt;&gt;了解更多</a>\"</p><p>&nbsp;</p><p>关于 FCon</p><p>&nbsp;</p><p>FCon 全球金融科技大会是极客邦科技旗下 InfoQ 中国团队推出的面向金融行业高端技术管理者、技术专家的会议，50% 参会者拥有 8 年及以上工作经验。</p><p>&nbsp;</p><p>FCon 聚焦当前金融行业遇到的问题，围绕金融企业在数字化转型过程中的痛点，例如数据治理、智能化、数字化风控、数字化投研、数字化营销、IT技术能力等方向，邀请国内外金融企业，来分享人工智能、区块链、大模型、大数据、数字货币等新一代信息技术实践话题，帮助听众解决技术和业务上的问题，提升技术能力。</p><p>&nbsp;</p><p>下周日，以「科技+金融，激发创新力量」为主题的首届 FCon 将盛大开幕，近百家金融行业龙头企业齐聚上海，探讨大模型在金融领域的落地难点。</p><p>&nbsp;</p><p>目前中国银联 、招商银行 、中国工商银行 、中国民生银行 、平安银行 、兴业银行 、中信银行 、北京银行 、上海华瑞银行 、苏州银行 、东亚银行（中国）有限公司 、汇丰银行、汇丰科技 、富滇银行 、花旗银行、杭州银行、联邦银行、玉山银行、微众银行、广发银行信用中心、万事达卡（Mastercard）实验室 、广发证券 、国泰君安证券 、平安人寿 、平安集团 、平安科技 、太平洋健康险 、阳光保险集团 、微民保险、亿保健康、中体彩、平安养老保险、中邮消费金融 、建信金科 、光大信托 、德邦基金 、天弘基金、杭银消费金融、湖南财信、中金所、恒生电子、嘉银金科、金融电子结算中心、马上消费、广东盈峰普惠互联小额贷款股份有限公司中国信通院 、中国软件评测中心 、宇谷金融科技研究院 、华东政法大学 、重庆工程学院 、度小满 、蚂蚁集团 、火山引擎 、腾讯云 、声网、恒生聚源 、创邻科技 、同盾科技 、信也科技 、飞轮科技 、中关村科金 、奇富科技 、AuxBridge 、Daraz 、Kyligence、北京安捷数科信息技术有限公司、合合信息、神州数码、滴滴、顶针、国网信息、华为、科大讯飞、乐刷科技、联洋国际、字节跳动、宇信科技、腾讯、数禾信息等公司的数百位技术高管，将莅临现场参与本次盛会。<a href=\"https://fcon.infoq.cn/2023/shanghai/schedule\">&gt;&gt;查看详细日程</a>\"</p><p></p><p>目前大会 8 折优惠报名倒计时 2 天，现在购票立减 ¥1360。咨询购票可联系票务经理 17310043226。5 场主会场巅峰对话，11 个专题精彩分享，5 大闭门深度研讨，1 场晚场轻松交流，这是属于金融行业技术人的年终盛会，11 月19-20 日，上海见。</p>",
    "publish_time": "2023-11-09 18:02:06",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]