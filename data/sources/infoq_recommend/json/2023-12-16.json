[
  {
    "title": "不只看数字：软件开发企业如何评估客户端工程师绩效",
    "url": "https://www.infoq.cn/article/YCR8hO3yNFJBgv0c1L94",
    "summary": "<p>人力资源经理在评估软件工程师的绩效时，他们常常依赖一套已有的指标，相信这些指标能够有意义地评估工程师的绩效。然而，这些指标有时候并未能全面地展现工程师日常职责以及他们对项目的实际贡献。</p><p></p><p>考虑这样的一种情景：一位工程师对数百万用户使用的产品的关键组件进行了修改。从字面上看，这似乎影响了大量用户群体，但实际情况可能完全不同。</p><p></p><p>事实上，尽管大多数绩效评估指南试图使用可直接与个人相关联的指标，但在工程师角色和技能的背景下，这些指标真正所代表的含义常常缺乏清晰性和可解释性。</p><p></p><p>在评估客户端工程师的绩效时，这种不足尤为突出。用于评估他们绩效的指标并不像用于评估服务端工程师的指标那样具有充分的可解释性，因此可能存在评估差异。</p><p></p><p>本文将深入探讨用于评估客户端工程师绩效的指标、这些指标的含义以及它们无法代表的东西。</p><p></p><p>我们的目标是为开发全栈软件的企业在制定绩效评估指南时提供更全面的视角，确保对工程师的贡献和影响进行更平衡和公正的评估。</p><p></p><p></p><h2>这份文档涉及什么以及不涉及什么</h2><p></p><p></p><p>现如今，大多数可用的绩效评估指南都围绕着几个基本要素展开。这些要素虽然在不同组织中表达方式各异，但其核心本质基本一致。</p><p></p><p>首先，企业通常是基于工程师的影响或其他与影响相关的要素来评估工程师的。评估从衡量他们的工作和贡献的涟漪效应开始。其次，作为计算机科学的实践者，企业期望工程师解决复杂的计算机科学问题，为企业提供持久的优势。人们默许地认为解决问题的能力是他们的核心。第三，工程师的职责随不同级别资历的变化而变化。随着他们在企业阶梯上升，他们的影响力和领导力会无缝地融入评估框架中，成为评估高层级成长的重要标志。</p><p></p><p>虽然大多数评估标准也包含基于团队合作和其他类似属性的指标，但这些通常争议较少，并且更容易在不同技术领域的工程师之间进行校准。因此，本文不会深入探讨这些方面，而是着重关注上述要素。</p><p></p><p>下面的部分将重点介绍一些我们认为可以用来评估客户端工程师绩效的指标。对于每一个指标，我们将强调相关的工程影响，讨论固有的技术复杂性，并提供示例来演示如何有效地使用这些参数来将贡献置于相关的上下文中。</p><p></p><p></p><h2>采用率/规模</h2><p></p><p></p><p>首先让我们直面问题。用于衡量客户端工程师工作成果的指标通常围绕他们所开发功能的采用率、参与度或留存率。</p><p></p><p>现在，我们停下来思考一下。一些产品指标，如安装量或日活跃用户，可能并不总能反映出工程师的才华（或者有时候也能反映？）。关键在于要跨不同的团队对评估指标进行精细的校准。必须将其与用于后端工程师评估的其他指标结合起来，这些指标可能并不总能反映他们的专业知识，它们只是体现了产品的增长。</p><p></p><p>但不要被误导了。这些指标所展示的规模当中存在着巨大的与之相关的工程挑战。克服这些挑战应该成为他们绩效评估的标准，而不仅仅是增长或华丽的数字本身。</p><p></p><p></p><p></p><p></p><h2>应用程序健康状态和稳定性</h2><p></p><p></p><p></p><p></p><p></p><h2>产品卓越</h2><p></p><p></p><p>客户端应用程序是大多数在线应用的主要接触点。虽然这部分涵盖了产品的卓越性，但其目的是强调快速发布、可访问性、及时的错误解决和整体客户满意度之间的直接联系。</p><p></p><p></p><p></p><p></p><h2>结论</h2><p></p><p></p><p>有那么一段时间，与一些后端工程师相比，客户端工程师被认为不是那么专业。后端工程师经常回避客户端工程工作，因为客户端工程被视为一种次要、更容易的软件工程形式，其重点是表面的东西，而非正确性和软件质量。尽管随着无服务器应用程序和 SaaS 后端的兴起，这种观点在过去五年里发生了显著变化，但残余仍然存在。</p><p></p><p>即使这些观点正在得到纠正，作为管理者，我们需要确保我们的个人偏见不会影响我们的决策，尤其是当我们的决策深刻影响客户端工程师的职业生涯和福祉时。本文讨论的指标旨在为确保企业更加公平对待客户端工程师提供一个基本的出发点。</p><p></p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/client-side-engineering-metrics/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDI1MzIzNDYsImZpbGVHVUlEIjoia2gxQTl3eXhqTWpqN3pOciIsImlhdCI6MTcwMjUzMjA0NiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.XhswDTapjTDb110u4NOrjvPOTMc7LUSexJH4TZLMYCQ\">https://www.infoq.com/articles/client-side-engineering-metrics/</a>\"</p>",
    "publish_time": "2023-12-16 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "展望2024：构建更快、更高效的Web体验",
    "url": "https://www.infoq.cn/article/kTLeBxItF3w376Xww8sG",
    "summary": "<p>Web正在变得越来越快。<a href=\"https://httparchive.org/reports/chrome-ux-report#cruxPassesCWV\">HTTP Archive</a>\"网站的数据显示，越来越多的网站通过了<a href=\"https://web.dev/articles/vitals\">核心Web指标</a>\"的评估：加载速度、交互响应性和布局稳定性。</p><p>&nbsp;</p><p>最近，Chrome团队发布了一份关于Web指标（Web Vitals）项目的<a href=\"https://blog.chromium.org/2023/11/how-core-web-vitals-saved-users-10000.html\">回顾报告</a>\"，详细介绍了浏览器和生态系统方面的一些进展。Chrome团队在报告中称，对核心 Web 指标的改进相当于为人们节省了约1万年的等待时间。</p><p>&nbsp;</p><p>因此，随着2024年的脚步越来越近，我想仔细研究一下如何才能保持这种势头，继续让Web变得更快。</p><p>&nbsp;</p><p>但有个问题，我们用来衡量交互响应性的指标将在2024年发生变化，这个新的指标发现了许多迄今未被察觉的响应性问题。</p><p>&nbsp;</p><p>我们能否应对这个新挑战？我们是否能够在保持2023年性能改进的同时应对这个挑战？我认为可以，但我们需要学习一些新的技巧。</p><p>&nbsp;</p><p></p><h3>我们为什么关注Web性能</h3><p></p><p>&nbsp;</p><p>在我看来，这是理所当然的。过去的11年里，我一直致力于并倡导Web性能优化，有时天真地以为每一个人——至少是在我的圈子里——都是这么认为的。</p><p>&nbsp;</p><p>如果我们要继续提升Web性能，我们需要更多的开发者和商业领袖认同性能优化是值得我们为之付诸行动的。</p><p>&nbsp;</p><p>所以，我们来谈谈为什么要优化Web性能。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/98/98054550d9249a54cf4538978e6abf41.png\" /></p><p></p><p>Tammy Everts在2023年11月的performance.now()大会上演讲</p><p>图片来源：<a href=\"https://twitter.com/schmitzoide/status/1720105906476638255\">schmitzoide@Twitter</a>\"</p><p>&nbsp;</p><p>上周，我有机会参加了在阿姆斯特丹举行的<a href=\"https://perfnow.nl/\">performance.now()</a>\"大会。对于我们许多致力于Web性能工作的人来说，这已经成为一年一度的朝圣，我们聚在一起探讨如何推动Web性能的发展。在大会担任联合主席和演讲者之一的<a href=\"https://tammyeverts.wordpress.com/\">Tammy Everts</a>\"在上述的幻灯片中完美地总结了这个问题的答案。</p><p>&nbsp;</p><p>2016年，Tammy出版了一本名为“<a href=\"https://www.amazon.com/Time-Money-Business-Value-Performance/dp/1491928743\">Time is Money</a>\"”的书，她在书中列举了网站所有者关注优化Web性能的一些可能的原因：</p><p>&nbsp;</p><p>跳出率购物车大小转化率收入停留时间页面浏览量用户满意度用户留存率自然搜索流量品牌认知度生产力节省带宽/CDN竞争优势</p><p>&nbsp;</p><p>根据数十年的经验和大量案例研究和神经科学研究，Tammy认为通过提升Web</p><p>性能，所有这些都能获得正面的影响。</p><p>&nbsp;</p><p>Tammy还与<a href=\"https://timkadlec.com/\">Tim Kadlec</a>\"合作创建了<a href=\"https://wpostats.com/\">WPO统计</a>\"，这个网站记录了多年来的Web性能案例研究，直接将Web性能改进与更好的商业结果联系起来。</p><p>&nbsp;</p><p>例如，在<a href=\"https://performance.shopify.com/blogs/blog/how-sunday-citizen-improved-conversions-by-focusing-on-performance\">一个案例研究</a>\"中，Shopify网站的加载性能和布局稳定性分别提高了25%和61%，跳出率降低了4%，转化率提高了6%。在<a href=\"https://moz.com/blog/kyle-rush-reveals-how-the-obama-campaign-broke-every-online-fundraising-record-free-mozcon-video\">另一个案例研究</a>\"中，\"Obama for America\"网站性能提升了60%，转化率相应地增长了14%。就像这样的例子还有很多。</p><p>&nbsp;</p><p>快乐的用户能赚更多的钱。 如果你看一下典型的转化漏斗，就会发现越来越少的用户会进入到漏斗的更深层。优化性能可以有效地“润滑漏斗”，通过给用户提供更顺畅的体验来推动转化。</p><p>&nbsp;</p><p>这是对业务的影响，但更根本的原因是，<a href=\"https://web.dev/learn/performance/why-speed-matters#performance_is_about_the_user_experience\">性能关乎用户体验</a>\"。</p><p>&nbsp;</p><p></p><h3>我们是怎么做的</h3><p></p><p>&nbsp;</p><p>如果用谷歌的核心 Web 指标来衡量Web性能，那么现代Web的速度是有史以来最快的。为了形成全面的认识，我们来看我们是如何走到这一步的。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/bb/bbd58527b0e2f90fba7da712d6436d56.png\" /></p><p></p><p>通过核心 Web 指标评估的网站时间序列（2023年1月至9月）</p><p>来源：<a href=\"https://httparchive.org/reports/chrome-ux-report?start=2023_01_01&amp;end=latest&amp;view=list#cruxPassesCWV\">HTTP Archive</a>\"</p><p>&nbsp;</p><p>在2023年初，40.1%的网站通过了移动用户体验的核心 Web 指标评估。此后，我们见证了稳定的增长。截至2023年9月，通过核心 Web 指标评估的网站比例达到了42.5%，提高了2.4个百分点，增长了6.0%。这是一个新的高度，代表了整个Web生态系统所做的大量工作。</p><p>&nbsp;</p><p>这看起来似乎是半满半空。你可以认为近一半的网站拥有可衡量的良好的性能，并为之庆祝，当然，你也可以认为超过一半的网站没有达到性能标准。</p><p>&nbsp;</p><p>我们也可以两者兼得！Web已经取得了如此大的进步，我们可以继续努力，将这种势头延续到2024年。</p><p>&nbsp;</p><p></p><h3>保持前进的步伐</h3><p></p><p>&nbsp;</p><p>那么，我们能否保持当前的速度，让更多的6%的网站通过评估？我想我们可以，但一切都将随着我们用来评估页面响应性的指标发生改变而改变。</p><p>&nbsp;</p><p>今年早些时候，我写了一篇<a href=\"https://web.dev/blog/inp-cwv\">博文</a>\"，我在文章中表示“Interaction to Next Paint”（<a href=\"https://web.dev/articles/inp\">INP</a>\"）将成为谷歌核心 Web 指标中的一个新的响应性指标，并在2024年3月取代“First Input Delay”（<a href=\"https://web.dev/articles/fid\">FID</a>\"）。</p><p>&nbsp;</p><p>这是一个非常好的变化，因为INP在捕捉响应性差的情况方面<a href=\"https://web.dev/articles/better-responsiveness-metric\">更为有效</a>\"。尽管如此，与FID相比，拥有良好INP分数的网站要少得多，尤其是移动体验方面。</p><p>&nbsp;</p><p>在2022年Web年鉴的<a href=\"https://almanac.httparchive.org/en/2022/performance#inp-as-a-hypothetical-cwv-metric\">性能章节</a>\"中，我曾经写到了如果使用INP而不是FID，核心 Web 指标的通过率会是什么样子的。</p><p>&nbsp;</p><p>对于移动体验，只有31.2%的站点能通过了评估，这比FID标准低了8.4个百分点（21.2%）。这是基于2022年6月的数据。那么现在的情况如何？</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ab/ab624f418195ab9e28d45839702f39e4.png\" /></p><p></p><p>根据设备来比较具有良好INP和FID分数的网站百分比 （2023年9月）</p><p>来源：<a href=\"https://developer.chrome.com/docs/crux/methodology/\">Chrome UX Report</a>\"</p><p>&nbsp;</p><p>事实上情况要好得多！桌面设备上的差距几乎已经被消除，移动设备的体验仅落后6个百分点（14.2%）。</p><p>&nbsp;</p><p>但事实仍然存在：一旦INP生效，通过率将大幅下降。</p><p>&nbsp;</p><p>虽然乍一看似乎是一种倒退，但请记住，INP让我们更准确地了解了真实用户是如何体验交互响应的。Web的实际体验并没有发生变化，只是我们的衡量方式发生了变化。因此，通过率的下降实际上并不意味着Web变慢了。</p><p>&nbsp;</p><p>因此，我仍然乐观地认为我们将在2024年持续改进性能。只是当INP出现时，我们需要根据新的基准重新调整我们的期望。</p><p>&nbsp;</p><p></p><h3>重新夺回失地</h3><p></p><p>&nbsp;</p><p>FID是核心 Web 指标中最古老的指标。它首次出现在2018年6月的Chrome UX Report数据集中。截至今日，只有<a href=\"https://gist.github.com/rviscomi/7a0ca7052199314a1cdfc4b7d12b4a33\">5.8%</a>\"的网站在桌面或移动设备上存在FID问题。所以我认为我们可以公平地说，在很大程度上，我们并不需要担心交互响应性问题。</p><p>&nbsp;</p><p>INP挑战的是我们五年来形成的惰性满足感。为此，我们将不得不使用一些可能很少用到甚至从未使用过的Web性能技巧。我们将不得不采用一些新的工具。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c2/c25946f62aaf303e8fcec2679d563a47.png\" /></p><p></p><p>Chrome DevTools Performance面板中显示的一个长任务</p><p>来源：<a href=\"https://web.dev/articles/optimize-long-tasks\">Optimize Long Tasks on web.dev</a>\"</p><p>&nbsp;</p><p>我们将不得不去适应这种情况。</p><p>&nbsp;</p><p>这是Chrome DevTools Performance面板中一个长任务的样子。红色条纹表示超过50毫秒的任务量，成了“长”任务。如果用户在此时尝试与页面发生交互，长任务将阻止页面响应，导致用户（和INP指标）感知到交互变慢。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/97/9796a1182cb2451a971552bbacd734fd.png\" /></p><p></p><p>在Chrome DevTools Performance面板中显示的长任务分割</p><p>来源：<a href=\"https://web.dev/articles/optimize-long-tasks\">Optimize Long Tasks on web.dev</a>\"</p><p>&nbsp;</p><p>解决这个问题可能需要一个你从未尝试过的Web性能技术：<a href=\"https://web.dev/articles/optimize-long-tasks#task_management_strategies\">分割长任务</a>\"。最终完成的任务量是相同的，但通过在主要工作块之间添加产出点，页面将能够更快地响应任务期间发生的用户交互。</p><p>&nbsp;</p><p>Chrome正在尝试通过一些试验性API来解决有问题的长任务。首先是<a href=\"https://developer.chrome.com/blog/introducing-scheduler-yield-origin-trial/\">`scheduler.yield()`</a>\" API，它的设计目的是让开发者可以更好地控制分割长任务。它确保任务持续进行，不会被其他任务打断。</p><p>&nbsp;</p><p>了解哪些长任务需要分割本身就是一门科学。为了解决这个问题，Chrome还尝试使用<a href=\"https://developer.chrome.com/articles/long-animation-frames/\">长动画帧</a>\"API。与长任务API类似，它报告长时间的渲染更新，其中可能包含多个任务。关键是，它还暴露了更多关于任务的可操作属性信息，包括脚本来源、代码中的字符位置。</p><p>&nbsp;</p><p>类似于在分析工具中跟踪INP性能，开发者可以使用长动画帧API来追踪INP慢的原因。总体而言，这些数据可以缩小导致常见性能问题的根源的范围，让开发者不必通过反复试验来进行优化。</p><p>&nbsp;</p><p>这些API目前尚不稳定，但它们提供了强大的新功能，作为对现有工具套件的补充来优化响应性。尽管这可能会让我们觉得我们只是为了让通过率回到之前以FID为中心的评估，但这确实让Web变得更快了！</p><p>&nbsp;</p><p></p><h3>最薄弱的环节</h3><p></p><p>&nbsp;</p><p>在INP取代FID后，响应性似乎将成为新的瓶颈，但实际情况并非如此。通过<a href=\"https://web.dev/articles/lcp\">LCP</a>\"来衡量的加载性能，现在以及将来仍然是核心Web指标评估中最薄弱的环节。</p><p>&nbsp;</p><p>要通过核心 Web 指标评估，一个网站需要在所有三个指标上有良好的表现。因此，要保持前进的步伐，我们需要关注最需要提升的指标。</p><p>&nbsp;</p><p><a href=\"https://httparchive.org/reports/chrome-ux-report\">HTTP Archive</a>\"截至2023年9月的数据显示，移动端拥有良好 LCP 的网站的比例为54.2%，而 INP 和 CLS 分别为 64.1% 和 76.0%。</p><p>&nbsp;</p><p>自从Web性能成为一件不可或缺的大事，开发者一直在谈论加载性能。从简单的 HTML 程序时代开始，我们已经积累了大量有关传统技术（如后端性能和图像优化）的知识。但自那时起，Web已经发生了很大变化。它们变得越来越复杂，第三方依赖项越来越多，媒体更加丰富，使用了更复杂的技术在客户端渲染内容。解决现代问题需要现代的解决方案。</p><p>&nbsp;</p><p>2022年，<a href=\"https://philipwalton.com/\">Philip Walton</a>\"分享了一种<a href=\"https://web.dev/articles/optimize-lcp#lcp_breakdown\">分解LCP时间消耗的方法</a>\"：开始在客户端接收内容的时间（TTFB）、开始加载LCP图像的时间（资源加载延迟）、完成加载LCP图像的时间（资源加载时间）以及直到LCP元素被呈现的时间（元素渲染延迟）。通过衡量这些指标中最慢的指标，我们可以将注意力集中在最有效的优化措施上。</p><p>&nbsp;</p><p>传统的观点认为，如果要让你的 LCP 图像更早出现，应该优化图像本身，包括使用更高效的图像格式，更长时间地缓存它，将其调整为更小的尺寸，等等。从 LCP 指标来看，这些只会改善资源加载时间，那么其他的呢？</p><p>&nbsp;</p><p>我之前提到，我参加了 performance.now() 大会。大会的另一位演讲者是 <a href=\"https://estelafranco.com/\">Estela Franco</a>\"，我与她合作分享了从真实 Chrome 用户那里获取的全新数据，其中包括了 LCP 时间通常花在哪些地方。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/22/22948fbaf84573f461de4febcf5e8af1.png\" /></p><p></p><p>Estela Franco展示Chrome数据的LCP时间分配（2023年11月）</p><p>照片来源：Rick Viscomi</p><p>&nbsp;</p><p>上图显示了Estela的幻灯片，其中有作为均值LCP时间的LCP指标。下面是同样的数据，以毫秒为单位：</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/86/867c72addffe37638b681ed605404765.png\" /></p><p></p><p>根据LCP分数分组的均值LCP诊断性能分析（2023年10月）</p><p>来源：Chrome 119 beta内部数据</p><p>&nbsp;</p><p>最令人感到惊讶的是，资源加载时间（加载持续时间）实际上已经是最快的LCP指标了。最慢的部分实际上是资源加载延迟。因此，加快慢速 LCP 图像最有可能的时机是尽早加载它们。再强调一遍，问题不在于图像加载花费的时间有多长，而在于我们没有足够早地加载它们。</p><p>&nbsp;</p><p>浏览器通常很擅长发现标记中的<a href=\"https://web.dev/articles/preload-scanner\">图像</a>\"并快速加载它们。那么为什么会有问题呢？开发者没能很好地让 LCP 图像可被发现。</p><p>&nbsp;</p><p>我在2022年的Web年鉴中写过有关<a href=\"https://almanac.httparchive.org/en/2022/performance#lcp-static-discoverability\">LCP可发现性问题</a>\"的内容。在那篇文章中，我说38.7%的移动页面包含了图像LCP，但并未让它们变得静态可发现。即使是在HTTP Archive的最新数据中，这个数字仍然是36.0%。</p><p>&nbsp;</p><p>这个问题的很大一部分仍然是懒加载问题。我在2021年写过关于<a href=\"https://web.dev/articles/lcp-lazy-loading\">LCP懒加载负面性能影响</a>\"的文章。懒加载不仅仅是关于原生的 loading=lazy 属性，开发者还可以使用JavaScript动态设置图像源。在去年，我<a href=\"https://almanac.httparchive.org/en/2022/performance#fig-15\">说</a>\"17.8%的拥有LCP图像的页面以某种方式进行了懒加载，而HTTP Archive的最新数据显示，稍微有所改进，目前有16.8%的页面采用了懒加载。如果你采用了懒加载，并不是不可能获得快速的LCP，但肯定不会有好处。LCP图像永远不应该被懒加载。</p><p>&nbsp;</p><p>需要明确的是：懒加载对性能有好处，但仅适用于非关键内容。其他的内容，包括LCP图像，如果有可能，必须尽早加载。</p><p>&nbsp;</p><p>客户端渲染是一个完全不同的问题。如果你发送到客户端的唯一标记是一个由 JavaScript 渲染的 </p><div id=\"root\"></div> 容器，浏览器就无法加载 LCP 图像，直到它最终在 DOM 中被发现。一个更好（尽管有争议的）解决方案是切换到服务器端渲染。<p></p><p>&nbsp;</p><p>我们还需要处理在 CSS 样式中声明的 LCP 图像，例如，background-image: url(\"cat.gif\")。这些图像不会被浏览器的 <a href=\"https://web.dev/articles/preload-scanner\">预加载扫描器</a>\" 捕捉到，因此无法进行尽早加载，但使用普通的 <img src=\"https://www.infoq.cn/article/cat.gif\" /> 元素就能达成这个目的。</p><p>&nbsp;</p><p>对于这些场景，也可以使用声明式预加载让图像变得显式可被发现。最简单的形式可以是这样：</p><p><code lang=\"null\"></code></p><p>&nbsp;</p><p>浏览器会开始尽早加载图像，但只要其 渲染 取决于 JavaScript 或 CSS，那么问题只是从加载延迟变成了渲染延迟。通过直接在 HTML 中放置 <img /> 元素来消除这些依赖关系是避免这种延迟最直接的方式。</p><p>&nbsp;</p><p></p><h3>新的技巧</h3><p></p><p>&nbsp;</p><p>到目前为止，所有这些 LCP 建议基本上都是为了解决我们在应用程序中引入的一些复杂性：LCP 懒加载、客户端渲染和 LCP 背景图像。还有一些相对较新的技术可以用来提高性能，甚至完全避免这些延迟。</p><p>&nbsp;</p><p>在去年的 Web 年鉴 中，我报告了 <a href=\"https://almanac.httparchive.org/en/2022/performance#lcp-prioritization\">0.03%</a>\" 的页面在 LCP 图像上使用了 <a href=\"https://web.dev/articles/fetch-priority\">fetchpriority=high</a>\"。这个属性向浏览器暗示应该高于默认优先级加载图像。在 Chrome 中，默认情况下图像通常是低优先级的，因此这可以给它们带来显著的性能提升。</p><p>&nbsp;</p><p>自去年以来发生了很大的变化！最新的 HTTP Archive数据显示，有 9.25% 的页面正在使用 fetchpriority=high 来加载 LCP 图像。这是一个 巨大 的飞跃，主要是因为 <a href=\"https://make.wordpress.org/core/2023/07/13/image-performance-enhancements-in-wordpress-6-3/\">WordPress 在 6.3 版本中采用了 `fetchpriority`</a>\"。</p><p>&nbsp;</p><p>还有一些技术可以有效地实现 即时导航：利用向后/向前缓存和预加载。</p><p>&nbsp;</p><p>当用户点击后退或前进按钮时，之前访问的页面会被恢复。如果页面被保存在浏览器的后退/前进内存缓存中（也称为 bfcache），那么它将立即被加载。LCP 图像已被加载，渲染它所需的 JavaScript 也已运行，但并非所有页面都<a href=\"https://web.dev/articles/bfcache#optimize_your_pages_for_bfcache\">适合被缓存</a>\"。 unload 监听器或 Cache-Control: no-store 指令目前会导致页面不符合 Chrome 的缓存条件，即使这些事件监听器是由第三方设置的。</p><p>&nbsp;</p><p>自从我上次在Web年鉴中报告<a href=\"https://almanac.httparchive.org/en/2022/performance#bfcache-eligibility\">bfcache的适用性</a>\"以来，unload 使用率从 17% 下降到 12%，no-store 使用率从 22% 下降到 21%。因此，越来越多的页面适合使用这个即时加载缓存，这有利于所有的核心 Web 指标。</p><p>&nbsp;</p><p>另一种即时导航技术被称为 <a href=\"https://developer.chrome.com/blog/prerender-pages/\">推测加载</a>\"。使用试验性的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Speculation_Rules_API\">Speculation Rules API</a>\"，开发者可以提示浏览器，如果用户有很大可能导航到下一个页面，就应该预先渲染整个页面。这个 API 还支持预取，这是一种改善加载性能的较不激进的方式。但缺点是它只加载文档本身，不加载子资源，因此它比预渲染模式更不太会实现“即时导航”的承诺。</p><p>&nbsp;</p><p>下面是来自 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/speculationrules\">MDN 文档</a>\" 的一个推测加载示例：</p><p><code lang=\"null\"></code></p><p>&nbsp;</p><p>这两种优化技术都利用了不同类型的预渲染。通过使用 bfcache，之前访问过的页面被保留在内存中，因此可以立即从历史堆栈中重新访问它们。通过推测加载，用户不曾访问过的页面也可以被预渲染。最终效果是一样的：即时导航。</p><p>&nbsp;</p><p></p><h3>前面的路</h3><p></p><p>&nbsp;</p><p>随着越来越多的开发者意识到在提升性能方面所面临的挑战和机遇，我希望我们能看到通过核心Web指标评估的网站在2023年之后会持续增长。</p><p>&nbsp;</p><p>首先要克服的一个障碍是了解你的网站是否存在性能问题。最简单的方式是使用<a href=\"https://pagespeed.web.dev/\">PageSpeed Insights</a>\" ，它使用了来自 Chrome UX Report 的公共核心 Web 体验数据。即使你的网站目前通过了评估，也要密切关注 Interaction to Next Paint（INP）性能，因为这将在 2024 年 3 月成为新的响应性标准指标。你还可以使用 Google Search Console 中的 <a href=\"https://support.google.com/webmasters/answer/9205520?hl=en\">核心 Web 指标报告</a>\" 来监测网站的性能。了解网站性能更好的方法是进行 <a href=\"https://web.dev/articles/crux-and-rum-differences\">自行测量</a>\"，你能够从中获得更细粒度的诊断信息，了解网站运行缓慢的原因。</p><p>&nbsp;</p><p>接下来的障碍是投入时间和精力甚至资金来提升性能，但首先需要关注网站性能。</p><p>&nbsp;</p><p>如果网站的 INP 性能较差，要想借助文档、技术和工具来优化长时间任务可能会有一定的学习曲线。在交互响应性方面，FID给了我们一种虚假的安全感，但现在我们有机会找到并解决本来可能会让我们的用户感到沮丧的问题。</p><p>&nbsp;</p><p>我们也不要忘了LCP是核心 Web 指标评估中最薄弱的环节。与其他指标相比，更多的网站在 LCP 方面存在问题。多年来，我们构建 Web 应用的方式已经发生了很大变化，因此我们需要相应地调整优化技术，专注于更快地加载图像。</p><p>&nbsp;</p><p>我希望这篇文章有助于展示我们今年看到的一些进展和改进空间。Web速度提升了 6%，这无疑值得庆祝，但大多数网站仍然不够快——至少目前还不够快。</p><p>&nbsp;</p><p>如果我们保持每年 6% 的变化速度，在 2026 年，超过一半的网站将在移动端拥有良好的核心 Web 体验。让我们继续推动网站、CMS、JavaScript框架和第三方依赖更快地发展，让我们继续成为 Web 社区中的性能最佳实践倡导者。2024 年的下一个 6% 指日可待！</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://rviscomi.dev/2023/11/a-faster-web-in-2024/\">https://rviscomi.dev/2023/11/a-faster-web-in-2024/</a>\"</p><p></p><p></p><h5>相关阅读：</h5><p></p><p></p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5ODIzNDQ3Mw%3D%3D&amp;chksm=beca256b89bdac7d4234c85f248d75aace542c31322afcd2181035933b448fb7e52a9115a80d&amp;idx=1&amp;mid=2649970029&amp;scene=27&amp;sn=dd41f58ff643b44d9284f20eb6fe5e8d&amp;utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search#wechat_redirect\">你可以错过&nbsp;Web3，但不要错过&nbsp;Web5</a>\"</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5ODIzNDQ3Mw%3D%3D&amp;chksm=beca257f89bdac69029d839f0cdc2eea79bfde2f6acdf293d2925bd2dd79a88dfe95da36a637&amp;idx=1&amp;mid=2649970041&amp;scene=27&amp;sn=d365251428eb72019a23f528dc78b94e&amp;utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search#wechat_redirect\">别人不会告诉你的&nbsp;Web3 未来</a>\"</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5ODIzNDQ3Mw==&amp;mid=2649969927&amp;idx=1&amp;sn=cc8a7cee992d36202d86ee5068fcc66e&amp;chksm=beca250189bdac17511f9649f03ab3b0c6fee72a33cb1957ff5a6017924fe10b7c7d5581eb98&amp;scene=27#wechat_redirect\">Web3当下，最佳投资就是投资自己</a>\"</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5ODIzNDQ3Mw==&amp;mid=2649969873&amp;idx=1&amp;sn=8cc0a44a1ab3255ea5973d41520a4c39&amp;chksm=beca24d789bdadc1f9085e3853dffff525aaa28a09a46c50169585b66650a1ac26ae67db9b57&amp;scene=27#wechat_redirect\">Web3的反思，不要抱怨</a>\"</p>",
    "publish_time": "2023-12-16 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]