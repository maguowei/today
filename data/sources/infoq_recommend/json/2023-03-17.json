[
  {
    "title": "一个品牌、三个提升、五维布局｜工行数字化转型的思路和实践",
    "url": "https://www.infoq.cn/article/pc7ihipY5vPdizqktlE5",
    "summary": "<p>数字化转型没有放之四海而皆准的标准定义，但确实存在一些共同点，比如都“以用户为中心，以数据为驱动，以科技创新引领变革，以构建生态连接资源”。而工商银行对于数字化转型的定义是“以服务实体经济和人民群众需要为主线，以数据和技术为关键要素，以全行各领域业务科技煲汤式融合为重要推动力，以业务模式和管理模式变革为突出特征，进一步强化以客户为中心，高质量提升用户体验、业务效率和经营价值。”</p><p></p><p>基于以上定义，工商银行制定了数字化转型的整体思路——“1、3、5”。其中，“1”是指打造“数字工行(D-ICBC)”品牌，“3”是指三个提升目标，“5”是指五维数字化转型布局。本分享将对工行围绕这一思路的具体实践和场景应用进行拆解，希望给各行业数字化带来启发。</p><p></p><p>本文整理自中国工商银行软件开发中心总经理室金融科技专家许宜在高质量数字化转型创新发展大会暨中国信通院“铸基计划”年度会议的演讲分享，主题为《工商银行高质量数字化转型实践》。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/f8/98/f86a07f828bffc3907c55df9da3ef498.jpeg\" /></p><p></p><p>以下是演讲实录（经InfoQ编辑整理）：</p><p></p><p></p><h2>为什么要做数字化转型？</h2><p></p><p></p><p>当前全球新一代的科技革命和产业革命深入发展，以数字化、智能化为主要特征的第四次工业革命，对各行各业都产生了深刻的影响，同时也带来了前所未有的机遇和挑战。可以说，数字化转型已经成为了当今时代全球每一个企业的必答题。</p><p></p><p>此外，当前数字化转型也已经纳入了我们国家的战略，国家通过政策引领和顶层设计，对我国现阶段科技创新发展和数字化转型做出了系统谋划和战略部署，明确了数字经济发展的战略地位。最近，国务院印发了《数字中国建设整体布局规划》，其中指出建设数字中国是数字时代推进中国式现代化的重要引擎，也是构建国家竞争新优势的有力支撑。</p><p></p><p>工商银行一直坚持数字化的发展，及时把握科技与产业变革的趋势。去年2月份，工商银行发布了集团的数字化品牌：数字工行(D-ICBC)，全面开启数字工行的新征程，全力融入金融数字化转型的浪潮，为数字经济的高质量发展贡献工行智慧和力量。</p><p></p><p></p><h2>工商银行的数字化转型方法论</h2><p></p><p></p><p>数字化转型没有放之四海而皆准的标准定义，但确实存在一些共同点，比如都“以用户为中心，以数据为驱动，以科技创新引领变革，以构建生态连接资源”。而工商银行对于数字化转型的定义是“以服务实体经济和人民群众需要为主线，以数据和技术为关键要素，以全行各领域业务科技煲汤式融合为重要推动力，以业务模式和管理模式变革为突出特征，进一步强化以客户为中心，高质量提升用户体验、业务效率和经营价值。”</p><p></p><p>基于以上的定义，工行制定了数字化转型的整体思路，可以用“1、3、5”进行概括。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/ec/86/ecb68228225820bf9ec87e6a43061d86.png\" /></p><p></p><p>“1”是打造数字工行（D-ICBC）品牌。</p><p></p><p>“3”是三个提升目标：第一，提升用户体验，以用户为中心，解决好服务过程中的断点、堵点、难点等体验问题；第二，提高业务效率，从业务流程的视角进行审视，进行流程的优化改进甚至再造，并且实现自动化的处理，以实现高效的决策和运营；第三，提升经营的价值，通过数字化的手段实现业务模式和管理模式的重塑与创新，强调创造性地改变原有核心业务的模式，实现业务的跨越式升级。</p><p></p><p>“5”是五维的数字化转型布局，也就是数字技术、数字资产，数字生态，数字基建和数字基因。</p><p></p><p>重点来看一看五维具体的含义。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/cb/7b/cbf81bf4f819dcfa031c2897529cd07b.png\" /></p><p></p><p>其中，数字基建是基础部分，重在高水平的科技自立自强，适度超前打造支撑未来发展的信息基础设施。数字技术和数字资产是两大关键驱动力，数字技术重在打造先进可控的硬核科技，提升数字技术创新驱动能力，掌握发展的自主权。而数字资产成为了一个新型的生产要素，重在做实做强做活数据的新要素，提升数字资产智能应用的能力。数字生态是通过API开放平台、金融云平台，构建开放的生态，打造金融与消费互联网、产业互联网、政务互联网紧密融合的数字共同体。数字基因则是贯穿以上四个方面的内在动力，重在建设敏捷协同的组织机制，培养和集聚高水平的人才，提升数字化灵活创新的能力。</p><p></p><p>在五维布局中，数字技术是数字化转型的第一动力。我们从2015年开始就通过自主研发，全面布局了云计算、分布式、&nbsp;大数据、人工智能、区块链等，加上5G的新技术，推出了自主可控的十大技术体系，形成了企业级技术能力，为数字化转型和业务创新提供技术上的支撑。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/ce/ab/ce0e728c51288a2340718eb5a79d94ab.png\" /></p><p></p><p>其中，“云+分布式”的技术体系具备了15万+的节点，34万+的容器，行内有95%的应用都采用了开放平台，日均服务调度次数超过160亿，从而提供了高性能的联机服务能力。此外，我们还有全栈信创的大数据服务云同业，具备EB级的存储，拥有5000多个节点。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/cb/7b/cbf81bf4f819dcfa031c2897529cd07b.png\" /></p><p></p><p>数据资产是加快数字化转型的新动能，工行充分发挥数据要素的作用，做实数据基础，盘活数据资产，驱动运营模式、风控模式和业务模式的创新，目前已经建立起了功能完备，算法齐全的数据中台体系，沉淀数据超过40PB，形成6万个共享指标，推出1000多个数据服务，夯实了用数赋智的基础。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/fc/e2/fc40463617e91a931466e787947387e2.png\" /></p><p></p><p>数字生态方面，工行主要依托“API体系+金融生态云”双轮驱动的开放服务生态体系，重点在数字政务、数字产业、数字乡村等领域，为政府和企业提供端到端的解决方案，更好支持生态融合共建。API平台的价值，实际就是把我们的能力输出出去，融入到企业的场景当中去提供服务，也就是开放银行的思路。目前API对外输出16大类4600余个服务，金融生态云提供了21个SAAS产品，租户已达到7.4万。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/76/75/76d78dabeaebde1b019ac108dfece375.png\" /></p><p></p><p></p><p>值得注意的是，技术也是一把双刃剑，通过大数据、人工智能等新技术提高金融服务能力的同时，同样可能派生风险。如果不加以管控，甚至滥用，就会破坏数字化转型的可持续性。工行在数字化转型的过程中，积极应对算法歧视、信息泄露、数字鸿沟等金融科技伦理的挑战，本着科技向善的理念，通过夯实安全的基础、推动金融普惠、加强共享输出等方面的实践，持续推进金融科技伦理的建设。</p><p></p><p></p><h2>工行数字化转型实际应用场景</h2><p></p><p></p><p>数字政务方面，依托数字技术基座，工商银行打造了1+N（1个政务服务平台+N个政务垂直行业）的数字政务服务体系，目前在全国落地了300多个政务合作场景，积极助力政务服务的一网通办，具体已经上线了10项全国通办的政务事项，以及400余项属地专有的政务事项。向社保、财政、政法等垂直领域输出“行业+金融”一站式服务，让“数据多走路、群众少跑腿”。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/0y/18/0yy2c5b9888889f7e9de767790c58418.png\" /></p><p></p><p></p><p>以“工银安心链”为例：面对教培行业退费难、甚至卷款跑路等监管难题，面对公益慈善捐款专款专用，农民工工资按时足额发放等资金监管领域的民生诉求，我们利用区块链数据可追溯、防篡改等特性，打造了“工银安心链”数据产品，解决各方信息不对称、资金流向不透明、资金监管难等痛点问题，实现源头可溯、过程可查和责任可追，助力国家监管政策高效落地，加强全社会的信用体系建设。目前上线的资金管理单位达到了844家，监管资金的体量达到了4184亿元。</p><p></p><p>数字产业服务方面，我们利用数字技术重构了金融服务。比如，产业链建设上通过数字供应链平台，服务20余万家上下游企业；普惠金融生态上面向小微企业搭建了金融生态圈，同时推出了一系列的普惠数据产品，更好服务于客户的融资需求；通用支撑上，通过像党建工会云，财务管理云等金融生态云，为各行业提供了垂直领域的解决方案。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/b2/7a/b2afcbed31fbf2cc6b714587e85a3e7a.png\" /></p><p></p><p></p><p>以普惠金融应用创新为例：通过切入小微企业的生产经营各类场景，充分挖掘企业结算、收单、资产等等多维度的数据价值，通过“数据+模型”驱动，打造了商户贷、e抵快贷、e企快贷等普惠的拳头产品，满足小微企业各类的融资需求。其中商户贷是最近的产品创新之一，我们和银联合作，同业首家应用了隐私计算的技术，推出了“商户贷”数字产品，保障客户数据安全的同时，实现了小微收单商户的精准授信，上线8个月，贷款的余额超过64亿，服务小微商户达到3.4万户。</p><p></p><p>数字乡村方面，为响应国家乡村振兴战略，工行一直致力于深化“业务+科技”的双向融合，期望将工行打造成金融服务乡村振兴主力银行，乡村客户满意银行。在服务渠道方面，线上打造了“兴农通”APP，用户数达到298.6万人，线下挂牌了普惠金融服务点近4千家；平台创新方面，通过数字乡村综合服务平台与一千余家的县级农业农村部门合作，通过兴农撮合平台撮合农产品的供需意向1万余项，服务的农业经营主体超过10万家；在产品创新方面，在“工银兴农贷”提供贷款达到3.4万亿的同时，种植E贷也已经实现了种植领域上涉农贷款的创新突破。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/8a/9f/8a79da1bc29e3267123ed9f638d1ce9f.png\" /></p><p></p><p>以“数字乡村”综合服务平台为例：这个平台结合了人工智能、区块链以及卫星遥感等新技术，通过“一窗受理”的方式，为农业农村的管理部门、村委会提供了涵盖“党务、政务、村务、财务、金融服务”的一站式数字化综合解决方案，协助建立集体资产的监督管理服务的体系，提高乡村数字化治理的效能。</p><p></p><p></p><h2>关于数字化转型的未来展望</h2><p></p><p></p><p>我们认为，目前工行的数字化转型与很多企业一样，仍然在路上。为了在数字化道路上能够走得更深更远，我们将着重做好三个方面的转变和两个方向的转型：</p><p></p><p>三个转变：一是转意识，我们认为需要保持开放的心态，避免固步自封，提高数字化的认知高度，把握时代发展的机遇；二是转模式，要积极探索业务模式、管理模式和运营模式的创新与重塑；三是转组织，要鼓励组织架构和体制机制的创新，加快科技创新与市场响应。</p><p></p><p>两个转型：一是推动好从局部到全链路的转型，重点关注面向客户交互的局部数字化，也就是触点的数字化，更加转向全链路的数字化转型，对银行的前、中、后台都需要重点关注；二是因地制宜推动部门级、产品级、企业级的数字化转型，以问题为导向，因地制宜选择数字化转型的路径，在部门级、产品级和企业级分别都能够做好重点的突破。</p><p></p><p>数字化转型任重而道远，但是我们相信，道虽远，行则将至，事虽难，做则必成。工行愿意与各机构和企业加大合作，共建开放共赢的“数字共同体”，为“数字中国”建设增砖添瓦，共同服务于人民对于美好生活的向往与追求。</p>",
    "publish_time": "2023-03-17 11:06:28",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "软件架构决策指北：怀疑主义的软件架构设计",
    "url": "https://www.infoq.cn/article/K7QazDeyGYFS8NWBK54V",
    "summary": "<p>人们普遍认为态度是成功的关键，这是有道理的。正如亨利·福特说的：</p><p>&nbsp;</p><p></p><blockquote>“不管你认为自己是否能够做到——你都是对的。”</blockquote><p></p><p>&nbsp;</p><p>如果你不相信自己能做好一件事，而且不去尝试，就可能永远做不好，这一点似乎是显而易见的。</p><p>&nbsp;</p><p>然而，只是相信自己能够做到也仅止步于此，准备和计划也很重要。</p><p>&nbsp;</p><p>怀疑也是如此，但这是一种特定的类型，这里我们指的是怀疑主义。更具体地说，哲学怀疑主义是这样一种信念，即在没有证据的情况下，至少在软件领域，不可能知道某事的真相。</p><p>&nbsp;</p><p>在我们的经验中，怀疑主义是一种架构超能力，可以帮助我们在错误的假设走得太远之前——在它们占用了你太多的时间并给你带来了太多的工作，以至于你永远无法完成之前——识破它们。</p><p>&nbsp;</p><p>稍后有更多详细的内容。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2a/2a98b045e9ae9e6bb5a981068b6dc898.png\" /></p><p></p><p>图1：一些话头，它们在告诉你，这些假设可能需要进行测试</p><p>&nbsp;</p><p></p><h2>“过度的实证主义（Positivism）”会导致盲目</h2><p></p><p>&nbsp;</p><p>积极思考的力量是真实存在的，然而，如果用得太过头了，可能会导致我们无法甚至不愿意看到的与乐观预期不符的结果。我们不止一次地遇到这样的经理，当他们看到数据中出现了一个重要的利益相关者喜欢但对客户来说没有价值的特征，他们会命令开发团队压制这些信息，这样利益相关者就不至于“看起来很糟糕”。</p><p>&nbsp;</p><p>即使高管没有让团队去做他们怀疑是错误的事情，展示积极结果的压力也会让他们不敢提出可能表明他们不在正确轨道上的问题。或者，团队可能会经历<a href=\"https://en.wikipedia.org/wiki/Confirmation_bias\">确认偏差</a>\"，忽略那些不会加强他们“知道”是正确的决策的数据，而将它们视为“噪音”。</p><p>&nbsp;</p><p>当一个团队试图理解为什么一个客户非常需要的功能在发布几周后还没有被客户接受，就可能会出现这种情况。团队可能认为这个功能很难被客户找到，所以需要重新设计UI。然而，真正的原因可能是新功能并没有解决用户的问题，在调查清楚之前，他们不应该忽略这个可能性。如果他们只是简单地假设功能是有价值的，可能会着手进行高成本而徒劳的UI重构，而这并不是问题所在。</p><p>&nbsp;</p><p>泰坦尼克号已经收到其他船只的警告，在她航行的区域有浮冰，但船长爱德华·史密斯决定继续全速航行，这是<a href=\"https://en.wikipedia.org/wiki/Titanic\">当时的标准做法</a>\"。如果他质疑“冰山对大型船只几乎不构成危险”和“泰坦尼克号不会沉没”的信念，那么这一起在和平时期最致命的游轮沉没事故可能就不会发生了。</p><p>&nbsp;</p><p></p><h2>怀疑主义（Skepticism）并不等同于否定主义（Negativism）</h2><p></p><p>&nbsp;</p><p>人们经常将“怀疑主义”这个词作为“否定主义”的同义词，而否定主义被<a href=\"https://www.merriam-webster.com/dictionary/negativism\">定义</a>\"为“一种以怀疑为标志的心态，尤其是对几乎所有别人肯定的事情。”怀疑的态度会变成否定主义，特别是被犬儒主义放大时。尽管如此，我们认为在应对复杂的挑战（未知的东西比已知的东西多）时，怀疑主义是有它的用处的。</p><p>&nbsp;</p><p>当我们使用怀疑主义这个词时，我们指的是之前提到的哲学怀疑主义。在应对复杂的挑战时，尤其是在早期，我们所知甚少——不仅对解决方案知之甚少，有时甚至对问题本身也知之甚少。在这种情况下，哲学怀疑主义可以帮助我们看穿错误的假设，克服我们的认知偏见，为现实问题找到更好的解决方案。这就是为什么我们认为怀疑主义是一种架构超能力：它就像X光透视，帮助我们看到世界的本来面目，而不是我们心中希望看到的样子。</p><p>&nbsp;</p><p>怀疑主义的概念与经验主义（Empiricism）有着相似的根源，后者是形成敏捷方法的基础，而怀疑主义这个词起源于希腊单词σκέψη（sképsi̱），它的意思是思考或调查，其中的调查部分对软件架构来说非常重要。</p><p>&nbsp;</p><p></p><h2>怀疑主义的软件架构是怎样的</h2><p></p><p>&nbsp;</p><p>正如前一篇<a href=\"https://www.infoq.com/articles/what-software-architecture/\">文章</a>\"所述，构建和设计现代软件应用程序基本上是探索性的。构建应用程序的团队每天都会遇到新的挑战：前所未有的技术挑战和为客户提供解决新问题的新方法。这种不断的探索意味着架构不能被预先确定。</p><p>&nbsp;</p><p>软件架构设计是由质量属性需求（QAR）驱动的，而不是由功能需求驱动的。在初始迭代中不考虑QAR通常会在软件系统部署超出初始试验阶段并拥有少量用户时出现问题。每一个需求，包括驱动架构设计的QAR，都代表了一个关于价值的假设。当我们采用怀疑主义的方法时，目标之一是让这些假设变得明确，并有意识地设计实验，专门测试需求的价值。</p><p>&nbsp;</p><p>可惜的是，QAR通常没有被明确地定义。模糊的需求，如“系统的速度必须快”或“系统必须可伸缩”，对架构设计没有多大帮助。过度膨胀的可伸缩性QAR（如“新系统能够处理的业务量必须至少是当前的10倍”）也是，因为这些需求通常是基于系统利益相关者不切实际的期望。对这些模糊的需求持怀疑态度是很重要的，因为它们可能会导致过度设计，并构建出不必要的功能。对需求的价值进行验证也很重要，研究表明，大多数需求实际上是没有用的，我们需要通过实验将它们与其他需求分开。</p><p>&nbsp;</p><p>团队不需要在完全满足整个需求的情况下才能确定其价值，他们只需要构建简单且足够的系统来执行测试，验证（或反驳）假设并证明或否定需求价值就足够了。类似地，团队也不需要构建整个解决方案来评估解决方案所依赖的关键假设。但只是识别出假设是不够的，团队还需要对假设进行测试。</p><p>&nbsp;</p><p>然而，团队在构建足够的系统来测试假设时，必须对测试系统做一些增强。最后，团队需要运行可能会失败或用于确定何时会失败的测试，这一点也很重要。</p><p>&nbsp;</p><p>更好地了解正在做出的隐性架构决策，让这些决策变得明确，这样有助于开发团队使用他们从sprint/迭代中获得的经验数据做出更好的决策。基于过去的经验，团队必须找到新的可以满足质量需求的方法。</p><p>&nbsp;</p><p></p><h2>怀疑主义有助于做出决策</h2><p></p><p>&nbsp;</p><p>团队有时会经历<a href=\"https://en.wikipedia.org/wiki/Analysis_paralysis\">分析瘫痪</a>\"，这使他们害怕做出决策。产生怀疑往往是其中的一个原因，但这也可能把他们引向解决方案。我们假设团队认为没有在没有实验的情况下就无法知道一个决策是对是错。这个时候，他们可以通过对替代方案进行实证测试来避免出现分析瘫痪。当团队试图在没有任何信息的情况下评估决策时，分析瘫痪尤其会成为问题：由于没有新的信息来指导他们，他们会不断地忽略相同的替代方案。</p><p>&nbsp;</p><p>对于与解决方案相关的决策来说，唯一有用的数据来自于执行代码，其他一切都是猜测。熟悉某项特定技术的团队成员可能会认为这项技术决策是正确的，但要确定其正确与否的唯一方法仍然是编写一些代码并测试代码背后的假设。编写代码是解决架构师之间争论的唯一方法，再多的信念也不能证实或否定一个假设。</p><p>&nbsp;</p><p></p><h2>实践中的怀疑主义</h2><p></p><p>&nbsp;</p><p>应用怀疑主义应该像确定假设和提出诸如“我们需要看到什么证据才能知道这是对的”这样的问题一样简单，然后建立度量方法对假设进行测试。但根据我们的观察，提出怀疑似乎很难。考虑下面的例子：</p><p>&nbsp;</p><p>一家保险公司的一些高级技术团队成员一直在试验规则引擎技术。他们似乎发现了这个<a href=\"https://www.martinfowler.com/bliki/RulesEngine.html\">规则引擎</a>\"的许多用途，比如可以取代应用程序中的“if-then-else”代码。他们发现，有了规则引擎，他们就可以在不修改、编译和部署代码的情况下改变应用程序的行为。可能根本不需要技术人员参与，可以直接由运营人员负责维护规则。</p><p>&nbsp;</p><p>在早期成功实现了控制保单发行和定价（主要是幕后工作）的规则之后，他们开始跌跌撞撞地进入了一个似乎更具挑战性的阶段。一些规则的变更不仅会改变程序逻辑，还会改变UI的外观和行为。经过一番考虑，团队发现UI行为是一种不一样的应用程序逻辑，他们可以开发定义UI行为的规则。</p><p>&nbsp;</p><p>于是，他们开始雄心勃勃地重新设计应用程序的UI，编写与UI观感和行为相关的规则。从技术上讲，这是可以实现的，但其影响相当大：应用程序变慢了，管理UI规则的人需要具备开发经验。这样一来，开发灵活性没有得到提升，反而产生了一个更复杂的问题：在缺乏良好开发和测试工具（规则引擎）的环境中编写UI行为。当出现问题时，系统中的行为变得不可追踪。</p><p>&nbsp;</p><p>这个例子与一句古话如出一辙：“如果你只有一把锤子，那么所有东西看起来都像钉子。”规则引擎对于问题的某些部分是有效的，但这个比喻也仅限于与之相匹配的问题。如果采用一种怀疑主义方法，确定与可维护性相关的QAR，然后基于它们测试所提出的解决方案，很快就可以看出这一点。规则引擎有它的作用，但团队在UI设计中对它的使用超出了这些工具的预期用途。</p><p>&nbsp;</p><p></p><h4>一个非决策类型的例子：可伸缩性假设</h4><p></p><p>&nbsp;</p><p>传统上，可伸缩性不被认为是软件系统的重要QAR，但这种看法在过去几年发生了变化，可能是因为大型电子商务和社交媒体公司对可伸缩性的关注。可伸缩性可以被认为是系统通过增加（或减少）系统成本来处理增长（或减少）的工作负载的属性。可伸缩系统是一种常见的简化说法。可伸缩性是一个多维度概念，因为它可能指应用程序可伸缩性、数据可伸缩性或基础设施可伸缩性。</p><p>&nbsp;</p><p>令人感到惊讶的是，软件系统通常被认为是可伸缩的，特别是如果托管在商业云上，正如《持续架构实践》中所说的：</p><p>&nbsp;</p><p></p><blockquote>“云计算提供了允许应用程序以合理的成本处理意外工作负载的承诺，并且不会对应用程序的用户造成任何明显的服务中断，因此，云计算对可伸缩性来说非常重要。”</blockquote><p></p><p>&nbsp;</p><p>然而，只有设计良好的系统才能在云环境中进行良好的伸缩。换句话说，将一个设计糟糕的系统移植到云环境中不太可能获得良好的可伸缩性，特别是如果没有设计好<a href=\"https://wa.aws.amazon.com/wat.concept.horizontal-scaling.en.html\">水平可伸缩性</a>\"的话。</p><p>&nbsp;</p><p>例如，一个为新软件系统开发<a href=\"https://www.infoq.com/articles/minimum-viable-architecture/\">最小可行产品</a>\"（MVP）的团队通常专注于尽可能快地交付系统，它并不关心MVP成功后会发生什么。如果系统的用户基础在最初的发布之后出现快速且意外的增长，系统可能需要进行快速的伸缩，而这超出了团队最初的工作负载假设。他们可能认为在商业云平台上托管系统就把可伸缩性问题转交给了云供应商！商业云平台确实可以提供有效的伸缩性，但前提是应用程序需要被设计为可以利用这些云平台的特性。即使是这样，云平台也不能解决所有的可伸缩性问题，比如当设计中存在资源瓶颈问题时。</p><p>&nbsp;</p><p>有时候，我们会混淆了可伸缩性与性能。与可伸缩性不同，性能是关于软件系统满足其时间需求的能力，并且比可伸缩性更容易测试。如果系统的性能在初始版本中是足够的，团队可能会认为系统能够应付未来增长的工作负载。问题是，如果在架构设计期间不将可伸缩性作为重要的QAR之一，就不是这么回事了。</p><p>&nbsp;</p><p>当然，我们通常不会很明确地指定可伸缩性需求，特别是对于实现了MVP的系统来说，因为通常没有人能够猜测有多少用户会对新的MVP感兴趣，但这不应该成为不做决策和忽略可伸缩性的理由。另一方面，为了“以防万一”而过度构建系统的可伸缩性，以及基于大量膨胀的工作负载来估计架构设计也不是一个好方法。</p><p>&nbsp;</p><p>例如，谷歌、亚马逊、Facebook和奈飞系统具有出色的伸缩能力，但这些公司使用的设计策略并不一定适用于需要处理不同工作负载的公司。在理解这些策略的含义并将QAR和假设明确地作为一系列架构决策之前，我们应该谨慎地使用可伸缩性策略，如基于微服务的架构、异步通信、数据库分片和复杂的分布式系统。</p><p>&nbsp;</p><p>对这些估计持怀疑态度可以防止团队过度设计系统和构建出不必要的功能。</p><p>&nbsp;</p><p></p><h4>基于怀疑主义测试提出的解决方案</h4><p></p><p>&nbsp;</p><p>公司也可以利用怀疑主义来达到更积极的结果。一些团队成员对某个开源框架的经验有限，他们认为可以用它开发一个新的全球制造商的保修管理系统。每个国家的法律限制和业务要求略有不同，但全球的核心流程是相同的。这个团队认为，开源框架可能可以帮助他们开发系统的基本功能，因此，与从头开发基本功能相比，针对当地国家的需求进行定制会更容易、更快、成本更低。使用这个框架做出的有限的原型让他们看到了希望，但还不足以评估其整体适用性。</p><p>&nbsp;</p><p>他们没有直接开发整个系统，而是决定采用怀疑主义方法：他们从代表系统整体功能的功能中剥离出一部分。在一个多月的时间里，他们使用这个框架构建并测试了这个部分，甚至将其部署到一个较小的业务部门进行内部测试和反馈。开发这个部分的成本接近50万美元。尽管如此，开发团队认为，由于这部分是他们的“最小可行产品”，被用于测试他们提出的“最小可行架构”，因此支出是合理的。</p><p>&nbsp;</p><p>在这个过程中，他们发现了一些问题：</p><p>&nbsp;</p><p>他们能够构建所需的功能，并且确实能够在与生产环境类似的环境中运行，但是……开源框架并不像他们所希望的那样灵活和高效。事实上，这个框架让代码变得更加难以维护，而不是更容易维护，因为这个框架与底层工作流所需的模型不完全匹配。</p><p>&nbsp;</p><p>作为实验的结果，公司决定在开发中不使用开源框架，而是自己构建更适合用来解决手头问题的框架。如果他们只使用外部框架开发整个系统，预计开发成本将达到2000万美元。如果在开发的后期发现不合适的话将导致大量的返工，需要移除外部框架，并重新构建系统。在我们所观察到的项目中，这有时候意味着需要重新开始，原始的投入将功亏一篑。</p><p>&nbsp;</p><p></p><h2>如何巧妙地应用怀疑主义</h2><p></p><p>&nbsp;</p><p>应用怀疑主义是具有挑战性的，不仅仅是在技术层面。在一个组织中，人们可能不习惯他们提出的陈述被质疑，无论背后有什么积极的意图。为了培养怀疑主义文化，团队必须开放地验证断言，无论这些断言是谁提出的。</p><p>&nbsp;</p><p>这里有一些方法，可以让看似尖锐的东西变得柔和。团队可以先制定一个原则，即所有假设都需要进行测试，无论它们的来源是什么。当一个团队同意这是“工作方式”的一部分时，团队成员就不会觉得自己的想法受到了挑战。当特定的断言或假设需要进行测试时，这样做就成了团队决定如何工作的一部分。</p><p>&nbsp;</p><p>另一个方法是让团队问自己：“如果我们的假设被证明是错误的，那么哪些假设可能会阻止我们实现我们需要实现的目标？”这是一个关于所有假设的一般性问题，而不是针对某一个人的假设或断言。</p><p>&nbsp;</p><p>还一个方法是参考这句格言——“事实总是是友好的”，这意味着更多或更好的信息将帮助我们实现目标，而不是伤害我们。为工作方式制定一个原则，即“没有不好的想法，只有不完整的信息”，这样也有助于消除对假设和断言的挑战。</p><p>&nbsp;</p><p>有趣的是，天主教会在16世纪建立了“信仰捍卫者”角色（也就是人们所熟知的“<a href=\"https://en.wikipedia.org/wiki/Devil%27s_advocate\">魔鬼代言人</a>\"”），使怀疑主义成为他们册封圣徒过程中不可或缺的一部分。“信仰捍卫者”通过对候选人的性格和行为持怀疑态度来反对他们被封为圣徒。这个角色今天已经不存在了，但机智的怀疑主义仍然是封圣过程中不可或缺的一部分。例如，候选人的批评者可能会接受天主教会的评审，这是这个过程的一部分。</p><p>&nbsp;</p><p></p><h2>结论</h2><p></p><p>&nbsp;</p><p>怀疑主义是一种有价值的对抗手段，可以对抗那种只看最好结果的不合理的美好图景。虽然积极的态度是必不可少的，但通常最好的做法是“抱最好的希望，做最坏的打算”。</p><p>&nbsp;</p><p>在实践中，应用怀疑主义通常意味着为团队成员创造空间，通过寻找证明（或反驳）团队假设的方法来质疑假设和断言。怀疑主义不仅仅是简单地对假设进行分类，还需要积极判断这些假设是否有效。</p><p>&nbsp;</p><p>团队需要认识到，每一个需求，包括驱动架构设计的QAR都代表了关于价值的假设。当我们采用怀疑主义的方法时，目标之一是让这些假设变得明确，并有意识地设计实验，专门测试需求的价值。</p><p>&nbsp;</p><p>怀疑并不代表对人的不尊重，这实际上是对在混乱的世界中为客户提供卓越成果的复杂性的尊重。这意味着需要认真对待团队为产出产品目标和QAR理想结果所做的努力。怀疑有助于团队以积极的方式对假设和隐藏的偏见提出质疑。</p><p>&nbsp;</p><p>谨慎地应用怀疑主义是每一个软件开发团队必不可少的工具，它可以帮助他们在开发早期以更低的成本做出更好的决策。</p><p></p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/architecture-skeptics-guide/\">https://www.infoq.com/articles/architecture-skeptics-guide/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/7Ps0qyHfQhp59g7YrEvZ\">当你的技术栈不能满足每个人需求时，下一步是什么呢？</a>\"</p><p><a href=\"https://www.infoq.cn/article/OyexDC2CWghbD2MsNJoA\">Netflix 构建可伸缩注解服务：使用 Cassandra、Elasticsearch 和 Iceberg</a>\"</p><p><a href=\"https://www.infoq.cn/article/FAxivpNAGHAIyYMupEJG\">提高软件质量：如何处理数据发现更多 Bug</a>\"</p><p></p>",
    "publish_time": "2023-03-17 11:26:35",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "微软抛出王炸，GPT-4接入Office全家桶！PPT一键生成，又一批打工人要下岗了？",
    "url": "https://www.infoq.cn/article/CPYvD9o4TtNjxXW4xLUg",
    "summary": "<p></p><blockquote>微软强调 AI 工具只是为了给用户提供帮助，而不是取代用户。</blockquote><p></p><p>&nbsp;</p><p>3 月 16 日，微软召开发布会，正式推出基于 <a href=\"https://www.infoq.cn/article/HFSPasQ7SXZ9QzdFXhGO\">GPT-4</a>\" 的 Microsoft 365 <a href=\"https://www.infoq.cn/article/93kD4l5m0pye7k5CrKRT\">Copilot</a>\"。这也意味着，微软热门的 Microsoft 365 商业软件，如 Word、PowerPoint、Excel、Outlook 等都可以使用 AI 功能。</p><p>&nbsp;</p><p>“ChatGPT 版的 Office”来了！</p><p>&nbsp;</p><p>据介绍，Microsoft 365 Copilot 将大语言模型（LLM）的强大功能与 Microsoft Graph 和 Microsoft 365 应用中的数据相结合，致力于成为最强生产力工具。</p><p>&nbsp;</p><p>微软强调，Copilot 绝不仅仅是嵌入至 Microsoft 365 当中的 OpenAI&nbsp;ChatGPT，它更是一套复杂的处理与编排引擎。</p><p>&nbsp;</p><p>微软公司董事长兼 CEO 萨提亚·纳德拉在发布会上表示，“今天标志着我们与计算之间交互方式演变迈下了下一个重要阶段，这将从根本上改变我们的工作方式，并开启新一波生产力增长。通过我们的全新领航工具，人们将获得更有力的智能体支持，真正以最通用的界面——自然语言——轻松获取技术方案。”</p><p>&nbsp;</p><p>目前，微软正通过 Microsoft 365（Word、Excel、PowerPoint、Outlook、Teams 等）和 Business Chat 两种方式和客户一道测试 Copilot 功能，其中，Business Chat 将跨越大语言模型、Excel、PowerPoint、Outlook、Teams 等应用程序和用户的数据（日历、电子邮件、聊天、文档、会议和联系人），帮助用户完成工作。</p><p>&nbsp;</p><p>用户只需发出自然语言提示，比如“通知我的团队要如何更新产品策略”，它就会根据当天早会、电子邮件和聊天线程生成状态更新。在使用工作账户或通过 Teams 登录后，即可在 Microsoft 365.com、Bing 或 Teams 上访问Business Chat。</p><p>&nbsp;</p><p>微软方面并没有明确具体的上线时间，但其透露，Microsoft 365 Copilot 的定价和许可方案，将很快公之于众。</p><p>&nbsp;</p><p>视频演示：</p><p><a href=\"https://youtu.be/S7xTBa93TX8\">https://youtu.be/S7xTBa93TX8</a>\"</p><p></p><h2>Office 全家桶引入 GPT-4，将带来哪些改变？</h2><p></p><p></p><h3>通过三种方式颠覆工作的基本形态</h3><p></p><p>&nbsp;</p><p>据微软介绍，Microsoft 365 Copilot 将通过以下三种方式颠覆工作的基本形态：</p><p></p><h4>1、释放创造力</h4><p></p><p>&nbsp;</p><p>凭借 Copilot in Word，用户可以快速启动创作过程，不必再真正从零开始完全手动操作。Copilot 为用户提供可供编辑和迭代的初稿，大大节约写作、搜索资源和编辑内容的时间。</p><p>&nbsp;</p><p>微软承认，Copilot 有时也会犯错，身为作者，用户将始终掌控全局，按照自己的独特思路向前推进，要求 Copilot 精简、重写或提供反馈。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d2/d2d6c32172382f7c3b6ef6710afcb455.gif\" /></p><p></p><p>Copilot in PowerPoint 能根据用户提供的简单提示创建出精美的演示文稿，添加上周或者去年文档中的相关内容。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a1/a1ab6774eaf9c8dfee02d9f9272ab898.gif\" /></p><p></p><p>Copilot in Excel 则能在几秒钟内分析用户的数据趋势，并创建出具备专业水准的数据可视化成果。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/db/db7a4bd753bc69d9abd5e9a7f954953c.gif\" /></p><p></p><h4>2、释放生产力</h4><p></p><p>&nbsp;</p><p>职场人都希望全身心倾注于真正重要的 20% 工作上，但在实际工作中，却又不得不把 80% 的时间都浪费在枯燥繁琐的小事当中。Copilot 能帮助用户减轻这份负担。</p><p>&nbsp;</p><p>从总结冗长的邮件内容到快速起草回复内容，Copilot in Outlook 将把邮件回复工作从以往的几小时缩短到区区几分钟。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/bf/bf8c22206e20b56dff43c3fe857ec467.gif\" /></p><p></p><p>&nbsp;Copilot in Teams 能总结关键讨论要点（包括谁说了什么、大家建立了哪些共识、在哪些问题上未能达成一致等）并给出建议行动，而且是随会议推进实时进行。</p><p>&nbsp;</p><p>Copilot in Power Platform 能帮助用户自动执行重复性任务、创建聊天机器人，并在几分钟内将创意转化为真实可用的应用程序。</p><p>&nbsp;</p><p>GitHub 数据显示，Copilot 具有帮助每个人释放生产力的潜能。在使用 GitHub Copilot 的开发者中，有 88% 的受访者表示工作效率有所提高，74% 的受访者表示 Copilot 能让他们更专注于重要工作，77% 的人表示可以加快信息或示例的搜索速度。</p><p>&nbsp;</p><p>Copilot 的意义还不止于提高个人生产力，更将为各个组织建立起新的知识模型，利用此前几乎无法访问也未被运用的大量数据和见解。</p><p></p><h4>3、提升技能</h4><p></p><p>&nbsp;</p><p>Copilot 能帮助用户在自己擅长的领域做得更好，同时快速掌握尚未学习的内容。Microsoft 365 提供数千个命令选项，但普通用户往往只使用极少一部分，例如“制作幻灯片动画”或“插入表格”。现在，所有这些丰富功能都将解锁自然语言激活模式，而且这仅仅只是开始。</p><p>&nbsp;</p><p>Copilot 将从根本上改变人们与 AI 之间的交互与合作方式。与一切新的工作模式一样，这当然会带来新的学习曲线——但谁能快速接纳新的方式，谁就将获得竞争优势。</p><p></p><h2>超越“ChatGPT版的Office”</h2><p></p><p>&nbsp;</p><p>微软还将通过 Copilot System 发布企业级 AI 方案。微软表示，Copilot 绝不仅仅是嵌入至 Microsoft 365 当中的 OpenAI&nbsp;ChatGPT，它更是一套复杂的处理与编排引擎。它在幕后默默工作，将包括 GPT-4 在内的大语言模型同 Microsoft 365 应用程序和 Microsoft Graph 中的业务数据结合起来，并以自然语言的形式开放给每一位用户。</p><p>&nbsp;</p><p>以用户业务数据为基础：AI 大语言模型是由海量数据集训练而成，但素材仍不足以涵盖所有场景。因此要真正释放企业生产力，关键在于以安全、合规且尊重隐私的方式将大语言模型接入业务数据。Microsoft 365 Copilot 能够实时访问 Microsoft Graph 中的内容和上下文，根据用户的业务内容（包括文档、电子邮件、日历、聊天、会议、联系人和其他业务数据）生成答案，并将其与当前工作环境（用户正在参加的会议、正在编辑的邮件、正在进行的对话）结合起来，提供准确、关联性强且符合上下文的响应结果。</p><p>&nbsp;</p><p>在微软的安全性、合规性与隐私综合体系之上构建。Copilot 被集成至 Microsoft 365 中，并将自动继承企业设置的一切重要安全、合规及隐私政策和流程。通过双因素身份验证、合规边界、隐私保护等机制，Copilot 将成为用户值得信赖的 AI 解决方案。</p><p>&nbsp;</p><p>在架构设计上保护租户、组和个人数据。Copilot 大语言模型不会利用用户的租户数据或提示进行训练。在单一租户之内，许可模型也能确保数据不会跨用户组泄露。至于个人层面，Copilot继承了微软多年来保护客户数据的技术积累，保证只显示用户可以访问到的数据内容。</p><p>&nbsp;</p><p>当前，Microsoft 365 Copilot 已被整合进千万用户在日常工作和生活中高度依赖的生产力应用，包括 Word、Excel、PowerPoint、Outlook 和 Teams 等。直观且统一的用户体验，确保它在 Teams 和 Outlook 中拥有相同的观感、体验和行为，并在提示、优化和命令等层面共享同一种设计语言。</p><p>&nbsp;</p><p>此外，Microsoft 365 Copilot 的基础技能已经颠覆了生产力，能够结合特定业务内容和上下文实现创建、总结、分析、协作和自动化。但它的本事不止于此，Copilot 知道如何操作应用程序（例如「制作幻灯片动画」）和跨应用工作，比如将 Word 文档转换为 PowerPoint 演示文稿。Copilot 还会随时学习新技能。例如，借助 Viva Sales，Copilot 可以学习如何接入 CRM 记录系统，将客户数据（例如交互内容和订单历史）提取至通信当中。随着 Copilot 不断探索新的领域和流程，它将能够执行愈发复杂的任务和查询。</p><p>&nbsp;</p><p>本月初，微软还公布了 Dynamics 365 Copilot——全球首款面向 CRM 与 ERP 领域的 AI Copilot，尝试将下一代 AI 引入各行各业。据微软介绍，在接下来几个月里，微软将把 Copilot 引入微软的所有生产力应用——Word、Excel、PowerPoint、Outlook、Teams、Viva、Power Platform 等等。微软将很快发布定价和许可信息。</p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://blogs.microsoft.com/blog/2023/03/16/introducing-microsoft-365-copilot-your-copilot-for-work/\">https://blogs.microsoft.com/blog/2023/03/16/introducing-microsoft-365-copilot-your-copilot-for-work/</a>\"</p>",
    "publish_time": "2023-03-17 11:32:11",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "JDK 20和JDK 21最新动态",
    "url": "https://www.infoq.cn/article/o4cLTZJXMgC7pJwfA8og",
    "summary": "<p><a href=\"https://openjdk.java.net/projects/jdk/20/\">JDK 20</a>\"是自<a href=\"https://www.infoq.com/news/2021/09/java17-released/\">JDK 17</a>\",以来的第三个非长期支持（LTS）版本，正如甲骨文Java平台组的首席架构师<a href=\"https://www.linkedin.com/in/markreinhold\">Mark Reinhold</a>\"所<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2023-February/007364.html\">宣布</a>\"的那样，它已经进入了初始候选版本阶段。主线源代码库已于2022年12月中旬（Rampdown第一阶段）分支到JDK<a href=\"https://github.com/openjdk/jdk19\">稳定代码库</a>\"，并定义了JDK 20的特性集。严重错误，如回归或严重的功能问题，可能会得到修复，但必须通过<a href=\"https://openjdk.java.net/jeps/3#Fix-Request-Process\">修复请求（Fix-Request）</a>\"流程获得批准。根据<a href=\"https://openjdk.org/projects/jdk/19/#Schedule\">发布时间表</a>\"，JDK 20将于2023年3月21日正式发布。值得注意的是，JEP 438已于2023年3月初被添加到了特性集中。</p><p>&nbsp;</p><p>最终包含了7个JEP形式的新特性，它们可以被分为两类：核心Java库和Java规范。</p><p>&nbsp;</p><p>这些新特性中的5个被归类到了核心Java库中：</p><p>&nbsp;</p><p>JEP 429：<a href=\"https://openjdk.org/jeps/429\">作用域值（孵化器）</a>\"JEP 434：<a href=\"https://openjdk.org/jeps/434\">外部函数和内存API（第二次预览）</a>\"JEP 436：<a href=\"https://openjdk.org/jeps/436\">虚拟线程（第二次预览）</a>\"JEP 437：<a href=\"https://openjdk.org/jeps/437\">结构化并发（第二个孵化器）</a>\"JEP 438:&nbsp;<a href=\"https://openjdk.org/jeps/438\">Vector API (第五个孵化器)</a>\"</p><p>&nbsp;</p><p>这些新特性中有2个被归类到了Java规范中：</p><p>&nbsp;</p><p>JEP 432：<a href=\"https://openjdk.org/jeps/432\">记录模式（第二次预览）</a>\"JEP 433：<a href=\"https://openjdk.org/jeps/433\">switch模式匹配（第四次预览）</a>\"</p><p>&nbsp;</p><p>我们研究了这些新特性以及支持它们的四个主要Java项目（<a href=\"https://openjdk.java.net/projects/amber/\">Amber</a>\"、<a href=\"https://wiki.openjdk.java.net/display/loom\">Loom</a>\"、<a href=\"https://openjdk.java.net/projects/panama/\">Panama</a>\"和<a href=\"https://openjdk.java.net/projects/valhalla/\">Valhalla</a>\"&nbsp;），这些项目旨在孵化一系列组件，然后通过精心策划的合并最终将其纳入到JDK中。</p><p>&nbsp;</p><p></p><h4>Amber项目</h4><p></p><p></p><p>JEP 432，<a href=\"https://openjdk.org/jeps/432\">记录模式（第二次预览）</a>\"，为了响应上一轮<a href=\"https://openjdk.java.net/jeps/12\">预览</a>\"JEP 405，<a href=\"https://openjdk.org/jeps/405\">记录模式（预览版）</a>\"的反馈，它结合了增强功能。提议使用记录模式来增强语言，以解构记录值。记录模式可以与类型模式结合使用，以“实现一种强大的、声明式的、可组合的数据导航和处理形式”。类型模式最近通过JDK 17中提供的JEP 406，<a href=\"https://openjdk.java.net/jeps/406\">switch模式匹配（预览版）</a>\"和JDK 18中提供的JEP 420，<a href=\"https://openjdk.java.net/jeps/420\">switch模式匹配（第二次预览）</a>\"扩展到了 switch 语句标签中。与JEP 405相比，变化包括：增加了对泛型记录模式类型参数的推断支持；增加了对记录模式出现在增强for语句条件判断中的支持；并删除对了对命名记录模式的支持。</p><p>&nbsp;</p><p>类似地，JEP 433：<a href=\"https://openjdk.org/jeps/433\">switch</a>\"<a href=\"https://openjdk.org/jeps/433\">模式匹配（第四次预览</a>\"<a href=\"https://openjdk.org/jeps/433\">）</a>\"，结合了增强功能以响应前三轮预览的反馈：JEP 427，<a href=\"https://openjdk.org/jeps/427\">switch模式匹配（第三次预览）</a>\"，在JDK 19中提供；JEP 420，<a href=\"https://openjdk.java.net/jeps/420\">switch模式匹配（第二次预览）</a>\"，在JDK 18中提供；以及JEP 406，<a href=\"https://openjdk.java.net/jeps/406\">switch模式匹配（预览版）</a>\"，在JDK 17中提供。与JEP 427相比，变化包括：简化了 switch 标签语法；现在， switch 表达式和语句以及其他支持模式的构造体都支持泛型类型模式和记录模式的类型参数推断。</p><p>&nbsp;</p><p></p><h4>Loom项目</h4><p></p><p></p><p>JEP 429，<a href=\"https://openjdk.org/jeps/429\">作用域值（孵化器）</a>\"，一个正在孵化的JEP，最初名为范围局部变量（孵化器，Extent-Local Variables），提议在线程内部和线程之间共享不可变数据。这比线程局部变量更可取，尤其是在使用大量虚拟线程时。</p><p>&nbsp;</p><p>JEP 436，<a href=\"https://openjdk.org/jeps/436\">虚拟线程（第二次预览）</a>\"，提议基于JDK 19中所提供的JEP 425，<a href=\"https://openjdk.org/jeps/425\">虚拟线程（预览版）</a>\"对该特性进行第二次预览，以便留出时间来为该特性的演进提更多的反馈和体验。该特性为Java平台提供了虚拟线程，这是一种轻量级线程，可以极大地减少编写、维护和观察高吞吐量并发应用程序的工作量。需要注意的是，除了少量在JDK19中被被固化的JEP 425 API外，本预览版本没有进行任何更改，因此没有在第二次预览中提出。有关JEP 425的更多详细信息，请参阅InfoQ的<a href=\"https://www.infoq.com/news/2022/05/virtual-threads-for-jdk19/\">新闻报道</a>\"和甲骨文Java平台组Java开发人员倡导者<a href=\"https://www.linkedin.com/in/jos%C3%A9-paumard-2458ba5/\">José Paumard</a>\"的JEP Café<a href=\"https://inside.java/2022/06/08/jepcafe11/\">屏幕截图</a>\"。</p><p>&nbsp;</p><p>JEP 437，<a href=\"https://openjdk.org/jeps/437\">结构化并发（第二</a>\"<a href=\"https://openjdk.org/jeps/437\">个</a>\"<a href=\"https://openjdk.org/jeps/437\">孵化器）</a>\"，提议基于JDK 19中所提供的JEP 428，<a href=\"https://openjdk.org/jeps/428\">结构化并发（孵化器）</a>\"重新孵化，以便留出时间来为该特性的演进提更多的反馈和体验。此特性的目的是通过引入一个库来将在不同线程中运行的多个任务视为单个工作单元，从而简化多线程编程。这可以简化错误处理和撤销，提高可靠性，并增强可观测性。唯一的变化是更新了 StructuredTaskScope 类，以支持在任务作用域中创建的线程可以继承作用域的值。这简化了线程间不可变数据的共享。有关JEP 428的更多详细信息，请参阅InfoQ<a href=\"https://www.infoq.com/news/2022/06/java-structured-concurrency/\">新闻报道</a>\"。</p><p>&nbsp;</p><p></p><h4>Panama项目</h4><p></p><p></p><p>JEP 434，<a href=\"https://openjdk.org/jeps/434\">外部</a>\"<a href=\"https://openjdk.org/jeps/434\">函数</a>\"<a href=\"https://openjdk.org/jeps/434\">和内存API（第二次预览</a>\"<a href=\"https://openjdk.org/jeps/434\">）</a>\"，基于反馈进行了改进，并基于JDK 19中所提供的JEP 424，<a href=\"https://openjdk.org/jeps/424\">外部函数和内存API（预览版）</a>\"进行了第二次预览。相关孵化包括JEP 419，<a href=\"https://openjdk.org/jeps/419\">外部函数和内存API（第二个孵化器）</a>\"，在JDK 18中交付；以及JEP 412，<a href=\"https://openjdk.org/jeps/412\">外部函数和内存API（孵化器）</a>\"，在JDK 17中交付。该特性为Java应用程序提供了一个API，通过高效地调用外部函数和安全地访问不受JVM管理的外部内存，在Java运行时之外与代码和数据进行互操作。JEP 424的更新包括：统一了 MemorySegment 和 MemoryAddress 接口，即，内存地址由零长度的内存段建模；并且增强了 MemoryLayout 密封接口，以便于与在JDK 19中提供的JEP 427，<a href=\"https://openjdk.org/jeps/427?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2Njc5NTcwNzQsImZpbGVHVUlEIjoiSm5mVnpmNG5ZdThBcDFsdyIsImlhdCI6MTY2Nzk1Njc3NCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NTA5NTIwOX0.9fQ4yI44wd5QQLZv8_85Xhtv4-M8HKKZQzqwaeEbaM4\">switch中的模式匹配（第三次预览）</a>\"一起使用。</p><p>&nbsp;</p><p>JEP 438，<a href=\"https://openjdk.org/jeps/438\">Vector API</a>\"<a href=\"https://openjdk.org/jeps/438\">(</a>\"<a href=\"https://openjdk.org/jeps/438\">第五</a>\"<a href=\"https://openjdk.org/jeps/438\">个</a>\"<a href=\"https://openjdk.org/jeps/438\">孵化器</a>\"<a href=\"https://openjdk.org/jeps/438\">)</a>\"，结合了对前四轮孵化器反馈进行了增强：JEP 426，<a href=\"https://openjdk.org/jeps/426\">Vector API（第四个孵化器）</a>\"，在JDK 19中交付；JEP 417，<a href=\"https://openjdk.java.net/jeps/417\">Vector API（第三个孵化器）</a>\"，在JDK 18中交付；JEP 414，<a href=\"https://openjdk.java.net/jeps/414\">Vector API（第二个孵化器）</a>\"，在JDK 17中交付；JEP 338，Vector API（孵化器），作为JDK 16中的<a href=\"https://openjdk.java.net/jeps/11\">孵化器模块</a>\"提供。该特性旨在增强Vector API，以根据JEP 424，<a href=\"https://openjdk.org/jeps/424\">外部函数和内存API（预览版）</a>\"的定义，从 MemorySegment 中加载并存储向量。</p><p>&nbsp;</p><p></p><h4>JDK 21</h4><p></p><p></p><p>计划于2023年9月发布一个GA和下一个LTS版本，目前<a href=\"https://jdk.java.net/20/\">JDK 21</a>\"的Proposed to Target有两（2）个JEP。</p><p>&nbsp;</p><p>JEP 430，<a href=\"https://openjdk.org/jeps/430\">字符串模板（预览版）</a>\"，一种JEP类型的特性，提议使用字符串模板来增强Java编程语言，字符串模板类似于字符串字面量，但包含在运行时合并到字符串模板中的嵌入式表达式。该特性已被归类为JDK 21的Proposed to Target，但尚未正式公布审查日期。</p><p>&nbsp;</p><p>JEP 431，<a href=\"https://openjdk.org/jeps/431\">序列集合</a>\"，提议引入“一个组能新表示集合概念的接口，这些集合的元素按照定义良好的序列或顺序排列，作为集合的结构属性。”其动因是由于集合框架（Collections Framework）中缺乏定义良好的排序和统一操作集。该特性已被归类为JDK 21的Proposed to Target，但尚未正式公布审查日期。</p><p>&nbsp;</p><p>我们可以根据一些JEP草案和候选版本来推测哪些额外的JEP有可能会被包含在JDK21中。</p><p>&nbsp;</p><p>JEP草案8303358，<a href=\"https://openjdk.org/jeps/8303358\">作用域值（预览版）</a>\"，由红帽公司的杰出工程师<a href=\"https://www.linkedin.com/in/andrew-haley-3546112/\">Andrew Haley</a>\"和<a href=\"https://www.infoq.com/profile/Andrew-Dinn/\">Andrew Dinn</a>\"提交，对即将发布的JDK 20中所提供的JEP 429，<a href=\"https://openjdk.org/jeps/429\">作用域值（孵化器）</a>\"进行了改进。其最初名为范围局部变量（孵化器，Extent-Local Variables），由<a href=\"https://wiki.openjdk.java.net/display/loom/Main\">Loom</a>\"项目支持，该特性旨在实现线程内部和线程之间不可变数据的共享。这比线程局部变量更可取，尤其是在使用大量虚拟线程时。虽然这个草案还没有达到Candidate状态，但描述中明确指出，这个JEP将被添加到JDK21中。</p><p>&nbsp;</p><p>JEP草案8277163，<a href=\"https://openjdk.java.net/jeps/8277163\">值对象（预览版）</a>\"，是由Valhalla项目赞助的一个JEP特性，提议创建价值对象——无身份标识的值类，指定其实例的行为。该草案与JEP 401，<a href=\"https://openjdk.java.net/jeps/401\">原语类（预览版）</a>\"相关，目前仍处于Candidate状态。</p><p>&nbsp;</p><p>JEP 435，<a href=\"https://openjdk.org/jeps/435\">异步堆栈跟踪VM API</a>\"，一种JEP类型的特性，提议定义一个有效的API，用于收集堆栈跟踪信息，以便根据包含Java和本地堆栈帧信息的信号处理器进行分析。</p><p>&nbsp;</p><p>JEP 401，<a href=\"https://openjdk.java.net/jeps/401\">原语类（预览版）</a>\"，在Valhalla项目的支持下，引入了开发人员声明的原语类——特殊类型的值类——如前面提到的值对象（预览版）JEP Draft中所定义——定义了新的原语类型。</p><p>&nbsp;</p><p>JEP草案8301034，<a href=\"https://openjdk.org/jeps/8301034\">密钥封装机制API</a>\"，一种JEP类型的特性，提议：满足标准<a href=\"https://cseweb.ucsd.edu/~btackmann/papers/CoMaTa13b.pdf\">密钥封装机制</a>\"（Key Encapsulation Mechanism，KEM）算法的实现；通过更高级别的安全协议满足KEM的用例；并且允许可插拔的KEM算法的Java或本地实现。该草案最近进行了更新，其中包括一项重大更改，即取消了 DerivedKeyParameterSpec 类，转而将字段放在 encapsulate(int from, int to, String algorithm) 方法的参数列表中。</p><p>&nbsp;</p><p>JEP草案8283227，<a href=\"https://openjdk.org/jeps/8283227?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">JDK源结构</a>\"，一种信息类的JEP，用于描述JDK源代码和JDK代码库中相关文件的总体布局和结构。该JEP提议帮助开发人员适应在JDK9中提供的JEP 201，<a href=\"https://openjdk.java.net/jeps/201\">模块化源代码</a>\"中所描述的源代码结构。</p><p>&nbsp;</p><p>JEP草案8280389，<a href=\"https://openjdk.org/jeps/8280389?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">ClassFile API</a>\"，提议提供一个用于解析、生成和转换Java类文件的API。该JEP最初将作为JDK中<a href=\"https://asm.ow2.io/\">ASM</a>\"（Java字节码操作和分析框架）的内部替代品，并计划将其作为公共API开放出来。甲骨文（Oracle）的Java语言架构师<a href=\"https://www.linkedin.com/in/briangoetz\">Brian Goetz</a>\"将ASM描述为“一个带有大量遗留包袱的旧代码库”，并提供了有关该草案将如何演进并最终取代ASM的背景信息。</p><p>&nbsp;</p><p>JEP草案8278252，<a href=\"https://openjdk.org/jeps/8278252?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">JDK打包和安装指南</a>\"，一个信息型的JEP，提议为macOS、Linux和Windows提供创建JDK安装程序的指南，以降低不同JDK提供程序在JDK安装之间发生冲突的风险。其目的是通过规范化安装目录名称、包名称和其他可能导致冲突的安装程序元素，在安装JDK更新版本时提升更好的用户体验。</p><p>&nbsp;</p><p>我们预计甲骨文将会很快开始为JDK 21提供更多的额外JEP。</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/03/java-20-so-far/\">https://www.infoq.com/news/2023/03/java-20-so-far/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/UbJ7lV4OWYjY7UN4JGBD\">Java 近期新闻：NetBeans 17、Spring 及 Tomcat 多项更新、JDk 20 版本 GraalVM</a>\"</p><p><a href=\"https://www.infoq.cn/article/YaBqqD7fd6kX97GbhkGm\">虚拟线程：大规模 Java 应用的新基石</a>\"</p><p><a href=\"https://www.infoq.cn/article/KUFfYLk4zWcQ1VZXflpp\">Just：Spring Boot 应用的新命令行界面</a>\"</p><p>&nbsp;</p><p>&nbsp;</p>",
    "publish_time": "2023-03-17 11:35:11",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "全面升级未来数据智能战略，柏睿数据发布全新数据智能产品矩阵",
    "url": "https://www.infoq.cn/article/gDNkrkUMbSdBl7q9UW8O",
    "summary": "<p>3月16日，<a href=\"https://www.infoq.cn/article/Je9iE2vCQcMJSVbZxXiS\">柏睿数据</a>\"在北京举办“数智引领 睿创新机——柏睿数据2023新品发布媒体见面会”，全面升级未来数据智能战略，发布全新数据智能产品矩阵，针对五大行业全面数智化转型提出场景解决方案，赋能客户、生态伙伴从智慧数据中释放生产力，加速千行百业数智化转型。</p><p>&nbsp;</p><p>柏睿数据总裁梁雪青表示，未来将进入数字经济全面、高质量发展的黄金时代，柏睿数据期冀与合作伙伴携手，在数智时代发展的新征程上勇踏前人未至之境。</p><p></p><h2>“Data+AI”已成为企业数字化转型的重要技术趋势和驱动力</h2><p></p><p>&nbsp;</p><p>当前，“Data+AI”已成为企业数字化转型的重要技术趋势和驱动力，能够充分激活数据要素潜能。</p><p>&nbsp;</p><p>而现阶段制约数据新价值释放的基础性核心因素在于数据质量和数据算力，亟需个性化、云化、智能化、标准化的数据算力产品和服务，以实现高性能、高成效比、随需随用的数据算力，保障数据可靠性和合规性。&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/11/11fff8dd565156473fe0dc9523e4ce05.png\" /></p><p></p><p>柏睿数据董事长、首席科学家刘睿民表示：“柏睿数据长期致力于大数据智能与云端战略升级，以及产业智慧落地升级，以‘全内存分布式计算引擎’为基础，以建构‘数据智能’技术为核心，构建高性能、安全合规、自动化的数据洞察数字化平台，同时通过数据智能技术在五大关键行业场景的创新应用，助力客户伙伴以智慧数据创造行业新价值。”同时提出坚持信创引领，立足技术产品核心，联合信创产业上下游生态伙伴，共建信创生态；坚持标准先行，牵引大数据产业规范化、高质量发展。</p><p>&nbsp;</p><p>柏睿数据联合创始人、全球副总裁、首席技术官马珺正式发布了拥有完全自主知识产权的全新数据智能产品矩阵：全内存分布式数据库RapidsDB核心数据算力引擎、一体化流湖仓、智能开发平台和数据智能交付平台四大产品系列，打造了从数据管理到数据分析的完整产品体系，为客户提供个性化的、基于超强算力和云原生的现代数据智能产品体系和服务，覆盖数据全生命周期应用，满足客户高性能、标准化、高可用、自动化、高成效比的数据算力需求。</p><p><img src=\"https://static001.geekbang.org/infoq/e2/e22d8bc329d0b17dc339a0b880a9c226.png\" /></p><p></p><p>会议现场，柏睿数据行业咨询总监顾冉介绍了基于数据智能算力底座打造的柏睿数据五大行业场景解决方案。</p><p>&nbsp;</p><p>面向运营商、金融、能源、政务和智能制造五大重数据资产的行业，为用户提供深入行业场景的数据智能全栈服务能力，助力用户实现降本增效、业务增长与业务创新，加速各行业构建全面感知、无缝连接、高度智能的全域数字能力，推动数实融合和数字经济高质量发展。目前，柏睿数据已服务各行业领先企业500+项目。</p><p></p><h2>从数据资产到数据要素，数字中国还有多远？</h2><p></p><p>&nbsp;</p><p>在圆桌对话环节，来自华录光存储研究院、国信优易、飞诺门阵的合作伙伴代表与柏睿数据副总裁李远志就“从数据资产到数据要素，数字中国还有多远？”展开了深入讨论。</p><p>&nbsp;</p><p>飞诺门阵代表表示，统一的技术和产品标准、数据产权的明确划分，能够有效避免数据资产的浪费，是充分激活数据要素潜能的基础。</p><p>&nbsp;</p><p>华录光存储研究院代表指出，硬件基础+软件应用，将是数据资产升级为数据要素的重要基础。</p><p>&nbsp;</p><p>柏睿数据副总裁李远志指出，柏睿数据全新数据智能产品矩阵建立了从数据管理到数据分析的完整产品体系，其中数据分析是数据要素的生产过程，是用户完成数据资产价值兑现的必由之路。</p><p>&nbsp;</p><p>国信优易代表指出，未来国家数据局的组建，将为大数据企业提供更加明确的发展路径和发展依据，加速数字中国高质量发展。</p>",
    "publish_time": "2023-03-17 14:46:23",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]