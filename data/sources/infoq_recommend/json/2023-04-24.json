[
  {
    "title": "加入有序集合，Java集合框架变得更加完善",
    "url": "https://www.infoq.cn/article/PyfmlboNJMKzlhZTwDL3",
    "summary": "<p>JEP 431（<a href=\"https://openjdk.org/jeps/431\">有序集合</a>\"）已从Candidate状态进入到Proposed to Target状态（发布目标版本为JDK 21）。这个JEP建议引入“一系列新的集合接口，这些集合的元素按照指定的序列或顺序排列，并作为集合的结构属性。”其背后的动机是希望Java的集合框架能够提供定义良好的顺序和统一的操作。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/44/445787f834aaf9d3eafc4c747024b77f.png\" /></p><p></p><p>一直以来，Java的集合框架都需要一种集合类型可以表示指定顺序的元素序列和应用于这些集合的统一操作。不幸的是，对顺序的支持目前分散在集合框架的类层次结构中，这使得通过API来表达某些实际的概念变得较为困难。对此，有人提议引入新的接口来表示具有指定顺序的集合，并提供统一的API来访问它们的第一个和最后一个元素，可以按照相反的顺序处理它们。</p><p></p><p>缺少这种集合类型来表示具有指定顺序的元素序列一直是各种问题和抱怨的主要来源。例如，虽然List和Deque定义了顺序，但它们的公共超类是Collection，Collection并没有定义顺序。类似地，Set没有定义顺序，子类型（如HashSet）也没有，但其他子类型（如SortedSet和LinkedHashSet）有。</p><p></p><p>为了解决这个问题，新JEP为有序集合（Collection）、有序集（Set）和有序映射（Map）定义了新的接口，然后将其嵌入到现有的集合类结构中。这些接口中声明的所有新方法都有默认实现。有序集合、有序集和有序映射都具有不同的特征，有序集合表示元素具有指定顺序的集合，有序集表示不包含重复元素的集合，有序映射表示其条目具有指定顺序的映射。</p><p></p><p>新的reversed()方法提供了原始集合的反向顺序视图，支持所有不同类型的排序，可以使用所有常用的迭代机制（如增强的for循环、显式iterator()循环、forEach()、stream()、parallelStream()和toArray()）在两个方向上处理元素。</p><p></p><p>SequencedCollection接口包括几个新的方法，如下所示：</p><p></p><p><code lang=\"java\">interface SequencedCollection extends Collection {\n    // 新方法\n    SequencedCollection reversed();\n    // 从Deque抽象上来的方法\n    void addFirst(E);\n    void addLast(E);\n    E getFirst();\n    E getLast();\n    E removeFirst();\n    E removeLast();\n}</code></p><p></p><p>SequencedSet接口包含了与SequencedCollection相同的方法，包括reversed()。SequencedMap接口包含了几个新方法，如下所示：</p><p></p><p><code lang=\"java\">interface SequencedMap extends Map {\n  \n// new methods\nSequencedMap reversed();\nSequencedSet sequencedKeySet();\nSequencedCollection sequencedValues();\nSequencedSet&gt; sequencedEntrySet();\nV putFirst(K, V);\nV putLast(K, V);\n// methods promoted from NavigableMap\nEntry firstEntry();\nEntry lastEntry();\nEntry pollFirstEntry();\nEntry pollLastEntry();\n}</code></p><p></p><p>这三个新接口都刚好融入到现有的集合类型结构中，List将SequencedCollection作为其直接的父接口，Deque也将SequencedCollection作为其直接的父接口，LinkedHashSet实现了SequencedSet，SortedSet将SequencedSet作为其直接的父接口，LinkedHashMap实现了SequencedMap，SortedMap将SequencedMap作为其直接的父接口。</p><p></p><p>显式排位API（如SortedSet::addFirst和SortedMap::putLast）会抛出UnsupportedOperationException（因为它们的元素序列是通过比较来决定的），这些不实现所有SequencedCollection操作的不对称集合是有意义的，因为它将SortedSet和SortedMap也带入了有序集合家族，这样它们就可以得到更广泛的使用。</p><p></p><p>总的来说，引入新的接口来表示具有指定顺序的集合和应用于这些集合的统一操作，是Java集合框架向前迈出的重要一步。通过以一致且易于使用的方式提供对顺序的支持，集合框架对开发人员来说将变得更加直观和高效。</p><p></p><p>原文链接：</p><p>https://www.infoq.com/news/2023/03/collections-framework-makeover/</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/ecfagKNCSRckMTv7ozAI\">Java 近期新闻：JDK 21 发布计划、Payara 平台、JBang、JHipster、WildFly</a>\"</p><p><a href=\"https://www.infoq.cn/article/R4gOIJ1ILgX1KF8vU4Y2\">甲骨文推出新的 Java SE 通用订阅</a>\"</p><p><a href=\"https://www.infoq.cn/article/JtADhFJ2VYuoDT4BqkeF\">WireMock Spring Boot 将简化 Spring Boot 应用的 WireMock 配置</a>\"</p>",
    "publish_time": "2023-04-24 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "又一国产大模型来了，超对称联合复旦大学发布120亿参数语言模型BBT-2， 已开源",
    "url": "https://www.infoq.cn/article/peHc8AhcYXGJtdbj8AEb",
    "summary": "<p></p><p>InfoQ获悉，近日，超对称联合复旦大学发布并开源120亿参数语言模型BBT-2。</p><p>&nbsp;</p><p>2022年5月超对称技术公司发布了大语言模型Big Bang Transformer【乾元】的第一版BBT-1，10亿参数预训练语言模型，在中文金融语料上训练而成。近期，超对称公司再推出BBT-2，120亿参数的通用大语言模型，并在BBT-2的基础上训出代码，金融，文生图等专业模型。</p><p>&nbsp;</p><p>据悉，Big Bang Transformer【乾元】12B大模型的开发基于英伟达的DGX算力，超对称公司主导大模型的预训练，并联合复旦大学知识工场实验室完成指令微调和评测工作。</p><p>&nbsp;</p><p>超对称技术公司将发布基于BBT-2的系列模型（模型Index见于<a href=\"https://bbt.ssymmetry.com/\">https://bbt.ssymmetry.com</a>\"）</p><p>&nbsp;</p><p>BBT-2-12B-Text：120亿参数的中文基础模型BBT-2.5-13B-Text: 130亿参数的中文+英文双语基础模型BBT-2-12B-TC-001-SFT &nbsp;经过指令微调的代码模型，可以进行对话BBT-2-12B-TF-001 在120亿模型上训练的金融模型，用于解决金融领域任务BBT-2-12B-Fig：文生图模型BBT-2-12B-Science 科学论文模型</p><p>&nbsp;</p><p>另外，通过与UCloud在开源方面的合作，超对称还将3个大模型开源到官网、Github和UCloud，后续用户可直接在UCloud官方平台通过GPU云主机的行业镜像或算力平台直接开箱使用这些模型：</p><p>&nbsp;</p><p>BBT-1-0.2B：2亿参数金融模型，包括三个不同预训练方式进行训练的模型, 训了600亿Tokens：</p><p>&nbsp;</p><p>（1）BBT-1-0.2B-001：2亿参数，金融模型，T5 Decoder+Encoder架构&nbsp;</p><p>（2）BBT-1-0.2B-002: 2亿参数，金融模型，T5+GPT&nbsp;</p><p>（3）BBT-1-0.2B-003: 2亿参数，金融模型，T5+UL2</p><p>&nbsp;</p><p>BBT-1-1B：10亿参数金融模型，T5 Encoder+Decoder架构，使用金融中文语料库1000亿tokens进行预训练，包含社交媒体，财经新闻，券商研报，公司公告财报等数据</p><p>&nbsp;</p><p>BBT-2-12B-Text：120亿参数基础模型，GPT Decoder-Only 架构，未经指令微调，完成2000亿token预训练，模型性能还有较大提升空间，开发者可在通用模型上继续训练或进行下游任务微调</p><p>&nbsp;</p><p>BBT-2.5-13B-Text: 130亿参数基础模型，GPT Decoder-Only 架构，未经指令微调，完成2000亿中文+英文tokens预训</p><p>&nbsp;</p><p>开源下载链接：</p><p>&nbsp;</p><p>模型：</p><p>&nbsp;</p><p>官网：<a href=\"https://bbt.ssymmetry.com/model.html\">https://bbt.ssymmetry.com/model.html</a>\"Github：<a href=\"https://github.com/ssymmetry/BBT-FinCUGE-Applications/tree/main/model\">https://github.com/ssymmetry</a>\"</p><p>&nbsp;</p><p>语料库，开源了接近1000亿tokens的预训练语料，包括通用语料和金融语料，详见：</p><p>&nbsp;</p><p><a href=\"https://bbt.ssymmetry.com/data.html\">https://bbt.ssymmetry.com/data.html</a>\"</p><p>&nbsp;</p><p>评测数据集，开源了8个中文金融大模型的评测数据集，详见：</p><p><a href=\"https://bbt.ssymmetry.com/evaluation.html\">https://bbt.ssymmetry.com/evaluation.html</a>\"</p><p>&nbsp;</p><p>论文链接：</p><p>&nbsp;</p><p><a href=\"https://arxiv.org/abs/2302.09432\">https://arxiv.org/abs/2302.09432</a>\"</p><p>&nbsp;</p><p>&nbsp;</p>",
    "publish_time": "2023-04-24 10:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Safari 版本更新？开发者的噩梦之旅！",
    "url": "https://www.infoq.cn/article/LAGPaxJrdAHx5x4zLt7I",
    "summary": "<p>近期Safari推出了16.4版本，新版本给我们带来的不是便利、而是又一场恐怖的噩梦。我们是基于浏览器的游戏开发应用Construct的软件商，Safari 16.4这个早期版本则在项目打开、项目预览和使用现有项目内容等各个方面都对Construct造成了毁灭式的打击。这里我想分享一点个人经验，让各位客户、开发者、监管机构乃至苹果自己感受到我们在Safari的这次例行发布中受到了怎样的折磨。</p><p>&nbsp;</p><p>大多数浏览器都会提供预发行版以供早期测试。Chrome Canary和Firefox Nightly就会每天更新，但其实际开发和测试版的发布频率则相对较低。苹果虽然也提供Safari技术预览版（STP），但却仅适用于macOS，而且不会公开发布任何更新时间表——大概的频率就是每两周一次。浏览器的预发行版往往很不稳定，其中的明显问题也能快速得到解决。而一旦进入测试版，专业用户得仔细观察、认真体验了。所以当Safari 16.4 beta 1于2月16号发布时（同样没有任何相应的公开时间表），我们马上开始研究，并很快发现了一大堆问题。</p><p>&nbsp;</p><p></p><h2>无法正常打开项目</h2><p></p><p>&nbsp;</p><p>Construct项目基于zip文件，我们使用流行的zip.js库来读取这些文件，在支持方面则反过来使用Compression Streams API。Safari 16.4添加了对Compression Streams API的支持，但却与zip.js存在一定的兼容性问题，因此在Construct中打开项目经常会触发失败。可以想见，Web上其他依赖于zip.js的项目应该也受到了类似的影响。</p><p>&nbsp;</p><p>我在2月17号<a href=\"https://www.construct.net/out?u=https%3a%2f%2fbugs.webkit.org%2fshow_bug.cgi%3fid%3d252474\">上报了这个问题</a>\"。在对这个问题是否等同于另一个问题抱有疑惑之后（实际并不相同），苹果工程师进行了调查并确定上报属实，表示在2月27日之前成功将其解决。最终效果不错，苹果方面的工作也值得赞赏。</p><p>&nbsp;</p><p>之后就是3月8号发布的Safari技术预览版165，我发现这个bug仍然存在。这时候Safari 16.4的正式版似乎很快就要来了，但我们也不确定，毕竟苹果根本就不提供公开时间表。这时候我们该怎么办？Bug的存在是因为苹果方面已经做了修复，但问题没得到解决？还是说他们根本就没在这个版本里做修复？可是一周多之前已经修复过了呀，怎么会出这样的纰漏呢？Safari的正式版会不会也有问题，之后再发布紧急补丁来解决？苹果不至于要先惹毛所有zip.js开发者用户，才猛然发觉需要补救吧？如果真是这样，那这个问题要持续多久？身为用户，我们是不是该啥都别做，单纯指望Safari 16.4能附带有效的修复程序？可万一正式发布的版本不行，那Construct必然会受到灾难性的影响。这简直是个恐怖的困境。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/09/0945481cc462e49083f608e819dc26af.gif\" /></p><p></p><p>我询问了Safari 16.4当中是否会包含修复程序，一位工程师虽然做出了回应，但却只表示技术预览版是修复过了的。这明显没有回答我们的问题，对方也没有明确保证技术预览版中的修复一定会被纳入Safari 16.4。</p><p>&nbsp;</p><p>最终，我们决定看看Safari 16.4到底是个什么情况。而且就在这段时间，我们的Construct已经无法正常打开大部分项目。当时我们唯一的选择就是不断手动测试各个Safari版本，浪费大量时间来验证苹果之前就已经收到过报告的问题。经过几个星期的痛苦等待，技术预览版166于3月23日星期四发布，Safari 16.4则于3月27日星期一推出。没错，这两个日期之间就只夹着一个完整的工作日，而且我还记得那天我干了啥——啥也没干。我跟公司请了个假，从那个周五开始连休接下来的整个礼拜。因为没有公开的发布时间表，所以我不知道Safari新版本到底何时才会到来。于是乎，我直到4月3号才真正能够验证对新版本做验证，这时候距离Safari 16.4的全球发布已经过去了整整一周。在这段时间里，我根本不知道自己的软件能不能在Safari上正常运行。但幸运的是，没出什么毛病。Safari 16.4跟技术预览版166拥有相同的修复程序，可整件事真的太悬了。</p><p>&nbsp;</p><p>如果苹果能像其他“正常”的网络浏览器开发商一样在修复完成的版本里标记出问题，那以上所有惊心动魄的猜测和焦虑本来都可以避免。哪怕项目的透明度再好上一点点，我们都不至于搞得这么被动。</p><p>&nbsp;</p><p></p><h2>无法正常预览项目</h2><p></p><p>&nbsp;</p><p>我们发现的下一个问题，就是Construct在预览项目时只能显示一个空白屏幕。这对我们来说也是大麻烦，于是很快完成了<a href=\"https://www.construct.net/out?u=https%3a%2f%2fbugs.webkit.org%2fshow_bug.cgi%3fid%3d252664\">问题上报</a>\"。苹果工程师再次协助调查，同样做得很好。由于过程非常复杂而且跟本文主题无关，这里允许我忽略具体细节。总之，Service Workers对于Construct中的项目预览功能非常重要，而我们不小心依赖了一个Chrome bug，导致我们的Service Worker在Safari 16.4上会崩溃。在这种情况下，问题其实出在谷歌那边（麻烦<a href=\"https://www.construct.net/out?u=https%3a%2f%2fbugs.chromium.org%2fp%2fchromium%2fissues%2fdetail%3fid%3d832071\">快点修复</a>\"，谢谢），但现在担子又落到了我们身上。然后，跟无法打开项目类似的问题又再次出现。</p><p></p><p>还是类似的可怕困境，但影响更糟糕：Safari好像马上就要正式发布了。要是只有我们自己来解决，那大概得花多长时间？这个问题非常重要，毕竟我们的Construct可是有着明确的发布时间表，包括用于测试的beta版本，而且每隔几个月就会向所有用户推出稳定版本。如果掌握了Safari的发布日期，我们就能核对双方时间表，估算出能拿多长时间来调查、确保修复程序能在Safari更新之前就按计划发放给我们的客户。但如果说Safari第二天就突然更新了，那我们可就完了：Construct无法正常预览项目，而我们必须尽快修复以防止客户受到干扰！总之大家懂的，就是例行修复和紧急状况之间的区别。</p><p>&nbsp;</p><p>苹果那边则总是遮遮掩掩，部分员工暗示他们不能透露更新时间表，唯一能说的就是新版本会“很快”到来。所以我们只能把问题当作紧急状况来处理，立刻采取行动。更糟糕的是，Service Workers开发难度很大，涉及各种复杂性因素，编码工作着实令人头痛。所以我们被迫经历了服务中断、放弃其他工作，争分夺秒先把迫在眉睫的难题搞定，努力把修复程序立即发布给所有客户。有经验的朋友肯定看得出来，这里头颇有风险——一旦搞出问题并破坏了其他组件，后果简直不堪设想。</p><p>&nbsp;</p><p>如果苹果能像其他“正常”的网络浏览器开发商一样提供明确的版本更新时间表，那以上所有惊心动魄的猜测和焦虑本来都可以避免。哪怕项目的透明度再好上一点点，我们都不至于搞得这么被动。幸运的是我们的修复工作进展顺利，其他东西没有受到破坏。期间最让人烦躁的，就是Safari对原有Service Worker脚本的缓存方式似乎跟其他浏览器都不一样。我一直不理解苹果为什么要搞这个特殊，这样真的很容易让情况变得更糟。</p><p>&nbsp;</p><p>最终，Safari 16.4隔了快一个月才推出。我们本来可以不那么拼命的，紧急响应引发了一系列不必要的服务中断和时间浪费，但当时的我们别无选择。</p><p>&nbsp;</p><p></p><h2>Construct中发布的所有内容都出了问题</h2><p></p><p>&nbsp;</p><p>除了打不开项目、无法正常预览项目之外，最严重的问题还没出场呢。在Safari 16.4中，Construct近年来发布的所有Web游戏全都出了问题。</p><p>&nbsp;</p><p>Safari 16.4添加了对<a href=\"https://www.construct.net/out?u=https%3a%2f%2fdeveloper.mozilla.org%2fen-US%2fdocs%2fWeb%2fAPI%2fOffscreenCanvas\">OffscreenCanvas</a>\"的支持，但却只支持“2d”上下文——换言之，不支持WebGL。Construct需要用WebGL进行渲染，于是在发现OffscreenCanvas受到支持之后，它就会创建一个worker和OffscreenCanvas，之后获取WebGL上下文。可这时能获取到的只有null，于是触发故障，用户面前只剩一个空白屏幕。而这才是本次浏览器版本更新的最大问题。众多原有Web内容因此受到影响，我们为此专门发布了另一个紧急补丁进行修复（期间服务再次中断）。但由于我们的客户多年来已经在网络上发布了各种各样的Web内容，所以对全部内容做更新基本上没有可能。受到影响的包括itch.io、Newgrounds、Poki和我们自己网站上的几千款游戏；企业使用的海量培训材料；教师使用的教材；博物馆中的交互式信息亭等等……如果放任不理，这将是一场彻头彻尾的灾难。</p><p>&nbsp;</p><p>这真的让我们惊掉了下巴。我们通过查看OffscreenCanvas是否已被定义（即typeof OffscreenCanvas !== \"undefined\"）来做检测，却没想到Safari浏览器居然只定义某些上下文、却漏掉了其他上下文。难道上下文不该跟标准的 <canvas> 元素拥有同等地位吗？为什么不这样呢？MDN文档压根没提过上下文可用性不一致的问题。Chrome在2018年就发布了支持所有上下文的OffscreenCanvas，Firefox在2022年完成了同样的全面支持。而Safari呢，时至今日还是没有做到。</canvas></p><p>&nbsp;</p><p>但苹果有自己的说辞，指出只支持部分上下文完全符合规范要求，开发者应该做好相应的错误功能检测工作。我没那个闲工夫去查什么<a href=\"https://www.construct.net/out?u=https%3a%2f%2fhtml.spec.whatwg.org%2fmultipage%2fcanvas.html%23the-offscreencanvas-interface\">相关规范</a>\"，哪怕真的符合要求，我也理解不了苹果为什么要这么干。难道作为浏览器开发商，苹果认真研究规范条文就是为了暗地里给Web开发者挖坑？</p><p>&nbsp;</p><p>首先，我认为规范的存在意义就是保持良好的Web兼容性——也就是让HTML设计原则中强调的“<a href=\"https://www.construct.net/out?u=https%3a%2f%2fwww.w3.org%2fTR%2fhtml-design-principles%2f%23support-existing-content\">支持现有内容</a>\"”真正落地。例如，在发现新的Array flatten方法名称会破坏网站时，<a href=\"https://www.construct.net/out?u=https%3a%2f%2fdeveloper.chrome.com%2fblog%2fsmooshgate%2f\">规范就会将其重新命名</a>\"为flat。是的，规范条款要以实际需求为准，而非实际应用以条款为准。所以我认为最合理的解决方案应该是更新规范，声明HTML Canvas和OffscreenCanvas应当支持相同的上下文。这不仅能避免我们（也可能包括其他人）面临的网络兼容性问题，也能让开发思路变得更趋统一。之后，Safari应该延迟发布OffscreenCanvas，直到确保其支持WebGL，这样所有受到影响的Web内容都能正常运行。</p><p>&nbsp;</p><p>其次，即使把规范奉为圭臬而且作者确实不打算修改，那难道苹果也不关心Web兼容性吗？无论如何，为什么不推迟OffscreenCanvas的发布？毕竟这才是尊重Web兼容性的务实选择。苹果完全可以放慢脚步，花点时间添加对WebGL的支持。我相信大多数有经验的软件开发者在职业生涯中都做过类似的判断：在开发后期发现新功能会引发问题，因此暂时关闭该功能，推迟到下一个预定版本再行发布，利用这段时间做好修复。而在Chrome全面支持OffscreenCanvas的4年零6个月之后，Safari才迟缓地发布OffscreenCanvas，而且还不能支持所有上下文类型。反正已经晚成这个样子了，为什么不能再等3个月，用完整的实施来维护Web兼容性？为什么一定得匆忙上线、破坏原有Web开发成果？我已经尽力想要说服苹果，但对方给出的回应非常模糊，基本没给项目延后留任何空间。</p><p>&nbsp;</p><p>在我看来，苹果的立场反而是想尽一切办法别影响已经定好的发布时间表。我们用户这边如大难临头，苹果那边的最佳选项是推迟这项调整登陆Safari 16.4的时间。但最后，他们居然添加了一项特殊的浏览器功能，用来检测我们的引擎并禁用OffscreenCanvas。这确实避免了兼容性问题，但却只适用于我们Construct——其他受到同类问题影响的朋友，不好意思了，这个办法对你的引擎无效。</p><p>&nbsp;</p><p></p><h2>一点个人吐槽</h2><p></p><p>&nbsp;</p><p>其实我不是个喜欢抱怨的人，但面对这次的大麻烦，我真心感觉应该强调一下问题的严重性。我个人最近几周过得很累、压力巨大，甚至因为焦虑而恶心反胃。对，不光是在工作中，回到家里也是一样。问题的根源就是苹果更新带来的不确定性：也许我们即将大祸临头，也许一切都能安然度过，但我不知道该信哪个、也不知道什么时候才能揭晓答案。连着好几个礼拜，我都在胆战心惊中生活，这种心情如同等待死刑。接下来的一天要么普普通通、要么炸响惊雷，而我只能坐等一切发生。我甚至不知道最终击倒Construct的到底会是哪个问题。另外提醒大家，虽然以往的情况没这么极端，但Safari之前的版本更新也曾经引发过类似的问题。</p><p>&nbsp;</p><p>我们都是人，是人就会犯错，这没什么大不了。但我想提醒大家的是，Construct是一家已经成立十几年的公司，从一人一台笔记本发展成了如今拥有25万月活用户的成功企业。在此期间，我也曾看到种种灾难、争议、愤怒的客户、意外的服务器故障等等。这些都很艰难，但我们专业人士总能坚持下去。但说实在的，Safari的这个版本是我经历过的最糟糕、压力最大的变数。最令人难以接受的是，这个问题本来很容易避免，苹果只要点点头就能把我们从苦难中拯救出来。但多年以来，他们一直坚定地拒绝改变、拒绝展现哪怕一点点仁慈之心。</p><p>&nbsp;</p><p>我想再次强调，我说的这些绝对不是针对任何一位特定的苹果员工。这个错不是苹果中的具体哪个人导致的——事实上，我在前文中也提到，很多苹果员工都把工作做得很好。苹果也绝对不乏聪明和勤奋的头脑。问题在于，苹果制定的版本管理政策太过僵化，毫无透明度的制度必然引发巨大的不确定性，这才是我们这些Web开发人员承受不必要压力的核心与根源。我之所以反复强调这一点，唯一的目的就是让苹果意识到Safari的管理政策在生态系统中造成了多大的苦难，希望苹果方面能够调整自己的政策设计思路。</p><p>&nbsp;</p><p></p><h2>苹果的“斑斑劣迹”</h2><p></p><p>&nbsp;</p><p>实事求是地讲，过去的Safari版本一般不会闹这么大问题，但类似的情况也确实出现过，给开发者造成了很大的压力甚至服务中断。从这次的事态看，苹果的一切都没有改变，或者说正在变得更糟。下面我向大家简要汇报一下之前遇到过的Safari相关问题。</p><p>&nbsp;</p><p>iOS 11.2.2<a href=\"https://www.construct.net/out?u=https%3a%2f%2fbugs.webkit.org%2fshow_bug.cgi%3fid%3d181781\">破坏了WebAssembly</a>\"，导致维基百科的部分内容、所有已发布的Construct内容等Web成果受到影响。许多问题本来可以通过关闭WebAssembly来避免，待做好准备再行开启。但苹果却决定默认启用，直到几个月后发布iOS 11.3时才完成修复。与此同时，苹果没有提供任何有意义的帮助或支持。期间我们只得到了一位乐于助人的维基百科工程师的支持，他分享了他们发现的解决办法。Safari 11.1破坏了<a href=\"https://www.construct.net/out?u=https%3a%2f%2fbugs.webkit.org%2fshow_bug.cgi%3fid%3d184502\">MessageChannels</a>\"并导致Construct无法正常运行，我们虽然找到了临时解决办法，但被迫在随后的好几年里都自行维持这套方案。Safari 14破坏了<a href=\"https://www.construct.net/out?u=https%3a%2f%2fbugs.webkit.org%2fshow_bug.cgi%3fid%3d217537\">replaceChildren()</a>\"方法，导致Construct发生故障。Safari 14破坏了<a href=\"https://www.construct.net/out?u=https%3a%2f%2fbugs.webkit.org%2fshow_bug.cgi%3fid%3d225344\">localStorage</a>\"和<a href=\"https://www.construct.net/out?u=https%3a%2f%2fbugs.webkit.org%2fshow_bug.cgi%3fid%3d226547\">IndexedDB</a>\"。即使问题已经解决，压力和不确定性也仍然存在。Safari 15中的<a href=\"https://www.construct.net/out?u=https%3a%2f%2fbugs.webkit.org%2fshow_bug.cgi%3fid%3d226922\">音频问题</a>\"可能会破坏所有Construct内容中音频素材的正常播放。虽然这个问题在Safari 15正式版发布之前就已经得到了修复，但苹果事前根本没做任何通知，所以我承受了跟这次相似的巨大心理压力。Safari 15.0至15.4版本中存在一个<a href=\"https://www.construct.net/out?u=https%3a%2f%2fbugs.webkit.org%2fshow_bug.cgi%3fid%3d234824\">WebGL bug</a>\"，会导致某些Construct内容显示空白屏幕。问题最终在Safari 15.5中得到了修复，但苹果未给出任何通知，我们在手动检查各个Safari版本时才自行发现。多年以来，我们一直希望拥有一种能在所有浏览器中播放的统一开放音频文件格式。WebM Opus距离成功就只差一步了——所有浏览器均可支持，包括macOS上的Safari，但就偏偏是<a href=\"https://www.construct.net/out?u=https%3a%2f%2fbugs.webkit.org%2fshow_bug.cgi%3fid%3d238546\">iOS和iPadOS上的Safari不行</a>\"。这是我们在全部浏览器上统一使用该格式的唯一障碍，若能消除将显著降低Web环境下音频支持的复杂度。然而，目前还不清楚苹果怎么考虑这个问题。而且在大概一年前提交申请以来，苹果从来就没给过我任何明确的答复。Safari 16存在一个<a href=\"https://www.construct.net/out?u=https%3a%2f%2fbugs.webkit.org%2fshow_bug.cgi%3fid%3d245428\">问题</a>\"，在某些情况下会破坏Construct中的音频播放。苹果似乎没有对此做出任何有意义的回应，而问题早在半年前我们就已经提交过去了。我们仍在维护自己的解决办法，但这同时也会导致其他并发问题。太多问题如石沉大海。我曾在约一年前向苹果<a href=\"https://www.construct.net/out?u=https%3a%2f%2fbugs.webkit.org%2fshow_bug.cgi%3fid%3d237082\">提出过问题</a>\"，对方没有做出任何有意义的回应。与之对应，<a href=\"https://www.construct.net/out?u=https%3a%2f%2fbugzilla.mozilla.org%2fshow_bug.cgi%3fid%3d1756803\">Firefox的处理态度</a>\"要积极得多。</p><p>&nbsp;</p><p>我们实际遇到的问题还远不止这些，聊起这个我能说个不停。而且各个问题都有类似的过程：不清楚当前发生了什么，从苹果那边得不到关于发布时间表的确切消息，苹果也拒绝向开发者透露必要的细节。</p><p>&nbsp;</p><p>没错，只有苹果和Safari毛病最多。我们在任何其他浏览器开发商那边都很少遇到类似的问题。而且即使出了问题，对方的解决方案也是完全透明的，可供我们做出相应的规划。</p><p>&nbsp;</p><p></p><h2>如何解决</h2><p></p><p>&nbsp;</p><p>解决问题的办法非常简单——学学其他浏览器开发商。没有任何一家开发商像苹果这样给我们惹出无数麻烦，这主要是因为他们会为Web开发者提供更友好的开发流程，具体包括：</p><p></p><p>更加透明：告知开发者即将发布bug修复的版本，并提供发布时间表。仅此一项，就足以消除大量不确定性。让Safari独立于操作系统更新之外：Safari是业界最后一款跟操作系统完全绑定的浏览器了，这也成为浏览器更新的一个巨大障碍。即使是小小但却重要的更新，也需要等待下次整个系统更新时才能完成。这无疑延长了解决严重问题的时间周期，把本可以几周甚至几天解决的问题拖上好几个月。如果Safari团队能自主控制发布周期并科学管理，相信很多问题根本就不会闹到这个地步。提供更多预发布测试选项：类似于Chrome Canary和Firefox Nightly，每天更新且独立于操作系统之外，这将有助于快速迭代问题并验证是否成功修复。苹果的技术预览版还应覆盖iOS和iPadOS，因为目前测试预发布iOS版Safari的唯一方法就是更新整个测试版系统。这样速度很慢、极不方便。沟通：错误时有发生，如果中断是由Safari中的某些问题所引发，苹果理应对外通报事件情况、目前正如何处理、预计何时能够解决，以及各开发商在此期间应如何应对。但苹果以往基本保持沉默，给人一种不关心开发生态的强烈印象。我怀疑苹果的员工其实是在乎的，只是从外部视角来看，实际感受真的很差。</p><p>&nbsp;</p><p>根据我的经验，其他所有浏览器开发商在这几个问题上都做得很好，只有苹果全方位表现稀烂。为Safari注入新功能当然是好事，苹果似乎也非常关注Safari 16.4，但却没有采取任何措施解决这些问题。</p><p>&nbsp;</p><p></p><h2>总结</h2><p></p><p>一切都已经过去，也确实没发生太大的问题。所以，我真有必要这么纠结吗？对，我觉得有必要。我希望有更多朋友能意识到在Safari上正常运行有多么费劲，而且每一次版本更新会给生态系统中的合作伙伴造成怎样的“精神创伤”。如果继续这么搞，终归会有人受到影响，我们也将反复面临灾难……每每想到这个，我恶心反胃的感觉就会翻涌而来。</p><p>&nbsp;</p><p>我其实很想对Safari说“爱你”，它的技术积累很棒，新版本也提供了不少令人兴奋的酷炫功能。很明显，苹果并不缺能迅速解决技术问题的优秀员工，而且我对苹果中的任何个人都没有意见。但遗憾的是，Safari的更新已经成了我们开发者的噩梦，而苹果显然有能力、也应该做得更好。新版本发布引发的严重中断已经存在多年，而苹果往往只需一点小操作就能很大程度上回避这些问题。可他们还是在坚持原本的旧办法，也从未表现出做改变的意愿和兴趣。于是像我这样的开发者就在噩梦中经受无尽折磨：正常工作被意外干扰，浪费时间检测那些苹果已经知道、却不愿主动告诉我们的问题，并在迫在眉睫的灾难压力和不确定性面前手足无措。在我看来，这些行为相当于是在忽视甚至迫害Web开发群体。</p><p>&nbsp;</p><p>我非常希望苹果能尽快做出改变。我希望Safari能成长为出色的浏览器。我希望开发出能在Safari中顺畅运行的精彩内容。我也希望它能作为一股重要的力量，为Web世界的健康发展做出贡献。但坦率地讲，我更希望苹果能重视我们开发者的心理健康。如果他们还不改变，那开发商们唯一的选择就是劝说用户改用Chrome或者Firefox，并通过监管机构强制扭转苹果的现有政策。虽然之前已经有监管力量的介入，但Safari 16.4版本的问题似乎证明苹果的问题反而日益恶化。与此同时，相较于解决问题，苹果好像更关注如何<a href=\"https://www.construct.net/out?u=https%3a%2f%2fwww.reuters.com%2ftechnology%2fapple-wins-appeal-against-uks-decision-investigate-its-mobile-browser-2023-03-31%2f\">回避监管</a>\"。如果我们最终只能选择Chromium作为唯一的答案，那不仅对Web世界不利，也会给我们自身带来新问题。而且哪怕最终事态发展到Chromium一家独大的地步，结合目前Safari的糟糕表现，我也只能略带惋惜地评价一句“活该”……</p><p>&nbsp;</p><p></p><h5>原文链接：</h5><p></p><p><a href=\"https://www.construct.net/en/blogs/ashleys-blog-2/safari-releases-development-1616\">https://www.construct.net/en/blogs/ashleys-blog-2/safari-releases-development-1616</a>\"</p><p></p><p></p><h5>相关阅读：</h5><p></p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzI3NzE0NjcwMg==&amp;mid=2650172901&amp;idx=2&amp;sn=fa7cb8505313022829104685aa6b1d22&amp;chksm=f36870c4c41ff9d2c93f3b7ead8d4457c005377dd4f45d77d3ad66021360ca4d20016a55717a&amp;scene=27#wechat_redirect\">Chrome、Edge 合力\"围剿\"，Safari 夹缝求生？</a>\"</p><p><a href=\"https://www.infoq.cn/article/x30xfzH6lPtYKkY6olvX\">为什么&nbsp;Safari&nbsp;浏览器这么不受 Web 开发者待见？</a>\"</p><p><a href=\"https://xie.infoq.cn/article/7fdedb1b91016b46fb015ff1a\">好用的油猴&nbsp;Safari&nbsp;浏览器插件：Tampermonkey 中文版</a>\"</p><p><a href=\"https://www.infoq.cn/article/TdS104Q68yk3oLONlk9x\">苹果：你甚至可以在&nbsp;Safari&nbsp;中使用 Chrome 的插件</a>\"</p>",
    "publish_time": "2023-04-24 10:08:39",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]