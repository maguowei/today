[
  {
    "title": "甲骨文新微服务框架Helidon Níma：使用虚拟线程实现高性能",
    "url": "https://www.infoq.cn/article/3IgHpkRJIsFXm0vPNvFc",
    "summary": "<p>在<a href=\"https://helidon.io/\">Helidon伞项目下</a>\"，甲骨文<a href=\"https://medium.com/helidon/please-welcome-helidon-n%C3%ADma-9a882c5b6f1e\">推出</a>\"了基于虚拟线程（<a href=\"https://openjdk.org/jeps/425\">JEP 425</a>\"）的新微服务框架Helidon Níma。它是完全从头构建的，以实现易于使用的编程模型，并具有出色的性能。该技术的预览版已经伴随Helidon 4.0.0-ALPHA1版本发布，对最新Java技术感兴趣人可以对此进行评估。但是，它尚未达到生产环境就绪状态。</p><p></p><p>开发人员可以通过<a href=\"https://helidon.io/docs/v3/#/mp/introduction\">Helidon MP</a>\"或<a href=\"https://helidon.io/docs/v3/#/se/introduction\">Helidon SE</a>\"使用常规的Helidon框架达到一定的吞吐量，但是如果应用需要更高的性能，他们唯一能做的就是采用基于反应式的服务。但值得一提的是，编写、维护和调试基于反应式的服务更具挑战性。</p><p></p><p>Helidon Níma使用虚拟线程来解决这个问题，因为基于虚拟线程，阻塞的成本是很低的，所以我们可以创建数以百万计的虚拟线程。因此，这提供了一个恒定的、低开销的、高并发的服务器，同时能够保持阻塞式的线程模型。开发人员通过最小的支撑功能就可以编写简单、可调试和易维护的代码。请考虑如下的样例：</p><p></p><p></p><p>阻塞式代码和反应式代码都能完成相同的目标，但是，反应式代码对认知的要求更高，学习曲线更陡峭，并且难以维护。正如甲骨文的架构师<a href=\"https://www.linkedin.com/in/langertomas/?originalSubdomain=cz\">Tomas Langer</a>\"在最初的<a href=\"https://medium.com/helidon/helidon-n%C3%ADma-helidon-on-virtual-threads-130bb2ea2088\">博客文章</a>\"中所说的那样，在较为复杂的用例中，这一点会更明显。</p><p></p><p>按照Langer的说法，Heldion Níma主要的关注点是性能，它也的确产生了一定的效果，如下图所示。</p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/news/2022/09/introducing-helidon-nima/en/resources/1graph-1663271505131.png\" /></p><p></p><p>这个Alpha版本支持如下的协议：</p><p>支持pipelining的<a href=\"https://www.rfc-editor.org/rfc/rfc2616\">HTTP/1.1</a>\"：客户端和服务器端。<a href=\"https://www.rfc-editor.org/rfc/rfc7540\">HTTP/2</a>\"服务器端（原型状态，包含已知的问题）<a href=\"https://grpc.io/\">gRPC</a>\"服务器端（原型状态，包含已知的问题）<a href=\"https://www.rfc-editor.org/rfc/rfc6455\">WebSocket</a>\"服务器端（原型状态）</p><p></p><p>除此之外，它还支持如下的特性：</p><p>跟踪：使用现有的Helidon跟踪实现，比如<a href=\"https://www.jaegertracing.io/\">Jaeger</a>\"或<a href=\"https://zipkin.io/\">Zipkin</a>\"静态内容：来自类路径或文件系统跨域资源共享（CORS）访问日志可观测性端点（健康状态、应用信息、配置）容错（舱壁、断路器、重试和超时特性）HTTP/1.1客户端测试</p><p></p><p>在这些特性之上，它还使用了新的Java语言特性，如<a href=\"https://openjdk.org/jeps/409\">密封类（sealed classes）</a>\"和增强的<a href=\"https://openjdk.org/jeps/325\">switch表达式</a>\"。</p><p></p><p>Helidon Níma是一个完全开源的框架，是Helidon代码库的一部分。尽管Helidon项目是基于<a href=\"https://netty.io/\">Netty</a>\"的，但是甲骨文公司的软件开发人员<a href=\"https://www.linkedin.com/in/dalexandrov/\">Dmitry Aleksandrov</a>\"在他的<a href=\"https://medium.com/helidon/please-welcome-helidon-n%C3%ADma-9a882c5b6f1e\">博客文章</a>\"中提到：</p><p></p><p></p><blockquote>Helidon Níma网络服务器计划在Helidon生态系统中取代Netty。它也可以被其他框架以嵌入式Web服务器组件的形式使用。</blockquote><p></p><p></p><p>希望评估Helidion Níma的开发人员可以参阅Tomas Langer的初始<a href=\"https://medium.com/helidon/helidon-n%C3%ADma-helidon-on-virtual-threads-130bb2ea2088\">博客文章</a>\"和托管在<a href=\"https://github.com/oracle/helidon/tree/main/N%C3%ADma\">GitHub</a>\"仓库的源代码。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/09/introducing-helidon-nima/\">Introducing Helidon Níma Using Virtual Threads to Achieve Simplicity and High Performance</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/0AXykmqvf5lHZsEQtjBp\">JDK 19 最新动态和 JDK 20 新特性预测</a>\"</p>",
    "publish_time": "2022-09-25 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]