[
  {
    "title": "Java近期新闻：Spring Cloud 2022.0.0、SourceBuddy、Jarviz和Just",
    "url": "https://www.infoq.cn/article/wAHZc2d8AYKScTgeM3Av",
    "summary": "<p></p><h4>OpenJDK</h4><p></p><p>甲骨文的技术顾问成员<a href=\"https://www.linkedin.com/in/ioi-lam-3b07731/\">Ioi Lam</a>\"提出了一个<a href=\"https://mail.openjdk.org/pipermail/hotspot-gc-dev/2022-December/040862.html\">倡议</a>\"，改善在类数据共享（CDS）中对归档Java堆对象的支持，因为Leyden极有可能会大量使用归档Java堆对象。</p><p></p><p>鉴于在G1、SerialGC和ParallelGC垃圾收集算法中，存在与CDS相关的一些已定义限制，本提案的目标在于，所有的收集器统一支持CDS，并尽量最小化每个收集器支持CDS所需的代码。</p><p></p><p>与该提案相关的最近提交或后续会更新的提案包括：</p><p></p><p>JDK-8296344：<a href=\"https://bugs.openjdk.org/browse/JDK-8296344\">移除写入CDS归档堆时对G1的依赖性</a>\"JDK-8298048：<a href=\"https://bugs.openjdk.org/browse/JDK-8298048\">将CDS归档堆合并为单个块</a>\"JDK-8296263：<a href=\"https://bugs.openjdk.org/browse/JDK-8296263\">为使用归档堆的区域实现统一的API</a>\"</p><p></p><p>InfoQ将会持续关注该提案的进展。</p><p></p><h4>JDK 20</h4><p></p><p>JDK 20<a href=\"https://jdk.java.net/20/\">早期访问构建</a>\"版本的<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-20%2B29\">Build 29</a>\"发布，它是对Build 28的<a href=\"https://github.com/openjdk/jdk20/compare/jdk-20%2B28...jdk-20%2B29\">更新</a>\"，包括对各种<a href=\"https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2020%20and%20%22resolved%20in%20build%22%20%3D%20b29%20order%20by%20component%2C%20subcomponent\">问题</a>\"的修复。关于该版本的更多细节，可以参见<a href=\"https://jdk.java.net/20/release-notes\">发布说明</a>\"。</p><p></p><h4>JDK 21</h4><p></p><p>JDK 21<a href=\"https://jdk.java.net/21/\">早期访问构建</a>\"版本的<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-21%2B3\">Build 3</a>\"发布，它是对Build 2的<a href=\"https://github.com/openjdk/jdk/compare/jdk-21%2B2...jdk-21%2B3\">更新</a>\"，包括对各种<a href=\"https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2021%20and%20%22resolved%20in%20build%22%20%3D%20b03%20order%20by%20component%2C%20subcomponent\">问题</a>\"的修复。</p><p></p><p>对于<a href=\"https://openjdk.java.net/projects/jdk/20/\">JDK 20</a>\"和<a href=\"https://openjdk.java.net/projects/jdk/21/\">JDK 21</a>\"，鼓励开发人员通过<a href=\"https://bugreport.java.com/bugreport/\">Java Bug数据库</a>\"报告缺陷。</p><p></p><h4>Spring框架</h4><p></p><p><a href=\"https://spring.io/projects/spring-cloud\">Spring Cloud</a>\" 2022.0.0<a href=\"https://spring.io/blog/2022/12/16/spring-cloud-2022-0-0-codename-kilburn-has-been-released\">发布</a>\"，代号为Kilburn，为Spring Cloud的众多子项目交付了GA更新，比如Spring Cloud OpenFeign 4.0.0、Spring Cloud Commons 4.0.0、Spring Cloud Function 4.0.0和Spring Cloud Starter Build 2022.0.0。但是，一些子项目的移除，也带来了破坏性的变更，比如Spring Cloud CLI、Spring Cloud for Cloud Foundry和Spring Cloud Sleuth。Spring Cloud 2022.0.0基于Spring Framework 6.x和Spring Boot 3.x构建，兼容Jakarta EE，并需要Java 17作为基线版本。关于这个版本的更多细节可以在<a href=\"https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2022.0-Release-Notes\">发布说明</a>\"中找到，InfoQ将在后续发布更详细的新闻报道。</p><p></p><p><a href=\"https://spring.io/projects/spring-security\">Spring Security</a>\"的6.0.1、5.8.1、5.7.6和5.6.10版本<a href=\"https://spring.io/blog/2022/12/19/spring-security-6-0-1-5-8-1-5-7-6-and-5-6-10-available-now\">发布</a>\"，其中包含缺陷修正和文档改善。在以上的四个版本中，GitHub Actions中定义的<a href=\"https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/\">已废弃的set-state和set-output命令</a>\"均已被替换，应该使用推荐的**$GITHUB_STATE和$GITHUB_OUTPUT**环境文件。关于这些版本的更多细节，可以在<a href=\"https://github.com/spring-projects/spring-security/releases/tag/6.0.1\">6.0.1</a>\"、<a href=\"https://github.com/spring-projects/spring-security/releases/tag/5.8.1\">5.8.1</a>\"、<a href=\"https://github.com/spring-projects/spring-security/releases/tag/5.7.6\">5.7.6</a>\"和<a href=\"https://github.com/spring-projects/spring-security/releases/tag/5.6.10\">5.6.10</a>\"的发布说明中找到。</p><p></p><p><a href=\"https://spring.io/projects/spring-boot\">Spring Boot</a>\" 3.0.1<a href=\"https://spring.io/blog/2022/12/22/spring-boot-3-0-1-available-now\">发布</a>\"，其中包含54个缺陷修复、文档改进和依赖性升级，如Spring Security 6.0.1、Spring Integration 6.0.1、Reactor 2022.0.1、Tomcat 10.1.4和Jetty 11.0.13。关于这个版本的更多细节可以在<a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v3.0.1\">发布说明</a>\"中找到。</p><p></p><p>Spring Boot 2.7.7也已<a href=\"https://spring.io/blog/2022/12/22/spring-boot-2-7-7-available-now\">发布</a>\"，其中包括24个缺陷修复、文档改进和依赖性升级，如Spring Security 5.7.6、Spring Integration 5.5.16、Reactor 2020.0.26、Tomcat 9.0.70和Jetty 9.4.50.v20221201。关于这个版本的更多细节可以在<a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.7.7\">发布说明</a>\"中找到。</p><p></p><p><a href=\"https://spring.io/projects/spring-graphql\">Spring for GraphQL</a>\" 1.1.1的<a href=\"https://spring.io/blog/2022/12/20/spring-for-graphql-1-1-1-released\">发布</a>\"带来了一些新特性，比如，新的构建器定制器，通过允许资源库实现定制器接口来定制<a href=\"https://docs.spring.io/spring-graphql/docs/current/api/org/springframework/graphql/data/query/QuerydslDataFetcher.html\">QuerydslDataFetcher</a>\"和<a href=\"https://docs.spring.io/spring-graphql/docs/current/api/org/springframework/graphql/data/query/QueryByExampleDataFetcher.html\">QueryByExampleDataFetcher</a>\"资源库类；放宽**@Argument Map**中的通用类型检查，因为人们认为这太严格了。此外，还有一些依赖性的升级，如Micrometer 1.10.2、Reactor 2022.0.1、Spring Framework 6.0.3和Spring Security 6.0.1。关于这个版本的更多细节可以在<a href=\"https://github.com/spring-projects/spring-graphql/releases/tag/v1.1.1\">发布说明</a>\"中找到。</p><p></p><p><a href=\"https://spring.io/projects/spring-modulith\">Spring Modulith</a>\" 0.2<a href=\"https://spring.io/blog/2022/12/23/spring-modulith-0-2-released\">发布</a>\"，它提供了如下特性：新的<a href=\"https://github.com/spring-projects-experimental/spring-modulith/blob/main/spring-modulith-api/src/main/java/org/springframework/modulith/ApplicationModuleListener.java\">@ApplicationModuleListener</a>\"注解，以简化在事务中运行的异步、事务性事件监听器的声明；应用模块的依赖结构现在可以作为Spring Boot actuator发布；Postgres事件发布注册表的模式遵循了Postgres的最佳实践。关于这个版本的更多细节可以在<a href=\"https://github.com/spring-projects-experimental/spring-modulith/releases/tag/0.2.0\">发布说明</a>\"中找到。</p><p></p><h4>Open Liberty</h4><p></p><p>IBM<a href=\"https://openliberty.io/blog/2022/12/20/22.0.0.13.html\">发布</a>\"了Open Liberty 22.0.0.13，其特性包括：能够配置其首次故障数据捕获（First Failure Data Capture，FFDC）应用数据收集系统的最大存在时长；修复了<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-3509\">CVE-2022-3509</a>\"和<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-3171\">CVE-2022-3171</a>\"，它们分别对应文本数据和二进制数据的解析，在<a href=\"https://developers.google.com/protocol-buffers/docs/javatutorial\">Protocol Buffers</a>\" Java核心和3.21.7、3.20.3、3.19.6和3.16.3之前的lite版本中可能会导致拒绝服务攻击。</p><p></p><h4>Quarkus</h4><p></p><p>Red Hat<a href=\"https://quarkus.io/blog/quarkus-2-15-1-final-released/\">发布了</a>\"Quarkus 2.15.1.Final，其中包括缺陷修复、文档改进以及依赖性升级，包括Vert.x 4.3.6、Infinispan 14.0.3.Final、<a href=\"https://dekorate.io/\">Dekorate</a>\" 3.1.3和**mongo-client.version** 4.8.1。关于这个版本的更多细节可以在<a href=\"https://github.com/quarkusio/quarkus/releases/tag/2.15.1.Final\">更新日志</a>\"中找到。</p><p></p><h4>Micronaut</h4><p></p><p>Micronaut基金会<a href=\"https://micronaut.io/2022/12/20/micronaut-framework-3-7-5-released/\">发布</a>\"了Micronaut 3.7.5，该版本包含缺陷修复和功能改善，比如，Health状态的输出从“Health monitor failed check with status {}”改成了“Health monitor check with status {}”，因为Health状态只会报告**UP或DOWN**；<a href=\"https://docs.micronaut.io/3.7.5/api/io/micronaut/http/server/codec/TextStreamCodec.html\">TextStreamCodec</a>\"类的实例现在需要一个<a href=\"https://docs.micronaut.io/3.7.5/api/io/micronaut/core/io/buffer/ByteBufferFactory.html\">ByteBufferFactory</a>\"类型的bean，以修复一个加载相关的问题。关于这个版本的更多细节可以在<a href=\"https://github.com/micronaut-projects/micronaut-core/releases/tag/v3.7.5\">发布说明</a>\"中找到。</p><p></p><h4>Helidon</h4><p></p><p>甲骨文<a href=\"https://github.com/helidon-io/helidon/releases/tag/3.1.0\">发布</a>\"了Helidon 3.1.0，其特性包括：在<a href=\"https://helidon.io/docs/v3/apidocs/io.helidon.faulttolerance/io/helidon/faulttolerance/Retry.html\">Retry</a>\"接口中定义了新的<a href=\"https://helidon.io/docs/v3/apidocs/io.helidon.faulttolerance/io/helidon/faulttolerance/Retry.ExponentialRetryPolicy.html\">Exponential</a>\"和<a href=\"https://helidon.io/docs/v3/apidocs/io.helidon.faulttolerance/io/helidon/faulttolerance/Retry.FibonacciRetryPolicy.html\">Fibonacci</a>\"策略；通过新的<a href=\"https://helidon.io/docs/v3/apidocs/io.helidon.config.mp/io/helidon/config/mp/spi/MpConfigSourceProvider.html\">MPConfigSourceProvider</a>\"接口支持<a href=\"https://microprofile.io/microprofile-config/\">MicroProfile Config</a>\"规范；<a href=\"https://helidon.io/docs/v3/apidocs/io.helidon.security.providers.oidc.common/io/helidon/security/providers/oidc/common/OidcConfig.html\">OidcConfig</a>\"类中新的**relativeUris**属性，允许OIDC web客户端在请求URI上使用相对路径；依赖性升级，如GralVM 22.3.0、Netty 4.1.86.Final和PostgreSQL JDBC driver 42.4.3。</p><p></p><h4>Hibernate</h4><p></p><p><a href=\"https://hibernate.org/orm/\">Hibernate ORM</a>\" 6.2的<a href=\"https://in.relation.to/2022/12/22/orm-62-cr1/\">第一个发布候选版本</a>\"发布，新特性包括：对Java record、映射composite/struct类型和Jakarta Persistence 3.1规范的支持；对MariaDB 10.7和SQL Server 2008的UUID支持；允许<a href=\"https://docs.jboss.org/hibernate/orm/6.2/javadocs/org/hibernate/annotations/SQLInsert.html\">@SqlInsert</a>\"、<a href=\"https://docs.jboss.org/hibernate/orm/6.2/javadocs/org/hibernate/annotations/SQLUpdate.html\">@SqlUpdate</a>\"、<a href=\"https://docs.jboss.org/hibernate/orm/6.2/javadocs/org/hibernate/annotations/SQLDelete.html\">@SqlDelete</a>\"注解引用<a href=\"https://docs.jboss.org/hibernate/orm/6.2/javadocs/org/hibernate/jpamodelgen/xml/jaxb/SecondaryTable.html\">SecondaryTable</a>\"类；以及一个新的<a href=\"https://docs.jboss.org/hibernate/orm/6.2/javadocs/org/hibernate/annotations/PartitionKey.html\">@PartitionKey</a>\"注解来识别实体中持有的表分区键的字段。</p><p></p><h4>Eclipse Vert.x</h4><p></p><p>为了回应在4.3.6版本中报告的一些缺陷，Eclipse Vert.x 4.3.7<a href=\"https://vertx.io/blog/eclipse-vert-x-4-3-7/\">发布</a>\"，其特性包括，依赖升级到Netty 4.1.86，以解决CVE-2022-41881（<a href=\"https://github.com/netty/netty/security/advisories/GHSA-fx2c-96vj-985v\">HAProxyMessageDecoder Stack Exhaustion DoS</a>\"）和CVE-2022-41915（<a href=\"https://github.com/netty/netty/security/advisories/GHSA-hh82-3pmq-7frp\">HTTP Response Splitting from Assigning Header Value Iterator</a>\"）。关于这个版本的更多细节，可以在<a href=\"https://github.com/vert-x3/wiki/wiki/4.3.7-Release-Notes\">发布说明</a>\"中找到。</p><p></p><h4>Apache软件基金会</h4><p></p><p>Apache Groovy 3.0.14的<a href=\"https://www.mail-archive.com/announce@apache.org/msg07832.html\">维护版本发布</a>\"，包含错误修复、依赖性升级和两项改进：当用map实现接口时，静态类型检查器不识别闭包输入参数；<a href=\"https://docs.groovy-lang.org/latest/html/api/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.html\">StaticTypeCheckingSupport</a>\"类中定义的**evaluateExpression()**方法现在可以为简单表达式提供轻量级的评估计算。关于这个版本的更多细节可以在<a href=\"https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12318123&amp;version=12352311\">发布说明</a>\"中找到。</p><p></p><p>Apache Groovy 2.5.20也是一个<a href=\"https://www.mail-archive.com/announce@apache.org/msg07833.html\">维护版本</a>\"，它包含缺陷修复、依赖性升级以及与3.0.14版本相同的类型检查器改进。关于这个版本的进一步细节可以在<a href=\"https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12318123&amp;version=12352406\">发布说明</a>\"中找到。</p><p></p><p>Apache Camel 3.20.0版本<a href=\"https://camel.apache.org/blog/2022/12/RELEASE-3.20.0/\">发布</a>\"，该版本提供了200多个缺陷修复、改进、依赖性升级和新功能，比如：为位置文件路径参数提供补全（camel-jbang组件）；增加了对Event Resources的支持（camel-kubernetes组件）；为路由模型提供prefixId，使路由的生成ID具有前缀（**camel-core组件）；新的camel-etcd**组件。关于这个版本的更多细节可以在<a href=\"https://camel.apache.org/releases/release-3.20.0/\">发布说明</a>\"中找到。</p><p></p><h4>MicroStream</h4><p></p><p>MicroStream<a href=\"https://microstream.one/blog/article/microstream-is-now-an-eclipse-foundation-member/\">宣布</a>\"，该项目已经加入Eclipse基金会，成为其成员。由于MicroStream已经与Helidon和Micronaut集成，他们的目标是与Eclipse社区紧密合作，并积极为Eclipse项目做出贡献。InfoQ将在后续推出更详细的新闻报道。</p><p></p><h4>Kotlin</h4><p></p><p>Kotlin 1.8.0的<a href=\"https://github.com/JetBrains/kotlin/releases/tag/v1.8.0-RC2\">第二个发布候选版本</a>\"提供了一些功能修复，比如：如果委托某个Java类读取一个类，该类<a href=\"https://github.com/Kotlin/KEEP/blob/c72601cf35c1e95a541bb4b230edb474a6d1d1a8/proposals/definitely-non-nullable-types.md\">明确非空</a>\"，但使用了灵活的泛型上限的话，会抛出**IllegalStateException异常；<a href=\"https://kotlinlang.org/api/kotlinx.serialization/kotlinx-serialization-core/kotlinx.serialization/-use-serializers/\">UseSerializers</a>\"类的一个参数没有实现<a href=\"https://kotlinlang.org/api/kotlinx.serialization/kotlinx-serialization-core/kotlinx.serialization/-k-serializer/\">KSerializer</a>\"接口的实例或没有为具体类型提供序列化器；在JVM IR后端没有对符号VALUE_PARAMETER SCRIPT_IMPLICIT_RECEIVER**的映射。</p><p></p><h4>SourceBuddy</h4><p></p><p><a href=\"https://github.com/sourcebuddy/sourcebuddy/blob/main/README.adoc\">SourceBuddy</a>\"是一个新的工具，可以编译在Java应用中动态创建的Java源码，在过去的一周里，EPAM Systems的架构师<a href=\"https://www.linkedin.com/in/peterverhas/\">Peter Verhas</a>\"引入了这个工具，并且迅速发布了<a href=\"https://github.com/sourcebuddy/sourcebuddy/releases/tag/2.0.0\">2.0版本</a>\"，其特性包括：对类的加载结构进行了重大调整；隐藏类和非隐藏类现在可以混合使用；删除**loadHidden()方法，改用hidden()**方法对每个添加的源进行单独处理。由于后一个特性是一个破坏性的变化，因此有必要在短时间内提供一个主版本。InfoQ将在后续提供更详细的新闻报道。</p><p></p><h4>Jarviz</h4><p></p><p><a href=\"https://github.com/kordamp/jarviz/blob/main/README.adoc\">Jarviz</a>\"是一个新的JAR文件分析工具，由<a href=\"https://www.linkedin.com/in/aalmiray/\">Andres Almiray</a>\"提供<a href=\"https://andresalmiray.com/jarviz-0-1-0-has-been-released/\">给</a>\"Java社区。0.1.0版本发布，其特性包括：支持使用GAV解析JAR；简化清单命令；在调用基于URL的处理器之前解析输出目录。关于这个版本的更多细节可以在<a href=\"https://github.com/kordamp/jarviz/releases/tag/v0.1.0\">发布说明</a>\"中找到，InfoQ后续会提供更详细的报道。</p><p></p><h4>Just</h4><p></p><p><a href=\"https://just.maciejwalkowiak.com/\">Just</a>\"是一个用于开发Spring Boot应用的命令行工具包，由作为自由职业者的架构师兼开发者<a href=\"https://www.linkedin.com/in/maciejwalkowiak/\">Maciej Walkowiak</a>\"发布。<a href=\"https://github.com/maciejwalkowiak/just/releases/tag/0.12.0\">0.12.0版本</a>\"的特性包括：对<a href=\"https://just.maciejwalkowiak.com/docs/usage/just-kill/\">just kill</a>\"命令进行了重大改进，当它得知有Docker容器在选定的端口上运行时，会停止/杀死正在运行的Docker容器，而不是杀死Docker进程；为<a href=\"https://just.maciejwalkowiak.com/docs/usage/just-build/\">just build</a>\"命令新增了两个配置属性，即**just.build.extra-args和just.build.maven.profiles，以简化构建配置；如果框架自动检测失败，可以将just.framework的值设置给just.framework**属性。InfoQ将在后续推出更详细的新闻报道。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/12/java-news-roundup-dec19-2022/\">Java News Roundup: Spring Cloud 2022.0.0, Introducing SourceBuddy, Jarviz and Just</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/vrFf9KauwxZ4bqWr454P\">Java 近期新闻：Ideal Graph Visualizer 开源、TomEE MicroProfile 5.0 认证</a>\"</p><p><a href=\"https://www.infoq.cn/article/5GyCp1rm0IyPIfRoDyjQ\">Spring Batch 5.0 发布，使用 JDK 17 作为基线版本并支持原生 Java</a>\"</p>",
    "publish_time": "2023-01-29 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Cloud IDE 是不是一个伪命题",
    "url": "https://www.infoq.cn/article/DtKGOP7ilVoNTssfPwrC",
    "summary": "<p></p><p></p><blockquote>编者按：去年 11 月初，GitPod 在 A 轮融资中获得 2500 万美元，以兑现 Cloud Development Environments 的承诺。一周后，GitHub 宣布 CodeSpaces 将面向所有 GitHub 用户开放，每周免费使用 60 小时。这让人感觉好像我们突然就发展到了“云端开发元年”。代码编辑器几乎是每个开发人员每天都在使用的工具，不少人老早就认为开发环境最终会迁移到云端，这种创新理应在软件行业中迅速推进，但这个演变过程实际上持续了很多年，也比我们想象中的难很多。国内 CODING 创始人张海龙在这个领域探索了八年，看过各式各样的产品，对 IDE 技术发展有着深刻的认识，通过这篇文章，他为我们讲述了 Cloud IDE 在发展中的迷茫与希望。</blockquote><p></p><p></p><p>最开始做 CODING 的时候，我们想了一个 Slogan，“Coding Anytime Anywhere”。这确实是一个很美好的想象，程序员畅想在浏览器中完成所有开发工作的场景都会激动。要实现这个梦想得有一个必不可少的工具那就是 WebIDE。我们从 2014 年底开始做 WebIDE，当时的想象到现在其实也不过时。</p><p></p><p></p><h2>从 WebIDE 到 Cloud IDE</h2><p></p><p></p><p>当时做的最好的 WebIDE 叫做 Cloud 9，成立于 2010 年。我们当时做的也有部分借鉴了 Cloud 9。可惜的是，Cloud 9 在 2016 年卖给了亚马逊。当时有些不解，但我现在完全理解了。在探索了这么多年以后，Cloud 9 的团队应该是看清楚了 IDE 这个品种的下一代，应该不仅仅是搬到浏览器里那么简单，但究竟是啥，没想好。</p><p></p><p>另外一家叫做 Koding，同样成立于旧金山，不过比 Cloud 9 晚了两年，成立于 2012 年。因为名字的原因，我们一度把 Koding 当成了竞品，虽然业务上完全没关系。Koding 在探索了几年 WebIDE 的方向以后，彻底转型了。你现在去他们官网，你甚至会发现他们已经从 WebIDE 开发者变成了 WebIDE 的反对者。能写出这样的文案，那得是受了多大的伤害！</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/b6/b64c403a0b76682882578ef0aa358aa5\" /></p><p></p><p>不管 WebIDE 成没成，但云计算在过去的五六年获得了长足的进步，彻底渗透了各个行业。而 Web 形态的 IDE 似乎跟云有着天然的整合优势，于是 Cloud IDE 这个名词渐渐的替代了 WebIDE/Online IDE。</p><p></p><p></p><h2>穿越周期的 IDE</h2><p></p><p></p><p>纵观软件架构的发展历史，从 C/C++，Delphi，到 Java，JavaScript，从单体到 CS 到 BS 到现在的微服务，每一个时代都有一个相对垄断的软件架构，现如今这个垄断者就是 K8S。一般来说，新的技术架构会带来很多新的机会。就在软件这个领域来说，安全就是典型的随着每一次软件架构的变化产生新机会的领域。现在提倡的容器安全，DevSecOps 等等以前都是不存在的概念。但我们发现虽然软件架构的迭代日新月异，编程世界的语言框架百花齐放，但开发者用的编程工具似乎没有太多变化甚至在收敛的。就拿 Java 来说，曾经还有 JBuilder，NetBeans，而现在几乎是 IntelliJ IDEA 一家独大，Eclipse 也在萎缩。云原生来了，微服务来了，我们似乎还是在用那些工具写代码。目前全球范围内编码工具的主要供应商只有两个，微软的 VS 系列以及 JetBrains 的 IntelliJ 系列。微软开源了 VS Code，大量的 Cloud IDE 产品都是基于开源 VS Code 的魔改。有意思的是，这两家似乎对于 Cloud IDE 这个概念一直都是不感冒，迟迟没有动手，似乎就是在岸上看着你们这帮创业者的表演，一脸困惑。（以免误会，特别说明一下这两家最近是有 Web 形态 IDE 推出的，但不是重点。）</p><p></p><p>写到这里我突然想起了汽车行业。电气化架构来了，冒出来很多很多新的汽车品牌，但是很神奇的是你发现，造车新势力的头牌蔚来，竟然是江淮代工的。从这个角度来看，电动车行业确实可以分为特斯拉和其他。</p><p></p><p></p><h2>场景在哪里</h2><p></p><p></p><p>为什么这两家编程工具巨头都不搞 Cloud IDE 呢？这个问题困扰了我很久。冲动的创业者往往追求的是炫酷，而成熟的企业家追求的是实用。软件工程领域三大问题：开发效率，开发质量，可维护性。任何一个工具的成功必须解决这里的一个或者多个问题。在我们 2015 年对于 WebIDE 的想象视频中，定义了一些场景，例如临时修 Bug，新入职的开发 On board 等等，其实都是很小的 corner case，这些场景占据整个开发场景的时间不到 1%。在这个 1% 里面解决问题能有多大价值呢？</p><p></p><p>后来我们又尝试了很多场景，例如教育，培训，招聘。这些场景看起来都很性感，但真正深入其中你才发现 IDE 在垂直场景里其实是小问题。例如招聘，提供一个在线 IDE 让面试者现场编写代码看起来是一个很酷的应用，面试官可以可以跟面试者对着代码交流互动，实际上这个场景的绝大部分问题都可以通过腾讯会议解决，而真正作为生产力工具的 IDE 的核心能力，例如快速创建工程，代码提示，调试等等能力在这个场景下毫无作用。面试这个场景真正的痛点是简历来源，简历质量，以及考察的问题跟岗位的匹配度等等，所以你看很多做面试的到最后都去做题库，或者去做了猎头。</p><p></p><p>Cloud IDE 很炫酷，很吸引人，从我们的新增用户就可以看出来。我们的 Cloud IDE 上线这么多年不需要推广都会不断的有新增，但是没有留存。几十万的注册用户，日活几百。这个问题已经很明显了：用户来了，但是由于产品不解决实际问题，看看就又走了。软件工程三大问题，Cloud IDE 一个都没解决。</p><p></p><p>有一个产品叫做 Replit，同样来自旧金山的公司，最近引起了人们的关注。从编写轻量级的片段式代码起家，Replit 已经吸引了超过 1000 万的用户。Replit 说它是个 IDE，但作为一个专业开发者，你打开 Replit 的界面，你会感觉这个 IDE 简陋到惨不忍睹，要啥没啥。但为啥 Replit 能成功呢？因为它一开始就不是给专业开发者设计的产品。一个用 IntelliJ IDEA 的开发者是不可能转投 Replit 的怀抱的。但是作为编程新手，Replit 给他很好的编码体验，啥都不用管，上来就可以写代码，并且支持几乎所有语言。有点像美图秀秀和 Photoshop 的关系。你去看 Replit 的宣传，它一直在强调“Learn”这个关键词，这就是定位。在这个轻量级片段式代码的场景下，它很好的解决了开发效率问题。Replit 去年就 1000 万用户了，今年肯定更多。但是全球才多少开发者？美国加欧洲加起来估计勉强 1000 万。说 Replit 的市占率是 100% 肯定是不对的，你会发现你身边几乎没人用这个产品。Replit 的定位就不是专业开发者，它这个 1000 万用户可以说都是不会写代码的人，或者说不是以写代码为生的人。它没有去抢微软和 JetBrains 的蛋糕，重新画了一块蛋糕。然而 Replit 的编码能力进化很快，将来会是什么格局，让我们拭目以待。</p><p></p><p></p><h2>PDA 的故事</h2><p></p><p></p><p>在思考 Cloud IDE 尴尬处境的时候，我想到了 PDA，这个产品的历史角色似乎跟 Cloud IDE 有点像。最早 Apple 提出了 PDA（Personal Digital Assistant） 的概念，核心目标是要把电脑揣进口袋。Apple 推出的产品叫做 Newton。后来还有各种各样的公司推出了 PDA 产品，包括大名鼎鼎的黑莓。从操作系统的角度来看，各大公司也为 PDA 开发了各种各样的操作系统，包括 Newton OS，Palm OS，Symbian OS，Windows Mobile。但无一例外所有硬件和软件最后都败给了 iPhone。事实证明 iPhone 才是那个真正的下一代手机，真正的 PDA。而 Newton，黑莓等等就是过渡产品。其实各个领域都会在特定的历史时期出现这种类似于“油电混动”的产品。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/7b/7bad368941d32f054de358aa3e009d43\" /></p><p></p><p>乔布斯回归 Apple 以后，果断的砍掉了 Newton 产品线。乔布斯砍掉它的原因并不是不 buyin 它的愿景，而是无法理解它的形态，正如他讨厌手写笔的描述：“God gave us ten styluses,” he would say, waving his fingers. “Let’s not invent another.”。当时的苹果摇摇欲坠，砍掉这个产品线解放了很多优秀的工程师，最终找到了正确的方向 iPhone。</p><p></p><p>PDA 的失败并不是产品定位问题，而是产品实现的时候杂糅了太多过去的产品遗产，使得这个新产品并不能在想象的场景中带来颠覆性的体验。“把电脑揣进口袋里”，这个目标是好的，但也具有一定的误导性。这个新设备的操作体验是不是真的有必要是一台电脑？Windows 那么成功，但是 Windows Mobile 却很失败。电脑拥有一个全键盘，所以黑莓也搞了一个，也是很失败。iPhone 抛弃了这一切，全新的硬件，全新的操作系统，重新定义了 PDA。iPhone 进化了 15 年了，但概念还是那个概念。取代 iPhone 的会是什么呢？延续现有产品思路的想法大概率都是不成的。</p><p></p><p></p><h2>云端开发</h2><p></p><p></p><p>软件工程的下一个大时代是什么？人工智能写代码吗？Copilot 很成功，但依然是辅助。人工智能写代码就跟全自动驾驶一样，我持保留意见。我更相信软件工程的下一步是云端开发，Cloud Development。我们一定需要一个 Cloud IDE，但目前 Cloud IDE 的问题跟 PDA 类似，杂糅了太多当前 IDE 的特征。我相信未来云端开发的 IDE 一定不是现在 IDE 的样子。微软收购 Github 以后做的一个跟云结合的大动作是 CodeSpace。你说 CodeSpace 算不算 Cloud IDE？Github 这么大的用户量，事实上 CodeSpace 的用量也就一般。而且 CodeSpace 还可以对接桌面版的 VS Code，也就是 Web 形态的 IDE 并不是核心。这里多说一句，只要还是人类在写代码，就需要编辑器。目前的编辑器技术都是国外团队做的，比如 Monaco，ACE，Code Mirror。我们去年找遍了没有在国内找到一个做编辑器的团队。但却看到很多拿着现成编辑器包装成 IDE 的团队，让我有一种舍本求末的感觉。</p><p></p><p>在这个领域探索了八年，看到各式各样的产品熙熙攘攘，来来往往，就像飘在空中的蒲公英，看着很近就是抓不着。Cloud IDE 的故事必将继续，新事物的产生必定有很多没有结果的探索，都值得尊重。与此同时，我们是不是可以对未来的编程场景想象的更大胆一点，或许它就不该长的像个 IDE。</p><p></p><p>作者简介：</p><p></p><p>张海龙，CODING 创始人，技术创业者 &amp; 连续创业者。复旦大学软件工程学士毕业，后就读 CMU（卡内基梅隆大学）计算机硕士。毕业后曾在 Oracle (甲骨文软件系统有限公司) 任职高级软件工程师。具有超 10 年的技术背景，对开发者社区的运营和生态圈有深刻的理解和实战经验。</p><p></p><p>今日好文推荐</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651155493&amp;idx=1&amp;sn=8f7af8534e1c04c2205e3cd30f4087e7&amp;chksm=bdb894768acf1d60378e4bf9ea2995a5575cb898703c009d7cc10d1d7e2e0e5626d3d18651af&amp;scene=21#wechat_redirect\">阿里辟谣海外建全球总部；科技巨头加速裁员，商学教授直呼企业管理层愚蠢；谷歌Fuchsia OS部门遭遇重大打击 ｜ Q资讯</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651155452&amp;idx=1&amp;sn=50920c9c1be9da21154f56f02e3a25eb&amp;chksm=bdb893af8acf1ab9ac86bcf7c96411528aff6bf99a569c412bef624e18a2bd488bebe62fb9e6&amp;scene=21#wechat_redirect\">副业搞得好、赚钱没烦恼：新春程序员寻找“副业”灵感指南</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651155431&amp;idx=1&amp;sn=d91d011f69cedd2ff2eb335261f16082&amp;chksm=bdb893b48acf1aa215ded898d1a8009c9a36d8380fcc39eecbbdf94cc1363336bf27b2c55758&amp;scene=21#wechat_redirect\">一个科技新时代开启，硅谷五巨头将何去何从</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651155428&amp;idx=1&amp;sn=589ba3d5db4c0ae1db2e913c7895ef31&amp;chksm=bdb893b78acf1aa1d65aaaad90c3e8fe2d795151b8c97b84196f735ed3f291bd437e26559faf&amp;scene=21#wechat_redirect\">修完又复活！史诗级Log4j漏洞爆发1年仍“阴魂不散”，下一场暴雷可能已在路上</a>\"</p><p></p><p>活动推荐</p><p></p><p>2023 年 2 月 5 日 -7 日，QCon 全球软件开发大会将落地北京，美团研发质量与效率部高级技术经理俞超老师将在【研发效能提升】分论坛分享《Cloud IDE 在美团从 0 到 1 落地实践》的精彩演讲。他将分享自己在探索与实现 Cloud IDE 在线编程平台中的实践成果与走过的弯路，与大家共同探讨，欢迎你来 QCon 北京现场打卡交流～点击<a href=\"https://qcon.infoq.cn/202302/beijing/schedule?utm_source=wechat&amp;utm_medium=infoq&amp;utm_campaign=full&amp;utm_term=0128&amp;utm_content=banner\">超链接查看日程</a>\"，目前 QCon 北京站团购享受更多优惠，感兴趣的同学可以联系票务经理：15600537994（电话同微信）。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/d8/d8b9e65926026fe5ebeb3d30957211b4.png\" /></p><p></p>",
    "publish_time": "2023-01-29 12:27:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]