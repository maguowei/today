[
  {
    "title": "Java 近期新闻：NetBeans 17、Spring 及 Tomcat 多项更新、JDk 20 版本 GraalVM",
    "url": "https://www.infoq.cn/article/UbJ7lV4OWYjY7UN4JGBD",
    "summary": "<p></p><h2>OpenJDK</h2><p></p><p></p><p>微软资深程序经理&nbsp;<a href=\"https://www.linkedin.com/in/gdams/\">George Adams</a>\"&nbsp;于上周<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2023-February/007379.html\">提出</a>\"&nbsp;JEP 草案 8303167：<a href=\"https://openjdk.org/jeps/8303167\">弃用 Windows x86-32 端口</a>\"。该功能 JEP 提议将 Windows x86-32 端口弃用，并在未来的版本发布中将其移除。<a href=\"https://openjdk.org/jeps/436\">虚拟线程（第二预览版）</a>\"无意在32位平台中实施 JEP 436，移除对该端口支持将加快 OpenJDK 开发人员对新功能的开发速度。</p><p></p><h2>JDK 20</h2><p></p><p></p><p>JDK 20 仍处于<a href=\"https://openjdk.java.net/jeps/3#rc\">候选发布版本</a>\"阶段，预计将于2023年3月21日进行 GA 发布。<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-20%2B36\">Build 36</a>\"&nbsp;仍基于当前 JDK 20的<a href=\"https://jdk.java.net/20/\">早期访问版本</a>\"构建。关于该版本更多细节请参见<a href=\"https://jdk.java.net/20/release-notes\">发布说明</a>\".</p><p></p><h2>JDK 21</h2><p></p><p></p><p>JDK 21&nbsp;<a href=\"https://jdk.java.net/21/\">早期访问版本</a>\"&nbsp;的&nbsp;<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-21%2B11\">Build 11</a>\"&nbsp;已于上周可用，提供对 Build 10 的<a href=\"https://github.com/openjdk/jdk/compare/jdk-21%2B10...jdk-21%2B11\">更新</a>\"及多项问题<a href=\"https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2021%20and%20%22resolved%20in%20build%22%20%3D%20b11%20order%20by%20component%2C%20subcomponent\">修复</a>\"。关于该版本更多细节请参见<a href=\"https://jdk.java.net/21/release-notes\">发布说明</a>\"。</p><p></p><p>关于&nbsp;<a href=\"https://openjdk.java.net/projects/jdk/20/\">JDK 20</a>\"&nbsp;和&nbsp;<a href=\"https://openjdk.java.net/projects/jdk/21/\">JDK 21</a>\"，欢迎开发者至&nbsp;<a href=\"https://bugreport.java.com/bugreport/\">Java 问题库</a>\"中反馈问题。</p><p></p><h2>GraalVM</h2><p></p><p></p><p>首个基于 JDK 20 的 GraalVM 开发者构建目前已对 Java 社区<a href=\"https://twitter.com/graalvm/status/1628031945522266112?cxt=HHwWgIC-vbib95ctAAAA\">开放使用</a>\"。关于更多细节请参见<a href=\"https://github.com/graalvm/graalvm-ce-dev-builds/releases/tag/23.0.0-dev-20230224_0257\">发布说明</a>\"，欢迎开发者们前往<a href=\"https://www.graalvm.org/docs/getting-started/\">新手指引</a>\"页面。</p><p></p><p>Oracle 创新实验室同样<a href=\"https://twitter.com/graalvm/status/1627982736173457408?cxt=HHwWgICzoYrr4JctAAAA\">宣布</a>\"即将发布的 GraalVM 23.0 版本将支持&nbsp;<a href=\"https://github.com/oracle/graal/issues/5050\">HotSpot 垃圾回收算法</a>\"，意图在 HotSpot 虚拟机中添加所需的&nbsp;<a href=\"https://wiki.openjdk.org/display/zgc/Main\">Z 垃圾回收</a>\"（ZGC）屏障及性能优化。</p><p></p><h2>Eclipse GlassFish</h2><p></p><p></p><p>GlassFish 7.0.2 现已<a href=\"https://github.com/eclipse-ee4j/glassfish/releases/tag/7.0.2\">发布</a>\"，提供对 Eclipse 项目的集成，包括：Jersey 3.1.1、Mojarra 4.0.1、Eclipselink 4.0.1-RC2、WaSP 3.2.0、Tyrus 2.1.3，及 Angus 2.0.1。其他优化项包括：修复程序代码请求 ClassLoader 下目录时导致的故障，对&nbsp;<a href=\"https://github.com/eclipse-ee4j/glassfish/blob/f8a179444fe52196997a02148206f5db769b59f2/nucleus/glassfish-jul-extension/src/test/java/org/glassfish/main/jul/GlassFishLogManagerLifeCycleTest.java\">GlassFishLogManagerLifeCycleTest</a>\"&nbsp;类提供稳定性；退出时显式移除临时目录；对&nbsp;glassfish-external-tck-pages-tags&nbsp;artifact 提供技术兼容套件（TCK）运行器。</p><p></p><h2>Spring 框架</h2><p></p><p></p><p>本周内 Spring 甚是忙碌，针对其下各类<a href=\"https://spring.io/projects\">项目</a>\"提供了多项点发布及里程碑发布。</p><p></p><p>Spring Boot 3.0.3 现已<a href=\"https://spring.io/blog/2023/02/23/spring-boot-3-0-3-available-now\">发布</a>\"，针对文档及依赖升级提供多项问题修复，包括：Spring Data 2022.0.2、Spring 安全 6.0.2、Spring Batch 5.0.1、Micrometer 1.10.4、Netty 4.1.89.Final、Hibernate 6.1.7.Final，以及 Glassfish JAXB 4.0.2。关于该版本更多细节请参见<a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v3.0.3\">发布说明</a>\"。</p><p></p><p>Spring Boot 2.7.9 版本的<a href=\"https://spring.io/blog/2023/02/23/spring-boot-2-7-9-available-now\">发布</a>\"同样提供针对文档及依赖升级提供多项问题修复，包括：Spring Data 2021.2.8、Spring Security 5.7.7、Spring Batch 4.3.8、Micrometer 1.9.8、Netty 4.1.89.Final、Hibernate 5.6.15.Final，以及 Glassfish JAXB 2.3.8。关于该版本更多细节请参见<a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.7.9\">发布说明</a>\"。</p><p></p><p>展望版本 3.1.0，Spring Boot 的<a href=\"https://spring.io/blog/2023/02/24/spring-boot-3-1-0-m1-available-now\">首个里程碑版本</a>\"现已发布。该版本中提供问题修复、优化文档、依赖升级，以及全新功能，包括：移除对Apache HttpClient 4 的依赖管理，后者现已迁移至 HttpClient 5；为Apache Tomcat 及 Jetty 添加最大 HTTP 响应头大小配置；支持 Spring 对Apache Kafka的&nbsp;<a href=\"https://docs.spring.io/spring-kafka/docs/current/api/org/springframework/kafka/config/ContainerCustomizer.html\">ContainerCustomizer</a>\"&nbsp;接口；自动配置默认&nbsp;<a href=\"https://docs.spring.io/spring-kafka/docs/current/api/org/springframework/kafka/config/ConcurrentKafkaListenerContainerFactory.html\">ConcurrentKafkaListenerContainerFactory</a>\"&nbsp;类中&nbsp;<a href=\"https://docs.spring.io/spring-kafka/docs/current/api/org/springframework/kafka/listener/BatchInterceptor.html\">BatchInterceptor</a>\"&nbsp;接口。关于该版本更多细节请参见<a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-M1\">发布说明</a>\"。</p><p></p><p><a href=\"https://spring.io/projects/spring-batch\">Spring Batch</a>\"&nbsp;的 5.0.1 及 4.3.8 版本现已<a href=\"https://spring.io/blog/2023/02/23/spring-batch-5-0-1-and-4-3-8-available-now\">发布</a>\"，提供问题修复、依赖升级，文档相关优化及对应的依赖升级版本包括：Spring 框架 6.0.5 及对应依赖版本 5.3.25；Spring Retry 2.0.0 及对应依赖版本 1.3.4；Spring AMQP 3.0.2 及对应依赖版本 2.3.16；Spring Data 3.0.2 及对应依赖版本 2.7.8；Spring Integration 6.0.3 及对应依赖版本 5.5.16；Micrometer 1.10.4 及对应依赖版本 1.9.8。关于该版本更多细节请参见<a href=\"https://github.com/spring-projects/spring-batch/releases/tag/v5.0.1\">版本 5.0.1</a>\"&nbsp;及<a href=\"https://github.com/spring-projects/spring-batch/releases/tag/4.3.8\">版本 4.3.8</a>\"&nbsp;的发布说明。</p><p></p><p><a href=\"https://spring.io/projects/spring-data\">Spring Data</a>\"&nbsp;版本 2023.0.0-M2、2022.0.2，以及 2021.2.8 现已<a href=\"https://spring.io/blog/2023/02/20/spring-data-2023-0-0-m2-2022-0-2-and-2021-2-8-released\">发布</a>\"，提供问题修复及对应的依赖版本升级，包括 Spring Data Commons 3.1.0-M2、3.0.2 及 2.7.8; Spring Data MongoDB 4.1.0-M2、4.0.2 及 3.4.8; Spring Data Elasticsearch 5.1.0-M2、5.0.2 及 4.4.8。Spring Data 版本 2023.0.0-M1 同样于上周发布，但发布工具出现故障，Spring Data 2023.0.0-M2（代号 Ullman）解决了该问题。Spring Data 版本 2022.0.2 及 2021.2.8 可分别被&nbsp;<a href=\"https://spring.io/projects/spring-boot\">Spring Boot</a>\"&nbsp;3.0.3 及 2.7.9 使用。</p><p></p><p><a href=\"https://spring.io/projects/spring-security\">Spring Security</a>\"&nbsp;版本 6.0.2、5.8.2 及 5.7.7 现已<a href=\"https://spring.io/blog/2023/02/21/spring-security-6-0-2-5-8-2-and-5-7-7-available-now\">发布</a>\"，提供问题修复及依赖升级。版本 6.0.2 中新功能包括：重新启用对&nbsp;<a href=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/oauth2/client/R2dbcReactiveOAuth2AuthorizedClientService.html\">R2dbcReactiveOAuth2AuthorizedClientService</a>\"&nbsp;类的测试；<a href=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/csrf/CsrfTokenRequestAttributeHandler.html\">CsrfTokenRequestAttributeHandler</a>\"&nbsp;类的文档中应写明&nbsp;<a href=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/csrf/XorCsrfTokenRequestAttributeHandler.html\">XorCsrfTokenRequestAttributeHandler</a>\"&nbsp;类</p><p>为默认使用；版本 5.8.2 中新功能包括：新增用于验证由&nbsp;XorCsrfTokenRequestAttributeHandler&nbsp;类掩码 CSRF 令牌的&nbsp;<a href=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/messaging/web/csrf/XorCsrfChannelInterceptor.html\">XorCsrfChannelInterceptor</a>\"&nbsp;类；文档中注明&nbsp;<a href=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/config/annotation/web/reactive/EnableWebFluxSecurity.html\">@EnableWebFluxSecurity</a>\"&nbsp;注解将在版本 6.0 中需要&nbsp;@Configuration&nbsp;注解。关于该版本更多细节请参见<a href=\"https://github.com/spring-projects/spring-security/releases/tag/6.0.2\">版本 6.0.2</a>\"、<a href=\"https://github.com/spring-projects/spring-security/releases/tag/5.8.2\">版本 5.8.2</a>\"、<a href=\"https://github.com/spring-projects/spring-security/releases/tag/5.7.7\">版本 5.7.7</a>\"&nbsp;的发布说明。</p><p></p><p>Spring Cloud 版本 2021.0.6 的<a href=\"https://spring.io/blog/2023/02/24/spring-cloud-2021-0-6-has-been-released\">发布</a>\"提供对子项目的升级，包括：Spring Cloud Config 3.1.5、Spring Cloud Kubernetes 2.1.5、Spring Cloud Build 3.1.5、Spring Cloud OpenFeign 3.1.5，以及 Spring Cloud Function 3.2.8。关于该版本更多细节请参见<a href=\"https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2021.0-Release-Notes\">发布说明</a>\"。</p><p></p><p><a href=\"https://spring.io/projects/spring-graphql\">Spring for GraphQL</a>\"&nbsp;版本 1.1.2 现已<a href=\"https://spring.io/blog/2023/02/21/spring-for-graphql-1-1-2-released\">发布</a>\"，提供问题修复、文档优化、依赖升级，以及全新功能，包括：允许通过&nbsp;<a href=\"https://docs.spring.io/spring-graphql/docs/current/api/org/springframework/graphql/test/tester/ExecutionGraphQlServiceTester.html\">ExecutionGraphQlServiceTester</a>\"接口对&nbsp;<a href=\"https://javadoc.io/doc/com.graphql-java/graphql-java/latest/graphql/ExecutionInput.html\">ExecutionInput</a>\"&nbsp;类进行配置；ContextDataFetcherDecorator&nbsp;在“subscription”类型重命名后忽略订阅；支持方法参数中的&nbsp;@Validated。关于该版本更多细节请参见<a href=\"https://github.com/spring-projects/spring-graphql/releases/tag/v1.1.2\">发布说明</a>\"。</p><p></p><p><a href=\"https://spring.io/projects/spring-authorization-server\">Spring 授权服务器</a>\"版本 1.0.1 及 0.4.1 现已<a href=\"https://spring.io/blog/2023/02/22/spring-authorization-server-1-0-1-and-0-4-1-available-now\">发布</a>\"，提供问题修复及对应依赖升级，包括：Spring 框架 6.0.5 及 5.3.25；Spring Security 6.0.2 及 5.8.2；JUnit Jupiter 5.9.2；Jackson 2.14.2。版本 0.4.1 中提供的新功能包含对&nbsp;continuous-integration-workflow.yml&nbsp;文件的更新，使用<a href=\"https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#environment-files\">环境文件</a>\"而非已废弃的&nbsp;set-output&nbsp;命令。关于该版本更多细节请参见<a href=\"https://github.com/spring-projects/spring-authorization-server/releases/tag/1.0.1\">版本 1.0.1</a>\"&nbsp;及<a href=\"https://github.com/spring-projects/spring-authorization-server/releases/tag/0.4.1\">版本 0.4.1</a>\"&nbsp;的发布说明。</p><p></p><p>展望版本 1.1.0，Spring 授权服务器的<a href=\"https://spring.io/blog/2023/02/22/spring-authorization-server-1-1-0-m1-available-now\">首个里程碑版本</a>\"目前也已发布，提供对 OpenID Connect 1.0 登出端点的支持。关于该版本更多细节请参见<a href=\"https://github.com/spring-projects/spring-authorization-server/releases/tag/1.1.0-M1\">发布说明</a>\"。</p><p></p><p>Spring Modulith 版本 0.4.0 现已<a href=\"https://spring.io/blog/2023/02/24/spring-modulith-0-4-released\">发布</a>\"，提供问题修复、依赖升级，以及全新功能，包括：支持集成测试应用程序模块场景，尤其针对使用&nbsp;@ApplicationEventListener&nbsp;注解的情况；更为详尽的 Modulith 启动时未完成事件发布日志查询；在文档生成时使用系统名作为容器名称。关于该版本更多细节请参见<a href=\"https://github.com/spring-projects-experimental/spring-modulith/releases/tag/0.4.0\">发布说明</a>\"。</p><p></p><p>版本 0.4.1 在<a href=\"https://spring.io/blog/2023/02/24/spring-modulith-0-4-1-released\">发布</a>\"中解决了&nbsp;spring-modulith-runtime&nbsp;模块中导致网页应用在 Modulith 关闭时挂起的小问题，同时也将&nbsp;<a href=\"https://github.com/xmolecules/jmolecules/blob/main/readme.adoc\">jMolecules</a>\"&nbsp;的依赖版本升级至 2022.2.3。关于该版本的更多细节请参见<a href=\"https://github.com/spring-projects-experimental/spring-modulith/releases/tag/0.4.1\">发布说明</a>\"。</p><p></p><h2>Helidon</h2><p></p><p></p><p>Helidon 4.0.0&nbsp;<a href=\"https://github.com/helidon-io/helidon/releases/tag/4.0.0-ALPHA5\">第五 Alpha 版本</a>\"已发布，变更包括：支持中断 HTTP/2 连接，从而更为高效关闭服务器；可通过&nbsp;<a href=\"https://helidon.io/docs/v3/apidocs/io.helidon.integrations.oci.metrics/io/helidon/integrations/oci/metrics/OciMetricsSupport.Builder.html\">OciMetricsSupport.Builder</a>\"&nbsp;类中新增的&nbsp;enabled()&nbsp;方法，注册&nbsp;<a href=\"https://helidon.io/docs/v3/apidocs/io.helidon.integrations.oci.metrics/io/helidon/integrations/oci/metrics/OciMetricsSupport.html\">OciMetricsSupport</a>\"&nbsp;类的示例；更新&nbsp;<a href=\"https://helidon.io/docs/v3/apidocs/io.helidon.media.multipart/io/helidon/media/multipart/BodyPart.html\">BodyPart</a>\"&nbsp;接口，现可返回一个&nbsp;<a href=\"https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/Optional.html\">Optional</a>\"&nbsp;实例而非可空字符串。</p><p></p><h2>Apache 软件基金会</h2><p></p><p></p><p>Apache 软件基金会分别提供了&nbsp;<a href=\"https://netbeans.apache.org/\">NetBeans</a>\"、<a href=\"https://tomcat.apache.org/\">Tomcat</a>\"&nbsp;及&nbsp;<a href=\"https://logging.apache.org/log4j/2.x/\">Log4j 2</a>\"&nbsp;的版本发布。</p><p>Apache NetBeans 17 的<a href=\"https://blogs.apache.org/netbeans/\">发布</a>\"中包含以下变更：将大文件告警从 1MB 提高至 5MB；提供&nbsp;<a href=\"https://www.antlr.org/\">ANTLR4</a>\"&nbsp;词库的初始化实现；依赖升级至 ATNLR4 运行时 4.11.1；支持 Jakarta EE 10。关于该版本更多细节可参见<a href=\"https://github.com/apache/netbeans/releases/tag/17\">发布说明</a>\"。</p><p></p><p>Apache Tomcat 的版本 11.0.0 即<a href=\"https://www.mail-archive.com/announce@apache.org/msg07982.html\">第三里程碑版本（Alpha）</a>\"发布中，提供了以下重要变更：将可支持最低 Java 版本提高至 JDK 17；移除对安全管理模式下启动 Tomcat 的支持；移除对 JAX-RPC 的支持，其在 Jakarta EE 9 中已被从 Jakarta EE 平台中移除。需要注意的是，随着 Jakarta EE 11 的发展，对最低 Java 版本的支持很可能会被提高至 JDK 21。关于该版本的更多细节请参见<a href=\"https://tomcat.apache.org/tomcat-11.0-doc/changelog.html\">发布说明</a>\"。</p><p></p><p>Apache Tomcat 10.1.6 版本<a href=\"https://www.mail-archive.com/announce@apache.org/msg07993.html\">发布</a>\"，主要变更包括：改用 ServiceLoader 机制加载 Tomcat 所使用的自定义URL协议处理；更新Apache Tomcat 原生库打包版本，以捕获 Windows 使用 OpenSSL 3.0.8 所构建的二进制文件；将 RFC 6598 所指定的，<a href=\"https://www.rfc-editor.org/rfc/rfc6598\">IANA 为共享地址空间预留 IPv4 前缀</a>\"，即共享 IP 地址空间（100.64.0.0/100.0.0.10），新增至&nbsp;<a href=\"https://tomcat.apache.org/tomcat-9.0-doc/api/org/apache/catalina/valves/RemoteIpValve.html\">RemoteIpValve</a>\"&nbsp;及&nbsp;<a href=\"https://tomcat.apache.org/tomcat-9.0-doc/api/org/apache/catalina/filters/RemoteIpFilter.html\">RemoteIpFilter</a>\"&nbsp;类的受信任代理列表中；在 Tomcat 启动时，记录每个配置的 TLS 证书基本信息；对示例网页应用访问默认限制为本地 localhost。关于该版本更多信息请参见<a href=\"http://tomcat.apache.org/tomcat-10.1-doc/changelog.html\">发布说明</a>\"。</p><p></p><p>Apache Tomcat 的版本&nbsp;<a href=\"https://www.mail-archive.com/announce@apache.org/msg07981.html\">9.0.72</a>\"&nbsp;及版本&nbsp;<a href=\"https://www.mail-archive.com/announce@apache.org/msg07992.html\">8.5.86</a>\"&nbsp;主要提供以下变更：新增错误报告变量，允许重新定向至外部 Web 服务器，或从外部 Web 服务器代理；将 RFC 6598 所指定的，<a href=\"https://www.rfc-editor.org/rfc/rfc6598\">IANA 为共享地址空间预留 IPv4 前缀</a>\"，即共享 IP 地址空间（100.64.0.0/100.0.0.10），新增至&nbsp;<a href=\"https://tomcat.apache.org/tomcat-9.0-doc/api/org/apache/catalina/valves/RemoteIpValve.html\">RemoteIpValve</a>\"&nbsp;及&nbsp;<a href=\"https://tomcat.apache.org/tomcat-9.0-doc/api/org/apache/catalina/filters/RemoteIpFilter.html\">RemoteIpFilter</a>\"&nbsp;类的受信任代理列表中；在 Tomcat 启动时，记录每个配置的 TLS 证书基本信息；对示例网页应用访问默认限制为本地 localhost。关于该版本更多细节请参见<a href=\"https://tomcat.apache.org/tomcat-9.0-doc/changelog.html\">版本 9.0.72</a>\"&nbsp;及<a href=\"https://tomcat.apache.org/tomcat-8.5-doc/changelog.html\">版本 8.0.86</a>\"&nbsp;的发布说明。</p><p></p><p>由于 SLF4J 绑定中的兼容性问题，Apache Log4j 版本 2.20.0 的<a href=\"https://www.mail-archive.com/announce@apache.org/msg07977.html\">发布</a>\"对 Log4j 提供两个版本的 SLF4J 适配器。其他新功能包括：新增对&nbsp;RollingFileAppender&nbsp;日期格式的时区支持；新增&nbsp;KafkaAppender&nbsp;中&nbsp;ProducerRecord&nbsp;的&nbsp;LogEvent&nbsp;时间戳；新增&nbsp;<a href=\"https://logging.apache.org/log4j/2.x/javadoc/log4j-api/org/apache/logging/log4j/LogBuilder.html\">LogBuilder</a>\"&nbsp;接口中&nbsp;logAndGet()&nbsp;方法，用于模拟&nbsp;<a href=\"https://logging.apache.org/log4j/2.x/javadoc/log4j-api/org/apache/logging/log4j/Logger.html\">Logger</a>\"&nbsp;方法中&nbsp;traceEntry()&nbsp;方法。</p><p></p><h2>JHipster</h2><p></p><p></p><p>JHipster 团队现已<a href=\"https://twitter.com/pascalgrimaud/status/1629123246510469126?cxt=HHwWjMCzucK955stAAAA\">发布</a>\"&nbsp;JHipster Lite 版本 0.28.0，提供优化如：支持 Cassandra 模式迁移；重构&nbsp;CustomClaimConverter&nbsp;类，以强化安全性；Spring Boot 依赖升级至 3.0.3。关于该版本的更多细节请参见<a href=\"https://github.com/jhipster/jhipster-lite/releases/tag/v0.28.0\">发布说明</a>\"。</p><p></p><p>该团队同时<a href=\"https://twitter.com/deepu105/status/1628105207400759308?cxt=HHwWmICwgezDmJgtAAAA\">宣布</a>\"，在即将发布的 JHipster 8.0 中，<a href=\"https://www.consul.io/\">Consul</a>\"&nbsp;将被用于<a href=\"https://github.com/jhipster/generator-jhipster/pull/19300\">默认服务发现机制</a>\"，<a href=\"https://www.jhipster.tech/jhipster-registry/\">JHipster 注册表</a>\"将因此被弃用。</p><p></p><h2>JobRunr</h2><p></p><p></p><p>JobRunr 版本 6.1.0&nbsp;<a href=\"https://www.jobrunr.io/en/blog/2023-02-24-jobrunr-v6.1.0/\">发布</a>\"，主要提供以下优化：更简单地对&nbsp;<a href=\"https://github.com/jobrunr/jobrunr/blob/dc73c63f382dbd4e41cc0629bdf318e5197c31a2/core/src/main/java/org/jobrunr/jobs/context/JobContext.java\">JobContext</a>\"&nbsp;类的模仿；通过 Quarkus 扩展和 JobRunr 提供对 AWS DocumentDB 的支持；优化&nbsp;<a href=\"https://github.com/jobrunr/jobrunr/blob/1c0324b9eec155cac1cc543f430f834f6fb9a3a4/core/src/main/java/org/jobrunr/jobs/filters/JobServerFilter.java\">JobServerFilter</a>\"&nbsp;接口的功能性。关于该版本的更多细节可参见<a href=\"https://github.com/jobrunr/jobrunr/releases/tag/v6.1.0\">发布说明</a>\"。</p><p></p><h2>JBang</h2><p></p><p></p><p><a href=\"https://www.jbang.dev/\">JBang</a>\"&nbsp;版本 0.104.0 的<a href=\"https://github.com/jbangdev/jbang/releases/tag/v0.104.0\">发布</a>\"提供了：默认安装 JDK 17，但仍继续支持最低版本 JDK 8；对 Java 模块的实验性支持；提供命令行下载远程文件功能，取代原先文件参考。</p><p></p><h2>Gradle</h2><p></p><p></p><p>Gradle&nbsp;<a href=\"https://github.com/gradle/gradle/releases/tag/v7.6.1\">首个补丁版本</a>\"&nbsp;7.6.1，修复了以下问题，如：在平台中无法通过 Kotlin DSL 以新依赖块的形式新增依赖；使用&nbsp;-p&nbsp;选项会提高内存使用率；在 Gradle 文档中完全移除指向“安全凭证”的引用，会导致正确凭证被记录于配置缓存项的风险。关于该版本的更多细节可参见<a href=\"https://docs.gradle.org/7.6.1/release-notes.html\">发布说明</a>\"。</p><p>第四次 Gradle&nbsp;<a href=\"https://github.com/gradle/gradle/releases/tag/v6.9.4\">补丁版本</a>\"&nbsp;6.9.4 发布，修复问题包括：依赖关系图中等价排除可能导致不必要的图变化；受信任的&nbsp;<a href=\"https://gnupg.org/\">Gnu 隐私保护加密</a>\"（GPG）密钥应只接收160位指纹。关于该版本更多细节请参见<a href=\"https://docs.gradle.org/6.9.4/release-notes.html\">发布说明</a>\"。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/02/java-news-roundup-feb20-2023/\">Java News Roundup: NetBeans 17, Multiple Spring and Tomcat Updates, GraalVM Builds for JDK 20</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/sLiRwa72fHzWvzC2HmKf\">深入 OpenTelemetry 源代码：Java 探针的实现和二次开发</a>\"</p><p><a href=\"https://www.infoq.cn/article/txS9hHTfxasv2uHBATgL\">Java 近期新闻：Gradle 8.0、Maven、Payara 平台、Piranha、Spring Framework、MyFaces 和 Piranha</a>\"</p>",
    "publish_time": "2023-03-13 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "人人都能懂的ChatGPT解读",
    "url": "https://www.infoq.cn/article/VWrPIRvRg6E3O74q7PtL",
    "summary": "<p>作者 | 张杰，中关村科金技术副总裁&nbsp;</p><p>策划 | 刘燕</p><p></p><p>ChatGPT 发布了两个多月，热度不降反增，不断火爆出圈。是时候，为不懂 AI 技术的同学们白话科普一下了。</p><p></p><p>本文将用浅显且不严谨的语言解惑以下问题：ChatGPT 为什么能火起来？ChatGPT 背后的关键技术是什么？我能弄个自己的 ChatGPT 吗？我怎么用它来赚钱？</p><p></p><p></p><h2>ChatGPT 为什么这么火？</h2><p></p><p></p><p>对话机器人不是个新技术，以往的机器人产品很多，为什么这次 OpenAI 公司推出的 ChatGPT 能这么火？因为以前的机器人只能做简单且有限的事，问天气、放音乐还行，问个复杂一些的事就有点“人工智障”了。ChatGPT 可以说是技术上的量变引起了效果上的质变，在三个方面让我感觉很惊艳：</p><p></p><p>有上下文记忆能力，多轮对话衔接地很好，很难看出是机器生成的；有学习纠错能力，在它回答错误之后，如果你纠正了它，第二次就不会再答错。有思维链推理能力，具备一些常识知识，能做复杂一些的算数题；</p><p></p><p></p><h2>ChatGPT 背后的关键技术是什么？</h2><p></p><p></p><p>在 ChatGPT 背后起关键作用的是一种被称为大规模语言模型（Large Language Model，LLM）的东西，ChatGPT 用的这款语言模型命名为 GPT-3.5，GPT 是生成式预训练（Generative Pre-Training）的缩写，目前的版本号是 3.5 版。此外，在 GPT-3.5 之上，ChatGPT 还通过基于人类反馈的强化学习（Reinforcement Learning from Human Feedback，RLHF），使 GPT 能够记住之前的对话、承认错误、在连续的多轮对话中给人很顺畅的感觉。</p><p></p><p></p><h3>大规模语言模型</h3><p></p><p></p><p>顾名思义，大规模语言模型就是非常大的语言模型。什么是语言模型呢？</p><p></p><h4>语言模型</h4><p></p><p></p><p>简单说来，语言模型的作用就是根据已知句子的一部分，来预测下一个单词或者空缺部分的单词是什么。比如，给你前半句：“国庆前夕，天安门广场前伫立起一个 ____”，你会预测出空白部分大概率会是“大花篮”。</p><p></p><p>其实，你天天都在用语言模型，当你使用手机或电脑里的输入法回复消息时，它就在推荐你下一个单词。ChatGPT 使用的 GPT-3.5 可比输入法中的语言模型要大很多。输入法语言模型占用的存储空间可能只有 50MB，而 GPT-3.5 有 800GB。</p><p></p><p></p><h4>神经网络</h4><p></p><p></p><p>GPT 为什么会那么大？因为它内部是神经网络的结构。大规模语言模型的基础单元叫做感知机，它模拟了人脑中神经元的结构。这些感知机组织成庞大的网络结构，用来“山寨”人脑的神经网络。</p><p></p><p>一般情况下，一个正常人的大脑约有 800~1000 亿个神经元，以及约 100 万亿个突触。神经科学家 Paul Maclean 提出的三元脑（triune brain) 模型，将大脑结构分为三类：爬行脑、哺乳脑、人类脑。爬行脑最早进化出来，负责呼吸、心跳、血压等，完全自动运作。哺乳脑负责情感、记忆、习惯形成等，能够做出非常快的决策。人类脑最晚形成，负责一些复杂的分析推理，是做慢决策，即所有需要深思熟虑的事物。</p><p></p><p>GPT-3.5 的参数总量达到 1750 亿，虽然距离人脑突触的量级还有差距，但也已经显现出之前小规模模型所不具备的推理能力。要想足够智能，网络规模足够大是个必要条件。</p><p></p><p></p><h4>Transformer</h4><p></p><p></p><p>大模型的核心是一个叫 Transformer 的组件，Transformer 在这里可不是\"变形金刚\"的意思，也许翻译成\"变压器\"意思更接近些。</p><p></p><p>想想我们国家的西电东输工程，西部利用水力、风力、日光所转化的电能，经过变压器压缩成高压甚至特高压，再在电网上传输，到了东部之后再逐级降压，然后才能使用。变压器在其中先升压再降压，有效降低了能量在传输过程中的损耗。</p><p></p><p>我们人类在交流过程中也有类似的过程，同事 A 跟你说了一件事，你并没有逐字逐句的记在脑子里，而是理解了其中的语义，在脑子里形成一种意识流，这是一种压缩编码的过程。你脑子里保留的意识流具体是什么，你也说不清楚 --- 也不需要说清楚。当你向同事 B 复述这件事的时候，你重新把它组织成语言，保留了其中的各项重点内容，通过一系列的发音或文字表达给对方，这是解码的过程。这种先编码再解码的过程，就是 Transformer 的工作原理。另外，在实际当中，有些语言模型只用到堆叠多层的编码器，有些只用到堆叠多层的解码器；堆叠的层数也多有不同，少的有 6 层、12 层，多的有 48 层。</p><p></p><p>如果你有一些计算机基础，听说过词袋模型（Bag of Words，BOW）、循环神经网络（Recurrent Neural Network，RNN），那么对 Transformer 就更容易理解了。</p><p></p><p>BOW 完全丢弃了词的位置信息，没有把文本当作有顺序的序列，因此语义理解能力较差。例如，“不，我很好”和“我很不好”，两句话虽然用词一样，但词的位置不同，语义上差别巨大。RNN 能较好的保留词的位置信息，可以考虑到词的先后顺序对预测的影响，但是，如果处理的文本长度很长，关键的词之间距离较远时，效果会显著下降。</p><p></p><p>Transformer 中引入“注意力”机制，多个组件分别关注句子中不同方面的重点，而且随着网络层次的增加，能够提取出更高级更抽象的语义信息，理解能力更强。Transformer 除了语义提取能力强，还能从无标注的数据中学习，而且场景迁移能力好。</p><p></p><h4>思维链</h4><p></p><p></p><p>此外，大规模语言模型还带给人们的一项意外的惊喜，那就是让人细思极恐的思维链（Chain-of-Thought，CoT）能力。</p><p></p><p>简单地说，思维链就是让 LLM 将一个问题拆解为多个步骤，最后给出答案，而不是让 LLM 直接给出答案。直接给答案的出错率更高。比如，你给 LLM 出了一个题目：“张三养了 10 条狗，每天照顾每条狗都要花半小时，请问他照顾这些狗要花费多长时间？”LLM 直接给答案的话可能会出错，当你提示 LLM 要“一步步地回答”时，它会告诉你：“张三养了 10 条狗，每天照顾每条狗都要花半小时，那就是 10 x 0.5 = 5 小时 / 天。5 小时 / 天 x 7 天 / 周 = 35 小时 / 周。答案是每周 35 小时。”</p><p></p><p>这项能力并不是设计者的初衷（初衷只是学习如何说人话），而是在随后的代码训练、提示学习中挖掘出来的，这些能力原本就已经存在于大模型之中，它从代码、书籍、网页中学到了一些常识知识并具备了一定的推理能力。</p><p></p><p></p><h3>基于人类反馈的强化学习</h3><p></p><p></p><p>人类问问题的方式对于 LLM 而言不是最自然的理解方式，为了让 ChatGPT 给出的答案更贴近人类的问题、更符合公序良俗，它在发布前采取了一种叫做“基于人类反馈的强化学习”（Reinforcement Learning by Human Feedback，RLHF）的训练策略。简单来说，就是花钱找人给模型提出各种可能的问题，并对模型反馈的错误答案进行惩罚、对正确的答案进行奖励，从而实现提升 ChatGPT 回复质量的目的。</p><p></p><p>光有海量的、无标注的数据还不够，还要有少量的、高质量的标注数据才行。前者用来训练语言模型，让它学会说人话，后者用来训练对话模型，让它别啥都瞎说，比如：回答中不能含有种族歧视和性别歧视的内容，拒绝回答不当问题和知识范围之外的问题。</p><p></p><p></p><h2> 我能训个 ChatGPT 吗？</h2><p></p><p></p><p>简单地回答：极大概率是不能的。起码在现阶段，这不是招几个人、花些钱就能做成的事，能训出 ChatGPT 的人可能比做出 4 纳米芯片的人还要少。</p><p></p><p>这其中的原因是什么？咱先来捋捋 ChatGPT 超能力的来源，再对比看看自己手中的家底。</p><p></p><p></p><h4>算力</h4><p></p><p></p><p>算力，也就是数据的处理能力，与数据、算法，并称为 AI 三要素。据估计，仅仅训练一次 GPT-3，Open AI 可是花费了 460 万美元。对于 ChatGPT 而言，支撑其算力基础设施至少需要上万颗英伟达 A100 的 GPU，一次模型训练成本超过 1200 万美元。</p><p></p><p>然而，在这些必要非充分条件中，算力是最容易解决的。</p><p></p><p></p><h4>数据</h4><p></p><p>模型要足够深、足够大，才能解决远距离的语义理解能力、才能产生抽象的推理能力，这些高级的基础的能力具有很好的通用性。因此，高级的能力可能只存在于大型模型中，而训练大模型，需要足够的数据量。</p><p></p><p>全球高质量文本数据的总存量在 4.6 万亿到 17.2 万亿个字符之间。这包括了世界上所有的书籍、科学论文、新闻文章、维基百科、公开代码以及网络上经过筛选的达标数据，例如网页、博客和社交媒体。最近的一项研究数据显示，数据总数大约为 3.2 万亿个字符。DeepMind 的 Chinchilla 模型是在 1.4 万亿个字符上训练的。也就是说，在这个数量级内，我们很有可能耗尽世界上所有有用的语言训练数据。</p><p></p><p>此外，反观中文网站的数据资源，大致占全世界总资源的 1.3%。中文内容相比英文有四五十倍的差距，人工智能脱离不了人类知识的土壤，这方面的先天条件不是短期内花钱或凭一己之力就能解决的。</p><p></p><p></p><h4>人才</h4><p></p><p></p><p>ChatGPT 公开出来的少量材料中，披露出了一系列训练技巧，比如：代码训练、指令微调、上下文学习等。更多的细节目前还没有公开，即便公开了也不见得是全部，即便全部公开也未必能重现。因为整个过程链条非常长，有大量的工程技巧在里边。俗话说魔鬼藏在细节里，具体的实现和工程技巧才是重头戏，好比刚学做菜的人，即便有足够的食材，照着菜谱也不可能做出一套满汉全席。</p><p></p><p>今年 2 月初，谷歌已向人工智能初创公司 Anthropic 投资约 3 亿美元，并获得该公司 10% 股份。该公司 2021 年创立，目前团队规模仅在 40 人左右，初创期的 11 位核心成员都曾经参与过 GPT-2、GPT-3 模型的研发。可见，业界对于人才的重视程度以及人才的奇缺性。</p><p></p><p></p><h2> 如何用 ChatGPT 赚钱？</h2><p></p><p></p><p>ChatGPT 似乎打破了人们关于 AI 模型的一项固有认知：“通用的不好用，好用的不通用。”</p><p></p><p>大模型革命的一个关键趋势就是，通用大模型比专用小模型表现地更好。对于定位在垂直细分领域里的初创公司来说，既不能自研出大模型，效果上又失去了竞争力，因此是不是就没有活路了？</p><p></p><p>我觉得不是，ChatGPT 的能力可以分成 chat 和 GPT 两部分来看，即上层的对话和图片的生成能力、底层的语言和推理能力。</p><p></p><p>在 ToC 类内容消费市场，未来可能会出现大量的、碎片化的 AIGC 应用，比如生成头像、诗文、甚至短视频等，重点是在有趣的细分场景里发挥创造性和想象力。在消费电子市场里，有对话能力的智能音箱、智能家电在去年的出货量有所下滑，借助更强的对话能力，也许还能挽回一些颓势。</p><p></p><p>在 ToB 类企业服务市场，AI 不再只是替代简单重复性的体力劳动，还将替代简单规律性的脑力劳动，并在逻辑复杂的脑力劳动中辅助员工提升工作效率。简单的脑力劳动，比如营销文案撰写、初级程序员和插画师等。复杂的脑力劳动，可能会围绕具体业务的推理能力，以虚拟工作助手的形式出现。</p><p></p><p>对于处于 ToB 赛道的科技公司而言，中间层可能会越来越薄，对于行业 KnowHow 的积累会成为越来越重要的竞争门槛。这其中可能会遇到很多挑战，比如：如何在使用强大的通用模型和构建自己的垂直模型之间进行迭代，如何将通用无标注的大规模数据和领域小规模知识相结合，如何将领域事实知识注入到 LLM 中使得 LLM 的输出内容可控。在目前的研究范式下，领域内高质量的标注数据 + 领域推理能力，两者如何形成“飞轮效应”是非常重要的问题。</p><p></p><p></p><h2>划重点</h2><p></p><p></p><p>说了这么多，总结一下重点，不管你能记住多少，起码下次在电梯里遇到老板或者在饭局上遇到同学时，在聊起 ChatGPT 的时候，你能插上几句话。</p><p></p><p>关于大规模语言模型：训练时要用到万亿级的数据、花费百万美元的算力，才能使它能说人话，并具有一定的“思维链”推理能力。大模型的超能力：模型要足够深、足够大，才能产生抽象的推理能力，这些高级的基础能力具有很好的通用性。大模型革命的一个关键趋势就是，通用大模型比专用小模型表现地更好，打破了人们一项固有认知：“通用的不好用，好用的不通用。”应用场景：ToC 类应用要找准细分的内容生成场景，ToB 类应用要围绕推理能力去发挥，让它成为脑力工作者的辅助，替代一部分简单的脑力工作，辅助员工的做创造性工作。</p><p></p><p>最后，对于想进一步深入了解技术细节的同学，推荐一下延展阅读材料：</p><p></p><p>OpenAI 官网上关于 ChatGPT 的介绍：ChatGPT: Optimizing Language Models for Dialogue关于大规模预训练语言模型：《预训练语言模型》基于语言模型提示学习的推理：论文列表关于 GPT 技术演进过程：GPT1 到 ChatGPT 的技术演进关于大模型的涌现能力：大模型的突现能力和 ChatGPT 引爆的范式转变关于 InstructGPT：Training language models to follow instructions with human feedback对话式 AI 需要具备领域知识时，可以参考这本书：《知识中台》对话式 AI 需要处理视频或语音时，可以参考：《深度学习视频理解》《语音识别服务实战》</p><p></p><h4>作者简介</h4><p></p><p></p><p>张杰，中关村科金技术副总裁</p><p></p><p>天津大学计算机专业博士。荣获第十届吴文俊人工智能技术发明一等奖。著有《知识中台：数字化转型中的认知技术》、《“新一代人工智能创新平台建设及其关键技术丛书”— 知识图谱》两部技术专著。研究领域：知识工程、自然语言处理等技术领域拥有丰富的理论和实践经验。主持或参与国家级课题八项，并发表学术论文十余篇、拥有专利一百余项。主导开发了推荐引擎、知识问答系统、客服机器人、大数据风控平台、行业知识图谱等多项商业化系统，累计产值数亿元。</p>",
    "publish_time": "2023-03-13 10:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "中国科技领导者画像研究报告 2023",
    "url": "https://www.infoq.cn/article/oDh5G4Rcsc1gW1O1Tou8",
    "summary": "<h2>内容：</h2>\n<p>InfoQ研究中心针对本次研究需求开展了相关用户调研，共回收 129 份样本， 样本覆盖 11 个省级行政单位的 16 座城市。样本包括来自互联网、金融、医疗、能源等行业的62 位CTO/CIO/CDO、45 位高级技术总监及其他和22 位信息化/数字化负责人（总监/总经理/主任）。</p>\n<p>本次研究还对 25 位科技领导者进行了定性访谈， 获得核心结论如下：</p>\n<ul>\n<li>报告研究了科技领导在行业间的流动性：</li>\n</ul>\n<p>超过40%的互联网技术领导者在过去三年进入到数字化行业； 未接受数字化企业邀约的技术领导者主要的顾虑是担心赛道转变过大（55%）、企业文化融合（40%）与技术认知差异（40%）；<br />\n大规模行业移民正在悄然减速， 根据观察甚至出现了一部分行业回流现象。</p>\n<ul>\n<li>针对数字化时代的领导力模型， 报告分析了目前市场的供需错位：</li>\n</ul>\n<p>数字化舆论热度居高不下与市场需求逐步降低的矛盾；<br />\n追逐热门赛道下加剧的人才供需矛盾；<br />\n过分追求前沿技术与综合能力素质提升之间的矛盾。</p>\n<ul>\n<li>针对数字化时代的科技领导者服务体系， 报告解读了核心路径：</li>\n</ul>\n<p>对于科技领导者的个人成长， 同侪交流学习成为最受人群认可的学习方式（86.05%）；<br />\n对于科技领导者的团队成长， 培训和分享分别是互联网和非互联网企业更为青睐的成长方式。</p>\n<ul>\n<li>报告研判了数字化时代的科技领导者人群发展趋势：</li>\n</ul>\n<p>科技领导者人群还将赋能更广泛的行业领域；<br />\n科技领导者的领导力分布将朝向更为平衡的方式发展；<br />\n数字化时代的团队成长，团队成长需要更为科学的培育服务体系。</p>\n<h2>目录：</h2>\n<h4>一、数字化时代背景分析</h4>\n<h4>二、科技领导者职场洞察</h4>\n<h4>三、科技领导者服务体系洞察</h4>\n<h4>四、科技领导者人群趋势预测</h4>\n<h2>报告专家团：</h2>\n<ul>\n<li>郭华    华润雪花数字化负责人</li>\n<li>龚银    超级猩猩合伙人兼CTO、TGO鲲鹏会（深圳）负责人</li>\n<li>霍太稳    极客邦科技创始人兼CEO</li>\n<li>卢亿雷    白海科技创始人兼CEO、TGO鲲鹏会（北京）董事会成员</li>\n<li>区海鹰    IBM咨询合伙人</li>\n<li>乔新亮    彩食鲜&nbsp;CTO、TGO鲲鹏会荣誉导师</li>\n<li>孙源青    华泰证券人力资源部副总经理</li>\n<li>Tina&nbsp;Jiang&nbsp;姜瑞    TalentX&nbsp;Consulting&nbsp;CEO、泽蒙脑神经管理研究中心创始人</li>\n<li>王俊鹏    九章云极 副总裁、TGO鲲鹏会（上海）董事会成员</li>\n<li>于游    马泷医疗CTO、TGO鲲鹏会（北京）董事会成员</li>\n</ul>",
    "publish_time": "2023-03-13 10:13:15",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]