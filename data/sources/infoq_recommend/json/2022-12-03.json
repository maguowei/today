[
  {
    "title": "谁动了我的代码：代码混淆剖析",
    "url": "https://www.infoq.cn/article/N0TokvWae2B98D2O79Sj",
    "summary": "<p>在我们生活的两极世界中，技术、开源软件和知识被自由共享，但同时防止攻击者对专有技术进行逆向工程的需求也在不断增长。有时候，技术盗窃甚至可能危及世界和平，比如伊朗人对美国中央情报局的绝密技术进行了逆向工程，开发出了一种新的攻击无人机。代码混淆是保护数据不受入侵者侵害的众多措施中的一种，虽然它可能不会带来世界和平，但至少可以给你带来一些安心。</p><p></p><h2>背景介绍</h2><p></p><p>&nbsp;</p><p>在高端和复杂的技术方面，伊朗从来没有占过上风——禁运和制裁没有给伊朗留下任何技术优势，除了创造力。伊朗人找到了最有创意的方法来试图保持领先地位。为了证明我们的观点，这里有一个有趣的故事——2011年，伊朗人利用简单的信号干扰劫持了一架美国超级机密无人机<a href=\"https://en.wikipedia.org/wiki/Iran%E2%80%93U.S._RQ-170_incident\">RQ170哨兵</a>\"，这是中情局使用的最先进的情报收集无人机。伊朗人“只”花了几年时间就对“哨兵”进行了逆向工程，并获得了良好的回报——他们基于“哨兵”的技术生产出了<a href=\"https://en.wikipedia.org/wiki/Shahed_Saegheh\">Shahed 191 Saegheh</a>\"，并在最近卖给了俄罗斯。</p><p>&nbsp;</p><p>程序员、技术供应商和政府可以做些什么来保证他们的技术的安全性，不被那些想要对有价值的技术进行逆向工程的恶意攻击者窃取？</p><p>&nbsp;</p><p>保证程序或技术的安全，就像保证你的房子不被窃贼偷窃一样——考虑到在大多数情况下，没有人能保证你的房子是100%安全的，所以你拥有的贵重物品越多，采取的保护措施也就越多。保护源代码也是如此——我们希望防止未经授权的人访问我们应用程序的逻辑、提取数据、克隆、重新分发、重新打包我们的代码，或利用漏洞。</p><p></p><h2>把针藏在干草堆里</h2><p></p><p>&nbsp;</p><p>最好的安全专家会告诉你，保护知识产权从来没有简单、单一的解决方案，建立一个良好的保护屏障总是需要采用综合的措施、保护层和方法。在本文中，我们将关注源代码保护中的一个小层面——代码混淆。</p><p>&nbsp;</p><p>混淆处理是一种强大的安全保护措施，但它常常被忽视，或至少被误解。代码混淆可以让代码变得难以理解，可以阻止未经授权的人轻易地反编译或反汇编它。<a href=\"https://www.infoq.cn/article/2008/10/rubyencoder\">代码混淆</a>\"让代码变得不可能（或几乎不可能）被人类阅读或解析。因此，代码混淆是一种很好的保护措施，可用于保持源代码的专有性和保护我们的知识产权。</p><p>&nbsp;</p><p>为了更好地解释代码混淆的概念，我们将以“沃尔多在哪里”为例。沃尔多是一个著名的插图角色，总是穿着红白条纹衬衫，戴着帽子，戴着黑框眼镜。在一张插图中有几十甚至几百个人正在做着各种有趣的事情，图中充满了情景、人物、物体和事件，我们要做的是在图中找到沃尔多。这并不总是很容易，甚至可能需要一些时间来分析插图，但最后总是会找到沃尔多，这多亏了他那独特的形象。</p><p>&nbsp;</p><p>现在想象一下，如果没有沃尔多他那标志性的条纹衬衫、帽子和眼镜——相反，他每次都穿不同的衬衫、戴不同的帽子和假发，有时候甚至会打扮成女人，那么找到他有多容易？可能几乎找不到。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/fb/fb5e5d6b166aad236080b0cc48ef3ff7.png\" /></p><p></p><p>图1. 想象一下，在没有沃尔多标志性的条纹衬衫、眼镜和帽子的情况下找到沃尔多。他将穿着普通的衣服，并戴着口罩。</p><p>&nbsp;</p><p>同样，当我们在进行代码混淆时，我们通过一种难以被理解的方式隐藏程序的代码、流程和功能的一部分——我们掩盖它们，“扭曲”、打乱、重命名、修改、隐藏、转换它们，甚至注入一些垃圾信息。</p><p>&nbsp;</p><p>好的代码混淆通常会使用所有这些方法，让混淆过的代码与原始的、未混淆的源代码难以区分。生成的代码看起来像是那么回事，这样会迷惑攻击者，并让逆向工程变得难以实施。</p><p>&nbsp;</p><p>但需要注意的是，与其他安全措施一样，代码混淆并不是100%保证安全，但如果处理得当，它可以尽可能接近保证100%的安全，特别是如果结合采取其他安全措施的话。</p><p></p><h2>混淆不等于加密</h2><p></p><p>&nbsp;</p><p>混淆和加密经常被误认为是同一个东西，其实它们并不是，所以区分二者是很重要的。混淆和<a href=\"https://www.infoq.cn/article/t3hky0oELIsOdhFkAMG4\">加密</a>\"是两个不同的概念，二者之间不能相互取代——如果说它们之间有什么联系的话，它们是相互补充的。</p><p>&nbsp;</p><p>在加密时，我们将信息转换成隐藏信息真实含义的密码。在进行混淆处理时，信息将保持原样，只是以一种模糊的格式呈现出来，因为我们将其复杂性提高到不可能（或几乎不可能）被理解或解析的程度。</p><p>&nbsp;</p><p>强大的加密机制是一种强大的安全措施，但我们必须记住，不管是什么锁，在某个时刻总是会被打开。任何被加密的东西都必须先解密才能使用，这就像打开了堡垒的门——不管它有多么坚固，这仍然是它的一个薄弱点。混淆的优势在这里就体现出来了——在进行混淆时，我们不加密，我们只是将代码隐藏起来，使它们变得不那么显而易见。混淆就像把针藏在干草堆里——如果做得好，攻击者需要花超出常规时间和资源来找到你的“针”。</p><p>&nbsp;</p><p>根据我们多年来作为程序员和代码混淆布道师的经验，我们发现代码混淆有点像英国脱欧——专家们要么完全支持，要么强烈反对。然而，要保证安全性，总是需要结合使用多种方法——如果一种方法失败，另一种方法仍然可以发挥作用——这也就是为什么说混淆和<a href=\"https://www.infoq.cn/article/EAMArVeEdjp3ZtjVjgC8\">加密</a>\"是很好的组合。混淆应该总是排在最后，也就是说，在添加了加密层并全面调试了程序之后，接下来就是混淆了。</p><p>&nbsp;</p><p>尽管本文关注的是如何创建字符串混淆工具，但必须指出的是，在现实生活中，商业混淆工具混淆的不仅仅是字符串，它们也混淆函数、API调用、变量、库、值等等。</p><p></p><h2>不让你看见我</h2><p></p><p>&nbsp;</p><p>大公司会对敏感软件进行混淆处理。例如，微软的Windows<a href=\"https://en.wikipedia.org/wiki/Kernel_Patch_Protection\">补丁卫士</a>\"就进行了全面的混淆，实际上不可能被逆向工程。如果你是一名程序员，可能不会有那些大公司所使用的花哨的安全工具，但这并不意味着你就不能使用一些简单而实用的措施来保护自己的代码。混淆字符串就是一种很好的方法，一方面不需要使用昂贵而复杂的混淆工具，另一方面可以让代码变得难以理解。</p><p>&nbsp;</p><p>事实上，如果你使用十六进制编辑器或Notepad打开一个典型的可执行文件，你可能会在二进制数据中发现许多字符串，这些字符串揭示了商业机密、IP地址或其他信息（如图2所示），所有这些都以字符串的形式出现，但你其实不想泄露这些信息。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4f/4f5456a32844a110318c56e2332a833c.png\" /></p><p></p><p>图2. 如果我们使用十六进制编辑器打开一个exe文件，可以找到一些字符串，这可能会给出很多信息，被攻击者利用。在这张图中，我们可以看到字符串\"calculator\"。</p><p>&nbsp;</p><p>现在，假设你的软件连接到远程服务器，你保存了正在使用的IP，并且不希望它被泄露。你可以通过混淆的方式隐藏敏感数据。当然，数据只在可执行文件层面得到隐藏，一旦与远程服务器通信，嗅探工具将显示IP以及发送和接收的任何内容——因此我们还是要考虑到这一点。我们需要指出的是，有很多方法可以同时隐藏IP和数据，甚至不被嗅探工具（如Wireshark）发现，不过这是另外一个主题了。</p><p>&nbsp;</p><p></p><h2>字符串混淆的背后</h2><p></p><p>&nbsp;</p><p>混淆代码的方法不止一种，因为混淆可以在多个级别或层面上实现——语义结构、词法结构、控制流、API调用等等。为了实现健壮的安全性，我们必须同时使用几种技术。由于本文的重点是字符串混淆，所以我们将探究四种子方法。</p><p></p><h4>随机性的重要性</h4><p></p><p>&nbsp;</p><p>说到随机数，我们可以想象一台彩票机：机器的底部是旋转桨，让球在腔体内随机旋转，然后把球从管子里射出去，这意味着每个球都是随机挑选的。</p><p>&nbsp;</p><p>你可能会问：为什么我们要在代码里使用随机元素？答案是，解码混淆数据的方法之一是检查事物的逻辑顺序，一旦我们将这个顺序随机化，就很难猜测到混淆的数据是什么。</p><p>&nbsp;</p><p>最大的问题是：计算机程序能否在没有任何隐藏逻辑的情况下生成真实的随机数，并让随机数变得不那么随机？毕竟，计算机程序没有旋转桨，不会射出球，它们只是在计算机上运行的人造程序。</p><p>&nbsp;</p><p>例如，C++提供了库头文件和rand()函数。这个库的目的是帮助我们生成随机数，或者我们可以称之为“伪随机数”。为什么是伪随机数？因为使用rand()生成的“随机”输出并不是真正随机的。如果我们在创建随机数时使用rand()进行迭代，然后对结果进行统计检验，我们可以看到，在经过几次迭代后，生成的数字没有通过统计检验，因为一些“随机”结果很容易预测。</p><p>&nbsp;</p><p>一位名叫<a href=\"https://arvid.io/2018/07/02/better-cxx-prng/\">Arvid Gerstmann</a>\"的企业家开发了他自己的随机数生成器，它更加的随机。在《学习C++》一书中，我们使用这个库开发了一个迷你字符串混淆工具。</p><p></p><h4>像洗牌一样搅乱它们</h4><p></p><p>&nbsp;</p><p>在进行混淆时，我们会搅乱各种元素，如字符串、函数等，因此它们的顺序将（几乎）是随机的，如果有人试图破解你的代码就变得更难。我们可以搅乱过程想象成洗牌，让它们按照随机的顺序混合在一起。我们对将要生成的函数做同样的处理。</p><p>&nbsp;</p><p>洗牌就是随机地（或几乎随机地）改变一些元素的顺序，使得攻击者更难分析和逆向工程我们的代码。解码混淆数据的方法之一是检查逻辑顺序以及何时搅乱的顺序，但混淆数据的顺序是很难被猜测到的。当然，我们的目的不是改变行为代码，只是打乱单独模块里的元素。</p><p></p><h4>用公式替换值</h4><p></p><p>&nbsp;</p><p>另一种混淆方法是用不同类型的公式随机地替换值，如x=z-y或z=y+z。假设我们有一个值72，我们可以用100-28或61+11替换这个值。当公式为x=z-y时，我们需要z是随机的，但大于y。换句话说，我们将把这个随机生成的公式插入到生成的源代码中，而不是使用原始值。</p><p>&nbsp;</p><p>图3显示了当我们插入随机公式时，混淆的代码是什么样子的。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/56/56613b52802685506930da0523a8deab.png\" /></p><p>图3. 使用不同类型的公式（如x=z-y或z=y+z）随机地替换值。</p><p></p><h4>添加“垃圾”数据</h4><p></p><p>&nbsp;</p><p>隐藏代码内容的另一种方法是在真实数据中随机地添加垃圾数据，这样会让解析和反向工程变得更加困难。举个例子，我们假设result是一个以NULL结尾的数组——我们把NULL放在字符串的末尾，垃圾放在NULL后面。使用这个方法的混淆字符串看起来像这样：</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/40/40665d9217c34875e68546854eb8083f.png\" /></p><p></p><p><code lang=\"java\">result[12] = L’$’;\nresult[0] = L’t’;\nresult[5] = L’5’;</code></p><p>&nbsp;</p><p>现在，假设我们以随机顺序分配真实字符和垃圾字符，那么我们可能从char[12]开始，然后是[0]，然后是[5]，并以此类推，这使得理解这个过程和结果变得更加困难。</p><p>&nbsp;</p><p>记住：混淆代码的效果取决于它最薄弱的环节。我们要经常测试它们，试着去反向工程它们。反向工程难度越大，混淆的效果就越强。</p><p>&nbsp;</p><p>提示：混淆的代码很难维护和更新。因此，建议在部署新版本之前，先维护好非混淆的版本，然后对其进行混淆处理。</p><p>&nbsp;</p><p>在讨论了代码混淆背后的一些一般性概念之后，在下一小节中，我们将介绍一款名为Tiny Obfuscate的字符串混淆工具，它有两种工作模式：即时模式和项目模式。</p><p></p><h2>Tiny Obfuscate</h2><p></p><p>&nbsp;</p><p><a href=\"https://www.securedglobe.net/tinypbfuscate\">Tiny Obfuscate</a>\"是Michael Haephrati使用C++开发的一款Windows应用程序，最初是在<a href=\"http://www.codeproject.com/\">Code Project</a>\"的一篇<a href=\"https://www.codeproject.com/Articles/1210398/TinyObfuscate-A-Tiny-String-Obfuscator-for-C-Cplus\">文章</a>\"中作为一个概念证明示例，它可以用来将给定的字符串转换为生成这个字符串的代码行。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/bf/bfd8cc573fe69b862ece236f3c358008.png\" /></p><p>图4. Tiny Obfuscate最初的界面</p><p>&nbsp;</p><p>你输入字符串和变量名，就会生成代码行，你可以将它们复制到程序中并替换原来的字符串。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/72/720c414e35cbee1d66667b19c9fdec5c.png\" /></p><p>图5. Tiny Obfuscate高级付费版的界面</p><p>&nbsp;</p><p>一些商业产品使用了更高级版本的Tiny Obfuscate。高级版有“项目模式”和“即时模式”。即时模式类似于文章中使用的原始版本，但有更多的功能：</p><p>用户可以选择字符串的类型（UNICODE或宽字符、常量等)。混淆的代码被封装在生成的新函数中。可选：在没有检查是否已经有一个函数混淆了给定字符串之前将函数代码和原型被插入到给定的.cpp和.h文件中。函数调用被复制到剪贴板（如果给定字符串之前被混淆了，可以是新生成的函数，也可以是现有的函数），因此用户可以直接粘贴它，而不是粘贴给定的字符串。自动测试生成的函数，验证它是否会返回给定的字符串。处理各种控制字符和转义字符，如\\n、\\t、%s、%d等等。自动添加注释，方便跟踪被混淆的原始字符串以及什么时候被混淆的。</p><p>&nbsp;</p><p></p><h2>示例</h2><p></p><p>&nbsp;</p><p>我们用下面的例子来测试字符串混淆是如何工作的。假设我们有下面这行代码。</p><p><code lang=\"java\">wprintf(L\"The result is %d\", result);</code></p><p>&nbsp;</p><p>现在，我们想要混淆这个符串，在本例中就是“The result is %d”。我们将这个字符串输入到即时模式的“String to obfuscate”输入框中。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c0/c0495bb8222d16b383ec374a17a893cb.png\" /></p><p></p><p>&nbsp;</p><p>然后按下“Enter”，就会看到下面这样的弹出框。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f0/f05ef187ab834d9a68d9f5d52d224014.png\" /></p><p></p><p>同时会出现下面的代码（并插入到项目的源文件和头文件中）。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/a1/a19d251d596a99d36ad5d577a4624ad2.png\" /></p><p></p><p>在项目模式下，我们可以选择Visual Studio解决方案或项目，浏览所有源文件，选择要混淆的内容（变量、函数名、数值和字符串），预览结果，然后检查混淆的项目，并交互式地选择和取消每个元素，以获得最佳的混淆结果。</p><p>&nbsp;</p><p>Tiny Obfuscate高级版会生成并维护一个sqlite3数据库，记录所做的事情，并可以恢复到原始版本，以及撤消所做的任何操作。</p><p></p><h2>结论</h2><p></p><p>&nbsp;</p><p>在本文中，我们介绍了代码混淆的概念，主要是关于字符串混淆。如果你想要深入了解，可以参考我们的《<a href=\"https://www.manning.com/books/learning-c-plus-plus\">学习C++</a>\"》（ISBN 9781617298509，作者<a href=\"https://www.linkedin.com/in/michaelhaephrati/\">Michael Haephrati</a>\"和<a href=\"https://www.linkedin.com/in/ruth-haephrati/\">Ruth Haephrati</a>\"，由Manning出版社出版）一书。在这本书中，我们向初学者教授C++编程语言的基础知识，并逐步帮助他们建立技能，开发出最终的项目：创建一个紧凑而强大的字符串混淆处理工具。</p><p></p><p>作者简介：</p><p>Michael Haephrati是Secured Globe公司的联合创始人兼首席执行官，他与他的妻子Ruth Haephrati于2008年成立了这家公司。Michael是一位音乐作曲家、发明家，也是一位专门从事软件开发和信息安全的专家。凭借超过30年的经验，Michael形成了一个独特的视角，将技术和创新结合起来，十分注重终端用户体验。多年来，Michael为不同的客户领导开发了创新项目和技术。他是<a href=\"https://www.manning.com/books/learning-c-plus-plus\">《学习C++》</a>\"一书的作者，该书由Manning出版社出版。</p><p>&nbsp;</p><p>Ruth Haephrati是Secured Globe公司的联合创始人兼首席执行官，她与她的丈夫Michael Haephrati于2008年共同创立了这家公司。Ruth是一名作家、演讲者、企业家、网络安全和网络取证专家。在过去的25年里，Ruth一直在一些领先的公司工作，比如微软和IBM，她既是一名顾问，也是一名C++程序员。她最近参与了为一个国际客户开发先进反恶意软件技术的工作。在业余时间，Ruth是一名插画家、画家、野生动物摄影师和世界旅行家。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/anatomy-code-obfuscation/\">https://www.infoq.com/articles/anatomy-code-obfuscation/</a>\"</p>",
    "publish_time": "2022-12-03 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "2022 亚马逊云科技 re:Invent：一图看尽 Day 4 重要发布",
    "url": "https://www.infoq.cn/article/CEwgGzm5dMuVGJacN6ag",
    "summary": "<p></p><p><img src=\"https://static001.infoq.cn/resource/image/28/e3/286200d1db15269af8b5e31d14bba8e3.jpg\" /></p><p></p>",
    "publish_time": "2022-12-03 10:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "re:Invent 众多新发布，到底哪款才是开发者心中的Top1？",
    "url": "https://www.infoq.cn/article/J72xYA6ytqwuSrX2zOsW",
    "summary": "<p>一年一度的 re:Invent 是每年亚马逊云科技新服务/新功能发布的集中地，今年又有数十款产品重磅发布，不少代表性的产品也进行了大幅的性能升级。哪款服务是最受开发者关注的呢？</p>",
    "publish_time": "2022-12-03 12:36:28",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "有些代码可以少写，它们未必会是你的未来",
    "url": "https://www.infoq.cn/article/wYhCKfgNMY0UXt4cUWlf",
    "summary": "<p>11 月 16 日，亚马逊副总裁兼 CTO <a href=\"https://www.allthingsdistributed.com/about.html\">Werner Vogels</a>\" 发布了一篇名为《分布式计算宣言》的文章，为人们揭示 24 年前的亚马逊研发团队，是如何在业务发展、架构迭代面对巨大阻力时，思考引入 SOA 架构和分布式思想，完成自我“革命”的。读罢令人感叹，每一个开发者都希望获得成就感，去做一些真正有创造力的工作，做一些 24 年后仍然令 CTO 引以为豪，并转述给百万开发者的工作，而不是把时间和精力消耗在写千篇一律又无法复用的“胶水”代码，或是在越来越复杂软件栈面前，疲于奔命地写业务流程并尽量减少 Bug。</p><p></p><p>更加不堪的是，有时仅仅是因为同一项目的两个成员使用的库版本不同，我们就不得不消耗大量的精力去解决冲突。当然，那些成功的团队和开发者往往也处理过同样的问题，但这种成就感的到来未免门槛过高。</p><p></p><p>不过，在太平洋时间 12 月 1 日的 <a href=\"https://www.awsevents.cn/reInvent2022/?s=7982&amp;smid=14997\">re:Invent 大会</a>\"上，Werner 展示了另一种可能 —— 一名开发者可以把精力放在更有价值的工作，而不必重复低效的劳动，在一系列 Serverless 工具的帮助下，一些代码可以少写，因为未来你可能再也不需要写它们了。如果我们抛开它们作为商业软件的盈利属性来看，这恐怕是自云原生理念普及以来，最能利好开发者的产品发布。</p><p></p><h2>自动化创建状态机和工作流，并彻底干掉“胶水”代码</h2><p></p><p></p><p>对有限状态机最简单的理解是“if……else……”，但代入到负责研发场景里时，要实现有限状态机可不那么简单。</p><p></p><p>英国卫报是世界最大的英文媒体之一，在全球拥有几十万订阅用户，每周至少要为 60000 名用户准时送达订阅信息。不管支撑英国卫报的软件系统是如何构建的，可以确定的是，这里一度存在相当多的技术问题 —— 卫报的高级开发经理 Paul Brown 曾在采访中提到，卫报主数据库系统和所有第三方系统之间的数据流编排非常困难，且系统之间相互依赖，一个系统出问题就会产生连锁反应。如何编排所有分布式系统，保证报纸的正确、及时交付，变成了一个棘手问题。</p><p></p><p>马修国际旗下的一家子公司 SGK 遇到的则是另一个技术问题——他们要为甲方交付 ETL 管道，但是需要每天至少刷新两次输出数据，因此要跨多个数据库进行数据管理和复制；其交付数据的业务规则在不断更新；需要集成来自 10 多个不同数据源的输入数据。每个数据源大概有 1–20K 行，85 列。如何搭建 ETL 管道，又变成了一个棘手问题。</p><p></p><p>这两种问题有一个共性，单纯用状态机做一个订阅流程或是 ETL 或许不难，但放在具体场景中则要考虑太多因素，且要承担系统维护的责任。Amazon Step Functions 最初诞生时，就是为了解决类似的问题，通过可视化拖动云服务的方式，构建事件驱动的工作流 —— 你当然可以选择从头 coding，但也可以拖一拖搞定这个事。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/a7/a755592cf5987941feea984613af1613.png\" /></p><p></p><p>为流式数据构建数据处理管道</p><p></p><p>这听起来很性感，但实际能支撑的并发工作复杂有限，一次有效的最大并发数仅为 40，另外仅接受 JSON 数组作为输入源，整体还是比较受限的。本次<a href=\"https://www.infoq.cn/topic/AWS%20re:Invent\">re:Invent发布</a>\"的AmazonStepFunctionsDistributedMap重点搞定了并发问题，从40提升到 10000，让 Step Functions 真正变得通用。下图为新老 Distributed Map 的一些关键数据对比：</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/0b/0b0f1164dab2e5a532e8a9d31864c1c1.png\" /></p><p></p><p>表格作者：Sébastien Stormacq</p><p></p><p>在 Keynote 中，Werner Vogels 多次以“异步”、“事件驱动”等关键词来描述 Amazon Step Functions Distributed Map 的设计理念，但对于开发者来说，可能更吸引的人是，如果你已经会写 ETL ，那就可以少做一些重复工作，多去考虑一些能给业务、技术架构带来增量的研发工作。</p><p></p><p>除了烦人的业务流程外，另一个降低研发效率的工作是写“胶水”代码。所谓“胶水”代码，就是指互不兼容的模块间（接口不同、语言不同等），需要写一些代码做连接才能正常工作。这类代码对业务没有任何价值，纯粹是软件工程的副产品。</p><p></p><p>相信 Werner Vogels 和<a href=\"https://www.infoq.cn/topic/AWS\">亚马逊云科技</a>\"是看到了对这一问题的反馈，所以才发布了 Amazon EventBridge Pipes 这一产品 —— 它是 Amazon EventBridge 的一项新功能，提供针对生产者、消费者的点对点流程，自动完成模块集成，不需要编写“胶水”代码。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/70/70cc423f145bd89b1eece2d9fe579cf3.png\" /></p><p></p><p>这个点对点流程的创建，需要重点考虑事件源、事件目标两个主要问题。</p><p></p><p>事件源发布时，Amazon EventBridge Pipes 支持以下服务作为事件源：Amazon DynamoDB、Amazon Kinesis、Amazon MSK 、Apache Kafka、Amazon SQS（标准和 FIFO）和 Amazon MQ（均用于 ActiveMQ 和 RabbitMQ）等。</p><p></p><p>事件目标则包括：AWS Lambda、Amazon API Gateway、Amazon SNS、Amazon SQS 和 AWS Step Functions 等。</p><p></p><p>尽管现在在行业内的应用情况有待检验，但 Amazon Step Functions Distributed Map 和 Amazon EventBridge Pipes 实际传达了一种趋势：类似的服务在未来几年可能会越来越多，越来越成熟，告别低价值代码这件事是绝对靠谱的，云原生时代开发者的技术栈需要做相应的调整。</p><p></p><p>如果在未来，我们可以不用处理经常见到的业务流程或 ETL 流程，也不用写“胶水”代码，那将有大量的时间可以来思考业务、架构及流程本身的合理性。</p><p></p><p></p><h2>避免更糟糕的时间浪费</h2><p></p><p></p><p>如本文开头所提，比起写一段 ETL 代码，或是写一段模块集成代码，更糟糕的是，将时间消耗在协作问题而非技术问题上。</p><p></p><p>这年头各企业的业务压力永远越来越大，需求能三天上线就不会拖到一周，大部分时间里可能不会有工程设计这个概念，中间遇到的各种协作问题只能是“在起飞的过程中换轮胎”。</p><p></p><p>所以当 Werner Vogels 在本次 re:Invent 上发布 Amazon CodeCatalyst 时，台下的掌声十分热烈。</p><p></p><p>Amazon CodeCatalyst 的功能包括：</p><p></p><p>项目资源蓝图——不仅是新项目的脚手架，还包括支持软件交付和部署所需的资源统一开发环境，保持项目组环境一致管理 issue、pr、部署跟踪等CI/CD显示项目仪表板通过一封电子邮件即可邀请他人就项目进行协作统一搜索，跨用户、问题、代码和其他项目资源检索内容</p><p></p><p>这里的资源蓝图包括启动代码、示例代码和云服务相关配置的最佳实践，其他几项也都是软件研发项目管理的必需品。另外一大特色在于 CodeCatalyst 本身集成的第三方工具是高度灵活的，是不是要用 GitHub 和 Jira，完全和团队的习惯有关。Werner Vogels 说，可视化是亚马逊云科技提供服务的一大特点，而大部分开发者应该也认为可视化是个让人十分心安的标签。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/42/424fbe059d94666b41b2a8f22990336c.png\" /></p><p></p><p></p><h2>Serverless 是所有构想的核心</h2><p></p><p></p><p>回过头看，无论是 Amazon Step Functions Distributed Map 还是 Amazon EventBridge Pipes， 其核心始终是 <a href=\"https://www.infoq.cn/topic/serverless\">Serverless</a>\"，是 Lambda 这一产品本身。</p><p></p><p>Lambda 在 2014 年的发布，虽然展示了亚马逊云科技对 Serverless 愿景理念的深度洞察，但不可否认的是，当时的 Serverless 技术仍存在问题。直到本次 re:Invent，Serverless 的冷启动速度得到大幅优化，大数据核心产品全面 Serverless 化完成，才宣告 Serverless 技术发展的又一里程碑到来，云产品全面 Serverless 化只余时间问题。</p><p></p><p>而 Serverless 从技术、产品两个方面的成熟，也直接为以上发布铺平了道路。试想如果这些产品不是围绕 Serverless 技术来进行设计的，那么所有构想都将成为灾难 —— 没人能够忍受自动化创建业务流程的同时，还要关心服务器的配置问题。</p><p></p><p>这不只是在说 Serverless 技术好不好用，也是在说创新的门槛到底是高是低 —— 如果你有了一个创意，Serverless 是最简洁的实现和验证手段，降低 Serverless 的使用门槛，就是在降低企业内的创新门槛。而亚马逊是一家尤其关注创新的企业，因此，Application Composer 应运而生。</p><p></p><p>Application Composer 的特点，在于可以帮助生成部署就绪的项目，例如 IaC 定义文件和 Lambda 函数代码脚手架。</p><p></p><p>在传统开发工作里，配置 Serverless 服务需要理解 IaC （基础设施即代码）的概念，并写一些机器可读的定义文件。这个概念作进一步延展，就变成了“基础设施可编程”，听起来是比较吓人的。</p><p></p><p>Application Composer 无疑大大降低了开发者内心对 Serverless 技术的畏惧程度，某种程度上也就是加速了企业的创新速度 —— 当然，这也需要企业充分理解云理念，并对云原生相关技术有相对成熟的运用经验。</p><p></p><p></p><h2>3D 世界的构建正成为主流</h2><p></p><p></p><p>在 Keynote 的末尾，抬头看路，Werner Vogels 给出一个大胆判断：未来 3D 会像视频一样普及。</p><p></p><p>去年，亚马逊发布具有 3A 游戏开发能力的开源游戏引擎 Open 3D Engine（O3DE）。O3DE 的核心特色是高度灵活的模块化功能，适合做 3A 级网游，完全免费，支持到位、更新简单。保证模块化功能的核心是带有源码和资源的 Gems 系统，不需要的功能可以完全不编译，极大提升了灵活性。</p><p></p><p>因此在发布后，O3DE 立即引起了热议。</p><p></p><p>究其根本，O3DE 其实是亚马逊的 Lumberyard 的继承者，Lumberyard 引擎是 2016 年亚马逊与德国著名引擎技术开发商 Crytek 达成的一项交易，彼时深陷财务危机的 Crytek 以具体数字不详（传闻为 5000 万 -7500 万美元）的价格向亚马逊完整授权了 CryEngine 的所有代码，而 Lumberyard 便是 CryEngine 经过修改的免费版本。</p><p></p><p>到去年年底，开放 3D 基金会 (O3DF) 宣布推出 O3DE 的第一个稳定版本，这是一个 Apache2.0 许可的多平台 3D 引擎，可让开发人员构建 AAA 级游戏、用于视频制作的电影级 3D 世界，以及不受许可费或商业条款影响的非游戏使用案例模拟。</p><p></p><p>而本次 re:Invent 上的最后一个发布，也与 3D 有关 —— Amazon SimSpace Weaver。Amazon SimSpace Weaver 是一种全新的完全托管仿真服务，可帮助用户在云中部署大规模空间模拟。借助 SimSpace Weaver，用户可以创建具有数百万个对象的无缝虚拟世界，这些对象可以实时相互交互，而无需管理后端基础设施。</p><p></p><p>结合去年发布的 Amazon IoT TwinMaker 来看，当下的 3D 技术脱胎于游戏，但已不止于游戏，以 SimSpace Weaver 为例，数百万个对象，已经对以智慧城市为典型的行业应用产生实际助推作用。</p><p></p><p>对智慧城市的建设仍然只是未来畅想的第一步，计算的未来在于对物理世界的极致模拟。当下的“绿色科技”，对于全世界都是一个挑战，那么应该如何最高效地应用技术手段达成“碳中和”？量子计算或许是关键一环。Werner 以八年前他在夏威夷和 Terraformation 公司的讨论作为案例来解释这一问题。</p><p></p><p>大规模种植林木是实现“碳中和”的直接手段，但如何高效经济地种植出一座森林，则是个复杂问题。模拟仿真，可以让我们这座森林未来的状态、规模、效用以及内部生态系统的变化有更明确的认知，但整体计算量将是恐怖的，量子计算机比经典计算机更适合这种仿真需求。</p><p></p><p>如果将问题迁移到生命科学、材料科学，全面深入分子结构，计算量将以指数级增长，可能会迅速超过行业的算力储备，量子计算机的优势会变得更加明显。这也是为什么量子计算能成为当今学术研究的主流 —— 我们可以通过量子计算机彻底迭代计算能力和模拟能力，而不是通过算法研究做有限的迭代和逼近。</p><p></p><p>Werner 在演讲的最后以量子计算为核心，展望了将物理世界数字化的可能与前景。他提及亚马逊云科技量子计算中心学者、世界知名的量子信息科学先驱人物 John Preskill 在 Youtube 已有许多优质视频发布，阐述了利用量子计算来解决行业难题的思路和方法，并热情地推荐大家也去了解了解。</p><p></p><p>这样看来，尽管量子计算如今仍处于研究的早期阶段，但应用思路已经具备，前景是明朗的。从研发基础设施到 3D 仿真 ，再到量子计算，形成了一条清晰明朗的未来科技演进之路。</p><p></p><p>这是本次 re:Invent 带给我们的另一重惊喜。</p><p></p><h2>与开发者一起构建未来</h2><p></p><p></p><p>亚马逊云科技 Heroes 项目是<a href=\"https://dev.amazoncloud.cn/#\">社区</a>\"最重要的组成部分之一，该项目表彰了全球充满活力的亚马逊云科技专家群体，他们对知识分享的热情在社区中产生了真正的影响。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/93/930b4bac9bddee487b6a3e87dd9404bc.png\" /></p><p></p><p>亚马逊云科技的 Heroes 能够以各种方式分享知识，包括通过社交媒体、博客文章、开源项目、视频和论坛进行在线分享，或亲自参加会议、研讨会和用户组活动。</p><p></p><p>在此次 re:Invent 2022 大会中，Heroes 的身影无处不在。Werner Vogels 博士也在 Keynote 演讲中提到：“对于开发者而言，除了可以在亚马逊云科技为了帮助开发者成长提供的 500+ 精心打造的课程中进行学习外，向你身边的技术专家请教也会是一个很好的方式。”</p><p></p><p>亚马逊云科技今年也重大发布了<a href=\"https://dev.amazoncloud.cn/reinvent2022?sc_channel=infoq\">中国开发者官网</a>\"，提供一站式平台，帮助开发者学习成长及交流并链接全球技术资源，助力开发者使用亚马逊云科技获得成功，与开发者一起构建未来。</p><p></p><p></p><p>在亚马逊云科技<a href=\"https://dev.amazoncloud.cn/reinvent2022?sc_channel=infoq\">开发者社区官网</a>\"，我们发布了关于本次 re:Invent 更全面的信息资讯。</p><p></p>",
    "publish_time": "2022-12-03 13:27:10",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "re:Invent 众多新发布，到底哪款才是开发者心中的Top1？(1)",
    "url": "https://www.infoq.cn/article/J72xYA6ytqwuSrX2zOsW",
    "summary": "<p>一年一度的 re:Invent 是每年亚马逊云科技新服务/新功能发布的集中地，今年又有数十款产品重磅发布，不少代表性的产品也进行了大幅的性能升级。哪款服务是最受开发者关注的呢？</p>",
    "publish_time": "2022-12-03 12:36:29",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "云计算如何再创新？各行业专家们来了一次思维碰撞！",
    "url": "https://www.infoq.cn/article/rGqlwUQUfyIFPZxtwH3z",
    "summary": "<p>re:Invent Day 4，亚马逊云科技高级副总裁 Werner Vogels 强调了创新和新兴技术对构建颠覆性系统的重要性。</p>",
    "publish_time": "2022-12-03 17:54:18",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]