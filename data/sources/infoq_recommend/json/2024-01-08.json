[
  {
    "title": "老架构师总结的12个软件架构陷阱 ｜ 避坑指南",
    "url": "https://www.infoq.cn/article/TUTLdsEvSyUr9H1bmD3b",
    "summary": "<p>开发成功的软件架构虽简单，但并不容易。理解 QAR（质量属性需求）并做出最大程度满足 QAR 的权衡需要洞察力和经验，其中很大一部分必须通过对架构本身的迭代实验来获取。这个过程本身很简单，但需要权衡的地方往往很棘手，而且很少有简单的答案。</p><p></p><p>对于团队来说，知道哪里有潜在的陷阱至关重要，让他们知道沿着某一条特定道路不会达到他们想要的目标。在本文中，我们将分享一些我们遇到的无用路径，希望能够更好地帮助你做出与权衡和后果相关的决策。</p><p></p><h3>1. 不要让一个人做出或影响所有决策，适当地让团队成员参与决策</h3><p></p><p></p><p>架构是各种力量之间的平衡，是一系列次优权衡的结果，这些权衡通常不会完全令人满意。想要良好的性能、良好的可伸缩性、良好的安全性、良好的可维护性和出色的可用性？祝你好运！</p><p></p><p>当一个人独自做出所有决策时，架构将反映出他们的经验、偏见和偏好。这些决策对于某些场景可能刚好合适，但往往在某些方面表现良好，在其他方面则表现糟糕。</p><p></p><p>不同经验的人，他们之间的意见交换会形成讨论，从而暴露出开发团队需要做出的竞争性权衡。由个人做出或受其影响的决策（也被称为 HiPPO，Highest Paid Person’s Opinion，收入最高的人的意见）通常是由团队中最资深的人做出的，很少能够得到所有团队成员的支持。因为担心影响工作岗位，他们可能不会公开反对这些决定，但很快他们会提出批评意见，不再为团队提供支持，甚至在这个决定造成问题时离开。</p><p></p><p>这并不意味着多数意见应该占主导地位，由委员会设计的架构往往过于臃肿和缺乏重点。根据我们的经验，多个拥有不同经验和观点的人挑战断言并达成更为明智的决策，才能达到理想的平衡。</p><p></p><p></p><h3>2. 不要为了达成可重用性目标而做出糟糕的决策，应该只在有意义时才进行重用</h3><p></p><p></p><p>重用代码、组件、设计，甚至配置，在一开始听起来是个好主意。管理层喜欢提倡这个概念，认为这会降低成本，甚至可以实现更快的交付和更高的质量。团队可能会为了更快地交付 MVP 决定重用大部分已有的应用程序，甚至重用已成功交付了产品的架构。</p><p></p><p>如果重用的是函数，很容易取得成功，因为函数的范围很狭窄，副作用有限，因此可以在不同的上下文中使用。不幸的是，重用的预期好处很少能够兑现，至少在架构层面上是这样，因为架构所做出的广泛而基本的假设很难适应不同的上下文。</p><p></p><p>除非新架构的 QAR 与现有架构的 QAR 相匹配，否则重用现有架构很少能取得成功。过去的表现并不能保证未来的成功！通过重用现有应用程序的部分内容来快速实现 MVP 可能会因为设计中包含了遗留技术而限制了相关的 MVA。通过扩展现有组件来实现重用可能会使设计复杂化，并使它们的维护变得更加困难和昂贵。</p><p></p><p>在评估可重用性时，问问自己这样做是否会使你的架构变得更加复杂。如果是这样，为了完全满足你的需求，你最好自己重新编写。</p><p></p><p></p><h3>3. 不要裁掉有解决架构挑战经验的人，要留住他们并在必要时重新培训他们</h3><p></p><p></p><p>管理层着迷于降低成本，有时候会通过奖金激励管理者将成本降低一定比例。他们深信软件开发技能是一种商品，他们可能会被低成本供应商可以提供与具有多年或数十年经验的团队成员相同的技能的承诺所诱惑。</p><p></p><p>有时候这是真的。正如一位前同事曾看到的，拥有十年经验和将一年经验重复十次之间有很大的区别。换句话说，软件开发中真正的技能不在于编码，也不在于语法知识，也不在于熟悉特定一套框架——软件开发的重点是解决问题。</p><p></p><p>架构工作是一项解决问题的工作，在解决特定类型的问题时，还需要具备能够根据经验做出权衡的额外技能。没有解决架构问题经验的开发人员也会学习，但他们在学习之前会犯很多错误。与其假设你需要的只是聪明人（不管他们的经验如何），不如雇佣或留住那些已经经历过学习周期的人，这样更为划算。</p><p></p><p></p><h3>4. 不要让业务决策主导架构，架构决策应该要满足明确的 QAR（质量属性需求）</h3><p></p><p></p><p>业务决策通常具有短期性质：季度和年度计划周期往往主导着业务决策。那些专注于未来而牺牲当前业绩的高管往往无法在自己的职位上呆上足够长的时间，看到自己的长期梦想得以实现。</p><p></p><p>软件架构不一样。虽然即时结果很重要，但企业在构建系统方面的投入通常需要数年才能达到收支平衡，而许多系统的寿命可长达几十年。虽然企业希望立竿见影，但它也负担不起每隔几年就要构建一个新系统来解决某个特定问题的费用。</p><p></p><p>然而，业务有时会试图介入架构决策，通常是因为他们最近读到了一些关于“区块链是新生事物”或“生成式人工智能将改变一切，不跟进的公司将被抛在后面”的文章。技术确实以颠覆现状的方式创造了公平的竞争环境，但从来不是像专家们所预测的那样。</p><p></p><p>虽然新技术提供了有趣的功能，但它们总是伴随着权衡和意想不到的副作用。新技术并不能从根本上或神奇地使满足 QAR 变得不重要或微不足道。在许多情况下，新技术满足 QAR 的能力是完全未知的。这就是处理架构问题经验的重要性所在：知道在哪里以及如何提出正确的问题，并且知道如何设计实验来获得这些问题的答案。</p><p></p><p></p><h3>5. 不要为了更快交付而牺牲质量，应该在保持架构可行性的同时管理好技术债务</h3><p></p><p></p><p>最小可行产品（MVP）及其相关的 最小可行架构（MVA） 之间总是存在紧张的关系。MVP 的目的是测试解决方案是否改善了客户 / 用户体验。MVA 的目的是确保 MVP 可以在经济和技术层面得到持续的支持。如果 MVP 没有价值，那么在 MVA 上的投入就浪费了，但如果 MVA 不可行，MVP 也毫无意义。</p><p></p><p>过于专注于 MVP 的组织可能会发现，他们的用户满意度不高，虽然他们喜欢产品背后的理念，但对产品的糟糕表现感到失望。这为竞争对手敞开了大门，他们可以简单地复制 MVP，并随着时间的推移更有效地实现它。所谓的“先发优势”（率先推出解决方案的优势）被高估的原因在于：用户会惩罚那些提供劣质产品的公司。</p><p></p><p>随着敏捷软件开发方法和重构实践的兴起，一些组织被误导，认为速度是唯一重要的东西，因为他们总是可以在后面修复 / 重构问题。现实情况是，补救性工作的效果有限。补救性工作，即所谓的“稍后再修复”和重构，成本很高，因为团队必须花时间弄清楚代码的功能，然后才能以一种不一样且更有效的方式重写它。重构或使用敏捷软件开发方法并不能从根本上降低工作的复杂性。</p><p></p><p></p><h3>6. 不要为了完善架构而延迟交付（和反馈），应该利用你所掌握的信息来设计架构，并利用反馈来改进它</h3><p></p><p></p><p>前面的部分可能会让一些读者相信，软件开发团队应该小心翼翼，永远不要发布有缺陷的架构。但这也不是一个好的策略。没有哪个架构是完美的，它由一系列不完美的权衡决定的，其中一些甚至是错误的，在系统运行之前无法识别出来。有时在系统运行时也无法知道，直到发生了异常情况。认为架构可以完美无缺，一劳永逸，这是一种危险的心态，它会阻止团队开发出能够适应未预见需求的弹性和可适应性架构。</p><p></p><p>“超前大架构”综合症对系统来说往往是致命的。在设计系统之前，不可能确定所有的架构需求。这并不是说我们要反对构建初始架构，毕竟一切都需要从一个起点开始。但基于当前你所掌握的信息来构建初始架构，然后利用反馈进行改进，比为了获得新信息而不断延迟初始发布要好。</p><p></p><p>需要注意的是，再多的评审会议也不能代替实际构建至少部分架构并在各种条件下进行测试来评估其适应性。评审会议，即使由经验丰富的架构师主持，也只能发现与会者以前经历过的问题，并不能发现应用新技术时可能出现的新问题。</p><p></p><p></p><h3>7. 不要让功能需求驱动架构，架构应该由现实的 QAR（质量属性需求）驱动</h3><p></p><p></p><p>每个人都认为需求很重要，因此大多数开发团队花费大部分时间开发满足功能需求的解决方案。处理功能需求相对直接，因为业务利益相关者通常非常清楚他们想要什么，但他们往往难以清晰表达质量属性需求。</p><p></p><p>不幸的是，良好的架构设计是由明确定义的质量属性需求驱动的，仅使用功能需求来设计软件架构会导致软件产品可能缩放性不佳、在高负载下可能性能不佳，或者难以持续保持弹性。如果开发团队只专注于功能需求，其架构解决方案很可能不足以满足用户的实际需求。</p><p></p><p></p><h3>8. 不要复制别人成功的架构，要根据你自己的 QAR（质量属性需求）来设计架构</h3><p></p><p></p><p>一些热门的文章和技术大会演讲会分享大公司或某些供应商使用特定方法来满足特定 QAR 的经验。这些演讲和文章分享了重要的见解，是重要的学习资源，但它们也有局限性。所谓的“最佳实践”或“架构模式”也是如此。了解别人使用某些特定的方法取得成功是有好处的，但仅仅到某个程度上。</p><p></p><p>每一个架构都是不同力量之间的平衡，是一系列在其特定上下文中有意义但通常无法很好地适应其他上下文的次优权衡。了解所涉及的力量和你自己的解决方案的可能权衡是至关重要的，因为它们可能会让你得出与其他大公司不同的结论……而你们可能都是对的。</p><p></p><p>要理解其他人的选择，你必须了解他们的上下文和 QAR。只知道他们最终做出的选择并不能告诉你太多信息。如果只基于他们的选择而不了解他们的上下文来做决定，可能会让你走上失败的道路，而不是复制他们的成功。</p><p></p><p></p><h3>9. 不要把决策外包给供应商和顾问，你要确保对架构保持可控</h3><p></p><p></p><p>复制他人架构的一个方法是将架构决策外包（或放弃）给声称具有类似经验的供应商或顾问。他们的解决方案在其他环境中可能运行良好，但你仍然需要自行评估他们的提议或想法。他们的方案有可能完美适合你的情况，但如果不适合，那就是你的问题了，而不是他们。从一开始就理解这一点可以帮助你提出更好的问题，从而做出更好的决定。</p><p></p><p>顾问可以为你的组织带来急需的专业知识和不同的视角，但他们并非无所不知，他们也有盲点。他们可以在你做决策时给你建议，但不能为你做出决策。</p><p></p><p>在不了解其质量属性需求、安全漏洞、维护问题和许可问题的情况下使用开源框架，实际上是另一种外包决策的方式。开源组件是现代应用程序的重要组成部分，但它们可能支持也可能不支持你的质量属性需求。在采用它们之前，你需要了解其创建者所做的决策以及这些决策是否适合你。</p><p></p><p></p><h3>10. 不要过于泛化架构，应该只为满足你的 QAR（质量属性需求）而设计架构</h3><p></p><p></p><p>软件架构并不具备普适性，它们反映了依赖于上下文和应用程序的权衡。满足了质量属性需求的架构就是好的架构。</p><p></p><p>有时候会感觉这还不够，似乎存在更通用的解决方案，可以解决更大范围的质量属性需求，为组织中不同类型应用程序提供通用架构。但解决更通用的问题并不会带来额外的好处，并且没有证据表明确实需要这样的通用架构。许多行业标准的第二次修订都陷入了这个陷阱，试图满足可能出现的任何可想象到的需求，并在这个过程中变得臃肿而无用。</p><p></p><p></p><h3>11. 不要一次性完成架构，而要逐步构建和测试，降低风险和浪费</h3><p></p><p></p><p>软件架构就是软件，了解它是否达到目标的唯一方法是先设定目标，然后构建部分架构，看看是否朝着这些目标取得了进展。</p><p></p><p>软件架构的目标是满足其 QAR（质量属性需求），或者至少做出一组合理的选择，让大多数人满意，因为完美地满足所有人是不可能的。架构设计的技巧在于权衡。</p><p></p><p>如果“超前大架构”遭遇失败，那是因为团队需要做出权衡所需的一些信息只能通过构建和测试架构的某些部分来获得。无论开发团队成员有多聪明或技术经验有多丰富，在设计架构时可能都需要处理他们以前从未见过的情况。因此，他们需要进行实验。</p><p></p><p>这并不意味着架构评审不重要，特别是当评审人员（比如开发团队之外的人）可能有一些可以为开发团队节省大量工作的经验时，或者他们至少可以指出一条可能值得探索的方向。出于\"如果我们想要按时交付，就没有时间进行这些架构评审\"的想法而跳过架构评审的做法通常是目光短浅的，可能会导致更多的返工。</p><p></p><p></p><h3>12. 不要只依赖内部的软件架构评审，应该尽早发布产品并获得真实的反馈</h3><p></p><p></p><p>在软件架构中，发现错误的唯一方法是将产品放到现实世界中。一旦系统运行起来，改进架构的唯一方法就是将其置于现实世界的评审之下，不受系统开发人员及其协作者社区的偏见的影响。</p><p></p><p></p><h2>结论</h2><p></p><p></p><p>我们很难明确地说什么会导致成功的软件架构，但很容易说出不会导致成功的因素，就像我们上面所概述的哪样。指望别人来定义你的软件架构或者复制他人的架构是导致无法构建成功软件架构的两个重要原因。不去考虑你自己的 QAR 也是一个原因，就像期望神奇的供应商或流程为你做好这件事一样。</p><p></p><p>可能会破坏软件架构的功能障碍几乎是无穷无尽的。我们在本文中提供的清单可以让你了解可能出问题的地方，我们希望也给了你一些处理它们的建议。毫无疑问，你还会遇到其他问题。正如我们很久以前听说过的一句话：“好的判断来自经验，而经验大多来自糟糕的判断。”</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/avoid-architecture-pitfalls/\">https://www.infoq.com/articles/avoid-architecture-pitfalls/</a>\"</p>",
    "publish_time": "2024-01-08 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "好分期云原生转型下的北极星监控体系",
    "url": "https://www.infoq.cn/article/0ZeaUhvS0PaEsS6Mf2WC",
    "summary": "<p></p><h2>1、北极星监控体系建设背景</h2><p></p><p></p><p>在互联网业务场景下，系统稳定性和可用性是至关重要的，任何故障都可能对业务产生严重影响。然而，在这样的环境中，由于业务规模庞大、系统复杂度高，当出现故障时，往往会面临排查问题效率慢的挑战。 传统的监控体系可能无法满足对复杂系统的全面监测和快速问题定位的需求，导致故障持续时间延长，影响业务运营。</p><p></p><p>主要影响故障排查与恢复效率的因素如下：</p><p></p><p>分布式系统的复杂性： 互联网业务通常采用分布式架构，涉及多个服务、多个节点，各个组件之间相互依赖。当出现故障时，需要跨足多个组件和服务，传统的排查方式往往需要逐个检查，增加了排查的复杂性和耗时。数据量庞大： 互联网业务产生的监控数据、日志数据庞大且复杂，传统方式下人工分析和筛查这些数据非常耗时。人工排查往往需要大量的时间和人力，容易遗漏关键信息，延长了故障解决的时间。实时性要求高： 互联网业务对系统的实时性要求极高，任何故障都可能导致用户感知到的服务不可用。传统的手段往往需要较长的时间来定位问题，无法满足实时性要求，从而影响业务的连续性。缺乏自动化支持： 传统方式下，排查问题主要依赖人工经验和手动分析，缺乏自动化工具的支持。随着业务规模的扩大，手动排查的效率显著降低，同时也容易受到人为因素的影响。缺乏历史数据分析： 传统方式下对历史数据的分析能力有限，难以识别潜在的系统趋势和周期性问题。这使得排查过程缺乏对系统整体性能演变的深刻理解，导致故障定位不够全面。不足的可视化支持： 传统的排查方式通常缺乏直观的可视化工具，使运维人员难以全面了解系统运行状态。可视化是快速定位问题的重要手段，而传统方式的缺乏可能导致问题被忽略或定位不准确。</p><p></p><p>随着好分期业务的快速发展，我们的服务架构也持续迭代升级，由传统的软件单体应用架构，升级到微服务架构，从单一单元拆分成相对小的、独立的服务，使我们的服务可以更快速的交付，同时降低了单点故障的风险，运维团队也相应的转为Devops模式来加速交付效率，提高交付质量。</p><p></p><p>随着服务规模的增长，架构也更加复杂，生产场景也会遇到前文所述问题的困扰，已有的监控工具缺失严重，功能薄弱，不能有效的快速发现问题或定位问题范围，排查解决问题为“自下而上”的方式，各环节分散排查是否出问题，而缺少精确定位故障发生原因的手段和工具。</p><p></p><p>与此同时好分期服务正在进行云原生、混合云架构的升级，通过多机房、混合云部署模式，进一步提升架构的容灾能力，同时借助云计算平台弹性伸缩能力，更好的平衡负载能力、安全性和成本。</p><p></p><p>随着公司业务和技术的发展，系统的复杂性提高，传统的监控方式已无法满足对系统全面、实时监控的需求。所以我们需要建设北极星指标监控体系，通过全面检监测、智能分析、实时响应等功能，为复杂的混合云微服务环境提供更高效的故障排查和性能优化手段。</p><p></p><h2>2、北极星指标体系</h2><p></p><p></p><h3>2.1&nbsp;北极星指标定义</h3><p></p><p></p><p>北极星指标(North Star Metric),&nbsp;也叫做第一关键指标&nbsp;(One Metric That Matters),&nbsp;是指在产品的当前阶段与业务/战略相关的绝对核心指标。可以帮助团队评估产品的成熟度及平台化用户规模，验证产品是否达到PMF阶段，在团队内拉齐当前产品迭代的核心目标认知。</p><p></p><h3>2.2&nbsp;北极星指标的作用</h3><p></p><p></p><p>指引未来：&nbsp;能够清晰地表明产品要传达的功能点与产品未来阶段需要优化的方向。 团队协同：&nbsp;能够让其他产品组的同事知道当前产品组内的实时进展，便于跨组的资源协同。结果导向：&nbsp;能够使我们对结果负责，即以业务效果/结果而不是业务数量来衡量团队的工作质量。</p><p></p><h3>2.3&nbsp;北极星指标的特性</h3><p></p><p></p><p>能够反映用户从产品获得核心价值能否为产品达到长期商业目标奠定基础能否反应用户活跃程度指标变好，能否预示公司在往好的方向发展是否简单，直观，容易获得，可拆解是否是先导指标，而非滞后指标</p><p></p><p>一些北极星指标示例：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/14/14f88073910d164ad6996fe3054569ed.png\" /></p><p></p><h3>2.4 北极星指标的异常才是真的“故障”</h3><p></p><p></p><p>尽可能建立业务北极星指标实时采集，围绕这些指标建设更实时、更多维度的监控策略，当业务受损时第一时间感知，能够最大限度提升故障发现速度。当底层系统异常而业务并未受损时，控制告警范围和优先级，仅从解决隐患的层面去避免升级成为故障，也可以减少无用告警的噪音，避免真正的故障事件被噪声淹没。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a1/a14b6a99d604e53acc5166fccbb76bcb.png\" /></p><p></p><h3>2.5 从影响到根因，从局部到全局，自上而下，层层下钻</h3><p></p><p></p><p>当故障发生时，通过北极星指标的异常，能够第一时间明确故障影响，对损失做出有效的评估，但进一步定位引发故障的根因，需要对该业务指标进行逐级拆分和下钻，这需要我们建立自上而下的体系。</p><p></p><p>在明确北极星指标的同时，需要明确影响该指标的业务、服务，并且需要将该关联关系通过系统管理，能够系统里显性展现，同时也可以借助于CMDB资源管理系统，将服务所依赖的其他组件、用到的各类资源，也维护到上述关联关系中。这样，在北极星指标异常构成故障时，可以通过该关联关系，去排查影响该指标的服务状态，明确故障范围，也可以进一步检查异常范围所依赖的服务和组件，逐级下钻，最终定位到引发异常的真正原因。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/df/df738077f611c3c2c518be5b6c4891be.png\" /></p><p></p><h2>3、Zeus运维平台监控系统</h2><p></p><p></p><h3>3.1 Zeus监控系统架构</h3><p></p><p></p><p>基于北极星指标体系的思想，我们以夜莺监控系统作为基础进行二次开发，结合已经建成的服务树、CMDB系统，建设了适合微财产品技术的Zeus平台监控系统。经过对比选型，我们选定Victoria Metrics作为时序性数据库，并对数据存储做了多副本冗余以解决数据安全和持久化需求，并支持更大的指标写入与读取的并发。</p><p></p><p>Zeus运维平台使用go语言自研了统一的Agent，用于作业批量下发执行、服务器初始化与服务器信息上报，监控系统系统级别指标仍然使用该统一Agent，我们对Agent做了资源 限制和自动恢复等机制，整合了所有运维的批处理操作，仅有一个Agent即可一站式解决，降低了维护复杂度也提升了稳定性。同时引入了夜莺系统Categraf方式，All in one的解决了业内常见的各类中间件指标采集，代替了维护多套Prometheus Exporter的方案。</p><p></p><p>我们为业务提供了标准化、规范化的SDK，方便业务快速接入自己的项目，自主上报各类指标。也开放了Http接口，方便公司已有的各类监控组件将自己的数据汇总到Zeus。系统的架构如下：</p><p><img src=\"https://static001.geekbang.org/infoq/0a/0a53aca5007375e903ee873cc55b2867.png\" /></p><p></p><h3>3.2 接入指标类型</h3><p></p><p></p><p>当前已完成资源层（IaaS层），平台层（或称组建层，PaaS层），应用层（SaaS层）指标采集接入，各级别监控指标包含：</p><p></p><p>IaaS层：物理机、虚拟机的CPU、内存、磁盘利用率，读写IO、网卡流量等基础系统层指标。  由Zeus统一Agent采集。PaaS层：容器节点状态、资源利用率，通过Prometheus主动拉取。Mysql、Redis、Kafka、RabbitMQ、ES、Mango等集群各类指标。由Zeus统一Agent通过Categraf方式一站式采集。SaaS层：各种由业务埋点上报指标，也可以包含技术指标，由业务通过统一Prometheus-Client SDK上报。也可以接入各类监控指标采集系统通过Http接口上报的自定义指标。</p><p></p><h3>3.3 指标与服务关联</h3><p></p><p></p><p>围绕服务树和CMDB资源归属，可以建立起所有指标与服务或者业务的关系，我们需要明确以下规范：</p><p></p><p>我们已经在服务树中定义了任何业务或服务节点的唯一标识nid，所有采集或主动上报的指标，需要符合数据格式规范的同时，必须声明该指标所属服务树节点唯一标识nid， 服务节点唯一标识查找方式如下：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e2/e2f913bbf072ef5276c61b1883b03370.png\" /></p><p></p><p>通过nid去查询该节点所关联的指标，就可以快速确定不同层级指标的关联关系，如：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f5/f5f89cb7b620ec2dd7255c6b0129d7cf.png\" /></p><p></p><p>直接可以在服务树监控信息，看到已经关联到该节点的各层指标监控图，业务服务状态一目了然。</p><p></p><h3>3.4 故障的定位</h3><p></p><p></p><p>通过上述关联，已经可以快速定位任何一个节点的异常状况，是由哪一层哪一个指标异常引起，而更高层级节点，会逐步收敛指标明细程度，直到最高公司层级，仅需要专注公司业务最重要的“北极星指标”即可，如下图（当前未完成全部指标采集，仅展示已接入业务）</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/43/437ad89b3882b10e035ee24c590189b5.png\" /></p><p></p><p>任何上层指标的异常，会导致该节点状态异常，会在服务树节点上由绿色的健康状况，变化成为橙色的Warning或红色的Alarm状态，方便技术与业务同学快速感知异常信息，只需要逐级展开服务树节点，就可以层层下钻，逐步确定故障范围，排查故障原因。示例如下：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1a/1aa10a7d7530dd20a1677adbbbdbc896.png\" /></p><p></p><p>可以看到，上层节点服务异常，通过下钻，可以快速的定位到该业务某些接口流量突增导致接口响应时间上升，问题定位快速直接。仍然可以继续展开，精确定位到异常的具体APP，和该APP所依赖的底层数据库等组件的负载水位信息。</p><p></p><h3>3.5 监控策略与告警</h3><p></p><p></p><p>在Zeus运维平台， 可以直接打开监控平台独立的页面，根据登陆人的角色，可以看到自己拥有权限的服务树节点对应的监控页面，即可去修改监控阈值，或增加自定义监控项：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c6/c69c6c67b46369716461cd3858a810bf.png\" /></p><p></p><p>我们会逐步完善监控的标准化模板，力求做到新服务上线，即可自动配置个层级的基础监控，基本完成一个服务所需要的各类基础监控，包含但不限于：资源利用率、水位线、重要接口的状态码与响应时间、所依赖的数据库、Redis、消息队列等组件状态等等。通过规范化自动化最大化降低研发在监控层面的投入，仅需要去特殊定制额外需要关心的自定义监控项即可。</p><p></p><p>同样，在监控平台页面可以去查看任何节点的异常告警信息。不同级别的告警，就会在服务树上表现为不同颜色的节点健康状态。并且我们已经在服务树上将组织架构的人员信息和角色做了规范化管理，不同级别的告警，也会根据其重要程度，发送给应该通知的人。后续会上线告警回调机制，也就是告警需要值班人认领，超时无人认领的高级别告警，会逐级升级通报给服务树上层和更高权限的角色，直到告警被响应或恢复，做到重要遗产不漏报。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8d/8d8bfb579c13a5b0b55e2eb790248240.png\" /></p><p></p><h2>4、监控系统的规划</h2><p></p><p></p><p>目前Zeus监控系统仅完成一期上线，在已有的功能完善、新功能开发、稳定性优化等方面，仍然需要大力投入，持续建设和运营，在接下来主要会围绕以下几个方面推进。</p><p></p><h3>4.1 进一步完善资源归属</h3><p></p><p></p><p>当前各类中间件的归属信息，梳理的不够精细，大部分数据库集群是使用信息，仅能精确到实例所归属的业务这一层级，在服务树上表现为关联到第三层级，而问题的精确定位和告警，需要业务配合，将各自服务所使用到的各类组件信息补充完整，我们会提供方便汇总上述信息的工具，也会通过Agent主动探测资源归属的信息，将更加精确的关联关系信息，管理到CMDB系统中，全面打通监控体系。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4e/4ebfb7cab442409e1cb8a8f6ca768a42.png\" /></p><p></p><p>在深度信息补充的同时，也需要进一步推动完善广度的拓宽，也就是需要建立更多“北极星指标”的实时采集，和配套的复杂的监控机制。当前仅仅在部分业务进行了试点应用，后续需要推广到整个技术体系，这需要所有产研同学的配合和各业务负责人的支持。</p><p></p><h3>4.2 赋能SRE稳定性优化</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/1c/1c2d1ca5bbf945771b9a9de0ce893d41.png\" /></p><p></p><p>接下来运维同学会逐步转型SRE方向，去接收和负责部分业务的稳定性指标与稳定性优化工作，围绕稳定性提升，可以分为故障前、故障中、故障后三个阶段。监控系统在故障前的感知，故障中预案有效执行，以及故障后数据分析都有着非常重要的作用，所以监控系统要持续建设以下几个重要功能，赋能SRE，助力业务稳定性优化。</p><p></p><h4>4.2.1 监控策略继承</h4><p></p><p></p><p>规范化监控，需要更快速方便的管理，借助服务树的继承结构，可以通过调整上层节点的监控项，让全局或自定义范围的监控策略统一调整，更加便于告警策略的统一规范化管理。</p><p></p><h4>4.2.2 告警回调与逐级通报</h4><p></p><p></p><p>重要告警需要值班人或负责人快速认领，我们需要将这个流程产品化，而形成机制，避免因人员失误导致重要故障无感知或遗漏。借助于服务树层级和人员角色信息，监控系统可以做到重要告警信息无响应时，逐级升级通报，直到被认领或问题恢复。</p><p></p><h4>4.2.3 告警历史数据分析</h4><p></p><p></p><p>告警信息内，包含了一个故障事件的发生、止损、恢复等关键信息，而这些信息的组合就是稳定性优化最重要的切入点：MTTR（平均恢复时常）。所以监控系统可以讲告警信息提取，将故障信息的管理更加完整和高效。</p><p></p><h4>4.2.4 变更可观测 – 事件墙</h4><p></p><p></p><p>在稳定性优化方面，也存在着80%的故障是由于变更引起的“二八原则”，所有对生产环境进行变更的事件对服务造成的影响快速体现，是变更可观测方向持续提升和优化的能力，Zeus监控系统会提供统一的事件上报规范，接入各类生产环境变更事件的关键信息，在监控图中打标显性提示。当一个指标异常与一个变更事件事件重合，即可快速执行回滚操作，这在稳定性优化方面是非常有用的帮助。</p><p></p><h4>4.2.5 预案自动策略触发</h4><p></p><p></p><p>类似于事件墙对于回滚预案的触发，监控告警可以作为预案执行的触发条件，Zeus运维平台后续也要在预案管理和自动化执行方面，与监控系统结合，来建设自动化预案的能力。</p><p></p><h3>4.3 为成本运营系统提供数据</h3><p></p><p></p><p>任何业务都需要持续的做有效的成本控制运营工作，技术侧也需要不断的优化资源使用率，精简业务架构来达成技术成本的有效控制。未来Zeus平台会建设一套成本运营系统，来达到成本精确分摊归属，以成本云营为抓手，推动成本控制和预算预估的工作。</p><p></p><p>当前指标体系划分三个层级，即资源层（IaaS层）、平台层（PaaS层）、应用层（SaaS层），这在全新设计规划的成本运营系统是相匹配的，这三个层级在成本运营的方向上是上游与下游的关系，也是供给方与需求方的关系，各层级的成本分开计算，分别计算其上游的成本输入和下游的成本输出，最终得到各层级的入账减去出账的剩余利润。在做成本优化时各层级“自负盈亏”才能做到有效的优化工作。 而计算每个成本单元的出入账目时，最重要的就是资源的用量，这些用量信息，是需要借助监控系统来实时采集上报的。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f4/f42a526b470675215ccb76a2d8e319a6.png\" /></p><p></p><h2>5、总结</h2><p></p><p></p><p>为了解决在线业务发生故障时无法快速感知、快速定位以及恢复的问题，我们围绕“北极星指标”体系，设计了一套自上而下，层层下钻的监控体系，该系统与已经建设的服务树、CMDB系统为基础，基于开源夜莺监控系统，进行了大量二次开发将系统进行结合，并完成一期的功能测试和上线，已经接入到Zeus统一运维平台。</p><p></p><p>新的监控系统已经可以支持业务指标与服务、服务依赖的其他服务和在线组件关联，也可以通过服务树对上层业务指标进行下钻，逐步定位问题根因，基本实现了“北极星指标”体系的设计。</p><p></p><p>后续还需要进一步拓展接入的业务数、北极星指标数，以及进一步精细各类资源的归属信息，来提升系统在稳定性优化方向上贡献的价值。同时后续也会持续建设更多新的功能，在成本运营方向提供数据支持。</p><p></p><h4>作者介绍</h4><p></p><p></p><p>单连斌，微财数科 运维开发资深工程师</p><p>王学森，微财数科 运维负责人</p><p>吴迪，微财数科 副总裁</p>",
    "publish_time": "2024-01-08 16:39:27",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "赔光OpenAI？！研究人员：版权诉讼不休，其实大模型普遍存在“抄袭”现象",
    "url": "https://www.infoq.cn/article/bCmWrOlJEtRU3UAViZjF",
    "summary": "<p></p><blockquote>2023年12月27日，《纽约时报》向曼哈顿联邦法院提起诉讼，指控OpenAI和微软未经许可使用该报数百万篇文章训练机器人。《纽约时报》要求获得损害赔偿，还要求永久禁止被告从事所述的非法、不公平和侵权行为，删除包含《纽约时报》作品原理的训练集等。虽然《纽约时报》并未提出具体的赔偿金额要求，但其指出被告应为“非法复制和使用《纽约时报》独特且有价值的作品”和与之相关的“价值数十亿美元的法定和实际损失”负责。作为回应，当地时间1月4日，OpenAI 知识产权和内容首席 Tom Rubin 在采访中表示，公司近期与数十家出版商展开了有关许可协议的谈判：“我们正处于多场谈判中，正在与多家出版商进行讨论。他们十分活跃积极，这些谈判进展良好。” 据两名近期与OpenAI进行谈判的媒体公司高管透露，为了获得将新闻文章用于训练其大语言模型的许可，OpenAI愿意向部分媒体公司缴纳每年100万至500万美元的费用。虽然对于一些出版商来说，这是一个很小的数字，但如果媒体公司数量足够多，对OpenAI而言必然是一次“大出血”。自大模型落地应用以来，版权问题逐渐凸显。在《纽约时报》与OpenAI、微软打官司之前，已有多人指控大模型存在抄袭。而一项研究更是表明，在文本和图像生成领域，“黑盒子”大模型普遍存在抄袭现象。</blockquote><p></p><p></p><p>Google DeepMind的Nicholas Carlini与Gary Marcus等学者提出一个广受关注的重要问题，即大语言模型（LLM）到底能“记住”多少训练中的输入内容。而最近的实证研究表明，大语言模型在某些情况下的确可以重现、或者生成只包含细小差别的训练集内初始文本。</p><p></p><p>例如，Milad Nasr及其同事在2023年发表的论文就表明，大模型可能会在提示词的引导下泄露电子邮件地址和电话号码等私人信息。Carlini及其合作学者也发现，体量较大的聊天机器人模型（小模型似乎没有这个问题）有时候会直接照搬训练时见过的大段文本。</p><p></p><p>同样，《纽约时报》最近在对OpenAI的诉讼中，也强调OpenAI曾经大量照搬其原始报道的情况（下图中的红字部分）：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/31/31f8f7a9918c519a9f6489cc5b76b942.png\" /></p><p></p><p>我们将这种近乎原样照搬的输出称为“抄袭输出”，这是因为如果同样的情况发生在人类身上，那其行为就属于典型的抄袭行为。用数学语言来说，这些近乎原封不动的示例的确证明了问题的存在，但又不足以回答此类抄袭的产生频率、或者到底在哪些情况下才会出现。</p><p></p><p>这些结果无疑是强有力的证据……表明至少一部分生成式AI系统可能会在用户未直接要求的情况下生成抄袭输出，导致使用者面临侵权索赔。</p><p></p><p>这些问题之所以难以回答，就是因为大语言模型仍是一种“黑盒子”——我们无法完全理解输入（训练数据）和输出之间的关系。更重要的是，输出还可能随时发生难以预测的变化。且抄袭输出的普遍度，可能在一定程度上由模型大小和训练集的具体性质的因素决定。也正是由于大模型的这种“黑盒子”属性（无论是否开源），关于抄袭的问题只能通过实验的方式来研究，甚至可能随着模型发展而突然消失。</p><p></p><p>但必须承认，抄袭输出的存在本身引出了一系列重要问题，包括技术问题（该采取哪些措施来抑制此类输出）、社会学问题（新闻业会因此受到哪些影响）、法律问题（这些输出是否涉及版权侵犯）以及现实问题（当最终用户使用大模型生成结果时，是否需要担心侵犯版权）。</p><p></p><p>《纽约时报》诉OpenAI案就是个典型，证明此类输出的确构成版权侵犯。虽然律师们可能持不同意见，但必须承认的是，此类输出的存在和特定诉讼结果很可能决定生成式AI的未来经济效益和社会影响。</p><p></p><p>而且在视觉领域，我们也面临着类似的问题——是否可以诱导图像生成模型利用版权素材生成抄袭输出？</p><p></p><h2>案例研究：Midjourney v6中的视觉抄袭输出</h2><p></p><p></p><p>就在《纽约时报》诉OpenAI一案公开之前，我们就已经在视觉生成领域发现了类似的迹象。下面来看我们从Midjourney v6“alpha”版中摘录的部分示例。</p><p></p><p>经过一系列实验，我们发现只要提供与商业电影相关的简短提示词（见下图），Midjourney的最新版本就会经常给出大量抄袭输出。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/eb/4a/ebb233a988e99e5d8c026a73be95554a.png\" /></p><p></p><p>Midjourney生成的图像，与知名电影和电子游戏中的分镜几乎相同。</p><p></p><p>我们还发现卡通人物的抄袭问题更严重，例如下面的《辛普森一家》组图。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a1/a18949fd17147ec18143a9a781a10787.png\" /></p><p></p><p>Midjourney生成了大量特征鲜明的《辛普森一家》图像。</p><p></p><p>由此看来，我们几乎可以断定Midjourney v6是使用了受版权保护的素材进行训练（不清楚是否获得了许可），且其工具能够生成侵权输出。无独有偶，我们在Stable Diffusion平台上也发现了类似的情况，尽管使用到更复杂的自动对抗技术，但效果相当有限。</p><p></p><p>为此，我们开始进一步开展这方面实验。</p><p></p><h4>视觉模型可以通过间接提示词，生成几乎一模一样的商业符号</h4><p></p><p></p><p>在前文的示例图中，我们会直接提及特定影片（例如《复仇者联盟：无限战争》），这表明Midjourney是在完全知情的前提下输出了这些受版权保护的结果。于是新的问题来了：如果用户没有故意这样提示，那么是否同样构成侵权。</p><p></p><p>作为原告方，《纽约时报》在诉讼中证明即使不直接使用“纽约时报”关键字，也同样可以生成抄袭输出。诉讼中提交的证据显示，只需给出原始报道的部分起始原文，GPT-4就会依样补全后续内容：这意味着用户的确可能在无意当中生成侵权素材，而接下来的实验则希望探索类似的情况在视觉领域是否同样存在。</p><p></p><p>答案是肯定的。下图所示为提示词与相应输出。每张图像中，系统都生成了清晰可辨的角色（曼达洛人、达斯维达、卢克天行者等），这些明显均受到版权保护，因此在任何情况下都不应直接使用。更重要的是，我们并没有刻意要求系统输出侵权内容。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/cc/cc106c9aefff6f7c527c4c437cf9186e.png\" /></p><p></p><p>尽管提示词中并没有提及电影，但Midjourney还是生成了这些一眼开门的《星球大战》角色图像。而且类似的情况在电影和电子游戏领域都有体现。</p><p></p><h4>哪怕不明确要求，大模型也会引用影片画面</h4><p></p><p></p><p>在对Midjourney的第三次实验中，我们测试的是在无明确要求时，大模型能够生成完整的影片画面。而最终答案同样是肯定的。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b2/b20f1a27454ba586b5edc784cfb746e2.png\" /></p><p></p><p>Midjourney生成的图像与影片中的特定场面高度相似。</p><p></p><p>我们最终发现了问题的关键——只要使用“screencap”这个魔法单词，大模型就会生成明显的侵权内容。相信Midjourney后续会修复这个问题，让“screencap”不再敏感。但必须承认，大模型的确拥有生成潜在侵权内容的能力。</p><p></p><p>在为期两周的调查当中，我们发现了数百个涉及电影及游戏中经典角色的案例。下图为我们整理的相关影片、演员和游戏清单。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/3f/3fbd44e05dae1cbba8705ff5f555f173.png\" /></p><p></p><p>在实验中，Midjourney生成与上述演员、影片场景和电子游戏高度相似的图像。</p><p></p><h4>影响几何？</h4><p></p><p></p><p>由此可见，Midjourney在训练当中必然使用到受版权保护的素材，并证明至少某些生成式AI系统可能会生成抄袭输出。因此哪怕未明确要求，用户也可能因此面临侵权索赔。最近的报道也给出了类似的结论：一项诉讼提交一份来自Midjourney的电子表格，其中列出了在模型训练中曾使用其素材的4700多位艺术家，而且很可能未经本人同意。</p><p></p><p>Midjourney的训练素材中有多少未经许可的版权保护内容，我们尚不得而知。但目前可以确定的是，相当一部分输出与版权素材高度相似，且Midjourney对于原始素材和使用许可也不够透明。</p><p></p><p>事实上，Midjourney对这类问题表现得不屑一顾。公司CEO曾在接受《福布斯》杂志采访时，表达了对版权所有者权利的漠视。</p><p></p><p></p><blockquote>没有经过授权，我们也没办法一一排查上亿张训练图像分别来自哪里。如果再向其中添加关于版权所有者等内容的元数据，那也太麻烦了。但这不是什么大事，毕竟网络上也没有相应的注册表，我们做不到在互联网上找一张图片、然后轻松跟踪它到底归谁所有，再采取措施来验证身份。既然原始训练素材未获许可，那即使在我们这帮非法律出身的外行来看，这都很可能激起各制片方、电子游戏发行商和演员的反抗。</blockquote><p></p><p></p><p>版权与商标法的核心就是限制未经授权情况下的商业再利用。考虑到Midjourney已经在公开收取订阅费，而且跟被侵权方存在竞争关系，所以矛盾可以说是一触即发。Midjourney还试图阻止我们的调查。在本文作者公布首条发现后，Midjourney就出手加以封禁。</p><p></p><p>当然，并不是一切使用版权素材的行为均属非法。例如，美国就公布过四条合理使用原则，允许在特定情况下使用可能侵权的作品——包括出于批评、评论、科学评估或者模仿等目的。而Midjourney这类厂商明显希望借此打破困局。</p><p></p><p>但从根本上讲，Midjourney已经成为大规模订阅服务，个人用户完全可能引发侵权用例。比如大部分所谓“同人创作”实际就被视为侵权，只是在非商用情况下一般不会被起诉。</p><p></p><p>X上的一位用户指出，日本已经允许AI厂商使用版权素材进行训练。虽然说法没错，但却忽略了很多重要细节，因为这类训练同样受到相关国际法（包括〈伯尔尼公约〉和TRIPS协议）的限制。而且日本的政策也不太可能对美国的法庭裁定产生影响。</p><p></p><p>也有不少人表达了信息本身应该完全自由的观点。但这同样有些极端，毕竟如果对艺术家和创作者的权利毫不尊重，那么从业者的贫困势必会影响社会的整体创作积极性。</p><p></p><p>此外，这也让我们想到Napster早先曾提出的观点。当时他们以点对点方式在网上共享歌曲，且不向创作者或广告商提供任何补偿。从目前的情况看，Midjourney等AI艺术创作服务可以说是视觉领域的翻版Napster。</p><p></p><p>在我们看来，版权和商标法不会根据大型生成AI厂商的新业务形态做出重大改动。</p><p></p><p>说回Napster，Metallica和美国唱片工业协会（RIAA）通过诉讼终止了这种大规模侵权行为。新的流媒体商业模式开始出现，也让出版商和艺术家们获得了一定分成（虽然比例远不及预期）。</p><p></p><p>Naspter几乎是一夜之间彻底消失，公司本身及其资产被出售给流媒体服务。所以在我们看来，版权和商标法不会根据大型生成AI厂商的新业务形态做出重大改动。</p><p></p><p>如果迪士尼、漫威、DC和任天堂等公司也效仿《纽约时报》，就版权和商标侵权发起诉讼，那么完全有可能复制RIAA之前的胜诉结果。</p><p></p><p>更复杂的是，我们发现有证据表明Midjourney一位高级软件工程师曾在2022年2月参加过一次对话，讨论如何通过“微调”的办法进行数据“清洗”来规避版权法。另有知情人士透露，“这在一定程度上阻断了跟踪衍生作品是否侵权的通道”。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a4/a45b5419f32195d760b7a6ef1aea8d43.png\" /></p><p></p><p>“这里要提醒Stability AI的CEO Emad Mostaque，别总指望在付费墙背后随意抓取数据。”</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a1/a16d5a60dd88ac64213ad0d1e9fed5f8.png\" /></p><p></p><p>2022年2月，Midjourney开发者们在Discord上讨论版权问题。</p><p></p><p>这类问题引发的惩罚性赔偿可能数额巨大。最近有消息人士指出，Midjourney可能整理了一份专门用于模型训练的艺术家清单，而且似乎并没有相应的许可或补偿条款。再结合抄袭输出问题，这难免会引发一场声势浩大的集体诉讼。</p><p></p><p>另外，Midjourney显然想要阻止我们的调查。在本文作者公布了首个研究结果并创建新账户之后，Midjourney马上将账户封禁（甚至没有退款）。之后，该公司抢在圣诞节前调整了服务条款，提到&nbsp;“您不得使用本服务侵犯他人知识产权，包括版权、专利或商标权。此类行为可能使您面临面临处罚，包括采取法律行动或被永久禁止使用本服务。”已经有多家主要AI厂商在2023年内宣布与白宫方面达成协议，通过这类作法阻止甚至排除对生成式AI局限性的红队调查。</p><p></p><p>但这种行为显然不可接受。红队调查是保障AI工具拥有实际价值、安全且消除剥削隐患的重要手段，技术社区也普遍将红队调查视为AI开发中的重要部分。目前生成式AI厂商普遍面临收集更多数据、扩大模型体量的压力，而这可能导致模型的抄袭行为更加频繁。</p><p></p><p>我们在这里呼吁各位用户尽量选择替代服务，除非Midjourney撤销这些阻止用户开展侵权调查的政策，并对数据来源进行透明公开。</p><p></p><p>最后再来讨论一个纯学术问题。Midjourney是目前生成细节最丰富的AI工具之一，那么随着其图像生成水平的提高，输出抄袭内容的倾向会不会也同步增强？</p><p></p><p>从前文提到的Nicholas Carlini文本输出实验来看，答案很可能是肯定的。单从直觉判断，系统掌握的数据越多，提取的统计相关度就越高，但也更可能直接照搬之前见过的训练素材。也就是说，如果猜测正确，那么模型在更多数据的支撑下将变得越来越大，在让输出更加人性化的同时也会更频繁地生成抄袭内容。</p><p></p><h2>DALL-E 3同样涉嫌抄袭输出</h2><p></p><p></p><p>作为实验的延伸，我们希望了解其他平台是否也存在与Midjourney类似的抄袭问题。因此下一组比较，就来自与Midjourney定位相似的OpenAI DALL-E 3。事实也的确如此。与Midjourney一样，即使在提示词中不给出具体名称，DALL-E 3也会生成受商标保护的角色。</p><p></p><p>哪怕只使用“动画玩偶”这样简单的提示，DALL-E 3也会给出涉及版权角色的图像（右下部分）：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/bd/bd2a01ebfb5ef87b937e8e08011c3a0d.png\" /></p><p></p><p>与Midjourney一样，DALL-E 3生成的图像跟电影和游戏中的角色高度雷同。</p><p></p><p>很明显，DALL-E 3跟Midjourney一样，广泛借鉴了各类版权资源。OpenAI似乎也很清楚自己的软件可能侵犯版权，并于去年11月发布了保护用户免受侵权诉讼的条款（但有一些限制）。不过从侵权规模上看，这势必会让OpenAI付出沉重的成本。</p><p></p><p>与任何随机系统一样，我们无法保证特定提示词能否在其他用户的尝试中给出同样的输出。另外，有人猜测OpenAI一直在实时调整自己的系统，排除我们曾经报告过的特定输出。但至少就目前看，对商标实体及其他形象的重现并不困难。</p><p></p><p>那么，这些问题该如何解决？</p><p></p><h2>大模型如何解决侵权问题？</h2><p></p><p></p><h4>方案1：删除版权素材</h4><p></p><p></p><p>最直接的办法，当然就是使用非版权素材对图像生成模型进行重新训练，或者至少只使用获得许可的数据集进行训练。</p><p></p><p>但这套方案的实施成本，恐怕远远高于大多数读者朋友的想象。毕竟目前还没什么简单办法能把受版权保护的素材直接从现有模型中清除出去，大规模神经网络跟我们熟知的数据库可不一样。换言之，唯一的办法就是以高昂的成本进行重新训练。</p><p></p><p>正因为如此，厂商们肯定会优先选择其他方法在回避许可成本的同时，寻找重新训练之外的解决方式。更要命的是，如果不使用版权保护素材，新模型的生成效果很可能受到严重影响。因此，生成式AI厂商也许会修复现有系统，限制某些特定类型的查询和输出。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b8/b84f30539f460f1f9f3ea60503ba155c.png\" /></p><p></p><p>OpenAI可能就在进行实时修复。一位X用户分享了一条DALL-E 3提示词，模型首先据此舔了C-3PO图像，但之后又弹出消息，称无法生成所请求的图像。</p><p></p><p>总之，目前似乎并没有既不需要重新训练模型、又能解决抄袭输出的简单两全方法。</p><p></p><h4>方案2：过滤可能侵权的查询</h4><p></p><p></p><p>直接过滤掉有争议的查询可能更简单，但聪明的用户总能找到新的可乘之机。</p><p></p><p>实验表明，文本生态系统中的护栏在某些情况下过于宽松，但在其他情况下又显得太严苛。这类问题在图像生成模型中同样存在。例如，一位名叫Jonathan Kitzen的用户在要求Bing“在荒凉的阳光下建造一间厕所”时就被拒绝，系统提示“检测到不安全图像内容”。而用户Katie Conrad则发现，Bing在处理所创建内容能否合法使用时很容易被误导。</p><p></p><p>网上甚至出现了专门的指南，帮助用户通过“区分角色的具体细节，例如不同发型、面部特征、身体纹理和配色方式”等绕过DALL-E 3的版权护栏。在下图中，用户就最终成功生成了皮特做体操的图像。</p><p></p><h4>方案3：过滤源素材</h4><p></p><p></p><p>如果这些生成工具能够列出素材来源，由用户判断最终产品是否涉及侵权，那当然是皆大欢喜。但现有系统的透明度过低，根本无法实现这样的效果。换言之，我们在获取输出时，完全不知道其与特定输入集有何关联。潜在侵权输出的存在本身已经证明，厂商在未经创作者同样的情况下使用版权保护作品来训练模型。</p><p></p><p>目前还没有哪种生成式AI服务能够解析输出与特定训练示例之间的关系。而且据我们所知，大型神经网络会将输入信息拆分成多个分布式片段，导致回溯过程极其困难。为此，X用户@bartekxx12尝试使用ChatGPT和谷歌搜图来识别来源，但成功率非常有限。</p><p></p><p>更重要的是，尽管部分AI厂商和技术支持者认为直接过滤侵权输出就算过关，但这类过滤方案无论如何都算不上理想答案。毕竟潜在侵权输出的存在本身已经证明，厂商在未经创作者同样的情况下使用版权保护作品来训练模型。而根据知识产权与人权保护方面的国际法原则，任何未经创作者同意的作品都应不得用于商业训练。</p><p></p><p>但大家一看到马力欧就知道会侵权，所以由用户自行取舍不就好了？</p><p></p><p>假设我们让AI生成一张水管工的图像，而它给出的结果中有马力欧。那身为用户，我们舍弃掉这张侵权结果不就行了？X用户@Nicky_Bonez生动阐释了这个问题：</p><p></p><p></p><blockquote>……的确，人人都认识马力欧，可以自行取舍。但人们对Mike Finklestein拍摄的野生动物作品就没那么熟悉。所以当我们要求AI生成“水獭跃出水面的漂亮照片”时，可能没意识到这背后是Mike在雨中蹲守三个星期才拍下的真实图像。而且像Finklestein这样的个人创作者，也不太可能动用强大的法律力量对AI厂商提出索赔。另一位X用户也分享了类似的例子。在生成“60年代风格抽烟男人”的图像时，他完全不知道自己选中的结果源自披头士乐队Paul McCartney的相片。</blockquote><p></p><p></p><p>与简单的绘图程序不同，这里提供的所有工具都可随意使用，且自身不构成侵权。但在生成式AI时代，软件本身已经具备了创作侵权内容的能力，甚至不会就潜在侵权向用户发出提醒。</p><p></p><p>使用谷歌图像搜索，我们得到的其实是链接，而非艺术创作本身。用户需要点击链接来确定该图像来自公共领域、图库机构还是个人站点。但在生成式AI系统中，用户根本无法判断素材到底是真正原创、还是抄袭的产物。</p><p></p><p>除了服务条款中的硬性规定之外，没有任何警告表明可能存在侵权问题。而且据我们调查，厂商也不会提醒模型生成的结果可能侵权、不得用于商业目的。音乐家兼软件工程师Ed Newton-Rex最近就出于道德担忧而放弃了使用Stable Diffusion：</p><p></p><p></p><blockquote>应该保证用户在使用软件产品时不会构成侵权。但在当前的功能用例中，用户根本无法判断模型输出是否抄袭了受版权保护的作品。风险分析师Vicki Bier则总结道：</blockquote><p></p><p></p><p></p><blockquote>“如果AI工具没有提醒用户其输出可能受版权保护，凭什么让用户为此负责？AI的确可能侵犯那些我既未见过、也不可能知晓的版权保护素材的权益。”事实上，也没有任何公开可用的工具或数据库能帮助用户发现潜在的侵权行为，更不存在预防此类操作的使用指南。总之，AI厂商把对生成内容的解释工作强加给了用户，而这很可能引起美国联邦贸易委员会和全球其他消费者保护机构的关注。</blockquote><p></p><p></p><p>软件工程师Frank Rundatz最近还提出了更加宏观的考量视角：</p><p></p><p></p><blockquote>终有一天，当我们回顾过去，会意识到AI厂商是如何厚颜无耻地抄袭他人信息、侵犯作品版权。Napster所做的，只是允许人们以点对点方式传输文件，其自身根本没有托管任何内容！Napster还开发了一套系统，成功阻止了用户99.4%的侵权行为。但由于法院要求把比例提升到100%，所以Napster最终还是遭到关停。OpenAI则是扫描并托管所有内容，出售访问权限，甚至为付费用户赤裸裸地生成抄袭作品。Midjourney也一样。</blockquote><p></p><p></p><p>斯坦福大学教授Surya Ganguli补充称：</p><p></p><p></p><blockquote>我认识的很多科技大厂研究人员都致力于把AI跟人类的价值观统一起来。但从本质上讲，这种统一难道不该先从为训练数据的创作者提供补偿做起吗？（这是价值观的问题，而不单是法律问题。）把Ganguli的观点做进一步延伸，就能意识到除了知识产权和创作者权益之外，图像生成还带来了其他隐忧。图像生成技术可能被用于生成儿童性虐待素材和未经当事人同意的deepfake色情内容。从最朴素的价值观出发，我们也有必要制定法律、规范和工具来打击此类用途。</blockquote><p></p><p></p><h2>总结</h2><p></p><p></p><p>几乎可以肯定，OpenAI和Midjourney等生成式AI开发商就是在用版权素材训练自己的系统，而且从未对外公开承认。Midjourney甚至在调查期间三次封禁闻我们使用的账户。</p><p></p><p>OpenAI和Midjourney完全有能力生成明显侵犯版权和商标的内容，且系统不会对用户做任何提醒。由于不提供输出内容的来源信息，所以用户也无法判断自己使用的结果是否侵权。</p><p></p><p>除非出现一种技术解决方案，能够准确报告素材来源或者自动过滤掉绝大多数侵权行为，否则唯一合乎道德的办法就是仅使用获得许可的数据训练生成式AI系统。换言之，图像生成系统应该像音乐和视频流媒体服务那样，提前获得所使用素材的授权许可。</p><p></p><p>OpenAI和Midjourney完全有能力生成明显侵犯版权和商标的内容，且系统不会对用户做任何提醒。</p><p></p><p>我们希望本文中的发现能够让更多生成式AI开发商认真管理自己的数据源，尽量使用具有适当许可的训练数据，并为素材创作者提供一定补偿。从长远来看，我们实在不希望强大的AI创作工具依靠牺牲创作者利益的方式发展壮大。</p><p></p><p>而且不止是文本和图像生成领域，音乐生成等其他用例中也存在类似的问题。</p><p></p><p>继《纽约时报》诉讼案之后，我们的研究结果表明，生成式AI系统可能会频繁产生文本和视觉抄袭输出，而这实际上是在把判断工作强加给普通用户。对于这样建立在有违道德这一基础之上的新兴业务，也许只有成规模、够强硬的法律诉讼才能为整个行业开辟出新局面。</p><p></p><p>原文链接：</p><p></p><p><a href=\"https://spectrum.ieee.org/midjourney-copyright\">https://spectrum.ieee.org/midjourney-copyright</a>\"</p>",
    "publish_time": "2024-01-08 17:38:37",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "第六届汽车CIO&CDO上海论坛报名倒计时3天",
    "url": "https://www.infoq.cn/article/jBaexgrKDM5OTyG7BACE",
    "summary": "<p>由上海市汽车工程学会、上海开源信息技术协会、宁波市智能制造协会、嘉兴市汽车零部件工业协会指导，WRE Digital&nbsp;主办的“第六届汽车CIO &amp; CDO上海论坛”将于2024年1月16日在上海举办。</p><p></p><p>本次论坛主题为“以数赋智 转型升级”，届时将有众多整车、新能源汽车、互联网汽车企业、生态及技术合作伙伴等全产业链首席信息官、数字官、营销官、转型办主任、研发总监、IT信息部门等相关人士出席。论坛紧跟行业趋势，重点关注大数据、云计算、自动驾驶、数字化工厂、供应链优化等新一代信息技术在汽车全产业的应用，推进汽车产业信息化发展。</p><p>&nbsp;</p><p>大会全天共将安排20+场主题汇报，来自上汽集团、吉利集团、赛力斯集团、东风汽车集团、蔚来汽车、极氪智能、上汽通用五菱汽车、路特斯、奇瑞新能源、智己汽车、华人运通、上汽大通、上汽乘用车等众车企专家们将从多角度、全方位就等行业热点问题进行了深入探讨，碰撞出无数火花。届时也将在大会当天举办盛大的第六届汽车业“凌云奖”颁奖盛典。欢迎关注！</p><p>&nbsp;</p><p>1月16日来第六届汽车CIO&amp;CDO上海论坛，听汽车专家们细数如何在瞬息万变的行业发展中保持创新、长久生存、赢得先机。报名倒计时3天，尚未登记的可抓紧扫描下方二维码报名。</p><p><img src=\"https://static001.geekbang.org/infoq/3c/3c78a2e89a5d6ff7ad5b5cbc6a5b51ee.jpeg\" /></p><p></p>",
    "publish_time": "2024-01-08 18:19:55",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]