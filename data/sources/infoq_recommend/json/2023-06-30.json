[
  {
    "title": "中国企业研发高效能白皮书-ChatOps篇",
    "url": "https://www.infoq.cn/article/R4vwRbrR5DNEPhKei4Kv",
    "summary": "<p>近年来中国企业研发正在从粗放型走向精益型，研发工作的“高效能”成为几乎每个研发团队共同的追求。</p><p></p><p>中国软件服务产业也在近 5-10 年中得到了飞速发展，技术服务的边界不断拓展，赋能研发高效的产品层出不穷，适合中国研发环境的技术服务体系在不断完善。从结果上看，中国企业正在高效能研发的路径上快速前进。</p><p></p><p>本份报告以中国高效能研发企业为研究对象，尝试解读市场中具有代表性的高效能研发解决方案。本次报告由五个篇章组成，如 CI/CD、企业级架构、价值流管理等主题。研究小组期待可以通过研究，帮助中国企业研发团队获得高效能研发新知。</p><p></p><p>ChatOps 篇是本次报告的第二篇章，主要研究了 ChatOps 是如何帮助研发团队提升效率。该篇章不仅说明了 ChatOps 的概念和技术结构，而且对 ChatOps 市场的发展历程和趋势进行了研究与洞察。</p><p></p><p>此外，根据 InfoQ 研究中心 2023 年 1 月发布的中国技术成熟度评估曲线，ChatOps 处于准成熟技术阶段，这表明目前是采用 ChatOps 技术较为合适的时间点。</p><p></p><p>同时，通过极狐 GitLab ChatOps 的实例，读者可以更好地了解 ChatOps 是如何在决策支持、研发自动化以及运维自动化三大场景赋能团队研发效率方面的。</p><p></p><h2>目录</h2><p></p><p></p><h3>ChatOps 概念和背景介绍</h3><p></p><p>什么是 ChatOps？</p><p></p><p>ChatOps 有哪些特征？</p><p></p><p>ChatOps 的技术结构</p><p></p><h3>ChatOps 行业发展概况</h3><p></p><p>ChatOps 发展历程</p><p></p><p>ChatOps 市场发展趋势展望</p><p></p><h3>极狐 GitLab ChatOps</h3><p></p><p>极狐 GitLab ChatOps 使用场景</p><p></p><p>为什么选择极狐 GitLab ChatOps？</p><p></p><p>极狐 GitLab ChatOps 生态版图</p><p></p><p>扫码下载报告</p><p><img src=\"https://static001.geekbang.org/infoq/22/22116f5d410b7601da030e5fa0c6e8b4.png\" /></p><p></p>",
    "publish_time": "2023-06-30 10:38:31",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "独家对话金蝶李帆：企业级PaaS平台将如何引领企业的科技创新？",
    "url": "https://www.infoq.cn/article/M45ssycoZyWGh1P3I3hW",
    "summary": "<p>历时三十年的发展，金蝶已经陪伴了超过 740 万家企业走过信息化的 0 到 1，再从 1 到 N 的过程。这是一个怎样的历程？金蝶的底层技术演进逻辑是什么？金蝶又是如何看待企业数字化转型的？展望未来，金蝶的发展方向又将走向何方？</p><p></p><p>时值金蝶三十而立之年，InfoQ《C 位面对面》栏目有幸邀请到了金蝶中国副总裁、研发平台副总经理、金蝶云·苍穹平台部总经理李帆。他在金蝶从事产品研发已经二十余年，关于上述问题，他的理解又是怎样的呢？</p><p></p><p></p><h1>从金蝶的转型，看中国企业数字化转型大势</h1><p></p><p></p><p>将时间回溯到 2020 年，金蝶国际软件集团创始人、董事会主席兼首席执行官徐少春提出：“到 2023 年用云订阅模式再造一个金蝶。”而我们从金蝶发布的 2022 年财报中可以看到，金蝶云业务收入已连续三年增长超过 30%，截至目前，金蝶在云订阅模式转型方面已经交出了一份十分亮眼的成绩单。</p><p></p><p>谈及向云订阅模式转型的初衷，李帆认为金蝶主要看到了三个方面的契机：第一，随着云计算、大数据、物联网、移动互联网、人工智能等新一代信息技术的发展，互联网技术应用从消费互联网逐渐延展到产业互联网，创新技术给企业的变革带来了新契机，因此，金蝶率先开始了向云订阅模式进行转型；</p><p></p><p>第二，随着企业级应用与 新的数字化技术的不断融合，企业对于 IT 的诉求变得越来越深入和广泛，促使金蝶需要不断进行创新和变革；</p><p></p><p>第三，得益于中国数字经济的快速发展，中国企业对国产软件厂商的信心也在不断增强。党的二十大报告提出，到 2035 年我国要实现高水平科技自立自强，进入创新型国家前列，并强调“增强自主创新能力”。</p><p></p><p>当然，机会总是留给有准备的人。面对时代的契机，企业也需要有勇气去打破固有的产品、服务以及思维，敢于去做一些颠覆式的创新。众所周知，自 2014 年开始，金蝶创始人徐少春每年都有一“砸”，这代表了金蝶“破而后立“的发展决心。李帆在采访时也表达了相似的观点，他表示金蝶之所以能够向云订阅模式成功转型，与金蝶创新文化的基因是分不开的。</p><p></p><p>除此以外，李帆进一步补充道，转型的初衷还是要回归商业本质，以客户为中心，持续地去陪伴客户成长，帮助客户成功。</p><p></p><p>“企业在数字化转型的过程中，面临的最大挑战是如何能让传统的信息系统一步步过渡到数字化平台，让原有资源投入继续发挥价值的同时，引入更多新的技术来支撑业务快速发展。”这就要求软件厂商能够提供一套可持续的方法体系，进行可持续地迭代与优化，而不是颠覆式地废弃既往大量的信息化投资。出于对企业需求的考量，金蝶最终转向了云订阅的服务模式，一方面可以满足企业业务创新和管理变革的需求；另一方面，也倒逼金蝶在产品和服务不断改进和优化，真正做到顺应市场需求，和客户一起成长。</p><p></p><h1>数字化的终极阶段：数“治”企业，自主创新</h1><p></p><p></p><p>做了三十年企业管理软件的金蝶，在时代的机遇面前不仅敢于求变，同时也有着自己独特的思考。</p><p></p><p>金蝶基于过往对中国五百强企业客户的调研，大致可以将企业数字化转型分为四个阶段：第一阶段是信息化，即 IT 仅作为一种工具来辅助业务；第二阶段是数字化，真正做到了 IT 和业务融合；第三阶段是智能化，尤其是随着 ChatGPT 的持续火热，大家更深刻地意识到智能化技术对企业带来的影响；第四阶段便是数字化转型的终极目标，用数据来治理企业。</p><p></p><p>那么，具备了怎样的特征才可以算作是数治企业呢？</p><p></p><p>李帆认为，首先数据要“看得清”。但数据可视化阶段的建设并不是一件容易的事情，企业只是做了可视化看板、大屏并不够，还需要确保这些数据是实时更新、准确且全面的；接下来，进入到数据诊断的阶段，需要看这些数据能否发现业务上的问题与改进点，帮助业务去做诊断，真正发挥数据的价值；做完数据诊断后，数据要能够根据业务的形态、行业类型等多重维度，形成行业领域的模型，为企业未来发展做出精准的预测；最后便是利用数据分析的结果，帮助企业的管理者和业务人员进行研判和决策支持。</p><p></p><p>“总结来说，数据驱动决策离不开两件事：第一，保证数据的标准化、准确性、完整性；第二，数治企业离不开 AI，需要用 AI 技术帮助数据发挥价值。”李帆补充道。</p><p></p><p>针对前者，李帆介绍了金蝶统一的数字化底座、可组装企业级 PaaS 平台——金蝶云·苍穹。它为企业提供了完整的数据链路开发、数据治理体系、数据服务体系，通过从数据汇聚层统一数据交换，到统一数据资产建设，统一数据资产管理，统一数据服务到数据应用，实现数据资产化，资产价值化。</p><p></p><p>此外，金蝶云·苍穹也一直在数据智能方面进行大量投入，例如增强以数据编织和 AI 为核心，为企业提供数据和智能分析的能力，让企业通过 AI 技术提升用户体验、提升生产效率、辅助决策等多方面价值。</p><p></p><h1>大型企业需要怎样的 PaaS 平台？</h1><p></p><p></p><p>身处多变的时代，企业都希望能够拥有一个韧性的组织模式和技术架构，以支撑企业业务的高速发展。如果没有平台进行支撑，每一个应用都需要单独地去构建，企业的投入成本、响应速度以及应用的可靠性、安全性等方面都会受到影响。</p><p></p><p>正是在数字化转型目标的驱动下，PaaS 平台的重要性愈发凸显，也使得 PaaS 领域成为了各家追逐的主战场。目前，Gartner 将市场上的 PaaS 归为了两大类：一类是高控制力，即资源的管理与控制类平台；另一类是高生产力，即提供生产力工具类平台，主要面向上层应用。</p><p></p><p>但即便如此，企业面对纷繁复杂的 PaaS 平台，仍然不能很好地厘清到底什么样的 PaaS 平台更适合自身业务场景。关于 PaaS 平台的技术选型问题，李帆也在采访过程中表达了自己的看法，总结起来是四个关键词：可靠、敏捷、智能、开放。</p><p></p><p>第一，大型企业往往对业务连续性、数据安全保护等方面有着更高的要求，PaaS 平台是否安全可靠便尤为重要；</p><p>第二，该平台是否具备敏捷能力，能否有效地降低软件开发成本，提升企业的生产力；</p><p>第三，数字化的终极阶段是用数据治理企业，数据智能对于企业的重要性不言而喻；</p><p>第四，对于大型企业而言，多家 PaaS 平台共存是非常普遍的情况，这就要求 PaaS 平台需要具备融合开放的能力。“但针对开放性而言，业内并没有统一的标准来定义一个系统是否足够开放，很多人似乎认为提供 API 就是开放，但它仅仅是开放性中的一个维度。”</p><p></p><p>为了进一步阐释开放性的定义，金蝶总结出了“五可开放模型”：</p><p>可获得性：这个产品 / 服务是否方便使用者去获取它，简单来说，能否从官网上直接进行体验。此外，是否提供了开发者社区等平台，帮助用户学习它，这也是可获得性的一种表现；可访问性：是否能够与外部系统进行访问交互；可扩展性：由于标准化的应用软件并不能满足企业百分之百的需求，就需要系统支持可扩展、可自定义；可组装性：是否可以进行原子化，自有能力能否与其他企业提供的能力进行组装；可适配性：是否适配国产主流芯片、服务器、操作系统和数据库等。</p><p></p><p>其中，可组装性一直是金蝶倡导的重要理念，即让企业像搭积木一样去构建数字化能力，以应对未来的不确定性。为此，李帆为我们介绍了金蝶帮助海信集团落地可组装思想的案例。</p><p></p><p>海信集团作为国内家电行业的领导厂商，同时也是一家全球化企业，其 IT 系统的构建经历了多个阶段，非常复杂。如何整合复杂庞大的系统，形成能够快速响应的数字化能力，是金蝶在服务之初就需要重点思考的问题。经过双方不断的深入研究和探讨，最终双方选择把财务作为转型的第一步，在财务系统建设中引入先进的中台架构，利用微服务、容器化、低代码、大数据和人工智能等技术，基于可组装企业级 PaaS 平台 - 金蝶云·苍穹打造统一可复用的技术能力中心。经过多年的共创共建，基于可组装的思想，海信财务中台搭建了近 20 个可复用的能力中心，帮助海信融合了多套复杂的异构系统，实现了敏态前台实时响应业务变化，稳态中台支持财务内控和高效核算的数字化能力目标。</p><p></p><p>财务中台项目建设既是创新平台技术实践，同时也寄托了财务人员进行财务转型的希望。可以说，财务中台的落地已经成为金蝶与海信双方基于金蝶云·苍穹数字化底座、携手探索企业数字化转型过程中极具代表性的成果之一。</p><p></p><h1>未来展望：向全球领导厂商去迈进</h1><p></p><p></p><p>纵观过去三十年的发展史，金蝶经历了从 DOS 到 Windows 平台的转型，从财务软件到 ERP 的转型，也经历了从 ERP 到企业云服务的转型。今年，金蝶即将迎来成立三十周年的纪念日，在新的起点上再出发，金蝶将会带来哪些新变化呢？</p><p></p><p>智能化、可组装、行业化以及全球化，是李帆为我们透露的未来金蝶云产品四个关键演进方向。</p><p></p><p>具体而言，在智能化层面，持续将智能化技术引入各产品线，尤其是大模型技术使用场景的不断深入与成熟，后续需要将大模型的理解能力最大化，来服务企业的内部场景；在可组装层面，不能只去解决组装性的问题，更多地要关注 PBC 被打包的业务能力，更深入地研究产品化的内容；在行业化层面，需要沉淀更多的行业能力到平台层，继而更好地服务行业客户；在全球化层面，李帆表示：“我们希望在三十而立的时候，金蝶软件能够从本土软件的领导厂商开始向全球领导厂商迈进。”</p><p></p><p>据悉，在今年 8 月 8 日的全球创见者大会上，金蝶将发布一系列重磅产品和服务。届时，金蝶将以怎样的姿态奔赴下一程？让我们一起共同期待！</p><p></p>",
    "publish_time": "2023-06-30 10:39:01",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "中国企业研发高效能白皮书-CI/CD篇",
    "url": "https://www.infoq.cn/article/LFa4ESMJOMY66HtTjYsG",
    "summary": "<p>近年来中国企业研发正在从粗放型走向精益型，研发工作的“高效能”成为几乎每个研发团队共同的追求。</p><p></p><p>中国软件服务产业也在近 5-10 年中得到了飞速发展，技术服务的边界不断拓展，赋能研发高效的产品层出不穷，适合中国研发环境的技术服务体系在不断完善。从结果上看，中国企业正在高效能研发的路径上快速前进。</p><p></p><p>本份报告以中国高效能研发企业为研究对象，尝试解读市场中具有代表性的高效能研发解决方案。本次报告由五个篇章组成，如 CI/CD、企业级架构、价值流管理等主题。研究小组期待可以通过研究，帮助中国企业研发团队获得高效能研发新知。</p><p></p><p>CI/CD 篇是本次报告的第一篇章，主要研究了 CI/CD 工具是如何帮助研发团队提升效率。该篇章不仅阐述了 CI/CD 的起源与发展背景，而且对 CI/CD 市场的相关数据、厂商分布进行了研究与洞察。此外，研究发现，CI/CD 主要通过持续性、自动化、可追溯、高效迭代四大抓手赋能研发团队。</p><p></p><p>同时，通过极狐 GitLab CI/CD 的实例，读者可以更好地了解 CI/CD 是如何通过四大核心优势赋能团队研发效率方面的。</p><p></p><h2>目录</h2><p></p><p></p><h3>CI/CD 概念和背景介绍</h3><p></p><p>CI/CD 的概念——关于 CI/CD</p><p></p><p>CI/CD 发展的阶段——历经三阶段，平台型产品站上历史舞台</p><p></p><p>CI/CD 的价值——CI/CD 赋能研发的四大抓手</p><p></p><p>CI/CD 的流程结构——CI/CD 流程结构创新赋能研发效率</p><p></p><h3>CI/CD 行业发展概况</h3><p></p><p>CI/CD 市场基础数据——CI/CD 市场蓬勃发展</p><p></p><p>CI/CD 市场厂商分布——CI/CD 行业厂商矩阵逐步形成</p><p></p><p>CI/CD 市场特征洞察——行业发展推动市场需求呈现新特征</p><p></p><h3>极狐 GitLab CI/CD：带您开启新世界大门</h3><p></p><p>极狐 GitLab CI/CD 简介——GitLab CI/CD 使用前和工作流</p><p></p><p>极狐 GitLab CI/CD 特征——极狐 GitLab CI/CD 四大核心优势</p><p></p><p>极狐 GitLab CI/CD 真实用户使用反馈</p><p></p><p>扫码下载报告</p><p><img src=\"https://static001.geekbang.org/infoq/61/615b7c6a27842f75257030df8d87cecd.png\" /></p><p></p>",
    "publish_time": "2023-06-30 10:59:39",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "视频处理系统精细化演进，成本与体验之间如何找寻平衡点？",
    "url": "https://www.infoq.cn/article/ZozY8uOaKktbamYSmIiU",
    "summary": "<p>在视频的发展历程中，对于体验感的极致追求贯穿始终。</p><p></p><p>从短视频到直播，从云游戏到 VR 电竞，从视频会议到虚拟机器人，尽管应用场景在不断变化，但不变的是，用户的需求始终是以更加高清、更低延时，更强的沉浸性和交互性为导向。在这样的需求推动下，视频处理精细化成为了行业的必然发展方向。然而，这种精细化的演进之路却并非一帆风顺，需要在成本和体验之间找寻最佳的平衡点。当前，互联网的流量 80% 来自视频，仅短视频领域的用户规模就达到 5 亿。如何能够把大量视频以更加高效、高性价比的方式计算、存储、传播是对视频平台最大的挑战。</p><p></p><p>近日，InfoQ 与 Intel 联合打造的「<a href=\"https://www.infoq.cn/article/qf5THpWjlXKOyPKiA3wR\">英特尔® 至强®&nbsp;实战课</a>\"」，特邀火山引擎点播多媒体平台技术负责人张清源与英特尔云计算资深架构师陆扬进行分享，二位针对如何更好地拥抱视频化浪潮，如何实现更精细化的视频处理，如何平衡成本与体验等众多实际问题展开探讨。InfoQ 将本场分享内容整理成文，希望对大家有所帮助。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6c/6c710d93229c838ae798777c6aa44277.png\" /></p><p></p><p></p><h2>成本与体验到底是不是零和博弈？</h2><p></p><p></p><p>随着短视频行业的蓬勃崛起和 AI、异构等技术的快速发展，视频处理系统的架构发生了很大的变化。在视频处理的演变过程中，逐渐出现端云结合的处理方式，进而实现了更加灵活和多样的视频处理体验。张清源以点播业务为例，介绍了视频处理的基本工作模式。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c2/c20bb2811c02bc404ac02aa20b4643f5.png\" /></p><p></p><p>点播链路主要分为四个部分：端侧生产、云端生产、审核和下发。端侧生产是指使用移动设备拍摄视频，并进行增强和编辑，然后将视频上传至云端发布。其次是云端生产，包含两个流程：视频处理系统对视频进行处理，生成不同档位的视频；审核系统对视频进行合规审核。完成这两个流程后，视频可以进行下发，通过下发系统最终在播放器上播放。</p><p></p><p>当前，字节点播业务规模庞大。从计算方面来看，视频处理系统规模已经达到数百万核，预计不久的将来可能达到千万核。存储容量已经达到 EB 级别，带宽规模超过 100TB。因此，点播业务的成本巨大。</p><p>点播业务的成本主要由存储成本、转码成本、CDN 带宽成本等构成，其中 CDN 带宽成本占到整体成本的 70% 以上。点播业务的体验主要指播放体验。播放体验受到 QoS 指标（播放失败率、起播时间、卡顿率、视频质量等）、QoE 指标（播放次数、播放时长、完播率等）等多项指标的影响，且 QoS 指标也会对 QoE 指标产生影响。那么，如何优化成本和体验呢？</p><p></p><p>在成本方面，<a href=\"https://www.infoq.cn/article/zeyou9a4e4YYieNEi0Ot\">火山引擎</a>\"分别针对影响带宽成本、计算成本和存储成本的因素进行优化。例如，调整视频的码率可以降低带宽成本。同时，还可以减少不必要的数据传输，避免浪费带宽，优化缓存机制，减少不必要的数据缓存。对于计算成本，利用异构资源和工程优化来降低计算成本。在存储方面，采取转冷存储或删除低观看率的档位等措施来节省存储成本。</p><p></p><p>在提升体验方面，视频处理系统最主要的是对画质进行处理。而在播放端，包括首帧优化、移动端后处理等都可以改善播放体验。此外，还可以优化卡顿问题和同步性，以提升整体体验。</p><p></p><p>尽管单独优化某一方面可以采取很多措施，但成本和体验存在置换关系。例如，下发低档位的视频或调整转码参数可以降低成本，但会导致体验略有损失。预加载可以优化首帧和提升体验，但也会增加数据浪费和带宽成本。因此，在决策时，需要精细评估找到成本和体验的平衡点。通过 A/B 实验评估体验影响，最终，通过 ROI 评估判断是否将优化项应用或进一步优化。</p><p></p><p></p><h2>视频处理系统精细化演进之路</h2><p></p><p></p><p>由于视频业务规模逐渐庞大，哪怕是很小的优化，放在大规模的系统里收益都非常可观。因此，视频处理系统向数据驱动的精细化演进的方向发展很有必要。视频处理系统的精细化演进可拆解为画质精细化、资源精细化、策略精细化三个方面。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/63/6353aa632309cd3f7130dbd5d13428c1.png\" /></p><p></p><h3>画质精细化</h3><p></p><p></p><p>画质精细化即为每个视频定制处理流程，解决如何处理视频的问题。它是针对云端视频处理流程的一部分，从视频分析到视频前处理再到视频编码的过程。视频分析使用检测算法提取高维特征，为下一步处理决策提供依据。视频前处理采用增强算法对原片进行处理，然后使用编码器和内容自适应算法进行视频编码。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b1/b127bdc10479d03b31255bea24fbbf69.png\" /></p><p></p><p>尽管云端处理是重要的，但张清源认为，未来视频处理系统将是端到端的统一系统。随着移动端计算性能的提升，一些算法可以在移动端进行补充，既可以节省云端计算资源，又可以结合用户算法策略。因此，需要建立云端和移动端之间的策略来连接它们。通过建设离线画质分析平台，即端到端实验仿真平台，实现端云算法结合，结合全链路仿真，获得最佳算法策略，实现线上收益最大化。</p><p></p><h3>资源精细化</h3><p></p><p></p><p>资源精细化，即在处理视频和资源规划中选择最合适和最优的资源配置，解决使用什么资源的问题。过去，视频处理系统几乎 100% 使用 CPU 资源，但随着时间的推移，除了 CPU 资源外，还可以选择具有弹性的 GPU 资源及其他异构资源进行使用。</p><p></p><p>在评估这些资源时，火山引擎会首先考虑业务特点，因为不同的业务对于压缩性能和任务延迟的要求可能不同。其次，需考虑峰谷时段选择合适的资源。高峰期可借用离线弹性资源以降低成本。第三，需要结合资源的特性，比如 CPU 最大的优点是稳定，通用性好，但是对于算力要求比较高，可能 GPU 更合适。此外，需要考虑预算、交付周期、线上实验、突发流量和容灾需求。资源分布在点播和实时业务中也需考虑。确定最优资源和配比，考虑当前和未来业务情况，进行分析和决策。</p><p></p><p></p><h3>策略精细化</h3><p></p><p></p><p>策略精细化，即结合业务场景的特点，寻找最佳的资源使用方式，用最少的资源实现最佳用户体验。</p><p>现有的策略能力有热度转码和冷启动。热度转码是根据视频热度阶段选择转码档位，而冷启动则通过预测模型预测视频的整体价值。此外，削峰填谷也是策略精细化的常见方式之一，其是基于视频价值函数曲线，考虑带宽收益、转码成本、播放成本和业务价值等因素，当视频价值大于零时选择转码高压缩率档位，以实现更精确地控制。最后是转存联动，指在转码和存储之间进行置换，特别是针对相对冷门的视频。对于这些视频，可以删除其中的一些档位以节省存储成本，但在需要时可以再次转码并恢复这些档位，从而在计算和存储成本之间实现节约，降低整体点播成本。</p><p></p><p>以上三种视频处理系统精细化演进的策略，在火山引擎的很多业务上都有应用，并且取得了非常大的成本和收益。但是，火山引擎希望这些能力不只是定制化的能力，而是能够朝着更加通用化和产品化的方向发展，这对成本优化非常重要，但也是一个具有挑战性的任务。</p><p></p><p></p><h2>软硬一体的视频处理体系架构</h2><p></p><p></p><p>成本体验的极致优化和业务的规模效应，促使视频处理系统向数据驱动的精细化方向演进。在视频处理系统精细化演进的趋势下，视频云解决方案应运而生。视频云解决方案通过整合大数据分析、人工智能、算法优化等技术，将数据驱动、策略优化和资源管理等能力融入视频处理和传输服务。</p><p></p><p>在众多的视频云解决方案中，英特尔视频云解决方案以其先进的硬件技术和开放式的架构脱颖而出。它利用英特尔强大的处理能力和丰富的视频处理经验，提供高效、可靠、高质量的视频处理能力，在资源精细化管理和策略优化方面具有独特优势。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/08/08e65c6bfca20dc8ec1a0b29cd508e61.png\" /></p><p></p><p>首先，通过 CPU 平台，它提供了高质量，编码灵活、通用性强且稳定可靠的视频处理方案。其次在密度成本方面，通过一机多卡高密度 GPU 编解码，实现了更高的计算密度和成本效益。在大部分情况下，视频处理平台也采用了异构平台的方式，即在云计算或视频处理集群中同时使用 CPU 和 GPU 等加速卡。这种异构平台的优势在于可以灵活配置计算资源，根据具体应用需求分配不同的计算算力和计算单元。对于质量、编程灵活性、通用性要求较高的应用，使用以 CPU 为主的集群进行处理。而对于游戏等需要渲染和密集计算的应用，通过 GPU 加速方案实现高效处理。在异构平台中，关键是如何管理和调配 CPU 和 GPU 的计算能力，以实现最佳的时延和吞吐性能。</p><p></p><p>英特尔的软硬件解决方案在视频领域应用广泛，主要集中在视频编解码、视频分析、游戏、远程桌面（VDI）、内容分发网络（CDN）、沉浸式 AR/VR/XR 六大领域。旨在帮助用户在视频领域的不同应用场景中获得最佳性能。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/40/400443a8a375b6cf36de1d7a13793fa0.png\" /></p><p></p><p>在视频编解码平台，基于英特尔的 CPU 和 GPU 平台可以搭建一个高效能的异构计算平台。在软件方面，包括提供了软件编码、硬件编码、软件开发工具库、性能监控工具等。英特尔的一些软件和工具已经开源，可通过相应的链接进行下载。</p><p></p><p>在视频分析领域，英特尔提供了基于其底层硬件，如 CPU、GPU 和 FPJA（例如 Habana®）的解决方案。这些硬件可以与各种与人工智能相关的框架和平台集成，例如英特尔® 发行版 OpenVINO™ 工具套件，它集成了最新的 AMX 指令集，以实现最佳的 AI 推理性能。此外，英特尔还提供了经过优化的 TensorFlow 和 PyTorch 版本以及自己的模型库（ModelZoo），并将优化后的 AI 模型开源，以便用户集成、测试和应用。</p><p></p><p>在游戏领域，英特尔提供了基于安卓和 Windows 的云游戏解决方案，并提供了 GPA 工具，用于监控游戏和 GPU 的性能，并实现最佳的性能调优。</p><p></p><p>对于 VDI、CDN 等领域，英特尔也提供了相应的软硬件配置、库、SDK 和 Library 等工具，用户可以方便地下载和使用。</p><p></p><p>所有这些解决方案都基于以英特尔® 至强®&nbsp;为主的<a href=\"https://www.infoq.cn/article/Z0gYs0LOvG0FesbVTitP\"> CPU 平台</a>\"、以 Xe 为主英特尔 dGPU 平台和 oneAPI 软硬件，并已经得到广泛应用和成熟验证。随着每一代至强处理器架构的升级，视频处理性能持续提升。从 Catholic 8260 到之前的 istake，再到现在的第四代英特尔® 至强® 可扩展处理器（Sapphire Rapids），视频编解码和转码的处理能力呈线性增长。在第四代英特尔® 至强® 可扩展处理器问世之前，所有的 8K 实时编解码赛事都需要使用四个至强®&nbsp;处理器。而今年随着第四代至强®&nbsp;的推出，已经能够在两个至强®&nbsp;处理器或两个 Sapphire Rapids 处理器上实现 8K 的实时转码，性能更优，性价比更高。</p><p></p><p>在基于第四代英特尔® 至强® 可扩展处理器和 GPU 的异构视频处理平台中，CPU 负责处理视频业务的接收和分发，作为整体调度中心。CPU 编解码产生的视频质量可靠且高。GPU 主要处理速度敏感型的在线业务，包括直播、游戏和渲染加速。使用小型且高密度的 GPU 部署，可进一步降低总体成本。根据需求进行扩展和优化，提供更好的性价比和吞吐量。这种异构平台已经在许多应用领域得到了广泛应用，例如直播编解码、赛事转播、游戏 VDI 超分和视频分析等。它为客户带来了更高的性能和性价比，满足了不同领域的视频处理需求。</p><p></p><p>在异构平台中，如何协同调配 CPU、GPU 和其他加速卡之间的任务是非常重要的。为了解决这个问题，英特尔推出了名为 Deeplink 的技术。Deeplink 技术提供了 Dynamic Power Share（动态功耗共享）、Stream Assist（流式访问）等协同处理和加速的方法，以提高异构平台的整体性能和效率。&nbsp; &nbsp;通过 Deeplink 技术，英特尔可以在 Flex140 这款 GPU 卡上稳定实现 8K 的实时 GPU 编解码。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/95/953d80220045369eb4cb5ecf461588d3.png\" /></p><p></p><p>基于至强®&nbsp;CPU 和 GPU，英特尔构建了可扩展的视频处理器平台。该平台涵盖底层硬件和软件基础架构，包括操作系统、硬件加速器、Docker、API、数据库和 SDK 等。虽然英特尔被认为是一家以硬件为主的公司，但也拥有庞大的软件团队。从底层的 Firmware 到驱动、操作系统，再到 Kubernetes、虚拟化和容器化环境的调度和利用，软件团队致力于与合作伙伴合作，充分利用硬件架构的特性，为视频云上的各种应用提供高效的软件解决方案。</p><p></p><p></p><h2>极致的性能，成本与体验“鱼与熊掌”兼得的密码</h2><p></p><p></p><p>谈到这里，回归最初的问题“成本与体验到底是不是零和博弈”想必大家都有了答案。陆扬表示，成本的优化，无外乎是性价比的问题。当性能提高到一定水平，性价比、整体成本自然就有所下降。在英特尔平台的迭代中，不断提升核心计算能力，包括频率、缓存大小和内存容量等，都是希望通过这些升级来降低整体拥有成本，提高性价比。在过去几十年以及未来，英特尔的软硬件架构解决方案将继续与合作伙伴一起致力于提高视频云行业的服务质量、总体性能和应用成本。</p><p></p><p>有关未来视频处理系统的趋势和发展方向，张清源持极其乐观的态度。他表示，整个视频领域未来会朝着更高清、更沉浸、更交互的方向去演进。算力的增长还会继续，并将推动计算资源的创新，从而提高计算效率和降低成本。其次，AI 算法和端到端算法联动将成为重要的发展方向，使视频处理从全链路角度考虑整体效果。此外，精细化也是一个趋势，类似于推荐系统的个性化推荐，视频处理可能会结合人群特点进行定制化处理。这些方向都有很大的潜力。</p><p></p><p>陆扬补充道，视频的发展趋势包括分辨率的提升和适配范围的扩大。视频分辨率已经发展到 8K，然而，这种超高清分辨率对计算中心提出了巨大挑战，因为处理这样的视频需要处理庞大的计算量。另外，AI 应用的迅猛发展也对计算中心提出了挑战。无论是 CPU、加速器还是异构平台，如何高效智能地运行越来越复杂的应用和计算中心，使计算能够无缝衔接，具备全链路的动态感知和自适应能力，都是未来的重要方向。基于此，陆扬希望英特尔的最新硬件架构平台能够适应不断变化的视频云应用，更好地服务大众需求。</p><p></p><p><a href=\"https://www.intel.cn/content/www/cn/zh/cloud-computing/overview.html?cid=soc&amp;source=WeChat&amp;article_id=4836\">点击此处</a>\"，了解更多英特尔云及互联网行业创新实践。</p>",
    "publish_time": "2023-06-30 12:28:16",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "迄今为止最完整的DDD实践",
    "url": "https://www.infoq.cn/article/e448ac374baae7612d7cd057d",
    "summary": "<p>作者：章磊</p><p></p><p></p><h1>一、为什么需要DDD</h1><p></p><p></p><p>对于一个架构师来说，在软件开发中如何降低系统复杂度是一个永恒的挑战。</p><p></p><p>复杂系统设计：系统多，业务逻辑复杂，概念不清晰，有什么合适的方法帮助我们理清楚边界，逻辑和概念多团队协同：边界不清晰，系统依赖复杂，语言不统一导致沟通和理解困难。有没有一种方式把业务和技术概念统一，大家用一种语言沟通。例如：航程是大家所理解的航程吗？设计与实现一致性：PRD，详细设计和代码实现天差万别。有什么方法可以把业务需求快速转换为设计，同时还要保持设计与代码的一致性？架构统一，可复用资产和扩展性：当前取决于开发的同学具备很好的抽象能力和高编程的技能。有什么好的方法指导我们做抽象和实现。</p><p></p><p></p><h1>二、DDD的价值</h1><p></p><p></p><p>边界清晰的设计方法：通过领域划分，识别哪些需求应该在哪些领域，不断拉齐团队对需求的认知，分而治之，控制规模。统一语言：团队在有边界的上下文中有意识地形成对事物进行统一的描述，形成统一的概念(模型)。业务领域的知识沉淀：通过反复论证和提炼模型，使得模型必须与业务的真实世界保持一致。促使知识(模型)可以很好地传递和维护。面向业务建模：领域模型与数据模型分离，业务复杂度和技术复杂度分离。</p><p></p><p></p><h1>三、DDD架构</h1><p></p><p></p><p></p><h2>3.1 分层架构</h2><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/52/5223d1a98bf042265a4c4fa2bfd9589b.png\" /></p><p></p><p>用户接口层：调用应用层完成具体用户请求。包含：controller，远程调用服务等应用层App：尽量简单，不包含业务规则，而只为了下一层中的领域对象做协调任务，分配工作，重点对领域层做编排完成复杂业务场景。包含：AppService，消息处理等领域层Domain：负责表达业务概念和业务逻辑，领域层是系统的核心。包含：模型，值对象，域服务，事件基础层：对所有上层提供技术能力，包括：数据操作，发送消息，消费消息，缓存等调用关系：用户接口层-&gt;应用层-&gt;领域层-&gt;基础层依赖关系：用户接口层-&gt;应用层-&gt;领域层-&gt;基础层</p><p></p><p></p><h2>3.2 六边形架构</h2><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e1/e1666cc7956968b0ffec600d748d2997.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a1/a1d85615b8b8a9d4de8210a43494b3e7.png\" /></p><p></p><p>六边形架构：系统通过适配器的方式与外部交互，将应用服务于领域服务封装在系统内部分层架构：它依然是分层架构，它核心改变的是依赖关系。领域层依赖倒置：领域层依赖基础层倒置成基础层依赖领域层，这个简单的变化使得领域层不依赖任务层，其他层都依赖领域层，使得领域层只表达业务逻辑且稳定。</p><p></p><p></p><h2>3.3 调用链路</h2><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/cb/cb6f0235fda08431de0376a1288c2c85.png\" /></p><p></p><p></p><h1>四、DDD的基本概念</h1><p></p><p></p><p></p><h2>4.1 领域模型</h2><p></p><p></p><p>领域（战略）：业务范围，范围就是边界。子领域：领域可大可小，我们将一个领域进行拆解形成子领域，子领域还可以进行拆解。当一个领域太大的时候需要进行细化拆解。模型（战术）：基于某个业务领域识别出这个业务领域的聚合，聚合根，界限上下文，实体，值对象。</p><p></p><p></p><h3>4.1.1 核心域</h3><p></p><p></p><p>决定产品和公司核心竞争力的子域是核心域，它是业务成功的主要因素和公司的核心竞争力。直接对业务产生价值。</p><p></p><p></p><h3>4.1.2 通用域</h3><p></p><p></p><p>没有太多个性化的诉求，同时被多个子域使用的通用功能子域是通用域。例如，权限，登陆等等。间接对业务产生价值。</p><p></p><p></p><h3>4.1.3 支撑域</h3><p></p><p></p><p>支撑其他领域业务，具有企业特性，但不具有通用性。间接对业务产生价值。</p><p></p><p></p><h3>4.1.4 为什么要划分核心域、通用域和支撑域</h3><p></p><p></p><p>一个业务一定有他最重要的部分，在日常做业务判断和需求优先级判断的时候可以基于这个划分来做决策。例如：一个交易相关的需求和一个配置相关的需求排优先级，很明显交易是核心域，规则是支持域。同样我们认为是支撑域或者通用域的在其他公司可能是核心域，例如权限对于我们来说是通用域，但是对于专业做权限系统的公司，这个是核心域。</p><p></p><p></p><h2>4.2 限界上下文（战略）</h2><p></p><p></p><p>业务的边界的划分，这个边界可以是一个领域或者多个领域的集合。复杂业务需要多个域编排完成一个复杂业务流程。限界上下文可以作为微服务划分的方法。其本质还是高内聚低耦合，只是限界上下文只是站在更高的层面来进行划分。如何进行划分，我的方法是一个界限上下文必须支持一个完整的业务流程，保证这个业务流程所涉及的领域都在一个限界上下文中。</p><p></p><p></p><h2>4.3 实体（ENTITY）</h2><p></p><p></p><p>定义：实体有唯一的标识，有生命周期且具有延续性。例如一个交易订单，从创建订单我们会给他一个订单编号并且是唯一的这就是实体唯一标识。同时订单实体会从创建，支付，发货等过程最终走到终态这就是实体的生命周期。订单实体在这个过程中属性发生了变化，但订单还是那个订单，不会因为属性的变化而变化，这就是实体的延续性。</p><p></p><p>实体的业务形态：实体能够反映业务的真实形态，实体是从用例提取出来的。领域模型中的实体是多个属性、操作或行为的载体。</p><p></p><p>实体的代码形态：我们要保证实体代码形态与业务形态的一致性。那么实体的代码应该也有属性和行为，也就是我们说的充血模型，但实际情况下我们使用的是贫血模型。贫血模型缺点是业务逻辑分散，更像数据库模型，充血模型能够反映业务，但过重依赖数据库操作，而且复杂场景下需要编排领域服务，会导致事务过长，影响性能。所以我们使用充血模型，但行为里面只涉及业务逻辑的内存操作。</p><p></p><p>实体的运行形态：实体有唯一ID，当我们在流程中对实体属性进行修改，但ID不会变，实体还是那个实体。</p><p></p><p>实体的数据库形态：实体在映射数据库模型时，一般是一对一，也有一对多的情况。</p><p></p><p></p><h2>4.4 值对象（VALUEOBJECT）</h2><p></p><p></p><p>定义：通过对象属性值来识别的对象，它将多个相关属性组合为一个概念整体。在 DDD 中用来描述领域的特定方面，并且是一个没有标识符的对象，叫作值对象。值对象没有唯一标识，没有生命周期，不可修改，当值对象发生改变时只能替换（例如String的实现）</p><p></p><p>值对象的业务形态：值对象是描述实体的特征，大多数情况一个实体有很多属性，一般都是平铺，这些数据进行分类和聚合后能够表达一个业务含义，方便沟通而不关注细节。</p><p></p><p>值对象的代码形态：实体的单一属性是值对象，例如：字符串，整型，枚举。多个属性的集合也是值对象，这个时候我们把这个集合设计为一个CLASS，但没有ID。例如商品实体下的航段就是一个值对象。航段是描述商品的特征，航段不需要ID，可以直接整体替换。商品为什么是一个实体，而不是描述订单特征，因为需要表达谁买了什么商品，所以我们需要知道哪一个商品，因此需要ID来标识唯一性。</p><p></p><p>我们看一下下面这段代码，person这个实体有若干个单一属性的值对象，比如Id、name等属性；同时它也包含多个属性的值对象，比如地址address。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/87/873f5222d236905cc68a255d5a6a0f04.png\" /></p><p></p><p>值对象的运行形态：值对象创建后就不允许修改了，只能用另外一个值对象来整体替换。当我们修改地址时，从页面传入一个新的地址对象替换调用person对象的地址即可。如果我们把address设计成实体，必然存在ID，那么我们需要从页面传入的地址对象的ID与person里面的地址对像的ID进行比较，如果相同就更新，如果不同先删除数据库在新增数据。</p><p></p><p>值对象的数据库形态：有两种方式嵌入式和序列化大对象。</p><p></p><p>案例1：以属性嵌入的方式形成的人员实体对象，地址值对象直接以属性值嵌入人员实体中。</p><p></p><p>当我们只有一个地址的时候使用嵌入式比较好，如果多个地址必须有序列化大对象，同时可以支持搜索。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a5/a54aef71b00379f508e9257479b0728f.png\" /></p><p></p><p>案例2：以序列化大对象的方式形成的人员实体对象，地址值对象被序列化成大对象Json串后，嵌入人员实体中。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e8/e8b1e909f82a8d252d60ac00908ad36f.png\" /></p><p></p><p>支持多个地址存储，不支持搜索。</p><p></p><p>值对象的优势和局限：</p><p></p><p>简化数据库设计，提升数据库操作的性能（多表新增和修改，关联表查询）。</p><p></p><p>虽然简化数据库设计，但是领域模型还是可以表达业务。</p><p></p><p>序列化的方式会使搜索实现困难（通过搜索引擎可以解决）。</p><p></p><p></p><h2>4.5 聚合和聚合根</h2><p></p><p></p><p>多个实体和值对象组成的我们叫聚合，聚合的内部一定的高内聚。这个聚合里面一定有一个实体是聚合根。</p><p></p><p>聚合与领域的关系：聚合也是范围的划分，领域也是范围的划分。领域与聚合可以是一对一，也可以是一对多的关系</p><p></p><p>聚合根的作用是保证内部的实体的一致性，对外只需要对聚合根进行操作。</p><p></p><p></p><h2>4.6 限界上下文，域，聚合，实体，值对象的关系</h2><p></p><p></p><p>领域包含限界上下文，限界上下文包含子域，子域包含聚合，聚合包含实体和值对象</p><p></p><p></p><h2>4.7 事件风暴</h2><p></p><p></p><p>参与者</p><p></p><p>除了领域专家，事件风暴的其他参与者可以是DDD专家、架构师、产品经理、项目经理、开发人员和测试人员等项目团队成员</p><p></p><p>事件风暴准备的材料</p><p></p><p>一面墙和一支笔。</p><p></p><p>事件风暴的关注点</p><p></p><p>在领域建模的过程中，我们需要重点关注这类业务的语言和行为。比如某些业务动作或行为（事件）是否会触发下一个业务动作，这个动作（事件）的输入和输出是什么？是谁（实体）发出的什么动作（命令），触发了这个动作（事件）…我们可以从这些暗藏的词汇中，分析出领域模型中的事件、命令和实体等领域对象。</p><p></p><p>实体执行命令产生事件。</p><p></p><p>业务场景的分析</p><p></p><p>通过业务场景和用例找出实体，命令，事件。</p><p></p><p>领域建模</p><p></p><p>领域建模时，我们会根据场景分析过程中产生的领域对象，比如命令、事件等之间关系，找出产生命令的实体，分析实体之间的依赖关系组成聚合，为聚合划定限界上下文，建立领域模型以及模型之间的依赖。领域模型利用限界上下文向上可以指导微服务设计，通过聚合向下可以指导聚合根、实体和值对象的设计。</p><p></p><p></p><h1>五、如何建模</h1><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/43/43b149936529967ac515d33e654b6e04.png\" /></p><p></p><p>用例场景梳理：就是一句话需求，但我们需要把一些模糊的概念通过对话的方式逐步得到明确的需求，在加以提炼和抽象。建模方法论：词法分析（找名词和动词），领域边界模型验证</p><p></p><p></p><h2>5.1 协同单自动化分单案例</h2><p></p><p></p><p></p><h3>5.1.1 领域建模</h3><p></p><p></p><p>需求：我们需要把系统自动化失败转人工订单自动分配给小二，避免人工挑单和抢单，通过自动分配提升整体履约处理效率。</p><p></p><p>产品小A：把需求读了一遍.......。</p><p></p><p>开发小B：那就是将履约单分配给个小二对吧？</p><p></p><p>产品小A：不对，我们还需要根据一个规则自动分单，例如退票订单分给退票的小二</p><p></p><p>开发小B：恩，那我们可以做一个分单规则管理。例如：新增一个退票分单规则，在里面添加一批小二工号。履约单基于自身属性去匹配分单规则并找到一个规则，然后从分单规则里面选择一个小二工号，履约单写入小二工号即可。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/53/5312bc786a288f54de79bd8d2d199375.jpeg\" /></p><p></p><p>产品小A：分单规则还需要有优先级，其中小二如果上班了才分配，如果下班了就不分配。</p><p></p><p>开发小B：优先级没有问题，在匹配分单规则方法里面按照优先级排序即可，不影响模型。而小二就不是简单一个工号维护在分单规则中，小二有状态了。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/58/58cf18a004ae843f065a79828e2dfd13.jpeg\" /></p><p></p><p>产品小A：分单规则里面添加小二操作太麻烦了，例如：每次新增一个规则都要去挑人，人也不一定记得住，实际客服在管理小二的时候是按照技能组管理的。</p><p></p><p>开发小B：恩，懂了，那就是通过新增一个技能组管理模块来管理小二。然后在通过分单规则来配置1个技能组即可。获取一个小二工号就在技能组里面了。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f8/f8a6e20a3ec34d0662fb5b10275fcd45.jpeg\" /></p><p></p><p>开发小B：总感觉不对，因为新增一个自动化分单需求，履约单就依赖了分单规则，履约单应该是一个独立的域，分单不是履约的能力，履约单实际只需要知道处理人是谁，至于怎么分配的他不太关心。应该由分单规则基于履约单属性找匹配一个规则，然后基于这个规则找到一个小二。履约单与分单逻辑解耦。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/61/61c22dd37c0817ce78f450b34b2d5059.jpeg\" /></p><p></p><p>产品小A：分单要轮流分配或者能者多劳分配，小二之前处理过的订单和航司优先分配。</p><p></p><p>开发小B：获取小二的逻辑越来越复杂了，实际技能组才是找小二的核心，分单规则核心是通过履约单特征得到一个规则结果(技能组ID，分单策略，特征规则)。技能组基于分单规则的结果获得小二工号。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c3/c353ba9f3a7bf1fee029919b2f71f76e.jpeg\" /></p><p></p><p>产品小A：还漏了一个信息，就是履约单会被多次分配的情况，每一个履约环节都可能转人工，客服需要知道履约单被处理多次的情况</p><p></p><p>开发小B：那用履约单无法表达了，我们需要新增一个概念叫协同单，协同单是为了协同履约单，通过协同推进履约单的进度。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c2/c2fafb1d4d44f5d87403abe0850be759.jpeg\" /></p><p></p><p>产品小A：协同单概念很好，小二下班后，如果没有处理完，还可以转交给别人。</p><p></p><p>开发小B：恩，那只需要在协同单上增加行为即可。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c3/c33971cba68ac41ec86ecec63d86ae33.jpeg\" /></p><p></p><p></p><h3>5.1.2 领域划分</h3><p></p><p></p><p>沟通的过程就是推导和验证模型的过程，最后进行域的划分：</p><p></p><p></p><h3>5.1.3 场景梳理</h3><p></p><p></p><p>穷举所有场景，重新验证模型是否可以覆盖所有场景。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/65/658c4234fd1463b75cce474e5758a71e.png\" /></p><p></p><p></p><h1>六、怎么写代码</h1><p></p><p></p><p></p><h2>6.1 DDD规范</h2><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/14/14838d474ade357793f34399c608d51b.png\" /></p><p></p><p>每一层都定义了相应的接口主要目的是规范代码：</p><p></p><p>application：CRQS模式，ApplicationCmdService是command，ApplicationQueryService是queryservice：是领域服务规范，其中定义了DomainService，应用系统需要继承它。model：是聚合根，实体，值对象的规范。Aggregate和BaseAggregate：聚合根定义Entity和BaseEntity：实体定义Value和BaseValue：值对象定义Param和BaseParam：领域层参数定义，用作域服务，聚合根和实体的方法参数Lazy：描述聚合根属性是延迟加载属性，类似与hibernate。Field：实体属性，用来实现update-tracing</p><p></p><p><code lang=\"text\">/**\n * 实体属性，update-tracing\n * @param \n */\npublic final class Field implements Changeable {\n    private boolean changed = false;\n    private T value;\n    private Field(T value){\n        this.value = value;\n    }\n    public void setValue(T value){\n        if(!equalsValue(value)){\n            this.changed = true;\n        }\n        this.value = value;\n    }\n    @Override\n    public boolean isChanged() {\n        return changed;\n    }\n    public T getValue() {\n        return value;\n    }\n    public boolean equalsValue(T value){\n        if(this.value == null &amp;&amp; value == null){\n            return true;\n        }\n        if(this.value == null){\n            return false;\n        }\n        if(value == null){\n            return false;\n        }\n        return this.value.equals(value);\n    }\n    public static  Field build(T value){\n        return new Field(value);\n    }\n}</code></p><p></p><p>Repository：仓库定义AggregateRepository：聚合根仓库,定义聚合根常用的存储和查询方法event：事件处理exception：定义了不同层用的异常AggregateException：聚合根里面抛的异常RepositoryException：基础层抛的异常EventProcessException：事件处理抛的</p><p></p><p></p><h2>6.2 工程结构</h2><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/95/95fec547bbd72e6e34eb3ee3b0b22bbd.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8d/8dfcaf6d5aa1c9c403725bd673c27c75.png\" /></p><p></p><h3>6.2.1 application模块</h3><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/03/0344f041edb4b8c50b2eb3078498db32.png\" /></p><p></p><p>CRQS模式：commad和query分离。重点做跨域的编排工作，无业务逻辑。</p><p></p><p></p><h3>6.2.2 domain模块</h3><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1b/1b83df7c59435456feb4f65198b6fdbd.png\" /></p><p></p><p>域服务,聚合根，值对象，领域参数，仓库定义</p><p></p><p></p><h3>6.2.3 infrastructurre模块</h3><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/eb/eb2670338313e13f25bc271d8459d0fd.png\" /></p><p></p><p>所有技术代码在这一层。mybatis，redis，mq，job，opensearch代码都在这里实现，domain通过依赖倒置不依赖这些技术代码和JAR。</p><p></p><p></p><h3>6.2.4 client模块</h3><p></p><p></p><p>对外提供服务</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/7e/7e357371cfb8e69b840599d57b5f8630.png\" /></p><p></p><p></p><h3>6.2.5 model模块</h3><p></p><p></p><p>内外都要用的共享对象</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2e/2e5d618ee5bfd1fb0671fc5c6064b630.png\" /></p><p></p><p></p><h2>6.3 代码示例</h2><p></p><p></p><p></p><h3>6.3.1 application示例</h3><p></p><p></p><p><code lang=\"text\">public interface CaseAppFacade extends ApplicationCmdService {\n    /**\n     * 接手协同单\n     * @param handleCaseDto\n     * @return\n     */\n    ResultDO handle(HandleCaseDto handleCaseDto);\n​\n}\npublic class CaseAppImpl implements CaseAppFacade {\n    @Resource\n    private CaseService caseService;//域服务\n    @Resource\n    CaseAssembler caseAssembler;//DTO转Param\n    @Override\n    public ResultDO handle(HandleCaseDto handleCaseDto) {\n        try {\n            ResultDO resultDO = caseService.handle(caseAssembler.from(handleCaseDto));\n            if (resultDO.isSuccess()) {\n                pushMsg(handleCaseDto.getId());\n                return ResultDO.buildSuccessResult(null);\n            }\n            return ResultDO.buildFailResult(resultDO.getMsg());\n        } catch (Exception e) {\n            return ResultDO.buildFailResult(e.getMessage());\n        }\n    }\n}</code></p><p></p><p>mapstruct：VO,DTO,PARAM,DO,PO转换非常方便，代码量大大减少。CaseAppImpl.handle调用域服务caseService.handle。</p><p></p><p></p><h3>6.3.2 domainService示例</h3><p></p><p></p><p><code lang=\"text\">public interface CaseService extends DomainService {\n    /**\n     * 接手协同单\n     *\n     * @param handleParam\n     * @return\n     */\n    ResultDO handle(HandleParam handleParam);\n    \n}\npublic class CaseServiceImpl implements CaseService {\n    @Resource\n  private CoordinationRepository coordinationRepository;\n​\n    @Override\n    public ResultDO handle(HandleParam handleParam) {\n        SyncLock lock = null;\n        try {\n            lock = coordinationRepository.syncLock(handleParam.getId().toString());\n            if (null == lock) {\n                return ResultDO.buildFailResult(\"协同单handle加锁失败\");\n            }\n            CaseAggregate caseAggregate = coordinationRepository.query(handleParam.getId());\n            caseAggregate.handle(handleParam.getFollowerValue());\n            coordinationRepository.save(caseAggregate);\n            return ResultDO.buildSuccessResult(null);\n        } catch (RepositoryException | AggregateException e) {\n            String msg = LOG.error4Tracer(OpLogConstant.traceId(handleParam.getId()), e, \"协同单handle异常\");\n            return ResultDO.buildFailResult(msg);\n        } finally {\n            if (null != lock) {\n                coordinationRepository.unlock(lock);\n            }\n        }\n    }\n}</code></p><p></p><p>领域层不依赖基础层的实现：coordinationRepository只是接口，在领域层定义好，由基础层依赖领域层实现这个接口。业务逻辑和技术解耦：域服务这层通过调用coordinationRepository和聚合根将业务逻辑和技术解耦。聚合根的方法无副作用：聚合根的方法只对聚合根内部实体属性的改变，不做持久化动作，可反复测试。模型与数据分离：改变模型：caseAggregate.handle(handleParam.getFollowerValue())。改变数据：coordinationRepository.save(caseAggregate)；事务是在save方法上。</p><p></p><p></p><h3>6.3.3 Aggregate,Entity示例</h3><p></p><p></p><p><code lang=\"text\">public class CaseAggregate extends BaseAggregate implements NoticeMsgBuilder {\n    private final CaseEntity caseEntity;\n    public CaseAggregate(CaseEntity caseEntity) {\n        this.caseEntity = caseEntity;\n    }\n    /**\n     * 接手协同单\n     * @param followerValue\n     * @return\n     */\n    public void handle(FollowerValue followerValue) throws AggregateException {\n        try {\n            this.caseEntity.handle(followerValue);\n        } catch (Exception e) {\n            throw e;\n        }\n    }\n}\npublic class CaseEntity extends BaseEntity {\n    /**\n     * 创建时间\n     */\n    private Field gmtCreate;\n    /**\n     * 修改时间\n     */\n    private Field gmtModified;\n    /**\n     * 问题分类\n     */\n    private Field caseType;\n    /**\n     * 是否需要支付\n     */\n    private Field needPayFlag;\n    /**\n     * 是否需要自动验收通过协同单\n     */\n    private Field autoAcceptCoordinationFlag;\n    /**\n     * 发起协同人值对象\n     */\n    private Field creatorValue;\n    /**\n     * 跟进人\n     */\n    private Field followerValue;\n    /**\n     * 状态\n     */\n    private Field status;\n    /**\n     * 关联协同单id\n     */\n    private Field relatedCaseId;\n    /**\n     * 关联协同单类型\n     * @see 读配置 com.alitrip.agent.business.flight.common.model.dataobject.CoordinationCaseTypeDO\n     */\n    private Field relatedBizType;\n​\n    /**\n     * 支付状态\n     */\n    private Field payStatus;\n    省略....\n​\n    public CaseFeatureValue getCaseFeatureValue() {\n        return get(caseFeatureValue);\n    }\n    public Boolean isCaseFeatureValueChanged() {\n        return caseFeatureValue.isChanged();\n    }\n​\n    public void setCaseFeatureValue(CaseFeatureValue caseFeatureValue) {\n        this.caseFeatureValue = set(this.caseFeatureValue, caseFeatureValue);\n    }\n​\n    public Boolean isPayStatusChanged() {\n        return payStatus.isChanged();\n    }\n​\n    public Boolean isGmtCreateChanged() {\n        return gmtCreate.isChanged();\n    }\n​\n    public Boolean isGmtModifiedChanged() {\n        return gmtModified.isChanged();\n    }\n​\n    public Boolean isCaseTypeChanged() {\n        return caseType.isChanged();\n    }\n    省略....\n​\n   \n    /**\n    * 接手\n    */\n    public void handle(FollowerValue followerValue) throws AggregateException {\n        if (isWaitProcess()||isAppointProcess()) {\n            this.setFollowerValue(followerValue);\n            this.setStatus(CaseStatusEnum.PROCESSING);\n            this.setGmtModified(new Date());\n            initCaseRecordValue(CaseActionNameEnum.HANDLE, null, followerValue);\n        } else {\n            throwStatusAggregateException();\n        }\n    }\n    省略....\n}</code></p><p></p><p>充血模型VS贫血模型：充血模型：表达能力强，代码高内聚，领域内封闭，聚合根内部结构对外不可见，通过聚合根的方法访问，适合复杂企业业务逻辑。贫血模型：业务复杂之后，逻辑散落到大量方法中。规范大于技巧：DDD架构可以避免引入一些其他概念，系统只有域，域服务，聚合根，实体，值对象，事件来构建系统。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/dc/dc3e726f9ee35f7b7cbec68d3dc93217.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/db/db089aa2af32482157088ca568b43d9d.png\" /></p><p></p><p>聚合根的reconProcess的方法的业务逻辑被reconHandler和reconRiskHandler处理，必然这些handler要访问聚合根里面的实体的属性，那么逻辑就会散落。修改后：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d3/d30ed48af7c3aadde3dca7778e6375c7.png\" /></p><p></p><p>没有引入其他概念，都是在聚合根里面组织实体完成具体业务逻辑，去掉了handler这种技术语言。</p><p></p><p>聚合根和实体定义的方法是具备单一原则，复用性原则与使用场景无关，例如：不能定义手工创建协调单和系统自动创建协同单，应该定义创建协同单。Update-tracing：handle方法修改属性后，然后调用 coordinationRepository.save(caseAggregate)，我们只能全量属性更新。Update-tracing是监控实体的变更。 Entiy定义属性通过Field进行包装实现属性的变更状态记录，结合mapstruct转换PO实现Update-tracing。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5e/5e1779654b825b33f90bc836c5477a61.png\" /></p><p></p><p>修改了mapstruct生成转换代码的源码，修改后生成的代码：</p><p></p><p><code lang=\"text\">if(caseEntity.isAppended() || caseEntity.isCaseTypeChanged()){\n    casePO.setCaseType( caseEntity.getCaseType() );\n}</code></p><p></p><p>当属性被改变后就转换到po中，这样就可以实现修改后的字段更新。</p><p></p><p>idea的get和set方法自动生成：由于使用field包装，需要自定义get和set生成代码。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e4/e481d97ebc326e732dd4f005db0730a6.png\" /></p><p></p><p></p><h3>6.3.4 Repository示例</h3><p></p><p></p><p><code lang=\"text\">public interface CoordinationRepository extends Repository {  \n  /**\n     * 保存/更新\n     * @param aggregate\n     * @throws RepositoryException\n     */\n   void save(CaseAggregate aggregate) throws RepositoryException;\n}\n@Repository\npublic class CoordinationRepositoryImpl implements CoordinationRepository {\n  @Override\n    public void save(CaseAggregate aggregate) throws RepositoryException {\n        try {\n            \n            //聚合根转PO，update-tracing技术\n            CasePO casePO = caseConverter.toCasePO(aggregate.getCase());\n            CasePO oldCasePO = null;\n            if (aggregate.getCase().isAppended()) {\n                casePOMapper.insert(casePO);\n                aggregate.getCase().setId(casePO.getId());\n            } else {\n                oldCasePO = casePOMapper.selectByPrimaryKey(casePO.getId());\n                casePOMapper.updateByPrimaryKeySelective(casePO);\n            }\n            // 发送协同单状态改变消息\n            if (CaseStatusEnum.FINISH.getCode().equals(casePO.getStatus())\n                || CaseStatusEnum.WAIT_DISTRIBUTION.getCode().equals(casePO.getStatus())\n                || CaseStatusEnum.PROCESSING.getCode().equals(casePO.getStatus())\n                || CaseStatusEnum.APPOINT_PROCESS.getCode().equals(casePO.getStatus())\n                || CaseStatusEnum.WAIT_PROCESS.getCode().equals(casePO.getStatus())\n                || CaseStatusEnum.CLOSE.getCode().equals(casePO.getStatus())\n                || CaseStatusEnum.REJECT.getCode().equals(casePO.getStatus())\n                || CaseStatusEnum.PENDING_ACCEPTANCE.getCode().equals(casePO.getStatus())) {\n​\n                FollowerDto followerDto = new FollowerDto();\n                followerDto.setCurrentFollowerId(aggregate.getCase().getFollowerValue().getCurrentFollowerId());\n                followerDto.setCurrentFollowerGroupId(aggregate.getCase().getFollowerValue().getCurrentFollowerGroupId());\n                followerDto.setCurrentFollowerType(aggregate.getCase().getFollowerValue().getCurrentFollowerType());\n                followerDto.setCurrentFollowerName(aggregate.getCase().getFollowerValue().getCurrentFollowerName());\n                //拒绝和关闭都使用CLOSE\n                String tag = CaseStatusEnum.codeOf(casePO.getStatus()).name();\n                if(CaseStatusEnum.REJECT.name().equals(tag)){\n                    tag = CaseStatusEnum.CLOSE.name();\n                }\n                statusChangeProducer.send(CaseStatusChangeEvent.build()\n                    .setId(casePO.getId())\n                    .setFollowerDto(followerDto)\n                    .setStatus(aggregate.getCase().getStatus().getCode())\n                    .setCaseType(aggregate.getCase().getCaseType())\n                    .setOldStatus(null != oldCasePO ? oldCasePO.getStatus() : null)\n                    .setAppointTime(aggregate.getCase().getAppointTime()), (tag));\n            }\n​\n            // 操作日志\n            if (CollectionUtils.isNotEmpty(aggregate.getCase().getCaseRecordValue())) {\n                CaseRecordValue caseRecordValue = Lists.newArrayList(aggregate.getCase().getCaseRecordValue()).get(0);\n                caseRecordValue.setCaseId(casePO.getId());\n                recordPOMapper.insert(caseConverter.from(caseRecordValue));\n            }\n​\n        } catch (Exception e) {\n            throw new RepositoryException(\"\", e.getMessage(), e);\n        }\n    }\n}</code></p><p></p><p>CoordinationRepository接口定义在领域层。CoordinationRepositoryImpl实现在基础层:数据库操作都是基于聚合根操作，保证聚合根里面的实体强一致性。</p><p></p><p></p><h1>七、最后结束语</h1><p></p><p></p><p>好的模型，可以沉淀组织资产，不好的模型，逐渐成为负债。功能才是表象，模型才是内在。建模过程是不断猜想与反驳的过程。演化观点是建模过程的基本心智模式。</p>",
    "publish_time": "2023-06-30 14:31:38",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "用AIGC重构后的智能客服，能否淘到大模型时代的第一桶金？",
    "url": "https://www.infoq.cn/article/85UCQYO6sJUC23W1JWBu",
    "summary": "<p>ChatGPT的诞生打响了现代AI军备竞赛的第一枪。以GPT-4、ChatGTP、Bard等为代表的大语言模型在全球各界引起了广泛关注。结合ChatGPT的底层技术逻辑，未来中短期内ChatGPT产业化的方向大致有四类：即智能客服、文字模态的AIGC应用、代码开发相关工作以及图像生成。其中，最适合直接落地的项目就是智能客服类的工作。</p><p>&nbsp;</p><p>基于大模型技术所构建的智能客服正在从根本上改变传统的人机交互过程，大模型自动生成对话流程让运营智能客服更高效，可以提升复杂缠绕问题解决率、人机交互感知程度，以及意图理解、流程构建、知识生成等运营内容的效率。</p><p>&nbsp;</p><p>如果单从产品渗透率层面来看，智能客服早在过去的七八年里就已经在电商、金融等等领域慢慢普及开来了。大模型带来的两个核心改变，一个是开发智能客服产品的成本大幅度下降，另一个就是用户体验的提升。</p><p>&nbsp;</p><p>在2016年左右，做一个智能客服的原型产品要一个七八人的小团队耗时几个月的时间才能完成。有了大模型之后，现在可能一个工程师两到三天就做出来了。虽然将原型产品进行产品化需要更长的时间，但是和以前投入的人力和时间成本来比也是数量级层面的下降。</p><p>&nbsp;</p><p>此外，过去的智能客服产品虽然也称之为“智能”但回答问题时会给用户留下“呆板”的印象，基本上回答内容都是预先写好的模版，能够回答的问题也有限。现在大语言模型能够根据用户的问题和对应的标准答案，给出个性化的答案，用户体验上已经不太容易分辨出是人工客户还是机器客服了，这一点上是很明显的提升。</p><p>&nbsp;</p><p>随着新一代智能技术的突破，尤其是大模型可以为智能客服提供强大的自然语言生成能力，势必将智能客服推向更加智能化、高效化和个性化的新局面。</p><p>&nbsp;</p><p>但不得不注意的是，尽管大语言模型在智能客服领域的应用前景看起来非常乐观，但在现阶段它的应⽤场景仍不成熟：主要表现在其⽣成结果不够稳定，且可信度也不够高。从实际应⽤场景来说，成熟稳定、经过市场验证的产品如果贸然引⼊达模型可能会给产品带来巨⼤的变化，甚⾄影响客户体验、浪费⼤量⼈⼒物⼒。</p><p>&nbsp;</p><p>那么，想要将LLM大语言模型与智能客服产品进行结合，或者将前者落地于ToB SaaS应用软件领域，该如何着手搭建技术栈？大模型产品将如何赋能智能客服产品？带着这些问题，我们采访了华院计算技术总监兼数字人事业部联合负责人贾皓文和中关村科金智能交互研发总监、中关村科金智能客服技术团队负责人王素文，探讨AIGC在智能客服产品中的落地及未来发展趋势。</p><p></p><h2>大模型在智能客服领域的落地</h2><p></p><p></p><p>可以看到，目前AIGC智能客服的优势⾮常明显，随着AIGC智能客服技术的不断升级和完善，其在⾦融、电商、物流等领域的应用前景也是十分乐观的。</p><p>&nbsp;</p><p>但在大模型掀起一场“新革命”革命之前，我们还需要为其铺好每一段路，不能操之过急。比如在智能客服产品领域中，对话通常是限定于特定业务领域和任务驱动的需求。但客户并不希望访客进来只是为了寻找⼀个超级智能、善解⼈意、会写会画的聊天机器⼈。对话内容必须在企业业务范畴内收敛，服务于客服和营销场景，解决和处理问题，不要浪费宝贵的资源。直接将ChatGPT这类大模型引⼊客服领域⽽不加控制，其结果难免会让人失望。</p><p>&nbsp;</p><p>构建一款能够实际应用于业务中的大模型并非容易事，通常需要完成多项步骤，包括大模型选型、数据采集清洗、模型训练、模型测试与评估、模型微调、部署应用等。具体链路：</p><p>&nbsp;</p><p>选择开源的通用大模型收集领域数据，用领域数据继续训练开源大模型（学术上叫知识注入），得到领域大模型整理领域任务的指令集合（可以半自动生成），用这些指令数据对领域大模型进行指令微调筛选优质的真实场景的客服多轮对话数据，继续微调领域大模型（使领域大模型的对话能力增强）收集一些安全相关的问题（例如涉及到政治、敏感话题、歧视等），人工给出符合安全要求的答案，继续微调大模型（对齐到人类的价值观、规范）模型部署，对接智能客服系统进行应用</p><p></p><h3>数据准备</h3><p></p><p></p><p>对话模型的训练数据应该具有足够的质量和多样性，以提高模型的泛化能力。对话数据可以通过爬虫、问答社区、对话记录等多种方式获得。在获得数据后，需要进行数据清洗和预处理，使得数据格式规范、数据质量高。</p><p></p><h3>模型训练</h3><p></p><p></p><p>在准备好训练数据后，就可以开始训练大模型了。在训练过程中，需要选择合适的超参数，如学习率、批量大小、训练轮数等，以达到最佳的效果。另外，在训练过程中，可以使用分布式训练技术，以加速训练过程。</p><p></p><h3>模型优化</h3><p></p><p></p><p>在模型训练完成后，需要对模型进行评估和优化，以提高模型的泛化能力和效果。常见的优化方法包括调整超参数、增加训练数据、使用正则化技术、剪枝模型等。另外，也可以通过模型蒸馏等技术，将大模型的知识转移给小模型，以提高小模型的效果。</p><p></p><h3>对话生成</h3><p></p><p></p><p>在模型训练和优化完成后，就可以进行对话生成了。对话生成可以通过两种方式实现：一种是使用单个模型进行对话生成，另一种是使用多个模型进行对话生成。在使用单个模型进行对话生成时，需要对话模型具备记忆能力，即模型可以通过上下文信息，生成更加合理、连贯的对话回复。在使用多个模型进行对话生成时，可以利用模型的多样性，生成更加丰富、多样的对话文本。</p><p>&nbsp;</p><p>在智能客服产品中，最需要内容⽣产能⼒的地⽅，莫过于知识库。⼀般⽽⾔，智能客服产品都具备这样⼏类知识库：内部知识库、机器⼈知识库和外部知识库。</p><p>&nbsp;</p><p>对于内部知识库，⼀般将其定义成需要实时定位查询使⽤的知识库。由于企业的业务变化频繁，知识库的调整需要及时到位。传统的上传、编辑、整理等流程⾮常耗费⼯作量。引⼊大模型，可以协助⾼效智能的协助员⼯归类、⽣成知识库的类⽬及明细。同时，还可以增加对外部数据源的引⽤，并减少知识库的同步操作。⽤户在实际应⽤时，还可以给对知识点给出反馈，帮助知识库⾃动调节权重。</p><p>&nbsp;</p><p>机器⼈知识库是⽂本和语⾳机器⼈能够回答访客问题的核⼼所在。机器⼈知识库的有效内容对于机器⼈的表现⾄关重要。对于未知问题的整理，需要智能客服使⽤者⼤量投⼊⼯作量。借助⽤户反馈对未知问题进⾏⾃动整理和关联，能节省很多知识库维护者的⼯作。同时，通过多机器⼈组合的⽅式，在⼀通会话中接⼒棒⼀般服务于客户的不同场景，大模型专属机器⼈也可以在特定的场合发挥能⼒，并逐步替代⼀些以往模式僵化的问答型机器⼈。</p><p>&nbsp;</p><p>而外部知识库需要整合在智能客服产品中，将已整理的知识内容转化为输出产物，更⽅便⽣成知识⽂章、图⽚、甚⾄⾳视频。基于 ChatGPT的多模态的AIGC能⼒，可以快速⽣成⼀个个性化的知识空间。</p><p>&nbsp;</p><p>总的来说，还是利⽤大模型⾃⾝的⽣成能⼒，基于向量数据库、可信内容审核等技术，为智能客服提供优质的内容补充。</p><p>&nbsp;</p><p>尽管大模型在智能客服领域的构建流程和链路已经基本清晰，但在实际落地过程中仍然面临着多种挑战。</p><p>&nbsp;</p><p>据受访专家透露，这些挑战主要来自数据层面，以及和实际客户的系统场景对接层面，产品本身反而是比较容易的。例如，新要上的系统的客户数据本身是原始的数据，需要清理出高质量的结构化的数据才能够有一个比较好的效果，但这一步是十分困难的。</p><p>&nbsp;</p><p>第二个是当实际深入到业务中去的时候，会出现各种信息散落在客户内部的各种系统里的情况，只有把这些信息打通才能有一个好的效果和体验。这些都是未来需要重点攻破的难题。</p><p>&nbsp;</p><p></p><blockquote>做Demo很容易，但是要深入场景的成本，其实主要不在有一个模型上，其实没法给一个具体的数字。</blockquote><p></p><p></p><h2>如何让智能客服说“人话”？</h2><p></p><p></p><p>目前，以ChatGPT为代表的大模型已经在许多企业中用于智能客服应用。它可以通过自动回答常见问题、解决简单问题和提供基本支持，减轻人工客服的负担。大语言模型通过深度学习和大量的语言数据训练，能够理解和生成人类语言，使得用户能够以自然的方式与它交互。在一些常见的客户查询和问题解答方面，这类大模型已经取得了相当不错的效果。</p><p>&nbsp;</p><p>然而，当前的大语言模型在实际应用于智能客服场景中时仍存在一些挑战——它可能会生成错误或不准确的回答，尤其是对于复杂的问题或领域特定的知识，这就对智能化程度提出了更高的要求。未来的在线客服系不仅需要更高级的算法和机器学习技术，还需要更多精准的自然语言处理能力。这将对在技术上不太强大的企业形成巨大的压力。</p><p>&nbsp;</p><p>此外，随着用户数量和访客量的增多，未来智能客服将需要处理超大规模的并发请求。这需要系统在多种方面都拥有特殊的设计，如负载均衡、高可扩展性和高可用性等。</p><p>&nbsp;</p><p>现在市面上的很多对话机器人，回答是单一固定的，变化比较少，与真实的人与人对话还有差距，未来的智能客服系统将需要进一步加强对用户行为的自适应性和个性化服务。这就需要系统学习更多的用户数据和信息，并适应不同的用户行为，为他们提供更好的服务和体验。如何提升用户体验就成为了智能客服供应商主攻的方向。</p><p>&nbsp;</p><p>具体来讲，主要应从人性化服务、个性化服务和拟人化的对话交互方面进行改进。</p><p>&nbsp;</p><p>首先是人性化服务。在场景和意图理解精准的基础上，附加更有温度的对话语境，可以让机器人在拟人化上，再进一步。多模态情感计算是实现这一步的有效方法。目前，我们正在推进虚拟数字人客服进行人机交互对话，在此过程中结合情感计算，可识别用户通过视频、语音、文本所传递的情感表达，让智能客服在应对是作出相应情感反馈，打造具有情感理解、有温度的人机交互。这种多模态情感计算技术的实现方法主要是通过基于专家规则和基于机器学习两种。其中，基于机器学习的方法通过训练模型来自动学习情感状态的分类标准，可以更好地适应不同领域、不同语境下的情感表达，效果相对更优些。</p><p>&nbsp;</p><p>其次是拟人化的对话型交互。通过场景化设计优化，比如问题拆解、主题继承、多轮对话、上下文理解等等，机器人能够带来一种更加贴近自然对话场景的对话型交互模式。</p><p>&nbsp;</p><p>第三是个性化服务。根据客户画像千人千面提供个性化服务，从多角度出发进行语义理解，此外还要附加语音情绪判别。</p><p>&nbsp;</p><p>大模型诞生后，无疑为智能客服领域注入了新的“营养剂”。这种“革新”体现在多个方面，包括座席辅助和座席提效、闲聊寒暄、话术优化建议、提供语料扩写等。</p><p>&nbsp;</p><p>座席辅助和座席提效：过去的智能辅助更多局限于按单轮对话来完成，基于大模型的能力能够快速分析并生成面向客户侧的系统支撑策略，这种处理效率和结果，远超出依附纯规则或者纯知识库所能达到的效果；闲聊寒暄：是智能客服非常关键的基础能力，能够帮助企业对任意进线客户进行即时响应。过去的智能客服闲聊主要是将各类非业务相关的语料堆到素材库，并通过调取数据库已有的关键词进行内容的回复。如今可以充分借助大模型能力提供闲聊，在非业务领域上为座席和客服提供更多决策依据和参考；话术优化建议：话术往往决定了客服的效果，话术回复不精准将直接导致用户的流失。通过大模型强大的内容生成能力，智能客服能够对话术进行不断地迭代和与优化，提升客户满意度；提供语料扩写：在智能客服冷启动阶段，往往需要足够多的语料来丰富知识库的相似问法，以保证上线初期智能客服有足够高的解决率和场景覆盖率。以往的语料生成模型很难覆盖众多垂直行业和领域，大模型在通用领域中积累了足够的数据和语料，可以很好的弥补语料生成模型的不足，快速生成相似问法，解决智能客服冷启动语料不足，场景覆盖率低等问题。</p><p>&nbsp;</p><p>归根结底，提高对话质量的核心还是理解客户和用户的场景，以及能够搭建出衡量得失的数据框架。这两个组合之下，会有一个循环反馈的过程，就能够通过正常的产品迭代达到好的效果，并且能够衡量出来ROI和对实际业务的共享。</p><p></p><h2>未来，AIGC是否会完全取代客服人员？</h2><p></p><p>&nbsp;</p><p>随着全社会点数智化进程步入深水区，越来越多的企业开始使用数字化工具——智能客服系统来做好客户服务，打造极致体验，进而提升企业核心竞争力。</p><p>&nbsp;</p><p>无论是垂直领域还是通用型职能客服厂商，都希望凭借AIGC技术的成熟让企业更上一个台阶。但要想把梦境变为现实，仍然任重⽽道远。⽐如需要衡量成本与收益之间的投⼊产出⽐、需要保证⽤户的数据隐私安全并遵守相关的法律法规、需要保证产品在不同⾏业场景的通⽤性及灵活度。</p><p>&nbsp;</p><p>就客服行业而言，传统人工客服向智能客服升级是必然趋势，但在可预见的未来内，智能客服还无法完全替代人工客服。它们分别有不同的特点和定位，在处理复杂问题以及对高潜客户跟进的服务场景中，人工客服仍然处于不可或缺的地位。因此，企业需要根据自身实际情况，综合考虑人工客服和智能客服的优势，从而制定最佳的客户服务策略。</p><p>&nbsp;</p><p>整体来看，AIGC未来有较广阔的发展空间，未来两三年AIGC和类ChatGPT产业将高速发展，带来互联网和企服产业的进一步升级和变化。</p><p>&nbsp;</p><p>不过目前在内容质量、投入成本、数据安全、隐私规范、版权归属等方面仍存诸多问题。另外，在长文本生成、视频生成、融入世界知识等方面，还需更好的建模方法；通过加大模型参数增强AI能力，其训练和推理成本高昂，需要探索更经济、有效的性能改进途径。</p><p>&nbsp;</p><p>采访嘉宾 ：&nbsp;</p><p>&nbsp;</p><p>贾皓文，华院计算技术总监兼数字人事业部联合负责人，原阿里巴巴集团架构师，也是一位连续创业者。</p><p>王素文，中关村科金智能交互研发总监、中关村科金智能客服技术团队负责人。</p><p>&nbsp;</p><p></p><h4>AIGC&nbsp;课程推荐</h4><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/39/3953d202a8310824d0865106bcbc2c55.png\" /></p><p></p><p>&nbsp;极客时间《AI大模型应用开发&nbsp;·&nbsp;实战营》首发，作者是深耕&nbsp;AI&nbsp;领域多年的技术专家彭靖田。</p><p>&nbsp;</p><p>课程&nbsp;8&nbsp;周全程直播授课，覆盖硬件选型、大模型理论、&nbsp;LangChain&nbsp;开发框架剖析和落地实践，全程紧贴实际生产环境。现在市面上流行实用的，比如&nbsp;AutoGPT&nbsp;数字员工、翻译助手、智能销售顾问等经典项目，课程中都会带你动手实践。</p><p>&nbsp;</p><p>不容错过的历史机遇，帮助你掌握利用大模型开发相关的&nbsp;AI&nbsp;应用的能力！</p>",
    "publish_time": "2023-06-30 14:35:10",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "吴鹤意认出席 ArchSummit 深圳，将分享《跨平台操作系统供应链安全及可信计算实践》话题",
    "url": "https://www.infoq.cn/article/9LSkCLAUiipxTNm53OR6",
    "summary": "<p>7&nbsp;月&nbsp;21&nbsp;日&nbsp;-&nbsp;22&nbsp;日，&nbsp;在&nbsp;<a href=\"https://archsummit.infoq.cn/2023/shenzhen?utm_source=infoqweb&amp;utm_medium=teacherarticle&amp;utm_campaign=8&amp;utm_term=0531\">ArchSummit&nbsp;全球架构师峰会（深圳站）</a>\"，深信服安全专家吴鹤意，将于会上发表题为《跨平台操作系统供应链安全及可信计算实践》的演讲，通过新的软件供应链攻击路径，对国内常见的几种操作系统进行实际测试，并基于&nbsp;TPM&nbsp;EDR&nbsp;公开解决方案应对攻击。</p><p></p><p>吴鹤意于东南大学网络安全专业毕业，拥有丰富的安全工作经验，参与过多个中央部委级网络安全体系建设以及攻防演练和实战，先后在华为&nbsp;2012&nbsp;实验室和深信服创新研究院担任安全技术专家，从事&nbsp;AI&nbsp;安全，数据安全，云安全，安全开发，情报狩猎等领域的研究和产品端到端落地。在国内外知名网络安全会议发表演讲，例如&nbsp;HITB，BSides，看雪&nbsp;SDC，XCon，Geekpwn&nbsp;等，参与了国内外多个安全标准的编制（IEEE&nbsp;P2841，国产化操作系统安全等），发表了多篇&nbsp;EI/SCI&nbsp;论文和专利，拥有国内外多项安全证书（CISP，CCSK，CDPSE&nbsp;等），给监管部门提交过若干&nbsp;0day&nbsp;漏洞，国产化操作系统通用安全问题和高级攻击狩猎溯源报告。</p><p></p><p>相信通过吴鹤意的分享，你将了解自身受影响的程度，以及检查是否已经被攻击，并使用新的&nbsp;TPM&nbsp;EDR&nbsp;公开方案来缓解此类攻击。</p><p></p><p>除上述议题外&nbsp;，ArchSummit&nbsp;深圳还将围绕<a href=\"https://archsummit.infoq.cn/2023/shenzhen/track/1537?utm_source=infoqweb&amp;utm_medium=teacherarticle&amp;utm_campaign=8&amp;utm_term=0531\">基础架构技术</a>\"、<a href=\"https://archsummit.infoq.cn/2023/shenzhen/track/1532?utm_source=infoqweb&amp;utm_medium=teacherarticle&amp;utm_campaign=8&amp;utm_term=0531\">DataOps、Data&nbsp;Fabric&nbsp;等高效数据开发与服务模式</a>\"、<a href=\"https://archsummit.infoq.cn/2023/shenzhen/track/1534?utm_source=infoqweb&amp;utm_medium=teacherarticle&amp;utm_campaign=8&amp;utm_term=0531\">Mesh&nbsp;技术实践案例</a>\"、<a href=\"https://archsummit.infoq.cn/2023/shenzhen/track/1535?utm_source=infoqweb&amp;utm_medium=teacherarticle&amp;utm_campaign=8&amp;utm_term=0531\">QUIC&nbsp;传输和架构优化</a>\"等进行分享。</p><p></p><p>数十位业界专家，上百个国内外一线大厂前沿技术案例，一定会给你带来很多全新的开发灵感。期待与你线下交流！&nbsp;现在购票，享&nbsp;9&nbsp;折特惠，立省&nbsp;¥880！咨询购票请联系&nbsp;18514549229（微信同手机号）</p><p><img src=\"https://static001.infoq.cn/resource/image/9d/aa/9d6a27547062ee2e089f91bdc4ba1eaa.png\" /></p><p></p>",
    "publish_time": "2023-06-30 15:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "对话用友王文京，探寻企业数智化的“密钥”",
    "url": "https://www.infoq.cn/article/6VTpWz3EvXRBzzAwhZsr",
    "summary": "<p>数智化时代的来临，令企业迷茫也焦虑。数智化成败关键在哪？怎么才能让数智化变成“有回报的投资”？</p>\n<p>本期《行知数字中国》走进用友产业园，与用友网络董事长兼CEO王文京探寻企业数智化的“密钥”。作为一把手，王文京带领用友走过35年，穿越了数次技术周期；而时至今日，他仍奋斗在企业发展的第一线。本期视频通过与王文京的深度交流，探寻数智商业时代企业持续进化的“密钥”。</p>\n<p>相关文章延展阅读：<a href=\"https://www.infoq.cn/article/UNmAT4eReyYCOISHbrTc\">《AI 进入普及应用阶段，用友已启动企业应用大模型训练》</a></p>\n<p>点击文章，可以进一步了解用友对于数智化的深刻洞察和探索。</p>\n<p>如果你对《行知数字中国》栏目或者更多企业数字化转型案例感兴趣，欢迎关注「<strong>InfoQ 数字化经纬</strong>」公众号，我们将持续为您推送更多、更优质的数字化案例内容和线上线下活动。</p>",
    "publish_time": "2023-06-30 16:25:34",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "AI 进入普及应用阶段，用友已启动企业应用大模型训练",
    "url": "https://www.infoq.cn/article/UNmAT4eReyYCOISHbrTc",
    "summary": "<p>位于北京西北角，一座建筑因其独特外观格外引人注目。狭长的外形，恰似一个稳固的底座；顶部的曲线设计，又如云浪一般。它的建筑面积达10000平方米，坐落在用友产业园内，被称为“数智企业体验馆”。</p><p></p><p>通过还原真实场景，这里是用友展示“数智企业”全貌的体验中心。建筑的外观设计，隐喻着在时代浪潮更迭下，用友打造“数智化底座”的理念。</p><p></p><p>1988年，用友网络董事长兼&nbsp;CEO&nbsp;王文京在海淀南路一个9平方米的小房间创建了“用友财务软件服务社”；如今，680亩的用友产业园，已经是北京北清路的一大地标。作为一把手，王文京带领用友走过35年，穿越了数次技术周期；而时至今日，他仍奋斗在企业发展的第一线。</p><p></p><p>本期《行知数字中国》栏目走进用友产业园（可点击<a href=\"https://www.infoq.cn/video/6VTpWz3EvXRBzzAwhZsr\">此处</a>\"或微信搜索【InfoQ视频号】查看视频），通过与用友网络董事长兼CEO王文京的深度交流，探寻数智商业时代企业持续进化的“密钥”。</p><p></p><p></p><blockquote>出品｜InfoQ&nbsp;·《行知数字中国》访谈主持｜霍太稳，极客邦科技创始人兼&nbsp;CEO访谈嘉宾｜王文京，用友网络董事长兼CEO作者｜罗燕珊&nbsp;&nbsp;&nbsp;编辑｜高玉娴</blockquote><p></p><p></p><p></p><h2>数智企业的“六维”画像</h2><p></p><p>作为我国本土乃至全球云服务与软件提供商的典型代表，用友从信息化时代一路陪伴企业迈进了数智化时代，期间使能了无数企业实现转型。在王文京的眼里，所谓的“数智企业”有非常清晰的轮廓和标签。</p><p></p><p>第一，客户导向，通过新技术与客户连接，真正以客户为中心的模式和流程。</p><p></p><p>第二，生态共荣，形成上下游企业联动，与整个生态伙伴和群体共生共创、共同发展。</p><p></p><p>第三，员工能动，员工不再像先前那样被动从上到下地被指挥，而是基于数智平台的赋能，提升能力，主动地作为。</p><p></p><p>第四，实时感知，从技术角度看“数智企业”具有三个特征，感知消费者、感知生态、感知员工最新状态，进而感知和反馈企业的生产、供应链、设备运行。</p><p></p><p>第五，数据驱动，数据已经成为企业重要资产，是企业生产、经营、决策的关键驱动要素，这是对原来流程驱动的企业经营模式的颠覆。</p><p></p><p>第六，智能运营，随着AI成为全球IT技术与产业创新的中心，商业创新也进入全面数智创新的阶段，技术的发展，智能化的驱动方式，让企业的运营变成智能化的运营。</p><p></p><p>可以看到，数智技术在企业的应用，已经超越了单个企业的数智化，越来越多地走向了产业级数智化。这六个特征共同构成了“数智企业”的画像，涉及企业内外部运营、组织、流程、技术等方方面面。那么，究竟如何才能实现如此全面的能力重塑呢？</p><p></p><p></p><h2>数智化成败关键在于能否与战略相匹配</h2><p></p><p></p><p>“企业数智化的推进，是企业进步发展的一项工程，而不是为数智化而数智化。”谈到企业数智化转型路径时，王文京表示，企业在推进数智化过程中，首先要把数智化战略和公司发展战略紧密结合，并以此为指引制定相应的数智化规划，承接战略的落地。</p><p></p><p>数智化时代的来临，令企业迷茫也焦虑，很多企业盲目地进行数智化转型，使得出现“水土不服”的情况，追根究底，其实是很多企业在“顶层设计”这一步就被卡住，甚至有些还停留在“数智化就是做信息化项目”的认知层面。</p><p></p><p>这些“误区”往往导致企业数智化战略和发展规划脱节，使得数智化项目与企业目标不协调，最终造成资源浪费和效率低下。</p><p></p><p>在王文京看来，数智化的底层逻辑是“业务和管理的重构与创新”，其核心是通过数据智能工具、平台，发挥数据的价值来赋能企业的业务经营和管理运营。所以，企业数智化转型升级成败的关键，是数智工具和数据资源是否能够与企业的业务高度融合。数智化并非结果而是路径，要服从、服务于企业发展战略，才能为企业带来价值。</p><p></p><p>作为一项长期投入，数智化转型的过程充满着各种不确定性。如何评估数智化的投入产出比对于很多企业来说是一个棘手难题。对此，如果能够把数智化规划与企业发展战略、产品和业务创新、组织和管理变革相结合，就能更好地衡量数智化转型对业务增长的影响，更准确评估投资回报率。“从这个角度来看，数智化就不是简单一个成本支出，更是一个有回报的投资。”</p><p></p><p></p><h2>半部中国数智化发展史</h2><p></p><p></p><p>深刻洞察背后，离不开用友自身的多年转型探索。</p><p></p><p>成立于1988年的用友今年迈入了第35个年头，可以说用友既是中国企业数智化变革的见证者，也是参与者，更是推动者。用友自身的发展历程，同样也是中国数智化进程的缩影。</p><p></p><p>具体而言，用友经历了两次大的转型：第一次转型是从部门级的财务软件转型为企业级&nbsp;ERP；第二次转型是从&nbsp;ERP（企业资源计划）&nbsp;走向<a href=\"https://www.infoq.cn/article/9ejcKHgV8iJ8wSXvCI56\">BIP</a>\"（商业创新平台）。</p><p></p><p>用王文京的话说，每一次的转型，都代表着用友的产品和服务路径的演进。</p><p></p><p>在其发展的1.0时期，用友主要提供财务软件，服务于超40万家企事业单位的财务会计部门；2.0时期，用友主要提供ERP服务，涵盖范围不再限于单一部门，而是人力资源、财务、物流、生产、供应链和销售等多个部门的业务信息化；当前，用友进入3.0新时期，随着数智化时代的到来，其主打产品是商业创新平台--用友BIP，目标是成为全球前三的企业云服务与软件提供商。</p><p></p><p>每个阶段，用友为企业客户提供的核心价值也不同。在信息化时代，主要是通过ERP流程优化提高企业的运营效率。而在数智化时代，他们注重商业创新和重构发展力，为企业赋能产品和业务创新、组织和管理变革，重塑企业发展。其中，数据驱动成为这一新阶段的关键驱动机制。</p><p></p><p>关于如何把握每一次转型的时机，王文京直言，这是一个与时俱进的过程。用友转型主要基于两个层面的考量：一是关注技术的发展，二是关注客户需求的变化，要主动适应产业发展变化。</p><p></p><p></p><h2>在AI领域早有布局</h2><p></p><p></p><p>就技术敏锐度而言，用友数年前在业界就率先提出“数智化”（数字化+智能化）、“数智企业”的概念，表达的就是以数字化为基础，智能化产生新价值的理念。</p><p></p><p>2017年，用友便开始规模研发用友BIP。值得注意的是，一开始，BIP的定位就是帮助企业实现数智化，其中建立了多项智能中台服务能力。</p><p></p><p>基于这些中台服务能力，用友还开发了多个智能化应用服务。例如，用友BIP的PaaS平台<a href=\"https://www.infoq.cn/article/ACRSeciA78MqfK5P1HqW\">iuap</a>\"提供的智能中台已经具备了RPA、VPA、智能大搜、规则引擎、知识图谱、AI工作坊等多项智能化功能。它还提供企业画像、人才画像、商机推荐、供应商推荐等智能服务，并在财务、人力、采购、制造、营销等业务领域应用，提供上千个AI智能场景。</p><p></p><p>王文京指出，AI&nbsp;在全球经历了几十年的发展，但在2012年左右其就洞悉到，随着深度学习和大数据集的兴起，AI的发展将迈入创新业务阶段——这是重要的转折点。直到2022年底，对话式AI进一步推动AI进入普及应用阶段，全球IT技术与产业创新以云计算为中心开始转向以AI为中心的新阶段，全面数智商业时代已经到来。</p><p></p><p>据介绍，目前，用友在AI应用领域的研究主要分为三个类型：</p><p></p><p>首先是自然交互，即人机之间各种应用系统或服务系统的交互。</p><p></p><p>其次是快速智能化的企业应用升级，尤其是个性化应用，通过结合语言大模型和低代码平台，可以加速应用生成。</p><p></p><p>其三是企业业务和职能的智能化管理，涉及的层面更加丰富和多语言。对于企业应用业务层面的智能化，需要深入结合多年的企业应用领域经验，利用新的人工智能模式和技术，训练面向企业业务和管理的大模型。这一领域仍有许多创新突破的空间。</p><p></p><p>“接下来，用友会进一步加速在智能化方面的发展，并投入相关资源启动推进企业应用大模型的训练工作。”王文京补充说。</p><p></p><p></p><h2>深耕行业创新价值</h2><p></p><p></p><p>2023年初，用友迎来了一次自身内部升级，其对大型企业客户的数智化解决方案与服务，由此前的“以地区为主，地区+行业”组织模式升级为“以行业为主，行业+地区”的运行模式。通过本次用友组织架构升级，我们亦可窥见用友不断靠近客户需求的决心。</p><p></p><p>这次大刀阔斧的升级背后的思考逻辑，正是为了更好地适应市场需求，深入不同行业的前端业务场景。</p><p>如前所述，用友的产品从部门级到企业级甚至社会级持续演进，这个过程的背后伴随着传统行业数智化转型进程的持续加速，技术在其中扮演的角色，不再仅仅解决某个点或者某条线的问题，而是推动全企业、全产业、全方位的业务优化和模式创新。</p><p></p><p>越是往深了走，行业差异化的问题也会随之浮出水面。信息化时代通用的解决方案很难再适用于不同行业和不同企业，比如，工业制造的痛点几乎不可能用金融行业的办法化解，甚至流程制造遇到的挑战和离散制造也并不相通。</p><p></p><p>因此，作为技术产品和服务提供商，就必须往更贴近数据发生的地方，也就是具有行业属性的前端业务场景做延展。从这个层面来看，用友的组织变革，是深耕行业的大势所趋，是为了“接住”客户需求的必然选择。</p><p></p><p></p><h2>践行长期主义，冲在“创新”最前端</h2><p></p><p></p><p>身处当下日渐迅猛的数字化与智能化浪潮，如果用王文京此前总结的企业持续经营的动态模型——“冲浪模型”来理解，这些革新浪潮呈周期性发生，并且频率会越来越快。</p><p></p><p>“冲浪模型”是王文京基于用友自身经验总结提炼的动态模型，强调企业在每一次（而非某一次）新的浪潮来临时，都要像冲浪运动员一样，持续且主动地推进新阶段的产品、业务、运营模式和管理体系的创新，从而保持始终位居产业前列。因为即使当前的浪潮过去，下一个浪潮也会到来。具备持续创新的能力，才是企业成功应对数智化浪潮的关键。</p><p></p><p>而对于企业员工而言，同样需要在这个过程中不断学习和更新技能，以新技术武装自己并驱动企业发展。</p><p>以软件开发人员为例，随着AI技术肉眼可见地加速发展和应用落地，未来许多代码都可以由机器生成，这意味着大家可以专注于更高层次的开发工作，将熟练性的任务交给机器，这样既能提升工作效率，还能更快地进行软件产品创新。</p><p></p><p>在王文京看来，新技术会不断推陈出新，在这个过程中，无论是企业或是个人，都要用更加积极和正向的态度去对待和拥抱它们。</p><p></p><p>所以，驱动用友一次又一次穿越技术周期的“密钥”究竟是什么？答案无它：“技术和客户”是标尺，除此之外，还有一颗主动变化的心。</p>",
    "publish_time": "2023-06-30 16:31:06",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "专访 OpenSSF CTO：安全问题应该考虑在构建模型之前，别出了问题就让ChatGPT“背锅”",
    "url": "https://www.infoq.cn/article/dalIGpeiZNB8m93pPGti",
    "summary": "<p>近年来，开源软件的使用率越来越高，许多组织依赖它作为其 IT 基础设施的重要组成部分。然而，开源软件供应链安全已成为各组织的主要关注点，因为使用开源软件会给其系统带来漏洞和安全风险。</p><p>&nbsp;</p><p>ChatGPT、Bard等大语言模型问世后，其带来工作效率的提升让人们积极地探索如何将这些大模型能力应用到各行各业中。但不得不注意到是，用于训练这些大模型的数据通常来源于公开获取的内容，如果数据源被攻击者控制，在数据标注时又未能及时识别出这些恶意数据，那么攻击者就有可能通过这些恶意的数据干扰模型结果。</p><p>&nbsp;</p><p>此前，Google在发布Bard时就因为提供了错误的事实结果，导致当日股价大跌。</p><p>&nbsp;</p><p>在使用公开数据集训练ChatGPT、Bard这类大语言模型时会不会为后续的结果带来隐患？使用大模型在安全方面究竟是利大于弊还是弊大于利？大模型带来生成力大幅提升，同时也会存在安全上的问题，我们该如何权衡？近日，InfoQ有机会再次采访了 OpenSSF CTO Brian Behlendor，听他来聊一聊对上述相关问题的看法。</p><p>&nbsp;</p><p></p><blockquote>InfoQ：能不能跟我们分享一下，OpenSSF最近取得了哪些新进展？</blockquote><p></p><p>&nbsp;</p><p>Brian Behlendorf：当然，OpenSSF仍在继续发展。我们继续吸引更多企业成为基金会成员。我们目前已经拥有100多家成员组织，更多公司的加入也让我们获得了做好安全工作的资源。过去6个月来，最大的一项成果就是推出了SLSA，即针对软件工件的供应链等级。这是一种对供应链和软件构建安全程度的描述方式，它贯穿整个软件供应链，允许大家设置政策以适应所在行业的监管政策及要求。</p><p>&nbsp;</p><p>我们都知道，世界各地的监管机构和政府越来越关注如何将软件纳入整个供应链体系，这正是解决问题的关键所在。</p><p>&nbsp;</p><p>最后是另一个重大改变是关于我的工作内容的变动。从2021年秋季、也就是9月左右加入以来，我一直以总经理的身份领导OpenSSF。但从上个月开始，我把职务移交给了另一位新任总经理，Omkhar&nbsp;Arasaratnam。</p><p>&nbsp;</p><p>Omkhar非常出色，他在安全和软件安全方面拥有深厚的专业背景，是位领域专家。他曾在谷歌工作，还曾先后在英国一家大型银行、IBM和其他多家金融服务公司任职。他带来了很多知识，比如如何遵循各种监管要求，以及如何构建起真正安全的产品。其实我们OpenSSF所做的就是把这些要素整合起来，集成到顺畅连贯的技术套件当中。</p><p>&nbsp;</p><p>对于各种开源软件供应链，包括npm、pip、rust和java等供应链，我们希望各方也能将这些上游技术整合到他们的工作流程当中，整合到他们的核心工具当中。这样无论是java生态系统还是npm生态系统，所有软件都将受到默认的保护。</p><p></p><p>这才是我们真正的目标和愿景所在。Omkhar在软件工程和安全工程方面的背景非常重要。我本人则会转任CTO，进一步建立贡献者社区，并投身于AI等领域。总之，我能腾出精力走出OpenSSF之外，扮演好倡导和布道的角色。</p><p></p><h2>用开源代码和公开数据训练大模型，安全吗？</h2><p></p><p></p><p></p><blockquote>InfoQ：听说现在很多大语言模型都在使用开源代码或者公开的数据进行模型训练，您觉得这里会不会有什么隐患？</blockquote><p></p><p>&nbsp;</p><p>Brian Behlendorf：我觉得应该不会有什么隐患，反倒是件好事。虽然总会有一些组织发挥主导作用，比如OpenAI和其他一些构建专有增强功能的机构。但总体而言，我觉得大语言模型的价值会向训练集转移，包括更多受到训练集规则的影响，而不再单纯集中在生成模型的开源代码之内。</p><p>&nbsp;</p><p>而且源代码的演进也会不断分层，除了由Python、Rust和Ruby编写的算法之外，数据集和训练集也会给大语言模型带来深远影响。</p><p>&nbsp;</p><p>目前，基于开源许可的训练集在质量上还不及ChatGPT和其他非开源精选训练集。但情况正在改善，LLaMA和Hugging Face等正带来越来越好的开源训练集。我认为在未来某个时候，这些训练集甚至将超越ChatGPT，而且具体时间甚至有可能是在今年之内或明年年初。</p><p>&nbsp;</p><p>所以我对开源社区在解决当前各种固有缺陷方面的作用保持乐观态度，比如长期困扰大语言模型的幻觉问题，比如说可以由额外的模型检索线上参考资料来确定大语言模型给出的结论是否属实。</p><p>&nbsp;</p><p>当然，我们也可以寄希望于开源AI模型发展得越来越好，凭借自己的力量解决这个问题。</p><p>&nbsp;</p><p></p><blockquote>InfoQ：但换个角度说，利用开源代码进行训练会不会存在开源许可上的问题？</blockquote><p></p><p>&nbsp;</p><p>Brian Behlendorf：我觉得开源软件领域已经在所有权方面摸索出了很好的解决办法，对吧？开源代码都有其版权所有者和相应的许可证。许可证条款会赋予使用者一部分权利，同时提出相应要求。那这些许可证不仅适用于Python编写的算法和软件，应该也适用于训练集。</p><p>&nbsp;</p><p>只要对开源代码的所有权和许可证做点修改或延伸，就能把训练集也覆盖进来。这个问答在开源领域已经有了答案，比如个人贡献者围绕Apache或其他项目提交了成果，那么最终产品就由Apache软件基金会、Linux基金会或者OpenSSF拥有版权。这些非营利组织在某种程度上起到了保护作用，有助于协调贡献活动，同时也为贡献者和最终用户服务提供了法律保护，让每个人都能安心遵守开发方与使用方之间的社会契约。</p><p>&nbsp;</p><p>我认为这种社会契约、透明度和即时可访问性，都能非常直接地被应用到大语言模型身上。</p><p>&nbsp;</p><p></p><blockquote>InfoQ：根据研究论文，目前GPT 生成的代码中可能有40%的代码带有至少一个漏洞。在您看来，像ChatGPT这样的大模型未来能产出安全代码吗？</blockquote><p></p><p>&nbsp;</p><p>Brian Behlendorf：我们可以跳出软件之外考虑这个问题。美国前段时间闹出这么件事，说有个律师找ChatGPT帮他写法庭案件提要。ChatGPT提出了一大堆并不存在的判例，根本就是凭空捏造的。但律师根本懒得检查作业，直接把材料递交给了法官。法官很生气，因为律师把自己的大名签在了文件上。跟AI生成文本一样，AI生成代码也可能有错误，或者说必然会出错。</p><p>&nbsp;</p><p>那开发人员就有责任验证这些内容，保证其正确性，甚至编写测试来验证这种正确性。也许测试也可以由AI编写，但无论如何最终的责任还是要由开发人员承担。所以身为优秀的开发人员，大家必须善于阅读代码。毕竟之前这些繁重的编程工作都得亲自动手，现在有了ChatGPT代劳，这肯定不是坏事。所以我倒是非常乐观，相信模型肯定能根据提示词编写出越来越好的代码，我们也能借助AI更好地检测出代码中的安全漏洞。</p><p>&nbsp;</p><p>就是说，我们可以把结果交给其他生成工具，即时对生成的代码做安全检查。但有些安全漏洞需要参考整个系统才能被检测出来，这对AI系统来说就很困难了。AI虽然能快速浏览完整文档，但却无法同时查看10万行代码，再把其中可能构成错误的逻辑链整理出来。这就是问题所在，所以人类程序员还是得保持深入研究、了解问题根源的能力。正因为如此，开发人员才特别有必要了解大语言模型中的各个层及其构建方式。无论如何，我坚信大语言模型将成为一种非常高效的加速器，能帮助更多人成为10倍开发者。</p><p></p><h2>出现问题，别“甩锅”给ChatGPT</h2><p></p><p>&nbsp;</p><p></p><blockquote>InfoQ：您是说即使是出现故障或错误，也不是ChatGPT的错，归根结底问题出在开发者身上，对吧？</blockquote><p></p><p>&nbsp;</p><p>Brian Behlendorf：我不知道中文场景会不会这样，但在英文场景下，当我们在手机上打字时，拼写检查有时候会错误提示甚至修改某些单词。可最终按下发送键的仍然是人，是人决定使用提示结果的，对吧？所以仍然要由人来负责。而且我觉得这种勇于承担责任的心态非常重要，绝不能单纯说是AI弄错了。不不，无论是作为开发人员、产品经理还是律师，我们都必须对生成的内容承担起所有权和责任。而且未来错误会越来越少，需要手动处理的工作量也会越来越小。我们肯定能用AI来检查其他AI生成的内容，会有多种AI和多种工具以某种方式结合起来，让使用者对其生成的内容抱有更大的信心。</p><p>&nbsp;</p><p></p><blockquote>InfoQ：所以说AI能做什么、不能做什么要取决于人，而不是技术本身，对吧？</blockquote><p></p><p>&nbsp;</p><p>Brian Behlendorf：是这样的。</p><p>&nbsp;</p><p></p><blockquote>InfoQ：现在市面上生成编码软件越来越多，您如何看待AI编程工具的生产力提升和安全风险？</blockquote><p></p><p>&nbsp;</p><p>Brian Behlendorf：软件开发工具是安全体系中的重要组成部分。一旦开发工具就存在安全漏洞，那漏洞肯定会渗透进它所创建的代码中。好消息是，目前大多数软件开发工具都是开源项目，比如说eclipse和emacs，还包括GitHub中内置的很多功能，都是基于开源代码。这是因为开发人员需要知晓这些工具内部到底是怎样运作的。虽然不是人人在乎，但总有百分之一或者千分之一的开发者想搞清楚底层代码的原理。</p><p>&nbsp;</p><p>我认为一定要让AI世界远离像ChatGPT这样单一的集中式专有模型。在我看来，ChatGPT就类似于AI界的微软Windows。它属于典型的集中加专有型产品。它专属于一家公司，虽然他们愿意开放API供其他人使用，但其本质仍然是个专有平台。而真正的开源模型应该允许任何人参与，你可以构建模型，我也可以构建模型，每个人都能加入进来并做出修改。那将是一个与如今ChatGPT的形态完全不同的新世界，也是我们应该为之奋斗的未来。只有这样，大语言模型生成的代码才能具备更高的安全性。</p><p>&nbsp;</p><p></p><blockquote>InfoQ：那您觉得像ChatGPT这样的大模型，在安全方面究竟是利大于弊还是弊大于利？</blockquote><p></p><p>&nbsp;</p><p>Brian Behlendorf：我觉得还是利大于弊，就是说它们生成的代码仍然比人类更安全，前提是双方投入的时间相同。大语言模型就像是加速器，如果非要从反面来看，那10倍开发者制造安全漏洞的速度也是10倍呢。所以我们不仅要投资大语言模型，也要投资建设更好的扫描工具，这一点非常重要。</p><p>&nbsp;</p><p>应该努力利用工具帮助发现其中的各种安全缺陷，我们OpenSSF也在通过Alpha-Omega项目努力达成这个目标。该项目的核心，就是找出广泛存在于大量开源项目中的简单bug。我们要如何扫描数以万计的现有项目，并找到其中的bug？这是一项体量巨大的工程，找出的bug往往影响成百上千个项目。所以我们要做的就是先想办法做扫描，再开发出自动修复程序，最后把修复成果以PR的形式提交上去。这方面研究工作目前由Jonathan Bryce负责，我们聘请他加入进来并推动项目发展。</p><p>&nbsp;</p><p>我们觉得这是个下限问题，即应该努力提高常用开源项目的质量下限。作为其中的关键部分，此举将有助于捕捉大语言模型可能在代码中引入的常见bug。当然，编写测试、使用模糊测试工具等工作还是要由开发人员亲自负责，这样才能真正贯彻提升软件质量和安全性的最佳实践。</p><p>&nbsp;</p><p>我认为开发永远是人与工具的结合。这有点像赛车运动，现在很多比赛已经从手动变速箱升级成了自动变速箱，对吧？但用哪种变速箱并不是重点，重点在于怎样比其他对手跑得更快。开发也是，要不要使用AI生成的代码并不是重点，重点在于如何更好地构建安全代码并帮助其他人安全使用开发成果。</p><p>&nbsp;</p><p></p><blockquote>InfoQ：从这个角度看，AI确实比人类效率更高。但我们也知道，某些编程助手的底层模型是用开源代码训练而成。如果数据本身不安全，那大模型肯定会受到影响吧？</blockquote><p></p><p>&nbsp;</p><p>Brian Behlendorf：我觉得这个要具体问题具体分析，至少要搞清楚他们到底在用哪些开源代码做训练。因为如果他们使用的是排名前1000，或者说前10000的项目代码，那么这类训练集的代码质量其实是很高的。毕竟GitHub上有上亿个repo，Gitee也不遑多让。其中很多是教学用的项目或者一次性项目，还有其他项目的特定分支，这里确实有很多非常垃圾、质量极差。</p><p>&nbsp;</p><p>我希望构建模型的团队能认真考量训练集中的内容。在OpenSSF，我们开发出一款名叫Security Scorecard的工具。在对GitHub repo使用后，它会打出0到9分的相应得分，借此说明目标代码的可信度如何、存在bug的可能性有多大。如果只得到1分，则代表目标代码可能因管理不善而存在尚未发现的bug，或者是未经过模糊测试。总之它能提供各种各样的启发和辅助。</p><p>&nbsp;</p><p>所以只要以此为基础构建起训练集，就能挑选出在Scorecard上得分较高的项目代码，比如要求其至少要得到7分。正如我之前所说，理解训练集中的内容跟理解源代码中的内容同等重要。</p><p></p><h2>安全应该考虑在模型构建之前，而不是之后</h2><p></p><p>&nbsp;</p><p></p><blockquote>InfoQ：就是说在构建大模型之前，我们应该选择正确的数据库以保障安全。对吗？</blockquote><p></p><p>&nbsp;</p><p>Brian Behlendorf：没错，而且我觉得这会是个持续的过程。也许大家投入到模型完善上的精力，会超过软件开发本身。</p><p>&nbsp;</p><p></p><blockquote>InfoQ：那就目前来看，AIGC是不是已经成为软件供应链的组成部分？</blockquote><p></p><p>&nbsp;</p><p>Brian Behlendorf：目前还没有多少开源项目把AI代码直接纳入进来，但我觉得每位面向最终用户的开发者都会使用网络浏览器、文本编辑器和WordPress/Dribble之类的工具。</p><p>&nbsp;</p><p>而这些工具，正是大语言模型介入开发流程的载体，或者说通往OpenAI API的门户。希望未来会有更多内置模型的出现，但目前我觉得AIGC还不能说已经成为软件供应链的一部分。不过我认为这些工具正变得越来越重要，跟SBOM，也就是软件物料清单差不多。或者是我之前提到的Scorecard，还有OpenSSF用于为供应链目标分配签名的Sigstore，以及反映安全水平的SLSA规范等。</p><p>&nbsp;</p><p>我觉得这些技术都能被轻松纳入训练集，以及由这些训练集编译成的模型。它们适用于源代码和文档，自然也适用于大语言模型。</p><p>&nbsp;</p><p></p><blockquote>InfoQ：各行各业都饱受供应链投毒攻击的侵扰，而且近年来供应链投毒事件也愈发多见。随着AIGC的流行和广泛应用，您觉得会不会有模型数据集投毒的风险，甚至在模型构建过程中投毒？</blockquote><p></p><p>&nbsp;</p><p>Brian Behlendorf：我觉得绝对有可能，毕竟模型会边组装边沿着供应链向下游移动，之后可能有恶意分子突然介入并替换或篡改其中的训练集，导致模型偏离既定的学习路线。</p><p>&nbsp;</p><p>所以我要再次强调，必须要用保护供应链内源代码和其他构建工件的相同工件保护AI模型，因为它们在完整性上有着同等重要的意义。</p><p>&nbsp;</p><p></p><blockquote>InfoQ：那要如何避免针对AIGC模型的投毒行为？</blockquote><p></p><p>&nbsp;</p><p>Brian Behlendorf：可以用Sigstore这类方案。它会为每个对象分配签名，并在不同对象结合起来时再分配新的签名。它能覆盖到供应链中的所有对象，这种形式跟钻石供应链非常相似。比如我们到店里挑选钻石，当然希望心仪的宝钻不是出自被非法奴役的劳作者之手。但问题是要如何验证？答案就是使用上游开发者的加密签名。这种机制能够证明代码来自上游开发者，且到达当前环节前没有经过篡改。Sigstore想要起到的就是这样的作用，而且效果不错。Sigstore目前已经在云原生生态系统中得到了广泛应用。</p><p>&nbsp;</p><p>所以当软件在供应链中往来流动时，我们可以依靠Sigstore防止中间人攻击。它还可以在SBOM等环节上发挥作用。所以投毒确实是个大问题，但我觉得把AI模型当作供应链内的其他对象做统一管理即可。</p><p>&nbsp;</p><p></p><h2>AIGC对开源软件意味着什么？</h2><p></p><p>&nbsp;</p><p></p><blockquote>InfoQ：那在您看来，未来的开源社区乃至整个软件供应链是否会受益于AIGC的蓬勃发展？</blockquote><p></p><p>&nbsp;</p><p>Brian Behlendorf：我觉得肯定能用AI帮助开发者构建更好的扫描工具，检测出更多安全漏洞。之后，我们可以把AI引入开发工具当中，比如在人们提交PR时自动扫描其中的安全问题。目前供应链中的组织正变得极为复杂，比如企业往往会在世界各地设有多处数据中心，掌握着大量外部和内部应用程序并设定有不同的安全级别，这一切都要借助AI的力量。AI明显特别擅长处理海量数据、将数据内容可视化、提取见解并快速找到异常。所以是的，我相信AIGC的发展肯定会给软件世界带来助益。</p><p>&nbsp;</p><p>反正我非常乐观。目前已经有人在应用机器学习来扫描漏洞，虽然难度很高而且尚处于早期发展阶段，但我仍看好这方面探索。</p><p>&nbsp;</p><p></p><blockquote>InfoQ：但这些毕竟还是早期技术，企业肯定不愿意冒险把它们广泛用于生产环境，对吧？</blockquote><p></p><p>&nbsp;</p><p>Brian Behlendorf：确实，但扫描工具其实不涉及生产中的关键路径，影响范围只局限于供应链之内，对吧？所以我觉得多做点实验也未尝不可，而且大家可以把它作为一种对现有扫描工具的启发性探索。总之，AI工具就是实现扫描的一种办法，不要把它想得有多特殊。</p><p>&nbsp;</p><p></p><blockquote>InfoQ：有媒体报道，说Gartner以及一些其他咨询企业觉得应该推迟采用ChatGPT进行代码生成、代码安全扫描和代码审查。您觉得这种观点有没有道理？</blockquote><p></p><p>&nbsp;</p><p>Brian Behlendorf：我觉得他们主要是担心在使用这些工具时，目前能够仰仗的主要是集中式服务。假定大家在一家大企业工作，并要求ChatGPT生成一款能够完成a、b和c任务的软件，那这些具体要求就会成为OpenAI服务器内部的专有信息。这显然与大部分信息管理原则有所冲突。但如果这些工具能够保持去中心化，就是说不单纯由OpenAI和ChatGPT来实现，而是一切都在本地、在我们面前实现，情况当然就不一样了。</p><p>&nbsp;</p><p>那样这些安全问题，这些隐私或数据管理问题将不复存在。所以我们才更需要着力推动开源大语言模型的快速发展，而不能坐视整个世界围着ChatGPT打转，对不对？</p><p></p><h2>如何安全地使用ChatGPT？</h2><p></p><p>&nbsp;</p><p></p><blockquote>InfoQ：所以这是否意味着，现有安全检测工具是不是跟不上AIGC的发展？</blockquote><p></p><p>&nbsp;</p><p>Brian Behlendorf：我觉得倒是不至于。至少我还没听到有人说AI生成的代码因为质量低下而引发失控。确实，如果你是计算机科学专业的大一学生，而且打算全靠ChatGPT帮你完成作业，那它生成的代码确实惨不忍睹、搞得你挂了科，但这纯属自作自受。身为开发人员，大家必须保证AI生成的结果真正与需求和目标相匹配，要能够真正解决问题。你想借它之手搞定一切，这肯定不行，但我相信未来这些工具会表现得越来越好。</p><p>&nbsp;</p><p>所以从长远角度来看，我仍然保持乐观。但在短期之内，大家使用时千万要谨慎。</p><p>&nbsp;</p><p></p><blockquote>InfoQ：那我们该如何以安全方式使用ChatGPT？您有什么建议吗？</blockquote><p></p><p>&nbsp;</p><p>Brian Behlendorf：我一直强调测试驱动开发的重要意义。就是说要先定义测试，然后再编写出能通过这些测试的代码。在我看来，大家应该先从人的角度入手编写测试，再让ChatGPT输出代码，依靠测试来确保AI生成的代码符合需求。</p><p>&nbsp;</p><p>当然，大家也可以要求ChatGPT代为编写测试，对吧？但不管怎么操作，阅读代码、理解代码逻辑和保证代码发挥正确作用的责任永远都在我们自己肩上。</p><p>&nbsp;</p><p>在安全对抗当中，“守方”永远是被动的一方，而恶意人士往往总会抢先一步。考虑到这样的现实，AIGC也许会给开源社区带来巨大威胁。</p><p>&nbsp;</p><p></p><blockquote>InfoQ：OpenSSF在这方面打算如何应对？</blockquote><p></p><p>&nbsp;</p><p>Brian Behlendorf：我们正计划组建新的工作组，专注于AI/机器学习方向。其中一半成员考虑如何使用工具来更好地保障供应链安全，而另一半成员则更多关注使用环节的安全问题。目前我们尚处于起步阶段，未来应该会逐步提出建议和方法，甚至在领域当中交付一些工具或规范。</p><p>&nbsp;</p><p>所以要做断言还为时过早。而且我个人认为，守方不一定就是被动的一方。安全保护工作也可以主动出击。比如定期检查漏洞，在开源项目中每年或者每两年组织一次安全审计。花点钱让专业人士梳理现有代码，查找安全漏洞。还有，可以针对自己的基础设施组织红队演练。身为CIO，大家应该主动尝试渗透己方基础设施。是的，安全保护完全可以出去起来，不一定要陷入被动。我觉得这种心态本身就该扭转，这样我们才能时刻做好准备，无论AI最终会不会像人们想象得那样得到广泛普及。</p><p>&nbsp;</p>",
    "publish_time": "2023-06-30 17:02:44",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]