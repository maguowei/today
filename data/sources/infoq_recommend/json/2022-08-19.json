[
  {
    "title": "递归无服务器函数是云端最大的计费风险？",
    "url": "https://www.infoq.cn/article/NIKdzlRr6VqIjFFZgseM",
    "summary": "<p>最近，谷歌云内容主管Forrest Brazeal表示，对于开发者来说，无服务器函数是云端最大的计费风险，因为我们没有简单的方法来防止递归调用，而且它们几乎可以无限地在所有的云提供商中扩散。</p><p>&nbsp;</p><p>Brazeal提到了云开发者撰写的一些文章，这些文章描述了那些导致无服务器函数“失控”和巨额账单的错误。其中，Cloudsoft工程副总裁Aled Sage报告了亚马逊云科技的一个Lambda巨额账单的例子，Tom Wright描述了发生在Azure上一个可怕的无服务器事故，Milkie Way创始人Sudeep Chauhan解释了他如何在谷歌云上测试Firebase和Cloud Run花费了72000美元。Brazeal警告说：</p><p>&nbsp;</p><p></p><blockquote>这一切发生得太快了。它就像是云灾难的山洪暴发。这不只是忘记了一个GPU实例，导致每小时多花费几美元的成本，而是你睡觉之前的账单是5没有，等你一觉醒来变成了5万美元——这一切都发生在你的预算有机会发出警报之前。</blockquote><p></p><p>&nbsp;</p><p>在讨论谷歌云、亚马逊云科技和Azure的具体限制和保护措施时，作者认为它们没有提供安全的方法来防范风险，因为这些供应商都还没有完全保护开发者的机制。Brazeal补充说：</p><p>&nbsp;</p><p></p><blockquote>要保护自己不在一些资源（如VM）上花太多的钱是很容易的，但现在还没有什么好的方法来保证你不会被来自函数的意外账单惊到……</blockquote><p></p><p>&nbsp;</p><p>亚马逊云科技有一个页面专门介绍了导致Lambda函数计费问题的递归反模式，并承认：</p><p>&nbsp;</p><p></p><blockquote>大多数编程语言都存在无限循环的可能性，而这种反模式在无服务器应用程序中会消耗更多的资源。</blockquote><p></p><p>&nbsp;</p><p>对函数进行并发性限制可能会有所帮助，但这会给开发人员造成一种错误的安全感假象：它可以在递归分叉式场景（无限的函数扩展）中提供保护，但不能避免几个小时内的大笔费用，例如使用相同的S3桶作为函数的源和目标。Qube Cinema技术架构师Sudhir Jonathan去年报道过这样的案例。亚马逊云科技首席开发者James Beswick写了一篇关于如何使用Amazon S3和AWS Lambda避免递归调用的文章，他解释说：</p><p>&nbsp;</p><p></p><blockquote>如果意外触发递归调用，可以按下Lambda控制台上的“Throttle”按钮将函数并发性降至零并中断递归循环。</blockquote><p></p><p>&nbsp;</p><p>正如云顾问、亚马逊云科技无服务器英雄（Serverless Hero）Yan Cui最近所说的那样，虽然有很多可能的优化措施来节省使用Lambda的成本，但并没有提供自动断路器。在云供应商可能引入的缓解措施中，Brazeal建议采用近实时计费方式，对云计费设置上限，并更好地自动化异常检测和递归工作负载修复。</p><p>&nbsp;</p><p>The Duckbill Group云经济学家Corey Quinn在他的新闻稿中评论道：</p><p>&nbsp;</p><p></p><blockquote>事实上，甲骨文“对免费层非常认真，除非用户确定要升级，否则不会让用户增加费用。”这是他们平台最棒的地方之一。</blockquote><p></p><p>&nbsp;</p><p>去年，时任A Cloud Guru内容和社区总监的Brazeal强调了亚马逊云科技缺少沙盒账户和硬收费限制。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/08/recursive-serverless-functions/\">Are Recursive Serverless Functions the Biggest Billing Risk on the Cloud?</a>\"</p><p>&nbsp;</p>",
    "publish_time": "2022-08-19 09:09:18",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "JetBrains IntelliJ IDEA 2022.2使用Java 17运行时",
    "url": "https://www.infoq.cn/article/mZbskCPmQDJWg1HrDjbL",
    "summary": "<p>JetBrains<a href=\"https://blog.jetbrains.com/idea/2022/07/intellij-idea-2022-2/\">发布</a>\"了IntelliJ IDEA 2022.2，支持Java 17和最新的语言和框架，如Scala、Kotlin、Spring 6和Spring Boot 3。</p><p>&nbsp;</p><p>这个新版本使用了JetBrains Runtime 17（OpenJDK 17的一个分支），性能得到了提升，比如渲染速度更快，这样归功于<a href=\"https://developer.apple.com/metal/\">Metal API</a>\"和改进的Vector API向量计算。<a href=\"https://support.apple.com/en-gb/guide/voiceover-guide/welcome/web\">VoiceOver屏幕阅读器</a>\"增强了macOS平台的可访问性，并且通过使用最新的OpenJDK LTS改进了安全性。</p><p>&nbsp;</p><p>这个版本还包含了对Java检查和代码补全的各种改进。Java检查现在可以识别Charset的name()和toString()方法，并在变量隐藏了字段和捕获不必要的Object.requireNonNullElse调用时发出警告。各种JUnit检查被转换为JVM检查，以支持其他语言，如Kotlin。代码补全现在支持.class字面量。</p><p>&nbsp;</p><p>现在可以支持Kotlin 1.7.0的特性，IntelliJ改进了对绝对不可空类型的渲染。调试器现在集成了数据流分析（<a href=\"https://www.jetbrains.com/help/idea/analyzing-data-flow.html\">Data Flow Analysis</a>\"，功能在Java中已经可用）功能，用于提示哪些条件为true以及将执行哪些分支。从这个版本开始，在项目设置中定义的Kotlin编译器版本将用于消除本地和CI构建平台之间的不一致。代码高亮显示、代码补全和Find Usage的性能也得到了提升。</p><p>&nbsp;</p><p>Scala 3的特性，比如无选项提取器、类型Lambda、类型级编译器intrinsic、多态函数，现在都得到了支持。现在，当匿名函数中使用了return关键字（导致部分代码不会被执行）或者当私有或类参数覆盖了超类变量时，IntelliJ会发出警告。当编译器选项-Xlint:nonlocal-return和-Xlint:private-shadow被激活时，就会启用这些警告。Safe Delete操作（允许从定义和调用中删除元素）现在支持类型参数。单独行操作的Put参数可用于将逗号分隔的列表分隔成单独的行。</p><p>&nbsp;</p><p>IntelliJ现在为Groovy 4中的<a href=\"https://groovy-lang.org/using-ginq.html#_ginq_a_k_a_groovy_integrated_query\">Groovy集成查询</a>\"（GINQ）提供了语法高亮显示、代码补全和检查功能。</p><p>&nbsp;</p><p>这个版本包含了各种用户体验改进，比如Run Current File，用于运行或调试单个文件，IDE会自动选择正确的运行配置。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/10/100432fc6d9152aa45b23aafa57f7bd7.png\" /></p><p></p><p>用户可以用新加入的键盘快捷键Alt+Shift+句点和Alt+Shift+逗号增加或减少字体大小。当前字体大小附带恢复到默认大小的选项。</p><p>&nbsp;</p><p>现在可以配置检查面板在编辑器中出现的方式，编辑器下拉菜单中有高亮显示，不需要修改严重级别。</p><p>&nbsp;</p><p>现在可以通过按下代码自动补全弹出窗口中的三个点来打开代码自动补全设置。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/43/43e880049761d0ce1a898dcdb94dc90c.png\" /></p><p></p><p>&nbsp;</p><p>在设置-&gt;编辑器-&gt;智能按键中的关闭块注释设置选项现在可以用来禁用自动关闭块注释。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1e/1e349452d00724404272efc8e5ba572b.png\" /></p><p></p><p>现在可以通过按下Alt+Insert或右键弹出框为Markdown文件生成目录表。</p><p>&nbsp;</p><p>在<a href=\"https://www.testcontainers.org/\">Testcontainer</a>\"测试中，Docker镜像的镜像补全功能允许用户选择Docker镜像的名称和版本。新的Copy Docker Image操作会将镜像保存到一个文件中，然后将其从一个Docker守护进程推到另一个Docker守护进程。现在，IntelliJ IDEA在重启后会自动连接到Docker守护进程，这个可以在高级设置-&gt;Docker中禁用。</p><p>&nbsp;</p><p>前面提到的改进在所有的IntelliJ IDEA版本中可用，以下是IntelliJ IDEA Ultimate版本独有的特性。</p><p>&nbsp;</p><p>这个版本完全支持Spring Boot 3（计划在11月发布）和Spring 6（现在需要Java 17）。Spring 6中创建的HTTP客户端可以是带有注解方法的Java接口，IDE将提供URL补全和导航。</p><p>&nbsp;</p><p>实验性质的GraalVM原生调试器可以用来调试原生Java镜像二进制文件。它要求安装GraalVM的开发版和GraalVM原生调试器插件。</p><p>&nbsp;</p><p>远程开发（可以创建到远程环境的连接）能力得到了改进，连接也更加稳定。</p><p>&nbsp;</p><p>现在，在进行性能分析时，CPU和堆内存图表显示在控制台旁边，可以在收集快照的同时了解应用程序的性能。Start profiling选项现在会在火焰图、调用树和方法列表中显示Kotlin的内联函数。</p><p>&nbsp;</p><p><a href=\"https://plugins.jetbrains.com/plugin/10485-kubernetes\">Kubernetes插件</a>\"现在集成了<a href=\"https://www.telepresence.io/\">Telepresence</a>\"，可以通过拦截HTTP请求来调试允许在Kubernetes集群中集群中的服务。</p><p>&nbsp;</p><p>而且，IntelliJ现在还支持Angular 14的独立组件、Vue 3和TypeScript 4.7。</p><p>&nbsp;</p><p>有关IntelliJ IDEA 2022.2完整的变更概述可以在JetBrains网站的<a href=\"https://www.jetbrains.com/idea/whatsnew/\">What’s New</a>\"中找到。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/08/jetbrains-intellij-2022-2/\">JetBrains IntelliJ IDEA 2022.2 Uses Java 17 Runtime</a>\"</p><p>&nbsp;</p>",
    "publish_time": "2022-08-19 11:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]