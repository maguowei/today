[
  {
    "title": "递归无服务器函数是云端最大的计费风险？",
    "url": "https://www.infoq.cn/article/NIKdzlRr6VqIjFFZgseM",
    "summary": "<p>最近，谷歌云内容主管Forrest Brazeal表示，对于开发者来说，无服务器函数是云端最大的计费风险，因为我们没有简单的方法来防止递归调用，而且它们几乎可以无限地在所有的云提供商中扩散。</p><p>&nbsp;</p><p>Brazeal提到了云开发者撰写的一些文章，这些文章描述了那些导致无服务器函数“失控”和巨额账单的错误。其中，Cloudsoft工程副总裁Aled Sage报告了亚马逊云科技的一个Lambda巨额账单的例子，Tom Wright描述了发生在Azure上一个可怕的无服务器事故，Milkie Way创始人Sudeep Chauhan解释了他如何在谷歌云上测试Firebase和Cloud Run花费了72000美元。Brazeal警告说：</p><p>&nbsp;</p><p></p><blockquote>这一切发生得太快了。它就像是云灾难的山洪暴发。这不只是忘记了一个GPU实例，导致每小时多花费几美元的成本，而是你睡觉之前的账单是5没有，等你一觉醒来变成了5万美元——这一切都发生在你的预算有机会发出警报之前。</blockquote><p></p><p>&nbsp;</p><p>在讨论谷歌云、亚马逊云科技和Azure的具体限制和保护措施时，作者认为它们没有提供安全的方法来防范风险，因为这些供应商都还没有完全保护开发者的机制。Brazeal补充说：</p><p>&nbsp;</p><p></p><blockquote>要保护自己不在一些资源（如VM）上花太多的钱是很容易的，但现在还没有什么好的方法来保证你不会被来自函数的意外账单惊到……</blockquote><p></p><p>&nbsp;</p><p>亚马逊云科技有一个页面专门介绍了导致Lambda函数计费问题的递归反模式，并承认：</p><p>&nbsp;</p><p></p><blockquote>大多数编程语言都存在无限循环的可能性，而这种反模式在无服务器应用程序中会消耗更多的资源。</blockquote><p></p><p>&nbsp;</p><p>对函数进行并发性限制可能会有所帮助，但这会给开发人员造成一种错误的安全感假象：它可以在递归分叉式场景（无限的函数扩展）中提供保护，但不能避免几个小时内的大笔费用，例如使用相同的S3桶作为函数的源和目标。Qube Cinema技术架构师Sudhir Jonathan去年报道过这样的案例。亚马逊云科技首席开发者James Beswick写了一篇关于如何使用Amazon S3和AWS Lambda避免递归调用的文章，他解释说：</p><p>&nbsp;</p><p></p><blockquote>如果意外触发递归调用，可以按下Lambda控制台上的“Throttle”按钮将函数并发性降至零并中断递归循环。</blockquote><p></p><p>&nbsp;</p><p>正如云顾问、亚马逊云科技无服务器英雄（Serverless Hero）Yan Cui最近所说的那样，虽然有很多可能的优化措施来节省使用Lambda的成本，但并没有提供自动断路器。在云供应商可能引入的缓解措施中，Brazeal建议采用近实时计费方式，对云计费设置上限，并更好地自动化异常检测和递归工作负载修复。</p><p>&nbsp;</p><p>The Duckbill Group云经济学家Corey Quinn在他的新闻稿中评论道：</p><p>&nbsp;</p><p></p><blockquote>事实上，甲骨文“对免费层非常认真，除非用户确定要升级，否则不会让用户增加费用。”这是他们平台最棒的地方之一。</blockquote><p></p><p>&nbsp;</p><p>去年，时任A Cloud Guru内容和社区总监的Brazeal强调了亚马逊云科技缺少沙盒账户和硬收费限制。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/08/recursive-serverless-functions/\">Are Recursive Serverless Functions the Biggest Billing Risk on the Cloud?</a>\"</p><p>&nbsp;</p>",
    "publish_time": "2022-08-19 09:09:18",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "JetBrains IntelliJ IDEA 2022.2使用Java 17运行时",
    "url": "https://www.infoq.cn/article/mZbskCPmQDJWg1HrDjbL",
    "summary": "<p>JetBrains<a href=\"https://blog.jetbrains.com/idea/2022/07/intellij-idea-2022-2/\">发布</a>\"了IntelliJ IDEA 2022.2，支持Java 17和最新的语言和框架，如Scala、Kotlin、Spring 6和Spring Boot 3。</p><p>&nbsp;</p><p>这个新版本使用了JetBrains Runtime 17（OpenJDK 17的一个分支），性能得到了提升，比如渲染速度更快，这样归功于<a href=\"https://developer.apple.com/metal/\">Metal API</a>\"和改进的Vector API向量计算。<a href=\"https://support.apple.com/en-gb/guide/voiceover-guide/welcome/web\">VoiceOver屏幕阅读器</a>\"增强了macOS平台的可访问性，并且通过使用最新的OpenJDK LTS改进了安全性。</p><p>&nbsp;</p><p>这个版本还包含了对Java检查和代码补全的各种改进。Java检查现在可以识别Charset的name()和toString()方法，并在变量隐藏了字段和捕获不必要的Object.requireNonNullElse调用时发出警告。各种JUnit检查被转换为JVM检查，以支持其他语言，如Kotlin。代码补全现在支持.class字面量。</p><p>&nbsp;</p><p>现在可以支持Kotlin 1.7.0的特性，IntelliJ改进了对绝对不可空类型的渲染。调试器现在集成了数据流分析（<a href=\"https://www.jetbrains.com/help/idea/analyzing-data-flow.html\">Data Flow Analysis</a>\"，功能在Java中已经可用）功能，用于提示哪些条件为true以及将执行哪些分支。从这个版本开始，在项目设置中定义的Kotlin编译器版本将用于消除本地和CI构建平台之间的不一致。代码高亮显示、代码补全和Find Usage的性能也得到了提升。</p><p>&nbsp;</p><p>Scala 3的特性，比如无选项提取器、类型Lambda、类型级编译器intrinsic、多态函数，现在都得到了支持。现在，当匿名函数中使用了return关键字（导致部分代码不会被执行）或者当私有或类参数覆盖了超类变量时，IntelliJ会发出警告。当编译器选项-Xlint:nonlocal-return和-Xlint:private-shadow被激活时，就会启用这些警告。Safe Delete操作（允许从定义和调用中删除元素）现在支持类型参数。单独行操作的Put参数可用于将逗号分隔的列表分隔成单独的行。</p><p>&nbsp;</p><p>IntelliJ现在为Groovy 4中的<a href=\"https://groovy-lang.org/using-ginq.html#_ginq_a_k_a_groovy_integrated_query\">Groovy集成查询</a>\"（GINQ）提供了语法高亮显示、代码补全和检查功能。</p><p>&nbsp;</p><p>这个版本包含了各种用户体验改进，比如Run Current File，用于运行或调试单个文件，IDE会自动选择正确的运行配置。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/10/100432fc6d9152aa45b23aafa57f7bd7.png\" /></p><p></p><p>用户可以用新加入的键盘快捷键Alt+Shift+句点和Alt+Shift+逗号增加或减少字体大小。当前字体大小附带恢复到默认大小的选项。</p><p>&nbsp;</p><p>现在可以配置检查面板在编辑器中出现的方式，编辑器下拉菜单中有高亮显示，不需要修改严重级别。</p><p>&nbsp;</p><p>现在可以通过按下代码自动补全弹出窗口中的三个点来打开代码自动补全设置。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/43/43e880049761d0ce1a898dcdb94dc90c.png\" /></p><p></p><p>&nbsp;</p><p>在设置-&gt;编辑器-&gt;智能按键中的关闭块注释设置选项现在可以用来禁用自动关闭块注释。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1e/1e349452d00724404272efc8e5ba572b.png\" /></p><p></p><p>现在可以通过按下Alt+Insert或右键弹出框为Markdown文件生成目录表。</p><p>&nbsp;</p><p>在<a href=\"https://www.testcontainers.org/\">Testcontainer</a>\"测试中，Docker镜像的镜像补全功能允许用户选择Docker镜像的名称和版本。新的Copy Docker Image操作会将镜像保存到一个文件中，然后将其从一个Docker守护进程推到另一个Docker守护进程。现在，IntelliJ IDEA在重启后会自动连接到Docker守护进程，这个可以在高级设置-&gt;Docker中禁用。</p><p>&nbsp;</p><p>前面提到的改进在所有的IntelliJ IDEA版本中可用，以下是IntelliJ IDEA Ultimate版本独有的特性。</p><p>&nbsp;</p><p>这个版本完全支持Spring Boot 3（计划在11月发布）和Spring 6（现在需要Java 17）。Spring 6中创建的HTTP客户端可以是带有注解方法的Java接口，IDE将提供URL补全和导航。</p><p>&nbsp;</p><p>实验性质的GraalVM原生调试器可以用来调试原生Java镜像二进制文件。它要求安装GraalVM的开发版和GraalVM原生调试器插件。</p><p>&nbsp;</p><p>远程开发（可以创建到远程环境的连接）能力得到了改进，连接也更加稳定。</p><p>&nbsp;</p><p>现在，在进行性能分析时，CPU和堆内存图表显示在控制台旁边，可以在收集快照的同时了解应用程序的性能。Start profiling选项现在会在火焰图、调用树和方法列表中显示Kotlin的内联函数。</p><p>&nbsp;</p><p><a href=\"https://plugins.jetbrains.com/plugin/10485-kubernetes\">Kubernetes插件</a>\"现在集成了<a href=\"https://www.telepresence.io/\">Telepresence</a>\"，可以通过拦截HTTP请求来调试允许在Kubernetes集群中集群中的服务。</p><p>&nbsp;</p><p>而且，IntelliJ现在还支持Angular 14的独立组件、Vue 3和TypeScript 4.7。</p><p>&nbsp;</p><p>有关IntelliJ IDEA 2022.2完整的变更概述可以在JetBrains网站的<a href=\"https://www.jetbrains.com/idea/whatsnew/\">What’s New</a>\"中找到。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/08/jetbrains-intellij-2022-2/\">JetBrains IntelliJ IDEA 2022.2 Uses Java 17 Runtime</a>\"</p><p>&nbsp;</p>",
    "publish_time": "2022-08-19 11:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "资深架构师十年总结：成为架构师，你必须具备这五点能力",
    "url": "https://www.infoq.cn/article/Gu742Jcxt6B1u7atv2fS",
    "summary": "<p>在过去的20年里，作为一名软件工程师和软件架构师，我与不同领域和不同学科的软件工程师聊过很多次。他们中有一些人是有着8到10年经验的高级工程师，有许多人还在职业生涯早期，有着3到5年的经验。其中一些人是我的同事。有些人是求职者。聊到最后，他们几乎都会问到同样一个问题：</p><p>&nbsp;</p><p>“我想成为一名解决方案架构师。了解更多架构相关内容的资源有哪些？“——很多软件工程师都会问的一个问题。</p><p></p><p>他们问错了问题。如果你读下去，就会知道为什么我这么说。此外，撰写本文时我的<a href=\"https://www.zuehlke.com/en\">公司</a>\"正在招聘<a href=\"https://1brd.ly/d6GYz?st=c16psk0dqgrh\">首席软件架构师</a>\"，所以我正好解释一下什么是软件架构师以及如何成为一名软件架构师。</p><p>&nbsp;</p><p></p><h2>什么是软件架构？</h2><p></p><p></p><p>首先什么是<a href=\"https://xie.infoq.cn/article/0a246fd4c681517210bac2538\">软件架构</a>\"？提到软件架构师这个头衔，就经常听到拿建筑的架构与之作比。建筑架构师设计建筑的蓝图。工程师们将其实体按照该蓝图建造起来。我认为从很多方面来看，这都是一个糟糕的类比。</p><p>&nbsp;</p><p>建筑的类比使人们过于关注系统的静态面。在这方面，城市建设是一个更好的类比，因为它既包括道路、建筑和桥梁等静态元素，也包括交通流量和城市居民等动态元素。城市架构师提出城市设计，制定计划来安排如何建设城市以及如何将所有东西组合在一起。最后但并非最不重要的是，城市架构师有一个城市将如何发展的愿景。但是软件架构还不仅如此。有时软件架构师需要放大或缩小”城市“，以确保计划可行。架构师可能不会太关心建筑的室内设计，而把重点放在决定在哪里放置红绿灯上。架构师需要广泛且深厚的技术知识，才能构建像城市一样复杂的软件。架构师还需要在不涉及所有技术细节的情况下向业务涉众传递一致的消息。</p><p>&nbsp;</p><p>建筑架构的类比意味着架构师是团队中最资深的人，他做出所有关键的决定，预先创建设计规范，然后在实现过程中执行设计。起初，在很多人看来，成为那个最有经验的人，达到技术级别的顶端，是一件很酷的事情。让整个团队都听你的，服从你的命令和决定，可能会让你感觉好极了。但是，你再好好想想，这给了架构师一定要做出正确决策的巨大压力，而这在项目的早期阶段通常是不太可能的。在敏捷团队中，这意味着开发团队不是自组织的，架构师成了团队变得敏捷的障碍。架构师剥夺了团队的所有自主权。谁愿意在如此高的压力下担任这样的职位？</p><p>&nbsp;</p><p></p><h3>软件架构的角色</h3><p></p><p></p><p>软件架构可以被视为位于业务目标和支持业务以满足这些目标的软件系统之间的中心。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/48/f9/488a676c3cd7a5966a1ae0d14891bef9.png\" /></p><p>软件架构的角色</p><p></p><p>软件架构用于满足业务目标。它是基于要实现的业务目标而设计的。然后，按照设计实现软件系统，使其遵从设计。这应该是一个迭代过程。正如我前面提到的，在项目的早期阶段通常不可能做出正确的决定。最好的决定是你仍然不必决定的决定。架构师将创建刚好能够满足业务需求的设计。这就关闭了反馈循环，就像你在敏捷和DevOps实践中看到的一样。这里的想法是，随着世界的变化，业务需求也会变化，软件架构应该随需求演变以支持业务接受变更。</p><p></p><h3>软件架构”能力“</h3><p></p><p></p><p>软件架构是一个非常具有挑战性的话题，您必须设计一个同时满足所有业务需求和所有质量属性的系统。这几乎不可能一个人完成，通常是架构师和领域专家团队合作的结果。</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/ce/bd/ce00a1ab3830d1818f74b52073cbd1bd.png\" /></p><p>通用软件架构质量属性</p><p>&nbsp;</p><p>软件架构不仅仅是图、框和线。让我们以其中一项质量属性安全性为例。只看高层次的设计图，只看一些线线连着框框，可能无法看到任何安全问题。我甚至不知道这个设计是否真的能行。保护系统安全的是代码。因此，架构师编写代码并与开发团队密切合作是很重要的。另外，架构师要能够阅读代码并经常与开发团队交流。这就是当软件架构师放大或缩小设计时所发生的事情，就像我在城市设计类比中所提到的。如果架构师不与开发团队沟通，也不编码，他们就会脱离现实，所设计的架构就不实用。</p><p>&nbsp;</p><p></p><h2>什么是软件架构师？</h2><p></p><p>&nbsp;</p><p>过去，<a href=\"https://xie.infoq.cn/article/8d181073ec0fda0c403c3fa4a\">软件架构师</a>\"是在纸上勾画逻辑流程规范，然后交给另一个团队(称为打孔者)来生产穿孔卡片并使软件工作的团队。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/50/fa/50c02c1a23cc0ddeb7e5a7769a4ea2fa.jpeg\" /></p><p>图片来源: Wikimedia Commons</p><p>&nbsp;</p><p>随着技术的进步，我们不再需要这样的过程，软件架构师的定义也变得不那么明确了。在现代IT中，软件架构师不是一个头衔或级别，因为他们不会在一夜之间给你最高的软件开发权。在Scrum团队中，这个角色和其他任何角色一样。我认为软件架构师是最有趣的角色，与医生、土木工程师、心理学家、社会工作者或会计师不同，您不能通过单一的培训课程获得软件架构师资格。事实上，世界上几乎没有一所大学提供软件架构学位。软件架构师对几乎所有事情都需要广泛且深入的了解，以便完成前一节中提到的目标。那么软件架构师使用这些技能和知识做什么呢？</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/0d/ed/0d7a3e3d6d9yy63b0312e1101ba640ed.gif\" /></p><p>图片来源：<a href=\"https://dilbert.com/strip/2008-03-04\">https://dilbert.com/strip/2008-03-04</a>\"</p><p></p><h3>软件架构师做什么，和谁一起工作?</h3><p></p><p></p><p>正如我前面所说的，软件架构位于业务目标和满足它们的软件系统之间。软件架构师将业务与使用不同语言、以不同方式思考并具有不同关注点的开发团队联系起来。具有多层管理和开发团队的竖井只会使交流变得更糟。拥有专业知识并掌握相关信息的软件工程师并不是决策者，而管理团队中的那些人则是不掌握相关信息的决策者，这种情况并不少见。为了解决相互冲突的权衡并推动组织前进，软件架构师在公司的阶梯上爬上爬下，在技术细节上扮演着至关重要的角色。</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/51/59/51b640685755711dc0ccf1de797d0159.jpeg\" /></p><p>一名宇航员——由NASA拍摄</p><p>&nbsp;</p><p>相比之下，如果大家在一些组织中冠有软件架构师的头衔，但他们只停留在企业阶梯的顶端，或者他们只关注图片时，他们就与现实脱钩了。正如<a href=\"https://www.joelonsoftware.com/about-me/\">Joel Spolsky</a>\"所说，这些人被称为<a href=\"https://www.joelonsoftware.com/2001/04/21/dont-let-architecture-astronauts-scare-you/\">架构宇航员</a>\"，他们没有贡献，也没有生产力。许多大的组织似乎都能负担得起很多这种人！</p><p>&nbsp;</p><p></p><h2>软件架构师的技能和获得多样化经验的方法</h2><p></p><p></p><p>对于软件架构师这个角色来说，对每一件事情都有经验至关重要。它让你知道什么时候该充当公司的桥梁，当放大或缩小架构图时该关注什么。当在不同的上下文中应用特定的架构设计时，您还将观察模式。在十多家公司工作过之后，我最终进入了<a href=\"https://www.zuehlke.com/en\">Zuhlke</a>\"咨询公司，在那里我不再需要换工作来获得不同的经验了。我的项目几乎涵盖了无数种行业，包括金融科技、保险科技、物流、制造业、奢侈品时尚、初创企业，这份列表还在不断增长。</p><p>&nbsp;</p><p></p><h3>领域知识</h3><p></p><p></p><p>对某些业务领域的深入了解对于软件架构师的成功是至关重要的，因为您不仅要知道它是什么，还要知道它将是什么，或者可能是什么，以及为什么。客户经常找到软件架构师，要求向他们展示行业领导者正在做什么以及如何做。领域知识还可以帮助软件架构师说一种商业通用的语言，这反过来帮助他们成为连接管理和开发团队桥梁。</p><p>&nbsp;</p><p></p><h3>人际交往能力</h3><p></p><p></p><p>软件架构师也是一个伟大的沟通者。许多优秀的高级软件工程师发现很难晋升为软件架构师，因为他们没有展示自己的技能，如倾听、口头和书面沟通、推进、冲突管理、演示、谈判和说服。</p><p>这份工作所需技能的具体类型取决于你工作的特定公司环境。</p><p>&nbsp;</p><p>在我的公司，我有机会在安全的环境中练习这些技能，比如我们称之为“<a href=\"https://www.zuehlke.com/en/welcome-to-zuhlke-hong-kong\">祖尔克日</a>\"”和“<a href=\"https://www.zuehlke.com/en/insights/zuhlkes-curiosity-capital-learning-development-during-a-pandemic\">祖尔克营</a>\"”的环境。我的雇主也在这些方面为我提供了正式的<a href=\"https://www.zuehlke.com/en/our-projects/getting-better-together-at-zuhlke-you-never-stop-developing\">培训</a>\"。最后，公司的建设性反馈文化支撑着许多人成长了起来。</p><p></p><h3>专业技术能力</h3><p></p><p></p><p>单独任何一张大学文凭都无法证明你是一个软件架构师。你需要学习软件工程的所有领域，包括软件设计、编码、质量保证、DevOps、性能分析、软件安全、项目管理、软件支持等等。这些技能对于创建满足软件架构“能力”的解决方案至关重要。当与开发团队中的专家交流时，软件架构师能够更好地理解相关信息，因为他们已经具备了这些领域的实践经验。</p><p>&nbsp;</p><p>作为一名开发团队成员，我可以胜任各个领域的日常工作，包括后端、前端和DevOps。这让我能够以第一人称视角看到幕后发生了什么，并让我能够与团队保持较近的距离。</p><p>&nbsp;</p><p></p><h3>业务和开发过程</h3><p></p><p>&nbsp;</p><p>业务过程描述了一个组织的业务操作，并定义了业务需求，而这些业务需求通常没有清晰地表述为软件项目需求。软件架构师应该知道，或者至少应该知道向谁询问业务流程的相关信息。</p><p></p><p>一个向行业组织交付解决方案的软件架构师，需要干上几年时间才能成为领域专家，这种情况并不少见。</p><p>&nbsp;</p><p>理解技术过程、软件开发生命周期和最佳实践的重要性与了解业务过程一样重要。这是因为软件架构师通常在确保业务和开发过程之间的一致性方面扮演着关键的角色，如此，才能做到迭代交付，才能有现实的项目计划。</p><p></p><h3>领导力</h3><p></p><p></p><p>现在，您应该非常好奇软件架构师如何掌握所有这些知识和技能了吧。好吧，我告诉你，他们并没有掌握！一个人是不可能掌握所有这些的。伟大的产品需要一个有能力的专家团队来开发。成功的软件架构师通常是有效的领导者，他们的团队中拥有伟大的成员，并使成员们成长得更加伟大，而不仅仅是个体。</p><p>&nbsp;</p><p>软件架构师通常被视为团队的代表。他们在领导、管理业务和技术方面投入了大量的精力。虽然人们常常认为领导者只在站在前面指挥，但有时在一个项目中需要<a href=\"https://learn.coactive.com/your-leadership-approach\">五种领导风格</a>\"。<a href=\"https://www.zuehlke.com/en\">我们公司</a>\"提供的领导力培训就是这么教的。</p><p>&nbsp;</p><p>你准备好成为一名软件架构师来寻求职业生涯的进一步发展了吗？现在是行动的最佳时机！</p><p></p><h5>关于作者</h5><p></p><p></p><p><a href=\"https://www.linkedin.com/in/ayltai/\">Alan Tai</a>\"是Zuhlke的首席软件架构师，<a href=\"https://www.zuehlke.com/en\">Zuhlke</a>\"是一家优质的全球咨询公司，为我们的业务伙伴提供高质量的解决方案。</p><p>&nbsp;</p><p>原文链接：<a href=\"https://ayltai.medium.com/what-it-takes-to-become-a-software-architect-fa7788962c8c\">https://ayltai.medium.com/what-it-takes-to-become-a-software-architect-fa7788962c8c</a>\"</p><p>&nbsp;</p><p>译者简介：冬雨，小小技术宅一枚，现从事研发过程改进及质量改进方面的工作，关注研发、测试、软件工程、敏捷、DevOps、云计算、人工智能等各个领域，非常乐意将国外新鲜的IT资讯和深度技术文章翻译分享给大家，已翻译出版《深入敏捷测试》、《持续交付实战》。</p>",
    "publish_time": "2022-08-19 11:56:16",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "它才是2022年最赚钱的编程语言，年收入超过17万美元",
    "url": "https://www.infoq.cn/article/r3i0g9C3kZH2KdSp9BIK",
    "summary": "<p></p><p></p><blockquote>本文对5508个软件工程工作岗位的数据进行了分析，帮你找出哪些编程语言的薪水最高。</blockquote><p></p><p></p><p>面对各种各样的工作岗位，软件工程师们简直被“宠坏”了。几乎每个行业都需要某种水平的程序员，从Web开发到正义黑客....这种多样性意味着不同的编程语言之间在薪水和人才可用性方面存在着巨大差异。</p><p></p><p>我们对RemoteOK（全球最大的求职网站之一）网站的5000多个工作岗位的数据进行了分析，以便找出薪水最高和最低的编程语言。</p><p></p><h2>2022年，哪些编程语言的薪水最高</h2><p></p><p>在找与编程语言相关的工作时，将雇主提供的薪资与整个行业的平均薪资水平进行比较是很有必要的。</p><p></p><p>雇主提供的薪水比行业平均水平高还是低？</p><p></p><p>以下是收入最高的编程语言：</p><p></p><p>Swift：中位数11.6万美元（30个岗位）Python：中位数105,000美元（227个岗位）Golang：中位数10万美元（412个岗位）C++：平均年薪10万美元（61个岗位）Java：平均薪资9.5万美元（134个岗位）Ruby：中位数9.5万美元（474个岗位）Rust：中位数8.8万美元（13份工作）SQL：中位数8.5万美元（147个岗位）</p><p></p><p>从分析结果来看，Swift的收入潜力最大，薪水中位数约为11.6万美元，年收入超过17万美元（约为115万人民币）。</p><p></p><p><img src=\"https://static001.geekbang.org/resource/image/aa/2c/aa73244a5a1c5a6b91357e08d53f5f2c.png\" /></p><p></p><p>在2015年 Stack Overflow 的问卷调查中，Swift也被选为“最受欢迎”的编程语言。</p><p></p><p>Swift一般用于开发iOS和macOS应用程序，但工作岗位较少，而且数量还在下降。在我们分析的数据中只有30个Swift岗位，可见竞争很激烈！</p><p></p><p>如果你要考虑竞争程度较低的编程语言，你可能需要考虑Python或Ruby。Ruby提供了最多的工作机会，同时为程序员提供了稳定的中位数薪水。</p><p></p><p>不过，2021年Stack Overflow开发者调查提供的数字略有不同：</p><p></p><p><img src=\"https://static001.geekbang.org/resource/image/12/f3/120ebf67e0dff89640c81dd59d10d8f3.png\" /></p><p></p><p>根据Stack Overflow的调查，收入最高的编程语言是：</p><p></p><p>ClojureF#ElixirErlangPerl</p><p></p><p>这些都是相对小众的编程语言，它们的工作机会很少——这是小众编程语言和薪水之间的一种权衡。</p><p></p><h2>2022年，哪些编程语言的薪水最低</h2><p></p><p>现在来看一下另一个极端——哪些编程语言的薪水最低。</p><p></p><p>以下是根据2022年的数据进行排序的清单：</p><p></p><p>HTML：7万美元（48个岗位）PHP：7.5美元（160个岗位）TypeScript：8万美元（118个岗位）JavaScript：8.1美元（436个岗位）</p><p></p><p>**一般来说，薪水较低的软件开发角色往往是前端开发人员。**这是由市场供需关系决定的，即前端开发者多于后端开发者。通常，程序员在学习后端开发和架构之前，会先学习Web开发。</p><p></p><p>前端和后端开发者的数量也可以从Indeed发布的数据中看到：</p><p></p><p>除了前端，PHP开发者的薪水通常也相对较低。</p><p></p><p><img src=\"https://static001.geekbang.org/resource/image/68/4d/6818df2b6142910f43bfcdf69f2e054d.png\" /></p><p></p><p>你需要在薪资收入和喜欢的工作之间做出权衡。PHP和HTML的薪水最低，通常只有5万美元。</p><p></p><p>虽然这对有些人来说可能已经足够了，但许多程序员为了让他们的技能效益最大化，会选择更有利可图的编程语言。</p><p></p><h2>2022年，哪些编程语言需求在增加</h2><p></p><p>薪水和职位空缺并不是分析编程就业市场状况的唯一方法。我们还可以看一看哪些编程语言需求量最大。例如，我们可以看看某一特定编程语言职位数量的同比增长。</p><p></p><p>以下是两个后起之秀：</p><p></p><p>TypeScript（增加391%）：</p><p></p><p>2020年：33个岗位2021年：162个岗位</p><p></p><p>SQL（增加158%）：</p><p></p><p>2020年：57个岗位2021年：147个岗位</p><p></p><p>需求增长最快的编程语言是SQL和TypeScript。在考虑一种未来可持续的编程语言时，这两种都是相当安全的选择。</p><p></p><p>如果考虑月活跃用户数量，增长最快的编程语言是JavaScript、Python和Java：</p><p></p><p><img src=\"https://static001.geekbang.org/resource/image/c9/db/c9140edeb944363e9456c49cee51bcdb.png\" /></p><p></p><h2>2022年，哪些编程语言的需求在减少</h2><p></p><p>有些编程语言的需求在增加，也有一些编程语言的需求在减少。</p><p></p><p>虽然对编程语言的需求最终可能会复苏，但对于目前呈下降趋势的编程语言，我们还是不要抱有太大的信心为好。</p><p></p><p>以下是两个例子：</p><p></p><p>C++：（减少21%）</p><p></p><p>2020年：77个岗位2021年：61个岗位</p><p></p><p>Java：（减少17%）</p><p></p><p>2020年：162个岗位2021年：134个岗位</p><p></p><p>C++和Java这些编程语言主要面向企业，近年来受欢迎的程度在下降。不过，尽管这些工作岗位的数量减少了，但薪水仍然很高（这两种编程语言的收入位居前5）。</p><p></p><p>这些编程语言正慢慢成为一种更小众的技能。然而，世界上大部分应用程序仍然是用C++和Java开发，所以短时间内对这些编程语言的需求不会很快消失。</p><p></p><h2>2022年，哪些编程语言最流行</h2><p></p><p>我们并非通过开发人员的数量而是相关工作岗位的数量来判定一门编程语言的受欢迎程度。就业市场才是衡量一门编程语言受欢迎程度的最佳基准。</p><p></p><p>我们来看看2022年最受欢迎的编程语言：</p><p></p><p>JavaScript：</p><p></p><p>657个岗位</p><p></p><p>70亿美元市场价值</p><p></p><p>Ruby：</p><p></p><p>426个岗位</p><p></p><p>51亿美元市场价值</p><p></p><p>Golang：</p><p></p><p>390个岗位</p><p></p><p>51亿美元的市场价值</p><p></p><p>PHP：</p><p></p><p>232个岗位</p><p></p><p>22亿美元市场价值</p><p></p><p>Python：196个岗位</p><p></p><p>26亿美元市场价值</p><p></p><p>TypeScript：139个岗位</p><p></p><p>15亿美元市场价值</p><p></p><p>SQL：135个岗位</p><p></p><p>16亿美元市场价值</p><p></p><p>Java：115个岗位</p><p></p><p>14亿美元市场价值</p><p></p><p>如果你正在找2022年最受欢迎和薪水最高的编程语言工作，可以考虑Python和Golang，它们的中位数是105000美元。</p><p></p><p>如果考虑月活跃用户数量，最受欢迎的编程语言是JavaScript、Python和Java：</p><p></p><p><img src=\"https://static001.geekbang.org/resource/image/ef/cc/ef4467b6547de78f629a6c35442b17cc.png\" /></p><p></p><h2>总结</h2><p></p><p>好了，这些就是这篇文章关于可能影响你决定学习哪种编程语言的因素的全部内容。</p><p></p><p>我们的建议是选择传统的软件开发职业发展路径，也就是说，不要简单地将薪水最高的编程语言作为你的第一选择。在进入更具优势的后端领域之前，先学习前端开发的基础知识。</p><p></p><p>原文链接：</p><p></p><p><a href=\"https://4dayweek.medium.com/what-are-the-highest-paying-programming-languages-in-2022-1d67ec881706\">https://4dayweek.medium.com/what-are-the-highest-paying-programming-languages-in-2022-1d67ec881706</a>\"</p><p></p>",
    "publish_time": "2022-08-19 14:01:39",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "公司为了敏捷而犯下的十大错误",
    "url": "https://www.infoq.cn/article/GVQf1JJq5DNICm2aLtze",
    "summary": "<p><a href=\"https://xie.infoq.cn/article/be160edbb6422b56ed7131ebe\">敏捷</a>\"（Agile）无处不在，似乎所有人都想变得敏捷，而如果你现在还没有自己的敏捷团队，那你得是上古恐龙级别的老古董。但是，一个组织并不会简单地就变得敏捷，本文中将列举组织为了敏捷而犯下的十类错误。&nbsp;</p><p></p><p></p><h3>第十、从上而下地实施敏捷</h3><p></p><p></p><p>作者所了解的一些从上而下的敏捷实施中，组织的管理层会通知团队要采用敏捷的方式开展工作，并列出了具体的时间和方式。但敏捷实际的意义在于团队通过自我规划来创建有价值的产品。</p><p></p><p>管理层传达敏捷目标这一点没有问题，但为达到最佳效果，团队和管理层都应参与到具体实施中，一起踏上敏捷之旅。团队各不相同，产品也各有千秋，是时候让团队自己决定什么才是真正行得通的了。</p><p></p><p></p><h3>第九、“实施”变革</h3><p></p><p></p><p>和上一点类似，组织试图通过指导手册或者是凭空创建的工作流程来简单粗暴地“实施”敏捷的文化变革。</p><p></p><p>这是不行的。组织的文化是在每一名团队成员的参与下，经过长年累月的积累而形成的。文化是无法轻易改变的。如要改变，管理层应以身作则，自觉遵守文化指导手册（最好是由员工协作编写的），展示预期行为，并对其他成员的模范行为给予鼓励，同时还需要保持耐心。</p><p></p><p></p><h3>第八、聚焦输出</h3><p></p><p></p><p>许多公司的敏捷团队完全将工作的重心放在了创造与交付产品上。他们关注上市时间和<a href=\"https://xie.infoq.cn/article/b59d722e3a11db83d3cab44f9\">测试自动化</a>\"，关注<a href=\"https://www.infoq.cn/article/D3hzxMxfyTNteaTc2H9H\">CI/CD</a>\"，以做到更快的交付。但这种把重心放在输出的做法是反敏捷的。</p><p></p><p>如果你所交付的应用并不是客户需要的，那么交付再快也都没了意义。很多新功能都因为派不上用场而从没有人使用过。真正重要的是我们通过输出所能达成的效果。</p><p></p><p></p><h3>第七、忽视客户和用户</h3><p></p><p></p><p>很多敏捷团队对用户画像或客户需求只有模糊的概念。他们从不和这些关键的利害关系人接触，即使有定期演示或评审，也只是面向内部的利益关系人。而他们只要见到销量增长就会欢呼成功。但销量只是指标，它们不代表客户。</p><p></p><p>团队创造的产品是为客户和用户服务的，我们需要让客户和用户参与进来。敏捷的意义就在于定期与你的用户一起验证产品。没有这层验证，你的敏捷之旅就是毫无根基的。</p><p></p><p></p><h3>第六、敏捷仅面向 IT</h3><p></p><p></p><p>人人常常误以为敏捷只适用于 IT，只有 IT 需要敏捷，组织的其他部分完全无需改动。这是忽略了团队内除了 IT 之外其他成员为提供用户体验而做出的贡献。没有大家共同的努力，客户不会得到满意的结果。</p><p></p><p>IT 只是产品体验的一部分，而产品体验也是客户体验的一部分。客户对产品的体验还包含了销售、售后、政策法规以及第三方。在不断变化的环境中，最大化产品价值是所有人的共同目标。我们需要团队协作以及快速的反馈循环，我们都需要变得敏捷。</p><p></p><p></p><h3>第五、敏捷只限于团队层面</h3><p></p><p></p><p>敏捷的一大错觉是其只需应用于创造产品的团队。只要这些团队是敏捷的，那么一切就都不会有问题。</p><p>但这是行不通的。团队在组织中工作，并会不断被组织所影响。当组织展现出反敏捷的行为时，只会给团队帮倒忙，甚至会给创造价值的团队带来潜在伤害。</p><p></p><p>管理层、领导者、人力资源以及其他的成员都应鼓励团队，帮助他们成为更高效的敏捷团队。对于如何以敏捷的方式创建产品体验及达成目标方面，整个组织应该有统一的认识。</p><p></p><h3>第四、敏捷只为更快的交付</h3><p></p><p></p><p>“我们需要变得敏捷并更快地交付”。大型公司的顶层管理者也曾做出过这种言论，清晰地展示了他们对自己在说什么完全没有丝毫的认知。</p><p></p><p>敏捷不是为了更快的交付。敏捷是意识到我们无法提前预知一切，所以便通过增量构建来和用户进行确认。敏捷是更快的反馈，是更好地了解下一步要做什么，是通过与用户的协作，更及时地了解什么会得到认可，什么不会。</p><p></p><p>将注意力集中在更快的交付并无视反馈循环只会让你成为一个功能工厂，你在创建输出上非常在行，但你也只会创造出人们并不想要的结果。</p><p></p><p></p><h3>第三、用瀑布式管理实施敏捷</h3><p></p><p></p><p>敏捷不是通过漫长的研究、长期规划的阶段性工作流达成的。敏捷的工作方式是从传统“瀑布式管理”思考模式的一种明显的转变。团队不再会过度分析工作内容，而是会从产品的升级换代中学习。他们会更快地认识到到产品的价值，并找到更好的合作工作模式。</p><p></p><p>在敏捷之旅的开始，你会为团队设定目标，并找到达成目标的最佳途径。你会从你所完成的工作中学到什么可行，什么是不可行的。你会和团队一起协作奋进。</p><p></p><p></p><h3>第二、应用不变的流程及工具</h3><p></p><p></p><p>最痛苦的一种变得敏捷的方式之一就是直接应用别人的东西。想象一下，团队如果按指示使用 <a href=\"https://xie.infoq.cn/article/255c56b6783c071da4b6af844\">Scrum</a>\"，用预先配置好的工具比如 Jira，在固定时长的 Sprint 周期里以预设好的速度交付。这样的灾难场景在 SAFe 里就发生了，并且还扩大了规模，成了组织内部自上而下的敏捷实施。</p><p></p><p>拿来主义并不适合 Scrum 和其他的敏捷方式。每个团队都是不同的，每个产品的应用场景也不尽相同。直接应用标准流程只会给团队套上枷锁。团队或许还会发展提升的空间，但如果没办法采取改进措施，那么他们的效率只会越发低下。</p><p></p><p>敏捷方法的引入只是真正旅程的开始，通过这一步，我们应放开对团队的限制，并期望他们可以自行寻求进步。这才是敏捷真正的含义所在。不断的变化，不断的提升，挑战将会是新的日常。尽管这段路程看起来非常吓人。</p><p></p><p></p><h3>第一、想要变得敏捷</h3><p></p><p></p><p>组织常犯的第一大错误便是对变得敏捷的渴望。敏捷不应是目标，没有人会因为你是敏捷的而选择你的产品。对市场和你的股东而言，敏捷没有任何意义，这只是一个词语。非要说的话，敏捷还可能是有害的。因为你会暴露出自己已经落伍了，已经过时了，即使是起步最晚的，多数也早在五年前就到达了你所在的阶段。</p><p></p><p>与其设法变得敏捷，组织应当将重点放在他们所希望造成的影响上，并设定达成预期影响所需要的目标。你应确保组织中的所有人都目标一致，应让人们都愿意为了这个目标拼尽全力。你还应帮助人们消灭前行道路上的障碍，无论是竖井、过于繁琐的过程还是任何其他形式的累赘。</p><p></p><p>无论你想怎么称呼它都不重要， 因为你的用户和股东不会因为你称自己为敏捷就会高看你一等，他们只会根据你所造成的影响和你所带来的利润评价你的工作。</p><p>&nbsp;</p><p>感谢 Matt DiBerardino 及 Erik de Bos。</p><p></p><h5>英文原文：</h5><p></p><p></p><p><a href=\"https://medium.com/awesome-agile/top-10-mistakes-organizations-make-to-become-agile-3a83536e3285\">Top 10 Mistakes Organizations Make to Become Agile</a>\"</p>",
    "publish_time": "2022-08-19 14:14:20",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "华为云携手信通院发布业界首个《云原生数据库白皮书》，为云原生数据库发展指明方向",
    "url": "https://www.infoq.cn/article/wwNlHKGhOpXbuV3P9dkp",
    "summary": "<p>8月18日，华为云TechWave云原生数据库峰会在深圳举办。华为云与中国信通院云计算与大数据研究所共同发布了业界首个《云原生数据库白皮书》，梳理云原生数据库全流程概念及方法。华为云还与沃趣科技、明源云发布基于华为云云原生数据库GaussDB的联合解决方案，助力客户激活数据价值。</p><p></p><p>会上，<a href=\"https://www.infoq.cn/article/c6xOVkcuYYvKUic7siQC\">华为云CTO</a>\"张宇昕表示，数据库经历了线下部署和云化部署阶段，进入到云原生时代，云原生数据库已成为云上数据库使用的标准范式。<a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651035817&amp;idx=3&amp;sn=b09c9c9d5c6b335a938454d17e84cbc1&amp;chksm=bdbe60fa8ac9e9ec072b20704c56ac6f8799015fea3ede1939ced3e5345eb732790080d17159&amp;scene=27#wechat_redirect\">华为云GaussDB</a>\"践行云原生思维，将围绕Serverless、Regionless、Modeless三大方向构建核心能力，实现极致弹性、全域可用和极简体验，以满足企业上云和智能升级对时效性、可用性、混合负载等方面的诉求，打造企业核心业务云化的智能数据基座。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/fe/fe07361cd8d463ec74a2407c1e1d2cde.png\" /></p><p></p><p>华为云CTO张宇昕发表主题演讲</p><p></p><h2>云原生数据库持续演进，易用性、安全性不断提高</h2><p></p><p></p><p>如今，<a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651129621&amp;idx=3&amp;sn=583065630d4d253396b535300ead0060&amp;chksm=bdb8ff468acf76500a3e363c172fe99afb98822f1b01798a7eafb1a44d37b7a7d3ced8c73402&amp;scene=27#wechat_redirect\">企业数字化</a>\"转型已经进入深水区，业务数据总量呈现爆发式增长，新业务、新场景对数据库的时效性、可用性、混合负载以及性价比等提出了新的挑战。</p><p></p><p>中国信通院云计算与大数据研究所副所长魏凯表示，为应对上述挑战，数据库技术正朝着降低成本提升易用性、保障数据安全可信、提升功能增强性能、满足新兴业务需求四大目标演进，<a href=\"https://archsummit.infoq.cn/2022/beijing/track/1320\">云原生数据库</a>\"则是数据库技术发展的主要方向之一。</p><p></p><p>云原生数据库是为云<a href=\"https://archsummit.infoq.cn/2022/beijing/track/1321\">架构</a>\"而设计和构建的<a href=\"https://archsummit.infoq.cn/2022/beijing/track/1197\">数据库</a>\"，具备更高的扩展性，支持多租户、分布式部署等能力。张宇昕指出，云原生数据库Serverless的特性增强了弹性、降低了成本，Regionless特性提高了可用性和扩展性，而Modeless特性提升了易用性和效率，在新场景和新应用中能够支撑企业业务的高效运转。</p><p></p><p>Serverless让资源极致弹性：传统的烟囱式建设模式会导致响应慢、资源利用率低、系统能力缺乏弹性等问题，难以应对业务突发情况及满足业务快速上线需求。华为云云原生数据库GaussDB具备存算分离、资源池化能力，能够提供多维度的弹性服务，将资源弹性速度从分钟级缩短至秒级，随时响应业务需求。</p><p></p><p>Regionless让数据库全域可用：随着出海趋势的到来，中国企业正蓄势跳跃到一个全新发展阶段，跨区域访问和7*24小时线上化成常态。在该背景下，客户存在时延高、体验差、投入成本大等问题，且数据安全与业务连续性面临挑战。华为云云原生数据库GaussDB支持跨AZ、跨Region的全球部署，业务可以在任意地方进行接入和访问，同时带来跨地域的高可用。</p><p></p><p>Modeless带来数据库极简体验：传统的数据库只能支持单一负载（TP 或者AP）或者单一模式（KV、文档、时序、宽表等），难以做到一体化的数据处理分析，在线化、实时化地发挥数据价值。华为云云原生数据库GaussDB分别采用HTAP和多模数据库技术，一个入口处理多样负载、一个入口处理多种数据类型，实现一站式处理，业务接入效率可从数月缩短至数天。</p><p></p><p>华为云数据库服务产品部总经理苏光牛表示，云原生数据库能够让客户更高效地使用数据库，从而构建起敏捷智能的企业数字化业务。特别是进入<a href=\"https://archsummit.infoq.cn/2022/beijing/track/1321\">云原生</a>\"2.0时代，新应用、新场景驱动数据库实现三大转变，即从以资源为中心到以应用为中心、从以地域为中心到以流量为中心、从以负载为中心到以数据为中心。云原生数据库与生俱来的优势与特征，促使越来越多的用户更加坚定地选择云原生数据库。</p><p></p><p>为加速企业拥抱云原生数据库，华为云与中国信通院云计算与大数据研究所联合撰写《云原生数据库白皮书》，系统阐述了云原生数据库的发展趋势与现状，从云原生数据库应用场景、技术架构、关键技术以及不同场景下的生产实践，详细介绍了云原生数据库的技术模式，并结合当前应用现状及问题，指明未来云原生数据库的技术方向，力求梳理云原生数据库全流程概念及方法。</p><p></p><h2>联合生态伙伴发布创新解决方案，加速企业拥抱云原生数据库</h2><p></p><p></p><p>目前华为云已与80多家数据库领域的ISV建立合作关系。华为云与沃趣科技联合打造的QFusion平台在能源、机场等多个行业为客户创造价值。华为云与明源云联合打造的行业ERP解决方案，以数据库为抓手，盘活数据资产，让数据成为血液流动，加速不动产工程<a href=\"https://archsummit.infoq.cn/2022/beijing/track/1220\">数字化</a>\"。</p><p></p><p>在落地实践中，<a href=\"https://mp.weixin.qq.com/s?__biz=MzIzNjUxMzk2NQ==&amp;mid=2247496637&amp;idx=2&amp;sn=f3be0ccbaa43851d3f4566a24371744f&amp;chksm=e8d40c7fdfa38569b6d9118c64068c09f0e57a7c664515d5e15604180916870763554fbdc56d&amp;scene=27#wechat_redirect\">华为云云原生数据库GaussDB</a>\"已在2500多家客户规模商用，覆盖金融、政企、游戏、互联网、制造、电商等行业。比如，在游戏行业，华为云为迷你创想成本降低60%，数据库承载量提升3倍，轻松应对1亿多月活；在音视频行业，华为云凭借超高性能和极致弹性能力，提升了多多视频用户的观看体验，为2.6亿用户打开新视界；在华为终端项目中，华为云高效支撑华为终端7.3亿月活用户的日常使用，万亿级数据记录，百万级QPS，数据库资源与运维成本整体下降30%。</p><p></p><p>数字化转型是一项复杂的长期工程，不仅需要多方技术力量的配合，更需要大胆创新。华为云践行“一切皆服务”的理念，持续深耕数据库技术和解决方案创新，推动更多企业安心上云、轻松用云，为企业数字化转型提供无限可能。</p>",
    "publish_time": "2022-08-19 15:24:31",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "传高通计划重返服务器芯片市场",
    "url": "https://www.infoq.cn/article/Gm7H9eAPSWxYz6Gd0AK5",
    "summary": "<p>近日，据彭博社报道，<a href=\"https://www.infoq.cn/article/NdcbENeJz1pZBfcoiDsE\">高通</a>\"正在考虑推出一款新芯片重返服务器市场，以减少对智能手机的依赖。</p><p></p><p>报告称，高通已选择在其此前收购的 Nuvia 部门内构建新的服务器芯片，并在寻找买家时将 AWS 作为潜在客户。然而，具体的细节尚不清楚，目前尚不清楚高通是否计划为该芯片使用基于 Arm 的核心设计，以及该公司打算生产哪种类型的数据中心芯片。</p><p></p><p>在 CEO Christiano Amon 的领导下，高通试图将业务扩展到智能手机和无线芯片之外。该公司的多元化努力包括加大力度进军汽车和工业芯片，以及基于 Arm 设计的 PC 芯片，以便与英特尔和 AMD 竞争。</p><p></p><p>近几个月来，由于通货膨胀导致消费者推迟购买新产品，智能手机和个人电脑等消费设备中的芯片市场大幅疲软。高通公司 7 月预测其第四季度收入低于华尔街目标，为智能手机需求放缓做好准备，这可能会损害其主要的手机芯片业务。</p><p></p><p>去年，高通以超过10亿美元的价格收购了芯片初创公司 Nuvia，计划将该公司的技术应用到其智能手机、笔记本电脑和汽车处理器中。当时Christiano Amon表示，Nuvia的工作有助于发展高通的高端智能手机和PC芯片。</p><p></p><p>Nuvia 由几位前苹果和谷歌的芯片工程师于 2019 年创立。去年被高通收购时，Nuvia正在开发一系列基于 Arm 的服务器芯片。AWS 将 Arm 设计用于其内部的 Graviton 芯片，而Ampere 等初创公司已经基于 Arm 技术构建了服务器芯片，旨在打入多年来一直由英特尔和 AMD 主导的服务器处理器市场。</p><p></p><p>在最近接受 Protocol 采访时，Arm 首席执行官雷内·哈斯估计，其技术目前占数据中心市场的 5% 到 10%。基于该公司设计的芯片以比竞争对手的 x86 处理器更高效地使用能源而闻名，这些芯片，包括高通制造的芯片，已经广泛用于智能手机和平板电脑。</p><p></p><p>Arm拒绝就高通可能推出的服务器芯片发表评论。</p><p></p><p>据悉，高通最后一次尝试制造服务器芯片是在 2017 年，称为 Centriq 2400 项目。当时，微软和 Cloudflare 等几家云计算供应商表示有兴趣采用这种设计。最终，该公司在推出后不到一年就关闭了该项目。该项目关闭后，领导这项工作的前英特尔资深人士 Anand Chandrasekher 离开了高通。</p><p></p><p>而此番动作也意味着，在大约五年前进入服务器芯片市场的努力失败后，高通决定再次尝试。</p><p></p><p>彭博情报分析师Mandeep Singh表示，ARM服务器市场是芯片行业的亮点之一，重新进入这个市场将扩大高通的市场参与。”</p>",
    "publish_time": "2022-08-19 15:50:01",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "湘水滔滔，鲲鹏展翅——鲲鹏计算助力湖南产业数字化创新纪实",
    "url": "https://www.infoq.cn/article/ufFlyQagqQ5MWDE4NMyA",
    "summary": "<p><a href=\"https://www.infoq.cn/video/9JW4XRrqLxzsP0UMrAiM\">数字经济</a>\"是全球未来的发展方向，是推动经济社会发展的重要动能。“十四五”规划提出，加快数字化发展，建设数字中国。数字化浪潮席卷全球，各行各业正大力推进数字化和智能化，加快产业升级转型。</p><p></p><p>根据 IDC 预测，到 2023 年，数字经济产值将占中国 GDP 的 67%，远高于全球平均水平。</p><p></p><p>面对如火如荼的数字经济，企业面临着全新挑战与机遇。一方面，万物互联正成为新时代的常态，海量终端的入网与互通给企业 IT 基础设施带来巨大压力；另一方面，更多设备、更复杂的用户需求、更多样化的场景和更严峻的安全挑战显著提升企业对 IT 基础设施的<a href=\"https://www.infoq.cn/article/6stRiPtpJD4fYeT4L8vy\">算力</a>\"、存储、网络带宽和延迟以及安全防护能力等要求。因此，传统的 IT 计算架构面对新时代的需求往往力不从心甚至不堪重负，数字经济呼唤全新的计算平台解决方案。</p><p></p><p>在这样的背景下，<a href=\"https://www.infoq.cn/article/sBu9e83AW7watJI2QP4k\">鲲鹏计算</a>\"产业应运而生。鲲鹏计算产业是基于 Kunpeng 处理器构建的全栈 IT 基础设施、行业应用及服务，包括 PC、服务器、存储、操作系统、中间件、虚拟化、数据库、云服务、行业应用以及咨询管理服务等。</p><p></p><p>2019 年，鲲鹏计算产业正式发布。自面世以来，它迅速得到各行业诸多企业的支持和应用，进而形成一个繁荣成长的鲲鹏计算产业生态。三年多的时间，上下游厂商纷纷围绕鲲鹏软硬件平台发展自有品牌的产品和解决方案，各领域不断涌现鲲鹏计算产业的参与者。</p><p></p><p>目前，鲲鹏计算产业已有超过 4000 家厂商合作伙伴，吸引超过 120 万开发者加入；鲲鹏应用使能套件 BoostKit 与鲲鹏开发套件 DevKit 日趋成熟，<a href=\"https://www.infoq.cn/article/66FN7ww93keIK4e6lsj2\">openEuler </a>\"开源 操作系统 与 <a href=\"https://www.infoq.cn/article/gRRJVUzp3N7ZRGFUDj8Z\">openGauss</a>\" 开源数据库生态迅速完善。并且，为加速产业生态的成熟，鲲鹏计算产业在全国 24 地与当地政府合作建立鲲鹏生态创新中心，通过聚焦本地优势产业、聚合产业合作伙伴、共同建设软件生态、培养人才、孵化标准，实现做大产业空间和快速落地区域产业的效果。</p><p></p><h2>科技兴省，鲲鹏当先</h2><p></p><p></p><p>鲲鹏生态创新中心是鲲鹏计算产业与各省、市政府为了在该区域共同合作发展鲲鹏生态而成立的组织。它以发展鲲鹏计算产业生态为首要任务，连接政府和产业伙伴、企业、用户，整合产业发展政策、资金、技术和人才等基础资源，向企业提供生态使能服务，向行业用户提供应用保障服务。</p><p></p><p>在全国各省，鲲鹏生态创新中心在当地数字化进程中发挥着愈加重要的作用。</p><p></p><p>以湖南省鲲鹏生态创新中心为例，自 2020 年正式成立以来，已经为 300 余家企业完成鲲鹏计算生态适配流程，下发证书 600 余份，培养产业人才 3000 余人，吸纳联盟成员近 100 家。目前，鲲鹏计算产业已经深入湖南省智慧城市、智慧交通、智慧园区、智慧医疗等多个领域，取得一系列令人瞩目的实践成果。在湖南省力争打造全国计算高地的战略规划中，鲲鹏计算产业正发挥举足轻重的作用。包括处理器、存储、硬盘、板卡、整机、操作系统、数据库、中间件……一个涵盖全行业应用产业链的千亿级产业集群在湖南迅速聚集，为全省数字经济发展注入强大动力。</p><p></p><p>2021 年，鲲鹏应用创新大赛湖南赛区顺利举办，为湖南省高校和企业的鲲鹏生态开发者提供绝佳的交流与展现机会。在近日举办的鲲鹏开发者创享日 2022·长沙站上，2022 鲲鹏应用创新大赛湖南赛区和欧拉 &amp; 高斯人才发展加速计划（湖南省）同步启动。后者是鲲鹏计算产业围绕 openEuler 开源操作系统、openGauss 开源数据库人才发展的一项计划举措，旨在鼓励高校和研究所师生加入欧拉、高斯生态，全面加速欧拉、高斯人才建设。计划一经推出就得到湖南省内各高校的积极响应。湖南省鲲鹏生态创新中心的这一系列举措将助力湖南打造国家重要人才中心和创新高地，为湖南高新科技产业提供人才储备，有效促进湖南人才、产业和创新的融合。</p><p></p><h2>数字化转型，鲲鹏引路</h2><p></p><p></p><p>成立两年多以来，湖南省鲲鹏生态创新中心通过认证适配、生态使能等服务，为湖南省各行业数字化进程作出诸多贡献，涌现出一大批典型案例。</p><p></p><p>长沙望城区智慧城市是全国首个全鲲鹏体系的区县级新型智慧城市。北明软件有限公司与湖南省鲲鹏生态创新中心合作，推出基于区块链技术的无证城市解决方案，实现电子证照在政务服务、公共服务和社会服务全场景等全渠道的落地使用。企业或个人办理业务，全程无需到达现场，指尖在线办事。如今，长沙望城智慧城市可实现公众线上办事一键授权免交材料、线下出入公众场所一键展码或人脸识别免用卡证，建成无证应用更便利、数据可信更安全的“无证城市”，做到减证便民，无证利民，切实增强人民群众的幸福感和获得感。</p><p></p><p>湖南科创信息技术股份有限公司专注于面向政企领域，提供综合信息化解决方案。它为某市政务系统构建了基于鲲鹏生态的数字政府解决方案，建设服务化基座能力，支撑共享开放生态，基于多源异构数据，构建全域数字孪生底座，打造现代化指挥中心，宏观展示经济、政治、文化、社会和生态环境建设领域主要业务指标，在县域治理、应急指挥、数字乡村、民生保障、城乡发展、党群党建等领域支撑县镇乡村的多级联动。</p><p></p><p>金融科技领军企业科蓝软件持续追求以创新方案推动银行业核心业务应用数字化转型。公司近年来与鲲鹏计算产业紧密合作，基于鲲鹏软硬件底座、鲲鹏 DevKit、国产化分布式数据库等技术组件共同构筑国产化算力底座，构建未来银行创新解决方案。科蓝提供的“SUNDB 数据库 + 鲲鹏 + 操作系统”的一体机解决方案可支撑银行核心交易系统与业务稳定运行。2020 年，科蓝软件与湘江新区签署合作协议，共同推动湘江鲲鹏数据库一体机战略，并为湖南金融中心企业提供高质量服务。</p><p></p><p>此外，湖南省鲲鹏生态创新中心还帮助医疗、交通、电信、农业、旅游、消费电子等行业的数十家企业取得鲲鹏技术认证。鲲鹏计算产业生态帮助这些企业打造出符合数字经济发展要求的 IT 系统和平台，满足了一系列终端应用场景下用户更高的需求，为湖南省的数字化战略提供了有力支撑。</p><p></p><h2>创未来，享非凡</h2><p></p><p></p><p>自成立至今，湖南省鲲鹏生态创新中心已经成为湖南省行业数字化转型不可或缺的力量。它通过多样化的活动、服务和合作计划，推动湖南区域各行各业平稳实现数字化转型，为湖南鲲鹏计算产业开发者赋能，并加速湖南高技术领域人才培养进程。在数字化引领湖南省高质量发展战略中，鲲鹏正以包容开放的生态载体、创新突破的技术体系和逐步完善的数字经济新底座实力，助力湖南地区产业数字化升级。</p><p></p><p>湖南省鲲鹏生态创新中心是遍布全国的鲲鹏生态创新中心的典型代表。目前，越来越多的鲲鹏生态创新中心在全国以点带面，发挥着愈加重要的作用，加快鲲鹏计算产业生态培育速度，促进各区域人才、产业和创新的有效融合，大力促进国内企业数字化转型和产业升级。展望未来，各地鲲鹏生态创新中心将以鲲鹏全栈基础软硬件平台与各地优势产业相结合，助力国内千行百业拓展创新数字化应用场景，共绘鲲鹏计算产业非凡蓝图。</p>",
    "publish_time": "2022-08-19 15:53:47",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "让大厂抓狂的“额外一秒”：谷歌、微软、Meta 和亚马逊纷纷提议放弃",
    "url": "https://www.infoq.cn/article/3qXArL5XGJZXmAh90ZlD",
    "summary": "<p></p><p></p><blockquote>简单粗暴的“加一秒”已成为“服务器不能承受之重”。</blockquote><p></p><p></p><p>谷歌、微软、Meta 和亚马逊一众大厂近期共同发起了一项废除闰秒的倡议：用“额外加一秒”的方式同步地球自转时钟，明显是桩得不偿失的买卖！</p><p></p><p>官方机构如美国国家标准与技术研究院（NIST）以及负责维护米制公约的国际计量局（BIPM）也表达了支持态度，取消闰秒的呼声正越来越强。</p><p></p><p></p><h2>闰秒：人类引入的不规则操作</h2><p></p><p></p><p>所谓闰秒，就是在正常计时之外再增加一秒，借此保证时钟能与地球的实际自转时长保持同步。</p><p></p><p>科学上有两种时间计量系统，一种是基于地球自转为基础的世界时（简称 UT），另一种是以原子振荡周期确定的原子时（简称 TAI）。原子时的时间尺度更为均匀，而世界时由于地球自转速度不均匀，两者之间会存在差异。当两者之间的差异超过 0.9 秒时，国际地球自转服务组织（IERS）就会负责将世界标准时间调快或拨慢一秒，这就是闰秒。</p><p></p><p>自 1972 年以来，全球各计时机构已经在国际原子时（TAI）标准时钟上添加过 27 次闰秒。而具体方法并不是直接把午夜 23：59：59 直接计作 0：0：0，而是额外增加一个 23：59：60。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/ae/ae787bee2260b1ef8ec70c9d13bbb7b1.png\" /></p><p></p><p>因为地球的自转速度不规则地变化，所以闰秒的间隔也是不规则的。而从长远来看，地球的自转是相当不可预测的，这解释了为什么闰秒只提前六个月宣布。</p><p></p><p>世界最高山脉上的冰盖不断融化和重新冻结，以及潮汐摩擦都是导致地球自转不规则的众多因素之一。用一个旋转的花样滑冰运动员来打个比方，她通过控制手臂来控制角速度。当张开双臂时，角速度会降低，从而保持滑冰者的动量，当手臂收回，角速度就会增加。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/4c/4cf44718bc9fa24cc94618ea8d35e14a.gif\" /></p><p></p><p>目前，我们只添加了正闰秒。在早期，就是通过简单粗暴地增加一秒来完成的，从而产生一个不寻常的时间戳：23:59:59 -&gt; 23:59:60 -&gt; 00:00:00</p><p></p><p>但随着地球自转模式的变化，我们很可能在未来的某个时刻出现负闰秒。时间戳将如下所示：23:59:58 -&gt; 00:00:00</p><p></p><p>正闰秒的跳跃会让程序崩溃或导致数据损坏；而更重要的是我们还从未大规模测试过负闰秒的破坏性影响。无论如何，对于管理硬件基础设施的人来说，每一个闰秒都是痛苦的来源。</p><p></p><p></p><h2>互联网不能承受的“一秒钟”</h2><p></p><p></p><p>我们人类自身对于闰秒调整几乎是感觉不到的，但对于需要精准计时的计算机系统和互联网来说，这种简单粗暴的“加一秒”方法好处不多，但危害可不小。</p><p></p><p>假设我们有这样的代码：</p><p></p><p>start := time.Now()</p><p></p><p>// do something</p><p></p><p>spent := time.Now().Sub(start)</p><p></p><p>那么最后可能会在闰秒事件期间，“spent”值会出现依赖负数的情况，从而导致了程序崩溃。</p><p></p><p>闰秒于 1972 年被引入，迄今为止已经增加了 27 个正闰秒。每一次增加闰秒，都会在整个软件行业中引发问题。毕竟无数计算设备需要依靠精确的计算服务器网络，才能有序安排事件、记录活动先后，比如向数据库内添加数据条目，如果处理不好就会出现脑裂或其他问题。</p><p></p><p>闰秒的变化曾在 2012 年引发 Reddit 论坛的大规模中断，同时给 Mozilla、LinkedIn、Yelp 以及船家预订服务商 Amadeus 造成了不小的麻烦。</p><p></p><p>虽然了解了闰秒的影响，但 bug 并没有因此而消失。最近一次闰秒是在 2017 年，网络基础设施服务商 Cloudflare 还是因闰秒导致一部分客户服务器宕机。当时 Cloudflare 软件比较了两种时间，并发现时间似乎在“倒退”，于是因无法处理这自相矛盾的结果而陷入崩溃。</p><p></p><p>计算机在处理数字方面绝对是一把好手，但人类引入的闰秒这类不规则操作，则会打破计算机那完美无瑕的内部逻辑。<a href=\"https://www.infoq.cn/article/MEixEvHvC5mJ4dbij4Z8\">影响力最大、知名度最高的此类问题当数“千年虫”</a>\"，当初人类在编写数据库时只记录下年份的最后两位数字。于是当 1999 年过去、2000 年来临时，混乱也随之出现。另外还有个相关问题，一部分计算机系统是以 1970 年 1 月 1 日为起点，使用 32 位数字按秒计算日期的。而 32 位数字对应的秒最多只能表达到 2038 年，再往后数位就不够用了。</p><p></p><p>为了解决计算机时钟处理不了一分钟 61 秒的难题，谷歌率先提出了“闰秒涂片”的办法，通过调整内部的网络时间协议 (NTP) 服务器，把闰秒拆分成许多微小的步长变化、分摊到一整天当中。<a href=\"https://engineering.fb.com/2022/07/25/production-engineering/its-time-to-leave-the-leap-second-in-the-past/\">Meta 也采用了类似方法</a>\"，一个闰秒要花 17 个小时来“抹平”。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/21/2128855a38c067f939105702671b0b61.png\" /></p><p></p><p>不同系统的调整方法没有一个统一标准，小网站则更多依赖公共时间服务器，直接停 1 秒或者跳 1 秒，不会把时间切分成时间片；谷歌大厂的这些方法，在调整过程中如果有突发事件，比如某些服务器宕掉了，还是会存在问题。</p><p></p><p>只要下一个闰秒还会出现，互联网企业们就还得继续面临闰秒带来的影响，花费额外精力去消除它，闰秒的那一秒也就成了“服务器不能承受之重”。</p><p></p><p></p><h2>能不能废除，大厂说了不算</h2><p></p><p></p><p>添加闰秒可能引发计算机故障，互联网大厂不堪其扰，因此最近 Meta 的工程博客发布了一篇语气相当强硬的文章，表达了对闰秒调整的不满，认为这是需要被废弃的概念。</p><p></p><p>他们认为闰秒机制本身也没怎么起到预期作用，因为从历史角度来看，地球的自转速度基本没什么变化。Facebook 母公司 Meta 的研究科学家 Ahmad Byagowi 表示，“我们预计，如果只使用国际原子时而不计闰秒，整个精确周期也至少可以保持 2000 年。也许到那时候，我们才需要考虑怎么做修正。”</p><p></p><p>另外，有时候还得减去一秒（负闰秒），尽管这类状况之前还没出现过，但一旦出现，就很可能引发新的问题。Meta 工程师在博客中表示，“这种负闰秒更恐怖，甚至可能对依赖计时器或调度程序的软件造成毁灭性影响。”</p><p></p><p>而据 ZDNet、CNet 媒体报道，谷歌、微软和亚马逊各家科技巨头也赞成 Meta 的提议，纷纷表示<a href=\"https://www.cnet.com/tech/computing/its-time-to-ditch-the-leap-second-the-devastating-effect-of-adding-just-one-second/\">是时候跟闰秒讲拜拜了</a>\"。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/c5/c57a0d74be5deb48db3f141939b8d44f.png\" /></p><p></p><p>Meta 公司的呼吁行动不是第一次，但目前全球还没有一个可以解决闰秒问题的统一方案。2015 年，在日内瓦召开的世界无线电通信大会上，国际电信联盟 (ITU) 将反闰秒的决定推迟到了 2023 年，所以关于“这一秒”的问题可能需要等到明年才能见分晓。</p><p></p><p>但是，闰秒是目前唯一把世界时、原子时联系起来的有效手段，在不同的领域有不同的意义，时间不仅有技术属性，它还社会和文化属性。而且全球时钟系统的管理权掌握在政府和科学家手中，取消闰秒需要经过科学论证，不可能由科技企业单方面说了算。</p><p></p><p>今日好文推荐</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651136062&amp;idx=1&amp;sn=a827b112e0eae77606574965762ab5ef&amp;chksm=bdb8d86d8acf517b12f8a3a07781791e32743453dcf4c193e75624b1b8424f025c0c4e3aa671&amp;scene=21#wechat_redirect\">“今日头条”名字是 AB 测试定的？字节跳动用九年时间打造出了怎样的数据平台</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651135791&amp;idx=1&amp;sn=ddf58246baed69c3765e9cfdf4bb8202&amp;chksm=bdb8e77c8acf6e6ab91b339f02eacff5a00bcf6697088131c0df3a2709b6562280020846735a&amp;scene=21#wechat_redirect\">Node.js 之父着急宣布：Deno 将迎来重大变革，更好地兼容 Node 和 npm 包</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651135365&amp;idx=1&amp;sn=080b0553b239678ba7b571ac7c51d00b&amp;chksm=bdb8e5d68acf6cc01114f604f9095be84aff69541d6ef76c8baf17ba231b04942cbd2d45afda&amp;scene=21#wechat_redirect\">操作系统的“冷板凳”要坐多久？万字长文解读 16 年开源老兵的坚持</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651135097&amp;idx=1&amp;sn=067ff3fa615b8abd5be08d3e105860ce&amp;chksm=bdb8e42a8acf6d3c1d77a9adbb0d6f0ee9e830f40f626080cc64113dc44fb01be2ed86317b1f&amp;scene=21#wechat_redirect\">我认为前端的职责可能需要重新划</a>\"分</p><p></p><p>活动推荐</p><p></p><p>数字化能不能靠花钱买来？中小型企业的数字化转型怎样做才能“不出大错”？为什么说没有正确理念的指引，数字化越努力，管理水平越下降？锁定 InfoQ 视频号 &amp; 霍太稳视频号，一起听听波士顿咨询公司 Platinion 全球董事总经理陈果如何理解数字化转型。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/6d/6d62e433ed30439862e0d50f0e252c17.jpeg\" /></p><p></p>",
    "publish_time": "2022-08-19 15:57:43",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "为什么在 20 多年后，我仍然爱着 PHP 和 JavaScript",
    "url": "https://www.infoq.cn/article/YEImBIBZHJTT9BOXPvLJ",
    "summary": "<p>二十多年过去了，仍然有很多人对PHP和JavaScript情有独钟。</p><p></p><p>在过去的二十年间，从 C 到 Common Lisp，从 <a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651123400&amp;idx=4&amp;sn=343768565bc742dca305e861c1f48e80&amp;chksm=bdb9169b8ace9f8d2064290192681c5714566de4515b3378611e64b9f88294326bfbe9576842&amp;scene=27#wechat_redirect\">Java</a>\" 到 Python，从 C++ 到 TypeScript，我在工作中用过十多种<a href=\"https://qcon.infoq.cn/2022/beijing/track/1288\">编程语言</a>\"，但我却偏偏对那些质量堪忧的语言情有独钟。</p><p></p><p>为什么说质量堪忧？因为 PHP 和 JavaScript 让人诟病的地方确实不少：PHP 是一门类型松散的语言，所以经常孕育出糟糕的代码， JavaScript 和 Node.js 也基本是这样。</p><p></p><p>即便这样，我也依然很喜欢用 PHP 和 JavaScript 来<a href=\"https://qcon.infoq.cn/2022/beijing/track/1301\">编程</a>\"。</p><p></p><h2>Python 很好，但 PHP 确实更容易使用</h2><p></p><p></p><p>PHP 诞生于上世纪九十年代中期，岁数甚至比很多程序员还大。我是从 2000 年初开始接触 PHP 的，当时它刚刚从版本 4 过渡到版本 5。后来，我开始在自己编写的 CodeIgniter ZendFramework 框架中编写应用程序。</p><p></p><p>在我看来，PHP 之所以能够保持长青、多年过去仍无衰老迹象，主要原因就是它被嵌入到了全球各地的新旧应用程序当中、也被嵌入不分老少的开发者头脑当中。有些人用过几年，也有些人用了几十年，PHP 都在他们心中留下了深刻印象。开发者不会消失、编写出的商业代码也没有消失，所以 PHP 依旧健在。而且有趣的是，Python 其实诞生于 1991 年，比 PHP 还要早。而且虽然生命周期更长，但 Python 一直没能达到 PHP 目前的高度。</p><p></p><p>为什么会这样？</p><p></p><p>从个人观点出发，我觉得跟 PHP 相比，<a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651119554&amp;idx=4&amp;sn=7d2b67c0a591d35bbc3659c4e238d002&amp;chksm=bdb927918aceae876adee224bedcb4d4c9ebb7e2eba1edee0ab27abcf7796e3682ba42f5e66d&amp;scene=27#wechat_redirect\">Python </a>\"使用起来要更麻烦。这个问题在 Python 3 中有所改善，但退回 15 年前，Python 还没有 PHP 中开箱即用的那些“花哨功能”（函数）。很多功能必须手动安装，否则就没得用。</p><p></p><p>而且长期贯穿 Python 语言的另一个老大难问题，就是其中的间隔语法。这种由代码间的空格数决定分隔关系的语法让很多人望而生厌。很多程序员喜欢按自己喜欢的方式分隔代码，而且完全受不了编程语言本身在这里动脑筋，而在这点上，<a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651034733&amp;idx=4&amp;sn=f512ec6e1b307f0b319fe4bbbd3f81b5&amp;chksm=bdbe6c3e8ac9e52825e2cc5aae0025b057795bd4cf3c8bcdc87cd43448936eacbdbe69737fe8&amp;scene=27#wechat_redirect\">PHP</a>\" 就做得很好。</p><p></p><h2>PHP 和 JavaScript 哪些方面让人着迷？</h2><p></p><p>此外，PHP 和 JavaScript 还有更多让人着迷的地方，具体包括以下几个方面。</p><p></p><h3>真正干实事的人在用</h3><p></p><p></p><p>怎样理解PHP 和 JavaScript 对真正干实事的人大有用处？也就是说，对于那些能理解商业需求、快速迭代，并有大量开发维护项目经验的人来说，PHP 和 <a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651110072&amp;idx=2&amp;sn=9abbbe792b712da1448218d947c2094c&amp;chksm=bdb942eb8acecbfd1455d3457470be897ea8b94e6d5e43559147f98a56a6da635f49c01417ec&amp;scene=27#wechat_redirect\">JavaScript</a>\" 这两种语言可谓是必需品。</p><p></p><h3>多年的发展让它们和自己的生态一同成长</h3><p></p><p></p><p>PHP 8 可不是你太奶奶用过的 PHP3，而 ECMAScript 12 也不是你太爷爷写过的 JavaScript。这些老古董们所依赖的生态系统可没有原地踏步。像是 CPAN、PECL、npm 这类的工具让其他语言的发展卷了起来。JavaScript 一直以来都是创新的温床，带动了新范式和框架的层出不穷。</p><p></p><h3>它们的质量常被其他因素弥补</h3><p></p><p></p><p>这类“质量堪忧”的编程语言当初可并不是因为它们的优雅而出名的。它们更可能是在速度、部署难度、可延展性、工具、开发社群、框架，或者平台等方面更胜其他竞争者一筹。</p><p></p><p>我更偏爱 PHP 则是因为它的 CGI-bin 模式，它允许分块重构遗留代码库，还提供了简单易用的缓存和扩展方式，而且，开发者也完全不需要担心资源泄露。</p><p></p><h3>更有趣</h3><p></p><p></p><p>这些语言即使是在一些基本问题上都能出状况，这也就意味着用它们编程总会带给人们做实验的感觉。能够用并不优雅的语言写出优雅的代码总会让人享受到成功的满足感。</p><p></p><h3>在这些语言面前众程序员人人平等</h3><p></p><p></p><p>这些语言对<a href=\"https://qcon.infoq.cn/2022/beijing/track/1299\">程序员</a>\"们的背景要求并不严格，即使是一无所知的小白都能在几天内让一个真正的网站跑起来。我当年就是一路从复制粘贴基础代码段一路成长到用 PHP2 和 PHP3 写出完全属于我自己的网站，而现在的我也能够用我积累的经验回报社群，帮助那些刚入门的初学者们，这一点让我感到非常自豪。</p><p>对十二岁小孩或刚从代码新兵训练营中毕业的年轻人所写的程序代码不屑一顾，这种自大并不可取。正是因为这些用户拥有多种教育背景，才让不甚完美的编程语言拥有了更友善、更活跃的社群环境。</p><p></p><h3>没有什么能阻挡你写出好代码</h3><p></p><p></p><p>无论是 PHP、JavaScript还是 Perl，这些语言都提供了函数、变量、类、头等函数等行之有效的工具，有的还额外提供了 trait 和原型式继承。而一个优秀的软件则需要有产品定位、软件设计、命名和设计模式，通过在静态分析或单元测试中强化不变性，为开发者们提供快捷有效的反馈循环，以及一个良好的团队交流环境。这些要素可完全不依赖任何的编程语言。对于 JavaScript 和 PHP 来说，它们提供了可靠的库、实用的静态分析工具，以及出色的 IDE 支持，你甚至会发现，它们在工具方面比许多更“优质”的编程语言还要强大。</p><p></p><h3>我爱遗留代码库</h3><p></p><p></p><p>遗留代码库意味着产品性能的有保障，也意味着我能在其上做出更即时且有效的优化改进。对于我来说，再没有什么事情比和其他用户一起优化一款产品更美好了。</p><p></p><p>原文链接：https://the.scapegoat.dev/why-i-love-php-and-javascript/</p>",
    "publish_time": "2022-08-19 16:02:38",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "云原生容器的未来将何去何从？",
    "url": "https://www.infoq.cn/article/FgogdjehRCRt9QjD4fMG",
    "summary": "<p>近几年，容器的应用率不断提升。然而，当容器在不同的环境应用时，如何提升效率、管理、优化成本及如何拆解大规模部署带来的复杂度问题，才是当下开发者们一直在密切关注的。</p><p>&nbsp;</p><p>于是在 8 月 17 日的华为云大咖说容器专场直播中，沙利文上海研究院院长丁卓文、华为云分布式云原生首席架构师张琦、美图高级技术总监王关胜，便聚焦容器技术现状，共同探讨了在分布式云、多云环境下容器部署的难点、解决方案及未来优化方向。</p><p>&nbsp;</p><p>本期华为云大咖说线上分享会的主题为“容器新势能”，主持人为 InfoQ 主编赵钰莹，共分为专家分享与圆桌共话两大环节，以下为直播内容精编整理。</p><p>&nbsp;</p><p></p><h2>《云原生市场研究报告——容器》（2022）研报解读&nbsp;</h2><p></p><p></p><h4>沙利文上海研究院院长丁卓文</h4><p></p><p>&nbsp;</p><p>容器的应用率不断攀升，给软件开发带来了革命性的变化。那么从技术采用生命周期的视角去看，容器技术是否已经趋近成熟？目前的发展现状、显性特点、技术挑战以及未来演进是怎样的呢？沙利文上海研究院院长丁卓文为大家解读了他们最近新发布的《2022 年云原生市场研究报告容器篇》：</p><p>&nbsp;</p><p>从云原生和容器各自的发展历程看，容器技术是云原生的关键基础，两者的发展相辅相成。</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/9e/10/9e3acc63fd349ea1afa0687dc9361610.png\" /></p><p></p><p>容器降低了部署架构各环节的耦合程度，使应用不受环境限制地在不同计算环境间快速、可靠地运行，具有底层资源占用少、可移植性高、敏捷度高、弹性高的优势，是释放云原生价值的关键基础。</p><p>&nbsp;</p><p>目前容器技术在隔离性、安全性方面还需进一步改进，这也是未来整个行业的发展重点。除此之外，API 统一、架构简化、轻量化、支持不同级别的资源隔离、支持异构环境和异构资源也是容器未来的发展趋势。</p><p><img src=\"https://static001.infoq.cn/resource/image/dy/07/dyy08d6b67de6a594a6cbf0b3ab7be07.png\" /></p><p></p><p>从需求端的视角来看，到目前为止，云原生的概念已逐步明晰，尤其是在华为云在业内首次提出了云原生 2.0 的理念之后，沙利文认为行业将步入新的发展阶段，云的真正价值将迎来更好地释放。进入云原生阶段，企业能够最大程度地利用云原生厂商提供的服务，提高资源的利用率和灵活度，充分的发挥云的价值，更高效、更专注地进行应用的开发和运维，推进业务的发展。</p><p>&nbsp;</p><p>现阶段最为关键的需求场景是多云、混合云的部署，除此之外，容器还能够解决云边协同、统一部署和管理方面的挑战，以及实现离线业务和在线业务的混合部署等。容器的高弹性优势也在赋能企业实现资源的快速部署以及弹性伸缩方面得到了非常好的体现。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/82/ed/82a3150027a4c8f013yy61a4f2aayyed.png\" /></p><p></p><p>从供给端的视角出发，综合云服务厂商与专业云计算厂商两类厂商在合力推动云原生及容器行业的发展。其中，综合云服务厂商拥有的资源非常丰富，凭借自身公有云业务的一些优势能够加速容器的市场教育。而专业的云计算厂商专注于私有云方面的深耕，通过精细的定制化服务能够提高容器在私有云的一些渗透率。</p><p>&nbsp;</p><p>如今各个厂商都在非常积极地拥抱开源生态，国内云原生开源生态逐渐壮大。报告中，沙利文从应用、产品和生态三个维度构建了云服务厂商容器的综合竞争力体系，评价主流厂商的竞争优势和壁垒，其中华为云的各项评分的表现都较为出色。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/0c/0c/0cf14a7a5d201bd79d827f045ef85b0c.png\" /></p><p></p><p>值得一提的是，华为云联合云原生技术基金会 CNCF、中国信通院一同成立了创原会，从标准、技术、实践等多个维度共同推动了云原生生态的完善，加速了云原生和行业、业务的融合，促进了产业发展。</p><p>&nbsp;</p><p></p><h2>《泛在新范式：分布式云原生 UCS》</h2><p></p><p></p><h4>华为云分布式云原生首席架构师张琦</h4><p></p><p>&nbsp;</p><p>云原生正在走向分布式，跨云跨地域统一协同治理，保证一致应用体验等新的需求日渐突出，这也需要容器技术发挥新的势能。华为云分布式云原生首席架构师张琦对此容器现状有这样的解读：</p><p>&nbsp;</p><p>据 Gartner 预测，到 2025 年超过 50% 的组织将在其选择的地点使用分布式云，从而实现转型业务模式。另外一个趋势是，云原生的基础设施发展进入了高速通道，未来4年市场规模会呈现 5 倍增长。</p><p>&nbsp;</p><p>分布式云把云计算能力延伸到不同位置，而云原生技术让用户的业务发展地更加敏捷，未来几年，这两个技术的结合将是主流。</p><p>&nbsp;</p><p>从云原生的发展来看，（下图）时间轴的原点是在 2000 年，当时的基础设施还是以非虚拟化的硬件为主，2001 年出现了以 vmWare 为首的虚拟化技术。然后到 AWS、PaaS 的出现，我们可以看到三个发展趋势：</p><p>业务的部署单元越来越敏捷；技术厂商们逐渐开源，发展“开源社区”以作为技术的领跑者；CNCF社区逐渐成为云原生技术发展的主要推动组织。</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/17/5b/1777825c09d9ee214e9cc50c3409115b.png\" /></p><p></p><p>从企业的视角来看其对分布式化业务的诉求，政府、金融、汽车这三个行业对分布式云、边缘、多云的诉求越来越强烈。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/70/b3/7091e33549e6fb85a796a136e9f8e3b3.png\" /></p><p></p><p>从公共云的角度出发，华为云构建了一个覆盖各个层次的分布式云的基础设施。华为云把不同的区域进行划分，从核心区域到业务现场，包括核心区域的大云、中心云是分成不同的 Region 的。从基础设施的角度来看，华为云是从上到下在多层次进行了不同层次，满足不同业务要求、业务类型的基础设施的覆盖。此外，华为云还构建了一朵分布式云，全部互通的网络，一致的运行环境，一致的管理体系。</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/c0/yy/c0af022f49c0a8bf18c41d3d40b5f5yy.png\" /></p><p></p><p>另外，传统的云原生强调地更多是单数据中心的，甚至强调的是 Kuberentes 集群内的，是基于 Kuberentes 集群建立的上层生态，这个时候如果加入了分布式云，往往会存在以下问题：</p><p>云原生体验：分布式系统被设施割裂，分层管理，手动分发，缺乏全局管理视图；算力：各基础设施算力独立供给，难以协同；流量 ：与业务分离管理，难以与业务分布协同，难以按业务需求分配流量；数据 ：应用与数据割裂，分层管理，阻碍应用的弹性伸缩、迁移等。</p><p>&nbsp;</p><p>为了解决这些问题，华为云构建了 UCS 服务，从应用的角度对整个分布式云进行建模，从应用的角度向用户屏蔽掉分布式云所引入新的复杂性。从而达到：</p><p>新体验：全局统一，无处不在，随时可用；应用+算力：随时、随地提供应用所需算力资源；应用+流量：实时、跨域、按需调配应用访问流量；应用+数据：全业务一体化迁移、容灾、弹性。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/41/7d/417ec57a0aa0c1395c274f305f29927d.png\" /></p><p></p><p>下面，我们对这个解决方案进行技术拆解，首先是保证分布式云中的生态一致性。Kuberentes 已经打了很好的基础，基于此，华为云以集中式的方式来管理各个云里面云原生的生态，实现云原生的服务能在中心“一次上架、全域发放”，能跨域部署，并且保证其运行环境、运行方式、运行行为都是一致的。</p><p><img src=\"https://static001.infoq.cn/resource/image/69/04/6910f99e2d9b5ee43e56bed1e672ca04.png\" /></p><p></p><p>此外，为了让应用本身能够跨云调度，自动调度，华为云基于 UCS 结合 Karmad 开源服务，进行了一个工作负载的中心式管理。在这个过程中，实现了：</p><p>按权重部署：根据不同集群的权重设置自动计算和分发实例。根据提供商和地域进行条件部署：通过集群 label 进行组合条件的设置，并根据条件的满足情况进行实例分发。容器从故障集群中自动迁移：当集群发生故障时，位于该集群中的应用实例可自动迁移至正常集群中。跨集群弹性伸缩：当需要对应用进行整体伸缩时，可根据不同集群的权重进行实例分配，实现用户优先在指定云上创建新资源的目的。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/49/e6/4962436b64b8208fc476e548165f26e6.png\" /></p><p></p><p>第三，业务的跨云协同，这个过程中实现了：</p><p>流量就近分发：用户接入流量就近发送至最合适的后端进行处理；服务网关进行入云流量治理：服务网关部署于每个分布式云成员的流量入口处。接 收网格控制面的配置，提供跨 Region、 多云混合云、多种基础设施的服务后端实例上的流量管理。包括但不限于：基于权 重和内容的流量切分、灰度、故障倒换、 熔断限流等；跨云跨集群的容器网络互通：通过统一的容器网络编排和服务发现能力，实现跨云跨集群扁平化互通能力，达到业务体验一致和通讯安全可靠的目标 ；全局流量治理中心：集中式管理位于分布式云中各集群上的东西、南北向流量治理策略，实现全局服务流量治理。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/ec/e5/ecea1d1a48d09690f17c37d1434842e5.png\" /></p><p></p><p>除了以上网络方面的问题，实际上，数据是分布式云中面临的最大的难题，因为网络可以打通，应用可以跨地域的调度和部署，但现在大多企业级应用都不是简单的无状态的应用，都是有数据的，当应用实例跨数据中心迁移、弹性伸缩，数据该怎么去处理？华为云 UCS 解决了这个问题：</p><p>数据跟随应用流转：围绕云原生应用构建自动化的应用克隆、应用容灾和应用迁移能力，跨云数据随应用流转。有状态应用跨云弹性：数据随应用同步复制，实现应用在分布式基础设施上的弹性扩容。多层次数据联动：存储层、容器层、中间件层等不同层次数据复制能力随应用场景实时联动，支撑应用容灾、扩容、迁移。</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/d6/0c/d698e05d83a7f322926c69c66c28c10c.png\" /></p><p></p><p>华为云 UCS 的技术优势在慧通差旅公司的业务实践中得到了具体表现，&nbsp;慧通差旅的主营业务是为大型企业提供差旅服务。该企业面临的一个问题是很难把所有的差旅数据全部迁移上云，另外该企业有自己的数据合规性要求，要求部分业务需要部署在本地机房中。华为云 UCS 提供了如下解决方案，完美地解决了该企业的问题：</p><p>使能大型企业级 SaaS 系统服务化交付：在复杂企业级 SaaS 系统的部署中，通过 UCS 支持其涉及企业核心数据资产的部分在自有机房而涉及互联网服务化的部分部署在公有云中，服务提供商可对整体分布式部署的业务系统进行统一的服务化交付和运维；远程统一维护：通过 UCS 的统一管理能力，以互联网的快速 DevOps 交付模式，应对各类企业的多样化诉求，降低维护成本。运维成本由原来的 5 个人维护 10 个客户的运维提升为 5 个人可支撑 100 个客户的集中运维，实现人效 10 倍提升；统一生态建设：通过 UCS 提供的云原生服务中心，构建丰富的企业应用生态，实现应用的统一分发和部署；多云统一协同：通过跨云流量治理，协同异构业务架构，实现跨云远程，统一治理。</p><p>&nbsp;</p><p></p><h2>《美图公司大规模容器化部署最佳实践》</h2><p></p><p></p><h4>美图公司高级技术总监王关胜</h4><p></p><p>&nbsp;</p><p>分布式云是一个难题，“大规模”同样也是。任何技术只要规模起来了，总会出现各种各样的问题，美图曾历时三年完成了全面容器化，这期间踩过很多坑，总结了很多实战经验。作为华为云的合作伙伴，美图在容器技术领域有着十分深度的探索。美图公司高级技术总监王关胜带来了美图公司大规模容器化部署实践分享：</p><p>&nbsp;</p><p>2019 年，美图公司 CEO 亲自参与上云决策，整个公司所有业务线都配合运维一起工作，当时华为云为了帮助美图完成上云迁移，也投入了比较大的精力。最终把全部业务搬到云上只用了 7 个月的时间，之后，完成云上容灾仅耗时 1.5 个月，完成成本再优化仅耗时 1 个月。回顾过去的上云其实对迁云速度、故障成本控制做的都很好，主要来源于两大助力：</p><p>1. 华为云的容器服务：CCE、CCI 等稳定的 Kuberentes 基础设施；</p><p>2. 美图 Matrix：</p><p>容器化：95% 以上的业务 已完成容器化；工具平台：完善的 Matrix 平台，接入第三方 Kuberentes 的成本极低。</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/d5/64/d54367a91bcf6ac8b419603b19043964.png\" /></p><p></p><p>在美图公司上云之前，2017 年就自研了一套完整的基于 Kuberentes 的容器云平台—— Matrix，并实现了 95% 业务的容器化，这为美图公司的上云之旅提供了极大助力。目前 Matrix 便捷地接入了华为云第三方基础设施。</p><p>&nbsp;</p><p>美图容器化平台 Matrix 的设计主要基于 CI、CD、CO 三者的莫比乌斯环，重点思考应用或服务在全生命周期中的行为关键点，结合应用部署的十二因子及 CNCF 中的开源组件完成平台构建。整个架构拓扑也是相对比较简单的，除了 Matrix UI 之外的组件基本都是从 CNCF 里面基于开源套件来做的。</p><p>&nbsp;</p><p>CI 的工具主要用的是 Jenkins 和 Gitlab，至于镜像仓库美图早期用的是 HARBOR，而网络方案采用的是 CALICO。</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/0d/ae/0df4c7becbd3710738170b67613808ae.png\" /></p><p></p><p>除了这些开源套件外，美图的自研主要发力在上层系统—— Matrix UI 层面，美图对于 Matrix 的期待就是做一个“ALL In One”的平台，让 DEV 和 OBS 角色都能在这里面做他们自己关心的事情。</p><p>&nbsp;</p><p>Matrix 主要有三大块功能，第一块是平台基础服务，比如说像集群管理、权限编排都是在这一块的。第二块是，平台附加服务，比如说弹性伸缩、计费、利用率和负载均衡，其中负载均衡目前美图已经朝 ServiceMesh 方向进行演进。第三块是平台中间件，包括服务治理，服务观测、日志等都做在了平台里，为的就是给开发者提供“一致的”体验。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/3c/2b/3c8ac306d16853d8c1441b01798a6b2b.png\" /></p><p></p><p>其实美图做的事情也很简单，就是对部署模块做了增强，如弹性伸缩、负载均衡、弹性扩容等。像负载均衡、服务编排、集群管理，都是在开源组件上做的二次开发，它再对外提供 API，提供统一的入口体验。Matrix UI 的设计思路都是围绕着“提供一个非常强大的自助化能力\"出发的。</p><p>&nbsp;</p><p>当美图完成整个云上部署时，就形成了如下架构。美图跟云厂商之间各自负责各自不同的部分。这其中，像强大的 Kuberentes 能力都是华为云提供的，美图只负责上层集成和上层应用的事情，这种模式可以节省许多人力成本。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/5b/79/5b962yy38d0967ae6b74f32a31f3af79.png\" /></p><p></p><p>除此之外，美图在上云之后还发生了其他演变。最主要的是在负载均衡层面的演变。美图早期主要用的是 Nginx-Control，后来就把 Nginx-Control 全部改成了 Ingress-Control，然后最近美图正在关注 Service Mesh，从去年开始研究这个方向，Mesh 的方向非常多，但这对于美图来说改造难度并不小，但也都在努力寻求解决方案。美图在 Ingress 的控制面和数据面也有自己独有的探索，比如在控制面采用双主模式部署，确保同 Region 内不同 AZ 里的流量能够保持高可用。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/05/13/0562d8f7193d3f09111d1ffc63437a13.png\" /></p><p></p><p>美图上云后，华为云依旧提供了许多助力。比如说 CCI 服务由于少了 VM 这一层，弹性调度及服务启动的时间大大降低，华为云很好地帮助美图解决算法快速弹性扩容的能力。像美图 AI 开放平台的部分场景算法需要在云端处理，如果把这种资源池接入进来，可以非常便捷地做快速扩容，华为云 CCI 能力的接入也丰富了美图整体应用层面的调度。</p><p>&nbsp;</p><p>当然，美图上云之后，因为有自动化的平台，以及应用部署评估可能不是很精确，也会造成云上成本增长，需要及时做成本控制，为了解决此问题，美图基于 FinOps 理念做了成本决策系统，现在已经可以清楚地看到公有云、第三方更精细化的成本等，现在成本可以通过不同的算法分摊到美图公司的利润中心，实现了精准的成本把控。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/2c/ea/2c5e14f0ec35baaa22c76391e4df51ea.png\" /></p><p></p><p></p><h2>圆桌畅谈：云原生容器的未来将何去何从？</h2><p></p><p></p><p>Q：目前的云原生容器技术已经进入商用拓展期，这是不是意味着，容器技术已经完全成熟？容器技术的下一个阶段在哪？</p><p>&nbsp;</p><p>丁卓文：进入商用拓展期，更多地反映出来的是容器产品的商业形态以及整个市场的趋势的确定，产品在市场上的渗透率在明显提升，所以并不能说完全等同于容器技术成熟度的确认。从商用的角度来看，容器技术的下一个阶段应该是会在加强不同领域的应用能力，能够更好的服务企业包括用户的需求，比如说云边协同、多云混合等等。而在技术层面，演进的核心应该是能够怎么样达到安全又好用。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;</p><p>张琦：从技术的角度上来看，容器管理平台的发展是呈现两个方向的。一个方向是“把它做深”，越来越多的云厂商开始把容器技术跟我下层基础设施的一些技术做一些更深度的结合，比如说我可以把它做到硬件卡里做一些卸载，又比如说我可以做到跟底层数据中心网络的直通。当然了，在这个过程中，为传统的数据中心的基础设施也带来了非常大的挑战，比如容器弹性伸缩的速度、创建和销毁的速度实际上跟原来的虚机完全不是一个量级的，对数据中心底层的基础设施的建设带来了新的挑战。</p><p>&nbsp;</p><p>另外一个发展方向是“把它做广”，容器技术或者容器云、容器平台这样的一些技术是越来越多的覆盖各种不同的行业，覆盖各种不同的场景的。比如说像我们前些年可能更多的看到的容器技术是用在企业级应用、互联网应用这样的数据中心里的，我们这些年看到了很多新兴的应用场景，像边缘，甚至我们把它放在车里面，放在高速公路的收费站上面，甚至把它放在卫星上面，这都是我们这几年做的一些探索，而且目前已经有大量创新型的场景落地，甚至实现了商用。</p><p>&nbsp;</p><p>王关胜：我个人觉得目前容器技术到了一个普惠的阶段，在云原生领域投入的话我们总会有一些不错的回报。我们虽然是觉得像 Linux Namespace 和 CGroup 这种技术是比较成熟的，但是在落地的一些场景包括应用场景当中，也有一些不足的点。比如说资源隔离和安全性这一块，当然，这些也是我们一直在尝试解决的事情。</p><p>&nbsp;</p><p>&nbsp;Q：边缘计算被称为云原生的新边界，容器技术将发挥哪些新的势能？</p><p>&nbsp;&nbsp;&nbsp;</p><p>丁卓文：目前容器技术在边缘计算上的应用主要是解决两个方面的问题，一个是云和边的统一运维，另一是提高边端的资源利用率。首先云边协同肯定是未来整体大的发展趋势，现在落地的很多应用规模越来越大，用户的需求也越来越复杂，企业的业务也变得越来越丰富，在这个过程里容器技术，与不同的技术结合以满足越来越复杂的需求。另外，容器技术在统一运维管控的方面的能力，也会在各大厂商包括华为云在内的产品迭代过程中，变得更加稳定可靠。</p><p>&nbsp;</p><p>张琦：我们边缘计算更多的是在很多场景下也看到它是跟AI相结合的，现在的发展趋势主要是两个，一个是“把 AI 做得更小”，把它需要用到的资源做得更少，可以直接在边缘侧进行 AI 的运算、AI 的推理，所有业务都可以直接在边缘进行闭环。另一个发展方向是云边协同的 AI，比如说边缘侧进行 AI 运算的时候，用很少的资源已经可以解决掉 80% 的问题，另外 20% 的问题如果解决不了可以自动放回云端，让云端协同解决这些问题。</p><p>&nbsp;</p><p>王关胜：从技术角度讲，容器技术在边缘计算落地的场景，其实主要的红利是易分发，云原生衍生出来的基础设施其实有它自己的优势。目前市面上有两种比较流行的边缘计算解决方案，一种是将原本中心化的计算下发到边缘，另一种是靠近用户侧的运算，资源分配、就近处理，提升往返中心链路的成本与速度。可预见的，未来基于这两种解决方案的技术还将有更细化地演进。</p><p>&nbsp;&nbsp;</p><p>Q：Kuberentes 难用问题在未来会不会彻底被解决掉？</p><p>&nbsp;</p><p>丁卓文：应该是可以解决掉的，大概通过两种方式。一个是企业可以直接使用云厂商提供的一些产品，云厂商比如说华为云其实拥有非常专业的团队，也在不同的细分应用场景有非常好的实践。而另外一个方式就是企业利用开源工具来简化操作的复杂性。</p><p>&nbsp;</p><p>张琦：Kuberentes 作为一个云原生容器集群的管理平台，它的功能是非常强大的，在功能强大的同时也说明它对于云原生应用的抽象层次是比较高的，所以如果想从 Kuberentes 社区来彻底解决这个问题是比较困难的，所以这个责任或者这个职责就会落到产品提供商的身上。华为云作为一个商用的 Kuberentes 产品的一个提供商，我们一直在致力于把 Kuberentes 这样的技术进行更好的产品化，一方面是在用户体验上面提供更友好的用户体验，另外一方面我们也在符合或者跟这种生态标准的一致性一致的情况下，我们也会提供各种各样的培训，去降低用户的使用门槛。另外一方面，如果说从纯技术的角度来考虑，目前社区里面也有一些技术的发展方向，比如可以通过 Kuberentes 去定义自己的 CRD。总之，在解决 Kuberentes 难用问题上，厂商和社区都在努力。</p><p>&nbsp;</p><p>王关胜：我个人觉得难用和难入手是两个事情，Kuberentes 其实是属于后者，越通用越灵活的东西，一般使用起来成本就越大，像 Kuberentes 这种系统并不是面向终端用户的，如果终端用户直接使用的话确实会觉得很难用。想要解决难用问题、给出“一键式”解决方案，那就需要有这种平台团队来做这件事情，把这些做集成，甚至对终端用户来说相当于做到去 Kuberentes 化。</p><p></p><p></p><h2>圆桌问诊：开发者们关心的问题</h2><p></p><p>&nbsp;</p><p>Q：多云多集群管理下，用户面临的主要挑战是什么&nbsp;？多云多集群会是未来一个很重要的趋势吗？当前什么样的企业会实际部署多云多集群的状态？</p><p>&nbsp;</p><p>张琦：在多云、多集群的使用环境下，其实用户面临的挑战还是比较多的，按照我们之前的项目经验来看，用户面临的挑战主要是以下几方面：</p><p>管理层面：在这个层面面临的主要挑战首先就是多云多集群的接入，怎么把处于不同位置、不同网络中的多集群接入到一起？如何以一个统一的安全合规的策略去管理多集群，从而保证业务不管是部署到哪里都是安全的？运维层面：如何把不同的地理位置的多集群和业务都在一个中心点上统一运维起来？业务协同：如何让业务系统起来？数据面的管理如何做？</p><p>&nbsp;</p><p>我们现在看到是越来越多的企业会选择多云多集群的技术，目前以大型政企为主，互联网公司也有一些，但是它的多云多集群的性质其实是不太一样的。比如说我们看到更多的互联网公司通常情况下都不会用到单个公有云厂家提供的云，都是多云的，甚至是说在一些视频类的互联网厂家不仅仅是多云，还要管理 CDN 这种边缘的业务，它的边缘是网络边缘不是现场边缘，对于互联网公司来说多云诉求还是比较强烈的。</p><p>&nbsp;</p><p>Q2：&nbsp;在瞬时的高并发场景中，如何提高 Kuberentes 集群的整体稳定性？</p><p>&nbsp;</p><p>王关胜：像我们早期建设 Matrix 这套系统的时候，我们既要做上层集成和统一的事情，又要做底层 Kuberentes 研究，投入的力量就会比较大。但现在我们把这一块全部交给云厂商了，所以我们目前更多地是从使用角度去看待这个问题。</p><p>&nbsp;</p><p>针对瞬间突发的一些场景，我们增加扩容面，减低等待时间，以成本换可用性。对于一些有规律的业务场景，我们提前做一些预扩容。此外，我们对服务做了分级，比如说核心服务到非核心服务，级别分别是从 0 到 5，不同级别我们在资源调度上也可以做一定的区分，我们保证一些核心服务能够有抢占的能力，保证整体的稳定性，其实这些手段都是我们过去的一些尝试，还不如云厂现在的能力。所以现在最快捷的解决方案，就是把问题抛给像华为云这样的云厂商。</p><p>&nbsp;</p><p>Q3：企业当前对于容器的利用规模大概是呈现什么样的趋势，这样的趋势给开发者和企业发出了什么样的信号呢？</p><p>&nbsp;</p><p>丁卓文：目前所有的研究中都显示，企业对于容器的利用规模在呈现一个持续扩大的趋势，无论是从广度还是深度上。广度上，许多行业场景其实都已经覆盖到了；深度上，在企业不同业务场景中，容器技术都会被利用到，容器技术正在与业务场景产生一个深度的结合。</p><p>&nbsp;</p><p>但无论是容器还是云原生，其实都离不开开源，我们能看到的，当下的云厂商和开源社区贡献者都在为完善开源生态做出努力，相关产品也在变得越来越好用，整个行业的发展呈现出一个非常健康的发展态势。</p><p></p><p>编者按：</p><p>&nbsp;</p><p>经过多年探索，华为云已打造云容器引擎CCE、Serverless K8s服务云容器实例CCI、智能边缘平台、多云容器平台等8大核心容器产品，并已形成以容器为核心构建的“云原生裸金属容器、云原生高性能计算、云原生混合云、云原生边缘计算”四大解决方案，能够满足企业业务在超大规模、极致性能、极速弹性、分布式架构、在线/离线混合部署等方面的诉求，有效支撑资管、行情、消金、电商、直播等行业解决方案的构建。</p><p>&nbsp;</p><p>华为云在云原生容器领域持续技术创新、赋能产业，其容器技术与解决方案已经服务众多华为云客户，尤其是帮助众多互联网企业实现了应用敏捷创新、业务灵活部署，如新浪新闻、蘑菇街、美图。截至目前，已有80%的中国Top50互联网企业选择华为云。“H（华为云）+X”的多云部署模式也越来越受到企业客户的认可与选择。未来，华为云将持续在云原生领域进行技术创新，探索落地应用，持续赋能互联网企业创新增长，共创云上新价值。</p>",
    "publish_time": "2022-08-19 17:59:51",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "2800亿《芯片法案》，对中国芯片产业影响几何？",
    "url": "https://www.infoq.cn/article/SS8RFtU37FI6Ay7l1aVK",
    "summary": "<p>全球芯片产业变局不断。近期一个不容忽视的大事件是，8月9日，美总统拜登正式签署了《芯片和科学法案》（以下简称“芯片法案”）。</p><p></p><h3>美国签署《芯片和科学法案》</h3><p></p><p></p><p>《芯片法案》的整体拨款金额高达2800亿美元。《纽约时报》称，这项庞大法案是“数十年来美国政府对产业政策的最重大干预”。</p><p></p><p>《芯片法案》总共1000多页，主要包括三部分内容：</p><p></p><p>一是“芯片+”（CHIPS-plus）法案，将为美国半导体研发、制造和劳动力提供527亿美元支持，其中390亿美元用于半导体制造业激励措施，供美国的芯片制造商们建设工厂生产芯片组件等，此外，对于在美国设立工厂的企业将得到25%的税收减免；包括拨款5亿美元用于国际间安全通信计划、拨款2亿美元用于工人培训等计划。</p><p></p><p>二是《研发、竞争和创新法》，将在10年内投资超过2000亿美元加强人工智能、机器人技术、量子计算等技术领域研究及其他技术研发活动。同时投入100亿美元在全国建立20个“区域技术中心”，投入数十亿美元促进基础研究及先进半导体制造能力等。</p><p></p><p>三是，“2022年最高法院安全资金法案”。</p><p></p><p>拜登在签字仪式上强调，“目前美国只有10%的半导体在本土生产，我们需要本土化芯片制造，以降低日常成本创造就业机会”。据悉，包括英特尔、美光、惠普和AMD等公司的高层出席了签署仪式。</p><p></p><p>《芯片法案》中规定的多项具有排斥性的产业扶植政策被认为是特别针对中国芯片产业。一条附加条款显示，禁止接受资金补助企业在对美国构成国家完全威胁的国家建造或扩大先进制程晶圆厂。</p><p></p><p>法案明确要求获得联邦资金补贴的芯片企业，在未来10年内不得扩大在包括中国和俄罗斯在内的国家的先进芯片制造（其中先进芯片被解释为小于28纳米的芯片），禁止在中国大陆新建或扩建先进制程的半导体工厂。从法案生效开始，受补贴的芯片企业将不能在中国继续增产先进制程芯片，且未来美国针对芯片企业对华投资的限制或将增加。</p><p></p><h3>中国半导体行业协会声明</h3><p></p><p>8月17日，中国半导体行业协会针对美国出台的《2022年芯片与科学法》发表了一份声明。</p><p></p><p>声明中，中国半导体行业协会表示，8月9日，拜登政府正式签署美国参众两院通过的《2022年芯片与科学法》。该法一方面试图通过提供巨额补贴来增强美国在芯片等领域的优势，另一方面，包含了限制接受补贴的企业在所谓“特定国家”扩大或新建先进半导体制造产能的条款，限期为十年。相关条款与全球半导体产业多年来形成的公平、开放、非歧视的共识背道而驰，违反了美国参与建立的世界半导体理事会(WSC)章程精神。</p><p></p><p>中国半导体行业协会对此表示严重关切和坚决反对。希望全球半导体产业遵循自由、开放、公平和非歧视原则，创造稳定、健康的市场环境，任何与此背道而驰的做法，都将损害全球半导体产业的利益，也必将给其自身带来损害。我们在此敦促美国政府尊重行业共识，及时纠正错误做法，停止给全球半导体产业界正常的交流合作人为设置障碍。</p><p></p><p>此外，中国贸促会、中国国际商会指出，《芯片与科学法案》中“2022年芯片法案”章节规定，将采取给美本土芯片行业提供巨额补贴，给半导体和设备制造提供投资税收抵免等一系列措施，以鼓励企业在美国建厂。这些条款歧视性对待部分外国企业，凸显美意在动用政府力量强行改变半导体领域的国际分工格局，损害了包括中美企业在内的世界各国企业的利益。</p>",
    "publish_time": "2022-08-19 18:34:38",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]