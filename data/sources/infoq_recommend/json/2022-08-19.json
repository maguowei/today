[
  {
    "title": "递归无服务器函数是云端最大的计费风险？",
    "url": "https://www.infoq.cn/article/NIKdzlRr6VqIjFFZgseM",
    "summary": "<p>最近，谷歌云内容主管Forrest Brazeal表示，对于开发者来说，无服务器函数是云端最大的计费风险，因为我们没有简单的方法来防止递归调用，而且它们几乎可以无限地在所有的云提供商中扩散。</p><p>&nbsp;</p><p>Brazeal提到了云开发者撰写的一些文章，这些文章描述了那些导致无服务器函数“失控”和巨额账单的错误。其中，Cloudsoft工程副总裁Aled Sage报告了亚马逊云科技的一个Lambda巨额账单的例子，Tom Wright描述了发生在Azure上一个可怕的无服务器事故，Milkie Way创始人Sudeep Chauhan解释了他如何在谷歌云上测试Firebase和Cloud Run花费了72000美元。Brazeal警告说：</p><p>&nbsp;</p><p></p><blockquote>这一切发生得太快了。它就像是云灾难的山洪暴发。这不只是忘记了一个GPU实例，导致每小时多花费几美元的成本，而是你睡觉之前的账单是5没有，等你一觉醒来变成了5万美元——这一切都发生在你的预算有机会发出警报之前。</blockquote><p></p><p>&nbsp;</p><p>在讨论谷歌云、亚马逊云科技和Azure的具体限制和保护措施时，作者认为它们没有提供安全的方法来防范风险，因为这些供应商都还没有完全保护开发者的机制。Brazeal补充说：</p><p>&nbsp;</p><p></p><blockquote>要保护自己不在一些资源（如VM）上花太多的钱是很容易的，但现在还没有什么好的方法来保证你不会被来自函数的意外账单惊到……</blockquote><p></p><p>&nbsp;</p><p>亚马逊云科技有一个页面专门介绍了导致Lambda函数计费问题的递归反模式，并承认：</p><p>&nbsp;</p><p></p><blockquote>大多数编程语言都存在无限循环的可能性，而这种反模式在无服务器应用程序中会消耗更多的资源。</blockquote><p></p><p>&nbsp;</p><p>对函数进行并发性限制可能会有所帮助，但这会给开发人员造成一种错误的安全感假象：它可以在递归分叉式场景（无限的函数扩展）中提供保护，但不能避免几个小时内的大笔费用，例如使用相同的S3桶作为函数的源和目标。Qube Cinema技术架构师Sudhir Jonathan去年报道过这样的案例。亚马逊云科技首席开发者James Beswick写了一篇关于如何使用Amazon S3和AWS Lambda避免递归调用的文章，他解释说：</p><p>&nbsp;</p><p></p><blockquote>如果意外触发递归调用，可以按下Lambda控制台上的“Throttle”按钮将函数并发性降至零并中断递归循环。</blockquote><p></p><p>&nbsp;</p><p>正如云顾问、亚马逊云科技无服务器英雄（Serverless Hero）Yan Cui最近所说的那样，虽然有很多可能的优化措施来节省使用Lambda的成本，但并没有提供自动断路器。在云供应商可能引入的缓解措施中，Brazeal建议采用近实时计费方式，对云计费设置上限，并更好地自动化异常检测和递归工作负载修复。</p><p>&nbsp;</p><p>The Duckbill Group云经济学家Corey Quinn在他的新闻稿中评论道：</p><p>&nbsp;</p><p></p><blockquote>事实上，甲骨文“对免费层非常认真，除非用户确定要升级，否则不会让用户增加费用。”这是他们平台最棒的地方之一。</blockquote><p></p><p>&nbsp;</p><p>去年，时任A Cloud Guru内容和社区总监的Brazeal强调了亚马逊云科技缺少沙盒账户和硬收费限制。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/08/recursive-serverless-functions/\">Are Recursive Serverless Functions the Biggest Billing Risk on the Cloud?</a>\"</p><p>&nbsp;</p>",
    "publish_time": "2022-08-19 09:09:18",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "JetBrains IntelliJ IDEA 2022.2使用Java 17运行时",
    "url": "https://www.infoq.cn/article/mZbskCPmQDJWg1HrDjbL",
    "summary": "<p>JetBrains<a href=\"https://blog.jetbrains.com/idea/2022/07/intellij-idea-2022-2/\">发布</a>\"了IntelliJ IDEA 2022.2，支持Java 17和最新的语言和框架，如Scala、Kotlin、Spring 6和Spring Boot 3。</p><p>&nbsp;</p><p>这个新版本使用了JetBrains Runtime 17（OpenJDK 17的一个分支），性能得到了提升，比如渲染速度更快，这样归功于<a href=\"https://developer.apple.com/metal/\">Metal API</a>\"和改进的Vector API向量计算。<a href=\"https://support.apple.com/en-gb/guide/voiceover-guide/welcome/web\">VoiceOver屏幕阅读器</a>\"增强了macOS平台的可访问性，并且通过使用最新的OpenJDK LTS改进了安全性。</p><p>&nbsp;</p><p>这个版本还包含了对Java检查和代码补全的各种改进。Java检查现在可以识别Charset的name()和toString()方法，并在变量隐藏了字段和捕获不必要的Object.requireNonNullElse调用时发出警告。各种JUnit检查被转换为JVM检查，以支持其他语言，如Kotlin。代码补全现在支持.class字面量。</p><p>&nbsp;</p><p>现在可以支持Kotlin 1.7.0的特性，IntelliJ改进了对绝对不可空类型的渲染。调试器现在集成了数据流分析（<a href=\"https://www.jetbrains.com/help/idea/analyzing-data-flow.html\">Data Flow Analysis</a>\"，功能在Java中已经可用）功能，用于提示哪些条件为true以及将执行哪些分支。从这个版本开始，在项目设置中定义的Kotlin编译器版本将用于消除本地和CI构建平台之间的不一致。代码高亮显示、代码补全和Find Usage的性能也得到了提升。</p><p>&nbsp;</p><p>Scala 3的特性，比如无选项提取器、类型Lambda、类型级编译器intrinsic、多态函数，现在都得到了支持。现在，当匿名函数中使用了return关键字（导致部分代码不会被执行）或者当私有或类参数覆盖了超类变量时，IntelliJ会发出警告。当编译器选项-Xlint:nonlocal-return和-Xlint:private-shadow被激活时，就会启用这些警告。Safe Delete操作（允许从定义和调用中删除元素）现在支持类型参数。单独行操作的Put参数可用于将逗号分隔的列表分隔成单独的行。</p><p>&nbsp;</p><p>IntelliJ现在为Groovy 4中的<a href=\"https://groovy-lang.org/using-ginq.html#_ginq_a_k_a_groovy_integrated_query\">Groovy集成查询</a>\"（GINQ）提供了语法高亮显示、代码补全和检查功能。</p><p>&nbsp;</p><p>这个版本包含了各种用户体验改进，比如Run Current File，用于运行或调试单个文件，IDE会自动选择正确的运行配置。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/10/100432fc6d9152aa45b23aafa57f7bd7.png\" /></p><p></p><p>用户可以用新加入的键盘快捷键Alt+Shift+句点和Alt+Shift+逗号增加或减少字体大小。当前字体大小附带恢复到默认大小的选项。</p><p>&nbsp;</p><p>现在可以配置检查面板在编辑器中出现的方式，编辑器下拉菜单中有高亮显示，不需要修改严重级别。</p><p>&nbsp;</p><p>现在可以通过按下代码自动补全弹出窗口中的三个点来打开代码自动补全设置。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/43/43e880049761d0ce1a898dcdb94dc90c.png\" /></p><p></p><p>&nbsp;</p><p>在设置-&gt;编辑器-&gt;智能按键中的关闭块注释设置选项现在可以用来禁用自动关闭块注释。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1e/1e349452d00724404272efc8e5ba572b.png\" /></p><p></p><p>现在可以通过按下Alt+Insert或右键弹出框为Markdown文件生成目录表。</p><p>&nbsp;</p><p>在<a href=\"https://www.testcontainers.org/\">Testcontainer</a>\"测试中，Docker镜像的镜像补全功能允许用户选择Docker镜像的名称和版本。新的Copy Docker Image操作会将镜像保存到一个文件中，然后将其从一个Docker守护进程推到另一个Docker守护进程。现在，IntelliJ IDEA在重启后会自动连接到Docker守护进程，这个可以在高级设置-&gt;Docker中禁用。</p><p>&nbsp;</p><p>前面提到的改进在所有的IntelliJ IDEA版本中可用，以下是IntelliJ IDEA Ultimate版本独有的特性。</p><p>&nbsp;</p><p>这个版本完全支持Spring Boot 3（计划在11月发布）和Spring 6（现在需要Java 17）。Spring 6中创建的HTTP客户端可以是带有注解方法的Java接口，IDE将提供URL补全和导航。</p><p>&nbsp;</p><p>实验性质的GraalVM原生调试器可以用来调试原生Java镜像二进制文件。它要求安装GraalVM的开发版和GraalVM原生调试器插件。</p><p>&nbsp;</p><p>远程开发（可以创建到远程环境的连接）能力得到了改进，连接也更加稳定。</p><p>&nbsp;</p><p>现在，在进行性能分析时，CPU和堆内存图表显示在控制台旁边，可以在收集快照的同时了解应用程序的性能。Start profiling选项现在会在火焰图、调用树和方法列表中显示Kotlin的内联函数。</p><p>&nbsp;</p><p><a href=\"https://plugins.jetbrains.com/plugin/10485-kubernetes\">Kubernetes插件</a>\"现在集成了<a href=\"https://www.telepresence.io/\">Telepresence</a>\"，可以通过拦截HTTP请求来调试允许在Kubernetes集群中集群中的服务。</p><p>&nbsp;</p><p>而且，IntelliJ现在还支持Angular 14的独立组件、Vue 3和TypeScript 4.7。</p><p>&nbsp;</p><p>有关IntelliJ IDEA 2022.2完整的变更概述可以在JetBrains网站的<a href=\"https://www.jetbrains.com/idea/whatsnew/\">What’s New</a>\"中找到。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/08/jetbrains-intellij-2022-2/\">JetBrains IntelliJ IDEA 2022.2 Uses Java 17 Runtime</a>\"</p><p>&nbsp;</p>",
    "publish_time": "2022-08-19 11:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "资深架构师十年总结：成为架构师，你必须具备这五点能力",
    "url": "https://www.infoq.cn/article/Gu742Jcxt6B1u7atv2fS",
    "summary": "<p>在过去的20年里，作为一名软件工程师和软件架构师，我与不同领域和不同学科的软件工程师聊过很多次。他们中有一些人是有着8到10年经验的高级工程师，有许多人还在职业生涯早期，有着3到5年的经验。其中一些人是我的同事。有些人是求职者。聊到最后，他们几乎都会问到同样一个问题：</p><p>&nbsp;</p><p>“我想成为一名解决方案架构师。了解更多架构相关内容的资源有哪些？“——很多软件工程师都会问的一个问题。</p><p></p><p>他们问错了问题。如果你读下去，就会知道为什么我这么说。此外，撰写本文时我的<a href=\"https://www.zuehlke.com/en\">公司</a>\"正在招聘<a href=\"https://1brd.ly/d6GYz?st=c16psk0dqgrh\">首席软件架构师</a>\"，所以我正好解释一下什么是软件架构师以及如何成为一名软件架构师。</p><p>&nbsp;</p><p></p><h2>什么是软件架构？</h2><p></p><p></p><p>首先什么是<a href=\"https://xie.infoq.cn/article/0a246fd4c681517210bac2538\">软件架构</a>\"？提到软件架构师这个头衔，就经常听到拿建筑的架构与之作比。建筑架构师设计建筑的蓝图。工程师们将其实体按照该蓝图建造起来。我认为从很多方面来看，这都是一个糟糕的类比。</p><p>&nbsp;</p><p>建筑的类比使人们过于关注系统的静态面。在这方面，城市建设是一个更好的类比，因为它既包括道路、建筑和桥梁等静态元素，也包括交通流量和城市居民等动态元素。城市架构师提出城市设计，制定计划来安排如何建设城市以及如何将所有东西组合在一起。最后但并非最不重要的是，城市架构师有一个城市将如何发展的愿景。但是软件架构还不仅如此。有时软件架构师需要放大或缩小”城市“，以确保计划可行。架构师可能不会太关心建筑的室内设计，而把重点放在决定在哪里放置红绿灯上。架构师需要广泛且深厚的技术知识，才能构建像城市一样复杂的软件。架构师还需要在不涉及所有技术细节的情况下向业务涉众传递一致的消息。</p><p>&nbsp;</p><p>建筑架构的类比意味着架构师是团队中最资深的人，他做出所有关键的决定，预先创建设计规范，然后在实现过程中执行设计。起初，在很多人看来，成为那个最有经验的人，达到技术级别的顶端，是一件很酷的事情。让整个团队都听你的，服从你的命令和决定，可能会让你感觉好极了。但是，你再好好想想，这给了架构师一定要做出正确决策的巨大压力，而这在项目的早期阶段通常是不太可能的。在敏捷团队中，这意味着开发团队不是自组织的，架构师成了团队变得敏捷的障碍。架构师剥夺了团队的所有自主权。谁愿意在如此高的压力下担任这样的职位？</p><p>&nbsp;</p><p></p><h3>软件架构的角色</h3><p></p><p></p><p>软件架构可以被视为位于业务目标和支持业务以满足这些目标的软件系统之间的中心。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/48/f9/488a676c3cd7a5966a1ae0d14891bef9.png\" /></p><p>软件架构的角色</p><p></p><p>软件架构用于满足业务目标。它是基于要实现的业务目标而设计的。然后，按照设计实现软件系统，使其遵从设计。这应该是一个迭代过程。正如我前面提到的，在项目的早期阶段通常不可能做出正确的决定。最好的决定是你仍然不必决定的决定。架构师将创建刚好能够满足业务需求的设计。这就关闭了反馈循环，就像你在敏捷和DevOps实践中看到的一样。这里的想法是，随着世界的变化，业务需求也会变化，软件架构应该随需求演变以支持业务接受变更。</p><p></p><h3>软件架构”能力“</h3><p></p><p></p><p>软件架构是一个非常具有挑战性的话题，您必须设计一个同时满足所有业务需求和所有质量属性的系统。这几乎不可能一个人完成，通常是架构师和领域专家团队合作的结果。</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/ce/bd/ce00a1ab3830d1818f74b52073cbd1bd.png\" /></p><p>通用软件架构质量属性</p><p>&nbsp;</p><p>软件架构不仅仅是图、框和线。让我们以其中一项质量属性安全性为例。只看高层次的设计图，只看一些线线连着框框，可能无法看到任何安全问题。我甚至不知道这个设计是否真的能行。保护系统安全的是代码。因此，架构师编写代码并与开发团队密切合作是很重要的。另外，架构师要能够阅读代码并经常与开发团队交流。这就是当软件架构师放大或缩小设计时所发生的事情，就像我在城市设计类比中所提到的。如果架构师不与开发团队沟通，也不编码，他们就会脱离现实，所设计的架构就不实用。</p><p>&nbsp;</p><p></p><h2>什么是软件架构师？</h2><p></p><p>&nbsp;</p><p>过去，<a href=\"https://xie.infoq.cn/article/8d181073ec0fda0c403c3fa4a\">软件架构师</a>\"是在纸上勾画逻辑流程规范，然后交给另一个团队(称为打孔者)来生产穿孔卡片并使软件工作的团队。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/50/fa/50c02c1a23cc0ddeb7e5a7769a4ea2fa.jpeg\" /></p><p>图片来源: Wikimedia Commons</p><p>&nbsp;</p><p>随着技术的进步，我们不再需要这样的过程，软件架构师的定义也变得不那么明确了。在现代IT中，软件架构师不是一个头衔或级别，因为他们不会在一夜之间给你最高的软件开发权。在Scrum团队中，这个角色和其他任何角色一样。我认为软件架构师是最有趣的角色，与医生、土木工程师、心理学家、社会工作者或会计师不同，您不能通过单一的培训课程获得软件架构师资格。事实上，世界上几乎没有一所大学提供软件架构学位。软件架构师对几乎所有事情都需要广泛且深入的了解，以便完成前一节中提到的目标。那么软件架构师使用这些技能和知识做什么呢？</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/0d/ed/0d7a3e3d6d9yy63b0312e1101ba640ed.gif\" /></p><p>图片来源：<a href=\"https://dilbert.com/strip/2008-03-04\">https://dilbert.com/strip/2008-03-04</a>\"</p><p></p><h3>软件架构师做什么，和谁一起工作?</h3><p></p><p></p><p>正如我前面所说的，软件架构位于业务目标和满足它们的软件系统之间。软件架构师将业务与使用不同语言、以不同方式思考并具有不同关注点的开发团队联系起来。具有多层管理和开发团队的竖井只会使交流变得更糟。拥有专业知识并掌握相关信息的软件工程师并不是决策者，而管理团队中的那些人则是不掌握相关信息的决策者，这种情况并不少见。为了解决相互冲突的权衡并推动组织前进，软件架构师在公司的阶梯上爬上爬下，在技术细节上扮演着至关重要的角色。</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/51/59/51b640685755711dc0ccf1de797d0159.jpeg\" /></p><p>一名宇航员——由NASA拍摄</p><p>&nbsp;</p><p>相比之下，如果大家在一些组织中冠有软件架构师的头衔，但他们只停留在企业阶梯的顶端，或者他们只关注图片时，他们就与现实脱钩了。正如<a href=\"https://www.joelonsoftware.com/about-me/\">Joel Spolsky</a>\"所说，这些人被称为<a href=\"https://www.joelonsoftware.com/2001/04/21/dont-let-architecture-astronauts-scare-you/\">架构宇航员</a>\"，他们没有贡献，也没有生产力。许多大的组织似乎都能负担得起很多这种人！</p><p>&nbsp;</p><p></p><h2>软件架构师的技能和获得多样化经验的方法</h2><p></p><p></p><p>对于软件架构师这个角色来说，对每一件事情都有经验至关重要。它让你知道什么时候该充当公司的桥梁，当放大或缩小架构图时该关注什么。当在不同的上下文中应用特定的架构设计时，您还将观察模式。在十多家公司工作过之后，我最终进入了<a href=\"https://www.zuehlke.com/en\">Zuhlke</a>\"咨询公司，在那里我不再需要换工作来获得不同的经验了。我的项目几乎涵盖了无数种行业，包括金融科技、保险科技、物流、制造业、奢侈品时尚、初创企业，这份列表还在不断增长。</p><p>&nbsp;</p><p></p><h3>领域知识</h3><p></p><p></p><p>对某些业务领域的深入了解对于软件架构师的成功是至关重要的，因为您不仅要知道它是什么，还要知道它将是什么，或者可能是什么，以及为什么。客户经常找到软件架构师，要求向他们展示行业领导者正在做什么以及如何做。领域知识还可以帮助软件架构师说一种商业通用的语言，这反过来帮助他们成为连接管理和开发团队桥梁。</p><p>&nbsp;</p><p></p><h3>人际交往能力</h3><p></p><p></p><p>软件架构师也是一个伟大的沟通者。许多优秀的高级软件工程师发现很难晋升为软件架构师，因为他们没有展示自己的技能，如倾听、口头和书面沟通、推进、冲突管理、演示、谈判和说服。</p><p>这份工作所需技能的具体类型取决于你工作的特定公司环境。</p><p>&nbsp;</p><p>在我的公司，我有机会在安全的环境中练习这些技能，比如我们称之为“<a href=\"https://www.zuehlke.com/en/welcome-to-zuhlke-hong-kong\">祖尔克日</a>\"”和“<a href=\"https://www.zuehlke.com/en/insights/zuhlkes-curiosity-capital-learning-development-during-a-pandemic\">祖尔克营</a>\"”的环境。我的雇主也在这些方面为我提供了正式的<a href=\"https://www.zuehlke.com/en/our-projects/getting-better-together-at-zuhlke-you-never-stop-developing\">培训</a>\"。最后，公司的建设性反馈文化支撑着许多人成长了起来。</p><p></p><h3>专业技术能力</h3><p></p><p></p><p>单独任何一张大学文凭都无法证明你是一个软件架构师。你需要学习软件工程的所有领域，包括软件设计、编码、质量保证、DevOps、性能分析、软件安全、项目管理、软件支持等等。这些技能对于创建满足软件架构“能力”的解决方案至关重要。当与开发团队中的专家交流时，软件架构师能够更好地理解相关信息，因为他们已经具备了这些领域的实践经验。</p><p>&nbsp;</p><p>作为一名开发团队成员，我可以胜任各个领域的日常工作，包括后端、前端和DevOps。这让我能够以第一人称视角看到幕后发生了什么，并让我能够与团队保持较近的距离。</p><p>&nbsp;</p><p></p><h3>业务和开发过程</h3><p></p><p>&nbsp;</p><p>业务过程描述了一个组织的业务操作，并定义了业务需求，而这些业务需求通常没有清晰地表述为软件项目需求。软件架构师应该知道，或者至少应该知道向谁询问业务流程的相关信息。</p><p></p><p>一个向行业组织交付解决方案的软件架构师，需要干上几年时间才能成为领域专家，这种情况并不少见。</p><p>&nbsp;</p><p>理解技术过程、软件开发生命周期和最佳实践的重要性与了解业务过程一样重要。这是因为软件架构师通常在确保业务和开发过程之间的一致性方面扮演着关键的角色，如此，才能做到迭代交付，才能有现实的项目计划。</p><p></p><h3>领导力</h3><p></p><p></p><p>现在，您应该非常好奇软件架构师如何掌握所有这些知识和技能了吧。好吧，我告诉你，他们并没有掌握！一个人是不可能掌握所有这些的。伟大的产品需要一个有能力的专家团队来开发。成功的软件架构师通常是有效的领导者，他们的团队中拥有伟大的成员，并使成员们成长得更加伟大，而不仅仅是个体。</p><p>&nbsp;</p><p>软件架构师通常被视为团队的代表。他们在领导、管理业务和技术方面投入了大量的精力。虽然人们常常认为领导者只在站在前面指挥，但有时在一个项目中需要<a href=\"https://learn.coactive.com/your-leadership-approach\">五种领导风格</a>\"。<a href=\"https://www.zuehlke.com/en\">我们公司</a>\"提供的领导力培训就是这么教的。</p><p>&nbsp;</p><p>你准备好成为一名软件架构师来寻求职业生涯的进一步发展了吗？现在是行动的最佳时机！</p><p></p><h5>关于作者</h5><p></p><p></p><p><a href=\"https://www.linkedin.com/in/ayltai/\">Alan Tai</a>\"是Zuhlke的首席软件架构师，<a href=\"https://www.zuehlke.com/en\">Zuhlke</a>\"是一家优质的全球咨询公司，为我们的业务伙伴提供高质量的解决方案。</p><p>&nbsp;</p><p>原文链接：<a href=\"https://ayltai.medium.com/what-it-takes-to-become-a-software-architect-fa7788962c8c\">https://ayltai.medium.com/what-it-takes-to-become-a-software-architect-fa7788962c8c</a>\"</p><p>&nbsp;</p><p>译者简介：冬雨，小小技术宅一枚，现从事研发过程改进及质量改进方面的工作，关注研发、测试、软件工程、敏捷、DevOps、云计算、人工智能等各个领域，非常乐意将国外新鲜的IT资讯和深度技术文章翻译分享给大家，已翻译出版《深入敏捷测试》、《持续交付实战》。</p>",
    "publish_time": "2022-08-19 11:56:16",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]