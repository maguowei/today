[
  {
    "title": "工商银行十年磨砺：建成同业最大规模云计算平台，既要开源又得可控",
    "url": "https://www.infoq.cn/article/jVRQ2lPheHOFvkxy6Cfv",
    "summary": "<p>2009年，“双十一”的大幕首次拉开，2010年总成交额就翻了18倍，到了2011年更是翻了近65倍。以“双十一”为代表的各类电商大促活动直接带动了银行交易频率和数量的大幅增加，对银行系统的弹性扩缩容等能力提出了更高的要求。</p><p>&nbsp;</p><p>对此，在<a href=\"https://www.infoq.cn/topic/cloud-computing\">云计算</a>\"还在发展初期的2012年，<a href=\"https://www.infoq.cn/article/i0CftJvEiF8mbisle4NJ\">工商银行</a>\"便开始基于服务器虚拟化软件，自主研发和推广第一代基础设施云，并在此后一直紧跟云计算技术的发展：2014年启动容器技术的预研工作；2015年在业内首次基于开源的 Docker 容器技术、微服务等，建成应用平台云，运用到生产环境；2016年完成互联网金融高并发场景的试点，顺利支撑快捷支付“双十一”大促等活动。</p><p>&nbsp;</p><p>2017年，工商银行组建了“七大创新实验室”，其中在杭州设立云计算实验室，主要负责云计算、分布式、基础软件等领域的前瞻性研究、平台建设和重难点技术课题攻关工作。同年，工商银行建成了基于Kubernetes的企业级应用平台云——PaaS 2.0，并顺利完成融e联、融e行以及 II/III类电子账户等应用首次上云。</p><p>&nbsp;</p><p>到了2019年，<a href=\"https://www.infoq.cn/article/iZBMUMOvkY3JJdHADgBX\">工商银行</a>\"已建成同业规模最大的云计算平台，集基础设施云（IaaS）、应用平台云（PaaS）和金融生态云（SaaS）三位一体，有效支撑全行高并发、大容量业务的开展。2020年，行内全量核心应用均已上云。2022年，全行应用节点入云率已经超过91%。</p><p>&nbsp;</p><p>与此同时，随着云原生技术的发展，工商银行自身的技术架构也在不断演进：一方面由于金融行业的敏感性，监管部门一直在制定和更新行业技术规范，银行业对待新技术的态度相对保守；另一方面，以工商银行为代表的大型国有企业正纷纷加入开源项目共建和社区运营，以崭新的面貌走进开发者们的视野。</p><p>&nbsp;</p><p>在这种约束与开放之间，工商银行需要找到自己的平衡。</p><p>&nbsp;</p><p></p><h2>自己的“云”</h2><p></p><p>&nbsp;</p><p>现在，工商银行内部有“五朵云”：研发云、测试云、生产云、分行云和金融生态云，这些云都建立在行内的基础设施之上。</p><p>&nbsp;</p><p>研发云、测试云、生产云主要基于总行的业务应用设立，承载了软件从研发、测试到生产三个阶段。分行云主要用于输出总行云计算建设成果，实现技术组件、服务、解决方案等多层次复用，使分行更加聚焦业务研发。金融生态云则用于为合作方等提供服务。</p><p>&nbsp;</p><p>这五朵云均组建了对应的专业运维团队，并通过云平台灵活、自动化的运维流程，建立了工商银行特色的DevOps流程，提供面向开发、测试、生产不同阶段的全流程快速交付能力，并通过行内企业级日志中心、云医平台、全息监控平台等平台，逐步形成自动化、精细化、智能化的云运维体系，实现云上应用运行趋势分析、故障秒级预警及实时诊断。</p><p>&nbsp;</p><p>工商银行的“上云”历程可以说是金融科技行业的重要变革，象征以云计算、分布式等为代表的一系列技术创新也给金融行业带来了新的机遇，推动着银行业的数字化转型。在这一过程中，“构建自主可控技术、支撑全行架构转型”成为了每个银行技术人的坚定信念。</p><p>&nbsp;</p><p>“我们高度重视云计算架构的自主可控能力。”工商银行金融科技研究院云计算实验室高级研究员周晓庆说道。</p><p>&nbsp;</p><p>根据周晓庆介绍，云的自主可控主要体现在以下三个方面：</p><p>&nbsp;</p><p>第一，承载云服务的服务器交换机等硬件设备需要自主可控。</p><p>第二，云平台依赖的操作系统需要自主可控。</p><p>第三，云平台的上层服务（如容器、中间件和数据库等）也需要符合自主可控的要求。</p><p>&nbsp;</p><p>其中，硬件和操作系统方面一般以厂商提供为主，银行主要负责推动落地并做客户化定制。上云服务则以银行为主，虽然也会与厂商或高校合作，但银行自身要完全掌握设计、开发、运维、调优等关键能力。</p><p>&nbsp;</p><p>工商银行会根据技术研判制定产品引入相关的技术规划，新增系统原则上都要采用自主可控技术路线产品，体量较大的存量系统则实行逐步转型。行内的专职研究团队负责对细化的服务器、操作系统、数据库、中间件、桌面终端等进行研究与适配验证，应用则更加聚焦业务系统转型实践。</p><p>&nbsp;</p><p></p><h2>上云历程</h2><p></p><p>&nbsp;</p><p>工商银行对应用入云都有明确的要求，根据适云评估情况“应入尽入”，具体实施过程涉及架构管理、平台、应用开发测试及运维等多部门协作。按照分工，架构管理部门牵头规划和组织，云计算实验室负责技术支撑工作，其中PaaS团队聚焦容器领域的建设，主要职责是跟进云计算方向最新的技术趋势，开展新技术前瞻性研究和原型验证工作，同时推进平台能力建设，支持应用上云。目前PaaS研发团队有50人左右，涉及有状态容器、无状态容器及配套运维监控等技术方向。</p><p>&nbsp;</p><p>不同于IaaS层面以厂商产品为主，PaaS层主要是基于开源产品自主研发。</p><p>&nbsp;</p><p>2015年，PaaS团队已经基于开源Docker容器技术，建设应用平台云PaaS 1.0。早期新应用上线，大家都很谨慎，团队全程参与，一对一指导业务改造、测试和跟进后续投产情况。当时，因为业界没有成熟的先例可以借鉴，团队以“自己造轮子”为主，比如自主研发调度引擎等。但随着试点范围的扩大，这种“摸着石头过河”的方式，无法快速满足大规模应用的需求。</p><p>&nbsp;</p><p>到了2016年，PaaS 团队开始着手调研业界容器编排产品，包括Kubernetes（谷歌）、Swarm（Docker）、Openshift（RedHat）等。当时，Docker虽已成为容器引擎的事实标准，占有较大市场份额，但Docker公司缺乏大型集群运维方面的经验，社区也相对封闭，最终团队综合多方面因素选择了Kubernetes。2017年6月，基于Kubernetes的PaaS 2.0应用云平台正式上线！</p><p>&nbsp;</p><p>为实现云平台从1.0到2.0的平稳升级，PaaS团队也会协助业务应用进行改造，并逐步建成较为完善的上云支持机制，形成“一线运维—属地支持团队—PaaS团队”三级支持体系，为应用提供及时、专业的上云支持服务。到2020年，所有核心应用均已入云。</p><p>&nbsp;</p><p>最初的上云试点主要是从低风险、非敏感的互联网秒杀大促等场景开始，然后逐步扩大到有敏捷迭代需求的互联网属性业务。经过充分的实践验证，应用上云工作逐步推广到全行，主要覆盖的场景包括：</p><p>&nbsp;</p><p>一、以支付类为代表的、具有互联网并发属性的应用，如个人网银、手机银行、快捷支付等。</p><p>二、主机下平台应用，如个人结算帐户、个人电子银行业务等。</p><p>三、其他对行内提供决策支持或者管理类、办公类应用，如集团信息库、财务管理等。</p><p>&nbsp;</p><p>银行如今的业务跟之前有很大差异。银行不再只提供线下服务，开始面向互联网提供更多的线上服务，因此银行也面临互联网特点（如业务需求变化快、并发高、低延迟等）。同时，金融的业务逻辑比互联网更为复杂，导致银行系统的调用关系、链路等也比较复杂。</p><p>&nbsp;</p><p>为应对上述挑战，PaaS团队与微服务技术团队协作，一方面通过拆分以服务群组为主体的系统管理模式，基于分布式服务将整体功能拆分到不同服务群组的节点上，加快业务需求响应。另一方面，团队还推进标准化集群和部署流程建设，业务上云策略要按照标准化的指引和相关技术规范进行，因此到了核心应用上云阶段，业务应用通常可以独立完成绝大部分场景下的上云工作，PaaS团队无需深度介入，主要以配合支持为主。</p><p>&nbsp;</p><p>“面对生产上一些不常见的问题，从业务开发、生产到我们云计算实验室各个技术平台的人，大家在一个群里实时诊断，从不同维度分析问题并解决，最终形成一份经验指导。我当时参与其中，对此印象颇深。”工商银行金融科技研究院云计算实验室资深架构师王建奇说道。</p><p>&nbsp;</p><p></p><h4>云建设思路</h4><p></p><p>&nbsp;</p><p>当前，工商银行容器规模早已超过30万，全面承载包括核心银行业务系统在内的众多应用，整体规模一直处于同业领先地位，并且经过了双十一等高并发考验。</p><p>&nbsp;</p><p>一、容器存储方面</p><p>&nbsp;</p><p>对接分布式共享文件存储，为应用容器动态供应共享文件存储，落地批量等业务场景；自研CSI插件对接分布式存储、盘机、本地盘等，提供大容量、持久化存储，实现存储资源和存储申请的解耦管理；另外提供“临时存储+配额控制”功能，支持tmpfs，满足高敏应用去存储依赖需求，应对日志输出等场景。</p><p>&nbsp;</p><p>二、流量记录方面</p><p>&nbsp;</p><p>一是通过软负载均衡体系处理。二是基于Dubbo框架做服务发现，通过“bridge网络+多端口”支持，实现容器内外部随机端口映射，构建一张架构简洁、性能优异并且支持跨集群通信、云内外互通的扁平容器网络；基于Etcd、confd、HAProxy等开源产品自研了一套负载均衡体系。</p><p>&nbsp;</p><p>如今，团队已经开始尝试结合自身情况研究Ingress来解决负载均衡问题。该方案相比社区版本的优势之一就是支持跨集群的负载，对后端 pod 是否在同一Kubernetes集群没有要求，可匹配行内大量的跨集群。</p><p>&nbsp;</p><p>三、调度编排方面</p><p>&nbsp;</p><p>早期在使用 Docker 时，PaaS团队自研发了一套编排系统，引入Kubernetes后便基于Kubernetes做编排部署。</p><p>&nbsp;</p><p>四、运维方面</p><p>&nbsp;</p><p>自研了一整套以Ansible为基础、适配各类集群、覆盖所有常见运维场景的自动化运维工具，通过该工具对集群进行日常运维和升级等工作，同时将该工具与容器云管理平台集成，实现运维工作统一化、可视化。同时，统一的管理视图为运维人员提供面向容器的运维工具，例如一键部署、滚动更新、多节点伸缩、Web终端等。</p><p>&nbsp;</p><p>五、可观测方面</p><p>&nbsp;</p><p>主要基于Prometheus监控体系，采集操作系统、应用中间件、云平台和基于日志精细化配置的应用多层级运行指标，提供云上应用运行趋势分析、故障秒级预警及实时诊断。基于容器监控、日志采集等数据，建立通用、可定制、可扩展的业务分析模型平台，实现云上运维可视化，并对接到手机端，直观展示PaaS云整体运行情况、云上应用运行状态、以及报警信息。</p><p>&nbsp;</p><p>鉴于跨集群的自动伸缩和自动故障迁移存在一定的技术挑战，PaaS团队已在行内环境进行测试，未来将继续推进生产的规模化落地。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/43/43177721ed27cc57943f9aa04936fbc9.png\" /></p><p>&nbsp;</p><p>&nbsp;</p><p></p><h4>思维转变的挑战</h4><p></p><p>&nbsp;</p><p>上云后，工商银行整体的部署架构、开发模式和问题分析等发生变化，应用研发人员面临的最大问题便是要学会用云化的思维去分析问题。</p><p>&nbsp;</p><p>新的云化架构下，有些问题无法按照原有思路解决，应用开发对PaaS底层技术架构并不完全了解，所以会非常依赖于平台提供的辅助分析工具或功能。</p><p>&nbsp;</p><p>对于迭代发布部署方式的变化，PaaS团队牵头建立了云上DevOps工具链，对Deployment等资源对象进行抽象，封装成模板、构建包等概念，尽可能屏蔽Kubernetes底层技术细节，并与行内DevOps体系衔接，支持全链路自动化上线，降低应用上云成本。</p><p>&nbsp;</p><p>传统虚拟机或物理机部署情况下，应用开发团队可仅验证几台服务器，现在面对应用容器细粒度、大规模的部署形式，部署后的验证成为一个艰巨的考验。为帮助应用解决这一痛点，PaaS团队建立了投产验证平台，可以自动化托管投产业务的验证，比如提供业务侧的日志、业务接口等验证方式。</p><p>&nbsp;</p><p>此外为适应上云模式，PaaS团队还积极探索中间件领域，已实现涵盖 MySQL、Redis、ElasticSearch、ZooKeeper 等多种有状态应用的容器化部署，其中MySQL容器上云率已达到90%以上。</p><p>&nbsp;</p><p>“上云不只是将云下架构模式直接搬到云上来部署，还有代码重构。”王建奇表示，应用侧遇到的更多是代码层面的问题。“即便监控平台能够分析出问题在哪，比如哪里CPU使用率高了，但到底哪段代码引起的还需要应用侧进一步定位。”</p><p>&nbsp;</p><p></p><h2>主动加入开源</h2><p></p><p>&nbsp;</p><p>目前，工商银行仅生产环境就有一百多个集群，且规模还在不断扩大。导致工商银行集群超大规模的原因是多方面的。</p><p>&nbsp;</p><p>首先，工商银行采用“两地三中心”架构，北京、上海共分布三个数据中心，不同中心之间的集群是分开的，每个中心又有不同的网络安全域，安全域之间又要求物理隔离……如此势必会产生较多集群。</p><p>&nbsp;</p><p>其次，一些特殊类型需要用独立的集群支撑，比如无状态通用集群与有状态MySQL数据库集群等异构集群需要分开。</p><p>&nbsp;</p><p>最后也是最为重要的，基于故障域的考量，PaaS团队会去限制单个集群的规模。银行业，甚至整个金融行业对业务连续性要求非常高，特别是核心的业务场景，因此控制基础设施的故障爆炸半径非常重要。也就是说，不能因为某个集群出现问题而导致全行业务受影响。</p><p>&nbsp;</p><p>对此，PaaS团队自研了管控面用于多集群管理，同时也与华为等共同打造了karmada项目，致力于解决遇到的跨集群问题。</p><p>&nbsp;</p><p></p><h4>开源项目共建</h4><p></p><p>&nbsp;</p><p>基于拥有的大规模容器云运营经验，PaaS团队经常会参加外部分享和交流。2020年下半年，在一次与华为的偶然交流中，双方发现彼此都遇到了多集群管理的问题，如自动扩缩容、故障修复等。</p><p>&nbsp;</p><p>当时的开源产品或多或少还存在一些问题，并没有真正解决双方的痛点。因此，工商银行联合华为、小红书等共同发起了多云容器编排引擎 karmada 项目。</p><p>&nbsp;</p><p>参与共建的几个企业最开始就用了类似开源社区的工作模式。大家先构建一些最基础的模块，然后逐步增加功能，社区提交issue，再在周会、双周会上认领某些功能的开发。</p><p>&nbsp;</p><p>“大家的侧重点不同，关心的功能也不同，但努力的方向是一样的，就是想把多集群管理做好。”工商银行金融科技研究院云计算实验室资深架构师沈一帆说道。PaaS团队主要投入了集群生命周期管理和跨集群调度模块的建设。</p><p>&nbsp;</p><p>2021年5月，karmada 正式发布，如今项目已加入CNCF。PaaS团队还是一如既往积极参与社区开发，解决规模化应用上的问题。</p><p>&nbsp;</p><p></p><h4>开放但审慎</h4><p></p><p>&nbsp;</p><p>周晓庆提到了大家早前对于银行业的一个刻板印象：闭源就意味着闭门造车。但周晓庆表示，闭源并不代表技术一定落后。</p><p>&nbsp;</p><p>“与互联网等行业不同，银行不会单纯追求技术新，最核心的关注点还是信息系统的稳定性和可靠性。实际上，金融行业可能是除了通信行业之外，最早使用计算机技术的行业，但行业特性决定了银行对技术应用会更加稳健一点。”</p><p>&nbsp;</p><p>与其他商业场景类似的是，大家早期都选择基于成熟框架或商用产品去建设信息系统。“这些闭源产品与外界交互较少，我们对外也没有太多的分享。但随着开源的发展，银行的整体架构也在发生变化。”周晓庆说道，“现在银行的迭代升级速度比之前快了很多。”</p><p>&nbsp;</p><p>拥抱开源对银行来说是一个必然选择。如果延续之前的模式，银行自身的技术可能会与开源生态技术不兼容，同时与社区的脱节也意味着后期对商业技术的依赖非常大。</p><p>&nbsp;</p><p>工商银行拥抱开源的一种方式是与互联网企业合作共建。除了karmada，工商银行还与网易联合发起了云原生日志系统Loggie项目，该项目也在今年3月份正式开源。</p><p>&nbsp;</p><p>“之所以选择这样的方式，一是互联网企业愿意在社区上投入，并已经拥有了丰富的经验；二是与工商银行一样，这些企业也有较大的规模和体量，双方有相同的需求。”周晓庆解释道。</p><p>&nbsp;</p><p>开源技术虽然极大推动了工商银行内部技术栈的升级，但工商银行对开源技术也非常审慎。现在开源技术和产品普遍面临安全漏洞、代码质量参差不齐等风险，因此使用开源软件一定要安全可控。</p><p>&nbsp;</p><p>工商银行对于开源技术有一套非常严格的引入流程和事后跟进机制。在工商银行金融科技研究院云计算实验室里，新技术团队负责及时跟进业界最新动态，对前沿技术做研判，并做相关原型验证，形成研究报告。研发团队会完成技术方案、落地研发及灰度测试，试点成功后再逐步上线推广。</p><p>&nbsp;</p><p>使用开源产品，对于要保证技术自主可控的云计算实验室来说，也意味着要始终有丰富的技术积累和经验去解决未知的问题。</p><p>&nbsp;</p><p>“但总体看，国内开源现在为追赶阶段，本土开源项目发展和影响力仍需持续提升。主流开源项目当前仍以国际社区为主，一旦停止维护就会出现比较被动的局面。而国内开源项目社区普遍参与贡献没有那么高，建设发力就比较分散。同时相较于国内庞大的开源软件使用规模，市场上缺少与之相匹配的专业技术支持服务提供商，这也对用户的自主掌控能力提出了更高的要求。”周晓庆评价道。</p><p>&nbsp;</p><p>结束语</p><p>&nbsp;</p><p>以云计算和分布式为代表的新技术在帮助银行解决原有问题的同时，也给金融行业带来了很多机遇，周晓庆以数字人民币为例解释道，“如果停留在原来的主机架构模式上，没有云计算、分布式等技术的支持，就不会有数字人民币等业务创新。”</p><p>&nbsp;</p><p>要抓住新机遇，就会对研发团队提出更高的要求。团队只有完成从上到下的提升，才能保证对技术的开放和可控。</p><p>&nbsp;</p><p>“管理者要同时拥有过硬的技术和管理团队的能力，两者都非常重要。”周晓庆强调，一个技术团队管理者的专业技术能力不能丢，要对自己的技术能力进行“保鲜”，持续学习，保证自身技术知识的深度和广度，这样才能更合理地制订团队目标，并对团队成员的技术方案提供指导。</p><p>&nbsp;</p><p>同时，PaaS团队坚持结果导向，做好关键性决策，不过多去管控团队成员的执行细节，引导其充分发挥自身能力，确保任务计划按时完成，如果有进度风险需要主动汇报和上升，因此团队成员需要有更高的自驱力和执行力。</p><p>&nbsp;</p><p>嘉宾介绍：</p><p>&nbsp;</p><p>周晓庆，工商银行金融科技研究院云计算实验室高级研究员</p><p>王建奇，工商银行金融科技研究院云计算实验室资深架构师</p><p>沈一帆，工商银行金融科技研究院云计算实验室资深架构师</p><p></p><p>本文选自<a href=\"https://www.infoq.cn/minibook/AaximlxcD9Mp0xqGuBRM\">《中国卓越技术团队访谈录》（2022&nbsp;年第四季）</a>\"，本期精选了字节跳动、金山办公、工商银行、OceanBase、Cocos&nbsp;引擎等技术团队在技术落地、团队建设方面的实践经验及心得体会。扫描下方图片二维码或<a href=\"https://www.infoq.cn/minibook/AaximlxcD9Mp0xqGuBRM\">点击此处</a>\"可下载本期全部内容，查看更多独家专访！</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/20/d1/20fa148d0bc40c191d16178c1e3d98d1.png\" /></p><p></p><p>《中国卓越技术团队访谈录》是&nbsp;InfoQ&nbsp;打造的重磅内容产品，现开放长期报名通道，如果你身处传统企业经历了数字化转型变革，或者正在互联网公司进行创新技术的研发，并希望&nbsp;InfoQ&nbsp;可以关注和采访你所在的技术团队，抓住机会<a href=\"https://www.infoq.cn/form/?id=898\">报名</a>\"吧！</p>",
    "publish_time": "2022-11-16 07:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Java近期新闻：Payara Platform 6、Spring更新和CVE、异步堆栈跟踪VM API",
    "url": "https://www.infoq.cn/article/bGjuQ9cjE3RNG5GkZS2I",
    "summary": "<p></p><h4>OpenJDK</h4><p></p><p>JEP 435（<a href=\"https://openjdk.org/jeps/435\">异步堆栈跟踪VM API</a>\"）于上周从Draft 8284289状态<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2022-November/007124.html\">提升</a>\"到Candidate状态。这份HotSpot JEP提议定义一个经过充分测试的、高效可靠的API，用于异步收集堆栈跟踪信息，其中包括有关Java和本地堆栈帧的信息。</p><p></p><h4>JDK 20</h4><p></p><p>JDK 20的<a href=\"https://jdk.java.net/20/\">早期访问构建</a>\"<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-20%2B22\">Build 22</a>\"于上周发布，它是Build 21的<a href=\"https://github.com/openjdk/jdk/compare/jdk-20%2B21...jdk-20%2B22\">升级</a>\"，修复了各种<a href=\"https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2020%20and%20%22resolved%20in%20build%22%20%3D%20b22%20order%20by%20component%2C%20subcomponent\">问题</a>\"。要了解关于这个构建的更多细节，请查看<a href=\"https://jdk.java.net/20/release-notes\">发布说明</a>\"。</p><p>&nbsp;</p><p>对于<a href=\"https://openjdk.java.net/projects/jdk/20/\">JDK 20</a>\"，我们鼓励开发者通过<a href=\"https://bugreport.java.com/bugreport/\">Java Bug数据库</a>\"报告缺陷。</p><p></p><h4>JavaFX 20</h4><p></p><p>JavaFX 20的<a href=\"https://jdk.java.net/javafx20/\">早期访问构建</a>\"<a href=\"https://github.com/openjdk/jfx/releases/tag/20%2B6\">Build 6</a>\"和<a href=\"https://github.com/openjdk/jfx/releases/tag/20%2B5\">Build 5</a>\"正式面向Java社区发布。按照设计，JavaFX应用程序开发人员可以在JDK 20早期访问构建上使用JavaFX 20构建和测试他们的应用程序。</p><p></p><h4>Generational ZGC</h4><p></p><p>Generational ZGC的<a href=\"https://jdk.java.net/genzgc/\">早期访问构建</a>\"Build 20-genzgc+2-20也面向Java社区发布了，它基于JDK 20的一个不完全版本。</p><p></p><h4>Spring Framework</h4><p></p><p>在通往<a href=\"https://spring.io/projects/spring-framework\">Spring Framework</a>\" 6.0.0的道路上，<a href=\"https://spring.io/blog/2022/11/03/spring-framework-6-0-0-rc3-available-now\">第三个候选版本</a>\"发布。该版本带来了22项Bug修复和改进，包括：在@HttpExchange注解定义的方法中支持@RequestPart参数；引入SimpleValueStyler类与ToStringCreator类搭配使用；为HttpServiceProxyFactory类的客户端提供AOT支持。按照计划，GA版本将于2022年11月正式发布，这个候选版本将是这之前的最后一个候选版本。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-RC3\">发布说明</a>\"。</p><p>&nbsp;</p><p><a href=\"https://spring.io/projects/spring-data\">Spring Data</a>\" 2022.0.0的<a href=\"https://spring.io/blog/2022/11/04/spring-data-2022-0-0-rc2-available\">第二个候选版本</a>\"（代号为Turing）发布。该版本修复了许多Bug，并通过<a href=\"https://micrometer.io/\">Micrometer</a>\"优化了<a href=\"https://spring.io/projects/spring-data-mongodb\">Spring Data MongoDB</a>\"、<a href=\"https://spring.io/projects/spring-data-redis\">Spring Data Redis</a>\"和<a href=\"https://spring.io/projects/spring-data-cassandra\">Spring Data for Apache Cassandra</a>\"模块的可观察性。此外，所有的模块都升级到了对应的RC2版本。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/spring-projects/spring-data-commons/wiki/Spring-Data-2022.0-%28Turing%29-Release-Notes-%28Preview%29\">发布说明</a>\"。</p><p>&nbsp;</p><p><a href=\"https://spring.io/projects/spring-security\">Spring Security</a>\"的5.7.5和5.6.9版本<a href=\"https://spring.io/blog/2022/10/31/spring-security-5-7-5-and-5-6-9-available-now\">发布</a>\"，修复了以下问题：AuthorizationFilter类错误地扩展了OncePerRequestFilter类；作用域映射错误。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/spring-projects/spring-security/releases/tag/5.7.5\">5.7.5</a>\"和<a href=\"https://github.com/spring-projects/spring-security/releases/tag/5.6.9\">5.6.9</a>\"版本的发布说明。</p><p>&nbsp;</p><p>在通往<a href=\"https://spring.io/projects/spring-cloud\">Spring Cloud</a>\" 2022.0.0的道路上，<a href=\"https://spring.io/blog/2022/10/31/spring-cloud-2022-0-0-rc1-is-available\">第一个候选版本</a>\"发布。除了把<a href=\"https://spring.io/projects/spring-cloud-cli\">Spring Cloud CLI</a>\"、<a href=\"https://spring.io/projects/spring-cloud-cloudfoundry\">Spring Cloud for Cloud Foundry</a>\"和<a href=\"https://spring.io/projects/spring-cloud-sleuth\">Spring Cloud Sleuth</a>\"从发布序列中移除了之外，所有子项目都升级到了RC1的相应版本。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2022.0-Release-Notes\">发布说明</a>\"。</p><p>&nbsp;</p><p><a href=\"https://spring.io/projects/spring-authorization-server\">Spring Authorization Server</a>\" 1.0.0的<a href=\"https://spring.io/blog/2022/11/01/spring-authorization-server-1-0-0-rc1-available-now\">第一个候选版本</a>\"发布，新特性包括：@EnableWebSecurity注解与@Configuration注解一起使用；用SecurityContextRepository接口中定义的loadDeferredContext()方法替换loadContext()方法；将0.4发布序列的增强合并到main。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/spring-projects/spring-authorization-server/releases/tag/1.0.0-RC1\">发布说明</a>\"。</p><p>&nbsp;</p><p>类似地，Spring Authorization Server 0.4.0的<a href=\"https://spring.io/blog/2022/11/01/spring-authorization-server-0-4-0-rc1-available-now\">第一个候选版本</a>\"发布，改进了与OidcUserInfoEndpointFilter和OidcClientRegistration类相关的自定义端点。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/spring-projects/spring-authorization-server/releases/tag/0.4.0-RC1\">发布说明</a>\"。</p><p>&nbsp;</p><p>在通往<a href=\"https://spring.io/projects/spring-modulith\">Spring Modulith</a>\" 0.1的道路上，<a href=\"https://spring.io/blog/2022/11/02/spring-modulith-0-1-m2-released\">第二个里程碑版本</a>\"发布。该版本带来了一些新特性，如在可观察模块中删除了过时的spring.factories 属性；确保测试自动配置排在最前面。Spring Modulith是10月底<a href=\"https://spring.io/blog/2022/10/21/introducing-spring-modulith\">发布</a>\"的。InfoQ后续将带来更详细的报道。</p><p>&nbsp;</p><p>以下是VMware上周发布的三个CVE：</p><p>CVE-2022-31691（<a href=\"https://tanzu.vmware.com/security/cve-2022-31691\">在Eclipse和VSCode的STS4扩展中通过YAML编辑器执行远程代码</a>\"）是Spring Tools<a href=\"https://spring.io/blog/2022/11/03/cve-report-published-for-spring-tools\">报告</a>\"的一个漏洞，在某些条件下，攻击者可以从特定的YAML语法中远程执行有害的代码。CVE-2022-31692（<a href=\"https://tanzu.vmware.com/security/cve-2022-31692\">在Spring Security中通过Forward或Include Dispatcher类型绕过授权规则</a>\"）是Spring Security报告的一个影响AuthorizationFilter类的漏洞。CVE-2022-31690（<a href=\"https://tanzu.vmware.com/security/cve-2022-31690\">spring-security-oauth2-client中的权限提升</a>\"）也是Spring Security<a href=\"https://spring.io/blog/2022/10/31/cve-2022-31690-privilege-escalation-in-spring-security-oauth2-client\">报告</a>\"的一个漏洞，在特定条件下，攻击者可以修改浏览器向授权服务器发起的请求，从而在后续审批中获得权限提升。</p><p>&nbsp;</p><p>建议开发者升级到<a href=\"https://spring.io/blog/2022/10/26/spring-tools-4-16-1-released\">Spring Tools 4.16.1</a>\"和Spring Security <a href=\"https://spring.io/blog/2022/10/31/spring-security-5-7-5-and-5-6-9-available-now\">5.7.5及5.6.9</a>\"。</p><p></p><h4>Payara</h4><p></p><p>Payara<a href=\"https://blog.payara.fish/whats-new-in-the-november-2022-payara-platform-release\">发布</a>\"了<a href=\"https://www.payara.fish/\">Payara平台</a>\"的2022年11月版。该版本推出了Payara Community 6.2022.1，既是作为Payara 6 Community的第一个稳定版本，也是作为Jakarta EE 10<a href=\"https://jakarta.ee/specifications/platform/\">平台</a>\"、<a href=\"https://jakarta.ee/specifications/webprofile/\">Web Profile</a>\"和<a href=\"https://jakarta.ee/specifications/coreprofile/\">Core Profile</a>\"的兼容实现。Payara 6将作为Payara Platform Community的最新版本。要了解关于这个版本的更多细节，请查看<a href=\"https://docs.payara.fish/community/docs/6.2022.1/Release%20Notes/Release%20Notes%206.2022.1.html\">发布说明</a>\"。</p><p>&nbsp;</p><p>Payara Community 5.2022.4是Payara 5 Community的倒数第二个版本。要了解关于这个版本的更多细节，请查看<a href=\"https://docs.payara.fish/community/docs/Release%20Notes/Release%20Notes%205.2022.4.html\">发布说明</a>\"。</p><p>&nbsp;</p><p>Payara Enterprise 5.45.0带来了5项Bug修复、1项安全修复和2项改进。要了解关于这个版本的更多细节，请查看<a href=\"https://docs.payara.fish/enterprise/docs/Release%20Notes/Release%20Notes%205.45.0.html\">发布说明</a>\"。</p><p>&nbsp;</p><p>所有这些新版本都解决了一个零日漏洞，即如果应用程序部署到根上下文中，则攻击者可以探查WEB-INF和META-INF文件夹的内容。</p><p></p><h4>Micronaut</h4><p></p><p>Micronaut基金会<a href=\"https://micronaut.io/2022/10/29/micronaut-framework-3-7-3-released/\">发布</a>\"了Micronaut 3.7.3，带来了Bug修复和<a href=\"https://micronaut-projects.github.io/micronaut-test-resources/latest/guide/\">Micronaut</a>\"<a href=\"https://micronaut-projects.github.io/micronaut-test-resources/latest/guide/\">Test Resources</a>\"、<a href=\"https://micronaut-projects.github.io/micronaut-servlet/latest/guide/\">Micronaut Servlet</a>\"、<a href=\"https://micronaut-projects.github.io/micronaut-security/latest/guide/\">Micronaut Security</a>\"、<a href=\"https://micronaut-projects.github.io/micronaut-kafka/latest/guide/\">Micronaut Kafka</a>\"及<a href=\"https://micronaut-projects.github.io/micronaut-redis/latest/guide/\">Micronaut Redis</a>\"的补丁版本。SnakeYAML 1.33和Netty 4.1.84也进行了依赖升级。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/micronaut-projects/micronaut-core/releases/tag/v3.7.3\">发布说明</a>\"。</p><p></p><h4>MicroProfile</h4><p></p><p>在通往MicroProfile 6.0的道路上，<a href=\"https://microprofile.io/workinggroup/\">MicroProfile工作组</a>\"提供了MicroProfile 6.0的<a href=\"https://github.com/eclipse/microprofile/releases/tag/6.0-RC2\">第二个候选版本</a>\"。该版本更新了所有规范。还有一点需要注意的是，MicroProfile OpenTracing规范已经被新的<a href=\"https://github.com/eclipse/microprofile-telemetry/blob/main/README.adoc\">MicroProfile Telemetry</a>\"规范所取代。MicroProfile 6.0的GA版本预计将在2022年11月底/ 12月初发布。</p><p></p><h4>Hibernate</h4><p></p><p>Red Hat性能团队发现了一种特定的<a href=\"https://bugs.openjdk.org/browse/JDK-8180450\">代码模式</a>\"，在大型多核服务器上，它会引发严重的性能损失。包括<a href=\"https://hibernate.org/orm/\">Hibernate ORM</a>\"在内的许多库都受到了影响。作为缓解这个问题的第一步，<a href=\"https://in.relation.to/2022/10/28/hibernate-orm-615-final/\">Hibernate ORM 6.1.5.Final</a>\"带来了一些补丁。Hibernate团队声称，从早期测试看是有望解决问题的。</p><p>&nbsp;</p><p>Hibernate ORM 5.6.13.Final<a href=\"https://in.relation.to/2022/11/03/hibernate-orm-5613/\">发布</a>\"，带来了多项Bug修复和功能增强，例如，将SimpleExpression类中定义的getOp()方法的访问修饰符从protected更改为public，以帮助开发人员从遗留的Criteria API进行迁移。另外，依赖项<a href=\"https://bytebuddy.net/\">ByteBuddy</a>\"和<a href=\"https://byteman.jboss.org/\">Byteman</a>\"分别升级到了 1.12.18和4.0.20版本。</p><p>&nbsp;</p><p>在Hibernate ORM 5.6.13<a href=\"https://in.relation.to/2022/11/03/hibernate-orm-5613/\">发布</a>\"后不久，就发现了一个<a href=\"https://hibernate.atlassian.net/browse/HHH-15662\">严重的回归</a>\"：检查Managed接口的实现而不是ManagedEntity接口的实现，导致抛出了ClasscastException。Hibernate ORM 5.6.14.Final的发布就是为了解决这个问题。</p><p></p><h4>Apache软件基金会</h4><p></p><p><a href=\"https://tomee.apache.org/\">Apache TomEE</a>\" 9.0.0-RC1完全兼容MicroProfile 5.0，并且包含多个依赖项升级，包括Eclipse Mojarra 3.0.2、HSQLDB 2.7.1、Hibernate 6.1.4.Final、Log4J2 2.18.0、Tomcat 10.0.27和Jackson 2.13.4。要了解关于这个版本的更多细节，请查看<a href=\"https://tomee.apache.org/9.0.0.RC1/release-notes.html\">发布说明</a>\"。</p><p>&nbsp;</p><p><a href=\"https://camel.apache.org/\">Apache Camel</a>\" 3.18.3<a href=\"https://camel.apache.org/blog/2022/10/RELEASE-3.18.3/\">发布</a>\"，带来了52项Bug修复、改进和依赖项升级，包括：Spring Boot 2.7.5、camel-jbang模块中的camel-hbase 2.5.0和kamelets 0.9.0。要了解关于这个版本的更多细节，请查看<a href=\"https://camel.apache.org/releases/release-3.18.3/\">发布说明</a>\"。</p><p></p><h4>GraalVM Native Build Tools</h4><p></p><p>在通往1.0版本的道路上，<a href=\"https://labs.oracle.com/\">Oracle实验室</a>\"发布了<a href=\"https://github.com/graalvm/native-build-tools/blob/master/README.md\">Native Build Tools</a>\"的<a href=\"https://github.com/graalvm/native-build-tools/releases/tag/0.9.17\">0.9.17</a>\"版本，这是一个GraalVM项目，包含可与GraalVM Native Image互操作的插件。这个最新版本带来了一些改进，包括：新增一个requiredVersion属性，用于检查GraalVM的最小版本；使GraalVM安装检查延迟。要了解关于这个版本的更多细节，请查看<a href=\"https://graalvm.github.io/native-build-tools/latest/index.html#changelog\">变更日志</a>\"。</p><p></p><h4>JReleaser</h4><p></p><p>JReleaser是一个简化创建项目发布的Java实用工具。最近发布的1.3.1版本主要是修复了一个问题：如果远程操作失败，那么在close/release/drop操作后就不报告Nexus2查询状态。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/jreleaser/jreleaser/releases/tag/v1.3.1\">发布说明</a>\"。</p><p></p><h4>JobRunr</h4><p></p><p><a href=\"https://www.jobrunr.io/\">JobRunr</a>\" 5.3.1<a href=\"https://github.com/jobrunr/jobrunr/releases/tag/v5.3.1\">发布</a>\"，修复了以下问题：JobRunr在MDC类实例的值为null时不失败；如果第一次运行时间过长，则会多次应用DB Migration；后台作业中的继承并不总是有效。</p><p></p><h4>JDKMon</h4><p></p><p><a href=\"https://github.com/HanSolo/JDKMon\">JDKMon</a>\"是一个监控和更新已安装JDK的工具，其<a href=\"https://github.com/HanSolo/JDKMon/releases/tag/17.0.39\">17.0.39</a>\"版本于上周发布。该工具由Azul首席工程师<a href=\"https://de.linkedin.com/in/gerritgrunwald\">Gerrit Grunwald</a>\"创建。新版本提供了一个针对GraalVM构建的CVE检测工具，其中，CVE会按严重程度排序。</p><p></p><h4>J-Fall大会</h4><p></p><p>由<a href=\"https://nljug.org/\">Nederlandse Java用户组</a>\"（NLJUG）赞助的<a href=\"https://jfall.nl/\">J-Fall 2022</a>\"于上周在荷兰埃德的<a href=\"https://www.pathe.nl/bioscoop/ede\">Pathé Ede</a>\"举行，来自Java社区的<a href=\"https://jfall.nl/speakers-2022/\">演讲者</a>\"参加了主题演讲、技术会议、研讨会和实践实验室。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/11/java-news-roundup-oct31-2022/\">https://www.infoq.com/news/2022/11/java-news-roundup-oct31-2022/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/zjeqoqwH8q8BrAqB7fWJ\">Java 近期新闻：OpenJDK 更新、JDK 20 发布计划、GraalVM 22.3、JReleaser 1.3.0</a>\"</p><p><a href=\"https://www.infoq.cn/article/NxuqQb5Xt6VaPu1mEWIG\">Oracle 将 GraalVM 贡献给 OpenJDK，以解决“采用障碍”</a>\"</p>",
    "publish_time": "2022-11-16 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]