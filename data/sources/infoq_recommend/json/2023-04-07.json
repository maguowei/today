[
  {
    "title": "供应链实践调查报告：可感知的实践有用性与采用程度相关",
    "url": "https://www.infoq.cn/article/9boH3zd1jDZdR244gPhE",
    "summary": "<p>最近一项关于供应链安全实践的<a href=\"https://openssf.org/blog/2023/03/15/new-slsa-survey-reveals-real-world-developer-approaches-to-software-supply-chain-security/\">调查</a>\"发现，尽管一些实践已被广泛采用，但关键性实践的采用却是滞后的。该调查基于软件工件供应链等级（<a href=\"https://slsa.dev/\">Supply-chain Levels for Software Artifacts</a>\"，SLSA）框架进行。调查报告指出，关键实践，如生成来源，在采用方面是滞后的。调查还发现，人们认为实践的有用性与该实践的采用高度相关。</p><p>&nbsp;</p><p>SLSA是一个开源的安全框架，提供与供应链安全相关的标准和控制。它提出了一些预防和减轻软件供应链攻击的安全实践。这些实践分为四个等级——从完全脚本化的构建到封闭的、可重用的构建。这项调查包含了受访者对这些实践的采用、难度和感知有用性的反馈。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/3e/3efc46c610f32c4428301eb3acde02b6.png\" /></p><p></p><p>部分软件供应链安全实践采用程度（来源：<a href=\"https://openssf.org/blog/2023/03/15/new-slsa-survey-reveals-real-world-developer-approaches-to-software-supply-chain-security/\">OpenSSF</a>\"）</p><p>&nbsp;</p><p>调查结果表明，一些实践已被广泛地采用。例如，超过50%的受访者表示，他们总是会使用集中式的构建服务。另外两个常用的实践是临时性构建和隔离性构建。</p><p>&nbsp;</p><p>然而，提供来源（被认为是SLSA一级所需的关键相关实践）在采用方面却是滞后的。来源是关于如何构建工件的元数据，包括所有权、来源、依赖项和构建过程的信息。</p><p>&nbsp;</p><p>报告指出，受访者认为实践的有用性程度确实与采用该实践的可能性呈正相关。报告作者建议把重点放在解释为什么实践有助于潜在地推动更多的采用上。Amélie Koran、Wendy Nather、Stewart Scott和Sara Ann Brackett最近发表的一篇<a href=\"https://www.atlanticcouncil.org/in-depth-research-reports/issue-brief/the-cases-for-using-sboms/\">文章</a>\"证实了这一发现，因为它与SBOM（软件物料清单）有关。他们指出，由于SBOM实践的价值被低估，缺乏明确定义的SBOM用例可能会导致采用程度不高。</p><p>&nbsp;</p><p>一些受访者质疑生成来源的有用性，这说明需要进一步解释这种实践的好处：</p><p></p><p></p><blockquote>这似乎是一种会带来大量文书工作的方法，并且可以在事后很容易进行回顾——“发生了这些攻击”……但却没有从一开始就阻止攻击的发生。</blockquote><p></p><p>&nbsp;</p><p>对于生成软件材料清单（SBOM）的有用性，其他受访者也有类似的看法：</p><p></p><p></p><blockquote>这是一种所有人都不喜欢的乏味的文书工作，开发者不喜欢（因为他们必须编写内容，并可能为随机依赖项做出辩护），管理层不喜欢（因为这会导致延迟和不愉快的开发），甚至是法务人员也不喜欢（因为它有可能将意外侵权变成故意侵权）。尽管如此，谨慎对待依赖项似乎是降低供应链攻击风险的唯一好方法。</blockquote><p></p><p>&nbsp;</p><p>受访者表示，一些SLSA实践，例如封闭式构建，比其他实践更难被采用。调查发现，可感知的实践难度与组织是否采用实践之间没有相关性。</p><p>&nbsp;</p><p>因为调查结果与采用相关，所以它与最近发布的<a href=\"https://www.infoq.com/news/2022/10/google-devops-2022/\">谷歌2022年Accelerate DevOps状态报告</a>\"密切一致。该报告还关注供应链安全，并同时使用了SLSA框架和NIST的<a href=\"https://csrc.nist.gov/publications/detail/sp/800-218/final\">安全软件开发框架</a>\"（SSDF）。同样，他们发现大多数受访者表示他们至少部分采用了每一种实践。</p><p>&nbsp;</p><p>关于最近SLSA++调查的更多细节可以在<a href=\"https://openssf.org/blog/2023/03/15/new-slsa-survey-reveals-real-world-developer-approaches-to-software-supply-chain-security/\">OpenSSF博客</a>\"上找到。<a href=\"https://openssf.org/blog/2023/03/09/draft-version-1-0-of-slsa-open-for-comments/\">SLSA 1.0</a>\"草案现在也开放给社区评审。</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/03/slsa-survey-adoption/\">https://www.infoq.com/news/2023/03/slsa-survey-adoption/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/99ePsUu35Y6SEdaRNS1w\">Snap 首席信息安全官：我给软件供应链风险打 9.9 分（满分 10 分）</a>\"</p><p><a href=\"https://www.infoq.cn/article/4Jc6t1bpUC3HDpHzNUXI\">RPA 带来 6 位数的人力工时节约，但全民低代码时代还未到来｜顺丰供应链的数字化探索与实践</a>\"</p><p></p>",
    "publish_time": "2023-04-07 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "如何造出适用转速超3倍的新能源汽车高精度齿轮？双传环动：数字化功不可没",
    "url": "https://www.infoq.cn/article/69YceSjGGo7k5j8qBEkN",
    "summary": "<p>由于使用完全不同的动力系统，传统燃油车和新能源汽车的灵敏度有着天壤之别。如今，很多新能源汽车的响应时间已经达到毫秒级。这是因为新能源汽车电动机采用电机驱动，可以通过控制电流的大小精确控制电机的转速，同时转速也显著高于燃油车的发动机。</p><p></p><p>具体来说，发动机最大功率转速一般在 5,000-6,000 转/分， 而 A00 级车型电机转速约为 8,000 转/分，A0 级以上车型电机转速多为 14,000-18,000 转/分。市面上一些高端新能源汽车，其高功率电机转速更是达到了 20,000 转/分。</p><p></p><p>传动齿轮是决定这一转速大小的重要零件，通过和其它齿状机械零件传动，齿轮的主要作用是实现减速、增速、变向和换向等动作。如果精准度不够，就会直接影响齿轮与其他传动件的啮合度。当电机高速转动产生冲击载荷，传动件之间不断摩擦，轻则会使得零件寿命缩短、噪音提高，重则甚至会造成零件直接损坏，威胁驾驶安全。</p><p></p><p>换句话说，新能源汽车对齿轮的精度和质量的要求和过去的传统燃油车已经完全不在一个量级。</p><p></p><p>但是，由于我国高精度制造业发展相对落后，目前能够规模化生产精锻齿轮的企业屈指可数——浙江<a href=\"https://www.gearsnet.com/\">双环传动</a>\"机械股份有限公司（以下简称“双传环动”）是其中之一。</p><p></p><p>双传环动创建于1980年，从最开始做摩托车齿轮，到变速器齿轮、自动变速器齿轮，再到如今的新能源汽车减速器齿轮，40多年来一直在深耕机械传动齿轮行业。之所以能够在工艺上持续精进，成为如今国内精煅齿轮领域凤毛麟角的企业之一，双环传动信息化智能制造总监崔永龙告诉InfoQ，数字化在其中功不可没。</p><p></p><h2>双环传动的数字化转型“铁三角”</h2><p></p><p></p><p>和绝大多数企业一样，双传环动的数字化故事是从信息化开始的。十多年前，双环传动主要从最基础的ERP系统、OA系统、BI等一点点做起；而和其他企业可能有所不同的是，双传环动在推行信息化的同时，还上线了TPS（丰田精益生产管理模式）管理系统，包括成品条码系统、车间工票系统等等，主张信息化与精益化双管齐下。</p><p></p><p>举例来说，基于成品条码系统，双环传统生产的齿轮都会被打上批次号，产品一旦出现问题，可以立即进行追溯，包括它的钢材原料来源、出自哪个高炉、经过哪些工序等信息都可以溯源。</p><p></p><p>在此基础上，再加上多年来对车间产线和设备的自动化改造（如生产单元自动上下料、线边物料自动呼叫），这构成了双环传动“数字化转型铁三角”——信息化+<a href=\"https://www.infoq.cn/article/8eOkku2uTuU3qVFvwqhA\">精益化</a>\"+自动化。据此，双环传动工厂的产品质量控制能力和生产效率已经得到极大提升。</p><p></p><p>而此后，双环传动又上线了MES制造执行系统，并通过组建专门的信息化科研团队，自主研发了D-MOM数字化制造运营管理平台，初步构建了一套工业互联网体系。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/48/48e429f722782e69c708a6486110a41b.png\" /></p><p>D-MOM平台业务流</p><p></p><p>崔永龙强调，制造业的数字化转型，绝不仅仅是 OT与IT的融合，双环传动D-MOM平台是IT（信息技术）+ET（工程技术）+CT（通信技术）+OT（操作技术）的结果。其中， ET工程技术的重要性在于它包括了<a href=\"https://www.infoq.cn/article/lz4xxpqPCadNj181bCwP\">数字建模技术</a>\"，随着制造业升级带来的生产流程和设备复杂度增加，在虚拟环境下进行新产品、新系统、新产线进行测试模拟，可以提高产品良率，降低成本浪费。</p><p></p><p>尤其对于齿轮制造来说，其加工工艺过程要经过毛坯锻造、粗加工（齿坯加工、齿形加工、齿端加工）、 热处理、精加工（精基准修正及齿形精加工）等几大阶段，包括 20-40 道工序。不同材料、精度、大小的齿轮的处理工艺千差万别，可能需要经过大量的试验和反复仿真，才能得出最优的工艺路线。因此，ET工程技术的作用就尤为明显。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/de/de17cd684814821c067b80e156349c8d.png\" /></p><p>D-MOM数字制造运营管理平台</p><p></p><p>具体而言，双环传动D-MOM平台涉及了12+N个功能模块，包括DSS决策支持、精益研发平台、工厂布局平台、计划管理平台、精益物流平台、能源管理平台、精益<a href=\"https://www.infoq.cn/theme/161\">供应链</a>\"平台、精益产线平台、TQM全面质量、TPM设备保全、项目管理平台、刀具管理平台12个自主研发模块以及IoT物联网平台、大数据平台、5G+工业互联网、数字孪生等N个集成平台。</p><p></p><h2>追溯每一个齿轮的“前世今生”</h2><p></p><p></p><p>崔永龙表示，汽车行业对产品品质要求极高，如果出现问题，根据制度规定动辄就要召回上万辆，其中造成的成本损失巨大。所以，早在十几年前，崔永龙就主导在双环传动质量管理全流程中加入了“测”的环节，形成“人机料法环测”的全面质量管理。</p><p></p><p>如前文所说，齿轮产品是一个精密件，因此工艺流程极为复杂。其中，热处理、磨齿是高精齿轮最核心的工艺。</p><p></p><p>热处理的主要目的是增加齿轮表面硬度，加强产品机械性能。但是，由于齿轮每个面的硬度要求均有不同，这意味着在热处理中就要确保这种硬度的差异化，并且如果温度太高、太低或者冷却不均，也会导致齿轮变形，影响良率。所以，与热处理控制相关的所有过程数据，包括炉温、时间、加热方式，甚至是炉内分区等等，都要进行全面的<a href=\"https://www.infoq.cn/article/mfcsP6wws312tLTcrPCl\">数据采集</a>\"。</p><p></p><p>磨齿属于精加工工序，能够提高齿轮精度、减少噪音。“每一个齿轮的齿是磨出来的曲面，齿轮与齿轮的啮合也是曲面，如果出现一点工艺误差，在高速旋转情况下就可能导致断齿。”崔永龙解释道，为了不断提高齿轮精度，齿轮制造过程中涉及大量的参数数据采集。比如形状、材料等等，需要设置模数、齿数、压力角、齿顶高系数、公法线长度、跨测齿数、齿向公差等多个参数。</p><p></p><p>“所有这些参数首先需要通过PLM进行量化、标准化和固化，并且跟QMS质量管理有关的数据都要联动起来，实现设计+制造一体化，把参数级结构化工艺下沉到制造末端。在这些全量、全要素的数据基础上，再去做工序级的算法模型，因为缺乏数据验证的算法模型是没有价值的。”崔永龙强调，“经过持续反复的数据和模型的沉淀，再回归到工艺中去，寻找每一个环节的‘最优解’，这样就形成了一个闭环，可以实现工艺的循环迭代。”</p><p></p><p>换句话说，通过质量管理平台搭建，双环传动在内部实现了质量全面管理和精准追溯。但这远远不够，影响质量、效率、成本的环节，不仅仅发生在内部，供应商的原材料供应是否合格，供应链条的运转是否畅通，供应采购的成本浪费是否有效控制？这些问题也需要充分考虑。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/20/2070f007231610c2b5462de453c0dbe4.png\" /></p><p>数字化智造运营大脑管理平台体系</p><p></p><p>对此，双传环动搭建了物流管理平台和<a href=\"https://www.infoq.cn/article/z9DfpZCh0femWpQ6awVp\">供应链管理</a>\"平台，并把所有核心供应商都纳入其中。“基于平台的交互，我们对供应商的要求是每天报送一次供应的物料生产情况。只有实时掌握供应链条上的关键信息，才能进行精准的、前瞻性的生产运营规划。”崔永龙表示。</p><p></p><p>也就是说，在双传环动，每一个齿轮的“前世今生”都会通过数据被完整呈现出来，从而辅助实现产品精度和生产效率的精益求精。据了解，目前双环传动产品加工精度最高已经可以达到2µm（微米），适用转速高达19000转/分。</p><p></p><h2>工业互联网和5G是未来风口</h2><p></p><p></p><p>可以看到，经过10数年的摸索和实践，双环传动已经形成了一套适合自身发展的数字化方法论。崔永龙向InfoQ强调，“企业想通过上一个系统就解决所有问题是不可能的，数字化必须要有整体的设计和规划。”</p><p></p><p>而对双环传动来说，其顶层设计基于的是“1+5+1 模式”，即一个企业智能大脑，数字化设计、智能化生产、安全化管控、数字化管理、绿色化制造5大平台，通过产业链内外协同，建立集研发、制造、质控、销售、物流、客户服务为一体的“未来工厂”生态体系。</p><p></p><p>用崔永龙的话说，这套体系的核心理念，是把“人机料法环测”的思想核心要素全面扁平化到D-MOM平台上，其中，每一个模块都离不开精益思想，不仅仅是现场的精益，还包括设计、管理、经营各个环节的精益。</p><p></p><p>在此基础上，双环传动下一阶段的主要目标是推进智能化，继续以IT+ET+CT+OT为基础，把云计算平台、工业互联网平台、大数据平台等平台的建设作为重点，循序渐进地完成以下5大关键任务：</p><p></p><p>第一，实现工厂异构网络互联互通。采用工业PON技术，完成双环6个生产基地的人机物料PLC、OPC等控制网络与<a href=\"https://xie.infoq.cn/article/74d931aa859eb9679077f46c3\">5G</a>\"等其他异构网络融合；</p><p></p><p>第二，搭建OT与IT融合的网络管理系统。采用数字孪生技术，实现OT现场生产要素、生产活动、过程控制与信息空间数字化模型孪生交互，打破IT和OT之间的技术隔离和各自为政；</p><p></p><p>第三，构建企业OT- IT融合管控平台。采用工业PaaS技术，分别从OT- IT流程融合等角度，建立企业OT- IT业务平台融合平台架构，一方面实现企业OT域与IT域的设备、系统、工艺、人员、物料等资源从纵向/横向集成，另一方面，实现企业IT业务流程与现场控制流程端到端协同，建立工厂智能计算大脑；</p><p></p><p>第四，打造企业一站式智能APP服务。采用<a href=\"https://www.infoq.cn/article/O01i9lalNBIc3h1RzkuM\">微服务</a>\"技术，开发与部署覆盖企业研发、计划、生产、配送和仓储等16种场景的智能APP服务系统，并按照国家三级等保机制，建立用户安全访问、企业应用、数据、网络和设备安全等信息防护体系；</p><p></p><p>第五，实现信息安全保障。通过国家三级等保机制，实现OT- IT的访问安全、应用安全、数据安全、网络安全和设备安全。</p><p></p><p>崔永龙指出，“<a href=\"https://xie.infoq.cn/article/80716b0fc3940140f6d05fa20\">工业互联网</a>\"和5G是制造业的风口，在过去几年，双环传动把自己作为国内工业互联网发展创新的一个巨大‘试验场’，并且取得了一定突破。而未来，我们将继续引入5G、边缘计算等技术，在进一步优化双环内部生产和服务资源配置的同时，向外输出我们的技术能力，促进传统产业数字化转型升级。”</p><p></p><p>参考链接：</p><p>https://zhuanlan.zhihu.com/p/527337550</p><p>https://new.qq.com/rain/a/20210429A01XTM00</p>",
    "publish_time": "2023-04-07 10:36:21",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "新手用ChatGPT仅需数小时轻松构建零日漏洞，69家专业公司都检测不出来：“不仅能调用开源库，还能彻底重写源代码”",
    "url": "https://www.infoq.cn/article/B0WexiiEyhWzk1i9Dzmz",
    "summary": "<p></p><blockquote>ChatGPT能让 10X 工程师成为<a href=\"https://www.infoq.cn/article/hNs2LxvloB4jaBQEwEL1\"> 1000X 工程师</a>\"，同时也能让菜鸟用 1/1000 的时间编写出危害力十足的恶意软件。</blockquote><p></p><p>&nbsp;</p><p>自去年推出以来，ChatGPT以其撰写文章、诗歌、电影剧本等的能力在技术爱好者中引发轰动。而且只要给它一个写得很好、很清晰的提示，<a href=\"https://www.infoq.cn/article/HFSPasQ7SXZ9QzdFXhGO\">ChatGPT</a>\"甚至可以生成功能性代码。虽然大多数开发者会将该功能用于完全无害的目的，但最近一位自称是恶意软件开发新手的研发人员Aaron Mulgrew，花费短短几个小时，用ChatGPT整了个零日漏洞，可以用来从被攻击的设备中窃取机密数据。令人震惊的是，该恶意软件甚至逃避了谷歌VirusTotal上所有合作供应商的安全检测。</p><p>&nbsp;</p><p>Mulgrew讲道：“如果没有基于 AI 的 Chatbot ，我估计可能需要一个包含 5 到 10 名恶意软件开发人员的团队花费数周时间才能实现这么一个漏洞，尤其是还要逃避所有的安全检测机制。”</p><p>&nbsp;</p><p>这种零日攻击可以针对高价值的个人，渗透并发回其计算机里的重要文件。在实验中，Mulgrew运行可执行文件并成功将数据泄露到 Google Drive，“之所以选择Google Drive，是因为大多数组织都允许本地基础设施接入云服务。”</p><p>&nbsp;</p><p>在其博客文章中，可能因为安全原因，他忽略了“零日”内容，强调验证的目的只是让大家知道：“规避ChatGPT 现有防护有多容易；在不编写任何代码且仅使用 <a href=\"https://www.infoq.cn/article/ZRjMrDXcL4XPskS7CgzJ\">ChatGPT</a>\" 的情况下创建高级恶意软件又有多容易。”</p><p>&nbsp;</p><p></p><h2>“不仅调用了库，还让 ChatGPT 对源代码进行了完全重写”</h2><p></p><p>&nbsp;</p><p>Mulgrew来自一家跨国软件企业Forcepoint，他将自己描述为恶意软件开发的\"新手\"。这次验证，他使用的是Go执行语言，因为Go易于开发，而且自己对它比较熟悉，在需要时可以手动检查代码。</p><p>&nbsp;</p><p>Mulgrew定下的实验目标，是让渗透程序在计算机上查找一个大型PNG文件，再使用隐写术在该PNG文件中埋下入侵者希望窃取的系统敏感文件——例如客户的电子表格或产品路线图，最后将承载着数据的图像上传至由攻击者控制的Google&nbsp;Drive云存储账户。</p><p>&nbsp;</p><p>Mulgrew表示自己不想手写代码，于是只用了“提示工程”。一开始，Mulgrew直接要求ChatGPT开发恶意软件，但聊天机器人的防护机制发挥了作用，它以道德理由直截了当地拒绝执行这项任务。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/15/1535132b7ec35b6646b000a72bf82668.png\" /></p><p></p><p>&nbsp;</p><p>&nbsp;</p><p>由于聊天机器人的护栏或多或少会阻止包含“恶意软件”表述的提示词，所以开发这款渗透工具时必须得使用一些创造性的指令。根据介绍，Mulgrew只用了两次尝试就成功回避掉了限制。</p><p>&nbsp;</p><p>第一个成功的提示是要求生成一些代码来搜索本地磁盘上大于 5MB 的 PNG。这里的设计为 5MB 的 PNG ，是因为这种大小程度足以存储高价值的商业敏感文档（如 PDF 或 DOCX）的片段。</p><p>&nbsp;</p><p>有了查找大于 5MB 的 PNG 的代码，他将其复制回控制台，并要求 ChatGPT 添加一些代码，使用隐写术（Steganography）在大文件中隐藏有价值的信息。于是ChatGPT调用了 Auyer 的现成的Steganographic库来实现它： https: //github.com/auyer/steganography</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/08/0874c61920ec9c2104583c864489a661.png\" /></p><p></p><p>&nbsp;</p><p>&nbsp;</p><p>为了找到要窃取的高价值文档，Mulgrew要求AI编写代码来遍历用户Windows设备上的文档、桌面和AppData文件夹，并找到最大为1&nbsp;MB的所有PDF或DOCX文件。这就保证了整个文档可以被嵌入单一图像当中，并在不引发任何警报的情况下完成“偷渡”。</p><p>&nbsp;</p><p>他写道，“用提示词来组合代码片段是最简单的步骤，我只需要向ChatGPT提交一个个简单的代码片段，让它将其组合起来就行。”</p><p>&nbsp;</p><p>但由于大多数值得窃取的高价值文档可能都大于1&nbsp;MB，所以Mulgrew要求ChatGPT编写代码将这些PDF拆分成一个个100 KB的片段，再将各个片段插入自己的PNG中。这些片段最终全部被泄露到了攻击者的云存储账户中，整个过程用到了“四、五条指示”。</p><p>&nbsp;</p><p>有网友指出这需要对源代码进行完全重写，以增加其对检测的抵抗力，这项工作非常重要，需要花费大量时间。但实际上Mulgrew只是通过给ChatGPT 下达指令，通过简单的“提示工程”就达到了目的。</p><p>&nbsp;</p><p></p><h2>轻松逃避掉专业机构的检测</h2><p></p><p>&nbsp;</p><p>接下来，Mulgrew希望保证自己的最终可执行文件不会被VirusTotal检测到。VirusTotal会通过各种防病毒检查程序检测实际运行的文件，查看其中是否包含恶意二进制文件。</p><p>&nbsp;</p><p>一开始，有5家供应商将文件标记为恶意文件。</p><p>&nbsp;</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d3/d368c138cb4149b8dfd03a0aa744075a.png\" /></p><p></p><p>&nbsp;</p><p>通过一些调整——比如要求ChatGPT将程序的启动时间延迟两分钟，这能骗过部分防病毒工具。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/58/582d901f553c0fccd8e981070a1d6269.png\" /></p><p></p><p>&nbsp;</p><p>&nbsp;</p><p>另外一个方式是利用混淆代码手段。虽然一开始Mulgrew要求ChatGPT混淆代码时，他遭到了拒绝，但将提示更改为要求 ChatGPT 将所有变量更改为随机的英文时，它很乐意执行。最终在未触发任何警报的情况下，Mulgrew绕开了VirusTotal的“法眼”，最终没有一家公司的产品能将这个漏洞“检测”出来。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c3/c3f56f53b399d1e661fd3f6ab413e2a7.png\" /></p><p></p><p>&nbsp;</p><p>&nbsp;</p><p>Mulgrew的说法应该是可信的，毕竟VirusTotal的主要功能是捕捉已知的恶意程序。新的恶意软件往往不会立即激发仪表板。虽然也有部分检测引擎会使用沙箱来捕捉新样本中的恶意活动并触发警报，但技术高超的攻击者还是可以找到回避路径——不靠AI聊天机器人也能做到。</p><p>&nbsp;</p><p>更重要的是，虽然ChatGPT能够识别出“混淆代码以避免检测”等命令并加以阻止，但攻击者们要想使唤这位强大的助手，在提示词中融入更多创意就行。</p><p>&nbsp;</p><p></p><h2>写在最后</h2><p></p><p>&nbsp;</p><p>在 ChatGPT 的帮助下，一名自认是新手的人已经能够在短短几个小时内创建出等效的恶意软件，这是一件令人担忧的事情。在这种发展趋势下，当前的工具集可能会因为 ChatGPT 出现大量恶意软件。</p><p>&nbsp;</p><p>欺骗 ChatGPT 去做它不应该做的事情如此容易，这让一些网友感到害怕，是不是有一天AI还可能“扫描所有文档，然后将它们全部上传到某个云存储上？！那我们就完蛋了！”</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c5/c5651fe0d420937af4d76ea987f8d059.jpeg\" /></p><p></p><p>&nbsp;</p><p>&nbsp;</p><p>Mulgrew表示，虽然他的示例使用了一些让 ChatGPT 绕过现代防御的方法，但我们也不是没有办法来减轻威胁。以下是 ChatGPT 自己关于防范这种攻击的建议：</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/83/836a290a06fa29b1b0f97f0f02e71490.png\" /></p><p></p><p>&nbsp;</p><p>即：监控网络流量（但这种防不了图像隐写）、阻止可疑流量、实施访问控制、使用加密、培训员工、定期检测和升级。另外还可以实施“零信任”机制，通过清除相关图像，防止包含隐写术的图像从组织里泄露出去。&nbsp;</p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://www.theregister.com/2023/04/04/chatgpt_exfiltration_tool/\">https://www.theregister.com/2023/04/04/chatgpt_exfiltration_tool/</a>\"</p><p><a href=\"https://www.forcepoint.com/blog/x-labs/zero-day-exfiltration-using-chatgpt-prompts\">https://www.forcepoint.com/blog/x-labs/zero-day-exfiltration-using-chatgpt-prompts</a>\"</p>",
    "publish_time": "2023-04-07 10:40:54",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "如何保证 Java 应用安全？",
    "url": "https://www.infoq.cn/article/SaSzIFWsdTYEiGzADCq1",
    "summary": "<p>“请问我怎么才能保证 Java 程序内存中密码的安全呢？”如果你也过有类似的问题，并且在网上搜到一些并不十分完善却又无可奈何的答案，说明你就是 Java 程序安全性问题的 stakeholder。</p><p></p><p>这个问题的标准答案是 Java 机密计算技术，它将机密计算技术引入 Java 的世界，为 Java 程序的安全性带来了重大的提升。基于此，龙蜥社区云原生机密计算 SIG 推出了 Java 机密计算的具体实现技术——Teaclave Java TEE SDK， 以下简称 Teaclave Java。该技术具有以下显著优点：</p><p></p><p>全场景安全性。当用户有机密计算硬件支持时，Teaclave Java 可以实现最高安全等级的 Java 可信计算；当用户没有相关硬件时，退化为安全沙箱隔离级别的可信计算，亦可有效保护用户的敏感数据和计算过程的安全性。开发和构建简单。基于 SPI 的纯 Java 编程模型，一键式构建，将 Java 机密计算开发构建门槛一降到底。</p><p></p><p>Teaclave Java 已经过企业级内部场景的验证，在 Apache 社区开源。描述本技术的论文由龙蜥社区云原生机密计算 SIG 与上海交通大学、大连理工大学合作发表在软件工程顶会 ICSE 2023（https://conf.researchr.org/home/icse-2023）上，并且获得了本届会议的 ACM SIGSOFT 杰出论文奖。这是 2020 年以来，龙蜥社区云原生机密计算 SIG、上海交通大学、大连理工大学首次获此殊荣。</p><p></p><h2>问题的本质</h2><p></p><p></p><p>这个问题的本质是如何在具有风险的运行时环境中安全地使用敏感数据。当我们在运行时将密码解密后，密码就会以明文的形式存在于内存中，也就是 Java 的堆上，如图 1 的左半部分所示。如果系统遭受攻击，比如 2021 年声名大噪的 log4j 漏洞攻击，Java 堆上的内容就会被窃取。即便没有被攻击，在为了性能诊断而做 heap dump 时也有可能主动将敏感信息泄漏出去。所以将诸如密码这样的安全敏感信息暴露在普通运行环境具有高度的风险。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/28/286ca99a6d25c26e3c67e72b393e8fba.png\" /></p><p></p><p>一种保护思路是尽可能地缩短明文密码在内存中的存放时间，以缩短敏感信息暴露的时间窗口。</p><p></p><p>如图 1 右半部分所示，在使用完密码后，及时将其从内存中销毁，这样会比先前更加安全一些。因为密码是文本信息，会用字符串类&nbsp;java.lang.String&nbsp;保存。Java 的 String 是一种 immutable 类型，创建后不能更改内容，所以没有可以重置内容的 API。要销毁密码只能通过反射将 String 类内部保存字符内容的数组内容置空，从而将密码内容从 Java 堆上抹去。直接将密码字符串设置为 null 是没有用的，这样只是把 String 变量的指针设为空，对于 Java 堆上的密码数据没有任何影响，只有等到下次垃圾回收时才有可能将密码数据从堆中清除。</p><p></p><p>另一种方法是用 char 数组保存密码，而不是 String 类，这样就不必调用反射，让销毁更加便利。还有一种方法是用 byte 数组保存密码，因为其明文是字符编码而非人可读的字符，所以会更难被人看懂。</p><p>这些就是目前可以从网络上搜到的解决方法，本文将它们称为“朴素”的 Java 密码保护方案。因为这些方案只是缩短了明文密码在 Java 堆上的生存时间，并没有真正将明文密码保护起来。而且“及时”一词有很大的弹性，开发人员未必能准确地判断出何时才是及时。</p><p></p><p>更具有典型性的案例就是著名的 log4j 漏洞问题（https://nvd.nist.gov/vuln/detail/CVE-2021-44228）。攻击者可以利用 log4j 2.14 的漏洞将恶意 class 文件上传到服务器并通过 Java 的动态类加载机制运行，从而窃取 Java 堆中保存的服务器私钥。有了私钥，服务器与客户端之间的所有通信内容对于攻击者都如同明文了。</p><p></p><p>在以上两个例子中，需要在运行时保护的密码和密钥都是安全敏感的数据。而在实际场景中，保护范围并不仅限于敏感数据，还有可能扩大到运算过程。比如鉴权认证场景中，需要保证认证的过程可信，不能被攻击者篡改。再比如云服务的用户将自己的算法部署上云时，虽然部署的制品可以加密，以保护传输和存储时的安全，云厂商提供了固若金汤的安全防护以免受外部攻击，但是用户依然会担心云厂商有没有在运行时窥探用户的计算过程，是否存在监守自盗的可能。</p><p></p><p>由此可见，保护 Java 应用中的安全敏感数据和运算并不是一件遥远的需求，而是具有迫切的现实意义的需求。对于云计算的供应商，让用户相信其敏感数据和运算对于云厂商自己也是不可见的黑盒亦具有重大的商业价值。</p><p></p><h2>Java 机密计算现状</h2><p></p><p></p><p>保护运行时的敏感数据并不是一个新鲜话题，而属于迄今已发展了 20 多年的技术——机密计算的一部分。机密计算是一种提供硬件级的系统隔离，以保障数据安全和程序运行安全的技术。机密计算将执行环境划分为富执行环境（Rich Execution Environment，REE）和可信执行环境（Trusted Execution Environment, TEE），认为 REE 和 TEE 应该相互隔离，TEE 需要通过硬件加密以保证外界无法知晓其中的内容。安全敏感的内容应该放在 TEE 中运行，其他内容则在 REE 中执行。</p><p></p><p>这套机制早在 1999 年就已提出，不过早期的硬件加密技术能力有限，仅有支持执行加解密程序的 TPM（可信任的平台模块，Trusted Platform Module）硬件。2008 年 Arm 发布 TrustZone 技术白皮书，以支持 Arm 平台的通用型机密计算任务。2015 年Intel也推出了带有支持通用应用加密的 SGX（软件保护扩展，Software Guard Extension）芯片的硬件设备，2021 年 SGX 升级为可支持 1T 内存、具有更高性能的SGX2。</p><p></p><p>机密计算的核心理念是在具有被攻击风险的运行时环境中提供一块安全区域供安全敏感程序运行，实现了安全敏感数据和程序在传输、存储和计算全流程的安全可信。目前机密计算在隐私安全、区块链、多方计算、IoT 和边缘设备，以及个人计算设备上均有广泛的应用和广阔的前景。</p><p></p><p>看起来机密计算技术正是解决 Java 程序安全性问题的标准答案，那么我们是否能够在 Java 应用中应用机密计算技术呢？</p><p></p><h4>Occlum – 在 TEE 中放入 JVM 和应用整体</h4><p></p><p></p><p>SGX、TrustZone 等为通用型机密计算提供了硬件基础，Intel、微软等开源的驱动和SDK 则为通用型机密计算提供了软件基础。基于这些软硬件基础，开发者已经可以在软件应用中使用机密计算。但是机密计算对于 Java 应用并不友好，因为 TEE 中只能运行 native 程序，所以 Java 程序并不能直接运行于 TEE 中。要在 TEE 中运行 Java 程序，就必须先在 TEE 中启动一个JVM，然后在 JVM 上执行 Java 程序。那么是否能在 TEE 中运行 JVM 呢？答案是肯定的，那就是 Occlum，其原理如图 2 所示。</p><p></p><p>Occlum 是介于 TEE 底层 SDK 与 JVM 之间的一层 LibOS，作为操作系统支持普通 JVM 在 TEE 中的运行。用户将包含了机密代码在内的整个 Java 程序部署在 TEE 中，由 Occlum 支持 JVM 执行。图 2 右半部分给出了部署的结构，其中黄色的 APP 代表整个 Java 应用及其所需三方库，红色圆圈代表可信代码。应用通过 REE 中的启动器——通常只是一个很小的命令行工具，启动执行。这种方案的兼容性好，用户基本不需要修改原有代码即可获得机密计算支持。但是缺点也很明显——放入 TEE 的代码太多，会导致两个问题：</p><p></p><p>安全性下降。原本需要在 TEE 中执行的可信程序可能并不多，但是此方案需要将所有的 Java 程序、三方库、JVM 和 LibOS 全部放入 TEE，导致 TCB（可信计算基，Trusted Computing Base）太大，安全性并不理想。TCB 是安全领域衡量安全性的重要指标，指信任的代码量。TCB 越大，其中可能存在安全隐患的代码就越多，程序的安全性就越差，所以 TCB 越小越好。以 log4j 攻击为例，Occlum 仍然无法对其免疫。因为 log4j 库与机密代码并没有被分隔在不同的执行环境中，而都部署在 TEE 中，所以攻击者上传的恶意类文件也会位于 TEE 中，仍然可以从内存中访问到私钥。性能下降。TEE 的硬件不是通用硬件，与 REE 相比存在性能退化，所以将应用整体放入 TEE 中会导致整个应用的性能下降。但用户原本的需求只是局部加密，为了局部加密而导致整体性能下降会增大应用机密计算的成本。虽然一般用户可以接受为了安全而产生的部分性能退化，但是对于过度加密产生的额外性能退化会感到难以接受。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b6/b61773a290302665b5a1f744ce83c94a.png\" /></p><p></p><p>综上可见，Occlum 方案虽然具有简单易行的优势，但是其在安全性和性能方面的缺点却是其投入实际应用的主要障碍。</p><p></p><h2>Teaclave Java TEE SDK – 在 TEE 中仅放入可信代码</h2><p></p><p></p><p>因为在 TEE 中整体支持 JVM 和全部应用程序的方案会在 TEE 中执行过多的代码，导致安全性和性能下降而难以投入实用，能不能换种思路，仅将可信代码放入 TEE 呢？考虑到 TEE 中只能执行 native code，那么是不是可以将可信代码从 Java 代码直接编译为 native code 放入 TEE 运行呢？答案是肯定的，这就是本文的主角Teaclave Java TEE SDK，以下简称Teaclave Java。</p><p></p><p>Teaclave Java 是由 JVM 团队开发的 Java 机密计算开发框架和构建工具链，可以一站式快速实现 Java 机密计算应用的开发和构建。退一步考虑，即使用户没有支持机密计算的硬件环境，Teaclave Java 也可以实现安全沙箱隔离，有效保障敏感数据和程序的运行时安全。</p><p></p><p>Teaclave Java 的关键技术特性有：</p><p></p><p>模块分隔、机密计算服务化，如图 3 所示。简洁完善的机密计算服务生命周期管理API。Java 静态编译机密内容。隐藏实现细节、自动生成所有辅助代码。</p><p></p><p>在这些技术的支持下，Teaclave Java 能够将从普通模块到机密模块的 Java 模块间服务调用转为从普通模块到机密 native 库的函数调用，如图 4 所示。</p><p></p><h4>模块分隔、机密计算服务化</h4><p></p><p></p><p>Teaclave Java 将应用代码分为三个模块，Host、Enclave 和 Common。Host 中是普通的安全非敏感程序，Enclave 中是安全敏感程序，Common 中则是前两者都会用到的公共代码。这种模块划分方式一是为了让开发者感知到代码的安全性区分，二是为了构建时针对不同模块使用不同工具链的便利性。</p><p></p><p>Host 和 Enclave是解耦合的，它们之间只能通过 Java 的 SPI（Service Provider Interface）机制交互，而不能直接调用。机密计算的实现在 Enclave 模块中被封装成为了服务，其接口声明定义在 Common 模块中，并用@EnclaveService 注解标识。当 Host 中的程序需要用到某一机密计算任务时，就可以先加载服务实例，再调用相应的函数。这一结构组织关系如图 3 所示。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a1/a1f55e64930627aea156ee9addc23f2a.png\" /></p><p></p><p>例如我们可以在 Common 中声明一个如代码块 1 所示的机密计算服务接口，其中提供了用于认证加密的密码是否有效的 API，authenticate 函数。该函数接受一个用户传入的加密的密码，返回该密码的认证结果。</p><p></p><p>代码块 1：在 Common 模块定义机密计算服务接口声明示例</p><p><code lang=\"text\">@EnclaveService\npublic interface AuthenticationService {\n    /**\n     * Given an encrypted input password, check if it is the correct password.\n     * @param inputPwd the encrypted password to be authenticated\n     * @return true if the given password is correct.\n     */\n    boolean authenticate(String inputPwd);\n}</code></p><p></p><p>AuthenticationService 接口的具体实现则在 Enclave 模块的 AuthenticationServiceImpl 类中定义，如代码块 2 所示。该类的 authenticate 函数先使用私钥对输入的加密字符串解密，获得明文结果，然后将其和内存中保存的正确的密码比对，再返回是否一致的检查结果。该类中保存的正确密码值和私钥都是安全敏感数据，authenticate 函数的实现也是安全敏感运算。它们都将在 TEE 中运行，以黑盒的形式提供给外部使用。从外部只能看到加密的输入数据和返回的判定结果，而无法窥探到实际的运行过程和数据。</p><p></p><p>代码块 2 在 Enclave 模块定义机密计算服务接口实现示例</p><p><code lang=\"text\">public class AuthenticationServiceImpl implements AuthenticationService {\n\nprivate String pwd = \"somePwd\"; // assume it's got at runtime.\n\n@Override\npublic boolean authenticate(String inputPwd) {\n    String decryptedInputPwd = decrypt(inputPwd);\n    return pwd.equals(decryptedInputPwd);\n}\n\nprivate static String decrypt(String inputPwd) {\n    return inputPwd; // assume it's decrypted with private key\n}\n}</code></p><p></p><p>Host 模块使用机密计算服务的代码示例如代码块 3 所示，从中可以看到对机密计算服务 AuthenticationService 接口的使用和普通的 SPI 接口别无二致，依然是加载服务、调用函数、根据结果执行不同的动作等过程。稍有区别的地方在于先要创建出机密计算环境 Enclave 的实例，然后从中加载机密计算服务实例，由此将机密计算的服务实例和环境实例绑定，最后再销毁环境。这些机密计算环境生命周期管理的 API 由Teaclave Java 提供。从代码块 3 中可见，在 Host 模块中无需感知密码和私钥究竟是什么，也不用了解认证的过程，只是将认证函数当作黑盒服务调用。</p><p></p><p>代码块 3 从 Host 模块使用机密计算服务示例</p><p><code lang=\"text\">public class Main {\n    public static void main(String[] args) throws Exception {\n        Enclave enclave = EnclaveFactory.create();\n        Iterator services = enclave.load(AuthenticationService.class);\n        String pwd = \"encryptedPwd\"; // assume this is an encrypted password\n        while (services.hasNext()) {\n            AuthenticationService authenticationService = services.next();\n            if (authenticationService.authenticate(pwd)) {\n                System.out.println(\"Passed\");\n            } else {\n                System.out.println(\"Rejected\");\n            }\n        }\n        enclave.destroy();\n    }\n}</code></p><p></p><p>以上三部分代码就构成了一个完整的 Java 机密计算应用。从开发的角度看起来与编写一个普通的 SPI 服务调用的应用基本一样，只需要专注于业务逻辑的开发即可，并不需要学习机密计算底层的内容。因此 Teaclave Java 将 Java 机密计算的开发门槛降低到了 0。</p><p></p><h4>构建机密计算应用</h4><p></p><p></p><p>Teaclave Java 提供了一套完整的构建工具链以支持上文所述的编程模型，用户只需输入几个简单的 maven 命令即可完成全部构建任务。构建工具链将非机密代码和机密代码分别编译为 Java bytecode 产物和可部署于 SGX 中的 native 库，以及自动生成完成机密计算服务调用所需的所有的辅助代码。</p><p></p><p>图 4 展示了 Teaclave Java 的构建部署视图，主要包括三方面内容：</p><p></p><p>1）Host 和 Common 模块被编译为普通的 Java bytecode，部署在普通环境中执行。</p><p>2）Enclave 和它所使用到的 Common 模块中的内容被编译为 native 机密库文件，部署在 SGX 硬件中执行。</p><p>3）从 Java bytecode 到 native code 之间并不能直接调用，而需要一些适配转换工作，包括：</p><p>服务代理：通过J ava 的动态代理机制将Host模块中的机密计算服务调用代理到实际的native函数上，并完成上下文环境的同步、服务参数和返回值的序列化反序列化等工作。</p><p>JNI 层：Java 侧的 native 函数声明、native 侧的 JNI 函数声明和到机密库函数的调用等辅助代码。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/bc/bc882cfd43626c3bd7ecdeecf269c733.png\" /></p><p></p><p>这些适配转换调用的代码在构建中被自动生成，分别部署在普通环境和 SGX 中，在图 4 中它们被用蓝色标出。</p><p></p><p>构建过程中的重要一步是将机密部分的 Java 代码编译为 native 代码的 Java 静态编译。</p><p></p><h4>Java 静态编译</h4><p></p><p></p><p>Java 程序原本需要在 JVM 上才能运行，但是 Java 静态编译技术可以将 Java 程序（包括JDK库依赖和三方库依赖）加上必要的运行时支持代码一起编译为 native 代码，然后直接运行。以此实现了 Java 程序无需 JVM 的轻量级运行。</p><p></p><p>Teaclave Java 采用了目前最成熟的 Java 静态编译技术——Oracle 主导的开源项目GraalVM 进行 Java 静态编译。GraalVM 首先对 Java 程序做可达性分析，找到从程序入口开始的所有可能执行到的代码范围，然后仅编译这些可达的代码，得到一个native 制品（被称为 native image）。程序入口对于可执行程序来说是 main 函数，对于库文件来说是暴露的公共 API。具体到 Teaclave Java 场景，入口就是开发者定义的机密计算服务函数，也就是 Enclave 模块中定义的机密计算服务接口的实现函数。这些接口实现会用到三种依赖，Common 模块中的代码、某些 JDK 库以及其他Java 三方库，但是只会用到这些依赖的部分代码，而非全部代码。</p><p></p><p>GraalVM 就会将实际用到的代码分析出来，与机密计算服务的实现代码和 GraalVM 提供的运行时支持（被称为Substrate VM）一起编译为 native image。但是 GraalVM 是面向通用场景和硬件平台的，所以 Teaclave Java 为其额外提供了针对 SGX 硬件平台的适配和机密计算需求的优化。当我们编译出 native image 后，会发现其具有了一些特别的性质：</p><p></p><p>TCB 下降。GraalVM 仅编译从机密计算服务入口可达的代码，因此与 Occlum 将LibOS、JVM 和 Java 应用全部放入 TEE 的方案相比，TCB 大幅降低了。安全性提升。Native image 在运行时有自己的 native 内存堆，它与 Java 堆是相互隔离的，从 Java 应用中很难被访问到（Java 通过 Unsafe 接口依然可以访问 native 内存，但是难度提升很多）。而且 Java 静态编译去掉了 Java 的动态特性，只有在编译时经过显式配置的反射和动态类加载才会生效，其他运行时的动态行为是无效的。Log4j 漏洞攻击在 native image 上本身就是无效的。因此native image可以被视作一个安全沙箱，即使没有 SGX 硬件环境，native image 相比 Java 程序也提升了安全性。部署在 SGX 里之后，TEE 的安全性会更高，因为消除了Java动态特性对 TEE 安全性的威胁。性能提升。GraalVM 的 Java 静态编译对代码有相当程度的编译优化，其运行时性能大致可以达到 JVM 的 C1 优化水平，再加上无需启动 JVM、没有类加载过程、没有解释执行、没有 JIT 消耗资源等等，在执行短小的任务时与 Java 程序相比能有 1 个数量级的性能提升，内存也有大幅削减。</p><p>这些性质可以有效地提升机密程序的安全性，提升了 Teaclave Java 的实用性。</p><p></p><h2>Teaclave Java 技术评估</h2><p></p><p></p><p>以上介绍了 Teaclave Java 提供的 Java 机密计算编程模型和采用的构建方式等技术问题，那么最终实现的效果如何呢？本文以 log4j 漏洞攻击为例分析 Teaclave Java 的功能有效性。</p><p></p><p>在 TCB 改进和运行时性能分析方面，我们准备了如表格 1 所示的 10 个测试。前 4 个“app-”前缀的是我们自己写的简单应用，将它们当作机密程序，以各自的 main 入口当作普通程序。后 6 个“ct-”前缀的用例则采用了著名开源加密框架 BouncyCastle&nbsp;（https://www.bouncycastle.org/java.html）的单元测试，我们提供了单一入口调用这些测试，将测试入口当作普通程序，单元测试当作机密程序。</p><p></p><p></p><p>（表&nbsp;1&nbsp;/ 测试用例描述）</p><p></p><p>Java 机密计算框架则采用了 OcclumJ 和 Teaclave Java 进行对比。OcclumJ 是我们实现的一种介于 Occlum 和 Teaclave Java 之间的机密计算模型，采用 Teaclave Java 的模块化和机密计算服务化的模型，但是不做 Java 静态编译，而是在 TEE 中以 Occlum 方式运行机密计算服务。</p><p></p><h4>功能有效性评估</h4><p></p><p></p><p>图 5 给出了 log4j 漏洞攻击的原理示意（a 子图）和 Teaclave Java 防范 log4j 漏洞攻击的原理（b子图）。对于一个普通的 Java 应用服务，它和客户端通过三个步骤交互。</p><p></p><p>1）客户端从服务端获取公钥。</p><p>2）客户端用公钥对消息加密，然后将密文发送给服务端。</p><p>3）服务端从运行时内存中拿出私钥解密消息，然后再处理消息内容。假设服务端使用了 log4j-2.14.x 版本做日志记录，其中的漏洞允许攻击者诱导 log4j 从远程服务器下载指定的恶意 class 文件（图 5-a中的步骤4、5、6），然后动态加载恶意类，从 Java 堆内存上获取到私钥（步骤7）传给攻击者。</p><p></p><p>有了服务器的私钥，服务器和客户端之间的所有通信对于攻击者而言都如同明文了。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c7/c7d22a774cee45393a2b1f7a139869fd.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/fd/fd7d18bc02d7243b2c8b28f76917a203.png\" /></p><p>（图 5 /&nbsp;Java 机密计算保护应用免 受Log4j 漏洞攻击示意图）</p><p></p><p>图 5-b 展示了 Teaclave Java 如何保护应用服务端免受 log4j 漏洞攻击的威胁。Teaclave Java 将应用的普通代码放在 REE 中，安全敏感的解密和私钥放在 TEE 中，客户端送来加密消息会被 REE 中的代理服务转到 TEE 中进行解密。此时当攻击者发起 log4j 攻击时，因为 Log4j 部署在 REE 中，恶意代码也只能在 REE 中运行，而无法拿到 TEE 内存上的私钥，攻击失效。假如机密代码也使用了 log4j 记日志，导致 log4j 运行在 TEE 中运行会发生什么呢？</p><p></p><p>此时 log4j 将攻击者恶意代码下载到了 TEE 中，但是因为 Teaclave Java 采用了 Java 静态编译技术，恶意代码在编译时是未知的，不会被编译到 native image 中。而 Java 静态编译技术并不支持对 native image 中不存在的代码进行动态加载执行，所以即便恶意类被下载到了 TEE，也不会被执行。因此在这种场景下 Teaclave Java 支持的机密计算依然是安全的。但是如果采用了 Occlum 方案，因为 TEE 中有了 JVM，就可以动态加载恶意代码并运行，攻击就会成功。</p><p></p><p>再退一步，当在没有 SGX 硬件为TEE加密时，native image 依然是一个 native 沙箱，恶意 Java 代码无法轻易从 native 内存中拿到安全敏感内容。</p><p></p><h4>TCB 评估</h4><p></p><p></p><p>因为 Teaclave Java 不再需要 LibOS 和 JVM，机密代码部分也是按需编译部署。OcclumJ 方案虽然采用了分模块模型，但是并没有做静态分析，因此只是模块级别的代码划分，虽然较 Occlum 完全不划分有所改进，但是与 Teaclave Java 函数级的划分相比仍有相当大的差距。图 6 展示了 OcclumJ 和 Teaclave Java 放入 TEE 的二进制编译产物的大小对比。蓝条是 OcclumJ 的结果，橙条是 Teaclave Java 的结果，图中的 Lejacon 是 Teaclave Java 在论文中的代号。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2f/2fe5e8d6f7df0780da6dc3d0cfeb1d37.png\" /></p><p></p><p>由图 6 中的对比数据可见，Teaclave Java 的编译后 TCB 大小仅为 Occlum 的大约1/20 到 1/10。考虑到编译时 native 代码的膨胀问题，两者实际的函数数量差距更大，所以 Teaclave Java 的 TCB 低于 Occlum 一个数量级，从而具有了更高的安全性。</p><p></p><h4>运行时性能评估</h4><p></p><p></p><p>因为 native image 会直接以 native 代码的形式运行，省去了包括 JVM 启动、类加载、解释执行等步骤的 Java 程序的冷启动过程，所以启动速度会非常快。如果要执行的机密代码较少，会很快执行完毕。但是 native image 的代码编译质量不如 JVM 的 C2，所以当程序执行的时间足够长，Java 代码被 JIT 充分编译后，native image 的运行时性能就会随着时间的增长而与 Java 程序越来越接近，然后被超越。所以 Teaclave Java 在小型应用的性能远优于 OcclumJ，但是在长时间执行的应用方面该优势就会缩小。</p><p></p><p>图 7 就展现出了这一特点。图中的蓝线是机密代码部分采用 OcclumJ 模型的执行时间，黄线是采用 Teaclave Java 模型的执行时间，绿线是在普通环境中在普通 JVM 上直接运行的时间。程序在 TEE 中运行的时间要大于普通环境，主要因为增加了机密环境的创建、机密内存的分配等开销，我们将其统称为机密环境开销。黄线在执行时间较短的场景中保持了与绿线接近的性能，说明 Java 程序冷启动的开销与 native &nbsp;image 的机密环境开销差不多可以相抵。当程序执行时间较长时，冷启动开销被摊薄，但是机密环境开销与TEE内存使用量成正比，所以黄线较绿线在最后三个测试用例上的上升线条更陡峭。</p><p></p><p>图 8 给出了 OcclumJ 和 Teaclave Java 的运行时内存使用量对比。OcclumJ 的内存消耗包括 LibOS、JVM 和应用三部分，而 Teaclave Java 模型的内存消耗只有应用和 native image 中的轻量级运行时。更简化的结构为 Teaclave Java 模式的机密计算带来了更少的内存消耗。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b7/b76489453d64f493be359682468505ea.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2b/2b691aee9a5696c098f941ffe5926e58.png\" /></p><p></p><h2>总结</h2><p></p><p></p><p>Teaclave Java 是一个使用简单、效果显著、性能良好的 Java 机密计算解决方案，能够帮助用户彻底解决保护 Java 应用中的安全敏感内容和运算的问题。Teaclave Java 具有硬件宽容性，当具备 SGX 硬件环境时，可以使 Java 用户也能像其他 native 语言用户一样享受到机密计算带来的最高等级运行时安全保护；在缺少机密计算的硬件环境时，仍然可以提供安全沙箱对机密代码实施内存隔离，以避免安全敏感内容直接暴露。可以说，Teaclave Java 就是保护 Java 应用中敏感数据和运算安全的标准答案。</p><p></p><p>Oracle 已经把 GraalVM 的 Java 静态编译技术贡献给了 OpenJDK，预计在 JDK 21 会合入 OpenJDK 主干。因此在未来 Teaclave Java 方案就可以获得 JDK 的原生支持。我们也计划向 Java 社区提交关于增加机密计算规范的文件，希望可以将 Teaclave Java 的机密计算模型上升为Java原生的机密计算方案。</p><p></p><p>本技术发表的论文为：Xinyuan Miao, Ziyi Lin, Shaojun Wang, Lei Yu, Sanhong Li, Zihan Wang, Pengbo Nie, Yuting Chen, Beijun Shen, He Jiang. Lejacon: A Lightweight and Efficient Approach to Java Confidential Computing on SGX. ICSE 2023.</p><p>论文链接：</p><p>https://ddst.sjtu.edu.cn/Management/Upload/[News]a845acae286b470bb55013c1b5e425e2/20232101456536725sSV.pdf</p><p></p><p>Teaclave Java 项目的源代码已经贡献到了 Apache 社区，加入机密计算框架Teaclave 项目，目前正在开源孵化中。</p><p>项目链接：https://github.com/apache/incubator-teaclave-java-tee-sdk</p><p>龙蜥社区云原生机密计算 SIG 主页：</p><p>https://openanolis.cn/sig/coco</p><p></p><p>作者介绍</p><p>林子熠，云原生机密计算 SIG  Maintainer。</p>",
    "publish_time": "2023-04-07 11:03:51",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "谷歌宣传自家AI超算比对手更快；ChatGPT泄露三星芯片机密 | 每周芯片要闻",
    "url": "https://www.infoq.cn/article/i4rFBeE6SXULIqVDY4qE",
    "summary": "<p></p><h2>谷歌母公司Alphabet宣称其AI超算性能超过Nvidia</h2><p></p><p></p><p>本周二，谷歌母公司Alphabet在一篇论文中表示，一台搭载了谷歌自研TPU（AI专用加速芯片）的超级计算机性能击败了对手Nvidia的同类超算。</p><p>&nbsp;</p><p>这台超算安装了超过4000颗谷歌TPU的第四代型号（TPU v4），对比基准则搭载了Nvidia A100 GPGPU——A100芯片是OpenAI用来训练GPT、ChatGPT大模型的基础设施。论文数据显示前者性能比后者提升20%-70%，能耗比则提升了30%-90%。但值得注意的是，Nvidia已经推出了A100的下一代产品H100，其性能预计为前者4倍之多。谷歌在两台基于TPU v4的超级计算机上训练了PaLM，该公司迄今为止公开的最大语言模型。此外，知名AI图像生成服务提供商Midjourney也在使用谷歌的这套系统训练自己的模型。</p><p>&nbsp;</p><p>谷歌还暗示，其下一代TPU将能够与Nvidia的H100芯片对抗。</p><p></p><h2>三星半导体机密数据通过ChatGPT外泄</h2><p></p><p></p><p>近日，韩国媒体报道三星内部发生三起ChatGPT导致的数据泄漏案例。三星电子半导体部门的职员执行半导体设备测量资料库下载程序源码时出错，结果该职员将出错原始代码复制到ChatGPT询问解决方案。另一位职员则将与产量、不良率相关的程序源码复制到ChatGPT，以获取优化方案。第三起泄漏则是因为一位职员将会议内容录制文件输入到ChatGPT以获取纪要。</p><p>&nbsp;</p><p>根据三星内部公告通报，此类操作会导致相关数据传送到ChatGPT服务器，并可能让敏感机密外泄。公司已采取措施防止此类事件继续发生，必要时甚至会切断内网与ChatGPT的连接。该事件也引发企业同行关于生成式大型模型在企业应用中引发泄密风险的担忧和讨论。</p><p></p><h2>中国敦促WTO审查美国主导的芯片出口限制</h2><p></p><p></p><p>中国WTO代表本周在WTO例会表示，日本、荷兰与美国应向WTO报告芯片出口限制计划与后续措施的细节，并敦促WTO加强对此事的监督。中国商务部也表示，严重关注日本对芯片制造设备的出口限制，要求日本纠正其错误做法。日本刚刚在上周宣布将限制23种半导体设备的出口，荷兰在上月也公布了类似计划，两国的举措均为响应美国的要求而制定。但三国的出口限制举措违反了WTO组织的公平透明原则，助长了美国在这一领域的技术霸权主义行径。</p><p></p><h2>中国启动对美光公司的网络安全审查</h2><p></p><p></p><p>3月31日，网络安全审查办公室表示，为保障关键信息基础设施供应链安全，防范产品问题隐患造成网络安全风险，维护国家安全，依据《中华人民共和国国家安全法》《中华人民共和国网络安全法》，网络安全审查办公室按照《网络安全审查办法》，对美光公司（Micron）在华销售的产品实施网络安全审查。美光公司是全球最大的存储芯片制造商之一，2022财年营收超过300亿美元。</p><p></p><h2>欧盟即将为欧洲芯片法案开绿灯</h2><p></p><p></p><p>媒体周五报道，欧盟立法部门即将通过总额430亿欧元的半导体产业刺激政策，《欧洲芯片法案》。该法案最初提交于去年，其目标是通过欧盟国家共同提供的刺激措施提振欧洲半导体产业，在未来十年内将欧盟在全球芯片产量中的份额翻倍，达到20%。</p><p>&nbsp;</p><p>该法案将资助先进芯片工厂、芯片研究和设计企业等，覆盖整个半导体产业链。业界认为该法案是对美国《芯片与科学法案》的回应，后者对半导体企业在美国设厂提供了一系列补贴。欧盟也希望新的政策能够帮助欧洲汽车制造产业摆脱对美国和东亚芯片产能的依赖。</p><p></p><h2>去年中国半导体产业投资额1.5万亿元，37%流向芯片设计</h2><p></p><p></p><p>CINNO Research本周发布最新统计数据，显示2022年中国（含台湾）半导体项目投资额约1.5万亿元人民币，其中37%投向芯片设计领域，25%投向芯片制造领域。全部投资中，内地资金占比超过75%，台湾、江苏与广东三地投资额占比超过10%，分列前三名。</p>",
    "publish_time": "2023-04-07 14:15:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "一文速览汽车技术领域新动态！（4.4-4.7）",
    "url": "https://www.infoq.cn/article/rVkTzX9EYGF3ypAYPv6f",
    "summary": "<p>红旗首款全国产电驱用 1200V 塑封 2in1 碳化硅功率模块 A 样件完成试制；百度新一代自动驾驶云产品发布，助力开启智能驾驶量产时代；技术、智能大升级，比亚迪 2023 款 e2 正式上市；捷豹路虎中国与阿里云宣布达成全面合作……汽车界又有哪些新动向？我们来看看！</p><p>&nbsp;</p><p></p><h4>红旗首款全国产用 1200V 塑封 2in1 碳化硅功率模块 A 样件完成试制</h4><p></p><p></p><p>据红旗官方发布，研发总院新能源开发院功率电子开发部与中国电子科技集团第 55 研究所联合开发的红旗首款全国产电驱用 1200V 塑封 2in1 碳化硅功率模块 A 样件试制完成，达成<a href=\"https://www.infoq.cn/article/O84DgKBrIy2TTGG3F9uF\">电驱</a>\"用碳化硅功率半导体设计与生产全自主化、全国产化，打破了国际芯片垄断。据了解，塑封 2in1 功率模块 A 样件率半导体凭借其耐高压、低损耗、耐高温、高频化等材料优势，成为实现<a href=\"https://www.infoq.cn/article/O84DgKBrIy2TTGG3F9uF\">新能源电驱</a>\"系统行业领先的核心路径。应用高密度高可靠元胞结构、芯片电流增强技术、高可靠碳化硅栅氧制备工艺、精细结构加工工艺等，碳化硅芯片比导通电阻达到 3.15mΩcm2 ，导通电流达到 120A ，技术指标达到国际先进水平。</p><p>&nbsp;</p><p></p><h4>百度新一代自动驾驶云产品发布，助力开启智能驾驶量产时代</h4><p></p><p></p><p>官方消息，百度正式发布了新一代自动驾驶云产品——Apollo Cloud 2.0。Apollo Cloud 2.0 是一款面向车企提供智驾量产全流程云服务的产品，具有精准合规、多模态大模型、城市级仿真三大核心优势，为用户提供量产域的自动驾驶云服务，助力车企智驾业务跨越产业鸿沟，实现快速量产。据了解，Apollo Cloud 2.0 具备文心大模型、仿真引擎、自动标注、模型训练、数据回放、无限里程、难例挖掘、工作流引擎等 12 种核心技术，配套海量数据资源，赋能车企量产阶段数据合规、海量数据挖掘提纯、城市级仿真、算法研发、车辆运营监管等应用场景。通过整合式的服务，让自动驾驶开发变得更智能、更高效、更简单，助力车企自动驾驶“从有到优”，实现数据闭环、合规闭环和场景闭环，抢占智驾服务市场先机。</p><p>&nbsp;</p><p></p><h4>科大讯飞：目前已建成 4 城 7 中心深度学习计算平台</h4><p></p><p></p><p>4 月 6 日，<a href=\"https://www.infoq.cn/article/84ENVhVB1WXdave2g76g\">科大讯飞</a>\"在互动平台表示，在算力平台方面，科大讯飞于 2009 年开始算力基础设施建设，在总部自建有业界一流的数据中心，目前已建成 4 城 7 中心深度学习计算平台。科大讯飞的算力不仅完全满足 AI 算法模型训练，还面向开放平台数百万开发者和其他行业伙伴提供相关 AI 服务的需求。此外，在工程技术方面实现了百亿参数大模型推理效率的近千倍加速，为未来更大更多认知智能大模型技术经济实惠规模化应用提供了可能。</p><p>&nbsp;</p><p></p><h4>技术、智能大升级，比亚迪 2023 款 e2 正式上市</h4><p></p><p></p><p>4 月 6 日，比亚迪 2023 款 e2 焕新上市。基于 e 平台 3.0 的技术基因，2023 款 e2 搭载全球首款深度集成八合一电动力总成，系统综合效率高达 89% ，兼得性能与能耗。全系标配的热泵空调配合电池包直冷直热技术，对动力电池温度控制更精确、高效，低温续驶里程提升 10% 以上。除此以外，2023 款 e2 还全系标配专为新能源车打造的智能动力制动系统，具有完备的主动安全功能、更高的能量回收效率和更舒适的驾乘体验。在智能配置方面，2023 款 e2 搭载全新 DiLink 智能网联系统，为用户提供影音娱乐、智能导航等功能，覆盖用户的绝大多数生活场景。全新的 UI 设计，目录层级清晰，操作简便。通过智能语音交互，驾驶者可以轻松完成对车辆的大部分控制功能。</p><p>&nbsp;</p><p></p><h4>捷豹路虎中国与阿里云宣布达成全面合作</h4><p></p><p></p><p>近日，捷豹路虎中国与阿里云正式签订全面合作协议。据悉，双方将围绕基础设施云化、供应链与采购数字化、营销数智化、碳中和与碳达峰、自动驾驶在中国的合规性研究等多个领域展开合作。在基础架构建设方面：捷豹路虎中国将引入阿里云全球领先的云计算技术，重构安全、稳定、高效的技术底座，并共同搭建“研产供销服”一体化管理大数据平台，实现 100% 统一数据指标口径，支撑 6 大业务部门，200+ 经销商门店；在智能研发方面：捷豹路虎中国正加大本土研发力度，特别是在智能驾驶与车联网方面，阿里云算力的支持有望大幅提升研发效率，并使其满足在中国的合规性；在推进碳达峰、碳中和方面：双方将共同探索汽车生产制造环节中的能耗优化和“碳足迹”计算，实现工厂和供应链、采购平台的数字化。</p><p>&nbsp;</p><p>&nbsp;</p>",
    "publish_time": "2023-04-07 16:05:53",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "热点聚焦|金融科技新闻速览（4.4-4.7）",
    "url": "https://www.infoq.cn/article/Pdc9ycGOY44NLmHFS1Pr",
    "summary": "<p>四大行 2022 年报透露 RPA 应用，侧重点有所不同；邮储银行推进自动化审批降低审批人员工作量；常州落地首笔数字人民币“苏科贷”业务；宁波银行持续强化金融科技赋能……一文速览金融科技领域最新动态！</p><p>&nbsp;</p><p></p><h4>四大行2022年报透露RPA应用，侧重点有所不同</h4><p></p><p></p><p>近日，四大国有银行相继发布 2022 年报，其中工、农、中、建四家提及 RPA 关键词。具体来看：工行方面，RPA 助力加快推动远程银行服务升级。农行方面，RPA 应用于信用卡、财会、运营等多个领域，有效提升业务流程的执行效率。中行方面，加速推广企业级 RPA 和 OCR 平台，新技术应用场景范围不断扩大。建行方面，运用 RPA 等智能技术提升集约化作业质效，新增应用场景 307 项，全年节省 439 万个工时。</p><p>&nbsp;</p><p></p><h4>邮储银行：推进自动化审批，降低信贷审批人员工作量</h4><p></p><p></p><p>邮储银行透露，邮储大脑机器学习平台已训练研发 300 余个涉及授信、评级、预警、限额等信贷场景的智能模型，辅助提升线上审批效率，自动化审批判断处理从 5 分钟压缩至 10 秒以内。由于零售信贷自动化审批的推进，有效降低分支机构信贷审批人员工作量一半以上，有利于提升客户质量。邮储银行积极探索服务开放平台赋能渠道，为分行提供“ AI+ 大数据”、RPA 等技术的支持和指导，加快推进网点智能化改造。</p><p>&nbsp;</p><p></p><h4>常州落地首笔数字人民币“苏科贷”业务</h4><p></p><p></p><p>近日，交通银行常州分行为常州智文光电科技有限公司发放了一笔数字人民币形式的“苏科贷” 300 万元。据悉，这是常州市第一笔“苏科贷”数字人民币放贷业务。数字人民币“苏科贷”业务是在全面推进科技创新领域数字人民币试点工作的基础上，常州市科技局与合作银行共同探索数字人民币在金融支持科技创新领域的一次创新实践。常州市科技局表示，下一步，将继续与合作银行共同探索以数字人民币支持全市科技创新的新模式、新路径，大力推进科技资源和金融资源深度融合，创优金融渠道，切实服务企业做大做强。</p><p>&nbsp;</p><p></p><h4>金华发放浙江首笔“数字人民币+新型农业经营主体”贷款</h4><p></p><p></p><p>近日，在人民银行金华市中心支行的指导下，金华成泰农商银行成功向金华市高源畜禽专业合作社发放数字人民币贷款 70 万元，实现了数字人民币在金融服务新型农业经营主体场景的全省首笔应用。人民银行金华市中心支行表示，该行将深入推进数字人民币试点工作，积极打造高质量数字人民币应用生态圈，拓展数字人民币贷款场景覆盖面，探索数字人民币助力普惠金融可持续发展新模式，提升数字人民币普惠性、便捷性和可得性。</p><p>&nbsp;</p><p></p><h4>微众银行隐私计算技术通过金融科技产品国家级认证</h4><p></p><p></p><p>近日，北京国家金融科技认证中心正式公布首批通过“多方安全计算技术金融应用认证”的 5 款产品。<a href=\"https://www.infoq.cn/article/OJaT*6JGmhfqp2ipBYm2\">微众银行</a>\"作为认证试点单位，其自主研发的 WeDPR 多方大数据隐私计算平台全项通过检测认证，成为国内最先获得该国家级认证的多方安全计算金融科技产品之一。据了解，<a href=\"https://www.infoq.cn/article/ReBY0yqGdutMSKi5NHOE\">多方安全计算</a>\"( Secure Multi-Party Computation ，简称 MPC )是指在无可信第三方情况下，通过多方共同参与，安全地完成某种协同计算。合理运用多方安全计算技术，可以打破数据壁垒、连接数据孤岛；能够使金融机构之间、金融机构与商业公司之间既分享数据，又保证被分享的数据不流失，而且可以规定数据的用途和用量；在保证数据安全隐私的前提下合理合规合法地融合多方数据进行查询和分析，进一步助力金融行业的数字化和智能化。</p><p>&nbsp;</p><p></p><h4>宁波银行：科技金融，注入发展血脉</h4><p></p><p></p><p>在新时代下，经济社会发展与客户金融需求的变化进一步呼唤商业银行的数字化转型，借助金融科技持续赋能银行业务拓展与经营管理，是行业的大势所趋。近年来，宁波银行持续强化金融科技赋能，加大科研投入，积极探索大数据、云计算、人工智能、生物识别等新技术在金融方面的实践运用，并建立了“十中心”的金融科技组织架构和“三位一体”的研发中心体系。此外，宁波银行还借助金融科技赋能，重磅推出“财富开放平台”，积极引入行业头部理财子公司、基金、保险等优秀管理人产品，深化线上线下联动机制，为客户提供“全天候、多触点、不间断”的一站式金融服务。目前，宁波银行的金融科技支撑能力已经在同类银行中建立起比较优势，处于同类领先水平，这为此后公司的业务可持续发展提供了坚实的基础。</p><p>&nbsp;</p><p></p><h4>奉化农商银行“区块链秒贷”助力稳外贸</h4><p></p><p></p><p>近日，奉化农商银行联动国家外汇管理局跨境<a href=\"https://www.infoq.cn/article/alkGhdXM8CAawLLAxIjy\">金融区块链</a>\"服务平台，成功为辖区内某外贸企业办理了首笔“区块链秒贷”融资业务，在线完成融资申请、信息核查和融资放款，融资资金“秒”到账，这标志着奉化农商银行金融数字化改革助力稳外贸再上新台阶。据了解，“区块链秒贷”是奉化农商银行面向外贸出口企业推出的一款线上贸易融资业务。它依托国家外汇管理局以区块链技术搭建的跨境金融服务平台，根据企业出口收汇金额自动核算一定比例的授信额度。企业可通过网银在线提交融资申请，受理申请后，系统将直接联动跨境金融区块链服务平台自主核验报关单，实现网银自动放款、还款，全流程线上操作，资金实时到账。“区块链秒贷”的推出可以全方位助力企业降低融资成本，有效缓解外贸企业资金回笼慢、流动资金紧张的问题，为奉化区外贸经济稳步发展提供强有力的金融支撑。</p>",
    "publish_time": "2023-04-07 16:05:56",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]