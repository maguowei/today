[
  {
    "title": "Spring Boot 2.7.0发布，支持GraphQL、Podman和Cache2k",
    "url": "https://www.infoq.cn/article/TJrVEvEhmrxAIVzMj10R",
    "summary": "<p>VMware<a href=\"https://spring.io/blog/2022/05/19/spring-boot-2-7-0-available-now\">发布</a>\"了Spring Boot 2.7.0，这是2.x系列的最新也是最后一个分支。<a href=\"https://spring.io/projects/spring-boot#support\">下一个版本</a>\"Spring Boot 3.0按计划将于2022年12月发布。</p><p>&nbsp;</p><p>这个最新版本的Spring Boot包括：Spring for GraphQL 1.0支持；在使用<a href=\"https://buildpacks.io/\">Cloud Native Buildpacks</a>\"构建镜像时，支持将<a href=\"https://podman.io/\">Podman</a>\"容器引擎作为<a href=\"https://docs.docker.com/engine/\">Docker Engine</a>\"的替代品；<a href=\"https://cache2k.org/\">Cache2k</a>\"依赖管理和自动配置；新的测试注解<a href=\"https://www.elastic.co/\">ElasticSearch</a>\"和<a href=\"https://www.couchbase.com/\">CouchBase</a>\"。</p><p>&nbsp;</p><p>此外，JavaInfoContributor和OsInfoContributor类得到了改进，现在可以在Info端点下暴露更多关于Java版本、供应商和底层操作系统的信息。</p><p>&nbsp;</p><p>如果项目包含自定义自动配置，必须将注册信息从spring.plants移到名为META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports的新文件中。</p><p>&nbsp;</p><p>该版本引入了新的@AutoConfiguration注解，用来注解上面提到的新文件中列出的顶级自动配置类。</p><p>&nbsp;</p><p>Spring Boot 2.7中的多个Spring项目都迁移到了新版本，如<a href=\"https://github.com/spring-projects/spring-data-commons/wiki/Release-Train-2021.2-%28Raj%29-Release-Notes\">Spring Data 2021.2</a>\"和<a href=\"https://github.com/spring-projects/spring-security/releases/tag/5.7.0\">Spring Security 5.7</a>\"。此外，许多第三方依赖也已更新，如<a href=\"https://infinispan.org/blog/2021/10/12/infinispan-13-final\">Infinispan 13</a>\"、<a href=\"https://github.com/micrometer-metrics/micrometer/releases/tag/v1.9.0\">Micrometer 1.9</a>\"、Elasticsearch 7.17、<a href=\"https://www.h2database.com/html/main.html\">H2 2.1</a>\"和<a href=\"https://flywaydb.org/\">Flyway 8.5</a>\"。</p><p>&nbsp;</p><p>Spring for GraphQL为这种面向API的开源数据查询和操作语言提供了新的Spring Boot启动器和注解，用于客户端和服务器配置。要了解更多细节，请阅读InfoQ的这篇<a href=\"https://www.infoq.com/news/2022/06/spring-graphql/\">新闻报道</a>\"。</p><p>&nbsp;</p><p>Spring Boot 2.x于2018年首次发布，由于部署简单、配置少，并且能够适应不同的应用场景，所以一年年地逐步得到普及。根据<a href=\"https://www.infoq.com/news/2022/03/jrebel-report-2022/\">JRebel最近的调查</a>\"，它目前是最受欢迎的Java框架。</p><p>&nbsp;</p><p>Spring Boot 2.5的OSS支持已达终点，但商业支持将持续到2023年8月。</p><p>&nbsp;</p><p>Spring Boot 3.0基于Spring Framework 6.0，将是下一个重大修订版本，需要Java 17及以上版本。它将是第一个使用Jakarta EE 9 API（jakarta.*命名空间）而不是传统的Java EE 8 API（javax.*命名空间）的Spring Boot版本。这是一个巨大的变化，因为项目中使用的所有库都必须与之兼容。<a href=\"https://spring.io/blog/2022/05/24/preparing-for-spring-boot-3-0\">Spring建议</a>\"分步迁移（例如，2.5&gt;&gt;2.6&gt;&gt;2.7）。因此，建议在迁移到3.0之前升级到2.7。</p><p>&nbsp;</p><p>得益于<a href=\"https://docs.spring.io/spring-native/docs/current/reference/htmlsingle/\">Spring Native</a>\"，Spring Boot 3.0还将支持AOT（预）编译和原生可执行文件。</p><p>&nbsp;</p><p>作者简介：</p><p>Andrea Messetti是DXC科技公司的软件架构师。他之前在惠普工作。目前，Andrea专注于Java、云原生应用和微服务。他对计算机科学的诸多方面（ML、区块链、边缘计算）都充满了热情。</p><p>&nbsp;</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/06/spring-boot-2-7/\">Spring Boot 2.7.0 Released With Support for GraphQL, Podman and Cache2k</a>\"</p>",
    "publish_time": "2022-06-30 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "基于云内核的未来云计算架构",
    "url": "https://www.infoq.cn/article/d5o4dLSgqgqtOYkY2L8b",
    "summary": "<p>&nbsp;</p><p>早期单机操作系统是分层架构，后面才演化成今天如 linux windows 的宏内核微内核架构。云操作系统也会有类似发展趋势：以前都是单机应用，而现代应用几乎都是分布式应用。目前，kubernetes 已经成为事实上的“云操作系统内核”，这让能使内核普及的发型版呼之欲出。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/cc/22/ccd8e2d20165df1a88bd38ab80f44622.png\" /></p><p></p><p>现在，IaaS、PaaS 和 SaaS 在云原生技术普及的浪潮中已经名存实亡，比如容器运行在裸机上就已经拥有非常好的性能了，是否还需要 IaaS 这一层？PaaS、SaaS 本质都是容器，是否还需要区分？这三层架构实际上已经被击穿！</p><p>&nbsp;</p><p>程序员很认“鸭式辩型”，即会游泳、长翅膀的就是鸭子。这种抽象思维是极重要的，这也是 linux“一切皆文件”的设计哲学。而一个运行的 mysql 集群与一个 crm 软件其实没有本质上的区别，所以在云操作系统中，“内核之上皆为应用”。</p><p></p><h2>云计算三次浪潮</h2><p></p><p>基于云内核的云操作系统未来会引发云计算的巨大变革。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/9b/05/9b3c7b663a6976a288e726338515f705.png\" /></p><p></p><p>先来看看有意思的 web1、web2 和 web3，把互联网的变革套用到云计算中，你会发现，两者的生产关系有非常类似的地方。</p><p>&nbsp;</p><p>1 对 n 关系</p><p></p><p>web1 : 门户网站生产内容，用户查看内容云计算 1.0 : 公有云厂商开发服务，企业和开发者使用</p><p>&nbsp;</p><p>这个阶段的生产关系是 1 对多，云厂商几十款云产品无法满足市场上体量庞大、偏好各异的需求，就像 web1 用户只能看小编写的一些新闻。</p><p>&nbsp;</p><p>n 对 1 对 n 关系</p><p></p><p>web2 : UGC 用户生产内容，用户之间产生链接云计算 2.0 : 开发者生产云计算应用，给用户使用</p><p>&nbsp;</p><p>渐渐地，云厂商开始弄 markting place，一定程度上想通过开放市场来连接云计算的生产者与消费者，这就是云计算朝着 2.0 过度的信号。但是，缺乏标准就意味着难以协作，这个阶段想要彻底爆发必须要有“实际上的标准”出现。</p><p>&nbsp;</p><p>Docker 镜像算是非常好的标准，可惜难以覆盖分布式软件，但大家通过 docker hub 协作就是一个非常好的协作模型了。</p><p>&nbsp;</p><p>kubernetes 的 API 标准是真正有潜力成为云计算 2.0 事实标准的。未来，大家都通过这个系统相互协作，才能像安卓生态蓬勃的应用爆炸一样，诞生越来越多优质的云服务。</p><p>&nbsp;</p><p>n 对 n 关系</p><p>&nbsp;</p><p>web 3 : 网络所有权属于网络的所有参与者，数据回归用户自己手中云计算 3.0 : 算力属于所有计算的参与者，一台分布式超级计算机诞生</p><p>&nbsp;</p><p>整个过程其实是让计算和服务更民主，任何组织和个人都可以贡献自己的算力，发布和使用应用的人也不用关心应用到底运行在哪个地方，整个计算的使用就像使用一台虚拟计算机一样。 这与现在很多大的公链一样，不过目前的智能合约场景还过于局限、计算成本过高，虽然形式上很像超级计算机，但效果上隔了好几个鸿沟。</p><p></p><h2>基于云内核设计的云计算会更便宜</h2><p></p><p>当前，公有云提供的云服务还是极其昂贵的。 IDC 托管硬件与在某云厂商官网查到的存储类型机器相比，两者价格相差十倍！（不过云厂商对大B都有非常大的折扣，小B没有这种福利）</p><p><img src=\"https://static001.infoq.cn/resource/image/53/e6/53696f3d6f1bd6f528ccc62672855ce6.png\" /></p><p></p><p>很多公有云厂商妖魔化私有云，说私有云就不叫云。我想问私有云怎么就不叫云了？是因为私有云太便宜还是私有云动了谁的蛋糕？这个价格对比小学生都能算的清楚。</p><p>&nbsp;</p><p>其实在云内核设计的云操作系统出现之前，公有云确实会便宜，因为软件成本很高，企业想云在自己机房玩一套如 openstack 这样的 IaaS 每年几乎会花费上千万的成本，而现在开源生态逐渐成熟让软件成本变得便宜和稳定，私有云的成本便宜逻辑又开始成立了。</p><p>&nbsp;</p><p>那还有个问题就是“传统公有云为什么贵？”主要有三方面的原因：</p><p>&nbsp;</p><p>第一，传统公有云还是基于 IaaS、PaaS、SaaS 的架构，每一层都意味着成本。软件的复杂度直接决定成本，自研所谓一切优势现在反而会变为成本劣势，这是最主要的原因。第二，谈边际成本，这个不是按照公有云的用户体量去计算的，而是按照每个可用区的建设成本去计算的。如果软件体系复杂，每个机房需要大量管理节点、需要大量交付人员配合，那成本就无法降下来。但是，基于内核设计的云操作系统管理节点只需三台，实习生都能在半个小时以内交付，就像装 centos 一样简单。第三，次要原因是公有云的弹性都要预留资源，这部分成本都会摊到消费者头上。</p><p>&nbsp;</p><p>很多企业的业务资源使用都相对固定，如半年或一年做一次扩容等，托管或者自建肯定会更便宜，促销活动之类的一年也就几次，在促销时使用公有云即可，这样成本可以大幅度降低。</p><p></p><h2>云计算会走向开源开放</h2><p></p><p></p><p>封闭的云服务对于企业来说是场灾难，最简单的一个场景是应对云厂商的涨价行为，如果强绑定就意味着失去了议价权。近期某云厂商云开发就提价十倍，有些小企业的利润直接就被云服务吃光了。</p><p>&nbsp;</p><p>其次，云厂商的云产品如果发展得不好是有可能被下架的，如果企业不幸使用了这类产品，下架时就需要付出巨大迁移成本，有些与代码耦合的部分甚至需要重写代码。</p><p>&nbsp;</p><p>开源自然是开放的最好实现方式，不仅对上面几种场景有比较好的应对措施，关键还可以自由按照自己的需求进行定制。所以，未来开源与云是左右腿。</p><p>&nbsp;</p><p></p><h2>基于内核架构的云计算会变得更简单</h2><p></p><p></p><p>复杂的东西无法普及，复杂的软件要么走向腐烂和消亡，要么重构变得简单，云计算也是如此。大家会发现 centos ubuntu 这样的 linux 发行版普及了，但是现在的一些公有云能力很难随处运行和普及，即便是开源了，像 openstack 也一直未能普及。原因很简单，如果需要几十人的团队才能在生产环境玩起来的话，绝大多数企业都会放弃。</p><p>&nbsp;</p><p>什么叫“内聚”，就是功能不是以牺牲复杂度来换取的。像 linux 的 core 很内聚，驱动即使扩展了一万个，系统复杂度也没增加，虽然代码在一直增加。所以软件设计时的抽象能力就变得极为重要，基于云内核架构设计的云操作系统也是高“内聚”的，通过扩展应用来扩展能力，而各应用之间是低耦合的。</p><p></p><h2>内核架构云操作系统爆发时机</h2><p></p><p>&nbsp;</p><p></p><blockquote>基于开源技术的云服务在侵蚀昂贵且强绑定的公有云服务。</blockquote><p></p><p>&nbsp;</p><p>现在可以发现公有云云原生领域提供的服务商业化做得好的几乎都是开源强相关的， 如基于 kubernetes 的云服务，基于 prometheus grafana 的可观测服务等。</p><p>&nbsp;</p><p>用户越来越聪明了，便宜还是贵按按计算器就能算出来，而且绑定意味着认人鱼肉，技术选型明显往开源技术倾斜。</p><p>&nbsp;</p><p></p><blockquote>云原生侵蚀传统 IaaS 服务。</blockquote><p></p><p>&nbsp;</p><p>基于虚拟机的业务增长速度已经远远赶不上云原生生态的发展速度了，基于 kubernetes 的云原生生态每年几倍甚至有些产品每年几十倍的增长，大量企业在从虚拟机架构往云原生架构迁移。</p><p>前几年市场被教育得很好，越来越多的企业知道云原生降本增效不是一点点，该填的坑也被填得差不多了，开始考虑从观望状态变成实践了。</p><p>&nbsp;</p><p></p><blockquote>市场需要一款云操作系统进一步降低云原生门槛与成本。</blockquote><p></p><p>&nbsp;</p><p>现状是企业在实践云原生的时候还是容易迷失，生态过于庞大复杂，上千款生态软件让很多企业无从下手，而且真要落地的话，至少得有个专家能把云原生计算存储网络都玩明白，所以这个生态依然缺乏好用的、开箱即用的发行版。</p><p>&nbsp;</p><p>其实，这个发行版的要求还是很高的，要非常简单、不多不少地去满足客户的需求，还不能给用户带来负担，这就必须得非常好的设计理念和实现机制。</p><p></p><h2>如何实现这样一个云操作系统</h2><p></p><p></p><p>如何去设计这样一个操作系统，首先一定需要有非常好的设计理念。</p><p>&nbsp;</p><p>化整为零，这意味着如果你不装应用，这个系统就是空的，就是 nothing，就是 void*，和你买了一台新电脑里面除了操作系统什么也没装一样。自由组装，所有用户的需求都是通过具体应用实现的，而这些应用都是按需求从应用市场中下载，不会硬塞给用户不需要的东西，未能得到满足的需求也是通过应用去扩展。云操作系统不会追求各种应用风格的统一，就像 macOS 上的微信和飞书不会有统一的风格和账户系统。只有这样，各应用才能在自己的场景发挥出最大优势。</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/17/y3/17b580f1dda9f082bdd3cf7b8ce07yy3.png\" /></p><p></p><p>实现层面，core 是非常内聚的，意味它向下仅提供云内核生命周期管理，如安装/伸缩/升级/清理，向上做好应用的打包与管理即可。</p><p>&nbsp;</p><p>应用市场方面很重要，一定要有好的标准，这涉及到应用的提供者与消费者之间的协作，OCI registry 仓库就是个非常好的已有事实标准，兼容它是最好的选择。</p><p>&nbsp;</p><p>User interface 一定要简单极致，这是用户直接使用你东西的地方，API &gt; CLI &gt; GUI，Desktop 是产品化的终极形态，真的做到用云像用 PC 操作系统一样简单。</p><p>&nbsp;</p><p>剩下的一切都在于扩展应用的宽度和深度：</p><p>&nbsp;</p><p>广度方面，常用分布式软件如 mysql 集群、redis 集群、消息队列等逐步覆盖，不断扩展常用分布式应用数量。深度方面，基本安装-&gt;高可用-&gt;可监控-&gt;自运维-&gt;高性能/安全性-&gt;产品化，通过这几个阶段来衡量一个分布式应用成熟度。</p><p></p><h2>总结</h2><p></p><p></p><p>未来的云会更便宜、更开放和更简单，最终会有一款优秀的发行版本实现云原生的普及。相信未来云计算属于所有算力的提供者，云的价值也会属于所有云计算的参与者，不再受任何厂商绑定之苦，更便宜的享受云计算带来的便利。开源开放带给大家简单/便宜的云计算！</p><p></p><p>作者介绍：</p><p>&nbsp;</p><p>fanux.方海涛（中弈），sealos 作者，CNCF sealer 项目发起人。曾就职阿里云，现任环界云计算 CEO，环界获得陆奇博士奇绩创坛种子轮投资。 <a href=\"https://github.com/labring/sealos\">sealos</a>\" 是以 kubernetes 为内核的云操作系统发行版。</p>",
    "publish_time": "2022-06-30 10:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Meta如何实现大规模无身份信息认证？",
    "url": "https://www.infoq.cn/article/iLFhrxI8yG2Y2P7MiqfL",
    "summary": "<p>我们在Meta公司不断研发新的隐私增强技术（privacy-enhancing technologies，PET），核心原则之一是数据简约化——仅收集我们服务所需的最少量数据。我们一直在寻找方法来增强用户隐私性，以保护我们所有产品的用户数据。</p><p></p><p>以前，我们研究过用后置的处理数据方法，去除身份信息或汇总多用户数据，从而简约化数据。然而，这是一种被动的数据简约化方法，以Meta公司的规模，可能会非常耗费资源。当我们寻找扩展性更高的解决方案时，我们发现，可以利用“无身份信息认证（de-identified authentication）”的方法来主动消除身份信息。这样一来，我们从信息源头就可以去除身份信息。</p><p></p><p>在所有客户端-服务器交互中，身份认证对防止端点被爬取、被垃圾邮件塞满或被分布式拒绝服务攻击（DDOS）很有帮助。业内最为广泛采用的身份认证方式，是通过用户ID进行身份认证，服务器在提供服务或接收客户端流量之前验证客户端身份。</p><p></p><p>但我们希望通过去除用户身份信息来提高隐私标准，同时仍能保证身份认证，以保护用户数据和我们的服务。因此，我们利用工业界和学术界多年来合作设计的<a href=\"https://research.fb.com/privatestats\">匿名凭据</a>\"，创建了称为“匿名凭据服务（Anonymous Credential Service，ACS）”的核心服务。匿名凭据服务是一种高可用的多租户服务，它允许客户端以无身份信息的方式进行身份认证。这增强了隐私和安全性，同时还具有计算意识。匿名凭据服务是我们隐私增强技术产品组合的最新成员之一，目前正在Meta公司多个大流量的用例中使用。</p><p><img src=\"https://static001.geekbang.org/infoq/a0/a01fd91db6113816b33e9ab1f4f003fd.png\" /></p><p></p><h2>匿名凭据如何支持无身份信息认证</h2><p></p><p></p><p>在较高抽象层面上，匿名凭据将认证分为两个阶段，来支持无身份信息认证：颁发令牌和无身份信息认证。在颁发令牌阶段，客户端通过一个认证过的通道联系服务器，向服务器发送一个令牌（token）。服务器给令牌签名并将其发回客户端。然后，在无身份信息认证（或称令牌赎回）阶段，客户端使用匿名通道提交数据，并用此令牌的变异形式取代用户ID进行身份认证。</p><p></p><p>我们大幅简化了协议中的细微差别，签名令牌（令牌发行阶段）和赎回令牌（无身份信息认证阶段）两个阶段的数据不再能够直接关联起来，因此服务器在第二阶段对客户端进行身份认证时，无需知道令牌属于哪个特定客户端，从而保护了用户隐私。</p><p></p><h2>匿名凭据协议的工作原理</h2><p></p><p></p><p>让我们深入了解一下匿名凭据协议。匿名凭据基于VOPRF（可验证不经意伪随机函数，它使客户端能够获知自定义输入的可验证伪随机函数评估）和盲签名（一种数字签名，可以防止签名者知道发送者的消息内容）创建。除了前面提到的颁发令牌阶段和无身份信息认证阶段之外，完整的工作流程还有一个设置阶段。</p><p></p><p>在设置阶段，客户端获取服务器的公钥和其他公共参数。接下来是颁布令牌阶段，客户端创建一个随机令牌并选择一个致盲因子，对令牌进行盲签名，并将盲签后的令牌发送到服务器。反过来，服务器对令牌签名并将其发回客户端。然后客户端对服务器返回的签过名的盲令牌执行非盲操作。客户端还计算shared_secret，它本质上是原始令牌和服务器签名的函数。</p><p></p><p>请注意，直到此时，服务器都没有见过原始令牌的值。之后，在无身份信息认证阶段，客户端转发原始令牌、相关业务数据，以及带有shared_secret的业务数据的HMAC（Hash message authentication codes，散列过的消息认证代码）。</p><p></p><p>然后，服务器可以通过检查这个HMAC，来验证客户端发送的shared_secret与本地计算的shared_secret是否相同。如果此检查通过，则服务器将请求视为合法，并处理业务数据。有关该协议的详情，请参阅论文<a href=\"http://research.fb.com/privatestats\">《大规模无身份信息认证遥测（</a>\"<a href=\"http://research.fb.com/privatestats\">De-identified authenticated telemetry at scale</a>\"<a href=\"http://research.fb.com/privatestats\">）》</a>\"。</p><p></p><h2>无身份信息认证的真实用例</h2><p></p><p></p><h4>WhatsApp上的无身份信息遥测</h4><p></p><p></p><p>匿名凭据服务使客户端能够以无身份信息方式进行身份认证。通过匿名凭据服务去除身份认证中的用户ID，我们可以在满足数据收集简约化目标的同时保护用户隐私。为了服务于生产用例，我们必须创建一个健壮的架构，增强面对现实世界各种问题的适应能力。</p><p></p><p><a href=\"https://engineering.fb.com/2021/04/16/security/dit\">WhatsApp上的无身份信息遥测（De-Identified Telemetry，DIT）</a>\"是当前利用匿名凭据服务的一个用例。以前，我们用安全存储和数据删除策略，确保日志数据不会关联具体用户。但我们希望我们的隐私保护措施更进一步，将匿名凭据服务与WhatsApp系统集成，以便对某些WhatsApp客户端日志启用无身份信息认证。</p><p></p><p>大规模部署后，无身份信息遥测使WhatsApp在验证日志请求时无需收集身份信息，就能报告性能指标（对确保为每个用户提供快速、无崩溃的应用程序很重要）。整个WhatsApp家族都在使用匿名凭据服务，这个庞大的用例需要匿名凭据服务每秒处理数十万个请求。</p><p><img src=\"https://static001.geekbang.org/infoq/9f/9fab06051a8382a9ac514f2f97268d28.png\" /></p><p></p><h4>联合学习</h4><p></p><p></p><p>我们要强调的另一个用例是<a href=\"https://ai.facebook.com/research/publications/fair-resource-allocation-in-federated-learning\">联合学习</a>\"，这是一种训练全局机器学习模型的技术，私有敏感数据仅保存在本地客户端设备上（不需要上传到服务器）。在这种模式中，设备与服务器共享模型更新而不是原始敏感数据，服务器计算聚合模型的更新来优化全局模型。</p><p></p><p>这是使用匿名凭据服务进一步保护用户隐私的一种潜在方法。我们不希望恶意行为者发送欺诈性的模型更新数据，但我们希望确保合法用户能够帮助改进全局模型。通过利用匿名凭据服务，我们可以确保合法客户端以无身份信息认证的方式发送客户端模型的更新信息。</p><p><img src=\"https://static001.geekbang.org/infoq/4c/4c16b3a4cabfed1fe2444c4ae5510fe9.png\" /></p><p></p><h2>匿名凭据服务架构</h2><p></p><p></p><p>现在让我们深入了解匿名凭据服务架构。</p><p></p><p>匿名凭据服务是一个C++服务，基于Meta公司的容器编排框架<a href=\"https://engineering.fb.com/2019/06/06/data-center-engineering/twine\">Twine</a>\"开发。在全球范围对流量进行负载均衡，每个区域都根据需求动态伸缩。匿名凭据服务为颁发令牌和赎回令牌提供Thrift API。</p><p></p><p>有一项重要需求是，在不同用例间构建围栏，隔离匿名凭据服务的令牌。为什么呢？因为我们是多租户的，服务于各种用例。不同用例可能有不同的身份认证机制（例如，脸书用户与Instagram用户）。应当禁止不同的用例赎回颁发给特定用例的令牌。</p><p></p><p>为了解决这个问题，我们要求每个API请求都声明自己的用例名称，我们使用针对具体用例的密钥来隔离用例。我们把密钥存储在Meta公司的“钥匙串（keychain&nbsp;）”服务中，并通过Meta公司的异步作业基础设施定期更换安全密钥。此外，我们还有另一项工作是，在密钥轮换后，发布更新的匿名凭据服务公钥，让客户端可以获取更新后的密钥。</p><p></p><h2>匿名凭据服务扩展的经验教训</h2><p></p><p></p><p>在扩展匿名凭据服务的过程中，我们学到了维持服务可靠性和效率的三个关键经验：防止运行匿名凭据服务的成本随着流量的增加而线性增长、避免人为的流量高峰、在不需要专家知识的情况下，推进各个用例接入服务。</p><p></p><p>随着接入服务的用例越来越多，我们注意到，对新接入的用例，必须按其流量1:1的比例添加主机和更多的服务器容量。鉴于最近全球服务器供应链紧张，我们研究了如何简化匿名凭据服务，使其更实用，同时仍能保持我们的高隐私标准。</p><p></p><p>我们决定允许用例在合理的阈值内重用凭据。在匿名凭据服务服务器上，我们添加了一个重用凭据计数器（由Meta公司的分布式键值存储<a href=\"https://engineering.fb.com/2021/08/06/core-data/zippydb\">ZippyDB</a>\"提供支持）。该计数器将计算特定匿名凭据服务令牌被赎回的次数，如果赎回次数超过阈值，则请求失败。针对敏感的用例，还有赎回限制（即不重用令牌）。通过允许重用凭据，可以减少为特定用例颁发令牌的数量，从而节省服务器容量。</p><p></p><p>我们在扩展时遇到的另一个问题和流量尖峰有关。我们通过观察服务仪表盘，注意到匿名凭据服务的服务器在短时间内收到大量请求。这将导致服务器一时不堪重负，部分请求会失败。</p><p></p><p>我们发现，这些引起流量尖峰的请求都来自一个大型用例。在与相关的客户团队交谈后，我们了解到，他们把数据缓存在移动客户端上，然后每晚在同一时间，这些移动客户端分别把自己的数据批量发送到服务端。</p><p></p><p>尽管理论上这是个好主意，但这种模型实际上是在对我们的服务器进行分布式拒绝服务攻击（DDOS），因为突然有众多客户端同时发送了许多请求。为了解决这个特定用例的问题，我们通过添加抖动来分散请求，让它们错开发送时间。为了更普遍地解决这个问题，保护我们服务器的健康，我们与Meta公司流量团队合作，添加了一个全局限速器，如果匿名凭据服务流量超过某个速率阈值，限速器将选择性地丢弃这些超额流量。</p><p></p><p>我们在扩展匿名凭据服务时遇到的最后一个挑战是在工程方面。最初，我们有一个小团队，致力于推广匿名凭据服务，然后发现接入新的用例很困难。当时，接入新用例通常需要我们中的一个人与合作伙伴团队密切合作，解释匿名凭据服务的关键概念，并在我们的服务器上手动配置新的匿名凭据服务用例。</p><p></p><p>我们通过给接入匿名凭据服务的新用例创建平滑的接入体验来减轻这种合作成本。我们用React构建了一个自助接入匿名凭据服务的站点入口。现在，来自Meta公司的工程师们，可以使用该站点作为匿名凭据服务的一站式商店。</p><p></p><p>此外，我们为Android和iOS创建了匿名凭据服务客户端SDK，以提供高质量的加密原语和协议实现。客户端可以调用高级方法，例如直接获取匿名凭据服务令牌（fetch-acs-token），不需要自己一步一步构建令牌。这些方法通过调用匿名凭据服务的API、去盲化令牌和执行所有其他相关操作，来处理整个令牌交换协议。我们还改进了维基上的接入文档，投入资源开发了codegen工具。这进一步减少了客户的编码量，更容易与我们集成，让他们无需专家级的密码学知识即可使用我们的协议。</p><p></p><p>无身份信息化是保护数据和隐私的重要工具。共享和保护数据需要信任和责任感。展望未来，我们希望将匿名凭据服务进一步集成到Meta公司的数据基础架构中，并在身份认证用例之外的产品中用它进一步保护数据隐私。</p><p></p><p>我们希望我们的工作能够激发整个行业研发更多的隐私增强技术。</p><p></p><p>查看英文原文：<a href=\"https://engineering.fb.com/2022/03/30/security/de-identified-authentication-at-scale/\">How Meta enables de-identified authentication at scale</a>\"</p>",
    "publish_time": "2022-06-30 10:02:43",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]