[
  {
    "title": "Spring Boot 2.7.0发布，支持GraphQL、Podman和Cache2k",
    "url": "https://www.infoq.cn/article/TJrVEvEhmrxAIVzMj10R",
    "summary": "<p>VMware<a href=\"https://spring.io/blog/2022/05/19/spring-boot-2-7-0-available-now\">发布</a>\"了Spring Boot 2.7.0，这是2.x系列的最新也是最后一个分支。<a href=\"https://spring.io/projects/spring-boot#support\">下一个版本</a>\"Spring Boot 3.0按计划将于2022年12月发布。</p><p>&nbsp;</p><p>这个最新版本的Spring Boot包括：Spring for GraphQL 1.0支持；在使用<a href=\"https://buildpacks.io/\">Cloud Native Buildpacks</a>\"构建镜像时，支持将<a href=\"https://podman.io/\">Podman</a>\"容器引擎作为<a href=\"https://docs.docker.com/engine/\">Docker Engine</a>\"的替代品；<a href=\"https://cache2k.org/\">Cache2k</a>\"依赖管理和自动配置；新的测试注解<a href=\"https://www.elastic.co/\">ElasticSearch</a>\"和<a href=\"https://www.couchbase.com/\">CouchBase</a>\"。</p><p>&nbsp;</p><p>此外，JavaInfoContributor和OsInfoContributor类得到了改进，现在可以在Info端点下暴露更多关于Java版本、供应商和底层操作系统的信息。</p><p>&nbsp;</p><p>如果项目包含自定义自动配置，必须将注册信息从spring.plants移到名为META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports的新文件中。</p><p>&nbsp;</p><p>该版本引入了新的@AutoConfiguration注解，用来注解上面提到的新文件中列出的顶级自动配置类。</p><p>&nbsp;</p><p>Spring Boot 2.7中的多个Spring项目都迁移到了新版本，如<a href=\"https://github.com/spring-projects/spring-data-commons/wiki/Release-Train-2021.2-%28Raj%29-Release-Notes\">Spring Data 2021.2</a>\"和<a href=\"https://github.com/spring-projects/spring-security/releases/tag/5.7.0\">Spring Security 5.7</a>\"。此外，许多第三方依赖也已更新，如<a href=\"https://infinispan.org/blog/2021/10/12/infinispan-13-final\">Infinispan 13</a>\"、<a href=\"https://github.com/micrometer-metrics/micrometer/releases/tag/v1.9.0\">Micrometer 1.9</a>\"、Elasticsearch 7.17、<a href=\"https://www.h2database.com/html/main.html\">H2 2.1</a>\"和<a href=\"https://flywaydb.org/\">Flyway 8.5</a>\"。</p><p>&nbsp;</p><p>Spring for GraphQL为这种面向API的开源数据查询和操作语言提供了新的Spring Boot启动器和注解，用于客户端和服务器配置。要了解更多细节，请阅读InfoQ的这篇<a href=\"https://www.infoq.com/news/2022/06/spring-graphql/\">新闻报道</a>\"。</p><p>&nbsp;</p><p>Spring Boot 2.x于2018年首次发布，由于部署简单、配置少，并且能够适应不同的应用场景，所以一年年地逐步得到普及。根据<a href=\"https://www.infoq.com/news/2022/03/jrebel-report-2022/\">JRebel最近的调查</a>\"，它目前是最受欢迎的Java框架。</p><p>&nbsp;</p><p>Spring Boot 2.5的OSS支持已达终点，但商业支持将持续到2023年8月。</p><p>&nbsp;</p><p>Spring Boot 3.0基于Spring Framework 6.0，将是下一个重大修订版本，需要Java 17及以上版本。它将是第一个使用Jakarta EE 9 API（jakarta.*命名空间）而不是传统的Java EE 8 API（javax.*命名空间）的Spring Boot版本。这是一个巨大的变化，因为项目中使用的所有库都必须与之兼容。<a href=\"https://spring.io/blog/2022/05/24/preparing-for-spring-boot-3-0\">Spring建议</a>\"分步迁移（例如，2.5&gt;&gt;2.6&gt;&gt;2.7）。因此，建议在迁移到3.0之前升级到2.7。</p><p>&nbsp;</p><p>得益于<a href=\"https://docs.spring.io/spring-native/docs/current/reference/htmlsingle/\">Spring Native</a>\"，Spring Boot 3.0还将支持AOT（预）编译和原生可执行文件。</p><p>&nbsp;</p><p>作者简介：</p><p>Andrea Messetti是DXC科技公司的软件架构师。他之前在惠普工作。目前，Andrea专注于Java、云原生应用和微服务。他对计算机科学的诸多方面（ML、区块链、边缘计算）都充满了热情。</p><p>&nbsp;</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/06/spring-boot-2-7/\">Spring Boot 2.7.0 Released With Support for GraphQL, Podman and Cache2k</a>\"</p>",
    "publish_time": "2022-06-30 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "基于云内核的未来云计算架构",
    "url": "https://www.infoq.cn/article/d5o4dLSgqgqtOYkY2L8b",
    "summary": "<p>&nbsp;</p><p>早期单机操作系统是分层架构，后面才演化成今天如 linux windows 的宏内核微内核架构。云操作系统也会有类似发展趋势：以前都是单机应用，而现代应用几乎都是分布式应用。目前，kubernetes 已经成为事实上的“云操作系统内核”，这让能使内核普及的发型版呼之欲出。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/cc/22/ccd8e2d20165df1a88bd38ab80f44622.png\" /></p><p></p><p>现在，IaaS、PaaS 和 SaaS 在云原生技术普及的浪潮中已经名存实亡，比如容器运行在裸机上就已经拥有非常好的性能了，是否还需要 IaaS 这一层？PaaS、SaaS 本质都是容器，是否还需要区分？这三层架构实际上已经被击穿！</p><p>&nbsp;</p><p>程序员很认“鸭式辩型”，即会游泳、长翅膀的就是鸭子。这种抽象思维是极重要的，这也是 linux“一切皆文件”的设计哲学。而一个运行的 mysql 集群与一个 crm 软件其实没有本质上的区别，所以在云操作系统中，“内核之上皆为应用”。</p><p></p><h2>云计算三次浪潮</h2><p></p><p>基于云内核的云操作系统未来会引发云计算的巨大变革。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/9b/05/9b3c7b663a6976a288e726338515f705.png\" /></p><p></p><p>先来看看有意思的 web1、web2 和 web3，把互联网的变革套用到云计算中，你会发现，两者的生产关系有非常类似的地方。</p><p>&nbsp;</p><p>1 对 n 关系</p><p></p><p>web1 : 门户网站生产内容，用户查看内容云计算 1.0 : 公有云厂商开发服务，企业和开发者使用</p><p>&nbsp;</p><p>这个阶段的生产关系是 1 对多，云厂商几十款云产品无法满足市场上体量庞大、偏好各异的需求，就像 web1 用户只能看小编写的一些新闻。</p><p>&nbsp;</p><p>n 对 1 对 n 关系</p><p></p><p>web2 : UGC 用户生产内容，用户之间产生链接云计算 2.0 : 开发者生产云计算应用，给用户使用</p><p>&nbsp;</p><p>渐渐地，云厂商开始弄 markting place，一定程度上想通过开放市场来连接云计算的生产者与消费者，这就是云计算朝着 2.0 过度的信号。但是，缺乏标准就意味着难以协作，这个阶段想要彻底爆发必须要有“实际上的标准”出现。</p><p>&nbsp;</p><p>Docker 镜像算是非常好的标准，可惜难以覆盖分布式软件，但大家通过 docker hub 协作就是一个非常好的协作模型了。</p><p>&nbsp;</p><p>kubernetes 的 API 标准是真正有潜力成为云计算 2.0 事实标准的。未来，大家都通过这个系统相互协作，才能像安卓生态蓬勃的应用爆炸一样，诞生越来越多优质的云服务。</p><p>&nbsp;</p><p>n 对 n 关系</p><p>&nbsp;</p><p>web 3 : 网络所有权属于网络的所有参与者，数据回归用户自己手中云计算 3.0 : 算力属于所有计算的参与者，一台分布式超级计算机诞生</p><p>&nbsp;</p><p>整个过程其实是让计算和服务更民主，任何组织和个人都可以贡献自己的算力，发布和使用应用的人也不用关心应用到底运行在哪个地方，整个计算的使用就像使用一台虚拟计算机一样。 这与现在很多大的公链一样，不过目前的智能合约场景还过于局限、计算成本过高，虽然形式上很像超级计算机，但效果上隔了好几个鸿沟。</p><p></p><h2>基于云内核设计的云计算会更便宜</h2><p></p><p>当前，公有云提供的云服务还是极其昂贵的。 IDC 托管硬件与在某云厂商官网查到的存储类型机器相比，两者价格相差十倍！（不过云厂商对大B都有非常大的折扣，小B没有这种福利）</p><p><img src=\"https://static001.infoq.cn/resource/image/53/e6/53696f3d6f1bd6f528ccc62672855ce6.png\" /></p><p></p><p>很多公有云厂商妖魔化私有云，说私有云就不叫云。我想问私有云怎么就不叫云了？是因为私有云太便宜还是私有云动了谁的蛋糕？这个价格对比小学生都能算的清楚。</p><p>&nbsp;</p><p>其实在云内核设计的云操作系统出现之前，公有云确实会便宜，因为软件成本很高，企业想云在自己机房玩一套如 openstack 这样的 IaaS 每年几乎会花费上千万的成本，而现在开源生态逐渐成熟让软件成本变得便宜和稳定，私有云的成本便宜逻辑又开始成立了。</p><p>&nbsp;</p><p>那还有个问题就是“传统公有云为什么贵？”主要有三方面的原因：</p><p>&nbsp;</p><p>第一，传统公有云还是基于 IaaS、PaaS、SaaS 的架构，每一层都意味着成本。软件的复杂度直接决定成本，自研所谓一切优势现在反而会变为成本劣势，这是最主要的原因。第二，谈边际成本，这个不是按照公有云的用户体量去计算的，而是按照每个可用区的建设成本去计算的。如果软件体系复杂，每个机房需要大量管理节点、需要大量交付人员配合，那成本就无法降下来。但是，基于内核设计的云操作系统管理节点只需三台，实习生都能在半个小时以内交付，就像装 centos 一样简单。第三，次要原因是公有云的弹性都要预留资源，这部分成本都会摊到消费者头上。</p><p>&nbsp;</p><p>很多企业的业务资源使用都相对固定，如半年或一年做一次扩容等，托管或者自建肯定会更便宜，促销活动之类的一年也就几次，在促销时使用公有云即可，这样成本可以大幅度降低。</p><p></p><h2>云计算会走向开源开放</h2><p></p><p></p><p>封闭的云服务对于企业来说是场灾难，最简单的一个场景是应对云厂商的涨价行为，如果强绑定就意味着失去了议价权。近期某云厂商云开发就提价十倍，有些小企业的利润直接就被云服务吃光了。</p><p>&nbsp;</p><p>其次，云厂商的云产品如果发展得不好是有可能被下架的，如果企业不幸使用了这类产品，下架时就需要付出巨大迁移成本，有些与代码耦合的部分甚至需要重写代码。</p><p>&nbsp;</p><p>开源自然是开放的最好实现方式，不仅对上面几种场景有比较好的应对措施，关键还可以自由按照自己的需求进行定制。所以，未来开源与云是左右腿。</p><p>&nbsp;</p><p></p><h2>基于内核架构的云计算会变得更简单</h2><p></p><p></p><p>复杂的东西无法普及，复杂的软件要么走向腐烂和消亡，要么重构变得简单，云计算也是如此。大家会发现 centos ubuntu 这样的 linux 发行版普及了，但是现在的一些公有云能力很难随处运行和普及，即便是开源了，像 openstack 也一直未能普及。原因很简单，如果需要几十人的团队才能在生产环境玩起来的话，绝大多数企业都会放弃。</p><p>&nbsp;</p><p>什么叫“内聚”，就是功能不是以牺牲复杂度来换取的。像 linux 的 core 很内聚，驱动即使扩展了一万个，系统复杂度也没增加，虽然代码在一直增加。所以软件设计时的抽象能力就变得极为重要，基于云内核架构设计的云操作系统也是高“内聚”的，通过扩展应用来扩展能力，而各应用之间是低耦合的。</p><p></p><h2>内核架构云操作系统爆发时机</h2><p></p><p>&nbsp;</p><p></p><blockquote>基于开源技术的云服务在侵蚀昂贵且强绑定的公有云服务。</blockquote><p></p><p>&nbsp;</p><p>现在可以发现公有云云原生领域提供的服务商业化做得好的几乎都是开源强相关的， 如基于 kubernetes 的云服务，基于 prometheus grafana 的可观测服务等。</p><p>&nbsp;</p><p>用户越来越聪明了，便宜还是贵按按计算器就能算出来，而且绑定意味着认人鱼肉，技术选型明显往开源技术倾斜。</p><p>&nbsp;</p><p></p><blockquote>云原生侵蚀传统 IaaS 服务。</blockquote><p></p><p>&nbsp;</p><p>基于虚拟机的业务增长速度已经远远赶不上云原生生态的发展速度了，基于 kubernetes 的云原生生态每年几倍甚至有些产品每年几十倍的增长，大量企业在从虚拟机架构往云原生架构迁移。</p><p>前几年市场被教育得很好，越来越多的企业知道云原生降本增效不是一点点，该填的坑也被填得差不多了，开始考虑从观望状态变成实践了。</p><p>&nbsp;</p><p></p><blockquote>市场需要一款云操作系统进一步降低云原生门槛与成本。</blockquote><p></p><p>&nbsp;</p><p>现状是企业在实践云原生的时候还是容易迷失，生态过于庞大复杂，上千款生态软件让很多企业无从下手，而且真要落地的话，至少得有个专家能把云原生计算存储网络都玩明白，所以这个生态依然缺乏好用的、开箱即用的发行版。</p><p>&nbsp;</p><p>其实，这个发行版的要求还是很高的，要非常简单、不多不少地去满足客户的需求，还不能给用户带来负担，这就必须得非常好的设计理念和实现机制。</p><p></p><h2>如何实现这样一个云操作系统</h2><p></p><p></p><p>如何去设计这样一个操作系统，首先一定需要有非常好的设计理念。</p><p>&nbsp;</p><p>化整为零，这意味着如果你不装应用，这个系统就是空的，就是 nothing，就是 void*，和你买了一台新电脑里面除了操作系统什么也没装一样。自由组装，所有用户的需求都是通过具体应用实现的，而这些应用都是按需求从应用市场中下载，不会硬塞给用户不需要的东西，未能得到满足的需求也是通过应用去扩展。云操作系统不会追求各种应用风格的统一，就像 macOS 上的微信和飞书不会有统一的风格和账户系统。只有这样，各应用才能在自己的场景发挥出最大优势。</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/17/y3/17b580f1dda9f082bdd3cf7b8ce07yy3.png\" /></p><p></p><p>实现层面，core 是非常内聚的，意味它向下仅提供云内核生命周期管理，如安装/伸缩/升级/清理，向上做好应用的打包与管理即可。</p><p>&nbsp;</p><p>应用市场方面很重要，一定要有好的标准，这涉及到应用的提供者与消费者之间的协作，OCI registry 仓库就是个非常好的已有事实标准，兼容它是最好的选择。</p><p>&nbsp;</p><p>User interface 一定要简单极致，这是用户直接使用你东西的地方，API &gt; CLI &gt; GUI，Desktop 是产品化的终极形态，真的做到用云像用 PC 操作系统一样简单。</p><p>&nbsp;</p><p>剩下的一切都在于扩展应用的宽度和深度：</p><p>&nbsp;</p><p>广度方面，常用分布式软件如 mysql 集群、redis 集群、消息队列等逐步覆盖，不断扩展常用分布式应用数量。深度方面，基本安装-&gt;高可用-&gt;可监控-&gt;自运维-&gt;高性能/安全性-&gt;产品化，通过这几个阶段来衡量一个分布式应用成熟度。</p><p></p><h2>总结</h2><p></p><p></p><p>未来的云会更便宜、更开放和更简单，最终会有一款优秀的发行版本实现云原生的普及。相信未来云计算属于所有算力的提供者，云的价值也会属于所有云计算的参与者，不再受任何厂商绑定之苦，更便宜的享受云计算带来的便利。开源开放带给大家简单/便宜的云计算！</p><p></p><p>作者介绍：</p><p>&nbsp;</p><p>fanux.方海涛（中弈），sealos 作者，CNCF sealer 项目发起人。曾就职阿里云，现任环界云计算 CEO，环界获得陆奇博士奇绩创坛种子轮投资。 <a href=\"https://github.com/labring/sealos\">sealos</a>\" 是以 kubernetes 为内核的云操作系统发行版。</p>",
    "publish_time": "2022-06-30 10:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Meta如何实现大规模无身份信息认证？",
    "url": "https://www.infoq.cn/article/iLFhrxI8yG2Y2P7MiqfL",
    "summary": "<p>我们在Meta公司不断研发新的隐私增强技术（privacy-enhancing technologies，PET），核心原则之一是数据简约化——仅收集我们服务所需的最少量数据。我们一直在寻找方法来增强用户隐私性，以保护我们所有产品的用户数据。</p><p></p><p>以前，我们研究过用后置的处理数据方法，去除身份信息或汇总多用户数据，从而简约化数据。然而，这是一种被动的数据简约化方法，以Meta公司的规模，可能会非常耗费资源。当我们寻找扩展性更高的解决方案时，我们发现，可以利用“无身份信息认证（de-identified authentication）”的方法来主动消除身份信息。这样一来，我们从信息源头就可以去除身份信息。</p><p></p><p>在所有客户端-服务器交互中，身份认证对防止端点被爬取、被垃圾邮件塞满或被分布式拒绝服务攻击（DDOS）很有帮助。业内最为广泛采用的身份认证方式，是通过用户ID进行身份认证，服务器在提供服务或接收客户端流量之前验证客户端身份。</p><p></p><p>但我们希望通过去除用户身份信息来提高隐私标准，同时仍能保证身份认证，以保护用户数据和我们的服务。因此，我们利用工业界和学术界多年来合作设计的<a href=\"https://research.fb.com/privatestats\">匿名凭据</a>\"，创建了称为“匿名凭据服务（Anonymous Credential Service，ACS）”的核心服务。匿名凭据服务是一种高可用的多租户服务，它允许客户端以无身份信息的方式进行身份认证。这增强了隐私和安全性，同时还具有计算意识。匿名凭据服务是我们隐私增强技术产品组合的最新成员之一，目前正在Meta公司多个大流量的用例中使用。</p><p><img src=\"https://static001.geekbang.org/infoq/a0/a01fd91db6113816b33e9ab1f4f003fd.png\" /></p><p></p><h2>匿名凭据如何支持无身份信息认证</h2><p></p><p></p><p>在较高抽象层面上，匿名凭据将认证分为两个阶段，来支持无身份信息认证：颁发令牌和无身份信息认证。在颁发令牌阶段，客户端通过一个认证过的通道联系服务器，向服务器发送一个令牌（token）。服务器给令牌签名并将其发回客户端。然后，在无身份信息认证（或称令牌赎回）阶段，客户端使用匿名通道提交数据，并用此令牌的变异形式取代用户ID进行身份认证。</p><p></p><p>我们大幅简化了协议中的细微差别，签名令牌（令牌发行阶段）和赎回令牌（无身份信息认证阶段）两个阶段的数据不再能够直接关联起来，因此服务器在第二阶段对客户端进行身份认证时，无需知道令牌属于哪个特定客户端，从而保护了用户隐私。</p><p></p><h2>匿名凭据协议的工作原理</h2><p></p><p></p><p>让我们深入了解一下匿名凭据协议。匿名凭据基于VOPRF（可验证不经意伪随机函数，它使客户端能够获知自定义输入的可验证伪随机函数评估）和盲签名（一种数字签名，可以防止签名者知道发送者的消息内容）创建。除了前面提到的颁发令牌阶段和无身份信息认证阶段之外，完整的工作流程还有一个设置阶段。</p><p></p><p>在设置阶段，客户端获取服务器的公钥和其他公共参数。接下来是颁布令牌阶段，客户端创建一个随机令牌并选择一个致盲因子，对令牌进行盲签名，并将盲签后的令牌发送到服务器。反过来，服务器对令牌签名并将其发回客户端。然后客户端对服务器返回的签过名的盲令牌执行非盲操作。客户端还计算shared_secret，它本质上是原始令牌和服务器签名的函数。</p><p></p><p>请注意，直到此时，服务器都没有见过原始令牌的值。之后，在无身份信息认证阶段，客户端转发原始令牌、相关业务数据，以及带有shared_secret的业务数据的HMAC（Hash message authentication codes，散列过的消息认证代码）。</p><p></p><p>然后，服务器可以通过检查这个HMAC，来验证客户端发送的shared_secret与本地计算的shared_secret是否相同。如果此检查通过，则服务器将请求视为合法，并处理业务数据。有关该协议的详情，请参阅论文<a href=\"http://research.fb.com/privatestats\">《大规模无身份信息认证遥测（</a>\"<a href=\"http://research.fb.com/privatestats\">De-identified authenticated telemetry at scale</a>\"<a href=\"http://research.fb.com/privatestats\">）》</a>\"。</p><p></p><h2>无身份信息认证的真实用例</h2><p></p><p></p><h4>WhatsApp上的无身份信息遥测</h4><p></p><p></p><p>匿名凭据服务使客户端能够以无身份信息方式进行身份认证。通过匿名凭据服务去除身份认证中的用户ID，我们可以在满足数据收集简约化目标的同时保护用户隐私。为了服务于生产用例，我们必须创建一个健壮的架构，增强面对现实世界各种问题的适应能力。</p><p></p><p><a href=\"https://engineering.fb.com/2021/04/16/security/dit\">WhatsApp上的无身份信息遥测（De-Identified Telemetry，DIT）</a>\"是当前利用匿名凭据服务的一个用例。以前，我们用安全存储和数据删除策略，确保日志数据不会关联具体用户。但我们希望我们的隐私保护措施更进一步，将匿名凭据服务与WhatsApp系统集成，以便对某些WhatsApp客户端日志启用无身份信息认证。</p><p></p><p>大规模部署后，无身份信息遥测使WhatsApp在验证日志请求时无需收集身份信息，就能报告性能指标（对确保为每个用户提供快速、无崩溃的应用程序很重要）。整个WhatsApp家族都在使用匿名凭据服务，这个庞大的用例需要匿名凭据服务每秒处理数十万个请求。</p><p><img src=\"https://static001.geekbang.org/infoq/9f/9fab06051a8382a9ac514f2f97268d28.png\" /></p><p></p><h4>联合学习</h4><p></p><p></p><p>我们要强调的另一个用例是<a href=\"https://ai.facebook.com/research/publications/fair-resource-allocation-in-federated-learning\">联合学习</a>\"，这是一种训练全局机器学习模型的技术，私有敏感数据仅保存在本地客户端设备上（不需要上传到服务器）。在这种模式中，设备与服务器共享模型更新而不是原始敏感数据，服务器计算聚合模型的更新来优化全局模型。</p><p></p><p>这是使用匿名凭据服务进一步保护用户隐私的一种潜在方法。我们不希望恶意行为者发送欺诈性的模型更新数据，但我们希望确保合法用户能够帮助改进全局模型。通过利用匿名凭据服务，我们可以确保合法客户端以无身份信息认证的方式发送客户端模型的更新信息。</p><p><img src=\"https://static001.geekbang.org/infoq/4c/4c16b3a4cabfed1fe2444c4ae5510fe9.png\" /></p><p></p><h2>匿名凭据服务架构</h2><p></p><p></p><p>现在让我们深入了解匿名凭据服务架构。</p><p></p><p>匿名凭据服务是一个C++服务，基于Meta公司的容器编排框架<a href=\"https://engineering.fb.com/2019/06/06/data-center-engineering/twine\">Twine</a>\"开发。在全球范围对流量进行负载均衡，每个区域都根据需求动态伸缩。匿名凭据服务为颁发令牌和赎回令牌提供Thrift API。</p><p></p><p>有一项重要需求是，在不同用例间构建围栏，隔离匿名凭据服务的令牌。为什么呢？因为我们是多租户的，服务于各种用例。不同用例可能有不同的身份认证机制（例如，脸书用户与Instagram用户）。应当禁止不同的用例赎回颁发给特定用例的令牌。</p><p></p><p>为了解决这个问题，我们要求每个API请求都声明自己的用例名称，我们使用针对具体用例的密钥来隔离用例。我们把密钥存储在Meta公司的“钥匙串（keychain&nbsp;）”服务中，并通过Meta公司的异步作业基础设施定期更换安全密钥。此外，我们还有另一项工作是，在密钥轮换后，发布更新的匿名凭据服务公钥，让客户端可以获取更新后的密钥。</p><p></p><h2>匿名凭据服务扩展的经验教训</h2><p></p><p></p><p>在扩展匿名凭据服务的过程中，我们学到了维持服务可靠性和效率的三个关键经验：防止运行匿名凭据服务的成本随着流量的增加而线性增长、避免人为的流量高峰、在不需要专家知识的情况下，推进各个用例接入服务。</p><p></p><p>随着接入服务的用例越来越多，我们注意到，对新接入的用例，必须按其流量1:1的比例添加主机和更多的服务器容量。鉴于最近全球服务器供应链紧张，我们研究了如何简化匿名凭据服务，使其更实用，同时仍能保持我们的高隐私标准。</p><p></p><p>我们决定允许用例在合理的阈值内重用凭据。在匿名凭据服务服务器上，我们添加了一个重用凭据计数器（由Meta公司的分布式键值存储<a href=\"https://engineering.fb.com/2021/08/06/core-data/zippydb\">ZippyDB</a>\"提供支持）。该计数器将计算特定匿名凭据服务令牌被赎回的次数，如果赎回次数超过阈值，则请求失败。针对敏感的用例，还有赎回限制（即不重用令牌）。通过允许重用凭据，可以减少为特定用例颁发令牌的数量，从而节省服务器容量。</p><p></p><p>我们在扩展时遇到的另一个问题和流量尖峰有关。我们通过观察服务仪表盘，注意到匿名凭据服务的服务器在短时间内收到大量请求。这将导致服务器一时不堪重负，部分请求会失败。</p><p></p><p>我们发现，这些引起流量尖峰的请求都来自一个大型用例。在与相关的客户团队交谈后，我们了解到，他们把数据缓存在移动客户端上，然后每晚在同一时间，这些移动客户端分别把自己的数据批量发送到服务端。</p><p></p><p>尽管理论上这是个好主意，但这种模型实际上是在对我们的服务器进行分布式拒绝服务攻击（DDOS），因为突然有众多客户端同时发送了许多请求。为了解决这个特定用例的问题，我们通过添加抖动来分散请求，让它们错开发送时间。为了更普遍地解决这个问题，保护我们服务器的健康，我们与Meta公司流量团队合作，添加了一个全局限速器，如果匿名凭据服务流量超过某个速率阈值，限速器将选择性地丢弃这些超额流量。</p><p></p><p>我们在扩展匿名凭据服务时遇到的最后一个挑战是在工程方面。最初，我们有一个小团队，致力于推广匿名凭据服务，然后发现接入新的用例很困难。当时，接入新用例通常需要我们中的一个人与合作伙伴团队密切合作，解释匿名凭据服务的关键概念，并在我们的服务器上手动配置新的匿名凭据服务用例。</p><p></p><p>我们通过给接入匿名凭据服务的新用例创建平滑的接入体验来减轻这种合作成本。我们用React构建了一个自助接入匿名凭据服务的站点入口。现在，来自Meta公司的工程师们，可以使用该站点作为匿名凭据服务的一站式商店。</p><p></p><p>此外，我们为Android和iOS创建了匿名凭据服务客户端SDK，以提供高质量的加密原语和协议实现。客户端可以调用高级方法，例如直接获取匿名凭据服务令牌（fetch-acs-token），不需要自己一步一步构建令牌。这些方法通过调用匿名凭据服务的API、去盲化令牌和执行所有其他相关操作，来处理整个令牌交换协议。我们还改进了维基上的接入文档，投入资源开发了codegen工具。这进一步减少了客户的编码量，更容易与我们集成，让他们无需专家级的密码学知识即可使用我们的协议。</p><p></p><p>无身份信息化是保护数据和隐私的重要工具。共享和保护数据需要信任和责任感。展望未来，我们希望将匿名凭据服务进一步集成到Meta公司的数据基础架构中，并在身份认证用例之外的产品中用它进一步保护数据隐私。</p><p></p><p>我们希望我们的工作能够激发整个行业研发更多的隐私增强技术。</p><p></p><p>查看英文原文：<a href=\"https://engineering.fb.com/2022/03/30/security/de-identified-authentication-at-scale/\">How Meta enables de-identified authentication at scale</a>\"</p>",
    "publish_time": "2022-06-30 10:02:43",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "8 个月分析了 700 万个工作需求，最具前景的编程语言找到了",
    "url": "https://www.infoq.cn/article/p8T49s4DE7PbxE9MUH2x",
    "summary": "<p>国外网站 <a href=\"https://www.devjobsscanner.com/\">DevJobsScanner</a>\" 在过去的 8 个月时间中（ 2021 年 10 月到 2022 年 6 月）分析了超过 700 万份开发者工作职位需求，得出了行业编程语言需求量排行榜。DevJobsScanner 认为了解这些信息对于开发人员在工作行业取得成功至关重要。</p><p>&nbsp;</p><p>同时，需要明确的是，在这 700 万份工作需求中，DevJobsScanner 只挑选了有明确编程语言要求的，舍弃了对语言要求比较模糊的。</p><p></p><h3>需求量排名前 8 的编程语言</h3><p></p><p></p><h4>Javascript / Typescript</h4><p></p><p>&nbsp;</p><p>自 <a href=\"https://zh.m.wikipedia.org/zh/JavaScript\">Javascript</a>\" 作为 Web 编程语言出现以来，就成为了最受欢迎的编程语言之一。目前来看，Javascript 仍是整个市场上需求量最大的编程语言。此外，<a href=\"https://zh.m.wikipedia.org/wiki/TypeScript\">Typescript</a>\"（具有类型安全的 Javascript 超集）的到来也起到了推动作用，近年来 Typescript 的流行度有所增加，可以看到许多新的 Javascript 框架完全是用 Typescript 编写，例如 Angular 和 NestJS。</p><p>&nbsp;</p><p>在这 8 个月中，DevJobsScanner 发现了 486,717 个工作机会，占具有明确编程语言需求工作中的 32%。</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/84/7e/848b15a6be1d5006ba0418eb5e4edf7e.png\" /></p><p></p><h4>Python</h4><p></p><p>&nbsp;</p><p>2022 年市场需求量第 2 的编程语言是 <a href=\"https://zh.m.wikipedia.org/wiki/Python\">Python</a>\"，它的多功能性，从脚本、运行服务器到数据分析，是关键原因所在，此外，Python 还拥有伟大的社区。</p><p>&nbsp;</p><p>在这 8 个月中，DevJobsScanner 发现了 308,178 个工作机会，占明确需要编程语言的工作的 20%。</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/73/aa/7332e2ac8968d5d8632958e91bf9eaaa.png\" /></p><p></p><h4>Java</h4><p></p><p></p><p>2022 年市场需求量第 3 的编程语言是 <a href=\"https://zh.m.wikipedia.org/wiki/Java\">Java</a>\"。自 1995 年诞生以来，Java 一直非常流行。尽管近几年来，随着 Kotlin 等现代语言的出现，流行度在持续下降，但它目前仍然稳居前三，其中，许多互联网巨头使用的 Spring 等框架，也有助于 Java 保持这一地位。</p><p>&nbsp;</p><p>在这 8 个月中，DevJobsScanner 共发现了 262,064 个工作机会，占具有明确编程语言需求工作中的 17%。</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/74/99/74a995dcb77d393ef18789d64ec09c99.png\" /></p><p></p><h4>C#</h4><p></p><p></p><p>2022 年市场需求量第 4 的编程语言是 <a href=\"https://zh.m.wikipedia.org/wiki/C%E2%99%AF\">C#</a>\"。C# 是一种通用的多范式编程语言，基于&nbsp;C 和&nbsp;C++&nbsp;衍生出来。作为一种通用语言，C# 的使用范围很广，最常见的用法是与 .NET 框架一起使用，除此之外，它还在 Unity 游戏框架中被大量用于脚本编写。</p><p>&nbsp;</p><p>在这 8 个月中，DevJobsScanner 共发现了 135,166 个工作机会，占具有明确编程语言需求工作中的 9%。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/48/37/48bec28f4fbb178c3647d7289490ee37.png\" /></p><p></p><h4>PHP</h4><p></p><p>&nbsp;</p><p>2022 年市场需求量第 5 的编程语言是 <a href=\"https://zh.m.wikipedia.org/wiki/PHP\">PHP</a>\"。PHP 最初是简单的“个人主页工具”语言，诞生至今已经 27 年。PHP 主要用于 Web 开发，与 Laravel 或 Wordpress 等框架结合使用。</p><p>&nbsp;</p><p>在这 8 个月中，DevJobsScanner 发现了 109,018 个工作机会，占具有明确编程语言需求工作中的 7%。</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/4f/27/4f853e09c1e20aca1c62b4f7b3b5f427.png\" /></p><p></p><h4>C/C++</h4><p></p><p>&nbsp;</p><p>2022 年市场需求量第 6 的编程语言是 C/C++。从 <a href=\"https://zh.m.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80\">C 语言</a>\"的首次发布到现在已经过去了 50 年，从最初被命名为 \"C with Classes\" 的 <a href=\"https://zh.m.wikipedia.org/wiki/C%2B%2B\">C++</a>\" 出现到现在也已经过去了 37 年。在经历长时间的磨砺后，C/C++ 通过对语言的定期补充和改进保持了其流行度，现代 C++ 具有包括面向对象、泛型、函数式以及便于低级内存操作等特性。它在行业中的使用范围很广，在视频游戏、服务器、数据库、太空探测器等方面都有应用。</p><p>&nbsp;</p><p>在这 8 个月中，DevJobsScanner 共发现了 85,400个工作机会，占具有明确编程语言需求工作中的 5.5%。</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/f8/78/f86e474814cafeyycf16ed3799c8d478.png\" /></p><p></p><h4>Ruby</h4><p></p><p>&nbsp;</p><p>2022 年市场需求量第 7 的编程语言是 <a href=\"https://zh.m.wikipedia.org/wiki/Ruby\">Ruby</a>\"。Ruby 最常见的用法是与网络框架 Ruby on Rails 结合在一起。尽管排名不高，但 Ruby 在 Twitter、Github 和 Crunchbase 等知名公司内被广泛使用。</p><p>&nbsp;</p><p>在这 8 个月中，DevJobsScanner 共发现了 65,843个工作机会，占具有明确编程语言需求工作中的 4.2%。</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/6c/8a/6c6d1617fb9e53676103ce28d7cc608a.png\" /></p><p></p><h4>Go</h4><p></p><p>&nbsp;</p><p>2022 年市场需求量第 8 的编程语言是 <a href=\"https://zh.m.wikipedia.org/wiki/Go\">Go</a>\"。Go 还非常年轻，由 Google 在 12 年前创建，旨在多核、联网机器和大型代码库时代提高编程效率。从下图可以看出，Go 的流行度正在缓慢增长，DevJobsScanner 预计它可能会在 2023 年进入前五名，目前 Uber 或 Twitch 等知名公司正在使用 Go。</p><p>&nbsp;</p><p>在这 8 个月中，DevJobsScanner 发现了 30,162 个工作机会，占明确需要编程语言的工作的 2%。</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/5c/81/5cb468c1c762241147952be564435f81.png\" /></p><p></p><h3>编程语言市场需求量排行榜（完整列表）</h3><p></p><p>&nbsp;</p><p>以下是编程语言及其各自市场需求量的完整图表：</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/06/99/06e38acca261132yyce424cc6c380799.jpg\" /></p><p></p><p>按月细分的相同视图：</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/d7/40/d753ed4c719d0b9bce97ff53e92edd40.jpg\" /></p><p></p><p>总结来看，Javascript 和 Typescript 主导了开发人员就业市场，占据明确需要编程语言的工作机会中的 32%。这意味着三分之一的工作机会需要 Javascript 或 Typescript 相关知识。</p><p>&nbsp;</p><p>Python 和 Java 是 2022 年市场需求量第 2 和第 3 的编程语言，也有着大量工作机会。但要注意的是，在过去 2 个月时间里，Java 的工作机会已经超过了 Python，因此那些说 Java 已经过时了的言论可能也要重新考虑。</p><p>&nbsp;</p><p>同时值得关注的还有 C# ，在这 8 个月中，它一直在缓慢增长，Go 的情况也是如此。可以预见的是，这两种语言，尤其是 Go，未来可能会发挥更大的作用和占据更高的就业市场份额。</p><p>&nbsp;</p><p>参考链接：</p><p>&nbsp;</p><p><a href=\"https://www.devjobsscanner.com/blog/top-8-most-demanded-languages-in-2022/\">https://www.devjobsscanner.com/blog/top-8-most-demanded-languages-in-2022/</a>\"</p>",
    "publish_time": "2022-06-30 14:20:49",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "尤雨溪向 React 推荐自己研发的 Vite，网友：用第三方工具没有任何意义",
    "url": "https://www.infoq.cn/article/Y3ZHkP7MLrE2MHPVJeQH",
    "summary": "<p>&nbsp;</p><p>近期， React 团队正在更新 React 文档。期间，Vue.js作者尤雨溪发布<a href=\"https://twitter.com/youyuxi/status/1540359515819847680?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1540359515819847680%7Ctwgr%5E%7Ctwcon%5Es1_&amp;ref_url=https%3A%2F%2Fcdn.embedly.com%2Fwidgets%2Fmedia.html%3Ftype%3Dtext2Fhtmlkey%3Da19fcc184b9711e1b4764040d3dc5c07schema%3Dtwitterurl%3Dhttps3A%2F%2Ftwitter.com%2Fyouyuxi%2Fstatus%2F1540359515819847680image%3Dhttps3A%2F%2Fi.embed.ly%2F1%2Fimage3Furl3Dhttps253A252F252Fabs.twimg.com252Ferrors252Flogo46x38.png26key3Da19fcc184b9711e1b4764040d3dc5c07\">推特称</a>\"，新的React文档应该向初学者推荐 Vite 而不是 CRA——或者如果需要使用ESLint或测试，至少也该推荐一个基于Vite的自定义模板（也应该使用 Vitest 而不是 Jest）。</p><p>&nbsp;</p><p>Vite 是一个通用的构建工具，旨在为 VanillaJS、Vue、React 和 Svelte 等现代 Web 项目提供更快、更精简的开发体验，它不依赖于任何特定的框架。值得注意的是，Vite 由 Vue 开发团队开发，尤雨溪也是 Vite 的核心开发者。</p><p><img src=\"https://static001.infoq.cn/resource/image/23/c1/2317979dd1036a8yyac33c46f11f2dc1.png\" /></p><p></p><p>尤雨溪发布这样的内容引起了开发者的讨论。</p><p>&nbsp;</p><p>有开发者留言称：React 围绕自身创建了自己的工具（jest、CRA、测试库）。许多项目仍在使用它们。推荐第三方工具没有任何意义（不管是否为了初学者），无论其他看起来多好，都要维护自己的工具。</p><p>&nbsp;</p><p>尤雨溪回应称：React 团队没有创建 Jest/testing -library，也没有维护它们。CRA 在某种程度上是第一方的，但一旦放弃它，他们可以为用户提供更好的 DX 并减少自己的维护负担。</p><p>&nbsp;</p><p>面对开发者对Vite 的质疑，尤雨溪表示，“我不认为 Vite 的级别太低，它提供了几乎 CRA 提供的所有配置。”尤雨溪还补充道，“我当然有偏见，但我很想知道是否有任何的正当理由来坚持使用CRA。”</p><p>&nbsp;</p><p></p><h2>两大主流框架之争</h2><p></p><p>&nbsp;</p><p>作为 Web前端的两大主流框架，React 和 Vue 之间竞争尤为激烈，双方“战争”持续多年，分别拥有自己的坚定支持者。</p><p>&nbsp;</p><p>React 起源于Meta（前Facebook）的内部项目，当时公司对市场上所有 JavaScript MVC框架都不满意，便决定自行开发。2011 年，Facebook首次将 React 部署在 News Feed 上，随后在 2012 年部署到了 Instagram 上。2013 年 5 月，Facebook宣布将项目开源。</p><p>&nbsp;</p><p>目前，React 是很多大公司的首选，像 Atlassian (Jira, Trello)、Codecademy、Dropbox、Netflix、Airbnb、Twitter、Reddit 和阿里都使用的是React。React虽然一直被视为框架，但同样适合构建Web应用程序的整个视图。</p><p>&nbsp;</p><p>而 Vue 最早是在2014年2月发布。尤雨溪表示，Vue 提取了Angular中自己喜欢的部分，然后构建出了这款相当轻量的框架。最早的版本发布在 Hacker News、Echo JS 与 Reddit 的 /r/javascript 版块，一天之内就登上了这三个网站的首页。现在，Vue 也是Github上最受欢迎的开源项目之一。</p><p>&nbsp;</p><p>根据<a href=\"https://www.zhihu.com/question/472193255/answer/2235015723\">尤雨溪的说法</a>\"，Vue 的主要用户是中小型企业、自由职业开发者和小型agency。现在使用Vue的企业包括 Behance、Dribbble、Adobe、GitLab、Namecheap、Grammarly、任天堂、Zoom、Louis Vuitton、Google Careers等。</p><p>&nbsp;</p><p>这不是尤雨溪第一次公开评价React。</p><p>&nbsp;</p><p>今年 5 月，React 核心团队成员 Dan Abramov 在推特上发布了 React 新文档，有网友赞扬该文档在结构、美观和性能等方面都达到了非常高的标准。但尤雨溪表示，在对 Vue 新文档和 React Beta 文档分别做了测试后认为，Vue 新文档在性能方面更有优势。</p><p>&nbsp;</p><p>对此，Dan Abramov 表示，文档还处于 Beta 版本，正式版上线前会优化性能。然而有网友发现，Dan Abramov 在 5 月 26 日晚上熬夜对 React 新文档的性能做了优化。React 与 Vue 的竞争可见一斑。</p><p>&nbsp;</p><p></p><h2>到底用哪个？</h2><p></p><p>&nbsp;</p><p>业内对“React 和 Vue 到底谁更厉害”、“React 和Vue 选谁”的讨论从未停止。开发者 Oleg Goncharenko 从React与Vue.js如何创建组件、各组件之间如何相互通信，以及组件如何影响浏览器DOM三个方面做了分析。</p><p>&nbsp;</p><p></p><h4>React与Vue.js中的组件构建原则</h4><p></p><p>&nbsp;</p><p>组件的作用是在网络浏览器上呈现数据，包括向用户展示的UI部分（HTML）与逻辑部分（JS）。这里的逻辑，负责描述浏览器中所传递数据的功能和方法。</p><p>&nbsp;</p><p>React使用JavaScript Syntax Extension (JSX)，这种语法语言有助于编写出与浏览器内本地方法相对应的函数。Safari、Chrome 和Firefox 都基于JS引擎，所以可以直接与由React编写的逻辑函数对话。但由于JS代码中还包含大量HTML标记，网络浏览器无法直接识别。因此，React需要使用Babel Transpiler将代码转换为纯JS。</p><p>&nbsp;</p><p>JSX允许在JS当中返回HTML或者在HTML中执行。而JS变量则可以用HTML标记进行分配，具体如下所示：</p><p>&nbsp;</p><p></p><blockquote>const message = <h1>React is cool!</h1></blockquote><p></p><p>&nbsp;</p><p>动态变量可以被放在JSX中的括号语法( { ... } )内。</p><p></p><p>根据Stackshare的统计数据，React最受欢迎的特性一是组件（747票），二是便捷性（484票）。但JSX获得的支持则非常有限，仅得到31票。</p><p></p><p>JSX最大的问题在于它不要求特定的代码结构，所以组件逻辑和UI都存放在单一文件内，很可能导致代码混乱。</p><p>&nbsp;</p><p>这种将组件存放进单一文件的思路跟Angular正好相反，后者要求将HTML、JS和CSS分别保存在不同的文件内。除非Airbnb和Netflix加入React社区，并使用React构建自己的MVP（最小可行产品），否则这种单文件组件实现形式肯定无法成为主流。</p><p>&nbsp;</p><p>与React一样，Vue.js也推荐将 UI 和逻辑保存在同一文件中。Vue.js 中的组件代码则被包含在特定的HTML模板之内。模板的存在为组件代码勾勒出了清晰的轮廓。程序员可以借此观察方法、属性和渲染函数。</p><p>&nbsp;</p><p>另外，Vue.js有自己的特定语法&nbsp;，使用双括号{{ }}作为数据占位符。HTML属性则是VUe.js中的指令，包含前缀v-。同时，Vue.js还支持用JSX进行编码，这也扩展了框架自身的编程能力。</p><p>&nbsp;</p><p>总的来说，React 要求开发者拥有扎实的JS技能，而 Vue.js 对新手开发者更加友好。与React类似，Vue.js也支持使用JSX编写，但其组件是用HTML模板编写而成。</p><p>&nbsp;</p><p></p><h4>组件如何影响浏览器DOM？</h4><p></p><p>&nbsp;</p><p>当用户打开网页时，网络浏览器会将其解析为树状结构，并自上而下进行读取，这种树状结构文件被称为文档对象模型（DOM）。如果用户在页面上执行了某些操作，浏览器就需要重新创建页面并读取DOM。这就会带来更多负载，并占用掉浏览器资源。</p><p>&nbsp;</p><p>React 避免了传统 DOM 渲染，转而利用浏览器内的数据渲染能力。React 设计了一种把内容渲染到虚拟DOM的方法。运作原理如下：</p><p>&nbsp;</p><p>在网络浏览器加载网页之前，React会制作一份DOM副本，并把所有对象都放进一个新组件内。当用户打开网页时，React访问的不是实际DOM，而是渲染DOM的副本——也就是虚拟DOM。当用户浏览页面的同时，React也在计算其中所有变更。如果用户点击了某个按钮或执行了其他操作，React就会创建一份新的DOM快照，再将其与之前的版本进行比较。如果再有其他节点元素发生了变化，React就会更新页面以渲染实际DOM。</p><p><img src=\"https://static001.infoq.cn/resource/image/eb/f8/eb0db858a4bc6e4e84cf2c06fd836af8.png\" /></p><p></p><p>而 Vue.js 没用 React 的虚拟 DOM 思想，处理方式也有所区别。尤雨溪对此曾评价道：在大多数情况下，这种方式确实资源成本低廉、速度更快。但是，如果需要重新创建大量JS对象，那操作成本仍然很高。虚拟DOM最大的问题是，无论模板中的动态内容是多还是少，总是需要遍历整个树才能弄清到底发生了哪些变化。</p><p>&nbsp;</p><p>因此，Vue.js现在只跟踪DOM树中每个对象之内的依赖项。Vue 3.0.11中的虚拟DOM只跟踪动态元素，也就是包含</p><p>的部分。</p><p>&nbsp;</p><p>遍历 DOM 树内节点确实非常耗时，因此Vue做出了技术调整。但自从16.0版本开始，React团队已经完全重写了工具包核心，改进了渲染算法，也即现在的React Fiber。</p><p>&nbsp;</p><p>React将函数分为影响浏览器DOM的函数，以及与props、state更新相关的函数。组件更新被归入“functions”类别，而生命周期方法和DOM变更则被归入“side-effects”。这样程序员就可以优先考虑渲染工作。为了让动画能够平滑过渡，生命周期操作等更为耗时的工作可以先行延后，同时也可以将高优先级任务安排到同一队列内，之后再拆分成多个更小的任务或者增量。</p><p>&nbsp;</p><p>由于工作单元，即fiber nodes的存在，上述解决方案也就有了实现的可能。每个fiber对应渲染流程中的特定步骤。它提出数据的线性表示，而非树状结构。这样尤雨溪提出的时间损失问题也就迎刃而解了。</p><p>&nbsp;</p><p>React 因 Fiber 得到改进，也吸引到更多初创公司。当初使用Vue.js的阿里如今也选择了React。此处，总结下React 和Vue.js 在虚拟DOM处理方法上的不同：</p><p>&nbsp;</p><p>Vue.js中的模板机制可将组件表示为迷你DOM。Vue.js并非跟踪每个对象，而是遍历模板中的动态部分，因此能够充分优化虚拟DOM操作，并充分利用Vue.js项目中的客户端渲染。React利用Fiber技术，可以跳过或推迟较为耗时的任务以提升程序性能。如此一来，开发人员就能在动画过渡期间控制渲染过程、调整性能水平。</p><p>&nbsp;</p><p></p><h4>组件数据绑定</h4><p></p><p>&nbsp;</p><p>在数字绑定方面，大家往往持不同观点。有些人说React只支持单向数据流，Vue.js只提供Angular那样的双向绑定，其实并不是这样。React和Vue.js都支持单向和双向数据流，而且也都优先推荐使用单向数据流。</p><p>&nbsp;</p><p>React支持回调函数，因此子组件可以将props传递给相应的父组件。例如当用户在子组件的输入字段内键入文本，这些变更也将被反映至父组件并执行内容更新。React社区还提供react-hook库，专门用于实现双向数据绑定。</p><p>&nbsp;</p><p>Vue 3.0.11版本的说明文档也解释了其单向数据绑定的优势：所有props在子属性与父属性之间形成一个单向向下绑定。当父属性更新时，就会下流至子属性，但子属性更新不会上流至父属性。这样可以防止子组件意外改变父组件状态，避免提高应用程序数据流的理解难度。</p><p>&nbsp;</p><p>此外，每当父组件更新时，子组件内的所有props都会被刷新为最新值。因此开发者不应尝试改变子组件内的prop。在检测到这类操作时，Vue会在控制台内发出警告。</p><p>&nbsp;</p><p></p><h2>总结</h2><p></p><p>&nbsp;</p><p>总的来说，React的优势在于客户端渲染极快、对数据流的良好控制、具有轻量级架构，可扩展性与可伸缩性好，并拥有大型社区支持。但是，React 在缺少Redux、routing等库和服务的情况下无法运行、无结构代码极易陷入混乱。同时学习曲线较为陡峭，要求开发人员对JS拥有深入了解，并具有单页应用程序（SPA）设计经验。另外，更多的选项也对应着一定的实施成本。</p><p>&nbsp;</p><p>因此，以下类型的企业可能更适合使用React：</p><p>&nbsp;</p><p>需要在市场上快速开发功能并验证项目的早期初创企业。寻求外包开发的企业。与Vue.js相比，React专业开发人员的劳动力供应更为充足。基于产品且需要跨平台应用开发的企业（强烈推荐基于React技术的React Native）。</p><p>&nbsp;</p><p>Vue.js 将 React 与 Angular 的优势属性结合为一，最大的亮点就是完美的用户体验。此外，它还提供虚拟DOM功能和经过优化的代码结构。Vue.js 对开发者友好，有精细的用户文档。但Vue.js较难获得经验丰富的开发人才，社区规模相比之下不如React。</p><p>&nbsp;</p><p>因此，以下类型的企业可能更适合使用Vue.js：</p><p>&nbsp;</p><p>以Web类产品为核心的企业。希望在开发过程中实施单一流程的企业。缺乏在构建过程中使用框架的经验，或希望充分利用原有JS开发人才的企业。</p><p>&nbsp;</p><p>&nbsp;</p><p>参考链接：</p><p>&nbsp;</p><p><a href=\"https://brocoders.com/blog/react-vs-vue-comparison-2021/\">https://brocoders.com/blog/react-vs-vue-comparison-2021/</a>\"</p>",
    "publish_time": "2022-06-30 15:17:42",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "今天很多 CTO 都是被干掉的，因为他没有成就业务",
    "url": "https://www.infoq.cn/article/ivfWbIUjo2Sgwuxg5veY",
    "summary": "<p></p><blockquote>我可以丝毫不开玩笑地说，今天，很多传统企业里的研发都只是“工人”，哪怕是 CTO，充其量也只是“高级工人”，如果不转换思维去成就业务，就只能停留在工人级别“计件制”的竞争，迟早被裁掉。</blockquote><p></p><p></p><p>后疫情时代，传统企业面临的现实世界是怎样的？偏传统的企业做数字化转型最迫切的问题是什么？最好解决的问题是什么？最难解决的问题是什么？数字化转型这事应该由谁来牵头，谁为结果负责？在数字化转型的过程中，有哪些关键技术值得下力气去做？数字化投入无法转化为业务价值，问题出在哪里？如何评价数字化转型的 ROI ？……</p><p></p><p>6 月 8 日，彩食鲜副总裁兼 CTO、前苏宁科技集团副总裁乔新亮受邀参加 InfoQ 中国 15 周年庆重磅直播，点对点回答了以上六个问题，这些问题是 InfoQ 在社区中收集的数字化转型被关注较多的问题。长达 1 小时的分享中，乔老师的回答干脆直接、观点鲜明，让听众直呼过瘾、意犹未尽。</p><p></p><p></p><p></p><p>以下是文字整理。</p><p></p><h3>一问：后疫情时代，传统企业面临的现实世界是怎样的？</h3><p></p><p></p><p>第一，今天我们正处于乌卡时代。</p><p></p><p>乌卡时代（VUCA )，是 Volatile（易变不稳定），Uncertain（不确定），Complex（复杂），Ambiguous（模糊）的缩写，这个概念最早由美军在 20 世纪 90 年代提出，用来描述冷战结束后的世界，后被引用描述变幻莫测、充满不确定性的商业环境。</p><p></p><p>今天，很多企业里面的领导层经常焦虑，为什么呢？因为当前这个时代就是乌卡时代，这是今天的企业面临的第一个真实的情况。在这个情况下，对于 Leader 最大的一个要求就是方向。所以我在公司里面经常讲一句话——没有方向感，最大的责任人就是一把手或这个高管团队。</p><p></p><p>第二，中国市场的变化，从供不应求到供大于求。</p><p></p><p>不管是真实的物质产品，还是虚拟产品，包括技术产品，都是从供不应求到供大于求。在过去，业务的增长可能很大来自于增量用户，但如今我们很多时候需要基于存量用户去经营。</p><p></p><p>应对第一点问题，你需要做敏捷。那么针对第二点，你需要足够优秀、足够卓越。原来做生意，有渠道就行了，比如原来我们去买股票是需要拿一个纸条子的，那个纸条子还得花钱买，再比如原来你可以把一台空调卖到几万块甚至十几万块，因为只有你有，或者只有你有渠道，但今天到处都是空调，到处都是电器，你还能简简单单卖这么贵吗？</p><p></p><p>为什么今天我们普通人比过去皇帝过得还好？都是依托于科技的进步，而随着科技越来越变成基础设施，人民的生活还会越来越好。</p><p></p><p>第三，企业原来是先做大再做强，现在要先做强再做大。</p><p></p><p>我觉得在过去很多时候，其实很多企业是先做大后做强，因为供不应求，都是增量用户，等你精雕细琢出来，蛋糕早被瓜分完了，所以当时做企业是不计成本、不惜代价，因为有资本的助力，你可以有恃无恐。但现在是什么？现在你一定要先做强后做大，否则死路一条，我觉得这也是创业者以及 IT 部门人员要刻在骨子里的认知。</p><p></p><p>这是我针对第一个问题给出的答案，我觉得弄清楚这个问题非常非常重要，因为人一定要知道自己所处的上下文，所处的环境，所处的时代，不要总觉得自己很牛逼，其实很多时候是因为时代牛逼。</p><p></p><h3>二问：偏传统的企业做数字化转型最迫切的问题是什么？最好解决的问题是什么？最难解决的问题是什么？</h3><p></p><p></p><p>最迫切的问题，统一思想。</p><p></p><p>也就是说，在大方向上，大家的思想是不是都是一致的。有的企业对这一点真的是有非常深刻的认知，比如平安银行。我曾经去平安银行做过交流，了解到平安银行购买了数字化转型的课程，让几万人都去学习，所有人甚至包括司机都要参加考试，这被内部戏称为平安银行的高考，我说这个太变态了。但是我觉得只有这样，这家企业里的人才能形成这个共识，因为做数字化转型最难的一个问题就是统一思想，做不到会相当麻烦。当然，要做到这一点，不同的企业有不同的节奏和路径，不一定要和他们一样。</p><p></p><p>最好解决的问题，技术问题。</p><p></p><p>我可以斗胆说一句，今天中国大多数商业公司没有什么特别的技术挑战，撑死了也只是你公司里自己的技术挑战，放到全北京、全中国去看，就不是什么挑战了。当然如果你把普遍的业界共有的技术挑战给解决了，那我觉得你发财了，你应该去创业，这是一个巨大的机会。所以，我认为业务的支撑技术不会是一个很大的问题，而且是我们作为 IT 部门最应该、最快跨越的问题。</p><p></p><p>最难解决的问题，新建一个组织，实现业务 IT 的一体化。</p><p></p><p>数字化转型最后的结果是什么？是有一个新的组织，有一帮既懂技术也懂业务的人，但这在当前的企业里面可能是不存在的，或者不是普遍存在的。那怎么办呢？企业要培养这样的人，所以这一点对应的就是要去做组织转型，让企业达到优秀卓越，去应对充分竞争的市场。最后让这个组织具有专业分工、高效协同的特征。你可以观察一下，你现在的公司是不是已经做到了这一点。</p><p></p><h4>要培养创始产品经理和企业架构师</h4><p></p><p></p><p>关于人员培养的问题，有一个很重要的事情就是要去培养产品经理。这里的产品经理不是我们一般说的这种偏执行性的产品经理，业务的翻译器，而是创始产品经理，他是懂业务的，他知道做什么对公司有价值，一旦做了就会把这个产品做好。另外，还要培养企业架构师，去做整个高阶的体系的设计。新时代需要的这两种人才，企业可能都没有。</p><p></p><p>我可以丝毫不开玩笑地说，今天很多研发都只是“工人”，如果你不像我刚才说的转换思维去成就业务，就只能停留在工人级别“计件制”的竞争，挣两三万很高了。</p><p></p><p>我在这里稍微展开讲一下我们公司。我们公司总共 4000 多人，研发团队总共就 100 人，核心的业务全部是自研的。一个小团队有 3 到 5 人，做 1 到 3 个产品，他们不断把这些产品的成熟度做高，从支持业务慢慢地转向接管业务。随着我的产品做得越来越好，请问，业务部门的人难道不应该去提升能力、去更进步吗？否则我为什么要研发去做这个产品？我们公司做了一件很明确的事情就是，随着科技能力建设的提升，做出了共享中心，然后进行裁员。你猜结果怎么样？产品做得更好了，因为我们把标准做在了产品里边，我会在后面特别展开去讲这件事情。</p><p></p><p>做数字化转型不只是个技术问题，首先你要对业务深刻理解，要高度抽象，要有架构设计，你还要推动最难的组织变革。你也知道，历史上做变革的人下场大多不好，放在今天也一样，做数字化转型真的是太难了。</p><p></p><p>我对第二个问题的回答到此为止，不一定特别适合你的企业，但是我的观点非常鲜明，我认为它是对的，并且成功实践过。</p><p></p><h3>三问：数字化转型这事应该由谁来牵头，谁为结果负责？</h3><p></p><p></p><p>你有没有注意到，我在前面说今天其实大多数企业是没有这种人才和团队的，那数字化转型这事儿应该由谁来牵头、谁来为结果负责？有人说，过去是 CTO 负责。过去的 CTO 就是个技术宅男，充其量就是个高阶的工人，公司的业务啥都不懂，他怎么能做得好这事呢？所以，大多数传统的 CTO、CFO 以及 CMO 等等角色无法胜任领导大家去转变思想成就业务这件事。</p><p></p><p>但是我认为，这件事最终还是要让 CTO 去承担，去牵头，道理很简单，IT 人员可以转业务，但是你让一个业务部门的人来转 IT，想要他从头去学习 Java 和 K8s，这不是很难吗？从大方向来说，现在的企业没有这样的人，所以需要能培养就培养，能招就招，但是这些人最终都得到 IT 部门去，对 IT 部门来说这个人很重要。</p><p></p><p>你可能不知道，今天很多的 CTO 都是被干掉的，在公司里边很没地位的。为什么？因为他没有成就业务。 我在公司里观点就很鲜明，因为我给公司创造价值。所以我就跟 IT 团队讲，我们要干的就是把业务部门裁掉，裁不掉他们就裁我们，这是血性，这也是方向，要是你不做到这个迟早会被裁，再过三年就像一些公司一把裁掉 IT 团队 90% 的人员。其实这很正常，企业要存活，等你真正面临企业的生死存亡时刻，你就会知道这是很残酷的一句话。</p><p></p><p>那么，谁来为结果负责呢？谁强谁负责。就像在公司里边，这个需求到底什么时候做，不好意思，我说了算。如果业务部门跟我谈了一堆没啥用的需求，我可以压需求三个月不做，我觉得你作为 Leader 真的要扛起这事儿。但是回过头来讲，在有的企业里面你能这样吗？所以很多企业我是不去的，去了我肯定死得很惨。</p><p></p><h4>应对之策</h4><p></p><p></p><p>第一个，一个产品，如果按照成熟度来划分，它可以被高度总结为工具、助手、专家三个等级。</p><p></p><p>第一个阶段，工具，对业务部门有点帮助，对别人有点用。第二个阶段，助手，你这个人、你这个岗位百分之七八十被我的产品取代了，这叫助手。专家是什么？你，裁掉，当然这是形象化的表述，实际是指是替换掉做的事，关于相关人员，那是公司 HR 的事。</p><p></p><p>可以很明确地说，我们现在已经进入到助手和专家之间。我也可以很明确地跟大家讲，我们公司就是每个月都在裁业务部门的人，你就得进步，就得转岗学习，你做的那点事有什么系统做不了的？真的留下不能取代的是真正有价值的工作。</p><p></p><p>我们把这些角色给高度抽象了以后，你可以看看一个公司里到底有多少人是有创造力的，有的人做的不是搬数据就是搬菜。你把数据从这个部门搬到那个部门，加工一下再搬到下一个部门，这就是搬数据的，挣的工资可能是 1 万 5 到 2 万。搬菜的呢，把这个菜从工厂加工出来，然后再搬到下一个地方，一个月挣 4000 到 8000。搬数据的，IT 都可以接管，搬菜的，可以用机器人去取代，比如 AGV 搬运机器人。由此，我们可以让员工和公司一起进步，不要去做低质量的重复性工作，而是不断去做更高层级的、创新的、有创造力的工作。</p><p></p><p>第二个，你要建设一个系统驱动的体系，因为你整个公司的业务是被系统去接管和驱动的，而不是一个 Excel 系统。我打个比方，如果你做的东西只停留在工具级别，只做了个 Excel 系统，只做了个记录，那有什么用？事实上，很多公司就是如此，我们公司之前也是。</p><p></p><p>第三个，一定要做组织变革。 但其实面对这一点，大多数的公司会完蛋。全是利益，怎么做组织变革？因此，从这一点去看，你永远不要害怕大公司。大公司能做组织变革吗？不是他姨姨，就是他姑姑，全是关系，如何做到专业分工、高效协同？但是你不做这个又能怎么办呢？乌卡时代，存量竞争需要卓越优秀。所以我觉得，创业公司永远要充满信心地去干掉大公司，大公司的效率就是低。其实我对创业公司都充满希望，也愿意拿这个认知去投资那些我看好的创业公司，我觉得认知可以给你带来很多的好处和回报。</p><p></p><p>所以你其实要打造的是数据、用户体验驱动内部经营完善的体系。什么叫驱动内部经营完善？做得不好的要批评他、要通报他、要把他裁掉，做得那么垃圾的为什么不裁掉，是吧？不做这些事情，你的 IT 的产品能好吗？在这一点上，我们公司就推进得特别好，公司高管层意见一致。我在我们公司坚决地推进这点，推进不下去，我滚蛋，因为推进不下去是不可能成功的，我为什么要在这里浪费时间。</p><p></p><h3>四问：在数字化转型的过程中，有哪些关键技术值得下力气去做？</h3><p></p><p></p><p>我在前面讲到，技术不是挑战，不是问题，但是技术很重要，你在公司里面就是吃技术的红利的，要用你的技术去发挥价值。</p><p></p><p>这里插个题外话，我一直认为，科技向善，科技不与人争利，人跟人才争利。公司不会因为用了哪个系统效率变高了裁你，是因为你那些低质量的重复性工作被系统取代后，你还不思进取，不去做有创造性的新工作，老板觉得你没用了，他才会裁你。</p><p></p><p>但是最后想一想，这些科技是不是会变成社会基础设施？过去只有少数人、少数组织能享受的，后面慢慢都会变成社会基础设施。当你带着这种认知历史的时候，会发现几千年来大多如此。农业社会，犁的发明让耕种的效率一下子提升一大截，这绝对是一个伟大的发明。那今天是信息社会，作为技术人，你就要吃这个红利，对吧？我之前说，技术不是挑战，但不代表不重视技术。既然技术不是挑战，那你就得把它发挥到极致。</p><p></p><p>怎么发挥到极致？很多人一讲技术，一下子就跳到什么云计算、大数据、AI，我觉得那都是扯淡，那都不是在企业里当将军的。</p><p></p><h4>企业里真正的“将军”应该去做什么？</h4><p></p><p></p><p>第一，顶层设计，系统驱动。</p><p></p><p>从整个大的角度，你就把公司当成一个大产品，里边有几十个系统，公司所有的业务都被系统接管，系统之间还有交互，我给它高度抽象为交易体系、协同体系、监控体系、绩效体系。每个产品自己去干活，干不了的时候交给人，人干完了再交回来。这样一来，系统知道人到底在干什么、干得怎么样、人干的事我能干吗，产品经理就要去关注系统驱动。今天有多少公司是这样的？少之又少。我们公司之前不是这样，但我们已经建设成这样，最后你会发现这是一个非常非常大的变化。</p><p></p><p>所以，我认为首先就要做好顶层设计，企业架构师把业务高度抽象，创始产品经理才能把系统驱动的一整套体系设计出来。至于哪些自建，哪些购买，就是再往下一层的事情。</p><p></p><p>这里我顺带讲一下，企业需要画一条线，线上的自建，线下的购买。哪些自建？让你具备核心竞争力的要自建，毕竟这种让你绝对牛逼、超越竞争对手几十号排位的产品，怎么可能会有厂商卖给你？而有的东西就没必要自建了，能买就买，所以越是偏技术性的越不要做。很多技术团队在公司里面去忽悠人，我们公司里面这样忽悠我的，都被我干掉了，然后我自己下场干。人家外面有做得好的产品不拿过来，非要自己下场干是吧？你这么牛逼怎么不像毕玄一样去创业？</p><p></p><p>你也可以选择自建，比如一个商业产品要价 20 万，而你可以很快自建出来满足公司需要，并且只用花 10 万的研发成本。不过，现在 IT 的人力成本已经这么贵了，10 万的成本你能投入几个人？按照 2 万一个人来算，10 万也只能让 5 个人做一个月，如果要做两个月，那么就是 2.5 个人，这点人能做出什么像样的产品？</p><p></p><p>所以为什么过去中国的 B 端做得不好？我觉得 B 端创业最大的竞争者不是竞争对手，是甲方的 CTO 和对应的团队，就是像我这样的 CTO。</p><p></p><p>不管你想做成什么事，你都要找到最优解，首先就要掌控设计。</p><p></p><p>第二，技术上一定要关注模块化。 既然要专业分工，那么模块化就要做好。很多人在这一步就直接从一个大单体应用跳到微服务了。微服务是最终的结果，但我们能不能慢慢地过去？别一上来就依赖倒置、接口分离，很多技术团队根本没那么高的水平。你只要把模块化做好，也就是说，这个模块里的数据只有这个模块可以访问，其他人访问是不被允许的，至少能把这个守住，你的架构就不会烂到家。</p><p></p><p>第三，要关注用户体验，一定要有监控体系。 你的系统里边到底怎么样，服务响应时间怎么样，用户访问你，他有没有业务异常，有没有系统异常？如果你连用户发生了什么都不关注，你怎么可能做好？所以你要有监控体系，也要做好治理工作。我们公司的目标，今年 6 月 30 号以后，生产环境不允许有一个异常，每天都要清理掉，不管任何服务，响应时间都不允许大于 2 秒，有定义 SLA（Service Level Agreement） 的再说，如果确实有长于这个时长的，那也是被特批过的。所以我觉得一定要有监控体系，否则生产环境已经烂得一塌糊涂了， IT 根本不管，还在那里吹牛，在整天做项目。</p><p></p><p>第四，要产生价值，一定要有目标管理。 关于目标管理，第一个要谈的就是 OKR ，要有方向感。然后你的团队还要有周目标、日目标，抓执行力，最后要抓人效数据。我们常常讲，团队要提高研发效能，但有没有管理说过人效的问题？有人说，这是不是就是卷？你可以认为这是卷，那你说西点军校卷不卷，企业就是要去竞争的，你要和企业一起去成功。另外，我觉得人尽量不要招多了，尽量少招人，3 到 5 人就是一个创业团队，具体的原因我会在后面讲到，分析一下大家跟公司共存亡这个问题。很多员工其实自己在单位里上班也浑浑噩噩的，对自己来说没有意义，对单位来说也吃亏，其实我觉得这都是管理层出了问题。</p><p></p><p>第五，数据驱动经营完善，一定要看数据。 在今天，一个企业经营不看数据不就是扯淡吗？尤其是管理干部和领导，一定要意识到数据特别重要，要用数据驱动内部进行完善。比如 OKR 里面都是数据，而且数据都是系统统计出来的，做到多少就是多少，全公司人都能看见。目标和目标对应的数据管理特别重要。</p><p></p><p>第六，只用一只眼睛盯着 AI。 当前的 AI 大多数时候没什么用，因为它还不是真正的人工智能，是傻人工智能。在这个情况下要发挥 AI 的价值，需要有几个依赖。第一，你的数据得够多。第二，数据得够准确。你们公司有数据吗？连数据都没有还谈什么 AI？你说有数据，主数据管理都没做好，最基础的数据都是垃圾数据，怎么可能做好人工智能？第三，上层的大数据做好了吗？大数据没做好，AI 怎么可能做好？所以 AI 到公司里面之后全是坑，最后你也被坑。但是客观来讲，AI 是不是就没用？还真不是。我去年就在盯 AI 的东西，我们在做销售的智能报价，大概在今年 9 月份左右，我们公司的报价应该会全面地被系统完全接管，这里其实就利用了很多产品的能力，再加上 AI 的辅助。</p><p></p><p>第七，三大效率。</p><p></p><p>这里我会特别展开讲一下。你说这跟技术有关系吗？每一个都特别有。技术是为什么服务的？技术是为发展业务服务的。</p><p></p><p>研发效率</p><p></p><p>像 CI/CD、云计算、分布式服务、DB 缓存等等，有关基础平台和组件都要持续建设完善，你投入两到三个人干这个活儿，就可以让一百多个人效率更高，何乐而不为呢？我们做这个事情的目的就是让开发人员只写代码，测试人员只写测试案例，我们在各个层面都持续观察、分析研发人员到底在忙什么，然后帮助他提升效率。</p><p></p><p>另外一个与研发效率相关的是要搭建一个 SOA（Service Oriented Architecture） 和 EDA（ Event Driven Architecture ） 的架构。打个比方，我前面提到的交易体系，它是比较稳定的，适合用 SOA 架构。那协同体系呢？我们今天需要应对各种各样的变化，所以搭建的时候就需要用事件驱动的架构，也就是 EDA 架构。当你把有很多变化的东西放在 EDA 架构上之后，你的研发效率会飞快提升。</p><p></p><p>此外，针对 CI/CD 而言，产品经理要跟开发有共同的语言，开发跟测试的工作要解耦，开发发布到生产环境是不依赖于测试的，这其实是需要有一整套的体系和支持的能力，比如说要有特性开关。你要想尽一切办法让大家都尽量不依赖地、快速地把自己的工作做完，最大化地降低研发的半成品。什么叫半成品？没有投入到生产环境的就是半成品，这是我们特别考核的一个指标。如果哪家公司不在这上面投入，那我觉得他们太傻了。要么投入两三个人去做，要么去买，这件事绝对值得。</p><p></p><p>会议效率</p><p></p><p>大家很容易忽略会议效率，但我认为我们需要永无止境地关注会议效率。我有一句话叫“两年之内，每周必须谈会议效率哪里要提升”，其实公司里大量的时间都是浪费在会议上。当然，大量的有用的价值也都产生在会议中，但是你一定要持续地去优化它，比如你要引入一些会议的工具，你要去观测，你要去教大家如何开会。</p><p></p><p>决策效率</p><p></p><p>决策效率也特别重要，不要议而不决。我对团队说过一句话，中层干部要独挡一面，不敢做决定的都要被干掉，不许拿 A/B 方案来跟我来汇报，不好意思，A 还是 B，你必须选一个。</p><p></p><p>研发效率、会议效率、决策效率这三大效率要无限关注，这些东西在基础工具平台上都有巨大的机会，值得去创业，如果全国中能有一家公司把它吃透了，那这家公司会特别牛逼。但是在今天，这个领域还没有特别优秀的工具和产品。</p><p></p><h3>五问：数字化投入无法转化为业务价值，问题出在哪里？</h3><p></p><p></p><p>社区里有同学问到，数字化和数字化转型是两码事，数字化投入无法转化为业务价值，问题出在哪里，并且感叹，根深蒂固的传统思维难以扭转，做数字化转型仿佛带着镣铐前行。</p><p></p><p>肯定是啊，因为你的公司就没有能搞定这些事情的人，业务部门没有，IT 部门也没有。</p><p></p><h4>别带着工人心态去抱怨</h4><p></p><p></p><p>我给大家讲一个真实的事情。</p><p></p><p>我们下面一个开发跟我抱怨说，Alex，业务给我们提的需求，今天说这样做，过了两天又那样做，过了几天又变了，来回反复。我问他，你有没有观点，有没有意见，你既没观点又没意见，你做不就行了吗？公司又不是没给你发工资。</p><p></p><p>产品经理能力不足，业务部门对事情认知不到位，这是你不得不经历的。但是，所有的人都不要去抱怨，都要去思考这个事情我们是不是做对了，别一方面是个工人心态，一方面又抱怨这、抱怨那。</p><p></p><p>所以我们的 3 到 5 人团队，每一个团队都要懂业务，我们打造的绝对是全公司最懂业务的技术团队，甚至任何一个业务部门都没我们懂。我就是直接下到工厂里去看业务到底怎么做，你必须到场景当中去了解业务。</p><p></p><h4>很多公司做数字化转型注定是失败</h4><p></p><p></p><p>所以要回答为何数字化投入无法转化为业务价值这个问题，我的观点如下。</p><p></p><p>我的第一个观点——数字化转型，其实本质上你可以认为是一种创业，而且是更难的创业，有包袱的。</p><p></p><p>看到这里，你可能会说，公司里有资源啊！根据我的经验，我的第二个观点诞生了——公司里所有的资源、过去的经验在这个层面都是诅咒。 你以为大就是强，有资源就是强，实际上，大和强是两回事。创业公司的团队的活力和激情在哪里，你一个传统公司，背着这么强的包袱，你的活力和激情又在哪里？所以资源是诅咒，它并不能助力你去做强。</p><p></p><p>我的第三个观点，缺乏能做顶层设计的人才。 乌卡时代具有不确定性，但你又要设计一个大的体系，去识别公司里有确定性的东西和不确定性的东西，用 SOA 架构和 EDA 架构以及模块化把顶层设计做好，但是你的公司里面有没有这样的人？你们的 CTO 和高层有没有把这个事情规划好让大家一起去做、一块块落地？你说，不对，我们还是需求驱动的，那还谈什么？本来过去就是需求驱动的，你想一下把所有的需求都做了，能让企业上一个大台阶吗？很多公司从来没有失败的项目，都是成功的项目，可一年下来有什么用呢？确定的是成本，不确定的是收益。</p><p></p><p>我的第四个观点，组织变革难如登天。 我在前面说，从古至今，变革都没什么好下场。今年，我们公司一月份的战略会议，我就提到过这个，我说，变革者没有好下场，你看，商鞅变法被五马分尸，王安石变法被贬，唯一一个好的例子是邓公，但这样的例子少之又少。所以在公司里面，统一思想认知很重要。</p><p></p><p>第五点，文化和方向，能不能容错、试错。 做这么难的事情，犯点错就干掉了，谁还给你干活儿？以后没人干了，这个公司就等死了。</p><p></p><p>以上就是我的五个观点，你一条一条去仔细看，每一条都很难。所以很多公司做数字化转型注定是失败，所以我一定不会去这些公司，因为我分析过它没法成功。技术人在这样的公司里面，踏踏实实实现一个功能，按时保质保量的交付一个有用没用的东西就行了。很多公司太多这样的事情，你可能也有深有体会。</p><p></p><p>我认为传统企业的新业务，一定要去新公司培养，尤其是一定要脱离原来公司的 HR 管理制度。组织管理和 HR 简直就是刻在公司骨子里的，很难改变。做数字化转型一方面要引入技术，一方面要做组织转型，而组织转型跟 HR 的管理制度是很有关系的，我自己对此真的是有深刻体会，这里就不展开讲了。</p><p></p><p>很多人发展很顺利，他不会有我这种深刻的理解。为什么我有？因为我经历过、痛苦过，我刚才讲的都是我的亲身体会过的。很多痛苦的东西让你成长、反思、复盘，然后就会变成刻在你自己身上的很深层次的东西。</p><p></p><h3>六问：如何评估数字化转型的 ROI？</h3><p></p><p></p><p>如果大家关注我的观点，就会发现我很早就讲过一定要去算财务账。包括其实我去找公司，我跟老板谈薪水都会谈到这一点，我给你创造什么价值，你就给我多少，我创造不了，你就叫我滚蛋，就这么简单，因为这个世界的本质是价值交换。</p><p></p><h4>数字化转型 ROI 的三个计算方式</h4><p></p><p></p><p>回到如何评估数字化转型的 ROI 上来，我认为这是分层级、分阶段的。</p><p></p><p>第一个阶段，你的项目成功上线。</p><p></p><p>第二个阶段，着眼产品，两个 100%。</p><p></p><p>产品的使用率要 100%。如果你建设的产品，用户都不用，那成本不是白花了？我们公司科技中心建设的所有产品的要求必须 100% 使用，如果不使用，他要告诉我哪里需要完善，如果说没有要完善的点了，请用起来。</p><p></p><p>满意度要 100%。那些内部员工使用的产品，他们满意吗？我们公司建设了反馈系统，任何产品上线后，都要去问使用的员工是不是满意，不满意要告诉我哪儿不满意，我给你解决了。不要老去按时保质保量地完成一个没用的东西，多少企业在做这样的事情？在我们这里，绝对不允许这种事情发生。</p><p></p><p>第三个阶段，财务，算投资回报率。</p><p></p><p>这个时候，你要开始算钱了，把这个 3 到 5 人的团队像一个创业公司一样，计算所有的成本，包括人员成本、服务器成本，盘算他们创造的收入，增加的成本分别是多少，是不是做到了公司成本降低，利润增加，费用下降，人效提升。</p><p></p><p>对我们现在的团队来说，要考核的就是每个周期又建设了多少个虚拟员工。就如我之前所讲，你建设的产品，按照工具、助手、专家这三个等级来划分，你最后把多少个专家角色取代了？你建设了多少个生管（生产管理员）？多少个物流的发运主管？多少个接单员？多少个财务人员？通过这种方式，通过专业分工、高效协同，让这个企业里的每个人只面对他该面对的产品，不用和其他人或其他产品打交道。</p><p></p><p>虚拟员工就是收入，收入减掉成本就是利润，利润除以成本就是投资回报率，这就是我们最后关注的东西。</p><p></p><p>很早以前，我们就已经在考核使用率和满意度了，现在正从第二阶段迈入第三阶段，也就是给每个小团队算财务账的阶段，一句话总结就是拿着工资去创业。</p><p></p><p>最后提一点，一定要做好激励体系。 我们有一个激励可视化的绩效分层体系，这种体系可以让企业里的每个员工充满活力和激情，跟公司一起去创业，我觉得能做好这种体系的组织绝对是很牛逼的。我自己有时候就想，等我和这团队把彩食鲜这个公司做上市了，这团队跟着我做别的事绝对是杠杠的，因为都是筛选出来的可独挡一面的人才。我跟他们讲，我觉得你们就应该奔着这一把做完就财务自由的目标去。我也跟我下面所有汇报给我的人讲，你一定要把激励体系做好，你要让他相信跟着你是可以实现这个目标的。</p><p></p><p>所以，“赢”是凝聚团队最好的办法。你算清楚财务账，让每个小团队都像是在拿着工资去创业，那这个科技团队就会很牛逼。</p><p></p><h3>思考：每个企业都要有自我革命和归零的勇气</h3><p></p><p></p><p>我回过头来把上面六个问题压在一起去想，要解决数字化转型遇到的挑战和痛点，真的是很难。我自己对这个事情的思考有两点。</p><p></p><p>第一点，我对很多传统企业的数字化转型是持悲观态度的。第二，如果有这种决心，那就要统一思想，并且要培养容错试错的文化，这一点很重要。然而很多公司的老大过去太成功了，他不能容忍犯错的，他觉得下面的人怎么能犯点小错呢？可是如果把下面的人骂得跟孙子一样，他怎么可能有创造力？怎么成功？这根本不是技术问题。同时这个企业又要有顶层设计，所以对一个组织的要求是非常高的。</p><p></p><p>所以大家可以结合自己所在企业的情况去看，看自己的位置、自己能干什么。</p><p></p><p>数字化转型是滚滚长江水，谁都挡不住。老的企业总会死的，新一代的企业会出来。企业如人，有的企业已经是老人，老态龙钟，有的企业是壮年，有的企业决心返老还童，但是真正做到了返老还童的企业少之又少。再过 20 年，很多企业里面的很多业务都是有数字化思维的人在主导，因为效率高。如果用自然法则、生老病死去看一个企业，会看得很透，对于一些达到比较高职位的人来说，你再去选企业的时候就知道如何选择了，你要选赛道、选创始人，尤其是你带着一身抱负想要施展的，尤其要看你去了之后这个企业能不能改变，做好这个判断。</p><p></p><p>每个企业成功，都是因为遇到了自己的时代，有的时候就是命好，不一定是他真的能力有多强。但是要在这个时代做强者，还能在下一个时代也做强者，就需要有自我革命的勇气，要不断地反思和复盘，不断地学习，要有让自己归零的勇气。你不要总觉得自己是老大，要持续学习，否则最终只有死路一条。</p><p></p><h3>写在最后：最高效的学习是去分享</h3><p></p><p></p><p>前面提到的内容，我在过去的分享中大多数都涉及到过。比如在之前的 GTLC 全球技术领导力峰会中，我分享过题为《数字化转型关键洞察和顶层设计》的演讲，讲到了数字化转型的关键洞察、必然趋势、底层逻辑、顶层设计和组织管理体系。这里面最关键的就是顶层设计，我认为对很多商业公司是非常适合的。</p><p></p><p></p><p></p><p>我还在 QCon 全球软件开发大会上把研发组织管理体系拎出来单独讲过一遍。在今天这个数字化时代，很多研发团队在公司里面是很受煎熬的。当时我的演讲题目是<a href=\"https://ppt.infoq.cn/slide/download?cid=83&amp;pid=3277\">《如何通过“三板斧”式调整方案，迅速构建善打胜仗的高绩效研发团队》（点击获取幻灯片）</a>\"，我自己认为真的是我自己的心得总结。这里我稍微解释一下三板斧是什么。第一板斧，一定要调整成产品型的组织，成就业务。第二板斧，要做上下左右目标对齐，团队力出一孔。第三板斧，要持续去关注文化建设，激活团队。这都是一些很具体举措，做了就管用，我已经在现在的公司，包括外部上市的、市值几百亿的公司里都落地过，效果非常好。</p><p></p><p>关于个人发展的部分，我在极客时间开了专栏《乔新亮的 CTO 成长复盘》（扫描下方二维码可订阅）。说句实话，这个真的是被 Kevin 害死了，做专栏那段时间正是我特别忙的时候，还要挤时间做专栏，真是累得半死。但是做这事儿真的也帮助我自己静下心来好好沉淀了一下，思考如何成长得更好、如何提升认知、如何管理团队。作为一个技术团队的管理者一定要有技术的专业性，那哪些方面的专业性要提升？希望我的经验可以帮到你。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/2e/2ef6abb268ee2a87be0a8834684ab0b7.png\" /></p><p></p><p>最后我有一句话想说，我真的非常感谢 Kevin，InfoQ 对我的帮助很大。在直播的上一个篇章里面，我很认真地听了 Kevin 跟毕玄两个人的对话。我有一个特别的感受就是我命太好了，居然认识了 Kevin。其实我的影响力就是从第一次在<a href=\"https://qcon.infoq.cn/2022/guangzhou/track?utm_source=infoq&amp;utm_medium=presentation&amp;utm_campaign=9&amp;utm_term=20220630&amp;utm_content=article\"> QCon</a>\" 分享开始的，可以说，我的职业生涯能发展这么好是离不开 InfoQ 的。</p><p></p><p>以前不懂，后来我才知道有一个词叫学习金字塔，这里面讲最高效的学习就是去分享。后来我也一直说，沟通创造价值，分享带来快乐，出去分享，我自己就是最大的受益者，所以每一次分享，我都非常认真地准备，我觉得给别人创造价值，其实是自己最大的收获。</p><p></p><p></p><h4>作者简介</h4><p></p><p></p><p>乔新亮，彩食鲜副总裁兼 CTO、TGO 鲲鹏会荣誉导师，前环球易购 CTO、苏宁科技集团副总裁；IBM 认证架构师、全球技术学院成员、GITC 全球互联网技术大会主席团成员、多站 GTLC 全球技术领导力峰会「全场最受欢迎讲师」；南京互联网协会副会长、江苏省信息化协会副会长；微信公众号「乔新亮」作者。</p><p></p><p>18 年 IT 行业架构设计、研发管理和运营经验，全程参与了苏宁的数字化转型之路，亲历苏宁技术部门人数从 1,000 + 增长到 10,000+ ，并负责此过程中的团队搭建，全面负责技术团队的产品管理、技术管理、项目管理。加入苏宁之前，在 IBM GBS 历任咨询经理、高级咨询经理、副合伙人，主要负责架构咨询、设计、实施落地工作。</p><p></p><p>今年的 <a href=\"https://qcon.infoq.cn/2022/guangzhou/track?utm_source=infoq&amp;utm_medium=presentation&amp;utm_campaign=9&amp;utm_term=20220630&amp;utm_content=article\">QCon 全球软件开发大会</a>\"将于 7 月 31 日 -8 月 1 日在广州落地。数字化转型架构、Web 3.0、现代数据架构选型、AI 工程、业务安全与风控等 11 个专题 50+ 技术案例现场呈现，Google、Facebook、Netflix、Stanford、华为、阿里、腾讯、网易、支付宝、微信、OPPO、永安在线、虎牙等公司技术大咖与百余位技术同行现场分享他们的宝贵经验。<a href=\"https://qcon.infoq.cn/2022/guangzhou/track?utm_source=infoq&amp;utm_medium=presentation&amp;utm_campaign=9&amp;utm_term=20220630&amp;utm_content=article\">点击查看日程安排。</a>\"</p>",
    "publish_time": "2022-06-30 15:31:04",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "白海科技卢亿雷：把简单留给用户 把复杂留给自己 | TGO 专访",
    "url": "https://www.infoq.cn/article/66tcAJ1rB8mgs7P5XAX7",
    "summary": "<p>卢亿雷，白海科技创始人兼 CEO，TGO 鲲鹏会（北京）董事会成员。曾先后任职于联想研究院、百度和明略科技，负责联想网盘的分布式存储和高性能计算、Hadoop 分布式计算，以及 AI 算法平台和数据分析平台等工作。卢亿雷是 CCF 大数据专委常务委员和高性能专委委员，中国大数据技术大会主席，2017 年中国大数据行业领军人物，超过 15 年大数据和 AI 计算平台经验。</p><p></p><p>就像农作物是人类赖以生存的基础一样，AI 正成为人类经济发展迈向更高台阶的核心驱动力。育种专家通过科研攻关，把口感好、品质高、价格低的产品送上普通人的餐桌；现在，一批 AI 行业领军者正在从实际应用需求和痛点出发，推出使用简单、成本低廉、性能强劲的 AI 开发生产平台，助力产业转型升级。</p><p>卢亿雷，就是这批 AI 领军者中的一员。他始终坚信，AI 技术唯有下沉到各行各业，普惠生活的方方面面，才能发挥它真正的价值。</p><p></p><p>对于行业趋势卢亿雷表示，AI 开发生产平台今后将呈现简单化、云原生和一站式三大趋势。其中，简单化尤为重要。经历了由简单到复杂集成式工具的演变后，简单、再简单和高度易用将是 AI 开发生产工具的未来发展方向。</p><p></p><p>“To C 产品通常简单到不需要复杂的用户手册，企业级 AI 开发生产平台也可以做的像 To C 产品一样简单，推动 AI 的普惠化。”卢亿雷说到。</p><p></p><p></p><h3>让 AI 下沉产业端，开发效率成破局核心</h3><p></p><p></p><p>近年来，在互联网、传统企业深度拥抱数字化、云原生等新兴技术的趋势下， AI 已成为不可或缺的底层支撑。由此带来的是算法进入到“工业化大生产“阶段，模型愈加复杂和庞大，而算法工程师普遍缺乏高易用性用具，难以提升开发效率；此外，机器学习算法使用的计算能力已远超摩尔定律，高性能、低成本算力亦成为制约 AI 发展的重要瓶颈。不少企业为解决这一难题，投身于 AI 开发生产平台的构建之中，但理想与现实尚存不小的差距。</p><p></p><p>卢亿雷表示，自己和团队在 2015 年便开始尝试用开源工具构建 AI 开发生产平台，但开源工具改造的平台在易用性和性能上差强人意；目前市场上的解决方案主要分为集成式机器学习平台和 AI 开发生产基础软件，两者各有特色，但均不能同时满足企业和专业开发者在性能和易用性方面的需求。</p><p></p><p>比如由云厂商、垂直一体化平台厂商打造的集成式机器学习平台，其核心特点是数据准备、模型开发、模型训练、模型部署等各功能子产品都集成于同一平台，导致产品较为厚重、配置复杂、上手困难；</p><p></p><p>而 AI 开发生产基础软件，其核心特点是数据准备功能包 / 插件、算法调试功能包 / 插件、模型部署功能包 / 插件等可以按需自动配置。不过，各组件的适配表现欠佳且门槛较高，需算法开发人员对系统工程有较深了解。不仅如此，AI 开发生产基础软件通常缺乏引擎支撑，较难满足企业级客户对性能和效率的要求。</p><p></p><p>据卢亿雷介绍，用传统的 AI 开发工具，数据科学家需要把数据下载到本地，这过程就很复杂，且还涉及到数据版本管理的问题；算法工程师需要部署、搭建实验环境，但大多数算法工程师对系统工程领域涉猎有限，环境部署和管理对他们来说具有不小的挑战性；在算法开发过程中，算法工程师还需要很多库包，但第三方库包和开发工具又可能会有兼容性的问题；在训练过程中，由本地单机代码进行分布式训练，面临代码调整和训练性能、效率的挑战；不仅如此，传统的 AI 开发工具的试验环境和生产环境也是割裂的......</p><p></p><p>一系列降低开发效率、阻碍计算性能的难题，成为 AI 有效下沉产业的阻碍。卢亿雷称，“要解决专业算法工程师日常开发、生产的核心痛点，让他们更专注于算法开发和模型试验本身，以提升开发效率和性能，突破 AI 普惠的瓶颈。”</p><p></p><p></p><h3>以应用需求和痛点出发，构建 AI 开发生产解决方案</h3><p></p><p></p><p>过去一位数据科学家的工作流程是这样的，首先需要安装一些工具并配置开发环境，在进行完数据探索后，选择算法模型，并对模型进行开发和训练，筛选出最优模型后将模型文件交给工程师团队，工程师用 C++/JAVA 对模型进行工程化处理，但这个过程会涉及很多复杂的问题，比如精度等。另外，上线后随着时间的推移，模型可能也会存在表现得不理想的情况......</p><p></p><p>卢亿雷表示，传统的 AI 开发工具在数据、环境管理、模型选择、分布式训练、数据精准度等方面存在诸多痛点；他和他的团队以数据科学家、算法工程师的需求和痛点出发，通过自研的云原生 AI 开发生产平台——IDP（Intelligent Development Platform），构建 AI 开发生产解决方案。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e8/e8aadd1a1f35b1203ee1fd0a32058914.png\" /></p><p>IDP产品架构图</p><p></p><p>据卢亿雷介绍，白海科技 IDP 有 IDP Studio 和 IDP Engine 两个子产品。其中基于云原生开发环境的 IDP Studio，性能比肩本地 IDE，支持 Python 和 SQL，算法团队与业务团队可进行高效协作。IDP Studio 通过一键式接入主流云端数据库，在数据方面大大减轻数据科学家的工作；在环境管理方面，IDP 预置最推荐的环境并进行优化，让算法工程师专注于算法开发本身；此外，IDP Studio 通过内置常用的库包，并进行了兼容性的优化；提供可视化的模型对比工具；同时实现试验和生产在同一环境下进行，降低 AI 开发应用的门槛。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8e/8eaec999a107c8506626cb21f709c622.jpeg\" /></p><p></p><p></p><p>IDP产品界面</p><p></p><p>IDP Engine 提供高性能任务调度和分布式计算两大核心功能，支持 task 级别任务调度，提高集群吞吐量。IDP Engine 对数据预处理、数据探索、机器学习、深度学习、推理等工作统一调度，对单机版进行性能优化，智能分布式执行，帮助企业提升算法开发效率，降低计算资源使用成本。比如，传统的本地单机工具，若想进行分布式训练，需算法工程师自行配置和实现，通常要配置单机和分布式两套代码，操作极其复杂；而 IDP Engine 天然支持分布式训练，且自动执行单机和分布式，算法工程师只写一套代码即可，大幅提升开发生产效率。</p><p></p><p>卢亿雷总结道，IDP 通过环境管理、数据源接入、模型构建、模型训练、模型管理、模型发布等功能，让算法工程师更专注于算法开发和模型试验本身，而“系统工程”相关的工作，交给 IDP 的工程师们来完成。本质上 IDP 是通过“让专业的人做专业的事儿”来帮助数据科学家、算法工程师降本增效！</p><p>IDP 目前在快消零售、游戏、工业、教育等领域已经实现广泛的应用。比如在快消零售领域，IDP 通过帮助零售企业利用 AI 模型构建高维用户画像，对消费者需求进行预测，实现精准营销。通过 AI 实现智能客服；在游戏领域，IDP 不仅能够提升游戏体验和开发效率，还能高效地开发、训练高性能用户分析相关模型，提升了用户转化效率；在工业领域，IDP 可以实现工业品缺陷检测、开发生产环节的安全监测；在教育行业，IDP 可用于高校科研训练、赛事准备，助力其大幅提升开发训练效率等。</p><p></p><p></p><h3>把简单留给客户，把复杂留给自己</h3><p></p><p></p><p>软件行业，特别是大数据、AI 相关的软件，如果使用很复杂、很难维护的话，那么它的产品生命周期通常会很短，只有简单易用的软件才可能保持长青。做 To B 产品要有同理心，产品多向前优化一步，每位用户操作时就能减少一步。</p><p></p><p>为此，卢亿雷会亲自参加公司内部各部门会议。他最担心的是产品没有被客户认可，因此会在各个环节都做到精益求精。比如，产品要做用户展示材料，他会亲自给产品界面截图，截图中涉及很多界面的展示，如图像大小等细节，因此他也被冠上公司“首席截图官”的称号；他也可以为产品中的一个运行按钮的位置、大小，与同事讨论三天才最终确定。</p><p></p><p>“简单、简单、再简单”是白海科技产品设计的核心原则。IDP 在功能、交互的设计上都致力于最简单明了，让客户一看就懂、一看就会。通过一键部署安装，无需复杂的使用文档，就能够顺利使用。易用性方面，卢亿雷带领团队通过大量访谈，了解数据科学家和算法工程师在这方面的核心痛点，并在 IDP 产品中进行针对性改进。</p><p></p><p>在性能方面，卢亿雷和他的团队聚焦从工程化的角度做性能的优化和提升。核心是从两方面发力，一是计算和调度引擎方面，主打高吞吐量，天然为高速分布式计算而服务；另一方面对前端的 IDE 进行性能优化，通过采用 Rust 语言的自研 Kernel，提升 IDE 的启动和运行速度。综合来看，IDP 可以让数据科学家和算法工程师的工作效率提升 30-100%。</p><p></p><p>卢亿雷在产品功能方面要求极其严格。他会让团队把竞品功能做充分调研，包括竞品功能能实现什么、有什么问题等；另外，他的团队每天都会与客户交流，获得需求、意见反馈。比如之前做 IDE 时，他和团队访谈了 100 多位算法工程师以及大量行业专家后，才最终确定每一处细节；把开发和生产挂钩，让用户可以基于 Pipeline 做大量自定义内容开发的功能定位，也是与用户大量沟通后确定的。“产品不是做出来就行，我们要引领行业的发展，一定是要做到最好。”</p><p></p><p>对于产品规划卢亿雷表示，近期公司会继续优化通用的 AI 开发生产基础平台。通用平台是土壤，只有土壤足够肥沃，才能更好地滋养上层应用；未来公司会构建针对具体行业场景的开箱即用解决方案，推动产品向全域的 AI 开发生产基础软件方向迈进！</p><p></p><p>Q&amp;A</p><p>&nbsp;白海科技打造的新一代 AI 开发生产平台，与现有的竞品相比优势在哪？降本增效方面，有具体数据做参考么？</p><p>A：我们的产品以 IDE 为统一的交互界面，所有的工程师都会用 IDE，因此亲近感、易用性都会更好。</p><p>但我们又不仅是 IDE，还有数据源接入、数据探索以及后端的任务调度与计算引擎等。目前我们支持 Python 和 SQL。不同语言的算法工程师的使用习惯和易用性诉求不同，我们访谈发现，Python 和 SQL 基本就满足了数据科学家的需求。另一个是 OPS，在 IDP 上把模型开发、测试、生产等全流程完成。</p><p>算法工程师的工作效率可以提升 30-100%。IDP 提升的不是通用性能，而是吞吐量。比如原来只能跑一个任务，现在可以跑两个，我们可以把任务的调度、资源利用率做到最高。在实验室环境，我们能做到几倍、十几倍的提升。</p><p></p><p>&nbsp;在安全稳定、数据隐私方面，白海科技的 IDP 平台有哪些优势？</p><p>A：白海科技不存用户的数据；日志的记录、安全审计等，都是严格按照企业级标准设计，如用户系统通过 SSO，我们不会储存用户名和密码；所有的访问控制都有严格的记录，公司还会进行安全审计认证。</p><p>&nbsp;我们几个月前完成数千万的融资，在产品研发、团队建设市场推广等方面，会有哪些大动作？</p><p>A：产研团队会继续招一些大牛过来，给团队更好的保障和支持；生态建设方面，做开源生态，7 月份会将自研 IDE 开源，有 Meetup、Hackathon，以及与极客时间等合作；</p><p>行业建设会花较多的时间，公司成功的标准不是通用平台做得好，而是行业繁荣了才算成功。后续我们会和行业伙伴，如独立软件开发商和解决方案提供商，快消零售、游戏等行业的头部客户建设行业生态。目前，我们在推动构建游戏行业产研联盟等。</p><p></p><p></p><h3>关于 TGO 鲲鹏会</h3><p></p><p>TGO 鲲鹏会是极客邦旗下科技领导者聚集和交流的组织，学员由 CTO、架构师、技术 VP、具有技术背景的 CEO 等组成，目前已经在北京、上海、深圳、广州、杭州、成都、硅谷、南京、台北、厦门、武汉、苏州等 12 个城市定期举办学习活动。</p><p>TGO 鲲鹏会采用了“学员共建”的组织形式，希望通过“共建、自治”的方式维护各城市的健康发展，为学员提供必要的服务，帮助学员个人更好地学习和成长，助力学员企业之间更好地合作与交流。加入 TGO 鲲鹏会，全方位提升自身价值，成为卓越科技领导者！</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4c/4c5129d041d7023b2c328ccaa1b96277.png\" /></p><p></p><p></p><p>点击阅读原文或扫码加入TGO鲲鹏会！</p>",
    "publish_time": "2022-06-30 16:02:12",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]