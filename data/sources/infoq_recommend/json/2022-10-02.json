[
  {
    "title": "如何通过设计模式防止无服务器供应商锁定",
    "url": "https://www.infoq.cn/article/DUDJGsUh1bWL5yaxWRt1",
    "summary": "<p>最近，Gregor Hohpe发表了一篇<a href=\"https://architectelevator.com/cloud/serverless-design-patterns/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjQ1MzYzOTIsImZpbGVHVUlEIjoiVk1Ub1BNYUY5ZGtJVlVvcSIsImlhdCI6MTY2NDUzNjA5MiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.I2V8eoPx7iC3DvoUulRSlmi--K_T4cQRFvt9jV_t1mI\">文章</a>\"，建议进行范式转换，以解决无服务器云应用程序的供应商锁定问题。使用模式设计解决方案可以将功能特征与底层云实现解耦，从而更容易避免供应商锁定或采用多云。</p><p></p><p>尽管人们通常都说云平台服务产品从根本上是相互等价的，但它们之间还是存在足够多的差异，以至于重要的应用场景无法进行直接移植。</p><p></p><p>因此，在设计系统时，可移植性是一个值得着重考虑的问题，特别是当系统涉及多云部署时。然而，从可移植的角度考虑问题并不件容易的事。</p><p></p><p>Hohpe认为其中一个重要的障碍是“心理锁定”。一方面，以往的经验可能会限制一个人的思维模式，导致在采用不同的架构时面临挑战。另一方面，现代云平台倾向于用服务产品来描述解决方案。这样就很难将解决方案转移到不同的平台上。</p><p></p><p></p><blockquote>纯粹的平台服务思维会导致应用程序设计意图丢失，并在思想上将你锁定。</blockquote><p></p><p></p><p>服务映射表太高级了，无法准确地描述可移植性，因为特定的服务功能并非一对一对应的。此外，云服务不一定能够表达解决方案的需求或设计人员的意图。</p><p></p><p>软件工程领域的一个典型做法是在特定的服务实现之上构建一个可移植的层。Hohpe指出，这种方法很快就会导致最小公分母效应。这是一个缺点，因为它阻碍了在快速发展的云应用程序领域采用创新技术。</p><p></p><p>Hohpe建议，与其从实现时的抽象考虑问题，不如从设计时的抽象考虑问题。作为“与技术无关的设计时词汇表”，设计模式提供了有用的设计时抽象。</p><p></p><p></p><blockquote>将解决方案表示为设计模式可以简化移植到另一个平台的过程。</blockquote><p></p><p></p><p>使用设计模式来表达解决方案，架构师的意图和解决方案的需求都变得显而易见。</p><p></p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/news/2022/09/design-patterns-serverless/en/resources/1pattern_lockin_3-1663947784248.png\" /></p><p></p><p>图片来源：<a href=\"https://architectelevator.com/cloud/serverless-design-patterns/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjQ1MzYzOTIsImZpbGVHVUlEIjoiVk1Ub1BNYUY5ZGtJVlVvcSIsImlhdCI6MTY2NDUzNjA5MiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.I2V8eoPx7iC3DvoUulRSlmi--K_T4cQRFvt9jV_t1mI\">https://architectelevator.com/cloud/serverless-design-patterns/</a>\"</p><p></p><p>任何一个设计模式，例如聚合器、发布和订阅通道、编配器，都可以使用特定于每个云供应商的服务产品来实现。有时候，这些产品可能需要组合起来实现特定的设计模式，但这并不是什么问题。</p><p></p><p>服务组合将成为实现细节而不是设计选择。</p><p></p><p>Hohpe补充说，系统设计需要使用“形成单一词汇表的内聚语言”来表达。可以使用多种模式语言来形成这个词汇表，但有必要对它们所应用的系统有清晰的认识。例如，可以使用企业集成模式来设计数据流，但最好使用面向对象的模式来构建组件。</p><p></p><p></p><blockquote>模式语言通过与服务无关的方式表达开发者的意图。</blockquote><p></p><p></p><p>平台的演进意味着模式需要做出权衡变更。这种演进意味着，例如，无服务器云平台可能倾向于使用不同于旧平台首选的模式。由于被广泛使用，可能会发展出新的模式。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/09/design-patterns-serverless/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjQ1MzYzOTIsImZpbGVHVUlEIjoiVk1Ub1BNYUY5ZGtJVlVvcSIsImlhdCI6MTY2NDUzNjA5MiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.I2V8eoPx7iC3DvoUulRSlmi--K_T4cQRFvt9jV_t1mI\">Preventing Serverless Vendor Lock-in with Design Patterns</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/s_LFUlU6ZQODd030RbH9\">基于&nbsp;DDD&nbsp;的微服务设计和开发实战</a>\"</p><p><a href=\"https://www.infoq.cn/article/o51OQvs8m04dwfLfFxD6\">数字化时代下的&nbsp;DDD&nbsp;新形式</a>\"</p>",
    "publish_time": "2022-10-02 09:44:52",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "更改许可后，Akka 分支 Pekko 进入 Apache 孵化器",
    "url": "https://www.infoq.cn/article/tUAqmIjjqEKk0rciXqjW",
    "summary": "<p>Apache 基金会孵化器近日迎来新成员——<a href=\"https://cwiki.apache.org/confluence/display/INCUBATOR/PekkoProposal?desktop=true&amp;macroName=markdown\">Pekko</a>\"&nbsp;，但对于部分开发者来说，Pekko应该不陌生。</p><p>&nbsp;</p><p>事实上，Pekko 是 Akka 项目的一个分支。不久前， <a href=\"https://www.infoq.cn/article/ygsis09eckcriyutldhg\">Akka 的许可证从 Apache 2 更改为 Business Source License 1.1</a>\"，Pekko作为新的分支从中拉出。根据介绍，Pekko 项目提供了一套工具和框架，涵盖了分布式并发系统的复杂问题空间。它旨在支持<a href=\"https://www.infoq.cn/article/oIflpefg30Vyh679yWva\">响应式宣言</a>\"的设计原则，通过提供组件来有效地在服务器内扩展系统或跨多个服务器横向扩展，是高性能、对故障具有弹性的、没有单点故障的分布式系统。</p><p>&nbsp;</p><p>“如果 Pekko 成为 Apache 的一部分，那么它将让 Pekko 的社区/用户相信这样的事件不会在未来再次发生。目前还有一些现有的 Apache 项目，例如 Flink，它们在不同程度上使用了 Akka，因此让 Pekko 成为 Apache 的一部分给了这些其他 Apache 项目的信心。我们认为这个分叉是对预先存在的 Apache 2 许可证的维护，并要求 Apache 社区这样看待它。”Pekko项目提案中如此写道。</p><p>&nbsp;</p><p>Pekko 将参与者模型（由 Erlang 推广）引入 JVM，为构建本地和分布式并发提供了基础。在此之上，Pekko 提供了一套丰富的构建在 Actors 之上的库来解决现代问题，包括：</p><p>&nbsp;</p><p>流：遵循响应式标准的完全双向背压流HTTP：建立在流之上的全流式 HTTP 客户端/服务器，还提供高可用性 Web 服务所需的预期工具（例如连接池）连接器：一组丰富的连接器集，用于构建在流之上的各种数据库、消息传递、持久性服务grpc：一个 gRPC 服务器/客户端投影（projection）：提供 CQRS 模式所需的抽象，所需的系统（比如Kafka）。</p><p>&nbsp;</p><p>官方预计孵化过程会很长，“因为我们需要完成大量的代码清理和文档清理。此外，我们需要配置 Apache 构建系统以正确构建一个相当复杂的项目（即 akka 核心有需要多节点机器的测试）。”</p><p>&nbsp;</p>",
    "publish_time": "2022-10-02 12:38:17",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]