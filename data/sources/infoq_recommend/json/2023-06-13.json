[
  {
    "title": "架构成长之路 | 图解分布式共识算法Paxos教会协议",
    "url": "https://www.infoq.cn/article/2de2edc609c74954bc2bf8c53",
    "summary": "<p>作者：谢鑫</p><p></p><p></p><blockquote>分布式共识算法是保证分布式一致性的基础，本文主要以简化类比的方式阐述了Paxos算法中的单法令教会会议（The Single-decree SYNOD）的算法。</blockquote><p></p><p></p><p></p><h1>一、分布式共识算法</h1><p></p><p></p><p>分布式共识算法是保证分布式一致性的基础。我们在进行微服务开发的时候，都会尽量让自己的服务无状态（stateless），遇到部分需要存储的数据时，通常会将其往中间件转移 。比如持久化数据的存储往关系数据库转移，缓存的存取往Redis转移，文件的读写往OSS/HDFS转移，消息的收发往MQ转移。但是这些中间件又如何保证数据的一致性呢？如果用的是一个单机版中间件，则能够较容易地保证本地的一致性，但是这样会丧失可用性和扩展性。所以，很多中间件内部通常会使用分布式共识算法来保证分布式环境下的一致性，同时又能兼顾高可用和横向扩展。</p><p></p><p>分布式共识（consensus）和分布式一致性（consistency）它们的关系是怎样的呢？很多情况下我们会将两者混为一谈，但它们之间还是有细微的区别。一致性的解释有很多，这里选择用一种比较简单的解释：存储的数据之间不自相矛盾。一致性描述的是数据应该达到的结果，不自相矛盾包含了很多信息，数据能够持久化存储，副本之间的数据相同，满足业务上的各种规则等等；而共识则是一个过程，即大家关于某件事情（比如选举、分布式锁、全局ID、数据复制 等等）达成一致的过程。</p><p></p><p>常用的分布式共识算法有Paxos、Raft等等，还有一种更激进的说法：\"世界上只有一种分布式共识算法，那就是Paxos\"。所以本专题以Paxos为引，逐步引出关于分布式共识、分布式一致性的更多内容。在进入Paxos讲解之前，首先需要了解一下关于分布式共识算法的两个基本特性：</p><p></p><p>安全性（safety）：所有的参与者对同一件事达成共识。例如对于选举，不会出现A、B认A为主，而C、D认D为主；活性（liveness）：所有的参与者最终会对某一件事达成共识。也用选举来举例，不管谁当选，最终都会有人当选，而不是陷入死循环或死锁中。</p><p></p><p></p><h1>二、Paxos的历史</h1><p></p><p></p><p>Paxos算法是Leslie Lamport于20世纪90年代在《The Part-Time Parliament》提出的，论文以一个虚构的Paxos小岛上选举的故事来描述整个算法，充满着各种隐喻，比较晦涩难懂。Lamport之后在2001年，通过在《Paxos Made Simple》中使用计算机领域的概念描述了一遍算法，但是依然很难理解。直到Google的Chubby横跨出世，作为它底层的分布式共识算法，Paxos也逐渐被大家熟知和认可。Lamport凭借他在分布式领域的贡献，最终于2013年获得图灵奖。</p><p></p><p>Paxos中包含两个协议，一个是单法令的教会协议（single-decree SYNOD），一个是多法令的议会协议（multi-decrees parliament），议会协议是教会协议的衍生版，本文主要讲解单法令教会协议。</p><p></p><p></p><h1>三、背景设定</h1><p></p><p></p><p>Long long ago，在遥远的爱琴海上，有一座与世隔绝的小岛，叫做Paxos……算了，还是用简单一点的例子吧。（以下故事，纯属虚构，如有雷同，就这么着）</p><p></p><p>我们团队一共有5个人，分别是我（小X）以及小A、小B、小C和小D。我们团队有个传统，就是每天中午之前，都会讨论一个困难的哲学问题——今天中午去哪儿吃？备选项也不多，去一食堂的餐馆吃拉面，或者说去二食堂的餐馆吃蛋炒饭。与其说吃什么，倒不如说我们就是想选个地方一起聊聊“八卦”，增进增进\"感情\"。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c3/c39f59564ee77da5891c4ddcc4744036.png\" /></p><p></p><p>为此，每天中午吃饭之前，我们都会通过表决（ballot）的形式来进行投票（vote）。咱们的同学都比较忙，表决的时候有可能不在工位上，所以我们会锲而不舍的发起多轮表决，并且每轮表决只会简单的问在工位上的同学，吃面吗？或者是问吃米饭吗？其他人只需要回答\"我去\"（投票），或者不回答（不投票）。程序员都好懒哦，毕竟判断题比选择题简单，选择题比填空题简单，能回答一个字绝不再多说一个字。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/cd/cdbe30c1b0786cde9ae3824cfe995a34.png\" /></p><p></p><p></p><p></p><h1>四、要解决的问题</h1><p></p><p></p><p>寻找出一种算法，在团队间关于\"今天中午去哪儿吃？\"（Decrees），达成友好的共识。吃什么其实不那么重要，毕竟我们是要去增进\"感情\"的。所以一定要大家达成一致，不能两个人去吃面，三个人去吃米饭，这种\"分裂\"团队的事情，咱干不出来。</p><p></p><p>基于上面一点的目的，大家在表决的时候，也没有个人口味的倾向（能填饱肚子就行）。所以发起表决的人说吃啥，没有特殊情况，大家都会很捧场的说“我去”</p><p></p><p></p><h1>五、怎么解决</h1><p></p><p></p><p>Lamport从数学上证明了，如果用一种算法，它能满足了以下三点条件，就能很好地解决这个问题：</p><p></p><p>1）每一轮表决都有一个唯一的编号，且表决之前能通过编号进行大小比较。不要求表决是严格按照编号的顺序发起的；</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/7b/7b2c333f99e3edce10d6ac19c6ecf585.png\" /></p><p></p><p>2）任何两轮表决的参与人（在工位上的人）之间，至少有一个人是同一个人。例如第N轮表决有小A和小D参加，参与第M轮表决变成了我和小B、小C参加。这两轮表决找不出一个共同的人，这就违背了第2点条件；</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/7a/7a935271fb7b5abdee26fc1b9b926fe3.png\" /></p><p></p><p>3）对于任何一轮表决，如果参与表决的人在之前投过票。那么这一轮表决询问的餐馆，就必须是之前投过票的人里，最大的那轮表决询问的餐馆。</p><p></p><p>有点拗口，举个栗子。小B准备发起第三轮表决，参与表决的人有小A和小D。小A在第一轮发起过表决，问大家要不要吃面；小D在第二轮投过票，那一轮问的是要不要吃米饭。那么，按照第3点条件，小B发起的第三轮投票，只能问大家要不要吃米饭。（小A给第一轮的面投票了，发起的表决默认给自己投票了；小B和小D给第二轮的米饭投票了，所以参与第三轮表决的人，投过的票里最大那一轮是就是第二轮的米饭。）</p><p></p><p>这里又引出另外一个问题，如果参与这轮表决的人都没投过票（比如第一轮），那么随便问一家就好了。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ab/ab0b52fadecc907d456fddab40998a14.png\" /></p><p></p><p>只要我们不断地发起表决，每一轮表决都满足以上三点条件。那么直到某一轮表决，所有参与人都说了“我去”（不一定所有人都参与了这一轮表决，可能有的人不在工位上；参与的人也不一定都会说“我去”，可能有的人正在开会），我们能就今天中午去哪儿吃达成共识（具体的证明步骤放到本文最后）。</p><p></p><p>满足这三点条件的算法，只保证了安全性，但并不一定保证活性。所以有可能我们今天中午啥都吃不了。（Lamport提出了一种既满足安全性，又基本满足活性的实现方式，详情可参见附录中的\"完整教会协议\"）</p><p></p><p></p><h1>六、初步协议（The Preliminary Protocol）</h1><p></p><p></p><p>算法的三点条件只是“指导原则”，要细化到可落地、可执行的方式，还有很长一段路要走。不要慌，我们一点一点地“打穿”它。</p><p></p><p>为了满足算法的第一点条件，即“每一轮表决，都有一个唯一的编号。且表决之前能通过编号进行大小比较”。每个人记录都需要记下自己发起过的表决编号，这样在下次发起表决的时候，能保证编号在本人的范围内是唯一的（且可比较）；那么如何保证这个编号在所有人范围内都是唯一且可比较的呢？在表决的编号中加入每个人的唯一标识（名字、工号、身份证号等等），这个标识也是可以进行排序的，这样每个人都得到一个独立的表决号空间。举个栗子：(13，小A) &lt; (13, 小X) &lt; (15，小A)。</p><p></p><p>为了满足算法的第二点条件，即\"任何两轮表决的参与人（在工位上的人）之间，至少有一个人是同一个人\"。只需要参与每一轮表决的人数，大于总人数的一半即可；如果参与人数小于等于总人数的一半，那就不能发起这轮表决，或者说这轮表决无效。这个可以通过一个简单的反证证明，假设有两轮投票B和C，包含的人数都大于总人数 P 的一半，但是它们的参与者里面没有相同的一个人（即交集为空）。那么B的参与者的人数范围Pb &gt; P/2，C的参与者的人数范围Pc &gt; P/2，所以 Pb + Pc &gt; P；又因为假设中的B和C的参与者没有交集，所以P - Pc &gt;= Pb，即 Pb + Pc &lt;= P，这和前面的推导出的结论矛盾了，所以假设不成立。</p><p></p><p>为了满足算法的第三点条件，即\"对于任何一轮表决，如果参与表决的人在之前投过票，那么这一轮表决决定的餐馆，就必须是之前投过票的人里，最大的那轮表决询问的餐馆\"。就这一点，我们需要精心的设计整个表决的过程，以满足条件。</p><p></p><p></p><h2>6.1&nbsp;完整步骤</h2><p></p><p></p><p>1）小A先生成一个唯一的表决编号，假设是十。然后给每个在工位上的人说: \"我准备开始第十轮表决了\"（NextBallot）。（在这里用小A只是一个例子，任何人在任何时候都可以发起表决，甚至是并发地发起表决）；</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a1/a1f79484ec7ca4f0f0cf940e3e50d9fe.png\" /></p><p></p><p>2）小B听到之后，可以回答小A: \"我参与第十轮表决，并且我在之前的第八轮表决中投了吃面\"（LastVote）。其他人亦是如此回答。在这里有一点很重要，就是回答了小A的人，都需要做出一个承诺（promise）：我不再回答上次投票的表决和这轮表决之前的其它询问。对于小B来说，就是当有人说\"我准备开始第九轮表决了\"的时候（不要觉得奇怪，算法只要求表决编号唯一且可比较，并没有要求是有序的），他不做任何回应，这样才能保证对A做出的回答是有效的。不然小B刚给小A说在第八轮投了吃面，转头就给第九轮投了米饭；</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8d/8d03dc161bbf71d6a49cf675e8146f7e.png\" /></p><p></p><p>3）当小A从大多数人那里得到回答之后，他就可以将这些人圈定为参与本轮表决的人。并且从这些人的回答中，得到本次表决需要询问的餐馆，这样就能满足算法的第3点条件。在这里假设得到要问的是吃面。然后小A就可以正式开始表决了，他依次去问这些人：\"要不要去吃面\"（BeginBallot）；</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8a/8a02e076abcde485f9ace731df1fb7ab.jpeg\" /></p><p></p><p>4）参与这轮表决的人，在听到小A问要不要去吃面后，根据自身情况决定要不要回答\"我去\"（Voted）。因为从第2步到现在，可能有其他人发起了第十一轮表决。大家的承诺可不保证不去回应更大轮次的表决，如果有人回应了更大的轮次并做出承诺，那么他在这里就不能说\"我去\"了；</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/3f/3f5b984df4e22e8971b1d1886279bdca.jpeg\" /></p><p></p><p>5）如果参与第十轮的所有人，都对小 A 说了\"我去\"，那么他就可以得出结论——今天中午去吃面。并且将这个消息（Success）奔走相告给团队里的每个人（不只是参与这轮投票的人）；</p><p></p><p>整个步骤有点像一个\"三阶段提交\"的过程，并且满足了算法的3点条件。再辅以数学上的证明，从而保证了算法的安全性。</p><p></p><p></p><h2>6.2&nbsp;可能出现的异常情况</h2><p></p><p></p><p>上一节完整的叙述了初步协议的正常步骤，那么这些步骤如果出现了异常，会对算法产生什么样的影响呢？</p><p></p><p>第1步中可能出现的异常情况：</p><p></p><p>在生成表决号时如果出现了问题，这轮表决就无法发起；如果在给其他人说\"准备开始表决\"的时候，只有小部分人在工位，或者大部分人都没听到。那么第3步的条件就无法达成，也不会有正事的表决。而听到且回应了的一小部分人，他们只是做出不投某些票承诺，并没有给这轮表决投票。</p><p></p><p>第2步中可能出现的异常情况：</p><p></p><p>接受人已经对别的表决做出承诺了（严格来说这不算异常情况）。这个就不予以回应，也不做出新承诺。当多个人并发尝试发起表决时，可能遇到这个情况。这个时候谁都没有法开展表决，就看谁能通过新的更大的表决号，先争取到大多数人的参与；接受人做出了承诺，但是他的回应没被发起人听到。如果只是小部分人，不影响第3步表决的正式开始；如果是大部分人，则打断第3步执行，不会正式开始表决。</p><p></p><p>第3步中可能出现的异常情况：</p><p></p><p>一直收不到大多数人的\"我参加……\"，那就一直不开始正式表决；提出的\"去不去xxx吃饭问题\"，没有被参与人听到。只要有一个参与人未听到这个问题，或为对这个问题做出回应，那么表决就没有结束。没有结束的表决，不会影响算法的安全性。</p><p></p><p>第4步中可能出现的异常情况：</p><p></p><p>\"我去！\"没被发起人听到。同3.b 。</p><p></p><p>第5步中可以出现的异常情况：</p><p></p><p>最后的结论，没有传达到所有人。那这些人会认为还没有达成共识，而继续发起表决。通过附录\"数学证明\"中的引理，可以保证后续的表决，会得到相同的结论。</p><p></p><p></p><h3>异常宕机</h3><p></p><p></p><p>如果某些人暂时离开，之后又回工位了，这对算法的安全性不造成影响（可恢复性宕机）。但是如果有人离开又回来之后，发现忘记了之前记录的承诺和投票，记录的小本本也不见了（不可恢复性宕机），这种情况下，这个算法就无法满足安全性。设想以下场景：</p><p></p><p>小A发起了第一表决，问大家要不要去吃面。小B和小C积极响应并且投了票。然后小B去阳台找小D和小X，回来之后小B把第一轮的事情给忘了。这个时候，小D想起还不知道中午吃啥，于是发起了第二轮表决，给小B和小X说他准备开始第二轮表决了，小B和小X回应小D说他们都没投过票，于是小D随机选了米饭正式表决。小B和小X也都说了“我去”。这个时候算法的安全性就被破坏了，小A和小C得到结论是去吃面，小B、小D和小X得到的结论是去吃米饭。</p><p></p><p></p><h3>网络分区</h3><p></p><p></p><p>如果出现了网络分区的情况（这是不可避免的），对应到例子里就是团队的5个人被临时分散到不同地方去开会了。这时会有两种情况：</p><p></p><p>1）每个分区都只包含少数人（不超过2人），那么算法的第2步和第4步都会卡住，从而影响算法的活性，但并不影响安全性；</p><p></p><p>2）（最多）有一个分区包含了大多数人（不少于3人），这个分区中的人能继续通过算法得出结论，而其他分区的人，只能等到网络恢复之后，通过新的表决来同步这个结论。</p><p></p><p></p><h1>七、写在最后</h1><p></p><p></p><p>Paxos算法的教会协议是一个单法令的协议，也就是说它只能就一件事情达成一致的决定。那么它有什么样的用途呢？如果将这个事情换成一个具体命令，就能联想到它的各种用法。比如将法令换成“谁来做Leader？”就可以用于选举；将法令换成“谁能持有这个资源的锁？”，就能用于分布式加锁。但是受限于“单法令”，有很多用法都只能完成一部分，而更为实用的多法令议会协议，是从教会协议衍生出来的，并且高度依赖教会协议中的算法。</p><p></p><p></p><h1>八、附录</h1><p></p><p></p><p></p><h2>8.1&nbsp;基础协议（The Basic Protocol）</h2><p></p><p></p><p>在初步协议中，每一个人都需要在小本本里，记下三个东西：</p><p></p><p>自己发起的所有表决的编号，以便再发起表决时，能生成一个新的唯一编号；自己的每一次投票，即在哪些轮的表决说了\"我去\"，还要记下这些表决问的是哪个餐馆；自己在初始协议的第2步回应之后，做出的承诺，白纸黑字记下来比较可靠。</p><p></p><p>需要记的东西着实有点多，多来几轮表决，多来几天，大本本都搞不定。所以机智的我（记住，这是一个虚构的故事）又登场了，我简化了初始协议，这样每个人只需要记录以下三个东西：</p><p></p><p>只用记下上一次发起的表决的编号；投过的票里，只用记下最大编号的那一轮表决的编号，和它问的餐馆；类似初始协议第2步的承诺，只用记下表决编号最大的承诺。比如我先回应了第十轮表决，做出来承诺；然后又回应了第十一轮表决，也做出了承诺。这个时候我可以把第十轮的承诺擦掉，记下第十一轮的承诺就行。</p><p></p><p>注意这里的区别：初始协议是需要几下每一个编号、每一次投票、每一个承诺，因为初始协议是运行并发地发起表决的；但是基础协议只需要记住一个编号、一次投票和一个承诺。所以……基础协议不允许并发地表决，一旦发现了过时的表决或者响应，都不予理睬；一旦发现了更新的表决或者响应，抛弃掉老表决的记录，转而响应更新的表决。简化后的基础协议具体步骤如下：</p><p></p><p>小A根据他记录的上一次发起的表决编号（记录的第一项内容），计算出一个新的表决编号b ，然后给每个在工位上的人说：\"我准备开始第b轮表决了\"。小B听到了小A的问题之后，发现这轮表决编号比他做过的承诺的表决编号（记录的第三项内容，比如说是九）还大，那么就回应小A说\"我参与第十轮表决，并且我在之前的第八轮（记录的第二项内容）表决中投了吃面\"，然后小B将记录的第三项从\"我给第九轮表决做出了承诺\"改成\"我给第十轮表决做出了承诺\"；反之如果小B记的承诺编号比十大，那就不回应小A。小A收到了大多数人的针对第十轮表决的回应之后，就可以正式开始表决，圈定参与人和选择询问的餐馆同初始协议的第三步一致。小A依次去问这些人，要不要去吃面。小A问到小B时，小B检查自己的小本本，如果发现第二项记录的承诺还是十，那就给小A说\"我去\"；否则就不回答小A。当参与表决的每一个人，针对第十轮的表决都说了\"我去\"，那么他就可以得出结论——今天中午去吃面，并且将这个结论奔走相告给团队里的每个人（不只是参与这轮投票的人）。团队里的每个人，一旦听到了小A宣布的结论，也都知道了今天中午去吃面。</p><p></p><p></p><h3>完整教会协议（The Complete Synod Protocol）</h3><p></p><p></p><p>基础协议同初步协议一样，保证了一致性，但是并不保证一定能达成决定。所以为了能尽早达成一致的决定（看来大家还是不喜欢挨饿的），完整协议在保持基础协议6个步骤的同时，除了要求每个人都能积极执行或响应第2~6步，更重要的是完整协议规定了大家在什么时候发起表决（第一步）。</p><p></p><p>为什么何时发起表决很重要？因为存在以下情况，会导致大家一直都没法达成决定：</p><p></p><p>一直没有人来发起表决，当然也没法达成决定。太多人持续发起新表决，也可能没法达成决定。基础协议只能串行处理表决，每次发起了更新的表决，都会将可能正在进行中的表决中断。</p><p></p><p>这就要求我们必须要发起新的表决，但是又不能太频繁的发起新的表决（就是这么矛盾）。为了解决这个问题，完整协议增加了一个选生活委员的前置步骤。</p><p></p><p>如何选出这个生活委员呢？最简单的一个办法就是选还在工位上的工号最小的那个，可行的步骤如下：</p><p></p><p>每个还在工位的人，每隔5分钟就告诉其他人自己的工号是多少。小A跟小B、小C说自己的工号是123456，小B跟小A、小C说自己的工号是654321，小C跟小A、小B说自己的工号是 55555；然后每个人每过10分钟就检查一下，看下之前10分钟有没有听到别人的工号比自己小的。如果有，那就证明自己当选生活委员无望；如果没有人工号比自己的小，那就恭喜自己当选了，可以发起新一轮的表决了；在这个10分钟的检查期内：如果小X又回到工位，然后跟小A、小B、小C说自己的工号是11111，那么小A就知道自己无望当选了；但是如果这时小A离开了工位，那么小B和小C什么也不会做，等到下一个10分钟再看；</p><p></p><p>小A当选了生活委员之后，需要做些什么呢？</p><p></p><p>1）首先是先发起新一轮的表决；</p><p></p><p>2）其次，如果在执行第三步或第五步的时候，过了很久（可能是有人离开工位了；也有可能是一个工号更小的人回了工位，认为自己当选了生活委员，发起了更新的表决）都没有收到大家的响应，那么就需要重新发起新的一轮表决（前提是他还当选着）；</p><p></p><p>3）此外，为了避免新发起的表决，一开始过时了（小A发起了第十轮表决，但在此之前，小B已经给第十一轮表决承诺了），所以小A需要从其他人那儿了解到他们做出的承诺，并以此来调整自己之后发起表决的编号。有两种方式：</p><p></p><p>在初步和基础协议的第二和第四步中，遇到这种情况，小B不会给小A任何回应。但是到了完整版协议中，小B会告诉小A：\"我不参加第十轮投票了，因为我已经给了第十一轮承诺\"，或者是：\"我不能确定要不要去吃面，因为我已经给了第十一轮承诺\"。这样小A就知道自己的第十轮表决是过时的，转而去发起第十二轮表决。每个人隔段时间都告诉其他人，自己发起过的最大一轮表决编号是多少。比如小C每过5分钟就告诉小A和小B，自己之前发起过第十一轮表决。等到小A当选生活委员的时候，就会跳过第十轮表决，发起第十二轮表决。</p><p></p><p>完整协议的很多步骤，都强依赖时间（即每个一段时间做XX事情），但它并不要求这个时间完全精确，只要在可接受的范围内即可。</p><p></p><p></p><h2>8.2&nbsp;证明过程</h2><p></p><p></p><p>(这一部分有点烧脑，对证明过程不感兴趣的话可以略过)</p><p></p><p>前面提到了，我们只要满足算法的三点条件，就能达成一致的决定。这并不是随便说说的，下面给出了完整的数学证明：</p><p></p><p>如果我们的所有表决，都满足算法的三点条件的情前提下。假设参与的小A、小B和小C都在第十轮表决，问大家去不去吃米饭，说了\"我去\"（按照算法，此时已达成了去吃米饭的一致决定）。</p><p></p><p>这里的证明用下反证法：假设第十轮之后的表决中（也满足算法的三点条件），还有表决在问大家要不要去吃面。基于这个假设成立的结论，我们一步一步地推导下去：</p><p></p><p>首先从第十轮之后，问去不去吃面的表决中，取最早的一轮表决C。因为我们的假设，所以C一定存在；C的轮次肯定大于第10轮。很显然成立，因为我们就是这么假设的；第十轮里投票的人，和C轮里参与的人，至少有一个相同的人。这也很显然也成立，因为所有的表决，都必须满足算法的第2点条件；参与C轮表决的人中，之前投过票的最大表决M，那么M的轮次 &gt;= 十。参与C轮表决的人可以分为两组：第一组是参与过第十轮投票的人，因为算法的第2点条件，这组里面一定有人，所以这一组的M1 &gt;= 十（如果他们后面又投票，M1就大于十）；第二组是没参加过第十轮投票的人，这一组可能没人，有可能只在第十轮前投过票，也有可能只在第十轮之后投过票，更有可能部分人第十轮前投票，部分人第十轮之后投票，所以这一组的M2可以是小于C轮次的任意值。然后两组再取其大，M = Max(M1, M2) &gt;= 十；M也是算法的3点条件的，这是我们的前提；所以，M问的餐馆和C问的餐馆是一样的，也就是去吃面。因为M和C轮表决都满足算法的第3点条件；M问的餐馆和第十轮问的餐馆不一样。根据上面一步推导，M轮问的是吃面，第十轮问的是米饭；M的轮次必定大于十。这个比第4步推导更进了一步，消除了等于这种情况。因为第7步，我们得出M和第十轮问的餐馆不一样，又因为算法的第一点条件（每轮投票都有唯一的编号），可以推导M的轮次不等于十；因为第7、8步的推导，和初始假设成立的结论，得出M是一个在第十轮之后，问大家要不要去吃面的表决；M的轮次一定是小于C的轮次的，因为根据第4步，M的定义就是\"参与C轮表决的人中，之前投过票的最大表决\"；矛盾出现了。C的定义在第1步中的定义是\"第十轮之后，问去不去吃面的表决中，最早的一轮表决\"，而M根据第9步的推导，它是\"第十轮之后，问大家要不要去吃面的表决\"，又因为第10步我们得出\"M的轮次一定是小于C的轮次的\"，这三点是冲突的。</p><p></p><p>所以通过反证法和这11步推导得出的矛盾，我们的初始假设不成立。\"假设第十轮之后的表决中（也满足上面的三点条件），还有表决在问大家要不要去吃面\" 这个假设不成立。换句话说，通过我们的证明，得出了一个引理（Lemma）：</p><p></p><p>所有表决都满足算法的3点条件的情况下，在表决投票得出一致的餐馆后，后续的表决中不会再问出要不要去其它餐馆的问题了。</p><p></p><p>通过这个引理，我们还能够得出其他两个定理（Theorem）：</p><p></p><p>定理一：所有表决都满足算法的三点条件的情况下，任何两轮成功的表决（所有参与表决的人都投了票），它们问的餐馆是一样的；</p><p></p><p>定理二：在已有表决都满足算法的三点条件的情况下，在后续新开展的表决中，一定存在满足算法的3点条件且成功的表决。算法虽然不保证一定能达成决定，但通过这点至少能证明满足三点条件之后，不会死锁。</p><p></p><p>定理二的证明过程如下，假设满足定理的表决为B，那么：</p><p></p><p>可以通过很多已有算法（雪花算法）来选择一个比已有轮次都更大，且唯一的B的轮次。这样B就满足了算法的第1点条件；只要每一轮表决（已有的和B），都选择所有人中的大多数（参与人数大于总人数的一半，例子中即3人），那么B的参与者也能够满足算法的第二点条件；如果参与B的人之前都没投过票，那么B可以随便决定那个餐馆；如果参与B的人之前投过票，那么B问的餐馆就是这些人之前投票的最大一轮表决问的餐馆。这样B就满足了算法的第三点；又因为背景中的设定，每个人没有口味偏好，一般情况下参与了表决，就会投票。所以经历足够多轮的表决之后（每一轮都按照以上三点，定出一个满足算法的B），总能有一轮表决参与的人都投了票，从而让这轮是一轮成功的表决。</p>",
    "publish_time": "2023-06-13 09:50:56",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "可观测的崭新进化：加速CI/CD管道的秘密武器",
    "url": "https://www.infoq.cn/article/lPSPNxwMD2US2WEHamr4",
    "summary": "<p>持续集成（CI）管道已经成为软件开发团队非常重要、甚至是无处不在的一部分，这是因为它们为团队带来的价值，即能够在不同层面上持续测试代码并自动化许多复杂的部署过程。如果你想获得最大的价值，仅仅有一个CI管道还不够。</p><p></p><p>如何跟踪CI管道和流程的有效性最好？如何确保管道实际交付的软件达到了应有的质量水平，而不是默认它会成功？如何更好地利用管道来排除软件问题，并使不同的应用程序更有效地运行？</p><p></p><p>只要我们实现有效的监控和可观察性，CI管道就可以提供所有这些问题的答案。要做到这一点，首先需要解决以下问题：</p><p>在涉及CI管道时，需要了解可观察性的哪些方面？如何在管道中配置这种监控？为了更好地理解CI管道和软件应用程序，应该监控哪些指标？如何更好地可视化这些指标？</p><p></p><p>在本文中，我们将探讨其中的许多问题，让你可以借助可观察性来更好地利用CI管道。虽然在本文中，我们将介绍团队应该努力培养的几项重要特质，但你也要认识到，每个团队和软件应用程序都是不同的，这一点很重要。你可能需要根据团队的具体需求进行调整。同样，本文探讨的大多数技术解决方案都涉及到像InfluxDB和Grafana这样的工具，并展示了如何通过它们配置各种仪表板。你的团队可能使用了不同的工具，但在很大程度上，这些原则还是适用的。你可能需要针对特定的工具集，研究下如何更好地实现相同的结果。</p><p></p><p></p><h2>可观察性技术面面观</h2><p></p><p></p><p>CI管道中有几个关键的可观察性组件，包括监控、日志记录和跟踪。</p><p></p><p>监控是指对管道操作的持续跟踪，包括各个阶段的性能、构建和部署的状态以及管道的总体健康状况。这可以借助各种工具来实现，比如Prometheus和Grafana。它们可以提供管道的实时可见性，并提醒开发人员可能出现的任何问题。</p><p></p><p>日志记录是指收集和存储来自管道的日志数据，包括与构建、部署和管道性能有关的信息。这些数据可以用于故障排除和根因分析，并且可以存储在集中式的日志管理系统（如ELK或Splunk）中，便于访问和分析。</p><p></p><p>跟踪是指跟踪通过管道的请求或事务流的能力，从开发到生产。这可以通过跟踪工具来完成，例如Jaeger或Zipkin。它们可以提供关于管道各个阶段的详细信息，包括每个阶段所花费的时间、使用的资源以及可能发生的任何错误。</p><p></p><p>总的来说，CI管道的可观察性对于保持管道的可靠性和有效性至关重要，而且让开发人员可以快速识别和解决可能出现的任何问题。这可以通过组合使用监控、日志记录和跟踪工具来实现。这些工具可以提供管道的实时可见性，并帮助进行故障排除和根因分析。</p><p></p><p>除此之外，你还可以使用应用程序性能管理（APM）解决方案这样的可观察性工具，如New Relic或Datadog。APM提供了整个应用程序和基础设施的端到端可见性，可以帮助开发人员识别管道中的瓶颈、性能问题和错误。</p><p></p><p>值得注意的是，可观察性应该集成到整个管道中，从开发到生产，保证任何问题都能被快速有效地识别和解决。</p><p></p><h2>CI管道的监控如何配置最好？</h2><p></p><p></p><p>关于这一部分，最困难的部分也许是如何选择恰当的工具。可供选择的工具有很多，每种工具都有各自的优缺点，本文就不展开介绍了。我建议你多花些时间和精力，研究一下市场上存在的不同工具，看看哪些工具与你现有的技术栈、预算和技能集最匹配，然后尝试不同的选项，看看哪些适合你。</p><p></p><p>像Prometheus、Grafana和ELK技术栈（Elasticsearch、Logstash、Kibana）这样的工具是CI管道监控中比较流行的选项。不过，我们在决策的时候不能只看哪些工具提供了最好的监控可视化以及哪些工具提供了最好的报告或预警功能，还要看哪些工具能更好地收集数据，这也许更重要。</p><p></p><p>以下是配置数据收集和管道流程的关键步骤，你可以从这些方面比较各种工具：</p><p>从多个数据源收集数据：这包括构建过程、测试过程和部署过程，可以提供管道性能的完整视图。将数据集中存储：利用数据仓库或集中式日志记录系统，方便日志访问和分析。使用API自动收集数据：使用API从管道和其他数据源（如代码存储库和问题跟踪系统）收集数据。这样就可以轻松地与其他工具和系统集成，实现比较简单的自动化，在不需要人工干预的情况下提取数据。使用日志记录和监控框架：可以使用Logstash和Prometheus等框架来收集和分析数据。它们为数据收集、存储和分析提供了内置支持。使用数据可视化工具：在将数据收集到集中式存储后，就该研究可视化数据的方法了（将在下文讨论）。使用数据可视化工具，如Grafana或Tableau，可以获得相对更容易理解的格式，简化趋势识别，并基于特定的数据需求和模式进行过滤。设置预警：设置预警机制，以便在管道出现问题时发送通知，包括团队聊天工具、Slack频道、电子邮件、短信，在PagerDuty等事件管理工具中创建事件，甚至将事件记录到JIRA等问题管理工具中。跟踪数据保留策略：我们正在讨论的是收集所有这些数据，但如果最终只是不断地存储所有数据，并不能带来什么帮助。虽然拥有大量的数据有用，但成本很高，而且可能会降低系统的性能，并成为一种阻碍。跟踪数据保留策略，并确保数据保存足够长的时间以供分析及满足合规性要求。持续监控和优化：不用说，数据收集了，也可视化了，现在要做的是持续监控管道，并在必要时做出调整，包括调整数据收集配置、添加新的数据点以及优化管道、提升性能。</p><p></p><h2>如何通过管道推送数据？</h2><p></p><p></p><p>有许多方法可以将数据从CI管道推送到数据源，具体的方法取决于数据源和你正在使用的CI工具。下面是一些使用代码将数据从管道推送到数据源的示例。</p><p></p><h3>借助REST API</h3><p></p><p></p><p>许多数据源都提供REST API，允许我们使用HTTP请求将数据推送到数据源。例如，可以使用Python的requests库向REST API端点发送POST请求，将数据推送到数据源。</p><p></p><p>示例：</p><p><code lang=\"text\">import requests \ndata = {'key1': 'value1', 'key2': 'value2'} \nresponse = requests.post('https://example.com/data', json=data)</code></p><p></p><p></p><h3>借助SDK</h3><p></p><p></p><p>有些数据源会提供SDK或客户端库，可用于将数据推送到数据源。例如，可以使用AWS SDK For Python（boto3）将数据推送到Amazon S3桶。</p><p></p><p>示例：</p><p><code lang=\"text\">import boto3 \ns3 = boto3.client('s3') \ns3.put_object(Bucket='my-bucket', Key='data.json', Body=data)</code></p><p></p><p></p><h3>借助命令行工具</h3><p></p><p></p><p>有些数据源提供可以将数据推送到数据源的命令行工具。例如，可以使用curl命令将数据推送到REST API端点。</p><p></p><p>示例：</p><p><code lang=\"text\">curl -X POST -H \"Content-Type: application/json\" -d '{\"key1\": \"value1\", \"key2\": \"value2\"}' https://example.com/data</code></p><p></p><p></p><h3>借助数据管道工具</h3><p></p><p></p><p>有些数据源提供数据管道工具，可用于将数据推送到数据源。例如，可以使用Apache NiFi将数据推送到数据湖。</p><p></p><p>这些示例非常基础，但应该也可以让你有一个基本的了解。在此基础上，团队可以着手从CI管道中将数据提取到目标数据源。</p><p></p><p>下面是一个完整的示例代码，使用Typescript在CI管道中设置数据存储，并将相关结果推送到数据存储中。在这个例子中，考虑到其可配置性和低成本，我们使用了</p><p><code lang=\"text\">import { config as dotenv } from 'dotenv';\nimport * as influxDB from 'influx';\n\nlet dbName: string;\nlet connection: influxDB.InfluxDB;\n\nexport async function streamMeasurement(\n  measurement: string,\n  points: influxDB.IPoint[]\n): Promise {\n  if (connection == null) {\n    dotenv({ path: '.influxconfig' });\n\n\n    dbName = process.env.INFLUXDB_METRICS_DBNAME;\n    if (dbName == null) {\n      return;\n    }\n\n    await createConnection();\n    await createDatabase();\n  }\n\n  await connection.writeMeasurement(measurement, points);\n}\n\nexport async function executeQuery(\n  influxQl: string\n): Promise&gt; {\n  await createConnection();\n  return connection.query(influxQl);\n}\n\nasync function createConnection(): Promise {\n  dbName = process.env.INFLUXDB_METRICS_DBNAME;\n  const host = process.env.INFLUXDB_METRICS_HOST;\n  const port = process.env.INFLUXDB_METRICS_PORT;\n\n  connection = new influxDB.InfluxDB(`http://${host}:${port}/${dbName}`);\n}\n\nasync function createDatabase(): Promise {\n  dbName = process.env.INFLUXDB_METRICS_DBNAME;\n  const dbNames = await connection.getDatabaseNames();\n\n  if (dbNames.includes(dbName)) {\n    return;\n  }\n\n  await connection.createDatabase(dbName);\n  await connection.createRetentionPolicy(dbName, {\n    duration: '700d',\n    database: dbName,\n    replication: 1,\n    isDefault: true,\n  });\n}\n</code></p><p></p><p></p><h2>通过CI管道可以度量哪些指标？</h2><p></p><p></p><p>通过CI管道，我们可以捕获许多不同类型的指标。为了获得最可靠、最有价值的结果，你可能希望在CI管道的不同阶段度量不同的东西。</p><p></p><p>指标清单也可能非常详尽，但要注意，不要想着什么都度量，那会导致分析瘫痪。团队访问了大量的信息，但却无法理解关注哪些指标才有助于他们理解、处理或纠正某些问题，经常会出现未能有效完成工作的情况。</p><p></p><p>注意，下面列出的具体指标只与CI过程相关。度量应用程序性能之类的东西也很重要，也应该做，只不过不应该作为CI过程的一部分。</p><p></p><p>以下是需要跟踪的最重要的指标：</p><p>构建时间：该指标度量完成构建所需的时间，即从构建流程开始到完成测试所耗费的时间。我们可以用它来识别缓慢的构建时间，并以此为基础优化构建管道，提升构建速度。测试通过率：该指标度量在构建过程中测试通过的百分比。我们可以用它来识别不可靠的测试，并提高代码的整体质量。安全扫描结果：任何管道都应该有某种形式的静态分析，检查代码中任何已知的漏洞或不受支持的包。虽然这个问题似乎微不足道，因为任何具有重大漏洞的pull请求都可能会失败，但仍然需要跟踪不同的安全风险，并确保识别出的风险确实是风险。部署频率：该指标度量将代码部署到生产环境的频率。我们可以用它识别管道的瓶颈并优化部署过程。失败率：该指标度量构建或部署失败的百分比。我们可以用它识别管道中存在的问题，并优化流程，减少故障。平均恢复时间（MTTR）：该指标度量应用程序从故障中恢复所需的时间。我们可以用它识别管道中存在的问题并优化流程，加快恢复速度。资源利用率：这类指标度量底层系统资源（如CPU、内存、磁盘或网络带宽）的使用情况。我们可以用它识别管道的瓶颈，并优化流程以便更好地利用资源。代码质量指标：这类指标度量代码的质量，例如Bug数量、代码复杂性、可维护性和测试覆盖率。我们可以用它识别管道中存在的问题，提高代码的整体质量。用户参与度指标：该指标衡量用户如何与系统交互，例如活动用户数、响应时间或错误率。我们可以用它识别管道中存在的问题，并优化流程，提升用户参与度。</p><p></p><p>务必要记住，并不是所有的指标对所有的管道都同样重要，这要视管道和组织的特定需求而定。选择与管道和组织目标最相关的指标，这很重要。</p><p></p><p></p><h2>数据可视化工具</h2><p></p><p></p><p>在详细讨论数据可视化的方法之前，我想简单地介绍一些一般来说最适合CI可观察性的可视化工具。并不是只有这些工具，但由于它们在处理大量数据时用起来比较简单，比较容易与各种旨在跟踪CI管道的工具集成，而且还具备可重配置能力，所以它们是使用最广泛的工具。</p><p></p><p></p><h3>GrafanaGrafana</h3><p></p><p></p><p>是一个开源的仪表板和可视化工具，可用于显示来自各种数据源（包括Prometheus、InfluxDB、Graphite、Elasticsearch等）的指标。我们可以用它创建自定义仪表板和预警，它内置了各种可用于显示管道指标的面板和插件。</p><p></p><p></p><h3>KibanaKibana</h3><p></p><p></p><p>是一个开源的数据可视化和探索工具，是Elastic Stack的一部分。它可以用来显示来自Elasticsearch的指标，也可以用来创建自定义可视化和仪表板。你还可以用它搜索及探索数据，并设置预警。</p><p></p><p></p><h3>DatadogDatadog</h3><p></p><p></p><p>是一个基于云的监控和分析平台，可用于显示来自各种数据源的指标，包括代理、集成和API。你可以用它创建自定义仪表板，设置预警，以及显示管道指标。</p><p></p><p></p><h3>New RelicNew Relic</h3><p></p><p></p><p>是一个基于云的性能监控和分析平台，可用于显示来自各种数据源的指标，包括代理、集成和API。你可以用它创建自定义仪表板，设置预警，以及显示管道指标。</p><p></p><p></p><h3>PrometheusPrometheus</h3><p></p><p></p><p>是一个开源的监控和预警系统，可用于从各种数据源收集以及存储指标。它还提供了一个内置的可视化和探索工具，名为Prometheus Web UI，可用于显示管道指标。</p><p></p><p>其中许多工具都有的一个好处是，它们可以使用HTML或JSON结构来传递信息，这意味着你可以轻松地分发或扩展仪表板，让它在不同的领域中发挥作用，而不需要什么都从头开始构建。</p><p></p><p>下面是一些JSON脚本的示例，完全用代码配置Grafana仪表板。（注意，<a href=\"https://github.com/CraigRisiAG/grafana-dashboarding/blob/main/performance.json\">实际的文件</a>\"相当大，为了让代码看起来简单些，这里只显示了一小部分）。</p><p></p><p><code lang=\"javascript\"> \"description\": \"A dashboard for visualizing results from the k6.io load testing tool, using the InfluxDB exporter.Based on https://grafana.com/dashboards/4411\",\n  \"editable\": true,\n  \"gnetId\": 10660,\n  \"graphTooltip\": 0,\n  \"id\": 18,\n  \"iteration\": 1607358257072,\n  \"links\": [],\n  \"panels\": [\n    {\n      \"cacheTimeout\": null,\n      \"colorBackground\": true,\n      \"colorValue\": false,\n      \"colors\": [\n        \"rgba(86, 166, 75, 0.5)\",\n        \"rgba(242, 204, 12, 0.5)\",\n        \"rgba(224, 47, 68, 0.5)\"\n      ],\n      \"datasource\": \"k6\",\n      \"decimals\": 2,\n      \"fieldConfig\": {\n        \"defaults\": {\n          \"custom\": {}\n        },\n      },\n      \"format\": \"ms\",\n      \"gauge\": {\n        \"maxValue\": 100,\n        \"minValue\": 0,\n        \"show\": false\n      },\n      \"gridPos\": {\n        \"h\": 3, \"w\": 4, \"x\": 0, \"y\": 0\n      },\n      \"height\": \"50px\",\n      \"id\": 16,\n      \"interval\": null,\n      \"links\": [],\n      \"mappingType\": 1,\n      \"mappingTypes\": [\n        {\n          \"name\": \"value to text\",\n          \"value\": 1\n        },\n        {\n          \"name\": \"range to text\",\n          \"value\": 2\n        }\n      ],\n      \"maxDataPoints\": 100,\n      \"nullPointMode\": \"connected\",\n      \"nullText\": null,\n      \"postfixFontSize\": \"50%\",\n      \"prefixFontSize\": \"50%\",\n      \"rangeMaps\": [\n        {\n          \"from\": \"null\",\n          \"text\": \"N/A\",\n          \"to\": \"null\"\n        }\n      ],\n….\n      ],\n      \"thresholds\": \"1000,2000\",\n      \"title\": \"Response Minimum\",\n      \"type\": \"singlestat\",\n      \"valueFontSize\": \"80%\",\n      \"valueMaps\": [\n        {\n          \"op\": \"=\",\n          \"text\": \"N/A\",\n          \"value\": \"null\"\n        }\n      ],\n      \"valueName\": \"min\"\n    },</code></p><p></p><p>如何可视化这些指标？这个主题也涉及许多不同的选项，因为有许多显示各种指标的方法。有些工具提供了许多内置的指标和仪表板，简化了我们的工作。尽管如此，考虑到不同软件需求的多样性，对于组织来说，最好是针对自己的具体情况组合仪表板。</p><p></p><p>以下是一些重要的建议：</p><p>保持简单：使用简单、易于理解的可视化，如柱状图、折线图和饼图，而不是复杂或不好解释的可视化。合理搭配颜色：合理搭配颜色突出数据及重要的趋势或模式。使用标签和注释：使用标签和注释来帮助解释数据，使用户更容易理解数据所代表的内容。使用实时数据：使用实时数据来显示最新信息，让用户可以查看数据如何随时间而变化。保持设计一致性：保持设计一致性，方便用户理解数据，并确保可视化易于阅读和解释。使其易于访问：确保所有用户都可以访问可视化，包括那些有视觉障碍或色觉缺陷的用户。</p><p></p><p>最重要的是要记住，设法跟踪关键指标和预警。许多团队会将一些好看的仪表板组合在一起，让其看起来很有用，提供了大量信息，但可观察性的目的是为了维护和监控管道的有效性，而不是为了好看。</p><p></p><p>举例来说，在一个好看的时间轴图中可视化每个管道作业的数据很简单，但是如果你的管道每天在不同的构建和环境中运行多次，那么信息将很快变得让人不堪重负，难以有效地可视化。相反，你可以将管道通过率和运行时间作为一个指标来展示，然后使用图形来可视化有问题的管道，从而更好地了解那里发生了什么。</p><p>&nbsp;</p><p>可视化还有助于快速识别醒目的内容，但不一定会为你提供排查某个情况所需的所有信息。这时，上文提到的日志就变得很重要了，它能够在你需要时提供更具体的数据。</p><p>&nbsp;</p><p>下面是一些仪表板示例，可以帮你很好地可视化CI管道。这些仪表板都是在Grafnan中创建的，不过这类可视化也可以在其他工具中展示。可以看出，我们要根据自己的需求配置仪表板的外观，而不仅仅依赖于作用有限的通用仪表板模板。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/64/643b21a599a32f67a421161e811ac32c.jpeg\" /></p><p></p><p>&nbsp;</p><p>如果你想分析趋势，那么上面的仪表板构思可能非常有用。有一些图形表盘带颜色，但重点是分析仅仅在趋势分析时才经常见到的低谷和异常值。这一点很重要，因为如果你的指标基于简单的通过率或平均性能，那么总体值可能看着还不错，但你可能会错过不频繁，但从长远来看又可能非常重要的峰值。尤其是规模很大的时候。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b5/b533cf658e3493a4382b2617bd4cddbe.jpeg\" /></p><p></p><p>&nbsp;</p><p>这个仪表板示例提供了视觉效果和信息的良好组合。并不是所有的东西都要显示在图上，有时只需以文本或数字格式提供所有你真正需要知道的信息，并且让你可以通过颜色分级来了解需要注意的内容。如果需要特定的图表或趋势，也可以使用它们。让你看到所需的数字，而不被数据压垮，这是一种可以确保事情健康发展的简单方法。当数字令人担忧时，你还可以设置预警触发策略。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1e/1e1357d74d51a708e709afac2ed9e8d1.jpeg\" /></p><p></p><p>&nbsp;</p><p>下面这个仪表板构思融合了各种可视化技术，包括易于阅读的数字和彩色编码，可以突出这些数字相对于预定基准的健康状况，同时，它还使用了一些图形可视化来更清晰地展示问题。它很好地混合了不同的技术，提供了有趣的信息。不过，可能有人会认为，右下角的管道持续时间图可能显示的信息太多，应该只显示有问题的管道，而不是尝试显示所有内容。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ab/abcd334e92dfe47375030816089df337.jpeg\" /></p><p></p><p>&nbsp;</p><p>这个仪表板做的事情可能太多了。这里的信息跟踪了运行管道作业的服务器的性能，虽然非常详细且进行了可视化，但要了解具体问题可能在哪里却很困难。对于调试性能问题，这样的信息或许有用，但由于数据太多，所以很难将其与正在发生的事情联系起来，因而团队很可能无法集中精力寻找问题。</p><p>&nbsp;</p><p>所有这些信息都应该为你在管道中尝试和实现可观察性提供一个入手点。可供选择的方法有很多，重要的是，作为一个团队和公司，你要设法确定最适合自己的信息和策略，以及一个在前进的过程中完善和改进一切的目标。如果你愿意改进和完善，那么最终不仅可以获得合适的CI管道监控，而且还可以获得提高其利用率所需的信息。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/ci-cd-observability/\">https://www.infoq.com/articles/ci-cd-observability/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/minibook/Q4eHZELtNaUvfZJV7lrK\">中国企业研发高效能白皮书-CI/CD篇</a>\"</p><p><a href=\"https://www.infoq.cn/article/14QYNmR7oJ3S07jLBXQt\">CI/CD 流水线创建方法：Monad、Arrow 还是 Dart ？</a>\"</p>",
    "publish_time": "2023-06-13 09:57:24",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "保险公司多领域“炫技”，到底是不是不务正业｜InfoQ 《一探到底》",
    "url": "https://www.infoq.cn/article/wApaEZ0VXmXaTNVSGQbT",
    "summary": "<p>新场景催生新的需求，而新的数字技术作为推动保险构建新的生产方式的重要底层基础，助力普惠金融从“可能性”变为“可行性”。《一探到底》众安之行的第二期，从宠物险投保这件小事和大家聊起，带大家感受技术的温度，并了解众安是如何通过技术挖掘并满足不同群体和不同领域的“碎片化”的需求，促进金融服务的普及和发展。</p>",
    "publish_time": "2023-06-13 11:00:25",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "“偷”代码建起公司、学历造假、6天拿下1亿美元却拖欠工资，这位AI独角兽CEO屡遭质疑后亲自回应了",
    "url": "https://www.infoq.cn/article/XB8TyD9bvDZTudesmEQU",
    "summary": "<p></p><blockquote>Stability AI创始人称Stable Diffusion的成功离不开早期“虚假宣传”。</blockquote><p></p><p>&nbsp;</p><p>Stability AI是一家独角兽初创公司，Emad Mostaque 是公司的创始人兼CEO。Stability AI于2022 年 10 月以十亿美元的估值一跃成为新一轮AI热潮中的一匹黑马。</p><p>&nbsp;</p><p><a href=\"https://www.infoq.cn/article/kps1yUUKJU1dSLI68lZz\">Stability AI </a>\"声名鹊起要归功于其开创性的开源AIGC模型——文本到图像生成器Stable Diffusion，它与另一个开源项目Midjourney 一起几乎很快就取代了 OpenAI 的 DALL-E 2 作为首选的生成图像工具。</p><p>&nbsp;</p><p>在过去的一年里，伴随着Stability AI攻城略地式的快速发展，Mostaque 也成为了开源AI世界中炙手可热的人物。然而，《福布斯》最近发布的一篇文章却揭露了Mostaque背后不为人知的一些故事和经历。</p><p>&nbsp;</p><p>据《福布斯》报道，Mostaque谎报了自己的学历、成就和伙伴关系。报道称，他夸大了自己的资历，夸大了对冲基金的经验，误导了投资者和客户，并夸大了与亚马逊的交易。他还把 <a href=\"https://www.infoq.cn/article/hzqWDTkJbUCLghFPXmel\">Stable Diffusion</a>\" 的成功归功于他，却淡化了他的联合创始人和员工的作用。</p><p></p><h2>会讲故事的创始人，却在学历和成就上说谎了</h2><p></p><p>&nbsp;</p><p>凭借着火爆全网的AI文本到图形生成器，以及公司创始人Emad Mostaque一系列精妙的宣传“引导”，Stability AI已然成为一颗估值10亿美元的技术新星。</p><p>&nbsp;</p><p>Emad Mostaque可以说是开启这波AI淘金热的现代先驱之一。拥有牛津大学硕士学位的他之前曾是一位战绩斐然的对冲基金经理，协助联合国开展新项目，同时也是Stable Diffusion背后的技术缔造者。用他的话说，正是这款文本到图像生成器在去年夏天的横空出世，才迫切<a href=\"https://www.infoq.cn/article/xZaNyw2QsZcxmNXUvkZv\">OpenAI</a>\"快速推出ChatGPT，最终让整个世界全面进入AI时代。如今的他成为生成式AI技术浪潮的代言人之一，也吸引到超1亿美元资金实现自己的未来愿景——构建起一套真正开放的AI，在它的帮助下改造好莱坞、推动教育大众化，并彻底打破Office套件中的技术门槛。他在今年年初的采访中打趣道，“希望我能凭借这份努力拿到诺贝尔和平奖。”</p><p>&nbsp;</p><p>但这一切，只是Mostaque想让大家相信的故事版本。</p><p>&nbsp;</p><p>实际上，Mostaque并不是硕士，而仅仅只拥有学士学位。另外就是他提到的对冲基金管理经历，这支基金表现不佳而且短短几个月就宣告倒闭。联合国也已经多年没有与他合作。虽然Stable Diffusion确实是他创立的公司Stability AI的主要成果，但项目的源代码其实是其他研究人员编写而成。领导这项研究的Björn Ommer教授证实，“据我所知，Stability在开发早期甚至连这项技术都没听过，到后来才插了一脚。”</p><p>&nbsp;</p><p></p><blockquote>“他最擅长的就是把别人的成果拿过来写上自己的名字，或者宣传一些难以证实的事情。”&nbsp;——某Stability前员工</blockquote><p></p><p>&nbsp;</p><p>Mostaque今年已经40岁，他搞过的虚假宣传绝对不止于此。尽管他在AI领域没有任何严肃经验，但为了让自己能在这场自互联网诞生以来最伟大的技术巨变中稳居最前沿，Mostaque完全不惮于捏造事实。通过对13位现任/前任Stability员工和超过20名投资者、合作者和前同事的采访，同时参考推介会和内部文件信息，媒体发现Mostaque如今的成功似乎确有过度夸大、德不配位之嫌。</p><p>&nbsp;</p><p>在去年夏天Stable Diffusion风靡一时之后，蓝筹风险投资公司Coatue Management和Lightspeed Venture Partners投入了1亿美元，这也给总部位于伦敦的Stability AI带来了10亿美元的可观估值。Mostaque在采访中指出，截至去年10月，Stable Diffusion的日活用户已经达到1000万。今年5月，白宫将Stability和微软、英伟达等一道列为七大“领先AI开发商”之一，计划合作开展一项具有里程碑意义的联邦AI安全计划。Mostaque最近还与亚马逊创始人Jeff Bezos共进晚餐，就连功成退隐的谷歌联合创始人Sergey Brin也在去年10月的Stability发布会上罕见露面。</p><p>&nbsp;</p><p>Mostaque对开源AI的远见吸引到众多资深技术专家。曾在Adobe工作两年，去年10月加入Stability的Christian Cantrell表示，“他可能是我见过的最富有远见的人”。但短短半年之后，Cantrell就离职并创办了自己的公司。自去年夏天获得注资以来，更多一流人才也接踵而至。在140名员工中，研发副总裁是英伟达公司前任董事，研究负责人来自Google Brain团队，另有来自Ommer实验室的三位博士生。</p><p>&nbsp;</p><p>但为了继续为Stability制造轰动效应，Mostaque还精心设计了一整套围绕虚假宣传和激进承诺展开的策略，夸大了他本人在几个主要AI项目中的作用，甚至宣传与向来在业务上毫不妥协的亚马逊达成了80%的“战略合作伙伴”折扣。曾与Mostaque共事的AI研究人员证实，这家伙经常宣称自己本应获得更大的荣誉和声名。在一再追问之下，<a href=\"https://www.infoq.cn/article/V24vD7kvHyuT3byVVObJ\">Stability</a>\"公司发言人Motez&nbsp;Bishara向媒体证实亚马逊并没有为其提供特殊折扣。</p><p>&nbsp;</p><p>Mostaque对投资者的其他误导，还包括高调宣传多个融资平台，宣称经合组织、世卫组织和世界银行都是Stability的合作伙伴——这三个机构均予以否认。Bishara承认，该公司无法在不确定“内容版本”的情况下对这种说法发表评论，但具体宣传应该附有额外的数据和文件。</p><p>&nbsp;</p><p>八名前公司雇员提到，在Stability公司内部，员工的工资和个税缴纳已经一再拖延。去年英国税务机构甚至威胁要没收该公司资产。（Bishara强调「确实出了点问题，但很快就已解决。」）一边是员工工资经常被拖欠，另一边则是Mostaque的妻子Zehra Qureshi（先是担任公关主管，随后担任公司董事会成员）从公账中提取了来自数十名员工的几万英镑（媒体方面已经看到相关来源和交易截图）。公司发言人Bishara解释称，这对夫妇一直在“向企业提供个人借款”，而且“在2022年底之前，Stability与Mostaque及Qureshi间的应欠款项均已全额结清。”</p><p>&nbsp;</p><p>在回应这份详细的质询清单时，Mostaque还发布一份声明，称Stability是一家快速发展的公司，在“系统和流程”方面长期未能给予应有的重视。“我们认识到自身的缺陷，正在努力以有效且富有同理心的方式改善并解决这些问题。”</p><p>&nbsp;</p><p>几个月来，<a href=\"https://archsummit.infoq.cn/2023/shenzhen/track/1542\">AI专家</a>\"和潜在投资者一直私下对Mostaque的某些说法表示过怀疑。虽然目前硅谷对AI初创企业已经相当慷慨人，但不少风险投资人士称Stability的这位创始人一直想要再筹款几亿美元，把公司估值推上40亿美元大关。Mostaque去年10月宣称Stability的年亿收入已超过1000万美元，但内部人士却表示销售额并没什么改善（Bishara表示10月公布的这个数字，是「按当时收入做出的正常预期估算」，但拒绝就当前实际收入发表评论）。一位拒绝了Mostaque融资提议的风险投资人坦言，“很多事情根本就对不上。”</p><p>&nbsp;</p><p></p><h2>一场十亿美元的豪赌</h2><p></p><p>&nbsp;</p><p>2005年，Mostaque从牛津大学拿到了学士学位，而非他后来宣称的硕士学位。（Bishara回应称，Mostaque当时打算申请「牛津文学硕士」学位，且该校一直向学生无差别开放研究生课程。Mostaque今年7月应该就能拿到学位证书。）</p><p>&nbsp;</p><p>之后他投身金融业，加入了瑞士基金管理公司Pictet。当时决定聘用Mostaque的JP Smith表示“他非常擅长编造故事”，还介绍他去Ecstrat公司担任顾问。2017年，Mostaque加入了对冲基金Capricorn，号称通过重组和运营将这家身陷困境的公司拉出了泥潭。但Capricorn公司联合创始人Damon Hoff澄清称，“他担任的是联席首席投资官，但从来就没投过资。”而且因为业绩不佳，这只价值3.3亿美元的基金在诞生两年后就于2018年停止运作。</p><p>&nbsp;</p><p>在经历了一系列失败的创业（包括尝试把〈古兰经〉数字化再拆分成加密货币出售）之后，Mostaque于2019年创立了Stability。作为AI驱动的数据中心，全球机构开始使用该中心制定COVID-19抗疫决策。2020年7月召开线上启动仪式时，斯坦福<a href=\"https://archsummit.infoq.cn/2023/shenzhen/track/1542\">AI专家李飞飞</a>\"和来自联合国教科文组织、世界卫生组织和世界银行的代表还发表了演讲。但项目最终未能启动，并在约一年后被撤销。Mostaque在今年1月的采访中抱怨，“有些人承诺了很多，但却并没有兑现。”</p><p>&nbsp;</p><p></p><blockquote>&nbsp;“我们可以从中学到的经验就是，只要你的公司拥有足够庞大的宣传部门，那就可以根据自己的意愿塑造历史。”——Björn Ommer, 慕尼黑路德维希马克西米利安大学与海德堡大学教授</blockquote><p></p><p>&nbsp;</p><p>之后，Stability的业务重心又转移了好几次。早期员工表示，他们曾经研究在伦敦周边建立一个自动售货冰柜网络，为用户提供即取即走的冷藏服务。另外还有一系列狗狗表情包NFT，这显然也是赶上了当时那波加密货币浪潮。而随着生成式AI的爆发式增长，Mostaque觉得自己看到了机会。通过各种花招和虚张声势，他成功把Stability定位为当时领先的AI独角兽企业之一。</p><p>&nbsp;</p><p>为了让一切更有说服力，Mostaque向投资者们宣扬Stability正在组装全球Top10的超级计算机。他还把自己塑造成AI研究者的善良盟友，愿意为他们提供资金并向底层技术探索者们出借Stability的超算资源，共同与“邪恶”的谷歌和OpenAI等科技巨头对抗。</p><p>&nbsp;</p><p>Mostaque指出，这台超级计算机由数千个英伟达最先进的GPU构建而成，是从亚马逊云科技手中买来而且享受到了惊人的二折优惠。从2022年5月到8月的五次筹款宣传当中，Stability一直将AWS列为“战略合作伙伴”或“合作伙伴”。</p><p>&nbsp;</p><p>“我们跟亚马逊交流过，并表示这次的合作非同小可。双方达成了一项极具吸引力的交易——主要通过个人担保之类。我不能说得太多，否则我老婆会生我的气。”他的妻子Zehra Qureshi当时正担任Stability的公关负责人。</p><p>&nbsp;</p><p>但<a href=\"https://www.infoq.cn/article/IuL0NdXKhNLAhZv0LUKv\">AWS</a>\"公司AI部门副总裁Bratin&nbsp;Saha在今年1月向媒体证明，Stability就是在“正常使用AWS基础设施，跟其他客户没什么区别。”另有三名前Stability员工也证明，在吸引到风险投资之前，该公司已经积累下好几个月的数百万未付账单，亚马逊方面甚至威胁要撤销Stability的部分GPU访问权限。</p><p>&nbsp;</p><p>在就此事求证时，Stability承认情况属实。Mostaque宣称的“极具吸引力的交易”其实是亚马逊向每家承诺长期租赁算力的客户提供的标准折扣。Bishara指出，“在AWS的支持下，所有账款问题都以有序且沟通顺畅的方式得到了解决。”AWS方面没有回应关于此事的置评请求。</p><p>&nbsp;</p><p>Stability推介会上的夸张内容还不止于此：在2022年5月到6月的投资者推介中，Stability将AI图像生成器Midjourney描述为其“生态系统”的一部分，声称自己“参与创造”了该产品并“组织”起用户社区。Midjourney创始人David Holz则回应称，Mostaque只提供了“非常有限”的财务捐赠，除此之外双方之间没有任何关系。</p><p>&nbsp;</p><p>此外，根据四名前雇员的说法，Mostaque还指示其团队将联合国教科文组织、经合组织、世界卫生组织和世界银行等机构列为合作伙伴，而事实上各方根本就没有参与过Stability的发展。Bishara否认Mostaque曾提出这种要求，但以上各组织确实在2022年8月的多个筹款平台上被列为“合作伙伴”，&nbsp;Mostaque还在其中将自己描述为“联合国COVID AI领导者”。</p><p>&nbsp;</p><p>联合国教科文组织发言人澄清称，除了COVID-19数据倡议之外，该机构与Stability并没有任何关联，而此项倡议也已经在去年夏天结束。其他三个机构也表示，他们没有与Stability公司建立过任何明确记录在案的合作伙伴关系。</p><p>&nbsp;</p><p>在被问及Stability宣传材料中的说法时，Bishara表示Stability的所有投资者材料都包含投资备忘录与附录文件，其中包含更多关于亚马逊交易的背景信息以及“我们与合作伙伴的关系”等具体说明。但该公司提到的两名投资者均表示没有收到此类额外说明。</p><p></p><h2>Stable&nbsp;Diffusion的真正缔造者</h2><p></p><p>2022年6月，Mostaque提出向一群德国学者提供Stability的超级计算机，帮助对方开发代号为Latent Diffusion的开源图像生成器。该模型是在七个月前由研究者们与来自纽约的AI初创公司Runway合作构建的。但根据领导慕尼黑路德维希马克西米利安大学和海德堡大学研究团队的Björn Ommer教授的介绍，该模型在训练过程中只使用过几十个<a href=\"https://www.infoq.cn/article/99bQgZ9PmtBOYfiqRWPB\">英伟达GPU</a>\"。</p><p>&nbsp;</p><p>但必须承认，面对可观的计算成本，手头拮据的研究人员当然愿意接过Stability伸出的橄榄枝。Stability提供的算力也显著提高了Latent Diffusion的性能。同年8月，新模型以Stable Diffusion的名号亮相，旨在体现其背后的赞助公司。Stability专门为此发布了新闻稿，Mostaque借机将自己定位为公众眼中“有史以来最受欢迎开源软件”的首席布道师。（Linux和Firefox实名表示反对。）</p><p>&nbsp;</p><p>一位前雇员在谈到Mostaque时表示，“他最擅长的就是把别人的成果拿过来写上自己的名字，或者宣传一些难以证实的事情。”Bishara则在一份声明中指出，Mostaque“很快就赞扬并强调了合作者做出的贡献”，而且“断然否认这些虚假的说法和观点”。</p><p>&nbsp;</p><p>在Stable Diffusion推出的几天之内，Stability公司就从领先科技投资方Coatue和Lightspeed手中拿到1亿美元。Mostaque在发给早期投资者的短信中宣称，这个数字达到了他最初融资预期的八倍。这两家投资企业均拒绝回应置评请求。</p><p>&nbsp;</p><p></p><blockquote>&nbsp;“我们的投资理念在于，哪怕还不清楚技术的具体用例是什么，但只要确定这项技术真正具有变革性、且功能发展已趋近临界点，那就应该支持。”——Gaurav Gupta, 领投Stability的Lightspeed公司合伙人</blockquote><p></p><p>&nbsp;</p><p>此轮融资让Stability获得了约10亿美元估值，但当时这家年轻的企业还没有产生多少收入。Stability在那时的筹款平台上将<a href=\"https://www.infoq.cn/article/fpLMUicW0gFoTpFOTD20\">Stable Diffusion</a>\"描述为“我们的”模型，但对实际研发团队却只字未提。还有新闻稿说“Stability AI是Stable Diffusion背后的公司”，同样没有提到实际缔造者。Ommer在采访中指出，他倒是希望能宣传一下自己的实验室，但当时大学的整个新闻部门都在休假。</p><p>&nbsp;</p><p>Bishara表示，Stability已经在官方网站和Stable Diffusion的GitHub页面上“多次发表声明”，对路德维希马克西米利安大学和 Runway公司表达了赞赏。尽管如此，这些原创者们还是觉得Mostaque在交流中在刻意误导公众。Ommer更是放言，“我们可以从中学到的经验就是，只要你的公司拥有足够庞大的宣传部门，那就可以根据自己的意愿塑造历史。”</p><p>&nbsp;</p><p>去年10月，Stability宣称Runway发布Stable Diffusion新版本的行为涉嫌窃取其知识产权。Runway公司联合创始人Cristóbal Valenzuela则反驳称，该技术属于开源成果，因此不可能涉及侵权。Mostaque几小时后就撤回了这项指控，并在采访中称自己这么说是担心Runway版本中缺少护栏——但Stable Diffusion的各实际参与方明显不相信这个借口。</p><p>&nbsp;</p><p>Ommer觉得Mostaque这件事“做得太绝了”，Valenzuela也同样对此感到失望。他在去年的采访中强调，“我们已经达个领域深耕多年，如今新人刚一介入，就想把原本的成果说成是自己的。”（但他拒绝进一步做出更多评论。）</p><p>&nbsp;</p><p>目前，Ommer实验室和Runway公司都停止了与Stability的合作。</p><p></p><h2>六天拿下一亿美元，却拖欠员工工资</h2><p></p><p>在Mostaque向投资者和研究人员兜售自己的超级计算机和合作伙伴“门路”时，Stability公司正面临巨大的资金压力。据七位现任和前任员工证实，Stability当时经常拖欠员工的工资和个税，有时候甚至超过一个月。其中五位自古以来人士称，他们在2020年至2023年间都遇到过拖欠薪资；其中四位称看到过英国征税机构HM Revenue &amp; Customs的代表亲临公司办公室，威胁要以缴税逾期为由扣押资产。Bishara表示延迟缴税和支付员工工资的问题已经解决。</p><p>&nbsp;</p><p>曾在Stability实习的Eric Hallahan表示，直到今天他也没拿到去年8月寄给公司的发票报销款。他先后为该公司工作了300个小时，其中有181小时的工资始终未付。Bishara表示，自2021年以来，该公司再无“正常运营中”拖欠工资的记录，但承认“外部情况”下可能存在例外。关于Hallahan的问题，Bishara称Stability在4月收到通知后一直在查验发票。</p><p>&nbsp;</p><p>虽然工作人员的工资经常无法按时发放，但从媒体获得的交易截图来看，Stability公账中有数万英镑被直接转移到了Mostaque妻子Qureshi的私人账户当中。</p><p>&nbsp;</p><p>Bishara说这是因为Stability“的创始人一直在亲自管理这家初创公司”，包括向公司出借款项和向公司借支款项。“但随着公司的发展成熟，全面对账已经完成。经验丰富的新财务团队在2022年底前全额结清了与Mostaque和Qureshi间的所有欠款。”Qureshi的律师拒绝直接回答这个问题，但分享了一份声明，其中表示自2021年以来，Qureshi一直在为丈夫的企业提供“情感和经济上的支持”。</p><p>&nbsp;</p><p>虽然Qureshi在公司的正式职位是公关主管，但早期雇员还记得她自称是Stability的首席运营官——甚至把头衔印在个名牌上。（Bishara坚称Qureshi从未担任过高管职务，这些「名片」是其好友用来练手的设计成果，并未正式使用。）而在该公司去年9月完成融资之后，Qureshi正式加入了Stability董事会。</p><p>&nbsp;</p><p>因害怕遭到报复而不愿透露姓名的一位现任员工，以及另外四名前员工均表示，Qureshi经常严厉责骂员工甚至严重伤害对方情感。Qureshi在通过律师发布的声明中，表示自己的管理风格比较“直接”。“很遗憾，很多人似乎误解了我的观点或者意愿，我的本意并非如此。”</p><p>&nbsp;</p><p></p><blockquote>Mostaque表示自Stable Diffusion爆红的那一刻开始，他从领先投资公司Coatue和Lightspeed拿下1亿美元“从头到尾”只用了六天。</blockquote><p></p><p>&nbsp;</p><p>Bishara称Qureshi已经于今年1月下旬离开公司转而追求个人事业，也不再担任董事会成员。但5月初的一份组织结构图仍将她列为“基金会负责人”，在公司中属于看齐Mostaque的最高职级。</p><p>&nbsp;</p><p>Qureshi通过律师发布的声明提到，“我意识到现在是时候各自朝着不同的方向前进了。我今年初辞去了公关主管一职，也辞去了董事会职务。我需要关注家中年幼的孩子，也打算从事其他个人项目。但我将继续支持我丈夫的努力，支持他将Stability AI创立并培养出AI领域的全球领导企业。”</p><p>&nbsp;</p><p></p><h2>挣钱的速度赶不上烧钱的速度</h2><p></p><p>风险投资商一直会花几个月时间开展尽职调查，包括分析市场、审查创始人并与客户交流，确认在投资之前目标初创公司没有什么危险信号。但Mostaque表示自Stable Diffusion爆红的那一刻开始，他从领先投资公司Coatue和Lightspeed拿下1亿美元“从头到尾”只用了六天。从这样的速度来看，其间应该是没有进行过尽职调查才对。</p><p>&nbsp;</p><p>领投Stability的Lightspeed公司合伙人Gaurav Gupta则坦言，“我们的投资理念在于，哪怕还不清楚技术的具体用例是什么，但只要确定这项技术真正具有变革性、且功能发展已趋近临界点，那就应该支持。”Coatue和Lightspeed均拒绝对此做进一步评论。</p><p>&nbsp;</p><p>Mostaque表示，Stability正在为数十家客户构建定制化AI模型，但目前只能透露其中两家。其一是印度控股公司Eros Invetments，其媒体部门前段时间因误导投资者的诉讼而被迫从纽约证交所退市，但Eros方面坚持否认存在不当行为。（Eros没有回应置评请求。）第二位客户都是非洲国家马拉维。Mostaque在最近的播客节目中称，Stability目前“为该国的儿童部署了400万台平板电脑”。（马拉维政府同样没有回应置评请求。）</p><p>&nbsp;</p><p>在Stable Diffusion公开发布不到两个月后，Mostaque宣称Stability的年化收入已经高于OpenAI当时报道的“小几千万美元”。但据知情人士透露，Stability直到现在的年化收入也到不了1000万美元，远远追不上该公司烧钱的速度。因此与其他AI初创公司一样，Stability需要吸纳更多资金才能维持生存。</p><p>&nbsp;</p><p>今年1月，Mostaque暗示公司在筹款方面没有任何压力。“许多实体已经向我们提出要约，但被我们拒绝了。”但另有三位风险投资商证实，Stability这几个月来一直在向多家投资者宣传新一轮4亿美元融资计划，但均未得到响应。（Bishara拒绝就收入发表评论，只表示公司仍有「大量」现金储备。）</p><p>&nbsp;</p><p>Stability还面临两项诉讼，指控其违反版权法以训练AI模型。该公司还以一项动议，以艺术家无法确定具体侵权案例为由驳回了其中一项由艺术家提出的集体诉讼。而作为回应，来自Getty&nbsp;Images的另一方称提起诉讼的特拉华州缺乏管辖权，应该将诉讼地点改为北加州或直接驳回此案。这两项动议均在等待法院审查，Bishara拒绝就这两起诉讼发表置评。</p><p>&nbsp;</p><p>在去年9月的一封公开信中，美国民主党代表Anna Eshoo敦促华盛顿采取行动以反对Stable Diffusion的开源路线。她写道，这套模型曾被用于生成“被暴力殴打的亚洲女性”和“色情作品，包括一些高度写实的真人”图像。</p><p>&nbsp;</p><p>Bishara表示，较新版本的Stable Diffusion会过滤数据中“可能不安全的内容，有且于防止用户生成有害图像”。</p><p></p><h2>本人回应：对夸大报道感到难过</h2><p></p><p>&nbsp;</p><p>Stability的AI研究之路并不轻松，其旗舰产品Stable Diffusion正面临着巨大的竞争压力。2022年10月由原始开发团队发布的该模型最新版本，在专门托管此类模型的Hugging Face上获得的下载量仍是Stability版的3倍。而用于对抗ChatGPT的StableLM虽已于4月发布，但人气却长期不及自家师兄Stable Diffusion。</p><p>&nbsp;</p><p>Mostaque倒是不为所动，宣称Stability拥有经验丰富的技术领导者带队：也就是他自己。他声称多年之前曾使用AI分析现有科学文献并构建起分子化合物的知识图谱，进而找到一种针对自闭症的定制疗法。（Bishara称这项研究仅在私下进行，并拒绝做出进一步说明。）</p><p>&nbsp;</p><p>Mostaque在年初的采访中称，“我是个优秀的程序员”，就在考上牛津大学的一年之前，他曾在软件公司Metaswitch担任开发人员。“当时我根本就不会编程，所以拿了一整个夏天自学——其实很轻松。”根据他的说法，他提交了几段代码并向公司主动自荐，表示“我想搞开发，希望贵公司能考虑吸纳我作程序员。对方回复说没问题。”</p><p>&nbsp;</p><p>“我这个人的说服力还满强的。”</p><p>&nbsp;</p><p>《福布斯》这篇文章发表后，外界对于Mostaque质疑声也不断升高。在舆论持续发酵下，Emad&nbsp;Mostaque本人在文章发表后的几天又接受了VentureBeat的采访，并对文章中报道的内容做出了回应。Mostaque称，对于媒体夸大的报道自己感到很难过，但自己并不想“扼杀”这篇文章，只是希望《福布斯》可以准确无误地报道事实。</p><p>&nbsp;</p><p>Mostaque进一步解释称自己在技术上没有文学学士或文学硕士，但的确是完成了硕士的所有课程作业，只是到最后错过了仪式并且没有寄出支票来获得文凭。</p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://www.forbes.com/sites/kenrickcai/2023/06/04/stable-diffusion-emad-mostaque-stability-ai-exaggeration/?sh=abbe17775c52\">https://www.forbes.com/sites/kenrickcai/2023/06/04/stable-diffusion-emad-mostaque-stability-ai-exaggeration/?sh=abbe17775c52</a>\"</p><p>&nbsp;</p><p><a href=\"https://venturebeat.com/ai/stability-ceo-says-hes-sad-about-report-he-exaggerated-his-resume/\">https://venturebeat.com/ai/stability-ceo-says-hes-sad-about-report-he-exaggerated-his-resume/</a>\"</p>",
    "publish_time": "2023-06-13 11:12:40",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "12维度能力画像、1+3认证体系，东亚银行如何搭建数字人才体系",
    "url": "https://www.infoq.cn/article/6rPg98g1JfvBEfRvsrDh",
    "summary": "<p></p><p></p><blockquote>嘉宾｜李燕青，东亚银行（中国）有限公司总行行长助理编辑｜罗燕珊</blockquote><p></p><p></p><p>大部分的商业银行或许都遇到这样的情况：数字化人才在哪里？现在有没有完善有效的数字化培训体系，能够把数字化人才掌握的技能跟平台匹配起来？</p><p></p><p><a href=\"https://www.hkbea.com.cn/BeaInformation/\">东亚银行</a>\"（中国）有限公司（以下简称“东亚中国”）总行行长助理李燕青近日在<a href=\"https://app.jingsocial.com/microFrontend/leadGeneration/jsf-leads/list/webinar/P8KAMuAA7DmVHnBydPuGL8/C2CviyZ3WNSRYyMpEC98C4\">DTDS</a>\"全球数字人才发展线上峰会指出，当下的数字化人才发展面临两大关键问题，一是人才储备不足且缺乏应用能力。二是培训体系不足，导致培训成果没能体现到实际业务中。为应对挑战，东亚中国在过去两年里围绕数字化人才的战略规划和培训体系做了一系列探索和实践。</p><p></p><p>以下是演讲实录（经 InfoQ 进行不改变原意的编辑整理）：</p><p></p><p>东亚银行是一间拥有百年历史的港资银行，其战略重点为中国的内地以及香港地区。1918年，东亚银行秉持“为祖国策富强”宗旨在香港成立，并于1920年在上海开设其首间分行。在这百年历史中，东亚银行见证了中国经济改革的每一个关键点，并尽着自己最大的努力。</p><p></p><h2>数字人才战略三板斧</h2><p></p><p>2021年，东亚中国正式启动数字化转型，目的是为了提升客户体验、增强效率，夯实数据基础以及发展数字化人才。</p><p></p><p>2022年，东亚中国秉承着数字发展、人才先行的一个理念，牵头打造首家外资银行数字化人才培养品牌— —“数赢”。</p><p></p><p>我们在全行以及自身条线的调研中发现，当前数字化人才发展面临两个关键问题：一是数字化人才储备不足，缺乏同时具备业务理解和数字化技能的人才；二是数字化培训体系存在不足，培训后的人才难以直接将所学应用于实际业务场景。</p><p></p><p>不光针对外资银行，我相信大部分的商业银行也会遇到这样的情况：数字化人才在哪里？我们现在有没有这样的数字化培训体系，可以把数字化人才掌握的技能跟平台匹配起来？</p><p></p><p>为应对挑战，东亚中国后续在人才战略上规划了三项提升措施：</p><p></p><p>Upskill，让人才通过数字化专业人才认证体系能够有快速成长的区间；Future talent：持续输送新一代管理人才新鲜血液；Digital culture：从上到下的意识的转变，把工作技能和能力的应用场景做非常好的连接。</p><p></p><h2>搭建数字人才认证体系</h2><p></p><p>2021年，我们作为首个外资银行推动了数字化人才职业序列，涵盖数字化产品经理、数据分析、数据治理、数据工程四大序列，并明确了12个维度为一体的**数字化人才能力画像——**数字化认知、战略洞察、业务理解、决策判断、高效组织协同、变革领导力、产品思维、数据思维、创新驱动、系统思维、客户导向、专业能力。</p><p></p><p>2022年，我们推出数字化人才认证体系“数赢”。面向全行符合数字化岗位背景的员工，推出了 1+3 的认证培养体系。“1”是指一套认证的数字化人才培养机制，“3”是指三阶段资格认证。首先是初阶认证（掌握专业知识），接着是进阶认证（精通专业知识），成为可以推动数字化转型落地的高潜人群，最后是高阶认证，变成引领数字化转型和主导数字化实践的专家和管理双通道的高阶人才。</p><p></p><p>对于这些已经进入认证体系的数字化员工，我们会定制专业的培养计划，并在一些重点项目实施和人员的选拔中予以资源的倾斜。在整套数赢认证体系里，员工从纳入到逐渐进阶的晋升过程，高管团队都是非常重视地参与进来并辅导的。最终，通过整套的数字化人才培养体系，通过多维度的能力搭建，持续性、多形式、分层次地去培养，提升人员的数字化人才技能。</p><p></p><h4>数字化新生力量：培训生计划</h4><p></p><p>东亚中国是最早推出Digital Trainee项目（简称 DT）的外资银行，而且在商业银行的范畴里也算是领先的。DT 项目通过**“严”筛选、“精”培养，“持续”陪伴、“重”实践**为一体的复合型的人才培养机制，优化数字化专业背景的应届生，为东亚中国的数字化注入新的活力，最终让他们成为懂业务、懂数字、懂管理的新一代的青年领军人物。</p><p></p><p>2022年8月，东亚中国2022年的8月与前海人才管理局合作推出过“数赢”夏令营，当时进入夏令营的学生包括港澳的学生以及在大湾区的一些重点院校金融科技背景的学生。2022年9月，我们开启了Digital Trainee的招聘，当时最早进入夏令营的那一批同学中，部分人也领到了第一张 DT 入场券。</p><p></p><p>后续的 DT 培训生筛选过程，高管团队以及各个条线的主要负责人都有全程参与，最终的选拔率大概是 2.3% 左右。后来我们通过董事会授权，成立了一个数字化转型小组，也是由各个条线的主管负责人组成，全面督导数字化转型工作，以及 DT 培养管理体系。</p><p></p><p>2023年，最后招聘到的 DT 培训生就加入到东亚银行，开始了24个月的培训计划，我们希望是通过这个计划把这些学生培养成有金融技能，同时能够在我们的业务场景中发展为数字化力量，能把自己转化成生产力的数字化生力军。</p><p></p><h2>构建数字化全员文化</h2><p></p><p>为了能持续、多元化地构建数字化全员文化，过去一年我们做了多方面的努力，其实也处于一个学习、改进和调整的过程。</p><p></p><p>比如说去年我们最早推进的“科技赋能月”，推出了各系列课程和活动，同时我们有一个“融课堂”，把一些业务的知识形成10分钟左右的课程，让员工可以在碎片时间随时通过手机学习。而通过这些学习真正掌握技能的员工，在我们后台都是有记录的，这些跟他们之后的职业生涯发展，包括加薪都有一定的关联。</p><p></p><p>此外，我们也引入了集团的“Fintech 101”课程计划，鼓励同事去学习，真正打造学习型的企业。还有“数赢”杯赛是我们最大型的一个活动，我们在2022年举办了首场“数赢”数据分析大赛。</p><p></p><p>这里我想重点讲一下“数赢”杯赛，去年东亚全行举办的首届数赢数据分析大赛，历时5个月，吸引了来自全行32个组织，19个业务条线，以及900多人员工的关注和积极参与。</p><p></p><p>东亚中国目前的员工数大约3000人，而900多个员工中有超过一半的同事完成认证，同时也能看到面对数字化学习和运用，大家的热情是非常高的，最终有15个团队突围而出，这些团队本身都来自各个业务条线。</p><p></p><p>最后获奖的参赛作品，有些是关于风控的，有些是关于深度挖掘客户的，其实银行场景是完全可以把这些参考议题应用进来，于是我们就邀请他们把作品最终植入到东亚银行的业务发展中。</p><p></p><p>所以，数赢杯赛对东亚中国的影响是非常巨大的，而且会产生自上而下的影响。首先使得我们的中高层的理念和意识有很大的改变，他们看到数据确实可以推动业务决策，也就更加坚定了中高层投入数字化转型的决心。另外我们大赛的选题是紧贴业务的，员工他是在参与中发现，数据可以帮助业务有更深入的洞察，同时作为一个普通的同事，无论他来自哪个条线，他都可以积极参与。</p><p></p><p>第三，我们的大赛作品可以直接辅助业务的发展，在一线拓展客户、深挖客户价值方面都起到了非常作用。</p><p></p><p>第四，能够加强团队之间的合作，因为参赛队伍都是来自各个的不同的条线，各个分行，在这个过程中大家一起摸索，一起讨论，对于解决日常工作难题也起到了非常大的作用。</p><p></p><h2>数字化人才战略的展望</h2><p></p><p>我们希望，通过一系列数字化战略、规划以及有效的落实，能够不断推动东亚中国的数字化转型，稳步可持续地发展，2022 年 我们完成数字化人才体系的搭建，帮助超过 10% 的员工成为数字化人才。</p><p></p><p>未来我们会在全行持续推动数字化培养，希望数字化人才比例能在2025年达到30%，让东亚中国成为商业银行数字化转型的领军企业。</p><p></p><p>最后，东亚中国非常愿意在数字化转型上加大力度，推动数赢数字化人才的建设。我们希望通过把金融科技转化成生产力，让东亚中国能够在数字化的大时代背景下，对商业经济的发展尽最大的努力。</p><p></p><p>延展阅读：<a href=\"https://mp.weixin.qq.com/s/wuHISAf4Cb7qKxfsAWwXdA\">《传统管理秩序消失，数字化下的组织和人才如何重塑》</a>\"</p>",
    "publish_time": "2023-06-13 12:09:43",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "2023开放原子全球开源峰会高峰论坛成功举办",
    "url": "https://www.infoq.cn/article/d7f11ee60e428ff794f439501",
    "summary": "<p>6月11日，以“开源赋能，普惠未来”为主题的2023开放原子全球开源峰会高峰论坛在北京成功举办。工业和信息化部相关司局、北京市经济和信息化局、北京经济技术开发区管理委员会相关领导出席并致辞。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/7d/7db6e018ac0b6e69f85283d4a8b7b624.png\" /></p><p>北京市经济和信息化局副局长王磊在致辞中表示，北京市作为全球信息服务业规模最大，创新能力最强的软件之都，是全球开源资源最丰富、开源创新最活跃城市之一，约有全国半数以上的开源原生企业。下一步，北京市将以繁荣壮大开源生态为抓手，力争打造全球的开源高地，持续推动数字经济的高质量发展。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d1/d18bc5e2c64bfd3241eff0bc8a05de74.png\" /></p><p>北京经济技术开发区管理委员会副主任左仁贵在致辞中表示，开源倡导开放、平等、协作、共享，是全球软件技术创新的主导模式，是软件产业高质量发展的重要抓手。下一步，北京经开区将坚持以创新为驱动，打造高精尖产业主阵地，持续推进国际开源社区建设，做大做强做优软件产业，为北京市“五子联动”贡献亦庄力量。一是聚资源，推动开源事业创新发展。推动开放原子开源基金会“两中心、一基地、一研究院”项目落地，加快代码托管平台建设，汇聚全球开源创新资源。二是聚企业，建设开源开放国际开源社区。持续优化营商环境，营造开源开放文化氛围，以通明湖环湖区域为重点，合理规划空间布局，培育一批开源创新企业，形成开源企业集聚区。三是聚人气，打造开源人才高地。加快宜居宜研宜业的配套设施建设，服务好广大开源工作者。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f2/f2e173270467b4b78963266b93f6f0a2.png\" /></p><p>中国科学院院士王怀民作《群智范式：软件开发范式的新变革》主旨报告，他认为，开源已成为科技领域创新的重要模式，通过自组织的社区群体，鼓励人们以兴趣为导向进行软件创作，以群智激发的多样性推动创新，适应网络计算时代的不确定。应探索融合工程范式与开源范式的群智软件开发新范式，形成有为政府、有效市场和有机社会的强大合力，共同打造我国新型开源基础设施底座，探索学术共同体开源发展新模式，共同构建充满活力的开源创新生态。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a0/a03efac9bba5a29025e8a56582bdf96c.png\" /></p><p>中国开源软件推进联盟名誉主席陆首群在主旨报告中指出，开源的主要特征是创新、开放、共享、协同和自由传播，如今，人们愈加重视开源的溢出效应，开源创新已经成为数字化转型，智能化重构的基础，成为全球的一种创新和协同模型，成为创新国家建设的战略需求。开源的概念内涵正在向开源教育、开源文化、开源经济、开源治理、开源基础设施等方向扩充，中国开源发展开始进入世界先进行列。</p><p><img src=\"https://static001.geekbang.org/infoq/15/155cc1cb04a11084cff5216fb17f324a.png\" /></p><p>FOSSASIA创始人、IEEE开源委员会副主席、开源商业联盟董事会成员Hong Phuc Dang发表题为《Embracing Open Source: Pioneering Sustainable Solutions for a Thri-ving Future》的主题演讲。她表示，开源的原则与可持续发展的理念是一致的，不同背景的贡献者和专家可以通过开源解决复杂的问题。同时开源可以帮助我们利用全球社区的集体力量，运用可扩展的创新方法解决经济、社会和环境的问题。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ee/ee0e67ab3d73a4f7a726407215c86c43.png\" /></p><p>深圳开鸿数字产业发展有限公司CEO王成录发表题为《共筑OpenHarmony高地&nbsp;践行数字中国》的主题演讲，他表示数据是数字中国演进发展的关键，统一开放的安全数字底座是实现数据资源高效使用、开放共享的技术核心。基于OpenHarmony、开放领先的开鸿安全数字底座可以充分满足千行百业的建设要求，践行数字中国建设。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/06/062969d3ae656170f7efc355bd577ba0.png\" /></p><p>Linux 基金会执行董事、自由标准组织&nbsp;(FSG)主席Jim Zemlin发表题为《Open Source Driving Industry Innovation》的线上演讲。他表示，几乎所有的技术、产品或服务都基于开源软件开发而成。开源时代，全球可以朝着非零和博弈的方向发展，可以在竞争激烈的技术领域加快上市速度。希望能与数以千计的开源开发者一起创造优秀的科技，并将其应用于科技厂商的产品、服务，为大众服务。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/15/157240ecd8e714bc0b3c594f66e2b741.png\" /></p><p>LF AI&amp;Data基金会执行董事Ibrahim Haddad发表题为《Open Source is A Technology Market Accelerant》的线上演讲，他表示，开源能够获得来自多个组织的资源，将碎片化程度降到最低，并直接支持上游的开发模式。开源技术和项目可以降低技术的应用壁垒，获得更多的商业机会、更好的产品和服务、更快的开发速度和更低的成本。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5f/5fd12989d426c16fc4bebe879e5f279f.png\" /></p><p>超聚变数字技术有限公司算力服务领域副总裁姜振华在《超聚变与开源同行，共创数智化时代》主题演讲中表示，超聚变作为计算产业大家庭中一员，以提供领先的数字基础设施，让数字世界无限可能为愿景和使命。超聚变将继续参与到更多的开源项目中去，秉承共建、共享、共治的理念共建开源生态，并通过开源赋能普惠未来，为千行百业赋能提供强劲的动力，共创数智化的新时代。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/dd/dd136a1f3a1e25849648771c0dda3466.jpeg\" /></p><p>IBM全球标准、开源和开发者生态负责人，CNCF治理委员会董事Brad Topol博士发表题为《Measuring the innovation in the age of open source》的线上演讲。他表示，开源有助于推动产品革新、创造更佳服务，同时也加强了与客户和开源项目社区的联系。通过贡献代码和参与项目策略讨论，深度参与上游项目并确保稳定性，从而降低产品团队的工作量，降低代码维护成本。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b9/b9320c46ab2be44c26b7e9bbe049e768.jpeg\" /></p><p>蚂蚁技术研究院院长、图计算负责人陈文光发表题为《开源开放，助力数字化转型升级》的主题演讲。他表示，开源是蚂蚁的核心技术战略，也是面向数字化未来可持续创新的动力。蚂蚁TuGraph图计算平台开源工业级流式图计算引擎，将通过开放成熟的图计算技术，服务更广阔的数字化产业，向世界输出中国科技公司的前沿技术影响力。</p><p></p><p>在高峰论坛上，还发布了《2023北京软件和信息服务业发展报告》《开源漏洞信息共享项目》。</p><p></p><p>北京市经济和信息化局发布《2023北京软件和信息服务业发展报告》。报告指出，2022年，北京市加强产业谋篇布局，持续塑造高质量发展新动能新优势，产业发展稳步增长，互联网信息服务业贡献度持续提高，头部企业数量持续壮大，百亿企业收入规模占比超六成，企业综合实力和创新优势突出，外省市在京总部收入小幅下降，跨国企业收入实现正增长，专精特新企业快速增长，激发产业发展活力，各区产业特色鲜明，协同创新促进北京数字经济发展。未来，北京将继续加大各项政策举措的落地实施，共同推动北京软件信息服务业产业壮大，携手助力北京全球数字经济标杆城市建设。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a4/a4ef401460bcd171fec1e83f46f27699.png\" /></p><p>开放原子开源基金会发布《开源漏洞信息共享项目》。开源漏洞信息共享项目核心理念是“共享、协作、合规，守护开源安全”，通过协同感知、协同修复、协同披露的方式，应对开源软件漏洞带来的问题。该项目由开放原子开源基金会、阿里云、蚂蚁集团、百度、中国赛宝实验室、华为、中科院软件所、京东科技、奇安信、深信服、腾讯、清华大学、统信软件、浙江大学等单位共同发起。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/53/53230b7e8c2461780073f7e006bc9398.png\" /></p><p>此次高峰论坛汇聚了众多领先开源企业和社区的使用者和技术大咖，共同探讨最前沿的开源理论、技术与实践，以应对开源不断面临的变化和挑战。CSDN创始人&amp;董事长、极客帮创投创始合伙人蒋涛，原小米集团副总裁崔宝秋，LVS创始人、CCF会士、常务理事章文嵩，开放原子开源基金会副理事长、华为公司战略与产业发展副总裁肖然，开放原子开源基金会TOC副主席、龙蜥社区理事长马涛，PingCAP联合创始人兼CTO黄东旭等嘉宾在圆桌环节纷纷发表了各自观点，激荡思想火花。</p><p></p><p>2023开放原子全球开源峰会为期3天，设置了开幕式及高峰论坛、二十五场专题分论坛、开源大赛workshop、交流会等一系列活动，聚集政、产、学、研、用、创、投、金等各领域优势资源，以国际化视角和全球最新经验共识，助力开源生态的加速形成、落地开花。</p>",
    "publish_time": "2023-06-13 09:24:01",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "“DevOps 的阴暗面”：左移的代价和降低成本的方式",
    "url": "https://www.infoq.cn/article/Uhtx5rt3UR1flUoGtYvF",
    "summary": "<p>类似“我构建、我运行”，或“测试、安全、数据治理左移”等话题很是流行。将事务移动至软件开发的早期阶段，赋权于工程师，并将控制权转移是能带来确实好处的。</p><p>&nbsp;</p><p>但是，如此一来的代价是什么？这对参与其中的开发人员而言又意味着什么？</p><p>&nbsp;</p><p>从开发人员的角度看，优势很明显；可以获得更多权力、能在开发周期更早的阶段解决问题，还可以缩短反馈循环。然而开发人员的责任范畴也将超出代码，囊括安全、基础架构和其他“被左移”的东西。重要的是，随着这些领域中最佳实践的不断发展，维护的成本和需求也会变得很高。</p><p>&nbsp;</p><p>有什么方案能让我们在维持 DevOps 的同时左移呢？我们又要如何打破阴暗面的束缚？让我们快来看看吧！</p><p>&nbsp;</p><p></p><h2>左移现象对开发者的影响</h2><p></p><p>&nbsp;</p><p>将部分软件开发生命周期活动向左移动，意味着将其移至软件开发流程的早期阶段，从而赋能开发者。据《<a href=\"https://cloud.google.com/blog/products/devops-sre/announcing-dora-2021-accelerate-state-of-devops-report\">DevOps 现状报告</a>\"》称，具有最佳 DevOps 实践的公司可降低超50%的变更失败率，代价是其部署频率更高（从最高的每天部署多次，到最低的六月才部署一次变更）。</p><p>&nbsp;</p><p>原因很明显，开发人员在表现最佳的公司中不必忍受漫长的反馈周期。举例来说，将测试从“部署发布”环节挪到“开发构建”环节，就意味着开发人员能更早地发现问题，而不用在几天乃至几周后才等到 QA 验证变更。如果将测试再左移一步至“计划设计”阶段，那么开发人员将不必再花费实践构建存在设计缺陷的代码。</p><p>&nbsp;</p><p>然而，这并不是万金油。左移也意味着开发人员必须学习测试方法、工具（如 TDD、JUnit、Spock，以及 GitHub Actions 等构建编排工具）。</p><p>&nbsp;</p><p>此外，左移的不仅仅是测试，安全、数据治理等更多东西也都在向左移动，而所有这些都将增加开发人员的认知负担。开发人员必须学会这些工具、采用最佳实践，并随着最佳实践的变化，在最新的基础设施上维护代码。</p><p>&nbsp;</p><p></p><h2>责任的增长</h2><p></p><p>&nbsp;</p><p>从一方面来说，没人指手画脚的感觉很棒，开发人员不用再等别人批准，可以更快地迭代编写更好的代码，更短的反馈周期也让错误发现和修复更加轻松。</p><p>&nbsp;</p><p>但另一方面，这些增长的认知符合是可量化的，开发人员需要花费更多的时间和精力学习所有的工具和技术。有些人开发者不希望如此，他们只想专注于编写自己的代码，并解决业务问题。</p><p>&nbsp;</p><p>举例来说，有的开发人员可能会很高兴尝试部署工具，并能够将部署管道从 Jenkins 迁移到 Spinnaker，从而获取原生、开箱即用的金丝雀支持。但其他开发人员可能就不太喜欢摆弄这些工具，尤其是在自己已经手忙脚乱的时候。</p><p>&nbsp;</p><p></p><h2>迈向 DevOps 的步伐：临时采用的 DevOps</h2><p></p><p>&nbsp;</p><p>这些额外的责任不是毫无代价的，实际的成本取决于公司规模和其计算基础设施的复杂度。对于规模较小的公司，工作的人少，负责的组件或服务也不多，认知负荷并不高。毕竟大家都知道彼此在干什么，上下文交接花不了多少功夫。这种情境下，将部分 SDLC 工作左移可以消除人为障碍并赋予开发人员更多权力，从而带来立竿见影的好处。</p><p>&nbsp;</p><p>即使是 Netflix 这类大型公司，也有手动管理解决方案的空间。举例来说，如果某个应用在接收生产流量前有需要预热的缓存，那么负责该应用程序的团队就可以创建一个手动管理的部署流水线，以确保在观测自定义的预热期间后，才允许程序接受流量，这样一来，重新部署也不会导致性能下降。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/40/403d0b0662eb79e79297b82c6fa698a1.jpeg\" /></p><p></p><p></p><h2>步入 DevOps 正轨：铺好的路</h2><p></p><p>&nbsp;</p><p>然而，IT 基础设施的复杂性也会随着公司的发展而增加，维护数十个相互关联的服务不再轻松，甚至有时想找到服务各自的负责人也困难起来。此时，公司将会面临一个抉择：是要重新引入会对生产力造成负面影响的看门狗实践，还是找到一条铺好的路（paved path），一条通过预定义解决方案编码最佳实践，消除心理负担，让开发人员能够集中精力解决业务问题的大路。</p><p>&nbsp;</p><p>这条路的铺设和维护都需要投资；必须要有人能识别出痛点、组织调动开发人员能用于与路交互的工具，编写文档、投资开发人员培训教育。也必须要有人能观测离群点，如果这条铺好的路解决方案没能让程序性能更好，是否需要借鉴目前正在进行的实践，并将其纳入这条路中。</p><p>&nbsp;</p><p>对铺路的投资是为减轻开发人员的认知负荷。让开发人员能不再操心所有被左移的东西，并专心提供价值，解决核心业务问题。例如，依靠 CLI 工具（如 Netflix 的 newt）或内部开发者门户网站（如 Spotify 的 Backstage），一键启动所需的所有基础架构，而不再需要手动设置 GitHub 仓库、CI/CD 流水线、AWS 安全群组和扩展策略等云资源，上述这些都可以且应该是开箱即用的。</p><p>&nbsp;</p><p>此外，如果能有专家负责迁移过程，开发人员就不必处理迁移多引发的认知负担。比如，流媒体后端服务 Netflix 必须更新才能适配 AWS 示例元数据 API 从而提高安全性，那这种情境下，已铺好的路便会随之对开发人员透明地进行变更。将 AWS 设置封装为代码，可在不新增认知负担或中断的情况下，利用铺好的路推出对服务的变更。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/78/7872aea8327874afe579d45dfc833155.jpeg\" /></p><p></p><h2>&nbsp;</h2><p></p><p></p><h2>步入 DevOps 正轨：铺路的排列组合</h2><p></p><p>&nbsp;</p><p>最后，仅仅一条铺好的路是无法覆盖所有随公司发展而不断开发的服务、组件的最佳实践，只有创建并维护多条铺路，并确定这些道路之间的共同点并加以复用，这些都是需要额外的投资。</p><p>&nbsp;</p><p>举例来说，Netflix 流媒体服务需要服务于数百万用户，其对延迟和可用性的要求与 Netflix 员工内部使用的工具是完全不同的。这两类用例都有其各自的最佳实践，金丝雀发布和红黑发布有益于流媒体应用，但这对内部工具而言没有多大意义，后者的流量水平可能无法提供金丝雀发布所需的可靠信号。另一方面，这两类用例也可能拥有持续测试、集成等共同点，因此，将这两类场景作为单独的构件并复用于不同铺路而言是合理的。</p><p>&nbsp;</p><p></p><h2>你的 DevOps 之旅的下一步</h2><p></p><p>&nbsp;</p><p>第一步是确定左移带来的实际问题。对小型跨职能团队而言，最困难的地方可能是需要确定到底左移什么。如果团队正困扰于部署的失败率，那么团队或许应当投资于测试和 CI/CD 管道。</p><p>&nbsp;</p><p>即使是没能立刻找到正确的解决方案，在解决方案之间迁移并不需要太多的时间和精力。最坏的情况也只是在错误的痛点选择了错误的问题去解决。然而，如果能找到正确的杠杆点，那么即使是不完美的解决方案也能带来一定改善。举例来说，如果基于 Jenkins 的 CI 管道难以管理，那么迁移至 GitHub Actions 或许会不错，但如果要应对的服务数量不多，那么这种迁移将得不偿失。</p><p>&nbsp;</p><p>实际的开发者体验将在这里扮演关键的角色；听取开发人员意见、观察开发工作，并以此找出实际存在的问题是至关重要的。</p><p>&nbsp;</p><p>没有这些思考的左移将是无脑的跟风，而非解决自身实际存在的问题。作者也见过有些试图模仿大公司中流行实践的决定，或许有的时候这会是正确选择，但通常情况下，人们所面对问题并不相同。对其他公司而言是反模式的方案或许才是你最合适的选择。如果你的问题非常简单，那么能用单体架构解决的问题是无需投资于微服务编排的（虽然单体架构通常来说是真正的反模式）。</p><p>&nbsp;</p><p>另一个需要考虑的问题是构建还是购买，多数公司都患有“自食其力”综合征，宁愿自己开发解决方案也不愿意选择第三方工具。但从另一方面来说，这些三方工具也是需要彼此集成，并集成至已有的内部工具，才能提供无缝的开发者体验。从作者个人角度来看，如果问题是公司独有，或与公司核心业务紧密相关，那么投资于定制解决方案或许是值得的。</p><p>&nbsp;</p><p>最后，为了确保自己没有偏离航道，我们应跟踪部署频率（部署至生产的频率，每月，每周，还是每天？）变更失败率（部署失败频率）等指标，以及启动服务和重新配置服务（或服务群）所需的时间指标。</p><p>&nbsp;</p><p>综合这些指标，我们能对高质量代码交付能力和开发人员的非编程时间做出预估，希望这些能帮你在 DevOps 之旅中迈出下一步。</p><p>&nbsp;</p><p></p><h5>原文链接：</h5><p></p><p></p><p><a href=\"https://www.infoq.com/articles/devops-shifting-left/\">https://www.infoq.com/articles/devops-shifting-left/</a>\"</p><p></p><p></p><h5>相关阅读：</h5><p></p><p></p><p><a href=\"\">DevOps&nbsp;的道术法器，探寻&nbsp;DevOps“立体化”实践之旅</a>\"</p><p><a href=\"\">从&nbsp;DevOps&nbsp;到平台工程：软件开发的新范式</a>\"</p><p><a href=\"\">DevOps&nbsp;与平台工程：企业该如何选择？</a>\"</p><p><a href=\"\">DevOps&nbsp;与 FinOps：二者可以协同吗？</a>\"</p>",
    "publish_time": "2023-06-13 13:08:04",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "现代移动开发哪家强：原生还是跨平台？JetBrains专家：我选Flutter",
    "url": "https://www.infoq.cn/article/fFHzoF6KI186dvxYUMvO",
    "summary": "<p>&nbsp;</p><p></p><blockquote>本文整理自QCon Plus演讲，Sebastiano Poggi&nbsp;是JetBrains&nbsp;的开发专家，这次演讲他主要讨论了在原生和跨平台移动开发之间进行选择所需的技术知识和工具。</blockquote><p></p><p>&nbsp;</p><p></p><h2>原生还是跨平台？</h2><p></p><p></p><p>是时候抛开一切纷纷扰扰，专心聊聊原生和跨平台这个老大难选题了。从某种意义上讲，原生永远有自己的比较优势，其性能永远是任何跨平台框架都望尘莫及的。原生应用也能更好地跟操作系统、第三方库相集成，拥有更庞大且技术支持更给力的社区生态。另外，人家“原生”二字可不是白讲的，能够更好地访问操作系统上的API和功能，支持tvOS乃至各种可穿戴设备。如果大家更关注这些需求，那原生开发就是最正确的答案。另外，原生开发工具也在不断改进，甚至Xcode如今也变得不那么恼人了。当然，原生开发也有自己的问题，否则跨平台框架根本就不会出现。</p><p>&nbsp;</p><p>原生的头号难题，就是成本更高，企业需要为每种操作系统筹建专门的开发团队，具体考虑基础设施和流程中的注意事项。例如，我们可能需要为Android和iOS设置不同的持续集成（CI）流程。当然，这种情况在跨平台开发那头也存在，毕竟两种平台间的工具存在很大差异。此外，在把应用程序部署和发布到苹果App Store或者Google Play Store，乃至Android平台上千奇百怪的软件商店时，都有相应的规章制度需要遵守。他们各有不同的发布标准、周期和要求，必须早做打算。</p><p>&nbsp;</p><p>结合实际情况，跨平台可能才是大多数开发者最务实的选项。毕竟跨平台框架的效果基本够用，有时候甚至不比原生移动平台差。而且经过多年发展，跨平台框架也迎来了巨大改进，比如说Flutter和React Native都开始支持热重载，这样大家就能像在Web上那样测试各种变更，无需将应用程序重新部署到设备或虚拟机上。但在选择跨平台时，我强烈建议大家先选择一种强大的设计语言，要明确跟Android和iOS区分开来。因为一旦你的设计太偏向于其中一种，那就会跟另外一种显得格格不入。另外，如果不用原生控件，大家会很难模仿平台上的原生观感和体验。总之，软件开发就是这样一道80%都较简单，但最后20%完善部分异常困难的大题。感兴趣的朋友不妨试试Duolingo——这虽然是一款原生应用，但却能给跨平台开发者们好好上一节设计语言课。</p><p>&nbsp;</p><p></p><h2>以可穿戴设备为例，来一场虚构案例的头脑风暴</h2><p></p><p></p><p>假定有这么一家可穿戴设备厂商，他们想要搞一款配套应用。比如说智能手表吧，他们希望在这款设备上进行通信、数据下载、显示历史趋势。没错，这肯定是需要应用来实现的，用户不可能总跑去浏览网页。下面问题就来了：我们需要的是原生应用吗？其中是否大量访问操作系统API？毕竟这就是原生代码的优势所在。而答案是肯定的，智能设备需要在后台执行大量操作，所以肯定会经常访问操作系统API。跨平台框架虽然能在蓝牙等少部分匹配机制上表现良好，但要对应用的所有功能有更好的把控力，原生恐怕才是正确答案。所以可穿戴设备这类场景的判断就很简单，原生是要好过跨平台开发的。</p><p>&nbsp;</p><p></p><h2>框架选择：React Native、Xamarin还是Flutter</h2><p></p><p></p><p>我们总在讨论原生和跨平台，但这里所说的“跨平台”到底对应哪种框架？目前的三大主流选项分别是React Native、Xamarin和Flutter，当然还有基于Web的框架，比如Cordova、Ionic和PhoneGap等。这里还有Kotlin值得一提，这是由JetBains设计并与其他公司合作开发的语言。但至少在基于Web的跨平台开发方面，我会尽量避免使用后面这几种选项，毕竟它们往往过于陈旧且性能不佳。其中比较特殊的是Kotlin多平台，它跟React Native、Xamarin 和 Flutter 有很大不同，相对更侧重共享业务逻辑而非UI设计。所以在本文的讨论中，我们就专注于React Native、Xamarin 和 Flutter这三位。</p><p>&nbsp;</p><p></p><h3>React Native</h3><p></p><p>&nbsp;</p><p>React Native是Facebook开发的一项技术，并以同样来自Facebook的ReactJS为基础。这样做的好处是，如果您的企业中已经拥有经验丰富的ReactJS开发团队，那完全可以向Web团队分享一些技能甚至是代码。React Native还对桌面、可穿戴设备和智能电视等拥有实验性的第三方支持。但大家千万别因为关注这些元素而贸然选择React Native，因为这方面功能还远称不上成熟。React Native本身倒是既强大又完善，完全可以用来开发B2C应用。实际上，市面上已经有很多大型React Native应用可供选择。虽然在性能方面仍在局限，但React Native最近几年来一直在探索和改进。不过如果各位开发的应用里有大量动画元素，那建议先别考虑React Native。另外要注意的是，如果想要自定义UI组件，就得为不同的平台分别创建实现，这个过程相当枯燥。可好处是React Native确实能让UI充满了“原生范”，毕竟它确实用了不少原生的资产。最后说点坏消息，近年来不少知名应用都放弃了React Native，其中的典型案例当数Airbnb。但这跟我们自己的开发需求可能并无关系，结合自身实际才有指导意义。</p><p>&nbsp;</p><p></p><h3>Xamarin</h3><p></p><p>&nbsp;</p><p>Xamarin走的完全是另一个路子。它是由微软开发的工具，之前曾经收费，现在已经免费开放且开源。如果贵公司在C#资产上投入了很多，而且也用过ASP.NET和C#，那Xamarin将助您建立起从后端到前端的完整.NET栈。从某种意义上讲，Xamarin的UI实现方法相当独特。大家可以使用Xamarin.Forms探索多平台，也可以像React Native那样采取原生视图（但后者其实用得不多）。总之，Xamarin跟React Native和Flutter的脾性正相反，强调贴近源操作系统API。也就是说，开发者必须也了解操作系统，才能玩转Xamarin，毕竟后者的作用就是自动打包来自Native SDK的现有API并在C#中公开。Xamarin的第三方支持有限，可用的原生Xamarin库不多。就个人来看，Xamarin可能更适合那些内部应用，或者相对复杂度不高的应用程序。它更多面向企业，在开发B2C应用时最好别用。</p><p>&nbsp;</p><p></p><h3>Flutter</h3><p></p><p>&nbsp;</p><p>自谷歌的Flutter这套框架的人气正在迅速上涨。谷歌对Flutter投入了大量营销和宣传，框架本身的水平也绝不拉胯。首先，Flutter拥有众多高质量的第一方和第二方集成，使用Dart语言并配合Pub生态作为依赖项。从技术上讲，我们几乎可以使用Flutter满足一切开发需求——面向移动端、面向桌面端，还能支持macOS、Windows和Linux，甚至是Web和嵌入式物联网。简单来讲，任何能够运行Android APK的地方都能运行Flutter应用。据我所知，它目前尚不支持的就只有WatchOS和tvOS了。但如果真有需要，我也认识能帮大家解决问题的人。如果您的开发团队熟悉Dart，也可以直接用它做UI。这就是Flutter，因为出自谷歌之手，所以毫不掩饰地向Android开发者群体疯狂示好。</p><p>&nbsp;</p><p>下面咱们通过几组统计数字，看看跨平台开发目前的市场规模。纵观Google Play Store和苹果App Store上采用跨平台框架的应用，可以看到Cordova在iOS上占比17%，在Android端则占比20%。React Native位列第二，双平台份额均稍逊5%。Flutter则紧随其后，而且继续表现出强烈的亲Android倾向。Ionic和Xamarin完全无法跟前三甲相匹敌，接下来还有已经过时淘汰的Titanium/Appcelerator框架等。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/31/31f50a5b6e723fe4a4102b747b2635bc.png\" /></p><p></p><p>&nbsp;这些数字也有没讲出来的“小秘密”，比如实际使用跨平台框架的开发者占比只有三分之一。就是说如果选择跨平台开发，就相当于放弃掉了市场上三分之二的候选人才。另外，中长期历史趋势显示，Web开发框架统计中React Native和Xamarin也赫然在列。过去三年来，使用跨平台开发技术的人数正在下降，其中React Native相对保持稳定，其他框架则情势危急。另一方面，Flutter则保持上升势头，有42%的移动应用都在使用。最后，Kotlin多平台开发也走势良好。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/29/292b841bc3cbd25279d31caf99b44cf4.png\" /></p><p></p><p></p><h2>虚构案例研究II：金融科技业务</h2><p></p><p></p><p>我们假定有一家金融科技公司，这样的企业需要业务应用吗？那是肯定的，毕竟竞争对手都有自己的应用，所以咱也不能缺项。那需要是原生应用吗？我们还是用之前提到过的标准来判断，比如是否需要大量使用操作系统API？答案是并不需要。虽然这类应用会频繁用到通知功能，但这个问题已经有成熟解决方案，不需要额外费心。那用户要用这款应用来干什么？假定用途是查看股票价格，随时查询并收取通知，那这些确实都用不着劳原生开发的大驾。选择了跨平台之后，接下来是选择哪种框架的问题。首先，假定这家公司没有ReactJS团队，比如他们之前用的是Angular，内部也没有经验丰富的.NET人才，那么React Native和Xamarin就都被排除掉了。他们大量使用Firebase服务，而且需要多种自定义用户界面，包括美观的图形和精致的动画，那么综合来看最理想的选项就是Flutter。</p><p>&nbsp;</p><p></p><h2>移动端测试</h2><p></p><p>&nbsp;</p><p>最后，就是在移动设备上做测试。注意，移动设备上的单元测试同样有成熟方案，真正的问题出在UI测试方面。Flutter提供的UI测试可谓冠绝群伦，相比之下原生开发和React Native使用的还是各平台自己的工具。Xamarin也差不多，但我印象中它用的是针对各平台开发的自定义工具。</p><p>&nbsp;</p><p>在持续集成（CI）中运行UI测试时，往往需要运行缓慢的上机测试——可能是物理实机，也可能是模拟机。有些云服务商虽然提供UI测试设备，但设置和维护起来非常复杂、使用成本也相当昂贵。经典的解决方案就是做更多的单元测试，这一点在Android端特别重要。以Robolectric为例，它就能帮我们将集成测试作为单元测试来运行。面向移动项目的专有持续集成解决方案也不少见，比如Bitrise等。</p><p>&nbsp;</p><p></p><h2>决策审查</h2><p></p><p></p><p>做出了开发决策，那么在着手开发应用的同时，我们也该看看自己选得对不对、当前有哪些实际困难。毕竟很多错误不会立刻就显现出危害。比如说，某些厂商在几年之后放弃了React Native，类似的情况最终也可能出现在Flutter当中。总之，请随时关注事态发展。问题发展得越早，我们的沉没成本也就越低。</p><p>&nbsp;</p><p>&nbsp;</p><p></p><h2>总结</h2><p></p><p></p><p>第一，考虑移动开发到底有没有必要。记得用数据来回答问题，别靠想象。</p><p>第二，确保企业有能力做移动开发，然后厘清组织结构和团队职责。</p><p>第三，在做出决策之前评估权衡要素，意识到不存在百试百灵的最优选项，充分理解自身实际。</p><p>第四，做出正确选择并努力推进。</p><p>&nbsp;</p><p></p><h2>互动问答</h2><p></p><p></p><p>主持人：您讨论了好几种行之有效的实现方式。根据个人经验，您在绝大多数情况下会选择哪一种？</p><p>&nbsp;</p><p>Poggi：我自己就是搞原生开发出身的，所以在这个问题上有明显的倾向性。但如果说必须要搞跨平台开发，那我可能更愿意选择Flutter，因为我有一点这方面的经验。虽然我不太熟悉Dart，但它跟Java其实挺像的、也不难理解。作为次优选项，我可能会选择React Native。但先要承认，我对JavaScript一无所知，所以这么选对不对我也不敢说。总之，只要掌握了声明式、响应式UI框架的工作原理，那不同的框架往往只对应不同的语义和语言特性，在本质上还是相通的。</p><p>&nbsp;</p><p>主持人：所言极是，大家在实际选择时恐怕还是会以自己熟悉的语言为导向。</p><p>&nbsp;</p><p></p><h5>参考链接：</h5><p></p><p></p><p><a href=\"https://www.infoq.com/presentations/tools-native-cross-platform/\">https://www.infoq.com/presentations/tools-native-cross-platform/</a>\"</p><p></p><p></p><h5>相关阅读：</h5><p></p><p></p><p><a href=\"\">Google 路线图：Flutter&nbsp;与 JavaScript、Wasm 集成</a>\"</p><p><a href=\"\">为什么说&nbsp;Flutter&nbsp;无法成为移动应用开发的“顶流明星”</a>\"</p><p><a href=\"\">Flutter&nbsp;和小程序容器技术的应用前景与发展潜力</a>\"</p><p><a href=\"\">移动应用架构与 React Native、Flutter&nbsp;的关联</a>\"</p>",
    "publish_time": "2023-06-13 13:09:15",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "知道员工所有秘密，Meta版AI聊天机器人来了：使用公司内部数据训练，能写代码、调试，还能总结会议",
    "url": "https://www.infoq.cn/article/j32bh1HTyBCqVTZJBpMi",
    "summary": "<p></p><blockquote>千呼万唤始出来！</blockquote><p></p><p></p><p><a href=\"https://www.infoq.cn/article/iLFhrxI8yG2Y2P7MiqfL\">Meta</a>\" 在 AI 领域一直有着深厚积淀，但在产品化方面却一直动作迟缓，似乎总是“慢人一步”。随着 <a href=\"https://www.infoq.cn/article/yEH16RlsRgsqK3xHHmU5\">ChatGPT</a>\" 这类聊天机器人爆火，Meta 终于不再一门心思扑在<a href=\"https://www.infoq.cn/article/Dral8zKOSgxCZX8YUzOs\">元宇宙</a>\"上，而是开始将重心转向生成式AI技术。</p><p></p><p>今年2月27日，Meta首席执行官马克·扎克伯格在社交媒体上宣布，该公司一个“顶级团队”正致力于构建由生成式AI驱动的工具，最终可能包括旨在以“各种方式”帮助人们的“人工智能角色”，以及跨越该公司应用程序和服务的新的人工智能工具。</p><p></p><p>如今，这款生成式AI产品终于揭开了神秘的面纱。</p><p></p><h2>Meta将推出Metamate AI聊天机器人</h2><p></p><p></p><p>6月12 日，据The Verge报道，Meta 构建了一个名为 Metamate 的内部 AI 聊天机器人，它由该公司的内部数据训练而成，能够为员工提供广泛的指导和帮助，进而彻底改变整个办公环境。</p><p></p><p>具体而言，Metamate AI聊天机器人能够总结会议内容、编写代码并协助进行开发调试。凭借广泛的训练和强大的功能，这款聊天机器人将极大改变员工的工作方式，并提高组织内各个部门的生产力水平。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e9/e99592fbb80d8f0e59cce9b638e1bdce.png\" /></p><p></p><p>Metamate&nbsp;AI聊天机器人作为一项开创性成果，正彻底改变整个办公环境。这款前沿聊天机器人由先进AI提供支持，并配合Meta内部数据接受了精心训练。Metamate 的推出，也标志着目前席卷全球的AI狂潮迎来新的重要里程碑。</p><p></p><p>目前，Meta Platforms已经将聊天机器人交付给公司内一组指定员工，由此看来这项成果已经处于测试和开发的收尾阶段，但尚未全面发布。</p><p></p><p>据报道，Meta曾与微软和OpenAI进行过广泛讨论，考虑借用对方的底层AI。但最终，Meta还是决定采取内部原研的基础模型来实现聊天机器人的各项功能。</p><p></p><p>今年早些时候，Meta公司CEO扎克伯格表示有意成立专门的产品团队，专注于研究生成式AI。他表示在不久的将来，Meta公司的主要优先事项将是开发那些有助于创造力和自我表达的新型工具。</p><p></p><h2>Meta计划全面加码AI</h2><p></p><p></p><p>Meta一直处于AI研究前沿，但在将这些技术应用到其产品上却有些缓慢。随着各类生成式AI应用爆火，Meta的重心也开始向其偏移。</p><p></p><p>今年2月，Mate宣布成立一个新的团队来研发生成式AI技术。</p><p></p><p>4月，Meta首席技术官安德鲁·博斯沃思表示，扎克伯格现在把大部分的时间都用在AI上，他还表示，马斯克等人呼吁暂停AI研发的建议是“不切实际的”。“我们已经在人工智能领域投资了十年以上，并拥有世界领先的研究机构。”博斯沃思在接受采访时透露，“我们拥有一个庞大的研究组织，有数百名员工。”</p><p></p><p>6月8日，扎克伯格在全体员工大会上透露，Meta计划将生成式AI整合到Meta每一款产品（Facebook、WhatsApp、Instagram）中，其目标是在WhatsApp和Messenger中引入AI支持的聊天体验，同时为Facebook和Instagram提供视觉创造工具。也就是说，AI功能将遍布 Meta 的三大顶级应用程序。</p><p></p><p>此外，据报道，Meta正在为Instagram开发生成式人工智能照片编辑功能，该功能将允许用户使用文本提示修改他们的图片，然后与他们的关注者分享编辑后的图片。有消息称 Instagram 正在开发具有 30 种不同性格的 AI 聊天机器人，该机器人可以回答问题、提供帮助或协助用户撰写消息，预计该功能也将很快上线。</p><p></p><p>值得注意的是，微软和 Snap 等其他顶级巨头都已经在其产品中引入了 AI 功能。Snap 在 Snapchat 上拥有自己的 My AI 聊天机器人；Adobe 前段时间推出了 AI 图像生成器；Salesforce 推出了一些将AI 融入其核心业务的功能。在这一背景下，Meta此次宣布在产品中全面加码AI也是意料之中。</p><p></p><p>扎克伯克表示：过去一年在生成式AI方面，我们看到了一些真正令人难以置信、质量上有所突破的进步，这给我们提供了机会，现在可以把这项技术推向前进，并将其构建到我们的每一个产品当中。</p><p></p><p>扎克伯克也感受到了AI增强视频和多模态体验的潜力。扎克伯格强调了AI智能体对于业务消息收发和客户支持的重要意义，同时展望了该技术在Meta开发元宇宙过程中的作用。总体而言，Meta设想其应用程序未来将逐步集成AI智能体，为数十亿用户提供更具价值和实用性的丰富功能。</p><p></p><p>虽然在产品中全面加码AI，但Meta并没有放弃元宇宙。扎克伯格强调，此举是该公司对元宇宙工作的扩展，而非替代。</p><p></p><p>参考链接：</p><p></p><p><a href=\"https://www.theverge.com/2023/6/11/23757096/meta-is-giving-its-employees-access-to-an-ai-chatbot-that-is-trained-on-internal-data\">https://www.theverge.com/2023/6/11/23757096/meta-is-giving-its-employees-access-to-an-ai-chatbot-that-is-trained-on-internal-data</a>\"</p><p><a href=\"https://techstory.in/meta-to-launch-metamate-ai-chatbot-for-enhanced-workplace-efficiency/\">https://techstory.in/meta-to-launch-metamate-ai-chatbot-for-enhanced-workplace-efficiency/</a>\"</p>",
    "publish_time": "2023-06-13 14:23:47",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]