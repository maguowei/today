[
  {
    "title": "生成式AI站上风口：硅谷押注，未来科技巨头将洗牌？",
    "url": "https://www.infoq.cn/article/k1EU1cHr1FflCxRuATtv",
    "summary": "<p></p><blockquote><a href=\"https://www.infoq.cn/article/V24vD7kvHyuT3byVVObJ\">生成式 AI </a>\"越来越火，这真的是门好生意吗？</blockquote><p></p><p></p><p>最近一段时间，AI 绘画实火。</p><p></p><p>输入一些单词，AI 就能在几秒钟内生成一张与单词相符的图像，这些图像天马行空，有些甚至十分离奇，比如：人的手上有多余的手指，手指的弯曲很不自然。甚至，AI 还能生成一些没有意义的告示牌，以及人类未曾见过的字母表。</p><p></p><p>虽然 AI 画得十分离谱，但却掀起了一股科技浪潮：生成式 AI 的春天来了。</p><p></p><p>NextView Ventures 的风险投资家 David Beisel 表示，在过去的三个月里，“生成式 AI”这个词一度变成了热门词汇。并且，生成式 AI 技术发展迅速，市场热情高涨，以至于很多人甚至辞掉工作，专门在该领域创业。</p><p></p><p>毫无疑问，在过去五年左右的时间里，AI 一直处于繁荣发展阶段，但过去的这些进步大都与理解现有数据有关——比如，AI 模型已经能够快速、高效地识别你的手机照片里是否只有猫。但是，生成式 AI 模型生成的是以前从未有过的全新事物，换句话说，生成式 AI 不仅仅是分析现有数据，而是创造。</p><p></p><p>Craiyon 生成式 AI 的创始人 Boris Dayma 认为，“生成式 AI 不仅仅是在创造旧图像，还创造了很多新事物，这些与我们以前看到过的完全不同。”</p><p></p><p>红杉资本也在其网站上的一篇博文中表示：“生成式 AI 具备创造数万亿美元经济价值的潜力。”红杉资本预测，从游戏到广告业，再到法律界，生成式 AI 可能会改变所有需要人类创造原创作品的行业。值得一提的是，红杉资本还在博文中指出，这条消息部分是由 <a href=\"https://www.infoq.cn/article/Z46h9vTIL3dBx5Z3hAjO\">GPT-3</a>\" 撰写的（GPT-3 是一种能够生成文本的生成式 AI）。</p><p></p><h2>生成式 AI 的工作原理</h2><p></p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/09/d9/09171cf99a91a5a89b2b3903e0edd8d9.jpeg\" /></p><p></p><p>在过去，大家广泛使用深度学习技术，让模型能够在大型数据集上训练，当程序理解这些数据中的关系时，该模型便可应用在实际场景中，如识别一张图片中是否有条狗，或翻译文本，等等。</p><p></p><p>而图像生成器的工作原理是将这一过程反过来进行。举个例子，它不是将英语翻译成法语，而是将英语短语翻译成图像。具体来说，它通常有两个主要部分，一个是处理初始短语，另一个是将数据转换成图像。</p><p></p><p>起初，<a href=\"https://www.infoq.cn/article/3Vg9e68TbQa6a52t5S9g\">生成式 AI </a>\"基于一种叫做 <a href=\"https://www.infoq.cn/article/2W5eW5I3G*vkGc5ElqgY\">GAN</a>\" 的方法，即生成式对抗网络（generative adversarial network）。本质上，这种方法是通过让两个人工智能模型相互竞争，以更好地创建符合目标的图像。</p><p></p><p>目前，生成式 AI 通常基于 <a href=\"https://www.infoq.cn/article/ZG3J9h*cW7mJAK0NXwos\">Transformer</a>\"，比如图像生成器 DALL-E 等等。DALL-E 最早由 OpenAI 在 2021 年打造，2022 年，OpenAI 又发布了 DALL-E 2。</p><p></p><p>专注于生成式 AI 的开发人员 Christian Cantrell 表示：“有了 DALL-E 2，我们真的可以跨越恐怖谷了。”（恐怖谷理论是一个关于人类对机器人和非人类物体的感觉的假设，它在 1970 年由日本机器人专家森昌弘提出。）</p><p></p><p>另一个常用的基于 AI 的图像生成器是 Craiyon（此前曾被称为 DALL-E Mini），用户可以在浏览器中输入短语，并在几分钟内看到它生成的插图。</p><p></p><p>据 Dayma 称，自 2021 年 7 月推出以来，Craiyon 每天生成约 1000 万张前所未有的图片，加起来有 10 亿张。在今年早些时候，Craiyon 的使用量飙升，Dayma 也将 Crayon 作为自己的全职工作。此外，Dayma还创建了一个推特账户，专门发布 Craiyon 生成的最怪异、最有创意的图片，例如，意大利水槽上的水龙头流出来的是番茄酱。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/4c/49/4c739c26663dcc2e01d9f84d7ebbe949.jpeg\" /></p><p></p><p>此外，Stable Diffusion 也同样受到了广泛关注，该项目发布于今年 8 月，并已在 GitHub 上开源，开发者可以在电脑上运行该项目，而不仅仅是在云端或者通过编程接口来运行。例如，Stable Diffusion 可以通过插件方式集成到 Adobe Photoshop 中，允许用户生成背景和图像的其他部分，并在应用程序中使用图层和其他 Photoshop 工具进行操作。</p><p></p><p>该插件的开发者 Cantrell 说：“我想见见这些创意专业人士，想让他们能够将人工智能引入自己的创意工作中，而不是破坏他们的工作。”</p><p></p><p>据了解，Cantrell 曾在 Adobe 公司工作长达 20 年。2022 年离职后，Cantrell 专注于生成式 AI 方向。Cantrell 表示，Stable Diffusion 已被下载数万次，艺术家们告诉他，他们将这个插件用在了很多他意想不到的地方，比如制作哥斯拉（Godzilla）的动画，或者创作蜘蛛侠的图片。</p><p></p><h2>创业公司扎堆</h2><p></p><p></p><p>一些投资者将生成式 AI 视为一种潜在的变革性转变，就像智能手机或互联网的早期发展一样。这类转变极大地扩大了该技术的潜在市场。</p><p></p><p>“在此之前，人工智能并不是没有出现过。在 2007 年之前，我们也不是没有移动设备，”种子投资者 Beisel 表示，“但就在这一刻，一切都汇聚到了一起。最终消费者可以体验、看到与以前不同的东西。”</p><p></p><p>Cantrell 认为，机器学习类似于一种更加基础的技术：数据库。“机器学习有点像数据库，数据库对网络应用程序来说，开启了全新的世界。我们在生活中使用过的所有应用程序，都建立在数据库之上。但没有人关心数据库是如何工作的，人们只知道如何使用它。”</p><p></p><p>Compound VC 的管理合伙人 Michael Dempsey 表示，在过去，实验室技术进入主流“非常罕见”，而目前，生成式 AI 已经吸引了风险投资者的广泛关注。尽管如此，他警告说，当前的生成式 AI 可能正处在接近炒作周期高峰的“好奇阶段”，在这个阶段成立的公司可能会失败，因为他们没有将重点放在企业或者消费者愿意支付的具体用途上。</p><p></p><p>其他业内人士认为，今天能够应用生成式 AI 这些新技术的初创公司，在未来也许会向谷歌、Meta 和微软这些科技巨头们发出挑战。</p><p></p><p>当前，很多应用生成式 AI 技术的公司已经拿到了大额融资，估值也水涨船高。 比如，今年早些时候，Hugging Face 在拿到包括 Lux Capital 和红杉资本在内的投资后，估值达到了 20 亿美元；OpenAI 也已经从微软和 Khosla Ventures 那里获得了超过 10 亿美元的资金。</p><p></p><p>此外，据《福布斯》报道，Stable Diffusion 的开发商 Stability AI 正在与投资机构洽谈，计划筹集高达 10 亿美元的风投资金。</p><p></p><h2>云厂商和芯片厂商将会受益</h2><p></p><p></p><p>除了初创公司，亚马逊、微软和谷歌等云服务提供商也可以从中受益，因为生成式 AI 可能需要巨大的计算量。</p><p></p><p>Meta 和谷歌也已经行动起来，开始招聘人才。今年 9 月，Meta 发布了一款名为“Make-A-Video”的人工智能应用，该应用能够生成视频，这使得生成式 AI 技术更进一步。</p><p></p><p>“这是非常了不起的进步，”Meta 首席执行官扎克伯格在他的 Facebook 页面上发帖称，“生成视频要比生成照片难多了，因为除了要正确生成每个像素外，系统还必须预测它们会随着时间的推移发生怎样的变化。”</p><p></p><p>近日，谷歌与 Meta 进行了匹配，发布了一个名为 Phenaki 的程序代码，该程序也能将文字转化为视频，并能生成几分钟的镜头片段。</p><p></p><p>这股热潮也可能会提振 Nvidia、AMD 和英特尔等芯片制造商，因为这些公司生产的先进图形处理器是训练和部署人工智能模型的理想选择。</p><p></p><p>在最近的一次会议上，Nvidia 首席执行官黄仁勋强调，生成式人 AI 是该公司最新芯片的关键用途，他表示，这种程序可能很快就会“革命性地改变通信”。</p><p></p><p>当前生成式 AI 能够产生商业利益的用途并不多。今天很多令人兴奋的突破，都是来自免费或低成本的实验。例如，一些作家就已经尝试使用图像生成器为文章生成图像。Nvidia 的一个实例是使用一个模型来生成新的 3D 图像，包括人、动物、车辆或家具，这些 3D 图像可以填充到虚拟游戏世界。</p><p></p><h2>伦理问题不容忽视</h2><p></p><p></p><p>生成式 AI 让行业兴奋的同时，其带来的伦理问题同样值得关注。</p><p></p><p>首先是就业问题。与专业插画师相比，生成式 AI 显然成本更低，因此，生成式 AI 很可能会抢了艺术家、视频制作者和其他从事创造性工作的人的“饭碗”。</p><p></p><p>另外，生成式 AI 创作的内容在原创性和所有权上也存在复杂的问题。</p><p></p><p>生成式 AI 是在大量的图像上训练出来的。因此，原始图像的创作者是否对生成的新图像有版权要求，这一点仍在争论之中。</p><p></p><p>前段时间，一位艺术家在科罗拉多州的艺术比赛中获胜，而他获胜的图像正是由一个名为 MidJourney 的生成式 AI 创造的。这位艺术家在获胜后接受采访时说，他是从自己生成的数百张图像中选择一张图像，并在 Photoshop 中进行了后期处理。</p><p></p><p>值得一提的是，一些由 Stable Diffusion 生成的图像带有水印，这表明一部分原始数据集是有版权的。此前，Getty Images（一家位于美国西雅图的图片交易公司）宣布禁止用户将生成的 AI 图片上传到其图片库，因为该公司担心，这类图片可能存在一定的版权问题。。</p><p></p><p>随着图像生成软件越来越好，生成式 AI 也有可能欺骗用户，让用户相信虚假信息，或者显示从未发生的事件的图像或视频。</p><p></p><p>此外，开发人员还必须应对这样一种可能性，即在大量数据上训练的模型可能会有与数据中包含的性别、种族或文化有关的偏见，这可能导致模型在其输出中显示出这种偏见。</p><p></p><p>作者简介：</p><p></p><p>Kif Leswing，CNBC的科技记者，主要关注苹果公司、硬件和其他各种话题。拥有欧柏林学院（Oberlin College）的经济学学位。他在包括《商业内幕》、《连线》和Gizmodo（一个报道消费电子产品相关信息的流行科技博客）在内的媒体上报道科技行业长达七年之久。</p><p></p><p>原文链接：</p><p></p><p>https://www.cnbc.com/2022/10/08/generative-ai-silicon-valleys-next-trillion-dollar-companies.html</p>",
    "publish_time": "2022-11-04 08:10:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Java近期新闻：JEP更新，GraalVM贡献给OpenJDK，JavaOne重启",
    "url": "https://www.infoq.cn/article/kzzbQg5zgissaCcJlfey",
    "summary": "<p></p><h4>OpenJDK</h4><p></p><p>JEP 432<a href=\"https://openjdk.org/jeps/432\">记录模式（第二预览版）</a>\"在上周从其8294078草案<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2022-October/007096.html\">晋升</a>\"为候选状态。相比JEP 405记录模式（预览版），该JEP更新了：对通用记录模式类型参数推断的支持、新增对记录模式出现在强化for语句条件判断中的支持，并移除对命名记录模式的支持。</p><p></p><p>同样，JEP 433，<a href=\"https://openjdk.org/jeps/433\">switch的模式匹配（第四预览版）</a>\"从8294285草案<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2022-October/007097.html\">晋升</a>\"为候选状态。相比JEP 427 <a href=\"https://openjdk.org/jeps/427\">switch的模式匹配（第三预览版）</a>\"，该JEP简化了switch&nbsp;标签的语法、支持在switch表达式和语句中以及其他支持模式的结构中，对通用类型模式和记录模式类型参数推断，。</p><p></p><h4>JDK 19</h4><p></p><p>JDK 19的首个维护版本<a href=\"https://jdk.java.net/19/\">JDK 19.0.1</a>\"及对<a href=\"https://jdk.java.net/19/\">JDK 19.0.1</a>\"、<a href=\"https://www.oracle.com/java/technologies/javase/11-0-17-relnotes.html\">JDK 11.0.17</a>\"以及<a href=\"https://www.oracle.com/java/technologies/javase/8u351-relnotes.html\">JDK 8u351</a>\"的安全更新，均为Oracle在<a href=\"https://www.jpcert.or.jp/english/at/2022/at220029.html\">2022年10月关键补丁更新</a>\"版本发布。</p><p></p><h4>JDK 20</h4><p></p><p>JDK 20的<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-20%2B20\">Build 20</a>\"的<a href=\"https://jdk.java.net/20/\">抢先体验版</a>\"同样于上周发布，提供对Build 19的<a href=\"https://github.com/openjdk/jdk/compare/jdk-20%2B19...jdk-20%2B20\">更新</a>\"及多个<a href=\"https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2020%20and%20%22resolved%20in%20build%22%20%3D%20b20%20order%20by%20component%2C%20subcomponent\">问题</a>\"修复。关于该版本的更多细节可参见<a href=\"https://jdk.java.net/20/release-notes\">更新日志</a>\"。</p><p></p><p>鼓励开发者通过<a href=\"https://bugreport.java.com/bugreport/\">Java Bug数据库</a>\"报告关于<a href=\"https://openjdk.java.net/projects/jdk/20/\">JDK 20</a>\"的问题。</p><p></p><h4>JavaFX 20</h4><p></p><p>JavaFX 20的<a href=\"https://github.com/openjdk/jfx/releases/tag/20%2B4\">Build 4</a>\"的<a href=\"https://jdk.java.net/javafx20/\">抢先体验版</a>\"已在Java社区内可用，旨在同JDK 20抢先体验版相协作。JavaFX开发人员可在JDK 20上用JavaFX构建并测试应用程序</p><p></p><h4>分代ZGC</h4><p></p><p>分代ZGC<a href=\"https://jdk.java.net/genzgc/\">抢先体验构建</a>\"版本Build 20-genzgc+1-14同样在Java社区内可用，该版本是基于JDK 20的不完整版。</p><p></p><h4>Oracle创新实验室</h4><p></p><p>Oracle创新实验室<a href=\"https://twitter.com/graalvm/status/1582441450796900354\">宣布</a>\"，将继续在OpenJDK上贡献<a href=\"https://twitter.com/graalvm/status/1582441450796900354\">GraalVM社区版</a>\"源码，意味着当前GraalVM的设计和开发都将转移至OpenJDK社区，在未来GraalVM将适用与Java相同的开发模式及流程，且GraalVM将与Oracle Java的发布和许可模式保持一致。InfoQ将在后续报告中跟进更详细消息。</p><p></p><p>在1.0版本之前，<a href=\"https://labs.oracle.com/\">Oracle创新实验室</a>\"发布了<a href=\"https://github.com/graalvm/native-build-tools/blob/master/README.md\">原生构建工具</a>\"的<a href=\"https://github.com/graalvm/native-build-tools/releases/tag/0.9.15\">0.9.15</a>\"及<a href=\"https://github.com/graalvm/native-build-tools/releases/tag/0.9.16\">0.9.16</a>\"版本，该工具是包含与GraalVM原生镜像互操作插件的GraalVM项目。最新版提供对命令行--exclude-config 参数行为的测试及验证优化；修复MacOS用户的功能性测试；对工具链选择诊断的优化。关于该版本的更多信息可参见<a href=\"https://graalvm.github.io/native-build-tools/latest/index.html#changelog\">更新日志</a>\"。</p><p></p><p>Oracle创新实验室还<a href=\"https://twitter.com/graalvm/status/1572992003478294528?cxt=HHwWgMDUnZT5sdQrAAAA\">给出</a>\"了计划于2022年10月及2023年1月发布的GraalVM版本<a href=\"https://github.com/orgs/oracle/projects/6/\">社区路线图</a>\"，以及对应版本所计划更新的功能特征。</p><p></p><h4>BellSoft</h4><p></p><p>与Oracle在2022年10月的<a href=\"https://www.oracle.com/security-alerts/cpuoct2022.html\">关键补丁更新</a>\"（CPU）同时<a href=\"https://bell-sw.com/blog/liberica-8u352-11-0-17-17-0-5-and-19-0-1-builds-are-generally-available/\">发布</a>\"的还有BellSoft对<a href=\"https://bell-sw.com/pages/libericajdk/\">Liberica JDK</a>\" 17.0.4.1、11.0.16.1.1及8u351版本的CPU补丁，该JDK是OpenJDK的下游版本。此外，BellSoft还发布了对19.0.1、17.0.5、11.0.17及8u352版本的补丁集更新（PSU），包含CPU及非关键性修复。</p><p></p><h4>Spring框架</h4><p></p><p>在<a href=\"https://spring.io/projects/spring-framework\">Spring框架</a>\"6.0.0之前，<a href=\"https://spring.io/blog/2022/10/20/spring-framework-6-0-0-rc2-available-now\">第二候选版本</a>\"已经发布，提供28处bug修复、文档优化，以及对包括Apache Derby 10.16、GraalVM 22.3.0及Jackson 2.14.0-RC2在内的依赖更新。关于该本版的更多信息可参见<a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-RC2\">更新日志</a>\"。</p><p></p><p>在发布<a href=\"https://spring.io/projects/spring-boot\">Spring Boot</a>\" 3.0.0之前，<a href=\"https://spring.io/blog/2022/10/20/spring-boot-3-0-0-rc1-available-now\">第一候选版本</a>\"已经发布，提供135处bug修复，文档优化，以及对包括Spring框架6.0.0-RC2、Spring GraphQL 1.0.0-RC1、Spring Security 6.0.0-RC1、Spring Web Services 4.0.0-RC1、Netty 4.1.84.Final、Micrometer 1.10.0-RC1以及 Log4j2 2.19.0在内的依赖优化。关于该版本的更多信息可参见<a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v3.0.0-RC1\">更新日志</a>\"。</p><p></p><p>Spring框架6.0及Spring Boot 3.0均计划于2022年11月发布GA，开发者可参考这篇InfoQ<a href=\"https://www.infoq.com/news/2022/10/spring-boot-3-jax-london/\">报道</a>\"了解更多消息。</p><p></p><p>Spring Boot 2.7.5已经<a href=\"https://spring.io/blog/2022/10/20/spring-boot-2-7-5-available-now\">发布</a>\"，提供bug修复及对包括Spring Data 2021.2.5、Spring Security 5.7.4、Spring Data 2021.2.5、Hibernate 5.6.12最终版，以及Reactor 2020.0.24在内的依赖升级，关于该版本的更多信息可参见<a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.7.5\">更新日志</a>\"。</p><p></p><p>Spring Boot 2.6.13已经<a href=\"https://spring.io/blog/2022/10/20/spring-boot-2-6-13-available-now\">发布</a>\"，提供27处bug修复，文档优化，以及包括Spring Data 2021.1.9、Spring Security 5.6.8、Tomcat 9.0.68、Reactor 2020.0.24，以及Jetty Reactive HTTPClient 1.1.13在内的依赖升级。关于该版本的更多细节可参见<a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.13\">更新日志</a>\"。</p><p></p><p><a href=\"https://spring.io/projects/spring-data\">Spring Data</a>\" 2022.0.0-RC1、2021.2.5，以及2021.1.8版本均已于上周<a href=\"https://spring.io/blog/2022/10/17/spring-data-2022-0-0-rc1-2021-2-5-and-2021-1-8-available\">发布</a>\"，三个版本均提供多处对应依赖升级。候选版本提供了取消Apache Geode的Spring Data等修订的模块结构，点发布版本可分别与Spring Boot 2.7.5和2.6.13一起使用。</p><p></p><p>Reactor Netty团队发布了CVE-2022-31684漏洞，<a href=\"https://tanzu.vmware.com/security/cve-2022-31684\">Reactor Netty的HTTP服务器可能会记录请求头信息</a>\"，拥有服务器日志访问权限的人可透过该漏洞中所记录的请求头信息获取有效访问令牌，但可能只影响启用WARN 级别的无效HHTP请求有影响。Reactor Netty 1.0.24版本提供了对该漏洞的修复。</p><p></p><p>在<a href=\"https://spring.io/projects/spring-batch\">Spring Batch</a>\" 5.0的<a href=\"https://spring.io/blog/2022/10/13/spring-batch-5-0-0-m8-is-out\">第八个里程碑版本</a>\"发布一周以后，<a href=\"https://spring.io/blog/2022/10/20/spring-batch-5-0-rc1-is-out\">第一候选版本</a>\"已经发布，其功能有：增加Spring Batch版本以优化上下文元数据的执行，取消对GemFire的支持。更多关于该版本的信息可参见<a href=\"https://github.com/spring-projects/spring-batch/releases/tag/5.0.0-RC1\">更新日志</a>\"。</p><p></p><p>在发布<a href=\"https://spring.io/projects/spring-ws\">Spring Web Services</a>\" 4.0.0版本之前，<a href=\"https://spring.io/blog/2022/10/18/spring-web-services-4-0-0-rc1-is-out\">第一候选版本</a>\"已经发布，提供对包括Spring框架 6.0.0-RC1、Spring Security 6.0.0-RC1、log4j2 2.19.0, slf4j 2.0.3，以及Ehcache 2.10.9.2在内的依赖升级。这是计划支持Spring Boot 3.0的最后一个候选版本。</p><p></p><p><a href=\"https://spring.io/projects/spring-security\">Spring Security</a>\" 6.0.0-RC1及5.8.0-RC1版本已经<a href=\"https://spring.io/blog/2022/10/18/spring-security-6-0-0-rc1-and-5-8-0-rc1-are-released\">发布</a>\"，提供对HttpSession接口的智能访问；简化RequestMatcher&nbsp;接口配置；提供对shouldFilterAllDispatcherTypes&nbsp;属性的XML支持。候选版本同样提供重大更新。关于该版本的更多信息可参见<a href=\"https://github.com/spring-projects/spring-security/releases/tag/6.0.0-RC1\">6.0.0-RC1</a>\"版本及<a href=\"https://github.com/spring-projects/spring-security/releases/tag/5.8.0-RC1\">5.8.0</a>\"版本的更新日志。</p><p></p><p>同样，Spring Security也已<a href=\"https://spring.io/blog/2022/10/18/spring-security-5-7-4-and-5-6-8-available-now\">发布</a>\"5.7.4及5.6.8版本，提供bug修复，以及对包括Spring框架5.3.23、Reactor Netty 1.0.24、Jackson Databind 2.13.4.1以及Eclipse Jetty 9.4.49在内的依赖更新。关于该版本的更多信息可参见<a href=\"https://github.com/spring-projects/spring-security/releases/tag/5.7.4\">5.7.4版本</a>\"及<a href=\"https://github.com/spring-projects/spring-security/releases/tag/5.6.8\">5.6.8版本</a>\"的更新日志。</p><p></p><p><a href=\"https://spring.io/projects/spring-graphql\">GraphQL的Spring</a>\" 1.1.0的<a href=\"https://spring.io/blog/2022/10/18/spring-for-graphql-1-1-0-rc1-released\">第一候选版本</a>\"已经发布，提供基于指标的可观测性支持和对<a href=\"https://micrometer.io/\">Micrometer</a>\"的分布式追踪。该版本发布后直到预计于2022年11月发布的GA之前都不再更新功能，开发团队在此期间将专注于bug修复和文档优化。Spring GraphQL 1.1.0-RC1也将包括在Spring Boot 3.0.0-RC1内。关于该版本的更多信息可参见<a href=\"https://github.com/spring-projects/spring-graphql/releases/tag/v1.1.0-RC1\">更新日志</a>\"。</p><p></p><p>基于单片机和模块化应用开发热度再起，Spring<a href=\"https://spring.io/blog/2022/10/21/introducing-spring-modulith\">推出</a>\"了新的实验性项目<a href=\"https://spring.io/projects/spring-modulith\">Spring Modulith</a>\"，支持开发者“在代码中表达逻辑应用模块，并构建结构良好、领域一直的Spring Boot应用”。InfoQ将在后续报道中提供更多细节。</p><p></p><p>VMware工程师<a href=\"https://www.linkedin.com/in/andy-wilkinson-b646102/\">Andy Wilkinson</a>\"宣布<a href=\"https://start.spring.io/\">Spring Initializr</a>\"团队的默认构建工具将从Maven改为Gradle。Wilkinson代表团队认为Gradle是更好的构建系统，他写道：</p><p></p><p></p><blockquote>对基于Spring Boot 3.0的应用来说尤为如此，因为Gradle在AOT处理上给开发者带来了更好的体验。我们希望能鼓励社区使用Gradle的同时，保证Maven爱好者们能随时切换回Maven。</blockquote><p></p><p></p><p>仍希望使用Maven的开发者们可简单通过https://start.spring.io/#!type=maven-project 使用。InfoQ会在后续跟进更详细的新闻报道。</p><p></p><h4>EclipseLink</h4><p></p><p><a href=\"https://github.com/eclipse-ee4j/eclipselink/blob/master/README.md\">EclipseLink</a>\" 4.0.0版本已<a href=\"https://twitter.com/OmniFishEE/status/1583077372810887171\">发布</a>\"，是<a href=\"https://jakarta.ee/specifications/persistence/\">Jakarta Persistence</a>\"规范的兼容实现，提供多出更新，包括：添加*Visitor 类及接口至<a href=\"https://github.com/eclipse-ee4j/eclipselink-asm/blob/master/README.md\">EclipseLink-ASM</a>\"项目；OneToManyMapping&nbsp;类中的clone() 方法可克隆合适字段，修复了多线程环境中抛出的ConcurrentModificationException；将Oracle依赖更新至版本21c。关于该版本更多信息科参见<a href=\"https://github.com/eclipse-ee4j/eclipselink/releases/tag/4.0.0\">更新日志</a>\"。</p><p></p><h4>Quarkus</h4><p></p><p>红帽<a href=\"https://quarkus.io/blog/quarkus-2-13-3-final-released/\">发布</a>\"了Quarkus 2.13.3最终版，解决了<a href=\"https://github.com/FasterXML/jackson-databind#readme\">Jackson Databind</a>\"中拒绝服务的漏洞<a href=\"https://access.redhat.com/security/cve/cve-2022-42003\">CVE-2022-42003</a>\"，并鼓励开发者们升级至版本2.14.0-RC1、2.13.4.1及2.12.17.1。SmallRye&nbsp;<a href=\"https://github.com/smallrye/smallrye-reactive-messaging/blob/main/README.md\">Reactive Messaging</a>\" 3.21.0、<a href=\"https://github.com/Kotlin/kotlinx.serialization#readme\">Kotlin Serialization</a>\"&nbsp;1.4.1以及Jackson Databind 2.13.4同样进行了依赖升级。关于该版本的更多信息可参见<a href=\"https://github.com/quarkusio/quarkus/releases/tag/2.13.3.Final\">更新日志</a>\"。</p><p></p><h4>Micronaut</h4><p></p><p>Micronaut基金会<a href=\"https://micronaut.io/2022/10/18/micronaut-framework-3-7-2-released/\">发布</a>\"了Micronaut框架3.7.2版本，提供问题修复、对Micronaut Data 3.8.1、JUnit 5.9.1、jackson-databind&nbsp;2.13.4.2、managed-testcontainers&nbsp;1.17.5、managed-swagger&nbsp;2.2.3，以及micronaut-gradle-plugins&nbsp;5.3.15的依赖升级。关于该版本的更多细节可参见更新日志。</p><p></p><h4>Hibernate</h4><p></p><p>Hibernate Reactive 1.1.9最终版已经<a href=\"https://in.relation.to/2022/10/18/hibernate-reactive-1_1_9_Final/\">发布</a>\"，提供性能增强：在检查ReactiveConnectionSupplier&nbsp;接口时避免了类型换缓存。关于该版本的更多细节可参见<a href=\"https://github.com/hibernate/hibernate-reactive/milestone/30?closed=1\">问题列表</a>\"。</p><p></p><h4>JHipster</h4><p></p><p>JHipster Lite的<a href=\"https://github.com/jhipster/jhipster-lite/releases/tag/v0.20.0\">0.20.0</a>\"及<a href=\"https://github.com/jhipster/jhipster-lite/releases/tag/v0.19.0\">0.19.0</a>\"版本已经于上周<a href=\"https://twitter.com/pascalgrimaud/status/1583385746077265921\">发布</a>\"，提供对Neo4j的支持、对Angular 14.2.7的依赖更新、删除弃用、无逻辑模板工具<a href=\"https://mustache.github.io/\">Mustache</a>\"的重构工作。</p><p></p><p></p><h4>Apache软件基金会</h4><p></p><p>Apache软件基金会<a href=\"https://lists.apache.org/thread/n2bd4vdsgkqh2tm14l1wyc3jyol7s1om\">发布</a>\"了CVE-2022-42889，在<a href=\"https://securitylab.github.com/advisories/GHSL-2022-018_Apache_Commons_Text/\">Apache Common文本中执行任意代码</a>\"漏洞，由于不安全的默认插值，处理不受信任的输入时，该漏洞允许远程代码执行。建议开发者们升级至<a href=\"https://commons.apache.org/proper/commons-text/\">Apache Commons文本</a>\"1.10.0。</p><p></p><p>Apache Groovy 4.0.6已经<a href=\"https://www.mail-archive.com/announce@apache.org/msg07651.html\">发布</a>\"，提供对Jackson Databind 2.13.4、JUnit 5.9.1、ASM 9.4、Spock 2.3、junit-platform 1.9.1以及japicmp&nbsp;0.4.1等14处bug修复、优化，以及依赖升级。关于该版本更多细节可参见<a href=\"https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12318123&amp;version=12352278\">更新日志</a>\"。</p><p></p><p>同样，Apache Groovy 2.5.19已经<a href=\"https://www.mail-archive.com/announce@apache.org/msg07650.html\">发布</a>\"，提供72处bug修复、优化，以及对Spock 1.3的依赖升级。关于该版本更多细节可参见<a href=\"https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12318123&amp;version=12352278\">更新日志</a>\"。</p><p></p><h4>JavaOne</h4><p></p><p>时隔五年，<a href=\"https://www.oracle.com/cloudworld/javaone/\">JavaOne</a>\"终于回到了内华达州的拉斯维加斯，在上周的<a href=\"https://www.lasvegashowto.com/caesars-forum\">凯撒论坛</a>\"和<a href=\"https://www.lasvegashowto.com/venetian-expo\">威尼斯人会展中心</a>\"，众多来自Java社区的演讲者提议并推行了<a href=\"https://reg.rf.oracle.com/flow/oracle/cloudworld/session-catalog/page/catalog?search.topic=1651238230807008ZfDn&amp;search.experience=16488311119400025qIZ\">各种类型的会议</a>\"，如Birds-of-a-Feature、动手实践、快速讲座、实践课程和深度挖掘。</p><p></p><p>众多亮点之一的是由Oracle公司Java开发者关系副总裁<a href=\"https://www.linkedin.com/in/chadarimura/\">Chad Arimura</a>\"所推行的<a href=\"https://www.youtube.com/watch?v=NEVap2Wt5go\">Java之内 | JavaOne 2022技术主题演讲</a>\"，该演讲还邀请了来自微软和Oracle公司的特别嘉宾：</p><p></p><p>微软开发者部门及GitHub总裁<a href=\"https://www.linkedin.com/in/julia-liuson-6703441/\">Julia Liuson</a>\"，微软首席云开发者倡议者<a href=\"https://www.linkedin.com/in/markheckler/\">Mark Heckler</a>\"，共同介绍了当前微软Azure的Java开发。Oracle公司技术顾问<a href=\"https://www.linkedin.com/in/gavin-bierman-a0173075/\">Gavin Bierman</a>\"探讨了Amber项目，并演示了如何在switch中使用<a href=\"https://openjdk.org/jeps/432\">记录模式</a>\"及<a href=\"https://openjdk.org/jeps/433\">模式匹配</a>\"。Oracle公司Java虚拟机高级主管<a href=\"https://www.linkedin.com/in/mikaelvidstedt/\">Mikael Vidstedt</a>\"，探讨了ZGC。Oracle公司技术顾问<a href=\"https://www.linkedin.com/in/sean-mullan-314694/\">Sean Mullan</a>\"，探讨了Java的安全技术。Oracle公司技术顾问<a href=\"https://www.linkedin.com/in/ron-pressler-a279032/\">Ron Pressler</a>\"及Oracle公司架构师<a href=\"https://www.linkedin.com/in/langertomas/\">Tomas Langer</a>\"，探讨了Loom项目，并演示了如何在阻塞和反应环境中使用虚拟线程。Langer还介绍了一款基于虚拟线程的新微服务框架<a href=\"https://medium.com/helidon/please-welcome-helidon-n%C3%ADma-9a882c5b6f1e\">Helidon Níma</a>\"，可以在保持线程阻塞模型的同时提供一个低开销、高并发的服务器。Oracle公司Java开发倡导者<a href=\"https://www.linkedin.com/in/denys-makogon-45338150/\">Denys Makogon</a>\"，从乌克兰发来了线上虚拟演讲，关于Loom项目和ZGC是如何改进了团队在Oracle红牛竞速F1模拟器中的遥测摄取引擎。</p><p>&nbsp;</p><p>上一届JavaOne是2017年举办的，并在2018和2019年改名为CodeOne，由于疫情原因，2020年和2021年并未举办大会。</p><p>&nbsp;</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/10/java-news-roundup-oct17-2022/\">Java News Roundup: JEP Updates, GraalVM Code to OpenJDK, Return of JavaOne</a>\" </p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/qQFYqekRrzwOp8KPNVD4\">Java 近期新闻：顺序集合、Spring 6.0-RC1、Tomcat、Reactor 2022.0-RC1</a>\"</p><p><a href=\"https://www.infoq.cn/article/NxuqQb5Xt6VaPu1mEWIG\">Oracle 将 GraalVM 贡献给 OpenJDK，以解决“采用障碍”</a>\"</p>",
    "publish_time": "2022-11-04 10:23:38",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "华润雪花郭华：每一个人都不简单，每一瓶酒才放光彩",
    "url": "https://www.infoq.cn/article/jzPFFNHdrkhcjpIB0ylM",
    "summary": "<p></p><p><img src=\"https://static001.geekbang.org/infoq/94/940b157dbef2b36b2b3ef083c482b0d7.png\" /></p><p></p><p>2022年&nbsp;10&nbsp;月&nbsp;26&nbsp;日，由极客时间企业版主办的“数字人才蓄能季高端论坛——夯实人才底座，掌控数字化未来机遇”成功举办。华润雪花啤酒数字化负责人郭华受邀参加本次峰会，并做了“每一个人都不简单，每一瓶酒才放光彩”主题分享，以下为分享内容整理，供大家阅读参考。</p><p></p><p>大家好，我是来自雪花啤酒的郭华，非常荣幸受邀参加极客时间企业版主办的「数字人才蓄能季高端论坛」，和大家分享数字化人才和组织发展相关话题。</p><p></p><p>先简单介绍一下我自己，我在华润雪花啤酒和华润集团工作了 8-9 年，主要负责信息化和数字化相关工作。尤其是从 2018 年至今主要承担雪花啤酒的数字化转型、数字化组织搭建，以及数字化人才培养相关工作。今天和大家分享一下雪花在数字化人才发展和组织发展方面的实践，希望能够带来一些思考和心得交流。</p><p></p><p>先跟大家分享一句话——“每一个人都不简单，每一瓶酒才放光彩”。这既是雪花企业文化中非常重要的核心思想，也是雪花在数字化人才培养，数字化转型过程中关于人才和组织非常重要的视角和观点，也是我们的立足点。</p><p></p><p></p><p>我将从三个方面来分享雪花在过往数字化工作中的体会：</p><p>第一，华润雪花的数字化战略背景和组织的需求；</p><p>第二，华润雪花的数字化组织的构建策略和形态演变；</p><p>第三，华润雪花在数字化人才培养和数字化文化氛围营造方面的思考与实践。</p><p></p><p></p><h1>数字化战略对人才和组织的需求</h1><p></p><p>数字化转型和数字化人才培养背景首先介绍一下华润雪花数字化人才培养和数字化转型的背景。雪花转型的主要驱动力来自于业务战略的调整。从2017年开始，雪花开展了“3+3+3”的“决战高端、质量发展”的战略转型，这个转型是在雪花的业务、市场，以及形势发生重大变化的基础上开展的三个阶段的九年战略转型，这对雪花数字化人才和组织提出了新需求。</p><p></p><p>2017年，雪花根据转型升级创新发展提出了“有质量增长、转型升级、创新发展”的战略主题，战略举措是“去包袱、强基础、续能量”。</p><p></p><p>在此背景下，雪花的员工从 58000 人减到了目前的 25000 人，有 3 万多的员工在这几年里通过组织重塑离开了雪花。并不是说留下的 25000 人还是原来的 25000 人，雪花对人才结构、专业能力提出了“四化”——国际化、市场化、专业化、年轻化。这主要是为了迎合雪花的组织和战略整体转型，对人才的更新换代，这就要求在三年蓄力之后，产生新的人才梯队增长。</p><p></p><p>2020 年到 2022 年，是决战高端、质量发展阶段。这个阶段的战略举措是“补短板、提质量、增效益”。实际上在业务转型的过程中，信息化升级、数字化转型是大量和快速铺垫的阶段。雪花也是在这个过程中建立起了一个比较庞大，专业分工明确的数字化队伍，这个在后续的内容中我会展开介绍。</p><p></p><p>2023 年到 2025 年，也就是明年开始，雪花要进入“3+3+3”战略的后三年，叫决胜高端，追求卓越，力争成为一个在销量、利润和高端产品方面全面领先的世界一流的啤酒企业。雪花也在发展其他酒类业务，因此希望能做一个一流的多元化的酒业公司。能够在“双对标、做一流”的过程中进一步成为一个充分数字化、全面数字化的企业。以上是雪花业务战略中对数字化转型和数字化人才培养的背景。</p><p></p><p></p><h2>数字化转型的步骤</h2><p></p><p>在此背景之下，雪花的数字化转型经过了以下几个步骤和过程。</p><p></p><h3>转换建设视角</h3><p></p><p>首先是视角的调整，雪花从传统的数字化、信息化向未来的自上向下、由内而外、连线组网、寓服务于管控的视角进行了调整。也就是说雪花的数字化不是企业内部运营的视角，而是要发展成内外协同的视角。</p><p></p><p>我们也从雪花 16 个区域公司的局部视角转换为雪花全国视角，从垂直的业务领域，财务、人力、营销、营运、生产转换成流程的端到端的视角。更加重要的是从科层制的管控变成服务赋能的视角。这些视角的转换有一个深刻的组织背景，就是从原来的金字塔组织演变成工字型组织，从工字型的组织进一步演变成支持三三制战术的前线呼唤炮火的扁平化的组织，也就是有一个大后台，来支持作战型团队构成的、灵活的、充分数字化的组织。</p><p></p><h3>明确总体目标</h3><p></p><p>基于建设视角的转换，雪花也明确了未来数字化的总体目标——平台赋能、数据驱动和智慧运营。</p><p></p><p>平台赋能。核心逻辑是要把个人能力演变成部门能力，部门能力演变成组织和公司能力，再把这些能力开放到外部的组织和平台中去。与此同时也要把外部平台和组织能力接入到雪花的内部平台中。这其中就会发生一个非常重要的变化，就是企业的能力变成了平台，组织变成了融合型组织，组织的外延也突破了既有边界，能够和外部组织和平台形成统一资源。</p><p></p><p>数据驱动。充分数字化之后，雪花的业务充分线上化，业务生成的数据能够准确、快速、自由地流动，也就是正确的数据在正确的时间，以正确的方式传递给正确的人和组织，以及设备或者资产。这种全面线上化最终的结论是以数据驱动流程，提高决策的时效性。数据就是业务，业务就是数据。这样能够极大程度地提高雪花自身配置资源的效率，变成数据驱动的公司和数据驱动的组织和人。</p><p></p><p>智慧运营。在平台赋能、数据驱动的基础上，人的智慧和精力会进一步剥离出来去处理 80% 以外的社会性工作，也就是人更多地做一些综合性的、复杂的、例外的管理工作和专业工作。与此同时，再把人的智慧模型化、智能化封装成各个业务中人机进一步合作的人工智能和算法，让运营高度自动化，通过智能去配置内外部资源。</p><p></p><p>不论是营销的千人千面，生产的柔性制造，还是仓储物流的自动化，渠道交付的充分敏捷，以及终端的精益运营，都是为了进一步在管理和组织能力提升的基础上提高雪花市场主体对外部环境的响应能力。</p><p></p><p>在此过程中，从华润历史传承来看，战略等于组织✖️执行力，这对于人和组织能力的要求是非常高的。雪花结合视角的转换和目标的设定，形成了一张顶层设计蓝图，这张蓝图主要就是刚才提到的在需求侧和供给侧要提高对市场和消费者的响应效率和信息传导效率。</p><p></p><p>在此基础上，雪花也形成了基于业务的“五化三集中一核四平台”的转型框架，讲到这里可以看到，雪花的数字化转型从业务战略延伸到数字化战略，从数字化战略又融合到了业务战略，战略支持和战略保障是过去六年以来逐步成型的。站在这个角度上，我们要从组织和个人能力的角度做一些思考。</p><p></p><p>比如说“五化三集中”里的“三集中”即信息集中、管控集中和服务集中。其中有一个非常大的变革，就是能力的平台化会带来组织的平台化。业务中台、数据中台，也有类似的说法，但是这里是一个狭义的说法，更广义的说法是数字化最终形成的平台的核心目标和载体是组织平台，是组织中台化。也就是企业把业务从供应商到生产，到渠道，到终端，到消费者形成组织的中台化能力来配合数字化手段做共同运营。</p><p></p><h2>数字化转型面临的问题</h2><p></p><p>接下来我想重点解读一下雪花在当时的战略目标之下面临的问题，以及在这种问题之下需要哪些组织能力和个人能力的发展。</p><p>雪花在数字化转型过程中面临的组织问题可以用六个字形容——存量、增量、变量，这需要新的组织能力和新的个人技能的迭代和更新。</p><p></p><p>存量转换。为什么叫转换呢？因为这里面有大量的路径依赖。每个人、每个组织都有巨大的惯性，会认为“我过去是这么做的，让我换一个做法，我是否能适应？”存量转换实际上对组织提出最大的诉求是就是强大的执行力。传统意义上，在数字化过程中经常遇到流程不贯通、数据不统一，系统的个性和共性矛盾比较多，大小组织自转和公转问题比较多。这种情况下夯实基础才会有数字化的规模效应。从组织能力的角度，执行力一定要非常的强，才可以做到存量的转换。</p><p></p><p>增量破冰。有些数字化的业务是增量业务，比如我们已经看得很清楚，但是相对市场落后，或者相对历史发展不足的业务，像是线上业务、O2O业务或者充分数字化的整合型电商业务。这种业务更重要的是破冰。人和组织会纠结先有鸡还是先有蛋，是先看到成效再去投入，还是先有足够的投入才会有好结果。</p><p></p><p>这里大家要意识到一个问题，最大的成本并不是资本投入或者是人的投入，而是时间。如果把时间浪费掉，这种增量破冰就没有时效性和足够的意义。这里会遇到的具体问题，比如技术和业务融合的不好，平台搭建好了，但缺乏数字化业务运营团队，企业会在积累和变现之间纠结投入能否及时变现，但增量业务发展有其客观规律，需要时间，需要投入，这时组织和团队如何跟功利思维博弈？这个过程中需要学习型组织能够快速纠错，快速变通，快速形成新的能力和新的做法。所以，增量破冰需要具备学习能力优的组织，数字化的组织。</p><p></p><p>变量开局。变量部分面临的问题是这里有机会，但是面临巨大的不确定性和风险。比如说雪花快消往零售的延伸会出现一些新的终端和新的场景，这些终端会有利于我们更好地观察消费者。但是我们过去没做过，没有掌握其中的逻辑，没有拥有运营能力的团队。这种情况下做还是不做？怎么做？面临的问题就是要先开枪，后瞄准，没有准星。不破则不立，如果不打破固有思维方式，可能根本就立不起来。</p><p></p><p>同样会面临到的问题就是人的问题，用来解决问题的人可能就是问题本身，人有巨大的思路上的限制，比如一个人不是一个猎手，是一个农夫，但是你把他放到了新的局面里，他难受，组织难受，业务也难受。怎么解决这个问题？</p><p></p><p>这种变量的业务中也会遇到所谓的叹息之墙，或者是阿喀琉斯之踵，就是硬伤、瓶颈点，企业只有改变认知思维，才有机会突破它。</p><p></p><p>雪花的CEO侯孝海一直在说雪花要在“3+3+3”的战略里创造一个啤酒的新世界。数字化组织一定要是敢于进入新世界的组织，要敢于突破固有的思维方式和打法，要敢于冒险，也要能于冒险。</p><p></p><p>在这个过程中，雪花的体会非常深，企业需要执行力强、学习能力优的组织，敢于进入新世界的组织，还要很好地把握数字化过程中的变现过程。以下也是非常值得分享的经验。</p><p></p><p>第一，一定要深度理解业务，不仅是理解业务的特点、优点和缺点，也要理解业务中组织能力的承载能力，理解业务的未来问题和目标。只有这样企业才能调整合理的节奏，在合理的时间投入合理的资源，做合理的事。与此同时，也要注意使用恰当的技术，不要一味地求新追异，一味地找最先进、最好的技术，它不一定适合企业现有的组织能力和形态。企业需要引入恰当的技术，合理驾驭，才能解决好组织和业务同步发展的问题。</p><p></p><p>第二，企业数字化转型过程中需要什么样的数字人才？如果一个组织的执行力要强，学习能力要优，要敢于走入新世界，具体到每一个人，需要哪些标签？应该给他画一个什么样的画像？应该用什么样的方式来获取、发展和培养这些人？也就是说人才选用育留的逻辑和原则是什么？这里我引用了华润集团数字化人才行为倡议，其实也可以简单的认为这是华润的数字化相关工作者投票投出来的数字化人才的标签。</p><p></p><p>过去几年里大家都在说数字化人才，那么数字化人才长什么样子？他们有什么样的行为标准？有什么样的价值观？有什么样的行为模式？有什么样的技能和做法？华润数字化人才十大行为倡议是大家投票投选出来的，是在过往的问题、经验，以及未来的需求的基础，共同谋划出来的。可以看到，这其中提到最多的就是从业务中来到业务中去，一定是要坚持以业务价值为导向的目标，主动深入业务一线，加强业务理解和洞察。</p><p></p><p>与此同时，要干中学，学中干，持续学习和统一语言，统一目标。这个目标不是数字化的目标，也不是 IT 的目标，而是数字化业务，也就是业务战略的目标的同向奔赴。与此同时，一定要摒弃自我为主的小圈子和比较狭隘的技术思维，要重视客户飞轮的驱动方式，要重视客户体验和反馈。</p><p></p><p>心中有大局，行动践大局。更多地是提到一些技术人员的本位主义和比较局部的技术思考，比如培养一个产品经理，会发现他的瓶颈一般都不是在技术和专业能力上，而是在同理心上，他没有办法获取到业务的节奏感，就会丧失判断力，产品设计出来会失之毫厘，谬以千里，就会出现微观操作带来的宏观问题。这种问题就要求员工建立同理心的大局观，换位思考，通过非常有效的沟通协调能力做变革推动。这也是在数字化工作中非常重要的人才能力，就是员工把事情做好后，如何传递出去，翻译出去让别人知道。而且这个传递和翻译不是单纯的传话或者是说出去，而是经过了像翻译工作的“信、达、雅”的要求，有效加工，形成一个针对不同的人能够更有效传递出去的信息。</p><p></p><p>打破陈规，有很强的知识整合能力。雪花数字化一直在强调人应该是复合型人才，组织应该是融合型组织。因此，一定要把不同领域，比如技术、IT 和业务的知识充分融合起来，并加工和创新。高度的责任心和使命感，是相对比较共性的价值观要求，一定要有理想主义的推动，再去推动数字化。创造新的工作价值来强化目标驱动、数据驱动、智能引领的数字化思维能力。</p><p></p><p>雪花结合华润集团的数字化人才行为倡议，针对雪花的特征，初步做了个 TOPSTAR 模型，对雪花的数字化人才，尤其是现阶段的人才需要具备的深度能力做了进一步细化和拓展。比如其要拥有架构能力、捕捉机会的能力。我们会在 TOPSTAR 模型中对数字化关键人进行进一步的基于学习地图的发展规划和发布。</p><p></p><p>这个逻辑就是你目前是什么样的人，需要发展成什么样的人。比如你目前是实施顾问，是解决方案人员。企业希望你发展成产品经理和数字化运营人员。从学习地图的角度来看，你的未来需要具备的能力和现状的对比，最大差距在哪几方面？如果画出了 2-3 个标签，我们会把它落实在学习地图中，作为终极目标分阶段地发展这些人的能力。这是雪花对人才培养的一些观点——基于标签、基于画像、基于数字化人才发展地图的路径对人才进行规划与培养。</p><p></p><h1>数字化组织策略和演变</h1><p></p><p></p><p>第二部分，讲一讲过往几年来雪花基于刚才提到的战略和目标，数字化组织是如何演变的，每个阶段的重点策略和形态是什么？总结了哪些经验和教训？</p><p></p><p>雪花的组织能力保障和组织发展策略分为内外部，内部组织叫控总量、调结构、建纵深、补缺口。外部能力叫自建船坞，借船出海，Snow+ 的能力发展。</p><p></p><p>这是指导雪花过往 3-4 年整体组织发展的策略，简单地划分一下，结合过去几年和未来几年，可以把它总结成六个字——塑形、聚力、铸魂。每个阶段都充分考虑了雪花当时的状况、目标、未来需求，也考虑了雪花阶段性的任务，分阶段打造的组织。基本上我们是三年一大调，一年一小调。雪花每年都会做组织的复盘，也会对组织的形态做重新的调整和新发展。</p><p></p><p>第一阶段，塑形。从 2019 年顶层设计开始，雪花当时没有集中的团队，团队分散在 16 个区域公司，分散在总部，分散在外部的项目组，分散在其它的各种各样的业务职能领域里。我们做过不完全统计，雪花是“钉子”型组织，大量的人属于基层，能力比较基础，人员结构重复。</p><p></p><p>当时雪花有一个基本诉求，就是怎么让这些人先把具体的事儿做好，怎么把短板先夯实。因此，我们的侧重点是内部补短板，把总部的专业岗迅速填充起来，把关键人才、管理人才、重点资源迅速筹措到位。外部推动分工合理化，当时叫促分工，我们自己在一些做起来没有效率，成本又高的领域里加速推出，因此需要在外部建立三种框架，三种资源，就是战略型框架、资源型框架和整合集成型框架，以获取不同能力、不同厂商和不同合作伙伴资源来补充内部能力的不足。</p><p></p><p>雪花在这个阶段的组织形态更像一个传统的金字塔，它在 IT 层面叫“一部一中心”，局部整合区域资源和外部资源以做好项目，同时配套健全制度，搭建治理平台来筹措项目群的管理。</p><p></p><p>第二阶段，聚力。从 2020 年到今年一直在做。这个阶段雪花的组织形态发生了非常大的变化，简单地形容就是 IT 组织形成了三支柱，业务和 IT 形成了初步融合型组织。外部在寻找业务运营、内容、技术的战略性合作伙伴来做 Snow+，其逻辑就是基于前三年的基础，做强交付中心，即合数合力，在 IT 和数字化的工作内部形成流水线作业。</p><p></p><p>这个过程中，雪花做的最重要的事是调结构，就是把人员做大规模的专业化分工，做内外部的资源池，形成设计、研发、实施、运维的大规模分工协作。我们用同样的人支持了四十几个项目在这三年里同步运转，无论是研发、建设、运维，还是后期的一部分运营工作，我们可以基于这个分工，用更少的人做更多的事，而且保证更高的质量。</p><p></p><p>从外部角度，我们会把雪花的资源做进一步梳理，不限于在技术层面去获取一些数字化能力，更多地是从技术到数据，从数据到平台，从平台到运营，从运营到内容来建立战略合作伙伴框架的获取。无论是腾讯、阿里这样的战略合作伙伴，美团、字节跳动这样的合作伙伴，还是更微观、更细分领域，如内容领域、营销领域的合作伙伴，雪花都做了大量的业务 + 数字化的能力获取。</p><p></p><p>第三阶段，铸魂。也就是未来一个阶段，目前已经有部分启动了。做组织进一步融合型团队和复合型人才发展。雪花会在 IT 内部数字化队伍推产品线，把所有纵向组织全部打横，变成一个“8+2”的产品线。这个产品线的逻辑是“向前一步，拉开两边”，也就是充分与业务融合，在人的专业能力和业务上，和技术做充分地双向融合。</p><p></p><p>这里对人的要求与过往的六年相比，发生了非常大的变化，会出现大量的数据运营人员和产品经理，他们实际上是要负责产品从生到死的过程，而且更重要的精力要放在产品运营上，而不单单是应用的打造和建设层面。</p><p></p><p>在这个基础上进一步延伸，会形成数字化的运营中心来做业务和数字化业务，将产品和运营、数据和内容、业务和数据，数字化和业务混成一个融合型组织来共同推进。这个阶段的关键词是“建纵深”，全面的建立组织的纵深，IT 内部的纵深，IT 和业务的纵深，业务和外部平台的纵深，来形成运营+业务，业务+应用的雪花全面数字化。再外延就会形成业务中心的数字化队伍，和我们外围的产品运营、产品平台队伍和数字化运营中心共同合作。</p><p></p><p>以上共同构成了雪花在组织能力演变的三个阶段的一些思路和实践，前两个阶段已经做了很久，也初见成效。有些是目前正在启动，局部已经落地，比如营销层面。还有一些在规划、尝试和筹措当中。</p><p></p><h1>数字化人才培养和文化氛围打造</h1><p></p><p></p><p>第三方面简单谈一下雪花在数字化人才培养和文化氛围打造方面的实践。在本次分享开头我说过一句话——每一个人都不简单，每一瓶酒才放光彩。我把它总结成数字化文化打造的三层地平线。</p><p></p><p>第一层地平线，解决人的通识和理解问题。刚才在介绍战略的组织问题时，提到了存量改造、增量发展和变量的创新。其中会遇到人的问题就是存量之难、增量之困，变量之险。这些问题都是组织能力不足和个人专业能力结构不够所带来的。所以第一个层面，首先要改变人的通识和理解。</p><p></p><p>过往的几年里，我们开展了多层次的工作。第一个层面，针对全员会去推进“数字化大讲堂”，解决业务数字化未来、现在以及正在做的事情的理解问题，也就是大家能不能在同一个语言基础上对数字化形成共识。</p><p></p><p>第二个层面，纵深理解上的拉通。针对数字化人员，比如 IT 队伍和相关人员我们做“数字化十三邀”，就是一对一访谈形式，比较生动形式的主题文章、谈话、视频、微课、直播。通过针对一些关键人的理解和认知做认知知识的改变，达成共识。</p><p></p><p>第三个层面，关键人的专题培训，比如项目经理的专题培训，IT BP 的专题培训、数据人员的专题培训。这一类人主要是解决数字化关键人的技能和专业能力发展问题。就是把门槛拉高一点，把底部拉高一点，把短板堵上，这部分更多地面对的是关键人和关键人群。</p><p></p><p>第四个层面，也是专题培训，它针对的是复杂岗位的短板。比如说不会管项目，要做项目管理培训，不会做架构要做架构培训，不会数据，要做数据治理培训，不懂信息安全，要把信息安全拆解成很多课程做进阶培训。这些更多地是专对专的细分培训。通过这四类交流和培训来解决雪花人员的通识和理解问题，这叫第一层地平线。</p><p></p><p>第二层地平线是解决着力点，路径与方法问题。就是概念有了，但是下手的时候会不会干？你可能发现每天都在照猫画虎，照葫芦画瓢，形不散，但神散，没有学到根上。或者第一步迈出去了，第二步就不知道怎么干了，没有持续性，确定性不强。这样的队伍和这样的人怎么办？</p><p></p><p>雪花在做更深入的拓展，比如针对业务，我们会跟业务中心和职能团队举办数字化工作坊，通过讨论现状中的业务问题，对标标杆，参访行业做得好的案例，再回到工作坊讨论未来要做的事情。最终形成业务计划和战术举措。也就是说从业务中来到业务中去，把这些事变成真正日常工作里有绩效考核，有业务计划约束的，真正要去做的事情。</p><p></p><p>这是一类工作，就是跟业务去同向，解决同向问题，解决过程中的理解问题，解决切入点问题，解决方法问题。与此同时，要做很多的问题讨论，团队融合，形成业务计划举措。进一步的工作是不断地对执行过程中的顶层设计规划，专题规划做复盘，对做的项目做阶段复盘。形成复盘的文化，形成复盘逻辑。</p><p></p><p>另一个是指标化。就是在所有的工作中立 Flag，无论是一次开发工作、一次测试工作，还是运维工作，在每个季度会议中都要做同比和环比的指标对比，要看到结果是不是真的变了，通过这种文化的打造形成结果导向的文化，也就是让雪花的数字化队伍既要拿项目建设的结果，更要拿用户使用的成果，还要拿业务应用的效果。只有这样，着力点、路径方法和方向才是正确的，否则走着走着就走偏了。</p><p></p><p>把项目建好、让用户用起来都不是终极目标，我们的终极目标就是回到业务中去，也要从业务中来。用这种形式充分跟业务融合形成业务计划举措，融合团队来解决实际的问题。</p><p></p><p>第三层地平线是改变认知，融入战略。是要解决战略迭代问题，过去几年雪花做了战略举措的落地，叫“五化三集中一核四平台”。我们也在每个领域里做了组织人才的发展，每一年我们都会发现雪花的人、组织、外部、内部都在发生各种各样的变化，这时候怎么在战略层面找到新的发动机和驱动力就很重要。我们要做更高层面的、执委会层面的战略研讨，形成对以往三年的总结和对新三年的规划。</p><p></p><p>雪花也形成了一个习惯，就是在“3+3+3”战略的每一个执行年的最后一年，都会分几次进行大规模的战略研讨，对雪花数字化、业务、人才发展形成更多的战略共识和战略举措迭代。</p><p></p><p>举个例子，在认知层面和融入战略层面，六年前雪花做过一次组织再造。在过往的两年我们又做了组织二次转型，这是非常深刻的一次再造。就是因为雪花的业务战略，数字化进入到了新阶段。在今年年底，我们会再进一步讨论雪花组织未来的形态和变化，形成认知改变和战略融入，只有这样才会形成战略从上到下形成共识，改变认知，拉通认识，形成着力点和方法以及路线图。</p><p></p><p>这种情况下，雪花还配套信息化升级，也就是数字化项目的战略项目考核，形成对区域公司、组织、个人的指标和战略考核，在每季度、每年进行落地。这个跟大家的利益、考核指标息息相关，大家就会更加重视和认识这一点。</p><p></p><p>只有做到了所有的事情，才能真正做到“每一个人都不简单，每一瓶酒才放光彩”，雪花才会是一个充分的复合型人才的融合型组织，数字化组织。以上是我在文化氛围打造层面分享的一些过往的经验和教训。</p><p></p><p>最后我也想做一些展望，结合刚才提到的三个部分，雪花的业务战略对数字化组织和人才的需求，要解决的问题，还有数字化转型过程中对人才发展进阶的要求，我们会意识到结合业务战略，数字化转型跟雪花的业务战略是一样的，也会走“3+3+3”的过程。</p><p></p><p>比如雪花在做存量发展，增量追赶，变量探索，我们的数字化基因禀赋和业务发展节奏要吻合。雪花会执行“七•二•一”法则，这个法则同样会贯彻到团队发展和人才发展中，就是 70% 的存量，20% 的增量，10% 的变量。我们会用一些相对比较粗糙，但是比较简单的规则去衡量人才的技能结构，组织人才构成的专业结构，以及融合组织的发展结构和业务构成结构是不是符合资源配置的逻辑。</p><p></p><p>比如前三年在信息化层面，我们做的是“合纵连横、同文同轨、组链近场”。应用合纵，就是做应用的全国覆盖，再做系统连横，也就是做端到端流程的打通。无论是从费用到兑付，订单到核销，还是采购到付款，员工的费用到报销都拉通了。</p><p></p><p>“同文同轨”是指数据同文，技术同轨。我们大幅度减少冗余数据，不一致的主数据，在技术路线上做大量的规范，平台方面统一载体。在业务策略上再做组链近场，就是把渠道组成链条，让其无限接近于终端，能够近场和进场。</p><p></p><p>这个过程中可以观察到雪花的 IT 组织和数字化组织是一个项目型组织。大家是事件驱动型的做法，我们把项目分成了战略型项目——A、B、C、D 类的重要的集成项目和一般性项目。用项目群管理做横向拉通，做项目之间的协调和统一，这个过程是有效的。</p><p></p><p>中三年更多地去做 BC融合，要把终端变成流量池，要把 C 拉到 B 里去消费，要让终端和消费者非常充分地融合起来。我们要做产销一体，要让雪花的渠道推力和高端品牌的拉力结合在一起。要在运营方面做三级会员运营，让渠道运营终端，让终端运营消费者，要做同心多圆的业务运营。</p><p></p><p>这种运营需要用数字化产品线的模式来运转。产品线和项目型的最大区别是技术的人和业务的人，或者说共同的产品队伍像麻花一样搅在一起互为输入输出。没有明确的前后，不是接力棒式的做法，而是互相在阶段中输入和输出来解决问题，互相推进，形成数字化的业务和业务的数字化。</p><p></p><p>后三年要做平台赋能、数据驱动和智慧运营，这时候就会发现组织边界会进一步被打开，所有组织构成不再讲数字化、IT，职能和业务，也不讲项目和产品，更多地是讲在链条上需要什么资源，需要哪些能力，需要什么样的组织。</p><p></p><p>也就是说我们会打开组织边界，开放平台，形成 API 经济，让内部组织、外部组织、内部平台和外部平台形成基于社会、生产、销售、运营的价值链的融合型组织。企业边界进一步交叉、释放，形成社会资源池。</p><p></p><p>这是在数字化的加持之下形成的新的组织形态，我们也会在这个目标之下，结合业务发展、高端能力发展的能力，进一步推动组织变化和人才能力培养，最终做到“每一个人都不简单，每一瓶酒才放光彩”。</p><p></p><p>我的分享就到这里，谢谢大家！</p><p></p><p>扫描下图二维码，查看数字人才蓄能季高端论坛演讲实录👇</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0a/0a62973d7998330ed97f25717902ce7e.jpeg\" /></p><p></p>",
    "publish_time": "2022-11-04 11:54:39",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "40多年前对 SQL 的批判中，哪些问题至今还存在？",
    "url": "https://www.infoq.cn/article/hojIk4UAvyPXtVcFE1j4",
    "summary": "<p></p><p>&nbsp;</p><p></p><blockquote>SQL语言于1974年作为IBM System R数据库的一部分首次出现。现在50多年过去了，SQL已经成为操作大多数工业级数据库的语言，主要应用在应用程序编程和数据分析于两个领域。&nbsp;1984年11月，数学家和计算机科学家CJ Date 在 ACM SIGMOD Record 上首次发表了《SQL数据库语言批判》一文。自从这篇评论发表以来，SQL 标准已经有了许多重大更新，那么有哪些问题从当初开始批评至今仍然存在呢?</blockquote><p></p><p>&nbsp;</p><p>SQL语言于1974年作为IBM System R数据库的一部分首次出现。如今50多年过去了，实际上SQL已经成为操作大多数工业级数据库的语言，被主要应用在应用程序编程和数据分析两大领域。</p><p>&nbsp;</p><p>在我作为数据工程师和数据科学家的12年职业生涯中，大部分时间都在关注数据分析，而SQL是目前为止我用得最多的语言。我喜欢SQL，因为它给我带来了生产力，但随着时间的推移，我也意识到了它的许多缺陷和特性。</p><p>&nbsp;</p><p>站在实践者的角度，我一直很好奇这些“现实世界”的问题是否有更根本或理论性的基础。这让我想到了数学家和计算机科学家CJ Date写的《<a href=\"https://courses.cs.duke.edu/compsci516/cps216/spring03/papers/date-1983.pdf?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2Njc0MzkzNTEsImZpbGVHVUlEIjoiMndBbFgyRW1lNENQV3JBUCIsImlhdCI6MTY2NzQzOTA1MSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjoyNDM2MDc5MH0.C5yyAdk1e4D2zJNw28M86AIJgqDrAUE3U_AYafmjlws\">SQL数据库语言批判</a>\"》。Date是前IBM员工，著名的数据库研究员，EF Codd的朋友。自从这篇评论发表以来，SQL标准已经得到许多重大的更新，但哪些问题是至今仍然存在的呢?</p><p>&nbsp;</p><p>《SQL数据库语言批判》在1984年11月首次发表在ACM SIGMOD Record。本文将研究由几个IBM系统(SQL/DS、DB2和QMF)实现的SQL方言，这些系统为最初的SQL标准提供了基础。如果没有使用这些系统的直接经验，阅读本文中的SQL示例就有点像阅读17世纪的英语——它有一种生硬的、略微陌生的韵律，需要多花些力气才能理解。在下面的例子中，我将使用SQL[1983]和SQL[2022]的字眼来区分较早的方言和今天可用的方言。使用未加限定的“SQL”意味着我的评论对于两者是通用的。</p><p>&nbsp;</p><p>本文由八个部分组成，每个部分都描述了不同类别的批评：表达式缺乏正交性、函数缺乏正交性、杂项缺乏正交性、形式定义、与宿主语言不匹配、函数缺失、错误和缺失关系型模型方面。在接下来的文章中，我将逐一阐述这些部分，不那么正式地谈谈这些批评，并解释一下我觉得这些批评指出的问题现在是否仍还存在。</p><p></p><h3>缺乏正交性：表达式</h3><p></p><p>&nbsp;</p><p>编程语言的正交性大致意味着该语言的构造就像乐高积木——少量的基本块可以以简单直观的方式重新组合。缺乏正交性(再次声明，是随口聊聊哈)意味着该语言在如何将组件组合在一起的方式上有很多特殊情况和异常，这使得学习起来很复杂，使用起来不直观。</p><p>&nbsp;</p><p>本节首先定义表表达式、列表达式、行表达式和标量表达式，它们分别是SQL中返回表、列、行和标量值的表达式。在SQL[1983]中，SELECT语句的FROM子句被限制为只能指定表或视图的名称，而不是通用的表表达式，即子查询或公共表表达式(CTE)。这使得几乎不可能构建嵌套表达式(关系代数的关键特性之一)。现代SQL提供了在FROM子句中引用CTE或子查询的能力，所以这个问题在今天来看基本上已不存在了。然而，表表达式在某些上下文中可以采用“表名”的形式，但在其他上下文中必须是&nbsp;SELECT * FROM tablename形式，不知道是怎么想的，真是有趣。</p><p>&nbsp;</p><p>例如，为什么不允许下面的表达作为合法声明：</p><p>&nbsp;</p><p><code lang=\"null\">tablename;</code></p><p>&nbsp;</p><p>它和下面这句将返回相同的结果：</p><p>&nbsp;</p><p><code lang=\"null\">SELECT * FROM tablename;</code></p><p></p><p>两者都是表表达式(返回表的语句)，因此应该允许在任何接受表表达式的地方使用，例如SELECT语句的FROM子句或语句本身。</p><p>&nbsp;</p><p>虽然SQL[1983]中的SELECT语句不允许出现在FROM子句中，但是EXISTS子句需要它们作为参数。此外，这里的SELECT语句必须是一个列表达式(只选择单个列)，不用使用返回表、行或标量的语句。什么时候SELECT语句是表表达式、列表达式、行表达式或标量表达式？语言本身没有提供任何指导，这完全依赖于查询本身。例如：</p><p>&nbsp;</p><p><code lang=\"null\">SELECT a FROM tablename;</code></p><p></p><p>是一个列表达式，但是</p><p><code lang=\"null\">SELECT a,b FROM tablename;</code></p><p></p><p>是一个表表达式。这种随意性在SQL[2022]中仍然存在。</p><p>&nbsp;</p><p></p><h3>缺乏正交性：函数</h3><p></p><p>&nbsp;</p><p>虽然通过引入子查询和CTE，本节中的一些问题得到了缓解，但现在仍然存在许多问题。</p><p>&nbsp;</p><p>SQL中的列函数以一列标量作为输入，返回一列标量值(如MD5函数或类型转换函数)，或单个标量(如SUM等聚合函数)。评论作者在这里提出，由于列函数以一列标量值作为输入，所以应该允许任何有效的列表达式。下面是一个不符合这种情况的例子：</p><p>&nbsp;</p><p><code lang=\"null\">SELECT SUM(val) FROM tbl</code></p><p></p><p>是可以的，但是</p><p>&nbsp;</p><p><code lang=\"null\">SELECT SUM( SELECT val FROM tbl )</code></p><p></p><p>就不行，即使“SELECT val FROM tbl”是一个有效的列表达式-它从表tbl返回单个列val。</p><p>&nbsp;</p><p>这里的关键问题是，第一个示例中的SUM函数的输入是一个列名，但是仅有列名并不能定义列表达式。相反，我们必须查看上下文(即完整查询)来理解“val”列来自“tbl”。换句话说，在SQL中，F(X)不仅依赖于X，还依赖于F周围的上下文信息：</p><p><code lang=\"null\">SELECT SUM(amount) FROM purchases;</code></p><p>和</p><p><code lang=\"null\">SELECT SUM(amount) FROM purchases WHERE 1 = 0;</code></p><p></p><p>这两个查询大相径庭，尽管列函数调用&nbsp;SUM(amount) 是相同的。</p><p>&nbsp;</p><p>这也使得嵌套聚合变得困难。考虑下面的例子：我们有一个电子商务网站的采购数据库，并希望检索(1)每个客户的总消费金额，和(2)所有客户的平均消费。SQL[1983]不能在单个语句中解决这个问题。SQL[2022]可以通过使用CTE解决这个问题:</p><p>&nbsp;</p><p><code lang=\"null\">WITH spend_per_customer AS (\n    SELECT\n      SUM(amount) AS customer_total\n    FROM purchases\n    GROUP BY customer\n  )\n  SELECT AVG(customer_total) FROM spend_per_customer</code></p><p></p><p>然而，以下(可以说它更自然)语句是不允许的:</p><p>&nbsp;</p><p><code lang=\"null\">SELECT\n    AVG(\n        SELECT SUM(amount) FROM purchases GROUP BY customer\n    )</code></p><p></p><p>在上面的查询中，内部的SELECT是一个列表达式(SELECT语句返回单个列)，AVG是一个接受单个列的函数。但是，上面的语句在大多数数据库中不能用。在Snowflake中，上面的查询返回错误消息“单行子查询返回不止一行”，这让我感到困惑，因为显然AVG函数期望输入不止一行。</p><p>&nbsp;</p><p>另一个有趣的推论是HAVING子句的必要性。HAVING子句是SQL面试官最喜欢的“小手段”。</p><p>它与WHERE子句有何不同？对于第一次接触SQL的人来说，答案并非显而易见。像这样的专门知识当然可以作为是否有相关经验的指示器，但它也很容易被视为SQL语言的缺陷。</p><p>&nbsp;</p><p>HAVING子句为列函数提供了作用域提示，表示函数输入必须使用GROUP BY子句。评论作者在这里直言不讳：“SQL中只需要HAVING子句和GROUP BY子句作为列函数参数范围规则的结果。”</p><p>&nbsp;</p><p>评论作者还描述了表函数(以表而不仅仅是列作为输入的函数)，并对随意和非正交语法的几个实例表示遗憾。首先，EXISTS函数(接受一个表表达式，返回一个标量)只能在WHERE子句中使用，而正交性规定在语言接受标量的任何地方都应该允许使用它。其次，UNION函数由一个固定操作符表示，由于SQL[1983]不允许在FROM子句中使用任意表表达式，因此不可能在两个表的UNION上计算列函数。这个问题在SQL[2022]中解决了，因为下面的语法现在是合法的：</p><p>&nbsp;</p><p><code lang=\"null\">  SELECT\n    SUM(val)\n  FROM (\n    SELECT val FROM instore_purchases\n    UNION ALL\n    SELECT val FROM online_purchases\n  )</code></p><p></p><p>&nbsp;</p><p></p><h3>缺乏正交性：杂项</h3><p></p><p>&nbsp;</p><p>本节包含了与底层系统的功能和实现细节相关的内容——主机/指示器变量、游标、“long”字段(例如，长度大于254的字符字段)。有些限制确实非常令人不解(在WHERE或GROUP BY子句中不能引用“长”字段！)，但是现代数据库系统不再受这些限制。本节中的其他事项已经因为更新SQL标准解决了。以下限制已经不存在，排名不分先后：</p><p>&nbsp;</p><p>GROUP BY中只允许简单表达式(列名)；NULL字面值不能用于需要标量常量的地方；没有UNION ALL的概念；只能在一个级别上使用GROUP BY构造进行聚合。</p><p>&nbsp;</p><p>虽然这里的大部分讨论已经无关紧要了，但是今天关于NULL值的讨论仍然和以前一样令人担心。NULL处理中的不一致性会导致一些完全意想不到的可怕结果，尤其是在聚合函数中。聚合函数忽略NULL值，导致一个不幸的事实：对于值为x1, x2，…，xn的列X，</p><p>&nbsp;</p><p><code lang=\"null\">x1 + x2 + … + xn != SUM(X)</code></p><p></p><p>在Postgres中</p><p><code lang=\"null\">(X1 + X2) != SUM(X1) + SUM(X2)</code></p><p>&nbsp;</p><p>可以看到<a href=\"https://www.db-fiddle.com/f/hUeLXcYP38eEqZmvLbdumZ/1?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2Njc0MzkzNTEsImZpbGVHVUlEIjoiMndBbFgyRW1lNENQV3JBUCIsImlhdCI6MTY2NzQzOTA1MSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjoyNDM2MDc5MH0.C5yyAdk1e4D2zJNw28M86AIJgqDrAUE3U_AYafmjlws\">下</a>\"<a href=\"https://www.db-fiddle.com/f/hUeLXcYP38eEqZmvLbdumZ/1?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2Njc0MzkzNTEsImZpbGVHVUlEIjoiMndBbFgyRW1lNENQV3JBUCIsImlhdCI6MTY2NzQzOTA1MSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjoyNDM2MDc5MH0.C5yyAdk1e4D2zJNw28M86AIJgqDrAUE3U_AYafmjlws\">面的</a>\"<a href=\"https://www.db-fiddle.com/f/hUeLXcYP38eEqZmvLbdumZ/1?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2Njc0MzkzNTEsImZpbGVHVUlEIjoiMndBbFgyRW1lNENQV3JBUCIsImlhdCI6MTY2NzQzOTA1MSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjoyNDM2MDc5MH0.C5yyAdk1e4D2zJNw28M86AIJgqDrAUE3U_AYafmjlws\">例</a>\"<a href=\"https://www.db-fiddle.com/f/hUeLXcYP38eEqZmvLbdumZ/1?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2Njc0MzkzNTEsImZpbGVHVUlEIjoiMndBbFgyRW1lNENQV3JBUCIsImlhdCI6MTY2NzQzOTA1MSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjoyNDM2MDc5MH0.C5yyAdk1e4D2zJNw28M86AIJgqDrAUE3U_AYafmjlws\">子</a>\"：</p><p>&nbsp;</p><p><code lang=\"null\">  WITH v AS (\n    SELECT * FROM ( \n        VALUES \n          (1, 5),\n          (null, 10) \n      ) AS t (column1, column2) \n  )\n  SELECT \n    SUM(column1 + column2) AS sum_of_addition \n    , SUM(column1) + SUM(column2) AS addition_of_sum \n  FROM v;</code></p><p></p><p>输出</p><p>&nbsp;</p><p><code lang=\"null\">sum_of_addition | addition_of_sum \n   -----------------+-----------------\n                  6 |              16\n   (1 row)\n          </code></p><p></p><p></p><h3>形式定义、与宿主语言不匹配、缺少函数</h3><p></p><p>&nbsp;</p><p>这三个部分放在一起，因为我发现它们与现代数据库、现代SQL或分析查询处理没有特别的关系。</p><p>&nbsp;</p><p>形式定义。本节重点介绍了开发中的SQL[1983]标准与IBM实现不一致或不够精确的地方——游标定位、锁语句、别名作用域规则等等。我认为这一部分更多的是对标准的批判，而不是语言本身。此外，其中许多问题(游标、锁)与分析处理无关，因此我个人对此不是很感兴趣。</p><p>&nbsp;</p><p>与宿主语言不匹配。与前一节类似，我发现这一点基本上无关紧要。作者指出了SQL和宿主语言(如IBM PL/I)之间的许多差异，这些差异会给程序员带来麻烦。今天，有很多潜在的宿主语言(Python、Ruby、Javascript，只是举几个例子)，每个都有自己的特点，SQL不可能符合所有这些特点。像<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2Njc0MzkzNTEsImZpbGVHVUlEIjoiMndBbFgyRW1lNENQV3JBUCIsImlhdCI6MTY2NzQzOTA1MSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjoyNDM2MDc5MH0.C5yyAdk1e4D2zJNw28M86AIJgqDrAUE3U_AYafmjlws\">LINQ</a>\"这样的技术旨在解决其中的一些问题，但与上面一样，这些主要针对的是应用程序编程用例。</p><p>&nbsp;</p><p>缺少函数。这里提到的函数主要都与游标和锁定有关，我认为它们是与底层系统相关的特定于实现的细节。</p><p>&nbsp;</p><p></p><h3>错误</h3><p></p><p>&nbsp;</p><p>本节描述了评论作者认为单纯是语言设计错误的几个方面。这里，NULL是最好的例子：</p><p>&nbsp;</p><p></p><blockquote>在我看来，null这个概念带来的麻烦远远超过它的价值……当查询中涉及的数据本身不精确时，系统永远不应该对查询产生(虚假的)精确的答案。至少系统应该为用户提供显式的选项，可以忽略空值，或者只要它们存在就视为异常&nbsp;</blockquote><p></p><p>&nbsp;</p><p>有趣的是，这与大家的共识相距甚远，甚至在关系模型的最初开发人员中也是如此。EF Codd自己在他的<a href=\"https://en.wikipedia.org/wiki/Codd%27s_12_rules?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2Njc0MzkzNTEsImZpbGVHVUlEIjoiMndBbFgyRW1lNENQV3JBUCIsImlhdCI6MTY2NzQzOTA1MSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjoyNDM2MDc5MH0.C5yyAdk1e4D2zJNw28M86AIJgqDrAUE3U_AYafmjlws\">12条规则</a>\"中接受了NULL（第三条）的用法。</p><p>&nbsp;</p><p>其他“错误”包括：</p><p>&nbsp;</p><p>主键是索引的一部分，而不是在创建表时指定的。这里的理由是，主键实际上是表的一个逻辑属性，不应该与主要处理该数据的物理访问路径的索引混为一谈。今天，大多数数据库都允许CREATE TABLE语句包含一个主键，所以这个问题已经在很大程度上得到了纠正。</p><p>&nbsp;</p><p>SELECT *对于交互式查询无疑很方便，但在程序中使用时却极易出错。</p><p>&nbsp;</p><p>Date认为SELECT * 应该只允许在交互式会话中使用。我在很大程度上同意这种观点，但定义“互动会话”可不是个随便说说就能确定的问题。</p><p>&nbsp;</p><p></p><h3>不支持关系模型的方面</h3><p></p><p>&nbsp;</p><p>本节是另一个杂项列表，事实上每一项都阻止了SQL[1983]真正的成为“关系型”。</p><p>&nbsp;</p><p>主键和外键：主键很容易被SQL[1983]忽略，而外键甚至不存在。虽然SQL[2022]允许外键，而且许多数据库强制引用完整性，但SQL[2022]仍然没有完全理解主键和外键的语义。两个例子：</p><p>&nbsp;</p><p>当在表的主键上执行GROUP BY时，并且包括该表中的其他列，因为主键保证惟一，所以保证那些其他列也将是惟一的；但是，SQL要求这些列也要包含在GROUP BY中。外键与其对应的主键之间的连接很容易是隐式的，但是SQL仍然要求显式地写出连接条件。</p><p>&nbsp;</p><p>域：域是“类型”的另一个说法。SQL[1983]中的类型系统只允许原始类型(int、char、float等)。如今，Postgres提供了对任意复杂度的用户定义类型的支持，以及允许用户将原语类型限制为可接受值的检查约束。不幸的是，大多数OLAP数据仓库不支持用户定义的类型，SQL本身对这个主题没有太多发言权。</p><p>&nbsp;</p><p>举一个简单的例子来说明这有多么危险，许多数据库都有带有整型主键ID列的表。显然，不是所有对整数合法的操作都应该允许在主键列上——两个PK id的相加、相乘或相除意味着什么？SQL和大多数数据库都很乐意让你执行这些操作。</p><p>&nbsp;</p><p>关于型赋值：此处的批评就简单一句话：</p><p>&nbsp;</p><p></p><blockquote>一种受限形式的关系型赋值是通过INSERT…SELECT，但是该操作不会覆盖目标表之前的内容，并且赋值的源不能是任意的代数表达式(或等效的SELECT)。&nbsp;</blockquote><p></p><p>&nbsp;</p><p>现在情况已经不同了。关系型赋值可以通过CREATE或REPLACE TABLE AS来完成。通过子查询和CTE，源可以是任何代数表达式。</p><p>&nbsp;</p><p>SQL[1983]不支持显式JOIN、INTERSECT和DIFFERENCE这些操作符，SQL[2022]已经支持了。SQL92标准中添加了JOIN。大多数数据库都支持INTERSECT和MINUS，即使它们不支持，也可以使用JOIN实现语义上相同的操作符。</p><p>&nbsp;</p><p></p><h3>总结</h3><p></p><p>虽然对SQL提出的批评有许多已经通过ANSI标准的更新得到了解决，但还有许多仍未解决。许多地方仍然缺乏正交性，这使得SQL学习和使用起来很是笨拙。但是，从会写SQL的人的数量来看，我怀疑它的学习曲线并不是那么高。相反，缺少关系型模型的组件和NULL值引起的问题可能是许多查询看起来正确但提供错误答案的原因，特别是对于那些对自己编写查询语句的能力很有信心，但不熟悉那些比较隐蔽陷阱的人来说。</p><p>&nbsp;</p><p>除了上面列出的改进，在<a href=\"https://www.red-gate.com/simple-talk/opinion/opinion-pieces/chris-date-and-the-relational-model/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2Njc0MzkzNTEsImZpbGVHVUlEIjoiMndBbFgyRW1lNENQV3JBUCIsImlhdCI6MTY2NzQzOTA1MSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjoyNDM2MDc5MH0.C5yyAdk1e4D2zJNw28M86AIJgqDrAUE3U_AYafmjlws\">2014年的一次采访中</a>\"，CJ Date说：“我们没有意识到SQL是或将会是多么糟糕。（注意，它现在比当时糟糕得多，尽管它从一开始就很糟糕)。”这句话让我想知道，如果Date本人要写一篇更新的评论，它会是什么样子的？我猜他的大部分批评都是围绕着SQL进一步偏离关系型模型展开的，但是我想不出具体的例子。</p><p>&nbsp;</p><p>SQL在市场上的主导地位意味着每个DBMS供应商都有强烈的动机来实现SQL接口，每个有抱负的程序员都必须学习它。那么，这是否意味着尽管存在各种问题，我们还是要永远使用SQL呢？我认为，SQL将以某种形式继续存在很长一段时间，甚至可能成为主导性的查询语言。但是，我坚信吸取了过去经验教训的新查询语言仍然有发展的空间。</p><p>&nbsp;</p><p>此外，我认为现在是这种语言取得成功的最佳时机。为什么我会这样认为？个中原因超出了这篇文章的范畴，也许下一篇文章我会展开来聊聊。</p><p>&nbsp;</p><p>作者简介</p><p>&nbsp;</p><p>Carlin Eng，<a href=\"https://strava.com/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2Njc0MzkzNTEsImZpbGVHVUlEIjoiMndBbFgyRW1lNENQV3JBUCIsImlhdCI6MTY2NzQzOTA1MSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjoyNDM2MDc5MH0.C5yyAdk1e4D2zJNw28M86AIJgqDrAUE3U_AYafmjlws\">Strava</a>\"前数据工程师和工程经理，后来在雪花公司做了两年的销售工程师和数据科学家，现任<a href=\"https://www.geteppo.com/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2Njc0MzkzNTEsImZpbGVHVUlEIjoiMndBbFgyRW1lNENQV3JBUCIsImlhdCI6MTY2NzQzOTA1MSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjoyNDM2MDc5MH0.C5yyAdk1e4D2zJNw28M86AIJgqDrAUE3U_AYafmjlws\">Eppo</a>\"数据工程主管。狂热的自行车手，加州旧金山海豚俱乐部中令人骄傲的一员。</p><p>&nbsp;</p><p>原文链接</p><p>&nbsp;</p><p><a href=\"https://carlineng.com/?postid=sql-critique#blog\">https://carlineng.com/?postid=sql-critique#blog</a>\"</p><p>&nbsp;</p><p>译者简介</p><p></p><p>冬雨，小小技术宅一枚，现从事研发过程改进及质量改进方面的工作，关注研发、测试、软件工程、敏捷、DevOps、云计算、人工智能等领域，非常乐意将国外新鲜的IT资讯和深度技术文章翻译分享给大家，已翻译出版《深入敏捷测试》、《持续交付实战》。</p><p>&nbsp;</p><p>&nbsp;</p><p></p>",
    "publish_time": "2022-11-04 14:22:39",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "医学生自学机器学习，利用GPT-3开发写作助手，收入月月翻倍，项目被收购后成人生赢家",
    "url": "https://www.infoq.cn/article/kRwmRjy1uqro43McteIj",
    "summary": "<p></p><blockquote>一位医学生用著名的 OpenAI GPT-3 模型做出来了市面上最棒的写作助手。</blockquote><p></p><p></p><p>创业者卖掉自己创立的企业经常是一个励志故事，而如果这个企业是他念大学的时候办的，听起来就更厉害一些。</p><p></p><p>但 The Exit Game 日前报道的这家公司的创业史尤其不一样，因为这一位创业者搞的是人工智能，他之前却是医学院的学生，机器学习技术是他现学现用的。这位创业者名叫 Qasim Munye。</p><p></p><p></p><h2>早期项目</h2><p></p><p></p><p>Qasim 这人很活络。14 岁的时候他就在 eBay 卖电商优惠码了，每个码 1 英镑，当时差不多人民币 10 块钱。他通过卖码赚了自己的第一桶金。17 岁时，他又开始卖 iPhone 手机壳。那时候他干的事情和淘宝上一些新卖家是一样的，就是设法提升自己的排名，然后完全不进货，每次收到订单就从另一个卖家那里订货。</p><p></p><p>很快他一天就要收到 60 笔订单，每次复制粘贴订单信息的活他也懒得干，所以找了个脚本自动完成任务。为了不出问题，每次运行脚本的时候还得盯着点。就这样他赚到了医学院的第一年学费。</p><p></p><p>19 岁的 Qasim 赶上了移动浪潮，他也想搞点事情，于是在 Youtube 上自学了 Android 编程。然后他写了个游戏名叫 Beat30，又在 reddit 子版自己写了点软文，下载量很快飙升到了一万次。特朗普总统上任后他又借机做了个网站名叫 HowLongUntilTrumpLeaves.com，给总统任期倒计时。他还做了个机器人，有哪位知名政治评论家在 Twitter 或 Facebook 上发言就把人家的帖子自动转自己网站上。这个网站很快走红，他趁机把它卖了，又付了一笔学费。</p><p></p><p></p><h2>Shortly：短篇小说应用</h2><p></p><p></p><p>在医学院二年级的时候，他发现了 Writing Prompts 这个 reddit 子版，并迷上了在里面看别人写的故事。他又做了一个名叫 Shortly 的应用，应用会根据用户的可用阅读时间来推荐故事。他故技重施，这个应用又火了。到这一步时，他有点迷茫，就加入了学校的一个孵化器，名叫 Kings20。</p><p><img src=\"https://static001.infoq.cn/resource/image/2e/de/2e83a72bde3394d100b5413454f773de.jpg\" /></p><p></p><p>两年时间里，Shortly 下载量达 5 万次，推荐了 1 百万个故事，在 App Store 里曾被推荐为当日应用，而且是 App Store 讲故事应用百强。</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/75/7528773761b3e0a88a00e1f1111e453b.jpeg\" /></p><p></p><p>Shortly 的界面很简单，你有几分钟空闲就点一下，它就自动给你推荐故事</p><p></p><p></p><h2>Shortly：你的 AI 写作伙伴</h2><p></p><p></p><p>其实运营这个应用，没花 Qasim 多少时间，其他空闲时候，他就开始钻研各种创业情报，比如 Paul Graham 的文章、创业企业电台、Y-Combinator 视频什么的。他对机器学习特别感兴趣，但问题是他是学医的，专业跨度很大，所以他就用早晨上学路上的时间学机器学习课程。</p><p></p><p>他开了一家初创公司，很快一年过去了。Shortly 的用户越来越多，开始有了小社区，开始有人想在里面写故事，这成为了 Qasim 的下一个机会。于是，他为 Shortly 增加了自己写故事分享的功能。</p><p></p><p>之后不久，2020 年 6 月，OpenAI 发布了著名的 GPT-3 模型，这个模型写英文的水平比很多人类都强。之前 Qasim 就了解过旧版模型，所以早早申请了内测资格，用的是 Shortly 公司的名义。</p><p></p><p>然后，他把 GPT-3 整合进了 Shortly，做了一个新功能叫 Write for me。这个功能可以自动分析用户写过的内容并生成一段新的文章，简直就像魔法一样。他又在 reddit 上发帖宣传，结果很快有 10 万人好奇地涌进了应用。这下 Shortly 成了以写故事而不是读故事为主的应用了。</p><p></p><p>他参照 Paul Graham 的文章建议，开始不断听取用户的反馈并快速迭代，集中解决产品核心问题，深入研究 GPT-3 和 AI 技术。他发现给 Shortly 引入其他 AI 特性也挺简单。最后 Shortly 演变成了一个个人写作助理，帮助作家们在才思枯竭的时候打开思路。</p><p></p><p>很快 Shortly 就成了初创公司里面少有的赢家。他的产品命中了市场空白。年轻的初创公司在快速增长期每周增长 10%，但 Shortly 每周平均增长 20%——他的收入每个月都能翻倍。</p><p></p><p>在 Shortly 开始收费 8 个月后，按月订阅的用户就超过了 3000 名，这简直是梦幻般的成长。而且名利场、Vice 等大媒体和很多 YouTube KOL 都主动宣传 Shortly，TikTok 上也有很多人提到 Shortly 的事情。Qasim 好好利用了这种病毒营销手段。</p><p></p><p></p><h2>Twitter 上的意外消息</h2><p></p><p>大约在 2021 年春天，Qasim 收到了他的一位直接竞争对手，Jasper（当时还叫 conversion.ai）的首席执行官 Dave Rogenmoser 的消息。</p><p></p><p>GPT-3 催生了人工智能写作助手市场，大把资金涌入，很多企业都在尝试。Jasper 的另一个竞争对手 Copy.ai 拿到了红杉资本的风投，Jasper 也筹集了一大笔投资，开始攻城略地。之前他们已经收购了一家名为 HeadLime 的对手。这次 Dave 的意思也是要收购 Shortly。</p><p></p><p>之前 Qasim 没想过卖掉公司的事情，他主要的精力都放在平衡创业和医学生学业上了。于是他联系了自己的交易顾问 Ismail Jeilani，后者是 LiveLink 的 CEO，擅长推销和筹款。Ismail 开始帮 Qasim 为 Shortly 的未来做打算。他们列出了三个选项：</p><p></p><p>卖掉公司。Qasim 有自己的心理价位，如果对方愿意接受，他也愿意卖。这是他的第一家公司，但可能并不是他的最后一家。拿了钱后他可以干别的事情。筹集资金并加速增长。如果他想拿风投，必须在 PPT 里写清楚，Shortly 未来将会怎样冲击十亿美元的市场，而且可能得承诺自己要用 10 年左右的时间尽可能实现目标。将创业公司作为一个兼职项目来运营并获利。Shortly 已经有 3000 订户了，而他的成本几乎只有 GPT-3 许可和云托管费用。他的利润很高，增长可以预期。所有这些选择都是有利可图的，但 Qasim 其实已经做出了决定。</p><p></p><p>如果他筹集资金，他将不得不扩大公司规模，建立团队，招聘管理、运营、工程、营销人员。他知道这种事情没那么轻松。</p><p></p><p>随着时间的推移，他的产品还得建立技术壁垒。Shortly 的产品体验完全依赖于 GPT-3。他知道它有优点更有缺陷，但不知道自己是否愿意开发能够弥补缺陷的技术。</p><p></p><p>虽然 Shortly 取得了成功，但终归只是他的兴趣产物。他喜欢人工智能，希望尽可能探索这项技术的边界。他真的想在接下来的 10 年里帮助企业写出更好的文案吗？</p><p></p><p>出售公司是最有吸引力的选择，但只要是谈判就得有筹码，他的筹码恰恰就是放弃出售的底气。所以不管他愿不愿意，为了这笔交易他都得开始找投资。如果 Qasim 能够从外部投资者那里获得高估值，公司就能卖更多钱。</p><p></p><p>Shortly 的收入很好，意味着公司是 A 级初创企业，这一级别的公司估值一般超过 1500 万美元，因为它们具有很大的增长潜力。Ismail 开始将他介绍给潜在的投资者。</p><p></p><p></p><h2>交易进入了严肃阶段</h2><p></p><p></p><p>Qasim 回复了 Dave，说他有兴趣讨论“合作”，还说他正在积极为 Shortly 寻找投资。</p><p></p><p>Jasper 刚刚收购了 Headlime，所以所有流程都轻车熟路。他们也在使用 GPT-3，对相关成本也很清楚，看起来交易很快就能完成了。当然 Jasper 要做背调，结果惊奇地发现自己要收购的公司老板是医学院的一个自学成才的人工智能爱好者。</p><p></p><p>Qasim 也清楚自己的优势在哪里。Shortly 擅长长文写作，竞品用户会因为这个跑到 Shortly 这里来。</p><p>Jasper 先报了个意向价格，非常接近 Qasim 的预期，所以 Qasim 觉得有戏了。他回复说 Shortly 收入很高，公司应该值更多才对。而且他又强调了自己在找投资，有其他选项。最后他报了最终价格，比给风投的估值宣传低非常多。</p><p></p><p>Jasper 的团队立刻接受了，并开始了他们更深入的尽调。他们要求提供各种指标以及相关证据。那天晚上，Qasim 收到了一份更正式的意向合同。</p><p></p><p>Jasper 的团队发送了一份意向书（LOI）和一份保密协议（NDA）。现在事情严肃了起来，该找律师了。Qasim 联系了其他做过并购的创始人，并为自己找到了可靠的律师。</p><p></p><p>双方都希望这笔交易能够快速完成。毕竟 Jasper 刚刚完成了 Headlime 的收购，他们已经准备就绪。他们估计两周内就能搞定全部流程，付清款项。</p><p></p><p>但计划往往赶不上变化。</p><p></p><p>这笔交易有很多来回，Qasim 的要求如下：</p><p></p><p>交易应以英镑（GBP）而非美元计费。这样 Qasim 就不用操心外汇的事了。交易必须依据英国法律执行。这样 Qasim 更容易解决将来可能出现的问题，因为他在英国。Jasper 同意了，更新了意向书并签署了文件。现在收购流程可以正式启动了。Jasper 想查看他的代码库、路线图、已知问题以及公司所做的一切的证明。Shortly 一切合规，所以这个过程一帆风顺。</p><p></p><p>与此同时，律师们已经着手起草股份购买协议。时光飞逝，每过一周，Qasim 的收入都在快速增长，而他之前同意的估值也变得过时了。</p><p></p><p>尽管 Qasim 对交易价格很满意，但他的顾问们却催着他提价，因为时间拖延意味着他亏本了。他不得不把医学院的考试推迟到夏天，这样他才能全神贯注地处理这笔交易。Jasper 理解并同意了更高的估值。</p><p></p><p>协议是在一个月后起草的，但现在双方的来回更多了。这类收购协议都会变成一场“领地”争夺战，律师们试图从各个角度为他们的客户争取利益。但双方都告诉自己的律师不要那么苛刻。</p><p></p><p>收购于 4 月初开始，6 月款项付清，流程结束。创业圈子里都知道，钱存进银行的那一刻才算交易完成。</p><p></p><p></p><h2>接下来：完成学业，继续研究 AI</h2><p></p><p></p><p>Jasper 很快接手了 Shortly，Qasim 帮助他们在接下来的两周内完成了过渡。</p><p></p><p>Qasim 的医学院课程还剩一年，他决定念完大学，成为 Qasim Munye 医生。</p><p></p><p>他回去继续研究自己感兴趣的人工智能领域。他对人工智能的热情和出售公司的做法为他开启了更多机遇。他会见了 OpenAI 的创始人 Greg Brockman，后者将他介绍给了 Y-Combinator 总裁 Sam Altman。两人都为他今后的事业提供了很好的建议。</p><p></p><p>Qasim 还在钻研 AI 领域的前沿技术。他喜欢使用大型 AI 模型，探索如何使用它们来创建出色、可靠和可扩展的产品。</p><p></p><p>Shortly 的成就给我们带来哪些启示？</p><p></p><p></p><h3>无论做什么交易都要给自己找筹码</h3><p></p><p></p><p>如果对方觉得你别无选择，那么他们就会挑挑拣拣甚至狮子大开口了，Qasim 的筹码就是找风投，这种成功的初创企业找风投太正常了，而且因为获得投资而放弃出售也非常常见。如果 Shortly 找到了风投，开始大规模发展，Jasper 就可能遭遇强大的竞争对手。这样 Jasper 最佳的选择就是提价收购。</p><p></p><p>而且找风投也能给自己的公司更明确的估值，就像是找工作的时候用其他公司的 Offer 为自己争取更多薪资一样。如果别人给的估值很高，那么出售时定一个低得多的价格还能显得对方占了便宜，双赢。</p><p></p><p></p><h3>机会总是留给有准备的人</h3><p></p><p></p><p>常赌必输，如果有人总是赌赢，那就说明他其实没有在赌，背后总有你不知道的故事。</p><p></p><p>Qasim 每一次创业都抓住了机会，因为他时刻都在紧跟潮流，一旦有机会就采取行动，总是在学习储备知识。这样他很容易快速做出新的东西来，抓住最宝贵的时机。</p><p></p><p></p><h3>光有资源不够，你得会用</h3><p></p><p></p><p>Qasim 很喜欢问问题，无论是向更有经验的开发人员寻求最佳实践，还是向设计师寻求反馈，他总是在向周围人学习。他不会闭塞在自己的小世界里孤芳自赏，而是张开双手拥抱广大的世界，通过与他人互动来汲取新的知识和见解。很多人周围不缺资源，但问题是他们不像 Qasim 这样懂得充分利用这些资源。</p><p></p><p></p><h3>你的标签不是你的束缚</h3><p></p><p></p><p>Qasim 是医学生，之前他赚外快的时候甚至还是中学生。但他并没有因为自己是医学生就对代码敬而远之。就像扎克伯克在哈佛大学读心理专业时也在写代码一样。</p><p></p><p>一个人的身份标签并不是他的束缚，不能限制他的能力边界。创新是没有边界的，Qasim 医生同样可以是成功企业的创始人。</p><p></p><p>也许有一天的午后，Qasim 读着医学书籍时瞟了一眼银行账户的存款余额，身边的屏幕上是新一期人工智能技术课程的页面。</p><p></p><p>在这样奇妙的氛围里，他会想起多年前十四岁的自己决定在 eBay 上卖优惠码的那一刻。如果当年他犹豫并放弃了，今天他就不会有这样的生活。</p><p></p><p>原文链接：</p><p></p><p>https://theexitgame.substack.com/p/shortly-the-ai-powered-writing-assistant</p>",
    "publish_time": "2022-11-04 14:24:52",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "核心产品全面Serverless化、开源300多个AI模型加速软件AI化，阿里云如何抓住技术“定义权”?",
    "url": "https://www.infoq.cn/article/epIkKqEufthFWNRmTKFW",
    "summary": "<p></p><p>“阿里云将坚持技术长征，抓住未来技术的定义权。”阿里云智能总裁张建锋在 2022 云栖大会上表示。</p><p></p><p>张建锋表示，随着新一轮的科技变革深入发展，一个全新的计算体系正在到来。过去十多年，云的创新主要集中在软件领域，首先出现了分布式虚拟化，而后实现了资源池化，形成了广泛的应用规模。现在，云计算已经从软件创新，走向软硬件协同创新，用云来定义整个 IT 硬件体系。</p><p></p><p>张建锋认为，云计算给软件研发范式带来的变革有三个层次：第一，新兴软件开发方式崛起，软件架构全面 Serverless 化；第二，软件开发不再是程序员的专利，低代码让未来 80% 应用能够由业务人员直接开发；第三，未来所有软件都是 AI 化的，大模型开源将加速 AI 真正普及。其中，Serverless 是软件研发范式变革中最重要的趋势之一。</p><p></p><p>在本届云栖大会上，阿里云向外界展示了自己最新的研发成果和技术趋势分析。继飞天为阿里云打下扎实技术基础后，自研 CPU 芯片倚天 710、下一代云计算体系架构 CIPU 等将为阿里云构建第二技术曲线，成为云面向下一代技术构建的核心竞争力。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/be/be3bdeae4414285faf41eb46e7504a0b.png\" /></p><p></p><p></p><h3>“倚天 + 飞天 +CIPU”组合，提升 20% 以上性能</h3><p></p><p></p><p>为进一步优化数据处理和传输效率，阿里云构建了以数据为中心的新型云计算架构体系，提供近网络计算和近存储计算的加速技术支撑。</p><p></p><p>飞天操作系统在 2013 年首次全球范围内突破单一集群 5000 台服务器规模（飞天 5K），并率先对外提供这一能力。此后，飞天操作系统成功支撑了十多年双 11 和 12306 春运购票等极限并发场景。</p><p></p><p>而在今年的大会上，阿里云发布了一款云数据中心专用处理器 CIPU，替代 CPU 来管理和加速计算、存储和网络资源。CIPU 是一种全新的架构方式，实现了全面专用硬件加速的高性能，包括高带宽、高吞吐和弹性 RDMA 的能力。</p><p></p><p>在飞天 +CIPU 加持下，Redis/Tair 数据库的缓存 QPS 性能可提升 80%，数据库的主从复制延迟降低 50%、全局一致性读性能提升 5~10 倍，大数据 Spark 性能提升 30%，AI 深度学习图形分类训练性能提升 30%，OLAP 实时数仓查询性能提升 2 倍以上，冷热分层四种存储类型，一份数据支持多种计算引擎……另外，阿里自研的 CPU 倚天 710 已经在数据中心大规模部署，并以云的形式服务阿里巴巴和多家互联网科技公司，算力性价比提升超 30%、单位算力功耗降低 60%，成为中国首个云上大规模应用的自研 CPU。据悉，在 2021 年双 11 期间，天猫双 11 核心交易系统平滑迁移至倚天 710 实例。未来 2 年，阿里云 20% 的新增算力将使用自研 CPU。</p><p></p><p>在这个体系下，“倚天 + 飞天 +CIPU”的组合表现也非常亮眼，在数据库、大数据和 AI 及高性能计算、视频编解码等场景下普遍优于业内同类产品，性能可提升 20% 以上。</p><p></p><p>据悉，搭载倚天芯片的阿里云弹性计算实例 G8M 将于 11 月 15 日正式上线，同时 CIPU 也被首次引入到专有云形态，为政企客户提供存算分离的“一云多芯、一云多 region”架构能力。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/28/28956326bdfe31da64be9dd4b63bfa5f.png\" /></p><p></p><p></p><h3>阿里云核心产品全面 Serverless 化</h3><p></p><p></p><p>Serverless 让云计算从一种资源真正变成了一种能力。张建锋表示，过去云计算用云服务器替代了物理服务器，但客户依旧按“几核几 G 服务器”的模式来购买云资源，未来云计算将全面 Serverless 化，更加接近“电网”模式，按计算的调用次数付费。</p><p></p><p>这意味着软件开发方式将发生深刻变化，软件架构从原来的主机架构迁移到 Serverless 架构，客户只需要开发业务逻辑，不再需要关心运维问题。此外，Serverless 架构可以降低软件开发门槛，提供更多的预制模块，大幅提高软件生产效率。</p><p></p><p>目前，阿里云已经拥有超过 20 款 Serverless 产品，包括函数计算 FC、Serverless 应用引擎 SAE、Serverless 容器服务 ASK、PolarDB 数据库、AnalyticDB 数仓等。其中函数计算日调用次数超过 200 亿次，有效支撑历年双 11 百万 QPS 洪峰，业务年均增速超 300%，整体规模位居国内首位。</p><p></p><p>同时，相关产品也不同领域有广泛应用。比如，零售商超世纪联华将会员系统、交易系统等放在了阿里云函数计算上处理，告别了靠扩展机器支撑大体量业务，促销准备时间从周级缩短到小时级，成本下降 40%。南瓜电影在遇到大量用户涌入时，可在短时间内切换到阿里云 Serverless 应用引擎 SAE，峰值时秒级自动扩容，峰谷时按需自动缩容，总成本下降 40%。</p><p></p><p>“我们希望让用户做得更少而收获更多，通过 Serverless 化，用云就像用电一样简单。”张建锋表示，未来云将全面 Serverless 化，更加接近“电网”模式，按计算的调用次数付费。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/32/328d2bc15e5b5dc360013eb3ed14ca88.png\" /></p><p></p><p>阿里云Serverless布局</p><p></p><p></p><h4>阿里云数据库 All in Serverless</h4><p></p><p></p><p>在 2022 云栖大会上，阿里云还宣布 PolarDB、AnalyticDB（简称 ADB）、RDS、Lindorm 等核心数据库产品已与自研 CPU、CIPU、飞天操作系统进行深度融合创新，并全面 Serverless 化，对外更好地提供一站式数据管理与服务。测试数据如下：</p><p></p><p>RDS 数据库基于自研 CPU 的软硬协同优化，整体性价比提升 25%；PolarDB 通过融合自研 Smart-SSD 智能固态硬盘技术，实现性能零损耗，数据存储成本最高下降 60%。</p><p></p><p>PolarDB 是业内首创支持跨机 Serverless 服务的云数据库，突破了无感秒切和高性能全局一致性两大技术难点，与按照峰值负载配置容量的成本相比，最多可节省 95% 的数据库成本。同时，PolarDB 数据库最新商业化的云原生 HTAP 功能，在列存索引 IMCI 技术加持之下，TPC-C、TPC-H 性能实现行业大幅领先。</p><p></p><p>以 PolarDB 和 ADB 为代表的阿里云核心数据库产品也在 HTAP、离在线一体化等前沿技术上发力，进一步提升数据库产品的易用性，并进一步提升性能。其中，ADB 提供离在线一体化数据处理分析能力，基于一份数据融合两种计算模型 (MPP+BSP) 同时支持离线处理和在线分析，解决因数据同步产生的数据一致性和时效性问题，资源成本降低 30% 以上。</p><p></p><p>据悉，面向未来，阿里云数据库将整体向“四化”方向发展：</p><p></p><p>云原生化：资源解耦、Serverless 化；平台化：基于云构建数据平台能力、OpenAPI 标准化；一体化：处理分析一体化、离在线一体化、集中分布一体化、多模处理一体化；智能化：AI for DB 简化运维、In-DB ML 挖掘数据价值。</p><p></p><p></p><h4>ODPS 可同时调度超 10 万台以上服务器规模</h4><p></p><p></p><p>另外，为满足用户多元化数据计算需求，阿里云 ODPS 升级为一体化开放大数据平台。升级后的 ODPS 支持大规模批量计算、实时分析等服务，提供实时流式计算、机器学习等多种计算能力，可同时调度超 10 万台以上服务器规模进行并行计算。</p><p></p><p>ODPS 实现了存储、调度、元数据管理上的一体化架构融合，支撑智慧交通、生命科学、风险精算等各领域数据的高效处理，并通过 DataWorks 提供一致的数据开发和治理服务。</p><p></p><p>在刚刚公布的 TPC-H 30000GB 基准测试中，ODPS-Hologres 刷新世界纪录，分数超过 2786 万分，领先第二名 23%。ODPS-MaxCompute 则在 TPCx-BB 100TB 标准测试中，连续 6 年保持性能和性价比第一。</p><p></p><p></p><h3>软件 AI 化，大模型开源推动 AI 普及</h3><p></p><p></p><h4>磐久超高性能网络，时延显著降低 90%</h4><p></p><p></p><p>为了突破计算性能、内存资源对 AI 模型训练效率的限制，阿里云打造了一套“磐久超高性能网络”，采用自研的 Solar-RDMA 高速网络协议，使处理器可访问其他任意服务器的内存，非常适合深度学习模型内神经网络的交互形态，相比传统模式可降低长尾时延 90% 以上，最低可至 2 微秒。</p><p></p><p>基于这套超高性能网络技术及软硬一体化能力，今年 6 月阿里云推出了新一代智能计算产品——灵骏，可最小化所有非计算开销，实现 5 倍的通信性能提升，千卡并行计算效率高达 90%，大规模 AI 场景下性能可提升 2-5 倍。</p><p></p><h4>开源 300 多个 AI 模型，推出 AI 模型社区魔搭</h4><p></p><p></p><p>张建锋表示，开源是软件进步的核心推动力量，过去开源推动了软件架构的进步，未来开源还将推动 AI 应用的进步和普及。</p><p></p><p>为了降低 AI 的使用门槛，充分发挥 AI 的潜能，阿里达摩院联手中国科大、CCF 开源发展委员会、澜舟科技、智谱 AI、深势科技、鹏城实验室云计算研究所、哈工大讯飞联合实验室等多家科研机构共同推出 AI 模型社区“魔搭”ModelScope。</p><p></p><p>魔搭社区践行“模型即服务（Model as a Service）”的理念，在代码开源的基础上更进一步，将 AI 的代码变成模型，将模型变成服务。社区实现了零门槛 AI 模型体验，一行代码模型推理，十行代码模型调优。</p><p></p><p>达摩院等率先向社区贡献 300 多个经过验证的优质 AI 模型，超过三分之一为中文模型。利用这些基础模型，开发者只需针对具体场景再稍作调优，就能快速投入使用。</p><p></p><h3>云和端加速融合</h3><p></p><p></p><h4>无影强化云网端一体安全</h4><p></p><p></p><p>张建锋认为，云端加速融合，算力正在不断从终端转移上云，这让终端突破了物理限制，不仅手机、电脑、汽车、音箱会变成计算机，未来万物皆是计算机。</p><p></p><p>例如，Rokid 在推出的 AR 眼镜中接入阿里云无影架构，利用云上算力，用户打开仅有 85 克重量的眼镜就能在眼前的虚拟现实画面中，与人聊天、办公，并且还能做 3D 渲染、大数据编程等复杂工作。</p><p></p><p>在 PC 电脑端，未来阿里云继续将 RISC-V 芯片和无影架构结合，让创新终端具有更高性能、更低能耗，并实现全栈自研。目前，阿里巴巴已经成为全球 RISC-V 技术与生态发展的引领者，并且已经完成了和云操作系统的适配，迈出了端边云一体的重要一步。</p><p></p><p>无影近期在多个场景推出生产力解决方案，包括研发、分支机构、RPA、教育等，往往都属于数据敏感领域。在为终端研发厂商提供更好的云流协议之外，无影进一步集成了安全能力。</p><p></p><p>无论用户使用既有应用、桌面实例池还是进行其他调度，都能够在敏感数据检测、行为日志处理、高危操作拦截、安全态势感知、外接设备权限、网络与应用安全监控等多个方面，设定符合自己场景的权限与策略。</p><p></p><h4>玄铁 C908 实现 RISC-V 架构高能效突破</h4><p></p><p></p><p>另外，阿里云最新发布的玄铁 C908 处理器实现了 RISC-V 架构的高能效突破，较业界同性能处理器能效提升超 30%。</p><p></p><p>为进一步提升 AI 算力及能效，玄铁 C908 采用最新 RISC-V Vector 1.0 标准，并基于标准新增 DOT 指令，全面优化 AI 算子及算法库，仅典型神经网络计算的性能就提升 50% 以上。在国际权威 MLPerf Tiny V0.7 推理性能测试中，玄铁 C908 超越此前夺冠的玄铁 C906，在图像分类任务中性能再提升 3.5 倍。玄铁 C908 可应用于视觉 AI、智能交互、AR/VR、5G 等场景。</p><p></p><h3>结束语</h3><p></p><p></p><p>“科技是阿里巴巴从过去走到现在，并且更好走向未来的基石。”如阿里巴巴董事会主席兼首席执行官张勇在云栖大会上所说，阿里希望用计算为社会提供一种数字化的基础能力。</p><p></p><p>根据行业权威研究机构 Gartner 发布 2021 年全球云计算 IaaS 市场份额数据，阿里云排名全球第三，市场份额为 9.55%，连续六年实现份额增长；同时，阿里云排名亚太市场第一，市场份额为 25.53%。而面对未来云计算市场日益激烈的竞争，阿里云能否凭借找出的第二技术曲线稳固如今地位甚至更进一步，让我们拭目以待。</p><p></p>",
    "publish_time": "2022-11-04 14:27:50",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "JAX正从谷歌的边缘项目走向核心",
    "url": "https://www.infoq.cn/article/ml8WdcT1sAMMrQ9xsLQ7",
    "summary": "<p>谷歌于 2015 年开放了一种小型资源，即 2015 年谷歌大脑研究项目，名为 TensorFlow，实质上创造了现代机器学习的生态系统。其普及速度之快，令谷歌成为了主流人工智能产品的拥有者。</p><p></p><p>但是现在，情况已经完全不同了，谷歌已经丧失了开发者的人心，转向了 Meta。</p><p></p><p>谷歌的 TensorFlow 曾经是一款无所不在的机器学习工具，但后来却落后于 Meta 机器学习工具 PyTorch。<a href=\"https://www.infoq.cn/article/OYS7T01SgBBZvCqNT04E\">PyTorch </a>\"首次在 Facebook 开发，在 2017 年作为测试版开源，PyTorch 逐渐成为了领军人物。</p><p></p><p>在采访开发者、硬件专家、云提供商以及熟悉谷歌机器学习工作的人士时，他们的观点也是相同的。TensorFlow 在争夺开发者人心的竞争中落败。其中有些人甚至使用了令人难以理解的确切说法：“PyTorch 正在享用 TensorFlow 的午餐”。</p><p></p><p>专家称，经过<a href=\"https://www.infoq.cn/article/4iDmM3PgXmvELorwQ8M3\"> Meta 在开源社区</a>\"中的一系列战术失误、开发决策和智胜策略，谷歌引领未来互联网上的机器学习的机遇可能将会慢慢消逝。自那以后，PyTorch 就成了开发人员和科学研究人员的机器学习开发工具。</p><p></p><p>谷歌在 PyTorch 的阴影下，悄悄地研发了一种 名为 <a href=\"https://github.com/google/jax/releases\">JAX</a>\"（一度是“Just After eXecution”的缩写，但是正式意义上已经没有什么意义了）的机器学习框架，许多人认为它是 TensorFlow 的继承者。</p><p></p><p>该项目的知情人士向 Insider 透露，谷歌大脑和谷歌的 DeepMind 人工智能公司基本上都放弃了 TensorFlow，转而改用 JAX，以便为谷歌其他部门的跟进铺平道路。一位谷歌代表向 Insider 证实，JAX 目前已经在谷歌大脑和 DeepMind 中得到了广泛的采用。</p><p></p><p>项目地址：https://github.com/google/jax/releases</p><p></p><p>熟悉谷歌机器学习工作的人士称，JAX 起初受到了很大的内部阻力。他们表示，谷歌员工过去一直使用 TensorFlow。尽管它使用起来可能很困难，但是在谷歌的雇员中，这始终是一个让人困扰的统一因素。JAX 的方法更加简单得多，但是他们说，这也改变了谷歌在内部构建软件的方式。</p><p></p><p>熟悉该项目的人表示，这款工具将会有望在今后数年内成为所有使用机器学习的谷歌产品的支柱，就像 2010 年代末 TensorFlow 所做的那样。</p><p></p><p>而 JAX 似乎已经从谷歌的边缘走向了中心。Salesforce 告诉 Insider，她已经在自己的研究团队中采用了 JAX。</p><p></p><p>“JAX 是一项工程壮举，”<a href=\"https://www.infoq.cn/article/xErB18NrCoKORHiYiNMw\">Julia 编程语言</a>\"的创建者 Viral Shah 说，专家们经常将其与 JAX 相提并论。“我认为 JAX 是一种独立的编程语言，通过 Python 进行实例化。如果你坚持 JAX 想要的规则，它就能发挥它的神奇力量，而且可以做到让人叹为观止。”</p><p></p><p>谷歌现在想要重回霸主的位置，同时也从开发 TensorFlow 时犯下的错误中汲取教训。但是，专家们说，由于他现在不得不放弃这个已经赢得了开发者人心的开源工具，这将是一项很大的挑战。</p><p></p><h2>TensorFlow 的衰落与 PyTorch 的崛起</h2><p></p><p>据提供给 Insider 的数据显示，PyTorch 在一家必读的开发者论坛上的帖子正在迅速追赶 TensorFlow。来自 Stack Overflow 的参与度数据表明，以其在论坛问题中的份额衡量，TensorFlow 在最近几年中的人气一直处于停滞状态，而 PyTorch 的参与度却在持续上升。</p><p></p><p>TensorFlow 一开始就有很强劲的势头，并且随着其发布而越来越流行。像 Uber 和 Airbnb 这样的公司，以及像 NASA 这样的组织很快就选择了 TensorFlow，并将 TensorFlow 应用到更复杂的项目中，这些项目要求在巨大的数据集上训练算法。截至 2020 年 11 月，TensorFlow 已累计下载 1.6 亿次。</p><p></p><p>但是，谷歌不断增量的功能更新使 <a href=\"https://www.infoq.cn/article/Mq610CNq2BGDlIWQR9bm\">TensorFlow </a>\"变得很不方便，而且对用户来说也很不友好，即使是谷歌内部的雇员、开发者和接近该项目的人也会这么认为。随着机器学习领域以惊人的速度发展，谷歌必须 经常使用新的工具来更新其框架。熟悉该项目的人士表示，由于更多的人参与进来，这个项目已经开始向公司内部扩展，而不是将重点放在那些原本让 TensorFlow 成为首选工具的部分。</p><p></p><p>专家告诉 Insider，这种狂热的猫鼠游戏在很多率先推出的公司中是很常见的。举例来说，谷歌并非首家创立搜索引擎的公司，它只是能够 从 AltaVista 或雅虎等祖先的错误中学习。</p><p></p><p>与此同时，PyTorch 在 2018 年在 Facebook 人工智能研究实验室 发布了其完整版本。尽管 TensorFlow 和 PyTorch 都是基于 Python，而 Python 是机器学习专家的首选语言，但是 Meta 已经在迎合开源社区的需求方面投入了大量资金。据了解 TensorFlow 项目的人说，PyTorch 在一定程度上得益于专注小而美的产品，而 TensorFlow 团队一直在错过。</p><p></p><p>“我们主要使用 PyTorch；它拥有最广泛的社区支持，”机器学习创业公司 Hugging Face 的研究工程师 Patrick von Platten 说。“我们认为 PyTorch 可能在开源方面做得最好。他们确保问题能够得到在线解答。所有的例子都有效。PyTorch 一直有一个非常开源的方法。”</p><p></p><p>有些最大的组织（包括那些依赖 TensorFlow 的组织），Weave 项目是在 PyTorch 上运行 的 。不久之后，像特斯拉和 Uber 这样的公司 开始在 PyTorch 上进行最艰难的机器学习研究项目。</p><p></p><p>每一个额外的特性，有时会复制那些让 PyTorch 非常受欢迎的元素，使得 TensorFlow 对其最初的研究人员和用户而言，变得越来越臃肿了。其中一个例子是，它在 &nbsp;2017 年增加了一个“敏锐执行”（Keen Execution）的特性，这是 Python 的原生特性，可以让开发者很容易对自己的代码进行分析和调试。</p><p></p><h2>进入 JAX，谷歌机器学习的未来</h2><p></p><p></p><p>随着 PyTorch 和 TensorFlow 之间的战斗爆发，谷歌内部的一支小型研究团队致力于开发一种新的框架，以便更容易访问专门设计的芯片（称为张量处理单元，或 TPU），这些芯片是其人工智能方法的基础，只能通过 TensorFlow 获得。</p><p></p><p>团队研究人员包括 Roy Frostige、Matthew James Johnson 和 Leary 在 2018 年发布了一篇题为《通过高级可追溯性编译机器学习软件》（Compilation of machine learning software through high-level traceability）的论文，描述了最终成为 JAX 的内容。</p><p></p><p>Adam Paszky 是之前在 Facebook 工作期间 PyTorch 的原作者之一，他在 2019 年开始以学生身份与 Johnson 合作，并在 2020 年初全职加入 JAX 团队。</p><p></p><p>新项目 JAX 提出了一种更加直观的设计，他可以处理最复杂的机器学习问题：将一个大问题的工作分散到多个芯片上。JAX 不是为不同的芯片运行单一的代码位，而是自动分配工作。这个要求来自在谷歌工作的一个很大的特点：只要你需要，就可以立即使用大量的 TPU 来完成任何你想要的一切。</p><p></p><p>JAX 解决了谷歌研究人员在处理需要越来越多计算能力的大型问题时所面临的一个基本问题。</p><p></p><p>JAX Wind Catch，这个 skunkworks 项目正在被谷歌内部的开发者和研究人员所接受。熟悉该项目的人士说，这是一种绕开许多开发者对 TensorFlow 不敬的做法，并且能够很快地把复杂的技术问题分散到多个 TPU 上。</p><p></p><h2>谷歌在 JAX 方面的最大挑战是用 PyTorch 实施其 Meta 战略</h2><p></p><p></p><p>同时，PyTorch 和 TensorFlow 都是以同样的方式开始的。它们一开始是研究项目，然后是好奇心，接着成为机器学习研究中的标准。最后，研究人员将它们从学术界传播到了世界其他地方。</p><p></p><p>但是，JAX 也面临着许多挑战。首先，在许多方面，它对其他框架的依赖性还很强。开发者和专家们表示，JAX 没有提供一种加载数据和预处理数据的方法，它需要 TensorFlow 或 PyTorch 来处理大量的设置。</p><p></p><p>JAX 基本框架 XLA，它也为谷歌 TPU 设备进行了极大的优化。该框架还能与更传统的 GPU 和 CPU 协同工作，不过，据了解该项目的人表示，该项目仍有办法通过优化 GPU 和 CPU，从而达到与 TPU 的同等水平。</p><p></p><p>谷歌发言人表示，对 TPU 的关注源于 2018 年至 2021 年的监管和战略上的混乱，造成了缺乏投资和对 GPU 支持的次优优先级，以及缺乏与大型 GPU 提供商 Nvidia 的合作，这两方面都在迅速改善。这位发言人说，谷歌自己的内部研究也非常关注 TPU，导致缺乏良好的 GPU 使用反馈。</p><p></p><p>Cerebras Systems 公司首席执行官 Andrew Feldman 说，随着各公司希望将其工作分散到不同类型的机器上，专注于机器学习，因此这种改进将成为未来的关键。这家市值 40 亿美元的初创公司，制造专注于机器学习的大型芯片。</p><p></p><p>他说：“任何以一种设备为特色而非另一种设备的行为，都会立刻被认为是一种恶劣的行为，并且会受到开源社区的排斥。没有人愿意被限制在一个单一的硬件提供商，这就是机器学习框架出现的原因。机器学习从业者希望确保他们的模型是可移植的，他们可以将其移植到他们选择的任何硬件平台上，而不是被锁定在一个平台上。”</p><p></p><p>同时，PyTorch 本身现在已经有将近 6 年的历史了，远远超过了 TensorFlow 首次开始出现放缓迹象的年龄。目前还不清楚 Meta 项目是否会面临与其谷歌支持的前辈类似的命运，但这可能意味着新事物出现的时机已经成熟。有些专家和接近该项目的人士指出了谷歌的规模过大，并告诫批评家千万别把希望寄托在这个搜索巨头身上。</p><p></p><p>原文链接：</p><p></p><p>https://comnavitottori.com/how-pytorch-beat-tensorflow-forcing-google-to-bet-on-jax/</p>",
    "publish_time": "2022-11-04 14:48:13",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "国产GPU再进一步！摩尔线程推出全新多功能GPU春晓，构建元计算新引擎",
    "url": "https://www.infoq.cn/article/4m8jpvWFMj7hdSZGK9Sr",
    "summary": "<p>摩尔线程 2022 秋季发布会于 2022 年 11 月 3 日在北京中关村国家自主创新示范区成功举办。发布会上，摩尔线程推出全新多功能 GPU 芯片“春晓”、基于 MUSA 架构打造的业内首款国潮显卡 MTT S80 和面向服务器应用的 MTT S3000，以及元计算一体机 MCCX。这是时隔 7 个月后，摩尔线程多功能 GPU 产品迭代创新实现的又一次跨越。</p><p></p><h2>发布多功能 GPU 芯片“春晓”，AI 计算加速度比“苏堤”芯片提升 4 倍</h2><p></p><p></p><p>此次发布会上，<a href=\"https://mp.weixin.qq.com/s?__biz=MzU1NDA4NjU2MA==&amp;mid=2247559817&amp;idx=3&amp;sn=58c44b13e4cc2cff6fc6f07e2098eafa&amp;chksm=fbeb5346cc9cda50f7a0f37194414efbc1bc2ed99dc200367a31c105b22c1a90b40b5f9c947f&amp;scene=27#wechat_redirect\">摩尔线程</a>\"正式发布第二颗多功能 GPU 芯片“春晓”，集成 220 亿个晶体管，内置 MUSA 架构通用计算核心以及张量计算核心，可以支持 FP32、FP16 和 INT8 等计算精度。相较于之前发布的“苏堤”芯片，“春晓”内置的四大计算引擎全面升级，带来了显著的性能提升：图形渲染能力方面平均提升 3 倍；编码能力提升 4 倍，解码能力提升 2 倍；；AI 计算加速平均提升 4 倍，物理仿真计算性能提升 2.5 倍。同时，引入了新技术支持窄带高清，节约带宽 30% 以上。</p><p></p><p>全新发布的摩尔线程 MTT S80 基于“春晓”GPU 芯片打造，也是首款面向游戏玩家打造的国潮显卡。其拥有的 4096 个可编程 MUSA 核心，在 1.8GHz 的主频下，能够提供 14.4TFLOPS 的单精度浮点算力。同时 MTT S80 还是业内首款配备 PCIe Gen5 接口的显卡产品，配合 16GB GDDR6 大容量高速显存，再辅以 8K 超高清与 1080P 360Hz 高刷新率显示输出能力，能为游戏玩家带来极致游戏视觉和操作体验。</p><p></p><p>不只是硬件，摩尔线程还围绕 MUSA 发布了系列<a href=\"https://www.infoq.cn/article/yy2LKReELfYGwQukEtKY\"> GPU </a>\"软件栈与应用工具，包括 MUSA 开发者套件、云原生 sGPU 技术及元宇宙平台 MTVERSE 等，旨在构建从底层芯片到上层开发和应用的整体解决方案，实现摩尔线程多功能 GPU 软硬件一体化创新模式的全面升维。</p><p></p><p>其中，面向服务器的多功能 GPU 产品 MTT S3000 基于 MUSA 架构打造，能够支持 DirectX、OpenGL、OpenGL ES、Vulkan、OpenCL 等主流图形和计算接口，兼容 CUDA，可为 AI 推理和训练、云游戏、云渲染、视频云、数字孪生、数字内容创作等场景提供通用智能算力支持，旨在为数据中心、智算中心和元计算中心的建设构建坚实算力基础，助力元宇宙多元应用创新和落地。</p><p></p><h2>算力升级，助力元计算加速</h2><p></p><p>MTT S3000 搭载了摩尔线程全新的第二颗多功能 GPU 芯片“春晓”，包含了 4096 个 MUSA 流处理核心及 128 个专用张量计算核心，晶体管规模达到 220 亿，运行频率为 1.9GHz，显存位宽 256bit；搭配 32GB GDDR6 显存；支持 FP32、FP16、INT8 等多种计算精度，其中 FP32 算力可达 15.2TFLOPS。</p><p></p><p>MTT S3000 率先采用了 PCIe 5.0 接口，是目前 GPU 行业中首款支持 PCIe 5.0 标准的产品。PCIe 5.0 所提供的高带宽不仅能提升 GPU 与 CPU 的通讯效率，更能在“多卡”部署时提供更大的核间通讯带宽，提升 GPU 集群的整体运算效率和性能。</p><p></p><p>MTT S3000 内置 MUSA 智能多媒体引擎 2.0 和硬件虚拟化功能，能够从多个维度增强显卡的应用范围和用户的应用体验。同时，MTT S3000 还提供了两组 DP 1.4a 显示输出接口，由此增加的显示输出能力将进一步拓展 MTT S3000 的业务适应性。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e0/e058a5f3a973877a8344ec2820c1c2d8.jpeg\" /></p><p></p><h2>训推一体，为 AI 计算铺平道路</h2><p></p><p></p><p>从<a href=\"https://www.infoq.cn/article/MTeGm5ABOpmVtI6a7ZS4\">数据中心</a>\"向智算中心和元计算中心演进是行业算力需求发展的主流趋势，人工智能和元宇宙应用负载对 GPU 算力的强烈需求是推动这一演进趋势的关键力量。专为提升智能算力而设计的摩尔线程 MTT S3000，在与之配套的 MUSA 软硬件计算平台的加持下，AI 应用性能相比 “苏堤”可实现平均 4 倍提升。</p><p></p><p>MTT S3000 及其配套软硬件产品，实现从算法模型到应用部署的全流程覆盖，能够为 AI 用户提供友好丰富的一揽子解决方案。在算法层面，摩尔线程不仅可以支持用户的自定义算法模型，同时也提供丰富的预训练模型库，赋能广大 AI 开发者，提升开发效率；在应用解决方案层面，摩尔线程可提供数字人、数字客服、内容生成等行业解决方案，服务金融保险、教育、医疗等相关的行业用户。在深度学习训练方面，MTT S3000 兼具易用性、扩展性和兼容性等多维优势。基于 MUSA 软件栈，MTT S3000 可实现现有算法的全面支持；能够支持包含单机单卡、单机多卡、多机多卡在内的多种训练模式。不仅如此，MTT S3000 还兼容 PyTorch、TensorFlow、百度飞桨（PaddlePaddle）、计图（Jittor）等多种主流深度学习框架，并实现了对 Transformer、CNN、RNN 等数十类 AI 模型的优化。在深度学习推理方面，MTT S3000 支持视觉、语音、自然语音理解及多模态等多个领域主流 AI 模型。摩尔线程还对 MUSA 软件栈持续进行深度性能优化，并推出自研 AI 推理引擎 TensorX，利用任务并发、自适应算法寻优、访存优化、算子优化等技术，大幅提升推理性能。MTT S3000 可满足生物医疗、金融保险等特别强调高精度推理的行业需求，并提供极致性能。同时，借助摩尔线程开发的 CUDA ON MUSA 兼容方案，用户可以将 CUDA 上开发的代码无缝迁移到 MTT S3000。</p><p></p><h2>MUSA 不只是架构，而是一个生态</h2><p></p><p>GPU 是一项系统性工程，涉及硬件架构、驱动开发、软件生态、销售应用等，研发壁垒高，产业链长。当前的 GPU 生态，历经几十年的更迭，变得庞大且复杂。一颗 GPU 要完成从研发到市场的商业化应用，既离不开软硬件方面的持续投入，也离不开生态的有力支持。</p><p></p><p>今年 3 月，摩尔线程正式发布第一颗多功能 GPU 芯片“苏堤”，目前已获得众多市场和生态的认可。基于“苏堤”<a href=\"https://www.infoq.cn/article/IIrxAaTj0zL0vmWeDqMl\">芯片</a>\"，摩尔线程联合 OEM 合作伙伴成功推出了多款个人电脑、工作站和数据中心服务器产品，应用在日常办公、数字孪生、人工智能训练和推理等业务场景；同时，携手云服务厂商为不同行业用户提供 GPU 云计算能力，为摩尔线程 GPU 在众多行业的应用落地铺平了道路。</p><p></p><p>摩尔线程创始人兼 CEO 张建中在现场表达了对所有合作伙伴和用户的感谢，并进一步表示：“GPU 创业是一个长期事业，充满了挑战，我们深知生态的重要性。摩尔线程多功能 GPU 基于先进 MUSA 架构，持续构建完备的软件栈及应用生态，旨在为开放生态系统创造友好的支持和体验。我们只有与生态伙伴、行业用户凝聚在一起，才能将摩尔线程的算力真正发挥出来，为元宇宙和数字经济提供核心动力。”</p>",
    "publish_time": "2022-11-04 14:54:23",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "超越DALL-E 2？谷歌文本转图像AI模型Imagen首次开放测试",
    "url": "https://www.infoq.cn/article/SwDArsl8afPV6baZRyE0",
    "summary": "<p></p><blockquote>近日，谷歌开始通过 AI Test Kitchen 应用公测其文本转图像 AI 模型 <a href=\"https://www.infoq.cn/article/8aZ7G8oPj9y8hAJsC9LU\">Imagen</a>\"，以收集用户对Imagen的反馈。</blockquote><p></p><p>&nbsp;</p><p>今年6月份，谷歌正式推出文本转图像AI模型Imagen，并表示Imagen 生成的图像已经全线<a href=\"https://www.infoq.cn/article/QhKzahCQ9bdTgAUobYUg\">超越了 DALL-E 2</a>\"，原因就是 Imagen 拥有一套量身打造的测试新基准 DrawBench。</p><p>&nbsp;</p><p>据悉，DrawBench 的测试指标并不是特别复杂：本质上，它就是一份包含约 200 条文本提示的列表，谷歌团队把这些提示输入到 Imagen 及其他文本到图像生成器里，再由人工评分员判断各程序的输出质量。</p><p>&nbsp;</p><p>Imagen还使用 Transformer 语言模型将输入的文本转换成一个嵌入式向量的序列。然后，连续的三个扩散模型（diffusion model）会将这些嵌入式的向量转换成 1024x1024 像素的图片。作为其成果的一部分，该团队开发了名为U-Net的改进型扩散模型，以及适用于文本至图像模型的新基准套件DrawBench。按照 COCO 基准，Imagen 的 zero-shot FID得到了 7.27 分，超过了之前表现最好的 DALL-E 2 模型。</p><p>&nbsp;</p><p>不过彼时，谷歌尚未向公众开放Imagen，并表示Imagen“目前尚不适合公众使用”。谷歌方面也强调，这些系统在训练过程中也不可避免接触到了社会偏见，所以输出结果中也会包含种族主义、性别歧视或其他一些有毒内容。他们计划开发一种新方法来衡量“未来工作中的社会与文化偏见”，希望借此测试模型的后续迭代。</p><p>&nbsp;</p><p>而随着近日谷歌将Imagen添加到<a href=\"https://play.google.com/store/apps/details?id=com.google.android.apps.ai.sandbox&amp;hl=en_CA&amp;gl=US\">AI Test Kitchen</a>\" 应用中，用户终于可以亲自使用Imagen。</p><p>&nbsp;</p><p>据了解，AI Test Kitchen 是谷歌在今年早些时候推出的一款应用，其目的是对谷歌的各种 AI 系统进行测试。此前，用户在该应用程序中可以与谷歌的文本模型 LaMDA 进行互动，现在，用户也可以在该应用中与 Imagen 进行互动。</p><p>&nbsp;</p><p>值得一提的是，谷歌对用户与 Imagen 之间的互动实施了严格的限制，用户不能随心所欲地创造文本图像，只能在选定的主题上添加不同的风格。这也是谷歌有意为之。谷歌产品管理高级总监 Josh Woodward 解释称，AI Test Kitchen 的全部意义在于：获得公众对这些 AI 系统的反馈；测试哪些行为会使得系统崩溃。</p><p>&nbsp;</p><p>具体而言，用户有两种方式与 Imagen 互动：城市梦想家和 Wobble。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/94/96/9496afce7d10d6b75a8b23278b59ae96.jpeg\" /></p><p></p><p>在“城市梦想家”中，用户可以生成围绕一个主题设计的城市图像，Imagen 能够根据用户的想法，创建样本建筑和地块。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/9a/e9/9a4177a5ea9735a2e8b56f97955e6de9.jpg\" /></p><p>&nbsp;</p><p>在“Wobble”中，用户可以创造一个小怪物，并选择它的材质和服装。</p><p>&nbsp;</p><p>&nbsp;</p>",
    "publish_time": "2022-11-04 16:12:56",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]