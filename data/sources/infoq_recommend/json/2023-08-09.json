[
  {
    "title": "架构师（2023 年 8月）",
    "url": "https://www.infoq.cn/article/pUvp0Qm1bxS0fm7TRP5v",
    "summary": "<h2>卷首语：我们能从Telegram的开发中学到什么？</h2>\n<p>本期负责编辑  | Tina</p>\n<p>Telegram 由Nikolai和Pavel Durov两兄弟于2013年推出。根据维基百科的统计，截至2023年7月，Telegram的月活跃用户已突破8亿。这一用户规模可与国民软件QQ相媲美。根据2023年第一季度的财报数据，24岁高龄的QQ移动终端月活跃用户为5.97亿。</p>\n<p>虽然规模很大，但Telegram性能非常优异，其系统指标是一众社交软件看齐的对象。同时，始终坚持采用纯原生的方式实现，技术栈简洁干净。此外，自Telegram成立以来的这些年里，其受欢迎程度一直在持续增长，深受开发者推崇：“自从用了Telegram，我才知道某些即时通讯软件有多垃圾。”</p>\n<p>在创办Telegram之前，这两位兄弟曾共同创建了俄罗斯社交网络VK。从技术角度来看，VK同样是一款出色的软件。根据VK的早期员工透露，尽管VK已经成熟，Pavel仍然对产品功能保持着高度控制，并怀有极高的期望：“Pavel对质量设定了极高的标准……不论是代码质量还是最终产品的品质。你必须用尽所能，使用各种方式达到这一标准。”在创办Telegram时，他们持续坚守这一高标准。</p>\n<p>据报道，Pavel在控制方面一直具有独特性，他还引导着公司的愿景。一名员工形容他为“具有远见的人”，能够吸引并团结杰出工程师，以实现共同的目标。尽管Telegram规模超越QQ，但仅由一支小团队组成，由于团队采用扁平化的管理结构，他们负责的产品能够快速推进。</p>\n<p>另外，他对人才的要求也很高，很少有公司像 Telegram 那样拥有如此多的才华横溢的工程师。他们喜欢用“竞赛”来招募人才，比如通过举办“开发者挑战赛”来改进其产品并寻找新的队友。该公司曾举办了一场“GIF 大赛”，数千人参加了这个比赛，Telegram 再从这个人才库中聘用“前两名或前三名”。这是该公司在其整个生命周期中始终保持精简的部分原因。毫不夸张地说，它招聘的工程师是<a href=\"https://www.generalist.com/briefing/telegram\">最顶尖的 0.1%</a>。</p>\n<p>这种对技术和人才的高标准，使得Telegram在经过十年的发展后仍能在功能和技术方面保持高度内聚。或许我们应该庆幸有着Telegram这样的存在，它不仅提升了社交软件开发的标准，还推动了其竞争对手进行改进。</p>\n<h2>目录</h2>\n<p><strong>热点 | Hot</strong></p>\n<p>MySQL 之父：不要把一个优秀的开发者提升为管理者，那会是种资源浪费</p>\n<p>字节跳动开源 KubeAdmiral：基于 K8s 的新一代多集群编排调度引擎</p>\n<p>比 JDK 最高快 170 倍，蚂蚁集团开源高性能多语言序列化框架 Fury</p>\n<p>不到一年，Istio 项目正式从 CNCF 毕业</p>\n<p>第一批因 AIGC 裁掉自家员工的老板该后悔了？</p>\n<p><strong>访谈文章 | Interview</strong></p>\n<p>专访 OpenSSF CTO：安全问题应该考虑在构建模型之前，别出了问题就让 ChatGPT“背锅”</p>\n<p><strong>案例研究 | Case Study</strong></p>\n<p>财报会议新时代：如何将 AI 训练成资深 CFO</p>\n<p>小白大挑战：24 小时内用 ChatGPT 和 Next.js 开发开源项目，吸引上万用户！</p>\n<p>面向大模型的存储加速方案设计和实践</p>\n<p>Cube轻量虚拟化如何做到100ms交付一个安全容器</p>\n<p>如何挖掘 Bazel 的极致性能</p>\n<p>面向故障处理的可观测性体系建设</p>\n<p><strong>推荐文章 | Article</strong></p>\n<p>红帽：我们为什么要改变 RHEL 源码的发布策略？</p>\n<p>LLM 对程序员的冲击和影响</p>\n<p>高薪缺人，但要懂全栈懂 LLM，一个全新职业正在兴起！</p>\n<p>黄东旭：我对数据库如何 Serverless 化的一些思考</p>\n<p>C++ 变化太大！该重新学习这门语言了</p>\n<p>5 天内用户数破亿、增速碾压 ChatGPT，Twitter 劲敌 Threads 是如何构建的？</p>\n<p><strong>特别专题｜实时数仓 Apache Doris 精选实践</strong></p>\n<p>日增百亿数据，查询结果秒出， Apache Doris 在 360 商业化的统一 OLAP 应用实践</p>\n<p>Apache Doris 在叮咚买菜的应用实践</p>\n<p>天眼查基于 Apache Doris 构建统一实时数仓实践</p>\n<p>星云零售信贷基于 Apache Doris 的 OLAP 演进之路</p>\n<p>百亿大表 Join 提速 300 倍！Apache Doris 在约苗数据平台的实时数仓建设实践</p>\n<p><strong>特别专栏 | Video</strong></p>\n<p>本月，这些视频值得一看！</p>",
    "publish_time": "2023-08-09 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "领英采用 Protobuf 进行微服务集成，将延迟降低了60%",
    "url": "https://www.infoq.cn/article/ZQEP69byw99C818CzmF6",
    "summary": "<p>领英<a href=\"https://engineering.linkedin.com/blog/2023/linkedin-integrates-protocol-buffers-with-rest-li-for-improved-m\">采用 Protobuf，以实现其各类平台中更为高效的微服务间数据传递</a>\"，并将其与开源框架&nbsp;<a href=\"https://linkedin.github.io/rest.li/\">Rest.li</a>\"&nbsp;相集成。在全公司范围的推广完成后，领英将延迟降低了60%的同时，也提高了资源的利用率。</p><p></p><p>领英平台所采用的是微服务架构，而多年以来，<a href=\"https://en.wikipedia.org/wiki/JSON\">JSON</a>\"&nbsp;一直都是领英在微服务暴露的五万余 API 节点中所使用的序列化格式。为帮助团队在服务间构建一致性交互，领英创建并开源了一款名为 Rest.li 的 Java 框架。</p><p></p><p>该框架可用于创建使用&nbsp;<a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\">REST</a>\"&nbsp;通信风格的服务器和客户端，并抽象网络、序列化、服务发现等数据交换的诸多方面。Rest.li 框架主要支持 Java 和 Python，但也可与 Scala、Kotlin、JavaScript、Go 等语言协同运作。</p><p></p><p><img src=\"https://imgopt.infoq.com//news/2023/07/linkedin-protocol-buffers-restli/en/resources/1RestLiClientServerFlow-1689612288438.jpeg\" /></p><p>Rest.li 服务器和客户端之间的数据流和控制流（来源：<a href=\"https://linkedin.github.io/rest.li/user_guide/server_architecture\">Rest.li 文档</a>\"）</p><p></p><p>Rest.li 的默认序列化格式为 JSON，这种格式支持多款语言且易于人类阅读，后者虽然好处甚多，但却给性能（尤其是延迟）方面带来了许多问题。</p><p></p><p>领英工程师&nbsp;<a href=\"https://www.linkedin.com/in/karthikrg/\">Karthik Ramgopal</a>\"&nbsp;和&nbsp;<a href=\"https://www.linkedin.com/in/aman1309/\">Aman Gupta</a>\"&nbsp;分享了在使用 JSON 进行服务间通信所要面临的挑战：</p><p></p><blockquote>第一个挑战在于，JSON 作为一款文本格式往往过于冗长，从而导致网络带宽的使用和延迟增加，效果并不理想。（……）我们所面临的第二个挑战则在于，JSON 的文本性质会导致序列化和反序列化的延迟和吞吐量均不甚理想。</blockquote><p></p><p></p><p>领英团队一直在寻求 JSON 的替代方案，一款负载大小紧凑、系列化效率高，可减少延迟并提升吞吐量的方案。他们同时也希望这款方案不会限制所支持的语言栈数量，并能通过将这个新的序列化机制集成至 Rest.li 从而实现逐步迁移。最后，经过全面的思考，领英决定采用在各项考量中综合得分最高的<a href=\"https://protobuf.dev/\">Protobuf</a>\"。</p><p></p><p>将Protobuf集成到 Rest.li 中的主要困难在于&nbsp;<a href=\"https://linkedin.github.io/rest.li/pdl_schema\">PDL</a>\"，一个基于框架的自定义模式定义系统的动态模式生成。这套解决方案中需生成一个用于动态生成 Protobuf 模式定义的符号表，但根据客户端类型的不同，符号表的交付方式也会有所不同。后端客户端按需获取并缓存符号表，而网页或移动端应用的符号表则在构建时生成，且其中包含版本号依赖关系。</p><p></p><p>在对框架进行修改之后，领英团队通过 HTTP 头逐步对客户端进行重新配置，以 Protobuf 替代 JSON。采用 Protobuf 后，响应的吞吐量平均提高了 6.25%，请求的吞吐量平均提高了 1.77%。领英团队同样发现对大型负载而言，延迟降低了 60%。</p><p></p><p><img src=\"https://imgopt.infoq.com/news/2023/07/linkedin-protocol-buffers-restli/en/resources/1linkedin-restli-protobuf-1689612288438.jpeg\" /></p><p>JSON 和 Protobuf 的延迟比较（来源：<a href=\"https://engineering.linkedin.com/blog/2023/linkedin-integrates-protocol-buffers-with-rest-li-for-improved-m\">领英将 Protobuf 与 Rest.li 集成以提高微服务性能</a>\"）</p><p></p><p>根据对 Protobuf 的采用所得来的经验，领英团队计划后续将 Rest.li 迁移至&nbsp;<a href=\"https://grpc.io/\">gRPC</a>\"。gRPC 同样使用 Protobuf，并额外支持流式传输，其背后还有一个庞大社区的支持。</p><p></p><p>具体请见 InfoQ 博客：<a href=\"https://www.infoq.com/podcasts/api-showdown-rest-graphql-grpc/\">API 间的对决：REST vs. GraphQL vs. gRPC：该用哪一种？</a>\"</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/07/linkedin-protocol-buffers-restli/\">https://www.infoq.com/news/2023/07/linkedin-protocol-buffers-restli/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/HcNBNAE4M3dI41AhZbSC\">LinkedIn图数据库LIquid：为9.3亿会员提供实时数据访问</a>\"</p><p><a href=\"https://www.infoq.cn/article/5CGARLHYyr6ZL32hXxMq\">微软发言人证实旗下LinkedIn平台开始裁员</a>\"</p>",
    "publish_time": "2023-08-09 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]