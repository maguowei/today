[
  {
    "title": "Java近期新闻：OmniFish简介、Oracle加入Micronaut基金会、OpenJDK升级",
    "url": "https://www.infoq.cn/article/WVzWKssQTHMB34b4ZjqJ",
    "summary": "<p>本期Java近期新闻综述内容主要涉及OpenJDK、JDK 20、Spring里程碑更新、Eclipse Tumerin 19、OmniFaces 4.0、PrimeFaces 12.0、OmniFish简介、Quarkus 2.13.1、Oracle加入Micronaut基金会、Eclipse Vert.x 4.3.4、JobRunr 5.3、Apache Tomcat 9.0.68、Apache Camel 3.19、Apache Tika 2.5、ArchUnit 1.0及Devoxx Morocco和JAX伦敦大会。</p><p></p><h4>OpenJDK</h4><p></p><p>Oracle编程语言设计师<a href=\"https://www.linkedin.com/in/gavin-bierman-a0173075/\">Gavin Bierman</a>\"<a href=\"https://mail.openjdk.org/pipermail/amber-dev/2022-October/007511.html\">提交</a>\"了两份JEP草案，一份是8294285：<a href=\"https://openjdk.org/jeps/8294285\">switch模式匹配（第4个预览版）</a>\"，另一份是8294078：<a href=\"https://openjdk.org/jeps/8294078\">记录模式（第2个预览版）</a>\"。与它们相对应的上一份JEP已经在JDK 19中交付，它们是在Amber项目的支持下，分别提出了第4和第2个预览版。预览功能可以根据不断增长的经验和反馈进行优化。</p><p>&nbsp;</p><p>JEP草案8294285是JEP 427（<a href=\"https://openjdk.org/jeps/427\">switch模式匹配第3个预览版</a>\"）的升级，包括简化switch 标签语法；在switch 表达式、语句及其他支持模式的结构中支持泛型类型模式和记录模式的类型参数推断。</p><p>&nbsp;</p><p>JEP草案4294087是JEP 405（<a href=\"https://openjdk.org/jeps/405\">记录模式第1个预览版</a>\"）的升级，特性包括：支持泛型记录模式的类型参数推断；支持在增强for循环header中使用记录模式；移除命名记录模式支持。</p><p>&nbsp;</p><p>亚马逊云科技首席工程师<a href=\"https://www.linkedin.com/in/romankennke/\">Roman Kennke</a>\"提交了JEP草案8294992：<a href=\"https://openjdk.org/jeps/8294992\">64位对象头</a>\"。在<a href=\"https://wiki.openjdk.org/display/lilliput\">Lilliput</a>\"项目的支持下，该JEP草案提出，将Java对象头从96或128位减少到64位。Lilliput是Kennke创建的一个项目，于2022年5月实现了<a href=\"https://mail.openjdk.org/pipermail/lilliput-dev/2022-May/000457.html\">64位头的第一个里程碑</a>\"。</p><p></p><h4>JDK 20</h4><p></p><p>JDK 20<a href=\"https://jdk.java.net/20/\">早期访问构建</a>\"的<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-20%2B18\">Build 18</a>\"在上周发布，它是Build 17的<a href=\"https://github.com/openjdk/jdk/compare/jdk-20%2B17...jdk-20%2B18\">升级</a>\"，修复了各种<a href=\"https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2020%20and%20%22resolved%20in%20build%22%20%3D%20b18%20order%20by%20component%2C%20subcomponent\">问题</a>\"。要了解更多细节，请查看<a href=\"https://jdk.java.net/20/release-notes\">发布说明</a>\"。</p><p>&nbsp;</p><p>对于<a href=\"https://openjdk.java.net/projects/jdk/20/\">JDK 20</a>\"，我们鼓励开发者通过<a href=\"https://bugreport.java.com/bugreport/\">Java Bug数据库</a>\"报告缺陷。</p><p></p><h4>Spring Framework</h4><p></p><p>在通往<a href=\"https://spring.io/projects/spring-cloud\">Spring Cloud</a>\"&nbsp;2022.0.0（代号Kilburn）的道路上，<a href=\"https://spring.io/blog/2022/10/06/spring-cloud-2022-0-0-m5-is-now-available\">第5个里程碑版本</a>\"发布，主要特点是Spring Cloud子项目升级到第4版的第5个里程碑版本，包括<a href=\"https://spring.io/projects/spring-cloud-consul\">Spring Cloud Consul</a>\"、<a href=\"https://spring.io/projects/spring-cloud-gateway\">Spring Cloud Gateway</a>\"、<a href=\"https://spring.io/projects/spring-cloud-openfeign\">Spring Cloud OpenFeign</a>\"&nbsp;和<a href=\"https://spring.io/projects/spring-cloud-commons\">Spring Cloud Commons</a>\"。Spring Cloud Netflix 4.0.0-M1的主要特点是将一个依赖项升级到Eureka 2.0.0，使<a href=\"https://spring.io/projects/spring-cloud-netflix\">Spring Cloud Netflix</a>\"可以兼容即将发布的Spring Framework 6.0 和Spring Boot 3.0正式版。要了解更多细节，请查看<a href=\"https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2022.0-Release-Notes\">发布说明</a>\"。</p><p>&nbsp;</p><p><a href=\"https://spring.io/projects/spring-shell\">Spring Shell</a>\"的点版本和里程碑版本已经面向Java社区<a href=\"https://spring.io/blog/2022/10/05/spring-shell-2-1-2-and-3-0-0-m1-are-now-available\">发布</a>\"。2.1.2版本基于Spring Boot 2.7.4构建，并向后移植了一些Bug修复。3.0.0-M1版本有一些显著的变化，主要包括：依赖项升级到Spring Boot 3.x；对GraalVM的支持基本完成；Spring Shell现在是用Gradle构建的。要了解关于这些版本的更多细节，请查看<a href=\"https://github.com/spring-projects/spring-shell/releases/tag/v2.1.2\">2.1.2版本</a>\"和<a href=\"https://github.com/spring-projects/spring-shell/releases/tag/v3.0.0-M1\">3.0.0-M1版本</a>\"的发布说明。</p><p>&nbsp;</p><p>在通往<a href=\"https://spring.io/projects/spring-batch\">Spring Batch</a>\"&nbsp;5.0.0的道路上，<a href=\"https://spring.io/blog/2022/10/05/spring-batch-5-0-0-m7-available-now\">第7个里程碑版本</a>\"发布，主要特性包括：支持使用任何类型作为作业参数；改进作业参数转换。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/spring-projects/spring-batch/releases/tag/5.0.0-M7\">发布说明</a>\"。</p><p></p><h4>Eclipse Tumerin</h4><p></p><p>Adoptium工作组<a href=\"https://blog.adoptium.net/2022/10/eclipse-temurin-19-available/\">发布</a>\"Eclipse Tumerin 19，这是他们提供的OpenJDK 19下游发行版。</p><p></p><h4>OmniFaces</h4><p></p><p><a href=\"https://omnifaces.org/\">OmniFaces</a>\"<a href=\"https://balusc.omnifaces.org/2022/10/omnifaces-40-has-been-released.html\">发布</a>\"了Faces实用工具库的4.0版本，主要特点是引入了一个新方法addFacesScriptResource() 。这个方法是在Components 类中定义的，可以兼容<a href=\"https://jakarta.ee/specifications/faces/\">Jakarta Faces</a>\"&nbsp;3.0 和4.0。一个破坏性的变化是将最小依赖升级到JDK 11 和Jakarta EE 9规范，即<a href=\"https://jakarta.ee/specifications/faces/3.0/\">Faces 3.0</a>\"、<a href=\"https://jakarta.ee/specifications/expression-language/4.0/\">Expression Language 4.0</a>\"、<a href=\"https://jakarta.ee/specifications/servlet/5.0/\">Servlet 5.0</a>\"、<a href=\"https://jakarta.ee/specifications/cdi/3.0/\">Contexts and Dependency Injection 3.0</a>\"、<a href=\"https://jakarta.ee/specifications/enterprise-ws/2.0/\">Enterprise Web Services 2.0</a>\"&nbsp;和<a href=\"https://jakarta.ee/specifications/bean-validation/3.0/\">Bean Validation 3.0</a>\"。要了解关于这个版本的更多细节，请查看<a href=\"https://showcase.omnifaces.org/whatsnew#4_0\">新增内容说明文档</a>\"。</p><p></p><h4>PrimeFaces</h4><p></p><p>PrimeFaces 12.0.0<a href=\"https://github.com/primefaces/primefaces/releases/tag/12.0.0\">发布</a>\"，主要是升级了许多依赖项，包括hibernate-validator&nbsp;6.2.1.Final、tomcat.version&nbsp;9.0.58、slf4j-api&nbsp;1.7.33、mockito-core&nbsp;4.2.0、hazelcast&nbsp;4.2.4及其他Maven相关的模块。</p><p></p><h4>OmniFish简介</h4><p></p><p><a href=\"https://omnifish.ee/\">OmniFish</a>\"是一家新成立的Jakarta EE咨询和支持公司。他们已经向Java社区<a href=\"https://omnifish.ee/2022/09/22/omnifish-announces-support-for-eclipse-glassfish/\">介绍</a>\"了自己。该公司致力于提供<a href=\"https://jakarta.ee/\">Jakarta EE</a>\"、<a href=\"https://glassfish.org/\">Eclipse GlassFish</a>\"&nbsp;和<a href=\"https://piranha.cloud/\">Piranha Cloud</a>\"支持，并且已经以参与者成员的身份加入了<a href=\"https://jakarta.ee/about/working-group/\">Jakarta EE工作组</a>\"。<a href=\"https://nl.linkedin.com/in/arjan-tijms-1214aa1b1\">Arjan Tijms</a>\"、<a href=\"https://www.linkedin.com/in/mihalyiondrej/\">Ondro Mihályi</a>\"&nbsp;、<a href=\"https://www.linkedin.com/in/david-mat%C4%9Bj%C4%8Dek/\">David Matějček</a>\"和Web工程师<a href=\"https://www.linkedin.com/in/balusc/\">Bauke Scholtz</a>\"合伙创建了这家公司。他们在GlassFish、Jakarta EE、Java应用程序开发和Java中间件生产支持方面都有多年的经验。他们还是Eclipse GlassFish项目管理团队的成员。InfoQ后续将带来更详细的报道。</p><p></p><h4>Quarkus</h4><p></p><p>红帽公司<a href=\"https://quarkus.io/blog/quarkus-2-13-1-final-released/\">发布</a>\"了Quarkus 2.13.1.Final，主要是修复Bug和改进文档。由于MicroProfile规范的修改，MicroProfile OpenTracing and Metrics规范的实现<a href=\"https://smallrye.io/\">SmallRye</a>\"被弃用。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/quarkusio/quarkus/releases/tag/2.13.1.Final\">变更日志</a>\"。</p><p></p><h4>Micronaut</h4><p></p><p>Micronaut基金会<a href=\"https://micronaut.io/2022/10/04/announcing-our-new-engineering-partner-oracle/\">宣布</a>\"，Oracle已加入Micronaut基金会，成为其工程合作伙伴。这是一项新计划，旨在“识别出可以开展合作的组织，由他们赞助Micronaut框架核心提交者团队的一名或多名成员的全职工作，关注代码库的关键共享和共用部分。”自2020年以来，Oracle一直在为Micronaut项目提供开源贡献，如<a href=\"https://micronaut-projects.github.io/micronaut-aot/latest/guide/\">Micronaut AOT</a>\"和<a href=\"https://micronaut-projects.github.io/micronaut-serialization/latest/guide/\">Micronaut Serialization</a>\"。</p><p></p><h4>Eclipse Vert.x</h4><p></p><p>作为对4.3.3版本中报告的若干问题的回应，Eclipse Vert.x 4.3.4<a href=\"https://vertx.io/blog/eclipse-vert-x-4-3-4/\">发布</a>\"，主要是修复了那些Bug，记录了<a href=\"https://github.com/vert-x3/wiki/wiki/4.3.4-Deprecations-and-breaking-changes\">弃用内容和破坏性变化</a>\"，并继续为<a href=\"https://github.com/vert-x3/vertx-virtual-threads-incubator/blob/main/README.md\">虚拟线程孵化项目</a>\"提供支持。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/vert-x3/wiki/wiki/4.3.4-Release-Notes\">发布说明</a>\"。</p><p></p><h4>Hibernate</h4><p></p><p>Hibernate ORM 6.1.4.Final<a href=\"https://in.relation.to/2022/10/05/hibernate-orm-614-final/\">发布</a>\"，修复了一些Bug并进行了增强，在从包含分配了标识符的SELECT语句执行INSERT 时不再生成不必要的多表插入。</p><p></p><h4>JobRunr</h4><p></p><p>JobRunr 5.3.0<a href=\"https://www.jobrunr.io/en/blog/2022-10-03-jobrunr-5.3.0/\">发布</a>\"，支持Kotlin 1.7.20、Spring Boot 3.0.0-M5和Spring Boot上下文索引器——一个可以生成Spring组件索引的实用工具，能够加快启动时间。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/jobrunr/jobrunr/releases/tag/v5.3.0\">发布说明</a>\"。</p><p></p><h4>Apache软件基金会</h4><p></p><p>Apache Tomcat 9.0.68<a href=\"https://www.mail-archive.com/announce@apache.org/msg07626.html\">发布</a>\"，其中包含一些值得注意的Bug修复，例如：破坏JSP includes的重构回归；使用HTTP/2和NIO2过程中客户端断开连接时出现的意外超时。此外，这个版本还执行了RFC 7230——<a href=\"https://www.rfc-editor.org/rfc/rfc7230\">超文本传输协议（HTTP/1.1）：消息语法和路由</a>\"。这样，对于content-length消息头格式错误的请求，总是以400服务器响应拒绝。要了解关于这个版本的更多细节，请查看<a href=\"https://tomcat.apache.org/tomcat-9.0-doc/changelog.html\">变更日志</a>\"。</p><p>&nbsp;</p><p>Apache Camel 3.19.0<a href=\"https://camel.apache.org/blog/2022/10/RELEASE-3.19.0/\">发布</a>\"，带来了259项Bug修复、改进和依赖项升级，其中包括gRPC 1.48.1、Spring Boot 2.7.3、JUnit 5.9以及Artemis 2.25.x。hadoop-common模块已升级到3.3.3版本，解决了<a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-26612\">CVE-2022-26612</a>\"漏洞（TAR条目可能会创建未解析符号链接，指向预期提取目录下的外部目录）。要了解关于这个版本的更多细节，请查看<a href=\"https://camel.apache.org/releases/release-3.19.0/\">发布说明</a>\"。</p><p>&nbsp;</p><p>Apache Tika 2.5.0<a href=\"https://www.mail-archive.com/announce@apache.org/msg07621.html\">发布</a>\"，特性包括：改进了PDF/UA、PDF/VT和PDF/X的PDF子集信息提取；避免从PDF中提取书签时出现无限循环；通过AutoDetectParserConfig类启用提取配置。要了解关于这个版本的更多细节，请查看<a href=\"https://downloads.apache.org/tika/2.5.0/CHANGES-2.5.0.txt\">发布说明</a>\"。截至2022年9月30日，Apache Tika 1.x版本序列的生命周期已经结束，不再支持了。</p><p></p><h4>ArchUnit</h4><p></p><p><a href=\"https://www.tngtech.com/\">TNG科技咨询公司</a>\"<a href=\"https://github.com/TNG/ArchUnit/releases/tag/v1.0.0\">发布</a>\"了<a href=\"https://github.com/TNG/ArchUnit/blob/main/README.md\">ArchUnit</a>\" 1.0.0版本，这是一个可扩展的开源库，用于检查Java代码的架构，检查包和类、层和片之间的依赖关系，并检查循环依赖关系。该版本带来了多项增强，包括：不再将archunit_ignore_patterns.txt文件中定义的忽略规则与FreezingArchRule类一起填充ViolationStore接口的实例。为了消除歧义，该版本重命名了大量的“getter”方法，导致了一些破坏性的更改。InfoQ后续将带来更详细的报道。</p><p></p><h4>JHipster</h4><p></p><p><a href=\"https://www.jhipster.tech/jhipster-lite/\">JHipster Lite</a>\"&nbsp;0.17.0<a href=\"https://github.com/jhipster/jhipster-lite/releases/tag/v0.17.0\">发布</a>\"，带来了Bug修复、增强和依赖项升级，后者主要包括keycloak&nbsp;19.0.3、mongodb&nbsp;1.17.5、react-hook-form&nbsp;7.37.0和vite&nbsp;3.1.6。</p><p></p><h4>会议</h4><p></p><p><a href=\"https://devoxx.ma/\">Devoxx Morocco 2022</a>\"于上周在摩洛哥阿加迪尔的塔哈泽特湾希尔顿海滩度假酒店举行，来自Java社区的许多<a href=\"https://devoxx.ma/speakers/\">演讲者</a>\"发表了演讲，主题包括：Java与编程语言；架构与安全；Devops、云、容器和基础设施；数据与人工智能。</p><p>&nbsp;</p><p>类似地，<a href=\"https://jaxlondon.com/\">Jax London 2022</a>\"于上周在英国伦敦的<a href=\"https://www.businessdesigncentre.co.uk/\">商业设计中心</a>\"举行，吸引了许多来自Java社区的<a href=\"https://jaxlondon.com/speakers/\">演讲者</a>\"，他们出席了各<a href=\"https://jaxlondon.com/program/?sands_sessiontypes_type=110&amp;sands_tracks_type=0\">分会场</a>\"和<a href=\"https://jaxlondon.com/program/?sands_sessiontypes_type=111&amp;sands_tracks_type=0\">研讨会</a>\"。</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/10/java-news-roundup-oct03-2022/\">https://www.infoq.com/news/2022/10/java-news-roundup-oct03-2022/</a>\"</p>",
    "publish_time": "2022-10-14 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "AI 时代，图神经网络将走向何方？| InfoQ《极客有约》",
    "url": "https://www.infoq.cn/article/YIv70yFzcgbidcZyoNI5",
    "summary": "<p>究竟什么是图神经网络，它为什么会这么“热”？经过多年技术演进，图神经网络将走向何方？本期InfoQ《极客有约》，听业内权威大咖聊一聊图神经网络的过去、现在和未来。</p>",
    "publish_time": "2022-10-14 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "亚马逊云科技开发者官网上线，为什么值得关注？",
    "url": "https://www.infoq.cn/article/Z0QjFecVCY9NjsGwg1Cc",
    "summary": "<p>作为一名云时代下的开发者，你会从哪里获取技术开发资料、技术实操指南以及前沿技术讨论？</p><p>&nbsp;</p><p>各大云厂商的开发者社区网站是一个不错的选择。</p><p>&nbsp;</p><p>10月14日，<a href=\"https://dev.amazoncloud.cn/\">亚马逊云科技开发者官网</a>\"正式上线。进入中国9年后，亚马逊云科技希望通过丰富的技术内容，做到本土化、全球性和开放性，为中国开发者打造链接全球技术资源的平台，助力开发者的成长与成功。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/9d/13/9d83655cd852ae2fe5eda39ac2c7c613.png\" /></p><p></p><p>&nbsp;（亚马逊云科技开发者官网）</p><p>&nbsp;</p><p>&nbsp;亚马逊云科技开发者官网的整体设计也基于这样的前提。网站定位在“世界级的开发者社区”，而其中的“世界级”指的是能够链接全球资源与中国开发者的能力，既可以帮助中国开发者方便地获取前沿云知识、云技能，提升个人技术实力；还可以帮助将国内开发者与全球开发者社区相连接，让中国开发实力展现给世界。对于国内开发者而言，无疑是如虎添翼。国内正在使用亚马逊云技术或者云服务的个人开发者、基于亚马逊云技术进行技术创新和提供解决方案的生态开发者将最先受益。</p><p>&nbsp;</p><p>“世界级的技术内容”是亚马逊云科技开发者官网的又一个重要标签。亚马逊云科技开发者官网上的内容，来自亚马逊云科技在全球范围内经年的技术内容积累，包括不限于技术博客、过往技术大会演讲等。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/86/82/864da5cceea9e29b2341309feb075e82.jpg\" /></p><p></p><p>大量的技术内容被亚马逊云科技开发者官网重新规划，在官网上线的板块中，设计了专栏、视频、问答、社区、活动、大赛六大核心板块，面向不同职业技能阶段的开发者设计不同的形式或内容呈现。其中，专栏和视频这两个随取随用的技术内容板块值得重点关注。</p><p>&nbsp;</p><p>亚马逊云科技开发者官网的专栏分为技术专栏、Builder专栏、Hero专栏三大版块。其中，技术专栏面向企业或技术团队，Builder专栏和Hero专栏面向个人开发者。在技术专栏中，亚马逊云科技的客户企业和合作伙伴，可以建立技术专栏号，分享在亚马逊云科技上开发的心得，建立技术品牌影响力；在Builder专栏和Hero专栏，个人开发者们可以根据擅长的技术方向，建立个人专栏，与同好交流技术心得。值得国内开发者关注的是，专栏中优质的技术内容会被亚马逊云科技精选推荐给全球的技术布道师，推荐布道师将国内开发者的技术内容分享给全球开发者。</p><p>&nbsp;</p><p>亚马逊云科技开发者官网已经在内测期吸引了一些技术团队和个人开发者。比如在Builder专栏上，《通过亚马逊云新用户入门学习计划快速上手云上无服务器化的MySQL数据库》一文从创建Aurora Serverless数据库集群开始，一步步图文教学了在EC2实例中创建连接MySQL数据库的全过程。</p><p>&nbsp;</p><p>程序在计算机中奔跑，技术在开发者手中流动，更多的技术创新才会在技术社区中发生。</p><p>&nbsp;</p><p>视频板块是整个内容板块中另一大值得关注的板块。该板块包括大会演讲、产品技术、海外大咖访谈等等。比如，亚马逊云科技每次对外公布的最新技术进展中，最新发布的技术工具的使用实操教程，都有可能由专家手把手录制教程，逐一讲解，作为产品技术入门实操课呈现在官网上。此外，开发者们不仅可以从视频专栏中获得具体的技术实践指南，也能看到Java之父James Gosling博士等技术大咖对于未来技术趋势的判断。从浅入深，从微观到宏观的各类技术内容都可以像电视栏目一样随时点播。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/d1/c2/d17cf057ca3e705a01c9a4d57265yyc2.png\" /></p><p></p><p>目前上线的视频专栏内容组块中，有《<a href=\"https://dev.amazoncloud.cn/video\">5分钟云上聊代码</a>\"》、《ML School》、《This is the Serverless》以及《大咖访谈》等十余个不同风格和内容方向的视频栏目。Java之父James Gosling博士在InfoQ对Java之父James Gosling博士<a href=\"https://www.infoq.cn/article/GiiczmxpRT8q0adEvcRw\">的独家视频专访</a>\"&nbsp;就在《大咖访谈》栏目中。他在访谈时提到，Java得以拥有顽强的生命力的原因，除了多线程编程、多种内置安全功能和内存管理机制外，能够在无须停机的前提下修复运行中程序的热补丁修复程序，是Java中非常独特的功能，就来自于亚马逊开发者。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/d3/7a/d3yy09e67afb0ffea0a1a0fc94a3457a.png\" /></p><p></p><p>具体的视频课程还有如《初创公司开发者之机器学习的101种方法》、《无服务器应用DevOps最新实践》、《无服务器云原生数据库极致弹性伸缩体验》等等都在视频栏目的不同内容组块中。</p><p>&nbsp;</p><p>更多互动性强的活动，聚集在问答、社区、活动、大赛板块。亚马逊云科技每年定期举办的活动如Build On、Meet up、T&amp;C Public Class、Dev Day、Tech Talk和Community Day的大量优质内容，都将以文字或者视频形式精选沉淀在网站上。</p><p>&nbsp;</p><p>根据调研结果显示，国内的开发者群体中，有相当一部分人对于数字化转型和云计算，还处在被普及的学习阶段，需要找到一些渠道去系统学习这方面的内容。这也是亚马逊云科技推出中国开发者官网的初衷之一。</p><p>&nbsp;</p><p>亚马逊云科技开发者官网希望做到本土化、全球性和开放性，不仅链接全球的资源给中国的开发者，也希望承担桥梁的作用，将国内开发者在网站上创作的优质内容，散发到亚马逊云科技全球的技术社区中。一个开源开放的社区，才会更有生命力。</p><p>&nbsp;</p><p>中国云服务市场作为全球第二大云服务市场，一直是云厂商持续深耕的核心市场。我们可以看到，几乎云厂商都在建设开发者社区——不仅是一个技术符号，也是与广大开发者们建立交流的直接载体，或侧重产品、或侧重服务、或侧重内容，对外系统、全面、完整地展现技术实力。粗略划分国内开发者社区，基本也就是云厂商社区、媒体社区和开源组织/基金会的社区了。</p><p>&nbsp;</p><p>如果说技术创新引领行业发展方向，那么开发者社区的建设，就是在肥沃国内技术生态的土壤。从开发者角度来看，此次亚马逊云科技中国开发者官网的上线，一定程度上会刺激国内开发者社区的生态。处于一个良好的开发者社区生态中，开发者们也将因此受益。</p>",
    "publish_time": "2022-10-14 14:30:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "《架构师成长计划》AI 驱动的生命科学创新范式之变",
    "url": "https://www.infoq.cn/article/WYtAKEdxlZyIfJ5ulViD",
    "summary": "<p><strong>介绍：</strong></p>\n<p>国际学术期刊Science/AAAS和英特尔在全球首次联袂推出第一季《架构师成长计划》以来，吸引了无数架构师踊跃参与，获得业内广泛赞誉。为持续助力架构师把握数智机遇，构建未来，第二季《架构师成长计划》全新升级，强势归来！业内顶尖架构师大咖齐聚，为架构师群体量身打造系统成长课程，带来涵盖云游戏、云原生、联邦学习、生信大数据、网络智能化、AI for Science、算力网络、云网融合等多个热门话题的前沿技术及案例实践。</p>\n<p>AI在各行业中的应用实践正日渐深入。其价值，不仅仅在于可替代或辅助人工来从事越来越多感知、分析和预测类的任务，更关键的，是它同时也为基础科学领域贡献了更为高效、精准和高性价比的研究支持，以至于AI for Science成为目前最为热门的AI应用话题之一。以2021年开源的AlphaFold2为例，其突破性地解决了生物学界长达50年的蛋白质结构预测难题，成为了AI在生物学、生命科学、医学和药学等领域落地应用的重要实现。如今各类AlphaFold2项目在产、学、研各细分领域中广泛开展，其技术管线对于推理的高通量和高性能的需求与日剧增。在这种情况下我们应该如何优化AlphaFold2，以突破其在算力和存储的瓶颈，去开拓更大范围的蛋白结构探索空间？如何在这一波技术创新浪潮中为未来更多现象级的新技术、新应用和新模型的开发和应用做好准备，从而能够更好地帮助推动医药与生命科学领域的产业创新？</p>\n<p>英特尔《架构师成长计划》第八期火热上线！特邀晶泰科技首席研发科学家杨明俊、英特尔人工智能架构师杨威、量子位总编辑李根，聚焦“AI for Science”，重点探讨AI在医药研发和生命科学创新中的价值与贡献，分享这些领域中的前沿技术和应用进展，并详细介绍如何基于第三代英特尔® 至强® 可扩展平台实现AlphaFold2的端到端优化，以期为您相关工作的开展和加速提供借鉴与参考！期待与您线上相聚！更多精彩内容https://bizwebcast.intel.cn/eventstart.aspx?eid=328&amp;tc=2s1ce93bpx&amp;frm=InfoQ。</p>\n<p><strong>精彩亮点</strong></p>\n<p>AI for Science在医药与生命科学领域中有哪些核心应用场景、起到了哪些关键作用？</p>\n<p>晶泰科技在AI制药创新和探索中收获了哪些重要成果、前瞻洞察和成功经验？</p>\n<p>英特尔在AI+生命科学，甚至是整个AI for Science领域，有哪些策略和重心？</p>\n<p>在蛋白质结构预测上大放异彩的AlphaFold2，是如何在CPU上实现高达23倍性能提升的？</p>\n<p>面对未来医药和生命科学领域与AI等先进IT技术更进一步的融合，架构师们需要做好哪些准备？</p>\n<p><strong>议程</strong></p>\n<p>圆桌讨论：AI驱动的生命科学创新范式之变</p>\n<p>杨明俊 晶泰科技首席研发科学家</p>\n<p>杨威 英特尔人工智能架构师</p>\n<p>李根 量子位总编辑</p>\n<p>课程分享：创新药物发现中的计算模型发展</p>\n<p>杨明俊 晶泰科技首席研发科学家</p>\n<p>课程分享：基于至强®可扩展平台实现AlphaFold2端到端优化</p>\n<p>杨威 英特尔人工智能架构师</p>",
    "publish_time": "2022-10-14 17:03:04",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Serverless 架构的 N 种可能，你 Pick 谁？",
    "url": "https://www.infoq.cn/article/xj8wDg8YX0vgoDe7fHOz",
    "summary": "<p>一个新概念走向万众瞩目的架构需要经历多久的时间？Serverless 用了将近十年。</p><p></p><p>从 2012 年首次进入大众视野，到 2014 年亚马逊云科技发布 Amazon Lambda 完成商业化飞跃，再到如今，越来越多的云产品走向 <a href=\"https://www.infoq.cn/article/G6Ck2uC4vawOCGGLGExl\">Serverless</a>\" 化...... Serverless 架构在推动云计算前进的过程中，扮演着越来越重要的角色，也同时拥有了更丰富的落地场景。有关无服务器的讨论话题，早已悄无声息地从“为什么用”向“如何更好地用”转变。</p><p></p><p>Serverless 架构如何更好的落地实践？在 Serverless 场景下如何做业务创新？亚马逊云科技作为 Serverless 持续发展的先行者与推动者，围绕 “Serverless For Good” 这一主题举办了“亚马逊云科技 2022 编程挑战赛”。本届大赛于 10 月 14 日完美收官，获奖情况如下：</p><p></p><p>冠军：Ouroboros 队（李若然、刘霄鹏）</p><p>亚军：破浪乘风队（李世峰）</p><p>季军：Lili 队（李伟玲、周耀伟）</p><p>优秀奖团队：Dragon-Ponderyao（周泳龙、姚泽鹏）、铸心科技（钟志强、胡桐）、inplayable（方亮，武杰，张彦升，苏子阔，王生财）</p><p></p><p></p><h2>从一场比赛到玩转 Serverless</h2><p></p><p></p><p>从初赛到决赛答辩，“亚马逊云科技 2022 Serverless For Good 编程挑战赛”整个赛程历时 3 个多月的时间，汇集了来自全国各地的开发者。</p><p></p><p>亚军获得者李世峰表示，之前对 Amazon EC2 等服务用的比较多，亚马逊云科技的 Serverless 服务对于他来说还比较新，接触的不是特别多。</p><p></p><p>决定参与亚马逊云科技编程挑战赛，对李世峰而言其实是机缘巧合。当时，李世峰正在用某云厂商的无服务器技术做视频转码，刚好看到亚马逊云科技的 Serverless 大赛，也是想体验一下亚马逊云上的 Serverless 开发，于是决定试试。这次比赛接触下来，他表示，体验感非常好，比如，一般开发是基于容器，容器上了云再通过不同方式调度，但是采用 Amazon Lambda 基本不用考虑这些事，上传一个命令就搞定了，并且能够马上调用。用他的话说，简直太爽了。他说 ：“亚马逊云科技很多的功能、接口都是开放出来的，确实能做很多事情，相比之前用过的云服务只能做一些比较粗颗粒的事情，亚马逊云提供的 Serverless 服务能够进行更加细粒度和更加精准的控制。”</p><p></p><p>也许每个选手对于 Serverless 的了解程度不尽相同，但对于所有的参赛选手而言，都存在一个共同的特质，那就是愿意接受新技术并勇于面对挑战。</p><p></p><p>冠军获得者是来自戴姆勒大中华区投资有限公司的 Ouroboros 队。Ouroboros 队的两名队员李若然、刘霄鹏本来就是两个典型的技术达人，喜欢“捣鼓”。李若然平常就会自己搭建一些好玩的应用，像智能家居方面通过手机实现家电远程控制的程序、新旧设备管理方面的应用、混沌工程的设计等等。李若然说：“我们都很愿意尝鲜，喜欢尝试新的东西，也都是亚马逊云科技的铁粉，只要亚马逊云科技推出新的服务，我们就想要试一试。”</p><p></p><p>对于这次参赛经历，李若然表示，让他觉得最兴奋的是能够跟其他出色的、对于技术感兴趣的人一起进行交流，如果不是在竞赛的环境里，很容易会停下来，而这次比赛让他们开阔了眼界，了解到行业还有更多有价值的东西值得探索，很多需求是更贴近真实的终端用户，贴近消费者的日常的。</p><p></p><p>本次大赛整体希望参赛选手结合自身工作经历、兴趣爱好、当下现代化应用的构建需求，呈现出完整、精彩的 Serverless 解决方案。初赛的定向赛，主要考察参赛选手们对于 Serverles 架构的了解；决赛阶段难度飙升，不再限定具体的场景，而是需要参赛团队基于自身对于 Serverless 架构的了解，发挥想象力和创造力，自由完成现代化应用场景的搭建，并且每支参赛团队必须完成能够试用的 Demo。参赛选手的作品均基于 Amazon Serverless 架构实现。</p><p></p><p><a href=\"https://www.infoq.cn/article/71YSU9VoU86bsHDyHM3Y\">赛题回顾</a>\"</p><p></p><p></p><h2>获奖作品大盘点，你 Pick 谁？</h2><p></p><p></p><p>基于 Serverless 架构设计的图像处理低代码平台；低成本、低延迟、高可扩展性的视频直播方案；聚焦网络与数据安全开发的漏洞修补服务；基于电商网络海量评论数据的情感与关键词分析平台...... 参赛选手们的作品精彩纷呈。本次大赛的评委之一，亚马逊云科技大中华区产品部无服务器产品经理马平表示，从决赛 10 支队伍的阐述中，他也学到了不少。</p><p></p><p>众多优秀的作品之中，为什么是这三支脱颖而出？到底是什么特质打动了现场的评委老师们。接下来，小编就带你细细盘点下获奖的个三支作品。</p><p></p><p></p><h3>冠军作品：Serverless for Security Hub</h3><p></p><p></p><p>【Ouroboros 队】将 Serverless 架构用于解决企业面临安全问题。他们凭借一款基于 Amazon Security Hub 的漏洞修复服务，将本次大赛的冠军稳稳的收入囊中。</p><p></p><p>安全无小事，基于安全方面的问题，业界已有很多非常有效的安全工具，用以进行代码扫描、威胁检测等等，但目前仍面临两大挑战，其一，是跨国公司在中国可能没有销售许可证，导致这些工具对于跨国公司来说没办法采用。其二，是这些安全工具的费用普遍较高，中小型企业很难承受。</p><p></p><p>Ouroboros 提出的解决方案主要基于亚马逊云科技提供的一款 Amazon Security Hub 服务。Amazon Security Hub 可以将云上所有资源里不符合 Amazon 基础安全最佳实践 v1.0.0 和独联体亚马逊基金会基准 &nbsp;v1.2.0 规范的漏洞扫描出来并进行展现，用户可以根据扫描结果对漏洞进行修复和处理。Ouroboros 基于 Amazon Security Hub 的 Findings，开发了一款 Serverless 的漏洞修复 Handler。</p><p></p><p>为什么会考虑开发一款这样的服务？刘霄鹏介绍说，云上资源主要是通过代码管控，Amazon Cloud Formation 等工具能够让开发者快速把云资源调度起来，采用 Serverless 架构能够极大的提升效率，并降低企业在安全方面的资金投入，实现降本增效。Ouroboros 基于 Serverless 设计，不需要真正的服务器不断运行监控 Findings，而是依托于 Amazon Security Hub，只有当 Amazon Security Hub 检测出漏洞，才启动修复。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/97/970e9abf818bc7f986e4af7fc1371bdc.png\" /></p><p>Ouroboros&nbsp;队作品技术架构图</p><p></p><p>不仅如此，Ouroboros 还考虑到了应用的可扩展性。安全规范与法规通常是不断更新的。在 Ouroboros 中，对于规范里不同的 Findings，设计了不同的 Handler。这些 Handler 在实际应用过程中，可以由整个社区贡献，通过这样的方式，能够不断扩展 Ouroboros 修复漏洞的范围，社区的用户都能贡献自己对于不同类型的 Findings 修复的处理方式，形成一个安全的生态系统。</p><p></p><p>对于 Ouroboros 的作品，现场的四位评委都给予了很高的评价。亚马逊云科技大中华区产品部资深无服务器技术专家孙华非常直接的表示，Ouroboros 提出的安全自动化的方案对于企业是非常实用的，如果真的开源出来，可以直接在国内的客户里进行推广。</p><p></p><p></p><h3>亚军作品：基于 Amazon Serverless 的低成本、低延迟、高可扩展性的视频直播方案</h3><p></p><p></p><p>获得本次大赛亚军的选手，破浪乘风队的李世峰，作为个人参赛选手当仁不让，结合来自教育行业的工作经历，设计了一款低成本、低延时、高扩展性的视频直播解决方案。李世峰用一张 Serverless 技术架构图直观的展现了该方案下创建直播的流程。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/88/8839c6341f9fcbad2637c04cab0d5048.png\" /></p><p>破浪乘风队作品技术架构图</p><p></p><p>用户在浏览器中打开托管于 Amazon S3 的网页，通过 JS SDK 向 Amazon Lambda 发出请求，然后在 Amazon Lambda 中向 Amazon CloudFormation 发起一个创建 Stack 的请求，由于这个步骤是一个比较耗时的操作，所以没有做 blocking wait，而是异步地让 Amazon CloudFormation 将 Stack 创建完成的消息通知给 Amazon SNS，再在另外一个 Amazon Lambda 里处理这个消息，基于新创建的 Stack 启动 Fargate 实例。启动 Fargate 实例同样也是一个耗时的操作，所以方案让 Amazon ECS 状态改变的信息根据指定的过滤规则发送到 Amazon EventBridge，再由 Amazon EventBridge 发送给 Amazon SNS，最后交 Amazon Lambda 处理。当新启动的 Amazon Lambda 实例准备就绪的时候，客户端就可以通过 WebRTC 连接上来，从而实现低延迟的直播收看。</p><p></p><p>低延迟之外，项目的高扩展性又是如何实现的呢？李世峰介绍，每个 Fargate 实例上运行的 OvenMediaEngine 开源流媒体引擎既可作源节点，又可作为边缘节点。作为源节点它可以将流媒体中继到下一层级的节点，作为边缘节点它可以直接接受用户的观看连接，这样，通过增加层级就可以不断地动态调整直播网络，形成一个树状、甚至是更稳定的网状结构，支持直播观众群规模的动态扩大。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ad/ad0ad9c5868d22d60bce5d58bc5075a3.png\" /></p><p></p><p>直播成本方面包括网络流量费用和 Fargate 实例费用（包括 vCPU、内存、磁盘和 IP 地址的成本）。答辩环节，李世峰以一场百万用户同时在线的直播为例，对成本进行了细致的估算。较市面上相同技术指标的某互动直播解决方案，基于 Amazon Serverless 架构的本方案成本可以下降 69%-77%，运维成本几乎为零，即申请即用、用完即停，避免了资源浪费。</p><p></p><p>对于该方案，科大讯飞资深 AI 平台架构师吴义平给与了充分的肯定。他说：“这种偏分布式的推流架构，在技术上拥有很高的可行性，在众多作品中给我留下了非常深刻的印象”。</p><p></p><p></p><h3>季军作品：Serverless 架构的图像处理低代码平台</h3><p></p><p></p><p>近年来，如果说到技术圈的热门话题，低代码一定榜上有名。获得本次大赛季军的 Lili 队利用 Serverless 架构开启了<a href=\"https://www.infoq.cn/article/lqvpIfkpbiv6Q7vO7N2A\">低代码</a>\"的实践之旅。李伟玲和周耀伟共同开发了一款 Serverless 架构的图像处理低代码平台。</p><p></p><p>该方案基于亚马逊云科技 Serverless 架构来进行部署，用户可以用画流程图的方式实现图像处理，几乎不需要编写代码，操作门槛低。Lili 队将技术架构分为后端和前端两个部分来进行介绍。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ae/aeff7a4ebdde588974c469a7c7cd867a.png\" /></p><p>Lili&nbsp;队作品技术架构图</p><p></p><p>后端架构，图像处理过程通常可由部分基本单元操作组合而成，通常称为“算子”，比如旋转，切割，缩放都是算子，这些算子可以通过函数封装起来，也可以进一步组合成新的更高级的算子。不同算子在运行过程中消耗的内存和 CPU 都是不一样的，传统的基于 Server 的部署方式很难扩展，亚马逊云科技的 Serverless 架构就可以很完善的解决这个问题，将算子通过 Amazon Lambda 来部署，既能满足不同的资源要求，又能按实际使用量进行横向扩展。</p><p></p><p>前端部分，采用前后端分离架构，前端使用 VUE+ElementUI 架构，流程图使用 jsplumb 组件构建，并使用 webpack 进行打包管理。</p><p></p><p>平台的主界面分为菜单栏、所有算子区，工作区三个部分。用户可以直接拖拽算子到工作区，并在右边的编辑界面，设置具体的参数，即可完成图片的一系列处理。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f4/f4b77d048baa3d8ef37b694da3ccd760.png\" /></p><p></p><p>目前该平台仅能完成单张图片的加工和处理，无法提供批量处理的能力，导致面向的用户群体不够清晰。吴义平表示，该产品的核心思路非常具有吸引力，并且充分利用了亚马逊云科技云上弹性、资源方面的优势，非常契合 Serverless 的使用场景，但是在应用层面，可以结合其他场景进行创新。对于评委老师的提议，李伟玲表示非常认可。她说，在开发平台时他们就已经考虑到这个问题，但由于时间紧张，因此仅仅做了简单的实现，赛后，他们也将继续对于方案进行优化与完善。</p><p></p><p>丰富的作品，激动人心的对决，志同道合的伙伴间的交流碰撞、指导老师耐心的指导与中肯的建议...... 每位选手都满载收获的同时，也意味着“亚马逊云科技 2022 Serverless For Good 编程挑战赛”正式圆满落下帷幕，期待着明年再见。</p><p></p><p>本次大赛决赛现场答辩的视频回放，可在「自由构建 探索无限」亚马逊云科技中国峰会上在线观看，感兴趣的开发者<a href=\"https://summit.awsevents.cn/2022/?source=F04ms8O1LbDHUVU1+7qpb9CBp8CGneMiPTDmXB1qHww=&amp;tab=1&amp;type=2\">点击此处</a>\"可直达峰会现场。峰会还有数百场行业与技术分论坛超干货专场主题分享等待着大家，期待大家解锁更多精彩有趣的内容。</p><p></p>",
    "publish_time": "2022-10-14 17:30:53",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "中国移动磐⾈DevOps平台实践",
    "url": "https://www.infoq.cn/article/WZSiiFvZIrVUz9NQCucN",
    "summary": "<p>本演讲分享了中国移动磐舟一体化开发交付平台在敏捷研发、统一制品、开源治理、安全扫描、开发环境、持续交付、<a href=\"https://xie.infoq.cn/article/a647ecf56671c0d2e1b041325\">GitOps</a>\"等方面的建设实施以及效果提升，并与大家一起探讨低代码与Serverless的未来演进。目前磐舟平台已服务300多开发项，近200个代码仓库，管理代码超2亿行，制品超50万，服务调用超3亿，月均部署近万次。在云原生开发方面起到了显著地引导作用，促进了中国移动数字资产沉淀，提升了整体研发效能，推动了应用从on cloud 向 in cloud的演进。</p><p>&nbsp;</p><p>本文整理自中国移动信息技术中心PaaS架构师魏宝辉在<a href=\"https://dive.infoq.cn/2021/beijing/track/1205\">DIVE全球基础软件创新大会 2022</a>\"（<a href=\"https://dive.infoq.cn/2021/beijing/track/1211\">基础设施及架构设计专场</a>\"）的演讲分享，主题为“<a href=\"https://dive.infoq.cn/2021/beijing/presentation/4314\">中国移动磐舟DevOps平台实践</a>\"”。</p><p>&nbsp;</p><p>分享主要分三个部分展开：第一部分是磐⾈<a href=\"https://xie.infoq.cn/article/07e52393c6302becad21418dc\">DevOps</a>\"平台的建设背景及成效；第二部分是磐⾈DevOps平台在DevSecOps、Serverless等方面的云原⽣实践；第三部分是磐⾈DevOps平台的未来演进⽅向。</p><p>&nbsp;</p><p>以下是分享实录：</p><p>&nbsp;</p><p></p><h1>DevOps平台的建设背景及成效</h1><p></p><p></p><h3>云原生已是大势所趋</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/c5/c518f1bdcc76c8da72443a8b342e34d7.png\" /></p><p>最近几年，云原生已成为一个非常热门的话题。以容器、微服务、DevOps为核心的云原生技术快速地席卷了整个互联网行业，此外，传统行业也已经加入到了云原生的行列之中。</p><p>&nbsp;</p><p>为什么要做云原生技术呢？首先，云原生技术能够帮助我们业务系统快速地进行迭代；其次，它能够有效地降低企业在IT开发和运维方面的成本；最后，它也能够提高我们企业业务的创新效率和产业的价值。</p><p>&nbsp;</p><p>总体来说，我们经历了从传统服务器时代到云化时代、再到云原生时代三个大的阶段。我们从最开始的小型机、X86服务器演进到后来的云化资源池，再到现在在云化资源池上发展出来的云原生技术底座。</p><p>&nbsp;</p><p>通过这三个大的阶段，在完成云原生技术之后，我们发现：应用随着基础设施的下沉，业务能力的沉淀复用，成为了这种软件模块化的一些能够“化整为零”的“积木”。容器将这些“一块块的积木”和运行环境打包在一起，形成了一个个可以独立运行的“集装箱”，这使得运维更加容易了。此外，在微服务时代，由于要结合容器，对应用的编排需求就会更加迫切。通过组装“集装箱”的方式进行装配编排，也使得我们的调度更加轻松、交付更加迅速了。</p><p></p><h3>云原⽣技术底座是数智化转型的最佳实践</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/7e/7e362ee9689e07d77cd3838a3259a32f.png\" /></p><p>云原⽣技术底座向上可为中台和平台能⼒的统⼀封装、灵活调⽤提供技术基础；向下可调度、兼容各类异构“算⼒”，促进资源、要素的⾼效汇聚、流动、共享，具备敏捷、海量和简单的特点。它以弹性可扩展、⾼可⽤、⾼灵活、强兼容性和低成本的⽅式将云的价值最⼤化，也能让云把它的价值输送到应用之中，应用通过云原生的一些开发基础也能够把云计算基础设施所带来的这种便利能力对外释放，形成我们业务上的一些应用价值。</p><p>&nbsp;</p><p>在中国移动，云原生技术底座拓展了我们“连接+算⼒+能⼒”的这种新型信息服务体系，在我们集团内外部的“上云⽤数赋智”，以及落实世界一流“⼒量⼤厦” 等方面的战略布局都成为了一个有力的帮手，所以说在我们中国移动内部，云原生技术底座是数字化转型的一个最佳实践。</p><p></p><p></p><h3>打造⾃主可控云原⽣技术底座：磐基、磐舟</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/54/54b09c58a79398ba0e48be4fa80a9b66.png\" /></p><p>磐基、磐舟是我们自主可控的云原生技术底座，是以自研为主，打造的共平台、共研发、共能力的云原生技术体系。</p><p>&nbsp;</p><p>磐基、磐舟在我们内部是两个大的品牌，它们的云原生技术底座是统一的。磐基PaaS平台，磐舟DevOps开发平台，以统一的技术栈加快对技术组件的收敛、服务标准构建；基于盘舟一体化开发交付平台能够加强对开发过程的端到端管控，包括像需求任务管理、代码管理、自动化的一些编译扫描、灰度发布。在磐基上可以进行弹性计、微服务治理、多集群管理等等一系列的生产运行，两者融合为开发交付一体化的解决方案，推进了应用从开发阶段生于云上，实现应用的全生命周期的管理，充分释放云原生的价值。</p><p>&nbsp;</p><p>通过我们引入云原生的核心技术，能够让开发更简单，让部署更容易，让生产运转地更加高效，也能够让系统的韧性更加强劲。而且通过这种模式也把我们的IT治理体系变得更为全面了。</p><p>&nbsp;</p><p></p><h4>磐基PaaS平台核⼼能⼒</h4><p></p><p><img src=\"https://static001.geekbang.org/infoq/e5/e52d03495a748b76515e1849fae37e54.png\" /></p><p>磐基PaaS，由统⼀PaaS⻔户、⽣产运⾏⽀撑、平台管控治理等组成，具备多租户管理、多集群管理、统一的镜像管理、应用的可视化管理以及微服务管理，而且包含了像开源软件管控、智能运维管理等一系列的管理方式。能够极大地减少应用开发运维的工作，为能力向共享、拉通奠定基础，提升了资源的利用率。</p><p>&nbsp;</p><p></p><h4>磐⾈平台核⼼能⼒</h4><p></p><p><img src=\"https://static001.geekbang.org/infoq/5c/5c8c7aed9d287f26f9a65c1ffc4f5ba4.png\" /></p><p><a href=\"https://www.infoq.cn/article/BqXFSG7dm8dVtoqrzLRF\">磐舟平台</a>\"是一个与磐基平台共平台、共研发、共能力的平台，它主要侧重在端到端的自动化交付流水线，能够沉淀IT软件资产、核心的代码掌控，也能够让我们的开发过程更加可控，通过流水线使我们的开发交付效率再进一步提升。</p><p>&nbsp;</p><p>磐舟平台是将我们中国移动在开发交付过程中沉淀的经验提炼为最佳平台实践的能力，为团队也提供云原生的DevOps研发环境和DevOps的一些落地手段。推进业务系统规范、标准、自动化地进行业务交付，通过统一的规划、建设、运营实现统一技术生态下的应用系统开发，快速提升研发效率，节约开发成本，支撑应用从开发阶段⽣于云上，融入云里，最终成长为云原生应用，充分释放云原生的价值。</p><p>&nbsp;</p><p></p><h3>磐基、磐舟规模落地，推动集团核⼼业务云原⽣转型、</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/b5/b525802b7bd3e2d1958adf96e3bf68ac.png\" /></p><p>磐基、磐舟的规模落地，推动了我们集团核心业务系统向云原生的转型。我们通过磐基、磐舟这两个有效的手段，推动业务系统向云原生方向进行演进，在大规模的落地过程中，不断地强化了全网IT系统自主开发的过程，也提高了我们业务系统向云原生转型的程度。</p><p>&nbsp;</p><p>磐基PaaS平台方面，覆盖了大概B/O/M三个域的160多个核心业务系统，建成了大概200多个K8S集群，节点规模数现在已经达到1.5万，容器实例数已经达到10万+。</p><p>&nbsp;</p><p>磐舟方面，也已经覆盖了150多个核心系统，托管了2300多个代码仓库，管理了5亿多行代码，制品方面也已经提供了6亿多次的服务。</p><p>&nbsp;</p><p>应用效果方面，像一些核心的计费系统：开发代码的工作量比以前有了显著的降低，整个开发过程也有了比较好的效率提升，系统中断时间也从分钟级缩短到了秒级，系统扩容响应的时间也有了较大的提升。在一些省份公司和专业机构中也有相关的一些案例。</p><p>&nbsp;</p><p></p><h1>磐⾈DevOps平台的云原⽣实践</h1><p></p><p>&nbsp;</p><p>接下来，我们看一下磐舟DevOps平台是如何进行云原生实践的。</p><p><img src=\"https://static001.geekbang.org/infoq/a4/a41f87289449e1a231db904080d3891d.png\" /></p><p>磐基是生产运行的过程，磐舟为业务系统的开发提供了开发工具链，像需求设计、任务拆分、迭代、发版管理等等的一些敏捷开发过程，而且我们实现了一些CI/CD的流水线，在流水线的基础上也融入了DevSecOps的理念。不仅如此，我们也提供了开发环境，可以支撑应用在线拉起、开发测试、服务联调。覆盖了从代码到运行的全过程。</p><p>&nbsp;</p><p>接下来也会随着Serverless的引进，进一步地抽象平台能力，将磐基磐舟向Serverless方向做进一步的演化。</p><p>&nbsp;</p><p></p><h2>DevSecOps工具链</h2><p></p><p></p><h3>敏捷研发</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/75/75046366df7dd66dbb363be73b55ea4e.png\" /></p><p>在DevSecOps工具链方面，首先不能不提的就是敏捷研发。但是在我们移动内部，有很多传统的瀑布式开发，也有敏捷的开发，还有很多特性的研发诉求，现有的工具不能很好地支撑。</p><p>&nbsp;</p><p>磐舟是基于我们自主开发的，能根据内部的一些开发方式、开发需求、开发的个性化诉求进行定制化的开发，尤其是在开发过程方面，不仅仅是提供需求、任务、缺陷、迭代、发版等基础功能，还能够识别像研发的状态、研发的工作量、研发的任务与代码的关联，并能为后续的发版追溯。在关键流程体系方面，实现了对需求管理、敏捷开发、测试管理、发布管理，还有变更管理的一些流程支持。在日常协作方面，满足了各种开发团队对于电子台账、每日站会、重点关注、多人评论等等方面的一些诉求。在追溯性方面，也打通了需求、代码、部署，通过关联，实现从需求到代码到版本的统一管理。</p><p>&nbsp;</p><p></p><h3>安全代码托管</h3><p></p><p>&nbsp;</p><p>任务分解之后，面临的第一件事情就是我们需要写代码，代码托管在哪里？我们在磐舟上提供了一个安全的代码托管工具。</p><p><img src=\"https://static001.geekbang.org/infoq/a3/a3f70961527e3ccabf1a77d543d01797.png\" /></p><p>磐舟是在生产环境上提供统一的代码仓库，用户可以根据自己的研发模式来创建、管理代码仓库，而且在安全权限方面，也支持设置团队的成员、密钥等等一些个性化的校验。目前来看，我们有很多应用都是微服务的，微服务一般会创建多个仓库，多人协同，共同开发。支持使用一些模板化的工具对仓库进行统一的初始化管理。在开发方面，也支持像IDEA、Eclipse等等的一些编辑器，从本地环境中进行直接的拉取、提交、推送代码。在平台页面上，也提供了一些管理的功能，如合并、操作、比较等等的一些管理功能。除此之外，我们还在界面上提供了云IDE的开发环境，因此一些简单的操作，一些简单的调试，用户也可以从在线的IDE中直接打开代码，进行开发调试。</p><p>&nbsp;</p><p>在平台功能方面，我们也提供了像代码行数的统计、平均代码缺陷密度、代码质量扫描、安全扫描等等一系列的安全功能，不仅会给出一些风险提示，而且也会给出一些如何修改的建议。这种安全扫描在我们内部也会作为一个上线前的必要校验环节，只有提供了相应的安全扫描报告，比如漏洞都进行了修复，才能够进行下一个关节的上线。</p><p>&nbsp;</p><p></p><h3>托管依赖仓库</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/61/6127ed8f5214eb8262c0229a675a8a3f.png\" /></p><p>一般在我们写代码的过程当中会用到各种各样的开发框架。这些框架一般都会依赖于各种各样的开源的组件，尤其是Java、Node.js&nbsp;、Golang等等，这些语言都会大量地用到各种各样的依赖。我们在内网的开发过程中用到的依赖版本经常会与公网上管理的依赖版本不太一致，这时，就会遇到一些问题，我们的几个开发环境可能会出现功能不一致的问题，排查这种问题一般都是比较费时费力的。</p><p>&nbsp;</p><p>为了解决这个问题，我们在生产环境里打通了访问的一些单向网络，在这个网络里，我们可以提供了统一的依赖仓库，以生产环境为标准进行同步依赖，从而一来可以直接使用，二来可以构建同源。通过统一的制品库，为研发、测试、生产几个不同的环境提供可信来源。一点管控，可行分发。</p><p>&nbsp;</p><p>不只是提供了多种语言框架的依赖仓库，还提供了多种类型的私有库，用户也可以根据自己的使用方式对私有库进行管理。在依赖库的扫描方面，因为我们做了一点的可信管控，可以对使用到的依赖进行统一的扫描。当有风险发生的时候，可以进行统一的告知，不仅是可以进行一些提醒，而且还能给出一些可行的解决方法。</p><p>&nbsp;</p><p></p><h3>持续集成</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/fe/fe0e3c38055a5fd51d3ebc32c3ae81c5.png\" /></p><p>在代码开发的过程中，不同的业务系统往往使用不同的开发语言、框架，使用不同的打包工具，依赖不同的组件，存在如此多的变量，如何进行统一地持续构建，其实对我们的DevOps平台提出了非常高的考验。</p><p>&nbsp;</p><p>在云原生的理念下，更多的是以容器的方式进行交付，我们以引导用户更多地使用<a href=\"https://xie.infoq.cn/article/f4fe03614e22ad732b05e74b7\">Dockerfile</a>\"进行构建，通过对标Github，我们也提出了我们自己的一些构建方式，首先使用Dockerfile的多阶段构建技术，把构建的主动权还给用户，用户可以根据自己的开发语言、开发框架、使用习惯去构建自己的流水线，自己的业务系统将要如何编译打包、如何配置通过描述语言写入到这个流水线中，也将运行容器和构建容器进行分开管理，避免在代码的管理当中混入太多的环境管理、过程管理，而且一些配置类的信息代入生产环境中也是不安全的，有一定安全隐患。通过版本化的配置文件，我们可以将整个的配置文件放到代码仓库中，随着代码一起进行版本的管理。</p><p>&nbsp;</p><p></p><h3>镜像推送及同步</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/9c/9c481bbfa118f0f3b8ef90e12d33bc22.png\" /></p><p>再就是我们打通了Docker&nbsp; build出来的镜像如何在开发、测试、生产等不同环境中进行的统一同步。通过这种镜像的同步，可以有效地解决在这几个环境中不断进行推送同步的工作量，而且通过我们实现的这个统一分发推送渠道，用户只需要关心两个方面：第一是我的代码如何去构建成镜像；第二是我的镜像如何去使用。</p><p>&nbsp;</p><p>在我们平台提供的功能里，首先是解决镜像的分发，可以从构建环境中单向地向不同的环境进行推送，而且在推送之前，添加了一些安全保障能力，为了保障生产安全，尤其是在向生产环境、准生产环境同步之前，会进行安全扫描，只有安全扫描通过，才能够同步通过。这一方面保证了便利性，另一方面也对安全性提供了一定的保障。</p><p>&nbsp;</p><p>有一些镜像修复起来并不是那么容易，所以我们提供了一些基础镜像。我们会对常见的漏洞进行统一的加固修复，加固修复完成之后再提供给业务系统使用。业务系统使用我们提供的这种构建镜像，在一些漏洞的修复方面，只需我们统一修复构建完成即可，整体的开发效率也能得到进一步的提升。</p><p>&nbsp;</p><p></p><h3>GitOps应⽤部署</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/12/123e46eb121437c588e9fab5c43796ce.png\" /></p><p>在开发过程中，一般需要进行不断的开发调试，对于CD的过程，其实会要求更加的迅速。针对这种开发过程不断连续的调试部署，我们推出了一个GitOps的管理平台，GitOps能够以版本化的方式将声明式的配置，将应用的编排、构建等等一系列的操作形成流水线，而且是在Git中进行版本化管理，不同的环境中都使用相同的声明式配置。它也是非常方便的一种部署方式，我们目前提供的这种GitOps管理主要有两种：一种是提供了界面的引导式，能够满足初学者对界面操作的使用诉求；另一种是提供纯粹的YAML提交方式，一些高级的研发运维更习惯于直接去操作YAML文件，以进行应用的编排管理。这两种方式，不管是针对初级的用户，还是高级的用户，在使用上都是非常方便的。</p><p>&nbsp;</p><p></p><h3>应⽤访问管理</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/3c/3c4c7dd73eb4957d429e3bcf92b88901.png\" /></p><p>应用部署后，面临的第一个问题就是如何访问它，而现在随着ServiceMesh的流行，我们在平台中也增加了对ServiceMesh的完整支持，而且默认开启了ServiceMesh的能力，用户在提交了自己的应用程序之后，会被编译成云原生的镜像，通过GitOps也能够将ServiceMesh的控制YAML，尤其是Isito的，一起进行提交。</p><p>&nbsp;</p><p>首先，我们在能力上包含了完整的Isito管理功能，用户在使用的过程中，可以根据自己的开发需要编写YAML。</p><p>&nbsp;</p><p>第二，我们在平台里配置了通用的网关配置域名。有时需要访问一些临时域名，这时可以比较方便地打通从用户自己的开发环境到我们平台的访问。</p><p>&nbsp;</p><p>第三，支持内部域名的自定义CRD。这样用户在开发调试的过程中可以保持相同的配置，只是在不同的集群里配置一下域名的解析CRD即可。在整个过程中，环境的配置变量都无需调整，进一步缩小了研发环境和生产环境的差异性，生产环境、研发环境的差异越小，上线后的稳定性也一定会有所提升，从而降低问题的排查成本。</p><p>&nbsp;</p><p></p><h3>开发⽇志管理</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/62/6297423a28fe1cd0300828a0865480d3.png\" /></p><p>应用部署完成之后，往往需要进行⽇志的查看，检查应用是否运行正常，有没有报错，所以在平台上，我们对应用程序的文件日志、标准输出Console⽇志，还有一些网关访问的日志，以及操作的日志都进行了统一的收集，并进行了一些关联，这样用户在出现程序问题时，可以比较方便地从这几个方面进行故障定位，从而提升开发效率。</p><p>&nbsp;</p><p></p><h3>应⽤开发调试</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/5d/5d2843685cd1249ab71e6a0142f3614a.png\" /></p><p>在开发过程中，除了查看日志，还会经常查看应用的运行状况，甚至有可能需要进入到容器中一点点地执行调试命令。在没有我们平台界面之前，用户需要不断地在各个环境、各个系统中切换，会带来非常高的切换成本和操作的复杂度。我们提供了一体化的管理界面，既能看到集群的运行情况，也能看到应用的简单运行情况、资源的用量、应用资源的关联关系、应用的运行日志，还能进入到容器中执行一些Shell命令。通过这种方式，不管是运维人员还是开发人员，都能够对日后系统如何在容器的云环境中运行，有一个更加直观、更加贴切的感受，对于日后发布到生产环境，如何排错、如何保证业务的稳定运行都能打下比较好的基础。</p><p>&nbsp;</p><p></p><h3>集群管理</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/36/3611066bf5098ff7e6aea2c3cf6e6aae.png\" /></p><p>在集群管理方面，我们主要提供了一站式的开发验证环境，前面提到的整个过程都是对如何开发软件做支撑的，开发软件运行所需要的环境，目前来说，一般是要提供一套Kubernetes环境的，而Kubernetes环境相对来说还是比较昂贵的，对配置的要求也比较高，并且我们也难以为每个同学都提供一套Kubernetes环境。</p><p>&nbsp;</p><p>因此我们在磐舟平台上提供了Kubernetes开发环境，用户在使用时，可以通过界面来点选申请。申请到开发环境之后，他可以在环境内进行各种开发调试。一般来说，申请到的开发环境有一定的时间要求，时间到期或者用户使用完成之后，它可以被归还到大池子中，从而提高了整体的资源利用率。</p><p>&nbsp;</p><p>在开发方面，其实还有一个比较大的问题，那就是数据从哪来。目前来说，我们还不能将数据从生产环境中直接拷贝到测试环境中，这些数据需要进行一定的脱敏验证。另外，在自动化测试方面往往需要进行自动化的接口测试、UI测试、回归测试，如果没有自动化的工具，整个测试效率也会比较受影响。在我们的环境中会整合这几类自动化进行统一提供。</p><p>&nbsp;</p><p></p><h3>安全⻔禁体系</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/18/18b2b7f1677b543c7968347f49bc2bec.png\" /></p><p>在安全门禁体系方面，磐基磐舟共用一套DevSecOps设计，涵盖了研发、构建、运行的各个方面。通过在研发流水线的整个过程中，设置不同的检查点形成安全门禁，有问题可以尽早发现、尽早修复，可以避免将这些问题代入到生产中。我们主要是从开发安全、构建交付安全、数据安全、以及应用运行安全等几方面进行安全防护的：</p><p>在开发安全方面，主要是进行代码的安全检查扫描、SQL注入检测、以及代码质量的扫描门禁。在构建过程中，主要进行依赖的漏洞扫描、开源协议的扫描、开源漏洞的扫描以及镜像漏洞的扫描。在数据安全方面，主要是数据审计和数据库的高危操作，以及脱敏流程。在应用运行方面，主要是容器的安全运行防护、应用的提前检测、容器命令的审计、以及WiFi隐私安全防护。</p><p>&nbsp;</p><p>通过这几个方面的安全能力组合，可以有效地避免将安全问题带入到生产中，从而降低了整个生产安全的威胁。</p><p>&nbsp;</p><p></p><h4>开发安全</h4><p></p><p><img src=\"https://static001.geekbang.org/infoq/0f/0f197be9a9bf20f793d3a564b1a4209a.png\" /></p><p>开发安全主要是通过代码质量、代码审计、开源扫描、以及移动端的APP安全扫描形成一个综合分数，在项目纬度上进行统一的展示，用户可以比较直观地看到自己的项目风险等级。平台在提供扫描的同时，也会提供一些修复建议，因此我们的研发和安全人员可以参考这些信息来解决程序中的安全问题。</p><p>&nbsp;</p><p></p><h4>构建交付安全</h4><p></p><p><img src=\"https://static001.geekbang.org/infoq/1e/1e43667028bebc84ac01737943f69b8c.png\" /></p><p>在构建交付安全方面，主要是在流水线中插入各种扫描环节。在镜像扫描部分，主要是对镜像中涉及到操作系统、中间件依赖、以及程序本身的文件系统等不同层面进行扫描，通过增量的、批量的、以及全量的安全扫描来给出一份安全报告。如果这份报告的得分较低会被门禁系统卡到流水线之外，只有通过安全扫描的镜像才能够同步到生产环境中去，这种方式能够有效地避免在生产运行中出现安全漏洞。</p><p>&nbsp;</p><p></p><h4>数据安全</h4><p></p><p><img src=\"https://static001.geekbang.org/infoq/0e/0ede998e84eb9eb47d2db850ec98c8a5.png\" /></p><p>在数据安全方面，尤其是在数据审计方面，还是需要前置到开发环境中。在敏感SQL审核、数据的脱敏方面，一般会伴有程序的开发调试，如果是在生产环境中发现这种问题，然后再反馈到开发环境中，整个过程会比较长。而我们通过在开发环境中内置SQL扫描、脱敏数据扫描，有利于在开发环境中前置处理好这些问题。在自动化测试方面，需要解释一下测试数据，我们从开发环境中将相应的一些数据经过脱敏处理之后导入到测试环境中，对于提升测试的整体质量而言，效果还是比较明显的。</p><p>&nbsp;</p><p></p><h2>Serverless新动态</h2><p></p><p>接下来，将会介绍我们在Serverless方面的一些云原生实践。</p><p>&nbsp;</p><p></p><h3>函数如何跑起来</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/44/44ef75ba3412462704c40c84367f1a77.png\" /></p><p>从我们自己的理解来看Serverless平台，首先它是一个平台，同时也是一种思想理念。Serverless更多的是用户提交了一小段代码，通过这一小段代码，我们在平台上将它补充成为一个完整的容器，比如容器内的Dockerfile、打包进来的整个运行环境，从而形成一个完整的镜像。这个完整镜像其实是独立运行的，但是我们给到用户的只是部分，可能只是将用户的业务代码进行上传，在这个过程中，我们可以在基础环境、标准化的配置、Dockerfile等方面进行不同的能力切入，比如运行参数的优化、平台参数的配置、资源用量的管理，而且还能提供一些统一的升级管理手段。</p><p>&nbsp;</p><p>不仅如此，由于这些配置都是在平台上统一配置的，对于ARM、X86，业务是高IO的，还是高CPU的，对于这些不同的特殊情况，我们都可以在后台为用户的应用进行统一的调度管理，经过这个过程，用户提交的还只是他自己的业务函数，但是我们会在平台级帮它提供更多的功能。</p><p>&nbsp;</p><p></p><h3>平台思路</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/38/388678d442b0d437fc3a183d8dfdbd0c.png\" /></p><p>在整体运行情况上，我们进行了一些拓展，不仅支持简单的函数运行，还能够支持像Java、Golang、Python这样的常见语言框架，这些框架可以由我们提前做好模板，然后用户直接使用，也可以是用户提供带模板的统一运行环境，只不过环境里可能有一些小的地方需要与我们的平台做一些适配。我们将能力开放出去之后，业务系统也可以根据自己的情况进行定量的适配改造，整个改造过程不会非常的复杂，但是改造完成之后，整个操作过程会非常的简单，原来需要十几步的操作，在我们Serverless平台上只需简单的几步操作即可达到相同的效果。不仅如此，平台还为应用额外提供了更多的资源配置管理、日志采集、以及弹性的指标能力。</p><p>&nbsp;</p><p></p><h3>弹性能⼒优化</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/20/20ff57b9a3127b6a8ffb9d76d3bf8dc5.png\" /></p><p>谈到弹性能力，Serverless平台本身也有比较丰富的弹性参数，我们平台在这方面也进行了更多的一些拓展，比如基于业务指标的节点级弹性以及集群级的弹性。如果按照副本数，当到达一定的极限之后，是需要往资源池里加机器的。我们平台对这种弹性能力进行了拓展，如果是在加机器的情况下，或者是在某一区域负载不够用的情况下，我们也可以在其他区域进行整个集群级的弹性，所以我们现在能够实现Pod级、Pod实例级、Node节点级、以及Cluster集群级等三种级别的弹性能力。&nbsp;&nbsp;</p><p>&nbsp;</p><p></p><h3>云端开发调试⼀体化</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/5a/5a2a24884a6b87a6f5c69a54a2b7172c.webp\" /></p><p>在Serverless方面，大家比较困惑的一点就是如何进行云端的开发调试，我们平台现在不仅提供了云IDE，也会将集群的一些管理权限、控制权限、以及网关调试权限等等一系列的相关调试都给到租户。</p><p>&nbsp;</p><p>前面也提到过，Kubernetes 开发环境也是由我们统一管理的，在这种统一提供的开发环境中，我们有些集群是进行了安全隔离的，经过这种安全隔离的集群，我们是可以将一些相应的开发调试管理权限开放给租户的，这样用户在使用过程中，一方面有云IDE，可以把云IDE装到它所在的集群中，也可以利用 Kubernetes 这种原生的管理能力进行本地的开发调试。并且我们对网关以及微服务都提供的一些支持，这几个不同的层面都能满足用户对于Serverless应用的开发调试需求。</p><p>&nbsp;</p><p></p><h3>ARM、X86双平⾯</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/fb/fbfa436725d312157a08e4ec03faba2b.png\" /></p><p>得益于我们前面提到的统一代码托管流水线，并且为应用进行了Dockerfile的构建收敛，我们可以利用ARM、X86双平面的环境，为用户提供这两个平面下的镜像构建。用户提供一份代码，但我们会帮它编译成这两种运行环境的镜像，这样在国产化的进程中，用户的代码不需要太多的改造就能够适配这两种运行环境，也有利于我们加大对国产化的支持力度。</p><p>&nbsp;</p><p></p><h3>国产化业务低感知适配</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/a4/a467cdde536952ecd5221925001eb7b9.png\" /></p><p>在国产化方面，主要是从我们平台级进行了一些兼容适配，比如硬件、操作系统、容器、以及中间件，我们平台级对这些方面都进行了兼容适配，通过这种兼容适配，业务系统只需像使用X86的场景一样去使用即可。所以在整个过程中，我们通过Serverless能够将更多的适配细节隐藏到平台之中，对于应用而言，它可以更多地关注于自己的业务逻辑，从而降低了对国产化适配的难度。</p><p>&nbsp;</p><p></p><h1>盘舟DevOps平台的未来演进⽅向</h1><p></p><p>&nbsp;</p><p>接下来，我们主要谈一下盘舟DevOps平台的未来演进方向。</p><p>&nbsp;</p><p></p><h2>低代码开发</h2><p></p><p><img src=\"https://static001.geekbang.org/infoq/2b/2bf1251ea4ac257dda10b238dd24848b.png\" /></p><p>通过我们自己在开发过程中引入低代码，能够切实地感受到在不少场景下开发交付效率都有了大幅的提升，保守估计，很多场景下的提升达到了30%，甚至是60%～70%。</p><p>&nbsp;</p><p>低代码的开发模式，将传统的开发模式需配备产品经理、需求、UI、设计等等一系列专业人员，转变为了只需配备相应的业务分析人员即可。低代码开发模式极大地提高了软件的生产效率、质量和安全，也有助于打破IT人员的一些沟通壁垒，尤其是在跨厂商、跨部门、跨系统的协作方面，解决了这种“周期长、门槛高、适应性差”的传统开发模式。</p><p>&nbsp;</p><p>通过我们一段时间的使用，总体的感受是在低代码的开发模式下，开发交付效率已经有了大幅面的提升，原来很多业务逻辑是需要写到代码中，使用了低代码之后，很多业务逻辑可以通过可视化编排的方式来实现。这个过程也极大地降低了对开发的要求，原来需要比较专业的人员进行开发、架构、设计、测试，现在就不需要这么专业的人员了，只要有一定基础的人员即可掌握如何通过可视化的方式、如何通过编排的方式来实现新的功能，并进行一体化的开发、交付、测试，从而降低了整体的从业门槛。</p><p><img src=\"https://static001.geekbang.org/infoq/0b/0b994002547f8cc75eb3af3c21d0e7c7.webp\" /></p><p>通过上图，大家可以感受一下，在我们的业务场景中，原来从用户认证，到过户校验，再到最后的生产上线，这个过程相对还是比较清晰地，但是在我们分析完成之后，就会编写具体的业务代码，在编写代码时，会按照图中中间部分的模式对更多的业务逻辑进行拆分以及组合，在这个过程中，从某一个层面来看，基本上已经很难体现原有的这种开发过程了。</p><p>&nbsp;</p><p>但是在我们低代码的开发过程中，在每一个层中，具体的业务逻辑体现如右侧模式图所示，它是中间模式图中的一个个原子能力，对这些原子能力的编排又能还原成了最左边的业务逻辑图。通过这种可视化的编排方式，整体的业务逻辑还是能够体现出来。</p><p><img src=\"https://static001.geekbang.org/infoq/70/7009e3ad1c9d35aa310487e3772c564b.webp\" /></p><p>结合Serverless来看，低代码编排的服务更多的就是微服务，甚至是更小颗粒度的原子级服务。而我们的Serverless平台主要就是把函数级的原子服务直接发布为运行态，提供调用接口。</p><p>&nbsp;</p><p>这些函数级的能力是否可以使用Serverless来进行开发和发布呢？其实这两者是可以比较流畅地结合在一起的。Serverless负责提供底层、函数级、原子级能力的运行、维护、以及弹性；低代码负责对这些接口进行编排，进行使用。在这种模式下，用户不用关心底层的资源，通过平台自动地发布上线、按量弹性扩缩容，降低了整个项目的开发以及运营成本，也减少了运维难度和工作量，整体迭代的上线周期也能得到提速。</p><p><img src=\"https://static001.geekbang.org/infoq/66/6699a9646a4961d0bdc19e776692cbcb.png\" /></p><p>通过磐基磐⾈低代码，为业务系统带来了快速上线、接口的可视化编排、新场景的场景化应用能力。而Serverless平台则解决了后端接口、微服务应用和原子级应用的按需弹性、稳定运行。它们两者结合形成了一个新的开发组合，能够使我们整个部门的开发更加简单，运行更加稳定，服务更加弹性。</p><p>&nbsp;</p><p>以上是我今天的主要分享内容，感谢大家的收听，谢谢！</p><p></p>",
    "publish_time": "2022-10-14 18:08:19",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]