[
  {
    "title": "如何评估代码质量：反馈回路、文化、代码质量、技术债务、部署管道",
    "url": "https://www.infoq.cn/article/bhBft2B1a7MyuLYoJPzC",
    "summary": "<p></p>",
    "publish_time": "2023-02-09 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "为什么你的下一个API应该是GraphQL而不是REST",
    "url": "https://www.infoq.cn/article/0fyZC6Yqvj6Ddr4XEHER",
    "summary": "<p></p><p></p><p></p><blockquote>REST在几年前曾经风靡一时，但现在GraphQL拥有更好的工具和开发者体验。</blockquote><p></p><p></p><p>几年前，我所有的API都是<a href=\"https://www.infoq.cn/article/jfkZ7LHF1HbONN2sPOyw\">REST </a>\"API。我知道GraphQL不可小觑，但也并没有花太多时间学习它。早期的探索表明，<a href=\"https://www.infoq.cn/video/YIShfqdvkUw0M8PC9DYu\">GraphQL</a>\"并不是一颗神奇的API银弹。你仍然需要编写所有的逻辑，仍然需要使用奇怪的模式文件。既然如此，我们为什么要选择为额外的复杂性而烦恼呢？REST API很简单，不需要额外的模式。每个资源都有简单的端点，大多数时候，与API端点相关的代码都是简单的CRUD。</p><p></p><p>在过去的一年里，我们从RPC API切换到更好的GraphQL。这对我们的应用程序来说是件好事，因为RPC接口只是GraphQL的一个糟糕实现，而且应用程序中有复杂的关系，因此使用GraphQL更为合适。</p><p></p><p>虽然我对此持怀疑态度，但也很想看看事情将会如何发展。事实证明，现在的工具非常棒，而且这样做的好处是巨大的。</p><p></p><p>一年后，我迷上了它。我的朋友开始了一个业余项目，当我想到需要再次与一堆REST API打交道时，我的心一沉。GraphQL提供了更好的开发者体验。那么，为什么GraphQL如此神奇？</p><p></p><h1>代码基本相同</h1><p></p><p></p><p>在编写处理请求的代码时，处理逻辑的主要代码几乎是相同的。</p><p></p><p>例如，这是一些获取给定ID资源的伪代码。</p><p></p><p><code lang=\"plain\">func resolver(parent, args, context): Resource {\n  const id = args.id\n  const resource = db.Resource.FindOne({id: id})\n  return resource\n}\n</code></p><p></p><p>通过ID获取资源（GraphQL）</p><p></p><p>这是GraphQL还是REST的端点？</p><p></p><p>代码几乎一模一样。主要的区别在于函数签名。获取、更新和删除资源集合也是如此。</p><p></p><p>二者都是将参数传递给函数并处理请求。有一些小的语法变化，但大部分逻辑保持不变。</p><p></p><p>不过GraphQL有一个值得注意的好处，就是可以获取资源间的关系。</p><p></p><p>假设你有一个包含两个资源的模式：一个Author（作者），它有许多Post（帖子）。你只能根据作者获得帖子，所以你的REST API看起来像这样。</p><p></p><p><code lang=\"plain\">/authors/\n/authors/:author_id/\n/authors/:author_id/posts\n/authors/:author_id/posts/:post_id\n</code></p><p></p><p>你实现了四个不同的API来获取每个层级的数据。</p><p></p><p>但你可以使用GraphQL更简单地达到同样的目的。</p><p></p><p><code lang=\"plain\">type Query {\n  authors(id: Int): [Author!]!\n}\n\ntype Author {\n  posts(id: Int): [Post!]!\n}\n</code></p><p></p><p>还有其他方法也可以实现这一点，但这种模式可以让你：</p><p></p><p>不指定ID获取所有作者（这是可选的）；通过特定的ID获取作者；获取所有作者的所有文章；获取单个作者的所有文章；只获取给定作者的给定文章。</p><p></p><p>就我个人而言，我的根查询经常将author和authors分开，避免为单个资源返回一个数组。将Post放在Author下，然后在Author的上下文中编写Post解析器。这个简单的嵌套让用户可以一起查询作者和他们的帖子。</p><p></p><h1>支持工具已经发展得非常好</h1><p></p><p></p><p>GraphQL是一种强类型模式，可以为客户端和服务器库生成代码。</p><p></p><p>因此，客户端可以获取具有完美类型信息的数据。与手动编写的REST API相比，GraphQL的类型安全是一个巨大的优势。有些工具可以为REST API生成类型，例如Swagger/OpenAPI，但这些工具并没有内置到规范中，所以你不会自动获得这些功能。</p><p></p><p>GraphQL在模式中内置了注释，还提供了一个自检API，可以实现自文档化。有了编写良好的注释，就不需要单独维护文档。</p><p></p><p>类似的，因为模式是强类型的，所以实际上你都不需要构建自定义客户端库。服务通常会提供客户端库，这些库提供了易于使用的类型和方法。GraphQL内置了这些，你只需要用它编写一个客户端。</p><p></p><p>你还可以获得为服务器解析器构建的类型。有些语言，比如Go，会生成整个解析器函数。你需要做的是填充内容。其他的，比如TypeScript，会生成所有的类型，你可以在解析器中使用它们来保证类型安全。</p><p></p><h1>类型可以隐藏敏感信息</h1><p></p><p></p><p>你在GraphQL模式中定义数据的类型，这为你提供了一种便利的方式来剔除敏感信息。例如，假设你有一个User类型，它映射到数据库中的一条用户记录，你可能在对象种保存了个人信息，如电子邮件地址或散列过的密码。</p><p></p><p>如果没有合适的工具，你可能会这么操作：</p><p></p><p><code lang=\"plain\">func handler(request, response) {\n  const user = db.User.findCurrent()\n  // 这样会把邮件地址和密码也返回！\n  return user\n}\n</code></p><p></p><p>它会返回用户的所有字段。你需要把敏感信息剔除掉。</p><p></p><p><code lang=\"plain\">func handler(request, response) {\n  const user = db.User.findCurrent()\n  delete user.email\n  delete user.password\n  return user\n}\n</code></p><p></p><p>GraphQL通过特定的类型（在Go或TypeScript中）可以自动完成这个操作，只公开模式中定义的字段。你可以将对象返回给GraphQL解析器，并只公开模式中定义的字段。</p><p></p><h1>用于快速验证查询的工具</h1><p></p><p></p><p>测试GraphQL也变得更容易了，因为一些工具内置了强大的支持。我目前最喜欢的是Insomnia，用于在应用程序之外测试GraphQL查询。Insomnia会获取模式，并提供自动完成查询的功能，支持变量输入。此外，你还可以导出项目并将其包含在源代码中，方便人们进行快速的探索和使用它们。</p><p></p><p>还有其他一些很好的工具，比如Apollo（<a href=\"https://www.apollographql.com/\">https://www.apollographql.com/</a>\"）。</p><p></p><h1>不纯粹的REST API</h1><p></p><p></p><p>随着时间的推移，我注意到REST有一个缺点——并不是每个操作都能很好地映射成CRUD。有一类操作可以被映射成这种格式，但可能没有意义。</p><p></p><p>一次创建多条记录；一次更新多条记录；启动长时间运行的作业；取消作业。虽然我相信你可以写出有意义的REST API（使用POST /job启动作业，它将返回HTTP 202而不是200！），但也存在争议，例如，它究竟是取消作业还是删除作业，还是修改作业？</p><p></p><p>将批量更新作为一个资源，还是操作多个资源？</p><p></p><p>REST没有针对这些操作提供有意义的语义定义，而GraphQL的mutation可以被任意命名，这样你就可以：</p><p></p><p><code lang=\"plain\">mutation cancelJob(id: Int!): Job\n</code></p><p></p><p>不管是PUT还是DELETE操作，都是取消作业——这种灵活性带来了更有表现力的API。</p><p></p><h1>单个请求</h1><p></p><p></p><p>在为页面请求数据时，REST API只返回它们的资源。通常情况下，如果你想获取相关的资源，需要先获取X，然后是X的Y。</p><p></p><p>一些REST API允许你获取相关的资源，这很好。但你不能获取不相关的资源，如X和Z，但GraphQL可以，你可以用多个根查询来获取它们。</p><p></p><p>在使用GraphQL时，你只需要发出一个HTTP请求就可以获取所有数据。</p><p></p><p>现在，如果你获取的数据太多，仍然可能发生灾难性的错误。但在大多数情况下，服务器可以有效地缓存数据并在单个请求中返回大量信息。</p><p></p><h1>GraphQL &gt; REST</h1><p></p><p></p><p>GraphQL是一种强大的查询语言，它在过去几年里不断发展。它提供了令人难以置信的工具，让你可以专注于业务逻辑。此外，你在定义API时具有很大的灵活性，让你拥有了更多的控制权。</p><p></p><p>REST比之前的API要好很多，它提供了一条重新思考数据和以一种朴素的方式创建API的途径。</p><p></p><p>但GraphQL更强大，更容易使用，并且提供了更好的开发者体验。你的下一个API应该是GraphQL，而不是REST。</p><p></p><p>原文链接：</p><p><a href=\"https://ethanmick.com/why-graphql-is-better-than-rest/\">https://ethanmick.com/why-graphql-is-better-than-rest/</a>\"</p>",
    "publish_time": "2023-02-09 10:26:52",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "谷歌版ChatGPT首秀“翻车”，公司市值蒸发7000多亿元",
    "url": "https://www.infoq.cn/article/PX7hUhtJmshxACEaYYgE",
    "summary": "<p>本周一，谷歌宣布其人工智能聊天机器人 Bard&nbsp;将“在未来几周内更广泛地向公众开放”。作为<a href=\"https://www.infoq.cn/article/ZWixRo76hFsOw38tRHNF\">OpenAI </a>\"ChatGPT的竞争对手，Bard的一举一动都备受关注。</p><p>&nbsp;</p><p>但让谷歌尴尬的是，该机器人的首次出场并不顺利，专家指出 Bard 在其Demo首秀中犯了一个事实错误。</p><p>&nbsp;</p><p>谷歌分享的一张GIF显示，在回答问题“关于詹姆斯韦伯太空望远镜（JWST）有哪些新发现，我可以告诉我 9 岁孩子哪些内容？”时，<a href=\"https://www.infoq.cn/article/z30mE0bxrvItO9Mm52Nw\">Bard </a>\"提供了三个要点，其中一个指出该望远镜“拍摄了我们太阳系外行星的第一张照片。”</p><p>&nbsp;</p><p>然而，许多天文学家在<a href=\"https://www.infoq.cn/article/9jYdCOGBkoioO6zm1fVG\"> Twitter </a>\"上指出这是不正确的，据NASA网站上所述，第一张系外行星图像是在 2004 年拍摄的。</p><p>&nbsp;</p><p>天体物理学家 Grant Tremblay 在 Twitter 上写道：“我相信Bard会令人印象深刻，但郑重声明：JWST 并没有拍下‘我们太阳系外行星的第一张图片’” 。</p><p>&nbsp;</p><p>加州大学圣克鲁兹分校天文台主任 Bruce Macintosh 也指出了这个错误。“作为一个在 JWST 发射前 14 年拍摄系外行星的人，感觉你应该找到一个更好的例子。”</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/a9/a964f4761be7267dcf4beee2fc855d5c.png\" /></p><p></p><p>在后续推文中，Tremblay 补充道：“我非常喜欢并感谢地球上最强大的公司之一正在使用 JWST 搜索来宣传他们的 LLM。这非常好！但是 <a href=\"https://www.infoq.cn/article/FRcz5vjOvl3bM2d57opX\">ChatGPT</a>\"等大模型虽然令人印象深刻，但经常犯错却盲目自信。未来，如果能看到LLM 进行自我错误检查将会很有趣。”</p><p>&nbsp;</p><p>正如 Tremblay 所指出的，ChatGPT 和 Bard 等<a href=\"https://www.infoq.cn/article/3ykO49FEVYiGOTpLq3lC\"> AI 聊天机器人</a>\"的一个主要问题是它们倾向于自信地将不正确的信息陈述为事实。这些系统经常“产生幻觉”——即编造信息——因为它们本质上是自动完成系统。</p><p>&nbsp;</p><p>他们不是查询已证实事实的数据库来回答问题，而是接受大量文本语料库的训练并分析模式以确定任何给定句子中的下一个单词。换句话说，它们是概率性的，而不是确定性的——这一特征导致一位著名的 AI 教授将它们称为“废话生成器”。</p><p>&nbsp;</p><p>当然，互联网上已经充斥着虚假和误导性信息，但微软和谷歌希望将这些工具用作搜索引擎，可能会使问题变得更加复杂。</p><p>&nbsp;</p><p>也正是由于Bard在首秀上的失误表现，导致其母公司Alphabet股价暴跌8%，市值缩水7000多亿元。</p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://www.theverge.com/2023/2/8/23590864/google-ai-chatbot-bard-mistake-error-exoplanet-demo\">https://www.theverge.com/2023/2/8/23590864/google-ai-chatbot-bard-mistake-error-exoplanet-demo</a>\"</p>",
    "publish_time": "2023-02-09 10:43:16",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "用户无法正常发推文，马斯克：暂停新功能开发， API 免费访问延长四天",
    "url": "https://www.infoq.cn/article/A1iUa4p4FZgz4giXhiMQ",
    "summary": "<p>近日，推特全球用户再次遇到了一个持续了约 90 分钟的故障，他们无法正常发送推文，而是收到一条自动消息，说他们“超过了每天发送推文的限制”，甚至当天一次还没有发布过用户都收到了该消息。</p><p>&nbsp;</p><p>据悉，Twitter 的帮助中心表示，每天的推文数量上限为 2,400 条。中断不仅影响了新推文发布，还影响了推文的转发和回复。</p><p>&nbsp;</p><p>美国科技出版物 The Information<a href=\"https://twitter.com/erinkwoo/status/1623460140036026369\">报道称</a>\"，马斯克告诉推特员工暂停“新功能开发”，以在中断期间最大限度地提高平台的稳定性。</p><p>&nbsp;</p><p>推特的开发团队在<a href=\"https://twitter.com/TwitterDev\">出现故障后发推文称</a>\"，对其 API 的免费访问将再延长四天。但目前尚不清楚这次故障是否与 API 更改有关。 同时，开发团队还表示，在当地时间 2 月 13 日将弃用 Premium API。如果用户订阅了高级版，则可以申请企业版以继续使用这些端点。</p><p>&nbsp;</p><p>推特此前在2月3日表示，将开始对API访问收费。该公司表示，从2月9日开始，将提供一个付费的基础层面来访问其应用程序编程接口，即API，开发人员可以使用它来分析包括推文在内的一些内部数据，并用它来构建工具。Twitter未透露将收取多少费用，但表示将在下周分享更多细节。Twitter目前提供免费和付费版本的API，对最活跃的用户每月收费高达2,499美元。</p><p>&nbsp;</p><p>有<a href=\"https://www.reddit.com/r/technology/comments/10xgkmo/elon_musk_emails_twitter_staff_to_pause_new/\">网友分享了一组数据</a>\"，推特的订阅制度仅为其带来了 200 万美元的收入（自马斯克接任以来，他们的新订阅者不到 100,000 人），而同比损失的运营广告收入超过 4 亿美元。</p><p>&nbsp;</p>",
    "publish_time": "2023-02-09 11:08:35",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]