[
  {
    "title": "Git 2.40发布，包括git jump工具的更新、cat-file工具的增强以及提高Windows上响应速度",
    "url": "https://www.infoq.cn/article/tQjr79KiqeK88KgjhUJY",
    "summary": "<p>最近，开源Git项目发布了最新的2.40版本，带来了一些新的特性和缺陷修复。这个版本值得关注的特性包括git jump工具的更新、cat-file工具的增强以及在Windows上更快的响应。</p><p></p><p>GitHub的软件工程师<a href=\"https://www.linkedin.com/in/ttaylorr/\">Taylor Blau</a>\"详细介绍了Git 2.40的<a href=\"https://github.blog/2023-03-13-highlights-from-git-2-40/\">更新细节</a>\"。git jump是<a href=\"https://github.com/git/git/tree/v2.40.0/contrib\">contrib</a>\"目录中的一个可选工具，现在支持Emacs和Vim。git jump工具对Git命令进行了封装，比如git grep，并将它们的结果输入的Vim的<a href=\"https://vimdoc.sourceforge.net/htmldoc/quickfix.html\">quickfix</a>\"列表中。</p><p></p><p>如果你使用Emacs的话，git jump可以通过M-x grepgit jump --stdout grep foo命令来生成一个位置列表。该命令将会输出项目中所有与“foo”匹配的内容，使其更容易进行导航。Git jump也适用于diff和merge。</p><p></p><p>Git的cat-file工具常用于打印Git仓库中任意对象的内容。从Git 2.38.0版本开始，cat-file工具支持在打印提交的内容时，使用Git的<a href=\"https://git-scm.com/docs/gitmailmap\">mailmap</a>\"规则。为了确定某个特定对象的大小，cat-file工具可以使用--batch-check和-s选项。但是，以前版本的Git在使用cat-file工具时，如果在使用--use-mailmap选项的同时，组合使用了--batch-check和-s选项，将会导致结果不正确。在Git 2.40中，这个问题得到了修正，现在--batch-check和-s选项会正确报告对象的大小。</p><p></p><p>git check-attr命令能够用来确定给定的路径设置了哪些gitattributes。这些属性是由仓库中的一个或多个.gitattributes文件所定义和设置的。对于复杂的规则或多个.gitattributes文件，请按照如下形式使用check-attr&nbsp;git命令：</p><p><code lang=\"shell\">$ git check-attr -a git.c git.c: diff: cpp git.c: whitespace: indent,trail,space</code></p><p></p><p>在此之前，check-attr需要有一个索引，这使得它在<a href=\"https://git-scm.com/docs/gitglossary/2.40.0#Documentation/gitglossary.txt-aiddefbarerepositoryabarerepository\">裸仓库</a>\"中很难使用。裸仓库是一个以.git为后缀的目录，它没有任何版本控制文件的本地检出副本（在裸仓库中，所有通常存在于隐藏的“.git”子目录中的Git管理和控制文件都直接存在于“repository.git”目录中，而没有其他文件存在并被检出。——译者注）。在Git 2.40和更新的版本中，现在支持使用--source=选项来扫描.gitattributes，使其更易于在裸仓库中使用。</p><p></p><p><a href=\"https://twitter.com/github/status/1635339931949346816?s=61&amp;t=CIFud503wZ5wc6mlfiwwsw\">GitHub的推特账号</a>\"发布了这些更新，这引起了推特上技术社区的关注。其中，有位推特用户<a href=\"https://twitter.com/andrewdimola\">Andrew</a>\"转推了该公告，并这样<a href=\"https://twitter.com/andrewdimola/status/1635340909499027456\">引用到</a>\"：</p><p>“git jump 似乎相当有用！&nbsp;<a href=\"https://github.com/git/git/tree/v2.19.0/contrib/git-jump\">https://github.com/git/git/tree/v2.19.0/contrib/git-jump</a>\"。”</p><p></p><p>Git 2.40还包括一些功能增强，将Git旧的组成部分从Perl或Shell改写成现代C语言的等价方式。这使得Git命令在Windows等平台上运行得更快。现在，git bisect已经以原生内置程序的方式以C语言进行了实现，而传统实现git add --interactive已经废弃了。</p><p></p><p>在2.40版本中，Git的CI基础设施也有一些改进。一些长期运行的Windows专有CI构建已被禁用，为Git开发人员带来了更快、更节省资源的CI运行方案。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/04/git-releases-version-2-40/\">Open Source Git Project Releases Version 2.40</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://xie.infoq.cn/article/999f8a62e67979b75776a22e6\">20 个&nbsp;Git&nbsp;命令玩转版本控制</a>\"</p><p><a href=\"https://xie.infoq.cn/article/d5e76833564f3fd1f4c1577a7\">软件开发入门教程网之&nbsp;Git&nbsp;基本操作</a>\"</p><p><a href=\"https://xie.infoq.cn/article/5b2d6b8e8f5234a856d3e056e\">软件测试丨让工作更高效，搞定&nbsp;Git&nbsp;的分支管理</a>\"</p>",
    "publish_time": "2023-04-18 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "苹果现已支持 Swift 包索引",
    "url": "https://www.infoq.cn/article/AHUamwkJ3fqljoliPKHa",
    "summary": "<p>Dave Verwer 和 Sven A. Schmidt 于三年前（2019年）创建了 <a href=\"https://swiftpackageindex.com/\">Swift 包索引</a>\"，目的为让 Swift 开发者能够轻松地搜索发现 Swift 包。目前该项目已正式获得<a href=\"https://www.swift.org/blog/swift-package-index-developer-spotlight/\">苹果的赞助</a>\"，使其成为 Swift 包相关事宜的官方网站。</p><p>&nbsp;</p><p>顾名思义，Swift 包索引并不是完整的软件包仓库，而是专注于为软件包元数据编制索引，为开发者们在决定项目要使用的软件包时提供其完善的信息。</p><p>&nbsp;</p><p></p><blockquote>其所能回答的问题包括：某个软件包已经开发了多长时间、作者授权代码的方式、拉取请求和问题是否有人关注和回应等等。乍看之下，索引中软件包的页面可能与其 GitHub 页面相差无几，但我们将元数据的关注点放在了软件包的潜在用户相关方面。</blockquote><p></p><p>&nbsp;</p><p>目前，该索引所包含的<a href=\"https://github.com/SwiftPackageIndex/PackageList/blob/main/packages.json\">超五千个软件包</a>\"几乎所有都是托管在 GitHub 上。每个软件包都是克隆的，有不同 Swift 版本和平台兼容性构建的评估，并收集元数据以确认其基本信息。</p><p>&nbsp;</p><p></p><blockquote>我们目前所说的“构建系统”，平均每天处理五千个构建，共计五百余万次构建。这一操作是如此地庞大，以至于我们需要为其定制一个监控应用程序。</blockquote><p></p><p>&nbsp;</p><p>每个软件包的构建步骤结果，都总结在了一个兼容性矩阵中。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/46/46af70cae263b5a90b66266fb7c9801b.png\" /></p><p></p><p>&nbsp;</p><p>近期，包索引已开始向社区提供一个软件包文档的托管平台，文档对人们是否决定使用某个依赖关系而言往往是至关重要的。</p><p>&nbsp;</p><p></p><blockquote>任何软件包作者现在都可选择是否使用文档的生成，只要构建系统能够完成一次成功的构建，我们便会托管该版本号的 DocC 文档。</blockquote><p></p><p>&nbsp;</p><p>苹果推出 <a href=\"https://www.swift.org/package-manager/\">Swift 包管理</a>\"作为 Swift 代码分发的官方工具，为已经失去功效的服务开辟了一条新赛道，其中就包含由 IBM 适时推出但未能获得开发者们足够重视的“IBM Swift 包分类”服务。IBM Swift 包分类先是被 <a href=\"https://github.com/vapor-community/PackageCatalogAPI\">Vapor 社区包分类 API</a>\"所取代，随后又被 <a href=\"https://swiftpackageregistry.com/about\">Swift 包注册</a>\"取代，后者与刚刚获得苹果认可的 Swift 包索引并不是一回事。</p><p>&nbsp;</p><p>与其他软件包仓库，如 CocoaPods 或 Carthage 相比，Swift 包管理的优势在于其与 Swift 构建系统的集成和在 Xcode 之中的紧密集成，因此，后者的使用对开发者而言几乎是完全透明的。不过，<a href=\"https://cocoapods.org/\">CocoaPods</a>\" 和&nbsp;<a href=\"https://github.com/Carthage/Carthage\">Carthage</a>\" 除了 Swift 包之外，也支持 Objective-C 包。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/03/apple-swift-package-index/\">The Swift Package Index is now Backed by Apple</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/LVg8YPxsNvl2u8wuxWlD\">从探索到落地，手淘引入&nbsp;Swift“历险记”</a>\"</p><p><a href=\"https://www.infoq.cn/article/SH3KGISMFcHz0gZRVAaH\">如何用&nbsp;Swift&nbsp;重写 C++/ObjC 代码库，并将其缩减 70%</a>\"</p>",
    "publish_time": "2023-04-18 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]