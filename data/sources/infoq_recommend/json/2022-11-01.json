[
  {
    "title": "MIT发布网络安全零信任调查报告：零信任不是你想开就能开",
    "url": "https://www.infoq.cn/article/yxRL3v4LfwTEGBBujpTI",
    "summary": "<p>今年早些时候，<a href=\"https://www.technologyreview.com/\">MIT Technology Review</a>\"做了一项调查，向全球商业领袖了解了他们当前对于网络安全的担忧和未来计划。今年的报告涉及256名受访者，其中70%是高管或董事。2022年9月19日，MIT Technology Review发布了他们的研究结果：<a href=\"https://www.technologyreview.com/2022/09/19/1059250/zero-trust-closes-the-end-user-gap-in-cybersecurity/\">零信任消除了终端用户在网络安全方面的差距</a>\"。</p><p>&nbsp;</p><p>本报告聚焦于网络安全方法，主要说明了组织如何采用密码之外的新方法来防御网络攻击。</p><p>&nbsp;</p><p>一般来说，网络罪犯都是从钓鱼邮件入手攻击终端用户的系统。具体来说，68%的受访者担心云应用程序和数据会遭到恶意软件、勒索软件和钓鱼攻击。该报告还发现，55%的受访者表示，企业面临的第一大网络安全挑战是如何在混合办公或完全远程办公环境下确保安全。其原因是新冠肺炎让云计算成了焦点：封锁让数百万人回到家中，他们在家中远程连接到公司系统，通常是使用个人设备，而不是雇主提供的设备。他们面临的第二大和第三大挑战分别是保护云基础设施免受攻击和保护企业IT软件免受攻击，持此看法的受访者分别有49%和48%。</p><p>&nbsp;</p><p>为了确保云在新冠肺炎期间免受日益猖獗的网络犯罪的影响，零信任网络安全理念是改造全球网络的关键。如果没有自己属于那里的证明，那么这些网络、网站或应用程序就不允许你访问（或留在那里），而且它们会监控意外行为。一个关键的发现是，大约40%的受访者采用了零信任模型，另有18%的受访者正在实施，17%的受访者正在规划。</p><p>&nbsp;</p><p>至于不同组织的零信任采用之路，报告发现，大约46%的受访者认为，最大的挑战是将模型集成到遗留的IT基础设施中，或者用兼容零信任的系统替换旧系统。Molina Healthcare首席安全官Mike Wilson也表示：</p><p>&nbsp;</p><p></p><blockquote>零信任不是一个你想打开就打开的开关，而是在本地对数据进行控制的一种理念。</blockquote><p></p><p>&nbsp;</p><p>好消息是，零信任不是一个全有或全无的问题，而是可以根据组织最需要保护的资产来逐步采用。一个成功的零信任策略需要所有供应商协同工作，以确保他们负责的应用程序或领域的访问安全。有些遗留系统可能无法立即适应零信任方法，但可以预见，针对核心系统的零信任策略会增加组织在IT和人员方面的投资。将有越来越多的组织在网络安全项目中小规模地构建零信任模型。</p><p>&nbsp;</p><p>感兴趣的读者可以从MIT Technology Review Insights<a href=\"https://bit.ly/3Lq84q8\">下载报告全文</a>\"。</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/10/zero-trust-cybersecurity/\">https://www.infoq.com/news/2022/10/zero-trust-cybersecurity/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/R4ZfdijOEfQqg9muFlGS\">零信任对 Kubernetes 意味着什么？</a>\"</p><p><a href=\"https://www.infoq.cn/article/cyp8cGxllDNxd6Zl3jbr\">开发人员应该知道的零信任模型</a>\"</p><p><a href=\"https://www.infoq.cn/article/ZUxMqUtEtQYLvBVc9fTX\">如何使用零信任安全技术对抗内外威胁</a>\"</p>",
    "publish_time": "2022-11-01 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "数字化转型第一步，“低代码”搭建更靠谱",
    "url": "https://www.infoq.cn/article/xGW24pPCBvCSOMbjeVRY",
    "summary": "<p>“腾讯云中小企业在线学堂”之腾讯云低代码公开课。鹅厂专家讲师直播授课，教您如何利用「低代码」开发实现自身企业的“数字化转型”！<br />\n“中小企业在线学堂”围绕中小企业业务需求，聚焦企业经营管理、应用工具、技术创新、安全底座 4 大需求场景，推出系列直播课程，全面助力中小企业数字化升级。</p>\n<p><img alt=\"\" src=\"https://static001.infoq.cn/resource/image/2d/ce/2d71c30ee6334902679dyy526d93dcce.jpg\" /></p>",
    "publish_time": "2022-11-01 10:23:38",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Kubernetes的未来：OIDC要优于Secret，Ingress并不合适",
    "url": "https://www.infoq.cn/article/zFR1q0chGl6SwFd1QMiD",
    "summary": "<p>本文最初发表于<a href=\"https://www.eficode.com/blog/the-future-of-kubernetes-and-why-developers-should-look-beyond-kubernetes-in-2022\">eficode的博客站点</a>\"，经原作者<a href=\"https://www.linkedin.com/in/michaelvlarsen/\">Michael Vittrup Larsen</a>\"和eficode官方授权，由InfoQ中文站翻译分享。</p><p></p><p>Kubernetes在容器编排中无处不在，其受欢迎的程度依然没有减弱。但是，这并不意味着容器编排领域的演进处于停滞状态。本文将会提出一些观点，那就是为什么Kubernetes的用户，尤其是开发人员，应该超越我们过去几年里学习的传统Kubernetes，转而采用更适合云原生应用的范式。</p><p></p><h2>Kubernetes的兴起</h2><p></p><p></p><p><a href=\"https://www.eficode.com/solutions/kubernetes?hsLang=en\">Kubernetes</a>\"变得如此流行的原因之一就是它构建在Docker之上。在Linux和BSD变种中，容器有着很悠久的历史，然而，Docker通过专注用户体验，使容器的构建和运行变得非常容易，从而使容器变得流行了起来。Kubernetes建立在容器流行的基础之上，使得在计算机节点组成的集群上运行（又叫编排）容器变得非常容易。</p><p></p><p>Kubernetes流行和广泛采用的另外一个原因是它并没有过多改变软件运行的模式。从Kubernetes出现之前运行软件的方式到基于Kubernetes运行软件之间，设想一条发展路径是非常容易的。</p><p></p><h2>我们无法教老范式学习新的技巧</h2><p></p><p></p><p>构建容器镜像以冻结依赖，提供“到处可运行”的体验，再结合Kubernetes&nbsp;<a href=\"https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/\">Deployment</a>\"资源规范来管理容器副本的编排，这一套实践的功能是非常强大的。但是，它与我们在Docker和Kubernetes出现之前，操作虚拟机的方式并没有根本性的差异。这个很小的思维转变使我们很容易就能使用Kubernetes，这也是为何我们应该超越目前“传统”Kubernetes的原因。</p><p></p><p>本文将会从开发人员的角度展望Kubernetes的未来。概括来讲，我们现在熟知的Kubernetes将会消失，而开发人员并不会在意。这并不是说，Kubernetes不会出现在我们的技术栈中，而是我们会使用新的抽象来改善构建和运维应用的方式，这些新的抽象本身就是构建在Kubernetes之上的。应用会使用平台来构建，平台则基于Kubernetes来构建：</p><p></p><p><img src=\"https://www.eficode.com/hs-fs/hubfs/Screen%20Shot%202022-02-22%20at%201-40-58%20PM-png.png?width=2376&amp;name=Screen%20Shot%202022-02-22%20at%201-40-58%20PM-png.png\" /></p><p></p><p>有意思的是，在十多年以前，Linux是我们构建一切的平台。Linux依然无处不在，是我们技术栈的一部分，但是很少有开发人员关注它，因为我们基于它添加了一些抽象。我们今天所熟知的传统Kubernetes也会面临这样的情况。</p><p></p><h2>横扫一切的新范式</h2><p></p><p></p><h3>安全性：OIDC要优于Secret</h3><p></p><p></p><p>Kubernetes提供了<a href=\"https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/secret-v1/\">Secret</a>\"资源来声明静态的secret，比如API秘钥、密码等。开发人员不应该再使用Secret资源了。</p><p></p><p>在Secret资源中，简单编码的secret可能会被泄露，而且密码的轮换和撤销也很困难。在GitOps工作流中，secret也需要特别注意，避免明文存储。应用应该使用基于角色的方式来进行认证和授权。这意味着，应用程序的认证和授权应该基于“我们是谁”，而不是“你知道什么（密码、API秘钥）”来进行。</p><p></p><p>强大的身份标识是所有安全性的基础。如果你不确定与你通信的服务器的身份，那么对网络流量进行加密是没有意义的。这就是证书和证书授权机构对HTTPS流量所发挥的作用，它保证了互联网的安全。</p><p></p><p>Kubernetes有一个强大的工作负载身份系统。所有工作负载都与服务账户（service account）相关联，它们拥有<a href=\"https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#service-account-token-volume-projection\">Kubernetes颁发的短暂有效的OpenID-Connect（OIDC）身份token</a>\"。Kubernetes API服务器签发这些OIDC token，而其他工作负载可以通过Kubernetes API服务器验证token。这为在Kubernetes上运行的工作负载提供了强大的身份识别功能，可以作为基于角色的认证和授权的基础。</p><p></p><p>开发人员不应再使用Kubernetes Secret，而应基于OIDC token构建认证和授权。这意味着，我们不应在Secret资源中存储数据库密码，而应该确保我们的数据库只在收到有效的、未过期的token时才接受请求。</p><p></p><p>使用OIDC token与外部系统集成的例子是<a href=\"https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html\">AWS IAM用于服务账户的角色</a>\"和<a href=\"https://www.vaultproject.io/docs/auth/kubernetes\">Hashicorp Vault Kubernetes auth</a>\"。</p><p></p><h2>网络：Ingress并不合适</h2><p></p><p></p><p>Kubernetes提供了一个<a href=\"https://kubernetes.io/docs/concepts/services-networking/ingress/\">Ingress</a>\"资源，以指定如何将HTTP流量路由到工作负载中。正如Tim Hockin（Kubernetes联合创始人）所承认的那样，<a href=\"https://kubernetespodcast.com/episode/041-ingress/\">Ingress资源有很多问题</a>\"。主要的问题是，它只允许我们管理HTTP流量路由中最基本的东西。对于基础设施和网站可靠性工程（SRE）团队来说，允许开发人员使用Ingress资源将是一个令人头疼的问题，他们需要将大量的基础设施互连，并确保它能可靠地运行。Ingress资源太简单了，开发人员不应该用它来配置网络。</p><p></p><p>从服务网格的兴起中，我们可以看到业界对Kubernetes网络有着更多控制和可编程性的需求。它们将Ingress资源划分为多个资源，以便于更好地分离职责，并在路由、可观测性、安全性和容错方面提供额外的功能。</p><p></p><p>越来越多建立在Kubernetes之上的抽象都假设有一个可编程的网络，这超出了Ingress所能提供的可能性（如Knative、Kubeflow，以及像Argo Rollouts这样的持续部署工具）。这凸显了在Kubernetes中更强大的网络模型已经是一个事实标准。</p><p></p><p>Kubernetes已经演进出了“Ingress v2”&nbsp;<a href=\"https://kubernetes.io/blog/2021/04/22/evolving-kubernetes-networking-with-the-gateway-api/\">网关-API</a>\"。虽然这解决了Ingress的一些问题，但是它只涵盖了大部分服务网格所能支持的一小部分特性。</p><p></p><p>Kubernetes支持ACL，用于限制哪些工作负载可以通过<a href=\"https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/network-policy-v1/\">NetworkPolicy</a>\"资源进行通信。该资源在Kubernetes的网络插件中实现，通常会转化为Linux的iptables过滤规则，即基于IP地址的解决方案，很像防火墙，这也是一种古老的范式。一些服务网格扩展了Kubernetes强大的基于OIDC的工作负载身份标识，以实现工作负载之间的双向TLS。这基于比IP地址更强大的原则，为Kubernetes网络通信带来了保密性和真实性。</p><p></p><p>在Kubernetes应用打包时，在如何包含网络配置方面存在一些分歧。许多Helm charts都带有Ingress资源模板。然而，随着我们转向更高级的网络模型，这些定义将不能再使用。展望未来，像Helm charts这样的应用部署应该把网络配置看作是一个正交性的问题，不应该包含在应用部署制品（artifact）中。关于应用的网络配置，可能没有一个放之四海而皆准的解决方案，组织很可能希望开发自己的“应用路由”部署制品。</p><p></p><p>Kubernetes通过在集群中的所有节点上创建一个同质（homogeneous）的网络，使网络变得更加简单。如果你的应用是多集群或多云部署的，它可能同样受益于跨集群或云的同质网络。Kubernetes的网络模型并不能做到这一点，我们需要一些能力更强的方案，比如服务网格。</p><p></p><p>因此，从组织和架构的角度来看，有多个原因可以证明开发者不应该用Ingress资源对网络进行编程。必须以整体的组织视角来考虑这些方案，以确保以可管理和长期可行的方式进行网络配置和管理。</p><p></p><h2>工作负载定义：新的模式</h2><p></p><p></p><p>实际上，所有Kubernetes应用的核心都是<a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\">Deployment</a>\"资源。Deployment资源定义了我们的工作负载应该如何以Pod内容器的形式来执行。</p><p></p><p>Deployment的扩展可以通过<a href=\"https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v2/\">HorizontalPodAutoscaler（HPA）</a>\"资源来控制，以适应不同的容量需求。HPA通常使用容器的CPU负载作为增加或删除Pod的标准。由于HPA算法通常的目标利用率在70%左右，这意味着我们在设计时要浪费30%的资源。使用保守的目标利用率的另一个原因是，HPA经常需要一分钟或更长的响应时间才能开始工作。为了处理不同的容量需求，我们需要一些备用容量，与此同时HPA会增加更多的Pod。</p><p></p><p>如果我们的应用会经历缓慢变化的容量需求，用Deployments和HPA管理工作负载效果很好。然而，随着向微服务、事件驱动架构和函数（处理一个或多个事件/请求，然后终止）转变，这种形式的工作负载管理就不够理想了。</p><p></p><p><a href=\"https://keda.sh/\">Kubernetes Event-Driven Autocaler（KEDA）</a>\"可以改善微服务和快速变化的工作负载（如函数）的扩展行为。KEDA定义了一套自己的Kubernetes资源来定义扩展行为，可以视为“HPA v3”（因为HPA资源已经是“v2”版本了）。</p><p></p><p>有一个结合了Kubernetes Deployment模型、扩展以及事件和网络路由的框架，即<a href=\"https://knative.dev/docs/\">Knative</a>\"。 Knative是一个建立在Kubernetes之上的平台，通过<a href=\"https://knative.dev/docs/serving/\">Knative-Service</a>\"资源对工作负载进行有针对性的管理。Knative的核心是<a href=\"https://cloudevents.io/\">CloudEvents</a>\"，Knative服务基本上是由CloudEvents或普通HTTP请求等事件触发和扩展的函数。Knative使用Pod sidecar来监控事件发生率，因此在事件发生率变化时可以快速扩展。Knative还支持扩展到零（scaling to zero），因此允许更细粒度的工作负载扩展，更适合于微服务和函数。</p><p></p><p>Knative服务使用了传统的Kubernetes Deployment/Service，Knative服务的更新（例如，一个新的容器镜像）会创建并行的Kubernetes Deployment/Service资源。Knative利用这一点来实现蓝/绿和金丝雀部署模式，HTTP流量的路由是Knative服务资源定义的一部分。</p><p></p><p>因此，Knative服务资源及其定义事件路由的相关资源将成为开发者在Kubernetes上定义应用部署时所使用的主要资源。 就像我们今天经常通过Deployment资源与Kubernetes互动，让Kubernetes处理Pod一样，使用Knative意味着开发人员将主要关注Knative服务，而Deployment则由Knative平台处理。</p><p></p><p>虽然我希望Knative模型能适合大多数的使用场景，但你的场景可能会有所不同。如果你是做机器学习的，那么<a href=\"https://knative.dev/docs/serving/\">Kubeflow</a>\"可能是更好的抽象。如果你更专注于DevOps和交付流水线，那么<a href=\"https://github.com/pivotal/kpack\">kpack</a>\"、<a href=\"https://tekton.dev/\">Tekton</a>\"或<a href=\"https://cartographer.sh/\">Cartographer</a>\"可能是适合你的抽象形式。无论你在Kubernetes上做什么，都有相应的抽象。</p><p></p><h2>存储：远离持久化卷</h2><p></p><p></p><p>Kubernetes提供了<a href=\"https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-v1/\">PersistentVolume</a>\"和<a href=\"https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/\">PersistentVolumeClaim</a>\"资源来管理工作负载的存储问题。这可能是我最不喜欢的资源了，除了短暂的缓存数据外，它允许开发人员将其用于任何目的。</p><p></p><p>从高层次的角度来看，PersistentVolume（PV）的问题在于，它将应用程序的主要关注点与存储问题结合在了一起，这不是一个理想的云原生设计模式。<a href=\"https://12factor.net/\">12-factors应用方法论</a>\"告诉我们要将所有<a href=\"https://12factor.net/backing-services\">支撑服务</a>\"视为网络附加资源。这要归因于我们在Kubernetes中水平扩展工作负载和管理数据的方式（请想一下<a href=\"https://en.wikipedia.org/wiki/CAP_theorem\">CAP理论</a>\"）。</p><p></p><p>PV代表了文件和目录的文件系统，我们用POSIX文件系统接口对数据进行操作。访问权限也是基于POSIX模型的，允许通过用户和组进行读/写访问控制。这种模式不仅与云原生应用的设计不匹配，而且在实际使用中也有很多的问题，这意味着大多数情况下，PV是以“容器可以访问所有数据”的模式mount的。</p><p></p><p>开发人员构建的有状态应用其实应该是无状态的。这意味着数据应该在应用外部进行处理，使用除文件系统外的其他抽象形式，如数据库或<a href=\"https://en.wikipedia.org/wiki/Object_storage\">对象存储</a>\"。数据库和对象存储应用可以使用PV来满足其存储需求，但这些系统应该由基础设施/SRE团队来管理，并由开发人员以服务的形式进行消费。</p><p></p><p>当我们将存储视为网络附加资源时，数据安全问题就可能得到极大的改善，例如，我们可以考虑通过REST API进行对象存储。借助REST API的形式，我们就可以通过上述基于Kubernetes工作负载身份标识的短期访问token实现认证和授权。</p><p></p><p>随着Serverless工作负载模式的不断采用，我们应该预期出现更多的动态和更短生命周期的工作负载（例如，Serverless函数处理每个Pod的一个事件）。在这种情况下，工作负载和“老式磁盘”之间的不匹配变得更加明显。</p><p></p><p>在Kubernetes中，容器存储接口（container storage interface，CSI）一直是通过PV向工作负载添加文件系统和块存储的接口。Kubernetes对象存储特别兴趣小组正在研究<a href=\"https://container-object-storage-interface.github.io/\">容器对象存储接口（COSI）</a>\"，这可能会使对象存储成为Kubernetes中的一等公民。</p><p></p><h2>美好的新世界</h2><p></p><p></p><p>在本文中，我认为在定义Kubernetes应用时，有充分的理由超越“传统”的Kubernetes资源。这并不是说，我们永远都不会使用传统的资源类型。仍然会有一些我们无法轻易转换的遗留应用，SRE团队可能仍然需要运行有状态的服务，这些服务会被开发人员构建的应用所消费。对于私有云基础设施来说，情况更是如此。</p><p></p><p>Kubernetes的未来在于<a href=\"https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/\">自定义资源定义（custom resource definition，CRD）</a>\"和抽象，我们会在Kubernetes之上构建它们，并通过CRD提供给用户。Kubernetes会成为抽象的控制平面，而开发人员应该关注的正是这些抽象的CRD。Kubernetes控制平面可以管理Kubernetes内部的资源，甚至是Kubernetes外部的资源，例如<a href=\"https://www.eficode.com/blog/outgrowing-terraform-and-adopting-control-planes?hsLang=en\">Crossplane管理云基础设施</a>\"。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ca/caa5b16d3beb276ca367329c5ceb8ba8.png\" /></p><p></p><p>正如上面所总结的，大多数传统的Kubernetes资源对开发人员来说可能有更好的替代方案。使用这些替代方案将改善我们在未来几年内开发和运维云原生应用程序的方式。毕竟，Kubernetes是一个构建平台的平台。它并不是终点!</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/minibook/IDAGRlr1RAeLg8l6sZTy\">Kubernetes 安全防护终极指南</a>\"</p><p><a href=\"https://www.infoq.cn/article/Yiqriipkfzw1gBBdyzUl\">Crossplane支持的自定义资源数量突破了Kubernetes的限制</a>\"</p>",
    "publish_time": "2022-11-01 10:36:48",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]