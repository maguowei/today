[
  {
    "title": "从公有云方案转向谷歌开源Knative，网易云音乐的Severless演进实践",
    "url": "https://www.infoq.cn/article/MA6MqQUHalKLxYSAN9do",
    "summary": "<p></p><p>云主机时代，资源焦虑几乎普遍存在。突增的巨大任务量、短时间突然调集使用大量的计算资源等类型的业务需求越来越多，企业不愿为了应对短暂的流量高峰买本地资源，对服务和扩缩容进行解耦，并接管过自动扩缩容任务的 Serverless 进入大众视野。</p><p>&nbsp;</p><p>Serverless 自带“降本增效”基因，特点之一就是可以缩容到零之后再按资源使用情况收费，这自然吸引了大量企业使用，<a href=\"https://www.infoq.cn/article/mBgvbc3bQWAbavwmBhXR\">网易云音乐</a>\"便是其中之一。</p><p>&nbsp;</p><p>最早，网易云音乐主要使用云厂商的 FaaS 产品。随着 Serverless 社区的发展，2020年，网易云音乐开始关注到 Google 开源的 Knative 项目，到了2021年5月，团队决定优先利用内部的私有云资源，在满足业务的异步处理事件以及弹性扩缩容需求的前提下，通过在线和离线服务的混合部署，提升系统资源利用率，同时完成降本增效目的。</p><p>&nbsp;</p><p>于是，在做了简单的POC测试并与业务沟通后，网易云音乐便协同网易数帆云原生团队面向音视频处理，打造了基于<a href=\"https://www.infoq.cn/article/rDL06CdUNEPXtPLzT-3O\">Knative</a>\" 的 Serverless 解决方案。</p><p></p><h2>如何做技术选型</h2><p></p><p>&nbsp;</p><p>网易云音乐每天都有数十万的歌曲入库，曲库团队则需要对这部分歌曲做准实时的加工处理、理解分析（包括歌曲转码、副歌识别、特征分析等），相关处理结果用于歌曲播放、VIP 歌曲试听等业务场景。这类业务的特点就是弹性特别大，任务时多时少，多的时候甚至要对大量存量歌曲数据进行重新计算。这就对资源交付方式提出了新的要求。</p><p>&nbsp;</p><p>按照网易云音乐在云主机时代的使用经验，传统的资源交付方式主要存在以下几个问题：</p><p>&nbsp;</p><p>•&nbsp;弹性效率低下：大型活动业务扩容时，各个角色如应用运维、机房等深度耦合，进行一次大型活动需要非常长的准备时间。</p><p>•&nbsp;计算焦虑：由于规模问题，机房计算资源没办法实现在活动期间的快速资源弹性需求，因此常常需要准备很多闲置资源。</p><p>•&nbsp;运维繁琐：扩容变更时，很多是以工单、人工化为主的低效过程，无论效率还是质量都不尽如人意。</p><p>•&nbsp;成本问题：总体CPU等资源利用率不高，小于20%，缺乏自动化的管理和调度能力，资源无法得到充分利用。</p><p>•&nbsp;稳定性：应用发生故障后，无法自动重新拉起或重新调度，核心业务的服务质量很难得到保障。</p><p>&nbsp;</p><p>虽然基于 Kubernetes 以及生态里的很多创新云原生解决方案，上述棘手问题得到了一定程度的解决，但 Serverless 的解决方案相对来说更加高效易用。<a href=\"https://www.infoq.cn/article/vHCG1pJpsLapBBMvbvZM\">Serverless</a>\" 向业务提供了语言无关、框架无关的研发模式，通过自动化Metric、自动扩缩容等手段让业务聚焦业务逻辑，无需关注周边与资源扩缩、没有服务器管理，降低了程序生命周期中的大量运维成本。</p><p>&nbsp;</p><p>当前，Serverless 大概有三个技术方向：Serverless 容器服务、Serverless 应用托管和函数计算（FaaS）。</p><p>&nbsp;</p><p>使用 Serverless 容器服务的用户不需要维护&nbsp;Kubernetes 集群的计算节点，系统根据服务使用的pod数量进行计费，但Serverless容器服务并不能提供完备的周边配套设施；Serverless 应用托管则会包含应用生命周期的管理、CI/CD、发布策略，蓝绿或者灰度发布功能等，用户只需将服务部署后就能坐享应用托管所提供的基础能力；函数计算的抽象程度更高。对于&nbsp;Python 等解释类语言，开发者使用&nbsp;FasS 将代码片段上传后，函数计算的底层便可快速将服务对外部署，从而实现对外服务。</p><p>&nbsp;</p><p>在云原生团队看来，Serverless应用托管或&nbsp;FaaS 平台相对来说是更好的选择，因为业务不只需要弹性伸缩功能，还要解决&nbsp;CI/CD、发布策略、消息引擎等问题，做更好的开发封装。只有涵盖了这些周边配套服务，才能将开发的心智负担降至最低。方向确认后，具体怎么做呢？</p><p>&nbsp;</p><p>容器镜像需要基于编程语言的定制化编译和构建，从而生成二进制的文件，最后再经过&nbsp;Dockerfile 将其构建成容器。但是，曲库团队内部有多种语言所开发的算法，很难用通用的流水线进行容器镜像构建。因此，曲库团队内部只要求底层&nbsp;Serverless 平台或&nbsp;FaaS 平台能够接受&nbsp;Dockerfile 即可，具体&nbsp;Dockerfile 怎么写则由其内部自行消化。</p><p>&nbsp;</p><p>因此，云原生团队的任务就是将曲库团队上传的Dockerfile进行镜像构造。云原生团队为此进行了一次全面调研，内容包括消息引擎对上下游解耦及弹性扩容的需求、相关开源软件（Knative、OpenFaas、Fission、Nuclio等）与需求的匹配度对比，最后确定基于Knative Serving 做动态扩缩容、基于Knative Eventing构建事件处理框架。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/83/83e9a3022bab0e0a0d307a6da4f6f18e.png\" /></p><p></p><p>&nbsp;网易云音乐&nbsp;Serverless 事件处理框架图</p><p>&nbsp;</p><p>在如何进行技术选型上，网易数帆云原生架构师闫东晓表示主要有三点需要考虑。第一，产品一定要能够满足业务场景和应用场景需求；第二，关注产品背后的支持情况，比如Knative 有谷歌、IBM 等大企业加持，OpenShift 背后有&nbsp;RedHat 支持；第三，产品具有易用性，通常易用性是落地时团队要帮助业务解决的问题，但如果项目足够稳定，就不需要改变底层框架。</p><p>&nbsp;</p><p>在众多开源软件中，Knative的扩展性较好、可以选择消息引擎，并且生产和消费的客户端可以以插件的形式嵌入到Serverless系统中。因此，云原生团队最后选择基于&nbsp;Knative 对每个实例或创建的&nbsp;Knative Service（类似&nbsp;Kubernetes 的&nbsp;Deployment）进行动态扩缩容。</p><p>&nbsp;</p><p>当时的&nbsp;Knative 本身还处于快速迭代阶段，没有稳定的版本，网易云音乐使用的还是0.20、0.21版本。</p><p>&nbsp;</p><p>2021年上云之后，网易云音乐开始使用事件驱动架构。这次迁移期间，云原生团队还在&nbsp;Knative Eventing 事件框架中内嵌了一个插件（Knative之中包含&nbsp;Knative Serving 和&nbsp;Knative Eventing 两个项目），将消息引擎&nbsp;Kafka 也集成到了&nbsp;Serverless 平台之中。业务只需要在8080端口接收通过&nbsp;Knative Eventing 事件框架转发的请求，并通过Kafka触发消息即可实现事件驱动。</p><p>&nbsp;</p><p>具体来讲，业务将支持&nbsp;Knative Eventing 格式的事件请求通过暴露的URL发送到接口，再由接口将消息转发到消息引擎，系统层面在监听到事件触发后会消费&nbsp;Kafka 的消息，最后再将其转发给后端算法进行处理。</p><p>&nbsp;</p><p>自此，网易云音乐拥有了一个异步事件处理框架，在偏向离线的场景中可以慢慢地消费消息，从而确保私有云底层的有限资源能得到合理、充分地使用。</p><p>&nbsp;</p><p>这是一种通用技术，要求启动的服务不依赖私有云节点，不能在宿主机上的某些路径下存在文件等依赖形式，否则会无法弹出导致启动失败。但如果所有依赖均在容器镜像内部，或者可以通过运行时动态地请求依赖方获取信息，那么就可以应用这种弹性能力。</p><p>&nbsp;</p><p></p><h2>迁移后，需要解决哪些问题？</h2><p></p><p>&nbsp;</p><p>冷启动是 Serverless 使用时被重点考量的点。影响启动速度的因素有很多，比如，容器镜像大小不同，pod的启动速度也不同。部分厂商通过预先启动部分&nbsp;pod 的方式来解决冷启动问题，但网易云音乐没有这么做。云原生团队使用了更通用的解决方案，比如&nbsp;Dockerfile 采用多阶段构建、P2P 加速容器镜像拉取速度等。</p><p>&nbsp;</p><p>网易云音乐的应用场景偏离线、非实时，因此对负载均衡和并发控制的需求比较高。音视频算法每个pod可处理的并发度很低，理想情况是上游在下发请求时控制并发数量，确保每个pod都在处理自己能处理的并发请求。但是，数据链路上会有数据不均衡的情况，经过队列的请求会超过pod可处理的并发数量上限，从而导致队列阻塞和其他pod空闲。</p><p>&nbsp;</p><p>为此，云原生团队调整了&nbsp;Knative 内部的负载均衡算法策略，从默认的&nbsp;Round Robin 改为&nbsp;Least Request，将请求发给并发处理数最少的 pod，让每个 pod 都有任务。</p><p>&nbsp;</p><p>另外业务对稳定性要求也很高，而业务稳定性主要体现在对上游并发的控制上。业务将服务请求全部发送到消息队列后，如果将消息全部分发给底层服务处理，那么将扩容出非常多 pod；如果pod与在线应用在同一个node上，则势必会影响在线应用的稳定性。因此，除了 Knative 本身所提供的服务外，云原生团队还收集业务指标并提供监控告警功能，来给业务信心。</p><p>&nbsp;</p><p>通过与业务的需求沟通，云原生团队利用 Serverless 暴露出的数据链路指标信息形成定制的可视化看板，其中包括监控告警、扩缩容频率、每个pod的负载情况、推送消息的消费情况等业务基础信息，此外也有&nbsp;Serverless 内部运维的巡检监控，如CPU、内存的利用率，消费队列消费延时情况、业务化扩缩容实现等。</p><p>&nbsp;</p><p>当监控效果不达预期时，云原生团队则需要调整或借鉴其他优化手段做提升。值得注意的是，这些监控指标收集都是使用的基础&nbsp;Kubernetes 系列开源产品，并不是&nbsp;Serverless 独有的。Serverless 是作为整个架构部分的存在，需要与其它产品配合使用。&nbsp;</p><p>&nbsp;</p><p>在调优方面，业务研发可以自行登录容器查看进程信息，也可以通过日志收集的方式查看。调试方面则使用了云主机时代的远程调试方法，这种方式在容器化时代依旧可用。</p><p>&nbsp;</p><p>为了完成“最后一公里”的交付，云原生团队在网易开源的云原生应用交付平台 Horizon 上交付了一个部署模板，曲库团队基于 Horizon 平台填写数据表单，云原生团队负责模板化实例生成。Horizon 平台（开源地址：<a href=\"https://github.com/horizoncd\">https://github.com/horizoncd</a>\"）通过引入模板系统解决了各种应用负载标准化的问题，支持&nbsp;Deployment、Argo Rollout、Knative 等负载，Serverless 平台则复用了&nbsp;Horizon 的部分基础能力，进而为业务提供动态扩缩容和事件处理框架能力。</p><p>&nbsp;</p><p>通过结合业务进行探索和迭代，网易云音乐用了一年多的时间基于Knaitve 构建了相对完善的&nbsp;Serverless 平台：</p><p>&nbsp;</p><p>多语言的构建方式：包括 Dockerfile 、JAVA、Golang、Node、Python等。多场景：支持弹性在线应用和弹性数据处理，支持同步调用模式和异步调用模式。丰富的发布策略：支持蓝绿发布和基于流量的灰度发布，确保业务的无损发布。自动扩缩容：根据业务并发以及QPS、任务量等实现秒级自动扩缩容。全链路监控：全链路的采集指标、采集日志，自动将数据整合到应用监控。丰富的触发器：除了支持HTTP、还支持网易内部的Kafka、Nydus 队列作为Serverless触发器进行数据处理。无限容量：通过混合云、混合部署等方式，快速、自动地通过ECI等方式弹到阿里云、AWS等公有云厂商。</p><p></p><h2>落地效益如何？</h2><p></p><p>&nbsp;</p><p>“对于企业来说，如果一开始使用的是私有云，那么在既有 IT 成本的前提下，Serverless只是提升内部资源的利用率。但如果前提是公有云，那么只要能保证容器不依赖于主机环境，那么在解决信息安全、日志、指标监控等问题的前提下，Serverless 是一定可行的。”闫东晓表示。</p><p>&nbsp;</p><p>目前，网易云音乐内部大量使用Serverless平台的场景包括音视频分析、AI推理分析、前端SSR、弹性日志ETL等。Serverlesss 通过与在线业务混合部署的方式，大大提升了机房资源的利用率，峰值时超过了50%，资源整体占比达到20%左右。</p><p>&nbsp;</p><p>网易云音乐的Node负载有波峰、波谷之分，云原生团队希望在波峰时段减少Serverless的使用，并在凌晨2-8点左右提升资源利用率，运行Serverless的非实时任务。其中，波峰时段主要是内部私有云在线服务，这也是整个&nbsp;Kubernetes 资源利用率的波峰。</p><p>&nbsp;</p><p>如今，网易云音乐的私有云上已经部署了超过500个 Serverless 应用，高峰期会使用1万多虚拟核心。从内部Node级别的资源利用率来看，有20%的 CPU 核心供给了 Serverless应用使用，通过在线离线混合部署，在不扩容机器增加成本的情况下，基本满足了业务对底层计算资源的诉求。</p><p>&nbsp;</p><p>网易云音乐还可以做到优先使用自有机房计算资源，直到饱和时再使用公有云上的计算资源，比如将服务弹出到阿里云的ECI（弹性容器实例）上进行临时的计算辅助，并在执行完成后将其缩容，从而完全解决资源焦虑，大大提高资源交付效率。需要注意的是，这是一种临时调用，而非将服务固定在私有云和公有云上混合使用。</p><p>&nbsp;</p><p>在接入 Serverless 平台两年以来，曲库音视频平均使用资源的 CPU 核数日平均峰值 5000 核，日平均谷值3000 核。同时，一部分算法服务还借助公有云的 Spot 弹性资源和包月资源，利用竞价模式，持有弹性的GPU，快速申请、快速释放。云原生团队的调研显示，即使是简单的每天修改副本数，业务对这些弹性扩缩容手段的好感度也非常高。</p><p>&nbsp;</p><p>另外在运维方面，底层运维的成本并没有因为使用 Serverless 而增加，运维人员的实际操作量减少，将精力更多放在了&nbsp;Kubernetes 的资源是否能满足业务需求上。</p><p>&nbsp;</p><p>不过，闫东晓提醒道，对于业务研发而言，云原生团队可以将同一类的工具链封装得更稳定、使用更简单，这时 Serverless 使用效率较高，但是对于非同一类工具链，如算法等无法抽象出&nbsp;CI 流水线的，收益就比较有限。</p><p></p><h2>要不要用 Serverless&nbsp;</h2><p></p><p>&nbsp;</p><p>从云厂商产品为主到基于开源产品二次开发，网易云音乐的 Serverless 架构虽然更加贴合内部应用场景，但也需要花精力紧跟社区迭代。闫东晓表示，Serverless 也非“银弹”，本身自带如冷启动方面启动慢、销毁时造成客户端异常、对在线类服务不太能友好等问题。另外，在既有成本的情况下，固定副本数要比弹性扩缩容要好。</p><p>&nbsp;</p><p>对于想要接入 Serverless 的企业，闫东晓建议可以从降本增效的角度，或者自有机房或私有云的系统资源利用率角度，看是否有偏离线的计算密集型业务。“一些离线应用往往会在短时间内需要大量的资源，这种需求往往也是一次性的。此时，可以考虑使用 Serverless 提升系统利用率。”</p><p>&nbsp;</p><p>对于使用公有云的企业，如果直接将所有服务全部迁移到&nbsp;Serverless 架构上，则更需要考虑各种风险，比如扩缩容过程中的冷启动问题、服务启停是否会影响业务、缩容时 pod 的销毁是否会同时关闭未处理完成的用户请求、扩容时 pod 创建是否够快、是否会导致扩容时间内的请求高延迟等。</p><p>&nbsp;</p><p>企业如果考虑使用云厂商产品，闫东晓表示需要了解云厂商的技术是否封闭、是否跟随社区前进，否则之后做厂商切换、产品切换时都会比较麻烦。尤其如果云厂商的 Serverless 产品在底层没有统一标准，那么平滑迁移必然会带来成本问题。</p><p>&nbsp;</p><p>如果内部只是将固定副本数的普通云主机迁移至 Kubernetes，那么对于封装流水线和接口的方式，业务层感知不到底层上云前后的差别，也不需要太多知识。但如果是使用微服务、选择自身技术栈的情况，那么使用方需要能提供 Dockerfile、自行将容器封装运行，这就需要具备容器、Kubernetes 方面的知识，否则用起来会感到困惑。</p><p></p><h2>结束语</h2><p></p><p>&nbsp;</p><p>网易云音乐的 Serverless 应用还在继续，比如网易云音乐考虑在事件框架中引入&nbsp;RocketMQ、调度方面会引入定时并发控制，以及充分利用硬件在波谷时段的资源等。总的来说，网易云音乐 Serverless 的落地还是围绕“降本增效”进行更细化的工作。</p><p>&nbsp;</p><p>当然，对于整个 Serverless 行业来说，未来也还有很多路要走。 Serverless 能否借助当下企业对降本增效需求的契机得到进一步发展，我们也将拭目以待。</p>",
    "publish_time": "2023-03-21 07:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "ChatGPT 爆火的背后：深度解读“智能对话”与“人机交互”技术",
    "url": "https://www.infoq.cn/article/hVCV97zJtH9vgeoDuMLS",
    "summary": "<p>智能对话技术在近几年来取得了惊人的进步，最近爆火的 ChatGPT 更是将智能对话推到了至高潮。像 ChatGPT 这样的聊天机器人有着广泛的用途，然而想要让其达到真正的智能水平，还有很多挑战需要克服，比如自然语言处理、上下文理解、逻辑推理、情感表达等技术能力都需要进一步迭代。</p><p></p><p>如今智能对话技术已经发展到什么程度了？当前有什么好的智能对话产品实践经验？智能对话技术的下一步演进将是怎样的？为了得到这些问题的答案，3 月 11 日下午，<a href=\"https://www.infoq.cn/article/GL8uCoJG5txQwZ9aQo2Z\">OPPO 数智</a>\"在线下举办了主题为《畅谈“智能对话”，共启“交互未来”》的 OGeek 小布沙龙。<a href=\"https://www.infoq.cn/article/JL4C1m4lb4AiCkLRy4DZ\">OPPO 小布助手</a>\"首席研究员杨振宇博士作为本次沙龙的内容出品人，邀请到了清华大学计算机科学与技术系长聘副教授黄民烈博士、百度 AI 主任研发架构师 &amp; 小度算法团队技术负责人谢剑博士及 OPPO 小布助手算法专家索宏彬博士来到现场进行了硬核的技术干货分享及精彩绝伦的圆桌论坛。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ba/ba38b3544addf30f30792bda0b8d9081.jpeg\" /></p><p></p><p>据悉，“<a href=\"https://www.infoq.cn/article/JL4C1m4lb4AiCkLRy4DZ\">OGeek</a>\"”是由 OPPO 数智工程事业部主办的行业技术沙龙品牌，旨在为技术爱好者搭建一个技术交流和分享的开放平台。沙龙主要围绕“科技为人、以善天下”的品牌使命，聚焦于为智能终端提供安全高效的数据、算力、算法、云服务方面的前沿技术，打造技术互动的行业生态，探索技术在行业应用的实践、突破及未来发展方向。</p><p></p><p>以下为本次 OGeek 小布沙龙的精华内容整理：</p><p></p><p></p><h2>黄民烈：预训练对话大模型深度解读</h2><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/16/16383e809a45cda8236ae32e04c234ce.jpeg\" /></p><p></p><p>生成式对话模型的图灵测试逐渐接近人类水平，高质量对话也让人误以为 AI 有意识和人格觉醒。特斯拉和小米均在研发人形机器人，国际上也投入了大笔资金立项，似乎“AI- 人”和谐共融的社会将成为必然。基于以上背景，黄民烈指出，随着硬件成本越来越低、执行部件越来越灵敏，机器人的大脑将显得尤为重要。</p><p></p><p>黄民烈提到，目前 AI 的发展已经历三个时代：</p><p></p><p>基于规则时代，1966 年计算机发展之初，MIT 的教授基于规则研发了用于心理治疗的 Eliza；智能助手时代，资本一顿狂追，成果则良莠不齐；深度学习时代，如今，以深度学习为代表的大模型数据神经对话系统如 ChatGPT 正在开启 AI 发展的第三阶段——深度学习阶段。</p><p></p><p>黄民烈认为，聊天机器人可分为两个分支——“功能型 AI”及“拟人型 AI”。前者可以不停地完成任务和指令，如传统的智能助手、大模型阶段的 ChatGPT；后者则一般是基于检索的智能机器人、基于生成大模型的 LaMDA 等。</p><p></p><p>纵观大模型发展历程，由微软研发的 DialoGPT 是相对较早的系统，它完全基于 GPT 架构，从 Reddit 上抽取 147M 对话数据，实现了互信息最大化。谷歌研发的 Meena 系统提出了人工评价体系 SSA，性能显著超越了 DialoGPT。清华 CoAI 小组研发的 CDial-GPT，依托 Decoder-0nly 架构，建立了大规模高质量中文开放域对话数据集 LCCC，其人工评测结果优于原始 Transformer 模型和中文 GPT-2 模型，得到了学术界的认可。</p><p></p><p>紧接着由 Meta AI 研发的 BlenderBot 问世，共包含三代版本：</p><p></p><p>第一代：已具备开放域闲聊及多技能融合的能力；第二代：模型结构与第一代相同，数据能力有所增强。第三代：迭代为 Decoder-Only 结构，功能模块化与流水线配合执行，完成开放域任务并实现终身学习。</p><p></p><p>2021 年初，清华 CoAI 小组研发了 EVA，共有两个版本。其中，EVA1.0 包含 28 亿参数，在 181G WDC-Dialogue 上训练而成，开源首个十亿级别中文对话模型；EVA2.0 在精细清洗的 60G WDC-Dialogue 上训练而成，开源多规模版本模型以方便研究者使用。</p><p></p><p>当我们把目光放到当下的技术产品中，由百度研发的 PLATO 系列模型现已更新至第四代。前两代模型结构相同，参数量均为 1.6B。第三代 PLATO-XL，参数量达到 11B，在连贯性、一致性、信息量、事实性、趣味性上均取得优异表现。第四代 PLATO-K 版本旨在解决开放域对话系统中信息量缺乏和事实不准确的问题，在知识性上有大幅提升。由 Google 研发的 LaMDA 以 Decoder-Only 为架构，参数量达到 137B，在 2.81T 的 token 上进行了预训练，能够在合理、趣味、安全的开放域闲聊。引入 Toolset (TS)，在生成质量、安全性、有根据性上取得明显提升。</p><p></p><p>去年，清华 CoAI 小组联合聆心智能研发了 OPD。它采用 UniLM 架构，在预训练阶段引入了 Soft Prompt。参数量为 6.3B，具有 70GB 高质量对话数据，兼顾出色的闲聊能力与知识问答能力。</p><p></p><p>关于如今备受关注的 ChatGPT，黄民烈提到，它背后的核心技术其实是指令学习和基于人类反馈的强化学习。黄民烈在此总结了 ChatGPT 的三个突出特点：</p><p></p><p>遵循指令能力出色，在多轮交互中均能很好地遵从指令；对话历史建模能力突出，在多轮交互中具有很强的长程记忆能力；多语言能力强，支持各类主流语言。再者是回复信息性强，倾向于生成较长的回复。最后是安全性好，安全漏洞很少且仍在持续优化。</p><p></p><p>黄民烈指出，ChatGPT 更突出功能属性，强调提高效率、解放生产力，提升创造力。而 Character AI 和 AI 乌托邦则更关注人格属性，试图满足社交、情感、陪伴、支持等需求。黄民烈将 AI 乌托邦称为 Mini 版的 ChatGPT，它既可以回答刁钻的问题，还可以让不同角色实现跨时空的对话。对于一个问题，ChatGPT 可能会给出一个比较官方的回复，而 AI 乌托邦则会根据不同的角色性格给出不同的回答。</p><p></p><p>在本次演讲的最后，黄民烈就对话大模型特点做出了总结：</p><p></p><p>1. 模型架构、预训练任务趋于统一；</p><p>2. 参数规模持续增大，下一代对话预训练模型将普遍进入千亿量级；</p><p>3. 数据重要性日益凸显，中等规模、高质量的对话数据将显著提升对话预训练模型的交互能力；</p><p>4. 人类在模型训练过程的介入和参与不断增加，模型对人类行为的模仿、与人类偏好和价值取向的对齐不断增强；</p><p>5. Tool-learning 引起关注，检索、记忆、计算等可插拔的外部模块将成为标配；</p><p>6. 新的落地应用场景涌现，以 Character.AI、ChatGPT 为代表的对话模型具有众多潜在的落地应用场景。</p><p></p><p></p><h2>谢剑：小度助手的智能化演进技术实践</h2><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d2/d2c3e2e20f4a2190a06ae4305053d9cd.jpeg\" /></p><p></p><p>谢剑认为，智能助手的智能化体验将主要围绕以下几个维度进行进化。首先是“交互自然度”，交互自然度不仅体现在语音交互，更侧重于多模态的交互。现在市场上的语音助手基本是一次唤醒一次交互，这种方式并不够智能。其次是“对话智能度”，即智能对话系统要足够聪明。对于同一个问题，不同的提问方式均能得到准确的回答。从基础满足进阶到拟人智能，有人格化、人像化的形象将会与人产生情感的连接。然后是“感知与影响度”，即实现对物理世界更丰富的感知和更强的影响。</p><p></p><p>小度助手在这个进化蓝图下，主要围绕自然交互和对话智能展开探索。针对自然交互，谢剑指出，无论是把双工交互引进来，还是把“小度小度”变成“小度”，都是为了使用户和设备之间的交互成本更低。对话智能则侧重于不同技术路线应对不同的对话需求，小度个性化持续自学习的统一对话系统，可以在保护用户隐私的情况下进行用户分析，将满意的部分持续积累，不满意的部分通过样本挖掘产生正确的标签，实现系统的自学习。</p><p></p><p>从工业界的视野来看，谢剑认为对话理解正面临着三个挑战——大规模持续增长的理解体系、语音识别错误和口语化问题的鲁棒性挑战、需要满足不同用户的个性化需求。为此小度助手进行了对话理解层面、对话引导层面的技术迭代。</p><p></p><p>在对话理解层面，建立大规模个性化多轮对话需求追踪模型。将 NLP 与推荐技术交叉融合，针对用户的需求空间做整体建模，如此便绕开了文本出错的问题。同时，应用个性化和上下文信息融合的注意力网路，进而实现全空间可比的连续概率变化追踪。该模型的端到端纠错和 NLU 能力、上下文理解能力、垂类知识能力以及个性化纠错与消歧能力非常强悍，其中“个性化纠错与消歧能力”尤为突出。</p><p></p><p>在对话引导层面，谢剑强调智能的对话体验应是：知之为知之，不知为不知，即智能助手一定要知道自己有不知道的边界。通俗来讲，用户与小度聊天，当聊到它没听清或听不懂的问题时，它能够知道自己不知道，而不是答非所问。于是，小度团队构建了深度满意度模型——离线时基于下文 Dialogue Act 的序列行为判别模型，在线时基于离线模型样本，预判最佳结果是否满足用户。</p><p></p><p>面对 ChatGPT 的成功，谢剑将其背后的强大能力拆解为三个维度，分别是对话交互维度、NLP 全任务能力维度以及泛化能力维度。谢剑认为，ChatGPT 最大的亮点是语言智能统一范式的飞跃，在此之前整个学术界也一直在探索。</p><p></p><p>而以 ChatGPT 为代表的大规模语言模型的新技术范式对智能助手技术的演进的影响，让谢剑产生了一些反思：</p><p></p><p>先有通用的语言能力后再去做具体任务是通向语言智能的关键；语言背后的世界常识、逻辑应是相同的；不少单独的十分垂直的 NLP 研究子方向受到巨大冲击。</p><p></p><p>关于“ChatGPT 能否代替语音助手”这个问题，谢剑的答案是“不能直接完全替换，但是基于 LLM 的新技术范式升级能够带来革命性的体验”。具体而言，ChatGPT 本身的满足方式还是文本信息，无法直接连接数字世界的服务和 API，比如订闹钟、播放音乐等，而这些都是已有助手需要解决的问题，同时还存在事实性的问答错误以及时效性信息的更新问题，因此无法直接替换。</p><p></p><p>然而以 ChatGPT 为代表的 LLM 拥有极强的语言推理、总结和生成能力，以 LLM 作为大脑，结合外部工具的调用（包括搜索、服务 API 等）既能够满足现在用户对于语音助手的需求，还能够满足和激发原本满足不好的需求（内容生成、复杂长文本理解等）。</p><p></p><p>小度助手结合 LLM 新技术范式的升级会朝着 Chain of Reason and Act 方向去进化，用户的需求来了之后首先进行推理，思考需要调用和应用外部的什么服务和工具（比如 搜索、音乐播放服务、视频等），而后基于外部服务和工具的内容返回继续推理，看看是否能够满足用户的需求，在能够满足和不能满足的情况下自主的去生成更合适的内容返回给用户，这种\"推理 - 执行 - 推理\"链能够大幅的增强 LLM 的能力，进而满足用户对助手的各种需求。</p><p></p><p>当然这种技术和融合也有很多的挑战，包括成本的挑战、生成式大模型的安全挑战等等，另外在拥有 LLM 大模型的强大能力的同时还需要能够保持原本助手的个性化、自学习等特征，在这些关键问题下，小度团队也在紧锣密鼓的开展研究中。</p><p></p><p></p><h2>索宏彬：OPPO 小布语音交互技术实践</h2><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/12/12b0a0642f7f9bf73a199b5ba258cad5.jpeg\" /></p><p></p><p>小布助手是一个多模态、多终端、对话式的智能助手，以“机智”“有用”“温暖”为产品理念，致力于提供多场景、智慧有度的用户体验。</p><p></p><p>人机语音交互是基于语音输入的一种交互模式，即通过说话就可以得到反馈结果。语音助手则是一款智能型的应用程序，人机之间通过语音进行对话与问答。它的终极目标是全领域通过图灵测试，通俗说就是“能听”“会说”“懂你”。</p><p></p><p>小布助手的“语音”在落地阶段最重要的工作共有两项：</p><p></p><p>模型生产能否保证高效，比如把链路里的语音技术点、VAD/KWS/ASR 等基础模型生产置于统一框架之下，并相应地进行流程化改造；算力部署，要把算法进行高效封装，使其迅速产生推理依据，随后部署到端侧和云侧。将语音处理接口进行抽象，以实现各种各样的语音服务编排。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/fe/febb4e804df6573b53dc4903669b27b7.png\" /></p><p></p><p>即便小布助手链路已经构建得相当完整，但使用过程中仍然存在着许多问题。其中，索宏彬认为低功耗信号处理的主要挑战是非平稳噪声、高回放音和空间混响。目前的解决方案是单、双麦降噪，传统信号处理方法与神经网络方法并行，当前小布助手已完成立体声 AEC 算法仿真初版，在最大音量下，MIC1 回声抑制收益可超过 10dB。未来小布助手研发团队将聚焦多场景的 AEC 算法适配，布局远场交互的 Mic 阵列技术，为 OPPO 更多产品形态做好准备。</p><p></p><p>面对当前行业里“语音唤醒”功能实现中存在的“低功耗”、“高噪声场景下如何保持高水位的唤醒率同时抑制误唤醒率”技术难题，小布完成了唤醒底层算法的开发，从 0 到 1 构建了芯、端、云三级 (DSP/AP/Cloud) 唤醒方案。</p><p></p><p>关于声纹应用，为了应对人噪干扰、多人交谈、跨信道、短时交互的场景挑战，OPPO 小布研发团队基于 SpeechBrain 框架，选型了 Vector 算法框架及综合性解决方案算法框架 ECAPA-TDNN，并且基于距离度量的无监督聚类技术，进行数据自动化清洗。</p><p></p><p>在目标语音增强方面，小布助手团队尝试了基于声纹模板更新的主讲人话音检测算法（TSVAD），尝试通过主讲人语音注册环节，对模板进行更新，提升主讲人语音分离模型在实际场景使用时的鲁棒性能，提升后端语音识别准确率；</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/09/09962a9b01ac54b32df6f52dc8449992.png\" /></p><p></p><p>在自定义 TTS 方面，传统的声音自定义技术方案，录入时间长，效率低。同时，小布助手的用户群体背景及使用场景复杂，因此在复杂的环境和海量数据情况下，如何挑选满足条件的音频作为训练数据成为了一个巨大的挑战。于是小布助手研发团队自研了“纯语音 VAD”与“语音语义深度结合 VAD”的解决方案，同时应用了“预训练 + 在线自适应”的技术方案。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b5/b5a1d76cea5031ac08bd73b5fb70acc4.png\" /></p><p></p><p>在歌声合成方面，面对“低资源歌声合成”、“跨风格歌声合成”、“跨语言歌声合成”、“个性化歌声合成”的需求，小布助手研发团队提出了两个技术优化方案：</p><p></p><p>方案一：声码器从 HiFiGAN 升级至 SiFiGAN，通过引入 Source-Filter 模型，模拟发音过程，实现基频（F0）可控，MOS 得分有显著提升；高保真歌声合成，从 24K 升级至 48K，可以保留 12K 以上的高频细节信息；引入 PN 技术，将 Diffusion 模型中的差分方程分解为“Gradient”和“Transfer”两部分，在“Gradient”部分选择“Linear Multi-Step”方法加速计算，并实现了实时推理。方案二：小样本歌声合成使用 Conditional LayerNorm 技术，Finetune 时只更新与说话人音色相关的参数即可，训练数据从 3 小时降低至 40 分钟以内；同时改进了时长模型 Differentiable Durator，一定程度解决训练和推理过程不匹配的问题，提高自然度。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1f/1f3009ffc82eecacd02ef04d9c420e06.png\" /></p><p></p><p></p><h2>智能对话技术的“下半场”在哪？</h2><p></p><p></p><p>在本次 OGeek 小布沙龙的最后，杨振宇与黄民烈、谢剑、索宏彬一起围绕“智能对话技术的‘下半场’在哪？”这一主题展开了圆桌论坛。几位博士均表示，爆火的 ChatGPT 给智能对话领域带来了深远的意义和影响。黄民烈认为，ChatGPT 最大的意义是让所有公众意识到了 AI 的能力以及 AI 能够突破传统认知上的局限”；谢剑和索宏彬都提到了“人机共生”的理念，他们表示 ChatGPT 的出现将启发人们思考，在未来的工作场景中如何实现人机共生。</p><p></p><p>当提到智能对话等人工交互领域最有前景的方向时，来自学术界和工业界的博士们分别给出了不同的答案，黄民烈认为未来将是千人千面的；谢剑在个性化助手的方向基础上，抛出了“增强语言模型”的观点，让 LLM 结合外部的各种信息和工具来大幅提升 LLM 的能力；索宏彬则认为，从交互模态上看，input 会变得更加丰富。四位博士完美地勾勒出了智能对话技术的美好未来。通过他们的分享，我们可以预见，智能对话与人机交互在未来一定会给我们带来更多的惊喜。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e2/e2e126754ae96ab9fb825b5b7cecb7a9.jpeg\" /></p><p></p><p>就像出品人杨振宇说的那样，“即使有像 ChatGPT 这样的新技术出现，挑战也仍然存在，包括内容安全与 AI 伦理、长时记忆与个性化、共情能力与拟人化、反馈驱动与自学习。但机遇与挑战并存，随着技术的快速迭代，智能对话领域正在迎来最好的时代。”</p><p></p><p>值得一提的是，在本次 OGeek 小布沙龙中，杨振宇还宣布了“2023 年中国高校计算机大赛智能交互创新赛”启动事宜，呼吁全球高校在校生参与到本届大赛中。据悉，该大赛是由教育部四大教指委创办，由浙江大学与 OPPO 公司联合承办，旨在提升学生在新一代人机交互方向的技术、场景创新能力，积极探索“科技为人”的智能交互技术，给未来人类生活提供全新的产品及服务体验。希望通过竞赛的形式培育产学研融合的 AI 人才生态体系，共同促进人机物三元融合产业的发展和革新，全面推进 AI 技术的发展。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8f/8fa9b6a46b4deca44b396f06c5508852.png\" /></p><p></p><p></p><p></p><h2>附：圆桌论坛环节精彩整理</h2><p></p><p></p><h4>问题 1（杨振宇）：关于智能对话技术的研究与探索，目前学术界和工业界的侧重点分别是什么？</h4><p></p><p></p><p>黄民烈：学术界现在的趋势是以神经网络模型为主，工业界的趋势则是朝 OpenAI 的方向持续狂奔。从学术界角度来讲，由于资源受限，无法支撑太多大规模的模型和试验。整个学术界的研究方式正在与工业界的方式趋同和对齐，很多有影响力的论文都是由名校和大厂共同产出的。</p><p></p><p>学术界当下需要考虑如何学习外界工具方法来解决自身研究的问题。工业界数据是最好的方法，但学术界也需要用有原则性的方法突破它。比如乌托邦个性化对话平台的很多行为要靠数据解决，里面也有很关键的算法，这时既要考虑算法在原理层面是否合适，同时也要注意规避算法短时间内难以克服的缺陷。</p><p></p><p>谢剑：不单是智能对话，我们可以思考任何计算机领域包括科学领域，学术界和工业界的侧重点是什么。个人看来，学术界侧重突破新的可能。比如不考虑任何成本，智能最终极限将是什么样的。工业界则侧重于解决问题，他们更看重“捅破天花板”的技术最终能应用于哪些场景以解决用户的需求。近年，工业界产品的用户体量很大，也需要再往前走一走。刚刚黄老师提到，现在许多大厂和高校之间都有合作。那么工业界也将与学术届合作，一起捅破“天花板”。</p><p></p><p>索宏彬：目前，OPPO 小布也在和学校进行合作，该项目的出发点主要围绕两个方向，一是跨领域、多模态领域，涉及语音、图像以及语义结合，可以看出学术界在这些领域是比较关注的。第二个是问题驱动，这其中包括很多技术挑战点，高校工作也比较关注。回到本质上，目前智能助手业务应用上，跟高校的合作还是主要围绕用户体验、围绕问题驱动。</p><p></p><p></p><h4>问题 2（杨振宇）：当前 B 端企业和 C 端用户对于“智能对话”产品的核心需求分别有哪些？</h4><p></p><p></p><p>谢剑：2B 最后也是 2C，最终都是要满足用户的需求，当然它们也会各有侧重。2B 的客户往往是开发者，他们看重是否具有泛化能力，能否降低开发者成本。2C 的大部分用户不是开发者，他们希望交互一次就能满足需求。所以，从智能对话上来讲，这可能是比较明显看到的区别。也许，新的时代 2B 和 2C 会模糊掉。如果开发者用很简单的自然语言就能开发，就意味着人人都能成为开发者，中文也能变成世界上最强的编程语言之一。所以，2B 和 2C 的模糊，一定程度上也能带动整个社会生态的蓬勃发展。</p><p></p><p>索宏彬：小布的产品定位正在发生变化，尤其在备受热议的 ChatGPT 出来之后，小布的目标是朝着“有用”的方向走。原来的小布侧重于“有趣”，现在则在向“有用”的方向走，这是很典型的一个变化。</p><p></p><p>黄民烈：我理解人类有两类基本需求，一类是信息需求，一类是情感需求。信息需求本质上是做事情，怎么把它完成的更好。情感需求本质是要消磨时光，有情感的寄托，有情绪上、心理上的支持和疏导。所以，我们希望今天的助手能和人产生更强的连接，有情感的、社会的、信任的关系，不仅要完成信息类的任务，还要完成情感类的任务。从人类两大需求角度来看，无论是信息的还是情感的，最终都将融到一起，尤其现在技术发展越来越快，势必会产生很多新的应用场景。随着技术的成熟和变革，一定会有新的拐点和机会到来，这也是我们现在想试着做 AGI 的重要驱动点。</p><p></p><p>杨振宇：无论是 2B 还是 2C，都要考虑到底最终为用户希望发挥的价值是什么，以及在此之上给用户提供的体验是怎么样的。2C 与 2B 的核心需求侧重点目前虽然稍微有点不同，但本身都还在演进、融合的过程中。</p><p></p><p></p><h4>问题 3（杨振宇）：目前智能对话领域最大的“技术挑战”是什么？如何应对这个挑战？</h4><p></p><p></p><p>索宏彬：大家在演讲过程中提了很多挑战，如果选一个最大的，那就是“自然”，不是 AGI 的，而是更往上走，真的达到拟人化或者跟人产生情感连接。实现无负担的交互。</p><p></p><p>谢剑：挑战很多，如果说最大的我个人觉得是如何做到 All in one，我怎么说都行，怎么说它都能搞定，背后一定程度上隐隐朝向 AGI 的挑战。其他的新场景泛化，信息需求和情感需求都能满足，本质都是需要 All in one。现在发现预训练的大模型能够把它整合，但依然还有很多问题，目标是希望能够 All in one 用一个大脑，这是我理解最大的挑战。</p><p></p><p>黄民烈：最大的挑战是如何实现 Human-like conversation。从现在看，我们已经接近类人的对话能力，但有些应用场景仍存在差距，比如多模态的信息、上下文理解等，尤其是如何连接到外部世界和知识，以及外部背景信息。总体来讲还是挺难的，AGI 有很长的路要走。</p><p></p><p>杨振宇：针对这个问题也分享一下我的想法，非常赞同今天各位专家提到的未来大模型用的越来越广泛的时候，怎么解决安全性的问题，怎么解决 AI 伦理的问题，特别是直接面向 to C 用户生成内容的时候。当讨论未来最大挑战的时候，多样性还蛮强的，在场各位专家完全不用担心未来没高价值工作可以做了，挑战还有很多。</p><p></p><p></p><h4>问题 4（杨振宇）：未来 XR 等新硬件设备的发展，将对智能对话领域产生怎样的影响？</h4><p></p><p></p><p>黄民烈：现在技术发展很快，很多东西不太能够预测。我想未来电子宠物或者电子陪伴类的产品也许会卖的很好，因为它们能满足用户的情感需求。</p><p></p><p>杨振宇：大家在猜想 XR 设备会不会有下一个爆品，如果它发展起来，会不会对智能对话的领域有很大的影响。</p><p></p><p>黄民烈：前提是一定要脱离对设备本身的强依赖。如果设备本身的使用门槛或者使用场景不够自然，门槛很高，也许未来在手机装一个超级 APP 类似于 ChatGPT 的时候，可能就会很好。</p><p></p><p>索宏彬：XR 拓宽更多的交互模态，是增强人机交互的一种手段。</p><p></p><p>谢剑：人们所需要的最理想的助手，终极形态一定是多模态的助手形态。XR 有虚拟增强的设备，设备本身在拓宽 input 和 output 的模块。音箱是一个节点，从没屏幕变到有屏幕了，从只能听、能说，到后面有摄像头、能看、会说，再往后能不能有更虚拟的现实增强。回到智能助手，如果 XR 设备发展成熟了，多模态的助手就有了很好的承载设备，语言的理解就要还原到物理真实环境里，交互的各个方面都会有新的挑战。我相信新的技术挑战会带来新的技术机遇。</p><p></p><p></p><h4>问题 5（杨振宇）：随着技术发展，大家觉得未来理想的人机交互形态会是什么样的？在交互形态里，智能对话会扮演什么样的角色？</h4><p></p><p></p><p>索宏彬：我比较认同当前类似 XR 的模式，即往多模态方向走，未来交互形态一定是自然表达，类比“人人”交互。</p><p></p><p>黄民烈：理想的一定是“情景式”的，有很多的交互场景。比如在车里，假设有一个人可以很好的与之交流，并且车内的场景交互一定是多模态的，有很多摄像头监测到肢体的状态等。其次是有很高的智能水平，可以自主也可以被动，智能到感知用户的全面状态，根据状态做出最有利于用户的决策。一定要具备综合决策能力，在特定场景下可以主动，大部分情况被动。</p><p></p><p>谢剑：关于理想态，我认为第一点是“个性化”。每个人在不同场景下都具有一个满足该场景需求的助手，或者每个人有一个“个性化助手”，它能在不同场景下扮演不同的能力和满足需求的形态。第二，未来的助手应满足市场供给。市场上有很多律师、作家、卖手等等，相信未来各个领域都会有助手。原本找律师的咨询费是比较贵的，而一些基本问题就可以咨询价格更实惠的智能助手。因此理想的形态，一是能满足个性化情景需求，二是市场上应该会有公共的产生知识供给的助手。</p><p></p><p></p><h4>问题 6（杨振宇）：现在 ChatGPT 的热度很高，它对智能对话将会产生哪些深远的影响？</h4><p></p><p></p><p>黄民烈：我认为 ChatGPT 最大的意义是让所有公众意识到了 AI 的能力以及 AI 能够突破传统认知上的局限。每个行业、每个人都开始思考应该如何和 AI 相处，这是它最大的意义。ChatGPT 给我们带来的仍然是想象的空间，在当前的时代和节点下，大模型能够带给我们什么想象空间，过去不敢想的事情，是不是今天能够去想、能够去做，这个意义是比较重大的。为什么说是 AI 里程碑，因为它比过去所有事情带来的冲击都要更大。</p><p></p><p>谢剑：影响还是很大的，我们可以分类来看。针对普通用户，他们要思考在未来的工作场景中如何实现人机共生，只有拥抱人机共生才能做 AI 之上的人。很多人会比较悲观，但其实人不可能被工具杀死，人加上工具自然会超过工具。对于 NLP 和从业工程师来说影响也是巨大的，不管在工业界还是在学术界都是如此。影响巨大的原因是，原本从 AI 技术来看，大家认知 NLP 是皇冠上的明珠，突然间发现 All in one 做任务并不差，甚至效果更好，这对从业工程师的挑战还蛮大的。学术界有很多做某个单点方向的，此时就要寻找新的方式参与进去。</p><p></p><p>索宏彬：谢老师提到了 AI 共生的理念，我非常认同。不知道大家有没有用到 Bing 和 ChatGPT 的结合版，Bing 的效率非常高。Bert、ChatGPT 等大模型的演进路线，给很多 AI 从业者提供了新的方向，带来一定冲击的同时也增强了大家的信心。大家会沿着这条路做更多的探索，有挑战、有危机，同时也有机遇、有机会。</p><p></p><p></p><h4>问题 7（杨振宇）：在未来 2～3 年，您觉得智能对话等人工交互领域最有前景的方向是什么？</h4><p></p><p></p><p>黄民烈：我认为最有前景的方向还是“个性化”，未来肯定是千人千面的。无论是教育场景，还是金融服务场景，每个用户对不同类型机器了解的方式是不一样的，从这个层面来看个性化是最大的商业价值点。</p><p></p><p>谢剑：我补充一个点，\"增强语言模型\"，以大语言模型为大脑，利用其强大的常识、推理等语言能力，结合和借助外部的信息、知识以及工具，来增强大语言模型，实现能够推理、执行动作再推理等反复的思考 - 动作链，通过这种方式能够更好的实现广泛场景的落地。</p><p></p><p>索宏彬：个人认为从交互模态上，input 会变得更加丰富。其次是表达侧的表现，生成式人工智能是当下特别炙手可热的技术点，我们也在做一些探索和尝试。</p><p></p><p>杨振宇：我个人的期待是，未来的助手是可进化的，是越来越聪明的。通过进化实现个性化和知识增强，对外界知识有更强的理解。如果能实现可进化，一定会有更好的前景。</p>",
    "publish_time": "2023-03-21 09:34:43",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "技术领导力之路 - 安全感",
    "url": "https://www.infoq.cn/article/ffbd2e523ef4cf77abbecaee1",
    "summary": "<p>作者：许晓斌  阿里技术风险与效能团队</p><p></p><p></p><blockquote>管理者的工作职责之一就是创造一个人让员工都充满心理安全感的环境，让他们能够专注于自身的工作，敢于发表不同的观点，敢于做判断和承担风险。</blockquote><p></p><p></p><p>软件研发是一项高度复杂的创造性工作，研发工程师需要和产品经理一起讨论理解复杂的业务模型流程，需要阅读并理解系统多年积累下的数以十万百万行计的代码，需要把新的需求通过一行行的代码实现。软件研发也越来越成为一项需要关注风险的工作，无论是代码的bug，还是对于系统运维的疏漏，都会对商业运营产生重大的影响，甚至影响到人们日常生活。</p><p></p><p>在新冠疫情期间，每个人的出行都依赖健康码系统和核酸检测系统，这些系统一旦出现故障就会大面积影响民众的出行，而所有这一切背后都依赖工程师认真严谨的工作。</p><p></p><p>创造性工作的前提是员工具备充分的心理安全感，如果工程师每天都在担心自己有被裁员的风险，那么他必然是处于一个极度焦虑的状态中，他会担心自己某个微小的行为成为主管眼中的最后一根稻草，难以专注地投入到手头的工作中去。如果缺乏安全感，工程师也必将不敢做一些有失败风险，做一些他认为“可能让主管失望”的事情，甚至不敢做一些他认为可能和主管想法不一致的判断。</p><p></p><p>我经常会观察到身边一些团队的成员，在处理工作的时候几乎养成了事事向主管请示汇报的习惯，在和其中一位员工私下沟通的时候，他和我说这是自己曾经因为做了一些决策和主管的想法不一致，常被主管单独约谈，数次之后他不仅担心自己的做法不符合主管的期望，更是对自己的判断力失去了信心。</p><p></p><p>前文说过，许多公司的软件系统的代码行数都是以百万计的，由于软件系统和软件开发行为的复杂性，从理论上讲管理者就无法掌握所有的细节，更何况在很多组织中管理者的职责已经太多了，除了做人员管理、技术战略，还得理解业务，做大量的协同工作。这就意味着系统中的风险征兆必然依赖团队工程师去发现并解决。</p><p></p><p>但是一旦员工缺乏安全感，他可能就不愿意去提这些问题，内心认为管理者不想听到这些“负面”的信息，或者认为管理者会把风险的出现理解为员工能力的不足。</p><p></p><p></p><blockquote>例如，当系统出现故障之后，许多团队会组织复盘，其中有些团队会在复盘会上强调故障的责任人并对责任人进行处罚，而另一些团队则推行blameless的文化，并不涉及处罚，而是专注在分析问题的根因和后续action上，虽然前者也会强调分析根因和action，但由于潜在的处罚造成强烈的不安全感，更多人的会倾向于罔顾事实而把相关的责任推走，这样的结果对于系统长期的稳定无疑收效甚微。举个例子，近期参加了一个公司中高层的技术规划会，会议的开头有十分钟汇报一下公司当下工程师的整体体验现状。我提前15 分钟到达会议室复习下汇报材料，随着会议开始时间的接近，参会者陆续到达。渐渐意识到参会者除了我的上级、公司的 CTO、以及我认识几个核心业务研发负责人之外，实际参会的人比预想的多了两倍，而他们有一个共同的特点：层级都比我高。在汇报的过程中，我明显处于比较紧张的状态，我自认有不错的演讲能力，在其他普通一些的场合我的状态可不会这样，汇报完后我内心稍微松了一口气。我意识到在这个场合我非常缺乏安全感，现场参会的人实际上是一个非常核心的决策集体，他们具有极大的影响力，包括技术战略的制定，资源的投入，关键岗位人员的任免等等；而我和他们的大多数人都不熟悉，缺乏基本的信任关系，尽管我参加了这个会议，但我内心并不认为自己是这个决策集体的一部分。因此我下意识就会担心自己说错话，担心神形态度给人留下不佳的印象，也不敢冒险提一些未经充分论证的观点，这就必然整体的表现和平时更真实自如的状态有较大的差异。</blockquote><p></p><p></p><p>对心理安全感的需求，是人类在数百万年的采集狩猎社会中进化出的心理机制。和现代社会不同，早期人类缺乏基本的安全生存环境，物质匮乏，在面对速度更快、力量更强大的野兽时，人类关键的竞争力是协作能力。如果一个人被部落集体排斥，他马上就会面临死亡的威胁，这时候内心的焦虑感、惶恐感就会给他一种非常强烈的信号，让他快速想办法被集体重新接纳。</p><p></p><p>虽然今天的社会环境发生了巨大的变化，一个人即便不被身边的小集体接纳（包括亲友集体，工作集体等），也不会直接面临生存的风险，但我们进化出来的心理机制还是停留在采集狩猎的社会环境阶段。</p><p>﻿</p><p>管理者的工作职责之一就是创造一个人让员工都充满心理安全感的环境，让他们能够专注于自身的工作，敢于发表不同的观点，敢于做判断和承担风险。具体的做法包括：</p><p></p><p>1）尽可能透明地分享信息，尤其是团队关键决策和决策背后的思考。</p><p>2）保持和员工的1-on-1对话，通过这样的对话，管理者不仅能够和员工实现深入沟通，也能够让员工在心理上感觉被团队关键人物信任。</p><p>3）积极地给予员工正面反馈激励，让员工感觉自己的工作对于团队的价值感。</p><p>﻿</p><p>以上的这些实践都是在不断给员工释放这样一个信号：“你是集体的重要一部分”，以满足每个人心理上对安全感的需求。与之相反的，一些不成熟管理者会通过制造不安全感来给员工制造巨大的压力，例如通过暗示等手段告诉员工，“如果你不在一周内完成这个需求，你的年终绩效可能会受到影响”，又或者说 “团队和你同层级的员工的工作进展是超预期的，想想你自己的处境”，等等。</p><p></p><p>这些信号会被员工理解为一种威胁，并会在短期内激发巨大的反应（其中最常见的是加班），但从长期来看负面的影响远大于正面，缺乏安全感的员工会失去创造力，不敢表达，也很容易就开始思考是否应该离开团队，寻找更安全的工作环境。</p><p></p><p></p><h2>延伸阅读</h2><p></p><p></p><p>[01] 《进化心理学》</p><p>https://book.douban.com/subject/26683297/</p><p></p><p>[02] “伟大的领导者让员工感觉安全”&nbsp;</p><p>https://www.cphrmb.ca/news/427646/Great-Leaders-Make-Employees-Feel-Safe.htm</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e7/e76827147e60f3a58820b6a3cb6643a6.png\" /></p><p></p>",
    "publish_time": "2023-03-21 10:00:19",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "领导力匠艺：像开发人员打造代码那样打造你的领导力",
    "url": "https://www.infoq.cn/article/87fXytBSTUiUDmTkHfcO",
    "summary": "<p>学习软件匠艺让我重新思考如何编写代码。作为一位经验丰富的软件团队管理者，我尝试按照相同的方式来重新评估我的管理实践：测试驱动管理和结对管理将会是什么样子呢？在本文中，我分享了将软件匠艺工具和思想转移到管理领域的见解。</p><p></p><h2>软件工匠的理想管理者</h2><p></p><p></p><p>我经常听到开发人员抱怨说，他们的主管正在让他们背离敏捷和质量实践，但是他们却没有对其必要性提出质疑。所以，我长久以来一直想知道一个理想的管理者应该是什么样子的。为此，我询问了十多位软件工匠，严格做到了这一点（参见“<a href=\"https://www.agilenautes.com/manager-craft-contexte/\">软件匠艺视角下的管理者角色演变，法文”</a>\"）。不出所料，他们告诉我，他们首先要寻找的是那些能够向他们传授业务知识的管理者（导师），然后是在组织中推广和捍卫这些实践（倡导者）。</p><p></p><p>令我感到惊讶的是，对他们中的一些人来说，这还不够，有时甚至完全没有必要：他们唯一要求的是自主权。但是，让我深有触动的是一位开发人员告诉我，她所经历的最好的管理者是同样以匠艺的方式管理软件工匠的人。他们在管理方法上有着相同的质量实践和立场。</p><p></p><h2>在管理中应用软件匠艺的实践</h2><p></p><p></p><p>我并不是说，你可以把一个领域的做法复制到另一个领域。我想说的是，如果你有相同的动机，那么有些实践就能很好地从软件匠艺移植到管理领域中。</p><p></p><p>也就说，这不仅仅是理论而已。当我尝试为团队命名时，我有一种为方法命名的相同感觉，我知道自己想出的第一个名字不会是最好的。但是，最有意思的是我尝试改变组织结构的情景，当我试图以大爆炸的方式改变一个30人的团队时，发生的情况与我们想以大爆炸的方式替换一个遗留系统一样，结果就是撤销回滚了。该组织非常抵制，以至于把我踢了出去。我现在非常反对大爆炸式的组织变革。</p><p></p><p>在软件开发中，还有一些适用于管理的通用实践。首先，可以将你的预算编制过程组织成一个CI/CD流水线。让预算定义成为很容易重复的事情，并且使其适应你的组织。CI/CD能够让我们把任务放到一个流水线中，从而避免麻烦的任务。作为经理，我发现预算编制是最繁琐的任务之一。</p><p></p><p>其次，熟练掌握你的工具。如果在你的组织中，管理者们使用MS Excel作为工具的话，那就成为一个MS Excel专家。</p><p></p><p>第三，就像反应式编程一样，让你的决策尽量做到反应式。在做决策时，要保持异步，尽可能减少“提交”阶段，也就是减少那种每个人必须出席，但是只是表达同意意见的会议。对我而言，我觉得保持这种会议也有一定的必要性，在这种会议上，我从不处理事先没有足够时间与大家彻底讨论明白的问题，这种问题可以通过一个简单的异步邮件主题来进行讨论，每个人都有机会发表自己的观点。</p><p></p><h2>结对管理</h2><p></p><p></p><p>除了上文提到的实践之外，我觉得还有两个软件匠艺的实践，它们对管理者非常有用。第一个是代码审查。就像代码在部署至生产环境之前，至少要有两个人进行阅读那样，我尝试与其他人一起审查我的管理决策，可以是同事或老板，最后我发现让自己团队的人来审查是最好的。</p><p></p><p>但是，在我的公司Arolla内部，我们将这种审查推行地更为彻底，也就是实现了结对管理。我们有两个负有相同责任的副总裁。这并不是我们将团队一分为二，而是管理着两倍大的团队，但是一起来进行管理。我们确保一个人说的每句话都会由其他人共担。在实践中，主要有两种情况：要么我的行动与我们共同定义的愿景保持一致（例如，“通过实践小组提高专业知识”），那么我就采取行动去执行；要么与不同的目标产生了冲突（例如，“短期收入”与“长期培训”），那么我就询问其他人的意见。</p><p></p><p>我发现，在开发中审查代码与在管理中分享和委托责任，归根到底是一回事儿。当我审查一段代码时，它就成为了我的。这就是我如何看待代码审查与管理3.0中的委托实践的关系。相应的，管理3.0所提出的不同委托级别可以作为一种方式来理解代码审查中的不同力度：你接受把多大权限委托给代码审查者？</p><p></p><h2>测试驱动管理</h2><p></p><p></p><p>我发现第二个真正有用的软件实践是测试驱动开发。作为管理者，我每天都在使用它，并把它翻译成“测试驱动的管理（Test-Driven Management，TDM）”。TDM是一种保证管理质量的方法，与我使用测试驱动开发保证代码质量的方法如出一辙。它有同样的三个原则：测试优先、使用较小的步骤并产生一个新的设计。</p><p></p><p>因此，TDM的第一个原则就是在行动之前阐明你的目标（测试优先）。例如，我把我的目标表述为一个假设，希望我提出的行动能够帮助验证这个假设。这可以非常简单，比如将“让我们实现一项伟大的事业”改成“让我们实现一项伟大的事业，这项事业应该能够让我们定义更小的版本发布”。</p><p></p><p>这也是我之所以要求我指导的管理者们避免使用表述性语言的原因，根据相同的原则，这是因为在规范中出现并不意味着最终会在软件中出现。例如，不要只是要求团队按时交付，而是与他们一起研究优先级，并确保他们不会因为你是主管就听从你的意见，并想取悦你。</p><p></p><p>但更实际的做法是，在按照“测试优先”的方式做事情时，你只需要起草一封本应该在任务完成之后才发送的邮件，只不过现在我们在任务开始之前就这样做。这样，你就不会迷失方向，犹如在黑暗中拥有一盏明灯，以准确知道任务何时才算是完成，也就是在电子邮件可以真正发送的时候。这就是为何你必须要写出真正要发送的邮件，而不仅仅是纸上的目标。它必须要进行“编译”，就像单元测试一样，所以很容易就能知道是否达成了自己的目标：你可以点击“发送”按钮吗？如果可以发送的话，那就立即发送它，并马上编写新的“未来邮件”，然后继续下面的任务。</p><p></p><p>TDM的第二个原则在于，与TDD类似，假定你不会一步到位地达成你的目标（“使用较小的步骤”）。当遇到复杂的问题时，不要试图在全局范围内进行沟通，要对其进行逐个击破。例如，当我们遇到歧视的问题时，我们并没有试图一次性解决这个问题，而是尝试从解决性别歧视的笑话开始，看看系统的反应如何。</p><p></p><p>TDM的最后一个原则，与TDD类似，就是允许组织的设计逐渐成型。这是最困难的事情，因为我们不可能像在某个方法的职责发生变化时，对其进行重命名那样轻易地去更改一个团队的名称。所以，我发现最有用的一点就是，在试图改变组织之前，先与组织内的人进行协作，然后，让人们选择改变他们所遵循的流程。为了说明这一点，我经常会讨论UI/UX“设计系统”是如何在一个开发面向用户的应用的组织中出现的。最初，职责被分配到不同的功能团队中，这些团队的前端开发人员独立地构建其web组件。很快，责任会由专门的人来承担。最后，在一到两年之后，会由一个特定的团队来维护它，具有特定的流水线和自己的“演示项目”。</p><p></p><h2>领导力匠艺与学习型组织</h2><p></p><p></p><p>绕了一个小弯子，我发现当我与合弄制（holacracy）组织中的人员进行交谈时，他们的“tension”（在合弄制中，tension指的是现实状况与潜在的愿景中的差异，也可以理解成一种改善的机会，请参见如下两篇文章的介绍，“<a href=\"https://www.holaspirit.com/blog/holacracy\"> Core Concepts, Benefits and Limitations</a>\"”和“<a href=\"https://blog.holacracy.org/holacracy-basics-understanding-tensions-98fc3c032acf\">Holacracy® Basics: Understanding Tensions</a>\"”——译者注）概念似乎非常类似于测试驱动管理中的单元测试。简而言之，tension是团队成员报告的一个具体事实情况，该情况使他们难以承担自己的责任。这种现实情况阻碍了目标的实现。按照我的说法，在合弄制中“tension的解决”过程就是重构组织的方式，一点点地解决我们想要解决的具体的小问题，就像我们在TDD中使用小的单元测试重构软件一样。</p><p></p><p>事实上，改变各个团队的职责，同时能够避免重命名的问题，并且每个月以标准化的方式改变流程，这些做法已经在某些类型的组织中以标准化的方式在进行了，这种组织叫做学习型组织。</p><p></p><p>我并不是说你必须要采用合弄制才能实现质量管理，但我认为在学习型组织中，这要比在更僵化的组织或建立在个人意志和权力上的组织要简单得多。为了给这种管理类型一个名称，我决定将其称为“领导力匠艺”。</p><p></p><p>借助这个术语，如果重新表述我之前所说的内容，那么将会是这样的，作为领导工匠，需要具备与软件工匠类似的才能（aptitude），比如测试驱动管理、结对、持续预算、工具专家和反应式决策。</p><p></p><p>但我们也知道，软件匠艺是围绕态度展开的。作为一个领导工匠，应该具有与软件工匠一样的态度，主要是尊重，尊重自己，尊重团队成员，也尊重未来管理他们的管理者，还要尊重团队的前任管理者和他们的遗产。这也关乎节俭，寻找韧性和可扩展性。这就需要谦虚地赋予教学、学习和指导以价值。</p><p></p><p>回到才能方面，有一种才能是软件工匠们所熟知的，但我还没有谈到过，那就是给予反馈的能力。作为一位开发人员，我们在审查代码时，以及与业务的讨论中（例如，讨论BDD中的具体例子）会不断练习该才能。</p><p></p><p>反馈是一切的核心，作为领导工匠，你也需要反馈。要做到这一点，首先，不要忘记产出（output）和结果（outcome）的差异。更多的权力可能是你的产出，但它不是组织的结果。然后，不要试图像观测IT系统那样观测你的团队。团队的反思能力和自我组织性要强得多。团队中的人可以在一定程度上监控自己。</p><p></p><p>或许，这可以形成一个领导力匠艺宣言，其中会有如下两条首要的原则，即“领导工匠更喜欢对话而不是监督”、“领导工匠更喜欢自我监督而不是外部控制”。如果你有任何想法来对其进行丰富，那么我很高兴和你对此进行讨论。</p><p></p><h2>对你的组织进行编码</h2><p></p><p></p><p>请记住，上述所有的内容均来自我作为一个开发人员和管理者的感受。为此，我尝试了一个实验，甚至决定更进一步，那就是对组织本身进行编码。目的是看一下精确编码实践是否能够通过代码映射到精确的管理实践中。因此，我决定在Java中建立一个简单的组织模型，并使用经典的代码重构方式对其进行重构，比如“内联”、“将方法移至参数”、“抽取方法”、“重命名”等。这种方式很有效：“内联方法”就像在工作现场“去实地看一看”一样；“将方法移至参数”就像把责任移交给别人一样，当责任发生变化时，对角色进行重命名的冲动马上就会出现。在<a href=\"https://github.com/edouard-gv/craft-leadership-kata\">领导力匠艺kata</a>\"中，有一小部分关于该内容的节选。</p><p></p><p>然而，当我第一次向一组参与者介绍这个理念时，其中有位参与者Laurent Bossavit告诉我，有人已经针对这个问题撰写了论文，这就是Leon J. Osterweil在1987年的论文。这篇论文是1987年发表于ICSE的<a href=\"https://link.springer.com/chapter/10.1007/978-3-642-19823-6_17\">“软件过程也是软件（Software processes are software too）”</a>\"，作者探讨了过程在提高软件产品的质量以及我们如何开发和演进它的重要性。另外，1997年ICSE发表了<a href=\"https://link.springer.com/chapter/10.1007/978-3-642-19823-6_18\">“软件过程也是软件，修订版（Software processes are software too, REVISITED）”</a>\"，其目的是澄清对第一篇论文的一些误解，并规划未来的研究方向。</p><p></p><p>所以我读了他的论文，我发现他最宝贵的建议之一就是，在涉及人的地方，应该把方法留白。Osterweil总结说，软件不仅仅是代码，它还有过程，还有人类参与的过程。但是，准确来讲，我们不应该试图对保有人类参与的地方进行编码，以避免将人变成机器人。</p><p></p><h2>经验总结</h2><p></p><p></p><p>我认为，这是一个漫长的旅程。我已经开发了20多年的软件，管理开发团队超过了15年，并在几年前开始辅导管理者。有时候，我很难将管理者所期望的管理方式与我的团队成员所希望的方式进行匹配。这并不是在两个领域进行智力方面的比较，而是如果我们在两个不同的领域做事时感受到类似的东西，请相信我们的感觉。我希望其他的管理者也能在这里找到有用的提示，或者他们觉得自己离经叛道时，能够得到一丝惺惺相惜的安慰。也许有些开发人员也愿意向他们的管理者提供建议。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/craftleadership-developers-craft-code/\">Craftleadership: Craft Your Leadership as Developers Craft Code</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/K7QazDeyGYFS8NWBK54V\">软件架构决策指北：怀疑主义的软件架构设计</a>\"</p><p><a href=\"https://www.infoq.cn/article/7Ps0qyHfQhp59g7YrEvZ\">当你的技术栈不能满足每个人需求时，下一步是什么呢？</a>\"</p><p><a href=\"https://www.infoq.cn/article/g6D7e4ki76V3dRBWkrrK\">基于契约的开发：通过明确需求优化软件开发流程</a>\"</p>",
    "publish_time": "2023-03-21 10:23:10",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]