[
  {
    "title": "架构师（2023年5月）",
    "url": "https://www.infoq.cn/article/8Clm9p89lQI4K296qim6",
    "summary": "<h2>卷首语</h2>\n<p>作者 | 褚杏娟</p>\n<p>通常意义上来讲，Serverless 可以看作是一种云计算服务模型，它允许开发者在不需要管理服务器的情况下通过事件驱动的方式运行代码。与传统应用服务开发模式不同，开发者只需编写并上传他们的应用代码到云服务商提供的平台上，云平台会自动为应用分配资源，并处理应用的部署、扩缩容。这使得开发者可以更加专注于自己的业务需求和应用逻辑，而不需要考虑服务资源的申请、创建、管理和维护等。</p>\n<p>从这个意义上讲，我们也可以认为 Serverless 是一个计算范式，它解决资源托管、调度、运维管理等一系列平台型问题，可以看作是 DevOps 的进一步延伸。</p>\n<p>从应用开发视角来看，Serverless 包括 FaaS (Function as a Service) 和 BaaS (Backend as a Service) 两部分。在 FaaS 中，开发者编写的代码会被封装成一个或多个函数，运行在云平台上。当请求到达时，云平台自动为函数分配计算资源，拉起函数并执行。执行完成后，平台根据一定的保活策略决定资源的复用或者释放。FaaS 模型不仅可以提高应用的可伸缩性和弹性，还可以大幅降低应用运维的成本。BaaS 则致力于更广泛意义下的 Serverless 化，包括对象存储、缓存、数据库、消息等全栈后端服务的按需弹性、按用付费等。</p>\n<p>谈到 Serverless 发展历程，从 2008 年 Google 推出 App Engine 算起，至今已有 15 年的时间，期间经历了多次迭代，主要经历了以下几个阶段。</p>\n<p>Innovators（2008 年~2014 年）：Google App Engine 的发布，使得开发者无须再关心资源分配，也无需关心底层操作系统、硬件和网络等基础设施，对传统应用开发方式具有变革性意义，但 App Engine 并没有使 Serverless 理念流行起来，Serverless 概念本身是在 2012 年由 Iron.io 公司率先提。2014 年 AWS 发布 Lambda 之后，真正使 Serverless 流行起来。</p>\n<p>Early Adoptors（2016 年~ 2018 年）：这期间，主流云计算平台陆续推出了 Serverless 系列产品，如 Microsoft Azure 发布 Azure Functions、Google Cloud Platform 发布 Cloud Functions 和 Firebase、华为云发布 FunctionGraph 等。2018 年 Gartner 将 Serverless 列为“十大未来将影响基础设施和运维的技术趋势之一”。</p>\n<p>Early Majority（2019 年~ 今）：2019 年 UC Berkeley 发表论文《Cloud Programming Simplified：A Berkeley View on Serverless Computing》，预言 Serverless 将成为云计算下一代的编程范式，提出 Serverless = FaaS + BaaS 的定义框架, 并提出存储等后端的 BaaS 化、异构硬件支持、资源细粒度隔离等 Serverless 的核心问题。同期，华为云提出通用 Serverless（General-purpose Serverless）的理念，支持有状态应用、程序自动并行、大规模异构资源管理等，帮助企业解决更广泛的计算、运行与交付问题。</p>\n<h2>目录</h2>\n<p><strong>热点 | Hot</strong><br />\n谷歌正式发布 WebGPU！90 多位贡献者研发 6 年，浏览器终于可以利用底层硬件了<br />\nChatGPT 已过时？Auto-GPT 迅速走红，无需人类插手自主解决复杂任务，GitHub 标星 5 万<br />\n马斯克开源 Twitter 算法！推荐机制正式公开，GitHub Star 数已破万<br />\nCV 又卷起来了！Meta AI 开源万物可分割 AI 模型，11 亿 + 掩码数据集可提取</p>\n<p><strong>访谈文章 | Interview</strong><br />\n用 C++ 写出比 MySQL 快 800 倍的数据库，ClickHouse 创始人：融合数据库该“卷”的还是性能和速度<br />\n人口不足千万、芯片厂近 200 家，以色列技术人如何在芯片领域“挖金山”？| 独家对话 Pliops 创始团队<br />\n在全球掀起史诗级的狂欢，ChatGPT 真正颠覆了什么 ？| 深度</p>\n<p><strong>案例研究 | Case Study</strong><br />\n从石器时代到成为“神”，一文讲透 eBPF 技术发展演进史<br />\n浅析三款大规模分布式文件系统架构设计<br />\n赋能直播行业精细化运营，斗鱼基于 Apache Doris 的应用实践<br />\n基于 Vue 和 Canvas，轻舟低代码 Web 端可视化编辑器设计解析 | 低代码技术内幕<br />\n云原生时代，如何建设稳定性可观测体系？</p>\n<p><strong>推荐文章 | Article</strong><br />\n弃用 Electron，微软重新设计 Microsoft Teams：速度提升 2 倍，内存减少 50%<br />\n裁员潮过去、削减中层管理潮又来了：升管理保饭碗，不灵了<br />\n云原生时代，Java 会走向末路吗？<br />\n农牧数字化：IT 要冲到前面去引领，“天花板”才能被打开</p>\n<p><strong>特别专题｜Topic</strong><br />\n备受云厂商们推崇的 Serverless，现在究竟发展到什么水平了？<br />\n从公有云方案转向谷歌开源 Knative，网易云音乐的 Severless 演进实践<br />\n探索 17 年，亚马逊云科技重新定义 Serverless<br />\n新一代 Serverless 事件中间件 EventMesh 正式毕业为 Apache 顶级项目</p>\n<p><strong>特别专栏 | Video</strong><br />\n本月，这些视频值得一看！</p>",
    "publish_time": "2023-05-08 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Swift 5.8新特性预览：支持函数向后部署",
    "url": "https://www.infoq.cn/article/QAEbWTtfJg0IUUKs7tcg",
    "summary": "<p><a href=\"https://www.swift.org/blog/swift-5.8-released/\">Swift的最新版本</a>\"支持即将到来的新特性，让开发人员可以开始使用将在Swift 6中变成稳定版本的特性。此外，它还提供了一种方法，让开发人员可以在早期操作系统中使用新功能。</p><p>&nbsp;</p><p>Swift 5.8之所以支持即将到来的语言特性，主要是为了让开发人员可以开始为程序迁移做准备。Swift团队成员Alexander Sandberg说，考虑到Swift 6的许多特性造成了某种程度的源代码不兼容，这一点尤其重要。此外，支持新特性还可以帮助苹果收集早期用户的反馈。</p><p>&nbsp;</p><p>新的编译器标志-enable- coming-feature X可以控制是否启用对即将到来的特性的支持，其中X是要启用的特性。目前，在Swift 5.8中，有4个即将到来的特性可以选择性地启用：<a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0274-magic-file.md\">简略魔法文件名</a>\"、尾随闭包前向扫描匹配、<a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0335-existential-any.md\">存在类型any</a>\"，以及<a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0354-regex-literals.md\">正则表达式字面量</a>\"。</p><p>&nbsp;</p><p>在使用即将到来的特性之前，可以使用新增的#if 检查确保它确实可用：#if hasFeature(ImplicitOpenExistentials)。需要的时候，可以将它与compiler(&gt;=x.y) 检查一起使用。</p><p>&nbsp;</p><p>Swift 5.8还引入了对@backDeployed属性的支持，目的是为了方便开发人员将新功能向后移植到框架的旧版本。例如，可以通过扩展添加新功能，并使用众所周知的@available和新增的@backDeployed属性进行注解：</p><p><code lang=\"swift\">extension FrameworkAPI {\n  @available(FrameworkAPIVersion 1.0, *)\n  @backDeployed(before: FrameworkAPIVersion 2.0)\n  public func newCapability(...) -&gt; ResultType { ... }\n}</code></p><p>&nbsp;</p><p>在所提供的示例中，newCapability函数仅在FrameworkAPI的2.0版本中有原生支持，但是使用@backDeployed属性，开发人员可以提供该功能的实现，并注入到框架的先前版本中。</p><p>&nbsp;</p><p>这个新特性旨在方便开发人员创建弹性库，并且只能应用于函数、方法、下标和计算属性。例如，这种机制不支持新类型。此外，向后部署的函数体必须遵守与@inlinable函数相同的限制，例如，它们只能引用客户端可访问的声明，如public和@usableFromInline声明。</p><p>&nbsp;</p><p>Swift 5.8带来的另一项重大变化修改结果构建器实现，改进了它的编译时性能、代码补全结果和诊断。具体来说，新实现利用了Swift 5.7的<a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0326-extending-multi-statement-closure-inference.md\">扩展多语句闭包推断</a>\"，优化了编译器类型推断和错误消息。特别是，它<a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0373-vars-without-limits-in-result-builders.md\">移除</a>\"了在结果构建器中声明局部变量的几个限制，例如需要有初始化器，而且没有提供对计算变量、观察器和属性封装器的支持。</p><p>&nbsp;</p><p>Swift 5.8还带来了很多变化，要了解完整细节，请查阅官方公告。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/04/swift-5-8-released/\">https://www.infoq.com/news/2023/04/swift-5-8-released/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/AHUamwkJ3fqljoliPKHa\">苹果现已支持&nbsp;Swift&nbsp;包索引</a>\"</p><p><a href=\"https://xie.infoq.cn/article/e6e0811181133d4895e2041ac\">Rust、Go&nbsp;和&nbsp;Swift&nbsp;在性能和并发性方面有何差异？</a>\"</p><p><a href=\"https://www.infoq.cn/article/fm6b2sg8QHUrDS6GhK48\">Swift&nbsp;2023：所有权、宏和 C++ 互操作</a>\"</p>",
    "publish_time": "2023-05-08 09:45:39",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "字节、腾讯、华为、菜鸟等技术专家，共研稳定性保障｜QCon",
    "url": "https://www.infoq.cn/article/3W5iTwMco4b8xV3ezzBj",
    "summary": "<p>业界对于宏观层面的架构稳定性方面有诸多探讨，但许多微观层面的内容，比如超时/pct99 延迟抖动/上下游处理耗时 Gap 大/服务起不来/coredump/无日志反复重启/内存占用大/CPU 高等等问题，也是许多人关注的方向。</p><p>&nbsp;</p><p>在5月25-26日，即将落地的QCon全球软件开发大会（广州站）上，我们就这些技术落地问题，策划了<a href=\"https://qcon.infoq.cn/2023/guangzhou/track/1509\">【稳定性即生命线】</a>\"专题，邀请菜鸟网络 资深技术专家 菜鸟架构委员会负责人钟勇（毕啸）担任专题出品人，为专题内容质量进行霸龙把控，于此同时，我们还邀请了四位嘉宾来进行内容分享，具体介绍如下：</p><p>&nbsp;</p><p>首先，我们邀请了字节跳动 STE 团队⾼级系统⼯程师 <a href=\"https://qcon.infoq.cn/2023/guangzhou/presentation/5275\">林润⻰，</a>\"他将以《字节跳动云原生场景下的智能可观测混沌工程》为主题展开分享，演讲将介绍字节混沌工程在云原生场景下的落地实践，其中重点介绍多集群，多场景，可观测的混沌平台的系统设计经验。同时也会分享在不同业务场景下的应用案例和分析。通过他的分享，你将了解到混沌工程在云原生架构下的工程实践经验、了解混沌工程在不同业务场景下的落地实践经验、以及解混沌工程如何区别于故障演练，在稳定性治理等方面得到收益；</p><p>&nbsp;</p><p>其次，我们邀请了腾讯云高级开发工程师<a href=\"https://qcon.infoq.cn/2023/guangzhou/presentation/5278\">许文强</a>\"，他将以《降本增效下Kafka的稳定性实践》为主题分享，通过他的分享，你可以了解如何通过弹性的计算存储架构来提高存储层的稳定性、混沌工程云上大规模 Kafka 集群的落地实践，以及云上消息队列产品在降本、稳定性、架构升级之间权衡的一些思考；</p><p>&nbsp;</p><p>另外，峰会还邀请了华为云高级工程师<a href=\"https://qcon.infoq.cn/2023/guangzhou/presentation/5243\">肖福剑</a>\"，肖老师 2016 年加入华为，长期从事华为云计费系统的设计和开发工作，包括支付服务、账单服务等核心服务。目前作为华为云运营稽核系统、全球鹰数据流平台的团队 Leader。他将以《华为云交易系统业务可观测实践》为主题展开分享，通过他的分享，你可以了解到了解如何实现业务全流程可观测、以及了解华为云交易系统监控体系；</p><p>&nbsp;</p><p>最后，我们邀请了菜鸟网络高级技术专家<a href=\"https://qcon.infoq.cn/2023/guangzhou/presentation/5243\">郭凤钊（已晨）</a>\"，他专注于高可用及架构领域 12 年。在菜鸟的多次大促活动中担任技术负责人，保障系统丝般顺滑；曾担任菜鸟 SRE 技术平台负责人，体系化论述了产业互联网的单笔高可用体系，并带领团队重塑了菜鸟 SRE 技术产品；目前负责菜鸟「高可信架构」的设计与实践，致力于让用户更加信赖菜鸟的服务。他的分享主题是《产业互联网时代的单笔高可用和鲁棒性》。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/db/db96b86600ff7ddd3b6e64e500458d86.png\" /></p><p></p><p>在QCon全球软件开发大会上共策划十二个专题，近五十余场分享。其中包括稳定性即生命线、编程语言实战、DevOps vs 平台工程、AGI 与 AIGC 落地、下一代软件架构、数据驱动业务、出海的思考、云成本优化、现代数据架构、AIGC浪潮下的效能智能化、新型数据库、大前端技术探索。欢迎一起与你线下交流，如想了解更多内容，可扫描下方海报二维码。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/cf/29/cfcd3fcbdac33fa9d712124034c31a29.jpg\" /></p><p></p><p>&nbsp;</p>",
    "publish_time": "2023-05-08 10:40:40",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "从单体架构到微服务化拆分，方正证券如何实现前中后台一体化？",
    "url": "https://www.infoq.cn/article/I14iisg8hDYlCUCcMg5Y",
    "summary": "<p>近几年，券商数字化投入幅度显著提升，服务场景日渐多元化，能够在不同生活场景满足客户的证券投资及财富管理等各种需求。与此同时，还能通过有机组合研究、定价、交易等能力建设，实现客户服务体系的精准化、精细化。</p><p></p><p>在这一过程中，券商需要解决的核心问题之一是对复杂的系统架构进行整合，通过平台化构建和运营，提升技术架构灵活性、扩展性与开放性，从而实现内外资源的打通和服务能力的延展。</p><p></p><p>在最新一期的《<a href=\"https://www.infoq.cn/article/wMayrlSP8IHzWBTdaROI\">超级连麦.数智大脑</a>\"》直播中，方正证券信息技术部交易研发负责人石锐分享了方正证券在证券服务场景创新方面的探索，以及背后的技术架构升级的路径和经验。</p><p></p><p>以下是对话全文，经 InfoQ 编辑整理（点击链接观看完整<a href=\"https://www.infoq.cn/video/rOARbiN1flkQTADUpBdc\">直播回放</a>\"）：</p><p></p><p>InfoQ：近年来，券商的服务场景日渐多元化，方正证券通过持续的信息技术投入也在与业务部门不断探索新应用场景。目前取得了哪些阶段性的进展和里程碑式的成果？</p><p></p><p>石锐：如今，券商在数字化转型方面已逐步深入进入深水区。方正证券的转型目标是实现平台化、服务体系化、敏捷化和生态化，以全面赋能业务的发展，并从传统的以功能性服务为中心的模式转变为以客户为中心的服务模式。</p><p></p><p>在交易、销售、账户管理、投资、研究等各个方面，我们都构建了一些一体化的服务体系，比如我们已经构建了成熟的账户运营服务体系，并正在建设机构服务体系，这些都是我们取得的一些阶段性的进展。</p><p></p><p>InfoQ：在落地这些新应用场景的过程中，哪些数字技术是我们布局的重点？这些技术具体在其中如何发挥作用？&nbsp;</p><p></p><p>石锐：在数字化转型中，我们自然而然地应用了一些新技术，比如成熟的<a href=\"https://www.infoq.cn/article/ebXXoCeJgkr3P2JQmeFz\">人工智能</a>\"、大数据和云计算等技术，这些技术都是我们关注的重点。</p><p></p><p>例如，在账户运营体系中，我们整合了自然语言处理（NLP）、图像识别、活体检测、数字证书和<a href=\"https://www.infoq.cn/article/TVocv80lDp1Y9BOkDY8H\">智能双录</a>\"等能力，以提升客户账户业务办理的体验。这些能力的整合，极大地提升了我们的客户服务质量。</p><p></p><p>同时，我们还将客户置于服务的中心，构建了一体化的服务体系，涵盖交易、销售投、研等各个方面，致力于更加平台化、服务体系化、敏捷化和生态化的数字化转型。这些都是我们在数字化转型过程中取得的阶段性进展。</p><p></p><p>举个例子，在双录环节，客户办理业务时需要了解风险。过去，柜台人员需要点击播放投教视频，然后向客户提问并揭示风险，录制完成后再点击完成。这个交互过程非常繁琐。</p><p></p><p>现在采用智能双录技术，全程智能播报和提问。双录过程中有人脸识别、活体识别和智能检测客户回答是否准确，不需要人工点击交互实现整个双录环节。在管理方面，我们无需录制视频，只需将投教话术和文本粘贴到系统中，系统会自动播报和录制。与以往录制几个小时的视频相比，现在只需要5~10分钟即可完成整个投教视频的制作。</p><p></p><p>InfoQ：除了利用智能技术帮助我们实现提效，在大数据层面的应用又是什么样的？如何利用大数据实现精细化的运营？</p><p></p><p>石锐：举例来说：以前在我们的APP中，当客户想要查看他们的理财收益时，我们的展示方式并不清晰，也不能够显示长期收益趋势。应用了大数据技术后，通过每日分析和整理持仓收益数据，能够在前端页面中以月份和年份为单位展示客户的收益趋势。这种方式让客户清楚地了解他们的投资去向和收益情况，相较于以前只能看到当前收益的模糊情况而言，大大提升了客户体验。</p><p></p><p>InfoQ：券商进行数字化运营落地的过程当中，有必要对每一条业务线都进行用户价值的拆解吗？</p><p></p><p>石锐：在数字化转型中，我们需要站在客户的角度思考如何通过系统和<a href=\"https://www.infoq.cn/article/qf73xMBJHB3J0tBzUccL\">金融科技</a>\"的赋能提供高效且优质的服务。这需要对不同业务部门的需求进行拆分和分析，以满足不同的业务考量。因此，对用户需求进行拆解是必要的，同时也是具有挑战性的。</p><p></p><p>InfoQ：为了实现数字化、精细化运营，证券业务复杂度越来越高，在这个过程中，券商传统的技术架构会面临哪些挑战？&nbsp;</p><p></p><p>石锐：过去，券商行业的技术系统架构采用的是单体架构，即所有功能都被打包在一个应用单元中。然而，随着业务变得越来越复杂，客户数量不断增加，这种架构在并发性、可维护性和敏捷性等方面面临着很大的问题和挑战。</p><p></p><p>比如，当我们推出一个新的业务，所有存量客户都需要重新签约，技术架构在应对大量客户接入并在同一时间进行签约时变得很卡顿，无论是CPU还是内存，使用率都大幅提升，并且短时间内不可用的情况也发生了。</p><p></p><p>因此，我们意识到必须采用分布式<a href=\"https://www.infoq.cn/article/TBauHzvPIj4SP8Gg2qy7\">微服务</a>\"化技术来解耦系统，确保在海量客户接入和信息洪峰时，保障系统的高可用性。</p><p></p><p>大约在3-4年前，我们提出了技术架构转型的思路，即从小的管理后台到大的运营中台的转型。我们在后台将复杂的单体应用服务功能打散、拆分，并进行微服务化，以尽可能降低功能间的耦合程度，实现高内聚、低耦合的技术形态。</p><p></p><p>这种微服务化能够跨平台、兼容多语言，并具有弹性的部署能力，同时还能实现敏捷高效的开发迭代。在中台这个层面，我们抽象出对外共享的服务能力，并整合各个后台系统的能力，从而实现更高效的数字化运营手段。</p><p></p><p>InfoQ：针对单体应用的拆分，我们是从什么样的一个维度，按照什么样的颗粒度去做的？</p><p></p><p>石锐：我们会从抽象和归纳的角度出发，针对核心交易系统的几大块进行拆分和支持。</p><p></p><p>例如，我们会将账户、交易、存管和清算这几个大模块进行抽象拆分，发现账户业务可以从单体的核心交易系统中独立出来，并且交易这一块也可以从抽象的角度进行拆分。这样做的目的是尽可能地避免账户和交易之间的互相关联，从而实现更高效的拆分和服务治理。</p><p></p><p>InfoQ：具体来说，方正证券是如何逐步进行前中后台的一体化整合的？</p><p></p><p>石锐：前中后台的实施是一个分步骤的过程。首先，我们构建了一个完善的运营<a href=\"https://xie.infoq.cn/article/fd1ff0f706d7e0c4aa5bd378b\">中台</a>\"，然后通过让ToC端接入到中台中，而不是直接与后台交互，实现了前中后台的一体化。在构建中台的过程中，我们投入了大量的工作，包括将各种AI能力集成到中台上，将各个后台系统的功能抽象出来并与中台打通。</p><p></p><p>这个过程从2017年开始，一直持续到2020年，总共花费了2-3年时间去完成中台的持续完善与成熟。当中台稳定后，我们持续对后台的解耦和架构进行升级，逐步实现前后端的无缝切换。</p><p></p><p>InfoQ：这是一个非常巨大的工程，您个人在其中印象最深刻的或者说觉得最大的一个难点是什么？</p><p></p><p>石锐：我认为在技术架构上，最大的难点并不在技术本身，而更多地在于向业务部门和前端人员进行宣导。</p><p></p><p>随着中台的搭建，客户服务的体验完全改变了，不再是以前的功能化模式。以前客户来办业务，只能通过营业部门的某个点单来处理，而现在，我们的系统会自动识别客户的账户规范程度，并提醒营业部门先完成合规性要求，然后才能处理具体的业务。</p><p></p><p>这意味着整个业务处理模式都发生了变化，更多的是培养业务部门和前线人员的操作习惯。中台的建设花费了我们大量的时间和精力，包括集成各种AI能力，与各个后台系统打通等。我们花了一年的时间搭建了中台的架子，并持续完善了17年到20年的3-4年时间，才让中台走向成熟。在中台稳定之后，我们才开始对后台进行解耦和架构升级，这样对前端的感知就不会那么强，变更会更加无感。</p><p></p><p>InfoQ：中台这个话题近几年争议性比较大，方正证券大概是在什么时间去搭建中台的？目前整体的使用感受如何？</p><p></p><p>石锐：我们从2017年开始整合各个后台系统的功能，将它们抽象为一个共享的服务能力，构建中台。因为后台系统可能由各个小系统组成，所以需要构建一个中台来整合。特别是在账户业务层面，我们构建了一个完善的账户服务运营体系。这个体系从前端、中台到后端，为应用提供了各种服务能力。</p><p></p><p>前端应用可以由各个渠道来支持，它们的服务能力由中台提供。前端应用不需要关心后台服务落在哪个系统上，只需要关心中台能够提供哪些服务能力，并整合各个系统的能力。这样可以实现更高效的数字化运营。</p><p></p><p>InfoQ：整体的效率提升有没有可量化的数据对比？</p><p></p><p>石锐：举例来说，之前，我们每天能够受理的业务量可能就是在万级规模，现在已经翻了5、6倍，达到5万到6万的量级水平。未来，我们的目标是实现每天10万以上的受理体量，年化从之前的几十万、百万到现在千万级的规模扩张。</p><p></p><p>InfoQ：中台建设最大的难度是如何量化它的价值，本可以简单实现业务需求，用中台模式必然会增加人力的投入，设计也会更加复杂，如何权衡业务的快速发展以及中台产品的通用化？</p><p></p><p>石锐：我们的考量是将简单的事情留给客户，将复杂的事情留给我们。从这个角度出发，数字化转型必然会增加成本和投入，包括人力成本和财务成本等。这是一个持续的过程，可能短期内并不会出现质变或量变。然而，这种持续的投入一定会带来业务层面和对客户体验方面的巨大回报，这种收益与投入是成正比的。</p><p></p><p>InfoQ：据了解，方正证券是证券行业为数不多实现柜面总部集中运营的券商。这种集中运营的模式有何优势？</p><p></p><p>石锐：过去，我们传统的业务办理模式是由营业网点受理并办结客户的业务。现在我们的模式已经变成了一种受办分离的模式，即营业部门只需要受理客户的业务需求，而审核和办结业务则由总部集中处理。</p><p></p><p>这种模式带来的好处是降低了营业网点业务办理的学习成本，网点员工无需再担心如何处理业务，只需按要求录入相关信息即可。以前，营业部门的受理岗位必须由专人负责，但现在，我们已经模糊了受理角色的边界，解放了营业部门的人力，以更好地实现全员营销的模式。此外，由于总部集中审核业务，我们的业务办理的合规性和准确性得到提高，并且复杂业务的办理效率也得到了提高。</p><p></p><p>InfoQ：您如何看待最近热度不断提升的<a href=\"https://www.infoq.cn/theme/187\">AIGC</a>\"技术？在证券行业，AIGC在哪些场景具有比较大的应用潜力？</p><p></p><p>石锐：我认为无论是AI技术还是边缘计算等流行技术，我们与技术应该保持着适当的距离，要有和解的态度，具备清醒的认知，并非一定要采用最先进、最尖端的技术，而是要合适的、赋能业务发展的技术应用。新技术能够带来革命性创新，重塑生产力和生产关系，但这种创新必须基于实践，并由点到面才会发生变化。特别是在证券行业这样强监管的行业，所有业务展业都必须在合规合法前提下进行创新。在考虑数据安全性和客户隐私方面，监管要求非常高。</p><p></p><p>ChatGPT和AIGC等技术能够打破伴随式服务模式，并带来体验的提升。此外，在管理层面，这种技术可以提高公司的运营管理效率并降低成本。通过这种技术，我们可以看到两个应用潜力：一是提升客户服务体验，二是降低运营成本。</p><p></p><p>InfoQ：面向未来，方正证券的数字化转型重心会放在哪些方面？如何持续升级我们的展业平台？</p><p></p><p>石锐：未来，我们公司的数字化转型将围绕以下三个重点展开：第一，我们将持续完善分布式交易体系，使之更加健壮、可靠；第二，我们将采用<a href=\"https://www.infoq.cn/article/ZNVFzqNAKzIRpW4Oyftj\">云原生</a>\"架构，优化不同系统架构，提高效率和可扩展性；第三，我们将不断提升国产新技术创新，保持领先优势。这三个重点将是我们未来数字化转型的持续关注点。</p>",
    "publish_time": "2023-05-08 12:11:16",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "研究成果被对手抢先商业化！谷歌称将缩减AI论文发表数量，网友：谷歌种的树都被别人乘了凉，他们不想再做“大冤种”了",
    "url": "https://www.infoq.cn/article/vDOEgRoxmwyVD3OVdleK",
    "summary": "<p>近日，据外媒报道，谷歌AI精英研究中心的地位正在悄然发生变化。根据公司的内部通报，谷歌将削减其发表的研究论文数量。随着<a href=\"https://www.infoq.cn/article/g9tuoTODP20N1lTzjsjw\">OpenAI</a>\"等对手的竞争不断加剧，谷歌的这波策略调整也在情理之中。</p><p></p><h2>谷歌将有选择性地发表论文</h2><p></p><p>据四位知情人士透露，谷歌员工已经在今年早些时候得到通知，称公司将以更严谨的策略管理发布内容。部分研究人员认为，具体举措可能包括对那些不具备明确商业化途径的基础研究项目进行投资缩减。事实上，谷歌过去一直积极资助各种开放性研究，且通常不附带任何商业要求，这也使其成为研究科学家们的梦想之地。</p><p></p><p>此次战略转变属于谷歌广泛重组计划的一部分，反映出这家搜索巨头希望在AI领域取得快速进展，进而提高业务效率</p><p></p><p>该公司上个月宣布将两大主要AI部门Brain和DeepMind加以合并，谷歌称此举将“显著加快”其在AI领域的进步速度。谷歌公司的众多研究论文，为如今的竞争对手们奠定了理论基础。<a href=\"https://www.infoq.cn/article/ZWixRo76hFsOw38tRHNF\">ChatGPT的</a>\"兴起无疑给了谷歌当头一棒，如今谷歌正加快为各类产品添加生成式AI功能。</p><p></p><p>根据知情人士的介绍，合并后的谷歌<a href=\"https://www.infoq.cn/article/wfx2xYr88FC5bT50LUj9\">DeepMind</a>\"部门仍将发布新的研究成果。但领导层提醒各位员工，后续发表的内容会经过仔细斟酌。另外，DeepMind接下来也将更多关注符合商业化需求的大语言模型及产品。</p><p></p><p>一位Brain员工对高管通知做了这样的解读，“我们的工作不再是单纯发表研究成果。”相反，领导已经定下了工作基调，“现在是时候开展竞争，并把重要知识握在自己手中了”。</p><p></p><p>另一位现任员工指出，“有些人不喜欢这样的变化，也有些人觉得无所谓。”</p><p></p><p>谷歌并未立即回应置评请求。</p><p></p><p>多位知情人士还补充道，关于新成果的发布政策目前仍在讨论当中，大致轮廓也未完全确定。但他们都强调，这波变化本身已成定局。</p><p></p><p>谷歌称其每年会发表“数百篇”论文。长期以来，该公司一直认为这种透明措施会刺激外部研究人员围绕谷歌核心产品开展研究，符合其主张的企业发展理念。</p><p></p><p>“最终，传播我们的工作成果并为整个科学界做出贡献不仅是正确的选择，也能给谷歌自身带来很多重大收益。”</p><p></p><p>但这样的运营方式，也被竞争对手用于打造反过来能威胁谷歌核心业务的产品。OpenAI的ChatGPT就建立在谷歌研究人员发明和发布的AI模型之上。<a href=\"https://www.infoq.cn/article/Vyg6CQgbtTu9SKbuk9oX\">微软</a>\"已经与OpenAI建立起战略合作伙伴关系，正逐步将这项底层技术应用于各类与谷歌正面对打的产品，包括<a href=\"https://www.infoq.cn/article/ZmDbgaSV7PmYEG3MwQAx\">Bing</a>\"和Microsoft Teams。</p><p></p><p>OpenAI于2022年11月推出的ChatGPT深深“刺痛”了谷歌。据三位知情人士透露，谷歌为ChatGPT的诞生贡献了大量基础研究支持，但最终的胜利果实却被OpenAI摘取。这一残酷现实也敲响了警钟，提醒谷歌研究团队必须更多以商业回报作为核心考量。</p><p></p><h2>“是时候放手一搏了”</h2><p></p><p>谷歌Brain成立于2011年，由公司研究负责人Jeff Dean参与创建。谷歌在2014年又以5亿美元收购了DeepMind，但之后两个实验部门一直彼此独立。这个决定在一定程度上源自DeepMind领导层的坚持，他们担心自己的技术产出可能被谷歌所滥用。</p><p></p><p>而来自新联合研究部门的员工们承认，尽管“AI圈子并不大，从业者相互都挺熟悉”，所以专业知识将不可避免地往来传播，但开源社区确实在这场竞争中“干掉”了巨头谷歌。</p><p></p><p>但开发者社区中也有不少人对OpenAI评价不高，认为这帮从微软手里接过数十亿美元的研究者不配开放之名，根本就是“Closed AI”。换言之，他们为了换取巨额利润，而放弃了当初做出的不营利承诺。该公司对训练数据一直保持着严格管控，甚至提议政府限制开源AI模型的分发，称此类成果可能被恶意黑客所利用。</p><p></p><p>谷歌还有其他用以自保的改变策略。据谷歌AI部门的员工称，最近谷歌要求“先证明必要性”才能访问代码和数据等信息。另一位员工也提到，DeepMind的文化与Brain其实截然不同，重组新政其实并不像预想的那样顺畅无阻。</p><p></p><h2>谷歌赋予研究人员更多自主权</h2><p></p><p>前谷歌员工们热情赞扬了搜索巨头开放研究自主权的思路，特别是对推测性研究的热情支持，并表示像Transformers这样的开创性成果只有在这样宽松的环境下才可能诞生。</p><p></p><p>LaMDA是构建Bard聊天机器人的底层技术，最初也来自谷歌Brain的20%项。所谓20%项目，就是谷歌历史允许员工将20%的工作时间用于探索未来有望转为成熟产品的副业项目。</p><p></p><p>一位前研究人员表示，人们之所以选择为Brain效力，就是因为在这里能够自由发表论文。而此次新的管控政策很可能令局势陷入紧张。</p><p></p><p>他们还补充称，面对谷歌愈发严重的行动僵化和官僚作风，也有不少人选择离开自行创办企业。在Brain，推动任何新事物都如同“操纵笨拙的大船”。Brain部门的很多研究人员已经离开，并凭借自己参与撰写的开创性研究论文在市场上筹集资金。当然，对于公司内部那些不太关心发表期刊论文的员工来说，谷歌这种以产品为导向的立场倒是没多大影响。</p><p></p><p>在谷歌创造出首个聊天机器人的Daniel De Freitas在得知该技术将作为产品推出后，犹豫再三仍选择离职。根据《华尔街日报》之前的报道，他担心AI驱动的聊天机器人会胡说一气并导致公司的声誉或财力蒙受损失。而在ChatGPT亮相之后，谷歌还是匆忙发布了Bard — 一款几年之前就完成过首次演示的聊天机器人。</p><p></p><p>Brain一位研究人员表示，“需要吸取的教训在于，我们必须得脚踏实地拿出产品，但这不是个能一蹴而就的目标。”</p><p></p><p>谷歌的AI部门还面临着其他不利影响。搜索巨头于2020年解雇了AI道德联合负责人Timnit&nbsp;Gebru，原因是她发表了一篇批评大语言模型的论文。谷歌随后又裁掉了另一位道德AI联合负责人Margaret Mitchell，此举导致道德部门员工纷纷外流。</p><p></p><p>就在本周，机器学习先驱Geoffrey Hinton也宣布已从谷歌辞职，并表示自己担心AI可能造成灾难性后果。</p><p></p><p>参考链接：</p><p></p><p><a href=\"https://www.businessinsider.com/google-publishing-less-confidential-ai-research-to-compete-with-openai-2023-4\">https://www.businessinsider.com/google-publishing-less-confidential-ai-research-to-compete-with-openai-2023-4</a>\"</p>",
    "publish_time": "2023-05-08 13:37:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Angular 16 正式发布，抢先体验指南",
    "url": "https://www.infoq.cn/article/OPfL23A5VOWqAhEPcMmk",
    "summary": "<p>上周，Angular 正式发布了 v16 版本。这个版本带来了许多功能和变化，比我们之前看到的任何一个主要版本都要多（当然，不包括从 Angular 到 Angular 2 的转变）。Angular 正在经历一种复兴，而 v16 只是个开始。</p><p></p><p>Angular v16 的新特性包括：全新 Reactivity 模 型的开发者预览，完全向后兼容，Angular Signals 库，RXS 互操作性；服务器端渲染和 hydration 增强；改进独立组件、指令和管道的工具等。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/c8/c806f8f20b5155fa8e574b4813110f26.png\" /></p><p></p><p>本文将带您了解如何将 Angular 应用程序更新至 v16 版本。</p><p></p><p>关于本文内容的概括汇总，以及将 Angular 应用程序更新至 v16 的分步过程，请参阅 Angular 更新指南（<a href=\"https://update.angular.io/%EF%BC%89%E3%80%82\">https://update.angular.io/）。</a>\"</p><p></p><p>本文列出的 Angular 更新指南及相关信息，摘录自以下变更日志。</p><p></p><p>angular/angular changelog：<a href=\"https://github.com/angular/angular/blob/main/CHANGELOG.md\">https://github.com/angular/angular/blob/main/CHANGELOG.md</a>\"</p><p></p><p>angular/angular-cli changelog：<a href=\"https://github.com/angular/angular-cli/blob/main/CHANGELOG.md\">https://github.com/angular/angular-cli/blob/main/CHANGELOG.md</a>\"</p><p></p><p>angular/components changelog：<a href=\"https://github.com/angular/components/blob/main/CHANGELOG.md\">https://github.com/angular/components/blob/main/CHANGELOG.md</a>\"</p><p></p><p>如有需求，可参考此前发布的“更新至 v15”：<a href=\"https://angular.io/guide/update-to-version-15\">https://angular.io/guide/update-to-version-15</a>\"</p><p></p><p></p><h2>Angular v16 中的功能亮点</h2><p></p><p></p><p>全面的新功能列表，请参阅关于 v16 Angular 博文更新。</p><p></p><p><a href=\"https://blog.angular.io/\">https://blog.angular.io/</a>\"</p><p></p><p></p><h4>Angular Signals 开发者预览</h4><p></p><p></p><p>此版本包含 Angular 新响应式基元的首个开发者预览，分别为：signal, computed 和 effect。关于详细信息，请参阅 Signals 指南。</p><p></p><p><a href=\"https://angular.io/guide/signals\">https://angular.io/guide/signals</a>\"</p><p></p><p>更多背景信息，请参阅 Angular Signals RFC。</p><p></p><p><a href=\"https://github.com/angular/angular/discussions/49685\">https://github.com/angular/angular/discussions/49685</a>\"</p><p></p><p></p><h4>增强 hydration 开发者预览</h4><p></p><p></p><p>此前，当 Angular 在服务器端渲染或编译时预渲染的页面上启动时，该框架会丢弃一切现有 DOM 节点并从头开始重新渲染。借助 v16 的增强 hydration 功能，现在您可以指定 Angular 重用这些现有 DOM 节点。关于更多细节信息，请参阅完整的 hydration 指南。</p><p></p><p><a href=\"https://angular.io/guide/hydration\">https://angular.io/guide/hydration</a>\"</p><p></p><p></p><h2>使用 esbuild 开发者预览版加快构建速度</h2><p></p><p></p><p>v16 带来了基于 esbuild 的全新 Angular CLI 构建器开发者预览版。这种新架构能够在多种场景下显著缩短构建时间。该预览版还与 Vite 相集成以支持 CLI 的开发服务器。</p><p></p><p>更新 angular.json 即可体验这一全新构建设置：</p><p></p><p><code lang=\"perl\">content_copy\"architect\": {\n  \"build\": {\n    \"builder\": \"@angular-devkit/build-angular:browser-esbuild\",\n</code></p><p></p><p></p><h3>独立组件迁移与搭建</h3><p></p><p></p><p>为了支持开发人员将自己的应用程序转换为独立 API，Angular v16 引入了迁移图表和独立的迁移指南。这些工具大大减少了将代码迁移至独立组件、指令和管道所需要的工作量。关于详细信息，请参阅独立迁移指南。</p><p></p><p><a href=\"https://angular.io/guide/standalone-migration\">https://angular.io/guide/standalone-migration</a>\"</p><p></p><p>通过以下命令生成具有独立组件的新 Angular 应用程序：</p><p></p><p><code lang=\"javascript\">ng new --standalone\n</code></p><p></p><p></p><h3>按需要输入</h3><p></p><p></p><p>按照需要标记组件和指令输入：</p><p></p><p><code lang=\"cpp\">export class ColorPicker {\n  @Input({ required: true }) defaultColor: string;\n}\n</code></p><p></p><p>如果模板中包含一个组件，但没有指定其所有必需输入，Angular 会在构建过程中报告错误。</p><p></p><p></p><h2>Angular v16 中的重大变更</h2><p></p><p></p><p>关于重大变更的完整列表，请参阅 GitHub 上的完整变更日志。</p><p></p><p></p><h3>Angular v16 需要配合 node.js v16 或 v18 使用</h3><p></p><p></p><p>Angular 需要配合 node.js v16 或 v18 版本使用。PR #47730</p><p></p><p>关于兼容性的完整说明信息，请参阅版本兼容性页面。</p><p></p><p><a href=\"https://angular.io/guide/versions\">https://angular.io/guide/versions</a>\"</p><p></p><p></p><h3>Angular v16 需要配合 TypeScript 4.9 或更高版本使用</h3><p></p><p></p><p>Angular v16 不再支持 4.9 之前的较早 TypeScript 版本。PR #49155</p><p></p><p>关于兼容性的完整说明信息，请参阅版本兼容性页面。</p><p></p><p></p><h3>Angular 兼容性编译器（ngcc）已被移除</h3><p></p><p></p><p>Angular 兼容性编译器（ngcc）是一种构建工具，用于促进 Angular 之前的编译器及渲染架构（View Engine）与其新架构（Ivy）之间的兼容性。</p><p></p><p>View Engine 已在 Angular v13 中被移除，v16 则最终移除了 ngcc。因此，现在已无法在 Angular v16+ 版本中使用由 View Engine 构建的 Angular 库。</p><p></p><p></p><h4>Angular 包格式变更</h4><p></p><p></p><p>Angular 包格式（APF）现已更新，具体包含以下变更：</p><p></p><p>Flattened ESM 2015 (FESM2015) 输出已被移除。EcmaScript 2020 输出已更新至 EcmaScript 2022（包括扁平化输出）。</p><p></p><p>关于背景信息，请参阅 Angular 包格式页面。</p><p></p><p><a href=\"https://angular.io/guide/angular-package-format\">https://angular.io/guide/angular-package-format</a>\"</p><p></p><p></p><h4>ReflectiveInjector 已被移除</h4><p></p><p></p><p>ReflectiveInjector 及相关符号已被移除。请更新代码以避免引用 ReflectiveInjector 符号。作为替代方案，可以使用 Injector.create 创建注入器。</p><p></p><p></p><h4>Router.createUrlTree 行为更新</h4><p></p><p></p><p>由于 Router.createUrlTree 现可在更多场景中正确起效，因此需要对模拟 ActivatedRoute 实例的测试做相应调整。具体来讲，这意味着使用无效 / 不完整的 ActivatedRoute 模拟进行的测试可能引发与此前不同的行为。另外，测试现可导航至真实 URL，不同于之前只能导航至根目录的情况。请确保在测试中提供相应的预期路由。虽然几乎不会对生产造成影响，但我们发现此前如果使用未出现在当前路由程序状态中的 ActivatedRoute，相关导航可能会被忽略。在创建正确的 URL 之后，应用程序中的导航行为可能会有所不同。在大多数情况下，仅使用空命令数组更新查询参数的导航时会引发这个问题，例如 router.navigate([], {relativeTo: route, queryParams: newQueryParams})。要加以解决，应移除其中的 relativeTo 属性。</p><p></p><p></p><h2>Angular v16 即将弃用的功能</h2><p></p><p></p><p>以下 API 在 v16 中仍然可用，但可能会在未来版本中被移除，具体请参阅 Angular 弃用实践。</p><p></p><p><a href=\"https://angular.io/guide/releases#deprecation-practices\">https://angular.io/guide/releases#deprecation-practices</a>\"</p><p></p><p>为了保持 Angular 应用程序的可靠性，请尽可能始终快速更新应用程序。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/63/63aaa9b735eb59d0be07211fc12b96fd.png\" /></p><p></p><p></p><h2>小结</h2><p></p><p></p><p>如果你是 Angular 开发人员，或正在考虑将 Angular 用于下一个项目，了解这些新功能是必不可少的。其中一些功能是社区长期以来的需求。一些功能（如 Signal 和 SSR）让 Angular 与其他现代框架相媲美。随着 v17 中更多功能的推出，Angular 将与目前的版本有很大不同。考虑到 Angular 带来的变化，如果不及时更新，就无法利用这些新功能，你的代码库很快就会过时。</p><p></p><p></p><h5>相关阅读：</h5><p></p><p><a href=\"https://xie.infoq.cn/article/ef69ee3c39df06f8fb1f5bb66\">好用的&nbsp;Angular&nbsp;组件库有哪些推荐的？TinyNG 好用吗？</a>\"</p><p><a href=\"https://xie.infoq.cn/article/7baec545b8202471064494a69\">2023 重学&nbsp;Angular</a>\"</p><p><a href=\"https://xie.infoq.cn/article/88dbb8553edf09d20a131d260\">前端架构三大巨头之一&nbsp;Angular|深度讲解</a>\"</p><p><a href=\"https://xie.infoq.cn/article/fd637cabb33b1ab82d5742dee\">AngularJS 进阶 (二十五)requirejs + angular + angular-route 浅谈 HTML5 单页面架构</a>\"</p>",
    "publish_time": "2023-05-08 14:52:06",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "从微服务转为单体架构、成本降低 90%，亚马逊内部案例引发轰动！CTO：莫慌，要持开放心态",
    "url": "https://www.infoq.cn/article/NU2Y3XiazG1cqiaNoXXa",
    "summary": "<p></p><blockquote>Ruby on Rails 之父：“即使是亚马逊也无法理解无服务器或微服务。”</blockquote><p></p><p>&nbsp;</p><p>来自亚马逊Prime Video团队的一个案例研究在开发者社区中掀起了轩然大波。</p><p>&nbsp;</p><p>在该案例中，Prime Video团队将一个监控系统从微服务架构迁移到单体架构，并避免使用昂贵的服务（如AWS Step Functions和Lambda无服务器函数），并对此举所带来的降本效果进行了评估。</p><p>&nbsp;</p><p>他们的需求是使用一个监控工具来识别“用户查看的视频流”的质量问题，因为有“成千上万个并发流”，所以这个工具必须是高度可伸缩的。团队最初构建了一个由AWS Step Functions编排而成的分布式组件解决方案，一个基于状态机和任务的无服务器编排服务。结果发现，Step Functions居然是瓶颈所在。</p><p>&nbsp;</p><p>案例文章中写道：“对于视频流的每一秒，我们的服务都需要执行多次状态转换，所以很快就达到了账户限制。除此之外，AWS Step Functions是按照状态转换向用户收费的。”还有另外一个“成本问题”，即存在大量对S3的一级调用（用于临时存储捕获的视频帧）。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/21/218ec9afa36cf74e8c0948cbd2eba83a.png\" /></p><p></p><p>Prime Video监控应用程序的初始架构，可见成本很高，伸缩性也很差</p><p>&nbsp;</p><p>案例文章中写道：“我们意识到分布式架构在这个特定的场景中并没有为我们带来太大的好处，所以我们将所有组件都合并到一个进程中”，从而消除了对S3的依赖。“我们还实现了在单个实例中控制组件的编排。”现在，这个解决方案运行在EC2（Elastic Compute Cloud）和ECS（Elastic Container Service）上，其中有“一个轻量级的编排层来分发用户请求”。</p><p>&nbsp;</p><p>案例文章总结道：“微服务和无服务器组件可以被用在大规模的场景中，但是否一定要舍弃单体而使用它们则需要根据具体情况具体分析。将服务迁移成单体让我们的基础设施成本降低了90%以上，还提升了我们的伸缩能力。”文中还提到了他们通过EC2节省计划来降低成本，这说明即使是内部AWS用户也会按照与外部用户类似的模式收取费用。</p><p>&nbsp;</p><p></p><h2>众说纷纭：我们的架构设计究竟出了什么问题？</h2><p></p><p>&nbsp;</p><p>这篇文章最初是在三月份发布的，但是直到这个月才引起整个工程界和技术界的关注。</p><p>&nbsp;</p><p>Hacker News上的一条评论说：“这篇文章的存在让我感到很惊讶，甚至都有点看傻眼了”。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6d/6d59761883e6830b9af773e2a695f445.jpeg\" /></p><p></p><p>&nbsp;</p><p>在我们看来，AWS总是习惯于将微服务和无服务器架构宣扬成“现代化”应用程序的最佳实践。例如，“AWS Well-Architected”文档的“Reliability”一项下面给出了一些建议：</p><p>&nbsp;</p><p>“使用面向服务架构（SOA）或微服务架构构建高度可伸缩和可靠的工作负载。面向服务架构是一种通过服务接口让软件组件变得可重用的实践。微服务架构则进一步让组件变得更小、更简单。”</p><p>&nbsp;</p><p>在关于.NET应用程序现代化的“AWS Prescriptive Guidance”文档中，亚马逊列出了微服务的好处，包括更快的创新、高可用性和可靠性、更高的敏捷性和按需可伸缩性、现代CI/CD（持续集成和部署）管道，以及强大的模块边界，尽管它也将“运维复杂性”列为缺点。</p><p>&nbsp;</p><p>然而，这篇案例文章似乎证实了开发者的一些猜疑。其中的一个猜疑是，AWS推荐的解决方案可能不是最具成本效益的，因为它们总是涉及到使用多种昂贵的服务。另一个猜疑是微服务相对于单体应用的优点似乎被夸大了。</p><p>&nbsp;</p><p><a href=\"https://www.infoq.cn/article/0xb7kodt55mk8TB2mcgA\">Ruby on Rails作者</a>\"David Heinemeier Hansson一直在倡导<a href=\"https://www.infoq.cn/article/qoQ3V6JfENwWzmPG4fRe\">减少对云服务的使用</a>\"，他在评论亚马逊的这个案例研究时表示，它“对一度席卷科技行业的理论上的微服务热潮来了一次大总结。现在，这些理论的实际结果终于出来了。很明显，在实践中，微服务可能会给系统带来不必要的复杂性。而无服务器只会让情况变得更糟。一个团队，一个应用程序，却用网络调用和服务分区取代方法调用和模块分离，这在任何一种情况下几乎都是很疯狂的。”</p><p>&nbsp;</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c4/c40212fd527783ad21f08a89e3671199.jpeg\" /></p><p></p><p></p><blockquote>“即使是亚马逊也无法理解无服务器或微服务。”</blockquote><p></p><p>&nbsp;</p><p>2020年，“Building Microservices”和“Monolith to Microservices”等书的作者Sam Newman在一次开发者大会上表示，“微服务不应该是默认的选择”，并向软件架构师提出了一些在采用微服务架构之前需要考虑的事项：“你做过价值链分析吗？你了解过瓶颈出现在哪里吗？你尝试过模块化吗？微服务应该是最后才去考虑的。”</p><p>&nbsp;</p><p>现在，Newman在推特上对这篇案例文章做了评论：“这篇文章实际上更多的是关于函数与长时间运行的虚拟机的定价模型。这仍然是完全合乎逻辑的架构驱动，但从这个案例中学到的东西，其适用性范围可能相对要狭窄一些。”他接着写道：“人们之所以不公开谈论撤离微服务，是因为这可能会让一些人认为‘他们做错了’。视情况变化而改变你的想法才是对的做法。”</p><p>&nbsp;</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/da/da4e4c731704aab123ce25f638e46cc2.jpeg\" /></p><p></p><p>&nbsp;</p><p>&nbsp;</p><p>关于这篇文章的讨论随处可见，它激起了大量的思考，在Hacker News、Twitter、Reddit等平台上涌现了非常多的有意思的评论和分析。</p><p>&nbsp;</p><p>就像一位网友在Hacker News上评论的那样：“这是一个很好的教训，一个很好的故事，而且很重要的是它来自亚马逊内部团队。”</p><p>&nbsp;</p><p>对于该案例的初始架构设计存在的问题，一位DataDog高级软件工程师Lambros Petrou在推特上发表了分析：“Prime Video案例文章中的设计是有问题的。滥用服务并不能解决架构问题，它只会把问题暴露出来”。前首席技术官Steve Chambers在某种程度上也同意这一观点，他说：“基本上，他们（现在）使用的是相同的架构，只是将组件塞到了容器中，这样他们就不会在不同的云服务之间通过网络进行昂贵的调用和数据传输……这很明显是一种优化！”</p><p>&nbsp;</p><p>一名工程师在Reddit上针对这个案例争论道：“微服务是有额外开销的。本来简单的进程间通信，或者系统两个部件之间的内存调用，变成了HTTPS、OAuth、JSON编码/解码，而且每次都需要发生这些简短的对话。当你的系统被分解成50万个部件，每一次通信都需要做这些事情，并且你要为每一个事务付费时，成本和复杂性就会增加。拆解单体需要一次性替换整个应用程序，这意味着开发人员需要做一些测试。但DevOps意味着不会有更多的测试，所以在生产环境中会发生故障，我们唯一能做的是让功能块变小，这样才可能快速找到和修复问题。。我不认为应用程序的小功能块在不一直打开数百万个连接的情况下属于一个整体这样的说法有什么问题……”</p><p>&nbsp;</p><p>但总的来说，这篇案例文章对于AWS来说未必是坏消息。一方面，这似乎与这家云计算巨头所宣扬的最佳实践背道而驰，但另一方面，这也是一个令人耳目一新的关于如何通过简单的架构来降低成本的实践。与许多促销案例研究不同，这个案例看起来对AWS客户真的很有用。</p><p>&nbsp;</p><p></p><h2>看看亚马逊CTO和前云架构战略副总裁怎么说</h2><p></p><p>&nbsp;</p><p>这件事情被大家传得沸沸扬扬的，甚至还惊动了亚马逊CTO Werner Vogels博士。</p><p>&nbsp;</p><p>他对此表示，构建可演进的软件系统是一种策略，我们必须以开放的心态重新审视自己的架构。</p><p>&nbsp;</p><p>“软件架构不像桥梁和房屋的架构。桥梁建成后就很难改变，但软件不一样。软件一旦运行起来，我们就可以更深入地了解我们的工作负载，然后再选择一个可演进的架构，在不影响客户体验的情况下进行更改。我的经验法则是，随着每个数量级的增长，你都应该重新审视你的架构，并确定它是否仍能支持下一个数量级的增长。”</p><p>&nbsp;</p><p>“Prime Video 就是个很好的例子。（架构设计）没有放之四海而皆准的方法。我们总是敦促我们的工程师找到最佳解决方案，并且我们没有强制要求特定的架构风格。”“我想重申，没有一种架构模式可以满足所有的情况……单体没有消亡（恰恰相反），可演进的架构也在不断变化的技术格局中扮演着越来越重要的角色。”</p><p>&nbsp;</p><p>在Werner Vogels博士发表看法之后，去年已宣布退休的前亚马逊云科技可持续发展架构副总裁、前云架构战略副总裁Adrian Cockcroft也忍不住出来点评了一下。</p><p>&nbsp;</p><p>“关于Prime Video 的案例，虽然互联网上涌现了堆积如山的意见和观点，但大多没有说到点子上。”</p><p>&nbsp;</p><p>Prime Video 团队只是遵循了一条“Serverless First（无服务器优先）”的原则：首先尝试使用Step Functions 和 Lambda 进行快速构建。通过无服务器方法，在几天或几周内构建一个原型，这是重点。然后在需要应对高流量时，再进行重构。“Serverless First”和“Serverless Only”是有区别的，“我不提倡Serverless Only”。</p><p>&nbsp;</p><p>他认为这个案例之所以会引起这么大的反应，关键是“在微服务被过度营销的情况下，大家以为Prime Video 团队返回到了单体架构”。</p><p>&nbsp;</p><p>“我确实认为微服务被过度宣传了，把微服务作为解决所有问题的答案。而且这可能是因为厂商想通过简单的营销信息来销售 Kubernetes，即需要通过使用 Kubernetes 来实现云原生的微服务。大家对这种信息传递方式表示了强烈的反对。Kubernetes 的复杂性是有代价的，除非你的团队和规模非常大，否则你不需要它。（建议阅读 Sam Newman 的《构建微服务：设计细粒度系统》一书。）”</p><p>&nbsp;</p><p>总之，Prime Video团队最初的设计还是很棒的，帮助他们快速进入市场并带来收益。而现在，他们在退后一步进行下一阶段的分析。“该团队遵循了我认为的最佳实践”，“我认为 Prime 团队发布的这篇文章非常富有洞察力……”</p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://www.primevideotech.com/video-streaming/scaling-up-the-prime-video-audio-video-monitoring-service-and-reducing-costs-by-90\">https://www.primevideotech.com/video-streaming/scaling-up-the-prime-video-audio-video-monitoring-service-and-reducing-costs-by-90</a>\"</p><p><a href=\"https://world.hey.com/dhh/even-amazon-can-t-make-sense-of-serverless-or-microservices-59625580\">https://world.hey.com/dhh/even-amazon-can-t-make-sense-of-serverless-or-microservices-59625580</a>\"</p><p><a href=\"https://devclass.com/2023/05/05/reduce-costs-by-90-by-moving-from-microservices-to-monolith-amazon-internal-case-study-raises-eyebrows/\">https://devclass.com/2023/05/05/reduce-costs-by-90-by-moving-from-microservices-to-monolith-amazon-internal-case-study-raises-eyebrows/</a>\"</p><p><a href=\"https://thestack.technology/amazon-prime-video-microservices-monolith/\">https://thestack.technology/amazon-prime-video-microservices-monolith/</a>\"</p><p><a href=\"https://news.ycombinator.com/item?id=35811741\">https://news.ycombinator.com/item?id=35811741</a>\"</p><p><a href=\"https://twitter.com/samnewman/status/1654432661337788416\">https://twitter.com/samnewman/status/1654432661337788416</a>\"</p><p><a href=\"https://www.allthingsdistributed.com/2023/05/monoliths-are-not-dinosaurs.html\">https://www.allthingsdistributed.com/2023/05/monoliths-are-not-dinosaurs.html</a>\"</p><p><a href=\"https://adrianco.medium.com/so-many-bad-takes-what-is-there-to-learn-from-the-prime-video-microservices-to-monolith-story-4bd0970423d4\">https://adrianco.medium.com/so-many-bad-takes-what-is-there-to-learn-from-the-prime-video-microservices-to-monolith-story-4bd0970423d4</a>\"</p>",
    "publish_time": "2023-05-08 15:41:05",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "提升字节规模化效能的平台化思路 ｜ 极客有约",
    "url": "https://www.infoq.cn/article/gNtSBmtkL057VRm73Ie1",
    "summary": "<p>口述：杨振涛、姚志坤</p><p>整理：Penny</p><p>策划：Tina</p><p>&nbsp;</p><p>如今，在 Kubernetes 上构建应用程序的开发人员，不仅要写代码还要负责交付和运维等。而 CNCF 云原生的 Landscape 已经有 1000+ 张卡片，覆盖应用定义与开发、编排与管理、运行时、配置、平台、可观测性与分析等，开发人员“认知负担”越来越重，所以企业需要从 2023 年开始更关注开发者体验，去聚焦开发者平台的相关建设，提供好用的工具集合或平台工程。</p><p>&nbsp;</p><p>于是，InfoQ 发起了一场《极客有约》特别栏目《<a href=\"https://www.infoq.cn/theme/183\">云原生趋势下的平台工程</a>\"》。在本期节目中，我们邀请了字节跳动效能技术专家姚志坤，以《提升字节规模化效能的平台化思路》为主题，和大家一起聊聊大规模微服务实践条件下，字节是如何通过平台工程协同数万研发人员的？字节内部开发者平台是如何演进的？传统意义上的运维岗位，未来会被平台替代掉?&nbsp;</p><p>&nbsp;</p><p>以下是访谈实录，完整视频参看：<a href=\"https://www.infoq.cn/video/IMEjWQl3zS66Eb6uCOXL\">https://www.infoq.cn/video/IMEjWQl3zS66Eb6uCOXL</a>\"</p><p>&nbsp;</p><p>杨振涛：欢迎收看今天晚上的InfoQ直播栏目《极客有约》，我是今晚的主持人杨振涛，本期我们有幸请到的嘉宾是字节跳动效能技术专家姚志坤老师。我们一起探讨的话题是《提升字节规模化效能的平台化思路》。下面我们请志坤老师跟大家打一个招呼。</p><p>&nbsp;</p><p>姚志坤：大家晚上好，我很荣幸今天能与杨老师一起探讨内部平台工程的建设思路。我是姚志坤，来自字节开发者服务团队。在字节，我主导了服务端效能平台的构建，从零开始建立了各大业务的 CI/CD 解决方案，并拥有10多年的内部工具链和平台经验。我的职业生涯一直围绕着软件工程展开，探索软件工具的体系迭代过程以及精益 DevOps 研发效能等方面。今天我们讨论的平台工程是相对较新的理念之一，我将结合字节规模化效能落地的经验分享对这个概念的理解，希望能为大家提供一些参考和帮助。</p><p>&nbsp;</p><p>杨振涛：接下来我们就开始第一个话题，近几年研发效能被提及的频率比以往任何时候都要多，字节在研发效能方面的整体思路和现状是什么样子的？存在哪些非常特别的挑战？</p><p>&nbsp;</p><p>姚志坤：我是从字节效能这个方向开始出发，见证了字节技术团队从千人到数万人的发展历程。在研发效能方面，业界提倡的是提高业务价值、提升交付效率和降低成本等目标。这几年这个方向也变得越来越热门。随着业务和团队不断发展，我们的效能体系也经历了三个阶段：探索期、成长期和成熟期。每个阶段我们都遇到不同的问题并采取不同的策略来应对。下面我将分别讲述这几个阶段的支持方式。</p><p>&nbsp;</p><p>首先是业务探索阶段，这时人较少，工作量较大，系统还不太复杂。在这个阶段，一线研发的关注点主要在业务逻辑实践上，对工具的关注不多，选择也不多。当时使用的工具链版本基本是开源系统加一些定制，包括GitLab、Gerrit、Jenkins、Jira等，对一线研发较透明，社招同学的学习成本也不高。主要矛盾在于工具品质问题，开源工具往往针对小型团队设计，性能和优化程度不够，而且开源工具数量也较多，互相之间没有打通。因此，早期效能的思路偏向于CI/CD工具链的标准化，尽量避免选择过多。通过CI/CD效能平台打通一些数据接口，以及基础流程的标准化，可以实现效能提升和自动化，满足早期业务的需求。</p><p>&nbsp;</p><p>第二阶段是业务的扩展阶段，人员和系统管理变得更加复杂，对测试工具、流程管理和发布过程监控的要求也更高。此时，更多的自研工具得以建立。此外，字节跨行业、跨应用进行探索，每个领域对效能的要求不同。例如，ToC领域的业务需要更高频的交付，希望测试右移，即通过在线反馈调整产品策略。而ToB商业化业务则需要更高质量的要求，希望测试左移。这时的矛盾在于单一的标准化流程无法支持多样化业务的需求。在这个阶段，我们的整体思路是基于统一的中台化平台进行生态共建，分为生态和共建两个方面。生态的主要目的是构建一些像开源插件一样的体系，以低成本的方式将业务场景集成起来。共建的工作涉及不同的业务场景与自身资源结合的解决方案，以应对业务当前急需处理的问题。</p><p>&nbsp;</p><p>在第三阶段，随着业务进入成熟期，从管理者的角度来看，他们更加关注价值产出。这些挑战包括业务增长放缓和管理成本增加的矛盾，即降本增效。从平台和业务两个方面来看，解决这些问题需要更加精细化的解决方案。从平台角度来看，经过第二阶段的共建，短期诉求得到了满足。但长期来看，生态的维持和多样性也需要高成本的维护。这会导致人力资源的分散和重复的建设。因此，需要更加精细化地解决过度的个性化带来的维护成本高的问题，集中力量去优化核心链路。从业务角度来看，随着研发效能的增长，更加关注端到端的投入产出价值。因此，对需求和技术的评估会更加严格，也会控制好投入产出比。为了实现这一目标，希望有更加细粒度的效能度量来进行优化。同时，也需要采用一些一致性或标准来落实规范，降低一些随机性的流程失控。此外，安全合规、发布管控以及内部质量红线也是第三阶段的支持重点。</p><p>&nbsp;</p><p>杨振涛：我们已经了解了当前的情况，包括一些历史发展的背景。关于研发效能，相关话题非常广泛。我们先挑选两个比较典型的话题来讨论。第一个是产研平台，它可以是基于工具或比较成熟的平台。第二个是开发者的认知。去年有一个标志性的性能实验，咨询公司Gartner将平台工程列为2023年度的十大技术趋势之一。这对产研平台和开发者的认知带来了哪些新的启示和影响呢？</p><p>&nbsp;</p><p>姚志坤：先来说一下平台工程的概念。我在去年初开始接触这个概念，感觉软件行业正在从规模化的手工业向工业化进程转变。平台工程通常指设计或构建工具链和工作流程的学科。它会构建一个内部集成化的平台，用于衔接业务和基础设施。我的理解是，首先我们需要明确“平台”这个概念，因为它可能在公司内部被过度泛化，导致很多误解，特别是大公司内部有无数个平台。但实际上，许多平台只能做到一个工具或系统的层次。平台需要具备除了功能之外的更多特性，如可运维性、可扩展性，以解决领域问题。例如，外卖平台或打车平台，它们需要提供足够的闭环和标准化的服务，才能真正成为交易平台。而内部部门的一些开发者门户网站，如测试门户，仅仅是一堆工具的堆叠，还不能算作平台。</p><p>&nbsp;</p><p>“工程”是将构建平台作为一个复杂系统进行开发。就像交付一个完整的软件工程一样，开发内部开发者平台也需要进行目标分析、用户分析、建模实施以及最终的推广运营。但是，我认为“平台工程”仍然是一个没有完整定义的术语，因为它缺乏目标范围。在不同的公司或领域中，它的规模可大可小。例如，将研发过程从战略规划到实际收益整合在一起，可以形成整个业务的价值流，也可以仅仅是一个软件或运维交付。</p><p>&nbsp;</p><p>今天，我们先预设平台工程服务于产研团队。在产研中，高效能永远是追求的目标，而通过平台工程的方式来提升研发效能是新趋势。平台工程的目标是作为中间层来衔接研发和技术设施。和之前强调的DevOps文化和协作不同，平台工程更加强调流程和工具的重要性，这可能需要依赖于认知能力。因此，产研的开发者、负责人需要考虑问题的复杂性，我们需要系统地构建产研平台。对于大公司而言，工具链越复杂，业务流程越多样化，构建平台的难度就越大。因此，我们需要拥有工程思维，并提高该领域的专业性水平。</p><p>&nbsp;</p><p>许多公司都采用一体化平台来封装工具并引入领先的技术来提高代码生产力。例如，最近比较流行的AIGC技术可以提高代码生产力的局部效率，同时过程管理工具也可以提高整体协作效率。对于开发者来说，云原生和DevOps带来的基础设施变化意味着工具链基础设施越来越复杂，使用的技术栈也越来越高级，但是使用难度却越来越低。DevOps的技术发展旨在让开发者更专注于业务本身，去实现需求，将操作降至最低。比如与20年前相比，现在很少有工程师关注编译技术。此外，像AIGC这样的AI编程可能是未来的一种新的编译领域，可以通过自然语言生成代码。最终，开发者需要完全理解云基础栈的学习成本越来越高，但使用成本却降低了。</p><p>&nbsp;</p><p>杨振涛：我们可以更深入地探讨开发者的认知负荷问题，尤其是在设计平台工程方面。在字节跳动的实践过程中，我们是否遇到了一些关键的挑战或问题，特别是与认知负荷有关的问题呢？</p><p>&nbsp;</p><p>姚志坤：我从平台设计者的角度看谈谈如何实施平台工程。这里有三个关键点需要考虑：第一点是技术层面的积累，第二点是产研层面的理解，第三点是产品思维。</p><p>&nbsp;</p><p>在技术层面的理解上，基础架构、SaaS层、组件和工具链等系统，是一个逐层集成的分层结构。一般来说，越靠近一线研发人员的系统，尤其是PaaS内层的发布系统和编译系统，越需要丰富的使用经验。例如，在云原生领域，Cloud ID和IaC（Infrastructure as Code）模型、测试和监控框架等都是重要的部分，需要掌握对应的原理，才能更好地提供给一线用户使用，降低他们的认知负担。好的一面是，现在许多云原生技术都采用标准的API和声明式结构，更易于集成。相比之下，传统工具需要更多的适配和定制。如果技术水平不够专业，可能会导致底层构建的不稳定。如果集成的工具越多，平台的复杂度也会越高，最终可能会失控。因此，平台工程师需要在平衡工具和复杂性之间找到一个合适的平衡点，并确保系统的稳定性和可靠性。</p><p>&nbsp;</p><p>在产研层面理解，就是需要有懂软件工程，需要有专家将工程改进沉淀到系统中，使得研发人员能够更好地利用这个平台来提高效率。对于研发人员来说，他们不需要关心研发效能或者DevOps，只需要将平台使用好就能达到目标。如果没有专家，很可能会引入更多不符合时宜的规范或流程，导致管理成本高和价值产出不清晰等问题。</p><p>&nbsp;</p><p>产品思维的理解，是一个常常被忽视的方面。虽然我们可能已经理解了业务和技术的集成，但是如何在现有企业的情况下设计一个前瞻性且有利于企业长期发展的平台，并推广它，需要一些具备产品思维的专业人员来更好地完成。这包括设计产品里程碑、推广、运营以及搞清楚平台中的每一个主要场景以及它如何解决业务用户的问题。例如，在平台研发过程中，有很多不同的业务输入需求，但是我们需要考虑哪些需求做，哪些不做，哪些需要进行前期的试点验证才能进行大规模的投入。这都是产品策略需要考虑的。</p><p>&nbsp;</p><p>杨振涛：字节内部类似于RBP的开发者平台是自研的吗？在整个演进的过程中，怎么考虑选择哪些部分自研，哪些部分集成已有的开源的方案？</p><p>&nbsp;</p><p>姚志坤：在字节内部的开发者平台和工具中，大部分都是自主研发的，但是也有一些工具是基于开源社区的版本进行二次开发的。我们的效能平台完全源于自主研发，而代码仓库则基于一些开源版本进行了一些内部定制。在考虑开源或自主研发时，我们需要在业界开源标准和我们内部问题域之间进行权衡。如果业界的开源标准已经涵盖了现有和未来的问题，那么我们会优先选择开源。因为这样就可以重用许多工具和插件，例如我们的代码仓库，我们的内核核心并没有改变，但是我们可以使用开源的工具和插件来赋能，并增强分布式能力、大仓的能力、稳定性和性能等指标以及容灾能力。</p><p>&nbsp;</p><p>另外，工具链是分层的，就像许多大公司一样，我们内部的底层技术栈可能或多或少有一些历史背景。例如，字节内部的技术体系与标准的云原生标准存在一定的差异。因此，越上层的平台上，例如效能平台，越难找到一个标准化的开源系统，只有一些解决方案，这就需要大公司去自行研发并将这些通用的解决方案落实到自建系统中。此外，规模化问题也是导致字节需要自研的一个因素。</p><p>&nbsp;</p><p>杨振涛：在平台化进程中，字节如何去增强已有的CI/CD能力，在落地过程中遇到过哪些难题，你们是如何解决这些难题的？</p><p>&nbsp;</p><p>姚志坤：在字节的平台化过程中，我们认识到 CI/CD 是非常关键的一个环节。我们将流水线引擎置于较高的优先级位置。现在看来，我们按照平台工程的逻辑来实现CI/CD，并希望通过高度灵活的流水线引擎来串联或封装所有内部工具，包括常规的测试发布以外的需求相关的流转能力、代码操作、评审和后续监控能力，将其整合到字节的 CI/CD 流水线中。</p><p>&nbsp;</p><p>这个流水线的理念是基于价值流的概念，识别增值流程和工具的集成，超出了通常意义上的CI/CD流水线范畴。我们可以在 流水线上直接进行对合码和评审的需求或代码操作，并在流水线上进行应用的创建、整合AB实验等操作。我们将内部的流量调度、染色、动态配置开关和灰度发布能力整合成AB实验的流水线，并对应用监控和可观测能力以及发布能力进行自动化整合，能够根据灰度发布结果自动放量。</p><p>&nbsp;</p><p>难点主要在于集成成本，因为工具链分散在字节的各个部门或团队中，标准不一致，因此每个集成和工具都需要额外的开发成本，有些还需要重新开发UI，以确保在效能平台上实现界面的一致性。</p><p>&nbsp;</p><p>另一个突出的问题是稳定性和可用性。这种问题不仅涉及到效能平台本身的稳定性，还影响到一线用户的实际可用性，因为他们将效能平台作为主入口。由于工具的稳定性不同，将多个工具串起来可能会导致更多的问题。为解决这个问题，我们有三个关键点。首先，我们关注高频工具链，由效能团队或平台工程团队负责研发和QA。其次，我们提供监控能力，以保证被集成工具的团队能够及时发现工具链的问题，并向字节内部的on-call流程报告问题并解决问题，从而提高用户体验。最后，当出现无法及时解决的问题时，我们可以提供平台降级能力，将自动化能力转为人工解决或通过权限控制和风险阻止工具强制跳过有风险的步骤来确保流程的顺畅和安全。</p><p>&nbsp;</p><p>CI/CD早期是从无到有的阶段，中期是从有到全的阶段，现在更多的是从全到精细的阶段，目前处在收敛期。我们致力于打造高品质的CI/CD流程并将最佳实践应用于业务，提高一线易用性和体验水准，这是我们现在的阶段目标。</p><p>&nbsp;</p><p>杨振涛：云原生持续发展为我们带来了许多机遇，同时也带来了很多新挑战，其中之一是大规模微服务的部署和运维。在字节大规模微服务环境中，面临哪些挑战？从平台工程师的角度来看，解决思路和方案是什么？是否参考了国内流行的解决方案，例如Backstage以及插件化等思路？</p><p>&nbsp;</p><p>姚志坤：规模化是我们内部做这个的重要原因。规模化带来了四个主要的问题。第一，规模化会带来差异化，种类会更多，包括不同的微服务技术栈、配置和代码框架、前后端等。第二，规模化会提高安全性，因为在10万量级的微服务中，任何小的安全漏洞都会被放大，因此需要更加严格的管控方案。第三，规模化会对业务交付产生影响，因为不同的业务对交付有不同的诉求。第四，多样性会造成工具基础工具链的复杂性，这需要解决。</p><p>&nbsp;</p><p>为了解决规模化带来的问题，有两个主要的解决方案：流程化和插件化。核心思想是通过建立云和工具的价值链价值流来整合和兼顾。在价值流构建的过程中，提供一些自定义节点，也就是插件化的思路，并且提升开放性，让业务可以自定义工作流程。</p><p>&nbsp;</p><p>从价值流的角度来看，我们的设计思路是三层的。自下而上的三层设计思路对应着不同的目标层级。</p><p>&nbsp;</p><p>在底层，有原子能力或插件，这与业界类似，主要是将工具链通过插件进行集成，从而实现单点提效。如果我们有新的想法或工具可以提高效率，可以将其作为原子能力接入到工作流程中。这样，我们就可以将一些原来需要人工确认的环节变成自动流转的环节，从而提高效率。</p><p>&nbsp;</p><p>在中层，我们通过一个灵活的流水线系统进行串联，这实现了全链路提效。我们打通了不同工具链之间的上下文信息，从而避免了人为干预，可以同时调度多个工具链以达到目标。对于不同的技术栈和服务，我们可以设置不同的流水线来解决它们的问题。比如后端微服务的流水线、前端BFF的流水线、配置发布的流水线，等等。</p><p>&nbsp;</p><p>最上层，我们通过识别业务价值交付流程，将内部所有不同应用和服务之间的子流水线进行归纳，在很多微服务的流水线之上做工作流的整合。例如，安全合规的大阶段需要审核安全卡点、质量门禁等，这些都可以做到最上层的工作流中，实现协同的提效。比如，某个业务的需求涉及多个研发人员、QA以及多个微服务，他们需要一起进行联调和发布。这种活动可以聚合到工作流中。</p><p>&nbsp;</p><p>我们最终实践了三套微服务端的研发流程，最小粒度的应用变更为中心的模型，中等规模的业务需求为角度去交付的工作流以及版本火车的工作流。它们分别对应了不同粒度的工作流刻画。这块比较复杂，时间关系我们不详细展开了。</p><p>&nbsp;</p><p>观众问题：和业界一些企业相比，字节貌似比较重视，也比较早投入到平台工程中，是这样子的吗？</p><p>&nbsp;</p><p>姚志坤：确实，尤其在字节的扩张期，多个业务领域同时发力，规模化的微服务和复杂的研发过程使得我们对工具链的开发需求非常强烈。同时，我们非常注重团队构建，以便更好地支持工具链开发。在字节这样庞大的微服务体系中，任何微小的优化都可能产生巨大的价值。因此，作为基础架构团队，我们一直致力于不断改进工具链，以更好地支持研发团队的工作。</p><p>&nbsp;</p><p>观众问题：国内外的大企业在平台工程的构建思路上是否有很大的区别？</p><p>&nbsp;</p><p>姚志坤：根据我目前的观察，海外的研发工程师更注重底层工具的开发和优化。因此，海外大厂的工具会做得更加可对接。举例来说，一个工具可能是测试系统，并且能够便捷地整合前置构建和后置发布，形成一个完整的工作流程。相比之下，国内的工具链相对复杂，为了提升端到端的体验，通常需要一个整合层或平台层来更好地组合这些工具，为一线研发提供优质的服务。</p><p>&nbsp;</p><p>观众问题：云原生容器化技术和传统 CI/CD如何取舍？比如Jenkins和Teckton。</p><p>&nbsp;</p><p>姚志坤：相较于传统的CI/CD，云原生更加注重标准化和通用性，特别是在容器技术方面，已经形成了一些业界共识和标准化的做法。因此，在云原生环境下构建的工具链更加通用，更快落地最新的工具，而Jenkins系统还是需要研发和工具开发人员编写代码或脚本去连接各种物理机、虚拟机等，而这很难规模化。云原生环境下的容器化技术可以加速工具链的产生和规模化。</p><p>&nbsp;</p><p>杨振涛：可以这样理解，Jenkins和Jenkins X代表两个不同的时代。在传统的CI/CD领域，Jenkins是几乎无人能敌的选择。但是随着云原生时代和Kubernetes的兴起，Jenkins X相对滞后，因此出现了更多的新替代方案。</p><p>&nbsp;</p><p>我们继续讨论。字节的平台工程主要服务哪些规模的用户？除了传统的业务开发工程师外，还包括数据科学家、机器学习工程师和其他不属于传统DevOps服务范畴的人员吗？人员变化会对平台产生什么影响或对体验方面有特殊要求吗？</p><p>&nbsp;</p><p>姚志坤：从效能平台角度来看，主要服务于研发团队，包括研发、QA和SRE。如果从更广泛的平台工程角度来看，也必然包括数据运维这个方面。在效能平台上，我们集成了一些工具，包括数据模型发布等。当然，字节内部也有专门的团队负责数据运维工具链。</p><p>&nbsp;</p><p>理想情况下，平台工程应该面向全链路，使得整个公司的研发资源能够在一个平台上完成研发流程的工作流沉淀。团队结构的变化可能会影响业务交付流程，但是否对平台造成影响，取决于平台是否能够预先设计考虑到这些流程的变化。像效能平台插件式系统，它的工作流是可自定义的。在一定程度上，如果一个团队新增了一个角色，比如SRE，他们可以在平台上进行配置，因此这种情况下平台不需要做太多的调整，也不会对平台造成太多影响。</p><p>&nbsp;</p><p>杨振涛：现在业内有人认为，平台工程会进一步模糊传统的运维、DevOps和开发之间的界限，甚至可能替代运维，您怎么看这个问题？</p><p>&nbsp;</p><p>姚志坤：从技术趋势的角度来看，软件工程是一个分工和分步的过程。正如我前面提到的，编译工程师的角色已经消失，这是很正常的事情。随着技术的复杂性和更高效能的要求，将会出现更多的角色产生或消失。但是这并不会改变这些角色的价值，只是被一些更加自动化的能力或平台替代了。因此，平台工程师的角色应该逐步地去封装运维这个过程。从更大胆的角度来看，编码测试这一过程也在如今AIGC技术的影响下发生着变化，只是这种变化没有那么快或那么明显。</p><p>&nbsp;</p><p>杨振涛：研发效能团队和平台工程团队之间是什么样的关系呢？</p><p>&nbsp;</p><p>姚志坤：研发效能团队和平台工程团队的目标基本相同，都是打造一个集成式的平台。具体方案取决于实际决策，我们通过整合工作流的方式去做工具链的集合。但实际上我们和平台工程的定义还是有较大差异。目前来看，我们的效能平台应该还是一个子集。以字节为例，我们是一个上层封装的SaaS定位，团队没有直接负责编译、发布、测试能力，但与ToB产品类似，我们有更多产品角色，也有专业QA团队、技术运营、产品运营、领域专家等角色。我们不仅提供功能，还有可扩展共建能力、服务解决方案支持、指导业务做效能提升等角色。平台工程团队现在应该也是一个没有共识或定义的问题。团队应包含整合研发、产品、运营、解决方案等角色，除此之外还有一些其他领域，如大数据领域或项目管理领域等。相比效能平台，平台工程是个更大的概念。</p><p>&nbsp;</p><p>观众问题：DevOps都是自己搭建平台吗？有没有小规模的解决方案？</p><p>&nbsp;</p><p>姚志坤：针对我们所在的企业具体情况，涉及到需要在不同阶段考虑对应方案的问题。当没有可用的自建方案时，通常会寻找市场或业界上的工具链。需求管理平台JIRA和代码管理平台GitHub、GitLab等，都在尝试整合全链路的工具链，以实现平台工程的落地。对于规模较小的集成方案，如KubeVela等开源平台也是可行的。但对于像字节这样的大型研发团队，很可能需要定制自己的解决方案，无论是基于开源系统，还是商业化合作，都需要大量的研发工作。</p><p>&nbsp;</p><p>观众问题：集成问题的解决是比较耗时的，有没有应用AI based tracking方案？</p><p>&nbsp;</p><p>姚志坤：如果在整合工具链时出现了上下游的问题，我们需要定位问题所在的位置。对于这个问题，我们在字节内部有一套解决方案，即AIOps。我们的整合方案是通过微服务来实现的。针对业务场景，我们的工具链本身就包含了三个微服务，而我们新增的插件就相当于添加了一个新的微服务。通过这个插件，我们可以将指令调度到三个实际工具的微服务中，从而解决业务问题。通过这个方案，我们还可以使用字节自建trace能力来发现问题。此外，我们还可以与平台方合作，建立一些基本的错误码和反馈机制，并将其纳入监控中，作为一种可选的路径。</p><p>&nbsp;</p><p>观众问题：混沌工程在字节有何最佳实践？</p><p>&nbsp;</p><p>姚志坤：关于混沌工程，可能需要一些专业知识。我作为使用者，可以从我的角度谈一下。混沌工程利用我们环境的能力来注入故障，类似于插件，帮助排查和测试问题。我们可以通过建立一个流水线来实现。首先，我们会启动一个正常的环境，然后使用混沌工程的插件能力来注入一些随机的故障，最后执行Smoke Test来对某个环境或版本进行混沌工程的演练，这个实践在效能平台上的落地。除此之外，混沌工程本身也是一个解决方案，它可以提供一些实践经验。例如，在固定或随机时间点，我们可以在测试环境中注入故障，然后尝试查看需要多长时间来恢复。这是我所了解的关于混沌工程的主要内容。</p><p>&nbsp;</p><p>杨振涛：好的，接下来我们将进入下一个部分。在企业内部，对于平台的需求可能会不断地变化。如果这些需求持续变化，我们需要对其进行评估，如何合理地维护产品的持续演进呢。</p><p>&nbsp;</p><p>姚志坤：是的，平台需求是一个不断变化的过程。因为效能平台或者平台工程就是一个多目标优化的事情，尤其是当业务的团队或者公司拥有多个目标时，比如研发效能，它就需要平衡效率、质量、安全、体验以及实施成本等因素。以字节跳动为例，早期我们开始效能优化时，公司的主要业务是研发，我们主要强调自动化效率以保障质量在适当范围内。但随着用户数量的增加，质量和安全风险也随之增加。这时，我们的效能平台需要开始做一些稳定性工作，例如增加安全审计功能或卡点。虽然这样效率会变低，但是对于大团队来说，降低事故发生的概率可以及时进行止损。</p><p>&nbsp;</p><p>现在主要强调降本增效，我们的目标是尽可能解决核心问题，将主要路径打磨好。除了提高产研效率之外，我们还需要综合考虑优先级。在字节跳动内部，我们维护了一个基于公司现状的长期规划的工程平台。该平台是由效能专家、产品专家和技术专家共同决定的。最终，这些决策形成了一个主线产品路径，我们希望能够沿着这条路径前进。</p><p>&nbsp;</p><p>在与业务对接的过程中，业务需求或技术需求可能会被插入进来。我们的平台是一个从 0 到 100 的发展成熟度过程，而我们的业务不是。一些业务会比其他业务发展得更快，它可能需要一些比平台成熟度更高的研发效能。例如，某些AI检测、风险控制等能力，需要在平台建设到一定程度之后才能实现。</p><p>&nbsp;</p><p>作为支撑所有业务线的横向基础架构团队，我们一定要从全局最优的优先级评估这个问题的优先级。如果业务需要更高的成熟度，我们尽量提前做。但是如果业务有一些特殊性，它可能会提出一些非常局部优先级高的事情。例如，在字节跳动的大多数业务是在线服务的情况下，也有一些业务需要进行ToB的私有化交付，这在短期内很难实现。在这种情况下，我们通常会采取共建策略，让业务投入足够的人力资源。我们的平台也会开放一些接口和资源，来满足业务的特殊需求。在专业性方面，我们需要关注的不仅仅是业务需求，还要关注主线产品的迭代。</p><p>&nbsp;</p><p>对于技术类，通常需要一定比例的投入来支持产品迭代过程中的发展。我们主要考虑ROI，以确保它们不会阻碍主线产品的发展。在研发连续流水线构建量达到1万时，需要从技术角度去预测未来增长的长度，并提前进行压力测试，以确保在3倍构建量的情况下，系统可以承受，并且保留足够的人力资源来支持这方面的需求。总之，我们需要平衡主线产品、业务需求和技术需求的比例，最后根据 ROI 来评估优先级。</p><p>&nbsp;</p><p>杨振涛：如何评估企业平台工程是否实施成功？对一线的开发人员来说，平台工程能给他们带来哪些收益？从企业的角度来讲，又该如何去评估在平台工程方面的投入价值？</p><p>&nbsp;</p><p>姚志坤：这是一个实现落地的问题，因为即使你的平台设计再好看，也无法与解决业务问题的实际效果相比。我认为有三个关键点：首先，需要明确平台解决了业务的哪些问题，并且对整个业务带来了多大的价值。</p><p>&nbsp;</p><p>其次，需要考虑一线使用量有多少，只有经常被使用的平台才能提供更好的反馈。对于一线来说，平台能够带来的价值在于提高其效率。例如，作为开发人员，如何更快地编写代码、更快地模拟环境并提高体验、降低学习成本等。企业可以通过提升整体效率来降低成本、提高效益，例如新员工或社招员工无需太多培训即可使用云基础设施，仅用半天即可开始编写代码。此外，通过集成和集中式优化高频环节或工具链，也可以降低建设成本。</p><p>&nbsp;</p><p>第三，集中管控整体效率是否提高。例如团队的需求交付量是否增加，流程是否更加顺畅等。对于一些进行转型的企业，平台工程能够帮助屏蔽底层技术，降低学习成本，例如可以将业务模型封装起来，以便开发人员更加专注于应用本身，而不必关心部署在虚拟机或容器云上的底层架构。此外，声明式云资源管理可以在页面上完成，而不需要开发人员去学习YAML等技术语言。</p><p>&nbsp;</p><p>杨振涛：从字节的实践经验来看，您觉得平台工程未来的发展趋势会是什么样子？它对企业研发效能和开发者体验会产生什么样的具体影响？</p><p>&nbsp;</p><p>姚志坤：这个话题涉及对未来的预测，我想分享一下我的个人理解。从大局上看，我认为基于平台工程思路和价值观的开发模式毋庸置疑，但我们还需要逐步明确边界和目标。业界对于这个问题尚未形成共识。例如，像字节这样的公司，我们以价值交付流程为主线进行设计，并使用工具流程来表达产品形态。然而，我也听说有一些公司以应用为核心进行设计，即采用不同的设计模型。这需要时间来观察，看最终会变成什么样的方案。</p><p>&nbsp;</p><p>另外，从趋势来看，我认为流程化、智能化和规模化是需要关注和发展的。流程化指的是平台工程未来可能会成为软件研发的超级流水线，就像工业界的流水线一样。随着技术的发展，许多节点将自动化，效率也将不断提高。当达到某个阈值时，一线人员甚至不需要了解底层流水线的运作方式和每个节点的工作内容，只需要一个输入输出即可。从云原生的历史经验来看，我们已逐步忘记了机房、计算机硬件、网络等问题。这是否也是平台工程的趋势呢？只需要少数人关注云的底层和流水线工厂的设计，大多数人只需要关注业务即可。</p><p>第二个趋势是智能化。最近，我们密切关注AIGC场景对基于DevOps基础设施的影响。可以看到，AI对软件研发中的各个节点都有可能产生影响，相当于每个节点的效率都将得到提升。所有工具都有可能被AI重新编写，例如内部的一些工程师正在尝试用AI去完成代码的补全、评审和测试用例的编写。这将使平台工程更加智能化、自动化并且高效。</p><p>&nbsp;</p><p>规模化是实施新技术的前提，而云原生的标准化能够降低建立统一平台的难度。云原生技术的发展对于平台工程带来了重要的变化。然而，云原生也存在一些信息安全和专利问题，这需要一定的时间来解决。随着AI技术、开源系统、节点和原子能力的不断加强，平台工程也将逐渐形成最佳范式，并大规模落地。在未来，企业或开发者可能会逐渐区分业务开发、平台工程和基础设施工程师，从而更好地满足业务需求和产品逻辑，提高开发效率和协作。同时，使用平台工程设计可以更快地实现效率飞跃，而老旧基础设施则可能需要面对更高的维护成本和重构。</p><p>&nbsp;</p><p>观众问题：字节的平台工程都包含了哪些能力？比如自建代码库、自建CI/CD流水线、自建测试、自建安全检测、监控日志链路跟踪、开发人员都可以通过内部平台快速地、自服务地创建这些能力了吗？</p><p>&nbsp;</p><p>姚志坤：如果是针对一个通用平台工程，类似代码库、测试以及各种监控等等的工具，这些工具在字节内部已经有了。我们正在建设一个效能平台，它基于CI/CD的的逻辑，但它实际上已经超越了 CI/CD的范畴。我们正在努力将许多工具链整合进来，并优化工作流程，尽可能整合内部领域的工具。就业务而言，我们确实需要了解监控、日志监控和链路等方面的能力，才能更好地使用这些能力，但我们还没有达到通过一个平台自助地提供这些服务的程度。我们有这样的愿景，希望更好地封装这些能力。</p><p>&nbsp;</p><p>观众问题：测试人员或运维人员如何反哺或者优化能效平台，效能平台如何赋能价值交付？</p><p>&nbsp;</p><p>姚志坤：让我们先谈谈“反哺”。在字节，我们有许多测试系统，包括业务测试和自动化测试工具，这些工具在业务研发过程中得到了同事的支持，形成了集成到平台工程上的插件功能。更多的业务也可以复用这些能力。测试同事以及SRE同事为这些能力做出了贡献，因此这些能力可以在更多的团队中使用。我们还举行了两次开发者大会，介绍了一些优秀的工具，以便让更多的业务方受益。</p><p>&nbsp;</p><p>第二个问题是效能平台如何落地交付价值。在字节，我们有一些效能领域的专家或研发领导作为效能的接口人。在进行效能度量时，我们会产出业务核心指标，这些指标在一定程度上刻画了价值交付过程。我们会度量需求开发、测试和发布阶段的时间周期损耗，并识别关键点，然后进行优化。例如，如果我们希望降低代码回滚率，那么在效能工作流中，我们会增加或减少一些节点、提高准入质量等来实现优化。这样，我们的业务与平台方，或者说效能平台与业务方，可以基于价值流构建，找到落地或优化的路径。</p><p>&nbsp;</p><p>观众问题：如何解决微服务化版本升级兼容问题？</p><p>&nbsp;</p><p>姚志坤：在字节内部，版本兼容有很多解法。微服务的一个标准定义中提到，微服务应该做到版本兼容，也就是说，在升级或降级时，微服务应该考虑与其他微服务的兼容性。然而，在实践过程中，很多企业难以达到每个微服务都是互相兼容的。通常来说，在字节我们需要考虑好领域层面架构设计，使得一个团队管理的多个微服务，对其他团队来说，是做到升级版本兼容的，而团队内部，我们通常会有一些部署依赖方案，例如将业务的微服务上下游的依赖串联在同一个流水线中，以规避兼容性问题。两个前后端微服务相互依赖，一个前端微服务在发布变更时，会优先保证后端微服务的变更，以避免兼容性问题。</p><p>&nbsp;</p><p>观众问题：最后一个问题涉及到人的问题，开发人员只需要关注开发吗？运维方面的事情就不需要管了吗？但是在我们这里，开发人员也需要负责运维工作。</p><p>&nbsp;</p><p>姚志坤：这似乎是平台工程希望解决的一些问题。通过平台工程的协助，即使你不懂运维，也能够轻松地完成运维的任务，而且不会感到运维这个工作非常复杂。例如，你可以通过平台自动帮你编写测试用例并测试系统来获得更好的体验。</p><p>&nbsp;</p><p>杨振涛：事实上，这也是平台工程的本质，即知识转移，使得不了解某个领域的人可以通过使用平台获得该领域的能力。</p><p>&nbsp;</p><p>非常感谢今天的嘉宾老师志坤，我们的访谈到此结束，感谢老师分享，也感谢大家的收听。</p><p>&nbsp;</p>",
    "publish_time": "2023-05-08 16:07:53",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]