[
  {
    "title": "架构师（2023年5月）",
    "url": "https://www.infoq.cn/article/8Clm9p89lQI4K296qim6",
    "summary": "<h2>卷首语</h2>\n<p>作者 | 褚杏娟</p>\n<p>通常意义上来讲，Serverless 可以看作是一种云计算服务模型，它允许开发者在不需要管理服务器的情况下通过事件驱动的方式运行代码。与传统应用服务开发模式不同，开发者只需编写并上传他们的应用代码到云服务商提供的平台上，云平台会自动为应用分配资源，并处理应用的部署、扩缩容。这使得开发者可以更加专注于自己的业务需求和应用逻辑，而不需要考虑服务资源的申请、创建、管理和维护等。</p>\n<p>从这个意义上讲，我们也可以认为 Serverless 是一个计算范式，它解决资源托管、调度、运维管理等一系列平台型问题，可以看作是 DevOps 的进一步延伸。</p>\n<p>从应用开发视角来看，Serverless 包括 FaaS (Function as a Service) 和 BaaS (Backend as a Service) 两部分。在 FaaS 中，开发者编写的代码会被封装成一个或多个函数，运行在云平台上。当请求到达时，云平台自动为函数分配计算资源，拉起函数并执行。执行完成后，平台根据一定的保活策略决定资源的复用或者释放。FaaS 模型不仅可以提高应用的可伸缩性和弹性，还可以大幅降低应用运维的成本。BaaS 则致力于更广泛意义下的 Serverless 化，包括对象存储、缓存、数据库、消息等全栈后端服务的按需弹性、按用付费等。</p>\n<p>谈到 Serverless 发展历程，从 2008 年 Google 推出 App Engine 算起，至今已有 15 年的时间，期间经历了多次迭代，主要经历了以下几个阶段。</p>\n<p>Innovators（2008 年~2014 年）：Google App Engine 的发布，使得开发者无须再关心资源分配，也无需关心底层操作系统、硬件和网络等基础设施，对传统应用开发方式具有变革性意义，但 App Engine 并没有使 Serverless 理念流行起来，Serverless 概念本身是在 2012 年由 Iron.io 公司率先提。2014 年 AWS 发布 Lambda 之后，真正使 Serverless 流行起来。</p>\n<p>Early Adoptors（2016 年~ 2018 年）：这期间，主流云计算平台陆续推出了 Serverless 系列产品，如 Microsoft Azure 发布 Azure Functions、Google Cloud Platform 发布 Cloud Functions 和 Firebase、华为云发布 FunctionGraph 等。2018 年 Gartner 将 Serverless 列为“十大未来将影响基础设施和运维的技术趋势之一”。</p>\n<p>Early Majority（2019 年~ 今）：2019 年 UC Berkeley 发表论文《Cloud Programming Simplified：A Berkeley View on Serverless Computing》，预言 Serverless 将成为云计算下一代的编程范式，提出 Serverless = FaaS + BaaS 的定义框架, 并提出存储等后端的 BaaS 化、异构硬件支持、资源细粒度隔离等 Serverless 的核心问题。同期，华为云提出通用 Serverless（General-purpose Serverless）的理念，支持有状态应用、程序自动并行、大规模异构资源管理等，帮助企业解决更广泛的计算、运行与交付问题。</p>\n<h2>目录</h2>\n<p><strong>热点 | Hot</strong><br />\n谷歌正式发布 WebGPU！90 多位贡献者研发 6 年，浏览器终于可以利用底层硬件了<br />\nChatGPT 已过时？Auto-GPT 迅速走红，无需人类插手自主解决复杂任务，GitHub 标星 5 万<br />\n马斯克开源 Twitter 算法！推荐机制正式公开，GitHub Star 数已破万<br />\nCV 又卷起来了！Meta AI 开源万物可分割 AI 模型，11 亿 + 掩码数据集可提取</p>\n<p><strong>访谈文章 | Interview</strong><br />\n用 C++ 写出比 MySQL 快 800 倍的数据库，ClickHouse 创始人：融合数据库该“卷”的还是性能和速度<br />\n人口不足千万、芯片厂近 200 家，以色列技术人如何在芯片领域“挖金山”？| 独家对话 Pliops 创始团队<br />\n在全球掀起史诗级的狂欢，ChatGPT 真正颠覆了什么 ？| 深度</p>\n<p><strong>案例研究 | Case Study</strong><br />\n从石器时代到成为“神”，一文讲透 eBPF 技术发展演进史<br />\n浅析三款大规模分布式文件系统架构设计<br />\n赋能直播行业精细化运营，斗鱼基于 Apache Doris 的应用实践<br />\n基于 Vue 和 Canvas，轻舟低代码 Web 端可视化编辑器设计解析 | 低代码技术内幕<br />\n云原生时代，如何建设稳定性可观测体系？</p>\n<p><strong>推荐文章 | Article</strong><br />\n弃用 Electron，微软重新设计 Microsoft Teams：速度提升 2 倍，内存减少 50%<br />\n裁员潮过去、削减中层管理潮又来了：升管理保饭碗，不灵了<br />\n云原生时代，Java 会走向末路吗？<br />\n农牧数字化：IT 要冲到前面去引领，“天花板”才能被打开</p>\n<p><strong>特别专题｜Topic</strong><br />\n备受云厂商们推崇的 Serverless，现在究竟发展到什么水平了？<br />\n从公有云方案转向谷歌开源 Knative，网易云音乐的 Severless 演进实践<br />\n探索 17 年，亚马逊云科技重新定义 Serverless<br />\n新一代 Serverless 事件中间件 EventMesh 正式毕业为 Apache 顶级项目</p>\n<p><strong>特别专栏 | Video</strong><br />\n本月，这些视频值得一看！</p>",
    "publish_time": "2023-05-08 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Swift 5.8新特性预览：支持函数向后部署",
    "url": "https://www.infoq.cn/article/QAEbWTtfJg0IUUKs7tcg",
    "summary": "<p><a href=\"https://www.swift.org/blog/swift-5.8-released/\">Swift的最新版本</a>\"支持即将到来的新特性，让开发人员可以开始使用将在Swift 6中变成稳定版本的特性。此外，它还提供了一种方法，让开发人员可以在早期操作系统中使用新功能。</p><p>&nbsp;</p><p>Swift 5.8之所以支持即将到来的语言特性，主要是为了让开发人员可以开始为程序迁移做准备。Swift团队成员Alexander Sandberg说，考虑到Swift 6的许多特性造成了某种程度的源代码不兼容，这一点尤其重要。此外，支持新特性还可以帮助苹果收集早期用户的反馈。</p><p>&nbsp;</p><p>新的编译器标志-enable- coming-feature X可以控制是否启用对即将到来的特性的支持，其中X是要启用的特性。目前，在Swift 5.8中，有4个即将到来的特性可以选择性地启用：<a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0274-magic-file.md\">简略魔法文件名</a>\"、尾随闭包前向扫描匹配、<a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0335-existential-any.md\">存在类型any</a>\"，以及<a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0354-regex-literals.md\">正则表达式字面量</a>\"。</p><p>&nbsp;</p><p>在使用即将到来的特性之前，可以使用新增的#if 检查确保它确实可用：#if hasFeature(ImplicitOpenExistentials)。需要的时候，可以将它与compiler(&gt;=x.y) 检查一起使用。</p><p>&nbsp;</p><p>Swift 5.8还引入了对@backDeployed属性的支持，目的是为了方便开发人员将新功能向后移植到框架的旧版本。例如，可以通过扩展添加新功能，并使用众所周知的@available和新增的@backDeployed属性进行注解：</p><p><code lang=\"swift\">extension FrameworkAPI {\n  @available(FrameworkAPIVersion 1.0, *)\n  @backDeployed(before: FrameworkAPIVersion 2.0)\n  public func newCapability(...) -&gt; ResultType { ... }\n}</code></p><p>&nbsp;</p><p>在所提供的示例中，newCapability函数仅在FrameworkAPI的2.0版本中有原生支持，但是使用@backDeployed属性，开发人员可以提供该功能的实现，并注入到框架的先前版本中。</p><p>&nbsp;</p><p>这个新特性旨在方便开发人员创建弹性库，并且只能应用于函数、方法、下标和计算属性。例如，这种机制不支持新类型。此外，向后部署的函数体必须遵守与@inlinable函数相同的限制，例如，它们只能引用客户端可访问的声明，如public和@usableFromInline声明。</p><p>&nbsp;</p><p>Swift 5.8带来的另一项重大变化修改结果构建器实现，改进了它的编译时性能、代码补全结果和诊断。具体来说，新实现利用了Swift 5.7的<a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0326-extending-multi-statement-closure-inference.md\">扩展多语句闭包推断</a>\"，优化了编译器类型推断和错误消息。特别是，它<a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0373-vars-without-limits-in-result-builders.md\">移除</a>\"了在结果构建器中声明局部变量的几个限制，例如需要有初始化器，而且没有提供对计算变量、观察器和属性封装器的支持。</p><p>&nbsp;</p><p>Swift 5.8还带来了很多变化，要了解完整细节，请查阅官方公告。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/04/swift-5-8-released/\">https://www.infoq.com/news/2023/04/swift-5-8-released/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/AHUamwkJ3fqljoliPKHa\">苹果现已支持&nbsp;Swift&nbsp;包索引</a>\"</p><p><a href=\"https://xie.infoq.cn/article/e6e0811181133d4895e2041ac\">Rust、Go&nbsp;和&nbsp;Swift&nbsp;在性能和并发性方面有何差异？</a>\"</p><p><a href=\"https://www.infoq.cn/article/fm6b2sg8QHUrDS6GhK48\">Swift&nbsp;2023：所有权、宏和 C++ 互操作</a>\"</p>",
    "publish_time": "2023-05-08 09:45:39",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]