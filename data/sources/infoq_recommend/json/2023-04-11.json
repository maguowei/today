[
  {
    "title": "ThoughtWorks CTO：2025年之前，我们会看到架构的演进，但不会看到革命",
    "url": "https://www.infoq.cn/article/XYlKxH5f3GjBflH31z9h",
    "summary": "<p>在<a href=\"https://qconlondon.com/\">QCon伦敦会议</a>\"的第二天，ThoughtWorks的CTO<a href=\"https://www.linkedin.com/in/rebecca-parsons-871491/\">Rebecca Parsons</a>\"重新审视了<a href=\"https://qconlondon.com/presentation/mar2023/how-will-evolutionary-architecture-evolve\">演进式架构（evolutionary architecture）的理念并设想了在2025年前它将会出现的变化</a>\"。她从演进式架构的定义开始，回顾了每项“能力”和属性，预测了在下一个阶段将会发生的变化。她的结论是，我们会看到演进，但不会看到革命。</p><p></p><p></p><blockquote><a href=\"https://www.thoughtworks.com/en-gb/insights/books/building-evolutionary-architectures\">演进式架构</a>\"支持在多个维度上有指导性的、渐进式的变化。</blockquote><p></p><p></p><p>Parsons解释了为何采用演进这个词而不是敏捷或涌现。在与“演进式架构”一书的合著者Neil Ford进行了一次建设性、强有力的对话后，这个名字被确定了下来。最初，Ford将这种做法称为“涌现式（emergent）”架构。虽然在代码方面，“好”与“坏”相对比较容易达成一致，但在架构方面就并非如此了。定义的指南部分指出了好的架构要有哪些部分组成。</p><p></p><p></p><blockquote>这就是我们引入<a href=\"https://en.wikipedia.org/wiki/Fitness_function#%3a~%3atext=A%20fitness%20function%20is%20a,to%20achieving%20the%20set%20aims.\">适应度函数（fitness function）</a>\"的原因。适应度函数是一个特定的系统在多大程度上反映所需的行为特征的客观描述。</blockquote><p></p><p></p><p>随后，Parsons着重强调了可执行的重要性：在通往生产化的道路上，如何渐进式地增加新的特性并提供可行的机制？</p><p></p><p></p><blockquote>演进式架构的重要实践和推动力之一就是与<a href=\"https://en.wikipedia.org/wiki/Continuous_delivery\">持续交付</a>\"和最终的<a href=\"https://en.wikipedia.org/wiki/Continuous_deployment\">持续部署</a>\"一同实现严谨性和自动化。</blockquote><p></p><p></p><p>这些适应度函数应该被纳入到部署流水线中。</p><p></p><p>定义的最后一部分强调的是多维度方面。她使用一张幻灯片展示了几年前维基百科上的“能力（-ilities）”列表。这个列表后来有了一些变化，例如，更加注重可观测性。列表中的一个谬误是，我们无法最大化所有的能力，因为其中有些能力是互斥的：“有些系统是一次性的，不关心可演进性”。</p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/news/2023/03/evolutionary-architecture-2025/en/resources/1ilities-1680043256351.jpg\" /></p><p></p><p>接下来，Parsons谈到了如今演进式架构的原则，并预测了它们在未来两年的发展。</p><p></p><p></p><blockquote>个人认为，我们第一次尝试SOA的失败原因之一就是我们在系统周围画了边界。比我们围绕概念画出的边界更多。</blockquote><p></p><p></p><p>最后的责任时刻：为了尽可能多地掌握系统的信息，我们想把决定推迟到最后的责任时刻（responsible moment）。需要做的权衡转换成了“能力”和适应度函数。</p><p></p><p>为可演进性而设计和开发：如果可演进性对你的系统很重要，那么它不仅对你如何编写代码很重要，而且对你如何结构化代码也很重要。</p><p></p><p></p><blockquote>可读性是关键，这就是优质软件指标的作用所在。[...]这就是我们谈论边界、耦合和内聚的时候。</blockquote><p></p><p></p><p>Postel定律：对收到的东西要慷慨，对发送的东西要谨慎。</p><p></p><p></p><blockquote>如果你只需要一个邮政编码，就不要验证收到的地址。这样，如果我决定把它分成两行，你就不需要在意它了。</blockquote><p></p><p></p><p>可测试性架构：测试某项功能的能力以及某项功能的可测试性如何，很好地说明了你的边界划分是否合理。如果你专注于测试金字塔的所有层次，你就会有更好的系统架构。</p><p></p><p>康威定律：可怕的人的问题。任何系统都会反映出所有组织的沟通情况。</p><p></p><p></p><blockquote>如果你想要一个三阶段的流水线，你必定有三个小组。</blockquote><p></p><p></p><p>最后，她谈到了这些原则在未来两年内会受到怎样的影响。根据Parsons的说法，“最后的责任时刻”和Postel定律都不会受到影响。</p><p></p><p>即使这些原则保持不变，但会有更多的创新，从而能够建立起更强大、更具“免疫性”的系统。不仅仅物联网、增强或虚拟现实等系统的复杂性中会融入创新，更多的创新将发生在机器学习模型的测试方式上。人工智能辅助开发会促进不同类型的开发技术的发展，如测试优先开发（Test First Development），即开发人员编写测试，人工智能生成代码，或其他方式。</p><p></p><p>所有这些都将通过增强持续部署流水线、增加对生产中测试的依赖以及扩大适应度函数和方法套件来实现。</p><p></p><p>她在演讲结束时这样总结说：</p><p></p><p></p><blockquote>这些原则自始至终都是不变的，目前还没有迹象表明我们遗漏了什么原则。实践会不断发展，但不会有根本性的改变[......]即使创新会改变工具，但原则是不变的。演进式架构会继续发展，但不太可能会迎来一场革命。</blockquote><p></p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/03/evolutionary-architecture-2025/\">Rebecca Parsons - ThoughtWorks CTO: By 2025 We'll See Evolution in Architecture, But Not Revolution</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/minibook/sihSN688wdNINfNNTWKu\">架构师（2023 年 4 月）</a>\"</p><p><a href=\"https://www.infoq.cn/article/J3ulcioRIXNfR0HDtZjr\">浅析三款大规模分布式文件系统架构设计</a>\"</p><p></p>",
    "publish_time": "2023-04-11 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]