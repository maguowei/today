[
  {
    "title": "Spotify 的平台迁移经验：从小事做起，关注利益相关者，寻求自动化",
    "url": "https://www.infoq.cn/article/wtufrhBsNxaTlJi70DCK",
    "summary": "<p>在管理不断壮大的开发团队与愈发复杂的代码库的同时，还要提供更快也更可靠的交付，这似乎是飞速发展的科技公司都难逃的挑战，对平台团队而言也是一样。在代码库和组织不断增长的现状下，我们要如何快速推陈出新、更安全地引入新技术呢？</p><p></p><h3>问题域</h3><p></p><p>从2019年的29%，2020年的49%，到2021年的23%，Spotify的移动端代码库规模一直在急速扩大。随着我们在业务上的扩展，Spotify Live等新体验的加入，代码库也在不断演化。而于此同时，Spotify也在不断招收新工程师，致使移动端代码库的修改次数逐渐增加。</p><p>&nbsp;</p><p>我们的移动工程策略项目于一年半前发起了一项倡议，通过多次迁移让客户端功能得以在独立环境中进行开发，类似于后端微服务。</p><p>&nbsp;</p><p>自此之后，我们将系统与约2,200个安卓及iOS组件相关联，将大部分安卓与iOS代码库迁移至谷歌的开源构建系统<a href=\"https://bazel.build/\">Bazel</a>\"进行构建。这一大工程影响了公司上下上百的项目组。</p><p></p><h3>主要难点</h3><p></p><p>我们认为，代码库和组织规模的增长与复杂性的加剧将会是迁移的主要难点所在。如果我们期望能在Spotify的移动端高效且规模化交付平台解决方案，就需要常态化迁移所带来的挑战。</p><p>&nbsp;</p><p>以下是我们在迁移路上所遇到的挑战，其中囊括了场景和问题表征，以及面对问题时应当避免或鼓励的行为。</p><p></p><h4>挑战之一：界定范围</h4><p></p><p>如何在创造变化并提出可支持大部分用例的标准化架构解决方案的同时，不影响其他用例？</p><p>&nbsp;</p><p>场景：</p><p>这一范围看似很广，给人一种无数用例亟待处理的感觉。在面对大量的技术债务、需要的改动、需要支持的用例时，往往会让人无从着手。利益相关者们即使是在多次询问后，也还是对迁移时自己要做的事云里雾里。</p><p>&nbsp;</p><p>应避免：</p><p>在还未确定所有可能情况之前便试图推出解决方案。在尚未预估路线图或成功的界定之前便开始大规模迁移。在没有明确定义利益相关者需要做的事之前便接触他们。</p><p>&nbsp;</p><p>应鼓励：</p><p>清楚目标。在产品简介中写明你的原因、方法，以及目的。注重价值。价值的转变是很耗时的，但需要的时候也要对其调整以适应你的目标。应对受众。了解受众的心智模式才能给出相关的回应、对接他们的需求，并寻找到合适的代理以扩大自己的影响。从小事做起。创建一份概念证明，和利益相关者们核对其内容，并让迁移经历alpha、beta，以及GA产品循环。从最常见的用例开始，随进展不断添加新发现的用例。这一步会让你收到足够的反馈，并渐渐能够支撑不同用例情况。合作！在早期阶段，合作是关键。寻找愿意积极试用早期解决方案的人，他们将成为自己群组内的传播者。这点最后也将助力于方案的可扩展性。&nbsp;</p><p></p><h4>挑战之二：扩大规模</h4><p></p><p>在飞速扩张的组织内，我们要如何才能更快地推动大型架构和基础设施的变化？</p><p>&nbsp;</p><p>场景：&nbsp;</p><p>大量项目组将会受变动影响（超过百个项目组）工作量巨大。其中包括迁移中途需要团队手动重构的任务进展缓慢。涉及无数利益相关者与依赖关系利益相关者被进行中的迁移工作重担压垮</p><p>&nbsp;</p><p>应避免：</p><p>认为大型组织中的大型基础设施和架构中的变动是不可能或不需要的在进行架构或基础设施变动时要缓慢前行</p><p>&nbsp;</p><p>应鼓励：</p><p>关注利益相关者的管理。明确不同利益相关者的优先级，通过邮件或Slack等形式保持联络，并将自己工作的重点相告知。沟通。通过邮件及工作区发帖将自己的进度共享，让受众保持参与感。寻求自动化。预先投入的自动化会简化迁移进程。我们是否需要重构代码？是否能通过脚本将重复步骤自动化？为敏捷的spike周腾出时间。团队与贡献者组队，用一周时间协同合作迁移。通过不同资源提升影响力。培训项目可以帮助团队了解迁移和新的概念，从而能够立刻将其投入应用。在公司的入职计划中介绍公司的工程实践，让新员工能从一开始就理解并遵循所推荐的最佳实践。</p><p></p><h4>挑战之三：事件优先级</h4><p></p><p>平台团队是需要努力减少技术债务并引入新技术，还是要让其对自己代码质量负责？这二者之间要如何平衡？</p><p>&nbsp;</p><p>场景：</p><p>利益相关者参与了优先级更高的项目，而无暇采用你的解决方案。利益相关者认为平台迁移拖慢了他们的脚步，缺乏采用新技术的动力。项目被稀释，推动迁移进行的团队没有动力，甚至有成员选择离开团队。必要的代码修改与迁移方向相左。</p><p>&nbsp;</p><p>应避免：</p><p>自信利益相关者明白迁移的重要性和影响程度，并将其优先处理。实际上他们也有很多其他任务要处理。放弃。“我们忙于抢占更高优先级”，这是个平台迁移中很常见的放弃理由。认为指标和目标是固定且很难变动的。</p><p>&nbsp;</p><p>应鼓励：</p><p>应激励，向利益相关者展示迁移的积极影响，鼓励他们完成迁移任务。持续评估。季度内定期的检查点可以评估迁移进行的速度，判断是否能达成季度、半年度或年度的指标。风险管理。如果迁移进展过慢，要如何调整方法以达成目标？是否能精简流程？是否需要更多工程师？能否雇佣承包商？能否影响其他团队，把自己的任务加入他们积压的工作之中？替平台承担。可能的情况下，为组织做出必要变动，以便组织能专注于为用户创造价值。密切关注与迁移KPI相违背的变动，建立与团队之间的渠道以提供支持。</p><p>&nbsp;</p><p></p><h4>挑战之四：承担责任</h4><p></p><p>如何才能在需要大量变动和重构基础设施的新技术采用过程中，让团队承担起责任？</p><p>&nbsp;</p><p>场景：</p><p>在新技术的采用过程中缺乏责任感，导致迁移进展缓慢。</p><p>无法预估迁移何时结束。</p><p>&nbsp;</p><p>应避免：</p><p>在驱动大量改动时指望内外部能保持一致性。认为基础设施上的变动和影响很难衡量。</p><p>&nbsp;</p><p>应鼓励：</p><p>明确“完成”的定义。借助数据和趋势图给出预测。我们需要清楚自己的出发点和进展速度，才能预估未来的趋势，并确定是否需要调整策略以加快迁移进展。进度展示。掌控成功的定义且不断沟通，才能保持受众参与并接受我们所做的变动。使用看板。通过指标和看板沟通进展和影响，并规模化确定一段时间内的工作优先顺序。维护时间线并实时更新路线图。随着时间的推移，团队和利益相关者可能会有变动，他们需要了解我们的迁移进程和时间线。路线图也有助于透明化，让反馈和协作成为可能，也能帮助发现障碍。</p><p></p><h3>结论</h3><p></p><p>这种性质和规模的迁移工作可能会成为未来的常态，若非如此，公司可能将无法执行特定的变动。新科技将会不断出现，迁移也将成为必然，但我们也应减少这些动作对团队的干扰。有的平台产品或许会让迁移无可避免，且可能会规模不小，我们应将其与测试、设计共同视作是开发周期的一部分。</p><p>&nbsp;</p><p>我们从这项工作中学到了很多，希望这些经验能对其他团队的大型迁移有所帮助。如果你想了解更多关于我们所遇到的挑战和相应的解决方法，请随时联系我们。</p><p>&nbsp;</p><p>特别感谢Marvin、Foundation、BoB，以及Rubik，为我们的工作提供助力。</p><p></p><p>原文链接：</p><p><a href=\"https://engineering.atspotify.com/2022/11/strategies-and-tools-for-performing-migrations-on-platform/\">Strategies and Tools for Performing Migrations on Platform</a>\" </p><p></p>",
    "publish_time": "2024-01-30 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "KSP2 致力于改善 Kotlin 元编程，并添加对 K2 Kotlin 编译器的支持",
    "url": "https://www.infoq.cn/article/PPC5WXDEyXlVoS18ZGP9",
    "summary": "<p>KSP 2.0 是 Kotlin 符号处理（Kotlin Symbol Processing）的演进版本，目前处于预览状态，谷歌的软件工程师 Ting-Yuan Huang 和 Jiaxiang Chen 说到，它引入了新的架构，旨在解决 KSP 1.0 中的一些局限性，并增加了对新的 K2 Kotlin 编译器的支持。</p><p></p><p>KSP1 是作为编译器插件的形式实现的，而 KSP2 是一个独立的库，无需设置编译器即可运行，并能完全控制其生命周期。Huang 和 Chen 说，这使得以编程方式调用 KSP 以及在 KSP 处理器中设置断点变得更容易。下面的代码展示了如何配置 KSP2 并执行它来处理符号的列表：</p><p></p><p><code lang=\"kotlin\">val kspConfig = KSPJvmConfig.Builder().apply {\n  // All configurations happen here.\n}.build()\nval exitCode = KotlinSymbolProcessing(kspConfig, listOfProcessors, kspLoggerImpl).execute()\n</code></p><p></p><p>KSP2 中另外一个值得注意的差异是，它使用了仍处于 beta 状态的 Kotlin K2 编译器来处理源码。不过，如果你愿意的话，也可以通过在gradle.properties中设置languageVersion属性，从而以 K1 的方式使用 KSP。</p><p></p><p>除此之外，KSP2 还旨在解决 KSP1 中的一个缺陷，即同一个源文件可能会被编译多次。借助与 K2 的集成，KSP2 尝试调整 K2 编译文件的方式，使其只处理一次，从而能够提升性能。</p><p></p><p>KSP2 还引入了一些行为的变化，以提高开发人员的工作效率，以及可调试性和错误恢复能力。</p><p></p><p>在 KSP 1.0.14 或更新的版本中，可以在gradle.properties中使用一个标记来启用新的 KSP 预览版本：</p><p></p><p></p><blockquote>ksp.useKSP2=true</blockquote><p></p><p></p><p>KSP 是一个支持创建插件来扩展 Kotlin 编译器的 API。它以独立于编译器的方式理解 Kotlin 的语言特性，如扩展函数、声明处型变（declaration-site variance）和局部函数。</p><p></p><p>该 API 根据 Kotlin 语法在符号层对 Kotlin 程序结构进行建模。当基于 KSP 的插件处理源程序时，处理器可以访问类、类成员、函数和相关参数等构造结构，而 if 代码块和 for 循环等则无法访问。</p><p></p><p>这使得基于 KSP 的插件不像建立在kotlinc之上的插件那样脆弱，后者功能更强大，但是严格依赖于编译器的版本。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2024/01/ksp2-kotlin-metaprogramming/\">https://www.infoq.com/news/2024/01/ksp2-kotlin-metaprogramming/</a>\"</p>",
    "publish_time": "2024-01-30 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]