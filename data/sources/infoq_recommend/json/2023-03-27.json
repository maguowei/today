[
  {
    "title": "WireMock Spring Boot将简化Spring Boot应用的WireMock配置",
    "url": "https://www.infoq.cn/article/JtADhFJ2VYuoDT4BqkeF",
    "summary": "<p><a href=\"https://wiremock.org/\">WireMock</a>\"是一个构建API mock的灵活工具，新的<a href=\"https://github.com/maciejwalkowiak/wiremock-spring-boot\">WireMock Spring Boot</a>\"简化了Spring Boot应用中基于JUnit的集成测试的WireMock配置。</p><p></p><p><a href=\"https://www.linkedin.com/in/maciejwalkowiak/\">Maciej Walkowiak</a>\"是一位自由职业的架构师和开发者，他在2023年2月<a href=\"https://twitter.com/maciejwalkowiak/status/1630248586557673472\">发布了</a>\"第一个版本WireMock Spring Boot。该项目会自动配置Spring环境属性，并提供一个完全声明式的WireMock设置。另外，还可以使用多个<a href=\"https://javadoc.io/doc/com.github.tomakehurst/wiremock/latest/com/github/tomakehurst/wiremock/WireMockServer.html\">WireMockServer</a>\"实例，每个HTTP客户端对应一个实例。最近，这个新的工具不会向Spring应用上下文中发布额外的bean，但是会将它们保存在于应用上下文关联的独立存储中。</p><p></p><p>添加如下Maven依赖之后就可以使用WireMock Spring Boot：</p><p></p><p><code lang=\"java\">\n    com.github.maciejwalkowiak.wiremock-spring-boot\n    wiremock-spring-boot\n    0.1.0\n    test\n\n</code></p><p></p><p>目前，Maven Central仓库中还没有提供这个依赖，但是可以通过Git的<a href=\"https://jitpack.io/\">JitPack</a>\"包仓库来使用它。在第一次请求时，JitPack会从Git仓库下载代码，并构建代码以提供构建制品（artifact），比如JAR文件。如果想了解更多信息的话，请参阅JitPack的<a href=\"https://docs.jitpack.io/\">文档</a>\"。</p><p></p><p>在制品发布到Maven Central仓库之前，我们应该在_pom.xml_中添加如下的JitPack仓库：</p><p></p><p><code lang=\"java\">\n    \n        jitpack.io\n        https://jitpack.io\n    \n\n</code></p><p></p><p>使用<a href=\"https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/context/SpringBootTest.html\">@SpringBootTest</a>\"注解的测试，以及其他使用<a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/junit/jupiter/SpringExtension.html\">SpringExtension</a>\"类的注解测试，可以使用 <a href=\"https://github.com/maciejwalkowiak/wiremock-spring-boot/blob/main/wiremock-spring-boot/src/main/java/com/maciejwalkowiak/wiremock/spring/EnableWireMock.java\">@EnableWireMock</a>\"注解进行标注，该注解会启用<a href=\"https://github.com/maciejwalkowiak/wiremock-spring-boot/blob/main/wiremock-spring-boot/src/main/java/com/maciejwalkowiak/wiremock/spring/WireMockSpringExtension.java\">WireMockSpringExtension</a>\"并添加测试上下文定制器。我们可以使用<a href=\"https://github.com/maciejwalkowiak/wiremock-spring-boot/blob/main/wiremock-spring-boot/src/main/java/com/maciejwalkowiak/wiremock/spring/ConfigureWireMock.java\">@ConfigureWireMock</a>\"来配置mock，它会创建一个<a href=\"https://javadoc.io/doc/com.github.tomakehurst/wiremock/latest/com/github/tomakehurst/wiremock/WireMockServer.html\">WireMockServer</a>\"，并使用**property**指定的名称来作为环境属性的名称，这样的环境属性可以用来检索WireMockServer：</p><p></p><p><code lang=\"java\">@SpringBootTest\n@EnableWireMock({\n        @ConfigureWireMock(name = \"studentservice\", property = \"studentservice.url\")\n})\nclass StudentControllerTest {\n    @Autowired\n    private Environment environment;\n\n    @WireMock(\"studentservice\")\n    private WireMockServer wireMockServer;\n\n    @Test\n    void studentTest() {\n        environment.getProperty(\"studentservice.url\");\n        wireMockServer.stubFor(get(urlEqualTo(\"/student\"))\n            …\n\n    }\n}\n</code></p><p></p><p>在上述的样例中，我们使用**environment.getProperty(\"studentservice.url\")方法来检索WireMockServer**实例的URL。</p><p></p><p>WireMock<a href=\"https://wiremock.org/docs/extending-wiremock/\">扩展</a>\"可以通过配置注解中的**extensions**参数进行配置：</p><p></p><p><code lang=\"java\">@ConfigureWireMock(extensions = { … }, …)\n</code></p><p></p><p>默认情况下，包含映射文件的classpath目录会被设置为_wiremock/{server-name}/mappings_，但是也可以通过配置注解中的**stubLocation**参数进行变更：</p><p></p><p><code lang=\"text\">@ConfigureWireMock(stubLocation = \"customLocation\", …)\n</code></p><p></p><p>相对于<a href=\"https://github.com/spring-cloud/spring-cloud-contract/tree/main/spring-cloud-contract-wiremock\">Spring Cloud Contract WireMock</a>\"，WireMock Spring Boot的优势在于自动设置的Spring属性和多个 **WireMockServer**实例的声明式配置。但是， <a href=\"https://github.com/spring-cloud/spring-cloud-contract/tree/main/spring-cloud-contract-wiremock\">Spring Cloud Contract WireMock</a>\"支持契约测试、REST文档以及其他的特性。</p><p></p><p>WireMock Spring Boot使用了Spring Cloud Contract WireMock和<a href=\"https://github.com/skuzzle/spring-boot-wiremock\">Spring Boot WireMock</a>\"项目以及<a href=\"https://rieckpil.de/spring-boot-integration-tests-with-wiremock-and-junit-5/\">“使用WireMock和JUnit 5进行Spring Boot集成测试”</a>\"这篇文章的概念和想法。关于该项目的更多信息，可以在<a href=\"https://github.com/maciejwalkowiak/wiremock-spring-boot/\">GitHub</a>\"上找到。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/03/wiremock-spring-boot/\">WireMock Spring Boot Simplifies the WireMock Configuration for Spring Boot Applications</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/KUFfYLk4zWcQ1VZXflpp\">Just：Spring Boot 应用的新命令行界面</a>\"</p><p><a href=\"https://www.infoq.cn/article/aVZBQSZYiCA5PhzA3EDy\">Spring Authorization Server 1.0 提供了 OAuth 2.1 和 OpenID Connect 1.0 实现</a>\"</p>",
    "publish_time": "2023-03-27 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]