[
  {
    "title": "InfoQ 2022 年趋势报告：Java 篇",
    "url": "https://www.infoq.cn/article/vl9UfPTm6oOPAUgYpN5c",
    "summary": "<p>本报告概述了InfoQ Java编辑团队目前是如何看待Java领域内的技术采用和新兴趋势的。</p><p>&nbsp;</p><p>我们重点关注Java，以及相关的语言（如Kotlin和Scala）、Java虚拟机（JVM）和基于Java的框架和工具。</p><p>&nbsp;</p><p>我们讨论了核心Java的发展趋势，比如新版本Java的采用，以及<a href=\"https://spring.io/projects/spring-framework\">Spring Framework</a>\"、<a href=\"https://jakarta.ee/\">Jakarta EE</a>\"、<a href=\"https://quarkus.io/\">Quarkus</a>\"、<a href=\"https://micronaut.io/\">Micronaut</a>\"、<a href=\"https://helidon.io/\">Helidon</a>\"、<a href=\"https://microprofile.io/\">MicroProfile</a>\"和<a href=\"https://microstream.one/\">MicroStream</a>\"等框架的发展。</p><p>&nbsp;</p><p>本报告有两个主要目标：</p><p>&nbsp;</p><p>协助技术负责人制定中长期技术决策。帮助个人开发者将宝贵的时间和资源投入到可以学习和发展技能的地方。</p><p>&nbsp;</p><p>这是我们发布的第四份Java趋势报告。自2006年以来，我们一直在内部跟踪Java和JVM的发展趋势，这个话题已经有大量的新闻报道。</p><p>&nbsp;</p><p>为了更好地了解InfoQ和QCon报道的关于当前和未来的发展趋势，我们使用了<a href=\"http://www.geoffreyamoore.com/\">Geoffrey Moore</a>\"在同名<a href=\"https://www.amazon.com/Crossing-Chasm-3rd-Disruptive-Mainstream/dp/0062292986\">著作</a>\"中提出的“跨越鸿沟”技术思维模型。</p><p>&nbsp;</p><p>我们试图找出Moore所说的早期市场，早期市场的“客户群是由技术爱好者和有远见的人组成的，他们希望在机会或迫在眉睫的问题出现之前抓住它们。”</p><p>&nbsp;</p><p>与我们对<a href=\"https://www.infoq.cn/article/mJxpWooi8uN1yN48dzBH\">2021年</a>\"、<a href=\"https://www.infoq.cn/article/aHx9jlWKrmJK5O6hKN4c\">2020年</a>\"和<a href=\"https://www.infoq.cn/article/xHcGEQe2*jXl8kDTuNK2\">2019年</a>\"Java趋势报告所做一样，下面是2022年发展趋势图。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/9d/9d41d20cc8978acb720b97105692abdc.png\" /></p><p></p><p>&nbsp;</p><p>作为回顾，下面是2021年发展趋势图：</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/40/40f70ed6a21d8c7c8b62edb91d060d7b.png\" /></p><p></p><p>&nbsp;</p><p>除了在创新者阶段发现了一些新技术之外，一些显著的变化如下所述。</p><p>&nbsp;</p><p>我们决定将所有OpenJDK的下游发行版放到一个标签中，即Java Community JDK，并将它们放到早期大众阶段。这个清单包括：<a href=\"https://aws.amazon.com/corretto/\">Amazon Corretto</a>\"、<a href=\"https://docs.azul.com/core/\">Azul Zulu</a>\"、<a href=\"https://www.microsoft.com/openjdk\">OpenJDK的微软构建版本</a>\"、<a href=\"https://bell-sw.com/libericajdk/\">BellSoft Liberica JDK</a>\"、<a href=\"https://adoptium.net/temurin/\">Eclipse Temurin</a>\"、<a href=\"https://developer.ibm.com/languages/java/semeru-runtimes/\">IBM Semeru</a>\"和<a href=\"https://dragonwell-jdk.io/\">阿里巴巴龙井</a>\"。</p><p>&nbsp;</p><p>Java 17已经进入了早期采用者阶段，因为一些框架，尤其是Spring，已经将Java 17作为基线。</p><p>&nbsp;</p><p>由于MicroStream与Helidon、Micronaut和Spring Boot的持续开发和集成，也加入到了Helidon和Micronaut的早期采用者阶段。</p><p>&nbsp;</p><p>Spring Native被移除，取而代之的是更通用的原生Java。这是因为最初于2020年<a href=\"https://www.infoq.com/news/2020/05/java-leyden/\">推出</a>\"并休眠了两年的<a href=\"https://openjdk.org/projects/leyden/\">Leyden项目</a>\"于2022年5月<a href=\"https://openjdk.org/projects/leyden/notes/01-beginnings\">重新启动</a>\"，VMware决定用GraalVM取代<a href=\"https://github.com/spring-projects-experimental/spring-native/blob/main/README.adoc\">Spring Native</a>\"项目来支持生成原生镜像。</p><p>&nbsp;</p><p>经过一年多的开发，Spring Framework 6.0和Spring Boot 3.0都于2022年11月发布，采用了Java 17+和Jakarta EE 9基线。这些版本还通过<a href=\"https://micrometer.io/\">Micrometer</a>\"内嵌了可观察性。</p><p>&nbsp;</p><p>以下是InfoQ的几位Java Queue编辑与Java Champion对不同主题的讨论摘要。这些编辑和Java Champion包括：</p><p>&nbsp;</p><p><a href=\"https://www.linkedin.com/in/michael-redlich-13a966\">Michael Redlich</a>\"——埃克森美孚技术与工程公司高级研究技术员，InfoQ Java Queue首席编辑；<a href=\"https://es.linkedin.com/in/kittylyst\">Ben Evans</a>\"——Red Hat高级首席软件工程师，InfoQ Java Queue编辑；<a href=\"https://nl.linkedin.com/in/johanjanssen2001\">Johan Janssen</a>\"——ASML软件架构师，InfoQ Java Queue编辑；<a href=\"https://www.linkedin.com/in/daliashea/\">Dalia Abo Sheasha</a>\"——微软产品经理；<a href=\"https://www.linkedin.com/in/billy-korando-129b8197/\">Billy Korando</a>\"——Oracle开发者布道师；<a href=\"https://www.linkedin.com/in/otaviojava/\">Otávio Santana</a>\"——Zup Innovation杰出软件工程师。</p><p>&nbsp;</p><p>我们也要感谢为更新2022年“跨越鸿沟”模型提供输入的其他Java Queue编辑：</p><p>&nbsp;</p><p><a href=\"https://www.linkedin.com/in/costlow/\">Erik Costlow</a>\"——产品高级总监，InfoQ Java Queue编辑；<a href=\"https://www.linkedin.com/in/ksilz/\">Karsten Silz</a>\"——Java全栈开发者，InfoQ Java Queue编辑。</p><p>&nbsp;</p><p>他们为我们在发展趋势图上推荐的一些技术定位提供了更多的背景信息。</p><p></p><h2>OpenJDK</h2><p></p><p>&nbsp;</p><p>Korando：作为<a href=\"https://openjdk.java.net/projects/amber/\">Amber项目</a>\"的一部分，Record类、模式匹配和对字符串的改进让我最为兴奋。我知道，在我的职业生涯中，这些特性在进行数据转换、处理格式化字符串和其他令人沮丧的任务时都非常有用。使用这些特性让我感到兴奋，未来的Java开发者也将受益于这些特性，不必像我一样经历这些挫折。</p><p>&nbsp;</p><p>Santana：Java 8已经过时了。在最近的一项市场调查（如JRebel的报告）中，我们可以看到Java 8的受欢迎程度正在下降。这种变化对于Java市场和开发者体验行业（如IDE、框架、集成工具等）来说都是一件好事。我们还可以看到市场和Java社区为将Java 11作为最低版本要求付出了巨大的努力，比如Quarkus和Jakarta EE的最新版。我相信其他应用程序框架也会效仿，将Java 11作为最低版本要求。当我们谈及Java平台，我相信这些工具和框架占了企业代码的80%左右，所以它们会不断更新，以免失去企业开发者的青睐。向Java 11的迁移也表明了一种更快节奏的文化，Java和JDK版本将更频繁地更新，至少每两年更新一次。</p><p>&nbsp;</p><p>Evans：随着JDK 17的<a href=\"https://www.infoq.com/news/2021/09/java17-released/\">发布</a>\"，JDK 11终于在市场上超越了JDK 8。</p><p>&nbsp;</p><p><a href=\"https://adoptium.net/marketplace/\">Adoptium Marketplace</a>\"的发布和可重复构建的到来比许多人意识到的要重要得多，对于那些必须关心供应链安全的企业和个人来说尤其如此。</p><p>&nbsp;</p><p>Redlich：去年发布的<a href=\"https://www.infoq.com/news/2022/03/java18-released\">Java 18</a>\"和<a href=\"https://www.infoq.com/news/2022/09/java19-released/\">Java 19</a>\"提供了新的预览和孵化器特性，如虚拟线程、结构化并发、switch模式匹配、Record模式以及外部函数和内存API。这些特性以JEP的形式为<a href=\"https://openjdk.java.net/projects/amber/\">Amber项目</a>\"、<a href=\"https://wiki.openjdk.java.net/display/loom\">Loom项目</a>\"和<a href=\"https://openjdk.java.net/projects/panama/\">Panama项目</a>\"提供了持续的贡献。Java 20计划于2023年3月发布，它将提供这些特性的升级预览和孵化器版本。</p><p></p><h2>Java 17及以上版本</h2><p></p><p>&nbsp;</p><p>Sheasha：自从最新的Java 17 LTS发布以来，我们注意到Java 17的采用速度比Java 11发布时要快。这是由各种各样的因素导致的，包括公司采用更现代的DevOps流程和管道，支持更快更容易的应用程序更新。另一个因素是框架和库采用了更快的发布节奏，而这在以前是开发者升级应用程序的一大障碍。最新的Spring Framework 6基于Java 17，这向开发者传达了采用最新版本Java的决心。另一个拥抱更快Java发布节奏的团队是Minecraft团队，他们现在向数百万玩家发布的更新也是基于Java 17的。</p><p>&nbsp;</p><p>与此同时，我们看到许多应用程序仍然在使用Java 8。由于从Java 8升级到Java 11比从Java 11升级到Java 17更困难，因此，已经升级到Java 11的团队更有可能迅速采用Java 17。</p><p>&nbsp;</p><p>我们还看到越来越多的开发者使用非LTS Java版本（Java 18+），因为他们更有信心为自己的应用程序采用更新的Java版本，这样他们可以使用Java的新特性，而不必再等待数年。我们看到许多开发者在创建原型或开发新应用程序时选择了最新的非LTS Java版本。但对于生产环境来说，LTS版本仍然是大多数团队的选择。</p><p>&nbsp;</p><p>Santana：在最新的LTS版本中，Java 17为Java开发者带来了几个新特性，其中Record模式带来了一个主要与企业业务相关的新视角。</p><p>&nbsp;</p><p>Janssen：有许多令人兴奋的变化，例如Spring Boot要求使用Java 17，这有望促进Java 17的采用。</p><p></p><h2>Loom项目与虚拟线程</h2><p></p><p>&nbsp;</p><p>Sheasha：在Java性能方面有很多令人兴奋的变化。许多开发者都很高兴看到Loom项目的更新，因为他们现在可以尝鲜一些新的特性，如<a href=\"https://openjdk.org/jeps/425\">虚拟线程</a>\"。</p><p>&nbsp;</p><p>Korando：将Loom项目的关键特性合并到主线Java发行版中可能是过去一年里最重要的变化。Loom项目的开发在过去几年中一直备受关注，因为它承诺的更高的水平可伸缩性将被应用于许多Java开发者的应用程序中。虽然一些特性，如虚拟线程，现在已经准备好用于生产环境中，但毫无疑问，许多开发者都在热切地等待它们从预览状态移出，成为LTS的一部分，并有望在2023年9月与Java 21一起发布。</p><p>&nbsp;</p><p>Evans：我听到很多人都在谈论Loom项目，但我对它持保留态度——我想等到我们有了更多的实际经验之后再说。我认为它可能会像一些人认为的那样改变游戏规则，但我不认为这是一件容易的事情。</p><p>&nbsp;</p><p>Redlich：2022年9月，备受期待的Java 19发布了对虚拟线程的支持。这方面已经有了孵化器框架，如<a href=\"https://medium.com/helidon/please-welcome-helidon-n%C3%ADma-9a882c5b6f1e\">Helidon Níma</a>\"（Oracle提供的微服务框架）和Vert.x提供的<a href=\"https://github.com/vert-x3/vertx-virtual-threads-incubator\">虚拟线程孵化器项目</a>\"。我预计其他供应商也会效仿。</p><p></p><h2>Jakarta EE</h2><p></p><p>&nbsp;</p><p>在延迟了大约三个月之后，备受期待的<a href=\"https://jakarta.ee/specifications/platform/10/\">Jakarta EE 10</a>\"于2022年9月22日向Java社区发布了。</p><p>&nbsp;</p><p>Redlich：Jakarta EE 10对20多个<a href=\"https://jakarta.ee/specifications/\">规范</a>\"进行了更新，并增加了一个新的<a href=\"https://jakarta.ee/specifications/coreprofile/\">Core Profile</a>\"，作为现有<a href=\"https://jakarta.ee/specifications/platform/\">平台</a>\"和<a href=\"https://jakarta.ee/specifications/webprofile/\">Web Profile</a>\"的补充。Jakarta EE工作组已经在讨论Jakarta EE 10和Jakarta EE 11的小版本更新计划。</p><p></p><h2>原生Java（GraalVM/Spring Native/Leyden项目）</h2><p></p><p>&nbsp;</p><p>Santana：GraalVM越来越受欢迎，这为<a href=\"https://openjdk.org/projects/leyden/\">Leyden项目</a>\"提供了巨大的空间。这是一场如何让Java启动更快的竞赛！</p><p>&nbsp;</p><p>Janssen：GraalVM正在不断改进并支持更多的用例，例如Spring应用程序。</p><p></p><h2>Open Telemetry</h2><p></p><p>&nbsp;</p><p>Evans：<a href=\"https://opentelemetry.io/\">OpenTelemetry</a>\"已经发布了1.0版本，对于这样一个出现时间不长的标准来说，这算是取得了巨大的进步。我没想到OpenTelemetry会这么轻易超越已经很激进的预期。它将实现甘特提出的“到2023年底实现遥测大部分流量”的目标，这远远超出了计划。</p><p>&nbsp;</p><p>Redlich：即将发布的MicroProfile 6.0将首次推出MicroProfile <a href=\"https://github.com/eclipse/microprofile-telemetry/blob/main/README.adoc\">Telemetry</a>\"规范，用以取代MicroProfile 1.3中<a href=\"https://www.infoq.com/news/2018/02/microprofile-13/\">首次引入</a>\"的MicroProfile <a href=\"https://github.com/eclipse/microprofile-opentracing\">OpenTracing</a>\"规范。</p><p></p><h2>容器</h2><p></p><p>&nbsp;</p><p>Sheasha：随着越来越多的Java工作负载迁移到容器中，我们看到了一种转变——从只讨论如何容器化Java应用程序到如何最好地容器化Java应用程序。我们看到了更多关于如何在容器中运行应用程序的最佳实践。例如，微软发表了一篇关于内存分配和垃圾收集的<a href=\"https://docs.microsoft.com/en-us/azure/developer/java/containers/overview\">文章</a>\"。</p><p>&nbsp;</p><p>Evans：Java应用程序的容器化仍在继续演进当中。</p><p></p><h2>微软对Java的支持</h2><p></p><p>&nbsp;</p><p>在2021年4月<a href=\"https://www.infoq.com/news/2021/04/microsoft-build-of-openjdk/\">推出</a>\"自己的OpenJDK下游发行版后，微软继续拥抱Java编程语言。</p><p>&nbsp;</p><p>Sheasha：微软加入了<a href=\"https://jakarta.ee/about/working-group/\">Jakarta EE</a>\"和<a href=\"https://microprofile.io/workinggroup/\">MicroProfile</a>\"工作组，因为微软继续在Java生态系统上进行大量投入，原因有很多，GitHub ReadME项目的这篇<a href=\"https://github.com/readme/featured/java-programming-language\">文章</a>\"对此做了说明。</p><p></p><h2>来自Java社区的声音</h2><p></p><p>&nbsp;</p><p>Sheasha：随着创新速度的加快，现代化仍然是许多开发者面临的挑战。发布的Java版本越多，应用程序在Java版本和框架方面的差距就越大，而且越来越难以缩小。这就是为什么我们看到越来越多的公司在现代化工具上进行了投入。一些项目（如<a href=\"https://docs.openrewrite.org/\">OpenRewrite</a>\"）对我们来说很重要，因为它们可以让我们在不抛弃应用程序的同时保持创新。我们还看到了一些新的项目，例如用于Java的<a href=\"https://projects.eclipse.org/projects/adoptium.emt4j\">Eclipse迁移工具包</a>\"，它可以帮助开发者进行Java版本迁移。</p><p>&nbsp;</p><p>开发者疲于学习和掌握开发应用程序所需的大量知识，因为不断有新的库、框架和特性出现。此外，我们看到了“DevOps”中越来越多的“Ops”部分渗透到开发者的职责当中，所以开发者现在也需要了解Docker和Kubernetes。</p><p>&nbsp;</p><p>Korando：我认为，Loom项目向主线OpenJDK交付特性的兴奋点开始转向了Valhalla项目。Valhalla项目是OpenJDK的另一个长期项目，有望显著改善内存管理和吞吐量性能。希望我们能在2023年将Valhalla项目特性交付到OpenJDK主线！</p><p>&nbsp;</p><p>Santana：<a href=\"https://dzone.com/articles/introduction-to-reflectionless-know-what-the-new-t\">无反射框架</a>\"成为一个新趋势，通过消除反射来缩短应用程序启动时间和减少内存消耗。Quarkus、Micronaut、Spring Native和Jakarta CDI Lite等框架就是这方面的例子。</p><p>&nbsp;</p><p>云是所有解决方案的新目标。我们看到了向各种环境的迁移，不仅是基础设施即服务（IaaS），还包括任何能够提升Java开发者效率并为操作层提供更多抽象的解决方案。</p><p>&nbsp;</p><p>从软件开发者的角度来看，无服务器带来了可伸缩性和简单性。为了利用这些优势，我们可以看到一些解决方案转向了原生。</p><p>&nbsp;</p><p>Evans：今年，Quarkus似乎已经开始关注开发者的意识。我经常会遇到尝试使用Quarkus的开发者，尽管实际的应用数量仍在增长当中。我想人们已经意识到它不仅仅是原生编译的Java，它也是一流的Kubernetes Java，具备很棒的开发体验。</p><p></p><h2>有哪些令人兴奋的新东西我们还没有关注</h2><p></p><p>&nbsp;</p><p>Korando：在JavaOne 2022上宣布将Graal JIT编译器和原生镜像合并到OpenJDK中，这是出乎我们意料的一件事。GraalVM的许多技术都很激动人心，但对于许多Java开发者来说它们很难使用。将这些关键特性合并到OpenJDK中可以让Java开发者更容易地使用它们！</p><p>&nbsp;</p><p>Santana：我们知道，开发工具和架构是一个巨大的产业。因此，我们可以看到许多公司在谈论“完美解决方案”和非权衡决策。但实际上，Java在其他方面被证明具有一致性，并且在一些场景中有一些成功案例。每一种架构决策都存在权衡，我们需要了解其上下文，以便将最佳解决方案应用到最佳的场景中。Java生态系统向我们展示了它是一个生产就绪的平台，它为微服务、CQRS、云原生、无服务器、事件驱动设计、单体系统、SQL、NoSQL、映射器、活动记录等提供了解决方案。</p><p>&nbsp;</p><p>Evans：我没想到Loom会在Java 19中作为试验特性被及时合并到主线，我真的很喜欢Gunnar Morling的JFR Analytics项目。</p><p>&nbsp;</p><p>Janssen：我最近了解了OpenJDK的<a href=\"https://openjdk.org/projects/crac/\">检查点协调恢复</a>\"（Coordinated Restore at Checkpoint，CRaC），它通过运行时优化缩短启动时间。</p><p></p><h2>Java社区</h2><p></p><p>&nbsp;</p><p>Sheasha：就我个人而言，我很庆幸Java在我的整个职业生涯中为我打开了许多扇门。我曾有机会在Java生态系统中担任开发者、团队负责人、开发者布道师和程序经理。</p><p>&nbsp;</p><p>Java在语言方面的不断创新和改进让这个领域变得有趣，还使Java成为解决各种行业各种问题的绝佳选择。对我来说，我喜欢在Java领域工作的一个最大的理由是Java社区，社区里满是来自世界各地的充满热情的人才。</p><p>&nbsp;</p><p>Evans：逐渐跟Java 8告别，并让社区转向Java 17及更高版本，这另人感到兴奋。此外，在可观测性方面，尤其是OpenTelemetry，正变得越来越强大。此外，还有一些关于Profile的新工作（包括Java Flight Recorder）正在启动。</p><p>&nbsp;</p><p>Janssen：我真的很期待与Loom项目合作，希望我们很快就能够开始在项目中使用它。</p><p>&nbsp;</p><p>Redlich：我很享受为开源项目做贡献的时光，最近还成为<a href=\"https://jakarta.ee/specifications/nosql\">Jakarta NoSQL</a>\"和<a href=\"https://jakarta.ee/specifications/data/\">Jakarta Data</a>\"规范以及<a href=\"http://www.jnosql.org/\">Eclipse JNoSQL</a>\"项目（Jakarta NoSQL的兼容实现）的提交者。我们一直致力于在Jakarta EE 11发布时将这两个Jakarta规范及时包含在Jakarta EE平台中。</p><p></p><h2>结论</h2><p></p><p>&nbsp;</p><p>需要注意的是，我们的观点只涵盖了一部分东西。Java生态系统的不同部分可能会有不同的体验。我们的这份2022年报告可以作为讨论的引子，而不是一个明确的声明。我们也希望人们能够就行业的发展方向展开公开的讨论。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/java-jvm-trends-2022/\">https://www.infoq.com/articles/java-jvm-trends-2022/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/UjJrO7kBo8QSuFes5tcz\">InfoQ 2022 年趋势报告：.NET篇</a>\"</p><p><a href=\"https://www.infoq.cn/article/bNkyoLzwxU7Li2v94Noe\">InfoQ 2022年趋势报告：人工智能、机器学习和数据工程篇</a>\"</p><p><a href=\"https://www.infoq.cn/article/qrvLruwaMWIeoz2zbrdI\">InfoQ 2022年趋势报告：DevOps与云计算篇</a>\"</p><p><a href=\"https://www.infoq.cn/article/0dJ52ivjyHhxc2YYfgxW\">InfoQ 2022年趋势报告：架构与设计篇</a>\"</p><p><a href=\"https://www.infoq.cn/article/fEJyy2uOUM2h3NEUFXG9\">InfoQ 2022年趋势报告：移动及物联网篇</a>\"</p><p><a href=\"https://www.infoq.cn/article/s2HC2rgLtM3AuppIfJHR\">InfoQ 2022年趋势报告：文化与方法篇</a>\"</p>",
    "publish_time": "2022-12-23 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "重新设计一款数据库，架构会是什么样子？",
    "url": "https://www.infoq.cn/article/JHByNrzzkiEYoj2cZY1E",
    "summary": "<p>好久没写东西，分享一下最近思考的比较多的东西，就当是工作记录了。</p><p></p><p>从一个很重要的问题出发：如果在今天，我们从新设计一个 Database，架构会是什么样子？</p><p></p><p>在进入到具体的技术设计之前，我先分享一下我理解的当今（以及未来）的开发者对于数据库的期待：</p><p>Cost-effective，极致的 Pay-as-you-go，无论是私有云/混合云，还是公有云，云原生的理念在渗透几乎所有的基础软件，能够弹性的利用基础设施是节省成本的关键，谁不喜欢更便宜的东西，我用了多少就给多少钱。另外有着稳定流量的对于性能极端敏感的业务我们另一个话题讨论（因为这种情况下 Serverless 反而可能会更贵）。Ease-of-Use, 易用，使用起来越简单越好，最好把所有基础设施的细节都隐藏掉，极低的心智负担带来极低的上手体验和价值确认。另外我认为目前 SQL 仍然是构建应用最简单的数据库接口，另外对于开发者来说，Modern CLI 体验也是很重要。Unified，这点稍微需要解释一下，如果说第二点是从终端的开发者体验来说，那么这条其实想表达的是：架构的简化，我们这些年发明了太多的数据处理技术，即使做一个普通的应用，可能都要使用 n 种数据库和数据仓库，更头疼的是，规模小的情况和规模大的情况下，很难通过一套方案解决（尽管你的业务形态并没有显著的变化），所以很可能在业务快速增长的时候，开发者需要花费大量的时间进行的基础设施的重构（例如分库分表，或者选用扩展性更好 NoSQL 什么的），这是一个很大的痛点，我们要解决它。</p><p></p><p>针对上面这些趋势和痛点，映射到技术上：</p><p></p><p>内核上使用云原生是架构改造，不仅是存算分离，而是能分离的都分离，因为现在我们要做的已经不再是一个软件，而是一个服务，用户也不会关心服务背后的东西，下面会讲。将 Serverless 作为最终的产品形态（注意：Serverless 并不是技术，而是产品形态），反向倒推架构演进路径。对于新一代的数据库来说，HTAP 是必选的技术路线，一个预言：未来的数据库都会是 HTAP 数据库。只有纯 AP 对于业务来说是不完整的，TP 非常重要。</p><p></p><p>带着这些假设，过去这一年，大概做的工作总结一句话就是把： TiDB 大卸八块，然后利用云的基础设施，将它从新拼装起来变成一个数据库服务。最近低调的发布了 TiDB Serverless Tier 就是这个新引擎的第一次亮相。下面聊聊一些技术和工程上的思考。</p><p></p><h2>做服务而不是做软件</h2><p></p><p>今天做数据库，如果你不提供云服务，出门都不太好意思和人打招呼（很快就会是 Serverless）。有很多人（尤其是数据库内核开发者）会低估做一个云服务的复杂性，经典的论调：‘不就是在云上的自动化部署吗？’ 或者 ‘支持一下 Kubernetes Operator？’…其实并不是，甚至目标都应该反过来：**我们要做的并不是一个数据库软件，而是一个数据库服务，当我们用更长的眼光去看的时候就会发现，后者是包含前者的。**这个认知的转变是做好数据库云服务第一步，也是最重要的一步。</p><p></p><p>我们过去开发程序，不同的模块看到的环境是同构且确定的，例如：开发一个单机上运行的软件，不同的模块虽然可以有逻辑上的边界，但是链接到一起之后，运行起来看到的还是这台计算机的一亩三分地，Everything is a trade-off。即使近几年的分布式系统的兴起，但对于经典的分布式软件来说，大致还是单机软件设计思路的延伸，只是通过 RPC 将多台计算机连接在一起，但是仍然环境是相对确定的，尽管很多软件对于底层的环境变化做了一些适配：例如分布式数据库的动态扩容，数据重均衡 Re-balance 等，但是本质并未变化，只是能够操控和调度的资源变多了。但是在云上，这些假设都发生了变化：</p><p></p><p>多样且几乎无限的资源通过 Service API 的形式提供，对于资源的调度和分配可以通过代码完成，这是革命性的变革。一切资源明码标价，所以程序优化的方向从过去的一维的榨取最好的性能（因为硬件的成本已经事先支付），变成一个动态的问题：尽量花小钱办大事。</p><p></p><p>假设的变化带来的技术上的变化：云上的数据库，首先应该是多个自治的微服务组成的网络。这里的微服务并非一定是在不同的机器上，在物理上可能在一台机器上，但是需要能在远程访问，另外这些服务应该是无状态的（无副作用），方便快速的弹性扩展，这个带来对于开发者的转变就是：放弃对于同步语义的坚持，这个世界是异步化且不可靠的。我很高兴我的偶像 Amazon 的 CTO Werner Vogels 在今年 ReInvent Keynote 上也强调了这一点。放弃掉对于同步和单机的幻想，得到了什么？我们看一些例子：</p><p>第一，最近几年被聊烂的存算分离🙂。在云上，计算的单位价格比存储要高得多，如果计算和存储绑定，那么就没有办法利用存储的价格优势，另外对于一些特定的请求，对于计算的需求很可能与存储节点的物理资源是完全不对等的（想象一下重型的 OLAP 请求的 Resuffle 和分布式聚合）。另外，对于分布式数据库来说，扩容速度是一个重要的用户体验指标，当存算分离后，原则上扩容速度是能做到极快的，因为扩容变成了：1. 启动新的计算节点 2. 缓存预热；反之亦然。</p><p></p><p>第二，对于数据库来说，一些内部组件的微服务化，例如：DDL-as-a-Service。传统数据库的 DDL 对于在线业务是有影响的（即使用了 Online DDL），例如添加索引时候，不可避免的需要进行数据回填，这对于正在服务 OLTP 负载存储节点来说会引起抖动。如果我们仔细思考一下 DDL 就会发现它是一个：全局的，偶发的，重计算，可离线进行，可重入的模块，如果有一个共享的存储层（例如 S3），这类模块非常适合剥离出来变成一个 Serverless 的服务，通过 S3 与 OLTP 的存储引擎共享数据。带来的好处毋庸置疑：</p><p></p><p>对在线业务也是几乎没有性能影响因为按需运行，带来成本下降。</p><p></p><p>类似的例子还有很多：日志（CPU 使用少，但是对于存储要求高），LSM-Tree 存储引擎的 Compaction，数据压缩，元信息服务，连接池，CDC等等，都是可以且很适合被剥离的对象。在新的 Cloud-native 版本的 TiDB 中，我们使用了 Spot Instances 进行存储引擎的 Remote Compaction，带来的成本下降是惊人的。</p><p></p><p>在设计云数据库的时候，另一个重要的要思考的问题是：QoS(Quality of service)，具体到细节大概是：</p><p></p><p>需要定义 WCU 和 RCU，作为控制的单位，因为如果你没有办法定义这个，你将没办法进行资源的分配和调度，乃至定价。多租户是必选项，租户之间一定要可以共享硬件甚至集群资源，大租户也可以独占资源（单租户模式是多租户的一种特化），带来的问题：如何避免 Noisy Neiberhood 问题？如何设计 Throttling 策略？如何避免共享的元信息服务 Overwhelm？如何应对极端的热点？</p><p></p><p>挑战还有很多，我就不一一列举了。很多经验在 AWS 今年那篇 DynamoDB 的新论文中介绍得很详细，大概参考那篇论文即可。</p><p></p><h2>哪些云服务可以被依赖</h2><p></p><p>另一个很重要话题是：云上哪些服务可以依赖？这是因为对于一个第三方厂商来说，跨云（甚至是跨云下，类似混合云）的产品体验是你天然的优势，如果对于特定的云服务依赖得太深太紧，将会让你丧失这份灵活性。所以选择依赖的时候需要非常小心，下面是一些原则：</p><p></p><p>依赖接口和协议 ，而不是具体实现，服务内部你随便自己搞，但是给其他服务暴露的接口要通用且不要做过多假设，简单来说就是被调用者心智负担最小化（UNIX 时代留存下来的古老智慧）。一个很好的例子是： VPC Peering 和 PrivateLink，如果按照这个原则，肯定选择 PrivateLink，因为 VPC Peering 倾向于暴露更多的细节给被使用者。有行业标准就 Follow 行业标准（S3，POSIX 文件系统），每个云上都有对象存储，而且每个云的对象存储 API 大概都会兼容 S3 协议，这就是好的。唯一的例外是安全。如果没办法做到跨云的抽象，也别自己强行造轮子，云有啥就用啥，例如密钥管理，IAM 什么的，千万不要自己发明。</p><p></p><p>下面举几个例子说明一下，对于 Cloud-Native TiDB 来说，在选择依赖的时候做出如下选择：</p><p></p><p>存储：S3，就像上面提到的，每个云都会有 S3 协议的对象存储服务。在数据库中使用类似 LSM-Tree 的分层存储，带来的好处是能够通过一套 API 来利用不同层次的存储介质，例如上层的热数据可以使用本地磁盘，下层的数据在 S3 上，通过异步的 Compaction 来将上层的数据交换到 S3 上。这是 TiDB 存算分离的基础，只有数据在 S3 之后，才能解锁 Remote Compaction 等操作。但是带来的问题是：S3 的高延迟注定了它不能出现在主要的读写链路上（上层缓存失效，会带来极高的长尾延迟），对于这个问题，我是比较乐观的：如果我们考虑 100% 本地缓存的场景，就退化成经典的 Shared-Nothing 的设计，用于支撑最极端的 OLTP 场景我认为是没问题的（参考现在的 TiKV），额外付出代价只是 S3 上的存储成本 which is 很低。如果分片做得足够细，缓存和热点问题是好解决的。分层存储中还可以加入 EBS（分布式块存储）来作为二级缓存，进一步削峰（削弱本地缓存失效带来的延迟突变）我在 2020 年的一次分享中提到，对于云原生的数据库而言，如何能利用好 S3 会是关键。这个观点到现在还没有变化。计算：容器 + Kubernetes，和 S3 一样，每个云都有 K8s 的服务，就像 Linux 一样，K8s 是云的操作系统，虽然存算分离做完后，计算相对好管理一点，但是像一些计算资源池的管理，例如 Serverless 集群需要的快速启动（冬眠唤醒），从 0 开始启动建新 Pod 肯定来不及，需要有一些预留的资源，又例如使用 Spot Instance 来处理 Compaction 任务，万一某个 Spot Instance 被回收，能否再快速找个机器继续工作，又例如负载均衡和 Service Mesh…虽然 S3 帮你把最难搞的状态问题解决了，但是这些纯计算节点的调度问题是很琐碎的，如果你选择自己造轮子，那么大概率最后你会重新发明一个 K8s，所以不如直接拥抱。</p><p></p><p>在云上，还有一个很大的设计问题：文件系统是一个好抽象吗？这个问题来自于在哪层抽象之下屏蔽云的基础设施。在 S3 普及之前，各个大型的分布式系统存储系统，尤其是 Google 的：BigTable，Spanner 等都选择了一个分布式文件系统作为底座（我认为这里面有很深的 Plan9 的痕迹，毕竟 Google 内部这些 Infra 大神很多都是从贝尔实验室来的😄）。那么问题来了，如果有了 S3，我们还需不需要一层文件系统的抽象？我目前还没有想清楚，我倾向于有，理由仍然是存储的缓存，如果有一层文件系统，在文件系统层能够根据文件的访问热度做进行一层缓存，提升扩容时候的预热速度；另一个好处是基于文件系统，生态工具兼容性会更好，很多 UNIX 的工具能直接复用，运维复杂度降低。</p><p></p><h2>将终端用户体验作为优化方向</h2><p></p><p>我在今年的 DevCon 的 Keynote 中提到了一点：云上的数据库如何与现代的开发者体验融合？这个是一个很有意思的话题，因为数据库那么多年了，几乎还是这个样子，SQL is still the king。但是另一方面现在开发者开发的应用以及使用的工具已经和几十年前大不一样了，作为一个从 UNIX 时代过来的老程序员，看到现在年轻一代的开发者使用的眼花缭乱的先进开发工具和理念，只能感叹一代比一代强，虽然操作数据 SQL 仍然是标准，但是数据库软件能否做更多，去融入这些现代的应用开发体验中？</p><p></p><p>我的答案是：还是能做一些微小的贡献的。例如：</p><p></p><p>Serverless ，很多人认为的 Serverless 是一个技术名词，我认为不是，Serverless 更重要的是从用户体验角度定义了什么是更好的云上软件的产品形态。或者这是本来就应该是理所应当的：为什么我作为用户需要关心你有几个节点？为什么我需要关心你内部的参数和配置？为什么我点了启动，你要让我再等半小时？…等等这些在我们这个行业里面过去看起来似乎理所应当的事情，其实仔细想想都觉得挺可笑的，举个例子：假设你去买个车，卖车的先送给你一本发动机维修指南，告诉你读完才能上路，车跑得不快，然后告诉你某个发动机参数需要你调一下，每次启动汽车都要等半小时…是不是很奇怪？对于 Serverless 的产品来说，从用户体验来说，最大的意义在于三件事情：</p><p></p><p>屏蔽掉配置，降低了使用者的心智负担极其快速的启动时间，这点扩展了使用场景和易用性Scale-to-Zero，在多数场景中降低了使用的成本（当有明显波峰波谷，且你没法预测的场景），在小规模时甚至可以免费。</p><p></p><p>有了这三点，才能很好的将数据库嵌入到其他的应用开发框架中，这是构建更大的生态的基础。</p><p></p><p>除了 Serverless 之外，现代的开发者体验（DX）中还包含很多其他的关键要素，例如：</p><p></p><p>Modern CLI：对于开发者来说 CLI 的效率比图形界面高得多，而且更容易通过 Shell 脚本组合其他工具实现自动化。云端-本地统一的开发/调试/部署体验：没有人想天天碰服务器，本地能搞定的事情，就不要让人 SSH。尤其对于云服务来说，如何在云下开发和调试，目前是一个有很多痛点的市场。Example Code / Demo / 脚手架：新一代的偏向 PLG 的服务提供商，例如：Vercel，Supabase 这一套玩的很溜，想想这也是合理的，对于普通的 CRUD 应用来说，基本的代码框架都是相似的，提供一些快速上手的例子，能够让开发者更快的体会到你的产品价值，也帮助开发者更快的构建他们的应用。</p><p></p><h2>未来的挑战</h2><p></p><p>我上面提到的很多技术内容，基本上都是无人区，很难提前预见到所有的挑战，这也是没办法的事情。这一段作为结尾，列一部分有意思的挑战，虽然肯定不完备，希望能对你有所启发：</p><p></p><p>新的产品形态，当不同租户的存储引擎上的数据都在 S3 之后，理论上可以解锁一个更大的基于数据共享和交换的市场（想象一下 Google Docs）， 又或者在 S3 上 + MVCC 理论上可以实现类似 Git 似的对于数据的版本控制，想象一下 git checkout&nbsp;的顺滑体验，只是不同的是，你切换的是你的数据库镜像（我知道已经有云上的数据库产品开始探索这个产品形态），这会带来很多新的应用场景和独特的价值。</p><p></p><p>新的商业模式，云是新的计算机，但这个世界应该不会只有几台计算机，除了标准的 SaaS 模式外，还有没有可能将 DBaaS 作为一个整体进行输出，这可能又是一种全新的商业模式（尤其是在和一些二线或者私有云合作的时候），这时候数据库厂商会变成输出数据库服务产品的厂商（有点绕）</p><p></p><p>新的研发组织，对于一个数据库厂商来说，过去对于研发和产品的需求几乎只限于内核开发，但是在做云服务的过程中，你不仅是开发者，还会是运维和运营者，而且开发云服务对于研发人员的技术栈的要求和数据库内核是完全不一样的，这里面必然涉及巨大的组织变革和人事调整，如何过渡好？</p><p></p><p>问题和挑战嘛，永远都是有的，把这个系统做出来的过程，也是我们理解这个系统的过程，最后送上我很喜欢的一句话，来自著名的物理学家理查德费曼：</p><p></p><p>What I cannot create, I do not understand。</p>",
    "publish_time": "2022-12-23 09:34:26",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "腾讯AI Lab“绝悟”首次将强化学习引入病理全片扫描，阅片效率提升400%",
    "url": "https://www.infoq.cn/article/ZjYsuVP1yLtGS4yuwOsO",
    "summary": "<p></p><p>12月19日，腾讯AI Lab发布其决策智能 AI 「绝悟」的最新成果「绝悟RLogist」，将 AI 深度强化学习技术迁移到病理全片扫描图像诊断领域，在性能接近的情况下，将传统病理阅片效率提升400%。</p><p></p><p>该研究相关论文被国际人工智能顶级学术会议 「AAAI 2023」接收，代码已开源。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/86/b2/86de31a5c5908188cd085602b7f2fab2.png\" /></p><p></p><p></p><p>相关论文：</p><p></p><p>论文链接：<a href=\"http://arxiv.org/abs/2212.01737\">http://arxiv.org/abs/2212.01737</a>\"</p><p></p><p>开源链接：<a href=\"https://github.com/tencent-ailab/RLogist\">https://github.com/tencent-ailab/RLogist</a>\"</p><p></p><p>「绝悟」AI 是腾讯将游戏场景与人工智能技术进行融合研究的核心探索之一，此前先后在 MOBA、RTS、3D开放世界（Minecraft）等多类型游戏中取得了业界领先的研究成果，证明了其在游戏复杂环境中较为优秀的决策智能水平。</p><p></p><p>本次发布的「绝悟RLogist」受启发于「绝悟」在3D游戏环境中进行观测并做出决策的过程，将这些能力迁移至病理阅片场景，提出了基于深度强化学习找寻最优看片路径的方法，并在相关测试数据集中表现出较高的效率，达到业界领先水平。这也代表着「绝悟」从游戏场景走向现实世界，朝着解决更多现实世界难题的目标更近了一步。</p><p></p><h3>让AI学习医生决策思维方式</h3><p></p><p>随着技术发展，目前，病理行业正在加速向全数字化、智能化、云端化方向发展，临床科室常常将组织切片进行全片扫描数字化处理，以便医生阅片及管理。</p><p></p><p>数据显示，显微扫描仪生成的高分辨率图像往往能够达到每个像素0.25微米，每张图像的尺寸经常是几万乘几万像素甚至更高，虽然这能更全面地展现切片信息，却也给医生的阅片带来了更大的压力，他们要从布满密集细胞和组织的超大尺寸图像中，肉眼找到风险的病灶位置并进行判断，“大海捞针”式的工作难度可想而知。</p><p><img src=\"https://static001.infoq.cn/resource/image/31/a4/315aed2f5a30edd7b1263a4144f24ea4.png\" /></p><p></p><p></p><p>在高清病理图像中，病灶区域可能仅占很小的比例</p><p></p><p>近年来，随着技术的发展，研究员尝试使用深度学习解决图像/像素级分类和回归问题，对医学图像分析领域作出了很大贡献，然而，全片扫描图像分析对于深度学习仍然具有挑战性。主要挑战来自两个方向：</p><p></p><p>第一，计算病理学中的病理图像（WSI）具有十亿像素大小的高分辨率，却往往只有一个图像级标签。目前绝大部分的方法都依赖于在高倍镜下对全切片进行密集采样的方式进行特征提取，并对所有采集特征进行信息整合进而实现全片诊断。</p><p></p><p>第二，这些图像的兴趣点区域（病变区域）往往很稀疏。这带来了诊断相关性弱、数据效率低下等问题。现有的方法大多依赖于多实例学习框架，需要在高倍率下密集采样局部的图像块（patch），增加了计算成本，一张切片往往需要几十分钟来完成计算。这限制了很多潜在的临床应用场景，比如大规模筛查和术中快速评测。</p><p></p><p>实际上，病理医生在对切片进行判读时，并不需要像这些计算机算法这样依次去观察高倍镜下的每一个角落。病理医生往往先利用显微镜在低倍镜下进行扫片，在高倍镜下确认相关区域，必要时可以灵活切换不同倍镜进行复核，根据经验决策最优的查看路径，以最终完成全片判读并定位到关键病灶。</p><p><img src=\"https://static001.infoq.cn/resource/image/42/3c/424fbd2e3ed0ace2e4252e52cbeec23c.png\" /></p><p></p><p>人类医生会凭经验放大图像，检查可疑区域</p><p></p><p>「绝悟」团队观察到，病理医生的阅片行为，可以转化为最优路径决策问题，而解决这类问题正是强化学习所擅长的方向。以「绝悟」在Minecraft环境中完成挖木头任务为例，AI首先要环顾四周搜集全局信息（类比病理医生在低倍镜下扫片），然后锁定视角（高倍镜确认），找到木头后执行采集动作（确认病灶），如此往复。</p><p><img src=\"https://static001.infoq.cn/resource/image/48/a6/4870e6f0c4365601acd4df62f99a7ba6.png\" /></p><p></p><p></p><p>受此启发，「绝悟RLogist」创新性地尝试了一种类似医生病理阅片的决策思路，采用了基于深度强化学习的，找寻最优看片路径的方法，避免了用传统的穷举方式去分析局部图像切块，而是先决策找到有观察价值的区域，并通过跨多个分辨率级别获得代表性特征，以加速完成全片判读。</p><p></p><h3>成果验证：决策提效400%</h3><p></p><p>研究团队选择“淋巴结切片转移检测”及“肺癌分型”两个全片扫描图像的分类任务进行基准测试（TCGA-NSCLC 和 CAMELYON16 WSI 数据集）。结果表明，与典型的多实例学习算法相比，「绝悟RLogist」在观察路径显著变短情况下，能够实现接近的分类表现，决策效率提升400%。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/72/d2/7267a4b80da09bfb04360b0a08db05d2.png\" /></p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/2f/2b/2f451685d2b4f639eyy313d2519a472b.png\" /></p><p></p><p>同时，该方法具体较好的可解释性。通过将「绝悟RLogist」的决策过程可视化，有潜力应用于教育性或者辅助性的医疗诊断场景。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/19/c6/19bed641a0892d906b396bec3yyc72c6.png\" /></p><p></p><p></p><p>研究员表示，未来团队将沿着两大路径持续优化，一方面，通过引入更强的神经网络结构增强「绝悟RLogist」的表征学习能力，另一方面，使用更高阶的RL训练方法避免学习到错误的观测路径，相信未来能在该领域进一步发挥AI技术的作用。</p><p></p><h3>从虚拟到现实，让游戏AI走入现实世界</h3><p></p><p></p><p>在AI游戏方面，腾讯AI Lab自主研发的深度强化学习智能体正不断走近现实。除了「绝悟」，此前推出的棋牌游戏 AI 「绝艺」在担任国家围棋队训练专用AI同时，逐步拓展麻将等非完全信息类博弈能力。</p><p></p><p>同时，基于对强化学习技术前景的关注，实验室正积极促进强化学习领域的共同发展。2019年，腾讯AI Lab与王者荣耀共同发布AI开放研究平台「开悟」，过去三年已通过「以赛促研」助力高校AI人才培养。11月21日，平台发布「王者荣耀AI开放研究环境」，为非商业用途的机器学习算法研究公开提供业界独有的高复杂度MOBA训练环境，助力前沿探索。</p>",
    "publish_time": "2022-12-23 10:42:38",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "2023年数字人行业洞察：“数字人自由”即将到来，管线化生产加速提升应用效率",
    "url": "https://www.infoq.cn/article/LKCy3ghl8tzdoR2LEiy2",
    "summary": "<p>当数字人，从一项技术创新的产物，真正成为一个产业，走向大规模的落地应用，未来将如何转化为现实生产力，如何形成完整的商业模式，如何推动下一阶段的创新？技术路线还将发生哪些演进？全真互联的到来，将推动数字人出现在哪些全新的生产、生活场景?</p><p></p><p>12月20日，由腾讯云智能、腾讯研究院、创业黑马联合主办的“数字人产业发展趋势解读”线上圆桌论坛中，腾讯云智能数智人产品总经理陈磊、创业黑马产业加速器总经理冯莎莎，北京理工大学光电学院研究员、博士生导师、数字栩生创始人兼CTO翁冬冬，南方都市报官微运营部总监申鹏，共同解析、探讨了数字人产业发展趋势。</p><p></p><p></p><h3>AI驱动数字人交互能力快速提升</h3><p></p><p></p><p>技术进步是数字人发展的第一推动力。在2022腾讯全球数字生态大会上，腾讯研究院、腾讯云智能和创业黑马，共同发布了《数字人产业发展趋势报告[2023] 》（以下简称“报告”）。《报告》指出，数字人的核心技术主要包括计算机图形学、动作捕捉、图像渲染、AI等，随着各项技术的不断迭代，正推动数字人制作效能和智能水平持续提升。</p><p>&nbsp;</p><p>翁冬冬用四个关键词总结数字人的发展：第一，高逼真：从信息交流学、传播学角度来讲，只有通过表情、眼神、肢体才能精准地传递情感和信息，所以数字人具备高逼真的外观是精准传递信息的刚需；第二，实时化：数字人与人类的情感传递、互动是趋势，在这种情况下，技术支持需要满足数字人实时交互的需求；第三，智能化：在数字人生成和驱动中，AI算法起到至关重要的作用；第四，虚实融合：目前人机交互方式通过屏幕和人进行交互，这种环境下数字人能够起到的作用非常局限，未来在VR、AR场景下，数字人作为一种新型人机交互窗口，具有不可替代的作用。</p><p></p><p>陈磊表示，数字人作为AI综合类的应用，本质上来说是承载全链条整合AI能力的“实体化”载体。例如，腾讯云智能数智人集合了腾讯内部多个团队的优势 AI 能力，在人像建模方面，通过优图实验室的相关 AI 技术，可以做到凭借几张照片就快速生成写实级的人脸；在动作绑定环节，例如将动作从 A 数智人迁移到 B 数智人，可以利用 IEG 的 NExT Studios 团队的动作和表情迁移工具，快速绑定，相比于传统的需要用动捕设备从零开始采集动作大大提升了生产效能；对话式 AI，由云智能语音 AI 技术支撑；多情感驱动能力，由 AI Lab 的相关支持等等。</p><p></p><p>与市面上流行的“数字虚拟人”、“AI数字人”等概念不同，腾讯云智能对数字人的定位倾向于“数智人”，属于“交互智能入口级”相关的应用。陈磊表示，数智人的生产运营主要考虑两个维度，一是更加智能，从数字人的形象到驱动再到交互，每一个技术环节都需要AI去串联；二是更加落地，切实为行业带来服务体感的升级、效率提升。</p><p></p><p>翁冬冬提出，数字人真正的核心技术是AI，这已经是行业目前比较清晰的一个认知，下一阶段大家需要突破的目标是“如何让数字人变得更像一个人”。这将取决于内外两个方向。“外在分为静态的像和动态的像，因为其实在真正交流的时候，情感传递更多是由动态的表情、姿态和动作来完成，这些呈现和交流内容密切相关，很难通过前期的预制动画完成，未来需要AI算法和更智能的“动作引擎”来指导数字人的反应。在内在层面，又分为语音交互和非语音交互两个部分，下一个突破点是让数字人不再局限于答录机，而是像人一样去思考。</p><p></p><p>陈磊也认为，未来在AI技术的辅助下，有望形成输入文本，或者通过语音、语义识别即可自动化生成情感、动作表达。“这也是多模态的一种手段。例如，不同的人说同一句话，不同的表述方式对应的情感表达是不一样的，驱动在表达上也有所区别，通过AI实现自动化，这些都是需要去重点深耕探索的方向。”</p><p></p><p></p><h3> 管线化生产将加速提升数字人应用效率</h3><p></p><p></p><p>数字人的精细度和智能化水平不断提升，一大批数字人加速融入生产、生活。我国数字人商业化应用探索步伐持续加快，不同形式、不同领域的应用场景不断涌现，数字人逐渐成为数字经济发展的新亮点。</p><p></p><p>通过创业黑马对“数字人加速器”多家企业进行调研，冯莎莎发现数字人在营销方向应用最多，其次是文娱、文旅以及直播带货，这些领域在商业化变现方面都做的很成功。大家也能明显地感觉到数字人服务朝着脱虚向实的方向发展，在行业里面产生了实实在在的价值。</p><p></p><p>《报告》中也指出，受益于数字人生产工具和方案日渐完善，在企业服务、影视动画、文化传媒领域，数字人都得到了广泛应用。今年10月，腾讯与南都合作打造了虚拟主播“小N”，&nbsp;在经历真人采集建模、自然语音处理、图像处理、语音合成等人工智能技术加持下，虚拟主播“小N”正式上岗。编辑只需要在后台输入文本，就可以实现声画同步的虚拟主播新闻视频输出，24小时全天候无间断播出，大大提升了新闻生产效率和用户覆盖广度。</p><p></p><p>作为虚拟主播项目负责人，申鹏举例称，“小N”在世界杯期间吸引了许多球迷和观众，整体点击率达几百万，单条视频最高峰点击率有几十万。</p><p></p><p>从媒体行业角度出发，申鹏对数字人提出的第一个关键词是“真实”，作为媒体信息的传递者，虚拟主播需要无限接近于真实主播，要能够体现人类情感从而打动观众；第二点是“便利”，未来数字人如果能与手机摄像头融合，数字人的呈现将不再局限于演播室，而是可以走入新闻现场；第三点,希望虚拟主播“小N”可以变成一个内容UI界面，不仅能够播报内容，还可以和用户互动，成为一个高度拟人化的表达渠道。</p><p>根据IDC在《中国AI数字人市场现状与机会分析，2022》报告中预计，到2026年中国AI数字人市场规模将达到102.4 亿元。</p><p></p><p>冯莎莎表示，未来的数字人是每一家企业的标配，也就是今天说的“数字员工赋能千行百业”，因此各行各业也对数字人的生产提出了更高的要求——成本和效率。</p><p></p><p>对此，翁冬冬也提出，行业更多思考的是如何通过降低成本推动数字人的普及。“现在是一个产线迭代的时代，数字人最初出现是为艺术服务，但到了工业化生产阶段，行业需要思考的是，如果将个性化的生产经验固化到AI算法，让数字人变得更容易制造，更容易使用。”</p><p></p><p>截至目前，腾讯云智能数智人已经覆盖了10+行业领域以及50+的应用场景。在这个过程中，陈磊观察到，数智人作为一个交互智能的新的入口，最大的挑战来自于如何通过一个强大的供给的能力，满足到快速覆盖落地于不同行业、不同场景里，这对数智人生产制作流程以及技术积累都提出了很高要求。</p><p></p><p>基于此，腾讯云智能在之前已经推出了数字人内容生产平台，交互数智人平台。在形象建模上，今年新推出的小样本2D数智人生产管线，通过上传3—5分钟左右的视频即可快速生成一个数字分身，生产周期缩短至小时级别。在企业服务领域，通过腾讯“神农MShenNonG”，以一个很小的模型就能够解决客户垂直场景的应答需求。例如，疫情期间，在一汽大众云展厅案例中，数智导购Ida经过汽车语料的学习，可以为顾客提供各类购车信息。效果显示，相对于传统的现场营销服务，这种数字人服务推动整体留资率上升13%，每个用户在云展厅逛展时间接近10分钟。陈磊表示，“只有达到足够低成本、足够高效率的生产，数字人才会有更强的行业覆盖性。”</p><p>&nbsp;</p><p></p><h3> “数字人自由”时代即将到来 </h3><p></p><p></p><p>目前，随着虚拟数字人产业链逐步走向成熟，已经形成了由上游制作、渲染工具，中游的虚拟人驱动及运营，下游的场景应用一起组成的完整虚拟数字人产业链生态图谱。产业链的成熟催生了低成本的数字人应用软件应运而生，很多对价格比较敏感的中小企业，甚至是个人，已经开始跃跃欲试，尝试给自己定制个“数字分身”。</p><p></p><p>在讨论中，圆桌嘉宾给出了平民化、易生成、易操作等关键词。陈磊认为，平民化的本质是生产数智人的周期、成本、运营能够大幅度降低，将有望推进“数字人自由”。他举例最近2D小样本的数智人迎来增长点，快速获得商机，背后的本质是平民化的使用门槛。</p><p></p><p>从应用层面，翁冬冬也提出了3个关键词。首先是“优雅”，他认为数字人应该特别易于使用，不需要调整太多参数就可以“优雅”地使用，预计数字人自由将在2023年到来；第二个关键词是“经济”，物美价廉的数字人在行业里才有更大的生存空间；第三个关键词是“无所不在”，未来，数字人将应用于千行百业，存在于社会的方方面面。</p><p>&nbsp;</p><p>陈磊还对数字人未来展望提到&nbsp;“场景化”关键词，目前数字人应用还处于行业早期，未来需要从场景出发，找到并解决客户在实际的落地过程中遇到的问题，真正提升客户企业运营效率才能获得长久发展。</p><p>&nbsp;</p><p></p><h3>利好政策加速数字人产业落地</h3><p></p><p></p><p>今年以来，乘着利好政策的“东风”，数字人产业一脚踏进了快车道。例如，今年7月北京市发布《北京市促进数字人产业创新发展行动计划（2022-2025年）》，成为国内出台的首个数字人产业专项支持政策。</p><p>报告显示，随着多个垂直行业陆续出台应用建设指南，将会更好地推动数字人的落地应用。</p><p></p><p>创业黑马产业加速器总经理冯莎莎表示，2023年将会是数字人相关支持政策及指导意见频繁落地一年。目前，国内已有30多个地市出台相关支持政策，其中大部分为引导型，主要引导方向为技术自主化、打造数字人的自主产业链；产品工具化，培育一体化、自动化、批量化的数字人开发工具，以及鼓励企业探索产业应用。</p><p></p><p>“从统计数据来看，数字人应用里，数字员工型应用到明后年会快速增长。”冯莎莎也给出了企业自评的三个核心竞争力，分别为AI算法、数字人制作能力、商业化变现能力。“从市场的角度来看，AI算法是排名第一的核心竞争力，企业只有具备核心技术和内容创新能力，才能保证自己在数字人赛道上的竞争力。”</p><p>除了蓬勃发展的市场需求，随着数字人从技术创新走向产业应用，越来越多的数字人开始“持证上岗”，也给数字人的制作、研发等后端工作带来很大的压力。</p><p></p><p></p><h3>市场对数字人还有哪些期待？</h3><p></p><p>&nbsp;</p><p>翁冬冬表示， AI数字人目前整体还处于起步阶段，距离市场成熟还有较长的距离，需要大量的技术积累。由于现在可选择的方向比较多，实现手段和技术多，更新速度快，导致行业还处在混乱无序的状态。他呼吁大家能走慢一点、走稳一点，只有更细致的打磨和挖掘，才能把这条路走的更长远。</p><p></p><p>陈磊认为，市场对数智人的期待，既要是敬业多才的员工，也要是吸粉明星代言人。“从最开始企业品牌IP数智化员工的打造，通过员工的打造慢慢下沉，在营销获客场景里面做获客增益，然后再与用户做日常运营、业务办理，提供全域全生命周期的服务打造。”</p><p></p><p>腾讯研究院高级研究员宋扬表示，面向未来，数字人正朝几个方向加速迭代，一方面，外貌更加精致、形象更加逼真、动作更加自然，这就是所谓的皮囊更加好看。另一方面，随着AI技术的不断完善，数字人多模态的感知和交互的能力会得到显著的提升，数字人未来可能会具备记忆力和判断力，更加的智能，在思想和行为上更加接近于人，拥有所谓有趣的灵魂。“相关技术快速发展，已经到了商业化大规模推广的临界点。未来，数字人将进入越来越多的产业提供服务，成为人机交互的新入口，带来更加智能、更加沉浸的‘在场’体验。”</p>",
    "publish_time": "2022-12-23 10:57:26",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "面向 OLTP 场景，火山引擎跑在 Kubernetes 上的数据库有何不同？",
    "url": "https://www.infoq.cn/article/NePSz3kI2dCbsEHeWVdA",
    "summary": "<p>几年前，行业内关于是否可以把数据库跑在 Kubernetes 上就不乏讨论。Google Cloud 解决方案架构师本杰明·古德（Benjamin Good）曾<a href=\"https://zhuanlan.zhihu.com/p/143915218\">发文</a>\"讨论了这件事情的可行性：想要讨论这个问题，开发者们需要先明确需要通过把数据库 Kubernetes 上解决什么问题，再来看下可行性。如今，业内不乏有将数据库跑在 Kubernetes 上的产品出现，<a href=\"https://s.geekbang.org/search/c=2/k=%E7%81%AB%E5%B1%B1%E5%BC%95%E6%93%8E/t=\">火山引擎</a>\"数据库系列产品也是其中之一。我们可以从火山引擎数据库产品出发，了解云时代大规模场景下数据库跑在 Kubernetes 之上有何不同。</p><p></p><h1>为什么选择在 Kubernetes 之上跑数据库？</h1><p></p><p></p><p>火山引擎存储 &amp; 数据库产品解决方案架构师魏巍告诉 InfoQ，业内不少存算分离的数据库采用的是基于物理机或者虚拟机的方式进行部署，不管是 CPU、内存还是存储的调度方式都偏传统，而字节跳动的 veDB 完全基于 Kubernetes 进行部署。目前我们可以看到也有一些企业把数据库部署在 <a href=\"https://s.geekbang.org/search/c=0/k=Kubernetes%20/t=\">Kubernetes </a>\"上，只是更多是放在容器里了。</p><p></p><p>业内对于云原生数据库的理解有共同之处：面向应用，不再关注底层需要多少 CPU、内存等等，而是更关注应用的状态，比如是否高可用。这些就可以通过 Kubernetes 自带的 Operator 来实现。在魏巍看来，部署在 Kubernetes 上的数据库，比部署在虚拟机或者物理机上的数据库，云原生的程度更高一些。“我们完全是基于 Kubernetes 做了深度整合的数据库系统。”</p><p></p><p>魏巍提到的火山引擎跑在 Kubernetes 上的数据库产品，主要面向 OLTP 场景，包括关系型数据库 RDS、云原生数据库 veDB MySQL、缓存数据库 Redis、文档数据库 MongoDB、表格数据库 HBase 和图数据库 veGraph。</p><p></p><p>据他介绍，火山引擎数据库团队并不是从一开始就想要自研在 Kubernetes 上跑数据库的。内部在进行整体的数据库产品开发的时候秉承着这样的思路：最开始是效率优先，使用开源的产品来满足业务需求，后来发现因为字节跳动内部数据规模越来越大，尤其像 2021 年春晚红包雨活动时，使用开源的数据库产品无法满足业务需求，才开始在开源产品的基础上进行迭代和优化。可是新的问题又来了。由于开源产品的架构设计有自己的规则，有一部分的性能就无法进行优化。所以火山引擎数据库团队开始寻找其他的办法——从架构层面对数据库进行改造，比如云原生数据库 veDB MySQL，改造成计算、存储分离的架构，让整体的性能更高，峰值集群达到百万级别的 QPS。</p><p></p><p>2015 年到 2017 年间，火山引擎数据库处在相对初级的阶段，仅依赖人工和脚本的方式进行数据库管理运维，就足以满足业务量的需求；2018 年到 2021 年，火山引擎开始改造云原生数据库 veDB MySQL、缓存数据库 Redis 等。从今年年初开始，火山引擎开始在内部大规模推广自研的 veDB，融入了很多像 AI for DB 之类的技术，把之前 DBA 沉淀下来的经验，通过 AI 的方式，让系统自动优化和调整数据库系统。</p><p></p><p>火山引擎数据库团队在进行数据库技术产品优化时主要考虑两个关键点：其一是尽可能地提高资源利用率，实现降低成本的目的；其二是尽可能减少对客户在线业务产生影响。在魏巍看来，基于 Kubernetes 实现云原生化可以更细粒度的对资源进行管理，减少资源碎片，进而提高整体资源利用率，达到降低成本目的。同时，计算资源与存储资源可以借助 Kubernets 进行统一调度，可以更充分的释放云计算弹性的能力。火山引擎数据库团队也在向 serverless 方向发展，以上能力都是面向 serverless 的重要基础。</p><p></p><p>“数据库本身的体系类似，所以大家做的优化也是类似的。像我们的 veDB 也做了 log is database 分离，把一些 mysql 的内核进行非常大的改造，让它写数据的时候只写日志，而不会去刷新数据，这样就极大程度减少了网络开销，进而提升了整体的性能。”魏巍表示：“veDB 和原生的 Mysql 相比，基本上是原生 Mysql5-6 倍的性能。”云时代，业务大规模要求下数据库性能的大幅度提升，是火山引擎坚定了让数据库跑在 Kubernetes 上的信心。此外，阿里云、亚马逊云科技做数据库产品比较早，当时底层的技术依赖虚拟机和虚拟化，而火山引擎云数据库做得晚，赶上了 Kubernetes 发展的好时候。</p><p></p><h1>跑在 Kubernetes 之上的数据库有何不同？</h1><p></p><p></p><p>不过从技术角度看，其实 Kubernetes 整体来看对于数据库并不友好。根据 Google Cloud 解决方案架构师本杰明·古德的“数据库应该跑在什么环境中”思维导图，首先，跑在 Kubernetes 之上的数据库，相比跑在物理机、虚拟机环境的数据库更容易出现故障自动转移事件；其次，持续产生高工作负载的场景，无法控制并发量，对于跑在 Kubernetes 上的数据库也不友好，会导致数据库不受控。</p><p></p><p>Operator 的出现让数据库真正在 Kubernetes 上变得好用。云厂商可以通过扩展 Kubernetes API，使用 Operator 来实现数据库的运维能力和管理能力。对于非 Kubernetes 友好的数据库如 Mysql，就可以借助 Operator 来实现故障自动转移等；对于高工作负载高并发量的场景，数据库没有银弹，可以选择不同的数据库产品组合。</p><p></p><p>数据库跑在 Kubernetes 之上的好处也开始被看见，比如数据库实例资源的增加变得更简单、跨多云部署的兼容性更好、运维的复杂性更低……从架构视角看，魏巍认为部署在 Kubernetes 之上的数据库资源调度的粒度将更小。以前用虚拟机，至少需要一台虚拟机做调度，但是 Kubernetes 上以 Pods 为单位去做资源调度，由 Kubernetes 进行资源分配，提升了整体的资源利用率，也就降低了成本。“开一个虚拟机的时间和开一个 pod 的时间相比，肯定是 pod 的时间更短。这也是我们说火山引擎云数据库具备非常强弹性能力的重要原因之一。”魏巍谈道。</p><p></p><p>随着应用场景更加宽泛，Kubernetes 也会受限。对此，火山引擎专门配备了一个团队负责进行 Kubernetes 的优化和改造，让它能更好地满足大规模应用场景。同时，该团队还会负责云数据库和 Kubernetes 更充分的融合。“业内还没有哪个厂商这么大规模地把云数据库部署在 Kubernetes 上，火山引擎是第一家。”</p><p></p><p>目前，火山引擎数据库产品系统分为自研 veDB 和社区版优化两大类，还提供了一些生态工具 DTS。除了前文提到的云原生数据库 veDB MySQL，火山引擎缓存数据库 Redis 也与社区版 Redis 有很大不同。</p><p>社区版 Redis 采用无中心化的架构，底层节点之间使用的是 gossip 协议。这个协议导致一旦节点数过多时，会产生严重的网络风暴，导致整个集群的不稳定，并且也无法提升整体的容量规模。所以，火山引擎缓存数据库 Redis 采用字节跳动内部实践的 Achemy 架构，对社区版 Redis 的整体架构做了改造。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6f/6f4a6450b1c5c16f2d16cacda6b747c8.png\" /></p><p></p><p>改造主要体现在 2 个方面。</p><p>其一，把社区版 Redis 的架构从无中心化转变为中心化。通过引入集群组件 config server，对整个 Redis 集群做元数据的管控，这样就可以避免 gossip 协议通信引起的网络风暴。</p><p>其二，Achemy 架构分为三层，第一层是 proxy，第二层是 config server 进行元数据管理，第三层是 server 层用于真正存储数据。这三层架构让字节跳动的 Redis 可以支持上千的节点分片，让 Redis 的集群规模变得非常大。</p><p></p><p>“其实最开始字节跳动也是在用开源的版本，也没有想直接从架构角度推倒重来，只是对于规则协议进行优化来提高节点数量，但是做下来发现投入产出比低，面对不断上涨的业务量也不是长久之计，毕竟社区开源版的 Redis 可能没有预估到如今如此大规模的场景。”魏巍谈道，过去大家专注在数据库本身的优化工作，现在上云之后，其实可以借助云的能力优化数据库的架构，让数据库的性能和稳定性整体从云的维度得到一个比较大的提升。</p><p></p><p>火山引擎图数据库 veGraph 是火山引擎自研的产品，类似 Achemy 架构，以属性图为基础结构数据，提供了海量关系的数据存储和毫秒级的在线查询服务，广泛应用于社交网络、欺诈检测、推荐引擎、知识图谱等场景。“比如抖音和头条里，你给哪个文章或者视频点赞，你的好友也能看到这条文章或者视频，其实就是借助了图数据库的这种关系分析能力。也是因为业务量大，所以开源的图数据库满足不了抖音头条这种大规模海量数据的要求。”</p><p></p><p>魏巍表示：“我们自研的图数据库 veGraph 可以做到万亿条边。如果两个人是好友关系，这一条好友关系就被称作是一条边。不仅规模可以达到万亿条边，单集群已经可以达到亿级别的 QPS 性能水平。”这里底层的技术支撑和 Redis 类似，通过分层拆开不同的组件，分别对每个组件进行集群化处理，三层集群共同对外提供服务能力，所以可以达到万亿条边的数据量，整体 QPS 达到亿级别。</p><p></p><h1>云数据库的未来方向</h1><p></p><p></p><p>“云厂商提供的云数据库应该做到简单易用，安全稳定，极致弹性，高性价比。把客户 DBA 需要做的事情都做了，而且要做的更多，做的更好。”在魏巍看来，DBA 应该有更高的价值，应该和业务开发走得再近一些，才能让业务和数据库更好地结合。“开发如何建索引这个事情很多企业的 DBA 都会遇到。一旦出现问题，大家会发现开发同学索引建得不好，SQL 语句写得不好。其实，可以让 DBA 同学提前介入到开发工作中，这些事情完全可以避免，让 SQL 语句更加高效，进而让业务可以用更少地资源去做更多的事情。”魏巍解释道。</p><p></p><p>业务视角下，云数据库未来的重点方向在于能否稳定支撑企业业务运转的同时降低使用成本，所以从技术角度看，无论是哪一家云厂商，未来都会在底层技术上做更多的优化，并在上层打造一个更加稳定的平台来供企业客户长久、安心地使用数据库产品。</p>",
    "publish_time": "2022-12-23 10:57:53",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "LastPass：黑客获得云存储访问密钥，用户信息泄露",
    "url": "https://www.infoq.cn/article/GE2FPeRsrayYSa1SSzbF",
    "summary": "<p>当地时间12月22日，在线密码管理器<a href=\"https://blog.lastpass.com/2022/12/notice-of-recent-security-incident/\">LastPass</a>\"称，有黑客获得了其客户的大量个人信息，包括加密和加密散列密码以及存储在客户保险库中的其他数据。</p><p>&nbsp;</p><p>根据调查，黑客利用在LastPass 今年8 月的漏洞事件中获得的信息访问了一个基于<a href=\"https://www.infoq.cn/article/aRF1vxkot7iYMpagqW8b\">云的存储环境</a>\"。黑客通过一个受感染的开发者账户对LastPass开发环境部分的未经授权访问，并“获取了部分源代码和一些专有的 LastPass 技术信息”。通过攻击另一名员工账户，黑客又获得了用于访问和解密基于云存储服务中某些存储卷的凭证和密钥。&nbsp;</p><p>&nbsp;</p><p>目前，LastPass 生产服务在本地数据中心运行，用云来存储备份数据等。驻留要求。黑客访问的云存储服务与生产环境在物理上是分开的。&nbsp;&nbsp;</p><p>&nbsp;</p><p>据悉，黑客一旦获得云存储访问密钥和双存储容器解密密钥，就会从备份中复制信息，其中包含基本客户账户信息和相关元数据，包括公司名称、最终用户名称、账单地址、客户访问 LastPass 服务时使用的电子邮件地址、电话号码和 IP 地址。&nbsp;&nbsp;</p><p>&nbsp;</p><p>黑客还能够从加密存储容器中复制客户保险库数据的备份，该存储容器以专有二进制格式存储，其中包含未加密数据（例如网站 URL）和完全加密的敏感字段（例如网站用户名）、密码、安全说明和填表数据。这些加密字段通过 256 位 AES 加密保持<a href=\"https://xie.infoq.cn/article/8202bceb430b24bf8907f4cc8\">安全</a>\"，并且只能通过使用LastPass 的零知识架构从每个用户主密码派生的唯一加密密钥解密。</p><p>&nbsp;</p><p>不过 LastPass 表示，自己永远不知道主密码，也不会存储或维护。数据的加密和解密仅在本地 LastPass 客户端上执行。</p><p>&nbsp;</p><p>参考链接：</p><p>https://blog.lastpass.com/2022/12/notice-of-recent-security-incident/</p>",
    "publish_time": "2022-12-23 11:36:52",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "如果重新设计一款数据库，架构会是什么样子？",
    "url": "https://www.infoq.cn/article/JHByNrzzkiEYoj2cZY1E",
    "summary": "<p>好久没写东西，分享一下最近思考的比较多的东西，就当是工作记录了。</p><p></p><p>从一个很重要的问题出发：如果在今天，我们从新设计一个 Database，架构会是什么样子？</p><p></p><p>在进入到具体的技术设计之前，我先分享一下我理解的当今（以及未来）的开发者对于数据库的期待：</p><p>Cost-effective，极致的 Pay-as-you-go，无论是私有云/混合云，还是公有云，云原生的理念在渗透几乎所有的基础软件，能够弹性的利用基础设施是节省成本的关键，谁不喜欢更便宜的东西，我用了多少就给多少钱。另外有着稳定流量的对于性能极端敏感的业务我们另一个话题讨论（因为这种情况下 Serverless 反而可能会更贵）。Ease-of-Use, 易用，使用起来越简单越好，最好把所有基础设施的细节都隐藏掉，极低的心智负担带来极低的上手体验和价值确认。另外我认为目前 SQL 仍然是构建应用最简单的数据库接口，另外对于开发者来说，Modern CLI 体验也是很重要。Unified，这点稍微需要解释一下，如果说第二点是从终端的开发者体验来说，那么这条其实想表达的是：架构的简化，我们这些年发明了太多的数据处理技术，即使做一个普通的应用，可能都要使用 n 种数据库和数据仓库，更头疼的是，规模小的情况和规模大的情况下，很难通过一套方案解决（尽管你的业务形态并没有显著的变化），所以很可能在业务快速增长的时候，开发者需要花费大量的时间进行的基础设施的重构（例如分库分表，或者选用扩展性更好 NoSQL 什么的），这是一个很大的痛点，我们要解决它。</p><p></p><p>针对上面这些趋势和痛点，映射到技术上：</p><p></p><p>内核上使用云原生是架构改造，不仅是存算分离，而是能分离的都分离，因为现在我们要做的已经不再是一个软件，而是一个服务，用户也不会关心服务背后的东西，下面会讲。将 Serverless 作为最终的产品形态（注意：Serverless 并不是技术，而是产品形态），反向倒推架构演进路径。对于新一代的数据库来说，HTAP 是必选的技术路线，一个预言：未来的数据库都会是 HTAP 数据库。只有纯 AP 对于业务来说是不完整的，TP 非常重要。</p><p></p><p>带着这些假设，过去这一年，大概做的工作总结一句话就是把： TiDB 大卸八块，然后利用云的基础设施，将它从新拼装起来变成一个数据库服务。最近低调的发布了 TiDB Serverless Tier 就是这个新引擎的第一次亮相。下面聊聊一些技术和工程上的思考。</p><p></p><h2>做服务而不是做软件</h2><p></p><p>今天做数据库，如果你不提供云服务，出门都不太好意思和人打招呼（很快就会是 Serverless）。有很多人（尤其是数据库内核开发者）会低估做一个云服务的复杂性，经典的论调：‘不就是在云上的自动化部署吗？’ 或者 ‘支持一下 Kubernetes Operator？’…其实并不是，甚至目标都应该反过来：**我们要做的并不是一个数据库软件，而是一个数据库服务，当我们用更长的眼光去看的时候就会发现，后者是包含前者的。**这个认知的转变是做好数据库云服务第一步，也是最重要的一步。</p><p></p><p>我们过去开发程序，不同的模块看到的环境是同构且确定的，例如：开发一个单机上运行的软件，不同的模块虽然可以有逻辑上的边界，但是链接到一起之后，运行起来看到的还是这台计算机的一亩三分地，Everything is a trade-off。即使近几年的分布式系统的兴起，但对于经典的分布式软件来说，大致还是单机软件设计思路的延伸，只是通过 RPC 将多台计算机连接在一起，但是仍然环境是相对确定的，尽管很多软件对于底层的环境变化做了一些适配：例如分布式数据库的动态扩容，数据重均衡 Re-balance 等，但是本质并未变化，只是能够操控和调度的资源变多了。但是在云上，这些假设都发生了变化：</p><p></p><p>多样且几乎无限的资源通过 Service API 的形式提供，对于资源的调度和分配可以通过代码完成，这是革命性的变革。一切资源明码标价，所以程序优化的方向从过去的一维的榨取最好的性能（因为硬件的成本已经事先支付），变成一个动态的问题：尽量花小钱办大事。</p><p></p><p>假设的变化带来的技术上的变化：云上的数据库，首先应该是多个自治的微服务组成的网络。这里的微服务并非一定是在不同的机器上，在物理上可能在一台机器上，但是需要能在远程访问，另外这些服务应该是无状态的（无副作用），方便快速的弹性扩展，这个带来对于开发者的转变就是：放弃对于同步语义的坚持，这个世界是异步化且不可靠的。我很高兴我的偶像 Amazon 的 CTO Werner Vogels 在今年 ReInvent Keynote 上也强调了这一点。放弃掉对于同步和单机的幻想，得到了什么？我们看一些例子：</p><p>第一，最近几年被聊烂的存算分离🙂。在云上，计算的单位价格比存储要高得多，如果计算和存储绑定，那么就没有办法利用存储的价格优势，另外对于一些特定的请求，对于计算的需求很可能与存储节点的物理资源是完全不对等的（想象一下重型的 OLAP 请求的 Resuffle 和分布式聚合）。另外，对于分布式数据库来说，扩容速度是一个重要的用户体验指标，当存算分离后，原则上扩容速度是能做到极快的，因为扩容变成了：1. 启动新的计算节点 2. 缓存预热；反之亦然。</p><p></p><p>第二，对于数据库来说，一些内部组件的微服务化，例如：DDL-as-a-Service。传统数据库的 DDL 对于在线业务是有影响的（即使用了 Online DDL），例如添加索引时候，不可避免的需要进行数据回填，这对于正在服务 OLTP 负载存储节点来说会引起抖动。如果我们仔细思考一下 DDL 就会发现它是一个：全局的，偶发的，重计算，可离线进行，可重入的模块，如果有一个共享的存储层（例如 S3），这类模块非常适合剥离出来变成一个 Serverless 的服务，通过 S3 与 OLTP 的存储引擎共享数据。带来的好处毋庸置疑：</p><p></p><p>对在线业务也是几乎没有性能影响因为按需运行，带来成本下降。</p><p></p><p>类似的例子还有很多：日志（CPU 使用少，但是对于存储要求高），LSM-Tree 存储引擎的 Compaction，数据压缩，元信息服务，连接池，CDC等等，都是可以且很适合被剥离的对象。在新的 Cloud-native 版本的 TiDB 中，我们使用了 Spot Instances 进行存储引擎的 Remote Compaction，带来的成本下降是惊人的。</p><p></p><p>在设计云数据库的时候，另一个重要的要思考的问题是：QoS(Quality of service)，具体到细节大概是：</p><p></p><p>需要定义 WCU 和 RCU，作为控制的单位，因为如果你没有办法定义这个，你将没办法进行资源的分配和调度，乃至定价。多租户是必选项，租户之间一定要可以共享硬件甚至集群资源，大租户也可以独占资源（单租户模式是多租户的一种特化），带来的问题：如何避免 Noisy Neiberhood 问题？如何设计 Throttling 策略？如何避免共享的元信息服务 Overwhelm？如何应对极端的热点？</p><p></p><p>挑战还有很多，我就不一一列举了。很多经验在 AWS 今年那篇 DynamoDB 的新论文中介绍得很详细，大概参考那篇论文即可。</p><p></p><h2>哪些云服务可以被依赖</h2><p></p><p>另一个很重要话题是：云上哪些服务可以依赖？这是因为对于一个第三方厂商来说，跨云（甚至是跨云下，类似混合云）的产品体验是你天然的优势，如果对于特定的云服务依赖得太深太紧，将会让你丧失这份灵活性。所以选择依赖的时候需要非常小心，下面是一些原则：</p><p></p><p>依赖接口和协议 ，而不是具体实现，服务内部你随便自己搞，但是给其他服务暴露的接口要通用且不要做过多假设，简单来说就是被调用者心智负担最小化（UNIX 时代留存下来的古老智慧）。一个很好的例子是： VPC Peering 和 PrivateLink，如果按照这个原则，肯定选择 PrivateLink，因为 VPC Peering 倾向于暴露更多的细节给被使用者。有行业标准就 Follow 行业标准（S3，POSIX 文件系统），每个云上都有对象存储，而且每个云的对象存储 API 大概都会兼容 S3 协议，这就是好的。唯一的例外是安全。如果没办法做到跨云的抽象，也别自己强行造轮子，云有啥就用啥，例如密钥管理，IAM 什么的，千万不要自己发明。</p><p></p><p>下面举几个例子说明一下，对于 Cloud-Native TiDB 来说，在选择依赖的时候做出如下选择：</p><p></p><p>存储：S3，就像上面提到的，每个云都会有 S3 协议的对象存储服务。在数据库中使用类似 LSM-Tree 的分层存储，带来的好处是能够通过一套 API 来利用不同层次的存储介质，例如上层的热数据可以使用本地磁盘，下层的数据在 S3 上，通过异步的 Compaction 来将上层的数据交换到 S3 上。这是 TiDB 存算分离的基础，只有数据在 S3 之后，才能解锁 Remote Compaction 等操作。但是带来的问题是：S3 的高延迟注定了它不能出现在主要的读写链路上（上层缓存失效，会带来极高的长尾延迟），对于这个问题，我是比较乐观的：如果我们考虑 100% 本地缓存的场景，就退化成经典的 Shared-Nothing 的设计，用于支撑最极端的 OLTP 场景我认为是没问题的（参考现在的 TiKV），额外付出代价只是 S3 上的存储成本 which is 很低。如果分片做得足够细，缓存和热点问题是好解决的。分层存储中还可以加入 EBS（分布式块存储）来作为二级缓存，进一步削峰（削弱本地缓存失效带来的延迟突变）我在 2020 年的一次分享中提到，对于云原生的数据库而言，如何能利用好 S3 会是关键。这个观点到现在还没有变化。计算：容器 + Kubernetes，和 S3 一样，每个云都有 K8s 的服务，就像 Linux 一样，K8s 是云的操作系统，虽然存算分离做完后，计算相对好管理一点，但是像一些计算资源池的管理，例如 Serverless 集群需要的快速启动（冬眠唤醒），从 0 开始启动建新 Pod 肯定来不及，需要有一些预留的资源，又例如使用 Spot Instance 来处理 Compaction 任务，万一某个 Spot Instance 被回收，能否再快速找个机器继续工作，又例如负载均衡和 Service Mesh…虽然 S3 帮你把最难搞的状态问题解决了，但是这些纯计算节点的调度问题是很琐碎的，如果你选择自己造轮子，那么大概率最后你会重新发明一个 K8s，所以不如直接拥抱。</p><p></p><p>在云上，还有一个很大的设计问题：文件系统是一个好抽象吗？这个问题来自于在哪层抽象之下屏蔽云的基础设施。在 S3 普及之前，各个大型的分布式系统存储系统，尤其是 Google 的：BigTable，Spanner 等都选择了一个分布式文件系统作为底座（我认为这里面有很深的 Plan9 的痕迹，毕竟 Google 内部这些 Infra 大神很多都是从贝尔实验室来的😄）。那么问题来了，如果有了 S3，我们还需不需要一层文件系统的抽象？我目前还没有想清楚，我倾向于有，理由仍然是存储的缓存，如果有一层文件系统，在文件系统层能够根据文件的访问热度做进行一层缓存，提升扩容时候的预热速度；另一个好处是基于文件系统，生态工具兼容性会更好，很多 UNIX 的工具能直接复用，运维复杂度降低。</p><p></p><h2>将终端用户体验作为优化方向</h2><p></p><p>我在今年的 DevCon 的 Keynote 中提到了一点：云上的数据库如何与现代的开发者体验融合？这个是一个很有意思的话题，因为数据库那么多年了，几乎还是这个样子，SQL is still the king。但是另一方面现在开发者开发的应用以及使用的工具已经和几十年前大不一样了，作为一个从 UNIX 时代过来的老程序员，看到现在年轻一代的开发者使用的眼花缭乱的先进开发工具和理念，只能感叹一代比一代强，虽然操作数据 SQL 仍然是标准，但是数据库软件能否做更多，去融入这些现代的应用开发体验中？</p><p></p><p>我的答案是：还是能做一些微小的贡献的。例如：</p><p></p><p>Serverless ，很多人认为的 Serverless 是一个技术名词，我认为不是，Serverless 更重要的是从用户体验角度定义了什么是更好的云上软件的产品形态。或者这是本来就应该是理所应当的：为什么我作为用户需要关心你有几个节点？为什么我需要关心你内部的参数和配置？为什么我点了启动，你要让我再等半小时？…等等这些在我们这个行业里面过去看起来似乎理所应当的事情，其实仔细想想都觉得挺可笑的，举个例子：假设你去买个车，卖车的先送给你一本发动机维修指南，告诉你读完才能上路，车跑得不快，然后告诉你某个发动机参数需要你调一下，每次启动汽车都要等半小时…是不是很奇怪？对于 Serverless 的产品来说，从用户体验来说，最大的意义在于三件事情：</p><p></p><p>屏蔽掉配置，降低了使用者的心智负担极其快速的启动时间，这点扩展了使用场景和易用性Scale-to-Zero，在多数场景中降低了使用的成本（当有明显波峰波谷，且你没法预测的场景），在小规模时甚至可以免费。</p><p></p><p>有了这三点，才能很好的将数据库嵌入到其他的应用开发框架中，这是构建更大的生态的基础。</p><p></p><p>除了 Serverless 之外，现代的开发者体验（DX）中还包含很多其他的关键要素，例如：</p><p></p><p>Modern CLI：对于开发者来说 CLI 的效率比图形界面高得多，而且更容易通过 Shell 脚本组合其他工具实现自动化。云端-本地统一的开发/调试/部署体验：没有人想天天碰服务器，本地能搞定的事情，就不要让人 SSH。尤其对于云服务来说，如何在云下开发和调试，目前是一个有很多痛点的市场。Example Code / Demo / 脚手架：新一代的偏向 PLG 的服务提供商，例如：Vercel，Supabase 这一套玩的很溜，想想这也是合理的，对于普通的 CRUD 应用来说，基本的代码框架都是相似的，提供一些快速上手的例子，能够让开发者更快的体会到你的产品价值，也帮助开发者更快的构建他们的应用。</p><p></p><h2>未来的挑战</h2><p></p><p>我上面提到的很多技术内容，基本上都是无人区，很难提前预见到所有的挑战，这也是没办法的事情。这一段作为结尾，列一部分有意思的挑战，虽然肯定不完备，希望能对你有所启发：</p><p></p><p>新的产品形态，当不同租户的存储引擎上的数据都在 S3 之后，理论上可以解锁一个更大的基于数据共享和交换的市场（想象一下 Google Docs）， 又或者在 S3 上 + MVCC 理论上可以实现类似 Git 似的对于数据的版本控制，想象一下 git checkout&nbsp;的顺滑体验，只是不同的是，你切换的是你的数据库镜像（我知道已经有云上的数据库产品开始探索这个产品形态），这会带来很多新的应用场景和独特的价值。</p><p></p><p>新的商业模式，云是新的计算机，但这个世界应该不会只有几台计算机，除了标准的 SaaS 模式外，还有没有可能将 DBaaS 作为一个整体进行输出，这可能又是一种全新的商业模式（尤其是在和一些二线或者私有云合作的时候），这时候数据库厂商会变成输出数据库服务产品的厂商（有点绕）</p><p></p><p>新的研发组织，对于一个数据库厂商来说，过去对于研发和产品的需求几乎只限于内核开发，但是在做云服务的过程中，你不仅是开发者，还会是运维和运营者，而且开发云服务对于研发人员的技术栈的要求和数据库内核是完全不一样的，这里面必然涉及巨大的组织变革和人事调整，如何过渡好？</p><p></p><p>问题和挑战嘛，永远都是有的，把这个系统做出来的过程，也是我们理解这个系统的过程，最后送上我很喜欢的一句话，来自著名的物理学家理查德费曼：</p><p></p><p>What I cannot create, I do not understand。</p><p></p><p>博客原文地址：http://blog.0xffff.me/posts/build-database-in-2020s/</p>",
    "publish_time": "2022-12-23 09:34:26",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "解读数字化的2022：不再追求大而全的“军备竞赛”，用聚焦来提高转型“成功率”",
    "url": "https://www.infoq.cn/article/BXWSliYk7FK3EfGSbRtS",
    "summary": "<p></p><p></p><blockquote>本文是 “2022 InfoQ 年度技术盘点与展望” 系列文章之一，由 InfoQ 编辑部制作呈现，重点聚焦数字化领域在 2022 年的行业发展现状和趋势，希望能帮助你准确把握 2022 年数字化领域的核心发展脉络，在行业内始终保持足够的敏锐度。“InfoQ 年度技术盘点与展望”是 InfoQ 全年最重要的内容选题之一，将涵盖操作系统、数据库、AI、大数据、云原生、架构、大前端、编程语言、开源安全、数字化十大方向，后续将聚合延展成专题、迷你书、直播周、合集页面，在 InfoQ 媒体矩阵陆续放出，欢迎大家持续关注。特此感谢 郭华、孔云飞、柳忠阳、沈旸、史凯、史喆、朱辉 （按姓名拼音首字母排序）对本文的贡献，他们的真知灼见，是本文能与大家见面的关键。</blockquote><p></p><p></p><p>2022 年，数字化已成业内共识，它是必答题，但它没有标准答案，所有企业都在摸索中前行。</p><p></p><p>本文主要目的在于简要阐述数字化行业的现状和趋势，“寒冬”之际，数字化作为长期投入，企业会如何权衡数字化所带来的价值，他们在关心数字化的哪些方向，是技术？是效益？还是数据？他们是如何思考自身的定位和未来的趋势，将作何布局？</p><p></p><p>基于此，我们采访了数位专家，他们的真知灼见，是该文能与大家见面的关键。以下内容基于公开资料和受访专家意见整理，本文篇幅有限难以面面俱到，未尽之处还请见谅，希望能为读者带来参考价值，并激发更深入的探讨。</p><p></p><h2>不确定时代，需要更务实的数字化</h2><p></p><p></p><p>2022 年是疫情第三年，经济下行，市场低迷，企业面临各方面的压力与不确定性，纷纷勒紧裤腰带准备过冬。“这样的大背景给很多企业的数字化投资带来了挑战，很明显感觉有的企业的数字化项目取消了，有的项目停滞了。”凯捷亚太区副总裁，亚太区首席数据创新官史凯直言道。</p><p></p><p>据他介绍，今年在跟企业交流时听到的最多的一个词是“效益”。从短期来看，单个项目投入更注重效果和速度，不再执着于长期的大项目，更加希望找到投资小见效快能持续迭代的投资。这意味着，企业不再只关注内部的管理，也不满足于系统和应用的成功上线，更多地以终为始，如何提升企业的盈利能力，降本增效的实际价值角度去思考，这些数字化技术和数据能够给他们带来什么样的效益，这也就是史凯在原创著作《<a href=\"https://www.infoq.cn/article/mfcsP6wws312tLTcrPCl\">精益数据方法论</a>\"》中所梳理的，数字化转型将从业务价值出发，减少浪费，提升效益。</p><p></p><p>换句话说，与过往热衷于创新事物的现象相比，如今企业的数字化转型路径会显得更务实，不再追求大而全的“军备竞赛”，而是回归业务本身，聚焦业务价值。联易融副总裁<a href=\"https://www.infoq.cn/article/a7ls8rH7EoAweEdLcNfO\">沈旸</a>\"表示，“在经济下行的情况下，企业会更清楚自己需要的是什么，从而把数字化的焦点放在主营业务的优化上。”</p><p></p><p>德勤中国数字化服务副总监孔云飞同样指出，企业如今会更注重理性分析自身经营最痛之处，从降本、涨收、促毛利出发，聚焦在某个领域形成局部以多打少的局面，塑造自己独有的具有差异化的竞争力。</p><p></p><p>比如，重制造企业选择投资<a href=\"https://www.infoq.cn/news/OFXQa5YIfMpox46uAjUZ\">数字化工厂</a>\"，通过产线的自动化改造和生产工艺的改良，提升生产线的全过程管控，降低对人工的依赖，逐步完善成本管理。再比如，银行选择利用前沿的数据技术、机器学习，提升业务预测、主动获客能力等等。</p><p></p><p>普华永道发布的《2022 年数字化工厂转型调研报告》亦指出，危机时期，数字化工厂转型至关重要，是构建运营灵活性和韧性的可选路径，且将进一步推动卓越运营。</p><p></p><p>总的来说，从短期来看，清晰的目标，坚定的决心，务实的心态是当下大多数企业应对“寒冬”的不二法则。</p><p></p><h2>有限资源下，聚焦更迫切的数字化场景</h2><p></p><p></p><p>不过，虽然企业不能像原来在相对宽松的经济环境下那样，去进行更多的试错，但也不意味要盲目地“省钱”。</p><p></p><p>资源有限，那就集中精力办大事，把钱花在刀刃上。</p><p></p><p>以<a href=\"https://www.infoq.cn/article/t4kD2pO5729VljDuILYN\">雪花啤酒</a>\"为例，雪花啤酒数字化负责人郭华提及公司在三个方面的调整：策略聚焦、打法聚焦、考核聚焦。</p><p></p><p>策略聚焦，指的是方向聚焦，目标聚焦，要有重点地去推进工作。在每个工作领域里，确定一个旗舰项目和中心任务，如果选不准，那该领域的工作就会被认为是没有成效的；</p><p></p><p>打法聚焦，比如雪花现阶段主要是在队伍建设层面发力，拉通信息，降低沟通和管理成本，提升整体工作组织能力；</p><p></p><p>考核聚焦，指加强指标和目标化的管理，全面推进量化考核。</p><p></p><p>“无论是从选择的切入点，还是系统项目建设过程的管理能力、管理水平，或是从业务层面解决问题、释放价值的角度来看，当下数字化的建设都要更加聚焦、精准和精益。”郭华强调。</p><p></p><p>当然，每个企业由于所处行业、市场环境、业务形态、发展阶段等各方面的差异，聚焦的数字化场景不尽相同。对此，史凯总结了四类企业需求更为迫切的数字化场景：</p><p></p><p>第一，<a href=\"https://www.infoq.cn/article/X9IT0Oj6awQNRQUFNsyg\">营销</a>\"获客类，也就是能直接助力提升企业盈利能力的场景；第二，运营优化类，能够优化流程，降低成本，提升效率的场景；第三，用户体验类，通过数据提升用户体验，深挖存量；第四，风控合规类，能够通过数据来提升企业风险管理和合规能力的场景。</p><p></p><p>孔云飞表示，尽管不同企业的痛点不一，但大部分企业都是想通过提高技术应用能力推动业财数据标准化、流程效率最大化，如此既降低了经营的不确定性，又可以显性提升管理层关注的毛利。很多企业想通过小投入撬动大收益，首先从重复劳动自动化开始，见效快、短期收益明显。对数字化着迷的企业，也会考虑轻量型创新技术以尝试改变现有管理模式，推动数据服务化的同时，更是朝着服务资产化的长远目标逼近，例如有很多国内外企业开始引入流程挖掘作为流程管理和业务变革的基座平台，让企业管理层也能轻松参与到持续改善经营的最前线。</p><p></p><p>而沈旸也提到，今年很多企业做的工作越来越像以前在信息化时代所做的，更关注业务流程设计，关注流程优化，包括在制造企业，装备和设备的自动化的需求会更加迫切。</p><p></p><h2>数字化转型“成功率”仅有 16%，挑战来自方方面面</h2><p></p><p></p><p>综上，数字化依然被认为是「不确定的时代里，唯一的确定性」：不少企业在面临增长挑战的同时，依然笃定数字化的投入。但知易行难，根据麦肯锡全球<a href=\"https://www.mckinsey.com.cn/wp-content/uploads/2021/12/%E5%88%B8%E5%95%86%E6%95%B0%E5%AD%97%E5%8C%96%E8%BD%AC%E5%9E%8B.pdf\">调研显示</a>\"，全球范围仅有 16% 的企业认为自己的数字化转型取得了持续成效。</p><p></p><p>那么，是什么原因造成企业数字化转型“成功率”如此之低？问题究竟出自哪里？</p><p></p><h4>挑战一：组织、流程、文化的转型滞后</h4><p></p><p></p><p>IBM 大中华区客户成功管理部总经理朱辉认为，当前企业数字化转型面临着技术与非技术的双重挑战。</p><p></p><p>他表示，从非技术的角度来看，数字化转型是“在充分释放<a href=\"https://www.infoq.cn/theme/149\">数据价值</a>\"和利用人工智能能力的前提下，重新打造一家企业的过程”。如果企业仅把数字化转型理解为，在现有的组织架构、业务流程、企业状况之下，利用技术实现降本增效的过程，那么从希望值上就已经出现了比较高的风险。</p><p></p><p>史凯举例，当组织架构和业务流程滞后于技术转型时，业务人员之间，以及业务与技术人员之间就会很难就场景的度量效果达成一致。“通常情况下，往往是在谈理念、谈方法都很和谐，但是一旦谈到具体的场景的效果度量，落到实施层面，就会各种扯皮。”所以对齐业务价值，找到杀手场景是转型的抓手和驱动力。</p><p></p><p>“很多数字化转型的企业到最后会发现，它其实要做的是<a href=\"https://www.infoq.cn/video/lG6DafzeGhgBwlg1fKkk\">组织架构</a>\"的调整，是职位岗位的调整，是员工技术技能的转换或者是改变。”朱辉表示。</p><p></p><p>因此，文化、组织架构以及流程的改变，是当下数字化转型过程当中碰到的主要障碍，企业数字化转型必须要有全面的战略，但凡其中一项是短板，都很有可能成为失败的导火索。</p><p></p><p>换言之，一方面，企业需要有全局的、长远的视角，循序渐进推进数字化工作，其中战略、节奏的调整很重要；另一方面，需要找到合适的落地场景，并进行与战略相匹配的组织流程重构工作。</p><p></p><h4>挑战二：数据“地基”还没打好</h4><p></p><p></p><p>数据是数字经济时代的基础性资源和战略性资源，也是重要的生产力。如今业内常说的数字思维，也可以简易理解成“<a href=\"https://www.infoq.cn/article/YcvRvZaOoez9sKJ92jHR\">数据思维</a>\"”。在数据分析已渗入到各行各业的商业活动的当下，“数据思维”对企业的重要性毋庸置疑。</p><p></p><p>从技术角度的维度看，朱辉认为企业数字化转型面临的最大挑战恰恰与“数据”息息相关：企业级数据的质量和治理的成熟度，会直接影响数字化转型的效果。“数据治理是与数据相关的项目当中难度最高、复杂度最高、时间跨度最长、投入最大的一类项目。但如果没有把数据治理作为数字化转型过程中的必经一环，以及必须要做好的那一环，那么很多工作都会难以顺利推动。”</p><p></p><p>从目前来看，很多企业在使用数据的过程中还存在诸多问题。</p><p></p><p>比如，管理者有数据意识，但员工却缺少数据思维，他们面对纷繁的业务，不知道如何利用数据来指导决策，多数情况下仍然依赖于人的经验；比如，业务人员缺少技术与数据知识，而技术人员和数据人员缺少业务思维，业务与技术之间无法融合，使得数据的使用缺少价值场景；再比如，由于数据孤岛严重、数据质量不高，就会造成数据资源浪费，最终结果仍然是无法利用数据提升企业的盈利能力。</p><p></p><p>“为了打好数据这个‘地基’，部分企业正在尝试综合各种管理手段和技术应用一步一步往前走，但是企业情况各异、内功参差，有的走得快，有的走得慢些。”孔云飞说道。</p><p></p><p>今年 6 月，中央全面深化改革委员会第二十六次会议审议通过了《关于构建数据基础制度 更好发挥数据要素作用的意见》，初步构建了数据基础制度体系的“四梁八柱”，对数据确权、流通、交易、安全等方面做出部署。</p><p></p><p>在相关政策的引导和扶持下，我国正加快培育数据要素市场，促进数据要素价值释放。各地积极开展探索，布局数据交易平台建设，国内最早成立的大数据交易所为贵阳大数据交易所，于 2015 年开始运营。去年至今，北京、上海、广州、深圳等地陆续有数据交易机构设立。这也为推进数据合法合规交易，进一步释放数据价值提供了支撑平台。</p><p></p><h4>挑战三：人才缺口大</h4><p></p><p></p><p>再往深处看，“人”这个因素，也被不少专家认为是普遍的挑战。</p><p></p><p>“一个是人的能力，一个是人的思维，其实这是最大的困难，人的问题解决了，很多问题都迎刃而解。”在郭华的感知中，企业人员若守着旧的方法和惯性，容易盲目自信和“交学费”。</p><p></p><p>富士康首席数字化官史喆也强调，数字化转型是需企业全员重度参与的改革项目，只有全面部署，系统深入才能解锁和释放数字价值。很多传统的人员观念，系统模式等都要有全新全方位的思考和重建，只有这样才能满足转型需要。</p><p></p><p>但是，从目前来看，<a href=\"https://www.infoq.cn/article/PWrhf2gIobOheUhVUpKE\">数字化人才</a>\"的缺口是有目共睹的。举例来说，在中国，目前 ICT 产业相关的人才供需比是 1:9，ICT 领域从业人员缺口达 1200 万，其中人工智能、云计算、大数据等新兴领域的缺口超过 900 万。</p><p></p><p>此外，新兴技术人才及复合型人才尤为紧缺。以制造业为例，在智能制造的大背景下，很多企业需要的不再只是熟悉生产制造的作业人员，而是既懂设备又懂技术，同时又有行业经验的复合型人才——而现实情况是，这类人才目前在任何一个行业都是稀缺资源。</p><p></p><h2>展望 2023，加速从点到面的数字化</h2><p></p><p></p><p>虽然困难重重，但是孔云飞仍然表示，经过近几年的专注投入和快速发展，未来，将有越来越多的企业从单个业务环节、单个产业的数字化走向全集团、全产业链的数字化。“他们更注重将业财沉淀下来的数据资产化以支撑决策智能化，深度挖掘端到端的业务转型洞察，探索业务增长第二曲线，也是为了支持正在经历寒冬的企业能通过降本增效达成收入稳定、毛利上扬的经营目标。”</p><p></p><h4>重视平台化建设</h4><p></p><p></p><p>而为了挖掘数据价值，让数据充分流动起来是基本前提之一。这意味着，企业一方面要从内部打破各种部门墙和系统孤岛，另一方面还要对外建立连接，实现全方位的打通。</p><p></p><p>“比如，对于中小型制造业，他们通常分布在比较小的领域端，他们比较迫切的需求是，如何成为大型企业的产业链条中最核心的一环，通过与大型企业的绑定，去优化自己的生产制造工艺。尤其是在这两年，全球供应链体系被彻底打破，变得越来越碎片化，<a href=\"https://www.infoq.cn/theme/161\">供应链</a>\"的重建就成了很大的挑战。”沈旸举例。</p><p></p><p>落地到技术层面，这表现为越来越多的企业开始重视平台化建设运营。</p><p></p><p>孔云飞指出，一些成熟玩家开始崇尚云计算、端到端超自动化，实现应用云服务化、全链路自动化，大幅提升业务运转。更有高阶玩家已经着手投资云平台、数据中台、机器学习等技术能力的探索。</p><p></p><p>金蝶中国平台解决方案部总监柳忠阳也表示，如今很多中大型企业开始关注“平台”，尽管大家并没有特别想明白平台具体是什么样的，但会开始强调一些平台底座需求，希望构建起自身的平台能力。其认为，当下<a href=\"https://xie.infoq.cn/article/71e30ef2eff57fb126b13d65d\">行业云</a>\"平台可以站在客户的角度去提供资源和产品的组合。</p><p></p><p>今年，Gartner 发布了企业机构在 2023 年需要探索的<a href=\"https://www.infoq.cn/article/QeEpTFuWHJC2s7k8K7Rv\">十大战略技术趋势</a>\"。其中，行业云平台被列入十大战略技术趋势之一。在 Gartner 的定义中，行业云平台是通过组合 SaaS、平台即服务（PaaS）和基础设施即服务（IaaS）提供支持行业应用场景的行业模块化能力。</p><p></p><p>企业可以将行业云平台的打包功能作为基础模块，组合成独特、差异化的数字业务项目，在提高敏捷性、推动创新和缩短产品上市时间的同时避免单一厂商锁定。Gartner 预测，到 2027 年，超过 50% 的企业将使用行业云平台来加速他们的业务项目。</p><p></p><p>在我们看来，本质上，行业云平台也理解为更广义的行业解决方案。原先，行业云在业内争议较大，阿里云总裁胡晓明早些年曾在采访中谈到：“如果从基础设施 IaaS 层面看，行业云是一个伪命题。”</p><p></p><p>但经过这几年的发展，具有行业属性的云，越来越备受关注。Forrester《2022 年中国行业云系列报告》指出，金融服务、制造、政府、零售和医疗等行业用户正在加速行业云应用，一些行业云先锋案例引领了同行云实践。</p><p></p><p>Forrester 将中国行业云厂商生态分为 7 部分：公有行业云平台、私有行业云平台、行业从业者、SaaS 行业云应用、行业专家、领域技术推动者和 IT 服务，能力覆盖行业用户场景的底层基础设施、开发平台和应用服务三个技术栈。报告认为，行业云对于不同垂直行业的企业加速数字化转型和适应未来发展至关重要，但是没有一个通用的行业云解决方案可以解决一个企业的所有业务需求。对此，其建议中国企业的技术高管在实施行业云的过程中采取务实的态度并建立正确的认知。</p><p></p><p>此外，从架构层面来看，由于能够支持企业工作负载在内部环境、私有云和多云环境之间的迁移，以及在不同供应商的云环境之间按需迁移，让企业实现数据的无缝衔接，混合云平台也成为越来越多企业的优选项。</p><p></p><h4>加速智能化升级</h4><p></p><p></p><p>数智战略离不开智能化，“云”解决了如何开始计算的问题，效率的问题，“智能化”则解决如何把计算结果用得好的问题。</p><p></p><p>以智能制造为例，史喆介绍道，<a href=\"https://www.infoq.cn/article/dXiIvgGYTxBreaMAHtBV\">富士康</a>\"有大量的生产运营场景，也有众多需要决策的点。“如何运营能降低成本，如何高效管理规格种类繁复的大量设备？如何把生产经营中的 Know-How 和决策以数字化的形式共享到全集团内？这些都是我们正在做的工作。”</p><p></p><p>柳忠阳也从客户方感知到，如何让数据和智能结合起来并融入业务场景，是如今被重点关注的问题。</p><p></p><p>如今，不少企业已经实施智能解决方案，比如流程自动化、智能分析等等。对应的技术应用方面，自动化工具 RPA（机器人流程自动化）依然是热门主流选择，它是当今许多企业踏入数字化转型大门的重要技术工具和平台，充当着企业的辅助生产工具以及数字化劳动力等角色。根据德勤的一项调查，53% 的组织已经开始实施 RPA。</p><p></p><p>RPA 的核心逻辑是从数据里能挖掘出有效信息，并迅速解决效率层面的问题。目前，行业内的 RPA 基本朝着智能化全场景服务的方向发展。</p><p></p><p>但如果要深度应用人工智能技术，则远不止这些。从行业来看，目前主要是高科技、电信、金融服务等行业对 AI 的应用比较深和广，比如金融服务类企业则将其应用于提升客户体验的相关职能。此外，许多汽车制造商也在运用人工智能技术开发无人驾驶汽车、改善企业运营。</p><p></p><p>据朱辉介绍，汽车行业近年发展的重点，已经从传统的造好车（“酒香不怕巷子深”）转变到更加提倡体验化、服务化、智能化、生态化。“未来的汽车就是一个软件能力的集成体，是一个人工智能能力的集成体，也是一个数据的产生和应用的集成体。在汽车制造以及汽车生态里面都正在发生一些颠覆性的变化。人工智能、混合云平台的技术在汽车行业当中是会发挥越来越大的作用。”</p><p></p><p>麦肯锡曾在一份报道中将人工智能视为数字化的下一个前沿，并指出人工智能技术对企业的数字化实力有一定要求，而且往往需要以特定数据进行训练，这就意味着企业没有捷径可走，只能加快数字化转型的步伐，包括人工智能技术的发展。先行企业现已逐渐形成竞争优势，将后来者甩得越来越远。</p><p></p><h4>补齐人才短板</h4><p></p><p></p><p>如果说技术是企业转型的外驱力，那么人才则是内生力。为全面推动数字化，人才的问题必须解决。</p><p></p><p>作为数字化转型的亲身实践者，郭华提出，最快最直接的数字化人才培养方式是“做项目”，训战结合。但这里面有一个非常重要的前提条件，即企业必须要建立起选择人的标准，基于标签、画像、数字化人才发展路径对所需的数字化人才进行规划与培养。</p><p></p><p>从技术服务商的角度来看，越来越多的科技企业也在近些年纷纷推出相应举措以加速人才培养。比如，华为在去年发布了“未来种子 2.0”计划，承诺在未来五年投入 1.5 亿美元用于数字化人才培养，新增受益人数预计将超过 300 万人。官方数据显示，截止目前，华为数字化人才发展服务已覆盖企业客户 1200 多家，累计为企业培养数字化人才近 5 万人。此外，腾讯教育也与 600 多所高校展开人才培养方面合作，累计为社会培养了超过 10 万名数字人才。</p><p></p><p>当然，无论是吸引人才抑或是培养人才，企业首先要搞清楚的是，自己缺的到底是哪类人才，才能有的放矢，有针对性地投入。过去，业内一般会把数字人才分为三类：数字管理人才、数字专业人才和数字化应用人才。而近年来，一些机构开始也对数字化人才做了更深层次的诠释。</p><p></p><p>以极客邦双数研究院今年发布的《<a href=\"https://www.infoq.cn/article/gqxogpedydw8riz6okkr\">数字人才发展体系：粮仓模型白皮书</a>\"》为例，该白皮书将上述三类数字人才进一步细分为更加匹配企业架构的五层数字人才，分别是：</p><p></p><p>数字思维管理者：对应企业 CXO 层级。他们需要具备数字化思维，负责数字化战略创新，是带领团队推进企业数字化变革的企业管理者；数字思维业务人才：具备数据思维，掌握数字工具的使用技能，基于不同业务场景，善于利用新技术手段提高业务效率和价值的人才；业务架构人才：将业务战略解码，将企业内部业务进行横向打通的复合型架构人才；技术架构人才：能力横跨多个技术领域，通过技术架构设计和实施来支撑业务的复合型架构人才；专项技术人才：掌握软件技术或者新兴技术，并能够创造应用工具的人才。</p><p></p><p>以上五层数字人才粮仓模型，从人才分类、所需能力以及人才占比等维度给企业提供了建立数字化转型人才战略的思路，帮助企业先识别人才，再补齐短板。</p><p></p><h2>总结</h2><p></p><p></p><p>近几年，我们可以明显看到，疫情促使企业加快数字化、智能化升级。最初，数字化转型升级对多数企业来说是权宜之计，主要转型场景围绕数字化办公、<a href=\"https://www.infoq.cn/article/cS1UEOxZRAZFVDkx8dkH\">消费场景数字化</a>\"、业务流程进一步线上化等展开。</p><p></p><p>虽然受到 2022 年的经济形势影响，企业的“口袋”捂得更加严实，更注重业务价值回报，更看重各种技术的投入产出比，以及数字化能够带来的经济价值。但是，展望 2023 年，数字化依旧势不可挡。</p><p></p><p>数字化的范围逐渐从单个企业的数字化转向产业性、地域性的数字化，智慧供应链、产业互联网、智慧城市、无人驾驶等将成为新的技术集聚热点。放眼全球，借助云计算等数字化技术加快出海，构建全球化品牌，将成为众多领先企业新的增长引擎。而为了满足全球监管合规要求，全面的安全策略和生态系统将成为标配。</p><p></p><p>除此之外，为落实可持续发展目标，如何利用数字化技术实现低碳、<a href=\"https://www.infoq.cn/article/wK91ohatBuULkxsliMaa\">绿色</a>\"、降低能耗，实现高质量的可持续发展，也必将成为企业数字化的重要议题。</p><p></p><p>可见，如今数字化转型的意义已远超当初的考量，它可以帮助企业寻找新的发展机遇，甚至决定了企业发展的命脉，在充满不确定性和不断变化的大环境下，觅得新生机。</p><p></p><p></p><blockquote>如果你对本文感兴趣，欢迎在文末留言，或加入 InfoQ 写作平台话题讨论：<a href=\"https://xie.infoq.cn/\">https://xie.infoq.cn/</a>\"后续，迷你书、专题将集合发布于 InfoQ 官网，登录 InfoQ 官网: <a href=\"https://www.infoq.cn/\">https://www.infoq.cn/</a>\" 注册并将 InfoQ 添加进收藏夹，精彩不错过。同时，InfoQ 年度展望直播周将于 2023 年 1 月 3 日首场开播，并持续输出精彩内容，关注 InfoQ 视频号，与行业技术大牛连麦~</blockquote><p></p>",
    "publish_time": "2022-12-23 11:44:38",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]