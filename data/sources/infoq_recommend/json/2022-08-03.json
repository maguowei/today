[
  {
    "title": "ZK 训练营第四课：基于ZK协议的机器学习隐私保护设计",
    "url": "https://www.infoq.cn/article/ERqbLpof2kk6ZyNfDmww",
    "summary": "<p>PrivacyIN隐私学院 (Privacy Institution) 是由LatticeX基金会发起，致力于建设开放的密码和隐私技术布道和研究社区，并联合全球顶尖的学者、隐私技术开发者推动ZK(零知识证明)、MPC(安全多方计算)、FHE(全同态密码)的创新和落地。</p>\n<p>为了推动隐私在下一代多方计算场景中的创新和落地，PrivacyIN隐私学院计划围绕现代密码学技术开展技术培训、研究社区和项目创新孵化。以此降低开发者理论协议应用门槛，提高密码研究人员的工程创新能力，共同维护一个开放的密码隐私技术社区。</p>\n<p>自7月9日PrivacyIN隐私学院首期ZK训练营开课伊始，便收到了几百名密码学爱好者报名参与训练营，PrivacyIN最终遴选出全球不同地区20位同学参与这次丰富、实用、干货满满的密码学实践课程。学生中不乏来自Google Tiktok  推特等知名企业的开发者，亦有来自斯坦福、东京大学、清华等高校的学生。</p>\n<p>为使全球更多的学生、开发者参与到密码学的学习中，PrivacyIN课程之外，首次开启公开课讲座。</p>\n<p>本次讲座课程由西北大学计算机科学系助理教授汪骁介绍了基于ZK协议的机器学习隐私保护设计，详细分析了Mystique协议的结构和解决的问题。</p>",
    "publish_time": "2022-08-03 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Gatling与JMeter，性能测试工具该选谁",
    "url": "https://www.infoq.cn/article/FUkDdA7dAjWDXouhqv0m",
    "summary": "<p><a href=\"https://jmeter.apache.org/\">JMeter</a>\"和<a href=\"https://gatling.io/\">Gatling</a>\"是性能测试工具中的佼佼者。现在已经有很多关于比较这两个工具的文章，那么为什么我还要再这篇文章呢？我将从一个不一样的角度来比较这两个工具。这两个工具我都用了很长一段时间了，我想是时候总结一下我的经验了。</p><p></p><h2>完美的性能测试应该是怎样的</h2><p></p><p>&nbsp;</p><p>从开发人员的角度来看，测试应用程序的性能是开发人员的职责。因此，让一个从未接触过应用程序源代码的测试团队来测试应用程序的性能，这种方法是行不通的。我并不是说测试人员就无法进行良好的性能测试，我想强调的是，如果我们有专门的性能测试人员，那么从一开始就应该让测试人员和开发人员进行密切的合作。</p><p>&nbsp;</p><p>随着时间的推移，越来越多的责任会转移到测试团队，但开发人员仍然需要对结果进行分析。当结果与我们最初的预期不同时，就尤为如此。当然，这对开发人员来说是有好处的，因为它创建了一个与解决方案质量相关的反馈循环，类似于单元测试、集成测试或端到端（E2E）测试。</p><p>&nbsp;</p><p>性能测试无疑是软件开发当中成本最高的一种测试。测试人员或开发人员需要花宝贵的时间创建它们，除此之外，它们还需要一个专门的（如果可能的话）测试环境。应用程序的变化非常频繁，性能测试需要跟踪这些变化，并保持最新，这比最初创建测试时的成本更高。</p><p>&nbsp;</p><p>基于上述原因，关于性能测试，我的第一个建议是用长期的思维来考虑整个测试过程。理想情况下，性能测试应该是持续部署（CD）的一部分。但这并不一定总能实现，也并不一定是有意义的。然而，根据我的观察，在一开始的性能测试中走捷径可能会让我们在未来付出更大的代价。</p><p></p><h2>如何选择性能测试工具</h2><p></p><p>&nbsp;</p><p>选择性能测试工具是第一个难题，我希望本文能够帮助你做出正确的选择。</p><p>&nbsp;</p><p>从开发人员的角度来看，一个好的性能测试工具应该具备以下四个主要属性。</p><p>&nbsp;</p><p>可读性；可组合性；正确的指标；分布式负载生成。</p><p>&nbsp;</p><p>你可能会说：“就这样？”是的。这些是在选择工具时最重要的考虑因素。当然，还有很多其他特定的功能，尽管大多数工具在创建测试场景、模拟流量等方面提供了或多或少类似的选项。所以，在选择一个既方便又可维护的工具时，我会把重点放在这些要点上。</p><p>&nbsp;</p><p>只有当一个工具满足了这四个基本要求，我们才能继续了解它提供的其他功能。否则，如果只是受到一些有趣功能的诱惑，从长远来看，这些功能可能既不有趣也不是很有用，它将变成一个不那么好的工具。</p><p></p><h2>可读性</h2><p></p><p>&nbsp;</p><p>我们先从第一点开始。比较带有GUI的应用程序的可读性是一种非常不寻常的方法，我们来看看它会产生怎样的结果。JMeter中的一个简单的业务流程可能如下所示。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f8/f8656135ee8eb39b54e3f358c9e5ab59.png\" /></p><p>&nbsp;</p><p>乍一看，相当不错。一切都很清楚，我们很容易就可以理解测试的是什么。问题是，随着我们开始扩展场景，添加新的测试步骤，参数化当前步骤或改变它们的行为，那么很快，我们就会得出这样的结论：这是一项非常乏味的工作。你必须经常使用鼠标，知道什么东西藏在哪里，更糟糕的是，你需要记住各个查询之间的隐式连接（例如，共享变量）。</p><p>&nbsp;</p><p>根据我的经验，在GUI上编辑测试用例迟早会变得不那么令人感到愉快，我们将切换到编辑XML格式的源代码，而XML格式的源代码（通常是XML格式）可读性很差。在XML中，我们能够做的就是使用最基础的基于字符串的编辑技术，例如“替换”等。</p><p>&nbsp;</p><p><code lang=\"html\"><!--?xml version=\"1.0\" encoding=\"UTF-8\"?-->\n\n  \n    \n      \n      false\n      True\n      false\n      \n        \n      \n      \n      ...\n  That's a very, very long XML.\n      ...</code></p><p>&nbsp;</p><p>完整的XML代码在<a href=\"https://gist.github.com/aludwiko/9290f951132a591c4ae9ee688ba026d9\">这里</a>\"。</p><p>&nbsp;</p><p>在Gatling中，同样的场景看起来像这样。</p><p><code lang=\"python\">  val scn =\n    scenario(\"Example scenario\")\n      .exec(http(\"go to main page\").get(\"/\"))\n      .exec(http(\"find computer\").get(\"/computers?f=macbook\"))\n      .exec(http(\"edit computer\").get(\"/computers/6\"))\n      .exec(http(\"go to main page\").get(\"/\"))\n      .repeat(4, \"page\") {\n        exec(http(\"go to page\").get(\"/computers?p=${page}\"))\n      }\n      .exec(http(\"go to create new computer page\").get(\"/computers/new\"))\n      .exec(\n        http(\"create new computer\")\n          .post(\"/computers\")\n          .formParam(\"name\", \"Beautiful Computer\")\n          .formParam(\"introduced\", \"2012-05-30\")\n          .formParam(\"discontinued\", \"\")\n          .formParam(\"company\", \"37\")\n      )</code></p><p>&nbsp;</p><p>它与JMeter非常相似，也就是说，你可以看到正在测试的内容以及整体流程。不过，我们不要忘了，这段源代码的可读性几乎和普通语句一样。我们首先会想到的是，既然是源代码，那么我们就可以使用所有已知的重构方法来扩展场景或提高其可读性。</p><p>&nbsp;</p><p>Scala（Gatling中使用的是Scala）是一种高度类型化的语言，构造场景的大多数问题将在编译代码时被发现。而在JMeter中，只有当场景启动时才会检查错误，这肯定会降低结果反馈循环的速度。</p><p>&nbsp;</p><p>源代码的另一个好处是，测试的版本管理将变得非常容易，并且可以让其他程序员（甚至是来自不同的团队）评审它们。如果你不得不面对数千行XML，那么只能祝你好运。</p><p></p><h2>可组合性</h2><p></p><p>&nbsp;</p><p>如果我们需要创建多个共享某些逻辑的性能测试，例如身份验证、用户创建等，可组合性是至关重要的。在JMeter中，我们只能通过非常快速的复制粘贴来编辑这些测试。即使是这个简单的测试也存在重复的片段。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/39/39cd5b02fc836f9669092e6ae724ac5a.png\" /></p><p></p><p>&nbsp;</p><p>随着时间的推移，需要重复的地方会越来越多。不仅是单个请求，整个业务逻辑片段都需要被复制。你可以使用<a href=\"https://www.blazemeter.com/blog/jmeter-using-module-controller\">Module Controller</a>\"来解决这个问题，或者用Groovy或BeanShell创建自己的<a href=\"https://jmeter.apache.org/usermanual/component_reference.html#JSR223_Sampler\">扩展</a>\"。从我的经验来看，这样做非常不方便而且容易出错。</p><p>&nbsp;</p><p>在Gatling中，构建可重用的片段基本上只受编程技能的限制。第一步是提取出一些可以被多次使用的方法。</p><p>&nbsp;</p><p><code lang=\"java\">  private val goToMainPage = http(\"go to main page\").get(\"/\")\n\n\n  private def findComputer(name: String) = http(\"find computer\").get(s\"/computers?f=${name}\")\n\n\n  private def editComputer(id: Int) = http(\"edit computer\").get(s\"/computers/${id}\")\n\n\n  private def goToPage(page: Int) = http(\"go to page\").get(s\"/computers?p=${page}\")\n\n\n  private val goToCreateNewComputerPage = http(\"go to create new computer page\").get(\"/computers/new\")\n\n\n  private def createNewComputer(name: String) =\n    http(\"create new computer\")\n      .post(\"/computers\")\n      .formParam(\"name\", name)\n      .formParam(\"introduced\", \"2012-05-30\")\n      .formParam(\"discontinued\", \"\")\n      .formParam(\"company\", \"37\")\n\n\n  val scn =\n    scenario(\"Example scenario\")\n      .exec(goToMainPage)\n      .exec(findComputer(\"macbook\"))\n      .exec(editComputer(6))\n      .exec(goToMainPage)\n      .exec(goToPage(1))\n      .exec(goToPage(1))\n      .exec(goToPage(3))\n      .exec(goToPage(10))\n      .exec(goToCreateNewComputerPage)\n      .exec(createNewComputer(\"Awesome computer\"))</code></p><p>&nbsp;</p><p>接下来，我们可以将场景划分为更小的片段，然后组合它们并创建出更复杂的业务流程。</p><p>&nbsp;</p><p><code lang=\"python\">  val search = exec(goToMainPage)\n    .exec(findComputer(\"macbook\"))\n    .exec(editComputer(6))\n\n\n  val jumpBetweenPages = exec(goToPage(1))\n    .exec(goToPage(1))\n    .exec(goToPage(3))\n    .exec(goToPage(10))\n\n\n  val addComputer = exec(goToMainPage)\n    .exec(goToCreateNewComputerPage)\n    .exec(createNewComputer(\"Awesome computer\"))\n\n\n  val scn =\n    scenario(\"Example scenario\")\n      .exec(search, jumpBetweenPages, addComputer)</code></p><p>&nbsp;</p><p>如果我们需要长期维护性能测试，那么毫无疑问，与其他工具相比，高可组合性将是一个优势。根据我的观察，似乎只有那些支持通过源代码来编写测试用例的工具，例如Gatling和Scala、<a href=\"https://locust.io/\">Locust</a>\"和Python、<a href=\"https://github.com/giltene/wrk2\">WRK2</a>\"和Lua符合这个标准。如果测试用例是用XML、JSON等文本格式保存的，那么可组合性总是会受到这些格式的限制。</p><p></p><h2>正确的指标</h2><p></p><p>&nbsp;</p><p>每一个性能测试人员应该都听到过这个说法：“谎言、该死的谎言和统计数据。”如果他们还没听到过，那么他们肯定会以一种非常痛苦的方式学上一课。我们可以用一整篇文章来讨论为什么这句话会成为性能测试领域的咒语。简而言之：中位数、算术平均值、标准偏差在这个领域是完全无用的指标（你只能把它们当作额外的见解）。你可以在Gil Tene（Azul的首席技术官和联合创始人）的精彩<a href=\"https://www.youtube.com/watch?v=lJ8ydIuPFeU&amp;ab_channel=StrangeLoop\">演讲</a>\"中获得更多细节。因此，如果性能测试工具只提供这种静态数据，那么你可以立即把它丢掉。</p><p>&nbsp;</p><p>衡量和比较性能的唯一有意义的指标是百分比，但在使用它们时要注意它们是如何实现的。通常，它们是基于算术平均值和标准偏差实现的，这导致它们变得不那么有用。</p><p>&nbsp;</p><p>你可以从上面的演讲视频中学习如何验证百分比的正确性。</p><p>&nbsp;</p><p>另一种方法是自己检查实现指标的源代码。但遗憾的是，大多数性能测试工具文档并没有涵盖如何计算百分比。即使有这样的文档，也很少有人会去阅读它，因此可能会掉入一些陷阱，例如<a href=\"https://www.youtube.com/watch?v=DhkSnSSqvX4&amp;feature=youtu.be&amp;t=865\">Dropwizard框架指标的实现</a>\"。</p><p>&nbsp;</p><p>如果没有正确的数学/统计数据，我们在性能测试方面所做的工作都是毫无价值的，因为我们将无法理解单个测试的结果或结果之间的比较。</p><p>&nbsp;</p><p>我在进行性能测试时通常会使用百分比可随着时间发生变化的图形，Gatling和JMeter都提供了这些功能。我们因此能够判断被测试的系统在整个测试过程中是否存在性能问题。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5d/5d25df04f07b9cb02834b60d8ec090f6.png\" /></p><p></p><p>要比较各个测试的结果，你需要使用全局百分比（在两个工具中都可用）。但JMeter全局百分比的准确性可能是个问题。Gatling使用<a href=\"http://hdrhistogram.org/\">HdrHistogram</a>\"库来计算百分比，在准确性和内存需求之间做出了一个非常合理的折衷。</p><p></p><h2>分布式测试</h2><p></p><p>&nbsp;</p><p>有一些<a href=\"https://dzone.com/articles/gatling-vs-jmeter\">文章</a>\"讨论了测试工具本身的性能。这在一定程度上也很重要，因为我们需要生成巨大的流量给被测试的系统“施压”。问题在于，现在的应用程序很少是运行在单台机器上的单个实例。我们测试的是包含多个实例的分布式系统，这些实例运行在不同的机器上（通常是动态可伸缩的云解决方案）。单台机器的性能测试无法生成足够的负载来测试这样的环境。因此，我们不应该去关注哪个工具可以在一台机器上产生更多的流量，而是看看有没有可以同时从多台机器运行分布式测试的工具。</p><p>&nbsp;</p><p>在这方面，这两个工具打成了平手。我们可以在Gatling和JMeter中进行手动的分布式测试。此外，我们可以使用现有的解决方案，如<a href=\"https://www.flood.io/tools\">Flood</a>\"或<a href=\"https://gatling.io/enterprise/\">Gatling Enterprise</a>\"，为我们自动完成分布式测试。我绝对推荐后者，因为它会为我们节省很多宝贵的时间。</p><p></p><h2>总结</h2><p></p><p>&nbsp;</p><p>尽管本文的基调可能会被认为是在嘲讽JMeter，但这并不是我的本意，因为这两种工具我都用过。我曾经以为JMeter是唯一合理的测试性能工具，但当我开始使用Gatling时，我看不到再回到JMeter的意义。</p><p>&nbsp;</p><p>一个带有图形界面的工具在一开始可能会更容易使用，但对于我来说，将性能测试作为代码的想法更有吸引力。Gatling的DSL使用起来非常方便，具有很强的可读性，维护起来也容易得多。</p><p>&nbsp;</p><p>很多人对Gatling持怀疑态度，因为它要求学习一门新的编程语言——Scala，而Scala被认为是一门很难使用的编程语言。然而，事实并非如此。Scala有其优点和缺点，要在Gatling中使用Scala，只需要掌握基本的语法知识即可。另外，如果你一直希望在工作中使用Scala，但由于各种原因无法实现，那么性能（和自动化）测试将是一个将这门语言引入你的生态系统的绝佳机会。需要注意的是，从Gatling 3.7开始，你可以使用Java了！这将是我下一篇文章的主题。请继续关注。</p><p>&nbsp;</p><p>作者简介：</p><p>Andrzej Ludwikowski是<a href=\"https://softwaremill.com/\">SoftwareMill</a>\"的软件架构师，拥有超过12年的商业软件开发经验。他是技术会议发言人和博客作者，领域驱动开发、事件溯源和多语言持久化技术爱好者，喜欢研究系统性能瓶颈问题。他有一个不断追求完美软件架构的梦想，尽管这样的架构可能不存在，但追求梦想本身就是目标。他还是SoftwareMill Academy的培训师。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/performance-testing/\">Gatling vs JMeter - What to Use for Performance Testing</a>\"</p><p>&nbsp;</p>",
    "publish_time": "2022-08-03 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "蚂蚁首次披露核心基础软件技术开源版图，8月将开源大规模图计算数据库TuGraph",
    "url": "https://www.infoq.cn/article/TPlUBzp5py2d2eSzDjJt",
    "summary": "<p>7月28日，2022开放原子全球开源峰会在北京开幕。本届峰会以“软件定义世界,开源共筑未来”为主题，全球顶级开源基金会与开源社区，以及<a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651120183&amp;idx=1&amp;sn=e5a421c5f61bda87a5c02fe2e72102b2&amp;chksm=bdb91a648ace93728300bdb78b148b2e56d9fba604570b4baf2a323f07812daf56c82e2df408&amp;scene=27#wechat_redirect\">阿里</a>\"、蚂蚁、<a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651041914&amp;idx=1&amp;sn=059ae1be87783817441ec2bbbc3c232a&amp;chksm=bdbe48298ac9c13f62075c8bd77673161a8a0b64dc77fdf382ff18e3ae0dbeaf8eadeb06526d&amp;scene=27#wechat_redirect\">华为</a>\"、<a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651062687&amp;idx=4&amp;sn=ee24b14ca8ca7df5921b0455b0ceb5fd&amp;chksm=bdb9f9cc8ace70da33989f481076aab5188d28fc4cf14abf736bc87baf4198d8b95f4da88c4f&amp;scene=27#wechat_redirect\">英特尔</a>\"等开源厂商代表参加。蚂蚁集团基础设施技术委员会主席何征宇应邀在高峰论坛上发表了题为“开放自研核心基础软件技术 携手探索技术高地”的主题演讲。</p><p>&nbsp;</p><p>在演讲中，何征宇介绍了蚂蚁的开源战略理念以及核心技术开源版图，并阐述了蚂蚁在应对开源挑战时的思考和行动。</p><p>&nbsp;</p><p>以下内容来自何征宇的演讲内容：</p><p></p><h2>开源是技术生态的生命之水</h2><p></p><p>&nbsp;</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651125700&amp;idx=1&amp;sn=b6098b704286a0b13c7472785f49dd2f&amp;chksm=bdb90f978ace86811901f091e0f201467f5dc98b80ef14ecfc9c75db3b3b9cf476d1f4dc5d9a&amp;scene=27#wechat_redirect\">开源</a>\"是维护技术生态健康发展的源头。开源开放，推进真正的可信技术的创新，才能真正推动技术的突破和产业生态的健康发展。</p><p>&nbsp;</p><p>有一本被开源技术圈奉为圣经的书《大教堂与集市》，描述了几种软件的开发模式：1、传统的大教堂模式，有点像现在一些大公司的开源模式“我开、你看”；2、<a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651130293&amp;idx=2&amp;sn=fd6dc3927e04a667860941633c52d7de&amp;chksm=bdb8f1e68acf78f00aafa670e4803a74f24c2a2e8f8eff59d50ed1948a0cb8e7922f57b3785f&amp;scene=27#wechat_redirect\">Linux社区</a>\"这种集市化的模式。这种开源社区看起来“乱糟糟”，像集市一样，但里面蕴藏着生机，是生机勃勃的“乱糟糟”。我是一名海水鱼的饲养爱好者，养过鱼的朋友可能知道，一个封闭鱼缸的生态有多脆弱。这个生态本身的大小，决定着缸内生物生命力的旺盛程度。</p><p>&nbsp;</p><p>开源社区的发展，离不开生态的发展。生态的发展，也离不开商业价值的实现。“开源”被写进了“十四五”规划：开放、平等、协作、共享的开源模式，加速软件迭代升级，促进产用协同创新，推动产业生态完善，成为全球软件技术和产业创新的主导模式。<a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651127039&amp;idx=2&amp;sn=de720eb86d6151975a4951f4c538782a&amp;chksm=bdb904ac8ace8dbac3bc4aa486655fb27a54694ba88ff7bf53a3468dd0219981d86237d3209d&amp;scene=27#wechat_redirect\">蚂蚁</a>\"在认真学习整个“十四五”规划，我们特别相信一句话，“开源开放，推进真正的可信和技术的创新， 才能实现商业价值和技术价值的统一”。</p><p>&nbsp;</p><p>蚂蚁旗下的支付宝是一个承载着数千万中小企业和数亿消费者的平台。今年6月，蚂蚁集团发布了ESG战略，明确了面向2030年的可持续发展目标，其中一个核心战略，就是“开放生态”，与合作伙伴共同发展。我们从<a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651019547&amp;idx=3&amp;sn=dbe1793374bb4c2bfde5a0b307339a34&amp;chksm=bdbea1488ac9285e318f06277d1c794321490254b02f87bf1d98a4a39d66f2ca3482a9fd073f&amp;scene=27#wechat_redirect\">支付宝</a>\"诞生时就一直相信，“信任”是蚂蚁的技术信仰，也是商业基础，信任的背后是安全互信、开放共享的生态，因此，开源开放，从第一天就是蚂蚁的核心技术战略，也是我们会持续坚持的长期战略。</p><p>&nbsp;</p><p>蚂蚁开源发展了十几年，积累了近900个开源仓库，近百个社区头部开源项目。开源技术领域涉及：数据库、操作系统、隐私计算、云原生等核心基础技术领域。</p><p>&nbsp;</p><p>根据“2022中国开源发展蓝皮书”显示，截止2021年，蚂蚁集团共有348个活跃开源项目，总活跃程度和总影响力均位居中国企业前三位。</p><p></p><h2>开源基础软件技术，真正携手行业实现技术突破</h2><p></p><p>&nbsp;</p><p>我们认为，基础软件技术的开源，对行业突破技术瓶颈，乃至国家解决<a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651128166&amp;idx=2&amp;sn=5e6738704eab4dea156972275dc3b0f0&amp;chksm=bdb8f9358acf70235e5d133ffd59b62e6e68788c73ef30f64e3d8f9984a63889f62b57f3d62e&amp;scene=27#wechat_redirect\">卡脖子技术</a>\"难题有着至关重要的作用。</p><p>&nbsp;</p><p>蚂蚁开源，就是要把我们最核心的自研基础软件技术开放出来，把对社区生态发展和行业技术发展有影响力的技术开放出来。我们希望在蚂蚁自身场景进行大规模实践后，把这些技术开源，与上下游伙伴一起平等协作，共同推动行业技术向前，推动产业生态链完善。</p><p>&nbsp;</p><p>目前蚂蚁开源的自研核心技术包括：四大系统软件技术、两大应用基础软件技术。</p><p>&nbsp;</p><p>系统软件方面，蚂蚁最广为行业所知的是开源技术是<a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651065622&amp;idx=3&amp;sn=5f36623faafcf28299479720e3ed313b&amp;chksm=bdb9f5458ace7c534c8cec0468713cf63dfd439ab7c604d6fa0af605e2cd64f32648ab956034&amp;scene=27#wechat_redirect\"> OceanBase</a>\"。数据库作为最为复杂、跨技术领域最多的关键基础软件，在数字经济时代其战略性、基础性的地位更加凸显。过去十年，OceanBase一直在尝试攻克数据库特别是<a href=\"https://archsummit.infoq.cn/2022/beijing/track/1320\">原生分布式数据库</a>\"领域的“卡脖子”难题。去年6月，OceanBase正式开源，希望能激发更多开发者参与到国产数据库建设中。</p><p>&nbsp;</p><p>在云原生领域，蚂蚁聚焦在两个方面：一是针对大规模的分布式系统，特别是互联网应用服务治理的难点，我们开源了 SOFA Mesh 方向项目，其中包括自研的 MOSN 网关，这是一个久经考验、度过若干次双11链路的 Mesh 化解决方案。二是开源安全容器技术 Kata Containers，这也是 Open Infra Foudation（开放基础架构基金会）的顶级项目，今年也拿到了 SuperUser Aaward。与此同时，在云原生等基础技术领域，蚂蚁还开源了大家比较关心的隐私计算的核心技术点，以及 Occlum 这样的操作系统，它可以完美地解决在可信执行环境里面很多程序不容易被移植或被编写的问题，1分钟就可以把 Tensorflow light 直接移植进类似SGX的环境。并且我们通过即将开源的 HyperEnclave 技术，实现了信任根可以自主可控的目标。</p><p>&nbsp;</p><p>在系统技术之上，蚂蚁也有很多开放的应用基础技术。最近我们刚刚开源了蚂蚁内部经过六年打磨的可信隐私计算开源框架隐语。隐语是一个融合了几乎所有行业主流隐私计算技术的技术框架，在安全性和易用性上有突出的表现，可以从技术层面解决数据流通中的数据安全和隐私保护问题，解决隐私保护和数据孤岛等行业痛点。开源后，开发者可免费使用隐语的代码，从而实现技术普惠和行业生态共建。</p><p>&nbsp;</p><p>蚂蚁也开源了国内首个开源密码库 BabaSSL。SSL是一个比较关键的核心技术软件，国内一直没有开源的加密库。我们在 OpenSSL 的基础上做了一些工作，并整合了国密最新的实践，从而开源了国内首个开源的密码库 BabaSSL，获得了社区特别是国内用户的一致好评。</p><p>&nbsp;</p><p>随着社区的发展、用户用量的增多，也随着技术的发展，<a href=\"https://mp.weixin.qq.com/s?__biz=MzU1NDA4NjU2MA==&amp;mid=2247568493&amp;idx=3&amp;sn=f1b97a8c61774e13b45ab0ba766626a7&amp;chksm=fbeb75a2cc9cfcb4cca44ed5bbdd370a4a87b385ac7568225e8e529da6bada3169b055ba3adb&amp;scene=27#wechat_redirect\">隐私计算</a>\"、区块链等场景对先进密码学有着更旺盛的需求，蚂蚁在开放原子基金会的指导下，决定对该项目进行品牌升级，更名为“铜锁”，我们后面也会配合基金会完成整个项目捐赠的过程。</p><p>&nbsp;</p><p>取名“铜锁”的意义非常简单，中华民族五千年以来，为人民生命财产提供保护的最基础元素之一就是一把铜锁，蚂蚁借此寓意，希望把“铜锁”发展为一个核心的密码库基础组件，融合最先进的密码学算法，能够更加开放地为整个行业和社会服务。</p><p>&nbsp;</p><p>8月，我们也即将开源蚂蚁大规模图计算<a href=\"https://archsummit.infoq.cn/2022/beijing/track/1197\">数据库</a>\"TuGraph。TuGraph是蚂蚁从2015年起开始布局的基础软件技术。去年“大规模图计算系统GeaGraph”项目，入选世界互联网领先科技成果。蚂蚁希望以开源的方式与行业共享共建，共同推动图技术的发展和产业繁荣。</p><p></p><h2>共同应对开源挑战，共建开源生态</h2><p></p><p>&nbsp;</p><p>开源的软件影响到社会的方方面面，已经成为社会创新的基础设施。今天上午的开幕式上我看到几个数据：2021年全球大开源社区Github上的开发者数量已经达到7300多万，增速显著；而根据知名开源软件供应商Redhat对1250位全球IT领导者的调查，90%都在使用企业开源软件。</p><p>&nbsp;</p><p>与此同时，我们看到国内人口红利正在转化成工程师红利；40年改革开放的经济发展得到信息时代爆发式增长的加持，国内大市场的环境让我们的科技行业已经产生了足够多的原始积累，一起演化成了我们今天软件行业的黑土地。我们播下开源那颗种子，一定可以收获我们几代人都在等待的那棵科技树，用软件为我国经济社会的高质量发展添砖加瓦。</p><p>&nbsp;</p><p>开源已经跨越了大概二十年，随着整个软件业特别是中国软件业的发展，开源生态建设的聚光灯逐渐从个体转向了代表开放共赢生态的开源基金会，开源社区建设大势所趋。从早年Apache基金会的成长历史来看，一个开源软件的种子可以长成一个世界级的基金会，成为软件行业的参天大树。</p><p>&nbsp;</p><p>我觉得开放的代码、社区肯定能够让软件的社会总成本有效降低，也为很多人带来更平等的机会。例如今天我们很欣喜地看到有很多开源方面的高校支持计划，有源源不断的各种基金会出现。</p><p>&nbsp;</p><p>蚂蚁一直坚持“开放、平等、协作、共享”的理念，蚂蚁开源也会继续努力为整个开源社区带来微小和美好的改变。</p>",
    "publish_time": "2022-08-03 09:50:07",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "龙蜥社区首推“分层分类”顶设，发展以云为终态的开源产业创新生态",
    "url": "https://www.infoq.cn/article/JwX9PKkIMjR7pCHr9prl",
    "summary": "<p></p><blockquote>在刚刚结束的&nbsp;<a href=\"http://mp.weixin.qq.com/s?__biz=Mzg4MTMyMTUwMQ==&amp;mid=2247503103&amp;idx=1&amp;sn=e6c8af5d5533f82c9aa427e191169579&amp;chksm=cf653f8df812b69b4330d86a4de861c0114365f251d55b8ec2e8bc1fa8c002718f3495e69fe7&amp;scene=21#wechat_redirect\">2022 开放原子全球开源峰会 OpenAnolis 分论坛</a>\"上，龙蜥社区技术委员会主席杨勇做了《OpenAnolis 社区技术发展报告》的主题演讲，分享龙蜥社区如何从 0 到 1 实现原生社区布局，以及发展以云为终态的开源产业创新生态。本文为演讲内容整理。</blockquote><p></p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/76/0d/765f134542ec6acc607e1732de2e190d.png\" /></p><p></p><h2>发展回望：从 0 到 1 实现原生社区布局</h2><p></p><p></p><p>2021 年 5 月，龙蜥社区发布<a href=\"http://mp.weixin.qq.com/s?__biz=Mzg4MTMyMTUwMQ==&amp;mid=2247483942&amp;idx=1&amp;sn=4d02a9f3e9edcf0aade4e91d3742cb87&amp;chksm=cf66f154f81178421dd7a1fea39c9890eb30f974287b626a877ba0fc1a0d7f5bd2167fe0966b&amp;scene=21#wechat_redirect\">首个 Linux 发行版 Anolis OS 8.2</a>\"，通过不断迭代产品去满足社区用户的需求，正式拉开投身开源操作系统的序幕。至此，龙蜥社区做了大量产品迭代和社区运营工作，围绕用户需求解决 CentOS 停服客户的问题，采用新发行版，选用新技术路线，基于社区平台，所有的产业和合作单位共同分工，产品矩阵初步形成。源于 CentOS 替代和用户云化的强劲需求，短短一年，130 多万装机量、100 万下载量、40+SIG 组、120+maintainer……种种数据表明，龙蜥社区实现了从 0 到 1 的跨越式发展，从做产品到做社区，完成了原生社区布局，迎来爆发式成长。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/2c/fe/2c7a35aab91a689542e42b7db1f44ffe.png\" /></p><p></p><p>整个基础设施当前是“3+3”的布局，支撑着社区可持续性的发展规划。</p><p></p><p>众创：研发过程社区协同，自动化提升效能。社区生态合作伙伴的研发体系、代码托管、BUG 报告、测试、产品工程体系等每个环节上实现协同，在效能和自动化上支持更多的社区场景，在供应链合规上有上千个组件，在知识产权合规上有大量的自动化工程。众测：T-One 一站式质量协作平台开启社区协作。质量保障上，通过社区的 T-One 实现了社区众测和众创。合规：安全可信构建、供应链安全保障、三方机构测评。过去一年社区在开源合规上有着非常大的进步，面对很多第三方评测机构的合作，社区的标准得到进一步提升。</p><p></p><p>正是因为“3+3”体系，龙蜥社区现在月均 5000+PR，保持了持续的活跃度，成为国内非常活跃的开源社区。值得一提的是，龙蜥社区组建了极具特色的芯片生态，最快最全支持了国内和国际主流芯片，比如社区对 Intel SPR 的支持是国内最全的、对于 ARMv9 最全功能规模验证，对于龙芯、海光 CSV 机密容器在开源社区首发支持、对 RSIC-V 在 Anolis OS 8.6 新特性的首发。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/8f/3c/8f693c9a9b4c029c9ba6c755329e593c.png\" /></p><p></p><p>当前，龙蜥社区有六大技术方向：一云多芯、云原生、软硬协同、编程语言、安全、高性能，每个方向上都有可以透出到国际社区国际标准的成果产生。</p><p></p><p>举个例子，在容器存储这方面，龙蜥社区在 CNCF 社区通过 Linux 项目支持了一个新型的只读存储标准叫 NydusRAFS v6 ，在 Linux 上游内核主线 5.19 集成了 FScache 这个特性。通过这两个事情我们把容器的存储镜像分发标准确立下来，我们坚信再过三五年国内整个这方面的分发生态就会用龙蜥社区的技术来实现，而这个过程中我们也得到了很多互联网公司直接到 Linux 上游社区声援，从这个特性上我们看到了社区众创众测的力量。</p><p></p><p>另外一个很好的例子就是在软硬协同方面，我们在阿里云龙蜥产品线上支持了一个 virtio 新规范，通过这个规范我们把 AF_XDP（Linux的标准协议）在 DPU 场景下跑通了，这个在过去是有问题的。我们又通过在 virtio 虚拟化网络接口标准提出修改意见，正式把我们的特性放到标准 1.2 里面。所以接下来我们看到一些国际的 DPU 厂商在 Linux 社区在讨论 1.2 标准支持的一些情况。通过这个例子，可以看到龙蜥社区的影响力，一旦新的 virtio 标准被采用，这个标准对虚拟化、DPU 产业都是有影响的。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/ab/a4/ab8a95d21db20ec268c96a895ef60fa4.png\" /></p><p></p><p>关于开源操作系统竞争力如何评价的观点多到没有标准答。那么，在开源操作系统中如何体现技术引领能力呢？</p><p></p><p>答案在于，我们能不能在国际社区开展上游的创新，能不能通过我们的开源事实标准去影响产业。即便龙蜥社区在中游发行版层，难道操作系统的竞争力就是这一层体现的吗？也不是，我们非常清楚如果今天龙蜥社区做成了跟 Debian、Fedora 一样的社区，那么我们就止步于此了吗，那肯定不能。所以这个社区要实现的能力就是图中的上下游三层，每一层都要有使命和目标，分别是国际社区合作构建标准、持续技术创新和完善社区产品、支撑下游商业模式，这是我们认为的一个领先的开源操作系统应该打造的原生社区能力。龙蜥社区正是通过上下游三层的协同有了更好的可持续发展模式。</p><p></p><p>当前，龙蜥社区已经通过打造 Anolis OS 8 以及 Anolis OS 23 形成一个完整布局，Anolis OS 23 可以快速吸收上游的创新，并且往上推上游的创新，LTS 版本可以用各种各样的商业模式赋能给产业，所以这是一个非常好的基础，也是一个很好的起点。</p><p></p><h2>规划升级：以云计算为终态的开源创新生态</h2><p></p><p></p><p>操作系统产业作为跟计算产业最紧密关联的产业，我们相信计算产业的未来必然关联着操作系统产业的未来，所以技术规划上操作系统的技术规划必须考虑计算产业的变迁。</p><p></p><p>我们看到近十年来中国云计算产业的发展非常迅速，芯片的定制、整机重新设计、软硬结合考量、DPU 等，云厂商都在投入 Linux 操作系统，包括 AWS、甚至微软。与此同时，我们看到编程语言、编程模式在云计算的模式下也发生了比较快的演进。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/a6/37/a61b0228347900e8e485c4c68c5e8637.png\" /></p><p></p><p>我们认为今天操作系统的整个技术规划要面向未来去考虑。</p><p></p><p>首先，龙蜥社区给用户提供一个好用的可用的 Linux 发行版来支撑现在的算力，更要考虑在云计算发展驱使下未来用户怎么管理数据中心，怎么做好一体化管理。今天的用户已经出现了在虚拟机、裸金属、物理机里面统一多云管理，包括编程语言和云原生的编程模式，这都是操作系统社区应该考虑的课题。龙蜥开源操作系统社区将以云计算为终态，发展开源创新生态，为社区伙伴和开发者提供共建云上标准机会，与用户一起面对未来挑战。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/f3/4e/f34faabfe30f0d85888826aaf6eef14e.png\" /></p><p></p><p>那么，我们如何衡量一个开源技术社区的进步呢？</p><p></p><p>实际上，开源技术社区的进步很难像管理一家公司一样，用 KPI 来驱动。所以我们认为最佳的衡量手段就是当下是否把事情做对了，是不是在一个正反馈里面。在新的一年规划里，龙蜥社区将从开发者、用户和客户的三方面去思考这个问题。</p><p></p><p>由于操作系统是一个存量的成熟的产品品类，所以过去一年龙蜥社区首要任务是深耕产品，满足客户和用户的需求，围绕需求建立社区价值，近一步放大开发者价值，致力于建设一个极具创新活力的社区。</p><p></p><p>跟大家分享一个小故事，最近我在一个业界技术交流群里看到有人反馈说使用龙蜥的体验非常好，然后我就加了这位同学好友进一步交流，了解得知这位同学不但是龙蜥社区的交流群中的活跃开发者，还是拥有着产品需求的种子用户。由此我认为通过研发可靠好用的社区产品，让用户成为我们的产品经理，然后从用户需求中探索社区发展方向，可以进一步支撑起客户侧的商业技术合作，“技术生态”、“产品生态”和“商业生态”组成龙蜥社区不断转动前进的“飞轮”，给品牌和社区带来更多的竞争力。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/4a/9b/4a168d2c8b1910b603e9b32761c1289b.png\" /></p><p></p><p>新的一年，龙蜥社区也将在产品矩阵上实施新的发力重点。社区目前主打的是 Anolis OS，是一个经典的操作系统 Linux 发行版，融入了云上创新技术、社区软硬件协同生态、商业操作系统等，Anolis OS 的路线图支撑着社区整体的发展规划，拥有举轻若重的地位。</p><p></p><p>因此，我们承诺每两年发布一个社区的 Anolis OS 主版本，每四年从发布的主版本里面选出 LTS 版本去做长期稳定支持。大家可以看到 Anolis OS 23 是Anolis OS 8 下一个版本，Anolis OS 25 是一个 LTS，从图中大家可以清晰的了解龙蜥社区和产品的发展节奏。今天，<a href=\"https://openanolis.cn/download\">Anolis OS 23 的运行版本</a>\"已经发布在龙蜥社区，欢迎大家下载试用。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/cb/13/cb98791b49db26b73a841b5655b68413.png\" /></p><p></p><p>纵观 Anolis OS 的产品研发路线，实际上背后有一个顶层设计的思考，我们称为“分层分类系统架构”，基于分层分类的系统架构指导 Anolis OS 8 版本的选型。</p><p></p><p>我们可以看到，尽管 Linux 开源操作系统是所谓的“集市开发”，但是我们从做商业产品和社区研发分工的角度，根据分层分类理论体系来看，其实可以有一个很好的技术架构和产业分工的合作体现在里面的。由于产业分工和技术竞争力的不同，不同厂商会有不同的技术布局。我们看到像龙芯提出的 “2+3+3+2”的技术重点投入，中间的两个“3”分别是面向应用的高级编程语言，和面向硬件优化的语言。这里不同的芯片厂商的技术布局点就很不相同。我们看到某芯片厂商在重点领域里面，会区分出几种语言和内核的领域不同的投入重点，定义由原厂还是生态伙伴来做，以及内核由谁来做。</p><p></p><p>总而言之，云厂商、芯片厂商、硬件厂商、操作系统厂商等，大家在操作系统的研发投入会有一些重叠部分，但是研发重点是非常互补的，这是龙蜥社区丰富生态的基础。基于分层分类系统架构，龙蜥社区后续的整体研发会这个基础上拉更多的产业伙伴进来，也会明确大家的合作方式。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/e4/7d/e44bb6346f33b36e6b38c48d0319bc7d.png\" /></p><p></p><p>Anolis OS 23 正是分层分类系统架构的最佳实践。其实操作系统的选型是一个非常大的话题和工程，从整体系统的构建、原创技术的研发、行业标准的打造，整体工程通过 SIG 来承接，形成一套比较完善的布局。就 Anolis OS 23 来说，我认为有四大重点：</p><p></p><p>第一：基于国际上游选型研发，巩固原生社区定位和 SIG 组共享出来，保持社区技术路线中立。</p><p>第二：基于分层分类理论，实现模块化系统架构，我们希望通过社区 SIG 的重新治理，实现社区产业分工。</p><p>第三：全面支持下一代数据中心芯片，在技术上我们希望实现 Anolis OS 23 面向未来的布局，产品化迭代节奏实现业内领先。</p><p>第四：引领业内下一代云原声软件栈实践和实施标准，比如容器存储、CIPU、商密等。云原生是最有活力的一支力量，龙蜥社区下一步将引入云原生软件栈，实践未来的技术标准。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/fe/e7/fe092ccc152c22663155f367cea80ee7.png\" /></p><p></p><p>基于以上理论和实践，我们从整个社区技术规划和运营层面上提出“1+3+N”的发展指导方向，其中，“1”是“基于分层分类的原生社区能力建设”，是最重要的基础。基于分层分类的社区协同和技术架构，面向云的未来发展指导社区规划，打造自主独立演进的技术路线。“3”是“技术”、“产品”、“商业”，社区技术委员会将支撑这三方面的工作。“N”是龙蜥社区的 SIG 矩阵，是最落地的部分，SIG 是以技术、产品、商业的目标去落地，打造竞争力的差异化能力。图中 SIG 的颜色代表了对应社区在技术、产品和商业的原生能力。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/a5/b3/a5c81190ed0f789ddded05275d11a6b3.png\" /></p><p></p><p>最后，想与大家分享一下龙蜥社区的整体技术规划：</p><p></p><p>第一：在社区的原生能力建设上，我们将基于分层分类理论实现社区工程能力建设，赋能社区上下游原生安全能力，打造易于使用的基础设施，联合伙伴以兼容性标准建设发行版。</p><p></p><p>第二：在关键领域和技术方向上，借助云原生SIG把一些代表云计算未来的技术通过社区输出；公开安全可靠的社区CVE管理平台，包括CVE查询和社区修复方案；加大对编程语言的投入，计划组建编程语言 SIG，实现降本增效和标准制定；软硬协同将迎来创新变化，基于xPU和下一代芯片推动社区新规范制定；只读存储是一个具有广泛需求的技术标准，我们希望把只读存储的标准放到云边端运作规划，让更多的社区受益。</p><p></p><p>第三：在产品上做好关键生态和关键场景，尤其是在 CentOS 迁移过程中做好软硬件的兼容性。例如，作为社区新布局，我们已经在社区技术委员增补了主流的服务器厂商代表。</p><p></p><p>第四：在可持续发展模式上，我们通过社区监管机构和第三方评测机构长期密集的合作，实现衍生版本合规和过硬质量保障，所以龙蜥社区的上千个开源组件确确实实能对下游和企业定制版起到支撑作用，将运维能力、创新技术赋能给客户和联合研发。未来，龙蜥社区将基于该体系实现长足繁荣的发展。</p>",
    "publish_time": "2022-08-03 10:29:52",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]