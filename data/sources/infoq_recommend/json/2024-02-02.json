[
  {
    "title": "人工智能的乐观主义者：Linus Torvalds",
    "url": "https://www.infoq.cn/article/dEMW7egksha9r6laMTim",
    "summary": "<p>Linus Torvalds 的名字在计算机科学的辉煌历史上闪耀着，他的成就举世闻名。他是 Linux 操作系统的创始人，开源运动的领导者，以及每一位程序员的启蒙导师。他的内核项目彻底改变了计算机世界的面貌，给无数的开发者和用户带来了巨大的影响。</p><p></p><p>Linus Torvalds 以其直言不讳、敢于挑战的个性在业界出名，但他同时也是一个乐观和谦逊的人。Linus Torvalds 与 VMware 的首席开源官 Dirk Hohndel 进行了一场深入的对话，分享了他对大型语言模型（LLM）的看法。</p><p></p><p>这场对话让我们深刻感受到了 Linus Torvalds 的智慧和远见。他对大型语言模型和人工智能的见解不仅有着独到的洞察力，而且展现了对未来的乐观态度。作为一位技术领袖，他始终关注着技术的伦理和社会影响，努力推动技术的健康发展。我们期待着 Linus Torvalds 在未来继续引领开源运动和技术创新的潮流，为人类社会带来更多的进步和变革。</p><p></p><p></p><h2>大型语言模型：强效版的自动校正？</h2><p></p><p></p><p>“我们几乎肯定会通过类似循环神经网络的方式实现人工智能。但问题是，这种类型的人工智能需要训练，所以在传统计算机的意义上并不‘可靠’。不像过去基于规则的 Prolog 时代，人们可以理解人工智能是如何做出决策的。” 这是 Linus Torvalds 在 2015 年初接受 Slashdot 采访时的一段话，当时他对人工智能的发展还有些怀疑和保留。然而，在近八年后的今天，他的态度似乎发生了变化。</p><p></p><p>Dirk Hohndel：我常把人工智能比作强效版的自动校正，因为大型语言模型的任务就是预测下一个最可能的词，并据此推理。所以，它并不算真正的智能。但是，它显然对我们的生活和现实有着重要的影响。你觉得会有用大型语言模型写的代码提交给你吗？</p><p></p><p>Linus Torvalds：我相信这是会发生的，而且可能已经在发生了，只是规模不大，人们更多地把它当作编写代码的辅助工具。但显然，自动化一直在帮助人们编写代码。这并不是什么新鲜事。我们早就不写机器码了。我们甚至不写汇编语言了。现在我们从 C 转向 Rust。所以我不觉得这像每天的人工智能新闻那样具有革命性。这显然不是我明显涉足的领域。我还是很低层次的。我之所以做内核，是因为我喜欢低层次的硬件细节。这也是我一直留在那里的原因。</p><p></p><p>Linus Torvalds 的回答体现了他对人工智能的乐观看法，也显示了他对自己的定位和兴趣的清楚认识。他不把大型语言模型当作一种威胁，而是一种有益的工具，能够帮助人们更有效地编写代码。他也不为人工智能的炒作所困扰，而是坚持自己对低层次硬件的热情，这也是他创建 Linux 的初衷。</p><p></p><p></p><h2>大型语言模型：帮助我们审查代码？</h2><p></p><p></p><p>Dirk Hohndel：你说你希望这能帮助人们编写代码，让他们更容易上手。但是，回顾我们之前的对话，以及代码审查和维护的挑战，你觉得大型语言模型能达到帮助我们审查代码、维护子系统的水平吗？</p><p></p><p>Linus Torvalds：我希望如此。我真的希望如此，因为我觉得这是它们可以大显身手的一个领域，可以发现那些明显的愚蠢错误。我的意思是，这个房间里有多少人是程序员？很多吧。相当多。我看到别人写的很多错误，都不是什么微妙的错误。很多时候只是那些你没想到的愚蠢的错误。要发现它们，你不需要什么高级的智能。但是有了一些警告工具，比如说，我们有一些编译器会对那些显而易见的错误发出警告。如果有了大型语言模型，它们可以对更微妙的情况发出警告，可能就是说，这个模式看起来不太正常。你确定这是你想说的吗？答案可能是，不，那完全不是我想说的。你找到了一个明显的错误。非常感谢。所以我确实认为大型语言模型是一个重要的工具，你们用轻蔑的说法，就是强效版的自动校正。但我其实觉得它们不止于此。我们大多数人的工作方式，其实在某种程度上都是强效版的自动校正。我把它当作一个可以帮助我们做得更好的工具。但我一直很乐观。充满了希望，这个词怎么说来着？</p><p></p><p>Dirk Hohndel：是的，是的，有益、充满希望，而且谦逊。</p><p></p><p>Linus Torvalds：希望和谦逊，那是我的中间名。不过另一方面，我想说的是，32 年前，我太过乐观，以为自己能写出比别人更好的内核。所以有时候你必须有点过分的乐观才能有所作为。我对大型语言模型的态度其实是，哇，这真是太棒了。它可以。</p><p></p><p>Linus Torvalds 的回答体现了他对大型语言模型的期待，他觉得它们可以帮助程序员发现和避免一些常见的错误，提升代码的质量和可维护性。他也表现了乐观态度，认为人们可以把大型语言模型当作一种辅助工具，而不是一种替代工具。他还流露出他的谦逊，承认他当年创造 Linux 的动机是因为对自己的过高估计，但也是因为对自己的热情和信念。</p><p></p><p></p><h2>大型语言模型：产生幻觉？</h2><p></p><p></p><p>Dirk Hohndel：我很欣赏你的乐观。但我不一定赞同你。</p><p></p><p>Linus Torvalds：现在，有很多人跟我意见不合。</p><p></p><p>Dirk Hohndel：但在这一切中，我担心的一件事是，我们会看到幻觉。这是大型语言模型的一个技术术语。它们会产生幻觉。它们会编造事实。所以，如果它们被用在自动执行任务的地方，而没有真正的人在那里监督它们，就会很危险。这不是说它们会统治世界，也不是科幻小说里的恐怖，而是说会出现很多错误，这些错误会影响我们的生活和代码。</p><p></p><p>Linus Torvalds：嗯，我每天都看到没有大型语言模型的情况下也会出现的错误。所以我可能不太担心这个问题。我觉得我们自己已经做得不错了。</p><p></p><p>Dirk Hohndel 的回答反映了他对大型语言模型的担忧，他认为它们可能会产生一些虚假的、错误的、甚至是危险的结果，如果没有人类的监督和干预，这些结果可能会带来一些严重的后果。他还提到了一个有趣的术语，幻觉，来形容大型语言模型的一种现象，即编造事实。这可能是因为大型语言模型并不真正理解它们所处理的内容，而只是基于统计模式进行预测和生成。他也透露了对人工智能的悲观看法，认为它们不会给我们带来更美好的未来，而是更多的问题。</p><p></p><p>Linus Torvalds 的回答则体现了他对大型语言模型的信赖，认为它们不会比人类更差，甚至可能会比人类更好。他也表现出了对自己和其他程序员的自信，认为他们可以处理和修复大型语言模型产生的错误，而不需要过于担心。他也暗示了他对人工智能的乐观态度，认为它们会给我们带来更多的机会和创新。</p><p></p><p>原文链接：</p><p><a href=\"https://blog.mathieuacher.com/LinusTorvaldsLLM/\">https://blog.mathieuacher.com/LinusTorvaldsLLM/</a>\"</p>",
    "publish_time": "2024-02-02 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Java近期新闻：JDK进入Rampdown第二阶段、JDK 23的JEP、Jakarta EE 11和GraalVM",
    "url": "https://www.infoq.cn/article/aT4arzVewS3ozgOJS83h",
    "summary": "<p>本期的Java新闻汇总主要包含如下新闻：JEP 455升级为JDK 23的Proposed to Target状态、JDK 22进入Rampdown第二阶段、Jakarta EE 11发布计划更新、GraalVM以及甲骨文2024年1月份的关键补丁更新。</p><p></p><h4>OpenJDK</h4><p></p><p>JEP 455，<a href=\"https://openjdk.org/jeps/455\">模式、instanceof和switch中的原始类型（预览）</a>\"已经从JDK 23的Candidate状态<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2024-January/008659.html\">提升</a>\"到了Proposed to Target状态。该JEP位于Amber项目之下，通过允许在所有模式上下文中使用原始类型来增强模式匹配，并扩展instanceof和switch以使其适用于所有原始类型。甲骨文公司的主要技术人员<a href=\"https://www.linkedin.com/in/biboudis/\">Aggelos Biboudis</a>\"最近<a href=\"https://mail.openjdk.org/pipermail/amber-spec-observers/2023-December/004183.html\">发布</a>\"了该特性的最新<a href=\"https://cr.openjdk.org/~abimpoudis/instanceof/jep455-20231213/specs/instanceof-jls.html\">规范草案</a>\"。审查工作预计会在2024年1月22日结束。</p><p>&nbsp;</p><p>甲骨文公司Loom项目的架构师和技术负责人<a href=\"https://inside.java/u/RonPressler/\">Ron Pressler</a>\"以及甲骨文公司Java语言和Java虚拟机的规范负责人<a href=\"https://inside.java/u/AlexBuckley/\">Alex Buckley</a>\"业已<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2024-January/008660.html\">提交</a>\"了JEP Draft 8323072，<a href=\"https://openjdk.org/jeps/8323072\">废弃sun.misc.Unsafe中的内存方法，以便于将其移除（Deprecate Memory-Access Methods in sun.misc.Unsafe for Removal）</a>\"。该JEP建议废弃sun.misc.Unsafe类中定义的内存访问方法，以便在未来的版本中将其移除。这些现在不受支持的方法已经有了对应的替代方案，分别是从JDK 9开始提供的访问堆上内存的方法以及从JDK 22开始提供的访问堆外内存的方法。</p><p></p><h4>JDK 23</h4><p></p><p>JDK 23的早期访问构建版本的<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-23%2B6\">Build 6</a>\"发布，该版本是对Build 5的<a href=\"https://github.com/openjdk/jdk/compare/jdk-23%2B5...jdk-23%2B6\">更新</a>\"，其中包括对各种<a href=\"https://bugs.openjdk.org/browse/JDK-8276809?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2023%20and%20%22resolved%20in%20build%22%20%3D%20b06%20order%20by%20component%2C%20subcomponent\">问题</a>\"的修复。关于这个版本的更多细节可以在<a href=\"https://jdk.java.net/23/release-notes\">发布说明</a>\"中找到。</p><p></p><h4>JDK 22</h4><p></p><p>JDK 22的早期访问构建版本的<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-22%2B32\">Build 32</a>\"发布，该版本是对Build 31的<a href=\"https://github.com/openjdk/jdk/compare/jdk-22%2B31...jdk-22%2B32\">更新</a>\"，其中包括对各种<a href=\"https://bugs.openjdk.org/browse/JDK-8323182?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2022%20and%20%22resolved%20in%20build%22%20%3D%20b32%20order%20by%20component%2C%20subcomponent\">问题</a>\"的修复。关于这个版本的更多细节可以在<a href=\"https://jdk.java.net/22/release-notes\">发行说明</a>\"中找到。</p><p>&nbsp;</p><p>根据JDK 22的<a href=\"https://openjdk.org/projects/jdk/22/#Schedule\">发布计划</a>\"，甲骨文公司的Java平台组首席架构师&nbsp;<a href=\"https://www.linkedin.com/in/markreinhold\">Mark Reinhold</a>\"正式<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2024-January/008675.html\">宣布</a>\"，JDK 22已经进入Rampdown的第二阶段。这就意味着，<a href=\"https://openjdk.java.net/projects/jdk/22/\">JDK 22</a>\"将不再添加JEP；关注的重点会放在P1和P2的缺陷上，这些缺陷可以通过<a href=\"https://openjdk.org/jeps/3#Fix-Request-Process\">修复请求流程（Fix-Request Process）</a>\"来进行修复。借助<a href=\"https://openjdk.org/jeps/3#Late-Enhancement-Request-Process\">后期增强请求流程（Late-Enhancement Request Process）</a>\"，依然有可能在后期实现功能的增强，但Reinhold表示，“现在的门槛已经非常高了”。将于2024年3月份发布的GA版本最终包含了如下12项特性：</p><p>&nbsp;</p><p>JEP 423：<a href=\"https://openjdk.org/jeps/423\">G1的区域锚定（Region Pinning for G1）</a>\"JEP 447：<a href=\"https://openjdk.org/jeps/447\">super(...)前导语句（Statements before super(...)，预览）</a>\"JEP 454：<a href=\"https://openjdk.org/jeps/454\">外部函数和内存API（Foreign Function &amp; Memory API）</a>\"JEP 456：<a href=\"https://openjdk.org/jeps/456\">未命名变量和模式（Unnamed Variables &amp; Patterns）</a>\"JEP 457：<a href=\"https://openjdk.org/jeps/457\">类文件API（Class-File API，预览）</a>\"JEP 458：<a href=\"https://openjdk.org/jeps/458\">启动多文件源码程序（Launch Multi-File Source-Code Programs）</a>\"JEP 459：<a href=\"https://openjdk.org/jeps/459\">字符串模板（String Templates，第二轮预览）</a>\"JEP 460：<a href=\"https://openjdk.org/jeps/460\">向量API（Vector API，第七轮孵化）</a>\"JEP 461：<a href=\"https://openjdk.org/jeps/461\">流聚合器（Stream Gatherers，预览）</a>\"JEP 462：<a href=\"https://openjdk.org/jeps/462\">结构化并发（Structured Concurrency，第二轮预览）</a>\"JEP 463：<a href=\"https://openjdk.org/jeps/463\">隐式声明类和实例主方法（Implicitly Declared Classes and Instance Main Methods，第二轮预览）</a>\"JEP 464：<a href=\"https://openjdk.org/jeps/464\">作用域值（Scoped Values，第二轮预览）</a>\"</p><p>对于<a href=\"https://openjdk.org/projects/jdk/23/\">JDK 23</a>\"和<a href=\"https://openjdk.org/projects/jdk/22/\">JDK 22</a>\"，鼓励开发人员通过<a href=\"https://bugreport.java.com/bugreport/\">Java缺陷数据库</a>\"报告缺陷。</p><p></p><h4>Jakarta EE</h4><p></p><p>在每周的Hashtag Jakarta EE<a href=\"https://www.agilejava.eu/\">博客</a>\"上，Eclipse基金会的Jakarta EE开发人员倡导者<a href=\"https://se.linkedin.com/in/ivargrimstad\">Ivar Grimstad</a>\"最近<a href=\"https://www.agilejava.eu/2024/01/21/hashtag-jakarta-ee-212/\">宣布</a>\"，Jakarta EE 11的目标Java版本将同时支持JDK 21和JDK 17。正如Grimstad所言：</p><p></p><p></p><blockquote>虽然这看上去是一个很重要的变化，但是情况并没有想象中那么严重。实际上，没有任何一个组件规范计划在其API中暴露Java 21相关的特性。唯一接近这一点的是<a href=\"https://jakarta.ee/specifications/concurrency/3.1/\">Jakarta Concurrency 3.1</a>\"，它计划支持Java<a href=\"https://openjdk.org/jeps/444\">虚拟线程</a>\"。但事实证明，只要底层JVM支持虚拟线程，精心设计的API就能支持它。&nbsp;最大的变化是测试兼容性工具包（Test Compatibility Kit，TCK），它必须能够在Java 17和Java 21上运行。对于那些已经将代码库转移到Java 21的实现也会受到一定程度的影响，这取决于它们的进展程度以及它们已经使用了多少Java 17+的特性。</blockquote><p></p><p>&nbsp;</p><p>因此，Jakarta EE规范里程碑版本的<a href=\"https://jakartaee.github.io/platform/jakartaee11/JakartaEE11ReleasePlan\">发布计划</a>\"已经根据这一变更进行了修改，但Grimstad依然认为，Jakarta的GA发布时间依然是最初计划的2024年6月或7月。</p><p></p><h4>GraalVM</h4><p></p><p>甲骨文实验室<a href=\"https://github.com/graalvm/graalvm-ce-builds/releases/tag/jdk-21.0.2\">发布了</a>\"针对JDK 21的GraalVM社区版21.0.2，该版本基于2024年1月份的甲骨文<a href=\"https://www.oracle.com/security-alerts/cpujan2024.html\">关键补丁更新</a>\"进行了修复。其中包括，简化了ValueAnchorNode类的实现；解决了启用断言时-XX:+PrintGCSummary命令行参数的问题；解决了System.console().readPassword方法导致的故障。关于该版本的更多详情，请参阅<a href=\"https://www.graalvm.org/release-notes/JDK_21/\">发布说明</a>\"。</p><p></p><h4>BellSoft</h4><p></p><p>在甲骨文公司于2024年1月发布<a href=\"https://www.oracle.com/security-alerts/cpujan2024.html\">关键补丁更新（Critical Patch Update，CPU）</a>\"的同时，BellSoft也发布了针对<a href=\"https://bell-sw.com/pages/libericajdk/\">Liberica JDK</a>\"的CPU补丁版本，即21.0.1.0.1、17.0.9.0.1、11.0.21.0.1和8u401，以解决该<a href=\"https://docs.bell-sw.com/security/search/\">CVE的列表</a>\"，Liberica JDK是OpenJDK的下游发行版。此外，他们还发布了补丁集更新（Patch Set Update，PSU）版本21.0.2、17.0.10、11.0.22和8u402，其中包含了CPU和非关键性的问题修复。</p><p></p><h4>Spring Framework</h4><p></p><p><a href=\"https://spring.io/projects/spring-boot/\">Spring Boot</a>\"&nbsp;3.3.0的<a href=\"https://spring.io/blog/2024/01/19/spring-boot-3-3-0-m1-available-now/\">第一个里程碑版本</a>\"提供了缺陷修复、文档改进、依赖性升级和新特性，比如，移除了上一个版本废弃的API；支持Micrometer&nbsp;@SpanTag注解；支持为Spring Security OAuth2专用的属性自动配置JwtAuthenticationConverter和ReactiveJwtAuthenticationConverter类。关于该版本的更多信息，请参阅<a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v3.3.0-M1\">发布说明</a>\"。</p><p>&nbsp;</p><p>Spring Boot 3.2.2<a href=\"https://spring.io/blog/2024/01/19/spring-boot-3-2-2-available-now/\">发布</a>\"了文档改进、依赖性升级和值得注意的缺陷修正，例如，在NestedJarFile类的实例中，JarEntry实例调用getComment()方法会返回不正确的结果；在使用jOOQ时，如果没有设置spring.jooq.sql-dialect属性的话，会导致数据库连接泄露；将MockRestServiceServerAutoConfiguration与Spring Framework的RestTemplate类RestClient接口一起使用会产生不正确的异常。关于该版本的更多细节信息，请参阅<a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v3.2.2\">发布说明</a>\"。</p><p>&nbsp;</p><p>类似的，Spring Boot 3.1.8<a href=\"https://spring.io/blog/2024/01/19/spring-boot-3-1-8-available-now/\">版本</a>\"提供了文档改进、依赖性升级和值得注意的缺陷修复，比如，SslBundle接口的实现，PropertiesSslBundle和WebServerSslBundle没有提供有用的toString()结果；在PatternParseException的日志信息中，表示模式错误的标记^放在了错误的位置；在server.ssl属性中混合使用PEM和JKS证书材料会导致无法正常运行。关于该版本的更多细节信息，请参阅&nbsp;<a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v3.1.8\">发布说明</a>\"。</p><p>&nbsp;</p><p><a href=\"https://spring.io/projects/spring-security/\">Spring Security</a>\"&nbsp;6.3.0的第一个里程碑版本提供了缺陷修复、依赖性升级和新特性，例如，为RoleHierarchyImpl类提供了一个新的工厂方法，以改进角色层级结构的定义；提供新的偏移量，用来补充@EnableMethodSecurity注解中的order属性，从而允许应用程序选择拦截器的放置位置；将缓存集成到HandlerMappingIntrospector类中。关于该版本的更多细节信息，请参阅&nbsp;<a href=\"https://github.com/spring-projects/spring-security/releases/tag/6.3.0-M1\">发布说明</a>\"。</p><p>&nbsp;</p><p><a href=\"https://spring.io/projects/spring-authorization-server/\">Spring Authorization Server</a>\"&nbsp;1.3.0的<a href=\"https://spring.io/blog/2024/01/16/spring-authorization-server-1-3-0-m1-available-now/\">第一个里程碑版本</a>\"提供了依赖性升级和新特性，比如，在OAuth2ClientCredentialsAuthenticationProvider类中可配置范围校验策略的功能；改进了错误日志记录功能，以记录非法或过期的授权码；使用证书签发者的路径组件支持多租户。关于该版本的更多细节信息，请参阅&nbsp;<a href=\"https://github.com/spring-projects/spring-authorization-server/releases/tag/1.3.0-M1\">发布说明</a>\"。</p><p>&nbsp;</p><p><a href=\"https://spring.io/projects/spring-modulith/\">Spring Modulith</a>\"的1.2.0-M1、1.1.2和1.0.5版本<a href=\"https://spring.io/blog/2024/01/19/spring-modulith-1-0-5-1-1-2-and-1-2-m1-released/\">发布</a>\"，其中包括缺陷修正、依赖性升级和功能增强，例如，不再使用Spring Boot&nbsp;DatabaseDriver枚举类中定义的已废弃的fromDataSource()方法；如果某个模块被列为额外包含，但它已经是计算得出的依赖的一部分，避免ModuleTestExecution两次包含该模块的可能性；将Spring AOT生成的类排除在架构校验之外，否则它们可能会将依赖关系引入到视为模块内部的应用程序组件中。关于这些版本的更多细节信息，请参阅<a href=\"https://github.com/spring-projects/spring-modulith/releases/tag/1.2.0-M1\">1.2.0-M1版本</a>\"、<a href=\"https://github.com/spring-projects/spring-modulith/releases/tag/1.1.2\">1.1.2版本</a>\"和<a href=\"https://github.com/spring-projects/spring-modulith/releases/tag/1.0.5\">1.0.5版本</a>\"的发布说明。</p><p>&nbsp;</p><p><a href=\"https://spring.io/projects/spring-session/\">Spring Session</a>\"&nbsp;3.3.0的<a href=\"https://spring.io/blog/2024/01/16/spring-session-3-3-0-m1-is-available-now/\">第一个里程碑版本</a>\"发布，提供了依赖性升级和新特性，例如，新的ReactiveFindByIndexNameSessionRepository接口，能够为非索引的会话存储库提供Actuator端点；新的ReactiveRedisIndexedSessionRepository类，可以为Spring WebFlux应用程序提供/sessions端点。关于该版本的更多细节信息，请参阅&nbsp;<a href=\"https://github.com/spring-projects/spring-session/releases/tag/3.3.0-M1\">发布说明</a>\"。</p><p>&nbsp;</p><p><a href=\"https://spring.io/projects/spring-pulsar/\">Spring for Apache Pulsar</a>\"&nbsp;1.0.2<a href=\"https://spring.io/blog/2024/01/16/spring-for-apache-pulsar-1-0-2-available-now/\">发布</a>\"，提供了依赖性升级，并在项目中添加了一个新的物料清单模块spring-pulsar-bom。该版本将包含在Spring Boot 3.2.2中。关于该版本的更多细节信息，请参阅&nbsp;<a href=\"https://github.com/spring-projects/spring-pulsar/releases/tag/v1.0.2\">发布说明</a>\"。</p><p></p><h4>Helidon</h4><p></p><p><a href=\"https://helidon.io/\">Helidon</a>\"&nbsp;4.0.3<a href=\"https://github.com/helidon-io/helidon/releases/tag/4.0.3\">发布</a>\"，该版本带来了一些值得注意的变更，例如，支持在配置构建器中使用Map，以消除使用“复杂的”config.detach().asMap()来获取子值；将RegistryFactory&nbsp;类和它的getInstance()和getRegistry()方法的访问规范恢复为public，以提高与3.x版本列车的向后兼容性；通过OIDC提供者对ID令牌执行验证，并引入访问令牌刷新机制，提高了安全性。关于该版本的更多细节信息，请参阅<a href=\"https://github.com/helidon-io/helidon/blob/4.0.3/CHANGELOG.md\">更新日志</a>\"。</p><p></p><h4>Quarkus</h4><p></p><p><a href=\"https://quarkus.io/\">Quarkus</a>\"&nbsp;3.7的第一个发布候选版本提供了值得注意的变更，比如，支持LinkedIn OIDC提供者；能够观测授权检查失败或成功的安全事件，应用程序可以据此实现自定义的安全日志机制；支持Micrometer&nbsp;@MeterTag注解，从而能够为参数带有@Counted和@Timed注解的方法添加额外的标记。关于该版本的更多细节信息，请参阅&nbsp;<a href=\"https://github.com/quarkusio/quarkus/releases/tag/3.7.0.CR1\">发布说明</a>\"。</p><p>&nbsp;</p><p>Quarkus团队还<a href=\"https://quarkus.io/blog/search-quarkus-io/\">宣布</a>\"，Quarkus文档现在支持全文搜索的功能，该功能最初是在&nbsp;<a href=\"https://quarkus.io/guides/\">Quarkus Guides</a>\"页面上实现的。这取代了原来在每个指南的标题和摘要上进行简单的子字符串搜索。这项新功能由<a href=\"https://github.com/quarkusio/search.quarkus.io/blob/main/README.adoc\">Quarkus.io Search</a>\"应用提供支持，该应用使用了<a href=\"https://quarkus.io/guides/hibernate-search-orm-elasticsearch\">Hibernate Search</a>\"扩展，它支持与<a href=\"https://docs.jboss.org/hibernate/stable/search/reference/en-US/html_single/#elasticsearch-integration\">OpenSearch/Elasticsearch</a>\"的集成。</p><p></p><h4>Hibernate</h4><p></p><p><a href=\"https://hibernate.org/orm/\">Hibernate ORM</a>\"&nbsp;6.4.2.Final<a href=\"https://in.relation.to/2024/01/18/orm-642-final/\">发布</a>\"，该版本提供了缺陷修复和功能增强，例如，新的CurrentTenantIdentifierResolver接口允许使用非字符串租户标识符，并将租户解析器作为托管的bean；解决了连接继承层次的查询问题，以及使用@SoftDelete注解时，HQL连接实体不会生成删除条件的问题。关于该版本的更多细节信息，请参阅<a href=\"https://hibernate.atlassian.net/browse/HHH-17639?jql=project%20%3D%20HHH%20AND%20fixVersion%20%3D%206.4.2\">问题列表</a>\"。</p><p>&nbsp;</p><p><a href=\"https://hibernate.org/reactive/\">Hibernate Reactive</a>\"&nbsp;2.2.1.Final<a href=\"https://in.relation.to/2024/01/16/hibernate-reactive-2_2_1_Final/\">发布</a>\"，该版本也带来了一些值得注意的变化，例如，支持Hibernate ORM 6.3中引入的Order类；支持在所有数据库中应用StatelessSession接口中定义的upsert()方法；解决了对基本Java类型数组开箱即用支持的问题。该版本与Hibernate ORM 6.4.1.Final和Vert.x SQL驱动程序4.5.1兼容。Hibernate Reactive 2.0.8.Final也已发布，不过，尽管该版本与Vertx SQL客户端4.5.1兼容，团队还是决定回滚2.0.8版本的升级，因为它妨碍了其他应用程序升级到最新的2.0版本。有关此版本的更多详情，请参阅<a href=\"https://github.com/hibernate/hibernate-reactive/releases/tag/2.2.1\">发布说明</a>\"。</p><p></p><h4>Apache软件基金会</h4><p></p><p><a href=\"https://groovy-lang.org/\">Apache Groovy</a>\"的<a href=\"https://www.mail-archive.com/announce@apache.org/msg08860.html\">第五个alpha版本</a>\"提供了缺陷修复、依赖性升级和新功能/功能增强，例如，格式字符串的自定义类型检查器，可发现非法的转换字符、缺失的参数、不正确的类型和非法的标志；为Closure类实例生成&nbsp;serialVersionUID（因为它实现了Java的Serializable接口）；支持与ASTMatcher类中包含可变参数的方法调用进行匹配。有关该版本的更多详细信息，请参阅<a href=\"https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12318123&amp;version=12354072\">发布说明</a>\"。</p><p>&nbsp;</p><p>同样，Apache Groovy 4.0.18也已发布，其中包括缺陷修复、依赖性升级和功能增强，例如，Groovy文档现在列出了继承属性；避免处理META-INF文件夹中重复条目的解决方案。有关此版本的更多详情，请参阅<a href=\"https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12318123&amp;version=12354066\">发布说明</a>\"。</p><p>&nbsp;</p><p><a href=\"https://maven.apache.org/\">Apache Maven</a>\"&nbsp;4.0.0的<a href=\"https://www.mail-archive.com/announce@apache.org/msg08854.html\">第12个alpha版本</a>\"提供了值得注意的变更，例如，在<a href=\"https://maven.apache.org/resolver/index.html\">Maven制品解析器（Artifact Resolver）</a>\"中使用了制品集合过滤和新的传递性依赖管理器；使用<a href=\"https://jline.github.io/\">JLine</a>\"增强行编辑；通过不解析反应器之外的项目提高构建过程中的一致性。有关此版本的更多详细信息，请参阅<a href=\"https://maven.apache.org/docs/4.0.0-alpha-12/release-notes.html\">发布说明</a>\"。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2024/01/java-news-roundup-jan15-2024/\">Java News Roundup: JDK 22 in Rampdown Phase Two, JEPs for JDK 23, Jakarta EE 11, GraalVM</a>\"</p>",
    "publish_time": "2024-02-02 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "“千帆杯”第一期赛题公布！龙年头彩竟藏在“游乐场”",
    "url": "https://www.infoq.cn/article/AqRLxU7726Wt5c1iJkNf",
    "summary": "<p>提到“春节”，你首先会想到什么？热气腾腾的年夜饭，大门前福气满满的春联，摩肩接踵的车站，还是一眼看不到排队尽头的游玩景点？</p><p></p><p>不知从什么时候起，各大主题乐园不再只是为孩子打造的童话世界，也俨然成为了成年人的理想国。无数的成年人换上霍格沃茨制服，挑选自己的魔杖，逃离“麻瓜世界”，前往环球影城；许多成年的迪士尼粉丝，也蜂拥至上海迪士尼乐园，在全球首个“疯狂动物城主题园区”亦或是香港迪士尼乐园的全球首个“冰雪奇缘主题园区”，寻找自己的快乐。</p><p></p><p>春节将至，热门主题乐园也会成为大家过节的经典选项，巨大的客流量，也意味着排队，将为主题乐园的游客体验和运营效率带来新一轮挑战。</p><p></p><p></p><h1>主题乐园的效率设计</h1><p></p><p></p><p>事实上，极具人气的主题乐园都有着自己独到的效率设计。在排队时，许多主题乐园都会为游客提供排队时长的提示牌，帮助游客做好预期管理；还会在惊险刺激的项目下设置巨大的电子屏直播正在游玩的游客画面，提升期待值；同时，在一些热门项目的等候区主题乐园还会设计一些精彩的故事和精美的绘画，让游客从排队的状态中脱离出来，减缓排队焦虑。</p><p></p><p>很明显，爆火的主题乐园们在解决游客排队问题时主要是通过一些设计让大多数游客失去了排队的时间概念，并不能有效减少游客排队等待时间。即使围绕排队本身所提供的辅助工具也仅仅能告诉游客园区地图上某个项目的预估排队时间。但这样还远远不够。</p><p></p><p></p><h1>来自未来的“时间魔法”</h1><p></p><p></p><p>随着大模型技术的飞速发展，把复杂功能交给&nbsp;AI，让用户更加专注于创作和创意，AI原生应用正在为产业效率带来新的可能。</p><p></p><p>为此，百度智能云以“创意无限·生成未来”为主题，发起了千帆杯·AI原生应用开发挑战赛。</p><p></p><p>第一期赛题将聚焦春节假期游乐园排队效率问题，鼓励开发者利用&nbsp;AI&nbsp;能力施展“时间魔法”，打造一款具有实用性的“游乐场排队规划助手”，帮助游客更好地了解乐园的排队情况，设计个性化的游玩路线，在有限的时间内获得最“High”的体验，同时为管理者提供优化运营策略的决策支持。</p><p></p><p>本期挑战中，官方将为开发者们提供环球影城、上海迪士尼、香港迪士尼、广州长隆&nbsp;4&nbsp;个热门游乐场地图，地图中将标注各项目的排队和游玩时间，以及不同体验维度的推荐指数。</p><p></p><p>百度智能云千帆&nbsp;AppBuilder&nbsp;将会在这轮赛题中成为开发者们重构应用的“智能助手”，为开发者提供专业、便捷的&nbsp;AI开发套件和资源环境。</p><p></p><p>AppBuilder作为目前国内唯一全面开放的具备代码规划与执行能力的平台，将框架和组件都做成了可扩展和可拼接的形式，以期给予&nbsp;AI&nbsp;应用开发者更多的选择和自由度。这就意味着每位开发者都可以利用AppBuilder来基于自然语言构建自己的“程序员”，实现单人成团，一个人就能成为一支队伍。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/eb/66/eb3739ae4504bd9a6e5868713834a866.png\" /></p><p></p><p>AI原生时代，千千万万的开发者是促进AI原生应用爆发的中坚力量。本次千帆杯AI原生应用挑战赛与CSDN、51CTO、DataWhale、InfoQ、IT168、机器之心、思否等国内专业的开发者社区和人工智能媒体深度合作，将对大赛进行持续追踪，欢迎各位开发者关注~</p><p></p><p>第一期赛题已经出炉</p><p></p><p>“游乐场”的竞技舞台已经搭建完毕</p><p></p><p>期待各位在千帆杯AI原生应用开发挑战赛中</p><p></p><p>大展身手</p><p></p><p>探寻藏在“游乐场”中的10万大奖</p><p></p><p>欢迎报名参赛</p><p></p><p>阅读原文了解详细赛题说明</p><p></p><p>【阅读原文】：<a href=\"https://cloud.baidu.com/qianfandev/topic/268465\">https://cloud.baidu.com/qianfandev/topic/268465</a>\"</p>",
    "publish_time": "2024-02-02 11:18:52",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "国资监管数智化洞察与实践白皮书",
    "url": "https://www.infoq.cn/article/QuwMoCD5PZP9g3OZydkX",
    "summary": "<h3>第一章&nbsp; 国资监管数智化发展与内涵</h3>\n<p>主要从国家、产业、企业、技术四个层面，研究国资监管数智化的形势要求和关键驱动因素，阐述国资监管数智化面临的宏观环境和政策要求、数字产业发展、企业内生需求和技术发展等驱动力，并解析国资监管数智化内涵。</p>\n<h3>第二章&nbsp; 国资监管数智化现状与洞察</h3>\n<p>主要介绍国资监管数智化在国务院国资委、中央企业、地方国资委及地方国企等方面取得的现状成效，剖析监管数智化面临挑战，并通过现象看本质，总结提炼核心洞察观点。</p>\n<h3>第三章&nbsp; 国资监管数智化体系与实践</h3>\n<p>主要基于现状洞察，围绕国资监管数智化如何开展，阐述从监管客户核心需求到监管运营服务全过程的国资监管数智化体系框架，并给出国资监管数智化实践案例。</p>\n<h3>第四章&nbsp; 国资监管数智化未来展望</h3>\n<p>主要介绍国资监管数智化愿景目标，以及未来预期发展方向，为国资监管数智化规划建设提供思路指引和方向借鉴。</p>",
    "publish_time": "2024-02-02 13:58:46",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "中国石油昆仑数智发布《国资监管数智化洞察与实践白皮书》，总结国资监管数智化方法、路径和实践",
    "url": "https://www.infoq.cn/article/I2zveeOffEOvbO6S3hbb",
    "summary": "<p>2月1日，中国石油<a href=\"https://www.infoq.cn/article/iuQB6ZaAfUhUlPqo0ywF\">昆仑数智</a>\"公司正式发布《国资监管数智化洞察与实践白皮书》（以下简称《白皮书》）。</p><p></p><h3>01发布背景</h3><p></p><p></p><p>国务院国资委加快推进国资国企改革，推动国资监管职能转变，印发国资监管信息化系列文件，推动国资监管数字化智能化提升，对新时代国资监管提出新要求，以“智能监管”为目标，全面构建“横向到边、纵向到底、全面协同”数智化监管体系，实现实时监管、精准监管、有效监管，提升国资监管智能化水平。</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/af/af5ffef5ef65360b268444d51539f2e0.jpeg\" /></p><p></p><p>中国石油积极落实国务院国资委部署要求，组织昆仑数智长期支撑国资监管数智化建设，多次承接国资监管信息化规划及重大课题研究任务，形成了专业深厚的研究咨询能力和落地实践经验。基于近十余年，国资监管信息化数智化课题等系列研究成果，组织昆仑数智专业研究力量，编制形成国资监管数智化主题白皮书，旨在阐述对国资监管数智化的趋势洞察、研究实践和未来展望，发挥昆仑数智自身能力建设，输出实践经验与赋能应用，为推动国资监管数智化建设发展、国资国企监管数智化实践和行业从业人员能力提升等方面提供参考和借鉴。</p><p></p><h3>02篇章构成</h3><p></p><p></p><p>本《白皮书》共计25000余字，分为四个篇章：</p><p><img src=\"https://static001.geekbang.org/infoq/07/07fd2be924e7bfba846421198a71037f.jpeg\" /></p><p></p><p>第一章&nbsp; 国资监管数智化发展与内涵</p><p></p><p>主要从国家、产业、企业、技术四个层面，研究国资监管数智化的形势要求和关键驱动因素，阐述国资监管数智化面临的宏观环境和政策要求、数字产业发展、企业内生需求和技术发展等驱动力，并解析国资监管数智化内涵。</p><p></p><p>第二章&nbsp; 国资监管数智化现状与洞察</p><p></p><p>主要介绍国资监管数智化在国务院国资委、中央企业、地方国资委及地方国企等方面取得的现状成效，剖析监管数智化面临挑战，并通过现象看本质，总结提炼核心洞察观点。</p><p></p><p>第三章&nbsp; 国资监管数智化体系与实践</p><p></p><p>主要基于现状洞察，围绕国资监管数智化如何开展，阐述从监管客户核心需求到监管运营服务全过程的国资监管数智化体系框架，并给出国资监管数智化实践案例。</p><p></p><p>第四章&nbsp; 国资监管数智化未来展望</p><p></p><p>主要介绍国资监管数智化愿景目标，以及未来预期发展方向，为国资监管数智化规划建设提供思路指引和方向借鉴。</p><p></p><p></p><h3>03核心看点</h3><p></p><p></p><p>看点一 ：国资监管数智化内涵理解</p><p></p><p>结合国资监管新形势和新要求，研究国资监管定位和理念、监管对象和重点、监管途径和方式、监管导向和效果的转变，以数智技术应用助力国资监管数智化提升，充分阐述国资监管数智化内涵和理解。</p><p></p><p>国资监管数智化内涵：以“智能监管”为方向，通过5G、大数据、云计算、物联网、区块链、人工智能等数字技术在国资监管业务的深度融合和创新应用，在国务院国资委、中央企业、地方国资委及地方国企等三个层面，协同建设并持续优化全国国资国企在线监管系统，全面建立“横向到边、纵向到底、全面协同”的数字化智能化监管体系，实现国资监管“业务全面覆盖协同、数据充分共享利用、风险自动识别预警、监管画像全面准确、决策支持精准有力”，打造国资监管在线化、协同化和智能化新模式，从而促进国资监管更加实时、精准、有效，加快构建国资监管大格局，形成国资监管“上下一盘棋”，为提升国资监管效率效能、保障国有资产安全、赋能企业高质量发展、服务国家治理体系现代化提供更强有力支撑。</p><p></p><p>看点二：国资监管数智化四大现状成效</p><p></p><p>建设历程：国资监管信息化数智化建设历经分散建设、整合共享、集中统一3个阶段，正向“数字化智能化”阶段迈进，全面提升国资监管数智化能力水平，服务国家治理体系和治理能力现代化。</p><p><img src=\"https://static001.geekbang.org/infoq/54/548b211983daf1cc00c62f6292ee631e.png\" /></p><p></p><p>整体要点：着眼国资监管整体统筹情况，分别阐述国资监管数智化在国务院国资委、中央企业、地方国资委及地方国企等层面取得的现状成效，涵盖组织职责、制度标准、监管应用、平台建设、<a href=\"https://www.infoq.cn/news/WKPj5NSiSpE28pz5WZ5w\">数据体系</a>\"、基础设施、网络安全等方面总结和分析。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2c/2c1883ec4cddf996201bf9ba192e6424.png\" /></p><p></p><p>看点三 ：国资监管数智化五大面临挑战</p><p></p><p>充分结合央国企、地方国资委等国资监管现状调研分析，深入剖析监管数智化面临的痛点难点，围绕顶层设计、业务应用、智能应用场景、新型基础设施、数字化人才等维度，总结出各方关注重点方向和需求，为国资监管数智化建设实践提供思路和参考。</p><p><img src=\"https://static001.geekbang.org/infoq/69/69817c505da6ff0a74ffe4137a5c73b8.png\" /></p><p></p><p>看点四 ：国资监管数智化三大洞察分析</p><p></p><p>基于国资监管政策要求、现状挑战和发展趋势，凝练提出国资监管数智化洞察分析结论，重点阐述国资监管模式演进，剖析国资监管与央国企集团管控的协同体系，解读国资监管对央国企数智化转型的推动指引作用，归纳得出央国企未来监管数智化建设重点方向。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/20/206223fe6e8c051265d6a079b13ebd77.png\" /></p><p></p><p>国资监管进入数字化、网络化、智能化发展新阶段</p><p></p><p>国资监管模式随着新技术发展不断演进，从手工填报、在线填报、嵌入式集成迈入云上智能化模式，借助数据、算力和算法优势，充分以数据要素赋能国资监管应用，实现用数据说话、管理、决策和创新，AI、RPA等新技术深入国资监管全业务场景。</p><p></p><p>国资监管与央国企集团管控形成上下联动监管大格局</p><p></p><p>作为国资监管的主要对象，国有企业与国资委国资监管对接，成为当前企业集团管控体系建设的主要关注点。中央企业作为国有企业的排头兵，实现与国资监管体系有效对接，构建国资监管和央国企集团管控的协同体系，建立提升有效的“监督－管控”数字化协同机制则成为重中之重。</p><p></p><p>国资监管有力推动和促进央国企自身数智化转型进程</p><p></p><p>国务院国资委加快推进国资国企在线监管系统建设工作，要求力争2025年底前，实现全国国资国企在线监管系统的全面升级，全面建立横向到边、纵向到底、全面协同的数字化智能化监管体系。国资国企将通过着力开展国资监管数字化智能化提升建设，全面提升在线监管能力水平，服务国家治理体系和治理能力现代化。</p><p></p><p>看点五：国资监管数智化四大实践案例</p><p></p><p>重点聚焦地方国资委、中央企业国资监管数智化实践研究，总结建设内容和现状成效，重点分析国资监管典型场景和亮点效果，总结可供参考借鉴的成熟经验。</p><p><img src=\"https://static001.geekbang.org/infoq/f6/f694c7b708ee02f79f3f047772f50548.jpeg\" /></p><p></p><h3>04总结</h3><p></p><p></p><p>本《白皮书》结合当前国资监管新形势，总结国资监管数智化发展现状、面临挑战和洞察分析，研究国资监管数智化体系框架，沉淀形成实践案例，并提出国资监管未来展望，为国资监管数智化规划和建设工作提供方法、路径和实践参考。</p><p></p><p>未来，我们将不断持续研究国资监管解决方案和产品体系，提供国资监管规划咨询、课题研究、应用开发、系统集成、运维支撑等全方位服务，并通过加强与国资央企间的交流合作、联合创新，以“数智国资”加速国资监管智能化升级，助力构建国资监管大格局，为提升国资监管效能、推动国资央企高质量发展、加快建设世界一流企业、服务数字中国建设作出贡献。</p><p></p><p>如您对本《白皮书》感兴趣，欢迎点击链接下载：<a href=\"https://www.infoq.cn/minibook/QuwMoCD5PZP9g3OZydkX\">https://www.infoq.cn/minibook/QuwMoCD5PZP9g3OZydkX</a>\"</p><p></p><h4>关于昆仑数智</h4><p></p><p></p><p>昆仑数智科技有限责任公司（简称“昆仑数智”）成立于2020年11月，作为中国石油集团下属数字化智能化科技公司，始终以“数字化转型赋能者”为定位、以助力“数字化转型、智能化发展”为使命。我们深入研究产业技术与数字技术融合发展趋势，全力打造数字化转型、智能化发展的新引擎。我们致力于成为国内领先、国际一流的能源行业和流程工业数字化智能化科技公司，为企业的数字化转型、智能化发展贡献力量。</p>",
    "publish_time": "2024-02-02 14:02:39",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]