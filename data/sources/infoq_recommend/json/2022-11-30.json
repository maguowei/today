[
  {
    "title": "亚马逊ElastiCache支持Redis 7，新特性包括Redis函数、ACL改进和分片的Pub/Sub",
    "url": "https://www.infoq.cn/article/kKNlx6vydEQE2SFJ4v3P",
    "summary": "<p>最近，亚马逊云科技宣布Amazon ElastiCache for Redis兼容Redis 7。其中包含了一些新特性，如Redis函数、ACL的改进和分片的Pub/Sub。</p><p>&nbsp;</p><p><a href=\"https://aws.amazon.com/elasticache/redis/\">Amazon ElastiCache for Redis</a>\"是一个全托管的内存缓存服务，兼容<a href=\"https://redis.io/\">Redis</a>\"和<a href=\"https://memcached.org/\">Memcached</a>\"开源引擎。开发者可以通过该服务在游戏、广告技术、电子商务、医疗保健、金融服务和物联网领域为其互联网规模的实时应用提供动力。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/02/02822016f35b50d18483f4c51db7d848.png\" /></p><p></p><p>图片来源：<a href=\"https://aws.amazon.com/elasticache/redis/\">https://aws.amazon.com/elasticache/redis/</a>\"</p><p>&nbsp;</p><p>Amazon ElastiCache for Redis在<a href=\"https://www.infoq.com/news/2020/10/redis-6-amazon-elasticache/\">两年前支持Redis 6</a>\"，现在支持今年<a href=\"https://redis.com/blog/redis-7-generally-available/\">早些时候发布</a>\"的Redis 7。在AWS管理控制台中创建集群时，Amazon ElastiCache for Redis可以支持的Redis版本范围为3.4.2到7.0。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d1/d14a1c1478243c9bcf4ac761b5821505.png\" /></p><p></p><p>&nbsp;</p><p>与Redis 7兼容性相关的重要新特性有：</p><p>支持<a href=\"https://redis.io/docs/manual/programmability/functions-intro/\">Redis函数</a>\"，并提供了一种托管体验，开发人员可以使用存储在ElastiCache集群上的应用程序逻辑执行<a href=\"https://redis.io/docs/manual/programmability/eval-intro/\">Lua脚本</a>\"，客户端不需要在每次连接时都将脚本重新发送到服务器；支持下一个版本的<a href=\"https://redis.io/docs/management/security/acl/\">Redis访问控制列表</a>\"（ACL）。对于ElastiCache for Redis 7，客户端可以在Redis中的特定键或键空间上指定多组权限；在集群模式下运行ElastiCache时，为开发人员提供了以分片的方式运行<a href=\"https://redis.io/docs/manual/pubsub/#sharded-pubsub\">Redis Pub/Sub功能</a>\"的能力。此外，通道被绑定到ElastiCache集群中的一个分片上，不需要跨分片传播通道信息，从而提高了可伸缩性。</p><p>&nbsp;</p><p>Redis技术支持经理<a href=\"https://twitter.com/elena_kolevska\">Elena Kolevska</a>\"在Redis<a href=\"https://developer.redis.com/create/redis-functions/\">文档</a>\"中提到，Redis函数是Redis 7中最具影响力的新增特性：</p><p>&nbsp;</p><p></p><blockquote>Redis函数——一个新的可编程选项，通过增加模块化、可重用性和更好的开发者体验来改进脚本。</blockquote><p></p><p>&nbsp;</p><p>此外，她还写道：</p><p>&nbsp;</p><p></p><blockquote>Redis有支持多种执行引擎的能力，所以在未来的某个版本中，我们将能够用Lua、JavaScript和更多的语言编写Redis函数，但目前（Redis v7.0）唯一支持的语言是Lua。</blockquote><p></p><p>&nbsp;</p><p>开发者可以通过修改集群或复制组并指定引擎版本为7来<a href=\"https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/VersionManagement.html\">升级集群或复制组的引擎版本</a>\"。</p><p>&nbsp;</p><p>最后，需要注意的是，<a href=\"https://www.infoq.cn/article/Z0QjFecVCY9NjsGwg1Cc\">亚马逊云科技</a>\"并不是唯一支持开源Redis缓存服务的云供应商。例如，微软提供了<a href=\"https://azure.microsoft.com/en-us/products/cache/\">Azure Cache for Redis</a>\"，<a href=\"https://learn.microsoft.com/en-us/azure/azure-cache-for-redis/cache-whats-new#redis-6-becomes-default-for-new-cache-instances\">默认支持Redis 6</a>\"。与Redis对等的特性支持到<a href=\"https://redis.io/docs/stack/json/\">RedisJSON</a>\"，还没到Redis 7。谷歌的<a href=\"https://cloud.google.com/memorystore\">Memorystore</a>\"最多<a href=\"https://cloud.google.com/memorystore/docs/redis/supported-versions\">支持到Redis 6</a>\"。</p><p>&nbsp;</p><p>Amazon ElastiCache for Redis 7在所有AWS区域（中国北京和中国宁夏除外）均可使用，其定价细节可在<a href=\"https://aws.amazon.com/elasticache/pricing/\">定价页面</a>\"找到。此外，该服务的详细信息和指南可以在<a href=\"https://docs.aws.amazon.com/elasticache/index.html\">文档首页</a>\"上找到。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/11/amazon-elasticache-redis-seven/\">https://www.infoq.com/news/2022/11/amazon-elasticache-redis-seven/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/O9jijEFIBtaaeecQCe8K\">亚马逊云科技向Well-Architected Framework添加容器透镜</a>\"</p><p><a href=\"https://www.infoq.cn/article/c56VHUx8Yi8v2uNNMwwy\">亚马逊将自有服务数据的压缩从Gzip切换为Zstd</a>\"</p>",
    "publish_time": "2022-11-30 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Java近期新闻：Spring Framework 6、JCP选举、Valhalla项目、OpenJDK更新",
    "url": "https://www.infoq.cn/article/8XzPjAwr5e6bMs3HjX9K",
    "summary": "<p></p><h4>OpenJDK</h4><p></p><p>JEP 434（<a href=\"https://openjdk.org/jeps/434\">外部函数 &amp; 内存API第二个预览版</a>\"）已从JDK 20的Candidate状态提升为Proposed to Target状态。这个JEP在<a href=\"https://openjdk.java.net/projects/panama/\">Panama</a>\"项目的支持下不断演进：JEP 424（<a href=\"https://openjdk.org/jeps/424\">外部函数 &amp; 内存API预览版</a>\"）在JDK 19中交付；JEP 419（<a href=\"https://openjdk.org/jeps/419\">外部函数 &amp; 内存API第二轮孵化</a>\"）在JDK 18中交付；以及JEP 412（<a href=\"https://openjdk.org/jeps/412\">外部函数 &amp; 内存API第一轮孵化</a>\"）在JDK 17中交付。该提案建议纳入基于前期反馈的改进，并在JDK 20中提供第二个预览版。其更新内容包括：统一MemorySegment和MemoryAddress接口，即内存地址通过零长内存段建模；增强密封接口MemoryLayout，以便与JEP 427（<a href=\"https://openjdk.org/jeps/427\">Switch模式匹配第三个预览版</a>\"）搭配使用。</p><p>&nbsp;</p><p>JEP 436（<a href=\"https://openjdk.org/jeps/436\">虚拟线程第二个预览版</a>\"）上周从Draft 8295817状态<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2022-November/007189.html\">提升</a>\"为Candidate状态。在<a href=\"https://wiki.openjdk.org/display/loom/Main\">Loom项目</a>\"的支持下，该JEP提出基于JDK 19中交付的JEP 425（<a href=\"https://openjdk.org/jeps/425\">虚拟线程预览版</a>\"）提供第二个预览版，以便有时间为这项功能的演进提供更多的反馈和经验。需要注意的是，除了少量在JDK 19中固化的JEP 425 API之外，这第二个预览版本没有提出其他任何改动。</p><p>&nbsp;</p><p>同样，JEP 437（<a href=\"https://openjdk.org/jeps/437\">结构化并发第二轮孵化</a>\"）也从Draft 8296037状态<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2022-November/007190.html\">提升</a>\"为Candidate状态。这个JEP（也是在Loom项目的支持下）提议基于在JDK19中交付的JEP 428（<a href=\"https://openjdk.org/jeps/428\">结构化并发第一轮孵化</a>\"）在JDK 20中重新孵化这个功能，以便有时间获得更多的反馈和经验。唯一的变化是更新了StructuredTaskScope类，以支持在任务范围内创建的线程对范围值的继承。这简化了跨线程共享不可变数据的过程。</p><p>&nbsp;</p><p><a href=\"https://github.com/openjdk/jtreg/#readme\">The Regression Test Harness for the OpenJDK Platform</a>\"（jtreg）7.1版<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2022-November/007204.html\">发布</a>\"，主要是修复了Bug，并改进了JUnit测试报告进度的方式。自2022年8月jtreg 7版本<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2022-August/006869.html\">发布</a>\"以来，jtreg所需的最小JDK版本为11。Oracle公司Java平台组成员<a href=\"https://www.linkedin.com/in/christian-stein-63946917b/\">Chritian Stein</a>\"表示，近期计划包括JDK-8296710的一个PR，<a href=\"https://bugs.openjdk.org/browse/JDK-8296710\">升级到到jtreg 7.1</a>\"，并在2022年11月的最后一周集成到JDK中。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/openjdk/jtreg/blob/master/CHANGELOG.md\">变更日志</a>\"。</p><p>&nbsp;</p><p>Oracle编程语言设计师<a href=\"https://www.linkedin.com/in/gavin-bierman-a0173075/\">Gavin Bierman</a>\"<a href=\"https://mail.openjdk.org/pipermail/amber-spec-observers/2022-November/003856.html\">更新</a>\"了JEP 430（<a href=\"https://openjdk.org/jeps/430\">字符串模板预览版</a>\"，当前处于Candidate状态）的<a href=\"http://cr.openjdk.java.net/~gbierman/jep430/jep430-20221115/specs/string-templates-jls.html\">规范</a>\"。</p><p>&nbsp;</p><p>Oracle JVM架构师<a href=\"https://www.linkedin.com/in/john-rose-270725/\">John Rose</a>\"提交了两份JEP草案8297156（<a href=\"https://openjdk.org/jeps/8297156\">字段初始化的底层控制</a>\"）和8297236（<a href=\"https://openjdk.org/jeps/8297236\">增强Valhalla类型统一校验</a>\"）。</p><p></p><h4>JDK 20</h4><p></p><p>JDK 20的<a href=\"https://jdk.java.net/20/\">早期访问构建</a>\"<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-20%2B24\">Build 24</a>\"于上周发布，它是Build 23的<a href=\"https://github.com/openjdk/jdk/compare/jdk-20%2B23...jdk-20%2B24\">升级</a>\"，修复了各种<a href=\"https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2020%20and%20%22resolved%20in%20build%22%20%3D%20b22%20order%20by%20component%2C%20subcomponent\">问题</a>\"。要了解关于这个构建的更多细节，请查看<a href=\"https://jdk.java.net/20/release-notes\">发布说明</a>\"。</p><p>&nbsp;</p><p>对于<a href=\"https://openjdk.java.net/projects/jdk/20/\">JDK 20</a>\"，我们鼓励开发者通过<a href=\"https://bugreport.java.com/bugreport/\">Java Bug数据库</a>\"报告缺陷。</p><p></p><h4>Valhalla项目</h4><p></p><p>在上个版本发布三年多之后，Valhalla项目<a href=\"https://jdk.java.net/valhalla/\">早期访问构建</a>\"Build 20-valhalla+20-75（代号为LW4）面向Java社区发布，它是基于JDK 20的一个不完整版本。根据Oracle公司技术咨询人员<a href=\"https://www.linkedin.com/in/david-simms-023219a6/\">David Simms</a>\"的<a href=\"https://twitter.com/SimmsUpNorth/status/1592787002726182912?cxt=HHwWgMDTxeHV25osAAAA\">推特</a>\"，这个版本主要是实现JEP草案8277163（<a href=\"https://openjdk.org/jeps/8277163\">值对象预览版</a>\"，目前处于Submitted状态）。要了解关于这个版本的更多细节，请查看<a href=\"https://openjdk.org/projects/valhalla/early-access\">发布说明</a>\"。</p><p></p><h4>JavaFX 20</h4><p></p><p>JavaFX 20的<a href=\"https://jdk.java.net/javafx20/\">早期访问构建</a>\"<a href=\"https://github.com/openjdk/jfx/releases/tag/20%2B8\">Build 8</a>\"和<a href=\"https://github.com/openjdk/jfx/releases/tag/20%2B7\">Build 7</a>\"正式面向Java社区发布。按照设计，JavaFX应用程序开发人员可以在JDK 20上使用JavaFX 20构建和测试他们的应用程序了。</p><p></p><h4>JCP（Java Community Process）</h4><p></p><p>2022年JCP执行委员会（EC）的<a href=\"https://jcp.org/aboutJava/communityprocess/elections/2022.html\">选举</a>\"结果显示，以下成员当选或再次当选，任期两年：</p><p>批准席位：<a href=\"https://www.alibaba.com/\">阿里巴巴</a>\"、<a href=\"https://bell-sw.com/\">BellSoft</a>\"、<a href=\"https://www.bnymellon.com/\">BNY Mellon</a>\"、<a href=\"https://www.jetbrains.com/\">JetBrains</a>\"、<a href=\"https://www.microdoc.com/\">MicroDoc</a>\"和<a href=\"https://www.sap.com/\">SAP SE</a>\"当选席位：<a href=\"https://www.eclipse.org/org/foundation/\">Eclipse基金会</a>\"和<a href=\"https://www.microsoft.com/\">微软</a>\"协理席位：<a href=\"https://www.linkedin.com/in/kenfogel/\">Ken Fogel</a>\"、Java Champion和Java Champion会议组织者</p><p>新当选的执委会成员将于2022年11月29日开始任职。</p><p></p><h4>Spring Framework</h4><p></p><p><a href=\"https://www.infoq.com/news/2021/09/spring-6-spring-boot-3-overhaul/\">经过一年多的努力</a>\"，Spring团队面向Java社区<a href=\"https://spring.io/blog/2022/11/16/spring-framework-6-0-goes-ga\">发布</a>\"了4个候选版本、6个里程碑版本以及期待已久的<a href=\"https://spring.io/projects/spring-framework\">Spring Framework</a>\" 6.0 GA版本。Spring Framework 6的最低要求是JDK 17和Jakarta EE 9，它还与最近发布的Jakarta EE 10兼容，并通过<a href=\"https://micrometer.io/\">Micrometer</a>\"嵌入了可观察性，可实现度量和跟踪。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/spring-projects/spring-framework/wiki/What%27s-New-in-Spring-Framework-6.x/\">新特性列表页</a>\"。InfoQ后续将带来更详细的报道。</p><p>&nbsp;</p><p>同时，在Spring Framework 5.x版本序列中，<a href=\"https://spring.io/blog/2022/11/16/spring-framework-5-3-24-available-now\">5.3.24版本</a>\"的新特性包括：新增SimpleBeanInfoFactory类，提高自省性能；引入TestSocketUtils类，替代已弃用的SocketUtils类；减少了由ProducesRequestCondition类中定义的getProducibleMediaTypes()方法导致的LinkedHashSet类的内存分配。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.24\">发布说明</a>\"。</p><p>&nbsp;</p><p><a href=\"https://spring.io/projects/spring-data\">Spring Data</a>\" 2022.0（代号Turing）<a href=\"https://spring.io/blog/2022/11/18/spring-data-2022-0-goes-ga\">发布</a>\"，新特性有：针对Graal Native Image编译的预处理和反射提示；将Spring Data Envers合并到Spring Data JPA资源库，将Spring Data R2DBC合并到Spring Data Relational资源库；完善资源库接口。依赖项升级包括Spring Framework 6.0、JDK 17和Jakarta EE 10。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/spring-projects/spring-data-commons/wiki/Spring-Data-2022.0-%28Turing%29-Release-Notes\">发布说明</a>\"。</p><p>&nbsp;</p><p>Spring Data 2021.2.6和2021.1.10版本<a href=\"https://spring.io/blog/2022/11/18/spring-data-2021-2-6-and-2021-1-10-available\">发布</a>\"，主要是修复Bug，并将依赖项升级到Spring Data子项目的相应版本，包括：<a href=\"https://spring.io/projects/spring-data-jdbc\">Spring Data JDBC</a>\"、<a href=\"https://spring.io/projects/spring-data-neo4j\">Spring Data Neo4j</a>\"、<a href=\"https://spring.io/projects/spring-data-mongodb\">Spring Data MongoDB</a>\"、<a href=\"https://spring.io/projects/spring-data-elasticsearch\">Spring Data Elasticsearch</a>\"和<a href=\"https://spring.io/projects/spring-data-couchbase\">Spring Data Couchbase</a>\"等。</p><p>&nbsp;</p><p>Spring Cloud Dataflow 2.10.0的第二个候选版本发布，主要是修复Bug，并将依赖项升级到了<a href=\"https://spring.io/projects/spring-boot\">Spring Boot</a>\"2.7.5、Spring Framework 5.3.23和<a href=\"https://spring.io/projects/spring-cloud\">Spring Cloud</a>\" 2021.0.5。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/spring-cloud/spring-cloud-dataflow/releases/tag/v2.10.0-RC2\">发布说明</a>\"。</p><p>&nbsp;</p><p><a href=\"https://spring.io/projects/spring-modulith\">Spring Modulith</a>\" 0.1的<a href=\"https://spring.io/blog/2022/11/17/spring-modulith-0-1-rc1-released\">第一个候选版本</a>\"发布，提供了与<a href=\"https://docs.spring.io/spring-modulith/docs/0.1.x/reference/html/#documentation.application-module-canvas\">模块画布</a>\"相关的新特性，如：引入Spring值类型和Bean引用；默认隐藏空行。因为要准备即将发布的Spring Boot 3.0，所以这将是唯一的候选版本。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/spring-projects-experimental/spring-modulith/releases/tag/0.1.0-RC1\">发布说明</a>\"以及<a href=\"https://www.infoq.com/news/2022/11/spring-modulith-launch/\">InfoQ的这篇新闻报道</a>\"。</p><p></p><h4>Quarkus</h4><p></p><p>Red Hat<a href=\"https://quarkus.io/blog/quarkus-2-14-1-final-released/\">发布</a>\"了Quarkus 2.14.1.Final，提供了Bug修复、文档改进，并将GraalVM/Mandrel 升级到22.3.0。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/quarkusio/quarkus/releases/tag/2.14.1.Final\">变更日志</a>\"。</p><p>&nbsp;</p><p>Quarkus 3.0.0的第一个Alpha版本是作为GA版本新特性的预览。该版本以Quarkus 2.13.3为基础，以Jakarta EE 10规范为目标，但Jakarta EE 9下的<a href=\"https://jakarta.ee/specifications/persistence/3.0/\">Jakarta Persistence 3.0</a>\"除外。因此，<a href=\"https://hibernate.org/orm/\">Hibernate ORM 5.6</a>\"仍在支持范围。其他正在进行的工作包括提供<a href=\"https://microprofile.io/\">MicroProfile</a>\" 6.0、<a href=\"https://developer.getflow.com/\">Flow API</a>\"和Hibernate ORM 6.0支持。关于发布计划的更多细节，如何试用Quarkus 3.0.0.Alpha1以及如何升级，请阅读这篇<a href=\"https://quarkus.io/blog/road-to-quarkus-3/\">博文</a>\"。</p><p></p><h4>Micronaut</h4><p></p><p>Micronaut基金会<a href=\"https://micronaut.io/2022/11/17/micronaut-framework-3-7-4-released/\">发布</a>\"了<a href=\"https://micronaut.io/\">Micronaut Framework</a>\" 3.7.4版本，提供了Bug修复、文档改进以及<a href=\"https://micronaut-projects.github.io/micronaut-security/latest/guide/\">Micronaut Security</a>\"、<a href=\"https://micronaut-projects.github.io/micronaut-aws/latest/guide/\">Micronaut AWS</a>\"和<a href=\"https://micronaut-projects.github.io/micronaut-serialization/latest/guide/\">Micronaut Serialization</a>\"的补丁版本。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/micronaut-projects/micronaut-core/releases/tag/v3.7.4\">发布说明</a>\"。</p><p></p><h4>Piranha</h4><p></p><p>Piranha 22.11.0<a href=\"https://github.com/piranhacloud/piranha/releases/tag/v22.11.0\">发布</a>\"。该版本被称为2022年11月的“Pick your distribution”版本，新特性包括：对<a href=\"https://jakarta.ee/specifications/enterprise-beans/\">Jakarta Enterprise Beans Lite</a>\"的初步支持；一个面向Piranha Micro的Jakarta EE默认数据源；为改善对不同HTTP引擎的支持而进行的重构。要了解关于这个版本的更多细节，请查看<a href=\"https://javadoc.io/doc/cloud.piranha/project/latest/index.html\">官方文档</a>\"和<a href=\"https://github.com/piranhacloud/piranha/issues?q=is%3Aissue+-label%3Awontfix+milestone%3A22.11.0+is%3Aclosed\">问题跟踪系统</a>\"。</p><p></p><h4>Eclipse Vert.x</h4><p></p><p>Eclipse Vert.x 4.3.5<a href=\"https://vertx.io/blog/eclipse-vert-x-4-3-5/\">发布</a>\"，修复了在4.3.4版本中发现的一些Bug。该版本的新特性包括：在vertx-rx中添加Vert.x Oracle客户端；一项更新，在vertx-web中使用核心HttpServerRequestWrapper类；公开新的<a href=\"https://docs.influxdata.com/influxdb/v2.5/\">InfluxDb</a>\" 2.0配置选项，以便Vert.x能够在vertx-micrometer-metrics中支持InfluxDb 2.0连接。此外，该版本还会继续支持<a href=\"https://github.com/vert-x3/vertx-virtual-threads-incubator/blob/main/README.md\">虚拟线程孵化项目</a>\"，并包含一些<a href=\"https://github.com/vert-x3/wiki/wiki/4.3.4-Deprecations-and-breaking-changes\">弃用项和破坏性更改</a>\"。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/vert-x3/wiki/wiki/4.3.5-Release-Notes\">发布说明</a>\"。</p><p></p><h4>Apache软件基金会</h4><p></p><p><a href=\"https://tomcat.apache.org/\">Apache Tomcat</a>\" <a href=\"https://www.mail-archive.com/announce@apache.org/msg07733.html\">10.1.2</a>\"和<a href=\"https://www.mail-archive.com/announce@apache.org/msg07734.html\">9.0.69</a>\"版本发布，修复了一些Bug，如：包含lambda表达式的表达式语言求值时的并发问题；修正HTTP cookies的expires属性所使用的日期格式，使用单个空格而不是单个破折号来分隔日、月和年组件，以符合RFC 6265规范。要了解更多细节，请查看<a href=\"http://tomcat.apache.org/tomcat-10.1-doc/changelog.html\">10.1.2</a>\"和<a href=\"https://tomcat.apache.org/tomcat-9.0-doc/changelog.html\">9.0.69</a>\"版本的发布说明。</p><p>&nbsp;</p><p><a href=\"https://beam.apache.org/\">Apache Beam</a>\" 2.43.0<a href=\"https://www.mail-archive.com/announce@apache.org/msg07745.html\">发布</a>\"，带来了Bug修复、新特性和功能改进，包括：支持Python 3.10；初步实现一个Runner，让开发者可以在<a href=\"https://www.dask.org/\">Dask</a>\"上运行Beam管道；为所有Java线程提供一个名称，改善调试体验；一个在Java中使用Python <a href=\"https://beam.apache.org/documentation/transforms/python/elementwise/runinference/\">RunInference</a>\"的例子。要了解关于这个版本的更多细节，请查看<a href=\"https://beam.apache.org/blog/beam-2.43.0/\">发布说明</a>\"。</p><p></p><h4>PrimeFaces</h4><p></p><p>PrimeFaces 12.0.2<a href=\"https://www.primefaces.org/primefaces-12-0-2-released/\">发布</a>\"，主要是修复Bug，并在Column&nbsp;和Columns 类中添加了exportRowspan&nbsp;和exportColspan 属性。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/primefaces/primefaces/issues?q=is%3Aissue+label%3A12.0.2+is%3Aclosed\">问题列表</a>\"。</p><p></p><h4>JHipster Lite</h4><p></p><p>JHipster Lite <a href=\"https://github.com/jhipster/jhipster-lite/releases/tag/v0.23.0\">0.23.0</a>\"版本发布：支持GraalVM Native Image；升级端到端模块依赖关系；将依赖项升级到Spring Boot 3.0.0-RC2、Angular 14.2.10、Node.js 18.12.1和npm 9.1.1。</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/11/java-news-roundup-nov14-2022/\">https://www.infoq.com/news/2022/11/java-news-roundup-nov14-2022/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/h3zWfjTmoYFvhXqygxpx\">Java 近期新闻：WildFly 27、Spring 候选版本、JDK 20 的 JEP、Reactor 项目</a>\"</p><p><a href=\"https://www.infoq.cn/article/LlrBgvdmYPGNsVDOZuCZ\">用现代 Java 调整经典设计模式</a>\"</p><p><a href=\"https://www.infoq.cn/article/lpOyO0ClfYLGmmakS3is\">Error Prone 通过检测常见错误帮助改善 Java 代码</a>\"</p>",
    "publish_time": "2022-11-30 09:06:11",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "阿里已经将Serverless数据库在双11大规模落地了，这是否代表着数据库的新风向？",
    "url": "https://www.infoq.cn/article/dYhjQRtHWaeYLZ8MfCMD",
    "summary": "<p></p><blockquote>数据库是Serverless化难度极高的应用。阿里云数据库已全面向Serverless演进，进一步实现了完全自动化的扩容，为用户带来更经济的计费模式和更无感的扩容体验，让业务根据请求的繁忙程度实现平滑的全自动响应，无需人工介入......近日，InfoQ采访到了阿里云数据库团队，深入了解阿里云数据库Serverless化的具体思路及核心技术。</blockquote><p></p><p></p><h2>全面Serverless化</h2><p></p><p>&nbsp;</p><p>2012年，Iron.io的副总裁Ken Form所写的一篇名为《Why the Future of Software and Apps is Serverless》的文章提出了一个新的观点：即使云计算已经逐渐的兴起，但是大家仍然在围绕着服务器转。</p><p>&nbsp;</p><p>正是这篇文章将<a href=\"https://xie.infoq.cn/article/5ba59bbd3d6989840dfeefb88\">“Serverless”</a>\"带进了大众视野。</p><p>&nbsp;</p><p>此后，国内外的Serverless生态迅速发展了起来，诞生了比如Serverless Framework、函数计算、云函数等很多优秀的产品，越来越多的技术人开始对外分享公司内部在Serverless层面的相关实践。</p><p>&nbsp;</p><p>然而，我们很少见到数据库这一重要基础设施服务Serverless化的实战分享。</p><p>&nbsp;</p><p>究其原因，无非一个“难”字。</p><p>&nbsp;</p><p>Serverless的三大主要特征是资源解耦和服务化、自动弹性伸缩以及按使用量计费。</p><p>&nbsp;</p><p>数据库的大量状态存储很难做到类似FaaS这种即开即用的能力，FaaS本身不具备共享内存的能力也会让计算和数据库之间的资源动态扩展能力不一致，FaaS也无法承受服务器通过driver和连接池访问数据库时繁重的初始化......</p><p>&nbsp;</p><p>诸如此，数据库Serverless化一直未取得突破性的进展，这也成为了阿里云数据库研发团队势必要实现的一个小目标。</p><p>&nbsp;</p><p>在阿里巴巴内部，数据库的形态一直在不断演变。</p><p>&nbsp;</p><p>第一阶段，大量业务依赖Oracle数据库，集团内部诞生了大量优秀的DBA和Oracle ACE。</p><p>&nbsp;</p><p>第二阶段，传统的单机数据库难以匹配淘宝等业务的快速发展，团队开始探索开源的数据库方案，尝试用MySQL替换Oracle。在这个过程中，团队逐步做了异地多活等架构层面的创新。</p><p>&nbsp;</p><p>第三阶段，阿里巴巴开始对外提供公有云服务，团队将在MySQL层面积累的经验通过云的形式提供给用户，这也是如今的主流方式之一，只是这个阶段的用户普遍头痛于突发的数据库扩容需求。</p><p>&nbsp;</p><p>第四阶段，自研云原生数据库PolarDB来了，可以很好地解决上一个阶段出现的扩缩容问题。使用传统云数据库，用户需要提前购买足够支撑业务运行的数据库资源。PolarDB与底层的RDMA高性能网络、CIPU、飞天操作系统等基础设施充分融合，实现了存储计算分离、分钟级别弹性等核心云原生能力，结合ADB、DMS等产品逐渐形成了一站式全链路数据管理与服务这样一个被称为云原生数据库2.0的阶段。</p><p>&nbsp;</p><p>第五阶段，全面Serverless化，更进一步实现了秒级自动化的缩扩容，能够随用户业务请求数的增加和减少智能化“膨胀”和“缩小”，实现资源的自动“吞吐”。这种特性，能够为用户带来更经济的计费模式和更无感的扩容体验，让业务根据请求的繁忙程度实现平滑的全自动响应，无需人工介入。</p><p>&nbsp;</p><p>“过去多年，我们深入和底层基础设施结合，哪怕这个过程很痛苦。数据库on ECS 还是物理机？on ECS的一开始肯定会带来成本和性能的挑战，这就倒逼着我们必须通过技术创新解决这些问题，迈过这些坎就会发现on ECS带来的池化规模效应是巨大的，迈过去就是核心壁垒，<a href=\"https://www.infoq.cn/article/VeWtua3dTWELlL09tGv4\">Serverless亦然</a>\"。”阿里云智能数据库事业部负责人李飞飞表示。</p><p>&nbsp;</p><p>那么，在Serverless化的过程中，阿里云数据库团队迈过了哪些坎呢？&nbsp;</p><p></p><h2>数据库Serverless化的关键技术解析</h2><p></p><p></p><h3>计算、内存、存储三层解耦才能实现真正的Serverless</h3><p></p><p>&nbsp;</p><p>在此之前，阿里云自研的云原生数据库PolarDB对数据库架构进行了改造，实现了存储和计算分离，并基于此实现了一写多读，适配云架构，实现了存储池化和按量计费。</p><p>&nbsp;</p><p>但此架构下，CPU和内存依然是强绑定的，无法摆脱传统的vCPU+内存的数据库售卖模式，随着PolarDB Serverless新架构的提出，这种情况可能会出现极大改变。</p><p>&nbsp;</p><p>2021年SIGMOD大会上，阿里云发表《PolarDB Serverless: A Cloud Native Database for Disaggregated Data Centers》论文，创造性地提出了DDC（Disaggregated Data Centers）架构，实现数据库内计算、内存和存储三层资源解耦，三层资源均可以按需分层弹性，内存层支持PB级弹性扩展。</p><p>&nbsp;</p><p>在理想情况下，整个IDC形成一个多租户的大数据库，其全部的CPU，内存，存储构成三个独立的资源池。在资源池未耗尽的情况下，任何一个用户（租户）都可能任意弹性扩展任何一种资源到任何一个规格，用户为其SQL动态消耗的CPU、内存和存储买单，不需要预置任何的规格。</p><p>&nbsp;</p><p>这种情况下，CPU和内存资源因其池化其使用率会大幅度提升，云原生数据库的成本会进一步大幅降低。</p><p></p><h3>解决跨设备迁移潜在的高可用问题</h3><p></p><p>&nbsp;</p><p>在Serverless的场景下，同一台物理机上运行的数据库实例可能都需要资源扩容，此时有可能遇到物理机资源无法满足所有扩容请求的场景。当本地资源不足时，需要将计算节点实例迁移到资源充足的物理机上部署。当实例发生跨设备迁移时将可能导致迁移时间长和用户业务中断受损，因此Serverless数据库需要具备高效的高可用能力。</p><p>&nbsp;</p><p>通过自动切换、热备节点的全局预热系统、利用中间件Proxy的链接技术保证用户链接不中断、无损事务续传的方案让用户得以进行更高效的资源管理， 并且因为内存和存储中的状态与数据库节点解耦，使用Serverless架构的PolarDB节点的崩溃恢复时间比使用单机架构的PolarDB内核快5.3倍。&nbsp;</p><p></p><h3>真正高性能的多节点横向扩展</h3><p></p><p>&nbsp;</p><p>Serverless架构本身对数据库的性能会产生负面影响，毕竟数据库要从远程访问数据，因此想要高性能地多节点横向扩展不是一件容易的事情。</p><p>&nbsp;</p><p>通过Proxy技术以及数据库引擎PolarTrans事务系统利用提交时间戳技术CTS和RDMA网络在内核层面提供集群全局一致性读SCC服务，保证发往集群任意副本的读请求都可以获得全局一致性的结果；通过Scan操作会将算子尽量推送到缓存端或者远程的存储之上，降低实际计算的数据量；并依靠新的硬件解决性能瓶颈，比如阿里云的倚天710等。</p><p>&nbsp;</p><p>接下来，阿里云数据库团队还会在计算资源标准化、计费方式精确化、无感扩所容、资源快速调度、数据共享以及智能自治等层面继续优化Serverless能力。随着硬件的不断发展和计算任务的合理匹配，这种模式最终将会用户从中获得成本优势及体验优势。&nbsp;</p><p></p><h2>下一步技术规划</h2><p></p><p>&nbsp;</p><p>在日前召开的云栖大会上，阿里云数据库提出了整体向“四化”方向发展：云原生化(资源解耦、Serverless)、平台化(基于云构建数据平台能力、OpenAPI标准化)、一体化(处理分析一体化、离在线一体化、集中分布一体化、多模处理一体化)、智能化(AI for DB简化运维、In-DB ML挖掘数据价值)。</p><p>&nbsp;</p><p>数据库Serverless化是阿里云数据库团队在云原生方向的重要进展，然而这并不足以实现团队“让数据业务永远在线，数据价值不断放大”的最终愿景。达成这一点，还需要在平台化、一体化和智能化三个方向上努力，这也是团队接下来在数据库层面的技术规划。</p><p></p><h2>平台化：数据库正在逐步走向融合</h2><p></p><p>&nbsp;</p><p>今年10月份，Oracle 发布了 Oracle Database 23c Beta，这是最新版本的融合数据库，支持所有数据类型、工作负载和开发风格。</p><p>&nbsp;</p><p>这与阿里云数据库团队的理念不谋而合，但又不完全一致。</p><p>&nbsp;</p><p>如前文言，阿里云数据库诞生之初就是要与底层云平台做融合，这也是阿里云成为国内最大的数据库厂商之一的重要原因。当然，这种趋势在整个行业内越来越明显，不仅仅是数据库，即便是自动驾驶厂商也在努力向软硬件一体的平台化方向努力，这也是RDS基于倚天710芯片，PolarDB基于高性能的RDMA做存储，云原生数仓利用硬件能力做算子加速的核心逻辑。</p><p>&nbsp;</p><p>在李飞飞看来，一个独立的数据库厂商如果只是在纯软件层面进行优化，所能构建的竞争力壁垒是非常薄的，如果不去做软硬协同的创新，就很难把竞争对手甩开。也正是基于这个逻辑，李飞飞强调，“我们是阿里云数据库。这是非常重要的区别。”</p><p></p><h3>一体化：放弃分布式、集中式等执念，共生共存</h3><p></p><p>&nbsp;</p><p>在一体化层面，我们可以从三个方面来理解：处理分析一体化、离在线一体化、集中分布一体化，多模处理一体化。</p><p>&nbsp;</p><p>处理分析一体化层面，阿里云数据库团队提出了两种模式：一是云原生HTAP，PolarDB基于IMCI（In-Memory Column Index，内存列式索引) 处理轻量的分析业务；二是打通PolarDB和AnalyticDB提供一体化HTAP解决方案，让数据不需要通过部署额外的同步链路而是直接在内核层面传输，用户对此基本是无感的。</p><p>&nbsp;</p><p>离在线一体化层面，AnalyticDB已经做到一份数据同时支持在线分析和离线计算，通过智能的冷热分层和两大互相隔离的计算模型（传统的在线数据库交互式引擎和大数据引擎），并统一了计费单位、数据管道、数据管理及数据访问来实现离在线一体化。</p><p>&nbsp;</p><p>集中分布一体化层面，团队认为这两种模式均有很好的应用场景，并不存在取代关系，阿里云数据库也确实是这么做的，PolarDB- X通过将云原生数据库架构的Shared Everything+Shared Storage模式与分布式的Shared Nothing模式做融合，可以平滑地从集中式过渡到分布式，即便是应对双11大促这类超大规模数据量的并发也没有问题。</p><p>&nbsp;</p><p>李飞飞认为，集中式和分布式的边界在快速抹平，而且从用户视角看，用户也不需要关心数据库是集中式还是分布式。“我觉得未来的趋势从客户视角其实就是一体化的数据化，什么集中分布式那是你内核需要解决的问题，客户不需要关心。”</p><p>&nbsp;</p><p>多模处理一体化层面，随着数据的多样性不断增长，需要多模系统对多元异构的数据进行处理，Lindorm将时序、宽表、KV、文档等多个数据模型融合在一个平台上，提供一体化的多模数据处理能力，化繁为简，让海量数据看得见，存得起。&nbsp;</p><p></p><h3>智能化：向自动驾驶的数据库平台努力</h3><p></p><p>&nbsp;</p><p>数据库智能化或者说自治是一系列原子技术的组合，广义上包含两大类：数据库外部运维和内核技术的智能化。外部运维就是最近流行的 AIOps，内核技术则是用 AI 技术提升数据库内核的某些性能。目前学术上对后者有很多前沿研究，比如 MIT 提出过使用深度学习网络代替 B-Tree 做索引，在一些实例上取得了不错的效果；IBM 使用深度模型做 SQL 执行计划优化等。但是，目前离成熟的、大规模产品落地还有一段距离。</p><p>&nbsp;</p><p>“当前，业界的实现路径呈现‘百家争鸣，百花齐放’的状态。我们采取的策略是‘外围包围内核’， 先从 AIOps 做起，逐步进入内核智能化的领域。阿里云数据库自治服务 DAS 基于全量 SQL 和性能指标的大数据能力，深度融合人工智能和专家经验，可以分成上游的可观测技术，和下游的可控制技术两个系统。上游包括例如异常 SQL 定位，信号异常检测，针对稀疏数据或倾斜分布的高效统计采样， 还有把观测技术的结果按场景进行归类，用来驱动下游的控制。下游技术包括例如 SQL 外置优化，限流，压测，调参，弹性扩缩容，资源调度，SQL 审计等。这是一个复杂的，包含众多原子技术的体系。通过单点技术的原子能力，加上体系上的构建的丰富的产品功能，和阿里云上独有的规模化的服务，三者的结合构成飞轮效应，呈现给用户智能化的数据库自治能力，让用户聚焦在自己的业务创新和发展上。</p><p>&nbsp;</p><p>虽然距离完全的数据库自动驾驶还有很长一段距离，但目标是可期的。</p><p></p><h2>数据库的场景化爆发时代，来了</h2><p></p><p>&nbsp;</p><p>数据库是非常典型的场景化催生的产品，最早的场景便是处理银行交易。正是因为银行交易场景对数据一致性、隔离性、持久性、原子性等的强需求才催生了数据库将Transaction模型内置其中，但该场景如今已经被标准化。</p><p>&nbsp;</p><p>如今，物理世界数字化以及生物世界数字化让数据库再度站在场景化爆发的路口，数据使用的多样性在需求侧大迸发，这也是空天数据库引擎Ganos得以被广泛关注的原因，但无论是智慧城市还是元宇宙这样的诉求都不是数据库本身就可以满足的，必然需要与底层的硬件能力、云计算能力深入融合，而这种融合所带来的成本优势、性能优势已经可以从阿里云数据库产品中窥见一二。</p><p>&nbsp;</p><p>可以预见未来很长一段时间内，计算、内存、存储三层解耦的Serverless数据库以及云原生化、平台化、一体化和智能化的趋势将会成为数据库的主要形态。</p><p>&nbsp;</p><p>注：本文部分内容参考自<a href=\"https://mp.weixin.qq.com/s?__biz=MzU0NzczNjAwMw==&amp;mid=2247498007&amp;idx=1&amp;sn=fe4ab787aa66f6d39acadf95ba8c3bdb&amp;chksm=fb4b69bbcc3ce0adf216b48bd79c21c14cbf045019b4fadb23f25fb61b5abb7abaa6800160f0&amp;scene=27\">《Serverless数据库技术》</a>\"研究报告，感兴趣的读者欢迎下载报告全文。</p>",
    "publish_time": "2022-11-30 09:39:36",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "2022 亚马逊云科技 re:Invent：一图看尽 Day 1 重要发布",
    "url": "https://www.infoq.cn/article/ADkDkycu3lzqpHH8KKVf",
    "summary": "<p></p><p><img src=\"https://static001.infoq.cn/resource/image/fe/08/fe33745520e616ca3679317465bda608.png\" /></p><p></p>",
    "publish_time": "2022-11-30 11:56:54",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]