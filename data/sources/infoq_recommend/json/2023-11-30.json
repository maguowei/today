[
  {
    "title": "Spotify 开源 ANN 搜索库 Voyager，比Annoy快10倍",
    "url": "https://www.infoq.cn/article/OkPF1HW3oNz1xCFKbLa1",
    "summary": "<p><a href=\"https://engineering.atspotify.com/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzczNDUsImZpbGVHVUlEIjoibThBWk00Nk8wS0lvR05rYiIsImlhdCI6MTcwMTIzNzA0NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.X1nX-oU-Z4nS2yFPTlqBTYNc21XQzyx-1B9MUjAB2a4\">Spotify</a>\" 最近开源了<a href=\"https://spotify.github.io/voyager/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzczNDUsImZpbGVHVUlEIjoibThBWk00Nk8wS0lvR05rYiIsImlhdCI6MTcwMTIzNzA0NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.X1nX-oU-Z4nS2yFPTlqBTYNc21XQzyx-1B9MUjAB2a4\">Voyager</a>\"，一个近似最近邻（Approximate Nearest-Neighbor，ANN）搜索库。Voyager 基于<a href=\"https://arxiv.org/abs/1603.09320?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzczNDUsImZpbGVHVUlEIjoibThBWk00Nk8wS0lvR05rYiIsImlhdCI6MTcwMTIzNzA0NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.X1nX-oU-Z4nS2yFPTlqBTYNc21XQzyx-1B9MUjAB2a4\">Hierarchical Navigable Small Word</a>\"（HNSW）算法，比 Spotify 之前的 ANN 库 <a href=\"https://github.com/spotify/annoy?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzczNDUsImZpbGVHVUlEIjoibThBWk00Nk8wS0lvR05rYiIsImlhdCI6MTcwMTIzNzA0NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.X1nX-oU-Z4nS2yFPTlqBTYNc21XQzyx-1B9MUjAB2a4\">Annoy</a>\" 快 10 倍。</p><p></p><p>Spotify 使用 ANN 来支持其音乐推荐功能，比如 Discover Weekly。他们于 2013 年开发了 Annoy 来执行 ANN 搜索，但在 10 年后的当前规模下表现不佳。部分原因是由于底层算法：Annoy 使用树分区算法，而 Voyager 使用更新的 HNSW 算法。Voyager 比 Annoy 使用的内存少 4 倍，比 <a href=\"https://github.com/nmslib/hnswlib?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzczNDUsImZpbGVHVUlEIjoibThBWk00Nk8wS0lvR05rYiIsImlhdCI6MTcwMTIzNzA0NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.X1nX-oU-Z4nS2yFPTlqBTYNc21XQzyx-1B9MUjAB2a4\">hnswlib</a>\"（HNSW 的实现之一）少 16 倍。根据 Spotify 机器学习工程师和 Voyager 贡献者 <a href=\"https://engineering.atspotify.com/2023/10/introducing-voyager-spotifys-new-nearest-neighbor-search-library/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzczNDUsImZpbGVHVUlEIjoibThBWk00Nk8wS0lvR05rYiIsImlhdCI6MTcwMTIzNzA0NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.X1nX-oU-Z4nS2yFPTlqBTYNc21XQzyx-1B9MUjAB2a4\">Peter Sobot</a>\" 所说：</p><p></p><p></p><blockquote>Voyager 结合了 HNSW 更高的精度和速度，提供了经过充分测试、具有完善文档、可以在生产环境中使用的 Java 和 Python 绑定。Voyager 的理念是提供一个稳定、可靠、可在生产环境中使用的库，让任何人都可以在其应用中添加近似最近邻检索功能，无论使用的是 Python 还是 Java。</blockquote><p></p><p></p><p>Spotify 的推荐功能首先通过机器学习算法计算歌曲或 音轨 的 Embedding。两个音轨在播放列表中频繁出现，它们在Embedding空间中就会被映射得越近。用户也根据他们所听的歌曲被映射到这个空间。为了推荐用户可能喜欢的歌曲，Spotify 使用 ANN 搜索来找到与用户在 Embedding 空间中位置接近的音轨。Spotify 还可以使用 ANN 进行歌曲去重：通过计算音频数据的 Embedding，ANN 可以识别具有基本相同音频的音轨。</p><p></p><p>像 Spotify 这样的规模，要快速执行这种搜索要困难得多：他们的嵌入向量有数千个维度，目录中包含了数百万音轨。Annoy 显然无法提供足够好的性能，于是 Spotify 的工程师们尝试使用现有的开源库 hnswlib，但\"<a href=\"https://open.spotify.com/episode/3NLpNXBFC5bX5Oy5KlF5CL?si=09a859c813634488&amp;accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzczNDUsImZpbGVHVUlEIjoibThBWk00Nk8wS0lvR05rYiIsImlhdCI6MTcwMTIzNzA0NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.X1nX-oU-Z4nS2yFPTlqBTYNc21XQzyx-1B9MUjAB2a4\">遇到了问题</a>\"\"。其核心代码存在 Spotify 工程师无法修复的错误。他们还希望拥有更简单的 API。这导致他们开发了 Voyager，该项目考虑到了 Spotify 的生产基础设施需求。</p><p></p><p>Voyager 的设计目标是快速和轻量级。其 API 针对 Java 和 Python 做了绑定，但库本身没有 Java 依赖，并且仅需要 Python 的 NumPy库。该库可以在 Intel 和 ARM 芯片架构的机器（Linux 和 MacOS）和 Windows （Intel芯片架构）上运行。</p><p></p><p>用户在Hacker News 上将 Voyager 其与其前身 Annoy 进行了<a href=\"https://news.ycombinator.com/item?id=38072277&amp;accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzczNDUsImZpbGVHVUlEIjoibThBWk00Nk8wS0lvR05rYiIsImlhdCI6MTcwMTIzNzA0NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.X1nX-oU-Z4nS2yFPTlqBTYNc21XQzyx-1B9MUjAB2a4\">比较</a>\"：</p><p></p><p></p><blockquote>我看到的最大区别是，Annoy 使用只读索引文件（如文档所述：\"树一旦创建，就无法再添加更多的项\"），而 Voyager 允许你随时调用.add_item。</blockquote><p></p><p></p><p>Peter Sobot <a href=\"https://twitter.com/psobot/status/1715443416190910716?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzczNDUsImZpbGVHVUlEIjoibThBWk00Nk8wS0lvR05rYiIsImlhdCI6MTcwMTIzNzA0NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.X1nX-oU-Z4nS2yFPTlqBTYNc21XQzyx-1B9MUjAB2a4\">在 Twitter 的某个关于 Voyager 的帖子中回答道</a>\"：</p><p></p><p></p><blockquote>我认为 Voyager 是一个可嵌入、超轻量、快速的向量搜索库。Voyager没有向量数据库的花哨功能，但它没有依赖，并且只有大约 300KB。</blockquote><p></p><p></p><p><a href=\"https://github.com/spotify/voyager?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzczNDUsImZpbGVHVUlEIjoibThBWk00Nk8wS0lvR05rYiIsImlhdCI6MTcwMTIzNzA0NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.X1nX-oU-Z4nS2yFPTlqBTYNc21XQzyx-1B9MUjAB2a4\">Voyager 的源代码</a>\"可以在 GitHub 上获取。Voyager 已经提交到 <a href=\"https://ann-benchmarks.com/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzczNDUsImZpbGVHVUlEIjoibThBWk00Nk8wS0lvR05rYiIsImlhdCI6MTcwMTIzNzA0NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.X1nX-oU-Z4nS2yFPTlqBTYNc21XQzyx-1B9MUjAB2a4\">ANN-Benchmarks</a>\" 页面，但尚未运行<a href=\"https://github.com/erikbern/ann-benchmarks/pull/473?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzczNDUsImZpbGVHVUlEIjoibThBWk00Nk8wS0lvR05rYiIsImlhdCI6MTcwMTIzNzA0NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.X1nX-oU-Z4nS2yFPTlqBTYNc21XQzyx-1B9MUjAB2a4\">基准测试</a>\"。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/11/spotify-ann-voyager/\">https://www.infoq.com/news/2023/11/spotify-ann-voyager/</a>\"</p>",
    "publish_time": "2023-11-30 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "AI Agent与行业融合应用的前景及创新应用案例 | InfoQ《极客有约》",
    "url": "https://www.infoq.cn/article/XmzCkJUErlIuTsK8cvDm",
    "summary": "<p>作为一个比较新的概念，AI Agent 与行业融合应用的前景非常广阔，它们可以应用于各个领域，如医疗、金融、教育、零售等。</p>\n<p>本期《极客有约》，我们邀请到了澜码科技创始人兼 CEO 周建和澜码科技产研负责人周元剑，一同来探讨 AI Agent 目前的落地情况以及未来的发展趋势。我们还将为大家分享一些成功的 AI Agent 应用案例，以及探讨如何应对 AI Agent 应用中可能出现的挑战和问题，如数据隐私、算法透明性等。</p>",
    "publish_time": "2023-11-30 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]