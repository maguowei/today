[
  {
    "title": "简化Java应用的升级：Eclipse Migration Toolkit for Java（EMT4J）",
    "url": "https://www.infoq.cn/article/Xtu2bcQ7cVcW0KQ8VK6k",
    "summary": "<p>Adoptium<a href=\"https://adoptium.net/blog/2022/12/emt4j-an-easier-upgrade-for-java-applications\">发布了</a>\"Eclipse Migration Toolkit for Java（EMT4J），这是一个开源的<a href=\"https://projects.eclipse.org/projects/adoptium.emt4j\">Eclipse项目</a>\"，能够分析和升级应用的Java版，以便于从Java 8升级至Java 11，从Java 11升级至Java 17。EMT4J将支持升级到未来的LTS版本。</p><p></p><p>很多组织都建议使用最新的Java运行时，以获取安全性和功能方面的改进。同时，长期支持（Long Term Support）的Java版本每两年发布一次，<a href=\"https://www.infoq.com/news/2022/11/spring-6-spring-boot-3-launch/\">Spring Framework 6</a>\"等项目已经至少需要Java 17。令人遗憾的是，新Java版本的采用是相对缓慢的。例如，在2022年，也就是Java 11发布四年之后，只有不到49%的Java应用在<a href=\"https://newrelic.com/resources/report/2022-state-of-java-ecosystem\">使用</a>\"该版本。</p><p></p><p>将应用升级至较新的Java版本意味着开发人员需要解决Java内部变更和功能移除所带来的所有问题。这涉及的功能包括Nashorn、J2EE和Java等包的移除、API的变更以及对Java内部访问更严格的限制。</p><p></p><p>EMT4J提供了一个支持Maven插件（目前在Maven中央仓库<a href=\"https://github.com/adoptium/emt4j/issues/13\">尚不可用</a>\"）、Java代理以及命令行的解决方案，以便于分析项目与新版本Java的不兼容性，结果会以**TXT、JSON或HTML**格式输出。</p><p></p><p>为了演示EMT4J，考虑如下的样例应用，它调用了Java 11中已经删除的**Thread.stop()**方法：</p><p></p><p><code lang=\"java\">Thread thread = new Thread();\nthread.stop();\n</code></p><p></p><p>在克隆Git<a href=\"https://github.com/adoptium/emt4j\">仓库</a>\"并将Maven工具链<a href=\"https://github.com/adoptium/emt4j#how-to-build\">配置</a>\"为JDK 8和JDK 11之后，可以采用如下命令构建项目：</p><p></p><p><code lang=\"java\">mvn clean package -Prelease\n</code></p><p></p><p>这将会在_emt4j-assembly/target_目录生成一个**.zip**文件，该文件可以进行解压。在解压后的目录中，就可以进行分析了。例如，在<a href=\"https://github.com/adoptium/emt4j#use-the-command-line-toolstatically-scan\">命令行中</a>\"运行如下的命令：</p><p></p><p><code lang=\"java\">java -cp \"lib/analysis/*\" org.eclipse.emt4j.analysis.AnalysisMain -f 8 -t 17 \n    -o java8to17.html /home/user/application/classes\n</code></p><p></p><p>这将会分析指定目录下的类文件并在_java8to17.html_文件中显示从Java 8升级到Java 17时的潜在问题。另外，也可以使用归档文件解压后在_bin_目录下的**.bat或.sh脚本来启动命令行分析。<a href=\"https://github.com/adoptium/emt4j#use-the-command-line-toolstatically-scan\">README</a>\"文件描述了分析类和JAR**文件的所有可用选项。</p><p></p><p>由此生成的HTML文件将会展示描述、解决方案和问题的位置：</p><p></p><p><code lang=\"java\">1.1 Removed API Back to Content\n1.1.1 Description\nMany of these APIs were deprecated in previous releases and \n    have been replaced by newer APIs.\n1.1.2 How to fix\nSee corresponding JavaDoc.\n1.1.3 Issues Context\nLocation: file:/home/user/application/classes/App.class, \n    Target: java.lang.Thread.stop()V\n</code></p><p></p><p>除此之外，在Java应用启动的时候，可以使用<a href=\"https://github.com/adoptium/emt4j#use-the-emt4j-agent\">EMT4J代理</a>\"，或者在构建应用的时候使用<a href=\"https://github.com/adoptium/emt4j#use-it-as-maven-plugin\">Maven插件</a>\"。</p><p></p><p>该项目包含了<a href=\"https://github.com/adoptium/emt4j/blob/master/emt4j-common/src/main/resources/default/rule/8to11/rule.xml\">从Java 8升级至11</a>\"和<a href=\"https://github.com/adoptium/emt4j/blob/master/emt4j-common/src/main/resources/default/rule/11to17/rule.xml\">从Java 11升级至17</a>\"的规则集。例如，用于校验应用是否使用JDK内部API的<a href=\"https://github.com/adoptium/emt4j/blob/master/emt4j-common/src/main/resources/default/rule/8to11/rule.xml\">JDK内部API</a>\"规则：</p><p></p><p><code lang=\"java\">\n    \n        agent\n        class\n    \n\n</code></p><p></p><p>support-modes表明该规则是否可以用于 agent模式和/或静态分析，其中静态分析也就是class模式，能够用于命令行和Maven插件中。关于翻译资源的打包是通过result-code属性实现的，在本例中，也就是_JDK_INTERNAL_，它会映射为_emt4j-common/src/main/resources/default/i18n_目录中的JDK_INTERNAL.properties和JDK_INTERNAL_zh.properties翻译文件。</p><p></p><p>EMT4J会扫描应用的中的包和类，比如_emt4j-common/src/main/resources/default/rule/8to11/data/目录中_class-package-file jdk_internals.cfg文件所定义的sun.nio和sun.reflect。</p><p></p><p>实际的规则类型_reference-class_位于_emt4j-common/src/main/java/org/eclipse/emt4j/common/rule/impl_目录中，因为JDK内部规则中，support-modes的值为agent和class。</p><p></p><p><code lang=\"java\">@RuleImpl(type = \"reference-class\")\npublic class ReferenceClassRule extends ExecutableRule {\n</code></p><p></p><p>现有的规则可以提供灵感，以便于按照<a href=\"https://github.com/adoptium/emt4j#add-a-new-rule\">README</a>\"文件所定义的说明添加自定义规则。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/12/eclipse-migration-toolkit-java/\">Eclipse Migration Toolkit for Java (EMT4J) Simplifies Upgrading Java Applications</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/XOzIWQtI1qUdtX7g0Ej3\">GraalVM Java 编译器将于 2023 年加入，与 OpenJDK 的发布节奏和流程保持一致</a>\"</p><p><a href=\"https://www.infoq.cn/article/vrFf9KauwxZ4bqWr454P\">Java 近期新闻：Ideal Graph Visualizer 开源、TomEE MicroProfile 5.0 认证</a>\"</p>",
    "publish_time": "2023-01-28 09:35:01",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]