[
  {
    "title": "麦当劳中国数字化副总裁汤海涛确认出席QCon广州，讲述麦当劳中国的数字化变革故事",
    "url": "https://www.infoq.cn/article/TQpeyJ2cJqWAQNuQsbq9",
    "summary": "<p>作为餐饮行业数字化的标杆案例，麦当劳中国被誉为全球数字化程度最高的麦当劳。</p><p></p><p>本周五，在即将到来的&nbsp;<a href=\"https://qcon.infoq.cn/2023/guangzhou/schedule?utm_source=infoq&amp;utm_medium=arti&amp;utm_campaign=full&amp;utm_term=0523&amp;utm_content=tanghaitao\">QCon&nbsp;全球软件开发大会·广州站</a>\"，麦当劳中国数字化副总裁<a href=\"https://qcon.infoq.cn/2023/guangzhou/presentation/5318?utm_source=infoq&amp;utm_medium=arti&amp;utm_campaign=full&amp;utm_term=0523&amp;utm_content=tanghaitao\">汤海涛</a>\"将现身主会场，分享题为《麦当劳中国的数字化变革》的主题演讲。</p><p></p><p>汤海涛作为数字化副总裁，先后负责了麦当劳Omni-Channel&nbsp;Technology（全渠道零售技术）及Digital&nbsp;Store&nbsp;Operation（应用商店运营）相关部门的产品研发工作。本次他的演讲将着重介绍麦当劳中国的数字化变革旅程及部分产品，阐述其在传统行业数字化变革中的心得及感悟。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/10/34/102da1841c36fyy03ae129bfe5e76134.png\" /></p><p></p><p>麦当劳中国一直以来都是数字化转型的先驱者——作为最早试点微信功能的快餐企业，从&nbsp;2015&nbsp;年起，其先后接入微信支付、推出小程序点餐、接入微信会员卡等等。</p><p></p><p>不过，作为大型国际餐饮企业，标准化一直被深深地写在麦当劳的基因里。如此一来，在瞬息万变的移动互联网时代，麦当劳中国区业务的发展容易会受到限制，有翅难展。</p><p></p><p>在&nbsp;2017&nbsp;年，这种约束的关系开始有了更多松弛空间，中信股份、中信资本和凯雷投资集团与麦当劳签署了中国区业务的收购协议，新公司“金拱门”成为麦当劳在中国的唯一特许经营商。金拱门也向麦当劳全球争取更多自主性，来推出自己的&nbsp;App。</p><p></p><p>在过去三四年间，麦当劳中国对消费者的线上体验做了大幅改进，一个显性的成果体现在&nbsp;App&nbsp;口碑的挽回：麦当劳&nbsp;App&nbsp;在应用商店的评分经历了从&nbsp;2&nbsp;分到接近&nbsp;5&nbsp;分的提升。</p><p></p><p>值得一提的是，此前我们与麦当劳中国建立了良好的合作关系。比如去年&nbsp;10&nbsp;月，InfoQ&nbsp;极客传媒邀请了<a href=\"https://www.infoq.cn/article/MQ0BZcA5TUaNbT7hIEm2\">麦当劳中国首席信息官陈世宏参与深度视频访谈栏目《行知数字中国》</a>\"，从&nbsp;IT&nbsp;视角畅聊麦当劳中国数字化的实践和方法论。在他看来，企业进行数字化的过程很重要的一点是：转换思考问题的角度。尤其是传统企业容易形成思维定势，作为&nbsp;IT&nbsp;侧人员，需要从技术的角度切入，并尝试用新的思路把传统业务重新思考一遍，再带着新想法去影响原来既定规则的制定者，一同找出改进的机会点。</p><p></p><p></p><p></p><p>此外，我们旗下企业级一站式数字技术学习平台——极客时间企业版，近两年也与麦当劳中国合作过数据人才培训项目。</p><p></p><p>该项目面向商业分析团队精英和聚焦用户增长、市场发展的业务精英，升级数据分析思维，提升数据分析技能，帮助员工高效利用数据资产，并结合真实的业务场景与行业案例挖掘数字底层价值，提供业务洞察新视角，助推麦当劳数字化转型与数智化建设（618&nbsp;为回馈客户，企业版所有课程打包学习立省千元，如果你一直在寻找高质量的培训方案，<a href=\"https://b.geekbang.org/\">可以点击申请限量优惠</a>\"。从新手小白到资深专家，阶梯式学习更高效）。</p><p></p><p>通过这次合作，我们看到，麦当劳中国切实将客户思维和数据思维刻在了企业 DNA 里，企业的数字化转型不但需要高层的意识和决策，更重要的是自上而下的落实和执行。</p><p></p><p>对于参加&nbsp;QCon&nbsp;广州大会的与会者而言，我们期待汤海涛的演讲激发更多行业人士对数字化转型的思考，并推动各自在数字化领域的发展。目前<a href=\"https://qcon.infoq.cn/2023/guangzhou/apply?utm_source=infoq&amp;utm_medium=arti&amp;utm_campaign=full&amp;utm_term=0523&amp;utm_content=tanghaitao\">会议购票</a>\"倒计时 3 天，想与汤海涛面对面交流，可以直接电话/微信联系票务经理瑞丽&nbsp;18514549229。</p>",
    "publish_time": "2023-05-23 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Java近期新闻：JDK 21的JEP、Spring Cloud AWS 3.0以及OptaPlanner转移至Timefold",
    "url": "https://www.infoq.cn/article/QHBS466JKJZ00gUYbTj8",
    "summary": "<p></p><h4>OpenJDK</h4><p></p><p></p><p>JEP 448，<a href=\"https://openjdk.org/jeps/448\">Vector API（第六轮孵化）</a>\"，已经从JDK 21的Candidate状态<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2023-May/007719.html\">提升</a>\"至Proposed to Target状态。这个JEP位于<a href=\"https://openjdk.org/projects/panama/\">Panama项目</a>\"中，它纳入了前五轮孵化反馈的改进，即JDK 20交付的JEP 438，<a href=\"https://openjdk.org/jeps/438\">Vector API（第五轮孵化）</a>\"、JDK 19交付的JEP 426，<a href=\"https://openjdk.org/jeps/426\">Vector API（第四轮孵化）</a>\"、JDK 18交付的JEP 417，<a href=\"https://openjdk.java.net/jeps/417\">Vector API（第三轮孵化）</a>\"、JDK 17交付的JEP 414，<a href=\"https://openjdk.java.net/jeps/414\">Vector API（第二轮孵化）</a>\"和JDK 16交付的JEP 338，<a href=\"https://openjdk.java.net/jeps/338\">Vector API（孵化）</a>\"。该特性的目标是增强Vector API，从而能够根据JEP 424,&nbsp;<a href=\"https://openjdk.java.net/jeps/424\">外部函数与内存API（预览）</a>\"的定义，从<a href=\"https://docs.oracle.com/en/java/javase/14/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemorySegment.html\">MemorySegment</a>\"中加载和存储Vector。该轮审查预计会在2023年5月9日结束。</p><p></p><p>JEP 445，<a href=\"https://openjdk.org/jeps/445\">无名类和实例主方法（Unnamed Classes and Instance Main Methods）（预览）</a>\"已经从JDK 21的Candidate状态<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2023-May/007731.html\">提升</a>\"至Proposed to Target。这个特性的JEP以前被称为灵活主方法和匿名主类（Flexible Main Methods and Anonymous Main Classes）（预览）以及隐式类和主方法增强（Implicit Classes and Enhanced Main Methods）（预览），提议“改进Java语言，以便于让学生无需了解为大型程序所设计的语言特性，就能编写出第一个程序”。这个JEP进一步推进了甲骨文的Java语言架构师<a href=\"https://www.linkedin.com/in/briangoetz/\">Brian Goetz</a>\"在2022年9月份所发表的博客文章<a href=\"https://openjdk.org/projects/amber/design-notes/on-ramp\">“Paving the on-ramp”</a>\"。甲骨文技术团队的顾问成员<a href=\"https://www.linkedin.com/in/gavin-bierman-a0173075/\">Gavin Bierman</a>\"发布了<a href=\"https://cr.openjdk.org/~gbierman/jep445/jep445-20230502/specs/unnamed-classes-instance-main-methods-jls.html\">规范文档</a>\"的第一个草案，供Java社区审查。该轮审查预计会在2023年5月12日结束。InfoQ会以更详细的新闻报道进行跟踪。</p><p></p><p>JEP 441，<a href=\"https://openjdk.org/jeps/441\">switch的模式匹配</a>\"，已经从JDK 21的Candidate状态<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2023-May/007730.html\">提升为</a>\"Proposed to Target状态。该JEP最终确定了这一特性，并针对前四轮预览的反馈添加了一些改进，即JDK 20交付的JEP 433，<a href=\"https://openjdk.org/jeps/433\">switch的模式匹配（第四轮预览）</a>\"、JDK 19交付的JEP 427，<a href=\"https://openjdk.org/jeps/427\">switch的模式匹配（第三轮预览）</a>\"、JDK 18交付的JEP 420，<a href=\"https://openjdk.org/jeps/420\">switch的模式匹配（第二轮预览）</a>\"以及JDK 17交付的JEP 406，<a href=\"https://openjdk.org/jeps/420\">switch的模式匹配（预览）</a>\"。该特性通过对switch表达式和语句进行模式匹配，增强了语言的功能。该轮审查预计会在2023年5月11日结束。InfoQ会以更详细的新闻报道进行跟踪。</p><p></p><p>JEP 440，<a href=\"https://openjdk.org/jeps/440\">记录模式（Record Patterns）</a>\"，已经从JDK 21的Candidate状态<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2023-May/007729.html\">提升</a>\"到了Proposed to Target状态。该JEP最终确定了这一特性，并针对前两轮<a href=\"https://openjdk.java.net/jeps/12\">预览</a>\"的反馈添加了一些改进，即JDK 20交付的JEP 432，<a href=\"https://openjdk.org/jeps/432\">记录模式（第二轮预览）</a>\"和JDK 19交付的JEP 405，<a href=\"https://openjdk.org/jeps/405\">记录模式（预览）</a>\"。该特性使用记录模式来解构记录值，以实现对语言的增强。记录模式可以与类型模式结合使用，以“实现强大的、声明式的、可组合的数据导航和处理形式”。类型模式最近通过JDK 18 交付的&nbsp;<a href=\"https://openjdk.java.net/jeps/420\">JEP 420，switch模式匹配（第二次预览）</a>\"和JDK 17交付的JEP&nbsp;<a href=\"https://openjdk.java.net/jeps/406\">406，switch模式匹配（预览）</a>\"扩展到了switch&nbsp;case 标签中。JEP 432最重要的变化是移除了对出现在增强型for语句中的记录模式的支持。该轮审查预计会在2023年5月11日结束。InfoQ会以更详细的新闻报道进行跟踪。</p><p></p><p>JEP 439，<a href=\"https://openjdk.org/jeps/439\">Generational ZGC</a>\"，已经从JDK 21的Candidate状态<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2023-May/007724.html\">提升为</a>\"Proposed to Target状态。该JEP建议“通过扩展Z垃圾收集器（ZGC）来提升应用的性能，使年轻对象和老对象保持独立的分代。这将允许ZGC更频繁地收集年轻的对象，这些对象往往会在较为年轻的时候就已经死亡了。”该轮审查预计会在2023年5月10日结束。InfoQ会以更详细的新闻报道进行跟踪。</p><p></p><p>JEP 404，<a href=\"https://openjdk.org/jeps/404\">Generational Shenandoah（实验阶段）</a>\"，已经从JDK 21的Candidate状态<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2023-May/007732.html\">提升</a>\"到了Proposed to Target状态。该JEP建议“通过分代的收集功能增强Shenandoah垃圾收集器，以提高可持续的吞吐量、负载高峰的韧性和内存利用率。”与其他垃圾收集器（比如G1、CMS和Parallel）相比，Shenandoah目前需要额外的堆头部空间（headroom），并且更难恢复不可达对象占用的空间。该轮审查预计会在2023年5月12日结束。InfoQ会以更详细的新闻报道进行跟踪。</p><p></p><p>JEP 450，<a href=\"https://openjdk.org/jeps/450\">紧凑的对象头信息（Compact Object Headers）（实验阶段）</a>\"已经从JEP Draft 8294992<a href=\"https://mail.openjdk.org/pipermail/jdk-dev/2023-May/007726.html\">提升</a>\"到了Candidate状态。在<a href=\"https://wiki.openjdk.org/display/lilliput\">Lilliput项目</a>\"的支持下，该JEP草案建议将Java对象的头信息从96或128比特减少至64比特。Lilliput项目由亚马逊云科技的首席工程师<a href=\"https://www.linkedin.com/in/romankennke/\">Roman Kennke</a>\"创建，该项目在2022年5月实现了64比特的头信息，这是其<a href=\"https://mail.openjdk.org/pipermail/lilliput-dev/2022-May/000457.html\">第一个里程碑</a>\"。</p><p></p><p>甲骨文的编程语言设计师<a href=\"https://www.linkedin.com/in/dansmithjava/\">Daniel Smith</a>\"已经<a href=\"https://mail.openjdk.org/pipermail/valhalla-spec-observers/2023-May/002233.html\">宣布</a>\"，原名为空限制值对象存储（Null-Restricted Value Object Store）（预览）和基本类型类（Primitive Classes） (Preview)的JEP 401改名为<a href=\"https://openjdk.org/jeps/401\">值对象的扁平化堆分布（Flattened Heap Layouts for Value Objects）</a>\"。Smith提供了一份更新的<a href=\"https://cr.openjdk.org/~dlsmith/jep401/jep401-20230428/specs/flattened-heap-jvms.html\">规范文档供</a>\"社区审查。</p><p></p><h4>JDK 21</h4><p></p><p></p><p>JDK 21的<a href=\"https://jdk.java.net/21/\">早期访问构建</a>\"版本<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-21%2B21\">Build 21</a>\"发布，该版本是对Build 20的<a href=\"https://github.com/openjdk/jdk/compare/jdk-21%2B20...jdk-21%2B21\">更新</a>\"，包含了对各种<a href=\"https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2021%20and%20%22resolved%20in%20build%22%20%3D%20b21%20order%20by%20component%2C%20subcomponent\">问题</a>\"的修复。关于该版本的更多细节，请参阅<a href=\"https://jdk.java.net/21/release-notes\">发布说明</a>\"。</p><p></p><p>对于<a href=\"https://openjdk.java.net/projects/jdk/21/\">JDK 21</a>\"，鼓励开发人员通过<a href=\"https://bugreport.java.com/bugreport/\">Java Bug数据库</a>\"报告缺陷。</p><p></p><h4>Spring Framework</h4><p></p><p></p><p>Spring Boot 3.1.0的<a href=\"https://spring.io/blog/2023/05/05/spring-boot-3-1-0-rc2-available-now\">第二个发布候选版本</a>\"提供了一些新特性，比如，将<a href=\"https://docs.spring.io/spring-boot/docs/3.1.0-SNAPSHOT/api/org/springframework/boot/docker/compose/lifecycle/DockerComposeProperties.html\">DockerComposeProperties</a>\"类中的默认关闭设置为stop；自动应用<a href=\"https://docs.spring.io/spring-boot/docs/3.1.0-SNAPSHOT/api/org/springframework/boot/testcontainers/lifecycle/TestcontainersLifecycleApplicationContextInitializer.html\">TestcontainersLifecycleApplicationContextInitializer</a>\"类进行上下文测试；增加对SQL Server、Oracle Database、Liquibase、Flyway和Cassandra数据库的Docker Compose服务连接支持。同时，Couchbase SSL的keystore属性spring.couchbase.env.ssl.key-store和spring.couchbase.env.ssl.key-store-password被弃用，转而使用Couchbase中对SSL绑定的支持。关于该版本的更多细节，请参阅<a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC2\">发布说明</a>\"。</p><p></p><p><a href=\"https://spring.io/blog/2023/05/02/spring-modulith-0-6-released\">Spring Modulith 0.6</a>\"提供了缺陷修复、依赖性升级以及值得关注的新特性，例如，如果启用了事件发布注册表，则自动配置MongoDB事务；事件发布注册表支持异步处理和关闭行为；@EnableScenario注解，用来在@SpringBootTest集成测试中使用Scenario Testing API；支持Application Module Canvas中的jMolecules架构类型。Spring Modulith团队还决定将该项目提升为顶级的、非实验性的Spring项目，并计划在Spring Boot 3.1的GA发布后发布1.0-M1版本。关于该版本的更多细节，请参阅<a href=\"https://github.com/spring-projects/spring-modulith/releases/tag/0.6.0\">发布说明</a>\"。</p><p></p><p><a href=\"https://spring.io/projects/spring-cloud-aws\">Spring Cloud for Amazon Web Services</a>\"的3.0.0版本发布，其新特性包括，与Spring Boot 3.0兼容；构建在<a href=\"https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/home.html\">AWS SDK V2 for Java</a>\"之上；重写的SQS集成模块；对DynamoDB的重新集成。关于该版本的更多细节，请参阅<a href=\"https://github.com/awspring/spring-cloud-aws/releases/tag/v3.0.0\">发布说明</a>\"。</p><p></p><p>Spring Cloud Data Flow 2.10.3<a href=\"https://spring.io/blog/2023/05/05/spring-cloud-data-flow-2-10-3-released\">发布</a>\"，主要解决了传递性依赖中的安全性问题，比如，spring-security-oauth2-client-5.4.2、spring-expression-5.2.11、spring-webmvc-5.3.25、json-smart-2.3和jettison-1.51。此外，还有Spring Boot 2.7.11和Spring Cloud子项目的依赖性升级。关于这个版本的更多细节，请参阅<a href=\"https://github.com/spring-cloud/spring-cloud-dataflow/releases/tag/v2.10.3\">发布说明</a>\"。</p><p></p><p>Spring Tools 4.18.1<a href=\"https://spring.io/blog/2023/05/05/spring-tools-4-18-1-released\">发布</a>\"，其特性包括，支持在探查<a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Value.html\">@Value</a>\"注解时导航到Spring属性文件；支持属性导航中的<a href=\"https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/autoconfigure/condition/ConditionalOnProperty.html\">@ConditionalOnProperty</a>\"注解，以及使用Eclipse 2023-06里程碑版本构建。Spring Tools团队预计4.19.0版本将在2023年6月底发布。关于这个版本的更多细节，请参阅<a href=\"https://github.com/spring-projects/sts4/releases/tag/4.18.1.RELEASE\">发布说明</a>\"。</p><p></p><h4>Infinispan</h4><p></p><p></p><p>Infinispan 14.0.9.Final<a href=\"https://github.com/infinispan/infinispan/releases/tag/14.0.9.Final\">发布</a>\"，其重要变化包括，修复Infinispan第三方集成测试与JDK17之间的问题；文档记录如何监控跨站复制；删除对Jaeger测试容器的依赖，并修复属性文件中的端口号。关于这个版本的更多细节可以在<a href=\"https://github.com/infinispan/infinispan/compare/14.0.8.Final...14.0.9.Final\">变更日志</a>\"中找到。</p><p></p><h4>Open Liberty</h4><p></p><p></p><p>IBM<a href=\"https://openliberty.io/blog/2023/05/02/23.0.0.4.html\">发布了</a>\"Open Liberty 23.0.0.4，其特性包括，为ARM64架构以及现有的AMD64、PPC64LE和S390X架构提供容器镜像；解决了<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-24998\">CVE-2023-24998</a>\"，即<a href=\"https://commons.apache.org/proper/commons-fileupload/\">Apache Commons FileUpload</a>\"中的一个漏洞，由于请求部分的数量没有进行限制，攻击者可以通过恶意上传触发拒绝服务攻击。</p><p></p><h4>Quarkus</h4><p></p><p></p><p>Quarkus 3.0.2.Final是<a href=\"https://quarkus.io/blog/quarkus-3-0-2-final-released/\">第二个维护版本</a>\"，其中有一些值得注意的变化，比如，在<a href=\"https://quarkus.io/guides/dev-services#infinispan\">Infinispan Dev Services</a>\"指南中把server-list文件改名为hosts；修复Dev UI2显示错误Java版本的问题；解决<a href=\"https://quarkus.io/guides/dev-services#kubernetes\">Kubernetes Dev Services</a>\"指南中没有正确记录k3s名称的问题；修正RESTEasy Reactive流资源方法导致原生模式下出现NoSuchMethodException异常的问题。关于这个版本的更多细节，请参阅<a href=\"https://github.com/quarkusio/quarkus/releases/tag/3.0.2.Final\">发布说明</a>\"。</p><p></p><p>Quarkus 2.16.7.Final<a href=\"https://quarkus.io/blog/quarkus-2-16-7-final-released/\">发布</a>\"，其特性包括，修复了OIDC代码加载令牌解密密钥时的算法对比缺陷；OIDC&nbsp;<a href=\"https://www.javadoc.io/static/com.nimbusds/oauth2-oidc-sdk/4.7.1/com/nimbusds/openid/connect/sdk/claims/UserInfo.html\">UserInfo</a>\"类的一个微小更新，如果给定名称的字符串或布尔属性不存在，会抛出NullPointerException；解决Quarkus&nbsp;dev模式在使用@ApplicationScoped注解时无法与某种类型的项目目录树协同运行的问题；修正如果OIDC客户端无法获取令牌会抛出异常的问题。关于这个版本的更多细节，请参阅<a href=\"https://github.com/quarkusio/quarkus/releases/tag/2.16.7.Final\">发布说明</a>\"。</p><p></p><h4>Helidon</h4><p></p><p></p><p>甲骨文<a href=\"https://twitter.com/helidon_project/status/1653365338845728769?cxt=HHwWgsC-nYHB9_EtAAAA\">发布了</a>\"Helidon 3.2.1，其新特性包括，&nbsp;<a href=\"https://helidon.io/docs/v3/apidocs/io.helidon.integrations.cdi.jpa/io/helidon/integrations/cdi/jpa/JpaExtension.html\">JpaExtension</a>\"类的启用标志，以允许后续的重构和替换；与MicroProfile&nbsp;<a href=\"https://microprofile.io/project/eclipse/microprofile-rest-client\">Rest Client</a>\"和<a href=\"https://microprofile.io/project/eclipse/microprofile-fault-tolerance\">Fault Tolerance</a>\"规范进行集成的变化，以处理因<a href=\"https://weld.cdi-spec.org/\">Weld</a>\"规范中的默认调用上下文问题而产生的异步调用；支持与Jaeger OpenTelemetry不同传播器的集成。关于这个版本的更多细节，请参阅<a href=\"https://github.com/helidon-io/helidon/releases/tag/3.2.1\">发布说明</a>\"。</p><p></p><h4>Apache软件基金会</h4><p></p><p></p><p>Apache Camel 4.0.0的<a href=\"https://www.mail-archive.com/announce@apache.org/msg08163.html\">第三个里程碑版本</a>\"包含缺陷修复、依赖性升级和功能增强，例如，改变默认的Micrometer指标名称以遵循Micrometer命名约定；支持<a href=\"https://micrometer.io/docs/observation\">Micrometer Observation</a>\"；在Spring Boot实现中直接使用HTTP服务器；为添加/删除的HTTP端点添加监听器，使运行时（如Spring Boot）更容易使用Camel的platform-http和自己的HTTP服务器。关于这个版本的更多细节，请参阅<a href=\"https://camel.apache.org/releases/release-4.0.0-M3/\">发布说明</a>\"。</p><p></p><h4>Arquillian</h4><p></p><p></p><p>Arquillian 1.7.0.Final<a href=\"https://github.com/arquillian/arquillian-core/releases/tag/1.7.0.Final\">发布</a>\"，其特性包括，支持<a href=\"https://jakarta.ee/specifications/servlet/6.0/\">Jakarta Servlet 6.0</a>\"；支持<a href=\"https://docs.jboss.org/arquillian/aggregate/latest/org/jboss/arquillian/test/api/ArquillianResource.html\">@ArquillianResource</a>\"注解注入的URL使用HTTPS；修复了使用TestNG 7.5+时<a href=\"https://www.slf4j.org/api/org/slf4j/LoggerFactory.html\">LoggerFactory</a>\"类出现的NoClassDefFoundError异常的问题。关于这个版本的更多细节可以在<a href=\"https://github.com/arquillian/arquillian-core/compare/1.7.0.Alpha14...1.7.0.Final\">更新日志</a>\"中找到。</p><p></p><h4>OptaPlanner转移至Timefold</h4><p></p><p></p><p><a href=\"https://www.optaplanner.org/\">OptaPlanner</a>\"是一个面向软件开发人员的开源人工智能约束解算器（constraint solver），它将<a href=\"https://timefold.ai/blog/2023/optaplanner-fork/\">转移</a>\"至<a href=\"https://timefold.ai/company/about/\">Timefold</a>\"，这是一家由<a href=\"https://www.linkedin.com/in/mvdbroucke/\">Maarten Vandenbroucke</a>\"（联合创始人兼CEO）和<a href=\"https://www.linkedin.com/in/ge0ffrey/\">Geoffrey De Smet</a>\"（联合创始人兼CTO）创建的新规划优化公司。OptaPlanner是De Smet在红帽公司担任高级首席软件工程师时创建的，在红帽公司的支持下，OptaPlanner已经发展成熟，提供了他们自己的版本。InfoQ会以更详细的新闻报道进行跟踪。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/05/java-news-roundup-may01-2023/\">Java News Roundup: JEPs for JDK 21, Spring Cloud AWS 3.0, OptaPlanner to Timefold</a>\"</p>",
    "publish_time": "2023-05-23 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "DDD在前端应用中的一些思考",
    "url": "https://www.infoq.cn/article/04b34d3786c71c5c79249904f",
    "summary": "<p>作者：吴尔畅</p><p></p><p></p><blockquote>DDD旨在解决业务逻辑的复杂性，而业务逻辑大部分场景下不存在于前端。但在一些复杂的应用中，前端可能需要处理一些业务逻辑，此时DDD的一些思想和方法可能有助于组织前端代码，使其更易于理解和维护。</blockquote><p></p><p></p><p></p><h1>一、什么是DDD</h1><p></p><p></p><p>领域驱动设计（Domain-Driven Design，简称 DDD）是一种面向对象软件设计方法，其目的是将软件系统的核心业务领域（Domain）抽象出来，并以此为基础进行设计和实现。</p><p></p><p>领域驱动设计的核心思想是将领域模型作为软件设计的中心，通过对领域模型的深入理解和设计，提高软件系统的可维护性、可扩展性和可重用性。领域模型是描述业务领域中重要概念、实体、关系和操作的一组对象和方法的抽象表示。</p><p></p><p></p><h1>二、DDD主要解决什么问题</h1><p></p><p></p><p>DDD旨在解决业务逻辑的复杂性，而业务逻辑大部分场景下是不存在于前端。业务逻辑往往包含大量的业务规则和约束。这些业务规则通常是在后端实现的，因为后端需要处理数据的验证、处理、计算和存储等。</p><p></p><p></p><h1>三、DDD适用于前端吗</h1><p></p><p></p><p>首先上面提到了DDD主要解决的是复杂业务场景逻辑问题，那么DDD是否适用于前端的一个核心要素就在于：复杂的核心业务逻辑是否存在前端？</p><p></p><p>我认为是大部分情况下复杂的业务逻辑是不在前端的，也就是说DDD大部分情况下是不适合前端业务的。</p><p></p><p>因为业务逻辑是高层级的策略，其他所有东西都依赖于它。此外，一般来说我们需要保证业务的稳定性、可靠性、可扩展性、可维护性。如果将业务逻辑放在前端，可能会导致多端之间的数据不一致或者逻辑不同步，这可能会对用户体验和软件的可靠性造成影响。</p><p></p><p>然而，我们也不能完全排除在前端使用DDD的可能性。在一些复杂的应用中，前端可能需要处理一些业务逻辑，比如业务表单校验规则、权限控制规则等。在这种情况下，DDD的一些思想和方法可能有助于组织前端代码，使其更易于理解和维护。</p><p></p><p></p><h2>3.1&nbsp;前端是低层级细节</h2><p></p><p></p><p>就电商系统软件架构而言，前端通常被视为一个低层级的细节，相对而言较易变。因此，前端在采用新的技术栈时相对容易废弃原有技术体系（比如我们商家端的业务从低代码语言转换成 Pro-Code），而不是为一个新的后端语言废弃原有的后端，在这里起作用的因素是稳定性和易变性。</p><p></p><p></p><h3>3.1.1 什么是细节</h3><p></p><p></p><p>细节指的是如何实现原则，也就是执行原则的方式，细节是原则的实现。要确定你正在编写的代码是原则还是细节的一种简单方法是问下自己：这段代码是否是强制执行有关我的业务领域中规则的实现，还是只是使一些事情得以执行？</p><p></p><p></p><h3>3.1.2&nbsp;什么是策略</h3><p></p><p></p><p>策略是指我们正在编写的代码应该遵循什么样的规则和原则。主要涉及在我们编写代码的领域中存在的业务逻辑、规则和抽象概念。</p><p></p><p></p><h3>3.1.3&nbsp;高层级策略</h3><p></p><p></p><p>高层策略（high-level policy）通常指的是在应用程序中贯穿各个模块和组件的核心业务逻辑和规则，这些逻辑和规则是应用程序的核心价值所在，而且通常是不会轻易改变的。</p><p></p><p>比如，在一个电商平台中，核心的高层策略可能包括如何处理订单流程、如何计算商品最终价格、如何管理库存等等。这些规则是与具体实现无关的，而且可能需要与其他模块进行协作来实现。</p><p></p><p>将高层策略放在后端，可以确保这些规则得到了保护和统一的执行，而且可以通过后端提供的接口和服务来保证数据和逻辑的一致性。与此同时，前端可以专注于展示和交互层面的处理，将高层策略与具体实现分离开来，使得应用程序更容易维护和扩展。</p><p></p><p></p><h3>3.1.4&nbsp;策略和细节的关系图</h3><p></p><p></p><p>对应到前端的策略和细节的一个结构图如下所示：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/af/af300d57667147dc91f0bf065e229b18.png\" /></p><p></p><p>在软件架构中，我们可以将其分为两个层次（领域和基础）</p><p></p><p>在领域层中，我们拥有所有重要的东西：实体、业务逻辑、规则和事件。这是我们软件中不可替代的部分，无法简单地使用另一个库或框架替代。</p><p></p><p>而在基础层中，则包含了所有用于执行领域层代码的实际实现。</p><p></p><p></p><h2>3.2&nbsp;前端很难具备稳定性</h2><p></p><p></p><p>从上文中我们可以知道领域层是具备了最高级别的稳定性和策略，这是因为领域层包含了能够贴切描述你的应用系统业务逻辑和运行方式的领域模型代码，通常来说当前业务模型不会发生重大的变化，这意味着描述这层业务的领域层代码也不需要进行大的变化，所以一般来说领域层是稳定性最高的。</p><p></p><p>依据稳定依赖原则，稳定的模块是我们可以依赖的，将不易变的模块组织成依赖于稳定模块的结构是有意义的，但永远不要让稳定模块依赖于不稳定的模块</p><p></p><p>然而，UI层的复用性通常较差。前端UI需要在多样化的设计稿中进行开发，导致代码差异化无法收敛。不同的用户心智、设计语言、业务背景、以及业务服务，都会对前端 UI 逻辑造成非常大的影响。举个例子，不同业务线的后端服务请求响应数据结构差异化可能直接导致数据处理逻辑无法复用。在一些C端场景中，这种情况尤为突出，比如电商、社交等。</p><p></p><p>针对面向B端的前端，目前业界已经有了一些常用的组件库，例如Antd、Fusion、MerlionUI等等。这些组件库已经具备了高稳定性，即它们已经定义了B端前端的基础组件标准和基础层，大部分情况下不会进行大的变更。然而，由于B端业务场景的差异性，前端在UI层上仍需要大量的业务组件和视图层的工作量。例如，在电商网站下单的订单模型中，面向买家用户时展示的是以买家用户为中心的订单处理状态和履约进度信息，而在面向卖家用户时则需要展示对这笔订单的状态流转的标准操作流程。</p><p></p><p></p><h2>3.3&nbsp;前端很难复合开闭原则</h2><p></p><p></p><p>通常而言当需要更改某个功能时，前端开发人员通常需要直接修改代码，而不是添加新的功能或模块。假设我们在开发一个商品详情组件，可能需要展示商品的名称、价格、描述、图片、评论等信息。这些信息是所有商品都需要展示的，所以可以将它们定义为稳定层的核心规则逻辑。</p><p></p><p>但是，在不同的业务场景中，可能需要对商品信息页面进行一些定制化的展示，比如在大促活动期间需要展示大促标签和氛围图，或者在跨境电商业务中需要展示关税和物流信息，再或者当我们商品详情展示在不同国家和地区的时候商品名称和价格的位置会发生变化，而这些业务规则属于易变的低层级细节，但是往往在业务量比较小、低层级的业务规则没法隐藏到稳定层的时候，这部分工作量往往就会落在前端身上，最后前端视图层和业务组件层会有大量的业务规则逻辑判断。通常而言这种方式违反了开闭原则，因为它需要修改现有的代码来实现新的功能，而不是扩展功能模块，这就是因为我们将所有高层级策略放在后端并确保前端不包含高层级策略时所做的工作。</p><p></p><p>在这种情况下，前端可以通过配置文件或者运营控制台等方式来配置这些低层级细节规则，而稳定层的商品信息组件可以通过这些配置来实现不同的业务场景的展示需求。</p><p></p><p></p><h1>四、前端业务复杂度主要在哪</h1><p></p><p></p><p>前端业务复杂度主要包括但不限于技术栈的复杂度、业务逻辑的复杂度、UI交互的复杂度等。</p><p></p><p></p><h2>4.1&nbsp;技术栈的复杂度在哪</h2><p></p><p></p><p>通常而言我们所说的前端技术栈泛指：Vue、React、Angular、JQuery等基于MVVM、操作DOM的技术栈。</p><p></p><p>为什么这么说？因为前端框架其实本质上是高策略层级的，每个前端框架的一般都是来解决以下问题：</p><p></p><p>定义状态 （data、state）状态变化检测 （Object.defineProperty、Proxy、React reconcilliation）对状态更改做出反应 （Observable、hooks、单向数据流）</p><p></p><p>所以当你选择好一个框架之后，其实你就已经是在这个高层级策略下面执行低层级细节的编码。举个例子Vue和React实现状态变化检测和Reactive的策略是不一样的，对于开发者而言在这个策略下的实际编码思想也是差异巨大的，Vue是基于Proxy来做双向绑定，而React是基于调度更新算法来更新vdom树</p><p></p><p>React带给我们的编程范式是函数式编程（函数式编程 Functional Programming 是一种编程范式，它的核心思想是使用纯函数来进行编程），当我们选择了React这套UI框架和生态之后，我们天然写出来的代码就是基于函数式的。为什么是函数式的？背后的原因实际上是因为React原生的响应方案，也就是监测变量引用（reference）的变化，然后整个子树去协调更新。</p><p></p><p>函数式编程具备几个特点：纯函数、不可变性、函数组合。React响应方案因为要保证在输入(props)是一致的情况下，输出(vdom)的结果也是一致的。所以我们对React状态逻辑的封装大部分也需要满足这个特性，这也是为什么我们在组件内部要通过setState()而不是state.xxx来变更状态，这也就是我们通常所说的状态不可变性。</p><p></p><p>另外函数式编程又帮我们解决了组件的之前的组合问题，一般来讲我们基于 React 来开发页面的模式一般是：Page = Compose(ComponentA + ComponentB + Fusion/Antd)而Component = Compose(Fusion/Antd + React hooks + Events + State)而这种组合的特性在业务层如果没有一个比较好的组件依赖原则的话，会导致组件之间耦合比较严重，又因为组件内部的复杂度也是 compose 的各种“组件”，所以当系统内的各种\"组件\"的依赖关系越来越复杂的时候，甚至“组件”之间的依赖出现环的时候，业务系统的复杂度就跟着线性递增了。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/cc/cc5964c4aaa485afe32e62479ff4c3cb.png\" /></p><p></p><p>总结一下在业务前端应用中技术栈的复杂度主要体现在以下方面：</p><p></p><p>1）组件和模块的组织：在组件化和模块化设计中，如何组织组件和模块，使得它们的依赖关系合理、清晰，以保证代码的可维护性和可扩展性。</p><p></p><p>2）状态逻辑的组织和管理：在大型前端应用中，状态管理是一个重要的问题。状态管理需要考虑状态的一致性和可变性，以及如何处理状态的变化。</p><p></p><p>3）异步数据处理：现代前端应用需要处理大量的异步数据请求和处理。异步数据处理需要考虑异步数据的请求和响应、数据缓存、数据更新和状态管理等问题。</p><p></p><p></p><h2>4.2&nbsp;业务逻辑的复杂度</h2><p></p><p></p><p>业务逻辑的复杂度通常来自于业务需求本身，例如业务规则、流程、数据处理等。业务逻辑的复杂度可能因业务领域的不同而有所不同，例如电商、本地生活、直播等领域都有各自的业务逻辑和复杂性。</p><p></p><p>在前端开发中，业务逻辑复杂度可能表现为需要进行大量的数据处理、业务规则的验证、复杂的页面流程设计等。在前端中，如果没有一个清晰的业务逻辑划分和抽象，代码可能会变得非常复杂，难以维护和扩展。因此，在前端开发中，对于业务逻辑的划分和抽象非常重要，这样才能更好地应对业务逻辑的变化和复杂性。</p><p></p><p></p><h2>4.3&nbsp;UI交互的复杂度</h2><p></p><p></p><p>UI交互的复杂度主要在于如何实现复杂的交互逻辑和动画效果，以及如何处理用户的输入和反馈。具体来说，UI交互的复杂度主要体现在：用户体验设计、跨端兼容性、性能优化。</p><p></p><p></p><h1>五、怎么降低前端业务复杂度</h1><p></p><p></p><p>这里我们主要重点关注怎么降低技术栈和业务逻辑的复杂性带来的复杂度。</p><p></p><p>文章的开头我们讲了，领域驱动设计的主要目的是为了解决业务逻辑的复杂性。领域驱动设计的核心思想是将领域模型作为我们业务架构设计的中心， 实际上来说我们只是需要借助领域驱动设计的一些思想在前端业务开发中进行实践，前面提到在我们前端业务工程会出现大量不满足组件构建的无依赖环原则，这里主要的原因是因为前端开发者在以UI层为中心进行开发，而如果我们切换视角以ViewModel、Model为中心来构建我们的前端业务的话，整体系统设计思路会发生变化。</p><p></p><p></p><h2>5.1 领域模型</h2><p></p><p></p><p>大部分前端代码与实际业务领域无关，这部分前端主要专注在表单验证、API请求、事件响应、列表渲染等等，然而也有部分业务的前端也确确实实跟业务领域相关，领域业务模型也确实会影响到UI层。领域模型通常是一组具有业务含义的类或者对象，它们通过方法、属性等方式封装了系统的关键业务逻辑。无论如何，只要它能被系统中的其他不同应用复用就可以。</p><p></p><p>通常来说我们可以通过手动创建或者抽象工厂方法构造出模型数据，把这些数据响应式地映射到视图层，再根据视图层触发的事件调用模型层里的函数或方法来更新模型层数据。</p><p></p><p></p><h2>5.2 状态管理</h2><p></p><p></p><p>状态管理主要分两个部分：一个是管理对业务模型层的可变状态和不可变状态，一个管理视图层的可变状态和不可变状态。</p><p></p><p>视图层上有些状态不是从模型层数据里来的，是纯粹的页面状态，比如数据正在加载的标志、下拉框的联动，等等，这些和模型层无关，且随着需求的变化而动态变化。</p><p></p><p>在基于React渲染方案中，我们既可以利用React原生的响应方案也可以借助三方库(mobx)的方案来实现这部分状态管理，选择的方案不同可能会带来在编程范式的差异（FP、OOP）。</p><p></p><p></p><h2>5.3 视图层</h2><p></p><p></p><p>视图层是最不稳定的一层，UI组件的实现通常受到业务需求的影响，随着需求的变化，UI组件的实现也需要进行相应的调整和变更。同时，为了保持软件的稳定性和可维护性，需要遵循稳定依赖原则，确保其他基础组件不会依赖于视图层。</p><p></p><p>基于React的视图层又会有伴随着事件响应、生命周期等等副作用。Hooks实际上只是视图层的东西，背后都是依赖于React的响应原理，因此，在我看来，Hooks会通过合并同类项进入视图层。</p><p></p><p></p><h2>5.4 架构分层</h2><p></p><p></p><p>首先，在互联网行业中，很难一开始就完成完美的系统设计。相反，系统往往需要逐步发展，通过不断迭代和引入新的功能模块来逐步成型。对于现有系统，通过一次大规模的重构难以解决所有问题。好的系统设计需要不断投入工作并逐步积累细节，最终才能获得完善的系统。因此，在日常工作中需要高度重视设计和细节改进。</p><p></p><p>其次，专业化分工和代码复用是提高软件生产率的重要手段，此外，同一领域服务可以支持不同的上层应用逻辑。这种分工和复用背后的思想是将系统分为多个水平层，并明确定义每个层的角色和任务，以降低单个层的复杂性。同时，每个层只需向相邻层提供一致的接口，可以使用不同的方法进行实现，这为软件重用提供了支持。因此，分层是解决复杂性问题的重要原则。</p><p></p><p></p><h3>5.4.1&nbsp;方案一</h3><p></p><p></p><p>在这个方案中我们视图层跟模型层的之间的接口是通过ViewModel来进行管理，视图层依赖Hooks和ViewModel来进行生命周期、事件、响应方案， 而 ViewModel 中既包含当前视图层自身的状态管理也耦合领域服务和领域模型，这个架构设计中不稳定层包含：View、Hooks、Lifecycle、ViewModel，而稳定层包含：Service、Repository、Model。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/79/79a3a6d89689dda7b8a7b41c033fd509.png\" /></p><p></p><p></p><h3>5.4.2&nbsp;方案二</h3><p></p><p></p><p>在这个方案中我们视图层跟模型层的之间是直接依赖关系，视图层直接依赖Hooks、Model、State。这个架构设计中不稳定层包含：View、Hooks、Lifecycle、State、Model，而稳定层包含：Service、Repository。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ff/fff90fa68efb23c0145978138d3f1803.png\" /></p><p></p><p></p><h3>5.4.3&nbsp;文件目录设计</h3><p></p><p></p><p>我们根据上述结构图的分层思想，在实际项目中定义了以下的文件目录：</p><p></p><p><code lang=\"null\">├── shared\n│   ├── components // 公用基础组件, 组件之间不能互相耦合\n│   ├── constants // 全局变量\n│   │   ├── page.ts\n│   ├── domains // 领域层\n│   │   ├── page\n│   │   │   ├── page.model.ts // 实体\n│   │   │   └── page.service.ts // 领域Service服务\n│   │   ├── ...\n│   └── util // 公用函数\n│       └── http.ts\n├── components // 公共业务组件，业务组件之间不能互相耦合，但是可以依赖公共基础组件\n├── modules // 模块视图，模块可以是compose(公共业务组件, 公共基础组件)\n└── page // 页面视图层\n    ├── index\n    │   ├── index.tsx\n    │   ├── components\n    ├── ...</code></p><p></p><p>常见问题</p><p></p><p>问题一：Modules跟Components的区分实际上过于理想化，正常业务开发，很可能不好判断我当前这个组件是要放Modules还是Components里面，甚至使用者都会疑惑我到底是要去Modules里面去找还是去Components去找。</p><p></p><p></p><blockquote>Module = compose(ComponentA + ComponentB + ComponentC)。如果ModuleA只是一个特殊的 ComponentA， 就放到component里面，模块里面不耦合太多业务逻辑，纯粹的View层的compose。只是这个模块需要被多个页面引用，比如: PageA = compose(ModuleA + ComponentD + PageA logic ) PageB = compose(ModuleA + ComponentC + ComponentB + Hooks )。</blockquote><p></p><p></p><p>问题二：那你的Components的颗粒度到底是多细呢？我的Components里面的Component能引用其他的Component吗？</p><p></p><p></p><blockquote>不行，关注点分离，架构分层，就是要让依赖树足够清晰，Component可以依赖shared/components也可以依赖Fusion + MerlionUI，但是components之间最好不要互相耦合。</blockquote><p></p><p></p><p>在具体选择方案时，需要考虑业务场景的差异，简单的业务属性要警惕把问题复杂化，警惕过度设计，复杂的业务要全面评估和判断好方案，选择适合自己的设计方案。</p><p></p><p>另外两种设计方案中不稳定层并不意味着这是一个强耦合层，不稳定只是代表这一层中的结构会随着业务的变更而频繁变更，我们需要根据业务场景来判断哪些部分需要转化为稳定层，并确保依赖关系结构的清晰和整洁。</p><p></p><p></p><h2>5.5&nbsp;总结</h2><p></p><p></p><p>根据上文推导过程可知，如果我们要在前端业务工程上深度应用领域驱动设计的思想来实践最好需要几个前提：</p><p></p><p>前提一：开发者需要站在领域模型层为中心的视角来进行系统设计。前提二：开发者需要对业务领域模型足够理解，前后端的业务领域模型要对齐。前提三：后端能提供业务领域的标准化CRUD接口。</p><p></p><p>写在最后：虽然技术在软件开发中扮演了重要的角色，但任何技术都不是银弹，作为工程师、架构师，我们需要对技术选型、架构设计、系统设计进行深思熟虑，并进行全面的评估和判断。</p>",
    "publish_time": "2023-05-23 10:15:20",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "不谈技术了，聊聊车企研发效能和文化冲突问题怎么解｜InfoQ 闭门会精选",
    "url": "https://www.infoq.cn/article/CkHtoF8WF0pZsEhcMvMc",
    "summary": "<p>在智能化、网联化、电气化、共享化这“新四化”的变革趋势下，汽车的产品形态经历了从机械到电子再到软件定义的逐阶演进。如今，它更像是一个可以移动的大型智能终端，多元化的应用功能、流畅的交互体验成为决定汽车产品力的关键因素。</p><p></p><p>而这背后，涉及的是一系列的产品升级和技术创新。比如，大量与用户形成交互体验的数字应用的开发；比如，足以支持高并发和低延迟的车联网的打造；再比如，能够整合各种复杂技术栈的平台的构建；以及，AI 等前沿智能技术的融入等等。</p><p></p><p>由于这些创新需求的出现，如今信息技术人员在<a href=\"https://www.infoq.cn/article/wREDVO1xPhTSEKcU81f3\">汽车</a>\"企业中的人员占比越来越高，扮演的角色也越来越重要。</p><p></p><p>当然，新的问题也在浮出水面。除了技术落地和应用过程本身的挑战，在日前 <a href=\"https://archsummit.infoq.cn/2023/shenzhen\">ArchSummit </a>\"全球架构师峰会·上海站的“汽车数字化高端闭门会”上，来自多个车企的数字化和技术负责人主要还聚焦两个痛点话题展开了深度探讨——第一，企业研发效能如何提升；第二，企业在数字化创新过程中产生的文化冲突如何化解。</p><p></p><p>以下内容经 InfoQ 编辑、提炼和总结，希望为大家提供参考。</p><p></p><h2>研发效能如何提升</h2><p></p><p></p><p><a href=\"https://www.infoq.cn/video/o6UKckapOFF64ecFtu73\">研发效能</a>\"的提升，听起来更像是互联网企业或者科技公司语境下的课题。之所以越来越多的车企也开始为这个问题所困，主要是因为“软件定义汽车”时代下，汽车产品的研发和生产周期变短，功能开发和迭代频次也在变高。</p><p></p><p>举例来说，传统燃油车时代，汽车车型换代遵循“一年一改款、三年一大改、五年一换代”的频率，单款车型的生命周期最长可以达到数十年之久。而现在，新能源汽车尤其是车载软件系统版本的迭代周期已经缩短到 1.5-2 年左右，原来的研发周期、效率和路径已经很难适应时代的新诉求。</p><p></p><p>另外，和互联网企业不同的是，传统车企经年累月的技术债务非常多，技术复杂性高，而且相对缺乏标准化的研发管理流程。研发效能的提升是一件难度值极高的工作。</p><p></p><p>与此同时，随着近几年来汽车市场“卷”得越来越厉害，激烈的市场竞争，加上经济增速放缓，使得成本控制的压力也越来越大。研发效能的保障无法靠人力资源的投入实现，人效的提高才是正道。</p><p></p><h4>量化评估模型作为度量</h4><p></p><p></p><p>万事皆可量化，但前提是必须梳理清楚量化的目的和量化的手段。</p><p></p><p>对于效能提升这件事，量化的目的是基于数据实现研发效能的可分析和可提升，通过数据显性化、理性地改善效率的问题；而量化的手段，是具体的、有针对性的度量模型和度量工具。</p><p></p><p>比如，针对开发、测试、运维等不同个人和团队，不少企业都设计了对应的度量模型，根据每月 / 每季 / 每半年的评估得分打出“红黑榜”，并与绩效考核挂钩。同时，为确保研发质量，对开发代码的度量不仅面向产量，还要面向质量价值进行检测。</p><p></p><p>值得注意的是，量化评估模型一定不是一成不变的。企业经营管理是动态变化的，因此，要让模型持续发挥作用并且拥有公信力，也要对其不断迭代优化。而迭代优化的依据，主要基于公开透明的数据展示，以及公开透明的内部讨论，任一参数权重的设定都要建立在充分的公平原则基础上，才能激发相关人员的参与积极性。</p><p></p><h4>通过技术进行赋能</h4><p></p><p></p><p>除了制定“军规”，还要提供“武器”。如今，很多企业都在引入全新的方法、技术和工具，为研发管理赋能。</p><p></p><p>比如，关注度越来越高的<a href=\"https://www.infoq.cn/article/LIVbsZbEtFlNpOjkRJYs\">平台工程</a>\"。</p><p></p><p>根据 Gartner 的定义，平台工程是为软件交付和生命周期管理而构建和运营自服务的内部开发者平台（IDP）的学科。平台工程旨在提供一组精心设计的工具、功能和流程，经过打包后便于开发人员和最终用户使用。它将提高最终用户的生产力并减轻开发团队的负担。</p><p></p><p>具体来看，平台工程可以提供一套标准化的开发流程和规范，从而优化团队的协作和沟通，降低沟通和协调成本；基于一系列标准化开发框架和工具（如代码库、组件、模板等），帮助开发团队更快地开发出高质量的软件，减少工作量和时间成本；同时，通过自动化测试、代码重构、性能监测等方式提高软件的可测试性和可维护性，减少开发人员的负担和错误，提高开发效率和软件质量和可靠性。</p><p></p><p>再比如，万众瞩目的<a href=\"https://www.infoq.cn/video/kxtTSYgd34dmmI8Pzb1A\"> AIGC</a>\"。</p><p></p><p>很多技术开发人员都是 AIGC 这样的前沿技术的“尝鲜者”，随着技术的日益成熟，通过把 AIGC 与研发工作相结合，也可以大大提高研发效能。</p><p></p><p>举例来说，基础的代码框架和大部分完整代码，可以先通过 ChatGPT 辅助生成，再由人工进行完善，从而节省手动编码的时间成本；此外，ChatGPT 还可以帮助开发者进行代码纠错和重构，通过检测潜在的错误、不规范代码以及可以优化的地方，提出修改建议。除此之外，在软件测试和运维阶段，AIGC 同样可以提供大量支持。</p><p></p><h4>帮助员工获得成长</h4><p></p><p></p><p>当然，为应对巨大的效率和成本挑战，以及日新月异的技术变化，帮助内部员工获得成长（而非大规引模引入新人），也是企业最具“性价比”的管理策略之一。</p><p></p><p>为此，企业越来越重视内部的数字化<a href=\"https://app.jingsocial.com/microFrontend/leadGeneration/jsf-leads/list/webinar/P8KAMuAA7DmVHnBydPuGL8/B449t4y4HjqwnEG7SfL5gC?utm_term=pc_interstitial_1374\">人才培养</a>\"，通过制定体系化的培训机制和岗位能力模型，针对不同的职能、团队和角色，提供对应的培训机会，帮助员工实现技能提升，最终达到提效的目的。</p><p></p><p>甚至，当 ChatGPT 这样的技术席卷而来，如何帮助员工直面问题，消除“被替代”的焦虑感，让新的工具为自己所用——这也是企业在内部人才培养过程中必须纳入考虑的问题。</p><p></p><h2>文化冲突如何消解</h2><p></p><p></p><p>车联网团队融合了传统车企与互联网这两种文化，从互联网企业来的专家，如何理解车企的文化？技术部门与业务部门怎么合作，创新与求稳怎么平衡？在闭门会上，嘉宾们给出的答案是：回到基本面，围绕价值创造。</p><p></p><p>具体来看，大家面临的文化冲突主要来自两方面：</p><p></p><p>第一，传统车企管理流程与创新文化的冲突。从研发、生产、供应链、销售到服务，汽车业务周期漫长且工序复杂，这使得传统车企非常注重流程。而这种文化，并不利于做创新。很多创新都是突发性的，并且从想法到落地必须快速进行校验、试错，如果走不通，需要马上切换或者迭代。如果还按照传统流程按部就班地进行，创新几乎不太可能实现。</p><p></p><p>第二，传统IT团队/业务部门与数字化创新团队的冲突。无论是人员结构、职能划分还是目标考核等等，传统IT和数字化创新团队之间，往往隔着一道难以跨越的鸿沟。而不同团队、不同部门之间的这种隔膜，往往会带来一系列沟通协作等方面的问题，造成运营效率低下，以及成本浪费。此外，由于数字化创新团队代表了“新的生产力”，对原有的业务模式和生产关系必然产生冲击，因此，业务部门与数字化团队之间的冲突也无法避免。</p><p></p><h4>优化调整组织架构</h4><p></p><p></p><p>虽然消解文化冲突的问题没有捷径，新文化的培养需要时间的沉淀，但是企业仍然可以使一些“巧劲”来加速这个过程——比如，对组织架构进行调整。</p><p></p><p>通常一个企业的组织架构都是对公司战略决心和业务重点的反映。举例来说，根据企业的战略能力不同，车企的数字化团队分属不同的部门，擅长市场的企业，数字化归属销售部门，也有CEO直管、有归属财务。这决定了数字化团队能获得的资源以及企业对数字化转型的战略预期。</p><p></p><p>通过在一个团队内融合多元文化，可以在局部化解文化冲突。比如，通过把数字化团队和业务团队放在同一组织下，汇报给同一个直属领导，由他来解决这个小组织内的技术与业务冲突。也有企业提出将PO（产品）、TO（技术交付）、SM（敏捷项目管理办公室）作为“铁三角”，实现共同决策、共同制定绩效和共同担责。</p><p></p><p>此外，还可以从流程和职能上做隔离，对传统IT团队与数字化创新团队的冲突，者继续负责内部技术需求的兑现，后者负责对外的技术输出。</p><p></p><h4>建立共同价值观</h4><p></p><p></p><p>可以说，以上这一系列战线拉齐的动作，目的都是让不同不同角色和团队之间建立起共同的价值观，向上向下都实现兼容。核心的思路是，以结果为导向，以价值为驱动，保持共同的利益，从而把更多的利益方连接到一起，达成企业目标。</p><p></p><p>举个例子，<a href=\"https://www.infoq.cn/article/FHLt7r5zU7lvYP8U5ODm\">SAFe</a>\"（Scaled Agile Framework，大规模敏捷框架）是如今很多企业在数字化转型过程中非常重要的方法架构。其核心价值观就是协调一致、内建质量、透明、项目群执行。在这一框架下，硬件工程师、软件工程师与销售经理能够为一个细微的优化而协同配合，最大化激发团队的主动性与创造力。这一方面可以解决前文提到的研发效能的问题，也可以很好地化解团队间的冲突。</p><p></p><p>事实上，但凡在一个组织中，仍然有人不认可数字化的价值，无论是管理层还是一位普通的开发人员，那么文化冲突的问题必定是无解的。所以，换个角度来看，企业数字化项目的推行，必须是面向价值的，要让更多人看到其中的价值。只有如此，才能在内部建立起信任的基本盘。</p><p></p><p>当然，这种共同价值观的建立还可以进一步前置。比如，在企业招聘过程中，就通过对应的职能体系和测评机制，筛选出跟企业文化更契合的候选人，从而确保新入职员工与企业的战略方向不会出现过大的偏差，减少后续的冲突成本。</p><p></p><h4>及时反馈阶段成果</h4><p></p><p></p><p>不过，需要强调的是，很多事情的价值是无法立即兑现的。这时候，信任感的延续既要依赖于技术管理者的个人品牌和影响力，从获得一部分人的支持，到获得越来越多人的支持；同时，要及时反馈阶段性成果，用这些可见的“成果”，赢得进一步的信任，从而换取更多的时间。</p><p></p><h2>结语</h2><p></p><p></p><p>总而言之，无论是研发效能还是文化冲突，很多问题归根结底都还是“人的问题”。人效的问题可以上升到团队管理，团队管理的问题又可以上升到文化塑造，而文化冲突的化解，最终又转换为个人影响力的问题。这种螺旋闭环，恰恰提供了一种解决复杂问题的视角和思路。</p><p></p><p>在这个过程中，文化、组织、技术、人才每个环节都不可或缺，虽然每个企业的情况各有不同，数字化转型的路径和解决问题的思路千差万别，但是，其中的“道与术”无疑是相通的，希望本文能为大家提供参考和启发。</p>",
    "publish_time": "2023-05-23 11:18:55",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "国产替代正当时：我们是如何迁移到国产操作系统的？| InfoQ《极客有约》",
    "url": "https://www.infoq.cn/article/KZ6bJkiHlfmfcCsMBibS",
    "summary": "<p>当前，不少企业存在操作系统国产替代诉求。如何才能更好地迁移到国产操作系统？操作系统迁移会对软件栈带来哪些影响？企业开发、运维人员如何拥抱变化？本期《极客有约》，我们邀请到了政采云运维支撑负责人朱海峰老师，为大家分享政采云的国产操作系统迁移实战经验。</p>",
    "publish_time": "2023-05-23 13:12:24",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "QCon 广州站倒计时三天，大咖闭门会准备就位",
    "url": "https://www.infoq.cn/article/trIhrtiR6hSGFwT8i8mC",
    "summary": "<p>QCon 大会历来是国内顶级技术人员的盛会，与会者不仅能够在大会上学习到讲师们精心准备的课程，还能通过 QCon 大会提供的社交平台进行技术思想的交流和碰撞。</p><p></p><p>2023 年，AGI 浪潮扑面而来，整个行业充满了对新技术、新世界的渴望。为了给大家提供一个更高质量的沟通平台，让各位大咖嘉宾能够进行充分的交流和思想碰撞，此次<a href=\"https://qcon.infoq.cn/2023/guangzhou/schedule\"> QCon 广州站</a>\"针对当前最热门的话题特别策划了五场大咖闭门交流会。针对每个话题，主办方特别邀请了来自各个不同背景的大咖，包括大会 Keynote 嘉宾、知名企业 CXO、华南技术圈 KOL、TGO 鲲鹏会会员、特邀行业专家等。</p><p></p><p>在话题方面，我们精心挑选了五个热门方向，涵盖<a href=\"https://qcon.infoq.cn/2023/guangzhou/track/1512\"> AGI</a>\"、<a href=\"https://qcon.infoq.cn/2023/guangzhou/track/1518\">DevOps</a>\"、成本优化、出海、金融话题。它们分别是：</p><p></p><p>企业在 LLM、AIGC 浪潮下的研发探索DevOps vs 平台工程，必要性和 ROI 探讨破解成本优化后的稳定性问题业务出海之架构、合规、运营金融行业数据治理经验分享</p><p></p><p>目前参与闭门会的部分大咖名单包括：得到 CTO 快刀青衣、渣打银行 Chief Architect Eddie Lee、阳光保险科技研究院副院长张晗、开放城市共同体发起人兼天使投资人杜玉杰、小红书 VP 凯奇等。</p><p></p><p>闭门会采取邀请制参会模式，目前还有少量席位。欢迎各位大咖联系身边的 QCon 大会编辑、极客邦科技对接商务、TGO 鲲鹏会会员，共同参与峰会，开启一场头脑激荡之旅。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/e2/cb/e21349bb6a271072e8f9bac8cfd00ecb.jpg\" /></p><p></p><p>另外，大会目前还有少量门票供购买，请各位同学抓紧机会上车。购票参会可以直接电话 / 微信联系票务经理 18514549229。</p>",
    "publish_time": "2023-05-23 15:10:27",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "出海复杂度越来越高，AIGC 能否成为企业出海“新利器”？",
    "url": "https://www.infoq.cn/article/sdHwQy9DUqfM86ZG4NYJ",
    "summary": "<p>AIGC 浪潮席卷而来，已经在文字、图像、视频等内容的生产方式带来不小的改变。越来越多的企业开始重视 AIGC 相关技术创新和应用实践，探索 AIGC 相关技术产品和业务结合的可能性。</p><p></p><p>如何通过落地 AIGC 相关技术实现“内部提效率 外部找增长”，成为不少企业关注的方向。使用 AIGC 相关技术提高效率、寻找新的利润增长点，与企业出海的出发点不谋而合。计划出海或者已经出海的企业需要为 AIGC 带来的技术浪潮做好准备，也应该抓住技术红利。</p><p></p><p>但是，AIGC 浪潮下，企业出海真的会加速吗？不同发展阶段的企业出海会面临哪些难题？AIGC 相关技术在企业出海业务上有哪些实际的应用落地？为了得到这些问题的答案，InfoQ 特别策划了 QCon 全球软件开发大会《AIGC 浪潮下的企业出海》专场，进一步探讨 AIGC 浪潮下企业出海应该做何选择。来自 Google Cloud 和 WebEye 的技术专家们将在会上，从企业出海和 AIGC 浪潮两个视角进行分享。</p><p>在这场分享中，你将了解到：</p><p></p><p>企业出海如何有效规避安全风险？如何快速搭建适用于出海业务的高效数据系统？Google Cloud 最新发布的生成式大模型技术有何不同？AIGC 在各行各业有哪些应用可能性？早期没有专业中台团队时怎么快速验证业务？后期中台化后如何做技术选型？自建大数据集群与云原生如何取舍？……</p><p></p><p>更多精彩内容将在 5 月 26 日，QCon 全球软件开发大会《AIGC 浪潮下的企业出海》专场与你相见。</p><p>现场席位有限，扫码下方海报二维码或者点击【阅读原文】，快速锁定席位！</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/bd/c5/bd52c44498b37f286336624fa088b0c5.png\" /></p><p></p>",
    "publish_time": "2023-05-23 18:45:46",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]