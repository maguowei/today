[
  {
    "title": "反面教材：搞砸Web开发的15种方法",
    "url": "https://www.infoq.cn/article/Jcw2CoqgL7kohbf5s6KP",
    "summary": "<p>现如今，网络上关于怎么构建健壮、可维护Web应用的文章随处可见，相信大家早就看烦了。那如果公司里刚好来了个你看着不顺眼的新同事，各位打算给这家伙点颜色瞧瞧，该怎么下手？别担心，坏事就由我来做。只要按照以下15条建议实施，绝对能让Web开发者在浪费一整天时间之后、陷入深深的沮丧与自我怀疑当中。</p><p>&nbsp;</p><p></p><h2>1. 抽象层</h2><p></p><p></p><p>多用抽象层、越多越好，直到：</p><p></p><p>代码已经难以理解和调试。代码变更变得极为困难。代码运行速度变慢、效率降低。代码失去复用性。</p><p></p><h2>&nbsp;</h2><p></p><p></p><h2>2. 用各种方式刁难PR变更</h2><p></p><p></p><p>一定要拖住PR请求，借此维护住你在项目中的主导地位。</p><p></p><p>下面提几个可行的刁难借口：</p><p></p><p>要求把变更名延长；要求把变量名缩短；要求重新命名变更名；要求代码更“紧凑”。</p><p></p><h1>&nbsp;</h1><p></p><p></p><h2>3. 不写提交信息</h2><p></p><p></p><p>高质量的提交信息多费工夫啊，我们时间宝贵、才没精力浪费在编写这种东西上：</p><p>&nbsp;</p><p><code lang=\"null\">[JIRA-1234] build: replace vue-cli with vite</code></p><p>&nbsp;</p><p>相反，大家可以直接用以下命令来推送不带任何提交信息的代码：</p><p>&nbsp;</p><p><code lang=\"null\">git commit --allow-empty-message -m \"\" &amp;&amp; git push --force</code></p><p>&nbsp;</p><p></p><h2>4. 多用“幻数”</h2><p></p><p></p><p>多用“幻数”，这样会显得你更专业、更神秘、更清楚自己到底在做什么：</p><p>&nbsp;</p><p><code lang=\"null\">window.scrollTo({\n  top: 89,\n  left: 12,\n  behavior: \"smooth\",\n});</code></p><p>&nbsp;</p><p></p><h2>5. 掺杂返回语句</h2><p></p><p></p><p>在函数里混杂返回语句，这样别人就永远不知道你接下来打算干什么了：</p><p>&nbsp;</p><p><code lang=\"null\">function shouldPayTax(income) {\n  if(income.amount &lt; 20_000) {\n    return false\n  }\n  if(income.amount &gt; 20_000 &amp;&amp; income.country == 'USA') {\n    return true\n  }\n  if(income.country == 'Panama') {\n    return false\n  }\n  if(this.totalWorkingHoursPerWeek &gt; 60) {\n    return true\n  }\n  if(income.amount &gt; 20_000 &amp;&amp; income.isCelebrity == true) {\n    return false\n  }\n  if(income.amount &gt; 20_000) {\n    return true\n  }\n}</code></p><p>&nbsp;</p><p></p><h2>6. Typescript</h2><p></p><p></p><p>如果有人厚颜无耻地把TypeScript添加到项目中，大家可以到处使用&nbsp;any&nbsp;来绕过类型检查。</p><p>&nbsp;</p><p><code lang=\"null\">function add(a:any, b:any):any {\n  return a + b\n}</code></p><p>&nbsp;</p><p></p><h2>7. 用双等号来替代三等号</h2><p></p><p></p><p>使用&nbsp;==&nbsp;来代替&nbsp;===，理由是在生产包中节约宝贵的存储空间。</p><p>&nbsp;</p><p></p><h2>8. 注释代码</h2><p></p><p></p><p>除了要编写难以理解的代码之外，也别忘了留下毫无意义的误导性注释，否则没准哪个聪明人就看懂了你的开发逻辑。</p><p>&nbsp;</p><p>相关参考规则如下：</p><p></p><p>注释应该与代码重复；注释的作用是解释代码为什么不够清楚；对于可以写出清晰注释的部分，什么都别写；注释的意义在于引起混乱，而非消除混乱；切勿提供复制代码的原始链接；切勿提供有帮助的外部参考链接；在修复bug时，切勿添加任何注释（或测试）；切勿使用注释来标记不完整的实现。</p><p>&nbsp;</p><p>这里还有更多“妙招”供大家参考：</p><p><a href=\"https://stackoverflow.blog/2021/12/23/best-practices-for-writing-code-comments/\">https://stackoverflow.blog/2021/12/23/best-practices-for-writing-code-comments/</a>\"</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/d0/d044d88543147b8859dc64054af1a412.png\" /></p><p></p><p>&nbsp;</p><p></p><h2>9. 使用Props实现状态共享</h2><p></p><p></p><p>使用props传递状态，能让大家更好地把组件层次结构耦合起来，从而大大提高重构难度。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/3f/3fd0f17c7bd486398111bb283cb14046.png\" /></p><p></p><p></p><h2>&nbsp;</h2><p></p><p></p><h2>10. 对组件状态使用状态管理</h2><p></p><p></p><p>另一方面，记得把组件状态移动至全局存储，这样每个人都可以修改其内容。</p><p>&nbsp;</p><p></p><h2>11. 让组件文件变长</h2><p></p><p></p><p>使用大型整体组件，理由是这样能更好地明确组件用途、改善变量的跨函数可复用性。</p><p>&nbsp;</p><p></p><h2>12. 不做linter检查</h2><p></p><p></p><p>Linter能够分析代码并检测出潜在错误、不一致性以及与既定编码标准间的偏差，而这显然跟我们的意图背道而驰。</p><p>&nbsp;</p><p>以下两个代码片段之间就存在明显差异：</p><p>&nbsp;</p><p><code lang=\"null\">const props=defineProps({\nelements:Array,\ncounter:{\ntype:Number,\ndefault:0,\n},\n});\nconst{data,method}=useComposable();\nconst isEmpty=computed(()=&gt;{returnprops.counter===0;});\nwatch(props.counter,()=&gt;{console.log(\"Countervaluechanged\");});\nconst emit=defineEmits([\"event-name\"]);\nfunction emitEvent(){\nemit(\"event-name\");\n}\nfunction getParam(param){\nreturn param;\n}</code></p><p>&nbsp;</p><p><code lang=\"null\">const props = defineProps({\n  elements: Array,\n  counter: {\n    type: Number,\n    default: 0,\n  },\n});\nconst { data, method } = useComposable();\nconst isEmpty = computed(() =&gt; {\n  return props.counter === 0;\n});\nwatch(props.counter, () =&gt; {\n  console.log(\"Counter value changed\");\n});\nconst emit = defineEmits([\"event-name\"]);\nfunction emitEvent() {\n  emit(\"event-name\");\n}\nfunction getParam(param) {\n  return param;\n}</code></p><p></p><blockquote>专业提示：关于linting规则，唯一可以接受的用法就是确保文件长度超过特定行数。这里不妨把数字设定为1000。</blockquote><p></p><p></p><h2>&nbsp;</h2><p></p><p></p><h2>13. 在翻译中使用HTML</h2><p></p><p></p><p>要想搞砸Web开发，对字符串进行硬编码永远是种好办法。有时候，使用包含html元素和类的翻译更能够“锦上添花”。</p><p>&nbsp;</p><p><code lang=\"null\">translation.key.name = Hello <span class=\"red\">World!</span></code></p><p></p><h2>&nbsp;</h2><p></p><p></p><h2>14. 编写测试</h2><p></p><p></p><p>不编写测试当然也挺好，但要想真正把人折磨疯，最好还是要测试、只是提供一套极差的套件。这里向大家分享折磨人测试的一般准则：</p><p>慢——测试时间足够我们去泡杯咖啡；不可靠——常测常新，永远不确定这测试到底靠不靠谱；耦合——会影响到其他测试；过度延伸——尽可能跟应用程序中的其他部分扯上关系。</p><p>&nbsp;</p><p>悟性高的朋友还可以参考这份单元测试进阶“教程”：</p><p><a href=\"https://fadamakis.com/8-tips-for-writing-better-unit-tests-8c0a8d8cde16\">https://fadamakis.com/8-tips-for-writing-better-unit-tests-8c0a8d8cde16</a>\"</p><p>&nbsp;</p><p></p><h1>15. 永远信任一切</h1><p></p><p></p><p>最后，只有懦夫和小白才需要防御性编程。这世上哪有那么多坏人？</p><p>&nbsp;</p><p></p><h1>总结</h1><p></p><p></p><p>请大家别把文章当真，因实操而遭解雇的话，本文作者概不负责。😅</p><p>&nbsp;</p><p>如果大家有自己的“奇思妙想”，请在评论栏中不吝分享。</p><p>&nbsp;</p><p>&nbsp;</p><p></p><h5>原文链接：</h5><p></p><p><a href=\"https://fadamakis.com/15-terrible-advice-for-web-developers-e821e95f5d18\">https://fadamakis.com/15-terrible-advice-for-web-developers-e821e95f5d18</a>\"</p><p></p><p></p><h5>相关阅读：</h5><p></p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5ODIzNDQ3Mw==&amp;mid=2649969927&amp;idx=1&amp;sn=cc8a7cee992d36202d86ee5068fcc66e&amp;chksm=beca250189bdac17511f9649f03ab3b0c6fee72a33cb1957ff5a6017924fe10b7c7d5581eb98&amp;scene=27#wechat_redirect\">Web3当下，最佳投资就是投资自己</a>\"</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5ODIzNDQ3Mw==&amp;mid=2649969873&amp;idx=1&amp;sn=8cc0a44a1ab3255ea5973d41520a4c39&amp;chksm=beca24d789bdadc1f9085e3853dffff525aaa28a09a46c50169585b66650a1ac26ae67db9b57&amp;scene=27#wechat_redirect\">Web3的反思，不要抱怨</a>\"</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5ODIzNDQ3Mw==&amp;mid=2649970108&amp;idx=1&amp;sn=25f73abae444b3b0107873e5764ee068&amp;chksm=beca25ba89bdacacdc16a5def20ec892652e302c1119efbb6476f94d8570c6570a060065a2b0&amp;scene=27#wechat_redirect\">给Web3创业者的28个原则</a>\"</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5ODIzNDQ3Mw==&amp;mid=2649970054&amp;idx=1&amp;sn=1ccf271b4aea088d3beb777536ba2033&amp;chksm=beca258089bdac967b59fb03eaca2104a6038e99ff8483831976281428e80b4284add474346d&amp;scene=27#wechat_redirect\">和我一起学习Web3</a>\"</p>",
    "publish_time": "2023-11-07 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]