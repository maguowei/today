[
  {
    "title": "腾讯云技术实践精选集 2022",
    "url": "https://www.infoq.cn/article/RuveM045ptfTNKwfeq6c",
    "summary": "<p>2022 年，数字化转型成为了全行业关注的焦点，数字经济的价值进一步凸显。云计算作为数字时代的关键要素之一，正从单一云向多云、混合云战略过渡；分布式云服务也进入了高速发展的黄金期；随着 Docker、K8s 等容器技术的流行，云原生正成为云计算的新赛场，也成为企业数字化转型发展的“默认选项”、新底座；除此之外，人工智能、边缘计算等技术的普及进一步加速了云计算技术的变革。无论是数字原生行业还是非数字原生行业，云计算在行业数字化解决方案、产业链数据流转、资源动态配置、业务创新等方面正产生着难以估量的价值。</p>\n<p>对于腾讯的技术团队来讲，2022年也是一个重要的技术里程碑之年。<span class=\"orange\"><strong>历经三年，包括 QQ、微信、王者荣耀、腾讯会议等亿级用户规模的腾讯自研业务已全面上云，集群规模突破 5000 万核，累计节省成本超 30 亿，这使得腾讯打造出国内最大规模的云原生实践。</strong></span></p>\n<p>如何把这些亿级业务全部搬到云上并实现云原生改造？腾讯云做了大量的技术优化和革新，比如：</p>\n<ul>\n<li>在容器调度领域 ，通过混部技术将资源利用率提升到 65%；</li>\n<li>在数据库领域，通过存算分离技术，打造了国内第一款云原生 Serverless 数据库；</li>\n<li>在安全领域，借助云原生技术本身的可观测性手段，创新地与安全结合，打造了更贴合云原生技术的专业安全防护能力等等。</li>\n</ul>\n<p>为此也沉淀了一份 6 万多字的《腾讯大规模云原生技术实践案例集》，包括 10 多个国民级应用的上云实践，可扫描封底二维码下载阅读。</p>\n<p>除了赋能自研业务外，腾讯云还将上述诸多产品或服务以及配套的基础软件、底层技术等开放给百万级的外部客户，全部基于公有云模式开发运营，赋能千行百业，也造就了一大批金融、游戏、企业服务、智能制造、教育等场景下的最佳实践。</p>\n<p>此外，为了解决客户上云、用云的成本之忧，腾讯云基于内外云原生成本管理最佳实践，并结合行业优秀案例，提出了一套体系化的云原生上云成本优化方法论和最佳实践路径，发布了两个业界“标准”：《云原生最佳实践路线图》和《降本之源 · 云原生成本管理白皮书》，旨在帮助企业改善用云成本，充分发挥云原生的效能和价值。</p>\n<p>2022 年，是不平凡的一年，感恩来自行业、伙伴、团队的力量推动着我们勇往直前。在今年，我们参与了 DIVE 2022 北京站、ArchSummit 2022 深圳站、QCon 2022 广州站、ArchSummit 2022 北京站、ArchSummit 2022 杭州站等多场大会，与 1000+ 位技术人邂逅并分享心得。</p>\n<p>此外，这也是腾讯云连续两年推出《腾讯云技术实践精选集》，去年 2021 版精选集共 4 万多字，全网带来 7000 多次下载。<span class=\"orange\"><strong>2022 版的精选集总字数近 10 万，尤其首次收录了“腾讯自研业务大规模云原生实践”系列内容，全面解密腾讯如何锤炼腾讯云。</strong></span></p>\n<p>每一次相遇，都难能可贵，每一场交流，都价值满满，遂整理成文，共享丰沃。</p>\n<p>展望 2023 ，愿与诸君携手同行，共攀技术新峰！</p>\n<h1>目录</h1>\n<h2>第一部分  腾讯自研业务大规模云原生实践</h2>\n<ul>\n<li>如何管理超千万核资源的容器规模</li>\n<li>50W+ 小程序开发者背后的数据库降本增效实践</li>\n<li>拥抱云原生，数十万规模 GPU 卡的利用率极致优化之路</li>\n<li>TDSQL-PG 数据库在微信支付的应用实践</li>\n<li>将云原生进行到底：腾讯百万级别容器云平台实践揭秘</li>\n<li>云原生安全可观测性探索与实践</li>\n<li>大规模代码中引入供应链漏洞的分析技术前瞻</li>\n</ul>\n<h2>第二部分  大数据与云数据库技术探索及实践</h2>\n<ul>\n<li>腾讯云大数据 TBDS 在私有化场景万节点集群的实践</li>\n<li>PB 级数据秒级分析，腾讯云原生湖仓 DLC 架构揭秘</li>\n<li>CDW PG 大规模在线数仓技术构架分享</li>\n<li>云原生数据库管控探索和实践</li>\n<li>腾讯云原生数据库 TDSQL-C 架构探索和实践</li>\n<li>金融级分布式数据库 TDSQL 升级版引擎架构和关键技术介绍</li>\n<li>国产金融级分布式数据库在金融核心场景的探索实践</li>\n<li>腾讯云 MongoDB 智能诊断及性能优化实践</li>\n<li>腾讯云数据库云上 SaaS 生态演进</li>\n</ul>\n<h2>第三部分  云成本优化与研发提效</h2>\n<ul>\n<li>企业上云，云上资源整体成本优化管理如何做？</li>\n<li>企业如何利用云厂商能力构建自己的分布式云？</li>\n<li>从混部到 Serverless 化，腾讯自研业务的稳定性及云原生成本优化实践</li>\n<li>Serverless 时代下，企业微服务的降本思考与实践</li>\n<li>腾讯课堂面向协作的 DevOps 流程设计与实践</li>\n</ul>\n<h2>第四部分  中间件与基础设施</h2>\n<ul>\n<li>Kafka Stream - 的进化探索：流式 Serverless 计算</li>\n<li>JVMTI Agent在中间件领域的应用</li>\n<li>区块链如何支撑 Web 3.0</li>\n<li>腾讯操作系统的创新之路</li>\n<li>腾讯明眸媒体处理实践</li>\n</ul>",
    "publish_time": "2022-12-01 01:55:37",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "如何用Go语言构建、测试和部署可扩展的REST API",
    "url": "https://www.infoq.cn/article/LdimuNAoab0ZHpmVDKOf",
    "summary": "<p></p><h2>引言</h2><p></p><p>在本文中，我们将了解如何使用<a href=\"https://gin-gonic.com/\">gin</a>\"框架创建一个简单的Golang应用程序。我们还将学习如何使用持续部署工具<a href=\"https://circleci.com/\">CircleCI</a>\"实现自动化测试和部署。</p><p>&nbsp;</p><p>Go是一种静态类型的开源编程语言，由谷歌工程师创建，其唯一的目的是简化复杂的软件开发过程和架构。它的主要特性包括：高性能网络、并发性和易用性。Go中广泛使用了Goroutine。Goroutine是一个在程序中与其他Goroutine并行运行的函数。当需要同时做几件事时，Goroutine会很有用。举例来说，谷歌、Cloudflare、MongoDB、Netflix和Uber几家公司都使用了Go。</p><p>&nbsp;</p><p><a href=\"https://gin-gonic.com/\">Gin</a>\"是一个基于Go的高性能HTTP Web框架，可以用来构建微服务和Web应用程序。Gin的主要优势在于，它使得开发人员可以创建高效、可扩展的应用程序，而且不必编写大量的样板代码。它生成的代码简洁、易于阅读。它还内置了路由、用于处理功能的中间件、日志记录器和Web服务器。</p><p></p><h2>构建一个简单的CRUD API</h2><p></p><p>我们将为学院俱乐部的学生管理工具创建一个简单的API。完成后，俱乐部主席将能够新增学生及检索所有学生。如果想完全按照本教程来操作，则需要做好以下准备：</p><p>安装Go，了解该语言的基本知识；了解测试，知道如何编写测试；一个GitHub账号；一个CircleCI账号；一个Heroku账号。</p><p>&nbsp;</p><p>请注意，如果你想使用Heroku的免费帐户进行试验，那么Heroku很快就会将其停用。不过，这里描述的过程可以很容易地应用于其他大多数云托管平台。</p><p></p><h3>构建一个CRUD应用程序</h3><p></p><p>这个简单的学院俱乐部API只有两个功能：将学生添加为会员和查看所有会员；没有什么复杂的东西！我们将用到POST和GET请求。我们不会连接任何数据库，如MongoDB或MySQL。但是，我们将使用本地存储并默认在数据库中创建一个学生。每当服务器重启时，就会自动添加这个学生。</p><p>&nbsp;</p><p>让我们开始吧。首先，我们将创建一个项目文件夹，并命名为stup -api。在这个文件夹中，我们将初始化Golang程序并安装所需的所有依赖。</p><p><code lang=\"go\">mkdir stud-api\ncd stud-api</code></p><p>接下来，我们将初始化go.mod文件，并安装所需的所有依赖：</p><p><code lang=\"go\">go mod init stud-api\ncd stud-api\ngo get -u github.com/gin-gonic/gin github.com/rs/xid github.com/stretchr/testify </code></p><p><a href=\"http://github.com/rs/xid\">Github.com/rs/xid</a>\"是一个用于创建惟一标识的库。在这个项目中，我们将用它自动为每个新学生生成一个ID。我们将用<a href=\"http://github.com/stretchr/testify\">github.com/stretchr/testify</a>\"包测试各个端点。</p><p>&nbsp;</p><p>下面开始讨论API。简单起见，我们只创建一个名为main.go的文件。这个文件将包含struct 、API控制器、服务和路由。我们将创建三个端点：</p><p>一个发送欢迎消息的欢迎函数；一个将学生添加到数据库的CreateStudent()&nbsp;函数；一个返回数据库中所有已注册学生的GetStudents()函数。</p><p>&nbsp;</p><p>下面在新创建的main.go文件中导入三个包：HTTP包、xID包和gin包。接下来，编写一个main()函数，其中将包含所有的API路由。然后，另外创建一个函数WelcomeMessage()，在调用相关的路由时，它会打印一条简单的消息。</p><p><code lang=\"go\">package main\nimport (\n\"net/http\"\n\"github.com/gin-gonic/gin\"\n\"github.com/rs/xid\"\n)\n\n\nfunc main() {\n//设置路由\nrouter := gin.Default()\nrouter.GET(\"/\", WelcomeMessage)\nrouter.Run()\n}\n//欢迎消息\nfunc WelcomeMessage(c *gin.Context) {\nc.JSON(http.StatusOK, gin.H{\"message\": \"Hey boss!\"})\n}</code></p><p>现在，可以使用下面的命令来启动服务器，看看到目前为止我们都做了什么：</p><p><code lang=\"go\">go run main.go</code></p><p>如果运行成功，则CLI将显示“Hey boss!”。这个简单的函数就创建完成了。现在我们将继续讨论数据库和struct 。</p><p>&nbsp;</p><p>我们将构建一个简单的Student struct ，它接受三个参数：学生姓名、学院和年级，并在用户成功添加到数据库时为其生成一个ID。</p><p><code lang=\"go\">//定义学生结构\ntype Student struct {\nID         string `json:\"id\"`\nName       string `json:\"name\"`\nDepartment string `json:\"department\"`\nLevel      string `json:\"level\"`\n}</code></p><p>现在，我们创建下本地数据库，它将存储我们传递给服务器的三个值以及生成的ID。我们将数据库命名为Students，其中会包含一个学生的默认数据，而新创建的任何学生都会添加到这里。</p><p><code lang=\"go\">//学生数据库\nvar students = []Student{\n{\nID:         \"10000xbcd3\",\nName:       \"Alicia Winds\",\nDepartment: \"Political Science\",\nLevel:      \"Year 3\",\n},\n}</code></p><p>好了，数据库设计就完成了，现在我们编写下CreateStudent()函数以及与其交互的路由。</p><p><code lang=\"go\">//新建一个学生账号\nfunc CreateStudent() gin.HandlerFunc {\nreturn func(c *gin.Context) {\nvar newStudent Student\nif err := c.BindJSON(&amp;newStudent); err != nil {\nc.JSON(http.StatusBadRequest, gin.H{\n\"Status\":  http.StatusBadRequest,\n\"Message\": \"error\",\n\"Data\":    map[string]interface{}{\"data\": err.Error()}})\nreturn\n}\n//生成一个学生ID\nnewStudent.ID = xid.New().String()\nstudents = append(students, newStudent)\nc.JSON(http.StatusCreated, newStudent)\n}\n\n\n}</code></p><p>现在将与该函数交互所需的路由添加到main()函数。</p><p><code lang=\"go\">func main() {\n-------------\nrouter.POST(\"/createStudent\", CreateStudent())\n-------------\n}</code></p><p>要测试到目前为止所做的工作，请启动服务器，并在Postman或任何其他环境中测试端点（localhost:8080/createStudent）。在消息体中传递姓名、学院和年级，就会自动生成一个具有惟一ID的新用户。请注意，这是一个非持久化数据库。</p><p>&nbsp;</p><p>现在，让我们创建最后一个函数。我们将使用它来获取俱乐部数据库中的所有学生。这个请求是一个简单的GET函数，它将搜索学生数据库并返回其中的所有内容。</p><p><code lang=\"go\">func GetStudents() gin.HandlerFunc {\nreturn func(c *gin.Context) {\n//获取数据库中的所有学生\nc.JSON(http.StatusOK, students)\n}\n}</code></p><p>最后，我们将创建与新建函数进行交互的路由。我们将把它加入主函数，和其他路由放在一起。</p><p><code lang=\"go\">func main() {\n------------------\nrouter.GET(\"/students\", GetStudents())\nrouter.Run()\n}</code></p><p>也使用Postman测试一下！为此，我们需要启动服务器并访问端点localhost:8080/students。我们所需要做的就是使用HTTP谓词GET，不需要包含任何消息体或查询参数。运行成功后，它将返回数据库中的所有学生。这样，这个简单的CRUD API就完成了！</p><p></p><h2>编写简单的本地测试</h2><p></p><p>在这一节中，我们将对已创建的端点进行单元测试。目标是确保每个函数的行为都符合预期。为了测试这些函数，我们将使用<a href=\"https://github.com/stretchr/testify\">testify</a>\"包。此外，我们必须新建一个文件new_test.go。我们将要编写的各种测试都将放在这个文件中。在主目录的根目录中创建完新文件后，我们需要导入几个包。</p><p><code lang=\"go\">func main() {\n------------------\nrouter.GET(\"/students\", GetStudents())\nrouter.Run()\n}</code></p><p>在testify中，执行简单的断言和模拟都很容易。在Go中，testing.T对象作为assert函数的第一个参数传入。然后，assert函数会返回一个bool值，说明断言是否成功。<a href=\"https://github.com/stretchr/testify\">testify mock</a>\"包提供了一种快速创建模拟对象的方法，在编写测试代码时可以用它代替实际的对象。</p><p>&nbsp;</p><p>现在，我们将设置一个路由，并为欢迎消息编写一个简单的测试。如下所示，在这个测试中，assert函数将使用变量的相等比较来确定测试参数是否与模拟响应相匹配。</p><p><code lang=\"go\">func SetRouter() *gin.Engine {\nrouter := gin.Default()\nreturn router\n}\n\n\nfunc TestWelcomeMessage(t *testing.T) {\nmockResponse := `{\"message\":\"Hey boss!\"}`\nr := SetRouter()\nr.GET(\"/\", WelcomeMessage)\nreq, _ := http.NewRequest(\"GET\", \"/\", nil)\nw := httptest.NewRecorder()\nr.ServeHTTP(w, req)\nresponseData, _ := ioutil.ReadAll(w.Body)\nassert.Equal(t, mockResponse, string(responseData))\nassert.Equal(t, http.StatusOK, w.Code)\n}</code></p><p>接下来，我们将使用模拟数据为createStudent()函数编写一个简单的测试。还是使用xID包来生成Student ID，我们会收到一个说明测试是否成功的bool值。</p><p><code lang=\"go\">func TestCreateStudent(t *testing.T) {\nr := SetRouter()\nr.POST(\"/createStudent\", CreateStudent())\nstudentId := xid.New().String()\nstudent := Student{\nID:         studentId,\nName:       \"Greg Winds\",\nDepartment: \"Political Science\",\nLevel:      \"Year 4\",}\njsonValue, _ := json.Marshal(student)\nreq, _ := http.NewRequest(\"POST\", \"/createStudent\", bytes.NewBuffer(jsonValue))\nw := httptest.NewRecorder()\nr.ServeHTTP(w, req)\nassert.Equal(t, http.StatusCreated, w.Code)}</code></p><p>最后，我们将针对GetStudents()函数编写最后一个测试。</p><p><code lang=\"go\">func TestGetStudents(t *testing.T) {\nr := SetRouter()\nr.GET(\"/students\", GetStudents())\nreq, _ := http.NewRequest(\"GET\", \"/students\", nil)\nw := httptest.NewRecorder()\nr.ServeHTTP(w, req)\nvar students []Student\njson.Unmarshal(w.Body.Bytes(), &amp;students)\nassert.Equal(t, http.StatusOK, w.Code)\nassert.NotEmpty(t, students)\n}</code></p><p>我们已经完成了所有的测试，现在可以在本地运行了。这很简单，只需执行下面这行命令：</p><p><code lang=\"go\">GIN_MODE=release go test -v</code></p><p>下面是最终结果：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c8/c89269c1ab1abe45d5b1c8055955e19b.png\" /></p><p></p><p></p><h2>利用持续开发实现测试自动化</h2><p></p><p><a href=\"https://circleci.com/\">CircleCI</a>\"是一个用于持续集成和交付的平台，可用于DevOps实践。在本文中，我们将使用这个CI/CD工具实现测试自动化并将代码部署到服务器上。我们先从使用CircleCI自动化测试开始说起。</p><p>&nbsp;</p><p>确保你有一个CircleCI帐户（正如准备工作部分所介绍的那样），并且已经成功地将代码推送到GitHub。检查CircleCI仪表板，确保项目存储库是可见的。</p><p>&nbsp;</p><p>现在，在项目目录中，创建文件夹.circleci和配置文件config.yml，该文件将包含自动化测试所需的命令。</p><p></p><h2>配置config.yaml</h2><p></p><p>该文件包含自动化Heroku部署和测试所需的所有配置。我们暂时不关注Heroku部分，因为我们更感兴趣的是帮助实现自动化测试的代码。该文件包含检出并运行测试的Go orb和作业。在将下面的代码添加到配置文件后，我们需要将其重新推送到GitHub。</p><p><code lang=\"go\">workflows:\n  heroku_deploy:\n    jobs:\n      - build\n      - heroku/deploy-via-git:  \n          requires:\n            - build\n          filters:\n            branches:\n              only: main\njobs:\n  build:\n    working_directory: ~/repo\n    docker:\n      - image: cimg/go:1.17.10\n    steps:\n      - checkout\n      - restore_cache:\n          keys:\n            - go-mod-v4-{{ checksum \"go.sum\" }}\n      - run:\n          name: Install Dependencies\n          command: go get ./...\n      - save_cache:\n          key: go-mod-v4-{{ checksum \"go.sum\" }}\n          paths:\n            - \"/go/pkg/mod\"\n      - run:\n          name: Run tests\n          command: go test -v</code></p><p>完成这一步之后，返回CircleCI仪表板并选择我们的项目。然后，单击它旁边的Setup按钮，并选择我们正在使用的分支。当我们点击Setup按钮时，程序将开始运行。构建成功的话应该可以看到如下所示的信息（向下滚动到运行测试的部分）。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/dc/dcd8ecfbdd26422690454f942590e501.png\" /></p><p></p><p>就是这样！我们成功地构建了一个简单的API，创建了本地测试，并实现了测试过程自动化。这个自动化过程意味着，每次向GitHub存储库上的分支推送时，管道都会尝试运行测试。</p><p></p><h2>使用CircleCI自动部署到Heroku</h2><p></p><p>首先是配置Heroku。如果你还没有Heroku帐户，就需要创建一个。为了方便部署和自动化，你还需要将GitHub配置文件连接到Heroku帐户。上述工作完成之后，需要在项目文件夹中创建一个Procfile（是的，没有扩展名），并向其中添加以下内容：</p><p><code lang=\"go\">web: app</code></p><p>之后，推送到GitHub。现在，快速看一下之前创建的config.yaml文件，分析下第一部分。可以看到，我们导入了Heroku orb，其中还有一个工作流，里面是一个在主存储库中构建和部署代码的作业。</p><p>&nbsp;</p><p>回到Heroku仪表板，我们必须首先在Heroku上创建一个项目，并获取API密钥（可以从帐户设置中找）。我们需要把这个密钥添加到我们的CircleCI项目。为此，在CircleCI上导航到现有项目并选择项目设置。然后转到环境变量部分，添加下面这两个东西：</p><p>HEROKU_APP_NAME，值为stud-api&nbsp;（应用程序名称）；HEROKU_API_KEY&nbsp;，值为我们刚刚从Heroku获取的密钥。</p><p>&nbsp;</p><p>我们已经成功地配置了我们的CircleCI项目，可以向Heroku持续部署了。如果没什么问题，在CircleCI仪表板上，我们应该可以看到下面这样一条说明构建已经成功的消息：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/94/94ab3fc91daeedd7c2f24286909ac969.png\" /></p><p></p><p>返回Heroku仪表板并检索项目URL，看看我们都做了什么。这里，URL是：<a href=\"https://stud-app-api.herokuapp.com/\">https://stud-app-api.herokuapp.com/</a>\"。你可以将想要测试的路由附加到URL末尾来测试所有的功能。例如，测试获取所有学生的端点：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4e/4eb298655ea8ae784774f6ec8fd9287a.png\" /></p><p></p><p></p><h2>小结</h2><p></p><p>持续开发使开发人员能够更快地创建更好的产品。持续集成和开发工具通过自动化操作简化了整个过程，减少了所需的时间或专业知识。CI/CD工具通过自动化从测试到应用程序快速部署之间的所有事情，帮助我们逐步提高产品质量。</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/build-deploy-scalable-golang-api/\">https://www.infoq.com/articles/build-deploy-scalable-golang-api/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/jfkZ7LHF1HbONN2sPOyw\">REST 如何站到了自己的对立面？</a>\"</p><p><a href=\"https://xie.infoq.cn/article/abaa53f80114223d2940f439d\">什么是 RESTful，REST api 设计时应该遵守什么样的规则？</a>\"</p>",
    "publish_time": "2022-12-01 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]