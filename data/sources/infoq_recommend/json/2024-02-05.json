[
  {
    "title": "Kotlin 黄金时代结束，将要开始走下坡路了？",
    "url": "https://www.infoq.cn/article/M4j6vDQroutjzvHo4T68",
    "summary": "<p></p><blockquote>导读：在本文中，我们将深入探讨 Infobip 软件工程师在过去十多年中使用 Kotlin 的经验，了解 Kotlin 在 Infobip 的黄金时代，以及未来可能面临的挑战。从维护代码到技术选择的复杂性，从 Groovy 的辉煌到 Kotlin 的崛起，以及对 Kotlin 的优势和劣势的审视，本文将揭示 Infobip 在使用 Kotlin 过程中所取得的经验和教训。最后，我们将探讨 Kotlin 可能在未来的发展趋势，以及 2025 年可能成为关键时刻的原因。让我们一同探索，了解技术选型的深思熟虑和对未来的前瞻性思考。</blockquote><p></p><p></p><p>在我作为 Infobip 软件工程师的十多年里，我大部分时间都花在维护代码上，而且很多时候是其他人的代码。</p><p></p><p>我有幸（或不幸，这取决于你怎么看），见证了许多不同技术在新项目中兴起和崩溃，很多时候这些技术再也不会在新项目中使用。</p><p></p><p>其中一次发生在 2014 年。负责创建和维护 Infobip 某产品的团队解散了，而我的团队被指派接手并维护它。这个产品集成了所有最新的技术——node.js、Cassandra、MongoDB、Redis、MSSQL、Groovy、Grails、ELK，等等。不重要的是谁、怎么样以及为什么选择了所有这些技术。唯一重要的是复杂度预算是疯狂的。</p><p></p><p></p><h2>复杂性毁了这个项目</h2><p></p><p></p><p>原团队花了一个多月的时间，只是为了在本地搭建好一切，以便能够启动项目并尝试各种可能性。很快，我被调到了另一个团队，任务是构建一个概念验证，一个 MVP 产品，它与我们应该维护的那个产品具有相同的功能，但使用的技术更少。</p><p></p><p>我们构建它的方式与我们在 Infobip 构建大多数东西的方式相似。只用了老套但实用的 Java 和 MSSQL，其他的就没了。那是在 2015 年，而这项服务直到 2023 年仍在运行。原始项目的复杂性毁了它。更糟糕的是，它也毁了原本应该维护它的团队。</p><p></p><p>故事的寓意是——你需要对你的复杂性预算特别小心。这不仅涉及你维护的服务或库的数量，还涉及你需要维护的各种技术的数量以及技术的未来前景。</p><p></p><p></p><h2>当 Groovy 还是很炙手可热的时候</h2><p></p><p></p><p>在 2013 年，JVM 上最炙手可热的语言之一不是 Java，而是 Groovy。它拥有 lambda、动态结构、命名参数构造函数，还有一个受欢迎的 Grails 框架等等。但是，就在 2014 年，仿佛没有人能预测到一样，Java 8 发布了一个新的热门功能——lambda。</p><p></p><p>Lambda 消除了当时 Java 一个最显著的负面评价——在代码中传递行为需要使用大量的匿名内部类。或者，俗称为——Java 没有 lambda。不久之后，大约在 2015/2016 年左右，Groovy 经历了显著的衰落。如今，它的使用显著下降，没有人在创建新服务时考虑使用它。</p><p></p><p>但是，JVM 生态系统的创新并没有随着 Groovy 的衰退而减弱，相反地，下一个受瞩目的新东西是 Scala！</p><p></p><h2>有人还记得 Scala 吗？</h2><p></p><p></p><p>我记得！我甚至完成了一门由 Scala 的作者 Martin Odersky 主持的 Coursera 课程，名为“Functional Programming Principles in Scala”。老实说，我对 Scala 的魅力比对 Groovy 的特性更为着迷。在 Java 中，我最缺少的就是模式匹配。通过简单的类似于 lambda 的表达式，而不是滥用访问者模式，来遍历复杂的数据结构。</p><p></p><p>在 Infobip 有一些用 Scala 编写的服务，但它从未起飞。在 2017 年左右，该语言的一个关键维护者离开，开始走下坡路。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/5b/5b1782def584ce5c8095d5eff31eab55.png\" /></p><p></p><p></p><h2>Kotlin 的到来</h2><p></p><p></p><p>下一个可能“淘汰 Java”的竞争者是 Kotlin。它慢慢崭露头角，但对我来说，真正开始起飞是在 2017 年左右，首先是我们的 People 产品创建时——后端是用 Kotlin 编写的，然后是我们的默认 Maven 父项目增加了对 Kotlin 的支持。第一个对我来说很重要，因为它是第一个大规模采用 Kotlin 的 Infobip 部署，而第二个标志着开始大规模采用。</p><p></p><h2>Kotlin 的优势</h2><p></p><p></p><p></p><h3>与 Java 代码的互操作性</h3><p></p><p></p><p>虽然它并非完美，但 Kotlin 在与 Java 代码的互操作性方面比它的前辈表现更好。这很可能是因为它出现在它们之后，能够从 Groovy 和 Scala 等语言的经验和陷阱中吸取教训。</p><p></p><p>它还不需要任何专门的构建工具（比如 Scala 的 sbt），并且具有与 IntelliJ 的插件和集成。它由最流行的 Java IDE 创建者 JetBrains 创造，这是一个很大的优势，但我将在后面的缺点列表中分享一个警告。</p><p></p><p></p><h3>协程</h3><p></p><p></p><p>在 Infobip 软件生态系统中，这实际上是一个重要的功能。它提供了一种在语法上廉价解决异步任务扩展问题的方式，特别是与 RxJava、Reactor、CompletableFutures 等相比。</p><p></p><p>直到 Java 21 发布之前，Java 没有这个功能的竞争对手，但随着 21 和虚拟线程的发布，它现在有了。明年将是决定其竞争力的关键时刻。</p><p></p><p>如果虚拟线程表现良好，减少了切换到 Kotlin 协程的价值，这将标志着 Kotlin 的衰落开始。特别是如果 JetBrains 没有提出一个带来很大价值的新热门功能的话。</p><p></p><p></p><h3>数据结构和模式匹配</h3><p></p><p></p><p>在引入 records（16）和模式匹配（21）之前，Lombok 是 Java 中唯一的替代方案。</p><p></p><p>我对 Lombok 的不喜欢程度超过了普通 Java 开发者，特别是因为它违反了 Java 中注解处理的第一规则——注解处理器不应修改 Java 编译器生成的 .classes 文件。</p><p></p><p>然而，随着 records 的引入，我认为这是一个比 Kotlin 提供的更好、更长远的解决方案——尤其是考虑到在这个 Java 语言更新中部分解释的计划（为了了解完整的背景，建议观看整个视频）。</p><p></p><p>Java 21 的模式匹配具有类型模式和穷尽性，因此这是 Kotlin 目前不再具备的一个优势。</p><p></p><p></p><h3>空值处理</h3><p></p><p></p><p>在 Java 中，空值一直是一个陷阱。使用有争议的 Optional 类型略有改进。这也是为什么我建议每个人都在任何地方都只使用包装类型，而不是基本类型，除非他们能通过 JMH 测试证明基本类型提供了足够的性能优势。</p><p></p><p>Kotlin 有所谓的 Elvis 运算符支持，在现代语言设计中，这是处理空值的一种相当流行的选择。这比没有任何东西要好，但它在与语言类型系统的交互中可能显得相当不符合人体工程学和稀奇古怪。我更喜欢一般的单子方法，其中包括广泛建立的 map 和 flat map 约定，而不是在代码中随处添加 ?s。</p><p></p><p>Java 中 Optional 的最大缺点不是语法的开销，而是围绕它的争议，即是否应该使用它。最初，它几乎专门为 Java 8 Streams 创建，而 JDK 维护人员的“没有人应该使用它”的信条确实是有害的。最近，更多在 Oracle 薪资单上的人已经公开表示，你可以并且应该在任何地方都使用 Optional，而不是冒着 NPE 的风险，主要例子在这里。</p><p></p><p>我的观点是，他们不希望在野外有巨大的采用和实现，这些实现使用 Optional<!--?--> 类型作为三种可能值（null，Optional.of 和 Optional.empty）的存储，以便整个 Valhalla 值对象项目更容易处理将 Optional 作为内联类型而不允许 null（这将打破所有先前使用 Optional 的代码）。这比潜在地打破野外的代码并坚持认为它们没有遵守 Optional 的 Javadoc 更容易。</p><p></p><p></p><h3>其他特性</h3><p></p><p></p><p>Kotlin 中的其他特性，如语言语法和方法扩展，并不值得一提。仅仅为了引入特性而引入特性可能会相当有害。最大的警告例子来自前面提到的另一种语言 Scala，它像 C++ 一样提供了在类型上重载运算符的选项。类似的功能会使代码变得难以维护，因为你不能再安全地假设运算符会执行你期望的操作。</p><p></p><p>最佳的下一个例子是扩展方法。在一个预期每个团队主要由初级、中级，然后是高级成员组成的公司中，这确实很危险。它可能导致大量充满陷阱的糟糕代码，对未经培训的人来说很危险。关于这一点的另一个事项——如果你希望任何人通过入门仪式来维护一段代码——你并不像一位软件工程师。相反——你正在违反软件工程的道德规范！代码必须是可维护的，这是首要指令。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/b6/b61640f069702820c683ee3f20c8135c.png\" /></p><p></p><p></p><h2>Kotlin 的缺点</h2><p></p><p></p><p></p><h3>Java 代码互操作性</h3><p></p><p></p><p>你问第一个优点怎么也能成为缺点？嗯，这里有一篇官方博客文章，清晰地描绘了这个情景。引用一下：</p><p></p><p>下一步很直接：我们期望 Kotlin 推动 IntelliJ IDEA 的销售。现在你可以想象为什么 IntelliJ IDEA 在所有这些年后有将 Java 转换为 Kotlin 的操作，但没有将 Kotlin 转换为 Java 的操作。这是供应商锁定和提取更大利润的常规做法——这在 2023 年再次变得流行。但我岔开了。</p><p></p><p></p><h3>Kotlin 生态系统</h3><p></p><p></p><p>与 Java 相比，Kotlin 生态系统严重不足。FAANG （译注：FAANG 是指美国科技行业五家知名公司的首字母缩写，包括 Facebook、Apple、Amazon、Netflix 和 Google。这个术语通常用来指代这些公司在科技和互联网领域的领先地位。）对 Java 提供了一流的支持和承诺，例如提供 JDK，并且在多年的支持方面表现出色。</p><p></p><p></p><h3>人才队伍</h3><p></p><p></p><p>直到今天，Kotlin 开发人员明显比 Java 开发人员少。这对于使用 Kotlin 的公司来说意味着更昂贵的人才和在项目上找到人才的障碍。他们可以选择等待市场上出现适合的人才，或者开始培训他们的 Java 开发人员使用 Kotlin。这两种选择都需要花费资金。</p><p></p><p></p><h3>进展不足</h3><p></p><p></p><p>与最近的 Java 相比（例如，两年前的 records、模式匹配和今年的 VT 发布），Kotlin 在提供能够为我们（Infobip）带来价值的重要功能方面一直处于停滞状态。对我来说，这是关于 Kotlin 的最大担忧，超过了迄今为止提到的所有其他问题。</p><p></p><p></p><h2>扮演魔鬼的辩护人</h2><p></p><p></p><p>事实仍然是我们需要 Kotlin。为什么？为了帮助我们进行研究、创新和挑战现状。如果 Kotlin 继续停滞不前，没有新的有热门功能的竞争对手出现来提高我们的交付效率，这将是一个问题。对于一家半数以上的基础设施，如果不是更多，是用 Java 编写并且仅在 JVM 中运行的公司来说，转向 Kotlin 等替代方案比转向 Rust 或 Go 要便宜得多。我们需要选择，不应该把所有的鸡蛋放在一个篮子里。</p><p></p><p></p><h2>黯淡的未来</h2><p></p><p></p><p>为了完成本文，这就是标题所指的。在 Infobip，从 2017 年至今一直是 Kotlin 的黄金时代。它是否会继续取决于 JetBrains 及其创新 Kotlin 的能力。关键时刻将是 2025 年。</p><p></p><p>为什么是 2025 年？在那时，我们将看到更多的功能出现在 Java 中（例如，Valhalla 和 Panama 项目），而 Kotlin 没有替代品。如果 Kotlin 到那时没有取得重大突破，它的受欢迎程度将下降并达到一个临界点。你已经可以在 YouTube、Hacker News 或 Reddit 等开发者社区中看到情绪朝着这个方向发展，但目前还不是关键时刻。</p>",
    "publish_time": "2024-02-05 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "争议与热度并存，越来越多开发者正在抛弃他们的旧语言转向 Rust",
    "url": "https://www.infoq.cn/article/8zA6N8o8fTje945FSjJF",
    "summary": "<p></p><p><img src=\"https://static001.geekbang.org/infoq/77/77d262475ed561520ac076d16507423a.jpeg\" /></p><p>采访嘉宾 | 王兴、李原、侯培新</p><p>编辑 | 蔡芳芳</p><p></p><p></p><blockquote>“用 Rust 重写”的表情包广为流传，是 Rust 空前影响力的证明。</blockquote><p></p><p></p><p>如果要选出过去一年开发者群体关注度最高的编程语言，可能非 Rust 莫属。从正式发布 1.0 版本之后的 2016 年至今，Rust 已经连续 8 年在 Stack Overflow 开发者年度调查报告中被评为“最受欢迎”编程语言。也有关注其他编程语言的社区专家向我们反馈，在微信群里经常看到“使用 Rust 重写”的表情包，这也从一个侧面反映了 Rust 的影响力。</p><p></p><p>本次年度技术盘点与展望，InfoQ 邀请了多位在华为从事 Rust 开发工作的技术专家，与我们一同回顾 Rust 编程语言过去一年在功能特性、应用场景、社区生态等方面取得的进展。</p><p></p><h2>争议和冲突不断，不妨碍 Rust 加速“出圈”</h2><p></p><p></p><p>如果要回顾 2023 年 Rust 编程语言的大事件，第一个被提起来的一定是 5 月份 RustConf 2023 Keynote 事件。当时，JeanHeyd Meneide 在网站上发布了一篇文章 《I Am No Longer Speaking at RustConf 2023》 正式拒绝参加 RustConf 2023 并且不再演讲，在社区中激起千层浪花（详见 InfoQ <a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651170943&amp;idx=2&amp;sn=d6b9dd691c6dcfe72012d96b60a9ed4d&amp;chksm=bdb8502c8acfd93af8b00a313fb1fa62d76419b822f21c7c1f9f418ef5acc73263b6fe4c80fb&amp;scene=21#wechat_redirect\">报道</a>\"1）。由于 JeanHeyd 计划演讲的部分内容是得益于 Rust 基金会的赞助，Rust 基金会也第一时间在官方 Blog 上对事件做出了回应，并开始讨论是否未来由 Rust 基金会来主办 RustConf，以避免这类乱象。6 月份 Rust 社区宣布调整组织架构，成立新的顶级治理机构：领导委员会（Rust Leadership Council）。由 Rust 各团队成员合力创建一份新的、名为 “ Rust 领导理事会” 的 RFC 草案，并确立了以下内容：移除 Rust 核心团队，由各团队出一个代表，成立一个顶级的治理团队“领导委员会”。</p><p></p><p>Rust 领导委员会将从 Top-level 的角度协调整个社区的工作，同时 2023 年由领导委员会选举了 5 名社区专家进入到了 Rust 基金会的董事会、代表社区和董事会一起工作。此外 Rust 基金会引入了新的会员类型 Associate Membership Tier， 非盈利组织、高校和科研机构可以作为成员加入到基金会，进一步提升社区成员的多样性。</p><p></p><p>虽然以上举措旨在解决社区纷争，但纷争并没有就此完全终结（详见 InfoQ <a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651183017&amp;idx=1&amp;sn=094df3b1f9afba5146636fc1f251a1c9&amp;chksm=bdb82ffa8acfa6ecfa9d8d4adb1a8c2968fd16a42a51d3b2053ab35182e4ceb146ca6c03a372&amp;scene=21#wechat_redirect\">报道</a>\"&nbsp;2），不过这并不影响 Rust 社区以惊人的速度发展。</p><p></p><p>据了解，作为 Rust 生态基础工具包的聚集地，Crates.io 网站上 Rust 第三方库在 2023 年突破了 500 亿下载次数。</p><p></p><p>JetBrain 发布的 《2023 开发者生态系统现状》调研报告也证明了 Rust 的持续加速“出圈”：在今年最受欢迎的编程语言中，Rust 创造了新的使用记录，其用户群在过去五年中稳步增长，有望凭借其严格的安全性和内存所有权机制取代 C++；此外，Rust 今年首次取代 Go 成为希望迁移到其他语言的开发者的首选，而 Go 用户也是第一批准备采用 Rust 的人，JetBrains 数据表明，有六分之一的 Go 用户正在考虑采用 Rust。多年来，Rust 一直是最流行的学习语言之一 ，2023 年 Rust 首次占据榜首，即有最多开发者计划未来 12 个月内从原来使用的编程语言迁移到 Rust 编程语言。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/33/332721588956c28b9e58d2973faeafc0.png\" /></p><p></p><p>透过上述纷争我们可以看到当前整个 Rust 生态的现状：Rust 编程语言由社区驱动前行， 虽然有不同意见和争吵，但同时也保持着强大的发展动力和潜力。候培新表示，Rust 基金会会一直与 Rust 社区保持紧密合作，通过各种方式支持推动 Rust 生态继续扩大，被更多的开发者使用。</p><p></p><p>李原表示，在他个人的社区交流开发过程中，没有人对纷争有过多的关注。他认为这和 Rust 社区以技术为根本、项目演进采取由下至上、以技术驱动为主的社区氛围和传统有着重要的关系。当然，社区也采取了动作，比如以各个团队技术代表来重组领导小组，来避免日后再次出现类似的纷争。在王兴看来，每个社区都有适合自己的治理方式，虽然 Rust 社区遇到了一些问题，但只要社区的目标是持续解决开发者的问题，最终开发者还是会支持这门语言的发展。</p><p></p><p>面对冲突不断的 Rust 社区，曾有人向 Rust 的创造者 Graydon Hoare 提出这样一个问题：“你有没有想过在 Rust 项目中 BDFL（终身扮演仁慈的独裁者？）”而如果他真的这样做了，Rust 项目的发展会不会更好？Graydon Hoare 在自己的博客文章和关联的 Reddit 评论区回应了这个问题，他认为如果是由他来治理的话，方向肯定会很不一样，但是 Rust 就不太可能像现在这样“出圈”。同时，尽管如今的 Rust 跟 Graydon Hoare 最初想象中的 Rust 存在巨大差异，但他也对 Rust 语言如今获得的成功抱有巨大的成就感和满足感。</p><p></p><h2>Rust 正在走进越来越多企业和场景</h2><p></p><p></p><p>作为 Rust 基金会创始成员和一以来编程语言潮流的引领者，谷歌和微软在 Rust 的采用上先行一步。</p><p></p><p>在 2022 年 Linus 接受 Rust 作为 Linux Kernel 的第二编程语言时，社区反馈褒贬不一，持各种意见的人都在观望如何把 Rust 编写的内核模块运用到生产上。当 2023 年 12 月谷歌提交 Android Binder 进入内核，越来越多开发者相信 Linus 的决定是正确的。Android 13 新增 Native 代码中 Rust 的比例已经接近 20% ，在 Android 14 中预计接近 25% ，谷歌不仅在 Android 中大量采用内存安全的 Rust 编程语言，也在 Chromium 中引入 Rust ，让浏览器变得更加安全。</p><p></p><p>而微软不仅提供了 windows-rs 帮助开发者使用 Rust 开发 Windows 的程序，更在 Windows 11 Insider Preview Build 25905 版本中发布了用 Rust 编写的 Windows 内核。当然这不是完全替代，而是部分用 Rust 开发，其中包含了一个 GDI 引擎的实现。相信未来微软会越来越多地在 Windows 上使用 Rust ，以打造一个更加安全的操作系统。</p><p></p><p>而在国内，华为内部也有了越来越多使用 Rust 的场景，比如在嵌入式、云服务、中间件等领域都有 Rust 的应用；又如由华为开源并捐赠给开放原子开源基金会的 OpenHarmony 项目实现了与 Rust 互相支持，并基于 Rust 重写了上传下载等模块，性能显著提升。在和国内很多头部互联网公司交流的过程中，王兴也看到大家在积极拥抱 Rust，并且很多公司已经有了不少 Rust 资产。比如 Vivo 就在近期推出了基于 Rust 语言的 BlueOS 操作系统。可以看到，2023 年 Rust 支持的操作系统和体系架构变得更加丰富，在 musl、移动平台等场景的支持上也取得了明显的进步。</p><p></p><p>采用“技术采用生命周期”来评估 Rust 的发展现状，王兴认为 Rust 目前处于早期大众阶段，而李原则略微保守一点，他认为处 Rust 在早期采用到早期大众的过渡阶段。</p><p></p><p>在王兴看来，大多数有一定技术能力的公司已经度过了试水阶段，使用 Rust 作为一门主力开发语言是一件正在发生的事情。国外谷歌、微软等公司在 Rust 发展上的声量显然比国内公司大不少，但国内公司的进展也超出了王兴的想象，他认为或许差距并没有想象中那么大。</p><p></p><p>李原则认为，近年来 Rust 的使用者确实在快速增长，越来越多的公司开始采用 Rust 做开发。然而 Rust 本身还需要更加正规化以支持大规模开发的需求，比如语言需要规范文件，配套工具需要快速及安全的协议，项目构建效率需要提升等等。国内外的差异主要在使用人数和职业开发者数量上，但发展阶段没有明显差距，都处于逐步成熟和扩张的阶段。</p><p></p><p>值得一提的是，2023 年 11 月，对于任何一个编程语言都至关重要的厂商 JetBrains 加入 Rust 基金会成为银牌成员。不仅仅是加入，JetBrains 还带来了为 Rust 编程语言打造的 IDE——Rust Rover，与此同时 JetBrains 的下一代编辑器 Fleet 也是使用 Rust 编程语言开发的。这既是 Rust 生态扩大的一个体现，也预示着未来 Rust 生态和应用场景进一步扩大的可能。</p><p></p><h2>2023 年语言本身值得关注的变化</h2><p></p><p></p><p>从 Rust 编程语言本身的技术特性看，2023 年有几个变化值得关注。</p><p></p><p>第一点是性能提升，除了通过完善编译时常量表达式特性来获得更多运行时性能优化，Rust 在编译性能、三方库获取性能方面也取得了明显进步。尤为重要的一点是，Rust Nightly 版本中引入了并行编译的技术，开始着手解决编译速度的问题。在侯培新看来，这标志着 Rust 编程语言更多进入到生产环境进行大型项目的开发，编译速度已经成为影响开发效率的关键问题。</p><p></p><p>第二点是 Rust 语言规范化。2023 年，Rust 社区 Language Team 下成立了 Specification Team， 由 Mara Bos 和 Felix Klock 任 Team Leader，开始了 Rust 编程语言规范的编写工作。侯培新认为，这是一个标志着 Rust 逐渐成熟的里程碑事件，且不提一个规范对于语言本身的重要性，它对于商业发展也起到了至关重要的作用。2023 年 11 月， 德国公司 Ferrous Systems 宣布使用了 Rust 编译器的一个子集通过了 ISO 26262 和 IEC 61508 的认证，打开了 Rust 编程语言进入汽车和工业自动化领域的大门。可预见 Rust 社区官方的 Specification 将大力推动 Rust 进入更多的商业领域，为 Rust 的大规模应用铺平道路。</p><p></p><p>第三点是安全性补齐短板，Rust 2023 年通过支持更多安全编译场景如异步 trait 方法、优化编译告警如默认关闭 debug 信息等，优化了用户的体验，使用户得以更好地获取 Rust 安全性的优点。</p><p></p><p>上述变化实际上反映出了 Rust 的主要演进方向：首先是降低整体学习曲线，使语言的学习和使用更为简单方便；其次是配套工具更加成熟及正规化。而这两个演进方向背后的根本原因，正是因为 Rust 的主要用户已经从较少数的技术爱好者变成了诸多企业规模开发中的开发者。</p><p></p><p>为了让更多人学习和使用 Rust ，Rust 基金会在 2023 年 11 月启动了 Developer Training 和 Certification Program ，以帮助开发者跨过学习曲线成为合格的 Rust 开发者。</p><p></p><p>李原表示，降低学习曲线、适配更广泛的场景以优化开发者体验仍将是 Rust 社区未来重点投入的方向。2024 年最值得期待或者说最有可能出现重大突破的方向包括：语言规范化 RFC 将会逐步成型；嵌入式场景的支持将会快速成熟；诸多提升构建效率的方法如并行编译前端、默认 LLD 链接器支持等将会取得重大进展，等等。</p><p></p><h2>大模型时代 Rust 的机会</h2><p></p><p></p><p>提及 Rust 在大模型时代的发展趋势，王兴和李原都认为，大模型时代的到来对于 Rust 的推广会起到正向作用。</p><p></p><p>在王兴看来，Rust 在大模型本身的训练和使用中的应用还有待观察，但在大模型时代，学习 Rust 的开发者能够借助大模型更容易地理解 Rust（比如帮你指出为啥编译不过？：）），这对 Rust 来说是一个好消息。同时大模型也有助于熟练的 Rust 开发者提高生产力，王兴进一步解释道：“当前大模型的能力来讲，AI 对高水平编程开发者来讲是更好的武器，他们具备更好的能力从 AI 中得到更好的结果，也具备能力判断结果的正确性。编程的过程可能比以往会更贴进核心的逻辑和抽象，细节和体力活 AI 可能要和语言的语法糖来竞赛来看谁更适合解决。”</p><p></p><p>李原同样认为大模型的出现对于 Rust 的推广来说意义重大，他表示：“初学者可以通过将需求告知大模型、将其他语言交给大模型翻译等途径快速获得较高质量的 Rust 代码，这很大程度上降低了 Rust 的学习曲线。而未来场景化的大模型软件的大量涌现，此时也是使用 Rust 代码替代传统 C/C++ 语言的重要机会。”</p><p></p><p>正如候培新所说，在 2024 年，可以期待 Rust 生态系统会继续蓬勃发展， 随着企业和开源社区对 Rust 的持续兴趣和投资，Rust 应用领域可能会进一步扩大，覆盖更多技术领域，吸引更广泛的开发者群体，期待 Rust 重塑软件生态。</p><p></p><p>采访嘉宾介绍：</p><p></p><p>李原 &nbsp;Rust 编译器 committer王兴 &nbsp;华为 OpenHarmony Rust 技术专家侯培新 &nbsp;Rust 基金会董事</p><p></p><p>如果你觉得本文对你有帮助，或者你对&nbsp;Rust&nbsp;未来发展有自己的思考，欢迎在文末留言告诉我们！</p><p></p><p></p><blockquote>InfoQ&nbsp;2023&nbsp;年度技术盘点与展望专题重磅上线！与&nbsp;50+&nbsp;头部专家深度对话，探明&nbsp;AIGC&nbsp;创新浪潮下，重点领域技术演进脉络和行业落地思路，点击<a href=\"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MjM5MDE0Mjc4MA==&amp;action=getalbum&amp;album_id=2717978015128879106&amp;scene=173&amp;subscene=227&amp;sessionid=1704178990&amp;enterid=1704178995&amp;from_msgid=2651192070&amp;from_itemidx=2&amp;count=3&amp;nolastread=1#wechat_redirect\">订阅</a>\"/<a href=\"https://www.infoq.cn/theme/229\">收藏</a>\"内容专题~</blockquote><p></p>",
    "publish_time": "2024-02-05 09:50:14",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]