[
  {
    "title": "Kotlin 黄金时代结束，将要开始走下坡路了？",
    "url": "https://www.infoq.cn/article/M4j6vDQroutjzvHo4T68",
    "summary": "<p></p><blockquote>导读：在本文中，我们将深入探讨 Infobip 软件工程师在过去十多年中使用 Kotlin 的经验，了解 Kotlin 在 Infobip 的黄金时代，以及未来可能面临的挑战。从维护代码到技术选择的复杂性，从 Groovy 的辉煌到 Kotlin 的崛起，以及对 Kotlin 的优势和劣势的审视，本文将揭示 Infobip 在使用 Kotlin 过程中所取得的经验和教训。最后，我们将探讨 Kotlin 可能在未来的发展趋势，以及 2025 年可能成为关键时刻的原因。让我们一同探索，了解技术选型的深思熟虑和对未来的前瞻性思考。</blockquote><p></p><p></p><p>在我作为 Infobip 软件工程师的十多年里，我大部分时间都花在维护代码上，而且很多时候是其他人的代码。</p><p></p><p>我有幸（或不幸，这取决于你怎么看），见证了许多不同技术在新项目中兴起和崩溃，很多时候这些技术再也不会在新项目中使用。</p><p></p><p>其中一次发生在 2014 年。负责创建和维护 Infobip 某产品的团队解散了，而我的团队被指派接手并维护它。这个产品集成了所有最新的技术——node.js、Cassandra、MongoDB、Redis、MSSQL、Groovy、Grails、ELK，等等。不重要的是谁、怎么样以及为什么选择了所有这些技术。唯一重要的是复杂度预算是疯狂的。</p><p></p><p></p><h2>复杂性毁了这个项目</h2><p></p><p></p><p>原团队花了一个多月的时间，只是为了在本地搭建好一切，以便能够启动项目并尝试各种可能性。很快，我被调到了另一个团队，任务是构建一个概念验证，一个 MVP 产品，它与我们应该维护的那个产品具有相同的功能，但使用的技术更少。</p><p></p><p>我们构建它的方式与我们在 Infobip 构建大多数东西的方式相似。只用了老套但实用的 Java 和 MSSQL，其他的就没了。那是在 2015 年，而这项服务直到 2023 年仍在运行。原始项目的复杂性毁了它。更糟糕的是，它也毁了原本应该维护它的团队。</p><p></p><p>故事的寓意是——你需要对你的复杂性预算特别小心。这不仅涉及你维护的服务或库的数量，还涉及你需要维护的各种技术的数量以及技术的未来前景。</p><p></p><p></p><h2>当 Groovy 还是很炙手可热的时候</h2><p></p><p></p><p>在 2013 年，JVM 上最炙手可热的语言之一不是 Java，而是 Groovy。它拥有 lambda、动态结构、命名参数构造函数，还有一个受欢迎的 Grails 框架等等。但是，就在 2014 年，仿佛没有人能预测到一样，Java 8 发布了一个新的热门功能——lambda。</p><p></p><p>Lambda 消除了当时 Java 一个最显著的负面评价——在代码中传递行为需要使用大量的匿名内部类。或者，俗称为——Java 没有 lambda。不久之后，大约在 2015/2016 年左右，Groovy 经历了显著的衰落。如今，它的使用显著下降，没有人在创建新服务时考虑使用它。</p><p></p><p>但是，JVM 生态系统的创新并没有随着 Groovy 的衰退而减弱，相反地，下一个受瞩目的新东西是 Scala！</p><p></p><h2>有人还记得 Scala 吗？</h2><p></p><p></p><p>我记得！我甚至完成了一门由 Scala 的作者 Martin Odersky 主持的 Coursera 课程，名为“Functional Programming Principles in Scala”。老实说，我对 Scala 的魅力比对 Groovy 的特性更为着迷。在 Java 中，我最缺少的就是模式匹配。通过简单的类似于 lambda 的表达式，而不是滥用访问者模式，来遍历复杂的数据结构。</p><p></p><p>在 Infobip 有一些用 Scala 编写的服务，但它从未起飞。在 2017 年左右，该语言的一个关键维护者离开，开始走下坡路。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/5b/5b1782def584ce5c8095d5eff31eab55.png\" /></p><p></p><p></p><h2>Kotlin 的到来</h2><p></p><p></p><p>下一个可能“淘汰 Java”的竞争者是 Kotlin。它慢慢崭露头角，但对我来说，真正开始起飞是在 2017 年左右，首先是我们的 People 产品创建时——后端是用 Kotlin 编写的，然后是我们的默认 Maven 父项目增加了对 Kotlin 的支持。第一个对我来说很重要，因为它是第一个大规模采用 Kotlin 的 Infobip 部署，而第二个标志着开始大规模采用。</p><p></p><h2>Kotlin 的优势</h2><p></p><p></p><p></p><h3>与 Java 代码的互操作性</h3><p></p><p></p><p>虽然它并非完美，但 Kotlin 在与 Java 代码的互操作性方面比它的前辈表现更好。这很可能是因为它出现在它们之后，能够从 Groovy 和 Scala 等语言的经验和陷阱中吸取教训。</p><p></p><p>它还不需要任何专门的构建工具（比如 Scala 的 sbt），并且具有与 IntelliJ 的插件和集成。它由最流行的 Java IDE 创建者 JetBrains 创造，这是一个很大的优势，但我将在后面的缺点列表中分享一个警告。</p><p></p><p></p><h3>协程</h3><p></p><p></p><p>在 Infobip 软件生态系统中，这实际上是一个重要的功能。它提供了一种在语法上廉价解决异步任务扩展问题的方式，特别是与 RxJava、Reactor、CompletableFutures 等相比。</p><p></p><p>直到 Java 21 发布之前，Java 没有这个功能的竞争对手，但随着 21 和虚拟线程的发布，它现在有了。明年将是决定其竞争力的关键时刻。</p><p></p><p>如果虚拟线程表现良好，减少了切换到 Kotlin 协程的价值，这将标志着 Kotlin 的衰落开始。特别是如果 JetBrains 没有提出一个带来很大价值的新热门功能的话。</p><p></p><p></p><h3>数据结构和模式匹配</h3><p></p><p></p><p>在引入 records（16）和模式匹配（21）之前，Lombok 是 Java 中唯一的替代方案。</p><p></p><p>我对 Lombok 的不喜欢程度超过了普通 Java 开发者，特别是因为它违反了 Java 中注解处理的第一规则——注解处理器不应修改 Java 编译器生成的 .classes 文件。</p><p></p><p>然而，随着 records 的引入，我认为这是一个比 Kotlin 提供的更好、更长远的解决方案——尤其是考虑到在这个 Java 语言更新中部分解释的计划（为了了解完整的背景，建议观看整个视频）。</p><p></p><p>Java 21 的模式匹配具有类型模式和穷尽性，因此这是 Kotlin 目前不再具备的一个优势。</p><p></p><p></p><h3>空值处理</h3><p></p><p></p><p>在 Java 中，空值一直是一个陷阱。使用有争议的 Optional 类型略有改进。这也是为什么我建议每个人都在任何地方都只使用包装类型，而不是基本类型，除非他们能通过 JMH 测试证明基本类型提供了足够的性能优势。</p><p></p><p>Kotlin 有所谓的 Elvis 运算符支持，在现代语言设计中，这是处理空值的一种相当流行的选择。这比没有任何东西要好，但它在与语言类型系统的交互中可能显得相当不符合人体工程学和稀奇古怪。我更喜欢一般的单子方法，其中包括广泛建立的 map 和 flat map 约定，而不是在代码中随处添加 ?s。</p><p></p><p>Java 中 Optional 的最大缺点不是语法的开销，而是围绕它的争议，即是否应该使用它。最初，它几乎专门为 Java 8 Streams 创建，而 JDK 维护人员的“没有人应该使用它”的信条确实是有害的。最近，更多在 Oracle 薪资单上的人已经公开表示，你可以并且应该在任何地方都使用 Optional，而不是冒着 NPE 的风险，主要例子在这里。</p><p></p><p>我的观点是，他们不希望在野外有巨大的采用和实现，这些实现使用 Optional<!--?--> 类型作为三种可能值（null，Optional.of 和 Optional.empty）的存储，以便整个 Valhalla 值对象项目更容易处理将 Optional 作为内联类型而不允许 null（这将打破所有先前使用 Optional 的代码）。这比潜在地打破野外的代码并坚持认为它们没有遵守 Optional 的 Javadoc 更容易。</p><p></p><p></p><h3>其他特性</h3><p></p><p></p><p>Kotlin 中的其他特性，如语言语法和方法扩展，并不值得一提。仅仅为了引入特性而引入特性可能会相当有害。最大的警告例子来自前面提到的另一种语言 Scala，它像 C++ 一样提供了在类型上重载运算符的选项。类似的功能会使代码变得难以维护，因为你不能再安全地假设运算符会执行你期望的操作。</p><p></p><p>最佳的下一个例子是扩展方法。在一个预期每个团队主要由初级、中级，然后是高级成员组成的公司中，这确实很危险。它可能导致大量充满陷阱的糟糕代码，对未经培训的人来说很危险。关于这一点的另一个事项——如果你希望任何人通过入门仪式来维护一段代码——你并不像一位软件工程师。相反——你正在违反软件工程的道德规范！代码必须是可维护的，这是首要指令。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/b6/b61640f069702820c683ee3f20c8135c.png\" /></p><p></p><p></p><h2>Kotlin 的缺点</h2><p></p><p></p><p></p><h3>Java 代码互操作性</h3><p></p><p></p><p>你问第一个优点怎么也能成为缺点？嗯，这里有一篇官方博客文章，清晰地描绘了这个情景。引用一下：</p><p></p><p>下一步很直接：我们期望 Kotlin 推动 IntelliJ IDEA 的销售。现在你可以想象为什么 IntelliJ IDEA 在所有这些年后有将 Java 转换为 Kotlin 的操作，但没有将 Kotlin 转换为 Java 的操作。这是供应商锁定和提取更大利润的常规做法——这在 2023 年再次变得流行。但我岔开了。</p><p></p><p></p><h3>Kotlin 生态系统</h3><p></p><p></p><p>与 Java 相比，Kotlin 生态系统严重不足。FAANG （译注：FAANG 是指美国科技行业五家知名公司的首字母缩写，包括 Facebook、Apple、Amazon、Netflix 和 Google。这个术语通常用来指代这些公司在科技和互联网领域的领先地位。）对 Java 提供了一流的支持和承诺，例如提供 JDK，并且在多年的支持方面表现出色。</p><p></p><p></p><h3>人才队伍</h3><p></p><p></p><p>直到今天，Kotlin 开发人员明显比 Java 开发人员少。这对于使用 Kotlin 的公司来说意味着更昂贵的人才和在项目上找到人才的障碍。他们可以选择等待市场上出现适合的人才，或者开始培训他们的 Java 开发人员使用 Kotlin。这两种选择都需要花费资金。</p><p></p><p></p><h3>进展不足</h3><p></p><p></p><p>与最近的 Java 相比（例如，两年前的 records、模式匹配和今年的 VT 发布），Kotlin 在提供能够为我们（Infobip）带来价值的重要功能方面一直处于停滞状态。对我来说，这是关于 Kotlin 的最大担忧，超过了迄今为止提到的所有其他问题。</p><p></p><p></p><h2>扮演魔鬼的辩护人</h2><p></p><p></p><p>事实仍然是我们需要 Kotlin。为什么？为了帮助我们进行研究、创新和挑战现状。如果 Kotlin 继续停滞不前，没有新的有热门功能的竞争对手出现来提高我们的交付效率，这将是一个问题。对于一家半数以上的基础设施，如果不是更多，是用 Java 编写并且仅在 JVM 中运行的公司来说，转向 Kotlin 等替代方案比转向 Rust 或 Go 要便宜得多。我们需要选择，不应该把所有的鸡蛋放在一个篮子里。</p><p></p><p></p><h2>黯淡的未来</h2><p></p><p></p><p>为了完成本文，这就是标题所指的。在 Infobip，从 2017 年至今一直是 Kotlin 的黄金时代。它是否会继续取决于 JetBrains 及其创新 Kotlin 的能力。关键时刻将是 2025 年。</p><p></p><p>为什么是 2025 年？在那时，我们将看到更多的功能出现在 Java 中（例如，Valhalla 和 Panama 项目），而 Kotlin 没有替代品。如果 Kotlin 到那时没有取得重大突破，它的受欢迎程度将下降并达到一个临界点。你已经可以在 YouTube、Hacker News 或 Reddit 等开发者社区中看到情绪朝着这个方向发展，但目前还不是关键时刻。</p>",
    "publish_time": "2024-02-05 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "争议与热度并存，越来越多开发者正在抛弃他们的旧语言转向 Rust",
    "url": "https://www.infoq.cn/article/8zA6N8o8fTje945FSjJF",
    "summary": "<p></p><p><img src=\"https://static001.geekbang.org/infoq/77/77d262475ed561520ac076d16507423a.jpeg\" /></p><p>采访嘉宾 | 王兴、李原、侯培新</p><p>编辑 | 蔡芳芳</p><p></p><p></p><blockquote>“用 Rust 重写”的表情包广为流传，是 Rust 空前影响力的证明。</blockquote><p></p><p></p><p>如果要选出过去一年开发者群体关注度最高的编程语言，可能非 Rust 莫属。从正式发布 1.0 版本之后的 2016 年至今，Rust 已经连续 8 年在 Stack Overflow 开发者年度调查报告中被评为“最受欢迎”编程语言。也有关注其他编程语言的社区专家向我们反馈，在微信群里经常看到“使用 Rust 重写”的表情包，这也从一个侧面反映了 Rust 的影响力。</p><p></p><p>本次年度技术盘点与展望，InfoQ 邀请了多位在华为从事 Rust 开发工作的技术专家，与我们一同回顾 Rust 编程语言过去一年在功能特性、应用场景、社区生态等方面取得的进展。</p><p></p><h2>争议和冲突不断，不妨碍 Rust 加速“出圈”</h2><p></p><p></p><p>如果要回顾 2023 年 Rust 编程语言的大事件，第一个被提起来的一定是 5 月份 RustConf 2023 Keynote 事件。当时，JeanHeyd Meneide 在网站上发布了一篇文章 《I Am No Longer Speaking at RustConf 2023》 正式拒绝参加 RustConf 2023 并且不再演讲，在社区中激起千层浪花（详见 InfoQ <a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651170943&amp;idx=2&amp;sn=d6b9dd691c6dcfe72012d96b60a9ed4d&amp;chksm=bdb8502c8acfd93af8b00a313fb1fa62d76419b822f21c7c1f9f418ef5acc73263b6fe4c80fb&amp;scene=21#wechat_redirect\">报道</a>\"1）。由于 JeanHeyd 计划演讲的部分内容是得益于 Rust 基金会的赞助，Rust 基金会也第一时间在官方 Blog 上对事件做出了回应，并开始讨论是否未来由 Rust 基金会来主办 RustConf，以避免这类乱象。6 月份 Rust 社区宣布调整组织架构，成立新的顶级治理机构：领导委员会（Rust Leadership Council）。由 Rust 各团队成员合力创建一份新的、名为 “ Rust 领导理事会” 的 RFC 草案，并确立了以下内容：移除 Rust 核心团队，由各团队出一个代表，成立一个顶级的治理团队“领导委员会”。</p><p></p><p>Rust 领导委员会将从 Top-level 的角度协调整个社区的工作，同时 2023 年由领导委员会选举了 5 名社区专家进入到了 Rust 基金会的董事会、代表社区和董事会一起工作。此外 Rust 基金会引入了新的会员类型 Associate Membership Tier， 非盈利组织、高校和科研机构可以作为成员加入到基金会，进一步提升社区成员的多样性。</p><p></p><p>虽然以上举措旨在解决社区纷争，但纷争并没有就此完全终结（详见 InfoQ <a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651183017&amp;idx=1&amp;sn=094df3b1f9afba5146636fc1f251a1c9&amp;chksm=bdb82ffa8acfa6ecfa9d8d4adb1a8c2968fd16a42a51d3b2053ab35182e4ceb146ca6c03a372&amp;scene=21#wechat_redirect\">报道</a>\"&nbsp;2），不过这并不影响 Rust 社区以惊人的速度发展。</p><p></p><p>据了解，作为 Rust 生态基础工具包的聚集地，Crates.io 网站上 Rust 第三方库在 2023 年突破了 500 亿下载次数。</p><p></p><p>JetBrain 发布的 《2023 开发者生态系统现状》调研报告也证明了 Rust 的持续加速“出圈”：在今年最受欢迎的编程语言中，Rust 创造了新的使用记录，其用户群在过去五年中稳步增长，有望凭借其严格的安全性和内存所有权机制取代 C++；此外，Rust 今年首次取代 Go 成为希望迁移到其他语言的开发者的首选，而 Go 用户也是第一批准备采用 Rust 的人，JetBrains 数据表明，有六分之一的 Go 用户正在考虑采用 Rust。多年来，Rust 一直是最流行的学习语言之一 ，2023 年 Rust 首次占据榜首，即有最多开发者计划未来 12 个月内从原来使用的编程语言迁移到 Rust 编程语言。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/33/332721588956c28b9e58d2973faeafc0.png\" /></p><p></p><p>透过上述纷争我们可以看到当前整个 Rust 生态的现状：Rust 编程语言由社区驱动前行， 虽然有不同意见和争吵，但同时也保持着强大的发展动力和潜力。候培新表示，Rust 基金会会一直与 Rust 社区保持紧密合作，通过各种方式支持推动 Rust 生态继续扩大，被更多的开发者使用。</p><p></p><p>李原表示，在他个人的社区交流开发过程中，没有人对纷争有过多的关注。他认为这和 Rust 社区以技术为根本、项目演进采取由下至上、以技术驱动为主的社区氛围和传统有着重要的关系。当然，社区也采取了动作，比如以各个团队技术代表来重组领导小组，来避免日后再次出现类似的纷争。在王兴看来，每个社区都有适合自己的治理方式，虽然 Rust 社区遇到了一些问题，但只要社区的目标是持续解决开发者的问题，最终开发者还是会支持这门语言的发展。</p><p></p><p>面对冲突不断的 Rust 社区，曾有人向 Rust 的创造者 Graydon Hoare 提出这样一个问题：“你有没有想过在 Rust 项目中 BDFL（终身扮演仁慈的独裁者？）”而如果他真的这样做了，Rust 项目的发展会不会更好？Graydon Hoare 在自己的博客文章和关联的 Reddit 评论区回应了这个问题，他认为如果是由他来治理的话，方向肯定会很不一样，但是 Rust 就不太可能像现在这样“出圈”。同时，尽管如今的 Rust 跟 Graydon Hoare 最初想象中的 Rust 存在巨大差异，但他也对 Rust 语言如今获得的成功抱有巨大的成就感和满足感。</p><p></p><h2>Rust 正在走进越来越多企业和场景</h2><p></p><p></p><p>作为 Rust 基金会创始成员和一以来编程语言潮流的引领者，谷歌和微软在 Rust 的采用上先行一步。</p><p></p><p>在 2022 年 Linus 接受 Rust 作为 Linux Kernel 的第二编程语言时，社区反馈褒贬不一，持各种意见的人都在观望如何把 Rust 编写的内核模块运用到生产上。当 2023 年 12 月谷歌提交 Android Binder 进入内核，越来越多开发者相信 Linus 的决定是正确的。Android 13 新增 Native 代码中 Rust 的比例已经接近 20% ，在 Android 14 中预计接近 25% ，谷歌不仅在 Android 中大量采用内存安全的 Rust 编程语言，也在 Chromium 中引入 Rust ，让浏览器变得更加安全。</p><p></p><p>而微软不仅提供了 windows-rs 帮助开发者使用 Rust 开发 Windows 的程序，更在 Windows 11 Insider Preview Build 25905 版本中发布了用 Rust 编写的 Windows 内核。当然这不是完全替代，而是部分用 Rust 开发，其中包含了一个 GDI 引擎的实现。相信未来微软会越来越多地在 Windows 上使用 Rust ，以打造一个更加安全的操作系统。</p><p></p><p>而在国内，华为内部也有了越来越多使用 Rust 的场景，比如在嵌入式、云服务、中间件等领域都有 Rust 的应用；又如由华为开源并捐赠给开放原子开源基金会的 OpenHarmony 项目实现了与 Rust 互相支持，并基于 Rust 重写了上传下载等模块，性能显著提升。在和国内很多头部互联网公司交流的过程中，王兴也看到大家在积极拥抱 Rust，并且很多公司已经有了不少 Rust 资产。比如 Vivo 就在近期推出了基于 Rust 语言的 BlueOS 操作系统。可以看到，2023 年 Rust 支持的操作系统和体系架构变得更加丰富，在 musl、移动平台等场景的支持上也取得了明显的进步。</p><p></p><p>采用“技术采用生命周期”来评估 Rust 的发展现状，王兴认为 Rust 目前处于早期大众阶段，而李原则略微保守一点，他认为处 Rust 在早期采用到早期大众的过渡阶段。</p><p></p><p>在王兴看来，大多数有一定技术能力的公司已经度过了试水阶段，使用 Rust 作为一门主力开发语言是一件正在发生的事情。国外谷歌、微软等公司在 Rust 发展上的声量显然比国内公司大不少，但国内公司的进展也超出了王兴的想象，他认为或许差距并没有想象中那么大。</p><p></p><p>李原则认为，近年来 Rust 的使用者确实在快速增长，越来越多的公司开始采用 Rust 做开发。然而 Rust 本身还需要更加正规化以支持大规模开发的需求，比如语言需要规范文件，配套工具需要快速及安全的协议，项目构建效率需要提升等等。国内外的差异主要在使用人数和职业开发者数量上，但发展阶段没有明显差距，都处于逐步成熟和扩张的阶段。</p><p></p><p>值得一提的是，2023 年 11 月，对于任何一个编程语言都至关重要的厂商 JetBrains 加入 Rust 基金会成为银牌成员。不仅仅是加入，JetBrains 还带来了为 Rust 编程语言打造的 IDE——Rust Rover，与此同时 JetBrains 的下一代编辑器 Fleet 也是使用 Rust 编程语言开发的。这既是 Rust 生态扩大的一个体现，也预示着未来 Rust 生态和应用场景进一步扩大的可能。</p><p></p><h2>2023 年语言本身值得关注的变化</h2><p></p><p></p><p>从 Rust 编程语言本身的技术特性看，2023 年有几个变化值得关注。</p><p></p><p>第一点是性能提升，除了通过完善编译时常量表达式特性来获得更多运行时性能优化，Rust 在编译性能、三方库获取性能方面也取得了明显进步。尤为重要的一点是，Rust Nightly 版本中引入了并行编译的技术，开始着手解决编译速度的问题。在侯培新看来，这标志着 Rust 编程语言更多进入到生产环境进行大型项目的开发，编译速度已经成为影响开发效率的关键问题。</p><p></p><p>第二点是 Rust 语言规范化。2023 年，Rust 社区 Language Team 下成立了 Specification Team， 由 Mara Bos 和 Felix Klock 任 Team Leader，开始了 Rust 编程语言规范的编写工作。侯培新认为，这是一个标志着 Rust 逐渐成熟的里程碑事件，且不提一个规范对于语言本身的重要性，它对于商业发展也起到了至关重要的作用。2023 年 11 月， 德国公司 Ferrous Systems 宣布使用了 Rust 编译器的一个子集通过了 ISO 26262 和 IEC 61508 的认证，打开了 Rust 编程语言进入汽车和工业自动化领域的大门。可预见 Rust 社区官方的 Specification 将大力推动 Rust 进入更多的商业领域，为 Rust 的大规模应用铺平道路。</p><p></p><p>第三点是安全性补齐短板，Rust 2023 年通过支持更多安全编译场景如异步 trait 方法、优化编译告警如默认关闭 debug 信息等，优化了用户的体验，使用户得以更好地获取 Rust 安全性的优点。</p><p></p><p>上述变化实际上反映出了 Rust 的主要演进方向：首先是降低整体学习曲线，使语言的学习和使用更为简单方便；其次是配套工具更加成熟及正规化。而这两个演进方向背后的根本原因，正是因为 Rust 的主要用户已经从较少数的技术爱好者变成了诸多企业规模开发中的开发者。</p><p></p><p>为了让更多人学习和使用 Rust ，Rust 基金会在 2023 年 11 月启动了 Developer Training 和 Certification Program ，以帮助开发者跨过学习曲线成为合格的 Rust 开发者。</p><p></p><p>李原表示，降低学习曲线、适配更广泛的场景以优化开发者体验仍将是 Rust 社区未来重点投入的方向。2024 年最值得期待或者说最有可能出现重大突破的方向包括：语言规范化 RFC 将会逐步成型；嵌入式场景的支持将会快速成熟；诸多提升构建效率的方法如并行编译前端、默认 LLD 链接器支持等将会取得重大进展，等等。</p><p></p><h2>大模型时代 Rust 的机会</h2><p></p><p></p><p>提及 Rust 在大模型时代的发展趋势，王兴和李原都认为，大模型时代的到来对于 Rust 的推广会起到正向作用。</p><p></p><p>在王兴看来，Rust 在大模型本身的训练和使用中的应用还有待观察，但在大模型时代，学习 Rust 的开发者能够借助大模型更容易地理解 Rust（比如帮你指出为啥编译不过？：）），这对 Rust 来说是一个好消息。同时大模型也有助于熟练的 Rust 开发者提高生产力，王兴进一步解释道：“当前大模型的能力来讲，AI 对高水平编程开发者来讲是更好的武器，他们具备更好的能力从 AI 中得到更好的结果，也具备能力判断结果的正确性。编程的过程可能比以往会更贴进核心的逻辑和抽象，细节和体力活 AI 可能要和语言的语法糖来竞赛来看谁更适合解决。”</p><p></p><p>李原同样认为大模型的出现对于 Rust 的推广来说意义重大，他表示：“初学者可以通过将需求告知大模型、将其他语言交给大模型翻译等途径快速获得较高质量的 Rust 代码，这很大程度上降低了 Rust 的学习曲线。而未来场景化的大模型软件的大量涌现，此时也是使用 Rust 代码替代传统 C/C++ 语言的重要机会。”</p><p></p><p>正如候培新所说，在 2024 年，可以期待 Rust 生态系统会继续蓬勃发展， 随着企业和开源社区对 Rust 的持续兴趣和投资，Rust 应用领域可能会进一步扩大，覆盖更多技术领域，吸引更广泛的开发者群体，期待 Rust 重塑软件生态。</p><p></p><p>采访嘉宾介绍：</p><p></p><p>李原 &nbsp;Rust 编译器 committer王兴 &nbsp;华为 OpenHarmony Rust 技术专家侯培新 &nbsp;Rust 基金会董事</p><p></p><p>如果你觉得本文对你有帮助，或者你对&nbsp;Rust&nbsp;未来发展有自己的思考，欢迎在文末留言告诉我们！</p><p></p><p></p><blockquote>InfoQ&nbsp;2023&nbsp;年度技术盘点与展望专题重磅上线！与&nbsp;50+&nbsp;头部专家深度对话，探明&nbsp;AIGC&nbsp;创新浪潮下，重点领域技术演进脉络和行业落地思路，点击<a href=\"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MjM5MDE0Mjc4MA==&amp;action=getalbum&amp;album_id=2717978015128879106&amp;scene=173&amp;subscene=227&amp;sessionid=1704178990&amp;enterid=1704178995&amp;from_msgid=2651192070&amp;from_itemidx=2&amp;count=3&amp;nolastread=1#wechat_redirect\">订阅</a>\"/<a href=\"https://www.infoq.cn/theme/229\">收藏</a>\"内容专题~</blockquote><p></p>",
    "publish_time": "2024-02-05 09:50:14",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "库克吹捧的Vision Pro，杀手级应用就这？开发者：我希望它一败涂地",
    "url": "https://www.infoq.cn/article/ArAHV0fcJXx4ULSAt1gk",
    "summary": "<p>上周，苹果终于向少数用户开放了该公司自2007年iPhone发布以来，最大胆也最具前瞻性的产品——Vision Pro。3499美元的价格确实夸张，但预订单几分钟内即被买空。据估计，在纯路人好奇查询之前，已经有20万铁粉蹲守下单。除了苹果，我们很难想象还有哪家公司能在已经让人有点审美疲劳的虚拟现实领域掀起这样的热潮。</p><p>&nbsp;</p><p>苹果强调Vision Pro并非VR头显，而是一款空间计算设备，并将其描述为开创工作新形态的基础。具体而言就是通过注视某物并同时敲击拇指和食指，来执行操作。在演示中，整个过程确实简洁优雅，但实际效果如何仍然有待验证。</p><p>&nbsp;</p><p>YouTube上一段精彩的Vision Pro评测视频提到，“最大的进步，也就是能精准控制用户看到的内容。但这种直接查看、精准操作的功能在其他计算设备和用户界面上早就实现了，而且体验还更好。”也就是说，最前沿的设备反而带来了体验上的倒退——已经为人们所熟知的多任务操作，在Vision Pro上重新沦为单任务操作。</p><p>&nbsp;</p><p>打字也只能通过双手食指实现，这种感觉类似于重新回到刚接触电脑时的“一指禅”状态。别说对着空气打字，就算当初能借助桌面的激光键盘，也因为缺少敲击反馈而被时代所抛弃。所以从实际应用来看，靠手势或者语音操控Vision Pro仍然既低效又尴尬。</p><p>&nbsp;</p><p>那么，如果苹果Vision Pro头显有杀手级应用，可能会是什么？</p><p></p><h2>Vision Pro的杀手级应用是什么？</h2><p></p><p>&nbsp;</p><p>The Verge认为，苹果Vision Pro的首个杀手级应用是Web浏览器——Safari。对于Vision Pro而言，浏览器的重要性不言而喻，一个强大且深度集成的桌面级浏览器将使Vision Pro从一开始就具备实用性和强大功能。</p><p>&nbsp;</p><p>Wired则认为，苹果Vision Pro的杀手级应用可能是烹饪软件。</p><p>&nbsp;</p><p>设想一下，用Vision Pro管理厨房，就像在锅碗瓢盆上方都添加了智能便利贴，并且这些便利贴并不会掉进锅里或者引起火灾，而是始终稳定悬停在灶台附近。此外，Vision Pro还可以创建虚拟悬停计时器，凭借空间跟踪技术让一个个小界面稳定保持在原位。从这方面体验来讲，3500美元花得倒也不冤。根据《华尔街日报》的专栏报道，“我用它做的最酷的事情，就是引导烹饪。我可以在厨房里设置计时器，就悬停在锅具上方。这也是真正能彰显未来生活的精彩用例。”</p><p>&nbsp;</p><p>但除此之外，Vision Pro的其他用例只能说乏善可陈。更悲哀的是，包括Vision Pro在内，近年来的几乎所有新型硬件都以烹饪工具为归宿，比如智能手表就是个例子。</p><p>&nbsp;</p><p>根据2023年的一项调查，计时器成了Apple Watch最常见的用途。斯德哥尔摩大学2016年进行的Smartwatch in Vivo报告也显示，厨房计时成为智能手表融入日常生活的核心方式之一。研究解释称，“以一对夫妇的烹饪体验为例，其中一人去磨奶酪时，手表开始为意面煮锅计时。时间一到手表立即响起，提醒用户把面锅从火上移开。手表优雅地融入烹饪过程，几乎不造成任何干扰。”</p><p>&nbsp;</p><p>智能音箱也是如此。以Amazon Echos为例，根据Experian 2016年的一项研究，用户使用最多的功能是Amazon Echos的计时器功能（占比84.9%），甚至高于播放歌曲（占比82.4%）。</p><p>&nbsp;</p><p>这些例子也从侧面反映出，如今，包括Vision Pro在内的新型硬件还缺乏特别亮眼的应用。如果像苹果这样的业界巨头在消费级领域还是找不到太好的应用方向，那Vision Pro的前途着实堪忧。</p><p></p><h2>Vision Pro还缺乏特别亮眼的应用</h2><p></p><p>&nbsp;</p><p>与各类新兴技术平台一样，苹果Vision Pro能否成功在很大程度上取决于第三方应用和服务的支持力度。从这一角度来看，Vision Pro仍面临着诸多难题。</p><p>&nbsp;</p><p>根据市场情报公司Appfigures的数据，截至上周末，AR/VR 设备的 App Store 中只有 150 多个专门针对 Vision Pro 进行更新的应用程序——仅占App Store 180 万个应用程序的一小部分。</p><p>&nbsp;</p><p>需要明确的是，这并不是可用应用程序的数量。理论上，Vision Pro与iOS和iPad应用程序兼容，除非开发者选择不兼容。但这表明，有多少公司急于为这个新平台构建产品，特别是考虑到苹果更广泛的开发人员基础的规模，这个数字显得更小了。</p><p>&nbsp;</p><p>截至目前，不少知名开发商还没有为Vision Pro提供原生软件。全球最受欢迎的三大流媒体服务商Netflix、YouTube和Spotify均明确表示不会推出VisionOS版软件，也不会将自家iPad版应用移植到Vision Pro之上。Netflix公司联合CEO Greg Peters甚至在播客中明确质疑，Vision Pro“跟我们的主要客群有交集吗？”而包括谷歌和Meta等iOS和iPadOS端的重量级软件厂商，似乎也从一开始就打算避开这套新平台，借机摆脱苹果生态。</p><p>&nbsp;</p><p>Netflix和YouTube不愿全力支持Vision Pro，实际上凸显出的是个长期以来困扰着虚拟现实与混合现实（特别是前者）的老问题：用头显长时间观看视频内容的体验太差。哪怕是像詹姆斯·卡梅隆这样痴迷于前沿技术的大导热情推荐，也不得不承认想靠头显看完一整部《阿凡达》实在难受。</p><p>&nbsp;</p><p>混合现实“不应一次性使用几个小时。它的最大优势仍然是为用户提供特殊的体验，而非无休止沉浸其中。”斯坦福大学虚拟人类交互实验室创始主任Jeremy Bailenson给出了中肯的评价。该实验室刚刚发表一篇关于混合现实技术所造成心理影响的论文，其中就专门提到了具备透传视频技术的设备，比如说Vision Pro。具体来讲，“混合现实是一种特殊且刺激的信息介质。”</p><p>&nbsp;</p><p>Omdia公司首席分析师David Tett表示，由于此前大部分混合现实体验大部分都集中在游戏之上，因此苹果希望能将Vision Pro打造成更具广泛吸引力的媒体设备。但他也补充道，Vision Pro的使用感受仍然笨重且不够舒适。头显的电池续航限制也让长时间观看难以实现。Tett坦言，“至于跟亲朋好友一起观看视频的乐趣，在Vision Pro上天然无法实现。”</p><p>&nbsp;</p><p>但Tett并不悲观，他表示虽然Vision Pro目前存在种种局限，但“第一代设备大多不够完美。”曾经用iPod引领过时代的苹果，也是最有可能改变用户媒体消费习惯的厂商了。也许未来，我们真能适应在头显中一口气看完一部时长3小时的影片。</p><p>&nbsp;</p><p>而曾经在迪士尼、20世纪福克斯和HBO等影厂拥有丰富工作经验的南加州大学创意技术研究所混合现实研究主任David Nelson认为，Vision Pro确实拥有一定设计优势。“织物绑带和流线型的设计都是不错的起点。接下来最大的难题，就是怎样引导人们适应戴着头显看完一部电影。”</p><p>&nbsp;</p><p>值得注意的是，苹果公司宣称，Vison Pro将开箱即用支持超100万种应用，包括来自迪士尼、TikTok、亚马逊、派拉蒙等的软件。但这里不妨大胆猜测，其中99%恐怕都是iPad版本，而非为头显系统VisionOS重新设计的专用软件。</p><p>&nbsp;</p><p>也就是说，除非像Netflix、Spotify和YouTube那样明确表示拒绝，否则原iPad版本的软件会在Vision Pro中直接上架。苹果自身也没有尽最大努力为新平台提供支持，甚至没有针对Vision Pro对部分最重要的官方软件做过优化。</p><p></p><h2>开发者关系不稳，苹果Vision Pro前途堪忧</h2><p></p><p>&nbsp;</p><p>Vision Pro缺乏关键首发应用保驾引发人们对于苹果开发商合作关系的担忧。有分析指出，Vision Pro前进阻碍正是苹果不稳定的开发者关系。在此之前，开发商们曾经都热烈拥护苹果推出的新平台——iPhone和iPad应用商店在上线后都曾快速迎来爆发。现如今，这两大平台均支持数百万款应用。而曾经的辉煌在Vision Pro上恐怕难以重现。</p><p>&nbsp;</p><p>为什么开发商对Vision Pro的热情低于预期？外媒总结了以下四点原因：</p><p>&nbsp;</p><p>VisionOS软件开发成本高昂，而开发商希望确保投资有所回报。所以部分开发商可能想要静观其变，看看Vision Pro的市场到底有多大，之后再做决定。但有些厂商甚至明确拒绝在新设备上支持自己的iPad版应用，所以情况恐怕更加复杂。有些开发商对苹果的App Store审查政策、抽成等做法感到愤怒，甚至已经引起了监管机构的注意。这些开发商知道Vision Pro的命运由其软件阵容决定，所以根本不想帮助苹果推广其新品。有些开发商认为自己的应用无法良好适配Vision Pro的混合现实环境，也就是依靠眼部和手势活动进行操作。不少游戏的最佳交互方式就是VR手持控制器，但Vision Pro尚不支持。另外，开发商还无法完全调用眼部追踪与动作感应功能，这就让软件设计变得更加困难。开发商发现苹果最新推出的三种应用商店（TV、Apple Watch和iMessage）均表现不佳，所以在Vision Pro版本获得成功前不想急于加入。</p><p>&nbsp;</p><p>具体来说，Vision Pro的发布时机恰逢苹果与开发商合作伙伴间最紧张的敏感阶段。软件开发商多年来一直对App Store的管理政策感到不满，现在苹果虽然允许开发商在应用外接受付款，但仍将征收高达27%的款项抽成。此前，Spotify刚刚抨击了苹果这项新政，称“苹果已经证明，他们会不惜一切代价保护自己凭借应用商店垄断从开发商和消费者手中夺取利润的机会。”这一切，都成为笼罩在Vision Pro头顶的阴云。</p><p>&nbsp;</p><p>另一方面，也有不少开发商单纯对苹果的生态政策感到不满。独立开发者Aaron Vegh在博文中强调，虽然不确定Vision Pro能不能成功，“但我可以立场鲜明地讲，我真心希望它一败涂地。”</p><p>&nbsp;</p><p>在吸引游戏玩家方面，Vision Pro新界面的最大缺点就是不适合目前最流行的VR游戏，例如需要配合专用控制器的《刺客信条》和《阿斯加德之怒2》等。Vision Pro倒是能够支持PlayStation和Xbox手柄，但拥有一定VR头显开发经验的厂商其实更倾向于专门的手持控制器。好消息是后续将有更多Apple Aracde游戏加入，包括《NBA 2K24》。</p><p>&nbsp;</p><p>熟悉触控屏的开发商也有自己的抱怨。独立流媒体平台Nebula运营者Dave Wiskus写道，“专为摸控系统设计的应用无法直接转化为Vision Pro版本”，其使用体验将“奇怪且难以把控”。</p><p>&nbsp;</p><p>最后是苹果近期应用商店人气低迷的问题。为Apple Watch、Apple TV和iMessage打造的应用平台均已沦为“鬼城”。即使是相对成功的Apple Watch，也没能给第三方软件打出一片生存空间。Twitter、Uber、Slack和Facebook都曾为该设备开发过应用，但最终均选择关闭并退出该平台。</p><p>&nbsp;</p><p>总的来说，Vision Pro确实是一款价格昂贵且普及度相对较低的产品，而且这种情况在短时间内不会改变。据悉，苹果方面在首周末只准备了8万台库存，好在预订一小时内就被抢购一空。而哪怕苹果今年之内能卖出30到40万台，那对开发商来说这种规模也实在有限——再加上苹果那夸张的佣金抽成，项目将更加无利可图。iPad与iPhone应用开发者Paul Haddad表示，他对探索Vision Pro兴趣不大。“我相信有人愿意花3500美元买来体验，但我自己肯定不会。”</p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://www.wired.com/story/apple-vision-pro-watching-movies-nearly-impossible-problem/\">https://www.wired.com/story/apple-vision-pro-watching-movies-nearly-impossible-problem/</a>\"</p><p><a href=\"https://www.wired.com/story/apple-vision-pro-boils-down-to-kitchen-timers-and-thats-a-problem/\">https://www.wired.com/story/apple-vision-pro-boils-down-to-kitchen-timers-and-thats-a-problem/</a>\"</p><p><a href=\"https://www.bloomberg.com/news/newsletters/2024-01-21/apple-vision-pro-lack-of-netflix-youtube-app-store-tensions-threaten-device-lrnjwjb3\">https://www.bloomberg.com/news/newsletters/2024-01-21/apple-vision-pro-lack-of-netflix-youtube-app-store-tensions-threaten-device-lrnjwjb3</a>\"</p><p><a href=\"https://stratechery.com/2024/the-apple-vision-pros-missing-apps/\">https://stratechery.com/2024/the-apple-vision-pros-missing-apps/</a>\"</p>",
    "publish_time": "2024-02-05 14:58:12",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "当 AI 与人类“抢饭碗”，IT 团队能置身之外吗？",
    "url": "https://www.infoq.cn/article/7QdfiyakWArSENj45Vzm",
    "summary": "<p>人工智能的迅猛发展正在颠覆传统的技术工作岗位，给 企业人才结构与能力模型带来前所未有的挑战。技术团队在这场变革中的角色和地位也随之发生着动态转变。</p><p></p><p>前阵子，InfoQ 的年度技术盘点里对前端、架构、运维和云计算等领域做了相关探讨，分析 AI 可能对这些领域岗位带来的影响。比如，在前端领域，AI 其实已经带来了颠覆性变革，包括从 PRD 到代码、从设计到代码等多个环节。</p><p></p><p>再比如，架构师岗位的规划、设计和变更目前还很大程度上依赖于人的经验和直觉，但面向未来，AI 技术有望更广泛地用于架构设计，包括 AI 辅助设计、决策支持与建议、智能监控等方面，从而提高架构设计的智能水平。而在运维领域，AIOps 智能化运维方面的探索已过渡到参考自动驾驶的 L0-L5 成熟度模型来度量的阶段 ，这使得行业开始从整个软件的全生命周期来思考 AI 的赋能和提效。</p><p></p><p>如果从行业的角度看，当所有的行业都可以用 AI 重做一遍，技术团队亦面临着新的挑战和机遇。 我们可以再看几个例子：</p><p>在工业产品设计领域，利用自然语言的交互能力拓展 CAD 等设计软件的功能，可将原本需要大量人工参与的整体概念设计速度提高 80% 以上，这引发了一个问题：企业是否还需要组建大规模设计团队？在金融科技领域，诸如交易类、风险审核类、客户服务类等领域，一些只从事重复性和简单编码工作的技术人员正逐渐被机器所替代。相反，具备技术和金融背景的复合型人才变得非常稀缺。对于技术团队来说，如何更好地掌握行业知识，提高复合型能力，成为一个重要的议题。在互联网领域，数据标注员正在被自己服务的 AI 所替代，如果说简单的标注可以用 AI 来完成，那么数据标注行业的门槛不断提高，需要人工参与的数据筛选和标准工作变得更加困难。作为数据标注团队又该如何应对这一挑战？</p><p></p><p>在深刻认识到行业正在经历的时代变革和 AI 新风口的同时，进一步思考，技术团队需要培养哪些能力 ** 以适应这一变革？更为关键的是，未来哪些人才将会变得更加稀缺 **？对此，我们总结了以下要点：</p><p>信息鉴别能力： 随着 AI 模型输出的信息日益普及，我们必须重视其中可能存在的“毒性”和“幻觉”。只有通过扎实的专业理论和技术基础，我们才能有效提升对 AI 信息的辨别力，以规避其潜在的负面影响。持续学习的能力： 每一次技术变革，不是终点，而是新的起点，面对不断迭代更新的技术浪潮，掌握学习能力并保持持续学习不再是一种选择，而是一种必备的生存和发展策略。AI 与 业务融合的创造能力：所谓融合不是简单的生搬硬套，这就要求开发者不仅能够进行大模型的训练和调优，还需要深入理解业务的能力。只有通过深刻的业务理解，开发者才能够更好地服务于业务，这种融合能力将成为技术团队中的重要优势。</p><p></p><p>然而，团队如何高效获取知识并提升上述能力仍然是一个挑战。</p><p></p><p>新春佳节临近，极客时间企业版 为广大技术团队提供了企业新春知识红包——3000+ 门前沿在线课程，由一线技术专家打磨，内容涵盖全面：AI 大模型应用、研发效能提升、技术团队管理等多元维度，全方位助力企业和技术团队破浪前行，从容应对 AI 时代的各项挑战，实现自我与团队的整体跃升。</p><p></p><p>每个团队都可以免费领取 100 个学习账号。** 扫描图中二维码 ** 即可免费领取学习账号。</p><p><img src=\"https://static001.geekbang.org/infoq/ac/ac5925f8e70676cc3d6d0ac9ebac8466.png\" /></p><p></p><h3>获得一：掌握生产级 AI 系统研发能力，推动业务倍速增长</h3><p></p><p></p><p>极客时间企业版紧贴 AI 大模型应用与开发的前沿脉搏，携手一线技术专家及领军人物，精心打磨了一系列精品体系课程，助力企业培养既具备硬核技术基础，又掌握创新研发能力的复合型人才队伍。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ee/ee43b24887c4f3cb32ed5a475a7ac371.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/22/2282734882beee1924bc5ea332874fb1.png\" /></p><p></p><p></p><h3>&nbsp;获得二：足不出户与全球技术专家同频，了解前沿技术实践应用</h3><p></p><p></p><p>极客时间企业版收录来自 QCon 全球软件开发大会、ArchSummit 全球架构师峰会等 &nbsp;50000 小时技术大会视频，来自全球知名企业技术专家分享实践驱动的技术干货，助你掌握前沿技术趋势。</p><p><img src=\"https://static001.geekbang.org/infoq/da/da5bafa2b4a54bbc5d58e7a0bc977f70.png\" /></p><p></p><h3>&nbsp;获得三：覆盖一线到核心骨干，满足数字化团队全职涯发展需求</h3><p></p><p></p><p>极客时间企业版提供不同岗位角色的专业课程与实战案例，技术团队每位成员都能够从技术技能、战略思维、创新领导力等方面都能得到进阶式提升。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8d/8d07d6c1c35b1215f254cf8dce9ba9e9.png\" /></p><p></p><p>再次提醒，扫描二维码，每个团队可领取 100 个前沿课学习账号。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f1/f1c7354c321474fc2b019d0729433123.png\" /></p><p></p>",
    "publish_time": "2024-02-05 16:12:49",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "新型IT运维管理，基础设施和数据两手都要硬",
    "url": "https://www.infoq.cn/article/FRZc8PdiLxcd9jph9Qw8",
    "summary": "<p>编前语：数据是 AI 的基石，缺数据无 AI。</p><p></p><p></p><h1>AI 大模型时代，数据赋予 IT 人“新使命”</h1><p></p><p></p><p>当下 IT 人在企业中扮演着运营支撑的角色。说到运维管理，相信每人都是一把辛酸泪，每天承担着繁琐、高负荷且又高风险的运维工作，但在业务规划和职业发展时又成为了“透明人”。业内有句调侃的话：“只花钱的人，不配拥有发言权”。</p><p></p><p>随着 <a href=\"https://www.infoq.cn/article/mtlqIGF9r1VUWCTBfGAp?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">AI </a>\"大模型应用的普及，数据成为了企业的关键资产和核心竞争力。近年来，企业的数据规模从 PB 级向百 PB 级成倍数快速增长，数据类型也从以数据库为主的结构化数据，演变成以文件、日志、视频等为主的半结构化、非结构化数据。业务部门希望数据的存储能够像图书馆一样分门别类随用随取，同时又希望数据的存储更安全、更可靠。</p><p></p><p>IT 人，已不再只是负责建设和管理 IT 资源、保障设备稳定的被动角色。&nbsp;</p><p></p><p>IT 人的新使命，演变为提供优质数据服务，让数据好用，帮助业务部门用好数据！</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/92/9244f6ebd6399a5f849019fe04424ea7.jpeg\" /></p><p></p><p></p><h1>“基础设施”和“数据”很近，但两者的“管理”却很远</h1><p></p><p></p><p>针对基础设施的管理，业界普遍的做法是通过 <a href=\"https://www.infoq.cn/article/huaweiyun-aiops?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">AIOps </a>\"技术，将繁琐的人工日常运维改变为利用工具自动化执行，通过专家系统、知识图谱等智能化能力，主动发现系统隐患、自动修复故障等。生成式 AI 技术普及后，近期出现了智能客服、交互式运维等新型应用。</p><p></p><p>针对数据的管理，业界有以 Informatica、IBM 等为代表的专业 DataOps 软件供应商，支持数据集成、数据标记、数据分析、数据优化、数据市场等能力，为数据分析师、BI 分析师、数据科学家等业务团队提供服务。</p><p></p><p>笔者调研发现，目前大部分企业中的基础设施运维管理和数据管理是割裂的，由不同的团队负责，工具平台间也没有有效协同。业务上数据保存在存储等 IT 基础设施中，应该融为一体，但实际两者的管理却相隔甚远，甚至两个团队之间语言都不对齐，这样通常会带来几个弊端：</p><p></p><p>1）数据不同源：因为归属不同团队和采用不同工具，业务团队通常采用将原始数据通过 ETL 等方式复制一份至数据管理平台做分析处理。这样不仅造成存储空间浪费，还存在数据不一致、数据更新不及时等问题，影响数据分析的准确性。</p><p></p><p>2）跨地域协同难：如今企业数据中心在多个城市布局，数据在跨地域传输时，当前主要通过 DataOps 软件在主机层进行复制，这种数据传输方式不仅效率低，传输过程中也存在安全、合规、隐私等严重隐患。</p><p></p><p>3）系统优化不充分：当前通常基于基础设施资源的利用情况进行优化，因为无法感知数据布局而实现全局最优，数据的保存成本居高不下，有限增长的预算与成倍的数据规模增长之间的矛盾成为制约企业数据资产积累的关键矛盾。</p><p></p><p></p><h1>IT人，打通“基础设施”和“数据”任督二脉，开启数智化飞轮</h1><p></p><p></p><p>笔者认为，IT 团队应该把“基础设施”和“<a href=\"https://www.infoq.cn/article/NTJYRtUm0xOma4gOYPC6?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">数据</a>\"”作为一个有机整体进行管理和优化，实现数据同源、全局最优、安全流通，扮演着数据资产管理者的重要角色。</p><p></p><p>首先，实现全局文件的统一视图。利用全局文件系统、统一元数据管理等技术，把不同地域、不同数据中心、不同类型设备中的数据形成统一的全局视图。在此基础上，能够按照热温冷、重复、过期等维度进行全局优化策略的制定，下发至存储设备执行，这种方式可以实现全局最优。基于存储层复制的压缩、加密等技术，通常可以实现数十倍的数据移动速度，效率和安全性都可以得到保证。</p><p></p><p>其次，将海量非结构化数据自动生成数据目录。通过元数据、增强型元数据等自动生成数据目录服务，把数据分门别类高效管理起来。业务团队基于目录可以自动提取满足条件的数据进行分析处理，而不用人工像大海捞针一样去找数据。笔者调研发现通过 AI 识别算法实现数据标注的技术已经较为成熟，因此可以利用开放框架将不同场景化的 AI 算法进行集成，自动分析文件内容形成多元化标签，作为增强型元数据提升数据管理的能力。</p><p></p><p>同时，数据在跨设备流动时，需要特别考虑数据主权、合规隐私等问题。存储设备中的数据应该自动分类、隐私分级、分权分域等，管理软件对数据的访问、使用、流动等策略进行统一管理，避免敏感信息和隐私数据泄露，未来数据要素交易场景这些将成为基本要求。比如，数据在流出存储设备时，首先需要对合规性、个人隐私等进行判定是否满足策略要求，否则企业将面临严重的法律法规风险。</p><p></p><p>参考架构如下：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/43/43af6545e40b0f159f57a56fd8d4bbaf.png\" /></p><p></p><p>根据笔者调研以及请教同行专家后，发现业界诸如华为存储、NetApp 这样的领先存储厂商已经发布存储和数据一体化管理的产品解决方案，相信未来会有更多厂商支持。</p><p></p><p>设备和数据两手都要抓、两手都要硬。IT 人在 AI 时代可以扮演更重要的作用。</p>",
    "publish_time": "2024-02-05 17:51:08",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "减少50%运维工作量，百度智能云基于大模型构建智能问答系统技术实践",
    "url": "https://www.infoq.cn/article/mGcQYHEikyxBqGgFwfyQ",
    "summary": "<p></p><blockquote>本文源自百度智能云数据库运维团队的实践，深入探讨了基于大模型构建「知识库智能问答系统」的设计过程和应用。全文包括了总体的技术方案选型、各个模块的设计实现、重点难点问题的突破、以及目前的落地场景应用等。该系统自从内部上线以来，整体的回答准确率达到 80% 以上，数据库运维工作量直接减少 50%：包括 80% 咨询量，以及 20% 工单处理工作。</blockquote><p></p><p></p><h2>背景</h2><p></p><p>随着大模型的飞速发展， AI 技术开始在更多场景中普及。在数据库运维领域，我们的目标是将专家系统和 AI 原生技术相融合，帮助数据库运维工程师高效获取数据库知识，并做出快速准确的运维决策。</p><p></p><p>传统的运维知识库系统主要采用固化的规则和策略来记录管理操作和维护的知识，这些系统的知识检索方式主要基于关键字搜索和预定义的标签或分类，用户需要具备一定的专业知识才能有效地利用这些系统。</p><p>这已不足以满足现在复杂多变的运维环境。因此，借助大模型来提供运维知识并协助决策成为趋势。这将在运维能力、成本控制、效率提升和安全性等方面带来深刻的变革。</p><p></p><p>在数据库领域，AI 技术应用可以划分为不同场景，例如知识库学习（包括知识问答和知识管理）、诊断与推理（包括日志分析和故障诊断）、工作辅助（包括 SQL 生成和 SQL 优化）等。本文将主要着重介绍「知识库智能问答系统」的设计与实现，旨在为读者提供深入了解该领域应用的思路。</p><p></p><h2>架构设计和实现</h2><p></p><p></p><h3>技术方案选型</h3><p></p><p>目前，大模型已经可以通过对自然语言的理解揣摩用户意图，并对原始知识进行汇总、整合，进而生成更具逻辑和完整性的答案。然而，仍存在以下几个问题，导致我们不能直接使用这些模型来对特定领域知识进行问答。</p><p></p><p>专业性不足：作为通用大模型，对专业领域知识的训练不足，可能会产生虚假陈述、准确性不足以及信息丰富度不足的问题。时效性问题：模型的训练数据基于某个时间之前的数据，缺乏最新的信息，每次添加新数据都会导致高昂的训练成本。安全性问题：模型无法访问企业内部私密文档，且这些文档不能直接用于 Fine-Tuning。</p><p>为了解决这些问题，业界采用了如下几种技术手段来为大型模型提供额外知识。</p><p>Fine-Tuning（微调）：使用特定领域的知识对基础大模型进行微调，以改变神经网络参数的权重。虽然适用于特定任务或风格，但需要大量资源和高质量的训练数据。Prompt 工程：将行业领域的知识作为输入消息提供给模型，让模型对消息中的知识进行分析和处理。这种方法在正确性和精度上表现良好，但有文本长度限制，对于大规模数据不够高效。与传统搜索结合：使用传统搜索技术构建基础知识库，然后使用大语言模型处理用户请求，对召回结果进行二次加工。这种方法具有更高的可控性和效率，并适用于大规模数据。</p><p></p><p>为了确保准确性和效率，我们选择了第 2 种和第 3 种方式相结合的方案，通过向量数据库将知识外挂作为大模型记忆体，使用 LangChain 作为基础开发框架来构建知识库问答系统，最终依靠&nbsp;Prompt 工程和大模型进行交互。</p><p></p><h3>分模块设计实现</h3><p></p><p></p><p>数据库运维知识库的整体设计流程如下图所示，包括文档加载、文档分割、文本/问题向量化、问答缓存、大模型生成答案等流程。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0b/0b1d7ca6bb7858b8e80ad2632659bfad.png\" /></p><p></p><h4>知识入库</h4><p></p><p>数据源加载和解析：主要使用 LangChain 支持的文档加载方法，对 PDF、CSV、Markdown 等格式的文档类型进行加载和采集。此外，考虑到很多企业的文档来源是内网网页，因此也支持 Selenium 和 BeautifulSoup 来爬取网页内容，最后再应用 LangChain 中的 Markdown 加载器进行格式解析。文本分片：原始知识库应当被拆分成独立、较短的文本块，每个文本块将作为问答的最小记录，与问题进行匹配。文本的切分质量直接关系到 Embedding 和召回的质量。切分块不能太大或者太小，也不能超过 Embedding 和大模型的 token 限制。在很多内部网页文档中，由于多级标题和段落间是有上下文关联的，所以我们采用 Markdown 或者 HTML 方式进行切分，进而大大提高了对文档内容的感知能力。在文本切分器的选择上，我们主要采用 LangChain 中的 RecursiveCharacterTextSplitter 和 SpacyTextSplitter这两种分词器。它们能够在保持知识点完整性的基础上，对中文句子、段落、章节等进行良好的切分。需要注意的是，由于算法有 token 数量的限制，选择好的分词器能够为切片提供很好的切分单位和依据。目前我们选择的是 tiktoken 和 Spacy 中的 Tokenizer，但有时候并不理想，需要根据大模型采用的 token 计算方法进行适配。文本向量化：在项目初期 Embedding 模型选择了&nbsp;Hugging Face&nbsp;上开源的 Embedding模型，例如 GanymedeNil/text2vec-large-chinese和 moka-ai/m3e-large，但实际测试效果并不理想。最终我们选择了文心的 Embeddings 模型，效果有质的飞跃，虽然支持的 token 和向量维度低，但整体效果很好。LangChain 中对于千帆接口进行了封装，可以直接通过百度千帆调用文心 Embedding。关于文本向量化、存储和检索的详细信息，请参考下图：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6d/6d100f4e0ffb82523032c6c4ec322993.png\" /></p><p></p><p>存储：将生成的Embeddings（向量）与原始分片（知识点）进行存储，同时考虑存储一些关键的元信息，如链接地址和分片大小，以用于检索时作为过滤条件。专业的解决方案是使用向量数据库，但也可以考虑传统数据库或存储中间件，如RedisSearch 或 pgvector，它们都支持向量字段和向量相似性查询，可提供实时向量索引和查询功能。在向量数据库选型上我们对&nbsp;ElasticSearch、Baidu ElasticSearch（BES）、Milvus 和 PGVector分别做了测试，在查询性能方面，PostgreSQL&nbsp;性能较差不可用，而 BES、ES、milvus 性能在一个层级，BES采用自研的插件实现了 HNSW 算法，召回效果表现更好。在资源消耗方面，它们都较为耗费内存，其中 BES 和 ES 相对来说消耗较小。BES 是百度智能云自研的分布式、开源搜索与分析引擎，在百度内部多模态和大模型基础平台有多年积累和应用，在性能、分布式和易用性方面表现良好，LangChain 也对其进行了集成，最终我们选择了 BES 作为向量数据库。</p><p></p><h4>数据检索</h4><p></p><p>用户问题向量化：对用户的问题进行向量化计算。如果结果在缓存中命中，将从缓存中获取已经缓存的答案，以减少文心大模型 API 费用和提高响应速度，可使用&nbsp;GPTCache&nbsp;等库来实现。向量检索：使用 Embeddings 模型在向量数据库中进行相似性计算，召回相似度最高的 n 个分片。目前设置的召回策略是默认选择前 10 个评分最高的分片。</p><p></p><h4>结果整合</h4><p></p><p>将向量数据库检索召回的文本进行二次加工后，利用 LLM 总结概括和分析推理能力，完成最终答案的生成。</p><p></p><p>Prompt 生成：将 n 个切片和用户原始 Question 组装成 Prompt。需要注意的是，Prompt 不能超出 Token 限制，超出限制则需要进行优化，例如淘汰或多次迭代调用等。我们在 Prompt 中除了原始问题和内容，还对大模型加入了回答内容的限制，如「不允许在答案中添加编造成分」、「请用中文回答」等。此外，我们还提供记忆功能，将历史会话信息传入 Prompt，一并发送给大模型。大模型响应：将 Prompt 发送给大模型，获取最终的结果。同时，将对话信息和结果追加存储到 MySQL 中，以保存会话历史，这有助于会话重启和历史信息接入大模型。</p><p></p><h2>技术难点和解决方案</h2><p></p><p></p><h3>难点一：向量数据库召回率低</h3><p></p><p>尽管通过将知识嵌入（Embedding）与大型语言模型相结合已经成为一种高效的实现路径，但向量数据库在向量化、存储和检索等多个阶段都可能存在问题，进而导致检索结果的召回率不尽如人意。在实际测试中，我们在未经优化的情况下，召回率仅达到了 70% 左右。而一个相对可靠的系统，召回率至少需要达到 85% 或甚至 90% 以上。以下是我们在应用中采取的优化措施。</p><p></p><h4>精确切分文本</h4><p></p><p>分割模型：由于训练的文档主要是中文文档，因此切片工具必须具备对中文的良好支持。为此，我们首选 Spacy 作为分割工具，并采用 zh_core_web_sm 模型作为标记器（tokenizer）。分割条件：一般情况下，大部分系统会使用 LangChain 定长切分，但这样会丢失大部分上下文关联，知识点也是割裂的。在实践中，我们没有仅仅依赖 chunk size 作为唯一的切割条件，而是对那些具有明显段落或章节结构的文本格式（如 Markdown 或 HTML）进行了格式化分割，以确保文本的连续性、相关性和完整性。当段落超过 Embedding token 数限制时，我们会使用 RecursiveCharacterTextSplitter 对段落继续进行切分，切分条件除了设置换行符外，还加入了中文常见的断句符号，比如分号、叹号等。标题补偿：当某段文字的大小超过了 chunk size 时，我们会针对没有标题的 chunk 补充标题，以确保整体切分的完整性。</p><p><img src=\"https://static001.geekbang.org/infoq/f2/f24bf0be6d1281d92c9d74b2dc5c8723.png\" /></p><p></p><h4>优化文本向量化</h4><p></p><p>标题向量化：在进行精细化切分之后，标题的重要性显现出来。因此，我们在这一阶段对标题进行向量化处理。这一方法适用于帮助手册、 HTML 和 Markdown 等文本格式。内容关键字向量化：如果仅对标题进行向量化，对于那些标题概括性较差或段落内容丰富的情况，精召率提升仍然有限。因此，我们还尝试了了另一种方法，即首先利用大型模型或关键字模型提取关键字，数量通常限制在 10 左右，然后对这些关键字进行向量化处理。由于多轮次调用的耗时和关键字提取的可靠性问题，最终该方案被放弃。标题 + 内容同时向量化：在文本分割时，我们强行对每个分片加入了标题。在向量化时，会将标题 + 内容打包一并进行向量化。我们将用户提问向量化后，和向量化后的切片进行检索匹配，选择与问题最相关的 topN 切片，这样可以显著提高精召率，这也是我们最终的方案。</p><p></p><h4>Embeddings 和向量检索调优</h4><p></p><p>对于 Embeddings 的选择和调优，上文已经介绍过，我们最终选择了效果更好的文心 Embedding。对于向量数据库检索性能，这里优化空间并不大，调整 HNSW 算法的参数，对最后召回结果影响不大。</p><p></p><h3>难点二：Token 数量限制</h3><p></p><p>在应用大型语言模型时，我们面临的主要限制之一就是输入文本的上下文长度。开源模型和商业模型的上下文长度限制范围从 2K 到 100K 不等。上下文长度对于应用大型语言模型具有关键影响，包括知识增强、记忆等方面的工作，都是为了解决上下文长度限制而设计的。以下是我们采取的策略：</p><p>取舍：如果选择的 10 个文本组合成的 Prompt 超出了模型的 Token 限制，我们采取逐一舍弃相似度较低的片段的策略。如果减少到召回文档为 6 个时还是超限制，则会选择 token 数支持更多的模型。模型选择：ERNIE-Bot-turbo 模型支持 10200 个Token，ERNIE-Bot 支持 2000 个 Token 的 ERNIE-Bot 模型，以扩大上下文长度。但是 ERNIE-Bot-turbo 在问答领域的效果并不如 ERNIE-Bot，此时，我们的策略是在不超过 2000 个 token 的情况下优先选择 ERNIE-Bot，极大地提升了系统对复杂问题的处理能力。压缩 Prompt：我们尝试对多个切片拼接后的文本进行压缩，以提取主要内容，去除无用且重复的词组。然而，这种方法的效果有限，甚至可能导致文本失真，且对中文支持较差，因此无法从根本上解决问题。压缩效果如下图：</p><p><img src=\"https://static001.geekbang.org/infoq/e4/e46f96322c2402016e4ef0c99dbbaf53.png\" /></p><p>多轮次迭代调用 LLM：面对超长文本超出大模型 token 限制的情况，我们采用了 MapReduce 的方式来突破 Token 限制。该方式将文本拆分成多个部分，并多次调用 LLM 以解决文本长度问题。具体流程包括将多个分段分别请求 LLM，获取各自的局部答案。然后将这些局部答案拼接成新的 Prompt，再次请求 LLM 以获取最终答案。这一流程有效地扩展了上下文长度，但是实际应用效果并不理想，表现为最终结果失真，尤其是在回答流程类问题场景下。主要原因是汇聚后丢失了很多原始文本细节。</p><p><img src=\"https://static001.geekbang.org/infoq/2e/2ec41158b3666e81e0d581d1495ee888.png\" /></p><p></p><h3>难点三：知识陈旧和虚构答案</h3><p></p><p>在商业大型模型的大多数应用场景下，模型能够为 MySQL、Oracle 等数据库的相关问题提供令人满意的答案。然而，不可避免地，这些大型模型有时会出现知识陈旧和答案虚构的问题。为了提供更加丰富和准确的答案，我们采用了一种搜索和推荐系统的方法，并结合了大型模型的推理和总结能力。以下是我们的主要方案和流程：</p><p>提取问题关键字：首先从客户问题中提取关键字，以确保这些关键字能够准确地用于搜索引擎检索。为此，我们探索了两种不同的方法：大模型：大型模型本身具备一定的关键字提取能力，但实际测试表明，这种方法的稳定性有待提高，可能会导致调用链出现异常。因此，我们需要对这种方式进行 Prompt 的调优，以提高其性能和可靠性。NLP 算法：另一种思路是利用 NLP 模型来进行关键字提取。然而，我们曾尝试使用 Hugging Face 的一些模型，但效果并不十分理想。搜索引擎检索和文档解析：为了获得与数据库问题相关的准确答案，我们评估了以下两种不同的策略：接入百度搜索引擎：我们曾尝试使用百度搜索 API 来根据提取的关键字进行检索。然而，这一方法的答案质量较差，而且可能包含过时的信息，这可能会对最终答案造成负面影响。因此，我们最终放弃了这一方案。接入官方文档搜索：对于 MySQL 等数据库，官方文档提供了用于客户搜索的 API。我们只需传入关键字即可获取与之匹配的搜索结果。然后，我们可以选择最相关的前 N 个结果，并对这些结果的链接内容进行爬取和解析。这一流程类似于之前描述的领域知识入库和知识检索流程，但具体细节不再赘述。</p><p><img src=\"https://static001.geekbang.org/infoq/91/9182f7de7bdf73ff6ff2b1dec1cf04a5.png\" /></p><p>调用大模型：将多个 chunk 拼接和问题一起生成 prompt，调用大模型获取答案。</p><p></p><p>可以看到文档解析和大模型调用其实就是在重复我们前边介绍的领域知识入库和结果的二次整合过程，唯一不同的地方就是我们使用搜索引擎去代替了向量检索。以 MySQL 为例子，具体流程如下：</p><p><img src=\"https://static001.geekbang.org/infoq/fc/fcc501d7c077f6409b6868faa56e6035.png\" /></p><p></p><h2>应用场景接入</h2><p></p><p>该系统自从内部上线以来，整体的回答准确率达到 80% 以上，数据库运维工作量直接减少 50%，包括 80% 咨询量，以及 20% 工单处理工作。</p><p></p><p>目前「知识库智能问答系统」主要通过两种方式接入和应用：Database Chat 和 IM 机器人。</p><p></p><p>Database Chat：除了类似于&nbsp;ChatGPT&nbsp;问答界面外，还具备知识管理、用户管理等功能。（该功能已经集成数据库智能驾驶舱 DBSC 中，将于 3 月底正式开放上线）</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ed/ed5895bdf264dcf953f9f8de7c99ccab.png\" /></p><p></p><p>IM 机器人：IM 工具做为工作协同中最重要的软件，使用频率非常高。我们提供了 IM 接入接口，客户可以开发 IM 软件（微信、飞书、如流等）机器人，在聊天群中实现快速高效获取信息和知识。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d5/d561acede566e15c293b411c62267a49.png\" /></p><p></p><p></p><h2>总结</h2><p></p><p>从技术工程角度来看，利用向量数据库结合大型 AI 模型来构建领域知识库系统的实现并不复杂，然而，这一领域仍然面临着不少挑战和潜在的改进空间。在本文中，我们已经讨论了一些解决方案和技术，但仍然有许多可能的改进和未来发展方向值得深入研究。</p><p></p><p>首先我们认为关键点还是解决向量检索的召回准确性和超长文本处理能力是两个难点，这些方面可能还有更好的方式。此外，大模型本身的能力和文档质量是系统性能的关键因素，因此需要不断升级和维护模型，同时确保文档的及时性和准确性。</p><p></p><p>我们希望更多的研究者和工程师积极贡献更多的创新思路和技术，推动大模型在数据库运维领域落地，期待未来能有更多的可能性。</p>",
    "publish_time": "2024-02-05 18:30:06",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "老司机跟你聊聊学习企业架构和业务架构的那些事儿",
    "url": "https://www.infoq.cn/article/71WPsPNa9gF7R9zIRuD9",
    "summary": "<p>随着数字化转型的发展，对数字化的认识在国家政策的推动下，已经由一些局部改良、点状技术应用发展到数字中国、数字经济的高度，笔者在最近一系列解读“数字金融”相关高层会议精神的文章中，也提到，数字化是这个时代的特征，银行的数字化就是这个时代的银行的基本特征，这一点放到众多其他行业也是一样的，“数字”就是时代特征，每个行业前边都可冠以“数字”这个定语，其区别主要是数字化程度而已，程度则是由行业特征和技术应用能力决定的。</p><p></p><p>在这种社会级大潮下，很多企业的数字化转型逐渐提升到整体转型层面，提升到将时代特征由表层应用转化为深入内涵的“业技融合”，转化到真正期望通过对数字技术的应用，实现企业、行业效率整体提升的层面，也就是真正走入到“高质量发展”的层面。对很多企业而言，只要企业是在持续关注效能的提升而不仅仅是粗放的规模扩张，这就是在做“高质量发展”，只要是试图寻找突破原有业务惯性的“新增长点”，就是在探索“新质生产力”，这并不神秘，甚至很自然。</p><p>&nbsp;</p><p>这种发展方式逐渐需要企业重新、全面、深入地认识自己，从对自己“模糊”的印象到“精确”的认识，从“笼统”的管理到“精益”的管理。这种管理模式的变化还同步要求企业的数字化能力可以匹配地支持业务的变化，也就是要“业技同频”，乃至真正“业技融合”。这种融合一定先从管理层的管理思维转变开始，只有对数字化的信任，对数字手段的合理、持续追求，才能带来真正的改变，如同对一个人的改变一样，先从意识、大脑开始，然后是行动、肢体的改变。</p><p>&nbsp;</p><p>系统性思维，或者用笔者常说的全局性结构化思维，正是适应“数字”这一时代特征的思维模式，是该被融入到管理层，融入的企业各层级，业务和技术两侧的思维模式，一个企业内部的融合离不开“共同语言”，而“共同语言”离不开“共同思维”，“共同思维”背后则是“共同信念”，是基于对“数字时代”的信念，而产生对“结构化思维”的信任，再产生对“结构化表达”也就是“共同语言”的需要，继而才是基于“共同语言”模式的沟通效率的提升，也就是“业技融合”，“业技融合”的基础并不是要业技双方都得先充分理解对方做的事情，而是先建立共同的“语言习惯”来提升沟通效率，“融合”说到底是人的融合，要么在一个人身上复合所有技能，当然这又难又慢，代之可行的则是由具有不同能力的人复合在一起，那就需要优先解决沟通问题。不过，不少人讲，结构化思维不好练，尤其是对业务人员而言，其实也没那么难，日拱一卒，定能功不唐捐，反正，又没有不作任何改变就可以完成的转型、变革，只要做的是符合时代发展方向，早晚都得做的东西，那就没有什么真正的困难，总比搞个可回收式火箭容易太多。都讲值得用数字化、智能化把所有行业重做一遍，那连结构化思维都搞不定，这个“重做”是在指望谁来做呢？是在指望别人革了自己的命？</p><p>&nbsp;</p><p>所以，好好研究、推广下结构化思维，尤其是在业务侧推一推，是很有价值的，对业务人员的数字化转型而言，这是必备的基本功，是需要全体业务人员优先学习的，是重塑自己的业务必然会用到的，是值得投入而且真的不会浪费的时间。都说要找“业技复合型”人才，而且也越发意识到这种人才还是只能自己培养，那这种人才最基础的能力是什么？不正是全局性结构化思维吗？这种人才能够提出的、实现业技融合目标的业务解决方案，其基础不正是理清业务问题和技术能力的关系，并将其“复合”到一个方案中吗？无论是否曾经有意识培养过，这种人才的关键能力都是结构化思维能力，如果以前未曾有意识地培养过，那正好现在培养一下，毕竟，人的能力结构没有改变的时候，什么事情都不会真正改变，我们只能是沿着旧路再多走几步。</p><p>&nbsp;</p><p>现在企业、个人都逐渐意识到了这种全局性结构化思维的价值，笔者自己同时从事咨询和培训两个行业，接触到的朋友、客户都对此抱有信心，现在，随着数字化的带动，作为“全局性结构化思维”重要代表的“企业架构方法论”，尤其是其中一直实践不足的“业务架构方法论”的讨论文章、视频也越来越多。这类方法论的发展历经了30多年的时间，期间起起落落，褒褒贬贬，说法不一，也肯定会让很多读者看起来“云里雾里”，加上这领域一直以来一大困扰就是“定义”不过关，缺少经得起考验的标准“定义”，所以，关注归关注，迷糊归迷糊，信息多了，未见得就“通透”了，笔者希望借本文，根据自己近十余年的企业架构、业务架构工作经验阐述下自己的一些观点。笔者一直热爱这个领域，从2012年有幸作为甲方核心业务架构师参加了一个国有大行六年半的企业架构转型工程以来，自己历经了从甲方到乙方、内资到外资、国企到民营、传统企业到互联网，最后再到独立顾问、一人企业的职业历程，从工作到写书、写课、发行业务架构证书，从企业落地、咨询服务、企业内训等多个视角观察和运用这一方法论体系，希望能将自己喜欢的、思考的、实践的，分享给读者，共同讨论。</p><p>&nbsp;</p><p></p><h2>一、&nbsp;企业架构和业务架构方法到底是什么</h2><p></p><p>&nbsp;</p><p>这个问题挺“虚”，但是很重要。读者也许在这里期待一个严谨的定义，不过，抱歉，没有那么严谨的定义，相对严谨的是“架构”的定义，ISO/IEC 42010:2007中的将架构定义为：“一个系统的基础组织，体现在系统组件，组件之间及组件与环境之间的相互关系，以及对系统设计和演进进行治理的原理中。”简单的说，就是结构、关系、原则，这三个词概括了架构的主要内容，企业、业务这个都属于定语，也就是通过结构、关系、原则的厘清要去描述的对象，合成词一般都得这么理解。</p><p>&nbsp;</p><p>其实跳出对“架构”的过分关注，在笔者看来，企业架构和业务架构方法就是“观察方法”，所以笔者在自己专门阐述企业架构方法论的《聚合架构》一书中提到“架构观”，套用了“世界观”这个词，“世界观”指的是观察世界的一组观点体系，也就是从多种视角或者视点观察世界来形成一组描述世界的结论，架构也一样，通过一组观点体系（或者叫维度，以结构化观点为主）观察架构设计对象，所形成的观察结论。</p><p>&nbsp;</p><p>笔者在这里非常想强调“观察”一词，因为一谈上架构，大家总愿意对“设计”眉飞色舞，其实大部分架构“设计”中的工作成果都属于“观察”，是在反映设计对象的实际形态，只有当架构师需要改变现状时，才谈得上“设计”，这种“设计”其实也可以说成是架构师引导的对目标的“观察”，因为这种“设计”往往不是架构师可以直接做主的，尤其是在企业架构、业务架构这个领域，业务架构基本上没有“黑盒”，它反映的是企业的业务形态，无论是当前还是未来，其交付成果需要经过业务侧认可，变更也需要业务侧认可，所以，“观察”的成分远高于“设计”，要坦诚地面对大千世界，做个“谦逊的架构师”。这一特质的好处是，它决定了业务架构方法很简单，很易学，虽然不代表很容易在企业内实践，但就方法而言，确实不难，同时也决定了一个优秀的业务架构师对业务了解并非是第一位的，或者说是充分条件，但不是必要条件，一个优秀的业务架构师应该比一个优秀的业务人员更容易切换业务领域才对，结构化的观察能力才是充要条件。笔者自己不但原来在甲方做实施时换过多个业务线，现在更是努力跨越多个行业去做咨询和培训。</p><p>&nbsp;</p><p>此外，业务架构并不一定非要以系统设计为目标去做，因为，业务架构是可以独立用于业务管理的，它是更有“数字时代”特征的业务管理方式，就好像之前很多企业都做“流程管理”，现在可以将其升级为“业务架构”管理，因为较之传统“流程管理”，它可以通过更加结构化的方式将流程、数据同时管理起来，并将流程和数据结合起来讨论更适合于从“数字”角度去理解的企业结构，也就是说，它本身就可以用来单独研究业务问题，只是因为结构化程度高，并且其结构化基本原理符合系统设计基本原理，才可以用来做推动“业技融合”的企业架构方法。</p><p>&nbsp;</p><p>所以，当我们谈到企业架构和业务架构方法时不要一步跳到系统规划方法、跳到对设计的关注，我们应当首先把它作为一种结构化的“观察方法”来学习，学习如何用全局性、结构化的方式去描述一个复杂事物，当我们了解了这个事物的结构时，才能更好地研究对事物的调整、演进。可能很多人会觉得对于现在这个充满挑战的“不确定性时代”而言，规划的方式、全局的思考模式有些慢、不合时宜，其实读者只需要问问自己，是希望糊里糊涂地“碰出运气”，还是希望多少有些“掌控”，时代其实一直都在变化，没有静止的年代，车马很慢的时代也一样有“不测风云”，还是不建议大家听着别人“闯荡”的江湖故事打光自己手里的“真金白银”，老祖宗讲的“三思而后行”是值得牢记的，想想“深度思考”到底是什么，该怎么做。企业架构和业务架构方法也许有些慢，尤其是在企业、实践者最初接触的时候，学习过程、应用过程都有一些问题要克服，会有些缓慢的地方，但正是这些“缓慢”造就了你的基本功，而正是踏实的基本功让你能够更好地观察、设计。</p><p>&nbsp;</p><p>正因为如此，对于企业架构和业务架构方法的学习也不一定非要在项目上，笔者在企业内训中经常讲，作为一种对结构化思维的训练，学习者可以在很多方向上练习，看电影的时候注意电影的结构，读书时注意书的结构，欣赏诗词注意诗词的结构，搞收藏时注意对藏品的分类比较等等，只要你不是喜欢“眉毛胡子一把抓”的类型，那就可以在很多事情上练习结构化思维，这远比只通过项目练习机会要多得多，也有助于养成更好的思维习惯。这个世界上至少目之所及没有无结构的事物，看得见的，乃至一些看不见的，都有结构，学会观察结构的方法，这是学习架构方法的基础，也是架构方法的要去探索的本质性的东西。</p><p>&nbsp;</p><p>记住，学架构主要就是在学习观察世界的方法，而且是基于共创的方法，在企业中的架构实践往往不是一个人，甚至不应该是少数人的工作，像笔者这种咨询顾问可以是“独行侠”，但在企业内部的实践绝不是这样，所以，我们是在学习一个观察世界并基于共创最终会去改变世界的方法，企业要培养的不仅是几个精英架构师，而是全局性结构化思维对整个企业的渗透。</p><p>&nbsp;</p><p></p><h2>二、&nbsp;该学什么样的企业架构和业务架构方法</h2><p></p><p>&nbsp;</p><p>了解了在学什么，接下来自然是看看怎么学，学什么样的东西合适。之所以这么讲，毕竟这套方法论从缘起至今，也有30多年了，期间，Zachman框架、TOGAF、DoDAF、FEAF、CBM、中台、BIAN、MEAF等等，包括谈起微服务经常必不可少要去聊的DDD，以及笔者自己基于实践写书提出的企业级业务架构、聚合架构方法论，传统的、新锐的，有实践，有想象，方法各有千秋，讲者各有所长，经验各有深浅，视角各有不同，如百川奔流，都汇集到读者这个“大海”，在读者心里搅起波涛暗流，忽而清明澄澈，忽而深不见底。</p><p>&nbsp;</p><p>视角多样，有助于学习，但也增添了理解上的难度。这么多可选的项目，到底该学什么样的呢？文章这部分笔者就和各位一起做个选型探讨吧。</p><p>&nbsp;</p><p>（一）要选择具有充分实践基础的方法论。这句很重要的废话，对学习方法论来讲却非常难鉴别，因为尽管企业架构方法论有30多年的历史了，但就实践而言，大部分时间段里都是不太充分的，并且行业分布也不平均。说到这一点，就翻翻旧账吧。企业架构方法论诞生在国外，Zachman框架是第一个，但是实践上，国外的大型企业往往借鉴企业架构思想体系，进行“缺啥补啥”的操作，或者用于梳理高阶框架，比如BizBOK这样的纯业务架构方法论，还是不做细节梳理的，这方面不同的方法论也是各有主张，各有道理。所以，在企业架构框架内完整进行业务架构、数据架构、应用架构、技术架构整体设计并由其驱动大型工程的非常少，这也是很多人抨击企业架构的原因，一个非常宏大的设计远景，逻辑通顺的设计方法，但是鲜有明确的设计实例。其实就上个世纪企业架构诞生时的条件而言，哪怕是在本世纪前几年，确实很少有企业有能力进行这样的整体设计，就算“勇敢”地做了设计，也很难找到足够的技术资源进行实现，那个时候，哪怕是银行这样有实力的甲方，也没有多少IT资源敢去尝试对核心业务系统进行完整的重构，这是很现实的问题，说起来跟人工智能的发展有点儿像，逻辑对，算法也可以，但是算力、存储、数据都不行，硬实力扛不住。人工智能后来的突破正是有赖于硬实力的发展，企业架构也是，现在很多企业可以这么干了，是因为大家的IT资源尤其是人力资源这块，比那个时候要充裕多了，这么多人了，该想的就不是各自为战、怎么快速搞个系统的事情了，而是大家怎么协同工作，做的系统又怎么协同起来，硬实力和软目标都在寻找企业架构这类方法，提升对大量IT资源、大量业务系统带来的复杂性的管理能力。既然硬实力和软目标是这样的，那要找的方法就应该有充分的实践基础。</p><p>&nbsp;</p><p>读到这里，读者可能觉得绕到死胡同了，本来就缺实践，还要找有实践基础的，怎么找啊？这方面国内反倒是有些优势，因为国内企业由于对信息化实践的持续关注，积累的业务系统越来越多，所以在最近十余年的时间里一直不乏有大型企业尝试这类方法论的实践，笔者自己了解到的，包括航天制造、电力资源、汽车制造、消费品行业等都有，其中最有深度和特点的还是金融行业，尤其是大型国有银行，国内六家大型国有银行都不同程度、不同形式地开展了企业架构工程，在实践上各有创新，所以，学习的话，尽量找这些行业实践过的方法资料去学。企业架构通用理论可以用于对整个体系的学习，需要了解更多实践经验的话，就要找行业资料了，两者搭配学习。另外，就总体而言，实践过的行业还是很少的，所以，不要总想着找跟自己行业对标的去学，很可能你会无标可对，无标可对也可能是好事儿，笔者之前在甲方中的深入实践就是基本属于无标可对的，这种环境下，最大的好处就在于你可以充分关注自己的诉求和目标，不用总是琢磨别人为什么这么做，总琢磨这个，尤其是耗费精力太大的话，得不偿失。</p><p>&nbsp;</p><p>选择有充分实践基础的方法论，还有一个鉴别技巧，就是对方是否有基于架构设计成果推动项目实施落地的经验，是否对架构设计、架构协调、项目实施、架构工作体系建立、方法改良等都有一定的了解，而不是只能阐述某一个环节，前后没有一个完整的工程经验串联起来，经常会说着说着变成基于自己工作经验对企业架构的“想象”了，因为有工程经验的人绝对不少，但是有这类项目真实、深入、完整经验的确实非常少。这类项目很“矫情”，项目经验不完整、项目体量不够大、项目周期不够长，那可能遇到的“场景”就不太齐全了，所以，说着说着，就成了“好像”、“大概”。这个行当里，一群没怎么做过的人给另一群压根儿没做过的人讲，是非常常见的现象。不过，笔者并不是有意反对大家在没有足够经验指引的基础上开展架构工作，毕竟一切皆可探索，凡事皆有创新，这里只是就事论事，提个醒而已。</p><p>&nbsp;</p><p>企业架构里其实还有另一块非常重要的内容，但是往往会被忽略掉，而它又恰是企业架构的核心工作，那就是对企业战略的落地拆解，企业架构的最高目标是服务于企业的战略落地，但是很多企业觉得这个事情费时费力不讨好，战略又经常在细节层面说不清，为了“保交付”，经常会压缩掉这部分，其实这也是检验方法论实践基础的一项重要内容，没梳理过战略或者目标的，做的就是不完整的企业架构，也就是只做了偏向于现状的架构，没有目标架构，没有架构演进部分，而现状架构的梳理有一些可以“讨巧”的方法，能够规避开复杂的项目组织问题，使架构项目演变成一个轻量级项目，这是笔者自己做顾问时也会采用的方法，但是，放到这部分来讲这个内容，是希望大家了解到战略的价值和什么才是有完整实践基础的方法论。</p><p>&nbsp;</p><p>总而言之，有没有以企业架构方式驱动的大型企业级项目为基础，从战略到架构到实施到体系转换的完整经验，是需要在学习之前做“选型”考虑的。</p><p>&nbsp;</p><p>（二）要尽量选择流程和数据相结合进行架构分析的方法论。这里选择的用词是“尽量”，因为大部分常见的对企业架构、业务架构方法论的介绍，都是采用4个架构（业务、数据、技术、应用）分开介绍的方式，而企业架构实施中常见的一个问题又恰恰是如何让4个架构融合一致的问题。4个架构融合一致并非是分开做完4个架构，然后互相勾勾挑挑就算融合一致了，如果这样能解决问题，笔者也就不需要在这里专门再讲这个事情了。</p><p>&nbsp;</p><p>4个架构的融合要求架构设计方法论要提供可融合的设计逻辑才行，传统上一般把数据架构设计放到信息系统设计的范畴，也就是将数据架构和应用架构合起来作为技术上的工作内容，但是根据笔者之前项目实施的经验，这样做不太容易真的做到融合，尤其是这种设计方式会很自然地与技术上以前的工作习惯，也就是数据设计方面不怎么考虑逻辑模型，或者即便做了也是数据设计人员自己考虑不怎么融合到总体设计中，更常见的则是直接走到库表设计，所以笔者接触过的大多数企业都没有逻辑级数据模型，逻辑级数据模型的缺少实际上是少了架构融合中的关键一环。</p><p>&nbsp;</p><p>这个问题我们还得再往前倒一倒，传统的企业架构、业务架构或者系统分析，大多数都是强调业务分析中的流程分析，也就是用过去的模式做的业务架构，其主要部分就是流程的结构，然后很多人也都讲，理清楚流程分工和关系，推导系统功能模块，所以业务架构中经常出现业务功能这个词，就实操而言，从流程结构直接划分功能模块不是太“科学”，或者说不是太“准确”的，比如，流程经常有相似的，这些相似的流程到底是不是一个流程，或者能不能整合成一个流程，是不是共用能力，流程分析自己不是总能回答这些问题，流程在一起也不意味着后边的系统实现就一定在一起。</p><p>&nbsp;</p><p>此外，传统流程分析是不重视颗粒度问题的，或者说它也没有办法很好地界定颗粒度，尤其是细粒度元素的颗粒度，比如一个流程图中的那些小方块，也就是任务，也有方法中称之为步骤，到底该多大，如果流程设计本身不能很好地回答这个问题，那这张流程图对系统设计而言，只能是过程说明，无法成为结构说明，也就是不能向后延伸对模块、服务、微服务的划分指导。</p><p>&nbsp;</p><p>要解决这些问题，就不能在业务架构部分只重点关注流程的结构，还要关注数据结构。可能有些熟悉流程分析、流程管理的读者会认为，之前的流程也关注了数据，但是那个关注的是“业务信息”，也就是偏向“单证书表”的外在形式，而不是其中蕴含的“业务对象”，“业务对象”就是常说的逻辑级数据模型中的数据实体，是一个一个独立的业务处理对象，而不是各种信息混在一起的一张表。</p><p>&nbsp;</p><p>读者可能无法一下子直接理解到为什么对在“单证书表”上不行，对在“业务对象”上就可以，其实这也是为了更准确地界定到底业务能力是什么，很多设计都讲我们要对着业务能力设计，要实现业务能力，其实对业务能力说的比较好一些的还是BizBOK给的说法，能力是要有目标对象的，也就是这能力到底用在“谁”身上，能用出什么效果，当然，为了搞清楚、实现它，你还得知道它发挥作用的过程，那么总结起来，就是知道能力的作用对象和作用过程，以及一个效果预期，也就是目标，这就是能力，其设计基础离不开过程和对象。“单证书表”往往包含了一堆的对象，所以只对着“单证书表”看，就很难找到可独立、可扩展的设计对象，没法为后边设计要求的模块、服务、微服务的独立性、可扩展性提供分析基础，所以，在业务架构设计阶段，就必须带入逻辑级数据模型分析，至少要做到实体级，而且是跟流程一起做，结合做，流程中的每个细颗粒度元素要如何做，得结合具体的业务对象一起判断，这样设计出来的流程、数据是可以为后续应用设计中各元素的切分提供参考依据的，而且也为业务侧自己定义业务能力，分解企业战略提供“科学”的、“清晰”的操作方式。</p><p>&nbsp;</p><p>基于业务对象的分析还有一个好处就是它符合系统设计的基本原理，系统设计也是根据数据聚类行为，也就是关系相近的数据放在一个系统里，再将与其相关的行为定位到这个系统中进行实现，所以，业务对象，也就是数据实体是整个设计联通的关键。数据实体可以更好地帮助流程进行整合、优化，处理相同对象的流程就是相同或者可以整合、公用的流程，根据数据实体划分的流程颗粒度，可以将流程和数据结合去推导应用侧的设计，这样业务、数据、应用三个架构才有可融合的设计逻辑，不能只是流程、数据、应用各干各的，互相看看理解一下就行了，那样是没有充分融合的逻辑基础的。</p><p>&nbsp;</p><p>随着大家对数据要素越来越关注，这种业务架构设计方式，也能够帮助企业更好地界定、利用数据要素，所以，笔者前文才称这种结构化分析方式是业务人员数字化转型的基础，也是“流程管理”需要升级为“业务架构管理”的原因，业务架构管理才是更有“数字”时代特征的业务管理方式。</p><p>&nbsp;</p><p>对DDD情有独钟的读者可能会觉得，那这个层面用DDD可以不可以啊，这方面确实有这样的探索，我的好友张逸老师在他的专著里，另一位好友，TW的王健老师在他们的MEAF中，都有类似的主张，传统方法分析活动级及以上的业务，从任务开始的细化部分转入DDD方法；中台也有对DDD方法的参考，虽然不是完整引入。其实这里是可以从权的，设计方法就像“方言”，它是会考虑使用者习惯的，这就不仅是技术侧的使用者，还包括业务侧的使用者，DDD是很有效的、直通应用设计的方式，不过它的难点则在于向业务侧的导入，也就是，在方法选择上是一个方法做到底，还是两个方法合着用，这没有对错问题，只有从权而已。</p><p>&nbsp;</p><p>好了，根据这个部分介绍，读者也可以“尽量”判断下哪些对方法论的介绍是有助于实现业技融合、架构融合的设计方法，那些介绍还是过去相对分离的思考模式。</p><p>&nbsp;</p><p></p><h2>三、&nbsp;千万不要忽视比设计还要更难的东西</h2><p></p><p>&nbsp;</p><p>在笔者自身的经验看来，企业架构、业务架构都不是什么要上九天揽月的高难度方法，笔者在自己的书中也多次提到，它的复杂属于“规模复杂”，也就是设计范围大带来的规模复杂性，要考虑的范围比较宽，要处理的协同量比较大，加上有标准化的心但是没有标准化的“尺”，所以操作上比较繁琐、折腾，但是这并非企业架构、业务架构独有，只要是在处理这么大范围的问题，换什么方法都一样。</p><p>&nbsp;</p><p>但是这些还不是最困难的东西，最困难的是组织方法，怎么让一个企业能够动起来用它，企业架构，之所以叫这个名字，就说明它不是架构师的架构，而是企业的架构，企业整体参与度越低，它就越不像是企业的工作模式、思维方式，而只是一个用途有限的设计图，它也许带来了一时的设计改进，但是很难成为一个企业内在的持续竞争优势，读者可能觉得又扯远了，这是什么优势啊？这就是兵法有云的最基本的交战原则，“知己知彼”中的“知己”，特别是数字时代的“知己”，清楚知道并随时可看自己的业务结构，以及对应的IT结构，就像有一个可以模拟推演的作战沙盘，能够快速、全面地分析重要决策的实现路径和内外影响，这就是数字时代的“知己”，也是企业数字孪生、管理数字孪生的基础。所以，有效调动企业的参与是比设计更难的事情。</p><p>&nbsp;</p><p>已有的工程组织模式中，业务侧主导并且全面推动的、技术侧主导需求统筹为主的、联合主导分线推进的、局部试点的，各种模式都有，这些组织过程、项目组织结构设计也是需要去深入思考的，不然，空有一身本事，没人配合你玩耍，就只剩孤独寂寞冷了，前文特意说过“共创”这个词，这个词很重要的，一个人的广场舞可能很没意思吧。</p><p>&nbsp;</p><p>笔者在自己的项目中曾经回答过客户这样一个问题，客户关心企业架构如何落地，其实企业架构落地的问题在于是否能将企业架构驱动IT开发的管理模式落地，而非只是落地架构设计图，只有将企业架构渗入到IT管理乃至渗透到业务管理中，企业架构才能自然落地，很多项目上出现过架构一套，实施一套的情况，其表层原因是大家对架构设计理解有分歧，而深层原因则是架构驱动的IT管理、业务管理体系没有真正建立起来。</p><p>&nbsp;</p><p>除了组织之外，在设计过程中能够动员参与人员真的把只是提炼出来，而不是只把业务过程贡献出来也很重要，一个系统到底是不是有潜力的系统，要看其中包含了多少业务知识，这个在梳理过程中是要努力发掘，加强引导的，毕竟提炼知识是个“烧脑”的活儿，需要持续盯着。未来大模型工具会逐渐加入开发行列中，当复杂代码的实现逐渐被“屏蔽”，我们更多的精力是要转移到业务知识萃取上了，如何让业务系统可以教人办业务，而不是人学会了办业务再去用系统，这是B端软件要解决的 “最大体验”问题。</p><p>&nbsp;</p><p></p><h2>四、&nbsp;利用零代码工具加强理解</h2><p></p><p>&nbsp;</p><p>这部分看似有点儿跑题，不过并没有，这是笔者最近对企业架构研究和学习的体会，由于偶然的原因，今年接触到零代码工具，也认识了一个新的合作伙伴，伙伴云，在他们的帮助下，笔者开始了基于零代码平台设计企业架构学习工具的尝试，不愧是零代码，确实是只要逻辑想清楚了，动起手来真的很快，目前笔者设计了五六十张架构元素信息和关系表，算是搭建了一个架构学习工具的小框架，后边还要在“装修”上花点儿功夫，然后就可以出来“面市”了。笔者觉得这个小工具除了学习，也可以做一定的架构设计和资产管理用，后续笔者还会考虑将这个小工具跟我另外的合作伙伴，数孪模型科技、优诺等专业工具厂商的高端工具进行数据对接，方便使用者日后“消费升级”。</p><p>&nbsp;</p><p>从笔者的经验看，真的可以基于零代码工具，以数据实体为核心建立起一个连接4个架构的简易工具，这个工具的设计过程完全可以成为学习者认真思考架构内核的过程，也体现了笔者前边说的，逻辑级数据模型的重要性。为架构建立架构，而不是只关注设计方法、组织过程，会让学习者更深入内核去理解架构，能架构别人总得先能架构自己吧，不然为啥很多方法都有元模型这个稀奇古怪的东西，毕竟，如果连自己结构都说不清，怎么能教会别人理清结构呢？零代码工具又完全没有了编程的困扰，一心只关注“观察”、“思考”、“设计”，实现速度也快，是学习架构的好帮手。笔者在企业内训课程上也跟技术人员推荐过零代码工具，笔者认为搞全代码开发的人，偶尔用用零代码工具挺好，不写码了，少了个重要手段，反倒会更关注对设计对象的识别了。</p><p>&nbsp;</p><p>好了，本文就到这里，后续笔者有一系列关于企业架构、业务架构基础知识的文章会在InfoQ的专栏上发布，这篇就做个开始吧。也欢迎大家找笔者合作，笔者从来灵活第一，不执一边，能把咨询做成培训，也能把培训做成咨询，反正目标都一样，是帮助有意愿的人把架构方法落地用起来。</p>",
    "publish_time": "2024-02-05 19:54:10",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]