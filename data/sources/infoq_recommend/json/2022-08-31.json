[
  {
    "title": "谷歌宣布扩展3个新的亚太云区域",
    "url": "https://www.infoq.cn/article/9hbdPFw3xLLJdtu4Agw9",
    "summary": "<p><a href=\"https://gcp.infoq.cn/index.html\">谷歌云</a>\"在全球拥有34个地区和103个可用区域，为全球200多个国家和地区的客户提供云服务。最近，谷歌宣布将把业务扩展到马来西亚、泰国和新西兰这3个新的云区域。此前宣布的其他6个区域分别是柏林、达曼、多哈、墨西哥、特拉维夫和都灵。</p><p>&nbsp;</p><p>谷歌云亚太区副总裁Karan Bajwa在谷歌云博客上发表的一篇<a href=\"https://cloud.google.com/blog/products/infrastructure/announcing-new-google-cloud-regions-in-asia-pacific\">文章</a>\"中表示，谷歌的云计算扩张是基于IDC的一项预测数据，到2025年，亚太地区（不包括日本）的云服务总支出将达到2820亿美元。此外，文章中引用的另一份<a href=\"https://www.businesswire.com/news/home/20211110006478/en/Asia-Pacific-Sourcing-Market-Driven-by-Cloud-Services-in-Q3\">研究报告</a>\"来自Information Services Group于2021年做出的一项调查。调查指出，2021年第三季度，云服务占亚太地区IT和商业服务支出的84%以上，是所有地区中比例最高的。</p><p>&nbsp;</p><p>Bajwa还在博文中解释说，随着数字服务需求的增长，新的云区域出现了。在这些市场的各个行业，尤其是电信、制造业、金融服务和零售领域，云应用正在不断增长。</p><p>&nbsp;</p><p>谷歌云区域是客户可以在云计算环境中部署云资源的地理位置。至少，所有的谷歌云区域都提供诸如计算引擎、谷歌Kubernetes引擎、云存储、持久磁盘、CloudSQL、虚拟私有云、密钥管理系统、云身份和秘密管理器等服务。其他产品通常在新地区启动后的6个月内推出。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8f/8f0d83ef6fa2b36bebf2d84dab0d00c2.png\" /></p><p>谷歌目前落后于其他公共云供应商亚马逊云科技和微软<a href=\"https://www.infoq.cn/topic/Azure\">Azure</a>\"。根据<a href=\"https://www.srgresearch.com/articles/huge-cloud-market-is-still-growing-at-34-per-year-amazon-microsoft-and-google-now-account-for-65-of-all-cloud-revenues\">IT市场调查机构Synergy Research Group</a>\"的数据，亚马逊云科技以34%的全球市场份额领先，其次是微软（21%）和谷歌（10%）。在建设新的数据中心方面，这三家公共云供应商加起来也是最主要的投资支出方。例如，仅在2022年，谷歌就打算在数据中心和美国办公室投资95亿美元。</p><p>&nbsp;</p><p>Trade Me的DevOps/云工程师Simon Merrick在推特上表示欢迎云供应商在新西兰推出服务。</p><p>&nbsp;</p><p></p><blockquote>现在来了。@GoogleCloud_ANZ加入@awscloud和@Azure在新西兰开设数据中心。</blockquote><p></p><p>&nbsp;</p><p>最后，<a href=\"https://www.infoq.cn/topic/google\">谷歌云</a>\"预计到今年年底将在整个亚太地区拥有14个云区域，而亚马逊云科技的云区域只有13个，其中3个计划设在印度、澳大利亚和新西兰。此外，<a href=\"https://www.infoq.cn/topic/alibaba\">阿里巴巴</a>\"目前有21个云区域，今年没有宣布新的区域。在亚太地区，甲骨文、微软和IBM预计将分别拥有9个、17个和7个云区域。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/08/google-cloud-regions-apac/\">Google Announces Three New Regions in Asia Pacific</a>\"</p>",
    "publish_time": "2022-08-31 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "《架构师成长计划》联邦学习的研究与应用实践",
    "url": "https://www.infoq.cn/article/bvZD9ZQtN7wlD9888RBm",
    "summary": "<p>国际学术期刊Science/AAAS和英特尔在全球首次联袂推出第一季《架构师成长计划》以来，吸引了无数架构师踊跃参与，获得业内广泛赞誉。为持续助力架构师把握数智机遇，构建未来，第二季《架构师成长计划》全新升级，强势归来！业内顶尖架构师大咖齐聚，为架构师群体量身打造系统成长课程，带来涵盖云游戏、云原生、联邦学习、生信大数据、算力网络、云网融合等多个热门话题的前沿技术及案例实践。</p>\n<p>当前云计算、移动互联、人工智能、大数据、物联网等技术在重塑生活生产并带来诸多便利的同时，也加剧了人们对隐私泄露、数据安全的担忧。5G网络的普及，使得大量终端设备接入互联网或物联网，持续产生海量数据，造成了数据的爆炸式增长，而数据的交互、共享或流通却因对安全和隐私的担忧而困难重重，让以数据为养料的人工智能的发展受到严重限制。在此背景下，联邦学习应运而生，它是打通数据孤岛、避免隐私泄漏，在更高效地共享数据价值的同时还能更好地保护数据隐私的关键技术。</p>\n<p>大咖荟萃、权威解读，英特尔《架构师成长计划》第三讲精彩继续！特邀中国人工智能开源软件发展联盟副理事长王健宗、英特尔软件和高级技术系统部首席技术架构办公室产品安全部门高级总监郭伟，以及中国信息通信研究院云计算与大数据研究所、大数据与区块链部副主任闫树。他们将从概念原理、应用场景、实践用例、技术解析等多个方面，由浅入深地讲解联邦学习的应用优势和价值，并会对英特尔® SGX技术进行全方位的介绍和解析，包括其如何凭借更强的可信性和隔离机制，来兼顾联邦学习的数据防护需求与数据处理效率，以及在加速相关应用落地实践方面的重要作用。除了干货满满，第二季还设置有“互动有礼”活动，参与即有机会获取精美礼品。点击链接观看完整课程：<a href=\"https://bizwebcast.intel.cn/eventstart.aspx?eid=315&amp;tc=4nn5lm9ouy&amp;frm=InfoQ_2\">https://bizwebcast.intel.cn/eventstart.aspx?eid=315&amp;tc=4nn5lm9ouy&amp;frm=InfoQ_2</a></p>\n<p><strong>精彩亮点</strong></p>\n<p>为什么说联邦学习是加速数据要素化市场建设和AI应用普及的关键技术？</p>\n<p>什么是联邦学习？它适用于哪些场景？相比传统隐私保护手段优势和价值何在？</p>\n<p>如何构建更安全的多方计算平台，并实现各方数据高效且安全的协同及利用？</p>\n<p>英特尔®SGX为何能在强化数据安全防护的同时，优化和提升其处理效率？</p>\n<p><strong>议程</strong></p>\n<p>圆桌讨论：基于可信执行环境的联邦学习</p>\n<p>王健宗 中国人工智能开源软件发展联盟副理事长</p>\n<p>郭伟 英特尔软件和高级技术系统部首席技术架构办公室产品安全部门高级总监</p>\n<p>闫树 中国信息通信研究院云计算与大数据研究所大数据与区块链部副主任</p>\n<p>课程分享：联邦学习的研究与应用实践</p>\n<p>王健宗 中国人工智能开源软件发展联盟副理事长</p>\n<p>课程分享：英特尔®SGX助力的机密计算</p>\n<p>郭伟 英特尔软件和高级技术系统部首席技术架构办公室产品安全部门高级总监</p>",
    "publish_time": "2022-08-31 10:06:52",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "凯捷中国万学凡：IT 团队的数字化转型实践",
    "url": "https://www.infoq.cn/article/RuOHmW9rMy9oBC7EIu9Y",
    "summary": "<p>数字化转型的思考框架是什么？</p><p></p><p>大家好，首先特别感谢各位能够出席 DTDS 全球数字人才发展峰会，我是万学凡。</p><p></p><p>我今天分享的主题是 IT 团队的数字化转型实践，希望就大型 IT 团队在数字化转型过程中如何发展、建设分享一些我的经验。在切入正题之前，我有两个问题和大家探讨。</p><p></p><p>这两个问题来自于我三个月前在 InfoQ 组织的 TGO 鲲鹏说上分享的《大型研发团队的数字化魔方》，主题思想是：在数字化转型时代，随着研发团队越来越大，组织该如何思考研发团队的建设？</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1e/1ec9aa9f4228e36ce1c4169937641d07.png\" /></p><p></p><p></p><p></p><p>有两个主题方向，一个是 IT 团队的核心价值是什么？在思考这个问题的过程中，我从两个角度来分析。</p><p></p><p>第一个角度是规划视角，即如何和竞争对手在战略上形成差异，以及为目标顾客创造什么样的价值。如果将它深入解读，即如何在战略上形成差异化的竞争力：</p><p>我们的研发团队核心价值是什么？如何真正地以客户为中心，为客户创造什么样的价值？</p><p></p><p>第二个是能力视角，即如何做组织设计：</p><p>如何真正地围绕企业战略目标和业务目标有效分配资源，以此来提升组织能力，更好地支撑数字化转型的落地？</p><p></p><p>这是我思考这个问题的两个基本逻辑，围绕这两个大的逻辑，我们从规划战略入手，形成业务框架，进而形成技术框架，再到我们的组织架构、运营模型，以此来支撑整体的数字化转型。这是我与大家分享的第一个框架。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e8/e8c3a55c883f934ec312e757268d2064.png\" /></p><p></p><p></p><p>第二个主题，是企业在规划 IT 团队数字化转型的过程中，什么样的工作矩阵是行之有效的？我认为有三层：</p><p></p><p>第一层是战略与组织，这里要考虑两件事情：第一个是围绕着战略的投资组合如何做？哪些方向上要加大投资，哪些方向会延缓投资，哪些方向维持投资，这是 IT 团队 Leader 需要思考的问题；第二个是组织架构如何搭建和治理？这是战略与组织层面的内容，很多时候要和 HR 一起思考。</p><p></p><p>第二层有很多细节，这里只聊五大块。第一是产品管理，很多组织里也叫需求管理；第二个是技术架构；第三个是现在很火的研发效能；第四个是项目治理；第五个是运维演进。其实这 5 大块可以层层展开，总体说我把它归纳为产品与研发。</p><p></p><p>第三层叫运营平台，一支 IT 团队需要关注什么？关注财务指标，关注人才的选用育留，以及相应的能力建设和绩效评估体系。</p><p></p><p>切入正题之前，快速介绍一下我自己，我叫万学凡，是凯捷中国VP、数字化团队的负责人，也是凯捷咨询的首席顾问。</p><p></p><p>在行业摸爬滚打多年，我正在组建着越来越大的数字化研发团队，现在团队有超过 1200&nbsp;名专业顾问，我们组织本身也经历着数字化转型。我常常思考我的团队如何变得越来越高效，如何去搭建更好的工程师文化并建立人才观。</p><p></p><p>在服务众多客户的同时，我有幸参与到他们的数字化转型实践之中，了解到这些企业的 IT 团队如何从组建走向成熟。</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/bb/bbb6df1b89f83c24c178929d1184753d.png\" /></p><p></p><p></p><p>今天的分享将围绕黄金圆环展开，什么是黄金圆环？最里层的是 WHY，中间层是 HOW，最外层是 WHAT。很多人思考问题的方式是从外向内的，先看外面的表象是什么，再看如何做，最后思考问题本身。在过往 10&nbsp;余年的工作中，我认为这是一个比较好的框架，思考问题、构建问题、构建问题解决方案的方式应该是由内向外的，即先谈 WHY，再谈 HOW，最后谈 WHAT。这也是我今天分享的主线。</p><p></p><p></p><h3>数字化团队应具备的能力</h3><p></p><p></p><p>首先，IT 团队应该具备的数字化能力是什么，先讲 WHY，应该是什么样子；然后讲HOW，主要分享两个方面：一个是组织设计，另外一个是工程师文化；最后讲 WHAT，以此做一个总结，即 IT团队的组织能力构建应该是什么样子。</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4a/4a54aa979feb2c245a8c7964322168bc.png\" /></p><p></p><p></p><p>IT 团队应该如何构建、具备哪些数字化能力？这是我过去一年在搭建上千人的数字化研发团队中总结的三个点。</p><p></p><p>第一点是业务思维，或者叫商业思维，就是如何以客户为中心。在很多大型的数字化 IT 团队中，有的把精力放在技术本身，有的放在业务解决方案上，却往往忽略了商业思维。我经常与团队探讨，我们既要“埋头拉车”，又要“抬头看路”，真正地围绕“以客户为中心”，构建商业思维。</p><p></p><p>第二个是解决方案思维。很多 IT 团队在数字化转型的过程中，思考解决方案思维的时候都会比较狭隘，微服务架构，领域驱动设计，DevOps，BDD，TDD……这都很好，但是我认为脱离了业务谈技术是空谈，所以解决方案思维一定是解决某个场景的具体业务问题，基于此提出业务和技术相融合的解决方案。</p><p></p><p>第三个是团队思维。IT 团队在不断地发展过程中，需要培养一群真正的技术领导者，技术领导者能带领团队朝目标更好地前进。我们今天看到很多 IT 工程师聚焦在技术本身，力争写出更好的代码。真正好的技术领导者要不要写出很好的代码呢？要，但同样也需要有很好的团队思维：需要能够培养团队、发展团队、建设团队，这样才能真正地让整个团队具备好的数字化能力。</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/38/38aca6ce55e931620ac95eb717f757c0.png\" /></p><p></p><p></p><p>以赋能为核心的组织架构设计</p><p></p><p>HOW，就是该如何做。第一，做组织设计的时候，要搭建以能力为核心的平台型组织架构，这个非常重要。什么叫“以能力为核心”？我认为在未来的 IT 团队数字化转型过程中，能力发展、能力建设是最重要的话题，所以我在搭建自己团队的组织架构的时候，也是通过这个维度来思考的。</p><p></p><p>最上层的是战略与规划，包括业务架构设计，技术架构治理；中间一层围绕着各个 Account（你可以认为是各个产品线）的产品与研发。但是各个产品线之间往往会形成竖井，这是很难避免的，如何打破组织间的竖井？通过最上一层的战略与规划，通过业务架构设计，技术架构治理，能够横向地把能力打通；第三层，通过运营平台的人才培养、赋能体系、绩效评估，能够进行横向能力建设。</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/3b/3bf1de81a1c61f2f6911abeeb4f2732b.png\" /></p><p></p><p></p><p></p><p>在 IT 团队数字化转型过程中，“以资产为核心的解决方案管理”是其中的一个核心要素，很多企业都在谈如何能够提升 IT 团队的能效，建议从三个方面入手：资产、技术和胜任力。</p><p></p><p>很多IT团队在谈及组织能效提升的过程中，首次谈到的是研发效能，研发效能就是以技术为核心，提升 IT 团队的效率。但也要思考另外两个因素，一个是人的因素，人的因素如何考量？这里我提到的叫胜任力。</p><p></p><p>第二个是如何形成好的资产？很多组织里面建设平台型组织架构的时候，往往忽略了这一点，或者大家觉得这一点很难在组织中落地实行。对于产品型公司，可能相对来说较容易落地，可以在不断地打磨组织的业务资产和技术资产中形成一套产品，但是对于非产品型公司则会困难一些。</p><p></p><p>今天先谈两点：一是以资产为核心，该怎么做？第二点是以胜任力为核心，该怎么看？</p><p></p><p>以资产为核心，解决方案的孵化特别重要，包括四个方面：第一，标准化解决方案。一定要形成不一样的解决方案，解决客户不同的问题，但是在这些不一样的解决方案层面，有一些共性的东西可以抽象和提炼出来，这就是标准化的解决方案。</p><p></p><p>比如研产供销服，供应链等等，一定要有可以沉淀的标准化的解决方案，通过标准化解决方案来打破产品和产品之间、部门和部门之间的“部门墙”，横向拉通整个部门的能力。</p><p></p><p>第二，标准化文档。很多的企业推行敏捷，在践行敏捷的过程中，一定要有标准化的文档构建组织能力。</p><p></p><p>第三，可以执行的代码。无论是产品进公司还是非产品进公司，构建组织级平台的时候，一定有通用的组件或者API，可以包装、固化下来的，就叫做可执行的代码。</p><p></p><p>第四，相应的人与组织、以及核心团队。以上就是以资产为核心的解决方案管理。</p><p></p><p>胜任力模型是 HR 行业里面通用的一套框架，每个企业规划胜任力模型都不太一样，比如技术团队的胜任力如何看？如何为一个好的 IT 技术人员？可以从以下三个方面进行评价：</p><p></p><p>第一，他应该充分意识到自己专业技术领域的最新发展和最佳实践，比如一个非常好的Java后台工程师，应该具备理解 Java 的行业发展趋势是什么，最佳实践是什么。</p><p></p><p>第二，他不仅能和相关的 IT 工程师讲清楚某个技术的好处和限制，还能和不懂技术的人讲清楚。</p><p></p><p>举个例子：我在一个行业领域讲，什么是数字化转型？数字化转型对于一个企业意味着什么？工程师文化又是什么？这并不难，但是要给我 70 多岁的父亲母亲讲清楚什么是数字化转型？什么是工程师文化？这就很困难。但是如果能用他们的语言讲清楚，那么我对数字化转型的理解就又上升了一个台阶。</p><p></p><p>第三，如果我们精通一个工具，一门技术，在去完成一项工作的时候，紧迫感会更强，效率会更高。每个人都有自己擅长的技术，需求分析师擅长需求分析，咨询顾问擅长咨询方法论，程序员知道如何写好代码、如何搭建好的体系架构、如何践行DDD，无论是什么样的人物画像，都有自己的技术专长。</p><p></p><p>衡量一个人的技术专长好或者不好，都有一套胜任力模型的框架，以此来指导一个团队或个体，在其发展过程中应该如何去演进发展。</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ec/eca257e99b2baed55912645d73f084cd.png\" /></p><p></p><p></p><p></p><p>再举个例子，我的团队如何用胜任力模型去评估一个人的通用胜任力和专业胜任力？大家可以看到如上这个图，有CI/CD的能力、架构能力、英语能力等等，根据每个人的情况打出相应的分数——从 0 分到 5 分做出评估。这样就知道他在不同维度中的评分，以此来指导这个员工在组织中的晋升和发展方向。</p><p></p><p></p><h3>为团队成长投资</h3><p></p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6f/6fe75e3a8c703488ec9f5701011c9680.png\" /></p><p></p><p></p><p>第二个 HOW，是工程师文化。凯捷沈阳刚刚装修设计了一个新的办公室。关于敏捷团队的办公室设计，我在公众号中写过三篇文章，最近的一篇就是关于这次沈阳办公室的装修设计：<a href=\"https://mp.weixin.qq.com/s?__biz=MzU3NzY0Nzk1NA==&amp;mid=2247484823&amp;idx=1&amp;sn=abc6c783fe16fff6ed7ceec35bc20857&amp;scene=21#wechat_redirect\">面向未来的办公室：敏捷团队的办公室设计</a>\"</p><p></p><p>我认为工程师文化建设，能够让一个 IT 团队在数字化转型过程中变得更加高效，这里需要关注三件事情：</p><p></p><p>第一，需要有更加敏捷的工作环境。关于更加敏捷的工作环境，我思考了两个方面：第一作为社会锚点，专为人情来设计。好的工程师文化的工作场景是，大家在一起不仅是为了工作，也包含了很多“人情”，所以在这个工作的场所里面，可以创造很多偶遇的机会，可以进行除了工作之外的交流。第二，专为分享而设计。一个好的 IT 团队，一定有很多学习和分享的活动发生，我也鼓励在 IT 团队中专门设置读书角，鼓励团队成员更多地阅读。</p><p></p><p>第二，有公共开放区，大家可以在开放区进行主动的学习分享活动，这是作为学习分享空间而做的设计。</p><p></p><p>第三，作为合作枢纽，专为协作而设计，在办公空间中要有很多的白板和小会议室，大家可以在会议室里展开充分的讨论，也可以随时停下来，在白板上展开互动和协作。</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/51/51faf71c4acb552da30f76cca6fb073e.png\" /></p><p></p><p></p><p></p><p>讲到学习和分享的氛围，向大家推荐一个工具叫技术雷达。什么叫技术雷达？我们主张每个大的 IT 团队都有自己的技术雷达，这个技术雷达会分享未来的 6-12个月，哪些技术是要采用的，哪些技术是要探索的，哪些技术是要停下来缓一缓的，把这个技术雷达张贴在办公室公共区域，让所有人都能去理解和学习。</p><p></p><p>每个团队也会看到他们要采取的新技术栈是什么，要尝试哪些不一样的技术方向，理解行业最新发展的趋势。技术雷达能够帮助我们打造学习和分享的氛围，构建工程师文化。</p><p></p><p>这里面我总结为两个点：</p><p></p><p>第一，通过技术能力组建，来加速整个 IT 项目的开发与交付，这个与资产相关。</p><p></p><p>第二，以人为本，通过学习和分享的氛围、技术雷达，让团队中的工程师都能找到属于自己的技术信仰。同样，我认为很多 HR 同学，以及技术领导者需要注意一个点，为团队的成长投资。</p><p></p><p>为此，我专门成立了一个叫数字化研修院的团队，就是把团队的能力做整合，从业务解决方案到软件架构，到开发运维、通用能力、业务建模、测试等等整合起来，形成一个大的能力建设图谱，赋能团队。</p><p></p><p>再深入讲一下，如何在团队里面形成很好的学习和分享氛围？有个比较好的实践，大家看到课程体系图谱里面的所有课程，包括业务、技术、运维、测试，所有的课程都来自于团队。</p><p></p><p>我们团队里有一个很好的学习和分享文化，就是我们鼓励团队能够主动开发、设计一些好的培训课程。开发和设计完成之后，面向整个大团队，做培训和分享，这是一个方面。</p><p></p><p>同样我们也鼓励团队能够举起手来说，我想去获取什么样的知识——一方面有人说，我愿意主动地去分享这些知识，一方面有人说我想去获取这样的培训，这样就在我们就形成了一个有效的学习和分享的闭环。</p><p></p><p>同样作为一个团队的 HR，作为一个团队的 Leader，要形成非常好的 OKR或者 KPI 的体系，来鼓励团队做更多的学习和分享，为团队的成长投资。</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b5/b546572a79b260e55c65ab74f5fced79.png\" /></p><p></p><p></p><p>HOW 就是如何去搭建更具包容性的IT团队？这里分享一个话题，叫做要消除隐性偏见。</p><p></p><p>在 IT 团队里，很多时候会有一些隐性偏见，比如说认为女性 IT 工作者不如男性程序员，其实这是完全不对的。现在在我的团队中，IT 女性的比例超过了40%，我们希望要让消除隐性偏见能够弥漫在公司的氛围中，能够形成 IT 团队的文化和价值观，构建更具包容性的 IT 团队。如果一个团队的包容性好，它会提升团队的集体智力，进而提升整个团队的生产力。</p><p></p><p>所以说另外一个 HOW，就是在招聘过程中就要消除隐性偏见，不断地构建更加包容性的 IT 团队，来提升整个团队的集体智慧。</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/de/de8aa16797c8eadf89a8d2c193d56f30.png\" /></p><p></p><p></p><p>推荐一本书，《卓有成效的工程师》，今天很多内容也来自于这本书。我认为卓有成效是一种超凡的境界，全书描绘了一种迅捷、高效、积极、友善的工作方式，在这个不断内卷的数字化时代，很多人都习惯于把血汗和泪水当做勋章，我本人并不赞同，我认为一定有一种更加从容的解决之道，让我们在工作中提高效率，在生活中更加自如。</p><p></p><p></p><p>最后总结，我认为在数字化转型中 IT 团队组织能力的构建，包括三个大的方面：</p><p></p><p>员工思维：需要具备三大思维，第一，商业思维，以客户为中心；第二，解决方案思维，如何去形成好的解决方案，包括核心团队、标准化的代码、标准化的解决方案等等；第三，团队思维，我提倡大家要有团队意识，成为技术领导者。员工能力：以能力为中心的组织设计，有三层：第一层，战略与组织的架构设计；第二层，产品与研发；第三层是运营平台。搭建以能力为核心的组织架构需要通过解决方案、胜任力、研发效能，横向地打通不同产品线、不同部门，建立以能力为核心的平台型组织。员工治理：重点分享的是团队胜任力，包括如何用胜任力模型指导员工和团队的发展。我们谈的不仅是敏捷研发，而是整个组织的敏捷性。</p>",
    "publish_time": "2022-08-31 10:17:31",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "字节跳动开源Volo：国内首个基于Rust语言的RPC框架",
    "url": "https://www.infoq.cn/article/NR3Rd5YlUkarAhKyrZUe",
    "summary": "<p>8 月 30 日，字节跳动基础架构的开源项目 <a href=\"https://www.infoq.cn/article/9iXLu4KjAPg3ufHYmM3J\">CloudWeGo</a>\" 正式发布 Rust RPC 开源框架 Volo。Volo 是一个轻量级、高性能、可扩展性强、易用性好的 Rust RPC 框架，使用了 Rust 最新的 GAT 和 TAIT 特性。</p><p></p><p>GitHub地址：https://github.com/cloudwego</p><p>官网：www.cloudwego.io</p><p></p><p>在字节内部，Volo 已经落地多个业务和基础组件，并且取得了超预期的性能收益（与 Go 版本对比，不那么公平）。</p><p></p><p>Volo 与其它 CloudWeGo 开源项目一样，坚持内外维护一套代码，为开源使用提供了强有力的保障。同时，我们观察到 Rust 开源社区在 RPC 框架这块还比较薄弱，Volo 的开源希望能为社区的完善贡献一份力量，同时也能完善 CloudWeGo 生态矩阵，为追求性能、安全性和最新技术的开发者、企业以及 Rustaceans 开发 RPC 微服务、搭建云原生分布式系统提供强有力的支持。</p><p></p><p>本文会为大家简单介绍 Volo 及其相关生态，并为大家提供一个简单的 Rust 与 Go 的选型建议。</p><p></p><h2>项目缘起</h2><p></p><p></p><p>其实 Volo 的创始成员来自于 Kitex 团队（CloudWeGo 开源的 Go RPC 框架），当时我们在 Go 上做了非常深度的性能优化，也因此深刻感受到了在 Go 上做性能优化所面临的阻碍。因此，我们选择了 Rust，期望能够给需求极致性能、安全和指令级掌控能力的业务一个合适的选择。而 RPC 框架是分布式系统中重要的组成部分，Volo 就这么诞生了。</p><p></p><h2>特性</h2><p></p><p></p><h4>高性能</h4><p></p><p></p><p>Rust 以高性能和安全著称，我们在设计和实现过程中也时刻以高性能作为我们的目标，尽可能降低每一处的开销，提升每一处实现的性能。</p><p></p><p>首先要说明，和 Go 的框架对比性能是极不公平的，因此我们不会着重比较 Volo 和 Kitex 的性能，并且我们给出的数据仅能作为参考，希望大家能够客观看待。同时，由于在开源社区并没有找到另一款成熟的 Rust 语言的 Async 版本 Thrift RPC 框架，而且性能对比总是容易引战，因此我们希望尽可能弱化性能数据的对比，仅会公布我们自己极限 QPS 的数据。</p><p></p><p>在和 Kitex 相同的测试条件（限制 4C）下，Volo 极限 QPS 为 35W。同时，我们内部正在验证基于 Monoio（CloudWeGo 开源的 Rust Async Runtime）的版本，极限 QPS 可以达到 44W。</p><p></p><p>从我们线上业务的火焰图来看，得益于 Rust 的静态分发和优秀的编译优化，框架部分的开销基本可以忽略不计（不包含 syscall 开销）。</p><p></p><h4>基于 GAT 设计</h4><p></p><p></p><p>我们热爱并追随最新的技术，Volo 的核心抽象使用了 Rust 最新的 GAT 特性，在这个过程中我们也借鉴了&nbsp;Tower&nbsp;的设计。Tower 是一个非常优秀的抽象层设计，适用于非 GAT 的情况下。在此我们非常感谢 Tower 团队。</p><p></p><p>Tower：https://github.com/tower-rs/tower</p><p></p><p>通过 GAT，我们可以避免很多不必要的&nbsp;Box&nbsp;内存分配，以及提升易用性，给用户提供更友好的编程接口和更符合人体工程学的编程范式。</p><p></p><p>我们的核心抽象如下：</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/f6/c5/f6ea2639969c9d180dc630d3f0307ac5.png\" /></p><p></p><p>由于使用了 Rust 的 GAT 特性，因此我们可以解决返回异步 Future 带来的生命周期问题。同时，如果配合&nbsp;type_alias_impl_trait&nbsp;使用，效果更佳，比如实现 Timeout 可以使用如下方式：</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/4d/9a/4d9d46245c65254a43d6fa178096d19a.png\" /></p><p></p><h4>易用性好</h4><p></p><p></p><p>Rust 以难学难用而闻名，我们希望尽可能降低用户使用 Volo 框架以及使用 Rust 语言编写微服务的难度，提供最符合人体工程学和直觉的编码体验。因此，我们把易用性作为我们重要的目标之一。</p><p></p><p>比如，我们提供了 Volo 命令行工具，用于初始化项目以及管理 IDL。同时，我们将 Thrift 及 gRPC 拆分为两个独立（但共用一些组件）的框架，以提供最符合不同协议语义的编程范式及接口。</p><p>我们还提供了&nbsp;#[service]&nbsp;宏（可以理解为不需要&nbsp;Box&nbsp;的&nbsp;async_trait）来使得用户可以无心理负担地使用异步来编写&nbsp;Service&nbsp;中间件。</p><p></p><p>通过这个宏，我们编写&nbsp;Service&nbsp;中间件可以简化到如下图：</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/70/cd/70f13be6743d8bd420b3237f902e00cd.png\" /></p><p></p><h4>扩展性强</h4><p></p><p></p><p>受益于 Rust 强大的表达和抽象能力，通过灵活的中间件 Service 抽象，开发者可以以非常统一的形式，对 RPC 元信息、请求和响应做处理。</p><p></p><p>比如，服务发现、负载均衡等服务治理功能，都可以以 Service 形式进行实现，而不需要独立实现 Trait。相关的扩展，我们会放在&nbsp;github.com/volo-rs&nbsp;组织下，也欢迎大家贡献自己的扩展到&nbsp;volo-rs。</p><p></p><h2>生态系统</h2><p></p><p></p><p>Volo 是 RPC 框架的名字，随着 Volo 一起开源的有以下几个项目：</p><p></p><p>1. Volo-rs：Volo 的相关生态。</p><p>2. Pilota：Volo 使用的 Thrift 与 Protobuf 编译器及编解码的纯 Rust 实现（不依赖 protoc）。</p><p>3. Motore：Volo 参考 Tower 设计的、使用了 GAT 和 TAIT 的 middleware 抽象层。</p><p>4. Metainfo：Volo 用于进行元信息透传的组件，期望定义一套元信息透传的标准。</p><p></p><h2>选型建议</h2><p></p><p></p><p>“什么情况下应该用 Rust、什么情况下应该用 Go？”这是一个非常经典的问题。在 Volo 团队看来，Rust 和 Go 并不是对立关系，而是合作关系，取长补短。</p><p></p><p>对于性能不敏感的应用、重 IO 的应用以及需要快速开发快速迭代胜过稳定性的应用，推荐使用 Go，这种应用使用 Rust 并不会带来明显的收益。</p><p></p><p>对于需要极致性能，重计算的应用，以及需要稳定性并能接受一定开发速度损失的应用，推荐使用 Rust，Rust 在极致性能优化和安全性上的优势可以在这类应用中得以发挥。</p><p></p><p>当然，还有一个很重要的考虑因素，是团队现有的技术栈，即技术储备和人才储备。</p><p></p><h2>总结</h2><p></p><p></p><p>希望本文能让大家对于 Volo 及相关生态有一个基本的了解。同时，Volo 还处于早期阶段，欢迎各位感兴趣的同学一起加入，共同建设 CloudWeGo 及 Rust 开源社区，向 Volo 提交 Issue 和 PR 共建 Volo。我们诚心期待更多的开发者加入，也期待 Volo 助力越来越多的企业快速构建云原生架构。如果企业客户想内部试用，我们可以排期提供专项技术支持和交流。</p><p></p><p>参考资料</p><p></p><p>Volo 概览：https://github.com/cloudwego/volo</p><p>Volo Tutorial：https://www.cloudwego.io/zh/docs/volo/</p><p>Volo 文档：https://docs.rs/volo</p><p>Volo-rs 组织：https://github.com/volo-rs</p>",
    "publish_time": "2022-08-31 11:55:12",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "YOLOX-PAI:加速YOLOX,比YOLOV6更快更强",
    "url": "https://www.infoq.cn/article/GitPuxirzKxtpAh2Gizs",
    "summary": "<p></p><h3>导言</h3><p></p><p></p><p>近日，<a href=\"https://www.aliyun.com/?utm_content=se_1008364713\">阿里云</a>\"<a href=\"https://xie.infoq.cn/article/462125fa016e696d638206688\">机器学习平台团队PAI</a>\"通过自研的PAI-EasyCV框架复现YOLOX算法，并结合了PAI自研的PAI-Blade推理加速框架优化模型性能，使得加速过后的YOLOX-PAI在速度和精度上都比现阶段的轻量级目标检测的SOTA算法YOLOV6&nbsp;提速约20%，同时，<a href=\"https://xie.infoq.cn/article/380f99bbd0bf7f28a937071b2\">PAI-EasyCV</a>\"提供高效简洁的模型部署和端到端推理接口，供社区快速体验使用YOLOX-PAI的功能。</p><p></p><p>目前，EasyCV和Blade项目已在<a href=\"https://www.baidu.com/link?url=aPfgPN6pfnVBYOJ6KX7_ugYUl-Gpj9xjTljtR7OSB7i&amp;wd=&amp;eqid=a434d4c90000e74d00000003630ee39a\">GitHub</a>\"上开源：</p><p></p><p>https://github.com/alibaba/EasyCV</p><p></p><p>https://github.com/alibaba/BladeDISC</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6f/6fc4aa5f417fa30b7703b40a34fc4032.jpeg\" /></p><p></p><p></p><h3>实现方案</h3><p></p><p></p><p>1.提供了一套Apache&nbsp;License&nbsp;训练/优化/推理的代码库以及镜像，可以实现当前社区40+mAP&nbsp;量级最快（相比&nbsp;YOLOV6&nbsp;mAP提升0.4/加速13~20%）的目标检测模型。</p><p></p><p>2.调研了YOLOX相关的改进技术和消融实验，总结了其中一些相对有帮助的改进，并以配置的方式提供出来。</p><p></p><p>3.对目标检测的端到端推理进行灵活封装及速度优化，在V100上的端到端推理为3.9ms，相对原版YOLOX的9.8ms，加速250%，供用户快速完成目标检测推理任务。</p><p></p><p>本文，我们将重点介绍如何基于PAI-EasyCV使用PAI-Blade优化模型推理过程，及如何使用PAI-EasyCV进行模型训练、验证、部署和端到端推理。欢迎大家关注和使用PAI-EasyCV和PAI-Blade，进行简单高效的视觉算法开发及部署任务。</p><p></p><p></p><h3>YOLOX-PAI&nbsp;精益求精的算法改进</h3><p></p><p></p><p>YOLOX-PAI是阿里云机器学习平台PAI&nbsp;的开源计算机视觉代码库EasyCV中集成的&nbsp;YOLOX&nbsp;算法。通过对YOLOX&nbsp;算法的分析，结合检测技术的调研，从以下4个方向对原版的YOLOX进行优化，</p><p></p><p>Backbone&nbsp;:&nbsp;repvgg[1]&nbsp;backboneNeck&nbsp;:&nbsp;gsconv&nbsp;[2]&nbsp;/&nbsp;asff&nbsp;[3]Head&nbsp;:&nbsp;toods[4]&nbsp;/&nbsp;rtoodsLoss&nbsp;:&nbsp;siou&nbsp;[5]&nbsp;/&nbsp;giou</p><p></p><p>在算法改进的基础上，利用PAI-Blade对改进后的的模型进行推理优化，开发了如下的PAI-YOLOX模型。具体改进的消融实验可以参考我们的[arxiv]，筛选有效改进与现有主流算法的对比结果如下：</p><p></p><p>（&nbsp;-ASFF&nbsp;代表使用了&nbsp;NeckASFF，&nbsp;-TOODN代表使用N个中间层的TOODHead取代原有的YOLOXHead）</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/30/3030a355d2b702fe61d04b6bad25c684.png\" /></p><p></p><p>从结果中可以看到，相比目前同水平(1ms以内)SOTA的YOLOV6模型，融合上述改进的YOLOX-PAI在同等精度/速度的条件下有一定的速度/精度优势。(PS：上表精度测量和速度测量上与YOLOV6对齐，不包含NMS和后处理，测试精度也分图片大小等于672/640两种。)</p><p></p><p></p><h3>YOLOX-PAI&nbsp;简单的端到端预测</h3><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c5/c57752e2f03ebf69408240dcebc23575.png\" /></p><p></p><p>针对使用PAI-EasyCV训练的YoloX-PAI&nbsp;模型，用户可以使用PAI-EasyCV自带的导出功能得到优化后的模型，并使用&nbsp;EasyCV&nbsp;提供的TorchYoloXPredictor&nbsp;进行端到端的推理。&nbsp;该导出功能对检测模型进行了如下优化：</p><p></p><p>使用PAI-Blade优化模型推理速度，简化对模型的推理加速（TensorRT/编译优化）开发流程。</p><p></p><p>支持EasyCV配置TorchScript/PAI-Blade对图像前处理、模型推理、图像后处理分别优化，供用户灵活使用。</p><p></p><p>支持python环境下的Predictor结构端到端的模型推理优化，简化图片预测过程。</p><p></p><p>也可以参考[EasyCV detector.py]&nbsp;自行组织相应的图像前处理/后处理过程，或直接使用我们导出好的模型和接口，这里提供一个已经导出好的检测模型，用户下载三个模型文件到本地</p><p>&nbsp;[preprocess,&nbsp;model,&nbsp;meta]</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1d/1d503b3e0e23b2b9be3da8dc971831e0.png\" /></p><p></p><p>用户可以直接使用PAI-EasyCV提供的Predictor接口，通过如下简单的API调用，</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c1/c1a4a1b43123a0da71fac1ccf480acd5.png\" /></p><p></p><p>高效的进行图像的检测任务：</p><p></p><p></p><h3>YOLOX-PAI&nbsp;极致性能的推理优化</h3><p></p><p></p><p>下图，我们展示了YOLOX-PAI在集成PAI-Blade/torchscript优化后和原版YOLOX的不同尺寸（s/m/l/x）模型的推理耗时对比，&nbsp;在开启预处理优化和模型的PAI-Blade优化后：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a4/a4c1b4d5364231902200f7a101ae01be.jpeg\" /></p><p></p><p>可以看到PAI-EasyCV导出的模型，极大程度的优化了原模型的端到端推理速度，达到了接近250%。</p><p></p><p>PAI-Blade&nbsp;推理优化</p><p></p><p>PAI-Blade是由<a href=\"https://www.infoq.cn/article/3rBcBW7v2z46Wv6LVoX6\">阿里云机器学习平台</a>\"PAI开发的深度学习模型优化工具，可以针对不同的设备不同模型进行推理加速优化。PAI-Blade遵循易用性，鲁棒性和高性能为原则，将模型的部署优化进行高度封装，设计了统一简单的API，在完成Blade环境安装后，用户可以在不了解ONNX、TensorRT、编译优化等技术细节的条件下，通过简单的代码调用方便的实现对模型的高性能部署。更多PAI-Blade相关技术介绍可以参考&nbsp;[PAI-Blade介绍]。</p><p></p><p>PAI-EasyCV中对PAI-Blade进行了支持，用户可以通过PAI-EasyCV的训练config&nbsp;中配置相关的导出（export）参数，调用PAI-Blade用于优化导出模型，结合EasyCV&nbsp;Predictor完成图片的端到端的图像检测任务。</p><p></p><p></p><h3>写在最后</h3><p></p><p></p><p>YOLOX-PAI&nbsp;是PAI-EasyCV团队基于旷视YOLOX&nbsp;复现并优化的在V100BS32的1000fps量级下的SOTA检测模型。整体工作上集成和对比了很多社区已有的工作：替换基于RepVGG的高性能Backbone，&nbsp;在Neck中添加基于特征图融合的ASFF/GSConv增强，在检测头中加入了任务相关的注意力机制TOOD结构。结合PAI-Blade编译优化技术，同等精度下比YOLOV6&nbsp;加速13~20%。EasyCV提供配套了一系列算法/训练/推理优化代码和环境，目前，YOLOX-PAI已广泛的应用在阿里集团内外的互联网，智能零售，自动驾驶等客户场景中。</p><p></p><p>PAI-EasyCV（https://github.com/alibaba/EasyCV）是阿里云机器学习平台PAI研发的计算机视觉算法框架，已在集团内外多个业务场景取得相关业务落地成果，未来将聚焦在自监督学习/VisionTransformer等前沿视觉领域，并结合PAI-Blade等自研技术不断优化。欢迎大家参与进来一同进步。</p><p></p><p></p><h3>相关文献</h3><p></p><p></p><p>[1]&nbsp;Ge&nbsp;Z,&nbsp;Liu&nbsp;S,&nbsp;Wang&nbsp;F,&nbsp;et&nbsp;al.&nbsp;Yolox:&nbsp;Exceeding&nbsp;yolo&nbsp;series&nbsp;in&nbsp;2021[J].&nbsp;arXiv&nbsp;preprint&nbsp;arXiv:2107.08430,&nbsp;2021.</p><p></p><p>[2]&nbsp;YOLOv6,&nbsp;https://github.com/meituan/YOLOv6.</p><p></p><p>[3]&nbsp;Xu&nbsp;S,&nbsp;Wang&nbsp;X,&nbsp;Lv&nbsp;W,&nbsp;et&nbsp;al.&nbsp;PP-</p><p>YOLOE:&nbsp;An&nbsp;evolved&nbsp;version&nbsp;of&nbsp;YOLO[J].&nbsp;arXiv&nbsp;preprint&nbsp;arXiv:2203.16250,&nbsp;2022.</p><p></p><p>[4]&nbsp;Wang&nbsp;C&nbsp;Y,&nbsp;Liao&nbsp;H&nbsp;Y&nbsp;M,&nbsp;Wu&nbsp;Y&nbsp;H,&nbsp;et&nbsp;al.&nbsp;CSPNet:&nbsp;A&nbsp;new&nbsp;backbone&nbsp;that&nbsp;can&nbsp;enhance&nbsp;learning&nbsp;capability&nbsp;of&nbsp;CNN[C]//Proceedings&nbsp;of&nbsp;the&nbsp;IEEE/CVF&nbsp;conference&nbsp;on&nbsp;computer&nbsp;vision&nbsp;and&nbsp;pattern&nbsp;recognition&nbsp;workshops.&nbsp;2020:&nbsp;390-391.</p><p></p><p>[5]&nbsp;Ding&nbsp;X,&nbsp;Zhang&nbsp;X,&nbsp;Ma&nbsp;N,&nbsp;et&nbsp;al.&nbsp;Repvgg:&nbsp;Making&nbsp;vgg-style&nbsp;convnets&nbsp;great&nbsp;again[C]//Proceedings&nbsp;of&nbsp;the&nbsp;IEEE/CVF&nbsp;Conference&nbsp;on&nbsp;Computer&nbsp;Vision&nbsp;and&nbsp;Pattern&nbsp;Recognition.&nbsp;2021:&nbsp;13733-13742.</p><p></p><p>[6]&nbsp;Liu&nbsp;S,&nbsp;Huang&nbsp;D,&nbsp;Wang&nbsp;Y.&nbsp;Learning&nbsp;spatial&nbsp;fusion&nbsp;for&nbsp;single-shot&nbsp;object&nbsp;detection[J].&nbsp;arXiv&nbsp;preprint&nbsp;arXiv:1911.09516,&nbsp;2019.</p><p></p><p>[7]&nbsp;YOLOv5,&nbsp;https://github.com/ultralytics/yolov5.</p><p></p><p>[8]&nbsp;Li&nbsp;H,&nbsp;Li&nbsp;J,&nbsp;Wei&nbsp;H,&nbsp;et&nbsp;al.&nbsp;Slim-neck&nbsp;by&nbsp;GSConv:&nbsp;A&nbsp;better&nbsp;design&nbsp;paradigm&nbsp;of&nbsp;detector&nbsp;architectures&nbsp;for&nbsp;autonomous&nbsp;vehicles[J].&nbsp;arXiv&nbsp;preprint&nbsp;arXiv:2206.02424,&nbsp;2022.</p><p></p><p>[9]&nbsp;Feng&nbsp;C,&nbsp;Zhong&nbsp;Y,&nbsp;Gao&nbsp;Y,&nbsp;et&nbsp;al.&nbsp;Tood:&nbsp;Task-aligned&nbsp;one-stage&nbsp;object&nbsp;detection[C]//2021&nbsp;IEEE/CVF&nbsp;International&nbsp;Conference&nbsp;on&nbsp;Computer&nbsp;Vision&nbsp;(ICCV).&nbsp;IEEE&nbsp;Computer&nbsp;Society,&nbsp;2021:&nbsp;3490-3499.</p><p></p><p>[10]&nbsp;Gevorgyan&nbsp;Z.&nbsp;SIoU&nbsp;Loss:&nbsp;More&nbsp;Powerful&nbsp;Learning&nbsp;for&nbsp;Bounding&nbsp;Box&nbsp;Regression[J].&nbsp;arXiv&nbsp;preprint&nbsp;arXiv:2205.12740,&nbsp;2022.</p><p></p><p>[11]&nbsp;Rezatofighi&nbsp;H,&nbsp;Tsoi&nbsp;N,&nbsp;Gwak&nbsp;J&nbsp;Y,&nbsp;et&nbsp;al.&nbsp;Generalized&nbsp;intersection&nbsp;over&nbsp;union:&nbsp;A&nbsp;metric&nbsp;and&nbsp;a&nbsp;loss&nbsp;for&nbsp;bounding&nbsp;box&nbsp;regression[C]//Proceedings&nbsp;of&nbsp;the&nbsp;IEEE/CVF&nbsp;conference&nbsp;on&nbsp;computer&nbsp;vision&nbsp;and&nbsp;pattern&nbsp;recognition.&nbsp;2019:&nbsp;658-666.</p>",
    "publish_time": "2022-08-31 12:47:27",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "《架构师成长计划》用架构思维为云原生做减法",
    "url": "https://www.infoq.cn/article/itoqVs4yeH0zHi3FEr4j",
    "summary": "<p>国际学术期刊Science/AAAS和英特尔在全球首次联袂推出第一季《架构师成长计划》以来，吸引了无数架构师踊跃参与，获得业内广泛赞誉。为持续助力架构师把握数智机遇，构建未来，第二季《架构师成长计划》全新升级，强势归来！业内顶尖架构师大咖齐聚，为架构师群体量身打造系统成长课程，带来涵盖云游戏、云原生、联邦学习、生信大数据、算力网络、云网融合等多个热门话题的前沿技术及案例实践。</p>\n<p>数字化转型的深化发展，带来规模化的业务升级，愈来愈多的企业开始意识到现有IT基础设施已经不能满足当前业务需求，也难以应对多方挑战，数字化转型价值无法充分实现。如何高效管理多种基础设施？如何降低运维开发成本，实现更加敏捷的业务迭代？面对变幻莫测的市场竞争，企业亟需革新传统IT架构。而随着云原生技术的持续发展，构建云原生架构正在成为大中小企业驱动数字化转型、引领业务变革的制胜法宝。</p>\n<p>轻松拥抱云原生，充分发挥云效能，英特尔《架构师成长计划》第四期精彩纷呈！特邀青云科技容器产品负责人于爽、英特尔云基础设施软件研发总监王庆、CSDN创始人、总裁蒋涛，三位业界专家代表共话云原生。他们将全面剖析云原生的技术优势及前瞻发展趋势，为您解密云原生落地最佳实践方案，不走弯路！同时，还会深度解构英特尔丰富的云原生解决方案，涵盖混合云、容器基础设施、计算加速、存储优化等，全面赋能云原生架构，助您迎战产业数字化浪潮！点击链接观看完整课程https://bizwebcast.intel.cn/eventstart.aspx?eid=316&amp;tc=tghv9wfxlu&amp;frm=InfoQ</p>\n<p><strong>精彩亮点</strong></p>\n<p>云原生的优势是什么？企业该如何落地云原生？</p>\n<p>K8s解决了哪些问题？如何升级改造更适合企业的容器管理？</p>\n<p>混合云容器化有哪些实现路径，英特尔在促进多云融合方面有哪些成功经验？</p>\n<p>如何软硬兼施提升云原生应用的运行效率？规避容器的安全风险，又该如何技术布局？</p>\n<p><strong>议程</strong></p>\n<p>圆桌讨论：如何看待云原生的技术优势和发展趋势？</p>\n<p>于爽 青云科技容器产品负责人</p>\n<p>王庆 英特尔云基础设施软件研发总监</p>\n<p>蒋涛 CSDN创始人、总裁</p>\n<p>课程分享：用架构思维为云原生做减法</p>\n<p>于爽 青云科技容器产品负责人</p>\n<p>课程分享：英特尔在云原生里的技术发展和展望</p>\n<p>王庆 英特尔云基础设施软件研发总监</p>",
    "publish_time": "2022-08-31 15:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "中国卓越技术团队访谈录（2022 年第三季）",
    "url": "https://www.infoq.cn/article/EQzDrPI1dT9G8V6alV1I",
    "summary": "<p><strong>封面故事</strong></p>\n<ul>\n<li>在阿里达摩院搞了四年数据库，我来聊聊实际情况</li>\n</ul>\n<p>全密态数据库在学术界有多种不同方向的探索，但并不是每一种路线都能够在商业场景落地，全球目前仅有极少数具备全密态数据库管理能力的厂商，阿里达摩院数据库存储与创新实验室做到了。</p>\n<p><strong>重磅访谈</strong></p>\n<ul>\n<li>不到3年覆盖25个行业，华润集团系统上云比例超过99%</li>\n</ul>\n<p>除了不照搬敏捷开发模式，华润云也不推崇大量采用分布式、微服务等前沿技术架构。</p>\n<ul>\n<li>突围电商大促场景，得物在高可用上的探索与实践</li>\n</ul>\n<p>大型电商系统并非一开始就具有完整设计的高可用特性，而是随着用户的不断增加与业务的快速增长逐步演进与完善的。</p>\n<ul>\n<li>用三年替换掉二十年老系统，民生保险数字化转型秘籍</li>\n</ul>\n<p>对民生保险来说，项目的实施需要很多懂技术，又有很多有大型项目经验的人员去推动。而且项目实施之后，技术怎么去沉淀，怎么去传承，怎么去保证确保所有的技术迭代和稳定的运转，这都是需要想办法解决的问题。这也是大多数转型中的中小企业需要面对的问题：作为一个甲方企业，不能无限制的在技术上去投入。</p>\n<ul>\n<li>从基础架构到用户体验，字节跳动是如何打造移动端架构团队的？</li>\n</ul>\n<p>“务实是我们团队非常重要的一个业务视角，也是我们反复强调的一点。”</p>\n<ul>\n<li>一年 100% 云原生化，众安保险架构演进的探索与实践</li>\n</ul>\n<p>众安认为，云原生技术能够为金融行业、尤其是互联网金融行业带来巨大的红利，为众安构建新一代的数字化基础设施，以及帮助企业数字化转型带来强大的推力。</p>",
    "publish_time": "2022-08-31 15:05:28",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "PaaS的祖先Heroku，连相当值钱的“免费套餐”遗产都丢掉了",
    "url": "https://www.infoq.cn/article/lDpmKirqFiUXrqKh8lKA",
    "summary": "<p>8月25日，Heroku发布通告，表示为了防止欺诈和滥用，将从 2022 年 11 月 28 日开始停止提供免费产品计划，并关闭免费的dynos和数据服务，以后将重点关注核心客户。</p><p>&nbsp;</p><p>Heroku的免费计划，曾为众多想进入科技行业的人打开了一扇门。</p><p>&nbsp;</p><p>Heroku 是一种平台即服务(PaaS)，是 2007 年创建的第一批云平台之一，可让开发者将 git 存储库推送到云端，然后神奇地获取在某处运行的应用程序的 URL。一位开发者说，这种魔法对他的职业生涯起到了很大的催化作用，“当年作为学生，没有信用卡，也穷，Heroku的免费计划帮助我打开了真正了解网站如何工作的大门。如果没有Heroku，我永远无法达到今天的水平，以至于现在我真的无法说清它对我的职业生涯曾经有多么重要！”</p><p>&nbsp;</p><p>像他这样通过Heroku学习编程的，不是少数。在今年StackOverflow 2022年度开发者调查报告中，有一个关于“云平台”调查问题，以了解开发者在过去一年中主要在哪些云平台中进行开发工作。在针对“Learning to Code”群体中，Heroku以35.24%的比例位列第一，超过了Google、AWS和Microsoft&nbsp;。</p><p>&nbsp;</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/eb/ebcf2300ffbecdcd8c47ebb70d9b920a.png\" /></p><p></p><p>&nbsp;</p><p>&nbsp;</p><p>实际上，这个革命性的产品，从技术上讲已经停滞不前，其产品也名存实亡，一位Heroku前员工在 HN 上写道：“你必须追溯到 Heroku Changelog 才能找到任何不是语言版本升级或特性删除的内容：<a href=\"https://devcenter.heroku.com/changelog\">https://devcenter.heroku.com/changelog</a>\"。我认为特性冻结是发生在 2018 年。”</p><p>&nbsp;</p><p>今年4 月，Heroku还曾发生一起严重的安全事故，社区反应激烈，当时一名攻击者获取了 Heroku 的主数据库（在我们那个时代称为 core-db）的访问权，并泄露了它的内容，包括哈希密码和用于 GitHub 集成的机密。</p><p>&nbsp;</p><p>现在，短短几个月过去，Heroku再次让社区感到悲伤，它关闭了免费计划。</p><p>&nbsp;</p><p>对此，一位开发者说，“Heroku 对我来说已经死了，我看到一扇又一扇进入科技的门被牢牢地关闭和锁定。”</p><p>&nbsp;</p><p>“我只是希望下一个时代能给每个人带来公平的技术。希望资本有点耐心，在它发光之前不要杀死它。”</p><p>&nbsp;</p><p>虽然Heroku在走向衰落，但它也给如今的软件行业留下了很多遗产。</p><p>&nbsp;</p><p></p><h2>Heroku有哪些遗产</h2><p></p><p>&nbsp;</p><p>Heroku 由三位 Ruby 开发人员（James Lindenbaum、Adam Wiggins 和 Orion Henry）于 2007 年建立，仅仅三年后就被收购，SaaS 巨头 Salesforce 最终击败 VMware，以 2.12 亿美元的价格将 Heroku 收到囊下，当时该公司只有 30 名员工。</p><p>&nbsp;</p><p>2011 年，Heroku 的联合创始人 Adam Wiggins 根据针对上百万应用托管和运维的经验，发布了著名的“十二要素应用宣言（The Twelve-Factor App）” 。他们那时候绝对不会料到这份宣言会在之后数年时间里，成为 SaaS 应用开发的启蒙书。同时这也奠定了 Heroku 在 PaaS 领域的地位，成为了云上应用开发规范化的基石。</p><p>&nbsp;</p><p>Heroku 的工程负责人 Jason Warner 说：“我相信 Heroku 是在 2014 年到 2017 年之间最具革命性的产品，对 Web 开发产业的推动作用非常大。它也是同时代最受争议的项目之一，因为它实在太超前了。当时它看起来就像魔法一般，人们都被它深深震撼了。”</p><p>&nbsp;</p><p>Heroku 的人气一直都归功于其简洁、优雅和可用性的优势，它率先将重心放在了开发人员的体验上，致力于让部署像开发流程那样无缝流畅。</p><p>&nbsp;</p><p>Heroku 是最早喊出“以应用为中心”，大规模帮助应用上云的产品。正是围绕“以应用为中心”这样先进的理念，使得 Heroku 从一开始便拥有了至今看来都非常诱人的功能：用户无需关心应用背后的基础设施是什么，Heroku 负责维护背后的一切。</p><p>&nbsp;</p><p>这句看似简单的话背后隐藏了巨大的复杂性，试想下某个软件或系统爆出安全漏洞后给你带来的窘境，又或者你想使用一个数据库服务时却不得不维护一个数据库实例。而在 Heroku， 这一切麻烦你都无需关心。用户可以直接从开发语言出发，选择对应的技术栈，通过 heroku create 这样简单的命令，将应用托管到云上。主流的开发语言，均能在 Heroku 中找到对应的选择。从代码的变动自动触发软件的部署交付，清晰的工作流、多样的发布策略，直到后来的很多年都是 DevOps 们梦寐以求的功能。</p><p>&nbsp;</p><p>Heroku 的联合创始人，如今是初创企业加速器 Heavybit 的合伙人 Linden baum 说：“震撼人心的是 Git 推送部署，这也是人们从 Heroku 学到的核心思想，大家原本以为必然要做的很多事情都用不着操心了。我们的愿景不是给猪涂口红，而是重新思考怎样彻底解决这个问题。”</p><p>&nbsp;</p><p></p><h3>卖给Salesforce算是一种成功吗？</h3><p></p><p>&nbsp;</p><p>之前有人在 <a href=\"https://twitter.com/craigkerstiens/status/1519483444861935616\">Twitter</a>\" 上提出了一个不那么简单的问题：“Heroku 是成功还是失败？”</p><p>&nbsp;</p><p>对此问题，答案分成了两派，正反双方都有很多人参与。一部分人认为Heroku 已经失败了，但是另一部分人恰恰相反——他们认为Heroku 是一个不折不扣的成功。</p><p>&nbsp;</p><p>从成功的角度来讲，以 2.12 亿美元卖给 Salesforce 是一个明显的胜利。但从产品寿命或持久的行业技术方面来说，它又是失败的。</p><p>&nbsp;</p><p>以 2.12 亿美元卖给 Salesforce ，最显而易见的是，在如此规模的收购中，有些人发了财，也给一些新员工享受着高科技薪酬和优厚待遇的条件。</p><p>&nbsp;</p><p>Heroku 的粘附力出乎意料。鉴于这一产品已经多年基本未变，加上市场中的新成员众多，也接受了更大范围的云计算竞争，但是直到今天，Heroku 依然可以成为可信的平台。很多开发者很了解这个产品，并且它的厂商锁定是最低的，让开发者不需要在企业的非核心服务的运营/基础设施上动手。各大云计算提供商都推出了新的业务，这些业务都是为了满足 PaaS 层（像亚马逊云科技那样，也不只是一家），但是直到现在，几乎没有什么公司可以与 Heroku 的简化工作流程和简单操作相媲美。</p><p>&nbsp;</p><p>除此之外，这家公司还做了许多了不起的工作。</p><p>&nbsp;</p><p>外包运维：长期以来，很难在互联网上部署软件。后来，PHP 问世，它的语法简练，部署过程简单，赢得了整个世界，但是也存在许多缺陷。部署一个通用的栈非常困难，那时候，Rails 需要安装一个负载均衡器，为每个服务器提供反向代理，CGI 进程，并且可以随时监控和执行所有必要的操作。Heroku 使这一问题得到了极大的简化，它使开发者集中精力在构建软件上，而非在配置和运行基础设施上。在当今世界，这显然是一种有利条件，但在那时并非如此。Postgres：Postgres 在过去的十年里的发展得益于很多方面的原因，其中包括其卓越的核心进展以及其竞争对手的相对衰退，但是通过使其成为平台提供的核心部分并高调宣传，Heroku 成了平台的重要组成部分。容器：很少有人记得它，但 Heroku 在容器还不流行的时候就已经开始运行了，使用 <a href=\"https://linuxcontainers.org/\">LXC</a>\" 作为其 Cedar 栈的核心技术。CLI：和 Git 本身一样，Heroku 的 CLI 也是该产品中很关键的一环。Unix 命令行工具已有数十年之久，但是一家公司推出一种专用 CLI 还是很有创意的，并且很快就得到了推广。DX 和 CLI：CLI 以及一个广泛的面向开发者的产品，播下了最终发展成 DX 的种子，现在 DX 已经成为科技行业的一个专门分支。Buildpack：Buildpack 是如何部署用特定语言编写的应用的通用公式，是 Dockerfile 的前身，也可以说是一种更合适的抽象层。在 Cedar 栈的初期，自定义 Buildpack 就已经为用户提供了支持。目前，Heroku 之外的其他几个云计算提供商也支持这些技术，比如 <a href=\"https://docs.digitalocean.com/products/app-platform/concepts/buildpack/\">Digital Ocean</a>\" 和 <a href=\"https://cloud.google.com/blog/products/containers-kubernetes/google-cloud-now-supports-buildpacks\">GCP</a>\"。</p><p>&nbsp;</p><p>这是一份相当令人印象深刻的清单——即便是其中的一两个，也会比大多数科技公司在世界上留下的印记更多。</p><p>&nbsp;</p><p>但是，这些项目也有一个共同的潜在趋势——尽管它们的创意很伟大，并且在未来的服务部署方式中会留下持久的印象，但它们都并没有为 Heroku 产品本身带来持久的剩余价值——其他平台抓住了这些概念并获得了收益，即使撇开商业方面，也没有具体的技术会被归于 Heroku。尽管 Docker 作为一家公司可能注定以失败告终，但它将作为基于容器的部署的始祖而被记住几十年。未来关于 2010 年代的历史将谈论 Docker 到 OCI 的演变，但是 Heroku 充其量只能算是一个注脚。</p><p>&nbsp;</p><p>Heroku 是云计算的终极创意工厂——比如 “十二要素应用宣言（The Twelve-Factor App）” 、抗侵蚀和 DX，这些概念将会经得起时间的检验，但是在它们的受益者中，很少有人会认识到它们与 Heroku 的关系。</p><p>&nbsp;</p><p></p><h2>想象力与现实</h2><p></p><p>&nbsp;</p><p>没有多少持久的产品或技术影响是硬币的一面，而另一面，则是对一个拥有无限潜能却从来没有实现过的宏伟愿景感到失望。</p><p>&nbsp;</p><p>Cedar 栈确实是一个真正的天才之作。之前的 Aspen 和 Bamboo 栈都有很大的限制，仅能支持特定栈的特定版本，并且有很多特殊的条件。Cedar 让 Heroku 成为可以运行一切的平台——用户可以通过 Buildpack 和 Procfile 带来自己的栈，它复杂的内部状态机和路由层使得运行在其上的应用变得非常强大。</p><p>&nbsp;</p><p>2012 年，Cedar 的交付势头非常好，虽然取得了巨大的成功，但是它仅仅被认为是一个更加雄心勃勃的项目的第一步。很快，它就会被推广到可以处理不同形状和大小的软件，而现在 512MB 的容器仅仅是附带的第一选项。即使是最大的数据处理应用也可以部署在 10GB 或 100GB 内存的容器上，一直到最小的一次性云 grep 运行只需要几兆字节。如此快速和简单，以至于不在 Heroku 上运行简直就是疯了。</p><p>&nbsp;</p><p>它已经成为模块化。对于大多数用途来说，共享路由器是一个足够的选择，但是大用户可能希望实现自己的路由，从而避开其他企业的云计算，或者提供他们自己高度定制的路由配置。甚至在 Heroku 的“内核”中，你也可以进行交换，因此你仍然可以使用 Heroku 来构建、编排和监控你的应用，但是它们会在你自己的专用单租户服务器上运行。</p><p>&nbsp;</p><p></p><h2>自托管的奇点</h2><p></p><p>&nbsp;</p><p>Heroku 云将变得如此可扩展，如此健壮，就像一个自引导的语言编译器一样，它能够自托管。像平台 API、动态状态机和路由器这样的核心组件，都将作为 Heroku 应用运行，并获得所有 DX 的人体工程学和健壮性。这种充满乐观和雄心勃勃的愿景被称为“自托管的奇点”。</p><p>&nbsp;</p><p>它将是反亚马逊云科技的。亚马逊云科技在新用户首次登录时，就向他们展示了成千上万个错综复杂、相互交叉的原始概念，而 Heroku 公司的愿景就是不让新用户看到。他们从基本的 git push heroku master 和单一的 dyno 应用起步，但是当他们的软件不断发展，他们的要求也越来越复杂，当他们需要的时候，新的原语就会逐渐显露出来，比如带有入口/出口规则的 VPC、带有备选基本镜像或架构的可配置主机。SSH 访问、静态 IP 等等。就像洋葱一样，可以一层一层地剥开。</p><p>&nbsp;</p><p>还有一些其他的东西。“十二要素应用宣言（The Twelve-Factor App）”中的“支持服务”描述了诸如数据库等持久性服务的“额外资源”，它作为孤立的资源存在，能够被任意地附加和分离到更短暂的应用中。Heroku用了好几年的时间来开发这一特性，尽管他们成功了，但是 Heroku 在产品领导力方面的黄金时代已经结束，而且他们也没有取得什么进展来说服别人相信它是个好点子。</p><p>&nbsp;</p><p>定价又是一头难以捉摸的野兽。从免费层跳到付费应用的成本是一个巨大的飞跃，从产品推出的第一天起，用户就抱怨过这个问题。最终，一个新的定价模式确实推出了，但是并没有帮助人们消除最初的忧虑。</p><p>&nbsp;</p><p></p><h2>检查失败</h2><p></p><p>&nbsp;</p><p>那么，到底发生了什么呢？一切成功的基石都已经就位，因此无法实现其雄心勃勃的愿景并非必然。</p><p>&nbsp;</p><p>运营陷入困境：Cedar 进入后，由于一些不能控制的因素（us-east-1 在那段时期尤其糟糕），以及内部因素（有一段时间，Heroku似乎每隔一天就会有一个糟糕的部署），导致了产品的频繁故障，已经升级到了成为生存责任的地步。产品的工作被取消，取而代之的是对运营的支持——设置指标、警报、安全部署流程，并且广泛地建立运营能力。产品周期：尤其是初期，没有制度上的框架来交付新特性。这是有可能的，但是经常需要你自己发出拉取请求或者给某个人发送一个请求来帮助你修改。即使有推动新特性的强烈动机，它也常常会从组织/服务的边界中消失殆尽。Heroku也存在着令人不齿的退化情形，比如将组织功能构建在核心 API 之上，变成了一个单独的微服务，这是由于没有任何使其更加集成的机制。Docker 视野狭隘：Docker 的第一个版本引起了如此大的轰动和广泛的兴趣，以至于Heroku之中的很多人对它产生了一种不健康的痴迷。Heroku的前员工说道：“我们内化了一种失败主义的态度，认为 Docker 容器是未来，而我们所做的是过去的事。”从某些方面来说，这是对的，但是Dockerfile 仍然是非常低的抽象层次，低到有些不可取。我们现在所见，容器技术已经成为许多部署栈的基石，但更多的是作为一种原始技术，其中有许多技术可以提高其工作效率。在很多方面，Buildpack 对应用开发者来说，是一个更好的抽象层，他们不必为任何事情编写 Dockerfile，只要用 Gemfile、Cargo.toml 或 go.mod 等栈中常用的工具，然后让构建过程找出如何将其“烘焙”成一个可部署的镜像。从那以后，如果说基础层需要更新，或者某种编程语言的次要级别/补丁级别需要更新，都可以广泛地进行，而不必调整每个项目的 Dockerfile。下一个栈的固定性：Heroku 的栈是以树命名的。Aspen、Bamboo、Cedar。Cedar 比 Bamboo 有了质的飞跃，虽然Heroku的下一个目标是建立一个比 Cedar 更好的栈，就像 Cedar 比 Bamboo 好一样，但在这种情况下，员工会把 Cedar 作为一个过去的种子埋在他们的脑海里，从而阻碍了他们对它的大量投资。回顾过去，从目前可用技术的融合情况来看，可能并没有一种栈能比 Cedar 好得多，就像 Cedar 对 Bamboo 那样。最好还是把精力集中在逐步改善 Cedar 上，而不要在地平线上找什么“灵丹妙药”。构思者/运营者的分歧：作为一家大公司内部资金雄厚的小公司，曾经有过一段时期，我们有一个相当独特的情况，就是雇佣了一批员工，他们花费大量的时间进行实验、原型设计和创意，就好像在公司内部开着一个小型的贝尔实验室或者施乐 PARC。隔着篱笆，就是那些顽固的服务工程师，他们经常忙于解决运营问题，很少露面。构思者们没有能力把所有的事情都投入到生产中，同时，运营人员也没有足够的时间和精力去进行实质性的产品改善。这导致了很酷炫的内部演示，但是可以预料的是，他们不会有所动作。</p><p>&nbsp;</p><p>总而言之，特别是考虑到之前发生的安全问题，Heroku 作为一个自维持的产品是一个失败。作为一个多产的思想创造者，以及无数当前和未来工具和平台的直接祖先，Heroku 取得了巨大的成功。</p><p>&nbsp;</p><p>参考资料：</p><p>Heroku的下一章：<a href=\"https://blog.heroku.com/next-chapter\">https://blog.heroku.com/next-chapter</a>\"</p><p><a href=\"https://xeiaso.net/blog/rip-heroku\">https://xeiaso.net/blog/rip-heroku</a>\"</p><p>如何理解Heroku提出的12要素应用？<a href=\"https://mp.weixin.qq.com/s/EUPo12ZPpBp_P1b7wouYtw\">https://mp.weixin.qq.com/s/EUPo12ZPpBp_P1b7wouYtw</a>\"</p><p>Heroku 的衰落：<a href=\"https://www.infoq.cn/article/gvcgP6XitdHjy169oAk5\">https://www.infoq.cn/article/gvcgP6XitdHjy169oAk5</a>\"</p><p><a href=\"https://brandur.org/nanoglyphs/033-heroku\">https://brandur.org/nanoglyphs/033-heroku</a>\"</p>",
    "publish_time": "2022-08-31 15:32:53",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "资深Web开发的经验之谈：为什么你开发的网页不应该大于14KB？",
    "url": "https://www.infoq.cn/article/r1BGRqibOqE5exgoPMqi",
    "summary": "<p></p><blockquote>虽然我们生活在一个宽带无处不在、4/5G 几乎全覆盖的时代，但网站加载缓慢还是常态，就算我们打开一个以文本为中心的新闻网站，都可能需要至少30秒才能开始阅读。毕竟在内容膨胀时代，一张照片就能轻易超过1MB大小，许多网站为了显示几段文本，还会单独加载至少 10MB 的 JS 和自定义字体。&nbsp;对此，对优化和极简主义充满热情的资深Web开发Nathaniel告诉我们，你应该让你的网页尽力控制在14KB以内，而且即使对于以富媒体为中心的网站，这条 14KB 的规则可能仍然值得遵循。如果 14KB 不足以用于最终布局，则需要优先考虑“首屏”字节，可以用发送给访问者的前14KB数据来渲染一些有用的东西，减少用户还没有开始阅读就流失掉的机会。</blockquote><p></p><p>&nbsp;</p><p>网页越小，加载速度就越快——这一点都不奇怪。</p><p>&nbsp;</p><p>但令人感到惊讶的是，14KB网页的加载速度比15KB要快得多——可能快612毫秒——而15KB和16KB网页之间的加载速度差异微乎其微。</p><p>&nbsp;</p><p>这是TCP慢启动算法导致的。本文将介绍这个算法、它的原理以及为什么你应该关注它。但首先我们需要快速过一遍一些基础知识。</p><p>&nbsp;</p><p></p><h2>TCP是什么</h2><p></p><p>&nbsp;</p><p>传输控制协议（Transmission Control Protocol，TCP）是一种使用IP协议可靠地发送数据包的方法——有时被称为TCP/IP。</p><p>&nbsp;</p><p>当浏览器向你的网站（或图像或样式表）发出请求时，它会使用HTTP请求。HTTP建立在TCP之上，一个HTTP请求通常由许多TCP数据包组成。IP只是一个将数据包从互联网上的一个位置发送到另一个位置的系统。IP没有检查数据包是否成功到达目的地的方法。</p><p>&nbsp;</p><p>对于网站来说，确保所有的数据到达请求端是非常关键的，否则我们可能会因为丢失数据包无法获得完整的网页。但在网络的其他应用场景中，这一点并不那么重要——比如流媒体直播视频。</p><p>&nbsp;</p><p>TCP是IP的扩展，浏览器和网站服务器通过它告诉对方哪些数据包已经成功到达。</p><p>&nbsp;</p><p>服务器发送一些数据包，然后等待浏览器已经收到数据包的响应（这叫确认或ACK），然后它继续发送更多的数据包——或者如果它没有收到ACK，将再次发送相同的数据包。</p><p>&nbsp;</p><p></p><h2>什么是TCP慢启动</h2><p></p><p>&nbsp;</p><p>TCP慢启动是一种算法，服务器用它来确定一次可以发送多少数据包。</p><p>&nbsp;</p><p>当浏览器第一次连接到服务器时，服务器无法知道它们之间的带宽是多少。带宽是指在单位时间内网络可以传输的数据量。通常以比特/秒（b/s）为单位。我们可以用管道来作类比——把带宽想象成每秒从管道流出多少水。</p><p>&nbsp;</p><p>服务器不知道网络连接可以处理多少数据——所以它先发送少量且安全的数据——通常是10个TCP数据包。如果这些数据包成功地到达网站访问者，他们的计算机返回确认（ACK），表示数据包已经被收到了。然后，服务器发送更多的数据包，但这一次它将数据包的数量增加了一倍。</p><p>&nbsp;</p><p>这个过程会不断重复，直到数据包丢失，服务器没有收到ACK。（此时，服务器会继续发送数据包，但速度较慢）。</p><p>&nbsp;</p><p>这就是TCP慢启动的要点——在现实当中，虽然算法各不相同，但这是它的基本原理。</p><p>&nbsp;</p><p></p><h2>那么14KB这个数字是怎么来的</h2><p></p><p>&nbsp;</p><p>大多数Web服务器的TCP慢启动算法都是从发送10个TCP数据包开始的。</p><p>&nbsp;</p><p>TCP数据包最大长度为1500字节。这个最大值不是由TCP规范设置的，它来自于以太网标准。</p><p>&nbsp;</p><p>每个TCP数据包的标头占了40个字节，其中16个字节用于IP，另外24个字节用于TCP。</p><p>&nbsp;</p><p>这样每个TCP数据包还剩下1460个字节。10 x 1460 = 14600字节，或大约14KB！</p><p>&nbsp;</p><p>因此，如果你能把网站的网页——或网页的关键部分——压缩到14KB，就可以为访问者节省大量的时间——他们和网站服务器之间的往返时间。</p><p>&nbsp;</p><p>一个数据往返能有多糟糕？但人们非常没有耐心——一个数据往返可能会出奇地长，具体多长取决于延迟……延迟是指数据包从源传输到目的地所花费的时间。如果带宽是每秒钟可以通过管道的水的数量，那么延迟就是一滴水进入管道后从另一端流出所花费的时间。</p><p>&nbsp;</p><p>下面是一个关于延迟有多糟糕的例子。</p><p>&nbsp;</p><p></p><h4>卫星网络</h4><p></p><p>&nbsp;</p><p>卫星网络是由环绕地球轨道的卫星提供的，在人烟稀少的地区、石油钻井平台、游轮以及飞机上，人们可以使用这种网络。</p><p>&nbsp;</p><p>为了说明这种糟糕的延迟，我们想象一群在石油钻井平台工作的兄弟把骰子忘在了家里，他们需要通过missingdice.com（少于14KB）来玩《龙与地下城》游戏。</p><p>&nbsp;</p><p>首先，他们中的一个用手机发出一个网页请求……</p><p>&nbsp;</p><p>手机将请求发送到钻井平台的WiFi路由器，路由器将数据发送给平台上的卫星天线，我们假设这可能需要1毫秒时间。</p><p>&nbsp;</p><p>然后，卫星天线将数据发送到地球轨道上方的卫星。</p><p>&nbsp;</p><p>通常，这是通过在地球表面上方35786公里处运行的轨道卫星实现的。光速为299792458米/秒，所以信息从地球发送到卫星需要120毫秒。然后，卫星将信息传回地面接收站，这又需要120毫秒。</p><p>&nbsp;</p><p>然后，地面站必须将请求发送到位于地球任意位置的服务器（当光通过光纤电缆传输时，速度会降至每秒200000000米）。如果地面站和服务器之间的距离等于纽约到伦敦之间的距离，那么大约需要28毫秒，如果地面站和服务器之间的距离等于纽约到悉尼之间的距离，则需要80毫秒——所以我们姑且定一个60毫秒的数字（这个数字便于计算）。</p><p>&nbsp;</p><p>然后，服务器需要处理请求，这可能需要10毫秒，然后服务器再次将它发送出去。</p><p>&nbsp;</p><p>回到地面站，进入太空，回到卫星天线，然后回到无线路由器，再到手机上。</p><p>&nbsp;</p><p></p><blockquote>手机 -&gt; WiFi路由器 -&gt;卫星天线 -&gt;卫星 -&gt; 地面站 -&gt; 服务器 -&gt; 地面站 -&gt; 卫星 -&gt; 卫星天线 -&gt;&nbsp;WiFi路由器 -&gt; 手机</blockquote><p></p><p>&nbsp;</p><p>如果我们算一下，就是10 + ( 1 + 120 + 120 + 60 ) x 2 = 612毫秒。</p><p>&nbsp;</p><p>这是每次往返额外的612毫秒——也许这看起来不是很长时间，但你的网站可能只是为了获取第一个资源就需要许多个往返。</p><p>&nbsp;</p><p>另外，HTTPS在完成第一个往返之前需要额外的两次往返——这使延迟达到了1836毫秒！</p><p>&nbsp;</p><p></p><h4>对于生活在陆地上的人，延迟又是怎样的</h4><p></p><p>&nbsp;</p><p>卫星网络似乎是一个极端的例子——我选择它作为例子是因为它能够充分说明了网络延迟这个问题——但对于生活在陆地上的人来说，延迟可能比这更糟糕，原因有很多。</p><p>&nbsp;</p><p>2G网络的延迟通常在300毫秒到1000毫秒之间；3G网络的延迟可以在100毫秒到500毫秒之间；嘈杂的移动网络——比如在一个异常拥挤的地方，比如音乐节；处理大流量的服务器；其他一些不好的东西。</p><p>&nbsp;</p><p>不稳定的网络连接也会导致数据包丢失——导致需要另一个往返来获取丢失的数据包。</p><p>&nbsp;</p><p>了解了14KB法则，接下来可以做些什么</p><p>&nbsp;</p><p>当然，你应该让你的网页尽可能的小——你爱你的访客，你希望他们开心。将每个页面的大小控制在14KB以内是一个不错的主意。</p><p>&nbsp;</p><p>这14KB可以是压缩数据——所以实际上可以对应大约50KB的未压缩数据——这已经非常慷慨了。要知道，阿波罗11的制导计算机只有72KB内存。</p><p>&nbsp;</p><p>去掉自动播放的视频、弹出窗口、Cookie、Cookie横幅、社交网络按钮、跟踪脚本、JavaScript和CSS框架，以及所有其他人们不喜欢的垃圾——你可能就能实现14KB法则。</p><p>&nbsp;</p><p>假设你已经尽力将所有内容控制在14KB以内，但仍然做不到——但14KB法则仍然很有用。</p><p>&nbsp;</p><p>你可以用发送给访问者的前14KB数据来渲染一些有用的东西——例如一些关键的CSS、JS和解释如何使用你的应用程序的前几段文本。</p><p>&nbsp;</p><p>需要注意的是，14KB法则包含了HTTP标头——这些是未压缩的（即使是HTTP/2的第一个响应），也包含图片，所以你应该只加载在页面上方的内容，并保持它们最小，或者使用占位符，让访问者知道他们在等待一些更好的内容。</p><p>&nbsp;</p><p></p><h4>关于这个法则的一些注意事项</h4><p></p><p>&nbsp;</p><p>14KB法则更像是一种经验之谈，而不是计算的基本法则。</p><p>&nbsp;</p><p>一些服务器已经将TCP慢启动初始窗口从10个数据包增加到30个；有时服务器知道它可以从更大数量的数据包开始传输，因为它使用TLS握手来建立一个更大的窗口；服务器可以缓存路由可管理的数据包数量，并在下一次连接时发送更多的数据包；还有其他需要注意的地方——这里有一篇文章更深入地探讨关于为什么14KB法则并不总是这么回事（<a href=\"https://www.tunetheweb.com/blog/critical-resources-and-the-first-14kb/\">https://www.tunetheweb.com/blog/critical-resources-and-the-first-14kb/</a>\"）。</p><p>&nbsp;</p><p></p><h4>HTTP/2和14KB法则</h4><p></p><p>&nbsp;</p><p>有一种观点认为，在使用HTTP/2时，14KB法则不再适用。我已经读了所有我能读到的关于这个问题的东西，但我还没有看到任何证据表明使用HTTP/2的服务器已经停止使用TCP慢启动（从10个数据包开始）。</p><p>&nbsp;</p><p></p><h4>HTTP/3和QUIC</h4><p></p><p>&nbsp;</p><p>与HTTP/2类似，有一种观点认为HTTP/3和QUIC将废除14KB法则——事实并非如此。实际上，QUIC仍然建议使用14KB法则。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://endtimes.dev/why-your-website-should-be-under-14kb-in-size/\">https://endtimes.dev/why-your-website-should-be-under-14kb-in-size/</a>\"</p>",
    "publish_time": "2022-08-31 15:44:39",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "从纯软件转发到软硬一体化可编程，腾讯云网关技术演进之路",
    "url": "https://www.infoq.cn/article/kCGa64yBCdv1AOdiXic8",
    "summary": "<p></p><p></p><p>近十年来，国内的云计算业务取得了长足的进步，越来越多的企业认识到云的价值，将业务部署在云上，云也为客户提供了存储、计算、数据库、安全、大数据等丰富的服务。云服务规模的爆发式增长，对网络提出了巨大的挑战，传统网络方式已无法满足大规模云应用阶段网络的诉求，主要有以下几个方面。</p><p></p><p>网络规模巨大，短视频、直播等业务应用快速发展，导致单一客户动辄要求 10T 级别带宽，10 万级别路由，数以万计的客户叠加情况下对网络系统规格挑战巨大；网络弹性要求高，客户业务发展变化快，并且存在秒杀、大促、公共突发事件、热点事件等正常业务活动，仅靠堆料式运营方式成本难以为继，网络需要具备极强的弹性能力；业务特性繁多，不同场景需求各不相同，有状态的、无状态的、加密的、非加密的、安全的、加速的等等，没有任何一个单一网络应用能解决所有问题；精细化调度要求高，不同客户对网络质量、网络成本要求各不相同，在越来越多的场景存在基于业务的精细化调度诉求；大象流、微突发等问题频发，业务吞吐的飙升、高性能网络应用的普及，导致网络面临大量的大象流、微突发问题，对转发性能、数据面定位能力等要求极高；</p><p></p><p>针对这些挑战，我们通过多年不断的尝试和技术革新，由早期的纯软件转发平台，演进到基于可编程硬件的转发平台，再到软硬一体化的可编程网络平台，提高了云网络的弹性能力，降低了网络运营成本，为各类云服务的大规模应用铺平了道路。</p><p></p><p></p><h2>腾讯可编程网络技术演进</h2><p></p><p></p><p>腾讯探索可编程网络相关技术，主要目的是降低网络运营成本、提升网络质量。早期也曾使用过专用硬件方式，例如使用 tilera 众核芯片的专用服务器等，随着开源社区 DPDK 的成熟，逐步迁移到了基于通用 x86 CPU 的 DPDK 平台，形成了可编程网关平台 1.0。可编程网关平台 1.0 主要基于 DPDK 的 PMD 能力，通过内存零拷贝、大页、无锁队列等方式极大的提高了网络处理性能，早期支持了 10G 级处理能力，后来随着硬件网卡和 CPU 能力的提升，逐步演进到 100G 级处理能力。由于底层基于通用的 x86 CPU 实现，可编程网关平台 1.0 最大的优势就是可编程能力极强，可以实现任意行为的网络处理能力，例如 L3 转发、VPN、LB、NAT、DPI、IDS 等等。同时，由于本身基于通用服务器实现，天然能够和虚拟化技术结合，支持基于业务需求的弹性扩展能力，实现了资源复用，提高了资源的利用率。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/36/367eaefd9e20e0d3e543c5d8e64470a4.png\" /></p><p></p><p>图 1 可编程网关平台演进</p><p></p><p>可编程网关平台 1.0 在网络应用的发展过程中起到了非常重要的作用，实现了很多网络业务从无到有的突破。但随着业务的持续演进和现网的大规模运营，数据面平台 1.0 逐渐碰到一些问题。首先，随着 4G/5G 基础设施的快速完善，以及以短视频、直播为主的视频类业务的快速发展，网络带宽需求在爆炸式增长，但基于服务器的网络处理能力，仍然停留在百 G 级别，无法跟上业务的增长。导致需要使用大量的服务器资源来扛住业务流量，以一个 6.4T 业务集群为例，需要 128 台服务器资源才能扛住所有的业务流量，运营成本极高。</p><p></p><p>其次，在硬件升级和技术演进的助力下，云上业务的处理性能同步得到大幅提升，导致频繁出现大象流、微突发等网络问题。这类问题由于出现时间短、难以复现，通常很难定位，但出现这类问题时通常会伴随网络丢包和业务抖动，并且会出现多租户之间互相串扰，严重影响客户体验，因而对基于服务器构建的网络系统产生了巨大的挑战。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/70/70f7069d0dca6cd38da730c07cdc3bc6.png\" /></p><p></p><p>图 2 网络带宽与服务器硬件演变趋势</p><p></p><p>基于服务器处理网络业务可行的最主要原因，是充分利用了服务器的多核并行处理能力，实现了性能的大幅度提升，满足了网络传输的高性能转发诉求。而产生上述这些挑战的根本原因，也是在于服务器的系统架构在处理更大规模网络流量方面并不擅长。网络流量流经服务器的典型路径是由网卡收发报文，再通过 PCIe 总线将数据 DMA 到内存，再由 CPU 来处理内存中的数据，整个处理过程非常漫长，需要经历至少 4 种不同的物理器件，导致成本很难降低，并且任意器件的性能问题都会导致整体性能变差。以 CPU 为例，最近十年间，由于 CPU 制程工艺逐渐接近物理极限，摩尔定律放缓成为事实，依靠 CPU 制程提升来提升处理性能的方法已不可持续。在此背景下，单核性能基本趋近于极限，大多数 CPU 厂商采用多核架构来提升性能。这种趋势的问题在于微突发问题严重依赖单核处理性能，同时共享数据的存在使得网络处理性能无法随核数线性扩展。其他硬件单元，如网卡、PCIe 总线、内存等，也存在类似的问题。从图 2 可以看到网络带宽在近十年取得了爆发式的增长，CPU 制程、PCIe 传输率等影响硬件处理性能的关键指标增长却越来越平缓。在这种背景下，可编程硬件为解决这些问题提供了一种全新的思路。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/d0/d0ee90d73823f60555ffd851d2bb09b0.png\" /></p><p></p><p>图 3 可编程网关平台 2.0 软件架构</p><p></p><p>可编程网关平台 2.0 基于可编程硬件构建，实现了 Tbps 级别数据转发能力，相比 1.0 提升了一个数量级，同时成本也得到大幅度优化。在可编程网关平台 2.0 中，数据面流量不再需要经过复杂的物理器件路径，仅在一颗 ASIC 芯片上就可以完成所有的处理逻辑，处理过程十分高效。同时，通过 P4 语言实现了对数据面流水线的灵活编程，以满足业务灵活的可编程诉求。在 2.0 阶段，由于所有业务逻辑基于可编程芯片实现，受限于芯片 SRAM/TCAM 等表项资源限制，业务规格无法做到太大。虽然通过流水线折叠方可以一定程度缓解这类问题，但在某些要求超大规格的网络场景就无法适用。针对这种情况，我们推出了可编程网关平台 3.0，通过软硬件一体化方式，充分发挥异构硬件的优势，通过软硬协同实现超大规模 Tbps 级数据面处理能力。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/7e/7e0f0ad5d7ced4ae545ead85800fd741.png\" /></p><p></p><p>图 4 可编程网关平台 3.0 硬件架构</p><p></p><p>可编程网关平台 3.0 将可编程 ASIC、FPGA、高性能 CPU 一体化，并且通过模块化的硬件设计，实现针对不同场景的灵活定制，满足全业务场景的高性能可编程诉求。在一些业务规格要求不高的场景，可以通过低配 CPU+ 可编程 ASIC 退化为类似 2.0 的方式应用，尽可能减少成本，提高资源利用率。在一些业务规格要求较高的场景，可以通过 FPGA 扩展的方式实现大规格表项，满足业务大规格诉求。在一些特殊应用场景中，还可以将高性能 CPU 作为数据面慢路径，可编程 ASIC 作为快路径，通过软硬协同方式满足特殊场景需求。</p><p></p><p>可编程网关平台已经在腾讯网络中大规模部署应用，以下内容将就可编程网关平台的典型应用场景进行介绍。</p><p></p><p></p><h2>企业专线接入</h2><p></p><p></p><p>许多企业客户基于既有资源利用、数据安全、合规要求等原因，会采用混合云的方式来利用云上的各种服务。如何将企业云上资源与自有资源打通是一个重要问题，企业专线接入是解决这种问题最常用的手段之一。腾讯企业专线接入服务的主要特点是能够提供大带宽、低时延、高性能、高可靠的专线接入能力，可编程网关平台是提供这些能力的基础。目前基于可编程网关平台，腾讯企业专线接入服务已支持 10Tbps 级别带宽接入，2us 转发时延，单机支持 Tbps 级转发能力，在可靠性方面支持多线接入、跨 AZ 容灾、单节点 NSR 等能力，为企业客户业务上云提供了坚实可靠的底层能力。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/3d/3de1895b5af2b130857016ba7749e0cb.png\" /></p><p></p><p>图 5 企业专线接入</p><p></p><p>数据面可编程能力在企业专线接入场景有多方面的应用。在基础互联互通能力方面，为保护客户私有数据的安全性，腾讯云采用了定制 GRE 的方式来实现 Overlay 隔离，基于可编程网关平台可以便捷的实现这种定制转发行为，实现租户之间的安全隔离。同时，企业专线服务需要具备软件能力迭代、故障处理、跨 AZ 容灾等能力，这些能力要求数据面能够高效响应业务变化，并且在变化过程中业务无感知，可编程网关平台通过 RPC 方式与云上各类业务系统联动，支持快速故障感知、秒级业务迁移。另外，作为网关类型业务，企业专线业务要屏蔽云上网络细节，因此专线网关上需要支持大规模路由表项的维护，大型企业客户甚至达到 10 万级别的路由量，可编程网关平台通过流水线折叠扩展了业务表项，满足了大规格业务需求。</p><p></p><p></p><h2>运营商公网接入</h2><p></p><p></p><p>云上客户存在一个普遍诉求就是通过云上资源触达用户，运营商公网接入主要承载此类业务。早期腾讯运营商公网接入主要依赖商业设备来实现，但传统网络解决方案主要基于路由相关策略进行业务支持，无法精细化感知业务细节。通过可编程网关平台可以基于业务应用进行差异化调度，提升公网服务能力。以精品网业务为例，云上众多客户对网络质量要求各不相同，有些要求时延低，有的要求带宽高，有些要求成本低。而公网资源十分宝贵，如果对每个客户都采用相同的策略提供公网服务，将无法满足客户个性化需求，也无法收回成本。将质量敏感成本不敏感的业务走质量较好的链路，成本敏感但质量容忍度高的业务走带宽较大的链路，通过这种方式将网络流量分而治之，为不同客户提供差异化服务。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/62/6261e1530a72671fa924b461910ce2d0.png\" /></p><p></p><p>图 6 BGP 精品网服务</p><p></p><p>通过可编程网关，可以将不同的客户不同的业务区分开来，达到差异化服务的目的。可编程能力在公网服务中应用较多。在基础业务特性上，通过基于源 IP 选路的方式实现业务感知，公网服务通常是基于 IP 来提供服务的，通过源 IP 进行路径选择，可以较好的基于业务诉求来调整网络路径，实现差异化服务。另外，公网服务本身为公域流量提供服务，难以避免的存在网络攻击等安全问题，通过可编程网关可以在公网入口将流量调度到腾讯安全清洗中心，保证正常业务的安全。公网业务可编程应用较多，这里不再赘述，可编程网关平台丰富了公网业务的武器库，为公网业务的进一步演进提供了可能性。</p><p></p><p></p><h2>边缘互联网络</h2><p></p><p></p><p>随着分布式云的出现，大量客户选择根据业务的特点将云计算资源分布式地部署在中心云、边缘云，甚至是客户机房以取得性能和成本的折中。趋势之一是越来越多的云资源被部署在靠近数据和业务发生的网络边缘，以满足高带宽、低时延、数据不出局等需求。分布式云的典型场景包括在线课堂、自动驾驶、云游戏、AR/VR 等对带宽和时延有着严苛要求的新兴应用。</p><p></p><p>分布式云的快速生长引入了大量的边缘云节点，将原本只连接中心云的骨干网络（DCI/vDCI）通过互联网向外扩张，形成了复杂、异构的边缘互联网络。传统的骨干网通常由稳定的大容量专线提供业务承载，边缘互联网络则由互联网承载，如何在不安全、欠稳定的互联网之上构建高可靠、高性能的边云、边边互联是我们发展分布式云遇到的全新课题；边缘云节点规模小，通常只能容纳数百台服务器，如果照搬中心云的设计，用于部署机房间加密互通、VPC 互通、虚实互通、NAT 等功能的网关服务器将占据 15%~30% 的机架空间，大大增加了边缘云节点的成本。如何通过软硬一体化设计融合网关功能降低网关成本是我们遇到的另一关键问题。此外，边缘互联网络发展过程中还涌现出了其他新的问题，包括但不限于智能化的管控、灵活的选路、路径优化等等。为此我们基于可编程网关平台 3.0 研发了新一代超融合边缘网关 HyperSGW, 以满足边缘互联网络在新功能、低成本、高集成度方面的诸多需求。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/c1/c1bc432cd90d743e20c0bb0534501027.png\" /></p><p></p><p>图 7 边缘网关系统架构</p><p></p><p>通过 HyperSGW 我们实现了多种适用于边缘场景的特性。</p><p></p><p>首先，实现了多链路优选，实时调度，支持边云、边边加速。腾讯中心 - 边缘一体化网络是由成百上千个 HyperSGW 构成的 full mesh 网络，任意两个边缘节点的 HyperSGW 之间存在多条不同运营商提供的直连（边边互联）和非直连（边 - 云 - 边）链路。不同运营商的链路在成本和质量上存在一定的差异性，而同一链路的质量（时延、带宽、丢包率）随网络负载的波动呈时变特性，使得租户的链路优选变成了一个含时间参数的动态规划问题。结合 HyperSGW 的高精度立体探测机制，控制器系统实时采集网络拓扑和节点流量，周期性地更新优化问题的约束条件，求取最优解并下发转发面，实现租户的全局路径优化和边云、边边加速。</p><p></p><p>另外，实现了基于成本、时延、质量的意图转发，满足云租户的个性化网络需求。利用 HyperSGW 的可编程能力，支持业务自定义调度标识，帮助客户按照不同的业务类型进行差异化调度选择。通过与底层物理网络在控制面和转发面的联动提供灵活的多级调度，客户可以在多个网络路径中，按需选择时延最低、成本最低或质量最优的线路。我们通过自研的多目标多约束调度算法，实现了客户可自定义的、多维度组合的调度策略，比如“在满足指定的时延范围内，选择成本最低的线路”，“在满足指定可用率范围内，选择时延最小的线路”等等，以尽可能满足云租户个性化的网络需求。</p><p></p><p></p><h2>结&nbsp; &nbsp;语</h2><p></p><p></p><p>互联网建立至今的数十年时间里，网络一直在不断演进，实现了人、信息、商品、服务等各种元素的丰富连接。在这个过程中，网络的承载技术也在不断演进，从早期的窄带宽带，到移动互联网，到现在的云网络时代。可编程网络为大规模云上服务而生，是云上服务与企业客户、终端用户之间的桥梁。在可编程网关平台的助力下，云网络将为不同的客户不同的应用提供更加灵活、高效、安全的连接服务。</p><p></p><p>作者简介：</p><p></p><p>郑胜利，腾讯网络平台部网关团队负责人，致力于网络领域产品研发，先后负责腾讯公网传输系统、对等连接、专线接入网关、公网接入网关等产品研发，熟悉高性能包处理、可编程硬件、高可靠 BGP 等网络技术。</p><p></p>",
    "publish_time": "2022-08-31 16:08:28",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "JuiceFS 在携程海量冷数据场景下的实践",
    "url": "https://www.infoq.cn/article/RIRpjEkQi4FUBDZf9w2E",
    "summary": "<p>一、摘要</p><p></p><p>携程的冷数据规模在 10PB+，包括备份数据、图片语音训练数据和日志数据等，存储方案主要是本地磁盘和GlusterFS。在实际使用中这些方案遇到了不少痛点：</p><p></p><p>GlusterFS 在单目录下文件众多时，ls命令速度很慢；&nbsp;受疫情期间机器采购周期的制约，无法灵活地根据实际需求弹性扩缩容，存储成本控制困难；磁盘损坏等故障带来的机器替换和扩缩容操作，使得运维成本居高不下。</p><p></p><p>随着云计算技术的发展，公有云厂商为混合云客户提供了海量冷数据的廉价存储方案，经过严谨的成本计算，我们发现使用公有云的对象存储可以显著降低存储和运维成本。为了减少迁移成本，我们一直在寻找后端存储能支持各类公有云对象存储、高性能的文件系统，直到JuiceFS 出现在我们的视野中。JuiceFS有以下优势：</p><p></p><p>POSIX 接口，对应用无侵入强一致性，文件修改立刻可见，为同一个 volume 被多台机器挂载的场景提供 了close-to-open 保证支持了主流的公有云对象存储，支持开源软件作为元数据引擎（Redis、TiKV）等支持云原生，能够将volume以 CSI 的方式挂载到Pod上社区活跃，代码更新快</p><p></p><p>经过大半年的测试和使用，我们已经对接了数据库备份和 ElasticSearch 冷数据存储，将2PB+的数据迁移到了JuiceFS，预计后续还会有10PB+的数据接入。目前JuiceFS系统稳定，在降低运维成本和存储成本方面取得了良好的效果。本文将对JuiceFS原理以及我们在使用中所遇到的问题和采取的优化方案进行简单介绍。</p><p></p><p>二、JuiceFS 架构与POC 测试</p><p></p><p>2.1 架构简介</p><p></p><p>JuiceFS 将元数据信息和真实数据块分开管理，通过 FUSE 实现 POSIX 接口，允许用户像本地文件系统一样使用。用户将文件写入JuiceFS挂载的目录后，文件数据会存储到对象存储，相应的元数据（文件名、文件大小、权限组、创建修改时间和目录结构等）会存到元数据引擎中。在该架构下，ls、数据删除等操作只是对元数据引擎的操作，不受到对象存储的速度限制，性能上会有较好的保证。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/01/01e7119049c5e6127833f0406338b9ff.png\" /></p><p></p><p>2.2 元数据引擎选型与测试</p><p></p><p>JuiceFS 的元数据引擎有很多选择，包括开源的Redis、TiKV以及官方提供的闭源的企业版元数据引擎。考虑到携程的数据规模较大并且后续会有更多的数据接入，元数据引擎需要能够支持TB 级元数据的存储并且能横向扩容。因此TiKV和官方的企业版元数据引擎成了我们的备选方案。</p><p></p><p>为了验证TiKV的性能，我们使用 go-ycsb做了一些性能测试。</p><p>&nbsp;</p><p></p><p></p><p>测试结果：</p><p></p><p>1）Write 事务写入操作，随着客户端线程数增加，TPS上升，峰值超过30000</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/99/993fc7b92d859cd727e7d0a8f3baa068.png\" /></p><p></p><p>2）Get事务读取操作， 随着客户端线程数增加，QPS上升，单节点峰值接近70000</p><p><img src=\"https://static001.geekbang.org/infoq/a2/a2c623a1d5d14f133b11ffaecf3e6421.png\" /></p><p></p><p>从测试结果看，TiKV有较高的读写吞吐量，并且单次操作的响应时间P99&lt;10ms，在冷数据场景中性能表现可满足业务需求。</p><p></p><p>官方的企业版元数据引擎比TiKV有更好的性能表现，但是考虑到冷数据存储对性能要求并不苛刻，而且相比于对象存储20~200ms的访问速度，元数据引擎并不会明显降低整个系统响应的速度。为了减少技术黑箱，我们选择了TiKV作为元数据引擎。</p><p></p><p>2.3 JuiceFS 整体POC测试</p><p></p><p>在交付生产之前，为了明确SLA指标和最佳使用场景，我们使用mdtest对以TiKV为元数据引擎的JuiceFS进行了整体POC 测试，部署使用如下架构：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/20/209bb74d649daedb7914f509f70848ca.png\" /></p><p></p><p>1）单线程写入，测试文件大小与吞吐量的关系</p><p><img src=\"https://static001.geekbang.org/infoq/d0/d0c544b1593966dab0673509263b3c51.png\" /></p><p></p><p>测试结果表明随着文件大小增大，吞吐量也随之增大。在单文件为 128MB~256MB 左右时，原先的吞吐量与文件大小的增长曲线明显放缓。可以理解为当文件较小时，JuiceFS客户端与元数据引擎和对象存储的交互成本与有效数据传输成本相比，占比较高，限制了吞吐量；当文件较大时，交互成本占比降低，吞吐量上升。为了发挥充分JuiceFS的吞吐能力，建议存储128MB以上的文件。</p><p></p><p>2）目录深度与 JuiceFS IOPS 的关系</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/fd/fdae344a57e728cbedcdebf2476f694e.png\" /></p><p></p><p>测试结果表明目录深度与 JuiceFS IOPS 没有明显关系。研究JuiceFS代码可知，虽然深度越深，文件路径变长，但 JuiceFS在创建文件/目录时在TiKV里的Key是父目录 inode + 新条目的名字，所以目录深度不影响TiKV里的键值对大小，就不影响TiKV的查询性能，符合测试结果。</p><p></p><p>3）目录大小与 ls速度的关系</p><p></p><p></p><p></p><p>测试结果表明目录下文件个数对ls几乎没有影响。</p><p></p><p>2.4 元数据引擎故障测试</p><p></p><p>理论上TiKV 节点中 Region 通过 Raft 保证一致性，即非 Leader Region 故障完全不影响上层应用，Leader Region 故障则会在该 Region 的副本中重新选举出一个 Leader Region，选举需要时间，并且需要上报 PD 节点进行处理，因此会影响到上层应用的部分请求。</p><p></p><p>PD 集群用来管理 TiKV 集群，PD 的非 Leader 节点故障完全不影响上层应用，Leader 节点故障则需要重新选举新 PD Leader，选举过程 JuiceFS 客户端的请求无法得到响应，新 Leader 节点确立后 JuiceFS 重新建立连接也需要一定耗时，该时间段内会对上层应用的请求产生影响。</p><p></p><p>据此我们模拟节点故障的场景，测试实际应用过程中元数据引擎故障后恢复所需时间，计算正常场景中读写一定数量文件与异常情况下的耗时差异。结果表明故障影响时间可以控制在秒级。</p><p></p><p>1）TiKV 故障</p><p></p><p></p><p></p><p>2）PD 故障</p><p></p><p></p><p></p><p>三、JuiceFS原理解析</p><p></p><p>3.1 文件写入</p><p></p><p>JuiceFS 接收到写请求会先将数据写入 Buffer，并按照 Chunk、Slice、Block 的规则进行数据块管理，最后以 Slice 为维度Flush到对象存储。一次 Flush 实质上是对 Slice 中的每个 Block 进行 PUT 操作，将数据写到对象存储，并完成元数据修改。如下图：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ed/ed9815e8a50eb38c47fd0d96889cccbe.png\" /></p><p></p><p>1）大文件先经过 FUSE 处理成 128K 的块，在JuiceFS内部拼成一个个4M大小的Block，Slice 管理的Block不断增加，直到 Slice 达到 64M（即一个 Chunk 的大小），触发一次 flush操作。Chunk、Slice、Block 的拼装使用的是内存buffer，其大小受JuiceFS启动参数buffer-size 的限制。&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p><p>2）小文件由新的 Slice 单独管理，在文件写入完成时被上传到对象存储。</p><p></p><p>3）如果客户端设置 writeback 模式，JuiceFS 不会直接写数据到 Object Storage，而是写到 JuiceFS 所在机器的本地磁盘，后续异步写到对象存储。这种方式存在丢数据的风险，但是可以提升数据写入速度。</p><p></p><p>3.2 文件读取</p><p></p><p>读取流程数据处理方式与写入流程类似，读取请求被 JuiceFS 进程接收到后会先访问元数据引擎，找到需要读取的 Block，向对象存储并发发出 GET 请求。由于 Block 数据不变性，读取出的 4M 的 Block 会写到本地的缓存目录中。读取过程中按照 4M（Block） 的方式实现了一定程度的预读，可以通过调整 prefetch 参数，将预读窗口设置的更大，默认 prefetch = 1。如下图：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c7/c7ec044a5fa6adecb48ff84e741729eb.png\" /></p><p></p><p>1）大文件顺序读场景下，会读取对象存储中4M 大小的对象，经过 FUSE 处理成 128K 的块返回给用户。此场景中缓存命中率会很高，由于预读和本地Block缓存，吞吐性能较好。&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p><p></p><p>2）大文件随机读场景下流程和顺序读一致，该场景下的预读、缓存被命中的概率很低，这些逻辑反而可能影响读取性能（需要将读取到的数据写入本地缓存目录），可以通过设置 cache-size = 0 关闭缓存。</p><p></p><p>3）小文件（例如 4K）读取场景下，会读取当前文件的 Block，经过 FUSE 后响应给用户程序。获取到的数据也会写到本地缓存目录中。</p><p></p><p>四、故障处理与性能优化</p><p></p><p>4.1 TiKV CPU使用率过高，导致拒绝服务</p><p></p><p>现象：TiKV kv_scan请求数突然上升，unified_read_po 线程池CPU使用率被打满</p><p></p><p>分析：客户端运行cleanTrash任务导致的。Beta 1版本的客户端会同时进行该任务，当同一个volume挂载的客户端较多，并且trash中的数据量非常多的时候，该任务会对元数据引擎造成突发的压力。</p><p></p><p>解决方案：</p><p></p><p>1）增加客户端对元数据引擎各个接口的调用量监控，便于快速诊断是哪些客户端导致的问题；</p><p></p><p>2）将后台任务从客户端中剥离，客户端只需要执行用户的请求，cleanTrash这样的后台任务交给单独的组件执行，便于JuiceFS管理员控制；</p><p></p><p>3）升级客户端，Beta3开始增加了分布式锁，并且增加了no-bgjob启动参数。</p><p></p><p>4.2 TiKV 数据泄露</p><p></p><p>现象：文件数目和OSS中的数据量没有增加的情况下，region数目不断增加，store size不断增加</p><p></p><p>分析：通过tikv-ctl查看TiKV里的数据，发现MVCC的修改和删除记录没有被清除。完整的TiDB部署会10min触发一次数据GC。但是单独部署TiKV，数据GC需要由其他程序触发。另一方面5.0.1版本的TiKV有bug，数据GC没有清理删除记录，<a href=\"https://github.com/tikv/tikv/issues/11217\">相关issue</a>\"。</p><p></p><p></p><p>解决方案：</p><p></p><p>1）参考</p><p><a href=\"https://github.com/tikv/client-go/blob/v2.0.0/examples/gcworker/gcworker.go\">https://github.com/tikv/client-go/blob/v2.0.0/examples/gcworker/gcworker.go</a>\"</p><p>单独实现一个组件，定期调用GC功能</p><p></p><p>2）升级TiKV到5.0.6</p><p></p><p>4.3 CSI 挂载场景中，PV 清理后数据 OSS 中数据无法回收</p><p>现象：k8s中的ElasticSearch 所有Pod、PVC、PV 下线一天后 OSS 数据仍没被清理。</p><p></p><p>分析：PV 被清理时 CSI 执行了 JuiceFS rmr 指令，将 volume 数据全部放到回收站，根据默认配置 trash-day=1，即一天后开始回收数据。由于环境中的 JuiceFS mount Pod 已经全部下线，即没有 JuiceFS 进程挂载了 CSI 的 volume，于是出现了没有清理回收站的情况。</p><p></p><p>解决方案：由于 CSI 模式使用 JuiceFS 是模拟了 subdir 的过程，即整个 CSI 管理 Pod 挂载的 volume 是同一个，通过写到子目录的方式进行数据隔离。我们停止了mount pod的所有后台任务，另外找了一台机器挂载该 volume来完成自动清理回收站数据等后台任务，该方法也消除了后台任务带来的客户端性能抖动。</p><p></p><p>4.4 客户端使用内存过高</p><p></p><p>现象：部分使用 JuiceFS 的机器占用内存过高，达到了 20GB+。</p><p></p><p>分析：</p><p></p><p>1）通过 cat /proc/$pid/smaps 查看，发现占用的内存都是 Private_Dirty，说明是被 JuiceFS 进程长期持有，不是 Page Cache 缓存占用导致。</p><p></p><p>2）通过使用 pprof 工具分析 heap 占用情况，可推测出是 dump meta（backup）导致的异常。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4c/4c223735c8b32e0100a7c1fc41ab7799.png\" /></p><p></p><p>解决方案：将客户端的启动参数backup-meta默认值改为0，元数据备份参考官方的实现思路通过另外的组件统一实现，客户端不执行元数据备份任务。</p><p></p><p>4.5 优化后架构</p><p></p><p>生产实践过程中涉及数PB级的数据，业务场景相差巨大，经过规划与调优，最终演进成如下架构。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/82/8219f861a840fb44d134e189fa112876.png\" /></p><p></p><p>1）量级较小的业务由用户挂载的JuiceFS client治理session、trash等数据。&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p><p>2）量级较大的业务（PB级、数百client级）挂载的client不处理session、trash等数据的清理（开启no-bgjob参数），由admin 提供一个client单独处理，并提供清理加速的能力。</p><p></p><p>3）提供了一个client统一做同一tikv集群内所有volume的backup-meta操作。</p><p></p><p>4）提供访问OSS和TIKV集群的限流能力，通过命令下发修改client的限流能力，用于在必要情况下保护专线带宽、元数据库，实现服务降级。</p><p></p><p>5）使用多套元数据集群用来隔离行为差异较大的业务。</p><p></p><p>6）提供服务触发TiKV的GC。</p><p></p><p>五、总结与展望</p><p></p><p>通过 JuiceFS 将冷数据上公有云， Elasticsearch 实现了一定程度的存算分离，去除了副本带来的内存需求，提升整体集群数据存储能力。DBA 备份数据从 GlusterFS 迁移到 JuiceFS 后 ls 等行为的性能大幅提高，不仅运维人员不再需要投入精力进行磁盘扩容维修，大大降低了运维成本，而且用户还能够按照保留时间快速地控制存储成本。</p><p></p><p>目前已有2PB 来自 ElasticSearch、DBA 备份的数据存储到JuiceFS，后续我们会推动更多的数据上JuiceFS，当然后续也很多需要进一步探索和优化的地方，例如：</p><p></p><p>1）进一步优化元数据引擎 TiKV 的性能与提升 JuiceFS 的稳定性，以应对10PB+的数据量。</p><p></p><p>2）探索JuiceFS在ClickHouse冷数据存储上的使用方法。</p><p></p><p>3）公有云场景下使用JuiceFS替换HDFS，以降低云上的存储成本。</p><p></p><p>作者简介：</p><p>妙成，携程云原生研发工程师，主要从事Elasticsearch、JuiceFS的研发运维，关注分布式数据库、NoSQL。小峰， 携程云原生研发工程师，主要专注于数据库容器化领域，对分布式存储有浓厚兴趣。</p>",
    "publish_time": "2022-08-31 16:47:09",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "vivo搜索业务平台化建设",
    "url": "https://www.infoq.cn/article/xRLyuN8Lvclb4i2VUmSy",
    "summary": "<p></p><h1>背景</h1><p></p><p>在2021年下半年，由于业务调整，我们团队在原来已经负责全局搜索服务的基础上，又对接了i音乐和i主题的搜索服务，在团队人员不变、需求高速迭代、业务规模快速增长的情况下，效能上面临的问题也越发凸显：</p><p></p><p>没有统一开发模式。三个业务最初是由三个不同的团队分别开发迭代，不同团队有不同的开发模式，导致相同业务逻辑的实现方式千差万别，更多的是根据开发人员自身的喜好或者代码习惯进行开发，缺少统一规范；缺少公共能力沉淀。由于业务由不同的团队开发，各个业务更多的是根据各自的业务需求纵向发展，通用功能很难沉淀，存在大量功能重复的代码逻辑，并且随着团队人员的不断更新，团队人员的主要精力放在业务迭代和系统维护上，缺少统一的系统能力抽象；系统功能不断扩展，业务复杂性不断上升。随着需求的快速迭代，业务系统的代码量和架构复杂度也在快速提升，业务代码量级已经发展到十万级别的规模。开发过程中很难保证对文档做出有效沉淀，新接手的同学在维护迭代时只能通过阅读源码去理解业务逻辑，难以高效进行需求迭代；业务流程复杂，各种功能繁多。搜索系统本身就很复杂，搜索调用链路长，涉及到的周边系统多。开发同学在进行业务迭代时，还需要考虑到是否会对上下游链路产生负向影响。</p><p></p><p>总体来看，我们要解决的问题是：如何更快开发迭代——少写或不写代码，更快上手优化——业务流程易理解，更快上线交付——操作简单易实现。</p><p></p><h1>搜索流程分析</h1><p></p><p>三个项目面对的业务场景大相径庭，但是都是搜索相关的业务场景。所以我们对这三个业务流程进行仔细的梳理，并从中发现了一些规律。</p><p></p><h2>全局搜索流程</h2><p></p><p>全局搜索是<a href=\"https://xie.infoq.cn/article/abc21e740092340f55be2d724\">vivo手机</a>\"重要的内置应用，致力于满足用户信息、服务获取的需求，为用户提供高效、个性、智能的建议、搜索服务，提供一站式的搜索体验。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/3e/41/3edee1d0824007b6bd5eb10239698641.png\" /></p><p></p><p>&nbsp;</p><p>全局搜索应用界面</p><p></p><p>全局搜索的具体业务流程如下：</p><p>1.&nbsp;用户请求，用户通过全局搜索客户端发起主动搜索请求；</p><p>2.&nbsp;前置处理，服务端中控服务在接收到用户请求后，会依次完成意图、特征、分词、搜索词处理等步骤，为后面的召回阶段做准备；</p><p>3.&nbsp;垂类召回，中控服务将请求分发到各个垂类服务，并行召回数据结果；</p><p>4.&nbsp;后置处理，中控服务在接收到各垂类的召回结果后，会进一步对整个结果进行过滤、排序、人工规则干预、结果高亮、分页等步骤的处理，并生成最终的数据结果；</p><p>5.&nbsp;结果返回，服务端将最终结果返回给客户端。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/c0/33/c015a796226383bc1b275d46ec65c233.png\" /></p><p></p><p>&nbsp;</p><p>全局搜索处理流程</p><p></p><p>在上图的多垂类结果召回阶段中，每个垂类的具体处理流程与整理流程基本一致，即也要经过前置处理，数据召回、后置处理阶段，具体如下：</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/ab/85/ab18ab3080e23f6789f8719b467a1d85.png\" /></p><p></p><p>&nbsp;</p><p>垂类具体处理流程</p><p></p><h2>i音乐搜索流程</h2><p></p><p>i音乐搜索是vivo默认的音频播放器i音乐App内的搜索功能，入口为App首页的顶部搜索框，为用户提供便捷的音乐搜索服务。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/e8/e7/e89482ae1389e84c4dd3c8byyb362ae7.png\" /></p><p></p><p>&nbsp;</p><p>i音乐搜索应用界面</p><p></p><p>总体业务流程如下：</p><p>1.&nbsp;用户请求：用户通过i音乐客户端发起主动搜索请求；</p><p>2.&nbsp;前置处理：搜索服务在收到搜索请求后，会依次完成参数校验、搜索词归一化、同义词、纠错词、禁搜词、意图识别、实体识别，为后面的召回阶段做准备；</p><p>3.&nbsp;数据召回：并行检索歌曲、歌手、视频、专辑、歌单、听书结果内容，从不同的数据源召回相关数据；</p><p>4.&nbsp;后置处理：给歌曲、歌手等楼层做排序、聚合等处理，并提取各楼层精品结果生成最终数据；</p><p>5.&nbsp;结果返回：服务端将最终结果返回给客户端。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/ff/6e/ff947c8215795352aaf7ba0f86b4666e.png\" /></p><p></p><p></p><p>&nbsp;</p><p></p><h2>i主题搜索流程</h2><p></p><p>i主题搜索是i主题应用的搜索服务，为用户提供包括主题、铃声、字体、壁纸等资源的搜索。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/e8/e7/e89482ae1389e84c4dd3c8byyb362ae7.png\" /></p><p></p><p>&nbsp;</p><p>i主题搜索应用界面</p><p>&nbsp;</p><p>i主题搜索流程与前两个类似，具体处理步骤如下：</p><p>1.&nbsp;用户请求：用户通过i主题客户端发起主动搜索请求；</p><p>2.&nbsp;前置处理：搜索服务在收到搜索请求后，会依次完成搜索词的标准化、同义词处理、拓展词处理、黑名单过滤以及标识符处理，为后面的召回阶段做准备；</p><p>3.&nbsp;数据召回：从ElasticSearch以及Redis中召回包括主题、字体、壁纸等资源相关数据；</p><p>4.&nbsp;后置处理：对召回结果进行排序、去重、过滤处理，根据人工干预规则进行调整，并进行高亮和分页从而生成最终结果数据；</p><p>5.&nbsp;结果返回：服务端将最终结果返回给客户端。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/8f/aa/8f241e6f26d1ab2510d34ac1d971d9aa.png\" /></p><p></p><p>&nbsp;</p><p>i主题搜索流程</p><p></p><h1>平台能力建设</h1><p></p><p></p><h2>搜索流程抽象</h2><p></p><p>通过分析以上三个不同业务的搜索流程可以发现，虽然它们业务形态千差万别，但是对流程进行抽象后，三个搜索业务的流程基本一致，具体如下：</p><p>&nbsp;</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/28/e4/28fabd7af912734a4c1a9eacf9c8a6e4.png\" /></p><p></p><p></p><p></p><p>&nbsp;</p><p>搜索服务的整体流程</p><p></p><p>前置处理阶段：对用户输入的查询词进行处理，主要包括请求参数的加解密，查询词的改写(纠错、补全、同义词等)、理解(意图、实体、分词)等。召回阶段：单路召回或者多路召回，包括倒排检索召回、模型计算召回、向量检索召回，但是全搜业务比较特殊，是多垂类召回。后置处理阶段：对召回结果进行排序，包括粗排(相关性模型排序，时效性排序)，精排(权威性、质量度、多样性、模型、神经网络等)，合并不同来源数据并去重；根据活动运营规则，临时干预策略或者人工配置的规则对排序后结果进行过滤筛选。</p><p></p><p>对流程进一步抽象后可以看到，搜索流程具有一般性，即用户发起搜索请求，经过前置处理、数据召回、后置处理后返回搜索结果，搜索上下文在整个过程中负责中间数据结果的传递，具体如下：</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/1d/79/1d3f8a4f6f176ea6d2815d2a99990079.png\" /></p><p></p><p>&nbsp;</p><p>搜索服务流程抽象</p><p></p><p>综上所述，一个搜索流程可以抽象成一个执行计划，每个流程又由许多不同的步骤(执行阶段)组成，每个步骤包含不同的业务逻辑(处理器)，具体对应关系如下：</p><p></p><p>业务功能对应关系</p><p></p><p>针对开发功能中面临的实际问题，我们的解决思路是：</p><p>1.&nbsp;开发流程规范化。制定统一的开发规范，对原有的业务功能进行解耦，确定每个功能的职能边界，尽量复用公共组件进行开发；</p><p>2.&nbsp;公共能力组件化。梳理业务流程，将公共能力沉淀到搜索平台中形成公共组件，业务人员在开发时可以直接通过业务配置进行复用。同时，这些通用能力是标准化的，业务可以按标准规范进行开发，易于在不同业务中分享和使用。当通用组件满足不了业务场景时，业务人员就可以根据标准规范补充更多的通用组件，快速满足今后类似的需求开发；</p><p>3.&nbsp;搜索流程可视化。以流程图的形式展示完整的业务搜索流程，业务人员可以通过流程图快速熟悉业务流程，了解每个功能的上下环节，更好的把控整体业务流程。</p><p></p><h2>组件能力实现</h2><p></p><p>通过对业务逻辑进行抽象，我们发现搜索流程和具体步骤都不会涉及到具体的代码逻辑，只是对整体搜索过程进行串联和约束，为此我们开发了搜索平台流程编排功能，并对基础功能进行抽象和封装，形成一个个通用的系统服务组件给不同业务使用，而业务中特有的业务逻辑可以定制开发，这样可以将整个业务逻辑中变与不变的部分区分开来。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/fb/7e/fb076182296f017e11003468463bf87e.png\" /></p><p></p><p>&nbsp;</p><p>平台化后架构图</p><p></p><p>我们对不同业务的公共能力进行抽象，并封装成公共组件由搜索平台进行管理。在业务对接搜索平台后，业务人员就不再需要关注<a href=\"https://xie.infoq.cn/article/9e5b8b6b5e4a674fda737826c\">基础能力</a>\"的具体实现，而是可以直接在搜索平台中进行配置，从而专注于业务功能的迭代；与此同时，业务人员还可以根据实际需要不断扩充搜索平台的组件类别，提升组件能力，并提供给其他业务使用。业务和平台之间相辅相成，业务促进平台能力的提升，平台也能进一步赋能业务的发展。</p><p></p><p>针对于不同业务场景中存在的相同逻辑功能，我们参考了低代码平台的实现思路，将通用功能封装成公共组件，开发人员通过页面拖拽配置组件实现通用的功能，少量代码即可完成业务功能扩展，从而实现便捷构建搜索流程。使用者可以通过页面可视化配置的方式对整个搜索流程进行组装，从而满足不同的业务需求。</p><p></p><p>通过对已有业务能力以及一般搜索业务流程逻辑进行梳理，我们总结了3大类8个小类的公共组件模块，具体如下：</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/0b/ee/0bc6d7ec39cbe4b09d3a02acf64ea6ee.png\" /></p><p></p><p>&nbsp;</p><p>公共组件模块</p><p></p><p>以上组件基本涵盖了搜索全流程的各个环节，业务开发人员在日常迭代过程中可以直接使用组件库中提供的组件模块进行可视化开发，如果不能满足需求，可以自行进行扩展。同时我们也定义了一套标准规范，所有内置的公共组件都按照这套规范进行开发，业务人员也可以按照这套规划开发自己的组件并共享到组件库中，而组件又是可以插拔的，业务之间都可以方便的拿来复用。</p><p></p><h2>搜索链路监控</h2><p></p><p></p><p>搜索服务涉及的垂类业务多，调用链路长，不仅包括团队自身维护的业务垂类，还包括算法团队、图谱团队等，当线上业务出现问题或者搜索结果出现badcase时，往往只能通过日志信息进行排查。这样不仅需要有详细完整的日志信息，而且要求开发人员能够熟悉整个业务流程才能快速对问题进行定位。在调用链路还比较短、业务功能还比较单一的时候，这种方式还是能够比较有效的帮助我们对问题进行定位和排查。但是随着业务的快速发展以及用户数量的快速增长，日志信息的规模也呈现指数级别的增长，这样会给日志采集系统带来极大的压力。此外，日志信息往往不能直观的展示服务中的具体问题，往往需要对应功能模块的开发同学进一步进行判断和定位，从而极大提高了问题的解决成本。因此，我们团队对业界已有的服务全链路监控工具进行调研，最后选择SkyWalking作为搜索服务的链路监控工具。</p><p></p><p>SkyWalking是一款优秀的APM工具，提供分布式追踪、服务网格遥测分析、度量聚合和可视化一体化解决方案。在实际使用过程中，由于搜索服务每天的请求量较大，我们并不是直接使用SkyWalking对每个请求的完整调用链路数据进行监控，这样每天会产生几十TB的监控数据，而且绝大部分都是无用的，而是对某个调试请求接口进行监控。当线上环境出现搜索结果异常或者其他问题时，可以直接通过请求该接口进行问题复现，然后通过SkyWalking对整个调用链路的请求和访问数据进行收集监控，并通过SkyWalking的可视化界面对问题快速定位。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/6c/76/6c5f4a58b26c72f3b6e7645aba4e4f76.png\" /></p><p></p><p>&nbsp;</p><p>SkyWalking监控流程图</p><p></p><p>监控流程如下：</p><p>1.&nbsp;在项目代码中预设相关监控注解埋点。首先在项目工程中引入SkyWalking相关jar包，然后对请求链路上调用的方法添加注解，并输出入参和出参；</p><p>2.&nbsp;部署SkyWalking服务，并配置数据存储集群。使用容器对SkyWalking进行部署，并配置SkyWalking链接ElasticSearch集群，ElasticSearch集群负责存储SkyWalking的各种上报数据；</p><p>3.&nbsp;通过指定的问题复现接口获取请求链路数据。在线上环境的结果数据出现问题时，通过查询关键字以及其他有关信息进行快速定位，然后拼装完整访问参数调用请求接口对文件结果进行复现；通过SkyWalking UI的追踪页面功能对整个调用链路的数据进行排查，快速定位出现问题的功能和代码并进行修复。</p><p></p><h1>落地实践与成果</h1><p></p><p>目前我们已经将全局搜索一部分业务接入搜索平台，并将逐步对接i主题和i音乐搜索业务，且已经初见成效：</p><p>1.&nbsp;项目维护成本降低。通过将基础能力沉淀到平台中进行复用，我们将至少可以减少了30%的项目代码量；并且通过可视化组件配置，业务逻辑将变得十分直观，业务人员可以更高效的理解整个业务链路逻辑；</p><p>2.&nbsp;项目开发效率提升。在平台化升级后，我们可以将更多的精力投入到业务逻辑实现上，业务功能开发周期由原来的5天缩短到3天左右；</p><p>3.&nbsp;减少开发人员的投入。原来我们需要投入8个人力进行三个项目搜索功能的开发工作，现在我们只需要5个人力就可以保障业务的正常迭代和运行；</p><p>4.&nbsp;问题解决速度加快。在对接SkyWalking链路跟踪服务后，我们对于产品中遇到的问题的定位和解决时长由原来的小时级缩短到现在的分钟级。</p><p>&nbsp;</p><p></p><h1>总结与展望</h1><p></p><p>通过对全局搜索、i音乐搜索、i主题搜索三个业务场景的分析和搜索流程的抽象，我们一步步推进项目架构的迭代和创新，打造能力复用的搜索平台为业务开发降本增效。</p><p></p><p>未来，我们将进一步丰富和完善组件库资源，降低业务开发成本；深化<a href=\"https://xie.infoq.cn/article/85b9059aeb64884463dbed716\">平台能力</a>\"，在准确性、稳定性、易用性等方面持续进行提升；优化用户使用体验，完善平台运营机制，不断提升产研迭代效率，更好的为业务赋能。</p><p>&nbsp;</p><p>作者介绍：</p><p>王兆雄、衷颖杰、刘龙，vivo AI架构工程师，来自vivo AI研究院推荐工程组深圳团队。</p><p></p><p>团队介绍：</p><p>vivo AI推荐工程组深圳团队，长期招聘AI架构工程师/技术专家，负责搜索、推荐业务多个方向的系统研发工作，坐标深圳。欢迎感兴趣的同学加入我们。可投简历至：zhaoxion.wang@vivo.com（邮件主题请注明：vivo推荐工程组深圳团队）</p>",
    "publish_time": "2022-08-31 18:01:39",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "30 年 IT 老兵谈数字化：这就不是个技术活",
    "url": "https://www.infoq.cn/article/IL65GIPSM37ZoQUok81N",
    "summary": "<p>数字化转型与创新是一个永恒的话题，不论是传统行业还是科技行业，数字化进程都充满了炒作和焦虑、理想和现实的落差。</p><p></p><p>针对相关话题，《行知数字中国》栏目第三期邀请了过去 30 年亲历过中美高科技行业、零售业、金融业和制造业等不同行业的 IT 老兵向江旭。</p><p></p><p>他曾在引领科技创新潮流的硅谷深耕技术研发，回国后赶上中国蓬勃发展的移动互联网时代，又以技术管理者的身份亲历了数家企业的数字化转型历程，在一次次跨越边界、不断探索的过程中，他对“数字化转型”的理解始终如一：将数字化技术应用到企业或者行业当中，去优化甚至于改变业务流程，最后使其产品和服务能给用户带来更大的价值。</p><p></p><p>以下内容整理自部分对话内容：</p><p></p><h2>CTO 在数字化转型中扮演的角色</h2><p></p><p></p><p>数字化转型是企业必修课，但这项任务交由谁负责，则各有各的考量。比如很多企业在信息化阶段设立了 CIO 首席信息官一职，尤其传统行业，往往没有 CTO、只有 CIO，那么在转型的时候，往往也会让 CIO 来负责数字化。</p><p></p><p>但随着数字化转型浪潮的到来，有些企业也会专门设立 CDO 首席数字官岗位，专门负责数字化工作。那么，CTO 在企业进行数字化转型的过程里面扮演一个什么样的角色？</p><p></p><p>向江旭表示，有些企业 CTO 需要负责所有的事情，不管是信息化还是数字化。但如果要细究起来，CIO、CDO 和 CTO 还是可以有一定的分工和区别。其中，CDO 的“D”若代表的是 digital 而不是 data，那么这个岗位显然是负责数字化转型，除了把一些人事、财务等管理系统给信息化，还需要把数据业务化、把流程数字化。</p><p></p><p>在一些强产品属性的企业，CTO 更多地是负责开发产品、把产品数字化、智能化。因此，称呼虽不同，但技术管理者们做的事情可能是类似的。</p><p></p><p></p><h2>数字化时代，IT 的定位</h2><p></p><p>数字时代，业务作业与 IT 系统的关联只会越来越强，企业决策需要更多地依赖数据与算法，这时候很可能出现的是业务需求不断爆发而 IT 能力有限的矛盾，因此在企业开展数字化转型的过程中，IT 系统的定位也在发生变化。</p><p></p><p>向江旭指出，早期的时候 IT 主要是支持的角色，支持组织内部系统的运作，后来把业务系统数字化之后，它相当于是赋能的角色，需要更多地帮助业务开拓，包括怎么去管理库存、促进营销获客。最后，IT 的理想目标是发挥引领作用。</p><p></p><p>虽然目前 IT 还没能达到引领的地步，但很多公司的 IT 已经在从支持、被动响应，甚至于内部乙方的角色，逐步地转变成赋能的角色。</p><p></p><p>这里面会存在不少需要博弈的地方。从业务方的角度，IT 只要能帮助完成业绩目标、搞定业绩就好，对未来的布局、或者底层那些看不着的建设就难以体会。</p><p></p><p>“但我们作为技术的负责人不能仅仅满足在、停留在这上面，那样你会被拖死，你一定会有短中长线的布局。”向江旭进一步说，技术团队毕竟资源有限，从技术负责人的角度来说，必须要权衡短中长期的一些项目跟优先级。支持好业务是第一步，但一定要走到第二步“赋能”，甚至能够做到第三步——在某些方面、某些领域、某些业务线是引领的角色，这样才能真正体现产品技术部门的价值。</p><p></p><h2>技术如何和业务融合</h2><p></p><p></p><p>提到数字化转型的关键，如今业界达成的一个共识是 IT 和业务一体化。</p><p></p><p>技术人常常说，技术能搞定的事都不是事，难搞的是业务的事。“我以前曾经在其他的公司说过一句话，数字化转型不是个‘技术活’，当然这个话说起来极端一点。”向江旭说道，从本质上来说，最终能让数字化转型和创新成功的核心，肯定不止于“技术活”。技术必须跟业务一起配合、融合、有机协调，才能让数字化转型得到成功。</p><p></p><p>但怎么样去融合、怎么样去赋能、怎么样去引领，这些都没有一个定论。比如通过轮岗，让产品技术人员和业务人员联合办公；也有可能会涉及到组织架构融合，从集中式的技术团队到分布式 BU，每个业务线有自己的技术团队，还有双线的或矩阵式的汇报方式。方法各式各样，但没有一个会是完美的，只有在某个时间段对某家公司最合适的。</p><p></p><p>向江旭回忆起曾经宜信公司有个特别好的口号，叫“游到河对岸”。公司鼓励产品技术人员不仅只是一流的技术人员，也要成为二流的金融专家，而一流的金融专家也要变成二流的技术专家。也就是说，技术人员、IT 人员都要成为半个金融专家，因为只有这样做出来的系统才能真正满足金融客户的需求。</p><p></p><p>他以微软举例道，微软一直都鼓励工程师变成产品经理，并提到美国硅谷科技企业的大部分产品经理是由十年以上经验的工程师转换过来。这些技术人员的职业转变路径主要有两条，一个是变成 Tech Lead 技术负责人，或者是研发经理，另外就是变成产品经理。而成为产品经理的这些技术人，往往就真的懂产品、懂技术，对于工程师有同理心、也懂用户，沟通协调管理能力比较强，软实力和硬实力兼具。因此，这类产品经理对于 IT 和业务一体化起到非常大的作用。</p><p></p><p>总的来说，在数字化时代，要把本职工作做好，还得是半个上游专家，技术人员也不例外。</p><p></p><p>亲历过的产品数字化实践向江旭已经有 30 多年行业经验，前面 18 年在美国硅谷，在思科、微软、戴尔等科技企业担任核心技术高管，回国后先后在微软亚太研发集团、寺库集团、苏宁、宜信和美的这几家行业性质各异的企业担任技术管理者，其足迹踏遍电商、零售、金融、人工智能、IoT 等领域。</p><p></p><p>在访谈中，他聊到自身亲历过的产品数字化案例。例如微软，作为科技企业，微软的数字化转型可以说很早就已经开启，但鲜为人知的是，微软在汽车这个领域有所布局。</p><p></p><p>向江旭曾担任 Windows CE（Windows Embedded Compact）的全球产品负责人，这是微软的一款嵌入式操作系统，可以应用在各行各业的系统上：车载系统、智能家居、机顶盒、生产线上的控制设备等等。期间，他领导 Windows Embedded 和 Windows Automotive 产品团队开发物联网智能系统平台，福特车载多媒体通讯娱乐系统 SYNC。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/09/7d/09d2358563dd1bc2f29e824e3172787d.jpeg\" /></p><p></p><p>大概十年前，全球大约有一千万辆福特车用了微软的 SYNC 系统，这个系统当时包含控制空调温度、导航、智能语音等功能，除了不支持自动驾驶，基本上具备现在车载系统流行的功能。</p><p></p><p>但由于微软过于拘泥于 Windows，不管是手机还是车载系统还是智能家居，一切均要围绕 Windows 开展，这导致其最终错失很多机会，移动转型没能成功，很多尝试也就“起了个大早，赶了个晚集”。</p><p></p><p>在苏宁任职期间，向江旭曾领导苏宁无人店的开发。虽然无人零售方式至今并没能普及，但当时应用的一些技术如今还是能在一些线下门店看到，比如怎么样通过传感器、摄像头、低功耗蓝牙去了解用户、跟踪用户行为，从而做精准的营销。</p><p></p><p>而在美的集团期间，他提出了 IEEE 家电智能化分级（L0-L4）国际标准草案以驱动公司和行业的智能化转型，这其实也是借鉴自动无人驾驶的分级系统，把一些行业的数字化经验带到不同行业去，能产生异曲同工的效果。</p><p></p><p>在向江旭看来，无论是什么行业，其数字化转型的共通点均是“如何更好地触达用户”。“为什么要给家电做智能化分级，级别越高意味着智能化程度越高，对用户的行为轨迹了解越深，那么跟用户的互动就会越强，这本身就是用户触点。”</p><p></p><h2>写在最后</h2><p></p><p></p><p>企业数字化转型如火如荼，当中不免存在一些误区。向江旭认为，其中一个现阶段比较常见的误区是：大家很难对数字化有一个正确的期望值。</p><p></p><p>要么对数字化寄予无限的希望，要么是怀疑且丝毫不提供支持，很难有一个动态的、发展的眼光去看待它。“做 CTO、做技术负责人面临的痛点是，如何设立期望值。”</p><p></p><p>宏观地看，数字化转型并不是指代一两个项目，或一两个系统，它是一个过程，由多个项目跟系统组成，并且很多时候，过程中可能大部分的项目是不成功的，但这不意味数字化转型的进程就是失败或停滞不前的，因为失败的项目所积累下的经验教训，包括一些源代码，都是能在未来的行动中起到作用。</p><p></p><p>“不要因为经济寒冬，我们需要降本增效，需要保持核心的业务的保障，就把很多以前前期的投入戛然而止，以后可能就要后悔的。”做数字化转型的过程中要适当保留一些火种，定力和战略眼光对于决策人来说尤其重要。</p><p></p>",
    "publish_time": "2022-08-31 18:15:22",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "如何建设数字化企业？数据、业务、技术缺一不可",
    "url": "https://www.infoq.cn/article/f4o2j2asxq4XwVFBRL8c",
    "summary": "<p>数据是企业数字化转型的核心要素和生产资料，它是一种“可再生”资源，取之不尽，用之不竭，而数字技术则是企业数字化转型的直接手段。数字技术的产生让企业从传统业务出发被动地录入数据，到如今利用各种各样的开发工具不断地去<a href=\"https://www.infoq.cn/article/lxqTDVl6s54XYqjDgtkc\">生产数据</a>\"、分析数据、使用数据，从而利用数据来赋能业务。然而，数字化并不是一项独立的工作，企业不要询问“数字化转型要做什么”，更是需要将数据能力放到整体组织的业务战略的大蓝图下，以业务目标为锚点，找到业务的痛点和价值场景，然后利用数据和数字技术去解决这些问题，整个过程都需要企业持续建立自身的数据能力。</p><p></p><p>极客邦科技双数研究院的特聘专家、精益数据方法论创始人史凯，在8月18日举办的<a href=\"https://archsummit.infoq.cn/2022/beijing?utm_source=infoq&amp;utm_medium=conference\">ArchSummit全球架构师峰会</a>\"发表了《数据驱动的组织和文化》的演讲。史凯有着二十多年的企业信息化和数字化转型经验，曾为众多大型企业做过数字化转型规划和实施，总结了精益数据方法论帮助企业打造数字化企业。史凯的本次演讲聚焦于<a href=\"https://www.infoq.cn/article/xKPOsGhoW8geomHKjODL\">数据驱动</a>\"企业组织文化。</p><p></p><p>史凯将从企业转型与数据的关系、数字化转型与<a href=\"https://xie.infoq.cn/article/71246442be4668c5c2db6acf2\">数据中台</a>\"的关系、企业需要什么样的数据中台以及如何打造一个数据驱动的企业四个方面进行分享。</p><p></p><p></p><blockquote>演讲要点：1.&nbsp;“数字化转型不是一个单独的项目，而是因为企业外部环境的变化，给企业带来了新的挑战，企业需要利用新的技术和生产资料来应对这些挑战。”不要问数字化转型要做什么，而是要理解什么是数字化转型。2.&nbsp;“现在企业的架构，已经逐渐地从原来以流程为核心驱动，走向以数据为核心驱动，形成流程和数据相结合的模式。”3.&nbsp;“企业数字化转型的本质是建立数据的能力，从而充分利用数据，获得更先进的生产力。”4.&nbsp;“未来的企业都是生产、加工数据的企业，数据中台就是核心，承载端到端的数据的生产利用等全链路功能。”5.&nbsp;“企业的数字化转型是一个非常体系化的工作，要从战略，组织，流程，业务，技术等全方位，系统化推进，其中最重要的就是要充分利用数据的力量。”</blockquote><p></p><p></p><h2>充分利用数据，获得先进数据生产力</h2><p></p><p></p><p>大家好，我是史凯，是精益数据的创始人，同时也是极客邦的双数研究院的特聘专家。20多年以来，我一直从事如何把数字技术应用到企业的业务转型当中。我的核心观点，如果技术不能够给业务带来价值，那么不论这个技术多么先进，都不是企业所需要的，所有的技术都会得到市场的检验。</p><p></p><p>自从三年前我写的关于数据中台的文章获得了10万+的阅读量后，我一直在思考一个问题：数据领域本身是一个非常成熟的领域，但是在数据中台一词出现时，为什么会得到那么多业务方、技术方的追捧和认可？其背后反映的现象与底层逻辑又是什么？</p><p></p><p>于是，我做了一个关于数据中台的调研，获得了1700多条有效问卷。基于这个调研问卷的结果，结合今天的主题，我将从企业转型跟数据的关系、数字化转型跟数据中台的关系、企业需要什么样的数据中台以及如何打造一个数据驱动的企业这四个方面，跟大家汇报过去几年的研究发现。</p><p></p><p>第一、企业转型与数据的关系，归根到底就是要解释什么是数字化转型。</p><p></p><p>无论是具体的业务人员、技术人员，还是每个企业的领导人，都在焦虑一个问题：数字化转型要做什么？</p><p></p><p>其实，这不是一个正确的问题。首先，我们要理解什么是数字化转型。</p><p></p><p>我将企业数字化转型总结为：企业进入到了数字经济时代的整体转型，数字化转型不是一个单独的项目，而是因为企业外部环境的变化，给企业带来了新的挑战，企业需要利用新的技术和生产资料来应对这些挑战。所以，企业数字化转型不仅是技术的工作，更不是独立于业务之外的事情，而是一项包括企业业务，组织等在内的整体转型。</p><p></p><p>为什么这么说？或许我们可以从<a href=\"https://xie.infoq.cn/article/1c03b9d7d1b5a68b546be65ba\">信息化</a>\"开始来理解数字化。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/54/26/54981b2d5ea323193fe50e42b4e27e26.png\" /></p><p></p><p>十几年前，信息化时期大部分业务的处理流程还是在线下实体世界中进行，只有一些局部的环节需要信息系统支持。比如，我们可以从计算机软件技术应用于企业的历史中发现一定的规律，比如最早的软件是应用于企业的库存管理领域的，因为<a href=\"https://xie.infoq.cn/article/d4a1cc14f47eb2d64356a4610\">库存管理</a>\"（Inventory Control）连接着生产和供给，是保障企业稳定运营的关键集成点。随着信息化的发展，从库存管理走到MRP再走到MRP-II，再到后来的<a href=\"https://xie.infoq.cn/article/b778490067f1468c6fd09586b\">ERP</a>\"，整个过程就是不断地把线下，以人工流程为主的业务搬到线上，通过数字技术，不断地去完善信息化系统。</p><p></p><p>随着大量信息化系统的出现，相对成熟的企业大部分业务已经有了独立的系统，于是，它们从信息化逐渐走向了数字化，也就是大部分业务都已经数据化了。</p><p></p><p>数据是业务的数字化存在形式。在消费互联网时代，大家的吃穿住用行，第一件事便是先在数字化世界里去找数据、找评价，然后通过这些数据，指导现实中去哪里、做什么。再比如，我们现在看到的新的产业互联网的趋势，智慧工厂、无人工厂、无人零售店，也都是通过数据来优化和指导业务的进行。</p><p></p><p>软件技术的进步和发展，实际上都是在把实体世界的业务流程搬到了数字化世界。我们现在提到的原生数字化企业、数字经济，最后就是利用数据的全局优化能力、计算能力、把最优的路径决策设计好，然后去指导线下的人或者设备进行生产。</p><p></p><p>简言之，传统的信息化是把实体世界的业务转变成数字化形式，一切业务数据化，数字化转型则是通过数据指导实体业务，这就是两者最大的区别，本质上数据已经是业务的数字化存在形式。</p><p></p><p>第二，企业的架构方法也在发生变化。在十几年前，我们有一套给企业做信息化规划架构的实施方法论。首先要做<a href=\"https://xie.infoq.cn/article/da771793419ac1113a49c23f9\">业务架构</a>\"，然后做<a href=\"https://xie.infoq.cn/article/1937780331f51172f58df9e6b\">应用架构</a>\"，最后才是<a href=\"https://xie.infoq.cn/article/048dc5521b7dec63ab78567d5\">数据架构</a>\"。但是，随着企业业务的快速变化，数据变成了业务在数字化时代中一种永远的存在。</p><p></p><p>这种情况下，传统的架构方法、企业应用规划方法也在发生变化：从Application First到Data First，首先要考虑的是“数据”，这里的“数据”指的是业务在数字化时代的一个映射，是企业业务的整体蓝图。</p><p></p><p>第三，我发现了一个新的趋势，流数融合。</p><p></p><p>近一两年有非常多的声音在谈论流程。每个企业都有流程，但是流程的本质是什么？</p><p></p><p>实际上，流程就是用人的经验、用梳理流程的方式去做业务建模。现在企业的架构，已经逐渐地从原来以流程为核心驱动，走向以数据为核心驱动，形成流程和数据相结合的模式。</p><p></p><p>原来在物理世界里，无论是营销还是生产，大部分工作都是以人为核心的流程。大家在一起讨论一个工作的流程，究竟应该怎么工作，这个叫做业务流程再造（BPR），把这些业务经过梳理，优化变成流程，一个上百人、上千人的工厂企业就可以有效地组织起来，不至于一团乱麻，这也是企业里大家所公认并且遵守的一套有效协作生产的计划。</p><p></p><p>随着信息量的不断增长，业务复杂度导致的沟通效率的降低，企业逐渐选择通过软件进行高效沟通，所以就有了IC、MRP、MRP-II、ERP这样的软件系统。</p><p></p><p>再后来，进入到了电商、供应链时代，企业内部的管理软件已经不足以支持蓬勃发展的业务需求，于是企业把内部、外部全部连接起来，这就到了应用时代，逐渐地，这些应用全部沉淀成了数据。</p><p></p><p>最后，当我们把一个企业所有的业务或者大部分的业务，全部通过各种系统沉淀成数据时，那么，数据便可以将该企业的业务完整、真实的呈现出来，这个时候对于数据的利用就很关键。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/44/a1/442a50c4a90d7f6d8d3bd82a984cd2a1.png\" /></p><p></p><p>BI时代，企业通过开发报表的形式去利用数据。业务人员会查看报表，根据他所得到的这些信息，在人为的优化流程，然后向技术部门提需求，继而技术部门再去改系统，这是现在多数企业的现状。</p><p></p><p>当所有的业务全部数据化以后，企业全部的业务和流程融为了一体，用软件的形式展现出来。无论是DDD也好，企业架构也罢，其实都是把现实世界业务建模成软件的一种方式。</p><p></p><p>当企业的业务和流程已经全部呈现在软件系统中时，这些软件和系统就是企业的业务的承载。而数据则是最终业务最全面，最本质的呈现。</p><p></p><p>最近数据领域有一个技术趋势，叫<a href=\"https://www.infoq.cn/article/DFjQpOu2HBV4AVXlXTZy\">湖仓一体</a>\"。湖仓一体背后的逻辑是原来的OLTP和OLAP架构的融合。OLTP是在线交易处理，OLAP是在线分析。OLTP是产生数据，OLAP汇聚数据、分析数据，分析完数据变成报表给人看。但是现在我们会发现企业业务对数据的需求是如何让数据更实时，更直接地指导业务，而不是说数据团队给业务人员开发个报表，业务人员晚上看一遍，第二天再去调产品价格。</p><p></p><p>因此，要将数据直接变成API，变成服务去驱动企业的业务流程。</p><p></p><p>十几年前，数据团队在企业里的角色定位和现在相比是截然不同的。那个时候OLAP没有特别强的实时性要求，数据仓库系统宕机了就宕机了，带来的后果只不过是业务人员晚两天看报表而已，也不需要高级别SLA的保障。</p><p></p><p>回到我们的第一个话题，企业为什么要做数字化转型？企业和数据的关系是什么？</p><p></p><p>企业的数字化转型就是在数字化时代的背景下，必须要做的企业真题转型。</p><p></p><p>企业数字化转型的本质是建立数据的能力，从而充分利用数据，获得更先进的生产力。</p><p></p><h2>建设数据中台，满足端对端数据需求</h2><p></p><p></p><p>任何一个名词的出现，都有着它们特定的时代背景和意义。为什么数据中台的概念能够备受认同？</p><p></p><p>现在企业都面临着数据的问题，不仅仅是IT所讲的数据质量的问题，而且还有当企业的业务需要做决策时，得不到统一的指标，拿不到统一的口径，几个部门出的报表都不一致的数据价值的问题。</p><p></p><p>经过研究分析，我发现，企业所有的数据问题的本质是业务对于数据生产的需求与其有限的、碎片化的数据生产力供给之间的矛盾。</p><p></p><p>怎么理解这个矛盾呢？</p><p></p><p>在十几年前，业务部门做业务决策时，并不需要太多的数据。因为业务量有限，外界变化也不大，业务人员根据自己的经验就可以了解、全盘掌握所需要的信息，并且做出决策。</p><p></p><p>但是在现在的环境下，业务越来越复杂、市场变动得越来越快、竞争也越来越激烈，业务人员或者业务部门依靠自己的经验，已经不足以全面掌握他所需要的业务动态信息。在此情况下，他们就需要借助数据获得更多的洞察、更多的现状、更多的预测。所以，他们对数据的生产、加工、利用都会有非常多的需求。比如，一到月底，数据部门的需求量就会爆增，有财务的、物料的、设备的、生产的各种部门都要求产出报表。</p><p></p><p>目前大部分企业的数据的生产和利用都是由IT部门负责的。而IT部门现有的资源能力不足以满足整个企业业务对于数据的需求，所以出现了，需求排期太长，响应不及时的情况。于是，就有很多业务部门自己去想办法，自己找资源，自己整理表格、自己开发数据系统，这样就出现了非常多的重复、浪费、堆叠的新的数据孤岛。</p><p></p><p>我见过有的集团，数据中台就有七、八套，这也是造成数据质量问题、产生<a href=\"https://www.infoq.cn/article/qJzeSsScSZoFKjUdI9pe\">数据治理</a>\"各种问题的原因。</p><p></p><p>在这种情况下，企业应该怎么做？</p><p></p><p>我研究了很多国内外先进企业的案例，比如：字节跳动和Netflix等。我们会发现这种原生数字化企业，对数据治理这个词提的并不多。</p><p></p><p>为什么它们不经常去提数据治理？因为，它们本身就是通过生产、加工数据，然后将数据变成产品，再去销售，从而带来收益的企业。所以，数据的质量和各种问题在生产过程中是必须被管理好的，是一个生产问题，而不是一个管理问题，因此，它们不会经常提数据治理。</p><p></p><p>每个这样的企业，它们都有几个共性：</p><p></p><p>1.&nbsp;统一性：无论企业的技术架构如何、物理部署如何，它们都有一套平台（可以称作“数据中台”），从逻辑上来看，这套平台是企业整体的一部分，和企业具有统一性。所有的数据都是同源的，技术的出口也是同源的。</p><p></p><p>2.&nbsp;标准化：企业所有用户使用的开发语言、开发工具、开发过程都是标准化的、共通的。</p><p></p><p>3.&nbsp;易用性：不同层次的数据开发者、数据消费者都可以使用企业的工具、技术。比如说业务人员不会使用Python，企业可以给他们Excel；数据分析师不会写代码，企业也可以给到其他的替代工具。</p><p></p><p>4.&nbsp;自服务：在这个平台上，不同的数据加工用户都可以找到相应的数据生产、使用工具。无论采用何种工具，最后大家开发的结果都是标准化的、都是互通的。这个“自服务”可以让用户利用自己现有的知识去加工、生产数据。</p><p></p><p>在如今的企业中，也存在很多数据能力的问题，比如：开发人员想取个数，找不到在哪里，即使找到了，但是口径也不一定对，因为这个数据结构不一定就是他自己建的。此外，也有很多数据需求，从决策层到管理层，再到业务人员、业务分析人员，他们都需要不同的数据报表；从软件工程师到开发工程师，他们做软件的时候也需要不同的数据API。</p><p></p><p>总之，通过这样一套平台可以把企业的数据分析、数据加工、数据利用等全链路的数据能力聚集起来，这个平台也能够端到端的把统一的数据和统一的数据能力提供给数据生产、消费者，这也是企业对“数据中台”这四个字所期望的能力。只有数据中台拥有这种能力，才能够让企业所有的数据发展成为全员的数据能力，这就是数字化转型跟数据中台的关系。</p><p></p><h2>企业终极期望，数据驱动业务价值</h2><p></p><p></p><p>未来的企业都是生产、加工数据的企业，数据中台就是核心，承载端到端的数据的生产利用等全链路功能。</p><p></p><p>那么，企业需要什么样的数据中台？</p><p></p><p>调研报告显示，企业不同角色对于数据中台的业务诉求不尽相同。很多人把数据中台泛化，把营销、业务的语言、业务的需求都放到数据中台里。比如，把CDP放到数据中台。</p><p></p><p>基于1700多份调研问卷的分析，我总结了用户对于数据中台的五大期待。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/14/e3/14dba06edbfa08e68d789118cd06a3e3.png\" /></p><p></p><p>第一，直接参与业务。无论是架构师、IT人员还是数据人员，大家都面临着领导的挑战：你开发数据的业务价值是什么？企业希望数据中台所代表的数据能力，不仅仅是完成一个报表，而是要提升业务效率，直接给企业带来价值。 &nbsp;&nbsp;</p><p></p><p>第二，产生客户价值。企业希望通过数据中台可以给企业带来收入。数据中台可以解释什么是客户价值？用什么东西最能度量客户价值？企业数据洞察给到的建议，客户愿意去付钱、去购买吗？</p><p></p><p>第三，快速响应需求。以前经常会听到很多业务部门跟数据部门、技术部门的沟通：“我这个报表什么时候能开发出来？”“我要的数据什么时候可以给我？”。要想解决上述问题，就需要IT人员的排期，企业希望数据中台能够提升开发效率。用户可以立刻得到想要的数据，无论是API，是宽表，还是其他的数据形式，数据中台都能快速响应需求。</p><p></p><p>第四，统一数据服务。这里的统一并不是所有的形式要都一致，而是数据服务标准要一致。很多企业，无论是数据表、宽表还是报表，有很多数据是重复的。企业希望各个业务、技术部门都可以清楚地从一个平台上看到全线范围之内的数据服务。</p><p></p><p>第五，打通数据资产。通过数据资产整体的技术去打通整个企业的数据资产，对数据进行统一采集、存储，进行统一的资产管理、数据治理。而这里的数据资产不仅指的原数据，还包括二次开发的数据表。</p><p></p><p>基于以上的用户的期待以及行业里的先进实践，我总结了数据中台的定义：数据中台是为企业或者组织提供有业务价值服务的、统一的、端对端的数据生产平台。</p><p></p><p>Netflix就是一个典型的案例，在Netflix的话语体系里的数据中台就是大数据门户，这是一个一站式的数据生态平台，实现了端到端的全链路数据加工生产。</p><p></p><p>研究了用户的需求以及行业的实践之后，我基于DDD把数据中台抽象和建模，将企业数据中台的能力分成两个领域：</p><p></p><p>生产领域——数据中台的核心能力。假设企业的数据中台主要是采集数据、加工数据、生产成数据服务、数据产品的话，那么企业就相当于是一个工厂，而工厂最核心的能力便是生产能力。换句话说，就是买原材料、研发产品、生产产品、加工产品、销售运营等一系列能力。这些生产能力是支撑企业生存、获得利润的核心，这也是数据中台必须具备的核心能力。管理领域——数据中台的支撑能力。当企业具有一定规模后，就需要一些管理性的、辅助性的、可以提高生产效率、提升用户体验、提高系统安全性的能力。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/28/6c/289620374edc944d24c1013a24f6a06c.png\" /></p><p></p><p>仔细来看，我们又可以根据数据中台分别在生产、管理领域的不同应用，将数据中台的能力分为四大核心能力以及三大支撑能力。</p><p></p><p>数据中台的四大核心能力具体包括数据资产的采集和存储能力、业务价值的探索和创新能力、数据产品的开发和运营能力、数据的加工和测试能力。其实，我们谈及到的各种技术体系和产品都是服务于这些核心能力的。</p><p></p><p>现在企业有大量新的技术、软件都是服务于数据采集、存储、加工、测试等方面的。而关于业务的价值探索和创新，是需要让业务人员能够快速地看到企业的数据资产，让他们能够随心所欲使用数据，目前企业数据中台的这个能力还是不足的。关于数据产品的开发和运营，实际上包括DevOps、包括埋点、包括如何在产品上线后，把产品运营得更好，这些都是数据中台需要的核心能力。</p><p></p><p>另一方面，数据中台三大支撑能力是为了让数据更快、更好、更安全的产生价值，具体包括数据的协同与共享能力、数据的管理与治理能力、数据的运维与<a href=\"https://www.infoq.cn/article/bJN929Myd2VdLepSOgD2\">安全能力</a>\"。</p><p></p><p>在整个数据加工的全生命周期链路里，有非常多的协作者，从数据需求的提出者到数据获取、数据生产，数据开发、测试、上线、运维等阶段，全链路的用户都需要通过数据中台进行协作。其实，目前有很多企业因为不标准、不一致的协作机制，把大量的时间浪费在了这个环节，所以数据中台必须需要协作和共享的能力。</p><p></p><p>同时，<a href=\"https://www.infoq.cn/article/1zd5MLr5iQOBzgAaGpOm\">数据中心</a>\"还需要管理和治理的能力，哪些数据能访问？谁能访问？当数据服务发布以后，什么时间点它应该自动的下线？哪些数据可以重复构建？哪些数据要在本地做存储，哪些数据应该全部统一上云？这都是数据资产的管理和治理的范畴。</p><p></p><p>最后，数据中台离不开运维和安全，这是保障数据中台良好运营的前提。</p><p></p><p>所以企业的数据中台是否是完备的，能否支撑企业的数字化转型，可以参考这七大能力模型。我即将出版的新书《精益数据方法论-数据驱动的数字化转型》里，有这七大能力模型的详细解释以及成熟度评估模型。</p><p></p><h2>数据、技术双融合，打造数字化企业</h2><p></p><p></p><p>既然数字化转型指的是企业在数字时代的整体转型，那么如何打造数字化企业？如何让数据驱动企业？</p><p>当所有的企业都从生产、加工数据中获得价值的时候，我们就可以把这个企业类比于制造业。制造业是有非常成熟的方法论的，那就是精益思想。我将精益思想和数字化转型结合，形成了精益数据方法论，其中有一个精益花瓣模型，就能够比较清楚的说明企业数字化转型的过程。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/ba/e4/ba968f4yybf2cb4495e24202d0435fe4.png\" /></p><p></p><p>企业的业务、数据和技术看做是三个圆，随着企业数字化转型的深入，这三个圆慢慢融合成一个圈，也就成为了数字化企业。</p><p></p><p>精益数据花瓣模型还包含了企业数字化转型的路径，换句话说，就是企业要怎样去识别价值场景。目前，令很多企业领导头疼的是：企业有这么多数据，但是看上去现在数据没有发挥价值，除了给我带来成本之外。如何让数据发挥价值，如何去识别场景，如何去构建符合企业的技术能力。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/c0/86/c0c0591d2a1c8fd454fba6207ccf8286.png\" /></p><p></p><p>前面提到，精益思想带来了<a href=\"https://xie.infoq.cn/article/f76f0ab84f65d34e5b99876c6\">制造业</a>\"的飞速发展，同样，数据领域也可以采用精益思想的四大原则：</p><p></p><p>Value：数据要产生业务价值。Flow：高速数据价值流。当企业找到业务价值以后，从原材料到产品之间需要构建一条通道，让这个通道快速地流转起来，才能实现业务价值。比如，不论是DataOps，还是AiOps，都是为了让数据产品的生命周期流动更快。Pull：按需生产。不要在用户不需要的时候生产数据，很多报表放在那里，用户不使用就是浪费资源。Perfection：持续改进。</p><p></p><p>在数字化转型模型的基础之上我总结了一套方法论，叫精益数据方法论，主要是针对如何打造数据驱动企业的。其中包括精益数据战略、精益数据治理、精益数据协同、精益数据产品以及数据中台和数据驱动的组织文化，持续改进。</p><p></p><p>最后的企业数字化转型的核心还是要落到组织文化上，因为提升数字化的素养和能力是打造数据驱动企业的必备能力。</p><p></p><p>企业的数字化转型是一个非常体系化的工作，要从战略，组织，流程，业务，技术等全方位，系统化推进，其中最重要的就是要充分利用数据的力量。而利用数据的核心是要产生价值，和消除浪费也就是提质增效，大家可以关注一下我即将出版的新书《精益数据方法论-数据驱动的数字化转型》。</p>",
    "publish_time": "2022-08-31 18:16:58",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]