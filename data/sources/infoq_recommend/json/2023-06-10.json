[
  {
    "title": "Java迎来增强功能字符串模板，代码简化，安全性提升",
    "url": "https://www.infoq.cn/article/bKWjLjEoFVTr0GFVTmWm",
    "summary": "<p>面向JDK 21的JEP 430（<a href=\"https://openjdk.org/jeps/430\">字符串模板预览</a>\"）已经从Proposed to Target状态提升到Targeted状态。该JEP提议用字符串模板来增强Java编程语言。字符串模板类似于字符串字面量，但包含嵌入式表达式，这些表达式会在运行时合并到字符串模板中。</p><p>&nbsp;</p><p>现在，Java开发人员可以使用字符串模板增强该语言的字符串字面量和文本块。字符串模板将字面量文本与嵌入式表达式及处理器相结合，用于生成特定的结果。这一新特性的目的是简化Java程序的编写，提高文本和表达式混合代码的可读性，增强Java程序从用户提供的值组成字符串时的安全性。</p><p>&nbsp;</p><p>该JEP引入了一种新的表达式，名为模板表达式，让开发人员可以安全有效地执行字符串插值及组合字符串。模板表达式是可编程的，其功能并不限于组合字符串。它们可以根据特定于领域的规则将结构化文本转换为任何类型的对象。在模板表达式中，模板处理器在运行时将模板中的字面量文本与嵌入表达式的值组合在一起生成所需的结果。请看下面的例子：</p><p><code lang=\"java\">String name = \"Joan\";\n\n\nString info = STR.\"My name is \\{name}\";\nassert info.equals(\"My name is Joan\");   // true</code></p><p>&nbsp;</p><p>模板表达式的语法与字符串字面量类似，但有一个前缀。上述代码的第二行包含一个模板表达式。</p><p>&nbsp;</p><p>相比之下，字符串插值通常允许程序员将字符串字面量和表达式组合成单个字符串，就像许多编程语言所做的那样，与传统的字符串连接相比，这样更方便也更清晰。但是，它会生成可能被其他系统误解的危险字符串，特别是在处理SQL语句、HTML/XML文档、JSON片段、shell脚本和自然语言文本时。为了防止安全漏洞，Java要求开发人员使用转义或验证方法对带有嵌入式表达式的字符串进行验证和消毒。</p><p>&nbsp;</p><p>更安全、更有效的解决方案是引入一种基于模板的一等字符串组合机制，该机制会自动将特定于模板的规则应用于字符串，为SQL语句添加转义引号，让HTML文档没有非法实体，以及实现无模板的消息本地化。这种方法使开发人员不用再手动对每个嵌入式表达式进行转义，并验证整个字符串。这正是Java模板表达式所做的，与其他流行的编程语言所使用的字符串插值完全不同。</p><p>&nbsp;</p><p>在模板表达式的设计中，包含嵌入式表达式的字符串字面量或文本块是不可能直接转换为插入了表达式值的字符串的。这是为了防止危险的错误字符串在程序中传播。取而代之，模板处理器（如STR、FMT或RAW）会处理字符串字面量，验证结果，并插入嵌入式表达式的值。</p><p>&nbsp;</p><p>下面是一些模板表达式的例子，它们使用多行来描述HTML文本、JSON文本和一个区域表格：</p><p><code lang=\"java\">String title = \"My Web Page\";\nString text  = \"Hello, world\";\nString html = STR.\"\"\"\n        \n          \n            \\{title}\n          \n          \n            </code></p><p><code lang=\"java\">\\{text}</code></p><code lang=\"java\">\n          \n        \n        \"\"\";</code><p></p><p>&nbsp;</p><p>它生成以下输出：</p><p><code lang=\"java\">| \"\"\"\n| \n|   \n|     My Web Page\n|   \n|   \n|     </code></p><p><code lang=\"java\">Hello, world</code></p><code lang=\"java\">\n|   \n| \n| \"\"\"</code><p></p><p>&nbsp;</p><p>下面是另一个例子：</p><p><code lang=\"java\">String name    = \"Joan Smith\";\nString phone   = \"555-123-4567\";\nString address = \"1 Maple Drive, Anytown\";\nString json = STR.\"\"\"\n    {\n        \"name\":    \"\\{name}\",\n        \"phone\":   \"\\{phone}\",\n        \"address\": \"\\{address}\"\n    }\n    \"\"\";</code></p><p>&nbsp;</p><p>类似地，它生成以下输出：</p><p><code lang=\"java\">| \"\"\"\n| {\n|     \"name\":    \"Joan Smith\",\n|     \"phone\":   \"555-123-4567\",\n|     \"address\": \"1 Maple Drive, Anytown\"\n| }\n| \"\"\"</code></p><p>&nbsp;</p><p>另一个例子：</p><p><code lang=\"java\">record Rectangle(String name, double width, double height) {\n    double area() {\n        return width * height;\n    }\n}\n\n\nRectangle[] zone = new Rectangle[] {\n        new Rectangle(\"Alfa\", 17.8, 31.4),\n        new Rectangle(\"Bravo\", 9.6, 12.4),\n        new Rectangle(\"Charlie\", 7.1, 11.23),\n    };\n\n\nString form = FMT.\"\"\"\n        Description     Width    Height     Area\n        %-12s\\{zone[0].name}  %7.2f\\{zone[0].width}  %7.2f\\{zone[0].height}     %7.2f\\{zone[0].area()}\n        %-12s\\{zone[1].name}  %7.2f\\{zone[1].width}  %7.2f\\{zone[1].height}     %7.2f\\{zone[1].area()}\n        %-12s\\{zone[2].name}  %7.2f\\{zone[2].width}  %7.2f\\{zone[2].height}     %7.2f\\{zone[2].area()}\n        \\{\" \".repeat(28)} Total %7.2f\\{zone[0].area() + zone[1].area() + zone[2].area()}\n          \"\"\";</code></p><p>&nbsp;</p><p>上述代码生成以下输出：</p><p><code lang=\"java\">| \"\"\"\n| Description     Width    Height     Area\n| Alfa            17.80    31.40      558.92\n| Bravo            9.60    12.40      119.04\n| Charlie          7.10    11.23       79.73\n|                              Total  757.69\n| \"</code></p><p>&nbsp;</p><p>Java提供了两个模板处理器来执行字符串插值：STR和FMT。STR用它（字符串化）的值替换模板中的每个嵌入式表达式，而FMT会解释出现在嵌入式表达式左侧的格式说明符。格式说明符与java.util.Formatter中定义的格式说明符相同。如果需要未经处理的原始模板，则可以使用标准的RAW模板处理器。这个处理器只是简单地返回原始模板，不做任何插值或处理。</p><p>&nbsp;</p><p>此外，开发人员还可以创建自己的模板处理器，用于模板表达式的处理。模板处理器是一个提供ValidatingProcessor功能接口的对象，它的类实现了ValidatingProcessor的单一抽象方法。该方法接受StringTemplate并返回一个对象。自定义模板处理器让开发人员可以在运行时执行验证并返回任何类型的对象，而不仅仅是字符串。</p><p>&nbsp;</p><p>总之，Java模板表达式使开发人员可以轻松、安全地进行字符串插值和字符串组合。</p><p></p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/04/java-gets-a-boost-with-string/\">https://www.infoq.com/news/2023/04/java-gets-a-boost-with-string/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/eazviIX3Dutuh3lKwd1F\">Java 近期新闻：Java 28 岁、Payara、Micronaut 4.0-M5、Spring 更新</a>\"</p><p><a href=\"https://www.infoq.cn/article/R8sh9XHuojBsX9DpGYvJ\">快速实现不打折扣的云原生 Java 应用</a>\"</p><p><a href=\"https://www.infoq.cn/article/0ZTAForQs79EseZhPRXU\">Record 模式提升了 Java，能实现更具表现力的编码</a>\"</p><p></p>",
    "publish_time": "2023-06-10 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]