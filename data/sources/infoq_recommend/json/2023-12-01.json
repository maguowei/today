[
  {
    "title": "拆分还是整合：单体和微服务的技术抉择",
    "url": "https://www.infoq.cn/article/WWdqpvUpCmvyw8X7u1KH",
    "summary": "<p></p><h2>持续之战：单体架构与微服务</h2><p></p><p>&nbsp;</p><p></p><blockquote>\"从许多方面来看，微服务就是一种僵尸架构，另一种拒绝死去的知识传染病菌。这种病菌从 J2EE（远程服务器Bean，有人记得吗？）的黑暗时代开始，经历了WS-Deathstar的胡闹，现在又以微服务和无服务器的形式存在。\"—— David Heinemeier Hansson</blockquote><p></p><p>&nbsp;</p><p>随着亚马逊云科技在他们的<a href=\"https://www.primevideotech.com/video-streaming/scaling-up-the-prime-video-audio-video-monitoring-service-and-reducing-costs-by-90\">官博</a>\"中宣称他们放弃了微服务并回归单体架构，单体架构与微服务之间的战争再次爆发。</p><p>&nbsp;</p><p>你对此有何看法？你是支持微服务还是单体？但我想说的是，这种区分有点虚幻，因为人们争论的只是一种虚构的概念：微服务与单体 只是整个故事的一个组成部分。</p><p>&nbsp;</p><p>亚马逊云科技的这篇文章被视为他们（作为微服务的长期支持者）已经回头转向单体架构的证据。</p><p>&nbsp;</p><p>尽管文章的标题明显是为了引起关注，但从内容上看，似乎是关于他们从函数即服务向微服务架构（如果不是比微服务更大的分布式应用程序服务）的转变。</p><p>&nbsp;</p><p>但在我看来，这并不重要。这只能说明，亚马逊云科技的一个团队承认他们尝试的架构在一段时间后不奏效，然后尝试了不同的架构，得到了更好的效果。但这又怎样？这只是好的软件开发应该经历的正常过程。</p><p>&nbsp;</p><p>我们都希望专注于最重要的事情，为我们的客户做正确的事情，在微服务与单体的争论中选边站队只会给我们造成阻碍。有时候，我们需要微服务。有时候，我们需要单体架构。（我还不确定我是否会需要FaaS——但我保持开放的态度）。大多数情况下，我们需要在两个极端之间找到平衡点。</p><p>&nbsp;</p><p></p><h2>为什么我们害怕微服务？</h2><p></p><p>&nbsp;</p><p>当然，与单体相比，微服务更难 —— 我承认这一点。但如果你有了自动化的微服务架构，这个论点就站不住脚了。我曾经使用过的一些无缝集成又容易使用的系统就是拥有良好自动化的微服务。另一方面，我曾经参与的一个最困难的项目是一个古老的大单体，几乎没有自动化。我们的日子不会因为选择了单体而变得轻松。</p><p>&nbsp;</p><p>对微服务的害怕有没有可能是对微服务过度炒作的反噬？是的，微服务已经被过度炒作了。微服务不是灵丹妙药。像所有潜在的解决方案一样，它们并不适用于所有场景。当你使用一种错误的架构来解决某个问题（或更糟糕的是，管理层强制要求使用错误的架构）时，我可以理解你为什么会对这种架构充满厌恶。</p><p>&nbsp;</p><p>是否有一部分害怕是来自微服务早期的日子？十年前，微服务确实使开发变得更加困难。但从那时起，工具和平台已经取得了长足的进步，现在比以往任何时候都更容易进行自动化，给微服务开发带来更加无缝和愉快的体验。</p><p>&nbsp;</p><p>也许，一部分害怕来自对复杂性的感知，我认为这是其中很大的一部分。人们会自然而然地害怕（或至少想要避免）复杂性。我说可感知的复杂性，因为不仅仅是微服务会变得复杂，单体也会 —— 只是时间问题。然而，对于微服务来说，复杂性是公开的，所有人都可以看得到，我们必须早日加以应对。在我的“Bootstrapping Microservices”一书中，我称之为将痛苦提前，以便能够在开发过程中更容易、以更低的成本应对复杂性。</p><p>&nbsp;</p><p>不幸的是，在现代软件开发中，我们无法逃避复杂性。我们的应用程序正在变得越来越庞大和复杂 —— 即使是普通的单体架构也注定会变得无比复杂。</p><p>&nbsp;</p><p>在现代的大规模软件开发中，我们无法避免复杂性。我们需要使用工具来帮我们管理复杂性，避免它们阻碍我们的开发过程或压垮我们。</p><p>&nbsp;</p><p></p><h2>为什么微服务看起来如此困难？</h2><p></p><p>&nbsp;</p><p></p><blockquote>\"你必须达到这道门槛才能使用微服务。\"—— Martin Fowler</blockquote><p></p><p>&nbsp;</p><p>构建分布式应用程序（不仅仅是微服务）需要更高的技术熟练度。管理大量的服务意味着我们必须拥有自动化管理工具。为了了解我们的服务在做什么，我们还需要跟踪很多东西。随着服务之间的交互变得越来越多，了解这些信息的困难程度将呈指数级增加。</p><p>&nbsp;</p><p>假设你是一个小团队或在开发一个小项目，在不需要微服务的场景中采用了微服务，或者如果你不愿意付出构建和运行分布式系统所需的技能和技术投入，你就不能指望从中得到良好的体验。</p><p>&nbsp;</p><p>另一个可能的痛点是未能适当地将服务与领域对齐。我曾见过一些微服务应用程序与技术对齐但没有与业务需求对齐，导致存在过多的服务和一个不必要的难以管理的系统。将服务分得太小，不必要地增加了系统的复杂性和难度，这是一个问题。</p><p>&nbsp;</p><p>如果你无法正确地将架构与领域对齐，那么无论使用单体还是微服务，都将遇到严重的问题 —— 随着服务数量的增加，这些问题将会被大幅放大。微服务既能带来性能方面的伸缩性，也会放大已经存在的问题。</p><p>&nbsp;</p><p></p><h2>这只是一个伸缩性问题吗？</h2><p></p><p>&nbsp;</p><p></p><blockquote>\"如果你无法应对单体的复杂性，凭什么认为微服务就是良方？\"—— Simon Brown</blockquote><p></p><p>&nbsp;</p><p>微服务的真正问题是它们只是放大了已经存在的问题吗？</p><p>&nbsp;</p><p>一个糟糕的微服务实现比糟糕的单体架构糟糕X倍（X是你的分布式应用程序中服务的数量）。随着分布式应用程序中通信路径的指数级增加，情况甚至更糟。</p><p>&nbsp;</p><p>如果你没有合适的工具、技术、自动化、流程和组织来应对单体，那么你凭什么认为你可以处理好微服务？</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/87/87e27e558d4b40f42f5e96f8fdee0ddf.png\" /></p><p></p><p>&nbsp;</p><p>微服务不仅带来性能和开发方面的可伸缩性，也带来了困难程度的伸缩。如果你在构建和维护单体架构时感到困难，转向微服务也并不会给你带来任何好处。</p><p>&nbsp;</p><p>微服务应用程序也是一种单体，只是服务的数量增加了、服务的大小变小了而已。如果疲于应对单体架构，却认为微服务是良方，那么请再三思。</p><p>&nbsp;</p><p>我认为微服务不仅在性能和开发方面带来了可伸缩性，也带来了困难程度的伸缩。微服务有它的优点，但这些优点并不是完全免费的。</p><p>&nbsp;</p><p></p><h2>微服务的成本</h2><p></p><p>&nbsp;</p><p></p><blockquote>\"微服务并非免费午餐。\"—— Sam Newman (摘自“Building Microservices”)</blockquote><p></p><p>&nbsp;</p><p>微服务到底是什么？为什么我们要将应用程序划分为独立的服务？</p><p>&nbsp;</p><p>微服务有许多众所周知的好处：</p><p>&nbsp;</p><p>可伸缩性性能开发团队容错性独立（和较低风险）部署，支持快速开发开发者赋权可丢弃（Disposability）管理复杂性</p><p>&nbsp;</p><p>但这些好处并非微服务的全部，我们也需要为此付出成本：</p><p>&nbsp;</p><p>更高水平的技术技能更好的自动化、管理和可观察性系统处理可伸缩性难题</p><p>&nbsp;</p><p>对于任何一种工具、技术、架构或任何我们想要使用的东西，我们必须问自己一个问题：收益是否超过了成本？ 如果收益超过了成本，你将在使用这些技术时获得良好的体验。如果没有，你将在痛苦的时光中度过。</p><p>&nbsp;</p><p></p><h2>管理复杂性</h2><p></p><p>&nbsp;</p><p></p><blockquote>\"微服务支持大规模、复杂应用的持续部署。\"—— Chris Richardson</blockquote><p></p><p>&nbsp;</p><p>微服务有许多优势，但我们使用它们的真正理由是，它们可以帮助我们管理应用程序日益增长的复杂性。</p><p>&nbsp;</p><p>没错，微服务不是复杂性的根源，而是解决复杂性的方法。</p><p>&nbsp;</p><p>所有的应用程序都将变得复杂，即使是单体也无法避免。微服务为我们提供了将复杂性分解为更小、更简单、更易管理的构建块的工具。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/9d/9d37a6bb877399ef5211d1ee5c665fff.png\" /></p><p></p><p>&nbsp;</p><p>微服务通过将复杂性分解为简单而隔离的部分来帮助我们管理复杂性。我们也可以在单体架构中做到这一点，但你需要一个纪律严明和积极主动的团队来保持设计的完整性，不至于变得一团糟。</p><p>&nbsp;</p><p>我们可以使用微服务来抽象和将软件组件化。当然，我们也可以在单体架构中做到这一点，但微服务还为我们提供了牢固的组件边界，更不用说其他优势了，如独立部署和故障隔离。</p><p>&nbsp;</p><p></p><h2>可能性频谱</h2><p></p><p>&nbsp;</p><p></p><blockquote>\"不存在放之四海而皆准的架构模式。\"—— Dr. Werner Vogels</blockquote><p></p><p>&nbsp;</p><p>我在本文一开始问了一个问题：你是支持微服务还是单体？</p><p>&nbsp;</p><p>回到本文的标题，这不是一个非此即彼的选择。从一个大服务（单体）到许多小服务（微服务），在它们之间还有许多其他可行的选择。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6f/6fafe57760b48d66b918cbb25e0f9dc2.png\" /></p><p></p><p>&nbsp;</p><p>这不只是单体与微服务二选一，它们之间存在一种可能性频谱。如果你将自己固定在支持单体或微服务的立场上，就将错过它们之间丰富的架构多样性。</p><p>&nbsp;</p><p>你不必人为地将自己对准频谱的任意一端。你甚至不必将自己固定在其中任意的特定位置。尽管一些人想让你这样认为，但并不存在所谓的正确的立场。你选择的位置应该与你的团队、业务、项目或客户对齐。只有你可以决定应该处在频谱的哪个位置。</p><p>&nbsp;</p><p></p><h2>投资回报递减</h2><p></p><p>&nbsp;</p><p>随着你在频谱的右侧移动，你将获得微服务的好处，但向右移动也伴随着成本和困难的增加。我们需要确保转向微服务的成本是我们愿意承担的。</p><p>&nbsp;</p><p>如果你不是为了管理复杂性，不需要微服务的其他好处，或者在管理单体的自动化和技术方面存在困难，那么你应该尽量留在频谱的左侧。随着你需要微服务的程度的增加，应该朝着频谱的右侧靠近。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d0/d0b3d70c277a0cb856ba0d8b656e63ce.png\" /></p><p></p><p>随着投资回报递减，一直迈向完美的微服务乌托邦可能是不值得的，但只走其中的一部分道路可能会带来高回报。</p><p>&nbsp;</p><p>此时我们要清楚地认识到，我们不需要达到（我喜欢称之为）微服务乌托邦的程度才能开始享受无服务的好处。无论我们是否达到了频谱的另一侧，我们只要朝着频谱的右侧移动一定程度，都会得到切实的好处！</p><p>&nbsp;</p><p>有很多原因使我们不想迈向完美的微服务。（首先，谁来决定完美的定义？）当我们开始向右侧推进时，将看到巨大的回报。但随着继续向前推进，投资回报开始递减。我们越是朝着更小的服务前进，成本就会超过好处。在杂乱复杂的现实世界中，实现完美的微服务是很困难的，更不用说这其实是不必要的。但这并不意味着朝着那个方向前进不会有所裨益。</p><p>&nbsp;</p><p></p><h2>混合模型</h2><p></p><p>&nbsp;</p><p>如果不需要一直推进到微服务一侧，那应该在哪里停下来呢？答案是在中间的某个位置，在这个位置有一些权衡可以提高我们的开发速度和能力，但成本不会超过好处。</p><p>&nbsp;</p><p>我喜欢将在中间的某个位置看作是两全其美。是的，我们可以拥有单体（或多个单体），单体周围环绕着一些微服务。持有这种务实立场的我是否成了某种异教徒？这种架构的实际好处在于我们可以将单体的好处与微服务的好处混合起来。单体代码库的便利性和简单性，加上在必要时可以利用的微服务的灵活性、可伸缩性和其他好处，使得这种架构成为一个理想的选择。如果有必要，我还可以逐步从单体拆分出单独的微服务，让某些功能或任务可以从中受益。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ff/ff1448374eac8fa0831e44c63371c6fa.png\" /></p><p></p><p>&nbsp;</p><p>混合模型并不是什么新想法，这就是现实世界通常的样子（在中间的某个位置），尽管人们在网络上继续争论不休。</p><p>&nbsp;</p><p>David Heinemeier Hansson（单体支持者）似乎很<a href=\"https://blog.appsignal.com/2020/04/08/the-citadel-architecture-at-appsignal.html\">喜欢这个想法</a>\"，他将其称为城堡架构。</p><p>&nbsp;</p><p></p><h2>大小真的重要吗？</h2><p></p><p>&nbsp;</p><p></p><blockquote>\"也许‘Micro’是一个具有误导性的前缀。它并不一定是‘小’的意思。大小实际上并不重要。\"-- Ben Morris</blockquote><p></p><p>&nbsp;</p><p>服务越小，就越Micro，作用就越小，我们就需要越多的服务。随着我们减小服务的大小并增加服务的数量，困难程度也会提升。</p><p>&nbsp;</p><p>或许，我们应该停止专注于微服务“Micro”的部分。我认为这会导致人们将自己的服务变得过于小，而这一定会导致在使用微服务时遇到困难。</p><p>&nbsp;</p><p>我甚至不确定我们是如何如此专注于使它们变得尽可能小的。我们的意图是将软件拆分成不同的部分，分离责任，让每个部分都比整体简单，从而更容易管理系统的复杂性。但如果服务过于小，我们可能会被复杂性淹没，无法管理好它们。</p><p>&nbsp;</p><p>尽管每个人似乎都有自己关于微服务大小的看法，但现实是，微服务的大小没有固定标准。</p><p>&nbsp;</p><p>所以，我们应该停止争论服务的大小，我们应该谈论的是“合适大小”的服务，也就是适合实际情况的适当的大小——单体或者是频谱较小的一端。我们的服务，无论大小如何，都应该根据业务和领域来决定。微服务大小只是后话，整体的组织更为重要。</p><p>&nbsp;</p><p>问题不在于使服务变得尽可能小，服务小到超过某个程度就会适得其反。它们越小，就必须与系统的其余部分进行更多的交互才能完成任务。交互越多，我们就需要付出更高的网络传输成本，更不用说这会使得它们之间的交互变得更加难以理解。我们需要在服务大小和服务有多喋喋不休（Chatty）之间取得良好的平衡（感谢Damian Maclennan提供了\"喋喋不休\"一词）。</p><p>&nbsp;</p><p>选择对你来说有意义的服务大小，一些服务比其他服务大，这并不是什么问题。请不要让你的强迫症决定服务的大小——这可能会阻碍一个出色的架构的出现。将服务变得更大或更小本质上没有对错之分，只要你找到适合自己的。</p><p>&nbsp;</p><p></p><h2>不要害怕改变你的想法</h2><p></p><p>&nbsp;</p><p></p><blockquote>\"老实说——我以前也这么做过，从微服务转向单体，然后再转回来。两个方向都有尝试过。\"—— Kelsey Hightower</blockquote><p></p><p>&nbsp;</p><p>有时候，为了了解新技术是否适合我们的项目，我们必须进行尝试。所以不要害怕尝试新技术，不要害怕尝试微服务或混合模型，看看它们是否有效。</p><p>&nbsp;</p><p>尝试之后不要害怕改变你的想法，并撤销之前做出的决定。承认某些事情不成功并不是件坏事，这是我们为了取得成功所需要做的事情。尝试不同的事情，进行各种实验，并放弃那些没有成功的事情。因为微服务在特定项目上不适用并不意味着它们对于其他团队或项目也是糟糕的选择。</p><p>&nbsp;</p><p>或者更好的是，保持开放的思维，这是不让自己与新思想和新思维隔绝的最佳方式，这些可能是你做好下一个项目所需要的。</p><p>&nbsp;</p><p></p><h4>延伸阅读</h4><p></p><p>&nbsp;</p><p><a href=\"https://www.bootstrapping-microservices.com/\">https://www.bootstrapping-microservices.com/</a>\"<a href=\"https://rapidfullstackdevelopment.com/\">https://rapidfullstackdevelopment.com/</a>\"</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/monolith-versus-microservices/\">https://www.infoq.com/articles/monolith-versus-microservices/</a>\"</p><p></p><h5>相关阅读：</h5><p></p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&amp;mid=2247522713&amp;idx=3&amp;sn=ed22bce0368a683ed721b2553428ebad&amp;chksm=fa4ae628cd3d6f3ec59f8389632834f01057c97df42fac18ccba2cf1715669c64e65c4ffd739&amp;scene=27#wechat_redirect\">微服务等于&nbsp;Spring&nbsp;Cloud？了解微服务架构和框架</a>\"</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIxMzEzMjM5NQ==&amp;mid=2651054765&amp;idx=1&amp;sn=3297015bfece7433f222d95e2f930c1e&amp;chksm=8c4c37a9bb3bbebf1604d994dd87355419f9a7bd2dc8383ca82affb34ed2528f25b98023e472&amp;scene=27#wechat_redirect\">微服务的几个陷阱</a>\"</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIxMzEzMjM5NQ==&amp;mid=2651032682&amp;idx=1&amp;sn=6fa8158e697246e7fb2afbf0be3597ac&amp;chksm=8c4c596ebb3bd0785e9bc6b6bd515b325651b8fe06dbdb162bdc19a0e5cfb54464df63e5546d&amp;scene=27#wechat_redirect\">百亿流量微服务网关的设计与实现</a>\"</p><p><a href=\"https://www.infoq.cn/video/3UaAmw4dFVESmYhOZaZ2\">聊聊微服务架构的稳定性保障</a>\"</p>",
    "publish_time": "2023-12-01 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "亚马逊云科技重组和整合其Well-Architected Framework",
    "url": "https://www.infoq.cn/article/AtAphRSvk9obYkke1aDa",
    "summary": "<p>亚马逊云科技<a href=\"https://aws.amazon.com/blogs/architecture/announcing-updates-to-the-aws-well-architected-framework-guidance/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzc0ODUsImZpbGVHVUlEIjoiemRreWR5NHBXVmNWV0xxNiIsImlhdCI6MTcwMTIzNzE4NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.U9g-TwFwSj6Ed6yKhS6sWlgPHwQ1xyy5KHKK96tuOS8\">发布了一系列针对其Well-Architected Framework的更新</a>\"，涉及框架的六个支柱。性能效率和运营卓越支柱进行了重组和合并，减少了最佳实践的数量。其他支柱的实施指南得到了改进，包括关于可重用架构模式的建议和步骤。</p><p></p><p><a href=\"https://aws.amazon.com/architecture/well-architected?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzc0ODUsImZpbGVHVUlEIjoiemRreWR5NHBXVmNWV0xxNiIsImlhdCI6MTcwMTIzNzE4NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.U9g-TwFwSj6Ed6yKhS6sWlgPHwQ1xyy5KHKK96tuOS8\">AWS Well-Architected Framework</a>\"首发于2012年，多年来经历了一些重大变化。目前，它涵盖了六个支柱，每个支柱都包含许多关于如何改进云用户云工作负载的设计、实施和运营的最佳实践和指南。此前，<a href=\"https://www.infoq.com/news/2023/04/aws-well-architected-framework/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzc0ODUsImZpbGVHVUlEIjoiemRreWR5NHBXVmNWV0xxNiIsImlhdCI6MTcwMTIzNzE4NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.U9g-TwFwSj6Ed6yKhS6sWlgPHwQ1xyy5KHKK96tuOS8\">该框架于四月进行了更新</a>\"，提供了改进的实施指南。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b5/b56cb6cdbaa16dbcdcaca5200a8fb5d7.webp\" /></p><p></p><p>AWS Well-Architected Framework 时间轴（来源：<a href=\"https://aws.amazon.com/blogs/architecture/announcing-updates-to-the-aws-well-architected-framework-guidance/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzc0ODUsImZpbGVHVUlEIjoiemRreWR5NHBXVmNWV0xxNiIsImlhdCI6MTcwMTIzNzE4NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.U9g-TwFwSj6Ed6yKhS6sWlgPHwQ1xyy5KHKK96tuOS8\">AWS Architecture Blog</a>\"）</p><p></p><p>这次更新的重点是整合最佳实践和改进实施指南，方便企业采用该框架。作为最近的变化的一部分，性能效率支柱已经完全重组，合并后最佳实践的数量减少了十个，变为32个。与此同时，引入了两个新的最佳实践，涉及高效缓存和优化硬件加速。</p><p></p><p>另一个变化最多的支柱是运营卓越。在合并了四个领域的最佳实践后（可观察性设计和运营、部署、运营健康），有12个最佳实践被移除。其他最佳实践也带来了改进的建议性指南。</p><p></p><p>安全支柱带来新的最佳实践和改进的实施指南，可靠性支柱更新了七个最佳实践。最后，成本优化支柱带来了十个最佳实践改进实施指南，可持续性支柱更新了七个最佳实践风险级别。</p><p></p><p>亚马逊云科技高级解决方案架构经理<a href=\"https://www.linkedin.com/in/haleh-najafzadeh/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzc0ODUsImZpbGVHVUlEIjoiemRreWR5NHBXVmNWV0xxNiIsImlhdCI6MTcwMTIzNzE4NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.U9g-TwFwSj6Ed6yKhS6sWlgPHwQ1xyy5KHKK96tuOS8\">Haleh Najafzadeh</a>\"总结了框架的更新：</p><p></p><p></p><blockquote>该版本包含对90个最佳实践的更新和改进：运营卓越（26个）、安全（8个）、可靠性（7个）、性能效率（32个）、成本优化（10个）和可持续性（7个）。这些变化是在2023年发布的151个改进的最佳实践的基础之上，在过去一年中至少有73%的现有框架最佳实践被更新了一次以上。</blockquote><p></p><p></p><p>此外，Well-Architected Framework的最新版本包含对多个AWS服务的新增或更新，包括<a href=\"https://aws.amazon.com/premiumsupport/technology/trusted-advisor/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzc0ODUsImZpbGVHVUlEIjoiemRreWR5NHBXVmNWV0xxNiIsImlhdCI6MTcwMTIzNzE4NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.U9g-TwFwSj6Ed6yKhS6sWlgPHwQ1xyy5KHKK96tuOS8\">Trusted Advisor</a>\"、<a href=\"https://aws.amazon.com/config/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzc0ODUsImZpbGVHVUlEIjoiemRreWR5NHBXVmNWV0xxNiIsImlhdCI6MTcwMTIzNzE4NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.U9g-TwFwSj6Ed6yKhS6sWlgPHwQ1xyy5KHKK96tuOS8\">Config</a>\"、<a href=\"https://aws.amazon.com/aws-cost-management/aws-budgets/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzc0ODUsImZpbGVHVUlEIjoiemRreWR5NHBXVmNWV0xxNiIsImlhdCI6MTcwMTIzNzE4NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.U9g-TwFwSj6Ed6yKhS6sWlgPHwQ1xyy5KHKK96tuOS8\">Budgets</a>\"和<a href=\"https://aws.amazon.com/organizations/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzc0ODUsImZpbGVHVUlEIjoiemRreWR5NHBXVmNWV0xxNiIsImlhdCI6MTcwMTIzNzE4NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.U9g-TwFwSj6Ed6yKhS6sWlgPHwQ1xyy5KHKK96tuOS8\">Organizations</a>\"、<a href=\"https://aws.amazon.com/eventbridge/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzc0ODUsImZpbGVHVUlEIjoiemRreWR5NHBXVmNWV0xxNiIsImlhdCI6MTcwMTIzNzE4NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.U9g-TwFwSj6Ed6yKhS6sWlgPHwQ1xyy5KHKK96tuOS8\">EventBridge</a>\"、<a href=\"https://aws.amazon.com/cloudwatch/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzc0ODUsImZpbGVHVUlEIjoiemRreWR5NHBXVmNWV0xxNiIsImlhdCI6MTcwMTIzNzE4NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.U9g-TwFwSj6Ed6yKhS6sWlgPHwQ1xyy5KHKK96tuOS8\">CloudWatch</a>\"、<a href=\"https://aws.amazon.com/sns/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzc0ODUsImZpbGVHVUlEIjoiemRreWR5NHBXVmNWV0xxNiIsImlhdCI6MTcwMTIzNzE4NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.U9g-TwFwSj6Ed6yKhS6sWlgPHwQ1xyy5KHKK96tuOS8\">SNS</a>\"和<a href=\"https://aws.amazon.com/elasticache/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzc0ODUsImZpbGVHVUlEIjoiemRreWR5NHBXVmNWV0xxNiIsImlhdCI6MTcwMTIzNzE4NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.U9g-TwFwSj6Ed6yKhS6sWlgPHwQ1xyy5KHKK96tuOS8\">ElastiCache</a>\"等等。</p><p></p><p>新版本中包含的更新可在<a href=\"http://aws.amazon.com/well-architected-tool/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzc0ODUsImZpbGVHVUlEIjoiemRreWR5NHBXVmNWV0xxNiIsImlhdCI6MTcwMTIzNzE4NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.U9g-TwFwSj6Ed6yKhS6sWlgPHwQ1xyy5KHKK96tuOS8\">AWS Well-Architected Tool</a>\"中找到，该工具可用于对比框架中包含的最佳实践。</p><p></p><p>其他云供应商也为各自的平台提供了类似的框架：<a href=\"https://cloud.google.com/architecture/framework?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzc0ODUsImZpbGVHVUlEIjoiemRreWR5NHBXVmNWV0xxNiIsImlhdCI6MTcwMTIzNzE4NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.U9g-TwFwSj6Ed6yKhS6sWlgPHwQ1xyy5KHKK96tuOS8\">Google Cloud Architecture Framework</a>\"描述了在Google Cloud上的最佳实践并提供建议，微软则提供了<a href=\"https://learn.microsoft.com/en-us/azure/architecture/framework/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDEyMzc0ODUsImZpbGVHVUlEIjoiemRreWR5NHBXVmNWV0xxNiIsImlhdCI6MTcwMTIzNzE4NSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.U9g-TwFwSj6Ed6yKhS6sWlgPHwQ1xyy5KHKK96tuOS8\">Azure Well-Architected Framework（WAF）</a>\"。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/11/aws-well-architected-framework/\">https://www.infoq.com/news/2023/11/aws-well-architected-framework/</a>\"</p>",
    "publish_time": "2023-12-01 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "节俭架构师的七条黄金法则！亚马逊云科技CTO：省钱在于“架构师”，不在于下云",
    "url": "https://www.infoq.cn/article/09TYeIY7K1hcFuu7tik0",
    "summary": "<p>亚马逊云科技CTO Werner Vogels向企业传达了一条信息：在管理云成本方面，是时候成为节俭的架构师了。</p><p>&nbsp;</p><p>他拥有近 20 年的平台构建经验，在今天的 re:Invent 2023大会主题演讲中，给大家上了一节关于成本优化的课：“作为技术专家，我们生活在一个瞬息万变的世界，我们需要保持学习，坐下来，拿出你的记事本，现在开始做笔记。”</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/72/7297f4ab1d5e6497be5232a6bfaa780e.jpeg\" /></p><p></p><p>&nbsp;</p><p>Vogels选择在主题演讲中讨论成本问题，这既反映了当前的经济环境，也反映了云计算支出的不断增长的态势。本月早些时候，Gartner公司发布预测，到2024年云用户支出将达到6780亿美元，比今年的5630亿美元大幅增长。</p><p>&nbsp;</p><p>亚马逊云科技在引领公有云市场方面取得了巨大成功，但同时也意识到，这个行业所带来的成本压力正在随着生成式AI等技术的广泛采用而不断增加。</p><p>&nbsp;</p><p>“在构建这些系统、在有限制的环境中生活中蕴含了很多艺术，”Vogels 表示。“云计算消除了所有这些限制。突然间，最重要的事情就是迅速行动，推出产品。随着执行速度变得更为重要，我们失去了关注成本、以成本为重要考量的架构设计的艺术。作为构建者，我们确实需要开始思考这一点。”</p><p>&nbsp;</p><p>Vogels概述了成为“节俭架构师”的七条关键原则，这是一组他自己描述的“法则”，已发布在一个专门致力于此主题的新网站上。其中包括创建将成本与业务对齐的系统，观察基础设施中的关键运营网络以避免未知的费用，并追求渐进式优化。</p><p>&nbsp;</p><p>“我尝试向初创公司强调这一点，” Vogels 说。“你将要采用什么收入模式？他们需要构建符合这一模式的架构。确保你获取收入的维度始终与你的成本保持一致。”</p><p>&nbsp;</p><p>附完整的“节俭架构师的七条黄金法则”：</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/25/25c097280f23966662885e7e89035eab.png\" /></p><p></p><p>架构师如何培养自己的成本意识、增强现代架构可持续性。</p><p>&nbsp;</p><p></p><h2>法则一</h2><p></p><p></p><p>将成功视为一种非功能性需求。</p><p></p><p>所谓非功能性需求，就是用于判断系统操作的标准，与具体特性或功能无关。可访问性、可用性、可扩展性、安全性、可移植性、可维护性和合规性等都在此列。而成本往往是其中受到忽略的一条。</p><p></p><p>业务之所以身陷困境，往往是因为他们没有考虑到各个阶段中的相应成本——从设计到开发、再到运营——也可能是未能正确量化成本。这背后的原理非常简单：如果成本比收入还高，那还做业务干嘛呢。</p><p>更早、以更加可持续的方式考虑成本影响，架构师才能在系统设计过程中在功能、上市时间和效率之间寻求平衡。这样开发团队可以专注于维护更加精简高效的代码，运营部门可以优化资源用量和支出，从而最大限度提高盈利能力。</p><p></p><h2>法则二</h2><p></p><p>确保系统的最终成本与业务保持一致。</p><p></p><p>系统能否长治久安，取决于其成本是否与业务模式高度匹配。在设计和构建系统时，架构师必须考虑收入来源和利润杠杆。更重要的是，必须找到能够产生利润的维度，确保架构规划始终围绕收益展开。</p><p></p><p>例如，在电子商务领域，这个核心维度可能是订单数量。当订单增加时，基础设施和运营成本也会随之上升。但没关系，只要系统架构设计良好，我们就能享受规模经济带来的红利。最重要的是基础设施成本对业务的影响始终精确、可以量化。</p><p></p><p>作为架构师，大家需要关注收入，并据此指导技术选型。任何不计代价的增长只会招致毁灭。</p><p></p><h2>法则三</h2><p></p><p>架构设计是一系列权衡的集合。</p><p></p><p>在架构当中，每项决定都涉及相应的权衡。成本、弹性和性能这些非功能性需求之间，往往相互冲突、难以调和。</p><p></p><p>常言道“万事万物终将陨落。”要想抵御这种失败的风险，就必须关注弹性，同时牺牲掉一部分性能。</p><p></p><p>在技术与业务需求间找到适当的平衡将至关重要，也就是把握住风险承受能力与预算额度间的最佳比例。请记住，节俭是为了最大限度提升价值，而不只是尽可能控制支出。因此，在必须得花的钱上别吝啬。</p><p></p><h2>法则四</h2><p></p><p>无法观察的系统将带来无法估量的成本。</p><p></p><p>如果不认真观察和测量，系统运营的真实成本将难以把控。就如同隐藏在地下室中的电表一样，这种直观性的缺失必然导致浪费。所以一定要把指标摆在明面上，这将深刻改变运营行为。</p><p></p><p>尽管实现可观察性需要投入，但这笔钱绝对会物有所值。有句格言说“如果无法量化，也就无法管理。”请始终坚持对利用率、支出、错误等至关重要的成本管理指标保持关注。</p><p></p><p>当工程师和业务合作伙伴能够随时查看关键成本指标时，自然就会催生出更具可持续性的实践策略。持续检查能帮我们发现非必要支出，并调整运营以减少浪费。总之，可观察性带来的回报往往远超过前期投入。</p><p></p><p>最重要的是，这本身也是对成本的强调，能在企业中塑造出鼓励可持续性实践的文化。</p><p></p><h2>法则五</h2><p></p><p>依托成本感知架构实现成本控制。</p><p></p><p>节俭架构的本质，在于强大监控与成本优化能力的结合。精心设计的系统能帮助大家抓住改进的机会。为此，请将应用程序拆分成一系列可以调节的构建块。</p><p></p><p>一种常见的方法就是按重要性对组件进行分层。T1层组件必不可少，应当不计成本进行优化；T2层组件非常重要，但暂时缩小规模也不会产生重大影响；T3层组件则属于“锦上添花”，要保证其成本低廉且易于控制。</p><p></p><p>明确定义各层，即可在成本及其他要求之间求得平衡。对组件的精细控制则能优化成本和体验。基础设施、语言、数据库都应具备可调节性，并在系统的设计和构建阶段考虑收入和利润。总之，成本优化必须可量化，且与业务影响直接挂钩。</p><p></p><h2>法则六</h2><p></p><p>成本优化是个渐进的过程。</p><p></p><p>追求成本效率是个持续的过程。即使在部署之后，我们也必须随时审视系统以逐步寻求优化。其中的关键在于不断提问、深入研究。编程语言往往提供分析工具以追踪代码性能，虽然这需要额外的精力和专业知识，但精细的调优足以带来几毫秒的差异。而这种看似微小的优化，累积起来足以产生超出想象的成本优势。</p><p></p><p>在运营中，大部分时间都被用于运行现有系统。所以请把握一切机会，分析资源使用情况并减少浪费。在亚马逊，我们持续监控生产中的服务，发现运营模式并消除低效因素。节俭是坚持的结果——通过逐步降低延迟和基础设施成本，服务成本才能最终得到优化。</p><p></p><p>只要不懈努力，我们总能找到改进空间。而今天省下的资源，就是明天创新的燃料。</p><p></p><h2>法则七</h2><p></p><p>顺风局打多了会让人盲目自信。</p><p></p><p>如果软件团队在取得重大成功的过程中，从未经历过任何严重失败或者阻碍，则往往会出现自满情绪。这是一种危险的倾向，会导致团队成员对原本的方法、工具和实践变得盲目信息。</p><p></p><p>软件团队经常陷入这样的陷阱：仅凭以往的工作经验，他们就认为当前的技术、架构或语言永远是最佳选择。这可能会产生一种错误的安全感，阻碍对现状的质疑，更会打击对可能更加高效、更具成本效益或可扩展性更强的新选项的探索。</p><p></p><p>说到编程语言，人们往往会说“我们是一家Java公司”。这话大有问题，其底层逻辑无疑是在扼杀创新。唾手可得的成功会滋生自满情绪，而只有质疑才能不断激发新的优化与改进思路。</p><p></p><p>Grace Hopper的名言，准确反映了这一值得高度警惕的陷阱：“我们一直都是这样做的。”</p>",
    "publish_time": "2023-12-01 09:38:28",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "《云上新视界》第五期：弹幕互动玩法解决方案技实践",
    "url": "https://www.infoq.cn/article/O8i9efPMXJKrYBNx7IsC",
    "summary": "<p>本期课程将重点介绍当前直播热门的互动玩法—— 弹幕互动，重点介绍其解决方案和在业务中的挑战与实践。你将获得：<br />\n1、了解弹幕互动的不同的技术方案架构与挑战；<br />\n2、获取火山引擎 RTC+云游戏解决方案；<br />\n3、了解实践中的挑战与优化策略。</p>",
    "publish_time": "2023-12-01 09:41:03",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "全球首款开源实时操作系统！开发了20多年、部署在超120亿台设备上的ThreadX正式开源",
    "url": "https://www.infoq.cn/article/7joX7vhZVJVwDfjbE7AJ",
    "summary": "<p></p><h2>微软开源 Azure RTOS 嵌入式系统</h2><p></p><p>&nbsp;</p><p>近日，微软宣布开源 Azure RTOS 及其所有组件，将其贡献给 Eclipse 基金会，并更名为 Eclipse ThreadX。Azure RTOS 的开源将满足长期以来高度分化的嵌入式软件市场的实际需求，而 ThreadX 也将成为全球首款开源实时操作系统。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/b3/b3287243d088d4242aeec80dbdf8b1b6.png\" /></p><p></p><p>2019 年 4 月 18 日，ThreadX 操作系统被微软看中，其所有者 Express Logic 也被整体收购。从那时起，它的名字也被改为 Azure RTOS。微软表示，通过此次收购，微软将解锁对数十亿全新连接端点的访问能力，让更多设备能够无缝接入 Azure 云并获得新的智能化功能。Express Logic 的 ThreadX RTOS 也将加入微软日益庞大的物联网支持技术阵营，并与微软在微控制器领域的安全方案 Azure Sphere 形成互补，目标是将 ThreadX RTOS 确立为 Azure Sphere 设备上的实时处理选项，帮助那些支持 ThreadX 并需要边缘计算功能的物联网设备能够与 Azure IoT Edge 对接。</p><p>&nbsp;</p><p>有观察人士称，微软收购 ThreadX 是为了回应此前亚马逊云科技接掌 FreeRTOS。在收购之后，ThreadX 原开发者 William Lamie 选择离开并创办新公司，专门销售包含 POSIX 兼容线程的“第五代”RTOS，名为 PX5OS。</p><p>&nbsp;</p><p>彼时，ThreadX 拥有超 62 亿部署量，也是当时 VDC Research 调查中全球部署范围最广的 RTOS 之一。之所以得到广泛接受，就是因为 ThreadX 解决了市场的客观需求：如何在资源有限的环境之下，让物联网及边缘设备仍具有可靠的安全保障。制造商生产的各类产品——包括智能灯泡、温度计、空调、医疗设备及网络设备等，都享受到 Express Logic 方案带来的尺寸、安全性与可靠性优势，同时也加快了产品上市速度。即使是高度受限的设备（由电池供电且闪存小于 64 KB），也能用上 Express Logic 的解决方案。全球每年生产和部署的 MCU 驱动设备超过 90 亿件，其中大部分都能够从 Express Logic 的技术成果中获益。</p><p>&nbsp;</p><p>目前，ThreadX 涉足的领域更加广泛，有 120 亿台设备在运行这款系统上。它曾经为英特尔的片上管理引擎提供支持，也是 Pi Pico 级别以上各类树莓派（Raspberry Pi）的运行固件。在 Pi 1、2 和 3 代中，它藏身在 Pi SD 卡上的 bootcode.bin 文件当中；而在 Pi 4 和 400 当中，它又变身为 start*.elf。ThreadX 还存在于 GitHub 和 Debian 项目当中，以专有blob（二进制大型对象）的形式示人。</p><p>&nbsp;</p><p>它就像是个密不透风的黑盒子，其中甚至不涉及任何 Arm 代码——相反，只运行在 Pi 的 VideoCore GPU 之上。值得一提的是，VideoCore GPU 才是 Pi 中控制硬件的主要设备，Arm 核心反而是 VideoCore GPU 的从属设备。这也是 Xen 只能在 Pi 4 及更高版本上运行的原因：到这些版本，其 Arm 核心才开始拥有自己的中断控制器。不过从 Pi 5 开始，ThreadX 被纳入 EEPROM 当中且功能有所削减，Arm 核心也由此获得更多硬件控制权。</p><p>&nbsp;</p><p>尽管市面上的实时操作系统（即 RTOS）并不少见，但由于实时操作系统默默运行于底层，很少受到关注。最知名的实时操作系统当数 Wind River 的 VxWorks：远在火星的 NASA 毅力号探测器上就有它的身影。作为黑莓旗下唯一赚钱的业务，QNX RTOS 也先后两次成为人们关注的焦点：除了作为RIM 黑莓 X foldlelab 及智能手机产品的底层基础，上世纪 90 年代它还曾通过一张软盘成功实现设备加载和运行演示。</p><p></p><h2>ThreadX 有哪些特点？</h2><p></p><p>&nbsp;</p><p>目前来看，ThreadX 本身仍是一款久经考验、相当成熟的产品，其 STM32 版本等部件甚至通过了 TÜV 功能安全 (FuSa) 认证。这也使其在特定客群中建立起强大的吸引力。</p><p>&nbsp;</p><p>具体来说，ThreadX 的特点包括：</p><p>&nbsp;</p><p>技术成熟、可扩展性强。ThreadX 已经发展 20 年有余，目前在全球超过 120 亿台设备上运行，是公认的高性能、高稳定性实时操作系统。基于宽松的开源许可证。ThreadX 将采用 MIT 开源许可证，为用户和采用者提供高度宽松的许可条款。以厂商中立为基调进行开源管理。ThreadX 将由 Eclipse 基金会管理并遵循其开发流程，保证以厂商中立的治理模式推动其发展和延续，造福于整个技术行业。通过了功能安全与保障谁。ThreadX 已通过 SGS-TÜV Saar 认证，符合 IEC 61508、IEC 62304、ISO 26262 和 EN 50128 标准。ThreadX 还通过了 EAL4+ Common Criteria 安全认证。全面的安全认证积累开行业之先河，也让 ThreadX 成为第一款有望改变游戏规则的可靠开源RTOS。</p><p>&nbsp;</p><p>Eclipse 基金会在博客中提到，虽然市面上还存在其他开源 RTOS，但没有哪套方案能够同时满足以上四点。基金会对 ThreadX 充满信心，认为其必将迅速扩大在航空航天、汽车、物联网、医疗、交通、自动化和消费级可穿戴设备等广泛用例中的落地。</p><p></p><h2>ThreadX 未来将如何发展？</h2><p></p><p>&nbsp;</p><p>除了项目本身，Eclipse 基金会还成立了技术兴趣小组，专注于为 ThreadX 建立起由行业支持的可持续融资模式。目前，AMD、Cypherbridge、微软、NXP、PX5、瑞萨电子、意法半导体、Silicon Labs 和&nbsp;Witekio（Avnet 旗下公司）都积极参与进来。</p><p>&nbsp;</p><p>未来，ThreadX 兴趣小组将主要关注以下几项目标：</p><p>&nbsp;</p><p>整合项目：尽快将 ThreadX 迁移至 Eclipse 基金会的治理体系之下。具体涉及在未来几周内对代码和文档进行转换和重新许可，并修改项目商标。与此同时，兴趣小组 还在寻求具备 ThreadX经验的开发者参与进来，像之前的 Cypherbridge、PX5 和 Witekio 那样推动项目发展，努力在 2024 年 1 月底前发布 Eclipse 基金会治理下的首个 ThreadX 更新版本。维持认证：安全认证是 ThreadX 的一大差异化优势。在开源治理也继续维持住这些认证，将成为决定 ThreadX 项目未来命运的关键因素。兴趣小组希望为 ThreadX 社区建立起最佳实践，并根据需要修改并增强 Eclipse 基础开发流程，从而满足安全性及其他流程性要求。相关认证将帮助 ThreadX 的下游使用者轻松证明其产品的安全性，且基于开放许可证对外提供。这将显著缩短基于 Eclipse ThreadX 的产品的安全认证周期。建立社区：ThreadX 正是孕育开源嵌入式软件开发者社区的绝佳载体。兴趣小组将高度关注吸纳新贡献、通过开发者倡议推动项目采用，以及与 Eclipse 基金会内的其他社区（例如物联网和软件定义汽车社区）间建立往来，同时坚定维持 ThreadX 独特的安全认证优势。打响品牌知名度：恢复原有 ThreadX 之名，是为了向这项技术的使用者们保证，开源后的 ThreadX 仍是他们最信任的 RTOS。项目将把 ThreadX 品牌同厂商中立定位联系起来，传达明确的品牌形象，同时建立兼容性计划以为当前及未来的使用者提供更多价值。发展生态系统：目前全球超百亿台设备都在使用 ThreadX，这也证明其是一项重要且非常成熟的技术。为了确保 ThreadX 未来能长期保持稳定发展，兴趣小组需要各生态系统参与方的支持、协作和贡献，具体包括各芯片/SBV制造商、嵌入式系统集成商以及工具提供商。</p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://techcommunity.microsoft.com/t5/internet-of-things-blog/microsoft-contributes-azure-rtos-to-open-source/ba-p/3986318\">https://techcommunity.microsoft.com/t5/internet-of-things-blog/microsoft-contributes-azure-rtos-to-open-source/ba-p/3986318</a>\"</p><p><a href=\"https://eclipse-foundation.blog/2023/11/21/introducing-eclipse-threadx/\">https://eclipse-foundation.blog/2023/11/21/introducing-eclipse-threadx/</a>\"</p><p><a href=\"https://www.theregister.com/2023/11/28/microsoft_opens_sources_threadx/\">https://www.theregister.com/2023/11/28/microsoft_opens_sources_threadx/</a>\"</p>",
    "publish_time": "2023-12-01 10:21:53",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "亚马逊 CTO 20 年架构经验之道：俭约架构师的七大黄金法则！",
    "url": "https://www.infoq.cn/article/09TYeIY7K1hcFuu7tik0",
    "summary": "<p>亚马逊 CTO Werner Vogels 向企业传达了一条信息：在管理云成本方面，是时候成为节俭的架构师了。</p><p>&nbsp;</p><p>他拥有近 20 年的平台构建经验，在今天的 re:Invent 2023大会主题演讲中，给大家上了一节关于成本优化的课：“作为技术专家，我们生活在一个瞬息万变的世界，我们需要保持学习，坐下来，拿出你的记事本，现在开始做笔记。”</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/72/7297f4ab1d5e6497be5232a6bfaa780e.jpeg\" /></p><p></p><p>&nbsp;</p><p>Vogels选择在主题演讲中讨论成本问题，这既反映了当前的经济环境，也反映了云计算支出的不断增长的态势。本月早些时候，Gartner公司发布预测，到2024年云用户支出将达到6780亿美元，比今年的5630亿美元大幅增长。</p><p>&nbsp;</p><p>亚马逊云科技在引领公有云市场方面取得了巨大成功，但同时也意识到，这个行业所带来的成本压力正在随着生成式AI等技术的广泛采用而不断增加。</p><p>&nbsp;</p><p>“在构建这些系统、在有限制的环境中生活中蕴含了很多艺术，”Vogels 表示。“云计算消除了所有这些限制。突然间，最重要的事情就是迅速行动，推出产品。随着执行速度变得更为重要，我们失去了关注成本、以成本为重要考量的架构设计的艺术。作为构建者，我们确实需要开始思考这一点。”</p><p>&nbsp;</p><p>Vogels概述了成为“俭约架构师”（The Frugal Architect）的七条关键法则，这是一组他自己描述的“法则”，已发布在一个专门致力于此主题的新网站上。其中包括创建将成本与业务对齐的系统，观察基础设施中的关键运营网络以避免未知的费用，并追求渐进式优化。</p><p>&nbsp;</p><p>“我尝试向初创公司强调这一点，” Vogels 说。“你将要采用什么收入模式？他们需要构建符合这一模式的架构。确保你获取收入的维度始终与你的成本保持一致。”</p><p>&nbsp;</p><p>附完整的“俭约架构师的七大黄金法则”：</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/25/25c097280f23966662885e7e89035eab.png\" /></p><p></p><p>架构师如何培养自己的成本意识、增强现代架构可持续性。</p><p>&nbsp;</p><p></p><h2>法则一</h2><p></p><p></p><p>将成本视为一种非功能性需求。</p><p></p><p>所谓非功能性需求，就是用于判断系统操作的标准，与具体特性或功能无关。可访问性、可用性、可扩展性、安全性、可移植性、可维护性和合规性等都在此列。而成本往往是其中受到忽略的一条。</p><p></p><p>业务之所以身陷困境，往往是因为他们没有考虑到各个阶段中的相应成本——从设计到开发、再到运营——也可能是未能正确量化成本。这背后的原理非常简单：如果成本比收入还高，那还做业务干嘛呢。</p><p>更早、以更加可持续的方式考虑成本影响，架构师才能在系统设计过程中在功能、上市时间和效率之间寻求平衡。这样开发团队可以专注于维护更加精简高效的代码，运营部门可以优化资源用量和支出，从而最大限度提高盈利能力。</p><p></p><h2>法则二</h2><p></p><p>确保系统的最终成本与业务保持一致。</p><p></p><p>系统能否长治久安，取决于其成本是否与业务模式高度匹配。在设计和构建系统时，架构师必须考虑收入来源和利润杠杆。更重要的是，必须找到能够产生利润的维度，确保架构规划始终围绕收益展开。</p><p></p><p>例如，在电子商务领域，这个核心维度可能是订单数量。当订单增加时，基础设施和运营成本也会随之上升。但没关系，只要系统架构设计良好，我们就能享受规模经济带来的红利。最重要的是基础设施成本对业务的影响始终精确、可以量化。</p><p></p><p>作为架构师，大家需要关注收入，并据此指导技术选型。任何不计代价的增长只会招致毁灭。</p><p></p><h2>法则三</h2><p></p><p>架构设计是一系列权衡的集合。</p><p></p><p>在架构当中，每项决定都涉及相应的权衡。成本、弹性和性能这些非功能性需求之间，往往相互冲突、难以调和。</p><p></p><p>常言道“万事万物终将陨落。”要想抵御这种失败的风险，就必须关注弹性，同时牺牲掉一部分性能。</p><p></p><p>在技术与业务需求间找到适当的平衡将至关重要，也就是把握住风险承受能力与预算额度间的最佳比例。请记住，节俭是为了最大限度提升价值，而不只是尽可能控制支出。因此，在必须得花的钱上别吝啬。</p><p></p><h2>法则四</h2><p></p><p>无法观察的系统将带来无法估量的成本。</p><p></p><p>如果不认真观察和测量，系统运营的真实成本将难以把控。就如同隐藏在地下室中的电表一样，这种直观性的缺失必然导致浪费。所以一定要把指标摆在明面上，这将深刻改变运营行为。</p><p></p><p>尽管实现可观察性需要投入，但这笔钱绝对会物有所值。有句格言说“如果无法量化，也就无法管理。”请始终坚持对利用率、支出、错误等至关重要的成本管理指标保持关注。</p><p></p><p>当工程师和业务合作伙伴能够随时查看关键成本指标时，自然就会催生出更具可持续性的实践策略。持续检查能帮我们发现非必要支出，并调整运营以减少浪费。总之，可观察性带来的回报往往远超过前期投入。</p><p></p><p>最重要的是，这本身也是对成本的强调，能在企业中塑造出鼓励可持续性实践的文化。</p><p></p><h2>法则五</h2><p></p><p>依托成本感知架构实现成本控制。</p><p></p><p>节俭架构的本质，在于强大监控与成本优化能力的结合。精心设计的系统能帮助大家抓住改进的机会。为此，请将应用程序拆分成一系列可以调节的构建块。</p><p></p><p>一种常见的方法就是按重要性对组件进行分层。T1层组件必不可少，应当不计成本进行优化；T2层组件非常重要，但暂时缩小规模也不会产生重大影响；T3层组件则属于“锦上添花”，要保证其成本低廉且易于控制。</p><p></p><p>明确定义各层，即可在成本及其他要求之间求得平衡。对组件的精细控制则能优化成本和体验。基础设施、语言、数据库都应具备可调节性，并在系统的设计和构建阶段考虑收入和利润。总之，成本优化必须可量化，且与业务影响直接挂钩。</p><p></p><h2>法则六</h2><p></p><p>成本优化是个渐进的过程。</p><p></p><p>追求成本效率是个持续的过程。即使在部署之后，我们也必须随时审视系统以逐步寻求优化。其中的关键在于不断提问、深入研究。编程语言往往提供分析工具以追踪代码性能，虽然这需要额外的精力和专业知识，但精细的调优足以带来几毫秒的差异。而这种看似微小的优化，累积起来足以产生超出想象的成本优势。</p><p></p><p>在运营中，大部分时间都被用于运行现有系统。所以请把握一切机会，分析资源使用情况并减少浪费。在亚马逊，我们持续监控生产中的服务，发现运营模式并消除低效因素。节俭是坚持的结果——通过逐步降低延迟和基础设施成本，服务成本才能最终得到优化。</p><p></p><p>只要不懈努力，我们总能找到改进空间。而今天省下的资源，就是明天创新的燃料。</p><p></p><h2>法则七</h2><p></p><p>顺风局打多了会让人盲目自信。</p><p></p><p>如果软件团队在取得重大成功的过程中，从未经历过任何严重失败或者阻碍，则往往会出现自满情绪。这是一种危险的倾向，会导致团队成员对原本的方法、工具和实践变得盲目信息。</p><p></p><p>软件团队经常陷入这样的陷阱：仅凭以往的工作经验，他们就认为当前的技术、架构或语言永远是最佳选择。这可能会产生一种错误的安全感，阻碍对现状的质疑，更会打击对可能更加高效、更具成本效益或可扩展性更强的新选项的探索。</p><p></p><p>说到编程语言，人们往往会说“我们是一家Java公司”。这话大有问题，其底层逻辑无疑是在扼杀创新。唾手可得的成功会滋生自满情绪，而只有质疑才能不断激发新的优化与改进思路。</p><p></p><p>Grace Hopper的名言，准确反映了这一值得高度警惕的陷阱：“我们一直都是这样做的。”</p>",
    "publish_time": "2023-12-01 09:38:28",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "爱奇艺商业智能部 / 研究员杜益凡确认出席 QCon 上海，分享爱奇艺数据治理中的数据湖应用实践",
    "url": "https://www.infoq.cn/article/Us5tHgDB53kSXSkppag6",
    "summary": "<p><a href=\"https://qcon.infoq.cn/2023/shanghai/?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_campaign=8&amp;utm_term=1201&amp;utm_content=duyifan\">QCon 全球软件开发大会</a>\"，将于 12 月在上海召开。爱奇艺商业智能部 / 研究员杜益凡将发表题为《<a href=\"https://qcon.infoq.cn/2023/shanghai/presentation/5650?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_campaign=8&amp;utm_term=1201&amp;utm_content=duyifan\">爱奇艺数据治理中的数据湖应用实践</a>\"》主题分享，探讨数据治理工作中遇到的问题，数据湖技术是如何解决数据治理工作中问题的，以及数据治理工作中应用数据湖技术获得了哪些收益。</p><p></p><p><a href=\"https://qcon.infoq.cn/2023/shanghai/presentation/5650?utm_source=infoqweb&amp;utm_medium=teacherart&amp;utm_campaign=8&amp;utm_term=1201&amp;utm_content=duyifan\">杜益凡</a>\"，长期从事数据相关工作，目前在爱奇艺负责数据中台相关工作，在数据体系建设、数据仓库、大数据平台、数据应用、数据治理相关领域有丰富经验。他在本次会议的演讲内容如下：</p><p></p><p>演讲：爱奇艺数据治理中的数据湖应用实践</p><p></p><p>爱奇艺数据中台团队在管理和服务公司内数据资产，实施数据治理的过程中，不断吸收新的理念，引入新的工具，精细化爱奇艺的数据体系管理。</p><p></p><p>“数据湖”作为近年来数据领域广泛热议的概念，其技术层面也受到了业界的广泛关注。我们的团队对相关数据湖的理论和实践进行了深入研究，认为数据湖不仅是一种集成和处理数据的极具前景的技术，更是一种治理数据的全新视角，可以对数据管理、数据存储、数据链路等治理工作带来显著提升。</p><p></p><p>演讲提纲：</p><p></p><p>爱奇艺数据体系与数据治理工作介绍数据治理工作中遇到了哪些问题数据湖技术是如何解决数据治理工作中问题的数据治理工作中应用数据湖技术获得了哪些收益未来规划</p><p></p><p>听众收益点：</p><p></p><p>○ 了解数据治理中遇到的一些问题的一种解决思路</p><p>○ 了解数据湖技术如何在数据治理起到作用</p><p></p><p>除上述演讲外，QCon 上海还将围绕&nbsp;<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1595?utm_source=infoqweb&amp;utm_medium=teacherart\">GenAI和通用大模型应用探索</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1596?utm_source=infoqweb&amp;utm_medium=teacherart\">AI&nbsp;Agent&nbsp;与行业融合应用的前景</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1597?utm_source=infoqweb&amp;utm_medium=teacherart\">LLM&nbsp;时代的性能优化</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1598?utm_source=infoqweb&amp;utm_medium=teacherart\">智能化信创软件&nbsp;IDE</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1602?utm_source=infoqweb&amp;utm_medium=teacherart\">面向人工智能时代的架构</a>\"、<a href=\"https://qcon.infoq.cn/2023/shanghai/track/1604?utm_source=infoqweb&amp;utm_medium=teacherart\">性能工程：提升效率和创新的新方法</a>\"等专题进行交流。</p><p></p><p>QCon 上海 2023，相约 12 月！ 8 折优惠仅剩最后 1 天，现在购票立减￥1360！咨询购票请联系：18514549229（微信同手机号）。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/01/0113b3dfb187d5f9988b7eb16d2e0594.png\" /></p><p></p>",
    "publish_time": "2023-12-01 11:30:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "构建智算时代的云原生应用平台，2023 云原生产业大会，阿里云在这里！",
    "url": "https://www.infoq.cn/article/RodFGfJ6DMMctTEUM7pM",
    "summary": "<p>2023 信通院云原生产业大会正在进行中。</p><p></p><p><a href=\"https://www.infoq.cn/article/3Bo0yuu203dUCCaLUYPU?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">云原生技术</a>\"规模化应用的关键时期，国内外云原生前沿技术趋势、基于云原生技术的应用现代化建设、大模型应用下的云原生算力供给、云原生安全防护新思路、垂直行业应用实践等等都成为从业者的关注焦点。在云原生产业大会主论坛上，<a href=\"https://www.infoq.cn/article/RKC2EkEoig7lV7Oa2Oz9?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">阿里云</a>\"云原生应用平台资深产品总监李国强发表主题演讲。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ac/acb2b7bb142aa5d58d6365dd9966d207.jpeg\" /></p><p></p><p></p><h2>容器服务，助力构建现代化应用平台</h2><p></p><p></p><p>阿里云容器服务&nbsp;<a href=\"https://www.infoq.cn/article/NYkJ0oYWJTLNzzYDt1dg?utm_campaign=geek_search&amp;utm_content=geek_search&amp;utm_medium=geek_search&amp;utm_source=geek_search&amp;utm_term=geek_search\">ACK&nbsp;</a>\"已经成长为企业的云原生应用操作系统，帮助越来越多的客户实现智能化、数字化创新，包括自动驾驶、智能科研、金融科技等众多新兴领域。其覆盖了从公共云、边缘云、到本地数据中心的各个场景。让所有需要云能力的地方，都有统一的容器基础设施。</p><p></p><p>在过去一年，阿里云容器产品能力持续受到业界的广泛认可。2023&nbsp;年&nbsp;9&nbsp;月，在权威咨询机构&nbsp;Gartner&nbsp;发布的容器管理魔力象限中，由于在公共云、专有云、混合云等环境完善的产品体系，阿里云成为容器全球领导者，亚洲唯一。智算时代已来，阿里云容器服务在高效云原生算力、高性能智算应用、智能化运维管理、可信基础设施、分布式云架构等方向进行全面升级。</p><p></p><p>“以杭州亚运会为例，云原生产品作为技术底座，为亚运一站通、亚运钉等众多核心应用提供了高弹性、高可用、异地多中心的架构支持，确保赛事系统万无一失。”</p><p></p><p>随着容器和&nbsp;K8s&nbsp;成为应用研发运维的新标准，云托管的&nbsp;K8s&nbsp;将在 2023 年超过本地部署，这意味着容器化上云成为了新常态。同时，随着互联网分布式技术的普及，微服务架构被广泛使用，运维复杂度陡然上升。企业和开发者面临新的挑战，比如&nbsp;K8s&nbsp;入门门槛高、维护比较复杂；微服务运营体系很复杂，企业业务流量波动大，亟需更好的按需弹性能力；云产品组合选择比较多，对于企业来讲需要更高的性价比。</p><p></p><p>为了解决今天企业的这些挑战，阿里云带来一款全新的产品：容器计算服务 ACS。ACS&nbsp;全新定义了容器算力，将容器和资源一体化，算力交付模式升级为&nbsp;Serverless&nbsp;形态，ACS&nbsp;支撑的负载类型也更加丰富，大幅降低了企业使用容器、K8s&nbsp;的代价和成本，打造用云新范式。</p><p></p><p>此外，ACS&nbsp;在业内首创超灵活&nbsp;Pod&nbsp;配置模式，支持 1:1-1:8 资源配比，用户可以按需自由选择；同时，ACS&nbsp;还提供了秒级弹性能力，让企业从容应对流量波动；在使用方式与计费模式上，ACS&nbsp;支持按需弹性、资源预留和节省计划三种方式，提供秒级计费模式，给用户提供更多选择，同时成本也更实惠。ACS&nbsp;让用户专注于&nbsp;Pod，屏蔽了代际和机型差异，并提供通用型、任务型和独享型三类&nbsp;Pod&nbsp;实例，针对多种应用负载和云产品，可以选择最适合的实例类型，自由组合充分适配，预计为企业节省&nbsp;20%&nbsp;成本。</p><p></p><p></p><h2>云原生中间件：全面迎接&nbsp;Serverless&nbsp;</h2><p></p><p></p><p>阿里云消息队列从诞生开始，至今已有十余年。今年，消息队列全系列产品 Serverless 化，面向客户提供极致弹性、更高性价比的云消息队列产品，帮助客户在消息队列使用上进一步降本。同时，面向客户诉求，提供丰富的产品矩阵，覆盖多样化的业务场景需要，为客户上云提供更精准的产品选型。</p><p></p><p>目前，ApsaraMQ 全系列产品发布 Serverless 版，RocketMQ、RabbitMQ、MQTT&nbsp;Serverless 版实例&nbsp;0&nbsp;门槛，按实际使用量进行收费。MQ 提升数秒弹性十万级TPS能力，计算成本降低 50%&nbsp;；基于云存储的存算分离架构，存储成本降低 33%&nbsp;；软硬结合，基于倚天芯片深度优化，延迟降低 30%。RocketMQ&nbsp;Serverless 和 RabbitMQ&nbsp;Serverless 资源包已经全新上线，助力企业降本。</p><p></p><p>除了消息队列以外，微服务也全面迈向&nbsp;Serverless&nbsp;化新阶段。微服务首次提出至今，有无数的企业在尝试用微服务架构去解决企业所遇到的架构问题，这些企业在落地微服务架构的过程中，普遍遇到四大挑战：上手门槛高，稳定保障难，安全防控难，运营成本高。</p><p></p><p>阿里云微服务引擎&nbsp;MSE&nbsp;在业界率先推出了&nbsp;Serverless&nbsp;版，云原生网关和注册配置中心可以根据业务量自动进行扩缩容，免去用户复杂的容量规划工作。通过云服务的自适应弹性，可以保证整个技术架构的稳定性及成本的可控。</p><p></p><p>此外，得益于&nbsp;Serverless&nbsp;开箱即用免运维的特点，大大减轻微服务用户的运维负担。MSE&nbsp;将注册配置中心、云原生网关以及服务治理的关键事件，比如实例变更、节点启停、应用上下线、限流熔断等汇总成统一视图，便于问题的分析和排查。MSE&nbsp;Serverless&nbsp;实例会在用户自定义的运维时间段，执行前置检查和自动升级，既保障组件处于最新的稳定版本，又能解除用户对于兼容性或者业务流量影响的担忧。另外很多用户缺乏配置告警规则的意识或经验，MSE&nbsp;Serverless&nbsp;实例也支持默认告警配置，当一些严重事件发生的时候，尽早通知到用户，及时介入。</p><p></p><p>最重要的是，MSE&nbsp;Serverless&nbsp;的计费方式跟业务量关联起来，门槛更低。普通实例按照固定规格收费，对于创业初期的小规模业务，或者业务低峰时段，实际会有资源的浪费。MSE&nbsp;注册配置中心&nbsp;Serverless&nbsp;按照客户端连接数计费，云原生网关&nbsp;Serverless&nbsp;按请求量计费，对于测试环境、潮汐式业务、中小规模业务，都会节省大量成本。</p><p></p><p></p><h2>Serverless&nbsp;再升级，引领流程式开发</h2><p></p><p></p><p>为了让企业和开发者更快速、便捷地进行云上开发，阿里云重磅发布云工作流（CloudFlow），它是一款强大的面向开发者的流程编排开发工具，全托管、高并发、高可用，帮助用户简化和自动化复杂的云上业务流程和工作流程，更便捷地在云上构建应用。随着工作流的发布，阿里云推出流程式开发的理念，打造了以函数计算FC、事件总线EventBridge、云工作流&nbsp;CloudFlow&nbsp;为核心的开发新范式。今年函数计算3.0迎来全新升级。在技术上，业内首发神龙&nbsp;Serverless&nbsp;GPU&nbsp;架构，冷启动大幅优化，全链路调度延时降低&nbsp;80%，函数执行性能波动率降低&nbsp;70%；作为事件驱动的全托管计算服务，足够轻量灵活，让用户以更少的代码，更好、更快地实现业务创新。为了让更多企业和开发者实惠用云，函数计算通过大规模的资源池化和调度策略优化实现降本，最高降价幅度可达&nbsp;93%。</p><p></p><p>此外，Serverless&nbsp;应用引擎&nbsp;SAE2.0&nbsp;也迎来重磅升级。SAE&nbsp;是一款零代码改造、极简易用、自适应弹性的应用全托管平台，免运维&nbsp;IaaS&nbsp;和&nbsp;K8s，秒级完成从源代码/代码包/&nbsp;Docker&nbsp;镜像部署任何语言的在线应用（如&nbsp;Web&nbsp;/微服务/&nbsp;Job任务）到&nbsp;SAE，并自动伸缩实例，按使用量计费，开箱即用日志、监控、负载均衡等配套能力。&nbsp;此次&nbsp;SAE&nbsp;2.0&nbsp;全新升级，弹性效率优化到百毫秒级，支持缩容到 0。并提供闲置计费能力，无请求时 CPU 不计费，弹后更省。新增支持Web应用类型，从实例托管到流量托管。</p><p></p><p></p><h2>端到端可观测，更高效、更具性价比</h2><p></p><p></p><p>企业要端到端落地可观测，还存在着诸多技术挑战。首先，浏览器、移动端、应用、服务、容器、物理机、网络设备、网络流量等不同层级，每层都有各自采集工具，导致可观测工具分散且数据对象多。其次，Trace、Metric、Log、Profile、Event、Exception、Metadata&nbsp;等不同模型数据缺少关联标准和最佳实践，模型不一致导致数据孤岛现象加剧。再次，生产关系的不断演进催生出多环境可观测、压测&nbsp;&amp;&nbsp;演练&nbsp;&amp;&nbsp;发布场景视图、计量计费、权限划分、超大热点等企业级落地场景。</p><p></p><p>阿里云作为国内可观测领域的引领者，除了提供自研产品应用实时监控服务&nbsp;ARMS&nbsp;外，也在积极拥抱开源生态，提供可观测监控&nbsp;Prometheus&nbsp;版、可观测可视化&nbsp;Grafana&nbsp;版、可观测链路&nbsp;Opentelemetry&nbsp;版等诸多可观测产品，全面兼容主流可观测开源项目，使用标准化技术向下连接存量、碎片化可观测数据，向上帮助客户形成自己独有、无厂商锁定的可观测解决方案，实现真正的客户成功。</p><p></p><p>阿里云云原生可观测凭借其完备产品能力与良好的生态集成能力以及出色的成本优势，收获了国内外行业机构的高度认可。在万物皆云的时代，可观测性让云计算更易用高效，也将可观测数据的业务价值最大程度释放。而阿里云将不断推动可观测技术演进与落地实践，帮助企业实现高质量创新。</p><p></p><p>2023云原生产业大会-阿里云技术专场正在直播，欢迎收看。专场链接：https://developer.aliyun.com/live/253481</p>",
    "publish_time": "2023-12-01 11:52:27",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]