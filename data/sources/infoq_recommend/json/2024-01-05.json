[
  {
    "title": "JEP423：G1引入区域固定机制，降低GC延迟",
    "url": "https://www.infoq.cn/article/zqBCAomCykqjGONLASep",
    "summary": "<p>在评审结束后，JEP 423（<a href=\"https://openjdk.org/jeps/423?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQxNzI5MzIsImZpbGVHVUlEIjoiTkprYm5lYlc1NUNyN0VrUiIsImlhdCI6MTcwNDE3MjYzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.d9jrujWHBR0TfcexDFsAnL5No9yFJHeJTW8k530DFSM\">Region Pinning for G1</a>\"）已经被集成到 JDK 22 中。这个JEP旨在通过为<a href=\"https://docs.oracle.com/en/java/javase/17/gctuning/garbage-first-g1-garbage-collector1.html#GUID-ED3AB6D3-FD9B-4447-9EDF-983ED2F7A573?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQxNzI5MzIsImZpbGVHVUlEIjoiTkprYm5lYlc1NUNyN0VrUiIsImlhdCI6MTcwNDE3MjYzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.d9jrujWHBR0TfcexDFsAnL5No9yFJHeJTW8k530DFSM\">G1垃圾回收器</a>\"实现区域固定来降低GC延迟。这使得在Major GC和Minor GC期间可以固定任意区域，并且可以避免在实现JNI关键区域时禁用垃圾回收。</p><p></p><p>JEP 423 解决了Java与C和C++等非托管语言之间的互操作性问题。<a href=\"https://docs.oracle.com/en/java/javase/21/docs/specs/jni/index.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQxNzI5MzIsImZpbGVHVUlEIjoiTkprYm5lYlc1NUNyN0VrUiIsImlhdCI6MTcwNDE3MjYzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.d9jrujWHBR0TfcexDFsAnL5No9yFJHeJTW8k530DFSM\">JNI</a>\"，作为互操作性的关键组件，允许Java应用程序调用其他语言编写的原生应用程序和库，或反过来。它提供了<a href=\"https://docs.oracle.com/en/java/javase/21/docs/specs/jni/functions.html#getprimitivearraycritical-releaseprimitivearraycritical?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQxNzI5MzIsImZpbGVHVUlEIjoiTkprYm5lYlc1NUNyN0VrUiIsImlhdCI6MTcwNDE3MjYzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.d9jrujWHBR0TfcexDFsAnL5No9yFJHeJTW8k530DFSM\">获取和释放Java对象指针的函数</a>\"，这些函数必须成对使用。在获取和释放指针之间执行的代码被视为关键区域，在此期间，JVM必须确保GC不移动关联的Java对象。默认的GC，即G1，在这些关键区域中会<a href=\"https://tschatzl.github.io/2021/06/28/evacuation-failure.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQxNzI5MzIsImZpbGVHVUlEIjoiTkprYm5lYlc1NUNyN0VrUiIsImlhdCI6MTcwNDE3MjYzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.d9jrujWHBR0TfcexDFsAnL5No9yFJHeJTW8k530DFSM\">完全禁用垃圾回收</a>\"，导致严重的延迟。这种方法通常会导致线程停滞、不必要的内存耗尽，甚至在极端情况下会导致VM过早关闭。</p><p></p><p>G1引入区域固定从根本上改变了这种方式。JEP 423允许G1在GC期间固定包含关键对象的特定内存区域，而不是<a href=\"https://tschatzl.github.io/2021/06/28/evacuation-failure.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQxNzI5MzIsImZpbGVHVUlEIjoiTkprYm5lYlc1NUNyN0VrUiIsImlhdCI6MTcwNDE3MjYzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.d9jrujWHBR0TfcexDFsAnL5No9yFJHeJTW8k530DFSM\">禁用GC</a>\"。这是通过在每个区域中维护关键对象的计数来实现的，在获取关键对象时增加计数，在释放时减少。当计数非零时，该区域被视为被固定，不会在GC期间被清理。这确保了关键对象不会被移动，避免了禁用GC，并显著降低了延迟。</p><p></p><p>这个新特性是Java垃圾回收机制的一项重大进步。它旨在解决延迟问题，并在没有活动的JNI关键区域存在时保证GC停顿时间不出现回归。即使存在这样的区域，回归也是最小的。在Major GC和Minor GC期间实现区域固定证明了这种解决方案的健壮性。</p><p></p><p>不过，JEP 423也存在潜在的风险和假设。一个重大风险是，如果应用程序同时固定多个区域，可能会导致堆内存耗尽。虽然目前没有直接解决方案，但从已经实现了类似机制的<a href=\"https://wiki.openjdk.org/display/shenandoah/Main?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDQxNzI5MzIsImZpbGVHVUlEIjoiTkprYm5lYlc1NUNyN0VrUiIsImlhdCI6MTcwNDE3MjYzMiwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.d9jrujWHBR0TfcexDFsAnL5No9yFJHeJTW8k530DFSM\">Shenandoah</a>\" GC来看，这种风险是可控的。</p><p></p><p>总的来说，JEP 423为OpenJDK的G1垃圾回收器引入了重大的技术增强。区域固定特性解决了与Java本地接口（JNI）关键区域相关的延迟问题，改进了JVM在与非托管语言发生互操作时的垃圾回收处理。这表明了OpenJDK在努力完善和优化Java性能和互操作性能力方面所做的持续不断的努力。</p><p></p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/12/region-pinning-to-g1-gc/\">https://www.infoq.com/news/2023/12/region-pinning-to-g1-gc/</a>\"</p>",
    "publish_time": "2024-01-05 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "发布Vue3让尤雨溪吃尽苦头：犯了3个错，每一个都需开发者警惕",
    "url": "https://www.infoq.cn/article/GWJYTKfF6iubD9hrTOKH",
    "summary": "<p></p><p></p><blockquote>Vue 3 的发布让其创始人尤雨溪吃了不少苦头，这样也让他知道，未来再处理框架升级时需要在策略上做出重大改变。</blockquote><p></p><p>&nbsp;</p><p>在2023年 VueConf 多伦多大会上，<a href=\"https://github.com/vuejs\">Vue.js</a>\" 的创始人<a href=\"https://github.com/yyx990803\">尤雨溪</a>\"向与会者透露，在 Vue（一款用于构建用户界面的渐进式 JavaScript 框架） 从版本 2 升级到版本 3 的过程中，他吸取了一些教训。</p><p></p><p></p><h2>错误一：一次发布太多微小但破坏性的变更</h2><p></p><p>&nbsp;</p><p>尤雨溪在 <a href=\"https://www.youtube.com/watch?v=Hz_zCR28oKE\">11 月发布的一段视频</a>\"中说道：“我们犯的第一个错误，是一次发布太多微小但破坏性的变更。问题的关键在于，单独的每个小变更都很容易处理，但是当这些变更合在一起时，所带来的复杂性会呈指数级增长。”</p><p>&nbsp;</p><p>通过这个教训，他意识到在进行变更时，优先保持原有功能的可用性是明智之举。他进一步补充到，这一做法也将给框架维护者的工作流程带来变革，未来他们将采用逐步弃用的周期性原则进行框架升级。</p><p>&nbsp;</p><p>“对于我们想要变更、破坏或移除的每一项内容，都应该始终首先保持其一切运行正常，然后再考虑弃用，同时应该引入一个新特性的可选阶段，此阶段在不破坏任何现有功能的前提下，允许用户自主选择是否采用新特性。最终，在未来版本中将那些需要废弃的特性移除。”</p><p>&nbsp;</p><p>他解释说，Vue 的维护者将会在不同版本之间采取分阶段的变更策略，以避免再次出现“一大堆破坏性的变更同时发布”的情况。他将这个计划与 Angular 和 Ember 的升级方法进行了比较，这两个框架在主要版本之间都分散了小的破坏性变更，并且时间跨度相对较长。</p><p>&nbsp;</p><p>“Vue 已经发展到了一个阶段，我相信长远发展所需的良好升级策略将变得至关重要。我们可以保证，在短期内，绝对不会考虑进行任何破坏性变更。对于长期来说，我希望 Vue 3 能成为稳定的基础版本，并且未来我们将会非常认真地对待这种变更。”</p><p>&nbsp;</p><p></p><p></p><h2>错误二：低估了升级对生态库的影响</h2><p></p><p>&nbsp;</p><p>尤雨溪说道，他学到的第二个教训是，在进行变更时要及时与生态库的作者联系，以确保在发布到注册中心之前解决与生态库适配的问题。</p><p>&nbsp;</p><p>“导致第二个错误的原因，是我低估了升级对生态库的影响。我忽略了生态库的作者适配 Vue 3 所需要花费的工作量。”</p><p>&nbsp;</p><p>由于他们对许多内部 API 和行为做了变更，对于依赖这些内部行为的大型库而言，升级到 Vue 3 变得“非常困难”。这导致了诸如Nuxt、Beautify等主要生态库的升级拖延时间很长。</p><p>&nbsp;</p><p>“事实上，这些也是有互相依赖关系的应用因为升级难度而停滞在旧版本的首要原因之一。所以这里学到的教训是，生态系统依赖的重要性不容忽视。”</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/9a/9a63109d6214dff0c41c16979f69d7f2.png\" /></p><p></p><p>&nbsp;</p><p>为了应对这种情况，Vue 采用了一个对生态系统进行<a href=\"https://thenewstack.io/poorly-configured-ci-cd-systems-can-be-a-backdoor-into-your-infrastructure/\">自动化持续集成的系统</a>\"，该系统可以自动测试 Vue 的所有核心变更与其上下游所依赖库的兼容情况。</p><p>&nbsp;</p><p>“目前我们已经成功集成了超过 15 个项目到系统中，而且未来还将继续增加。在发布之前，可以针对每个提交运行所有这些下游库，这样就可以在发布之前检测出潜在问题。通过这个系统，我们还能够与这些生态库的作者密切合作，共同解决可能出现的问题，以确保在发布时一切都能够顺利进行。”</p><p>&nbsp;</p><p>“Vue 不鼓励，甚至禁止生态库的作者们使用其内部 API，因为这是导致这类库升级困难的主要因素之一。”</p><p>&nbsp;</p><p>“由于大多数项目都支持 <a href=\"https://thenewstack.io/how-to-get-advantages-of-typescript-in-javascript/\">TypeScript</a>\"，现在我们可以在类型级别和运行时级别强制执行这一点。虽然我们仍需要向外部公开一些内部 API，以供官方工具或库使用。但对于无法直接控制的生态库，我们将从类型定义中移除这些私有 API，以防止这些库使用它们。”</p><p></p><p>&nbsp;</p><p></p><h2>错误三：分多个阶段发布</h2><p></p><p>&nbsp;</p><p>将发布分阶段是一个错误。<a href=\"https://github.com/vuejs/core\">Vue 3 的核心模块</a>\"是在2020年9月发布的，然而，当时许多生态系统相关的部分仍在开发中。在发布 Vue 核心模块的稳定版时，官网文档的一个主要问题是，没有将组合 API 作为最高优先概念进行宣传。此外，在官方库、迁移指南、开发工具支持等方面也都存在一些遗漏。</p><p>&nbsp;</p><p>“当时我们这样做的原因是，我们觉得应该先发布一些关键的东西，这样生态系统就有动力去尝试。但结果是，发布一个没有完整生态系统的版本会给早期的使用者带来了困惑。”</p><p>&nbsp;</p><p>尤雨溪承认，在大版本发布中，最重要的应该是优先确保一切准备就绪，而不是匆忙发布。</p><p>&nbsp;</p><p>“更重要的是，在大版本发布之前，应该先找到收集反馈的方法，并与库的维护者合作推进升级工作。这是与利益相关者和生态系统合作更主动积极地行为，这也是未来进行重大变更时要去改进的地方。”</p><p>&nbsp;</p><p></p><p></p><h2>Vue 3 做对了什么？</h2><p></p><p>&nbsp;</p><p>Vue 在这个版本中也做对了一些事情，首当其冲的就是采用了 TypeScript。</p><p>&nbsp;</p><p>“现在，对于前端解决方案来说类型检查是基本要求。任何一个主要的TypeScript 或前端领域的解决方案，你只要观察一下就会发现 ，现在人们第一关注的就是其对 TypeScript 集成和支持情况。”</p><p>&nbsp;</p><p>TypeScript 已经被证明在长期项目和大团队环境中极大增强了代码的可维护性。将代码库迁移到 TypeScript 也显著提高了 Vue 本身的可维护性，为未来的迭代奠定了坚实的基础。</p><p>&nbsp;</p><p>另一个 Vue 做对的事情是采用了组合式 API。虽然一开始人们对改特性产生疑问，但对 Vue 来说效果很好。</p><p>&nbsp;</p><p>“我们还记得早期引入<a href=\"https://vuejs.org/guide/extras/composition-api-faq.html\">组合式 API</a>\" 的时候。尽管它是受到了 <a href=\"https://thenewstack.io/the-pros-and-cons-of-using-react-today/\">React hooks</a>\" 的启发，但它深深植于 Vue 自己的响应系统。虽然，在初期阶段引起不少争议。人们并不真正理解我们为什么要这样做。”</p><p>&nbsp;</p><p>事实上，仍然有人更偏爱 Options API，但相对于组合式 API，它存在一些限制。这部分是因为 Vue 的用户群发生了变化。在早期，大多数用户关注的是小到中型的场景，主要解决的问题是如何与现有后端系统轻松集成。但随着时间的推移，Vue 的维护者们看到用户构建了更复杂且要求更高的场景，包括更大规模的单页面应用程序。</p><p>&nbsp;</p><p>“首先，为了适应不断变化的用户群体，其次也为了满足行业不断变化的需求，我必须提供一些解决方案，来解决由这些新需求带来的问题，这就是可扩展性。因此，组合式 API 的创造就是试图在尽可能多地保留 Vue 原始的用户友好性的前提下，提供一种支持这种可扩展性的方法。”</p><p>&nbsp;</p><p>那些采用组合式 API 的人会发现其真正的好处所在，他补充说。</p><p>&nbsp;</p><p>”这样使社区的价值更大化，比如<a href=\"https://vueuse.org/\">VueUse</a>\"，它为我们提供了一系列非常有用的实用工具，那些不适合在 Vue 核心模块中解决的问题，被社区很好地解决。事实上，我认为 VueUse 可能也是直接因组合式 API 最大受益者之一。”</p><p>&nbsp;</p><p>Vue 还在投资开发者体验方面做出了正确的选择。实际上这也是当下流行的 Web 构建工具 Vite 诞生的原因，它起源于一个仅服务于 Vue 的开发服原型。现在，许多框架都在使用 Vite，包括 Nuxt。</p><p>&nbsp;</p><p>通过对 IDE 的投资，Vue 见证了整个生态系统的受益，造福了 Web 开发者。这项投资孕育出了 Volar，这是一个包含 Vue 语言服务和 Vue TSC 的子项目的总项目，而Vue TSC 是一个命令行界面，它封装了 TypeScript 并为 Vue 组件提供了命令行检查。</p><p>&nbsp;</p><p>“和 Vite 类似，这整套工具最初也只服务于 Vue，但随后发展成了一个包括一系列工具的生态系统，旨在帮助框架构建更强大的 IDE 和支持 TypeScript。Volar 现在也正在发展成为一个独立于框架之外的核心模块，将来不仅支持 Vue，还要支持 <a href=\"https://thenewstack.io/how-to-use-astro-with-a-sprinkling-of-react/\">Astro</a>\"、<a href=\"https://mdxjs.com/\">MDX</a>\" 以及其他可能采用它的框架。”</p><p>&nbsp;</p><p>尤雨溪声称这是 Vue 生态系统独有的特性。“我们看到很多好的想法都是先从 Vue 生态系统开始，然后产生了比 Vue 生态系统更大的影响。”</p><p>&nbsp;</p><p>最后，尤雨溪表示，Vue 3 实现了所设定的目标，包括更好的性能、更好的类型支持、更好的可扩展性和更好的开发体验。随着对 Vue 2 的支持在本月结束，Vue 3 的下载量已经接近50%，Vue 3 的采用率在过去一年几乎翻了一番。</p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://thenewstack.io/what-vues-creator-learned-the-hard-way-with-vue-3/\">https://thenewstack.io/what-vues-creator-learned-the-hard-way-with-vue-3/</a>\"</p><p></p><p><a href=\"https://www.youtube.com/watch?v=Hz_zCR28oKE\">https://www.youtube.com/watch?v=Hz_zCR28oKE</a>\"</p><p>&nbsp;</p><p></p><h5>相关阅读：</h5><p></p><p></p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&amp;mid=2247504585&amp;idx=2&amp;sn=23b3382c245b4f3d02bdb000c6cbdf20&amp;chksm=f952678ace25ee9c1ec8fd3e32c9cc0c503efad0fe074fb73630ffa396a113e3ba449531b755&amp;scene=27#wechat_redirect\">Vue.js&nbsp;最佳静态站点生成器对比</a>\"</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MzE4ODY0Mg==&amp;mid=2455993739&amp;idx=1&amp;sn=9326ae8a0b80cae03a5c7c2c10b5c7e5&amp;chksm=888509c6bff280d084803aadeeffbaad1382c7e30a765f94d70f32b30293974274e4d2bd0d2b&amp;scene=27#wechat_redirect\">强烈推荐：一个&nbsp;Vue.js&nbsp;在线挑战平台</a>\"</p><p><a href=\"https://www.infoq.cn/article/2xrYYumuivXCH9fozjju\">Vue.js&nbsp;前后端同构方案之准备篇—代码优化</a>\"</p><p><a href=\"https://www.infoq.cn/article/22jiqjCXXcs0DajEFT0h\">从 React 切换到&nbsp;Vue.js</a>\"</p>",
    "publish_time": "2024-01-05 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "今年向量数据库“杀疯了”，但纯向量数据库“凉”了？| 年度技术盘点与展望",
    "url": "https://www.infoq.cn/article/I1oy5usjmBX6ZZ1SawUO",
    "summary": "<p></p><p><img src=\"https://static001.infoq.cn/resource/image/72/09/7229d3a45a3f78240dac46668af7d809.jpg\" /></p><p></p><p>2023年，大模型爆火，也给数据库领域带来了一些新风向。过去一年，中国数据库行业发展迅速，随着数据量与复杂度的提高，行业对分析和查询特性提出了更高的要求，并行化、实时性、湖仓一体等特性成为主流需求。同时，随着AI应用的普及，数据库需要提高对向量分析和AI应用的支持能力，这一点也成为行业共识，而AI应用也带来了库内分析智能化的新机遇。与此同时，向量数据库（Vector Database）“异军突起”。</p><p></p><p>向量数据库，顾名思义，是一种以向量数据为基础的数据库。在传统的关系型数据库中，数据是以表格的形式存储的，而在向量数据库中，数据则是以向量的形式存储的。这种新型的数据库技术，能够更有效地处理和分析大数据，因此在大数据时代中受到了广泛的关注和应用。</p><p></p><p>在今年数据库领域所有的技术趋势中，向量数据库无疑成为了最受瞩目的一个。</p><p></p><h2>2023年数据库领域大事件回顾</h2><p></p><p></p><p>1月10日，KaiwuDB（原：开务数据库） 发布了KaiwuDB 1.0 时序数据库，其运用到实时就地运算等核心专利技术，专为工业物联网、数字能源、交通车联网、智慧产业等场景设计。</p><p></p><p>3月31日，openGauss 5.0.0 里程碑版本发布。openGauss 5.0.0是openGauss发布的第三个LTS版本，版本生命周期为3年。openGauss 5.0.0版本与之前的版本功能特性保持兼容，在内核能力、工具链、兼容性方面全面增强。</p><p></p><p>4月4日，TiDB 7.0 正式发布。新版本中累计引入新特性 20 余项，优化功能 50 余项。TiDB 7.0 是 TiDB 7 系列首个 DMR 版本，适用于开发、测试和 PoC 等场景。</p><p></p><p>4月21日，荷兰AI原生向量数据库厂商Weaviate获得5000万美元B轮融资。27日，美国明星向量数据库厂商Pinecone宣布筹集了 1 亿美元的 B 轮融资。</p><p></p><p>6月15日，星环科技分布式向量数据库Transwarp Hippo正式发布。</p><p></p><p>6月30日，九章云极 DataCanvas 将DingoDB升级为多模向量数据库，并已于去年开源。</p><p></p><p>7月4日，腾讯云发布AI原生向量数据库。</p><p></p><p>9月19日，Fabarta 正式发布ArcNeural 多模态智能引擎，提供支持图、向量和 AI 推理的一体化融合。</p><p></p><p>10月17日，柏睿数据在北京证监局办理辅导备案登记，拟首次公开发行股票并上市。</p><p></p><p>11月15日，中国信通院联合腾讯云计算（北京）有限责任公司、中移（苏州）软件技术有限公司、北京枫清科技有限公司（Fabarta）等多家企业共同编制的、国内首个向量数据库标准正式发布。</p><p></p><p>11 月 16 日，OceanBase发布一体化数据库的首个长期支持版本 4.2.1 LTS。作为 4.x 的首个 LTS 版本，该版本的定位是支撑客户关键业务稳定长久运行，可在关键业务负载中规模化使用，已在生产环境支撑上百个业务系统稳定运行。</p><p></p><h2>2023年度关键技术趋势</h2><p></p><p></p><h3>向量数据库是当之无愧的“年度之星”</h3><p></p><p></p><p>人工智能是当前最热门的技术之一，它与数据库的融合将成为数据库领域的一个重要趋势。AI可以帮助数据库更好地处理和分析数据，提高数据处理的效率和准确性。同时，AI也可以帮助数据库更好地支持业务决策，提高企业的竞争力。</p><p></p><p>随着大模型的兴起和向量计算的重要性日益突出，向量数据库的发展也受到了广泛的关注。向量数据库专注于存储和处理向量数据，并提供高效的向量搜索和相似性匹配功能。这种数据库的出现是为了满足越来越多应用场景对于高维度数据和向量计算的需求。</p><p></p><p>在近年来，一些数据库厂商已经开始原生支持向量嵌入和向量搜索的功能，并提供了相应的向量索引和查询优化技术。这使得开发人员能够更方便地在数据库中存储和查询向量数据，而无需依赖额外的工具或库。</p><p></p><p>除了大语言模型的推动外，向量数据库在自身技术上也取得了重大突破，特别是在性能优化、数据处理能力和安全性方面。各数据库厂商和研究机构都在致力于改进向量数据库的算法和架构，以提高其处理大规模数据的能力。</p><p></p><p>英伟达CEO为向量数据库“站台”更将向量数据库的关注度推向了最高点。在今年的英伟达GTC大会上，英伟达CEO黄仁勋三次强调AI的“iPhone时刻”已经到来，他也提及了GPU加速的重要性。黄仁勋称，“加速计算并非易事，需要从芯片、系统、网络、加速库到重构应用的全栈发明，每个经过优化的堆栈都会加速对应应用领域。”“加速计算是减少功耗、实现可持续发展和净零排放的最好方式。”</p><p></p><p>而在加速库部分，黄仁勋提到了向量数据库的重要性。“向量数据库的一个新型重要用例是大型语言模型，在文本生成过程中可用于检索领域特定事实或专有事实。英伟达将推出一个新的库，即RAFT，用于加速索引、数据加载和近邻检索。我们正在将RAFT的加速引入到Meta的AI向量相似性搜索FAISS、Milvus开源向量数据库以及Redis。”他如是说。</p><p></p><p>在资本市场，近一年来向量数据库是当之无愧的“资本宠儿”，Qdrant、Chroma、Weaviate先后获得融资，成立短短几年的Pinecone宣布1亿美元B轮融资，估值达到7.5亿美元。</p><p></p><p>东北证券预测，到2030年，全球向量数据库市场规模有望达到500亿美元，国内向量数据库市场规模有望超600亿人民币。</p><p></p><p>无论从技术演进还是资本市场来看，向量数据库都是2023年度最亮眼的“年度之星”。</p><p></p><h3>AI和数据库间的关联比以往任何时候都要紧密</h3><p></p><p></p><p>在大模型兴起之前，传统数据库已经在不断尝试与 AI 结合，主要涉及以下几个方向：AI for DB、DB for AI 和预测估算。随着大模型的兴起，可以看到在这些方向上，数据库与AI间的关联比以往任何时候都要密切。</p><p></p><p>首先是\"AI for DB\"，即将人工智能（AI）应用于数据库。AI 技术可以嵌入到传统数据库中，使其具备更智能的功能。例如，通过 AI 大模型，数据库可以实现更高级的数据分析、智能搜索和推荐等功能。AI 技术的应用使得数据库能够更好地理解和处理数据，提供更精确的查询结果和分析报告。</p><p></p><p>其次是\"DB for AI\"，即数据库为 AI 提供支持和服务。传统数据库可以为 AI 大模型提供结构化数据和非结构化数据高效的存储和查询能力。由于 AI 大模型通常需要处理大规模的数据，传统数据库的可伸缩性和性能变得尤为重要。数据库可以通过融合查询和差异化存储等技术，提供快速的数据访问和处理能力，满足 AI 模型对数据的高效需求。</p><p></p><p>此外，AI 大模型的兴起还为数据库注入了预测估算的能力。AI 模型可以通过学习历史数据和模式，对未来的趋势和结果进行预测和估算。传统数据库可以集成 AI 模型，实现对数据的预测分析。这使得数据库可以不仅提供对历史数据的查询和分析，还能够提供对未来数据的预测和估算结果，帮助用户做出更准确的决策。</p><p></p><p>总的来说，几乎所有类型的数据库都在积极向AI靠拢，比如在数据库中添加向量索引，数据库和AI已经密不可分。</p><p></p><p>此外，AI也迫切地需要从非结构化数据中创造价值。</p><p></p><p>各种调查表明，大多数非结构化数据没有被使用或分析来支持业务决策。企业可能缺乏大规模分析计划的资金，但他们也可能缺乏正确的方法来更好地利用他们存储和收集的所有数据。由于存储和分析 PB 级数据或数百万个文件的成本很高，因此利用AI技术挖掘数据在经济上的价值至关重要。</p><p></p><p>但为了推动使用AI技术从非结构化数据中提取价值，组织内部需要有一个数据管理框架，使AI技术更值得信赖、更易于使用。它需要提供自动化的工作流程，在处理数据时能够自动查找、排序、标记数据以及将数据移入或移出AI系统和其他位置。另一个问题是，如今任何组织内部可能没有能够为AI提供正确的非结构化数据的完整数据清单，这就要求我们要保留所有数据的可搜索索引，并且无论数据采用何种技术，都能够访问该数据，这对大多数组织而言是个不小的考验。</p><p></p><h3>一体化是大势所趋</h3><p></p><p>一体化逐渐成为数据库的主流技术方向。目前，出现了单机分布式一体化、在离线一体化、多模态一体化。一体化技术使得数据库具备更强的适应性，并且能极大地降低用户使用和运维管理的复杂度。此外还能极大降低数据在不同系统之间流转的成本，并提高实时性，使得数据价值展现效率大幅度提升。尤其在多模态技术方向上，通过对非结构数据向量化，也实现了多样性的数据检索管理能力。</p><p></p><p>数据库的一体化更加符合当前国内和国际上“降本增效”的大环境。</p><p></p><p>通过整合不同的数据库技术，实现一体化管理，可以大大提高数据处理效率。在传统的数据库系统中，数据分散在不同的数据库中，需要进行多次的查询和转换，耗费大量时间和资源。而通过数据库技术一体化，可以实现对数据的统一管理和处理，减少冗余操作，提高数据处理效率。此外，在传统的数据库系统中，需要投入大量的人力和物力进行维护和管理，而通过数据库技术一体化，可以实现自动化的数据管理和维护，减少人力和物力的投入，降低成本。</p><p></p><p>从技术角度而言，实现数据库技术一体化需要掌握多种数据库技术的知识和技能，同时还需要解决不同数据库技术之间的兼容性问题。这需要投入大量的人力和物力进行研发和技术攻关。从安全角度而言，组织需要保证数据的安全性和隐私性。这需要对数据进行加密和备份等措施，确保数据的安全性和完整性。</p><p></p><p>此外，在应用层出不穷的当下，数据库只有与应用结合，才能带来业务上的价值。但目前应用的开发与维护却越来越复杂，这主要是因为应用架构的复杂度往往取决于于数据库能提供的能力。应用希望数据库在保证稳定可靠、极高性能、性价比的同时，提供应用所需的所有数据存储和处理需求。这样一方面可以简化应用架构，提升整个业务系统的可靠性和性能，另一方面保持应用的灵活度，以应对业务的快速变化。一体化数据库，就是在帮助应用解决上述挑战：多模能力（包括向量检索）让应用可以把结构化数据和非结构化数据统一处理；HTAP能力让应用可以把交易数据实时用于分析决策；原生多租户解决大量数据库实例管理难题；而单机分布式一体化是其他能力融合一体的架构前提。</p><p></p><p>值得一提的是，目前市场上缺乏具备多种数据库技术知识和技能的复合型人才，需要加强人才培养和引进工作，提高人才素质和能力。</p><p></p><h2>年底最具争议话题：向量数据库是刚需还是风口？</h2><p></p><p></p><h3>传统数据库全部引入向量检索只是时间问题</h3><p></p><p></p><p>正如我们所知，大模型擅长理解和生成类人文本，它们将文本转换为高维向量（也称为嵌入）来捕获文本的语义。这种转换使得对文本执行复杂的操作成为可能，例如查找相似的单词、句子或文档，这些是聊天机器人、推荐引擎等许多应用程序不可或缺的一部分。这些向量表示的性质需要一个有效的存储解决方案来处理索引和查询嵌入。</p><p></p><p>随着大数据和人工智能的快速发展，越来越多的应用和场景需要处理和分析向量数据，向量数据不仅仅要提供向量的检索能力还要提供向量和关系型数据库的混合检索能力。全面提升结构化数据、以及非结构化向量编码后的索引和查询优化，能够提供更高效的数据检索和分析能力，这就是向量数据库的用武之地。</p><p></p><p>向量数据库本质上有三种形态：第一种是纯单机向量数据库，它不是分布式的；第二种是在传统数据库上加上一个具备向量检索能力的插件；第三种是独立的、专业的企业级向量数据库。</p><p></p><p>那么，现阶段我们真正需要的是哪种形态？</p><p></p><p>在采访了业内多位数据库领域专家后InfoQ发现，国内许多在做大模型的企业并没有采用专门的向量数据库，而是在原来传统数据库上增加了一项向量检索能力，也就是上述提到的第二种形态。从表面上看，独立的、专业的向量数据库看起来并不是那么刚需，但事实的确如此吗？</p><p></p><p>这可以从传统数据库和向量数据库的区别来看，两者的主要区别在于它们的数据存储方式、数据规模、查询方式和计算密集型。</p><p></p><p>数据存储方式：传统数据库存储的是结构化数据，而向量数据库存储的是向量数据，即将非结构化数据（如图片、音频、文章等）转换为向量方式来存储。</p><p>数据规模：传统关系型数据库的管理数据规模通常为千万级，而向量数据库的需求数据规模则以达到千亿级。</p><p>查询方式：传统数据库的查询通常是精确查询，即查询结果要么符合条件要么不符合条件。而向量数据库则使用相似性查找，即查找与查询条件最相似的结果，这需要更高的计算能力。</p><p>计算密集型：传统数据库的查询主要是事务处理，而向量数据库的查询则是计算密集型，需要进行大量的向量计算和比较。</p><p></p><p>总而言之，向量数据库的主要特点是能够高效地存储和查询大规模的向量数据。它通常采用基于向量相似度的查询方式，即根据向量之间的相似度来检索数据。这种查询方式可以用于各种应用场景，例如图像搜索、音乐推荐、文本分类等。维度越高、信息量越大，这些特性都是传统数据库很难做到的。</p><p></p><p>这种专门用于存储、索引和查询嵌入向量的数据库系统，可以让大模型更高效率地存储和读取知识库，并且以更低的成本进行 finetune（模型微调），还将进一步在 AI Native 应用的演进中扮演重要作用。</p><p></p><p>AI应用的兴起，无论对于拓宽数据库的使用场景，还是提高数据库本身的使用效率都带来了新的机遇。数据库产品在调整身位，以更好帮助构建AI应用的同时，自身也在变得越来越智能，传统数据库和向量数据库二者之间的边界越来越模糊。</p><p></p><p>在采访中，多位技术专家认为，向量数据库会弱化为数据库索引特性，通过一体化能力与其他数据库系统集成。造成这种现象的原因有以下几点：</p><p></p><p>向量数据库的核心是向量索引，其与传统的数据库索引管理能力是同质的。向量数据库之所以是数据库，其需要解决向量检索需求之外，也需要处理数据安全、权限、数据修改、扩缩容等，这些能力本身就是数据库的特长。从数据自身来说，现实的数据范围往往是要多源的，而数据过于分散地存储于不同的系统，显著地增加了成本、降低了效率。</p><p></p><p>因此，从技术和需求来看，传统数据库会快速具备向量特性，从目前的行业发展上，也印证了这个观点，大部分的数据库均已经或者宣布支持向量检索。</p><p></p><h3>RAG技术能替代向量数据库吗？</h3><p></p><p></p><p>关于向量数据库是否是刚需这个问题，业内不只有正向的声音。在今年首届 OpenAI 开发者大会上，OpenAI就出人意料地给向量数据库泼上了一瓢冷水。</p><p></p><p>OpenAI 表示将提供一款 Retrieval 检索工具，用户已无需创建或搜索向量。OpenAI 这一举动对行业来讲意味着什么？RAG 和业内专用向量数据库有什么区别？应用场景有什么不一样？</p><p></p><p>本质来讲，RAG 和业内专用向量数据库在数据规模和普适性上还是有差别的。Retrieval 提供了完整的端到端的工具，在小规模项目上可以快速应用落地。但对大数据规模场景下的数据管理能力缺失，也缺乏细致的调优手段。并且 Retrieval 会受限于 AI 厂商，而向量数据库类是一个独立的底层产品，不会与某一个 AI 产品所绑定，可以同时适配多种 AI 引擎。</p><p></p><p>与此同时，新技术的出现并不意味着旧技术就会立即被淘汰。向量数据库和 RAG 技术各有其优势和适用场景，时间会证明它们在不同应用场景下的价值和效能。RAG、向量数据库和中间件都可以视为AI 工具箱中的重要工具，各有其适用的范围和应用场景，而非互相替代的关系。一个真正强大的 AI 技术栈应该是多种工具和技术的集成，使得我们能够根据具体需求选择最适配的工具使用。</p><p></p><p>此外，RAG 技术是相对较新的，尽管在理论和实验环境中表现出色，但在实际应用中可能还面临着一些挑战，如数据集的质量、系统的可扩展性和可靠性等。已有一些公司和组织开始探索使用 RAG 技术，特别是在需要结合大量信息和生成响应的场景中，例如知识库、智能对话等场景。</p><p></p><p>综合来讲，RAG 最主要的优势是在生成文本或从大型文本数据库中提取信息时能够提高效率和效果。它集成了信息检索和机器学习生成模型的优势，可以在生成文本的同时考虑其他大量文本信息。这使得 RAG 在前提推理、知识引用、解释生成以及过滤离题信息等方面具有强大的能力。另一个优势是 RAG 更直观、易于使用，对于无需深入理解复杂机器学习算法背后原理的大众用户来说，RAG 是一个理想选择。而向量数据库专注于向量数据的高效存储和检索，适用于大规模向量数据的管理和处理，对于相似性搜索、聚类等任务有着独特优势。RAG 主要应用于自然语言处理领域，若处理其他类型的数据，如图像和音频等，其性能可能会变差。</p><p></p><p>虽然 RAG 已经在很多应用领域表现出色，但它依然需要训练数据，因此，深度和广度的知识获取仍然受限于训练数据。RAG 最能解决的是自然语言处理中的问题，特别是需要理解和生成文本的问题，例如智能聊天机器人、自动问答系统以及文本摘要生成等，但对于音频、视频或其他非文本类数据处理的效果不如专门的向量数据库。</p><p></p><h3>专门去研发一款向量数据库，有必要吗</h3><p></p><p></p><p>最近一年里，向量数据库技术以势不可挡之姿迅猛发展，但想要研发一款向量数据库产品依然面临着诸多挑战。</p><p></p><p>首先要解决的挑战是扩展性。随着 AIGC 等应用的发展，特别是大模型的兴起，对嵌入（embedding）和向量化这些能力的需求急剧增加。大模型的普及也让向量数据的规模不断增大，从百万级别的数据体量已经变为千万级别，甚至更大。这就需要数据库能够有效地支持大规模向量数据的存储和检索，这对硬件资源提出了更高的要求，特别是在云上部署时成本可能成为一个重要问题。</p><p></p><p>第二个挑战是成本问题。在向量搜索中，索引的大小和存储是关键因素，而向量索引的成本通常较高。以前在数据量较小的情况下，可能只需要几台机器就足够了，成本并不是关键问题。但随着数据规模的增大，需要更多的资源来支持，这就涉及到成本的考虑。</p><p></p><p>第三个挑战是易用性问题。与传统的关系型数据库不同，向量搜索涉及到更多维度的考量，包括性能和召回率等。为了平衡性能和召回率，需要调整各种参数，但这可能对用户来说不太友好。因此，简化参数选择，优化用户体验是一个重要的挑战。</p><p></p><p>最后一个挑战是混合搜索中的路径优化问题。与传统的优化器相比，向量搜索的优化器更加复杂，因为它需要考虑多维度的因素。如何设计一个能够描述向量搜索代价的模型，以实现性能和召回率的平衡，是一个需要解决的难题。</p><p></p><p>可见，研发一款向量数据库并不轻松，而对于那些对向量数据库有需求的企业来讲，从外购买一款成熟的向量数据库产品远比自己研发要省时省力。</p><p></p><h2>2024年数据库发展趋势展望</h2><p></p><p></p><h3>向量数据库技术将打磨得更成熟</h3><p></p><p></p><p>对于向量数据库领域，要实现深度学习技术的最优应用，需要具备 AI、数据库和安全等多方面的能力。数据库内通常会储存一些敏感数据，因此如何保证这些数据的安全性将成为一个极其重要的议题。尤其是随着向量数据库等领域逐渐引入深度学习技术，对 AI 能力和数据安全的需求将变得愈发迫切。</p><p></p><p>在大模型企业层出不穷的当下，对于向量数据库的需求成为了倒逼向量数据库技术逐步完善的强烈的驱动力，这种驱动力能够快速淘汰那些不合适的技术，同时也会促使新技术的不断涌现，这是一个逐步筛选的过程。从长远来看，向量数据库将不断成熟，同时也会为不同的应用场景提供更加精准的向量搜索结果。</p><p></p><h3>国内外数据库产品的差距进一步缩小</h3><p></p><p>2023 年，全球主流数据库在产业、软硬件和人才生态方面继续快速增长，但市场竞争也日益激烈。国产数据库在产品和技术上与国外顶尖产品仍存在一定差距，但差距正在迅速缩小。不少国产数据库厂商在海外取得了一定的成果。</p><p></p><p>比如人大金仓近年来积极拓展海外市场，已与多家海外企业合作，实现了在东南亚、欧洲等地区的成功部署和应用。另外，阿里云的分析型数据库AnalyticDB、华为的openGauss数据库、酷克数据的HashData云数仓也在国际市场上取得了一定的进展。</p><p></p><p>这些案例表明，国产数据库产品在技术和市场上已经具备了与国际领先产品相媲美的能力。国产数据库逐渐取代海外老牌数据库不仅仅是国产化诉求，也是自身技术实力使然。</p><p></p><h3>整个数据库市场将正向地“卷”</h3><p></p><p></p><p>无论是传统数据库还是向量数据库，随着全社会数字化转型进入深水区且大模型不断涌现，未来整个数据库市场的持续扩张是不可避免的，这主要是因为技术的迭代速度非常快，同时技术门槛也在逐渐降低。当前两个市场都存在着大量的需求，这将吸引越来越多的数据库厂商加入竞争。然而，从业界角度看，这种市场扩张对于行业发展有积极的一面。它为用户提供了更多的产品选项，也不断促使数据库厂商迭代研发新的技术与产品，从而在竞争中筛选出更优秀的技术和解决方案，以更好地满足用户需求。</p><p></p><p>可以肯定的是，所有数据库采用者都希望这个行业有更多竞争者涌进来，同时也期待看到哪些技术能够经受住应用的考验，证明自己在实践中的可行性，从这个角度来讲，这种市场扩张应当是良性的。随着技术的成熟，贬损竞争对手、抹黑事实、哄抢客户等恶性竞争行为将越来越少，良性竞争越来越多，这样才能推动整个领域的进步。</p><p></p><p>采访嘉宾（按姓名首字母排序）：</p><p></p><p>Fabarta技术团队</p><p>胡宗星，九章云极DataCanvas高级产品总监</p><p>简丽荣，北京酷克数据科技有限公司联合创始人兼CEO</p><p>李洁，北京阿哇科技的创始人</p><p>杨志丰（竹翁），OceanBase 产品总经理&amp;首席架构师</p><p></p><p></p><blockquote>InfoQ 2023 年度技术盘点与展望专题重磅上线！与 50+ 头部专家深度对话，探明 AIGC 创新浪潮下，重点领域技术演进脉络和行业落地思路，点击<a href=\"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MjM5MDE0Mjc4MA==&amp;action=getalbum&amp;album_id=2717978015128879106&amp;scene=173&amp;subscene=227&amp;sessionid=1704178990&amp;enterid=1704178995&amp;from_msgid=2651192070&amp;from_itemidx=2&amp;count=3&amp;nolastread=1#wechat_redirect\">订阅</a>\"/<a href=\"https://www.infoq.cn/theme/229\">收藏</a>\"内容专题，更多精彩文章持续更新 ing~另，InfoQ 年度展望系列直播已于 2024 年 1 月 2 日首场开播，持续输出精彩内容，关注 InfoQ 视频号，与行业技术大牛连麦~</blockquote><p></p>",
    "publish_time": "2024-01-05 09:44:56",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]