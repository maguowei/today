[
  {
    "title": "QCon全球软件开发大会（广州站）即将落地，与你探索数据架构的最佳实践",
    "url": "https://www.infoq.cn/article/mbT9rW1kGydYgSeG3Dap",
    "summary": "<p>如何在物理和虚拟层面整合各个分散的领域和数据“孤岛”；如何使用混合多云平台来管理和处理数据；如何凭借计算和存储可扩展性，应对不断增长的数据量；如何在整个过程中融入安全性、可扩展性和适应能力；以及如何在数据提供者和使用者之间的价值链中实现数据集成、数据工程和数据治理自动化等等，都是数据据架构所关心的问题。</p><p>&nbsp;</p><p>在在 5月26-27日<a href=\"https://qcon.infoq.cn/2023/guangzhou/schedule\"> QCon全球软件开发大会（广州站）</a>\"上，我们策划了【现代数据架构】专题，</p><p>我们很荣幸邀请到了罗庆超，阿里云资深技术专家来担任专题出品人。他是阿里云对象存储负责人，他在企业存储和云存储领域拥有丰富的技术与产品经验，曾就职于世界 500 强以及知名跨国公司的存储团队，并作为海量存储首席架构师负责文件存储、对象存储以及下一代分布式云存储的架构设计和实现；</p><p>&nbsp;</p><p>于此同时，我们也邀请了多位专家来分享他们的技术实践，下面是详细介绍：</p><p>&nbsp;</p><p><a href=\"https://qcon.infoq.cn/2023/guangzhou/presentation/5224\">谢凯</a>\"，字节跳动基础架构研发工程师。他将介绍字节跳动如何通过 Iceberg 数据湖支持 EB 级机器学习样本存储，实现高性能特征读取和高效特征调研、特征工程加速模型迭代。您将了解字节跳动数据湖方向的前沿技术与成果，并了解 EB 级机器学习样本存储的最佳实践；</p><p>&nbsp;</p><p><a href=\"https://qcon.infoq.cn/2023/guangzhou/presentation/5269\">柯维鸿</a>\"，网易游戏资深技术专家。他将分享⽹易互娱大数据平台出海上云架构设计与实践的经验。您将了解网易基于公有云构建 Hadoop 高性能存储层、计算层、数据分层方案设计，并了解整个方案的落地中的难点所在、实施效果和成本优化情况；</p><p>&nbsp;</p><p><a href=\"https://qcon.infoq.cn/2023/guangzhou/presentation/5285\">周皓</a>\"，阿里云高级架构师。他将介绍阿里云数据湖 3.0 架构与实践。您将了解行业最新的数据湖架构与技术，并了解数据湖架构在 AI、游戏等领域的实践应用。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f9/f9c92740ba012906494b90ce8ef44051.png\" /></p><p></p><p>&nbsp;</p><p>更多精彩议题持续上线中...</p><p>&nbsp;</p><p>活动推荐：</p><p>&nbsp;</p><p>在5月26-27日，QCon全球软件开发大会（广州）站即将落地，在此峰会上，共有十二个专题，近五十余场分享。其中包括稳定性即生命线、编程语言实战、DevOps vs 平台工程、AGI 与 AIGC 落地、下一代软件架构、数据驱动业务、出海的思考、云成本优化、现代数据架构、AIGC浪潮下的效能智能化、新型数据库、大前端技术探索。欢迎与你一起交流，更多详细信息可扫描下方海报二维码了解。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/af/afc56e32706b051a6e0cd52cadb31550.jpeg\" /></p><p></p>",
    "publish_time": "2023-05-12 09:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Slack实时消息处理架构，更新、更快、更稳定",
    "url": "https://www.infoq.cn/article/9lp0pYfij3bUxmHDXkxl",
    "summary": "<p>Slack最近公布了它们是如何实现在全球范围内<a href=\"https://slack.engineering/real-time-messaging/\">每天发送数百万条实时消息的</a>\"。该公司提供了对其<a href=\"https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern\">Pub/Sub</a>\"架构的全面讲解，这个架构的设计目标就是管理大规模的实时消息。它强调了在不同时区和地区发送实时消息的独特挑战，以及Slack的工程师如何设计基础设施来处理这些挑战的。</p><p></p><p>Slack的高级软件工程师<a href=\"https://www.linkedin.com/in/sameera-thangudu/\">Sameera Thangudu</a>\"阐述了这种架构的重要性：</p><p></p><blockquote>我们的服务器要为每台主机上的数千万个通道以及数千万个连接的客户端提供服务，我们的系统要在500毫秒内将消息传递到世界各地。凭借当前架构的线性可扩展性，我们可以为更多客户提供服务。</blockquote><p></p><p></p><p>她表示，该公司会加强其架构，以服务更多的客户群。</p><p></p><p>该系统的后端由多个服务组成。通道服务器（Channel Server，CS）是有状态的内存服务器，持有通道的历史。这里会有一个一致性散列机制将每个CS映射到通道的一个子集中。在峰值时期，每个主机大约为1600万个通道提供服务。一致性哈希环管理器（consistent hash ring manager，CHARM）会管理CS的一致性哈希环，确保在20秒内替换掉不健康的CS。Consul会存储一致性哈希值的最新配置。</p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/news/2023/04/real-time-messaging-slack/en/resources/2Slack%20-%20Consul-1681645825634.jpg\" /></p><p></p><p>图片来源：<a href=\"https://slack.engineering/real-time-messaging/\">https://slack.engineering/real-time-messaging/</a>\"</p><p></p><p>网关服务器（Gateway Server，GS），与CS类似，是有状态的内存服务器。它们维护用户信息和WebSocket通道订阅，并作为Slack客户端和CS之间的接口。GS会被部署到多个地理区域，以优化连接速度。管理服务器（Admin Server，AS）是无状态的内存服务器，它们是Webapp后端和CS之间的接口。最后，状态服务器（Presence Server，PS）会跟踪在线用户，支撑Slack客户端的绿色状态点（green presence dot）。</p><p></p><p>每个Slack客户端有一个到Slack服务器的持久性WebSocket连接，以接收实时事件来维护其状态。客户端需要通过几个步骤来搭建WebSocket连接，比如从Webapp后端获取用户令牌和WebSocket连接的设置信息。然后，客户端会初始化一个WebSocket连接到最近的边缘区域，GS获取用户信息并向客户端发送第一条消息。<a href=\"https://www.envoyproxy.io/\">Envoy</a>\"会平衡传入的流量并处理TLS终止。</p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/news/2023/04/real-time-messaging-slack/en/resources/1Slack%20-%20Client%20WebSocket%20Setup-1681645825634.jpg\" /></p><p></p><p>客户端设置完成后，在通道中发送的每条消息都会广播至通道中所有在线的客户端。消息在发送至全球范围的每个订阅的GS之前，要经过Webapp API、AS和CS。每个收到消息的GS都会将消息发送至订阅该通道ID的客户端。</p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/news/2023/04/real-time-messaging-slack/en/resources/1Slack%20-%20Journey%20of%20a%20Message-1681645825634.jpg\" /></p><p></p><p>除了聊天消息，实时改变客户端状态的另一种消息类型是事件。瞬时事件，比如用户在通道中进行输入，会遵循一个略有差异的流程，因为数据库不会持久化保存这些事件。下图说明了这个流程。</p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/news/2023/04/real-time-messaging-slack/en/resources/1Slack%20-%20Transient%20Event%20Flow-1681645825634.jpg\" /></p><p></p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/04/real-time-messaging-slack/\">Real-Time Messaging Architecture at Slack</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/hhh8OGLNbsz121H43Df4\">Slack工程师如何解决最常见的移动开发痛点</a>\"</p><p><a href=\"https://www.infoq.cn/article/Pwkm3Ro1IqSzM3wLXvMS\">Zoom和Slack的第二曲线</a>\"</p>",
    "publish_time": "2023-05-12 10:37:19",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "马斯克宣布将卸任推特CEO：已找到接班人，自己要去当CTO",
    "url": "https://www.infoq.cn/article/quI8GxF7WJOsOSR4FTlm",
    "summary": "<p>当地时间5月11日，马斯克在特推上发文宣布，他将在6个星期后正式卸任推特CEO一职，并且已经找到了一位女性接班人，自己将转到技术岗位。</p><p></p><p>马斯克在推文中写道：“很高兴地宣布，我为推特聘请了一位新的CEO。她将在6个星期后开始工作。”他没有透露新任CEO的名字，也没有提供有关此人工作经历的任何细节。</p><p></p><p>然而，《华尔街日报》援引消息来源报道称，NBC 环球公司的广告主管Linda Yaccarino正在就该职位进行谈判。</p><p><img src=\"https://static001.geekbang.org/infoq/b4/b436376cf1526859f44127f89cd8d7b4.png\" /></p><p>自去年 10 月收购公司以来，作为“推特掌门人”的马斯克一直处于混乱的管理状态，他表示他将成为推特的执行主席兼CTO，负责监督产品、软件和系统运营。</p><p></p><p>去年 12 月，马斯克在该平台上进行了一项<a href=\"https://www.cnn.com/2022/12/20/tech/elon-musk-twitter-ceo/index.html\">民意调查</a>\"，询问用户他是否应该辞去推特首席执行官一职，最终大多数用户投了赞成票。马斯克表示，他会遵守民意调查的结果，但后来又改口说，“一旦我发现有人愚蠢到可以接受这份工作，他就会交出这个角色！”&nbsp;</p><p></p><p>今年2 月，他<a href=\"https://www.cnn.com/2023/02/15/tech/musk-twitter-ceo/index.html\">重申</a>\"他计划在年底前找到替代者。</p><p></p><p>马斯克收购推特后对公司进行了大刀阔斧地改革，不仅“血洗”了管理成，还裁掉了大部分员工，甚至还允许被禁止的用户重新回到该平台上来，许多客户因担心推特的未来会受到影响而纷纷逃离，但马斯克一直在试图说服广告商们重新回到推特平台上来。</p><p></p><p>马斯克经营或参与包括特斯拉在内的许多其他公司——也面临特斯拉股东的批评，原因是股东们担心他被推特分散了注意力。</p><p></p><p>马斯克最近称，此前推特一度面临着破产风险，但逐渐“趋于收支平衡”。现在，公司新的CEO的任务是努力帮助这家陷入困境的公司扭亏为盈，并帮助马斯克收回用于收购该平台的 440 亿美元中的一部分。</p><p></p><p>即使马斯克准备辞去首席执行官一职，他仍可能控制着公司未来的发展方向。在 10 月接管公司后，马斯克辞退了高管团队并解散了董事会，他也就成为了该平台的CEO和唯一董事。</p>",
    "publish_time": "2023-05-12 11:09:49",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "因低薪、高强度工作感到被公司“虐待”，一程序员跳槽前炮制惊天数据窃取案，勒索上千万终获刑",
    "url": "https://www.infoq.cn/article/uvEDqIszV7cWFLuQkGHD",
    "summary": "<p></p><p></p><blockquote>该名工程师试图将这次黑客攻击解释成“未经批准的安全演习”。</blockquote><p></p><p></p><p>日前，一名前Ubiquiti工程师Nickolas Sharp在纽约法院承认自己窃取了数十GB机密数据并要求前雇主支付190万美元（约1320万元人民币）赎金，最终在要求被拒绝后愤然将数据公开。根据案情，院方决定对其判处六年徒刑。</p><p></p><p>Ubiquiti Networks(优比快科技有限公司，是一家于2003年在美国硅谷成立的高科技跨国公司（美国纳斯达克上市股票代码：UBNT）。公司主要为边远地区和新兴地区提供无线通讯产品。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/91/912fa04b3104dd2bc0620cf3f83a0b3c.png\" /></p><p></p><h2>一高级工程师盗窃数据，并向雇主勒索近200万美元</h2><p></p><p></p><p>彭博社报道称，Sharp向美国地方法官Katherine Polk Failla强调，这次网络攻击实际只是“未经批准的安全演习” ，目的是让Ubiquiti成为“对自身和客户而言都安全的地方”。</p><p></p><p>从法庭文件来看，Sharp声称，Ubiquiti公司 CEO Robert Pera不允许他“解决已经非常严重的安全问题”。Sharp告诉法官，他做出这些“愚蠢且过激的举动”完全为了修复这些安全漏洞。</p><p></p><p>但即使Sharp的出发点确实如此，法官Failla仍拒绝将此作为罪行的辩护理由，毕竟被告的电汇欺诈、故意入侵受保护计算机和向FBI说谎等行为很难做出合理的解释。</p><p></p><p>Failla法官认为，“即使在这种情况下，Sharp先生也无权扮演上帝的角色。”</p><p></p><p>美国纽约南区检察官Damian Williams也宣称，Sharp并非“网络安全义警”，而是“顽固的说谎者和数据大盗”，他“故意向法院说谎，坚称整个罪行只是一次出了偏差的安全演习。”</p><p></p><p>Williams坚持认为，Sharp做出了“几十个、甚至上百个犯罪决定”，还牵连无辜同事帮助自己“洗脱嫌疑”。Sharp在宣判前也已承认，这次网络攻击就是出于“经济利益”而策划。</p><p></p><p>因此在Williams看来，Sharp的行为似乎&nbsp;“单纯出于贪婪”和自负，理由是高强度工作和有限的薪酬让Sharp“感到自己被公司虐待”。</p><p></p><p>法庭文件显示，Ubiquiti公司投入了“远超150万美元的资金和数百小时的员工/咨询工时”，为的就是对Williams口中的“惊天”数据劫案施以补救。</p><p></p><p>但为了掩盖自己的罪行，Sharp通过一系列手段放大了公司损失——包括冒充举报人、编造虚假媒体报道，甚至联系美国和国外监管机构调查Ubiquiti是否存在故意淡化数据泄露的行为。法庭文件显示，在Sharp编造虚假报告的一天之内，Ubiquiti公司股价暴跌，市值损失一度超过40亿美元。</p><p></p><p>Ubiquiti公司和Sharp的辩护律师Matthew Myers均未就此事回应置评请求。</p><p></p><p>Williams曾向院方要求判处8至10年有期徒刑，理由是任何再短的刑期都会被公众理解为“轻判”。但从最终结果看，Sharp只需要入狱6年，并没有达到检方的最初目标。但在新闻稿中，Williams还是强调这一判决是对Sharp“无情罪行”的“严厉惩罚”。</p><p></p><p>Williams在量刑备忘录中写道，“他对雇主抱有不满，打算离开公司，意图在离开前勒索数百万美元并造成巨额损失。”</p><p></p><h2>因互联网短暂中断而被捕</h2><p></p><p></p><p>在量刑备忘录中，Williams提到Sharp坚持将此次网络攻击解释成安全演习，但这种说法与他2021年12月被捕时的情况有所冲突。</p><p></p><p>从当时的时间线来看，Sharp似乎在刻意隐瞒自己盗窃数据、向Ubiquiti勒索近200万美元的邪恶计划。</p><p></p><p>Sharp从2018年起担任Ubiquiti公司高级软件工程师兼云负责人，年薪25万美元，工作内容包括软件开发和云基础设施安全。</p><p></p><p>在工作约两年之后，Sharp于2020年7月购买了Surfshark的VPN服务，之后似乎开始考虑跳槽。2020年12月9日，他已经拿到新offer，次日开始用自己的Ubiquiti安全凭证尝试复制公司的数据仓库，同时配合Surfshark掩盖自己的真实IP地址。</p><p></p><p>不到两周后，Sharp的计划基本完成，只是期间发生了一点预料之外的“失误”。在复制了约155个数据仓库之后，偶发的互联网中断导致他的VPN暂时失效。</p><p></p><p>在互联网服务恢复之后，Ubiquiti在Sharp毫不知情的情况下记录了未及时得到VPN保护的家庭IP地址。</p><p></p><p>两天之后，Sharp大胆向一位高级网络安全员工咨询，称如果他向公司的HackerOne漏洞奖励计划提交漏洞，能不能同样拿到报酬。法庭文件认为此举非常可疑。</p><p></p><p>而且直到2020年12月26日，Sharp仍未意识到自己行动中的“瑕疵”，继续用Surfshark访问公司数据，在一天之内就删除了自己的活动证据，并修改记录使得他在攻击期间用到的凭证似乎是由其他同事所使用。</p><p></p><p>2020年12月28日，直到其他员工发现了攻击证据，Sharp才最终停止访问数据。Sharp似乎对自己的计划信心满满，甚至在2021年1月7日发出勒索邮件前加入了公司的攻击调查团队。</p><p></p><p>Ubiquiti决定不支付赎金，而是让FBI介入调查。不久之后，Sharp的失误被发现，FBI根据家庭IP盯上了他。期间，Sharp坚称攻击者登录他的家庭IP是想栽赃，并告诉同事“如果我在请求、下载和上传数据时还能留下自己的IP，那我也太废物了”，堪称“有史以来最差劲的掩饰行为”。 </p><p></p><p>在FBI分析Sharp的工作设备时，此人擦除并重置了自己在攻击中使用的笔记本电脑，但却偷偷把机器带回了家中。2021年3月，FBI在搜查中没收了作案设备。</p><p></p><p>在FBI开展搜查之后，Sharp开始冒充举报人，联系记者和监管机构谎称Ubiquiti的公开披露和对网络攻击的反应都不够充分。他说该公司存在客户欺骗，还故意淡化了违规事件的严重性，实际上此事已经引发“灾难性”后果。Williams在量型备忘录中认为，自始至终，Sharp都很清楚这次攻击是利用他自己的员工凭证完成的。</p><p></p><p>在Williams看来，“这绝不是针对开放漏洞的黑客攻击。Sharp是在利用公司合法委托给他的凭证来窃取数据，并尝试掩盖自己的行踪。”</p><p></p><p>“Sharp始终坚信自己的老练和狡猾能帮助他骗过他人、掩盖罪行。”</p><p></p><p>Sharp“提出的陈述”称他所犯下的罪行只是一次偏离轨道的安全演习，检方“严重怀疑”Sharp是否“真的在为自己的罪行承担责任”。</p><p></p><p>Williams在新闻稿中做出总结，“Nickolas Sharp每年领取近25万美元的报酬，负责帮助雇主保持安全。然而，他勒索雇主、妨碍执法、散布虚假新闻、伤害公司自身和投资方的利益。 Sharp如今因其无情罪行而面临着严厉惩罚。”</p><p></p><p>原文链接：</p><p></p><p><a href=\"https://arstechnica.com/tech-policy/2023/05/ex-ubiquiti-engineer-behind-breathtaking-data-theft-gets-6-year-prison-term/\">https://arstechnica.com/tech-policy/2023/05/ex-ubiquiti-engineer-behind-breathtaking-data-theft-gets-6-year-prison-term/</a>\"</p>",
    "publish_time": "2023-05-12 11:56:19",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "震惊！OPPO放弃芯片业务，传2000多名员工就地解散 | InfoQ 快讯",
    "url": "https://www.infoq.cn/article/6Q8UGcoPNC7mXczXm9xd",
    "summary": "<p>5月12日，据多家媒体报道，OPPO将终止旗下主打芯片设计能力ZEKU（哲库）的业务。</p><p>&nbsp;</p><p>来自职场平台脉脉的爆料显示，OPPO裁撤ZEKU整个芯片团队，2000多员工就地离职。有知情人士称，母公司因为战略决策，放弃芯片业务。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/55/55b65b4a0cb7c90c63b452215dd87def.jpeg\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6b/6bddbb4a74d18097d1fca2d7ea869485.jpeg\" /></p><p>针对此传闻，OPPO回应21世纪经济报道称：面对全球经济、手机市场的不确定性，经过慎重考虑，公司决定终止ZEKU业务。“这是一个艰难的决定，我们会妥善处理相关事宜，并将一如既往做好产品，持续创造价值。谢谢各位朋友的关心与支持。”</p><p>&nbsp;</p><p>资料显示，哲库科技（上海）有限公司成立于2019年8月，哲库科技（北京）有限公司成立于2019年11月，哲库科技（广东）有限公司成立于2020年8月，法定代表人均为OPPO公司CTO刘君。</p><p>&nbsp;</p><p>据悉，ZEKU的产品线包括核心应用处理器、短距通信、5G Modem、射频、ISP和电源管理芯片等。</p><p>&nbsp;</p><p>对于这一消息，小米公关部总经理王化在微博发表评论称，“确实不容易！尤其是在最近这几年，我们总能见证历史。”</p><p></p><p>了解更多：</p><p></p><p><a href=\"https://www.infoq.cn/article/kBGBvfwe4l0Dcyi85YB3\">OPPO发布首颗自研NPU芯片：历时3年研发，算力比肩苹果</a>\"</p><p></p><p><a href=\"https://infoqadmin.geekbang.org/#/deplodManage\">OPPO 造芯计划加速，到处“挖人” </a>\"</p><p></p>",
    "publish_time": "2023-05-12 13:14:36",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "“TypeScript不值得！”前端框架Svelte作者宣布重构代码，反向迁移到JavaScript引争议",
    "url": "https://www.infoq.cn/article/dDXbcLHT7teNYSPL3sm7",
    "summary": "<p></p><blockquote>前端框架 Svelte 作者 Rich Harris：“我太老了，不能再胡闹了”。</blockquote><p></p><p>&nbsp;</p><p>作为 JavaScript 的超集，<a href=\"https://www.infoq.cn/article/wyGETHGV7BlRRkhIzcIF\">TypeScript</a>\" 自发布以来深受开发者喜爱，从 JavaScript 迁移到 TypeScript 也一度成为一种趋势。</p><p>&nbsp;</p><p>前段时间，State of JavaScript 对近 40000 名 Web 开发人员进行调查，在回答有关 JavaScript 编程风格问题的人中，TypeScript 的使用率高达 98.9%。其中，20.7% 的受访者仅使用 TypeScript 编写代码，而仅使用 JavaScript 的受访者比例为 8.2%。尽管 TypeScript 可以编译成 JavaScript，但对于许多开发人员来说，TypeScript 仍是优先选项。有声音甚至认为，“TypeScript 正在慢慢吞噬前端开发人员的世界”。</p><p>&nbsp;</p><p>但另一个有趣的趋势是，一些开发者正在“反向操作”——从 TypeScript 迁移到 JavaScript。</p><p></p><h2>Svelte计划重构代码：从TypeScript切换到JavaScript</h2><p></p><p>&nbsp;</p><p>今年 3 月，<a href=\"https://www.infoq.cn/article/F1F3Q7Ptb1jM2ptmGbOG\">前端框架 Svelte</a>\" 作者 Rich Harris 在接受 The New Stack 采访时表示，Svelte 的第一个主要修订工作正在进行中，目前，团队正在将底层代码从 TypeScript 切换到 JavaScript。Rich Harris 认为，这一更新将使团队能够在今年晚些时候为 Svelte 5 融入“伟大的想法”。</p><p>&nbsp;</p><p>作为一个在 2019 年才诞生的新兴框架，Svelte 发布之初的一大痛点就是不支持 TypeScript。2020 年 7 月，Svelte 终于加入了 TypeScript 支持。如今 3 年不到，就要从 TypeScript 切换到 JavaScript？</p><p>&nbsp;</p><p>消息一出，不少网友跑去 Twitter 求证，Rich Harris 当即给出了肯定的回复，并表示“原生支持 TypeScript 是很棒的选择，直到你有了 TypeScript 的依赖分布，那时它就变成了一个加载的 footgun。我们欢迎其他人去胡闹，但我太老了，不能再胡闹了”。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0d/0dbf16cb422f96ec552b533425dcf6e2.png\" /></p><p></p><p>5 月 9 日，Svelte 团队发布了一个名为 TS to JSDoc Conversion 的 PR，根据描述，Svelte 团队将会从 TypeScript 迁移到 JSDoc。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ce/ce83f919c40ea416bc7d0e61b5348a41.png\" /></p><p></p><p>该举动迅速引发网友激烈讨论。有用户提问“为什么要这么变？我一直在到处搜相关的问题和讨论，但找不到答案。”</p><p>&nbsp;</p><p>至于背后的原因，其实 Rich Harris 在上个月接受采访时就已作出回答。Rich Harris 认为 TypeScript 对开发库来说“不值得”，团队正转向 JavaScript 和 JSDoc。Rich Harris 在采访中提到：“我们已经决定，在 Svelte 核心代码库中完成从 TypeScript 到 JavaScript 的迁移。原因比较复杂，所以我一直没能做充分解释。”</p><p>&nbsp;</p><p>Rich Harris 表示：“我的观点是，类型确实很棒，但 TypeScript 有点麻烦……一旦用上了.ts文件，就必须同时使用支持它的工具……所以我逐渐觉得，使用 TypeScript 这样的非标语言并不值得。于是，我们开始将所有类型都放入 JSDoc 注释，这样既保证了类型安全，又回避了缺点。毕竟这只是 JavaScript，所有内容都在注释当中，只要运行代码就行。我们在 Sveltekit 代码中就是这么做的，效果非常好。所以对于 Svelte 4.0，我们也将采取同样的思路、借此加快开发速度。”</p><p>&nbsp;</p><p>Svelte 并不是第一个放弃 TypeScript 的社区。2020 年，<a href=\"https://www.infoq.cn/article/juXB8EaoJrlLx4vB7ttD\">Deno </a>\"完成了内部代码从 TypeScript 到 JavaScript 的迁移，以减少构建时间，生成高性能代码。最近，有消息称 Deno 也在考虑在内部切换到 vanilla JS。</p><p>&nbsp;</p><p>在相关设计文档中，“问题”部分展示了 Deno 迁移的原因：</p><p>&nbsp;</p><p></p><blockquote>在 cli/js 中更改文件时的增量编译时间需要几分钟，修改起来非常缓慢且痛苦。我们在 cli/js 中使用的打字稿组织/结构正在产生运行时性能问题。例如，我们最近意识到我们无法让 TS 生成一个名为“Header”的类，因为它隐藏了我们 d.ts 文件中的声明。因此，我们将类命名为“HeaderImpl”并将其分配给“window.Header”。但这会产生“Header.name”具有错误值的问题。所以我们被迫添加不必要的运行时代码&nbsp;&nbsp; Object.defineProperty(HeaderImpl, \"name\", { value: \"Header\" });&nbsp;修复“Header.name”。谁知道这是否会将 Header 踢出 V8 中的某些优化路径。最佳的做法是生成“class Header { … }”，任何不足都表明设计中存在根本缺陷。&nbsp;TypeScript 应该可以帮助我们组织代码，但有人可能会声称它具有相反的效果。例如，我们有两个独立的 Body 类<a href=\"https://github.com/denoland/deno/issues/4748\">https://github.com/denoland/deno/issues/4748</a>\"。由于生成运行时代码涉及的复杂性，因此很难了解这一点。理想情况下，我们会有一个系统，其中两个 Body 类显然是错误的。&nbsp;我们的内部代码和运行时 TS 声明必须已经手动保持同步。TSC 没有帮助我们生成 d.ts 文件——当我们之前尝试时，它的开销和复杂性太大了。</blockquote><p></p><p></p><h2>从TypeScript转向JavaScript是一个好选择吗？</h2><p></p><p>&nbsp;</p><p>虽然 Svelte 不是最流行的 JavaScript 框架，但在开发者心目中却有着极高的地位。开发人员之所以选择 TypeScript 是因为他们发现强类型有助于减少错误，并通过代码补全和弹出帮助等功能改善代码编辑器内的开发体验。</p><p>&nbsp;</p><p>JSDoc 则是一种 API 文档工具，同样可用于类型检查。Visual Studio Code 已经内置 JSDoc 支持，开发者只需添加以下内容：// @ts-check 至 JavaScript 文件开头即可。文档解释道，“当无法推断类型时，可以使用 JSDoc 注释进行指定。”此功能实际由 TypeScript 提供支持，所以 TypeScript 和 JSDoc 可以说是相互依赖。</p><p>&nbsp;</p><p>但一个容易被忽略的细微差别是，Rich Harris 指的主要是库开发场景下的 TypeScript。如果大家正在构建应用程序，那么实在没必要转向 JSDoc。“这就没必要了，因为在构建应用程序的过程中，大家无论如何都需要构建的步骤。应用开发的重点在于优化代码、控制它的体量，并把一切都捆绑起来。但如果是想构建一个库，那我强烈建议改用 JSDoc。”</p><p>&nbsp;</p><p>虽然 Rich Harris 解释了团队从 TypeScript 转向 JavaScript 和 JSDoc 的理由，但面对强势提升的 TypeScript 普及度，Rich Harris 的决策似乎显得有点“非主流”，在 Hacker News 上也引发了许多网友讨论。</p><p>&nbsp;</p><p>Rich Harris 本人也在 Hacker News 上回复道“没想到一个内部重构 PR 能在 Hacker News 上排名第一”，Rich Harris 还进一步介绍了迁移背景，以免大家面对变动胡猜乱想。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b6/b621c776b684407127034948562646e4.png\" /></p><p></p><p>Rich Harris 表示，“如果你是 TypeScript 的铁杆批评者，认为我们脱 TS 入 JS 的做法证明了你的观点……抱歉要让你失望了。但如果你是 TypeScript 的狂热拥护者，觉得我们脱离 TS 就是背叛了精神信仰……你同样会失望”。</p><p>&nbsp;</p><p>Rich Harris 补充道，首先，Svelte 不会放弃类型安全，只是决定将类型声明从 .ts 文件转向带有 JSDoc 注释的 .js 文件。作为 Svelte 用户，这不会影响大家在 Svelte 中使用 TypeScript 的能力——从 Svelte 导出的函数，仍拥有大家所熟悉的各种 TypeScript优点（类型检查、智能许可、内联文档等）。Svelte 对 TypeScript 的支持承诺，比以往任何时候都更加坚定（具体示例请参阅<a href=\"https://svelte.dev/blog/zero-config-type-safety\">https://svelte.dev/blog/zero-config-type-safety</a>\"）。</p><p>&nbsp;</p><p>此外，Svelte 用户基本感受不到任何变化。有限的区别就是包体积更小了（不需要传递巨大的 sourcemap 之类），还可以通过 cmd-clicking 使用“Svelte ”及其子包导入的函数来调试框架（它提供的不是无用的类型声明，而是引向实际源代码，开发者可以直接在「node_modules」中编辑并查看实际变化）。</p><p>&nbsp;</p><p>Rich Harris 表示，希望此举能显著降低框架的贡献参与门槛，现在开发者：1）不需要理解如何链入 repo；2）不必在监视模式下运行构建流程；3）不需要为了观察 source 和 dist 代码间的变更而理解其映射关系。</p><p>&nbsp;</p><p>Rich Harris 认为，这次调整将使 Svelte 的用户和贡献者受益，同时也给项目团队减轻负担。团队经常需要针对沙箱测试对源代码做修改，新的工作流要比以往的 build 步骤好很多。体验过 TypeScript 工具那参差不齐质量的朋友肯定都为此头痛过，这次的迁移也帮团队回避了此类问题。相对而言，最大的缺点就是在 JSDoc 中编写类型确实不像在 TypeScript 中那么舒服。这个缺点虽然相对可以接受，但团队内仍然存在争议，当前网上的激烈争论也主要来自这个角度。</p><p>&nbsp;</p><p>“总而言之，我们的迁移决定基于实际需求，而绝不是什么立场问题。长期以来，我们一直以求真务实的态度构建 SvelteKit（反而是在 Svelte 那边更多追求理想主义），毕竟在这边提高生产力才是硬道理。”Rich Harris 总结道。</p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://devclass.com/2023/05/11/typescript-is-not-worth-it-for-developing-libraries-says-svelte-author-as-team-switches-to-javascript-and-jsdoc/\">https://devclass.com/2023/05/11/typescript-is-not-worth-it-for-developing-libraries-says-svelte-author-as-team-switches-to-javascript-and-jsdoc/</a>\"</p><p><a href=\"https://news.ycombinator.com/item?id=35892250\">https://news.ycombinator.com/item?id=35892250</a>\"</p><p><a href=\"https://gomakethings.com/ditching-typescript-for-javascript/\">https://gomakethings.com/ditching-typescript-for-javascript/</a>\"</p>",
    "publish_time": "2023-05-12 14:48:28",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "亿级大表毫秒关联，荔枝微课基于Apache Doris 统一实时数仓建设实践",
    "url": "https://www.infoq.cn/article/WIqFubWLS6HuExJPTuT7",
    "summary": "<p></p><blockquote> Apache Doris 助力荔枝微课构建了规范的、计算统一的实时数仓平台，目前 <a href=\"https://doris.apache.org/\">Apache Doris</a>\" 已经支撑了荔枝微课内部 90% 以上的业务场景，整体可达到毫秒级的查询响应，数据时效性完成 T+1 到分钟级的提升，开发效率更是实现了 50% 的增长，满足了各业务场景需求、实现降本提效，深得十方融海各数据部门高度认可。</blockquote><p></p><p></p><p>作者 | 陈城，数据中台组组长</p><p></p><p>深圳十方融海科技有限公司成立于 2016 年，是一家数字职业在线教育头部企业，业务涵盖“数字职业技能课程、知识分享平台「荔枝微课」、智慧教育解决方案「女娲云教室」”，推出了多类数字素养与数字技能课程服务，助力用户在数字时代实现技能进阶与职业进阶。2016年上线荔枝微课，已发展成为国内头部知识分享平台。2021年上线女娲云教室，实现了“教学练”一体化模式，填补了国内在线教学与实操脱轨的空白。</p><p></p><h2>业务介绍</h2><p></p><p></p><p>荔枝微课隶属于深圳十方融海科技有限公司，是一个免费使用的在线教育平台。荔枝微课拥有海量的知识内容，包括直播视频、录播视频、音频等多种形式。</p><p></p><p>通过技术和数据的赋能，推进荔枝微课持续创新，也为微课平台方和合作伙伴在视频的创新和销售方面提供了更强劲的支持。在业务运营过程中我们需要对用户进行全方位分析，高效为业务赋能。数据平台旨在集成各种数据源的数据，整合形成数据资产，为业务提供用户全链路生命周期、实时指标分析、标签圈选等分析服务。</p><p></p><h2>早期架构及痛点</h2><p></p><p><img src=\"https://static001.geekbang.org/infoq/c8/c801955bdd8da858bdae697777fd966d.png\" /></p><p></p><p>早期<a href=\"https://qcon.infoq.cn/2023/guangzhou/track/1511\">架构</a>\"选用的是 Hadoop 生态圈组件，以 Spark 批计算引擎为核心构建了最初的离线数仓架构，基于 Flink 计算引擎进行实时处理。从源端采集到的业务数据和日志数据将分为实时和离线两条链路：</p><p></p><p>在实时部分，业务库数据通过 Binlog 的方式接入，日志数据使用 Flume-Kafka-Sink 进行实时采集，利用 Flink 将数据计算写入到 <a href=\"https://www.infoq.cn/article/h5UJQNEHuKPpAHoaPo5O\">Kafka</a>\" 和<a href=\"https://www.infoq.cn/article/dassaX2O2WqvGjqpbXlf\"> MySQL</a>\"中。在实时数仓的内部，遵守数据分层的理论以实现最大程度的数据复用。在离线部分，利用 Sqoop 和 DataX 对全量和增量业务库中的数据进行定时同步，日志数据通过 Flume 和日志服务进行采集。当不同数据源进入到离线数仓后，首先使用 Hive on Spark/Tez 进行定时调度处理，接着根据维度建模经过 ODS、DWD、DWS、ADS 层数据，这些数据存储在 HDFS 和对象存储 COS 上，最终利用 Presto 进行数据查询展示，并通过 Metabase 提供交互式分析服务。同时为了保障数据的一致性，我们会通过离线数据对实时数据进行定期覆盖。</p><p></p><p>问题与挑战：</p><p></p><p>基于 <a href=\"https://qcon.infoq.cn/2023/guangzhou/track/1511\">Hadoop </a>\"的早期架构可以满足我们的初步需求，而面对较为复杂的分析诉求则显得心有余而力不足，再加上近年来，荔枝微课用户体量不断上升，数据量呈指数级上升，为了更好的为业务赋能，提高用户使用体验，业务侧对数据的实时性、可用性、响应速度也提出了更高的要求。在这样的背景下，早期架构暴露的问题也越发明显：</p><p></p><p>组件繁多，维护复杂，运维难度非常高数据处理链路过长，导致查询延迟变高当有新的数据需求时，牵一发而动全身，所需开发周期比较长数据时效性低，只可满足 T+1 的数据需求，从而也导致数据分析效率低下</p><p></p><h2>技术选型</h2><p></p><p>通过对数据规模及<a href=\"https://qcon.infoq.cn/2023/guangzhou/track/1511\">早期架构</a>\"存在的问题进行评估，我们决定引入一款实时数仓来搭建新的数据平台，同时希望新的 OLAP 引擎可以具备以下能力：</p><p></p><p>支持 Join 操作，可满足不同业务用户灵活多变的分析需求支持高并发查询，可满足日常业务的报表分析需求性能强悍，可以在海量数据场景下实现快速响应运维简单，缩减运维人力的投入和成本的支出，实现降本提效统一数仓构建，简化繁琐的大数据软件栈社区活跃，在使用过程中遇到问题，可迅速与社区取得联系</p><p></p><p>基于以上要求，我们快速定位了 Apache Doris 和 ClickHouse 这两款开源 OLAP 引擎 ，这两款引擎都是当下使用较为广泛、口碑不错的产品。在调研中发现， ClickHouse 对 Join 能力的支持较为一般，而我们在大多数业务场景中都需要基于明细数据进行大数据量的 Join，同时 ClickHouse 不支持高并发，这也与 Apache Doris 形成鲜明的对比，<a href=\"https://www.infoq.cn/article/6dchABOoYi20NG7TDuAv\">Apache Doris </a>\"多表 Join 能力强悍，高并发能力优异，完全可以满足我们日常的业务报表分析需求。除此之外，Apache Doris 可以同时支持实时数据服务、交互数据分析和离线数据处理多种场景，并且支持 Multi Catalog ，可以实现统一的数据门户，这几个特点都是我们核心考虑的几个能力。</p><p></p><p>当然在其他方面，<a href=\"https://doris.apache.org/\">Apache Doris</a>\" 的优势也比较明显，比如架构简单、支持 MySQL 协议，部署方便快速，运维零门槛，国内项目社区非常活跃，<a href=\"https://cn.selectdb.com/\">SelectDB</a>\" 团队给予社区专业的技术支持，等等，这些方面都远胜于 ClickHouse，因此我们决最终定使用 Apache Doris 来搭建新的架构体系。</p><p></p><h2>新的架构及方案</h2><p></p><p><img src=\"https://static001.geekbang.org/infoq/6b/6bcccf0d1beeb01ececc2455ec40e637.png\" /></p><p></p><p>在新的架构中我们采取 Apache Doris 和 Apache Flink 来构建实时数仓，多种数据源的数据经过 Flink CDC 或 Flink 加工处理后，入库到 Kafka 和 Apache Doris 中，最终由 Doris 提供统一的查询服务。</p><p></p><p>在数据同步上，一般通过 Flink CDC 将 RDS 数据实时同步到 Doris，通过 Flink 将 Kafka 的日志数据加工处理到 Doris，重要的指标数据一般由 Flink 计算，再经过 Kafka 分层处理写入到 Doris 中。在存储媒介上， 主要使用 Apache Doris 进行流批数据的统一存储。</p><p></p><p>架构收益</p><p></p><p>成功构建了规范的、计算统一的实时数仓平台，Apache Doris 的 Multi Catalog 功能助力我们统一了不同数据源出口，实现联邦查询。同时利用外部表插入的方式进行快速数据同步和修复，真正实现了统一数据门户。数据实时性有效提升，通过 Flink + Doris 架构，实时性从早期 T+1 缩短为的分钟级延迟。并发能力能力强，可以覆盖更多的业务场景。极大的减少了运维成本，<a href=\"https://qcon.infoq.cn/2023/guangzhou/track/1516\">Doris 架构</a>\"简单，只有 FE 和 BE 两个进程，不依赖其他系统；另外，集群扩缩容非常简单，可实现用户无感知扩容开发周期从周级别降至天级别，开发周期大幅缩短，开发效率较之前提升了 50 %。</p><p></p><h2>搭建历程</h2><p></p><p></p><h3>数据建模</h3><p></p><p>结合 Apache Doris 的特性，我们对数据仓库进行了建模，建模方式与传统数仓类似：</p><p></p><p>1、ODS 层： ODS 层日志数据选择 Duplicate 模型的分区表，分区表方便进行数据修复，Duplicate 模型还可以减少非必要的 Compaction。ODS 层业务库数据采用 Unique 数据模型（业务库 MySQL 单表数据通过 Flink CDC 实时同步到 Doris，Kafka 日志数据经 Flink 清洗，通过 Doris 的 Routine Load 写入 Doris 作为 ODS 层），DISTRIBUTED BY HASH KEY 根据具体的业务场景进行选择：</p><p></p><p>如果考虑机器资源，可选择均匀分布的 KEY，让 Tablet 数据能够均匀分布，使得查询时各 BE 资源能够充分利用，避免出现木桶效应；如果考虑大表 Join 性能，可以依据 Colocate Join 特性进行创建，让 Join 查询更高效；<a href=\"https://mp.weixin.qq.com/s?__biz=Mzg3Njc2NDAwOA==&amp;mid=2247512201&amp;idx=1&amp;sn=13e743781165eb3b28cef0a98aa09902&amp;chksm=cf2fbe8ef858379879dcb3769285759c74515b6a7d069cea8e445c5200e053e4da44e8ff4b17&amp;token=1782179396&amp;lang=zh_CN#rd\">Doris 1.2 版本中 Unqiue 模型开始支持写时合并 Merge On Write</a>\"，进一步提升了 Unique 模型的查询性能；</p><p></p><p>2、DWD 层：</p><p></p><p>对于通过 Flink 将数据进行 Join 打宽处理分别写入 Doris 和 Kafka 中的场景，选择使用 Unique 数据模型；对于高频查询的宽表选择 <a href=\"https://qcon.infoq.cn/2023/guangzhou/track/1516\">Doris </a>\"的 Aggregate 模型，使用 REPLACE_IF_NOT_NULL 字段类型，将多个事实单表进行插入，通过 Doris 的 Compaction 机制可以有效减少 Flink 状态 TTL 导致历史数据没有及时更新的问题。</p><p></p><p>3、DWS 层和 ADS 层： 主要采用 Unique 数据模型，DWS 层根据数据量大小按天、月进行分区。除此之外，我们还会利用 INSERT INTO 语句进行 5 分钟的任务调度和 T+1 的任务修复来进行数仓分层，便于需求的快速开发和实时数据修复。对于 Duplicate 模型的数据表，我们会创建 Rollup 的物化视图，通过击中物化视图查询能够加快上层表查询效率。</p><p></p><h3>数据开发</h3><p></p><p>在荔枝微课业务中，运营人员经常会有调整直播课程信息、修改专栏名称等操作，针对维度快速变化但宽表中维度列没有及时更新的场景，为了能更好的满足业务需求，我们利用 Doris Aggregate 模型 的 REPLACE_IF_NOT_NULL 字段特性，通过Flink CDC 多表分别写入 Doris 维度表的部分列。 当课程维度表数据发生变化时，需要查询上层维度（专栏和直播间），对维度表补全，再将数据插入到 Doris 中；当上层维度（专栏和直播间）发生变化时，需要下钻查询课程表，补全对应的课程 ID ，再将数据插入到 Doris 中。通过该方式可以保证维度表中所有字段的实时性，数据查询时再通过宽表来关联维表补全维度字段展示数据。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/24/24ebe98d4d423bc54a7fff22996bf3a9.png\" /></p><p></p><h3>库表设计</h3><p></p><p>在初期设计阶段，为了更好的利用 Apache Doris 提供的 Colocation Join 功能，我们特别设计了事实表的主键，如下图示例：</p><p><img src=\"https://static001.geekbang.org/infoq/9a/9a31d91f626b4a776dfcbb8be59a7233.png\" /></p><p></p><p>在业务库中课程表 A 和课程表 B 的关系是A.id=B.lecture_id，为了实现 Colocation Join，我们将 B 的 distributed by hash key设置为 lecture_id。当面对多事实表时，先进行 Colocation Join ，再进行维度 Bucket Shuffle Join ，以实现快速查询响应。而使用这个方式可能导致以下问题：</p><p></p><p>当选取的 lecture_id 进行 DISTRIBUTED BY时，数据库主键 ID 并不是均匀分布的，在数据量很大的情况下可能会导致数据倾斜，而各个机器的 Tablet 大小不一致，在高并发查询时可能出现 BE 机器资源使用不均衡，从而影响查询稳定性，造成资源浪费。</p><p></p><p>基于以上问题，我们尝试进行调整，并对查询效率和机器资源的占用这两方面进行了评估权衡，最终决定在尽量不影响查询效率的前提下，尽可能提高资源利用率。</p><p></p><p>在资源利用上，我们在建表时利用 colocate_with 属性，在不同数量和类型的 Distributed Key 创建不同的 Group，实现机器资源能得以充分利用。在查询效率上，根据业务场景和需求对前缀索引的字段顺序进行针对性调整，对于必选或高频的查询条件，将字段放在 UNIQUE KEY 前面，根据维度按照从高到低的顺序进行设计。其次我们利用物化视图对字段顺序进行调整，尽可能使用前缀索引进行查询，以加快数据查询 。除此之外，我们对<a href=\"https://qcon.infoq.cn/2023/guangzhou/track/1516\">数据</a>\"量进行月、天分区，对明细数据进行分桶，通过合理库表的设计减少 FE 元数据的压力。</p><p></p><h3>数据管理</h3><p></p><p>在<a href=\"https://qcon.infoq.cn/2023/guangzhou/track/1516\">数据管理</a>\"方面，我们进行了以下操作：</p><p></p><p>监控告警： 对于重要的单表，我们一般通过 Apache Doris 来创建外部表，通过数据质量监控来对比业务库数据和 Apache Doris 数据，进行数据质量稽查告警。数据备份与恢复： 我们会将 Doris 数据定期导入到 HDFS 进行备份，避免数据误删除或丢失的情况发生。比如当因某些原因导致 Flink 同步任务失败、无法从 Checkpoint 进行启动时，我们可读取最新的数据进行同步，历史缺失数据通过外部表进行修复，使得同步任务能够快速恢复</p><p></p><h2>收益总结</h2><p></p><p>在新架构中我们从 Hadoop 生态完全的迁移到 Flink + Doris 上，在上层构建不同的数据应用，比如自助报表、自助数据提取、数据大屏、业务预警等，Doris 通过应用层接口服务项目统一对外提供 API 查询，新架构的应用也为我们带来了许多收益：</p><p></p><p>支撑了荔枝微课内部 90% 以上的业务场景，整体可达到毫秒级的查询响应。支持千万级甚至亿级大表关联查询，可实现秒级甚至毫秒级响应。Doris 统一了数据源出口，查询效率显著提升，支持多种数据的联邦查询，降低了多数据查询的复杂度以及数据链路处理成本。Doris 架构简单，极大简化了大数据的架构体系；并高度兼容 MySQL 的语法，极大降低开发人员接入成本。</p><p></p><h2>未来规划</h2><p></p><p>荔枝微课在引入 Apache Doris 之后，在内部得到了非常广泛的应用，满足了各业务场景需求、实现降本提效，深得十方融海各数据部门高度认可。未来我们期待<a href=\"https://www.infoq.cn/article/0MiKpHhupXlSOFjbxQrV\"> Apache Doris </a>\"在实时数据处理场景的能力上有更进一步的提升，包括 Unique 模型上的部分列更新、单表物化视图上的计算增强、自动增量刷新的多表物化视图等，通过不断的迭代更新，使实时数仓的构建更加简单易用。</p>",
    "publish_time": "2023-05-12 15:10:36",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Google IO 大会开发者要闻汇总：Android Studio、Flutter、Web……",
    "url": "https://www.infoq.cn/article/4qdw05VjOeYFHKq7b41M",
    "summary": "<p>尽管谷歌I/O多年来已经成为搜索巨头发布新产品的主要舞台，但这场盛会仍然深深植根于开发者社区、关注开发者需求。</p><p>&nbsp;</p><p>本文将带大家纵观谷歌I/O 2023大会上的开发者主题，带来各条开发赛道上的最新消息和研讨热点。Android、Flutter、Jetpack、Firebase还有AI……相信总有一款适合你！</p><p>&nbsp;</p><p></p><h2>Google Play</h2><p></p><p>&nbsp;</p><p>Google Play Store中的一些小设计，能够帮助开发人员将自己的应用积累到更高人气。对开发新手来说，现在大家可以为“非活跃用户”显示自定义列表，通过情真意切的表达请求受众“再给我的应用或游戏一次机会”。</p><p>&nbsp;</p><p>但此次发布的真正亮点，还是一款生成式AI工具。它能帮助您的应用编写出适合的Play Store说明（英文）。只需填写几处关键信息，AI就会自动补全剩余部分，包括简短描述、完整描述等。</p><p>同时，用户也能根据评论更好地了解应用，因为Play Store即将在评论中提供高级摘要。这些摘要内容将概括出“用户怎么说”和持同一观点的用户数量，帮助打算下载的朋友快速了解这款软件究竟行不行。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b4/b4cbf40979d05e1f5afa5450a8dc8138.png\" /></p><p></p><p>&nbsp;</p><p>&nbsp;Play Console部分还将提供新的“价格实验”功能，让开发者通过测试了解特定价位能不能推动应用的销售成效。此外，Play Store还将很快在应用上添加“特色产品”标记。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/90/908f5f524a7ba871bf6d9c6e8c446369.png\" /></p><p></p><p>&nbsp;为了避免应用版本过于老旧而给用户带来问题，Play Store将很快在发现软件崩溃时弹出“自动更新提示”和“有更稳定的版本可用”。开发者可以手动选择要向哪些版本的用户显示更新提示。这项功能即将全面登陆“所有由app bundles构建的应用”。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0d/0daf1b95a2b347a82977f0ae7e5fdd03.png\" /></p><p></p><p>&nbsp;最后，谷歌还更新了其Play Console应用，新版本使用Flutter从零开始构建而成。新的Play Console应用针对“现代开发者需求”进行了优化，可实现自定义、仅显示最需要的指标，并与Play Console“收件箱”相集成以保持最新状态。目前新版本已经开放beta测试。</p><p>&nbsp;</p><p></p><h2>Android Studio</h2><p></p><p>&nbsp;</p><p>今年，最初亮相于2013年I/O大会的Android Studio正式迎来十周岁生日。除了宣传即将发布的“Giraffe”版本功能之外，谷歌还详细介绍了Android Studio Hedgehog的各项主要改进。</p><p>&nbsp;</p><p>跟本届I/O大会全面强调AI的氛围一致，Studio Bot背负谷歌的殷切期望走上舞台，带来“AI驱动的对话体验”。据谷歌介绍，Studio Bot目前尚处于“早期阶段”，但应该已经能为应用生成有用代码，为代码中的错误提出修复建议，并回答关于Android开发的各种常见问题。</p><p>&nbsp;</p><p>Studio Bot以谷歌“编码基础模型”Codey为依托，目前仅供美国本土的Android开发者通过Android Studio Hedgehog或更新版本体验。</p><p>&nbsp;</p><p>谷歌还特别强调了Studio Bot的隐私条例，表示用户的私人源代码绝不会被共享给谷歌。相反，“实际共享的只有您和Studio Bot之间的聊天对话。”</p><p>&nbsp;</p><p>Live Edit是Jetpack Compose的一项全新提示功能，能帮程序员快速查看设备上的代码变更。目前Live Edit已做好在Giraffe beta版中预览的准备，谷歌还表示“其他错误处理与报告功能改进”将随Hedgehog版本一发布。</p><p>&nbsp;</p><p>与之对应，Android Studio的“布局检测器”也将通过Hedgehog迎来升级，现在能将信息叠加到手机/平板电脑的视频上。这应该会提高工具性能，同时增强操作直观度。</p><p>&nbsp;</p><p>在之前的Android 13中，谷歌已经允许多语言用户在某些应用中选择特定语种，例如在手机系统中使用英语、但在某款应用中使用印地语。尽管必要的翻译筹备已经到位，但开发商仍需要完成相应的设置。而在8.1或更高版本Android Gradle插件的帮助下，为应用保留不同的语言设置已经得到自动支持。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/54/5423104554cb2b5b7a1670b6af424f90.png\" /></p><p></p><p>&nbsp;在Android Studio Giraffe和更高版本中，您可以找到新的“Android SDK升级助手”，由它引导我们完成应用在升级至更新版本Android前的必要变更。考虑到Google Play Store和Android本身正逐渐提高最低API版本要求，这项功能的出现堪称雪中送炭。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/70/7076ea1587b2257a2ce2c7102177fa62.png\" /></p><p></p><p>&nbsp;Android应用开发一直颇有风险，主要问题出在市面上充斥着大量不同硬件配置的手机产品，而规模有限的独立开发者根本不可能搞一大堆设备做实机测试。为了解决这个问题，Android Studio和Firebase正推出一项“Android设备流传输”服务，该服务能够与“远程物理Google Pixel设备”建立流传输，借此部署并测试您的应用软件。目前此服务已经开放报名：</p><p><a href=\"https://developer.android.com/studio/preview/android-device-streaming\">https://developer.android.com/studio/preview/android-device-streaming</a>\"</p><p>&nbsp;</p><p>Android Studio Hedgehog中的新功能“Power Profiler”，能够直接测量您的应用在CPU、GPU、摄像头、蜂窝数据等装置上具体消耗的电量。谷歌还给出示例，称这将有助于“对视频通话应用中各类算法的A/B测试，借此优化摄像头传感器的电量消耗”。</p><p>&nbsp;</p><p>对于Jetpack Compose开发者，当您在Android Studio中调试Compose UI代码时，现在可以获得关于Composable函数参数的更多信息。这样您就能轻松理解哪些参数发生了变化，并导致您的应用进行重构。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/49/49601be0d96296b323455598d4391c5d.png\" /></p><p></p><p>&nbsp;Composable函数参数</p><p>&nbsp;</p><p>最后，除了IntelliJ 2023.1版本的常规改进之外，Android Studio Hedgehog还对Jetbrains中面向所有工具打造的“New UI”做出更多调整。其中的最大亮点就是新的“紧凑模式”，此外谷歌还引入“新的主工具栏、工具窗口和新图标”等Android特定变更。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a9/a9ad0cfa4bb0dd10ec549702cf3d847c.png\" /></p><p></p><p>Android Studio的“New UI”</p><p></p><h2>Jetpack Compose</h2><p></p><p></p><p>近年来，Jetpack Compose已经成为谷歌为Wear OS、手机和平板电脑/折叠式设备开发Android应用的首选方式。该框架虽然与传统的Android“Views”仍有一定差距，但Compose的声明性质、对Kotlin语言的良好支持和现代化的Material Design开发者体验，已经让它在市场上牢牢站稳了脚跟。</p><p>&nbsp;</p><p>在性能方面，即将发布的Compose新版本将为修饰符带来“更加高效的新系统”，使得文本的“平均性能提高22%”。此外，新版本还将支持最新的表情符号集。</p><p>&nbsp;</p><p>再就是新的composables集合，包括能够轻松滚动对象的两个“pagers”和用于自动纵向/横向排列内容的“flows”。</p><p>&nbsp;</p><p>通过此次beta版提供的“Jetpack Glance”库，Jetpack Compose还可用于为Android创建主屏幕小部件。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f7/f7ca4288de1ba558e391ba0289939924.png\" /></p><p></p><p>&nbsp;同时，得益于新的Jetpack Compose for TV库，Compose现在可以扩展到电视屏幕之上。该库提供提供谷歌Android TV设计指南的全部内容，包括有助于改善导航体验的网格、行、特色列表、选项卡、侧导航等设计原则。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/73/73035d39042f77e90216a6410165ff95.png\" /></p><p></p><p></p><h2>Wear OS</h2><p></p><p></p><p>此次谷歌I/O主题演讲上，定于今年秋季正式发布的“Wear OS4”在公众面前完成了首秀。其基于Android 13，包含一系列新功能与增强功能。</p><p>&nbsp;</p><p>更重要的是，开发者无需等待就可立即使用Wear OS 4并测试自己的应用。Android Studio Hedgehog现已提供新的Wear OS 4模拟器。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ac/acb978f23fb29ab5bd0e07a1f2b8652b.png\" /></p><p></p><p>&nbsp;谷歌和三星联袂发布的一大关键亮点，就是提供新的“表盘格式”，彻底重新定义了Wear OS的表盘创建思路。为了显著降低功耗，新表盘采用一种“声明XML格式，也就是说表盘APK中不包含代码”。换言之，Wear OS将负责处理所有图形优化，确保您的自定义表盘在设备上尽可能地流畅运行。</p><p>&nbsp;</p><p>更重要的是，所有新的表盘格式均可使用与内置Wear OS设计相同的工具完成定制，保证提供更流畅的体验。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/33/3373089fcd2de4c7b99fb9264be03e4d.png\" /></p><p></p><p>&nbsp;要使用三星Watch Face Studio工具设计新表盘，您现在已经可以通过Wear OS 4模拟器测试新的Watch Face Format。从今天起，Watch Face Format新表盘已经可以登陆Play Store，“为首批Wear OS 4手表的后续上市做预热”。</p><p>&nbsp;</p><p></p><h2>Flutter与Dart</h2><p></p><p>&nbsp;</p><p>Flutter是谷歌为多种平台打造的应用程序构建框架，支持Android、iOS、Web、Windows、macOS和Linux等。此次Flutter 3.10的正式发布，也标志着今年早些时候谷歌在Flutter Forward大会上做出的承诺并非虚言。</p><p>&nbsp;</p><p>Flutter 3.10中的最大改进是Impeller。这是一种新的渲染引擎，能够为Flutter应用程序带来突破性的性能提升，且目前已经在iOS上默认启用。要在您自己的应用程序中启用Impeller，请立即更新Flutter SDK并亲自体验其特别之处。</p><p>&nbsp;</p><p>谷歌目前的主要精力，就是让Impeller为登陆Android做好准备。这活并不轻松，毕竟仍有不少设备并不支持必要的Vulkan图形API。Flutter已经承诺为这些设备提供“向下兼容模式”，而对Android的完整Impeller支持应该会在不久之后发布预览。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/df/dfb8103a25c8a6d677cf1218fa8c2b30.png\" /></p><p></p><p>&nbsp;Web上的Flutter在新版本中也迎来了一系列重大改进，底层CanvasKit完成瘦身，字体调整也让“使用模拟线缆连接”时的加载时间缩短了42%。</p><p>&nbsp;</p><p>与此同时，谷歌还致力于让WebAssembly支持Dart（和其他垃圾收集语言）。这项工作仍处于早期阶段，但在完成之后，Flutter应用程序应该会比之前更高效，谷歌称“执行速度将提高3倍”。现在大家已经可以在Flutter的WebAssembly支持中测试您的应用程序并提交反馈。</p><p>&nbsp;</p><p>Flutter 3.10的另一个重大变化，就是引入了Dart语言的3.0版本。有了这项改进，所有Dart代码现在都必须以可靠的null安全形式进行编写，以确保您的应用程序代码不会意外返回null值。长久以来，谷歌一直在推动Dart社区实现可靠的null安全，但Dart 3.0开始将其作为一项硬性要求。</p><p>&nbsp;</p><p>Dart 3还包含更多实用新功能，有望提高您的代码可读性。例如，“records”允许一个函数返回多个值，而“patterns”则可以在使用数据前轻松对其做验证。</p><p>&nbsp;</p><p></p><h2>Firebase</h2><p></p><p>&nbsp;</p><p>Firebase是谷歌持续扩展的工具套件，旨在利用Google Cloud的强大功能帮助开发者更快、更轻松地构建起优质应用程序。在对原有愿景和AI功能的充分融合之后，Firebase推出了两项标准性新扩展，允许开发人员轻松访问谷歌的PaLM语言模型。</p><p>&nbsp;</p><p>使用“Chatbot with PaLM API”扩展，您现在可以“使用谷歌最新的生成式AI技术为应用程序添加智能聊天功能”。同样，“Summarize Text with PaLM API”则能快速理解大段文本并生成简短的内容摘要。</p><p>&nbsp;</p><p>同时，谷歌还降低了开发者发布Firebase扩展程序的门槛。以往，扩展发布只能通过功能受限的预览程序进行。将第一方扩展、第三方合作伙伴选项和社区贡献相结合，谷歌公司希望打造一个“繁荣的扩展生态系统，通过解决实际问题让整个谷歌开发者社区受益”。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0c/0cba8f23a5238e6802651700b69ef74b.png\" /></p><p></p><p>&nbsp;Firebase Cloud Functions是一套用于在Google Cloud上运行Node.js后端代码的无服务器框架，目前它也迎来了新增众多亮点的第二代版本：</p><p></p><p>最高32 GB内存，用于处理更苛刻的工作负载。更强的并发性，允许函数的每个实例并行处理最多1000个请求，从而减少冷启动、改善延迟并降低成本。支持通过触发器将多种Firebase产品（包括Firestore）拼接起来，根据指向Firestore集合的写入操作触发第二代功能。</p><p>&nbsp;</p><p>此外，现在还可以在Cloud Functions中运行Python代码，使用Python丰富的软件包生态系统。如此一来，将有更多开发者尝试建立自己的无服务器架构。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/3e/3e8933ccfe6bc8e0605e2cf3d6c211d0.png\" /></p><p></p><p>&nbsp;Cloud Firestore是Firebase提供的两大数据库选项之一，此次迎来了一项规模不大但却意义非凡的更新。在更新至最新SDK后，您将能够在浏览数据时使用“OR”查询。</p><p>&nbsp;</p><p>App Check服务负责保护您的应用程序及其服务免遭滥用，现在您可以用它保护Firebase的Identity Platform高级身份验证。游戏开发者现在还可以访问面向Unity和C++的App Check SDK，阻止各种常见的作弊行为。</p><p>&nbsp;</p><p>Firebase Hosting扩展了对动态Web框架的支持能力，已经能够与SvelteKit、Astro和Nuxt实现“实验性”兼容。此外，借助Cloud Functions中的新Python支持能力，Firebase Hosting将很快能够支持Django和Flask的“one command”部署。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c2/c27ec447260a311f999397d7be6c75ed.png\" /></p><p></p><p>&nbsp;Hosting还迎来“动态预览通道” ，允许Web开发者在生产部署之前发布网站新版本的预览链接。</p><p>&nbsp;</p><p>Android Studio中的Firebase“App Quality Insights”菜单去年刚刚首次发布，现在已经作为Android Studio Flamingo中的稳定选项存在，并提供以下额外功能：</p><p></p><p>能够直接通过IDE关闭问题。能够添加备注以实现团队间的轻松协作。能够根据Crashlytics信号（如回归）过滤问题，更好地确定需要修复的内容和修复优先级。</p><p>&nbsp;</p><p></p><h2>Web</h2><p></p><p></p><p>在Web方面，谷歌发布的主要公告是新的“WebGPU”API。它最近刚刚登陆Chrome，后续将很快现身Firefox。新API的运行速度可达WebGL的3倍，而且其提升还不止限于图形层面。</p><p>&nbsp;</p><p>事实上，近期迅速蹿红的AI和机器学习工具也都要占用海量处理能力。虽然部分AI工具会将工作负载转移至云端，但这同时也会牺牲掉一部分隐私权益。而使用WebGPU则让开发人员能够全面访问桌面图形卡，为机器学习任务带来更快的处理速度。</p><p>&nbsp;</p><p>谷歌也在努力为WebAssembly引入垃圾收集机制。除了服务于Flutter等应用程序框架的用户之外，Jetbrains还为Kotlin开发者提供一种在Android和Web上实现部分代码复用的方法。</p><p>谷歌还公布了一项名为“Baseline”的跨公司合作项目，希望明确各大主要浏览器分别能够支持哪些新功能。每年都将建立新的“Baseline”，并列出自上一Baseline以来“所有浏览器的新功能和兼容细则”。</p><p></p><p></p><h5>原文链接：</h5><p></p><p><a href=\"https://9to5google.com/2023/05/10/google-io-2023-developer-keynote-recap/\">https://9to5google.com/2023/05/10/google-io-2023-developer-keynote-recap/</a>\"</p><p>&nbsp;</p><p></p><h5>相关阅读：</h5><p></p><p><a href=\"https://xie.infoq.cn/article/21769f6aed42a467d14fb3799\">Android&nbsp;Studio&nbsp;开发 Android APP</a>\"</p><p><a href=\"https://xie.infoq.cn/article/0b39815b8dc9f6f93c534fe24\">为什么说&nbsp;Flutter&nbsp;无法成为移动应用开发的“顶流明星”...</a>\"</p><p><a href=\"https://xie.infoq.cn/article/4c03108df6844b2941b1b9042\">Flutter&nbsp;开发：项目加载本地 html 文件的步骤</a>\"</p><p><a href=\"https://www.infoq.cn/article/OoAHFuPeteKTOsQv849S\">Google 路线图：Flutter&nbsp;与 JavaScript、Wasm 集成</a>\"</p>",
    "publish_time": "2023-05-12 16:01:12",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "取代C++！微软用Rust改写的Win11内核来了",
    "url": "https://www.infoq.cn/article/2ZRZNIRLguIzBON952IY",
    "summary": "<p>5月12日，据媒体报道，前不久微软透露正基于Rust语言改写Windows 11内核，部分替代之前的C++，当时的说法是已添加36000行代码，且开机测试通过。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d8/d8bfba7faaa454cc422febfc7cad81dd.png\" /></p><p>最近，据Azure 首席技术官 Mark Russinovich 透露，最新的 Windows 11 Insider Preview 版本是第一个包含此代码的版本。</p><p></p><p>“如果你在 Win11 Insider预览版中，你将在 Windows 内核中首次体验到Rust代码，”&nbsp;Russinovich 昨晚发推文如是说。</p><p></p><p>Win32k.sys负责处理器<a href=\"https://microsoft.pvxt.net/x9Vg1\">Windows</a>\"上的图形设备界面（GUI）和窗口管理。</p><p></p><p>按照<a href=\"https://c.duomai.com/track.php?site_id=242986&amp;euid=&amp;t=https://www.microsoftstore.com.cn/\">微软</a>\"此前介绍，Rust语言的优势在于极高的内存安全性，原来内核中大量的不安全的子例程在改写后消失不见。同时，Rust代码简洁高效，移植后<a href=\"https://microsoft.pvxt.net/P0JMe\">Office</a>\"应用没有任何性能损失，甚至部分场景比C++运行效率更高。</p><p></p><p>目前，Windows 11 Canary通道最新预览版为Build 25357，Dev通道为Build 23451，发布预览版也迭代到了Build 22621.1776。</p><p></p><p>无论如何，微软的动作还是很快的。微软只是在 4 月中旬的以色列 BlueHat IL 2023 安全会议上公开了其用 Rust 代码替换部分 Windows 内核的计划。在那次活动中，微软副总裁 David Weston 表示，“我们在操作系统上使用 Rust 以及其他构造”作为“积极和有意义的内存安全追求”的一部分。</p><p></p><p>而且微软不仅仅将Rust引入了Windows 内核，也将其引入微软安全处理器Pluton中。</p><p></p><p>“我们正朝着使用 Rust 的内存安全语言迈进，”Weston 谈到 Pluton 时说。“我们还没有做到这一点，但这是我们正在努力解决的问题……可信计算库中的内存安全问题是真实存在的，而且可以说是最痛苦的问题之一，因为一旦TPM 遭到破坏，攻击者有就可能访问到所有数据和信息，而如果到了必须更新 TPM 时，它们会处于重置状态，这对用户来说是非常痛苦的。因此引入Rust的对我们来说很重要。”</p><p></p>",
    "publish_time": "2023-05-12 16:27:07",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "阿里云发布“金融级云原生”：既要敏捷，又要稳定",
    "url": "https://www.infoq.cn/article/YsMkRaThIKaWdKyhX5sQ",
    "summary": "<p>&nbsp;</p><p>5月8日，阿里云正式发布“金融级云原生”，从早期云原生的十二要素提出金融级云原生的新十要素。这是阿里云以经典<a href=\"https://www.infoq.cn/topic/CloudNative\">云原生技术</a>\"为基础，并针对<a href=\"https://www.infoq.cn/article/juuT1kQ9mh7ePRWMduvm\">金融</a>\"行业需求研发的一整套技术体系，从而支持金融机构建设既符合行业标准和监管要求、又具备云原生技术优势的“新型IT架构”。</p><p>&nbsp;</p><p>阿里云智能新金融&amp;互联网行业总裁<a href=\"https://www.infoq.cn/article/R63JXa644JABMicz1xpY\">刘伟光</a>\"表示，在过去40多年里，随着以银行为代表的金融行业的业务发展和转型，IT系统整体架构也同样经历过多轮的迭代演化，银行的信息化发展进程可概括为四个主要阶段：单机时代、联网联机时代、数据大集中时代、分布式云原生时代。其中，数据大集中时代是银行IT信息化发展最快、对业务推动最大一个时期，而整个IT系统建设的重中之重就是由集中式架构支撑的“核心系统”。</p><p>&nbsp;</p><p>集中式架构由IBM、Oracle、EMC三家厂商为代表所主导的系统架构范式，它通过增加单机的资源配置来提升系统的处理能力，并通过增加硬件设备和基础软件的集群机制来提升系统的可用性。集中式架构虽然部署简单，但存在纵向烟囱割裂、横向管理分散的情况，每个层面和每个技术产品都独立分散管理运维。</p><p>&nbsp;</p><p>云原生架构对于金融行业而言，解决了过去独占架构的缺点，也解决了虚拟化时代的资源共享问题，同时还有整个资源损耗、调度损耗和系统损耗，真正做到鱼和熊掌兼得。</p><p>&nbsp;</p><p>IDC中国副总裁兼首席分析师武连峰表示，中国金融行业已经开始不同程度地应用云原生技术。根据IDC在今年上半年的调查，计划实施的企业占42%，同时已经开始单点实验的已经超过42%，局部应用企业占到14%，特别是领先的金融机构已经开始优化创新。</p><p>&nbsp;</p><p>云原生要在金融行业大规模应用，首先就是提升云原生关键技术能力，包括微服务、容器、动态编排、DevOps、多元安全防护体系构建、强化多云管理模式，提升资源调度和弹性效果。</p><p>&nbsp;</p><p>刘伟光认为，金融级云原生的核心思想就是让云原生的先进思想从只覆盖应用开发扩展到系统物理部署架构这样的完整技术链路，从单纯的开发态转向“设计态+研发态+运行态+运维态+容灾态”，同时在每个范畴中都结合金融级的高可用、高性能、业务连续性等特征。</p><p>&nbsp;</p><p>基于此，金融级云原生架构既有高性能、低成本、安全可靠的优势，还能满足金融对IT环境严苛地挑战和要求，为金融机构的传统“稳态应用”（数字化转型）和“敏态应用”（数字化原生）应用提供统一的技术架构支持。</p><p><img src=\"https://static001.infoq.cn/resource/image/11/f5/11d7a62fed0962da7cb49fcbd929c4f5.png\" /></p><p></p><p>“金融级云原生架构标准为很多金融机构进行国产技术应用时候提供一个非常重要的参考，如果金融机构能够在国产技术布局中抓住机遇，采用新的架构改造，而非简单的办公机制、服务器等替换，就能真正实现架构完整的数据化升级。”刘伟光表示。</p><p>&nbsp;</p><p>据悉，阿里云提出的金融级云原生包括平台工程&nbsp;&amp;不可变基础设施、弹性混合云、资源混合部署、多技术栈异构集成、基础架构连续性、全链路技术风险防控、云原生安全可信、金融级一致性、单元化多地多活、业务连续性和数智化运维等十大要素。</p><p>&nbsp;</p><p>以容灾场景为例，金融机构广泛使用的两地三中心架构，数据库往往是采用主备复制的方式，同城中心的应用节点要跨几十公里访问主中心的数据库，并不是一个真正意义上的多中心多活架构，不能充分发挥同城中心的性能和容量，同时由于主备复制带来的数据一致性或双中心耦合性的问题，要实现不丢数切换的代价比较大。今天的互联网架构下，容灾系统已经从容灾概念变成单元化多地多活，所有中心可以同时承载业务流量，并通过分布式数据库的能力实现多地多中心间的数据一致性和零丢失。</p><p>&nbsp;</p><p>“整个金融系统从原来同城容灾、异地容灾变成未来的同城多活、异地多活，这不是阿里的标准，而是整个行业的标准。”刘伟光表示。</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p>",
    "publish_time": "2023-05-12 16:48:21",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]