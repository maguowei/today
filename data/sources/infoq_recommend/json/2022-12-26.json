[
  {
    "title": "Spring for Apache Kafka 3.0和Spring for RabbitMQ 3.0发布",
    "url": "https://www.infoq.cn/article/3QVmvCpHzu3Ba76DAmMQ",
    "summary": "<p>VMWare<a href=\"https://spring.io/blog/2022/11/21/new-major-releases-of-spring-for-apache-kafka-and-spring-for-rabbitmq\">发布</a>\"Spring for Apache Kafka 3.0和Spring for RabbitMQ 3.0，需要Java 17和Spring Framework 6.0。这些项目现在支持创建<a href=\"https://www.graalvm.org/latest/reference-manual/native-image/\">原生GraalVM</a>\"应用程序，并使用<a href=\"https://micrometer.io/\">Micrometer</a>\"指标门面来观察计时器和实现跟踪。现在，两个项目都在pom.xml文件中提供了<a href=\"https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#bill-of-materials-bom-poms\">BOM</a>\"，方便进行依赖项管理。</p><p></p><p>Micrometer用于增强JVM代码，没有供应商锁定，可以观察计时器和跟踪<a href=\"https://docs.spring.io/spring-kafka/reference/html/#observation\">KafkaTemplate</a>\"、 <a href=\"https://docs.spring.io/spring-amqp/docs/3.0.0/reference/html/#micrometer-observation\">RabbitTemplate</a>\"及监听器容器。Micrometer类似于<a href=\"https://www.slf4j.org/\">SLF4J</a>\"（一种日志门面），只是它是用在指标方面。</p><p></p><p>现在，<a href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#aot\">Spring AOT</a>\"原生提示可用来为使用Spring for Apache Kafka或Spring for RabbitMQ构建的Spring应用程序创建<a href=\"https://docs.spring.io/spring-kafka/reference/html/#native-images\">原生镜像</a>\"，示例可在GitHub上的<a href=\"https://github.com/spring-projects/spring-aot-smoke-tests/tree/main/integration\">spring-aot-smoke-tests</a>\"项目中找到。spring-kafka-test模块中的<a href=\"https://docs.spring.io/spring-kafka/api/org/springframework/kafka/test/EmbeddedKafkaBroker.html\">EmbeddedKafkaBroker</a>\"类在原生镜像中不受支持。</p><p></p><p>Spring for Apache Kafka 3.0要求<a href=\"https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients\">Kafka客户端</a>\"是3.3.1版本，如果要使用事务，要求最低Kafka broker（即Kafka服务器）是2.5版本。</p><p></p><p>现在可以跨多个测试类使用一个单独的全局EmbeddedKafkaBroker，只需要像下面这样替换服务器地址：</p><p></p><p><code lang=\"java\">public final class EmbeddedKafkaContainer {\n    private static EmbeddedKafkaBroker embeddedKafkaBroker = \n        new EmbeddedKafkaBroker(1, false)\n            .brokerListProperty(\"spring.kafka.bootstrap-servers\");\n    private static boolean started;\n\n    public static EmbeddedKafkaBroker getEmbeddedKafkaBroker() {\n        if (!started) {\n            try {\n                embeddedKafkaBroker.afterPropertiesSet();\n            }\n            catch (Exception exception) {\n                throw new KafkaException(\"Error starting \n                    EmbeddedKafkaBroker\", exception);\n            }\n            started = true;\n        }\n        return embeddedKafkaBroker;\n    }\n\n    private EmbeddedKafkaContainer() {\n        super();\n    }\n}\n</code></p><p></p><p>在配置了EmbeddedKafkaBroker之后，它就可以被用在每一个测试类中：</p><p></p><p><code lang=\"java\">static {\n    EmbeddedKafkaHolder.getEmbeddedKafkaBroker()\n        .addTopics(\"students\", \"teacher\");\n}\n\nprivate static final EmbeddedKafkaBroker broker =\n    EmbeddedKafkaContainer.getEmbeddedKafkaBroker();\n</code></p><p></p><p>对于前面的示例，broker在完成测试后将会继续运行，这可能会导致潜在的问题。例如，在使用Gradle守护进程时，EmbeddedKafkaBroker的destroy()方法应该在所有测试执行完毕之后被调用。</p><p></p><p><a href=\"https://docs.spring.io/spring-kafka/docs/current-SNAPSHOT/api/org/springframework/kafka/test/junit/GlobalEmbeddedKafkaTestExecutionListener.html\">GlobalEmbeddedKafkaTestExecutionListener</a>\"为测试计划启动一个全局的EmbeddedKafkaBroker，并在测试计划被执行时停止它。监听器在默认情况下是禁用的，可以在1.8或更新版本的JUnit Platform上通过spring.kafka.global.embedded.enabled属性来启用。</p><p></p><p>用于非阻塞重试的<a href=\"https://docs.spring.io/spring-kafka/api/org/springframework/kafka/annotation/RetryableTopic.html\">@RetryableTopic</a>\"注解不再是实验性的。在这个版本中，这个注解得到了进一步的改进，现在可以作为自定义注解的元注解。现在可以在同一个应用程序上下文的同一个主题上配置多个@RetryableTopic监听器。容器现在可以发布<a href=\"https://docs.spring.io/spring-kafka/api/org/springframework/kafka/event/ConsumerRetryAuthEvent.html\">ConsumerRetryAuthEvent</a>\"和<a href=\"https://docs.spring.io/spring-kafka/api/org/springframework/kafka/event/ConsumerRetryAuthSuccessfulEvent.html\">ConsumerRetryAuthSuccessfulEvent</a>\"事件。</p><p></p><p><a href=\"https://docs.spring.io/spring-kafka/api/org/springframework/kafka/core/KafkaTemplate.html\">KafkaTemplate</a>\"和<a href=\"https://docs.spring.io/spring-kafka/api/org/springframework/kafka/requestreply/ReplyingKafkaTemplate.html\">ReplyingKafkaTemplate</a>\"类中定义的各种send方法现在将返回一个<a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/concurrent/CompletableFuture.html\">CompletableFuture</a>\"，而不是已弃用的<a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/util/concurrent/ListenableFuture.html\">ListenableFuture</a>\"。</p><p></p><p>Spring for RabbitMQ现在支持单个活跃消费者的<a href=\"https://docs.spring.io/spring-amqp/docs/3.0.0/reference/html/#super-streams\">超级流</a>\"。超级流是通过参数x-super-stream: true将几个流队列绑定到一个exchange来创建的。例如，我们可以使用<a href=\"https://docs.spring.io/spring-amqp/api/org/springframework/rabbit/stream/config/SuperStream.html\">SuperStream</a>\"类型的bean来创建test.exchange和两个队列或分区：</p><p></p><p><code lang=\"java\">@Bean\nSuperStream superStream() {\n  return new SuperStream(\"test.exchange\", 2);\n}\n</code></p><p></p><p>使用<a href=\"https://docs.spring.io/spring-amqp/api/org/springframework/amqp/rabbit/annotation/RabbitListener.html\">@RabbitListener</a>\"注解的监听器方法现在可以消费<a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/index.html\">Collection</a>\"或<a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/List.html\">List</a>\"类型的<a href=\"https://docs.spring.io/spring-amqp/docs/3.0.0/reference/html/#receiving-batch\">消息批次</a>\"。</p><p></p><p><a href=\"https://docs.spring.io/spring-amqp/api/org/springframework/amqp/rabbit/AsyncRabbitTemplate.html\">AsyncRabbitTemplate</a>\"、<a href=\"https://docs.spring.io/spring-amqp/api/org/springframework/rabbit/stream/producer/RabbitStreamTemplate.html\">RabbitStreamTemplate</a>\"和<a href=\"https://docs.spring.io/spring-amqp/docs/current/api/org/springframework/rabbit/stream/producer/RabbitStreamOperations.html\">RabbitStreamOperations</a>\"的send方法现在返回<a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/concurrent/CompletableFuture.html\">CompletableFuture</a>\"，而不是已弃用的<a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/util/concurrent/ListenableFuture.html\">ListenableFuture</a>\"。</p><p></p><p>Spring for RabbitMQ不再支持<a href=\"https://www.oracle.com/java/technologies/jpl1-remote-method-invocation.html\">远程方法调用</a>\"（RMI）。</p><p></p><p>更多信息可以在<a href=\"https://docs.spring.io/spring-kafka/docs/3.0.0/reference/html/#whats-new-part\">Kafka</a>\"和<a href=\"https://docs.spring.io/spring-amqp/docs/3.0.0/reference/html/#whats-new\">RabbitMQ</a>\"的What's New页面中找到。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/12/spring-apache-kafka-rabbitmq-3/\">https://www.infoq.com/news/2022/12/spring-apache-kafka-rabbitmq-3/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/iCQ44j3XyAEl2FgHSPQy\">Spring Boot 3和Spring Framework 6使用Java 17和Jakarta EE 9，并支持基于GraalVM的原生Java</a>\"</p><p><a href=\"https://www.infoq.cn/article/F3I9jfBsZ4cyE2aD7K8U\">Spring Modulith使用模块和事件组织Spring Boot 3应用</a>\"</p><p><a href=\"https://www.infoq.cn/article/vl9UfPTm6oOPAUgYpN5c\">InfoQ 2022 年趋势报告：Java 篇</a>\"</p>",
    "publish_time": "2022-12-26 09:31:56",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "2023数字中台的数据调研",
    "url": "https://www.infoq.cn/article/eQ89yuYWOTwOC0kVCEwu",
    "summary": "<p>自2020年 十万+数据中台 文章发布以来，数据中台的热度从火速蹿红到稳定落地，正处于全面开花阶段，正如凯哥两年之前所预测的那样，数据中台的生命力和商业化能力远高于业务中台。</p><p></p><p>两年过去众多企业都已经建设了数据中台，数据中台已经成为了一个本土的新的细分市场，但是到底数据中台是否产生了业务价值？企业数据中台的建设处于什么样的进展？是否有了更新的需求和洞见?</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/b6/24/b6048f2fcb4462e67403258b82e3d524.png\" /></p><p></p><p></p><p>请帮忙占用1分钟时间填写一个简单地问卷，留下您的微信号，回头就可以收到《2023数据中台调研报告：让数据的价值被看见》的PDF版报告。</p>",
    "publish_time": "2022-12-26 11:16:53",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "有备无患！DBS高性价比方案助力富途证券备份上云",
    "url": "https://www.infoq.cn/article/e2a64cfdb6897e179d881d77b",
    "summary": "<p>“某中心受病毒攻击，导致服务中断，线上业务被迫暂停”</p><p>“某公司员工误操作删库，核心业务数据部分丢失，无法完全找回”</p><p>“由于服务器断线，某医院信息系统瘫痪近4小时，期间病人无法使用医保卡挂号和结算”</p><p>……</p><p></p><p>数据丢失风险防不胜防，企业构建数据备份方案迫在眉睫！</p><p></p><p>此次腾讯云数据库备份服务DBS携手富途证券完成了数据备份上云的成功案例，为证券行业金融级容灾提供了典范，具体如何，往下看～～</p><p></p><h1>一、引言</h1><p></p><p></p><p>作为国家金融活动的重要入口，证券行业对业务连续性和数据安全都有着极高的要求，基于业务安全与行业监管要求考虑，提升业务的应急管理水平，加固业务对抗各种安全风险的防范能力，构建全云化的数据灾备方案已成为证券行业的主流趋势，而作为拥有海量核心业务数据的证券公司——富途证券已走在前列。</p><p></p><p>富途证券于2012年在香港成立，专注为客户提供一站式美股港股投资及理财服务，并于2019年成功登陆纳斯达克。一直以来富途证券对于本地数据中心的建设与安全防护都十分重视并且为之深度投入，但随着业务规模的不断增长，富途在数据存储和安全防护能力上又面临着更多新的挑战。</p><p></p><p>对于数据高度敏感的证券行业来说，如果因自然灾害、网络故障等灾难事故导致数据丢失，将会对线上业务带来难以挽回的损失。</p><p></p><p>此外，对于已建立的备份方案而言，执行数据库恢复操作困难且易出错，无法进行自动化的跟踪与管理。</p><p></p><p>因此，富途证券亟需建立一套容灾能力强、安全系数高、管理流程智能化的云上数据备份方案。基于这些核心强需求，富途选择了与腾讯云数据库备份服务DBS合作。</p><p></p><p>经过不断的探索和技术创新后，腾讯云DBS最终为客户提供了安全、高效、便捷的金融级数据备份解决方案，实现了大批量自建数据库备份上云。这是证券行业完全依托国内公有云上SaaS服务实现本地IDC数据库一体化备份上云的代表性范例，对行业应用和推广全云化备份方案具有标杆意义。</p><p></p><p>目前，腾讯云DBS正在携手富途共同守卫金融级业务的运行安全，那么，腾讯云DBS又是如何做到这些的呢？</p><p></p><p></p><h1>二、腾讯云DBS解决方案</h1><p></p><p></p><p>腾讯云DBS是为用户提供连续数据保护、低成本的备份服务，DBS拥有一套完整的数据备份和数据恢复解决方案，具备实时增量备份以及快速的数据恢复能力，它可以为多种部署形态的数据库提供强有力的保护，包括企业 IDC 数据中心、其他云厂商及腾讯公有云。</p><p>在此次和富途的深度合作中，腾讯云DBS从客户的实际需求出发，为客户提供了更安全、更高效、易管理、可监控的一体化备份恢复解决方案。</p><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/28/282510ceafe0d0b1d723dfca2b14f174.png\" /></p><p>图 腾讯云DBS架构</p><p></p><p></p><h1>更安全</h1><p></p><p>支持传输安全的数据灾备，提高金融级业务的容灾阈值</p><p></p><p>业务的连续性与可用性是证券行业关注的重中之重，富途也不例外。对于核心业务而言，哪怕是极短时间的故障、停机，所造成的数据丢失都会给企业带来巨大的风险和冲击。因此，富途决定尽快构建一套安全、可靠的数据云上备份方案，从而进一步提高线上业务的容灾阈值，最大程度地保障企业信息与个人用户隐私安全。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/cc/cca4bdc1b94ea9a922613e5fc1c227c5.png\" /></p><p>图 富途证券的数据备份场景</p><p></p><p>富途在本地自建IDC中拥有大量数据库实例，这些大规模实例都需要上云备份容灾。基于此，腾讯云DBS提供了一套完整的数据备份和数据恢复解决方案，帮助富途将本地实例批量备份至云上进行同步存储，提高数据安全性。同时，DBS还支持一键恢复至云上数据库，当本地业务宕机时，可通过快速恢复实现云上业务临时接管，提供连续、稳定的数据备份保障。</p><p></p><p>那对于如此大批量的核心业务数据，在备份过程中，数据安全又是如何得到保障的呢？</p><p></p><p>腾讯云DBS主要从传输安全和存储安全两个方面出发，为数据安全保驾护航。</p><p></p><p>（1）在传输安全方面，腾讯云DBS支持备份数据传输链路和恢复数据传输链路的SSL加密，保证了源数据库与DBS之间的数据传输安全。</p><p>（2）在存储安全方面，腾讯云DBS将备份数据同步存储在腾讯云对象存储COS中，数据持久性可达99.9999999999%，充分满足金融级数据的安全要求的同时，帮助用户实现高性价比的备份存储方案。此外，腾讯云DBS还支持内置加密存储与KMS加密存储两种存储加密方式，客户可使用COS主密钥或KMS中的自建密钥对数据进行AES-256加密，进一步保障备份数据的存储安全。</p><p></p><p></p><h1>可监控</h1><p></p><p>平台操作可追溯，异常状态及时告警</p><p></p><p>对于金融级业务而言，平台操作的监管与追溯尤为重要。在和腾讯云DBS的沟通过程中，富途多次提出备份操作安全可控的重要性，希望能够严格把控核心业务信息的触达权限，始终将数据安全放在第一位。从操作安全性来看，面对企业内部多角色协作管理备份任务的场景，如何控制不同角色的访问和操作权限，并快速、准确地定位到历史操作人？从备份数据的安全性来看，对于承载着业务机密与重要用户信息的金融级数据而言，又该如何防范备份数据的恶意下载与泄露风险？</p><p></p><p>富途的业务诉求推动着腾讯云DBS不断进行能力提升，一方面，腾讯云DBS通过CAM提供精细化的权限管理功能，层层把控子用户的操作权限；另一方面，腾讯云DBS有针对性地提供了操作审计、下载限制和事件告警等功能，帮助客户管理并追溯平台操作，及时发现风险行为。</p><p></p><p>操作审计：DBS支持对备份任务的相关操作进行记录并提供操作日志，以便企业管理人员查询哪些员工操作过DBS的备份任务及对应详情，进一步加强对备份数据的安全管理。下载限制：创建下载任务时支持设置下载URL有效期和下载文件加/解密密码，并支持限制指定IP的用户才可下载，进一步保障数据安全。事件告警：通过腾讯云事件总线监控数据备份任务和数据恢复任务的状态，当任务异常时，上报警告，及时通知用户采取措施。事件总线支持所有腾讯云产品进行事件监控，方便客户对所有产品进行统一管理。</p><p><img src=\"https://static001.geekbang.org/infoq/46/4643b60abee4cce080c774282bdd09cd.png\" /></p><p>图 腾讯云DBS提供丰富的监控手段，加固备份安全防线</p><p></p><h1>更高效</h1><p></p><p>技术升级助力高效备份，做到业务零感知</p><p></p><p>作为服务千万投资者的证券公司，富途拥有海量核心业务数据，因此对备份效率和数据传输速度提出了更高的要求，也需要一种更为灵活的备份策略。</p><p></p><p>「一次备份耗费太多时间」、「每天进行全量备份成本吃不消」……针对富途在生产上会遇到的现实且棘手的问题，腾讯云DBS交出了全量与增量备份灵活配合的答卷，帮助富途在不影响线上业务的前提下，敏捷、高效地完成备份任务。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/bc/bce9b8498700016195ba7eb6cf3e026c.png\" /></p><p>图 腾讯云DBS支持完整的备份集恢复方案</p><p></p><p>在实际备份中，富途灵活地配合使用了全量备份以及量级小、速度快的增量备份，确保业务能恢复到秒级别的任意时间点，在最大限度地降低数据丢失风险的同时，有效地节约了存储成本。</p><p></p><p>「不影响用户线上的使用体验与操作安全」是富途开展备份业务的大前提，而传统的备份方案多使用有锁备份方案，在导出导入阶段会加短暂的（秒级）全局锁（FTWRL），无法做到业务无感。为了保障富途线上业务不受影响，腾讯云DBS通过技术攻坚，实现了无锁备份方案，通过改写实现操作幂等性，进而保证最终数据一致性，确保DBS对业务系统影响最小化。</p><p></p><p></p><h1>易管理</h1><p></p><p>一次接入永久自动化管理，对抗误操作风险</p><p></p><p>对于本地大规模的数据库实例，富途一直在探索高效、安全的数据备份方案。若通过手动投递的方式完成，主要存在两方面的风险：</p><p></p><p>（1）众多备份策略难管理。针对不同的业务数据实例，DBA需要一对一地制定备份策略，并及时监控备份进度，而这大幅提升了管理上的难度。</p><p>（2）紧急恢复误操作风险大。面对大量的备份任务和备份数据，当业务出现故障急需快速恢复时，也可能会因为备份规则的不清晰，无法精准找到需要恢复的数据，从而给线上业务带来不必要的损失。</p><p></p><p>为了规避以上操作风险，富途将目光转向云上的SaaS平台，希望借助腾讯云的技术能力完成备份任务的统一管理。腾讯云DBS通过以下三个关键措施，成功助力富途完成备份计划流程化管理工作。</p><p></p><p>快速配置：客户在第一次接入时只需简单几步配置备份周期、备份开始时间等相关信息，仅需几分钟即可完成备份计划的接入配置，后续DBS平台会按照设定的规则定时开启备份任务，全流程自动化执行，无需人为干预。便捷管理：客户通过可视化界面即可监控备份结果，并在需要时通过平台进行数据库的恢复。相比云下的备份方式，DBS大大简化了备份任务的管理难度，降低了误操作的风险。大盘概览：DBS提供全维度的备份任务监控大盘，帮助客户快速掌握云上备份现状与备份性能。</p><p><img src=\"https://static001.geekbang.org/infoq/0d/0d1e3182e18d13b3d55a84c402881bb0.png\" /></p><p>图 腾讯云DBS备份计划配置流程</p><p>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;</p><p></p><h1>三、结语</h1><p></p><p></p><p>凭借着对互联网产品和技术有着深刻的积累和理解，富途证券坚定地履行着用户至上的理念，一步步夯实线上业务的安全基座，致力于为用户提供更安全可靠的服务。在相互的信任与配合下，腾讯云DBS与富途证券合力完成了全云化数据备份解决方案。目前，富途证券的全量数据库实例已完成上云备份，这是证券行业构建数据灾备体系的一次成功案例，也对行业构建全云化备份方案的应用和推广具有标杆意义。</p><p></p><p>除了本次富途证券使用的本地IDC备份场景外，腾讯云DBS还提供混合云备份与跨云厂商备份方案，能够帮助客户将来自其他云厂商数据库、腾讯云公有云数据库、腾讯云私有云等多种部署形态的数据库统一备份上云，为客户提供全方位的备份与恢复解决方案。</p><p></p><p>&nbsp; &nbsp; &nbsp; &nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/fb/fb586bed25e0ed813ec1b52a1e8c3e34.png\" /></p><p>图 腾讯云DBS丰富的备份场景与备份方案</p><p></p><p>作为兼容云上云下的统一备份服务平台，腾讯云DBS还能够灵活地满足客户的不同需求，提供SaaS化的场景赋能。</p><p></p><p>应急恢复：在富途对数据安全的整体布局下，此次腾讯云DBS为富途提供了在业务异常时快速构建云上实例的恢复方案，进一步提升了业务的应急容灾能力。等保合规：等级保护标准对数据备份、灾难恢复等方面均提出要求，腾讯云DBS拥有强大的云上容灾能力，能够满足数据实时异地备份、重要数据快速恢复等要求，帮助客户打造满足等保要求的高性能备份恢复解决方案。长期归档：对于有长期归档需求的客户而言，腾讯云DBS拥有高效的数据压缩手段和灵活的分级存储策略，能够在满足合规需求的同时，帮助客户进一步降低数据上云的存储成本。</p><p>​</p><p>未来，腾讯云DBS将继续致力于为客户提供更贴合业务诉求的备份服务解决方案，帮助更多客户筑牢安全防线，提升业务效能。</p>",
    "publish_time": "2022-12-26 14:36:55",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "谷歌新绩效考核流程细节披露，低绩效评级压力陡增，高评级越来越难，员工称感到痛苦和愤怒",
    "url": "https://www.infoq.cn/article/8I5RzyMKJPFWelLTMuuH",
    "summary": "<p></p><p>谷歌员工们表示，面对全行业裁员的恶劣态势，新制度已经造成“很多痛苦和愤怒”。</p><p></p><h2>谷歌高管介绍新绩效评级流程细节</h2><p></p><p></p><p>根据内部消息，在明年启动的新绩效评估制度下，将有更多谷歌员工承受低绩效评级压力，能获得高评级的比例则相应减少。</p><p></p><p>在最近的谷歌全体会议以及上周的单独演讲中，公司高管们介绍了新绩效评级流程的更多细节。在新制度下，谷歌估计全职员工中将有6%被列入低评级，意味着他们将面临更高的“纠错”风险；此前这一比例仅为2%。同时，获得高评级也将更加困难：谷歌预计，只有22%的员工能够获得最高两项评级之一，低于之前的27%。</p><p></p><p>例如，要想成功跻身“变革性影响者”这一最高新评分，员工必须“实现几乎不可能的目标”并做出“超出我们想象极限”的贡献。</p><p></p><p>今年早些时候，谷歌已经公布过一次新绩效评估流程，名为Google Reviews and Development，简称GRAD。</p><p></p><p>5 月，谷歌 CEO Sundar Pichai 在公司会议上宣布谷歌将开始使用名为 GRAD 的新绩效评估流程。GRAD 是谷歌员工评述与发展（Googler Reviews and Development）的缩写。谷歌将绩效评估减少到一年一次，同时把更多的评估责任交给主管，而不是严重依赖同级同事评审（peer reviews）。</p><p></p><p>原本绩效改革的目的是为了让一些有才华的员工将注意力从“组织文书来证明自己应该被升职加薪”，转移到“发展业务并增强自身影响力”上。没想到，这个系统变成了谷歌的“裁员利器”。</p><p></p><p>随着年底截止日期的临近，越来越多员工抱怨GRAD存在程序和技术问题，他们担心自己在这套体系下得不到准确的评级。科技行业的裁员浪潮也加剧了谷歌人的焦虑。虽然谷歌截至目前还没有像Meta等其他科技公司那样大规模裁员，但员工仍担心裁撤的大斧会“砍到”自己头上。</p><p></p><p>在去年12月关于裁员问题的全体会议上，员工对高管们表达了失望。谷歌管理层长期以来一直吹捧透明领导，但却并没有直接回应关于保留多少员工的提问。有人认为新的绩效考核制度，很可能就是谷歌的一种裁员手段。</p><p></p><p>整个2022年下半年，谷歌员工们一直关注公司打算保留多少人力。CEO Sundar&nbsp;Pichai从9月开始感到业务压力加大，需要为谷歌在经历多年高速增长之后、突然陷入被动的现实找个合理的解释。高管当时就表示会有小幅裁员，而且不排除大规模精简。</p><p></p><p>而在11月的一次全体会议上，有员工要求高管澄清人力调整计划，甚至询问2022年第三季度谷歌员工同比增长24%是否属于高层管理不当。</p><p></p><p>截至今年第三季度，公司雇佣了186779名全职员工。同时，谷歌的外包商数量也与全职员工基本相当。</p><p></p><p>近期关于GRAD的文件还提出，谷歌将考虑调整奖金、薪酬和股权，预计“在整体薪酬当中花费更多人均费用。”一位知情人士表示，该公司仍打算把薪酬水平控制在行业前5%到10%的水平。</p><p></p><h2>“很多痛苦和愤怒”</h2><p></p><p></p><p>根据会议音频，在谷歌于12月8日召开的最近一次全体会议上，员工们主要关注的问题大多跟年终绩效评定有关。这些问题还表明，部分员工已经不相信公司领导层在裁员问题上能继续保持透明。</p><p></p><p>Pichai大声读出了一位员工的问题，“为什么谷歌要在截止日期的几天前，才匆忙把「员工改进建议」的硬性比例塞给基层经理？这五年多我在谷歌经历了很多，但这才是真正的至暗时刻。”</p><p></p><p>另一名员工问道，“很多「员工改进建议」都是在最后一刻才确定，似乎是为了满足上面下达的硬性指标。这造成了很多痛苦和愤怒。大家只有两个礼拜时间来做出纠正，这样的反馈还有什么意义？我们怎么防止未来再次发生这种状况？”</p><p></p><p>另一位员工的问题也得到广泛认同，“「员工改进建议」的实施流程让人难以理解，也越来越成为谷歌员工压力和焦虑和来源。这个问题在当前经济形势和裁员谣言的冲击下显得愈发严重。”</p><p></p><p>本月早些时候，有报道称在年底截止日期的最后几天内，员工们开始陆续收到“改进建议”，一般来说收到此建议的人绩效评定往往较低。他们还表示，高管们是在临期之际突然改变了部分流程。</p><p></p><p>谷歌首席人事官Fiona Cicconi最后坦言，“我知道这事影响很大”，并在会上简短承认了GRAD存在的问题。</p><p></p><p>Cicconi承认，“在审核周期末尾才提出「员工改进建议」确实不太好，我们知道得给大家留出时间来吸收反馈并采取行动。而且谷歌员工也应该有足够的时间来处理这些意见，没错。”</p><p></p><p>几名员工还询问高管，对方是不是设定了一定的低绩效配额比例，并打算据此在2023年实施人员裁撤。虽然高管们表示并不存在这样的配额，但员工们明显不太相信。</p><p></p><p>另一个问题提出，谷歌是否正在变成“像亚马逊那样的头部竞争制企业”，也就是用固定配额对员工绩效进行硬性划分。</p><p></p><p>“GRAD流程中的种种不确定性，导致中基层管理者承受着很大的压力，他们被迫传递关于绩效评定的信息”，有时甚至是在强制实施“会引发冲突的项目”。</p><p></p><p>也有问题提到，“整个行业的裁员一直在影响谷歌员工，带来压力、焦虑和倦怠。但谷歌官方却一直未做评论，这又加剧了人们的担忧。公司这边什么时候才愿意正面回应？”</p><p></p><p>但高管们很大程度上还是不愿直接回答问题。CEO Sundar&nbsp;Pichai一直在强调，他也“不知道未来会怎样”。</p><p></p><p>“我们一直在努力做的，就是优先考虑能够做些什么。这样我们才能更好地度过难关，无论未来会发生什么。我们真的不知道未来会怎样，所以很遗憾，我们没法做出前瞻性的承诺。但在过去六、七个月里，作为一家企业，我们一直在尽一切努力、以自己的方式克服时艰。我能说的就只有这么多。”</p><p></p><p>参考链接：</p><p></p><p><a href=\"https://www.cnbc.com/2022/12/22/google-tells-employees-higher-risk-of-low-performance-ratings-in-2023.html\">https://www.cnbc.com/2022/12/22/google-tells-employees-higher-risk-of-low-performance-ratings-in-2023.html</a>\"</p><p></p><p><a href=\"https://www.infoq.cn/article/qQS8ErzXTjKoMu4NJhCJ\">https://www.infoq.cn/article/qQS8ErzXTjKoMu4NJhCJ</a>\"</p><p></p>",
    "publish_time": "2022-12-26 14:44:17",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]