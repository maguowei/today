[
  {
    "title": "上云还是下云，最大挑战是什么？| 对话章文嵩、毕玄、王小瑞",
    "url": "https://www.infoq.cn/article/iMdPjPeoKFcs09JcaR30",
    "summary": "<p>近半年来，公有云领域频频发生阿里云、滴滴等平台崩溃事件，与此同时，马斯克的“X 下云省钱”言论引起了广泛关注，一时间，“上云”和“下云”成为热议话题。</p><p></p><p>在最近举办的 AutoMQ 云原生创新论坛上，AutoMQ 联合创始人兼 CEO 王小瑞作为圆桌主持人，与 AutoMQ 联合创始人兼 CSO 章文嵩、贝联珠贯创始人兼 CEO 林昊（毕玄）两位技术大咖，围绕上云与下云的趋势之争，以及面临的挑战展开思想碰撞。</p><p></p><p></p><h4>Q1：云厂商的营收一路飙升，但同时又听到各种下云的案例，比如推特下云节省了 60% 的成本，未来趋势是什么？</h4><p></p><p></p><p>章文嵩：我觉得上云肯定是大势所趋。因为云是给客户创造价值的，就云计算的本质来说是资源的聚合与复用，通过超卖的方式实现成本的降低，从而帮助客户实现成本节省，同时也为云厂商创造盈利机会。以一个简单的例子来说明，原本 A 用户和 B 用户分别在白天和晚上使用机器，每个时段都需要花费一个单位的成本。然而，云厂商的出现让 A 和 B 都不再需要购买机器，而是通过租赁的方式，付给云厂商较低的费用如 0.6，使得云厂商的收入 1.2 超过了 1 个单位的成本，实现了盈利，客户也省钱了。通过错峰使用，A 用户和 B 用户仍然可能没有消耗掉全部的计算资源，云厂商有机会还能将未使用的资源卖给其他用户，实现了资源的高效复用。另外还有研发资源的复用，随着系统规模的增大，边际成本降低，云计算成为一个能够持续创造价值的解决方案。</p><p></p><p>比如美国的一份报告说明，在所有的 IT 支出里面，2022 年美国云计算的渗透率将近 10%，而 Gartner 预测到 2026 年，这一比例将上升至 20%。在中国，尽管 SaaS 行业发展尚未成熟，但 IaaS 和 PaaS 模式已经在云厂商中得到广泛应用。以阿里云为例，过去两年一直保持盈利，阿里云所有云资源的收入加在一块，大概是一年 1000 亿左右，阿里云市场份额占比 30%-40%，整个中国云市场的规模约为 3000 亿。通过工信部公布的中国整体 IT 行业的收入 10 万亿，可以得知中国云市场渗透率大概 3% 。</p><p></p><p>当然中国未来 SaaS 空间会很大，所以美国如果四五年后达到 20% 的云渗透率，那中国有可能到 10% 以上的渗透率，未来 50% 甚至 70% 以上的渗透率，所以我觉得上云是大势所趋。</p><p></p><p>毕玄：创业后，我接触到了更真实的情况。以前代表阿里云拜访客户时，客户因我可能促使他们购买更多阿里云产品而避免说实话。现在作为中立方，客户更愿意分享真实想法。从整体趋势上来看，我坚信云计算有巨大增长空间。尽管中国云市场增速下降，甚至阿里云是比前两年有下滑，但这有很多综合原因，总体上我觉得云肯定还会继续增长。</p><p></p><p>许多公司衡量云成本的方法很简单，即比较线下机器支出和搬到云上的费用。但考虑到人工成本，难以简单对比。大公司即使迁移到云上，人工成本仍然存在，因基础设施管理人员短期内难裁员。我之前跟某互联网头部公司的人聊到底是要往云上搬，还是继续保持自建的话题，核心还是要搬到云上，充分发挥云的弹性，而不是静态使用。</p><p></p><p>纯静态用对大公司来讲成本难以平衡。弹性使用云，尤其是按量计费，就像现在中国按量计费比包年包月其实单价贵很多。在折扣谈判中，按量付费和包年包月分开谈，通常包年包月方案能获得更低的折扣，因为按量收入不确定性较大。</p><p></p><p>另外一个问题是中国的按量错峰效应不够明显，云厂商对此不太热衷。尽管按量计费可能增加成本，但之前通过推演，我们发现在折扣谈判后，每天使用 8 小时左右能够实现成本打平。</p><p></p><p>一些大公司进行了假设推演，从线下切换到按量计费和完全弹性系统，能显著节省成本。然而，由于技术改造较多，很多公司不愿采用这种方式，但我认为这是技术的趋势，很多公司一定会越来越弹性。</p><p></p><p>对于大部分中小企业而言，云计算的灵活性比成本更为重要，因此它们更自然地采用云服务。从成本角度来看，随着技术的演进，整体用云的成本将逐渐降低，比自建更具优势。同时，云计算的应用不断增加也是因为壁垒的存在。在 AI 时代，大多数企业首选使用云而不是自建，因为自建的门槛较高，而云服务为业务快速创新提供了重要支持。</p><p></p><p>章文嵩老师补充 : 云厂商的核心追求指标是超卖率，因为超卖率是能够真正提高整个业务的经营效率。如果客户愿意购买包年包月，但又因为在一年 365 天中，很多时间客户并不需要使用这些资源，实际上增加了云厂商的利润。关键在于客户要有弹性，根据需求变化使用云，以节省成本，而不是根据峰值去保留资源。</p><p></p><p>在上云方面，我这边是有个规模公式的，当基础设施规模较小时，在云上购买资源非常便宜；但随着基础设施规模的增大，成本上升的速率略有增加。自建的成本虽然一开始较高，但随着规模的增大，其斜率逐渐降低。两种模式的斜率不同，必然存在一个交叉点。在这个交叉点左侧，规模较小的情况下，使用云的成本较低，而自建的成本较高。然而，当规模超过一定阈值时，由于自建的起点较高但斜率较低，自建可能更加划算。云厂商针对交叉点右侧提供让利打折的机会，因为对于云厂商来说，已经投入的人力和各方面成本会随规模的进一步扩大而降低，使得边际成本更低。</p><p></p><p>回到 Twitter 事例，Twitter 原来有三个数据中心，波特兰、Sacramento 和亚特兰大，应该做了类似的三活。马斯克挑战团队在仅六天内把三个数据中心缩减为两个节点，结果在平安夜他与工程师们直接关闭了位于 Sacramento 的一个数据中心，通过货车把服务器拉到波特兰数据中心。现在应该是双活架构，波特兰数据中心的服务器就富裕出来，把云上的资源优化并迁移了一部分到波特兰数据中心中，这一举措实现了约 10 亿美元的巨额成本节约，但他更多的成本节约主要来自人力资源方面。将员工数量从 8000 人裁减至 2000 人，美国工程师平均年薪 30 万美元，裁员的工资节约了近 18 亿美元，所以在总体运营成本上取得了显著的 60% 节约。然而，有些文章直接写 Twitter 下云节省 60% 了云资源成本，媒体的这个表达不正确，也容易误导观众。</p><p></p><p></p><h4>Q2：云计算巨头都曾发生过大规模故障，公有云不稳定？</h4><p></p><p></p><p>章文嵩：作为曾在阿里云工作多年的前员工，我找相关同学了解到，故障的根本原因在于一个全局鉴权服务存在软件缺陷，导致正常鉴权请求被拒绝，而且没有很好的故障恢复预案。虽然有时候故障不可避免，但云厂商确实还有很多改进空间。</p><p></p><p>首先，像全局依赖的中心系统应该是多区域多活的。当一个区域发生故障时，不应该影响其他区域的服务，流量应该迅速转移到其他可用的区域。这种架构可以最大程度地减少单点故障带来的影响。另外，即便是软件缺陷，我们也需要有充分的预案。在多个区域同时因为软件缺陷而宕机时，我们应该能够快速将其重启并拉起，以缩短止损时间。另外，提前演练这些预案是至关重要的，当触发潜在的软件缺陷时，有了相应的预案，一旦出现问题，重启就能够快速恢复服务。而不是在事发现场去查找问题，浪费宝贵的时间。</p><p></p><p>另外，我认为云厂商也会因为这些不可靠的故障而承担一定代价的。通常，云厂商们都会按照一定的规则进行赔付，一般是不可用时长大概是 100 倍赔付规则，他们也会不断改进，避免再次陷入相同的故障。</p><p></p><p>我相信随着云技术的不断改进，云系统会变得越来越可靠。云厂商的技术能力和系统可靠性在各方面都远远高于自建系统。一般情况下，自建系统可能规模较小，故障发生时都不太引人注意，但云厂商由于有大量客户在上面使用，故障的影响就更加显著。然而，正是因为有这么多的客户在不断使用云服务，云系统会得到更多的锤炼，变得越来越可靠。而且一定会比自建的系统可靠性高非常多倍，这是毋庸置疑的。</p><p></p><p>毕玄：对于故障问题，我认为云厂商相对来说故障次数要比自建系统更少。但云厂商通常因为集中化的特性，一次故障的影响面较大。相比之下，自建系统的故障可能并不为人所知，实际上累积的故障次数比云厂商会更多。</p><p></p><p>总体而言，我认为用云是更好的选择。这实际上是一个自有团队的问题。许多公司还会选择使用云厂商 PaaS 的服务，因为很难找到具有专业技能的人才。在中国，从事基础设施技术的工程师数量相对较少，人才储备有限。这类人才通常待遇较高，我接触到的很多中小型客户群体，他们希望由专业公司提供服务，而不是自己搭建，因为自己搭建的话，一方面做不好，另一方面人才难以留住，这是一个非常现实的问题。</p><p></p><p>因此，我认为在这些方面，云厂商的壁垒会越来越高。至于稳定性这个话题，没人敢说永远不会发生故障的。实际上，所有云厂商都曾出过严重的故障，没有一家例外，只是影响的程度取决于客户规模的大小。有时候我们会看到，阿里云发生故障时，有人回应说另一家云更好，也有人回应说另一家云可能存在更多问题，只是你不知道而已。总的来说，我相信云厂商的人才密度会更好，因此我也认为使用云服务总体上会更安全、更稳定。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/b9/b98fb935a7e8f058f358135c7b25a1bc.png\" /></p><p></p><p></p><h4>Q3：如何做云上的成本治理，最优路径是什么？</h4><p></p><p></p><p>毕玄：从我接触的一些客户来看，许多企业在迁移到云平台后往往对云成本一无所知，尤其是大型集团公司。相较于繁琐的 IDC 流程，云的便利性导致一些公司对于机器的创建者和用途一无所知。因此，首次迁移到云上时，许多公司可能简单地将资源放上去，但缺乏对资源创建和用途的了解。这可能导致付费后公司在月底账单出来时才发现一些资源的存在，无法追溯。尽管这些费用必须支付给云厂商，但实时监控账单变化对成本管理至关重要。</p><p></p><p>另外，我们认为在云上有很多复杂的用法，而许多公司目前还无法很好地应对。例如，资源包是一种优化成本的方式，实际上，在采购资源包的情况下，可能比原来的折扣更便宜。资源包的本质是为你提前准备好一些资源，当然，这需要一些算法，但技术含量并不是很高。有些公司购买存储资源包，就像购买手机流量一样，预先准备了一定量的资源，而这个资源在购买后必须在下个月内使用，否则不能退款。但如果公司确信能够充分利用这些资源，那么这笔钱肯定比折扣更便宜。</p><p></p><p>我们知道对于很多公司来说，更省钱的方式是大量启用弹性化的机制，就像许多公司采用无服务器架构（Serverless）的方式一样。当然，这涉及许多新技术的投入，在一些公司中推动这一点可能并不那么容易。虽然这可以大幅降低成本，但要将其推广并真正应用到实践中是一项庞大的工程。相比之下，之前提到的改变采购策略、调整策略等相对来说更为简单，只需要进行一些调整即可。</p><p></p><p>此外，公司还需要了解成本结构。在过去，成本分析可能并不被认为是非常重要的事项，但我们最近与一些金融、汽车等行业的客户进行合作时发现，他们非常关心集团公司的资金花在哪些部门，这些部门的业务情况，比如与业务 ROI 是否对齐。我们提到 IBM 之前收购的一家公司，主要做是做成本分析和分摊，以及与业务挂钩。例如，如果一个业务的目标是每日活跃用户（DAU），它将查看 DAU 的增长情况以及当月的 IT 支出变化情况，如果没有达到预期，管理层将进行问责。因此，这种产品在国外非常受欢迎。</p><p></p><p>在中国，企业逐渐关注业务状态，对 ROI 等因素越发在意。对于 IT 结构，我将其分为业务系统、大数据和人工智能（AI）三类。业务系统的优化方案往往与业务方的具体情况紧密相关，涉及较大的实施代价。而大数据和 AI 在降成本方面展现出通用方案的可能性，这也是我们公司（贝联珠贯）主要专注的领域。在大数据方面，我们公司产品能帮客户降低 30%-40% 成本，AI 方面虽然目前降成本效果有限，但通用方案已实现 10% 的成本降低。</p><p></p><p>总体而言，大部分公司目前最大的 IT 投入是业务系统，而大数据和 AI 投入较大的主要是头部公司。尽管大数据和 AI 很热门，但在 IT 支出上占据更高比例还需要时间。因此，我认为业务系统优化应根据实际情况进行。</p><p></p><p>章文嵩：我有一个想法，除了明确成本，更重要的是将其与公司业务深度结合。以淘宝为例，作为一个买卖交易平台，其核心是交易。我们是否能算出每一笔交易的 IT 支出？比如通过计算一个月内的所有 IT 支出以及完成的订单数量，我们可以得知每一笔交易的成本。</p><p></p><p>对于滴滴这样的出行平台，同样适用。它是一个撮合交易的平台，供需匹配也是其中的一环。我们可以计算每一笔交易的平均成本是多少钱。对于视频网站，观众每分钟观看视频，我们花费了多少钱呢？这实际上是可以提炼出来的，将其与业务深度结合，老板们更容易理解。</p><p></p><p>比如，淘宝的客单价是多少？假设是 200 多块钱。而我们只花了几分钱的 IT 成本。其中的成本结构是什么样的？是谁支付的？过去与现在相比，哪些地方可以不断优化，持续降低运营成本？另一方面，例如从单活变为双活，这是增加的新投资，所有这些都需要清晰阐述。实际上，将成本结构与业务深度结合，不仅有助于运营优化，而且对于公司的客户沟通也非常有帮助。我在淘宝和滴滴的经验告诉我，通过将账单与核心业务本质结合，管理者能够清晰地理解 IT 成本和业务的关系。这确实是一种非常有效的方法。</p><p></p><p></p><h4>Q4：如何确保系统的最终成本与业务保持一致？</h4><p></p><p></p><p>章文嵩：弹性是最关键的，系统能不能有随着业务需求进行弹性的能力？因为任何一家公司的业务需求都不是全天候平稳的，会有早晚高峰，甚至午休时的购物高峰。因此，如果我们按照需求曲线的最高点来分配资源，显然是不划算的，因为我们会为闲置的资源花费大量的资金。最理想的情况是，根据需求曲线的波动，我们的花费能够完全匹配需求曲线下的面积。</p><p></p><p>实际上，这需要弹性，而弹性的能力并非易事，需要有一些共性的组件。如果每家公司都自己做弹性，涉及研发的方方面面，需要大量投入。然而，不同的企业，比如 A 企业和 B 企业，在弹性方面需要的一些公共组件是相似的。如果有一家企业已经实现了这些组件，那么 A 企业和 B 企业可以复用，这提高了效率。同时，做这些组件复用的企业也能够获利，因为它可以服务多家客户。每家公司实际上只需在某些模块上进行弹性改造，而不必对所有东西都进行改造。比如，像我们 AutoMQ 云原生的 Kafka，它在第一天就天然具备弹性，能够随着业务规模或云数仓自动伸缩，这样的组件是非常好的云原生创业机会。</p><p></p><p>在云上部署时，为了获得弹性，我们要尽可能地复用一些标准组件，这对研发方面的投入是最低的，效率是最高的。当然，像之前提到的 Spot 实例，由于它们的特点是云厂商的库存资源，价格较低，但这样的 Spot 实例是随时可能被回收的。因此，如果应用程序能够适应，可能采用无状态的 Serverless 架构是一个解决方案，即使被回收了也没关系，其他地方可以接管过来。这实际上对应用程序提出了更高的要求，但在一些情况下，利用 Spot 实例这样的资源是可行的。</p><p></p><p>毕玄：以前我在阿里带中间件团队的时候，我们一直在找降低成本的方向。给管理层汇报对于我们来说是一个很重要的任务，因为要说服管理层进行技术投入是非常重要的。从 2017 年左右，成本就成为我们的核心议题。就像正明（章文嵩）刚刚提到的，高层看待成本的指标就是——阿里的 1000 笔交易成本，也就是每完成 1000 笔交易，今年花了多少钱，明年花多少钱，后年花多少钱，他们只会问你这个问题。至于成本背后的含义，你可以有很多种理由，比如解释成本高的原因是我前面有一群人，交易效率不行，他们要更多的精细化运营等等，所以导致我要投更多机器。老板不会关心这些东西，他只关心你到底怎么给我降下去，方案是什么？所以过去我们在这方面每年都受到很大的挑战，这种偏业务型的指标确实挺好。</p><p></p><p>此外，现在实施成本控制的方案，我认为在云上，弹性一定是永远的第一方案。因为你要回答高层的另一个问题，成本到底做到什么叫合理？如果你解释不清楚这个问题，那这个成本就永远都可以降，对老板来讲你觉得投 10 亿合理，老板说 10 亿太多，投 1 亿，这个是要有逻辑的，你需要向老板证明，如果我们每天的业务请求量是这样的，我所需的成本就是这个请求量覆盖的面积，这笔钱是必须花的。</p><p></p><p>以前我们做中间件，这就是成本优化能做到的极致。这个极致从现在的技术表现上来看就是 Serverless，只不过 Serverless 现在要做到偏在线型的应用，全部 Serverless 化还是有相当大距离的。</p><p></p><p>我们在阿里曾经推演过，如果我们只为面积付费，我们单笔交易成本应该能降到现在的 1/10。所以按照这个你推演了一个极致，老板每年就对你都不满意了，因为老板按照我们的逻辑推演后认为，成本应该降到现在的 1/10 才是合理的。我们明白技术上存在各种问题，所以现在 Serverless 肯定是大趋势。然而，观察当前的 Serverless，主要由云厂商和中立厂商提供，为大家设计了通用的 Serverless 方案。在这个 Serverless 的背后，可能是采用了按量付费的机器，很多创业公司和国外的成本优化公司采用类似的逻辑，先将应用投放到 Spot Instance 上运行，然后不够了再切换到按量付费，最后才考虑包年包月。这三层逻辑关系在国外为什么能够实现折扣券的存在呢？我们认为是因为国外许多应用的整体 IT 水平相对更高，业务的无状态能力更强，更容易进行迁移。在大数据和人工智能领域，许多公司背后都是通过大量使用这种逻辑来实现的，实际上，他们屏蔽了这一切，不需要你知道 Spot、按量、包年包月的背后逻辑，他们将这些逻辑完全封闭，卖给你时你觉得价格更便宜，但实际上他们仍然具有竞争优势。</p><p></p><p>在这三层逻辑基础上，我们觉得是还可以加另外一个逻辑的，另外一个逻辑就是我们以前在阿里做的混部。在很多公司推行这个方案时，我们采用了类似国外公司的弹性策略，先 Spot，再按量，再包年包月。我们的逻辑是先混部，再 Spot，再按量，最后是包年包月。这是因为混部相当于价格是 0，而 Spot 实例是需要支付费用的。另外，Spot 实例的回收可能会导致问题，因为云厂商可能会多次回收实例。我们曾有客户经历被回收了 10 次，而其任务需要连续两个小时完成，无法中断。并非所有任务都支持断点功能，因此它如果两个小时之内被收回掉了，再购买一个 Spot Instance，在重来了 10 次以后它那个价格比按量和包年包月还高，所以这个时候你要处理很多乱七八糟的问题，包括跟云厂商，甚至有商务谈判等等，这种都不一定是技术问题。</p><p></p><p>所以我们认为，实际上在技术层面，如果你按照这个方案推进，选择一个第三方或者具有研发投入能力的公司，我们觉得也可以自己投资。我们与一家大型公司合作，按照这个逻辑进行四层弹性方案，就像我刚刚说的混部 -Spot- 按量 - 包年包月，他们实施了这个方案，一年应该省下近 3000 万，按照这个方案推进，当然这可能需要一些业务投入。</p><p></p><p></p><h4>Q5：对既有自建机房又使用云资源的大型互联网公司（小红书、快手）的建议？自建机房需要哪些组织能力和团队建设能力？</h4><p></p><p></p><p>章文嵩：自建的基础设施服务需要相应的研发投入。之前提到的自建和云服务的成本的交叉点，云厂商可以通过让利来提高吸引力。比如以一个拥有 5 万台服务器的互联网服务为例，考虑到硬件、托管和网络带宽资源等成本，每台机器年均花费约 2 万元，总计约 10 亿元。然而，自建还需要额外投入构建分布式系统、操作系统和数据库等，以及维护一个六七百人的研发团队，人员成本高达 5 亿。</p><p></p><p>对比阿里云的规模，其年收入约 1000 亿元，阿里云应该是 2 万人，人员的成本估计要花掉 200 多亿，机器成本约占据 6、700 亿元，毛利约 300 亿元。如果扣除市场营销、人工成本费用，这个业务还是赚钱的，赚的不多，200 多亿人员成本对应一年六七百亿基础设施支出，阿里云是很有规模优势的，还有产品服务丰富度的优势。</p><p></p><p>对于规模较大的互联网企业，比如 5 万台、 10 万台机器，云厂商应对于这种体量的互联网用户，应该用这样的策略，了解他的成本结构，给他一个无法拒绝的 Offer。比如云厂商知道企业自建的成本结果是 15 亿，给企业 12 亿元的价格。这样对云厂商来说，规模采购会有一些成本的节约。此外，对于人员成本，如果云厂商能够保持较低的增长，尤其是在已有研发基地的情况下，也可以在整体利润中获得优势。</p><p></p><p>所以，自建的成本很高且对社会无益，因为云厂商已经做得比自建要好。除非你的体量能达到百万台的机器规模，那就自建。</p><p></p><p>毕玄：正如正明（章文嵩）所指出的，自建成本是许多公司在构建基础设施时面临的重大挑战。小红书等公司目前仍主要依赖云服务，这仅是考虑中的一种方案。相比之下，快手采用了大量自建，而云厂商若能真正影响中国头部互联网公司，其增长将是显著的，因为头部公司基本上都未完全迁移到云上。</p><p></p><p>即便是头部互联网公司，如快手、美团、滴滴，虽然主要是自建基础设施，但也在一定程度上使用云服务。然而，这几家公司已经是中国顶级的互联网公司了，但自建团队仍然是一个复杂的问题，需要体系化的团队，而不仅仅是雇佣一两个人，还有 IDC 选址、服务器、网络、芯片等多方面的人才需求等问题。</p><p></p><p>自建机房遇到的第一个问题是招不到人，即便明确知道需要招聘哪些人才，但实际面临的招聘难度非常大。以操作系统为例，拥有这方面经验的人才相对稀缺，而且他们多分布在大型科技公司中。招聘这些人不仅难度大，而且在大型科技公司中跳槽也相对困难。这些公司规模庞大，面临的问题多，因此有更大的发展空间。</p><p></p><p>总体而言，这些公司虽然有足够的财力和意愿进行自建，但实际的执行过程非常痛苦。这凸显了人才密度是一个关键问题，不仅在中国，在国外也是一个有限的资源。</p><p></p><p></p><h4>结束语</h4><p></p><p></p><p>圆桌对话环节在意犹未尽中画上圆满的句号，三位大咖对话涵盖了上云趋势、系统可靠性、成本治理以及下云挑战等关键议题。为业界提供了深刻的见解和实践经验。</p><p></p><p>由章文嵩与王小瑞老师创立的 AutoMQ 公司的 AutoMQ Kafka RC 版本发布了全新特性，包括多云兼容性适配，Spot 实例强制回收容灾、裸设备 WAL 等。也带来了新版本的全新指标，新版本除了有十倍的成本优势外，支持 4 分钟内完成从 0 到 1GiB/s 的极致弹性，同时在追赶读的场景下有读写隔离的天然优势。AutoMQ 即将发布完整的基准测试白皮书，将会揭秘更多的技术指标。欢迎大家体验！</p>",
    "publish_time": "2024-01-18 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Java近期新闻：Spring Shell、Micronaut、JReleaser、JobRunr",
    "url": "https://www.infoq.cn/article/YiXS2KVbcZeCbEq6l2Nh",
    "summary": "<p></p><h4>JDK 23</h4><p></p><p></p><p>JDK 23<a href=\"https://jdk.java.net/23/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">早期构建版本</a>\"的<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-23%2B4?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">Build 4</a>\"已发布，包含了自Build 3以来的<a href=\"https://github.com/openjdk/jdk/compare/jdk-23%2B3...jdk-23%2B4?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">更新内容</a>\"，修复了各种<a href=\"https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2023%20and%20%22resolved%20in%20build%22%20%3D%20b04%20order%20by%20component%2C%20subcomponent&amp;accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">问题</a>\"。关于此版本的更多细节，请查阅<a href=\"https://jdk.java.net/23/release-notes?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">发布说明</a>\"。</p><p></p><p></p><h4>JDK 22</h4><p></p><p></p><p>JDK 22<a href=\"https://jdk.java.net/22/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">早期构建版本</a>\"的<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-22%2B30?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">Build 30</a>\"也已发布，包含了自Build 29以来的<a href=\"https://github.com/openjdk/jdk/compare/jdk-22%2B29...jdk-22%2B30?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">更新内容</a>\"，修复了各种<a href=\"https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2022%20and%20%22resolved%20in%20build%22%20%3D%20b30%20order%20by%20component%2C%20subcomponent&amp;accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">问题</a>\"。关于此版本的更多细节，请查阅<a href=\"https://jdk.java.net/22/release-notes?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">发布说明</a>\"。</p><p></p><p>开发者可以通过<a href=\"https://bugreport.java.com/bugreport/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">Java Bug数据库</a>\"报告<a href=\"https://openjdk.org/projects/jdk/23/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">JDK 23</a>\"和<a href=\"https://openjdk.org/projects/jdk/22/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">JDK 22</a>\"的问题。</p><p></p><p></p><h4>Spring Framework</h4><p></p><p></p><p><a href=\"https://spring.io/projects/spring-shell/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">Spring Shell 3.2.0</a>\"和<a href=\"https://spring.io/blog/2024/01/03/spring-shell-3-1-7-and-3-2-0-are-now-available/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">3.1.7</a>\"已发布，修复了一些显著的错误，例如：<a href=\"https://docs.spring.io/spring-shell/docs/3.2.0/api/org/springframework/shell/boot/ExitCodeAutoConfiguration.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">ExitCodeAutoConfiguration</a>\"类与<a href=\"https://docs.spring.io/spring-shell/docs/3.2.0/api/org/springframework/shell/command/CommandExecution.CommandParserExceptionsException.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">CommandParserExceptionsException</a>\"类不匹配，原因是在Spring Boot 3.2.0和3.2.1之间的运行逻辑发生了变化，异常不再被包装在<a href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/IllegalStateException.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">IllegalStateException</a>\"类中；在使用原生镜像生成应用程序后使用--file命令行选项时，由于运行时反射的配置不完整，会抛出NullPointerException。这两个版本还分别将Spring Boot升级至3.2.1和3.1.7。关于这些版本的更多细节，请查阅<a href=\"https://github.com/spring-projects/spring-shell/releases/tag/v3.2.0?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">3.2.0</a>\"和<a href=\"https://github.com/spring-projects/spring-shell/releases/tag/v3.1.7?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">3.1.7</a>\"的发布说明。</p><p></p><p></p><h4>Micronaut</h4><p></p><p></p><p>Micronaut基金会发布<a href=\"https://micronaut.io/2024/01/05/micronaut-framework-4-2-3-released/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">Micronaut Framework 4.2.3</a>\"，包含<a href=\"https://github.com/micronaut-projects/micronaut-core/releases/tag/v4.2.3?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">Micronaut Core 4.2.3</a>\"、问题修复、依赖项升级以及对模块<a href=\"https://micronaut-projects.github.io/micronaut-aws/latest/guide/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">Micronaut AWS</a>\"和<a href=\"https://micronaut-projects.github.io/micronaut-maven-plugin/latest/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">Micronaut Maven插件</a>\"的更新。显著变更包括：修复<a href=\"https://docs.micronaut.io/snapshot/api/io/micronaut/core/annotation/Generated.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">@Generated</a>\"注解问题，一个同时使用<a href=\"https://docs.micronaut.io/snapshot/api/io/micronaut/http/client/annotation/Client.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">@Client</a>\"注解注解的类不会被内省；改变使用<a href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.compiler/javax/lang/model/type/TypeVariable.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">TypeVariable</a>\"接口来提取类型变量名称的方法，而不是使用toString()。关于此版本的更多细节，请查阅<a href=\"https://github.com/micronaut-projects/micronaut-platform/releases/tag/v4.2.3?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">发布说明</a>\"。</p><p></p><p></p><h4>JReleaser</h4><p></p><p></p><p><a href=\"https://jreleaser.org/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">JReleaser</a>\" 1.10.0已发布，这是一个Java工具，用于简化创建项目发布流程。此版本包含了问题修复、文档改进以及一些显著变更，例如：自动将链接转换为Markdown格式、YAML文件中java.options的内容应该被作为$JAVA_OPTS环境变量的输入，以及将其他元素（如部署器和组装器）的属性添加到生成的JReleaser属性报告中。关于此版本的更多详细信息，请参阅<a href=\"https://github.com/jreleaser/jreleaser/releases/tag/v1.10.0?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">发布说明</a>\"。</p><p></p><p></p><h4>JobRunr</h4><p></p><p></p><p><a href=\"https://www.jobrunr.io/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">JobRunr</a>\" 6.3.4已发布，这是一个用于进行Java后台任务处理（分布式并且由持久存储提供支持）的库。此版本的显著变更包括：在启动多个服务器时，与Micronaut的集成得到了改进；为提高与Quarkus的兼容性，不再使用一个已在Quarkus 3.6中被弃用的方法。关于此版本的更多详细信息，请参阅<a href=\"https://github.com/jobrunr/jobrunr/releases/tag/v6.3.4?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">发布说明</a>\"。</p><p></p><p></p><h4>Java社区</h4><p></p><p></p><p>2023年年底，Oracle高级总监、产品管理和开发者参与部门的<a href=\"https://www.linkedin.com/in/sharatchander/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">Sharat Chander</a>\"发表了一篇文章<a href=\"https://inside.java/2023/12/21/seasons-thanks/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">Tis the season of…Thanks!</a>\"，在文中表达了对Java社区所做贡献的感谢，他写道：</p><p></p><p></p><blockquote>随着年末的临近，我想总结一下开发者社区所做的持续不断的动力，这些努力让Java保持活力。随着Java技术的不断进步，正是你们赋予了它更强大的活力。因此，在假期来临之际，我想代表Oracle的Java开发者关系团队对许多做出贡献和热情参与的人表示感谢、赞赏和认可。</blockquote><p></p><p></p><p>2023年的亮点包括：<a href=\"https://www.devoxx.co.uk/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">Devoxx UK</a>\"（10周年）、<a href=\"https://devoxx.be/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">Devoxx Belgium</a>\"（20周年）、<a href=\"https://devoxx.ma/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">Devoxx Morocco</a>\"（10周年）和<a href=\"https://jfall.nl/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">J-Fall</a>\"（20周年）等会议里程碑纪念日；有18位新加入的<a href=\"https://github.com/aalmiray/java-champions/blob/main/README.adoc?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">Java Champions</a>\"；超过360个Java用户组（JUG），其中第一个JUG，<a href=\"https://www.meetup.com/javasig/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">NYJavaSIG</a>\"，始于1996年；<a href=\"https://dev.java/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">Dev.java</a>\"和<a href=\"https://oraclegroundbreakers.libsyn.com/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">Duke's Corner</a>\"的众多贡献者。</p><p></p><p></p><h4>Apache Camel</h4><p></p><p></p><p>Red Hat高级软件工程师、Apache Camel贡献者<a href=\"https://www.linkedin.com/in/davsclaus/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">Claus Isben</a>\"发表了关于Apache Camel项目和Java社区贡献的年底<a href=\"https://camel.apache.org/blog/2024/01/01/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MDUyOTczMjMsImZpbGVHVUlEIjoiNXhrR296THlubHN2UkxrWCIsImlhdCI6MTcwNTI5NzAyMywiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.G6j5p9jsxxmB_5Jll29iGR1bhd0TnKukelMC9ZK_SWs\">总结</a>\"。亮点包括：33个Camel Core发布版本、13个Camel Quarkus发布版本、7个Camel K发布版本、1021名GitHub贡献者、68078次代码提交、12593个已关闭的PR。</p><p></p><p></p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2024/01/java-news-roundup-jan01-2024/\">https://www.infoq.com/news/2024/01/java-news-roundup-jan01-2024/</a>\"</p>",
    "publish_time": "2024-01-18 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "CV-CUDA： 高性能图像处理库",
    "url": "https://www.infoq.cn/article/hhmFjJP65AQ5XuEGmYdp",
    "summary": "<p>CV-CUDA是NVIDIA和字节跳动AML团队联合开发的图像处理加速库，旨在解决视频和图像的前后处理中遇到的性能瓶颈</p>",
    "publish_time": "2024-01-18 11:08:44",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "降本增效还在继续，为什么超半数制造企业仍加大IT预算？",
    "url": "https://www.infoq.cn/article/ZaKBQBgwSstYqX3ldKyk",
    "summary": "<p>随着技术的迅猛发展和全球市场的竞争升级，中国制造业正处在一个关键的转型阶段。IDC FutureScape 2024 针对这一行业的未来发展，做出了十项重要预测，涉及技术创新、人才、组织架构和可持续发展等。</p><p></p><p>回顾 2023 年，相较于全球制造业市场，中国制造业的发展受到了多方面因素的影响，包括对“新型工业化”的重新关注、出口产品的转变（例如电动汽车、锂电和光伏）、供应链出海、资本市场的收紧，以及工业软件与工业互联网市场的融合。</p><p></p><p>尽管面临挑战，IDC 认为，未来中国制造业数字化市场仍将保持较快增速。据其估算，到 2027 年，中国制造业 IT 市场投资规模将增长至 2554.08 亿美元，五年年复合增长率为 15.5%。尽管年复合增长率的预测数据和去年相比下调了 1.2 个百分点，但中国仍然是全球主要经济体制造业 IT 支出增长速度最高的国家。</p><p></p><p>为深入了解中国制造业数字化转型的当前形势和未来趋势，InfoQ 对 IDC 中国研究经理杜雁泽进行了专访。以下是采访问答的详细内容：</p><p></p><h4>InfoQ：在您看来，2024 年推动中国制造业数字化转型的最主要驱动力将是什么？企业在转型过程中追求的核心目标又是什么？</h4><p></p><p></p><p>杜雁泽：当前中国制造业数字化转型最主要的驱动力仍然是：如何能够满足每一家制造企业自身业务转型升级的需求，从而助力企业提升竞争力。此外，政策对实体制造业的持续支持和服务商的快速成长和不断创新也是重要的驱动力。</p><p></p><p>现阶段我国制造业总体特点是体量大而利润薄，数字化基础相对薄弱。根据 IDC 调研，近几年中国制造企业数字化成熟度持续提升，但与互联网、金融、政府、通信等行业相比仍有差距。因此，当前大多数中国制造企业的核心目标仍然是基础务实的提质降本增效，而增强供应链韧性、节能降碳、助力中国制造出海的需求也在增加。</p><p></p><h4>InfoQ：在制造业的数字化转型过程中，您认为哪些具体技术最为关键？能否举例说明这些技术如何在实际应用中发挥作用？</h4><p></p><p></p><p>杜雁泽：各类工业软件是制造企业数字化转型的关键。工业软件中凝结沉淀了制造企业各个环节的行业 know-how，已经融入在制造企业研产供销服的各个核心业务环节中。</p><p></p><p>通常将工业软件分为设计研发类、运营管理类和生产制造类三大类，设计研发类包括 CAD、CAE、EDA 和 PLM，运营管理类包括 ERP 和 SCP，生产制造类包括 APS、MES、SCADA、PLC 和 DCS。IDC 持续跟踪核心工业软件市场，拿其中的生产制造执行系统 MES 为例，可以综合考虑并协调生产制造相关的人机料法环测等要素，帮助企业制定生产计划，管理生产物料、物流和生产工艺，跟踪生产过程并可进行生产和质量追溯，实现生产过程的提质降本增效，快速响应市场多变的需求；可以减少新产线的建设和投入周期，快速复制提升产能以帮助企业建立优势。</p><p></p><p>随着部分领先的中国制造企业快速发展，传统工业软件也面临对新兴业务形态支撑不足等新的挑战，近几年市场上也涌现出与传统定义不同的新型工业软件，比如华为云与生态合作伙伴赛意、依柯力、湃睿等在统一 iDME（工业数据模型驱动引擎）平台上对工业软件进行重构，美云智数、杉数科技基于大数据和 AI 的企业级运营决策平台，金蝶、PTC Arena、黑湖小工单等云原生工业软件，创新奇智、汉得、赛意的大模型 + 工业软件等。﻿</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/34/34d795a17b74ae227913c4e7f5d74c74.png\" /></p><p>﻿</p><p></p><h4>InfoQ：当下中国制造业数字化转型面临的最大挑战是什么？针对这些挑战，您认为有效的解决策略是什么？</h4><p></p><p></p><p>杜雁泽：根据 IDC 调研数据，成本增加、需求快速变化、缺乏创新是中国制造企业目前主要面临的挑战。转型的关键是充分利用数字化手段打破人才和技术壁垒，赋能产品技术创新、产品品质提升、供应链优化、可持续发展等方面的应用。</p><p></p><h4>InfoQ：您的预测中提到，到 2028 年，20% 的 CIO 还将兼任 CEO（Chief Ecosystem Officer，首席生态官）的角色。请问是什么因素推动了 CIO 角色兼任首席生态官的转变？这一转变反映了中国制造业数字化转型的哪些更广泛的趋势？</h4><p></p><p></p><p>杜雁泽：制造企业内部的数字化程度已经越来越高，随着制造企业更加注重建立生态系统合作伙伴关系，业务流程、IT 系统建设和集成的复杂性也将不断增加，数字化也将会成为企业外部业务协同的重要一环，CIO 也将更多地参与其组织与合作伙伴的互动。</p><p></p><p>随着 CIO 将业务、IT 和生态等信息融会贯通，将完全有能力构建和领导企业的生态系统计划，将会成为企业的另一种 CEO（首席生态官）。根据调研，全球已经有一些大型制造企业的 CIO 负责企业的供应链和更广泛的生态系统计划，并帮助支持和协调各种关系。当然这并不代表撤换合作伙伴关系、战略计划和渠道负责人，相反，CIO 及其团队将与这些职能部门密切合作，优化生态系统方法。数字业务需要数字生态系统，而 CIO 必须站在所有数字计划的前端。</p><p></p><p>这一转变的背景是单一企业尤其是链主企业的竞争已经成为其供应链或者生态的竞争，数字化建设也需要从企业内部走向企业间的协同，提前顺应这一趋势。</p><p></p><h4>InfoQ：您在预测中提到，到 2025 年，45% 的中国头部制造商将 IT 系统与生成式人工智能集成。能否请您展开说明这一预测背后的主要原因是什么？中国头部制造商将 IT 系统与生成式人工智能集成，旨在解决哪些具体问题？</h4><p></p><p></p><p>杜雁泽：2022 年底 ChatGPT 的出圈带来了随后一整年的生成式人工智能浪潮。</p><p></p><p>IDC 认为，短期内大模型会先在市场营销、知识管理、客服对话助手等通用的领域应用，具体到制造业，虽然现在仅有极少数的中国头部制造企业开始探索大模型的行业应用，但供给方的厂商表现活跃。</p><p></p><p>长远来看，随着大模型成熟度的提升和更多应用的涌现，在头部制造企业的覆盖率将会快速提升。前期仍然会是在企业知识管理、对话助手等通用领域的应用，随着技术不断发展和成熟，在产品设计助手、工控代码的生成、工艺 / 生产 / 质量文档自动生成、从文本到设计到产品的试生产流程自动化等场景下都会有足够的想象空间。</p><p></p><p></p><h4>InfoQ：对于正在或计划进行数字化转型的中国制造业企业，您有哪些具体建议？</h4><p></p><p></p><p>杜雁泽：主要有以下三点共性建议：</p><p>将数字化融入战略，结合企业战略方向制定数字化转型规划，培养和引进既懂制造业又懂数字化的复合型人才。根据规划持续开展数字化项目并持续改进，由点及面，利用数字化进行创新是未来制造业发展业务的重要途径，包括开发创新的产品和服务、开拓新的市场、发展新的商业模式、满足新客户偏好等。设置科学合理的的 IT 预算，投资新应用和新技术之前首先要目标明确。根据 IDC 调研数据，超过 50% 的制造业企业的 IT 预算在增长，并将投资于工业软件、物联网、流程自动化和工业 AI 等领域。</p><p></p><p>对于不同类型的企业关注点也有区别，比如对于集团型制造企业，结合业务特点、集团和分子公司的定位制定清晰的数字化边界，避免重复建设，兼顾统一和效率；而对于广大中小型制造企业，可以选择基于公有云的 SaaS 服务厂商，用较低的门槛快速满足共性需求。</p><p></p><p>附 IDC FutureScape 2024 对中国制造业市场的十大预测：</p><p></p><p>预测一：人才培养</p><p>到 2027 年，50% 的中国制造商将利用自动化技术为运营角色赋能，提高员工参与度，并将员工效率提高 50%。</p><p>预测二：供应链编排</p><p>到 2028 年，30% 的中国头部制造商将使用整合了主要供应商和客户数字孪生能力的供应链编排工具，将供应链响应速度提高 20%。</p><p>预测三：AI 个性化定制</p><p>到 2026 年，30% 的中国头部制造商将通过 AI/ML（机器学习）支持多品种小批量生产，以实现个性化定制新模式。</p><p>预测四：自助备件服务</p><p>到 2027 年，40% 的中国头部制造商将通过设备故障预测和健康管理，实现自助式备件服务以改善平均修复时间，将服务交付效率提高 25%。</p><p>预测五：数字商务平台</p><p>到 2025 年，50% 的中国头部制造商将为生态系统运营建立数字商务平台，使数据资本化率提高 10%，客户留存率提高 10%。</p><p>预测六：GenAI&nbsp;运营</p><p>到 2025 年，45% 的中国头部制造商将 IT 系统与生成式人工智能集成，以更好地挖掘数据、识别问题并为运营部门提供决策依据，从而将效率提高 5%。</p><p>预测七：首席生态官 CEO</p><p>到 2028 年，20% 的 CIO 还将兼任 CEO（Chief Ecosystem Officer，首席生态官）的角色，负责协调整个生态系统中的 IT 系统 和跨组织的业务流程，以快速响应客户需求，并将参与生态的成本降低 25%。</p><p>预测八：韧性</p><p>到 2026 年，50% 的中国头部制造商通过战略层的调整更好地平衡运营弹性与成本效率，从而将利润率提高 5%。</p><p>预测九：AI+ 工控</p><p>到 2028 年，工业机器人和自动化控制中融合 AI/ML 的比例将提高 30%，减少 20% 的停机时间并提高效率。</p><p>预测十：可持续</p><p>到 2027 年，30% 的中国头部制造商将充分利用全域生态系统中的可持续发展数据，支持在运营活动中做出优化决策，从而将碳足迹减少 30%。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/e2/ca/e205602269fc52b1557a8c4a4e7b91ca.png\" /></p><p></p>",
    "publish_time": "2024-01-18 13:28:57",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "2023年InfoQ研究中心十大必读报告",
    "url": "https://www.infoq.cn/article/RphzRTCJWYqhJqLIXYkA",
    "summary": "<p>导语：2023年是「突破」和「融合」的一年。以大语言模型与生成式AI为代表的新一轮技术突破，科技领导者能力象限的突破；以云与AI深度交融为标志的技术融合，数字化进程中技术与业务的融合…本篇文章用十份必读报告，带你总结2023年，迎接2024年的到来。</p><p>「突破」和「融合」是2023年的两大关键词。在过去的2023年，InfoQ研究中心也围绕两大关键词，带来了一系列深入的思考和讨论。今日，本篇文章将通过回顾InfoQ研究中心2023年十大必读报告，希望可以帮助身处浪潮中的企业和管理者，在不断变化的竞争环境中突破重围，并讲述各个技术领域与行业的故事。</p><p></p><h2>2023年两大关键词：「突破」与「融合」</h2><p></p><p></p><h3>中国软件技术发展洞察和趋势预测报告&nbsp;2023</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/a2/a2c5558cd85482b3a664ee1067c77812.png\" /></p><p>在2023年的年初，我们用三个突破总结了2022年：从技术先进到赋能业务的理念突破、以云和AI为典型的技术突破和数字技术赋能传统产业带来的产业突破与融合。InfoQ研究中心在报告结尾中，也预测了FinOps（云成本优化）、算力便捷的进一步拓宽与AI无处不在等技术趋势。<a href=\"https://www.infoq.cn/minibook/UGhD7MTY5Z43JG5YmWP3\">点击链接，查看完整报告。</a>\"</p><p></p><h2>「突破」引领新前沿</h2><p></p><p></p><h3>技术突破：大语言模型综合评测报告2023</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/01/0139b607e1663d996f4d673641893828.png\" /></p><p>在大模型迸发的当下，InfoQ&nbsp;研究中心选取语言模型的准确性、数据基础、模型和算法能力、安全和隐私四个大维度和12个细分维度，分别对ChatGPT、Claude、Sage、天工3.5、文心一言、通义千问、讯飞星火、Moss、ChatGLM、vicuna-13B进行了3000+题目的评测。<a href=\"https://www.infoq.cn/minibook/vWO39J1tlb9xlSaIJoI6\">点击链接，查看完整报告。</a>\"</p><p></p><h3>技术突破：2023&nbsp;中国人工智能成熟度模型报告</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/3a/3a0be0b4c25b3eb75f2edbf9cb6f3e0a.png\" /></p><p>以生成式AI为代表的AI技术领在在2023年获得了长足的发展，InfoQ研究中心根据数据与行业观点生成的涵盖&nbsp;40+&nbsp;技术点的中国人工智能成熟度模型，期望为技术的应用决策和未来投资参考提供研究分析工具。此外，报告中还有近200家人工智能企业组成的生态图谱与企业名录。<a href=\"https://www.infoq.cn/minibook/IV4VhedKw1E1tY8Hleje\">点击链接，查看完整报告。</a>\"</p><p></p><h3>技术突破：2023&nbsp;中国云原生成熟度模型报告</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/59/59abe8363fbf1daf17a7f91a53ddd7bb.png\" /></p><p>云原生领域在2023年稳步发展。在技术生态、行业环境和宏观环境的三重影响下，云原生技术的应用下沉并聚焦于业务场景。InfoQ研究中心根据数据与行业观点生成的涵盖&nbsp;20+&nbsp;云原生相关技术点的中国云原生成熟度模型，期望为技术的应用决策和未来投资参考提供研究分析工具。报告中还有近70家云原生企业组成的生态图谱与企业名录。<a href=\"https://www.infoq.cn/minibook/q2Rhj103VtuMcdPlFGGS\">点击链接，查看完整报告。</a>\"</p><p></p><h3>能力突破：2023中国科技领导者画像洞察</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/80/8065e3d197832c6da19dfc556c471b5f.png\" /></p><p>在技术突破的大背景下，以企业CTO/CDO/CIO为代表的中国科技领导者的能力画像也获得了升级。企业规模、业务复杂度和本身的数字化程度，都对技术领导者提出了新时代下的新要求。一直关注开发者领域的InfoQ研究中心，在2023年，组织发起了针对中国科技领导者人群的调研工作。希望可以通过本次研究，帮助外界更为了解中国科技领导者在新时代对工作、生活和综合成长方面的认知以及对新的市场经济形势变化的洞察。<a href=\"https://www.infoq.cn/minibook/oDh5G4Rcsc1gW1O1Tou8\">点击链接，查看完整报告。</a>\"</p><p></p><h3>开源突破：中国开源生态图谱&nbsp;2023</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/41/41a7543993b39c441c7001195047e0b3.png\" /></p><p>《中国开源生态图谱&nbsp;2023》内共计收录了&nbsp;931&nbsp;个中国开源项目，涵盖七大细分领域和生态机构，其中七大细分领域分别为操作系统、数据库、人工智能、云原生、大数据、前端、中间件，生态机构包括实验室/研究院、开源基金会、开源产业联盟、开发者社区和代码托管平台。以中国开源项目名录和图谱的形式，为中国开源领域提供便捷易用的工具，让国内开发者、企业、研究院、基金会等开源生态了解中国开源的项目现状，并为中国开源产品添砖加瓦。<a href=\"https://www.infoq.cn/minibook/9j4NSEEh2JGJAUVdQGGu\">点击链接，查看完整报告。</a>\"</p><p></p><h2>「融合」推动新业态</h2><p></p><p></p><h3>云与AI的融合：互联网行业再进化——云上AI时代</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/0f/0f48ad2022c760cc55a176b0d3da95c3.png\" /></p><p>2023年，GitHub新增65000个生成式AI项目，同比增长248%，新一轮AI与开源的浪潮正在形成。InfoQ研究中心继续利用生态图谱和InfoQ&nbsp;开源项目指数，简单清晰地输出中国人工智能领域开源项目的发展情况，总结优质的案例与经验供广大开发者和开源社区研究。<a href=\"https://www.infoq.cn/minibook/Iwk2LLuMFSV4AisWG8jR\">点击链接，查看完整报告。</a>\"</p><p></p><h3>云原生与开源的融合：中国开源生态图谱2023——云原生领域</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/da/dae7f9f6535dfb233194fd2ec0c5b7fe.png\" /></p><p>随着&nbsp;Docker&nbsp;、Kubernetes&nbsp;等云原生开源项目诞生与孵化，以及&nbsp;CNCF&nbsp;等基金会和组织的不断壮大，云原生的开源基因日益显现。与此同时，开源生态的开放属性也持续推动着云原生技术的演进和创新。根据&nbsp;InfoQ&nbsp;研究中心统计，目前云原生领域国内开源项目已经超过&nbsp;110&nbsp;个，涉及&nbsp;26&nbsp;家项目发起机构，中国云原生开源技术生态初步形成。<a href=\"https://www.infoq.cn/minibook/zdDoaDUkCGiLmWcPBYIz\">点击链接，查看完整报告。</a>\"</p><p></p><h3>技术与业务的融合：2023&nbsp;银行数字化转型报告</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/bd/bd091a96416992842de32e61aac18dde.png\" /></p><p>数字化转型是银行发展的重要尝试，也是技术与业务融合的核心探索。本报告总结分析了银行数字化转型的背景、现状、重点场景和两大转型路径。从数据层面分析了全国30+不同类型银行的科技资金和人才投入以及组织架构转型的现状，同时基于大中小型银行的不同特点，输出两大转型路径，为不同类型和规模的银行机构及技术服务商提供参考和研究支撑。<a href=\"https://www.infoq.cn/minibook/mXcdvcpGrGFHZOLGrfqh\">点击链接，查看完整报告。</a>\"</p><p>2024年InfoQ研究中心预计发布报告</p><p></p><p>新的一年，InfoQ研究中心也将继续秉承客观、深度的内容原则，聚焦前沿科技领域、数字化产业应用和数字人才三方面，继续为全行业架设沟通与理解的桥梁，跨越从认知到决策的信息鸿沟，也欢迎大家持续关注InfoQ研究中心产出的报告。</p>",
    "publish_time": "2024-01-18 14:37:13",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "寒冬不改凌云志，感恩携手共进退：基调听云高端客户答谢大会暨新品发布会圆满落幕",
    "url": "https://www.infoq.cn/article/5flQbci9POeMWWMkXf3G",
    "summary": "<p>2024年1月16日，基调听云联合华为云、日志易、科来等众多合作伙伴共同举办的“感恩相伴·携手同行，基调听云年终高端客户答谢会暨新品发布会”在北京圆满落下帷幕。</p><p></p><p>本次大会座无虚席，荟聚了来自投资界、学术界、产业界等多行业的专家与领域知名媒体机构，分别从金融、大数据、IT、网络安全等多领域、多方向，共同探讨可观测性与应用安全落地实践经验。</p><p>&nbsp;</p><p>会上，基调听云发布了全新的智能可观测性平台“观云”及应用安全态势管理平台“安云”，并与华为云、日志易、科来分别进行了隆重的全面合作、战略合作签约仪式，成为全场焦点。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b3/b35405fa836c64382dc57726df87243b.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/65/6566fecae010b762f0df1e223a79cc2d.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/7a/7ab7c48386f1ca2dfa0eea3104e46f76.png\" /></p><p></p><p></p><h1>前瞻远见</h1><p></p><p></p><p>大会在梅花创投创始合伙人、基调听云董事长吴世春先生的开场致辞中正式拉开序幕。吴世春先生在致辞中表示，基调听云2023年完成业绩增长30%，新签大客户数量达到数百家，这与在座各位客户、合作伙伴的大力支持密不可分。作为大会主办方，吴世春先生对各位嘉宾的到来表示了真挚的欢迎与感谢，并预祝各位嘉宾能在大会中收获满满。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8e/8eb32022515898913988b793861e6a2c.png\" /></p><p></p><p>华为云北京总经理李亚为先生提到，数字化、智能化是最确定的发展趋势，云将成为数字经济的重要底座。在过去的一年，华为经受住了严峻的考验，公司整体平稳发展，华为云将持续在全球范围内为合作伙伴提供全球安全合规体系、全球一张网、本地化支持以及云云协同和全球丰富的生态能力。华为云希望与基调听云及更多合作伙伴一起，深入交流行业的趋势和动态，探讨行业的痛点与解决之道，为行业数字化转型和业务发展提供助力。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/62/628a831b310f86a35f2bbab56e2fba29.png\" /></p><p></p><p></p><h1>技术干货</h1><p></p><p></p><p></p><h2>《可观测性技术发展研究报告》深度解读</h2><p></p><p></p><p>随后，中国信通院云计算与大数据研究所云计算部高级业务主管王海清女士带来了《可观测性技术发展研究报告》深度解读。详细介绍了可观测性技术的概念、关键技术、落地路径和发展趋势，并深入分析了可观测性技术在故障排查、成本优化、数据分析等方面的应用和实践价值，为听众提供有价值的指导和深入的理解。</p><p>&nbsp;</p><p>可观测性技术有助于企业提升对系统内部的深度洞察能力，使其能够迅速发现问题、准确定位故障，并及时采取措施进行故障修复和性能优化。自2019年起，中国信通院云大所便致力于可观测性技术研究与应用推广，开展可观测性平台能力、可观测性能力建设成熟度评估，征集可观测性优秀案例。借助前期工作积累，中国信通院与业界多家头部机构合作，基调听云也深度参与其中，共同编制并于2023年12月27日发布了《可观测性技术发展研究报告（2023年）》。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2a/2a7e6b3021090212fdd19dc24de2941d.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/50/5034f9e1cf83a438390e295c587cc7a2.png\" /></p><p></p><p></p><h2>可观测性平台在民生银行的应用与实践</h2><p></p><p></p><p>中国民生银行股份有限公司应用运维二中心高级工程师张庆先生带来《基于APM的应用智能可观测性平台建设实践》分享。张庆先生在演讲中指出，在数字化时代，可观测性平台成为了保障业务连续性和提升用户体验的关键。</p><p>&nbsp;</p><p>民生银行积极探索可观测性平台的应用与实践，基于基调听云在APM领域成熟的能力，与基调听云一同建成了民生银行的智能可观测性平台，通过实时监控、预警和快速定位问题的能力，有效提升了银行业务的稳健性和服务质量。张庆先生详细分享了民生银行在可观测性平台建设方面的经验、挑战与未来展望，以期为同行业提供有益的参考和启示。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/64/6482deaeca22fc6a263775c249cca25c.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/05/0566316dc5f3a837d67cad0b63531bd6.png\" /></p><p></p><p></p><h1>新品发布</h1><p></p><p></p><p>在新品发布环节，基调听云研发VP杨金全正式发布了两款可观测性与应用安全全新产品——“观云”和“安云”，这标志着基调听云在可观测性和应用安全领域的全新突破。</p><p>&nbsp;</p><p>基于“观云”与“安云”提供的全新可观测性与安全能力，基调听云未来将为用户提供更全面、可靠与顺畅的解决方案体验。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6a/6a708d2ed6328be626314f9c24a73773.png\" /></p><p></p><p></p><h2>观云：智能可观测性平台</h2><p></p><p></p><p>云原生时代，相比于传统的基于已知经验和固定模板的监控平台，可观测性平台需要具备更加灵活多变的，探索“未知的未知”问题的能力。基调听云全新推出的基调观云智能可观测性平台，首次引入了强大的数据湖仓和轻应用架构，为用户提供了全新的数据探索和系统观测体验，帮助客户达成可观测性能力的跃迁。</p><p>&nbsp;</p><p>观云平台具备三大核心能力：UniAgent、轻应用平台与多维探索，用户通过观云平台，无需复杂编程，通过统一探针UniAgent即可轻松实现应用系统全量数据的采集即治理，自由构建自己的轻应用，对全量数据进行无边界的自由探索，最终实现对“未知的未知”的探索。</p><p>&nbsp;</p><p>杨金全先生在大会现场对多维探索的重点功能见微（Esper）进行了现场演示，用户仅需框选、点击等基础操作，即可深入分析数据背后的隐藏根因，实现无边界的可观测性。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e2/e2584d1c481e977f623d17e29a32f949.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d9/d96fb262ebd7b4ebe22f30cb4d685154.png\" /></p><p></p><p></p><h2>安云：应用安全亦可观测</h2><p></p><p>&nbsp;</p><p>随着攻防对抗的升级与加密技术的发展，传统应用安全设备如WAF、HIDS越发面临致盲处境，同时还要面临预警粒度粗、预警晚、盲区大等问题；而成本过高、难以部署、兼容性差和性能影响又是部署独立RASP方案绕不过去的四座大山。越来越多的场景无法有效预警和防护，因此，专注应用程序全生命周期安全的应用安全态势管理（ASPM）成为了新时代应用安全的新方向。</p><p>&nbsp;</p><p>安云ASPM是一个应用安全观测与管理平台，具备强大的威胁感知能力与领先的威胁分析能力，安全部门零Agent即可一键启用。安云ASPM基于可观测性数据，帮助企业识别攻击行为并告警、检测漏洞、防范木马、溯源攻击，与流量层、主机层安全产品形成互补，具备告警及时、误报漏报低的特点，并支持运行态入侵告警，在真实入侵、红蓝对抗与安全运营等典型安全场景中大有可为。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/49/49ae7a5f58104403b46acfce4e11ae44.png\" /></p><p></p><p></p><h2>战略合作签约</h2><p></p><p></p><p>基调听云销售VP李甜甜的演讲以《携手新途，共铸辉煌》为主题，回顾了17岁的听云走过的四个阶段，&nbsp;每一次跨入新阶段都是与合作伙伴建立更加紧密的合作关系的过程。在2024年正式迈入的第四阶段中，基调听云将广泛与华为云、日志易、科来等众多厂商深度合作，实现产品数据级打通，实现全场景、全链路、跨层级的可观测。</p><p>&nbsp;</p><p>社会和历史的发展往往是由那些敢于梦想、愿意冒险的乐观者推动的。“悲观者正确，乐观者前行。”李甜甜以苏格拉底的这句名言作为演讲的总结，希望基调听云与众多合作伙伴一起乐观前行，共同面对挑战。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0d/0d3e73283eb327290007ac1e44be789b.png\" /></p><p></p><p>为了进一步加深全面战略合作伙伴关系，在大会现场，基调听云与华为云、日志易、科来分别进行了隆重的全面合作签约仪式与战略合作签约仪式，表示将共同开发全新的产品和解决方案，在产品、市场、渠道等方面广泛开展紧密的合作，为客户带来更加完整的数字化转型体验。</p><p>&nbsp;</p><p>在华为云北京总经理李亚为先生的见证下，基调听云董事长吴世春先生与华为云北京CTO丁晨先生正式签订全面合作协议，这一历史性时刻标志着两家领军企业将携手共进，共同开启新一轮的深度合作。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0a/0a161cf5cc3809d12724844f71b76855.png\" /></p><p></p><p>紧接着，基调听云董事长吴世春先生分别与日志易创始人兼CEO陈军先生和科来营销中心副总经理左坚先生进行了战略合作签约，共同帮助客户更好地迎接数字化时代的挑战。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e5/e5835a1b001b0613387f21e799fbd8c9.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/69/69430a5840cab7666198c82b339c23ce.png\" /></p><p></p><p>这一系列的战略合作签约不仅是对过去成功合作的延续，更是为未来共同发展奠定了坚实的基础。在共同追求创新和发展的道路上，基调听云与华为云、日志易、科来等合作伙伴，将共同描绘出数字化时代合作共赢的美好画卷。</p><p>&nbsp;</p><p></p><h2>思想碰撞</h2><p></p><p></p><p>大会的圆桌讨论环节由基调听云CEO陈靖华先生主持。华为云北京CTO丁晨先生、敦煌网集团运维总监窦东员先生、日志易产品VP饶琛琳先生与科来营销中心副总经理左坚先生共同展开了一场关于数字时代，勇击中流：智能运维和可观测性落地实践与未来的发展趋势的深度技术探讨。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5d/5d72d5f6edb1eb0722782631a133c5b0.png\" /></p><p></p><p>专家们围绕可观测性的核心概念展开了讨论，深入探讨了可观测性在实际落地实践中的经验。云原生架构、日志与可观测性之间存在着密不可分的联系，各位专家基于可观测性在云原生架构中的应用、日志在可观测性中的重要性也进行了精彩分享。此外，专家们还深入探讨了可观测性与安全性的结合，强调了在数字时代，确保系统和数据的安全同样重要。最后，专家们对可观测性的未来发展趋势展开了全面、深入的技术探讨，为与会者提供了全面、深刻的行业洞察。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/aa/aa220c7fdd2e2b806bc50be1d14282bf.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f4/f4077422659b10bc0c5c1939a0188a0d.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f7/f714c5074bc306bec1f675a9f94d928c.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b6/b6e2a44f947eb3d2f12d3b3ab34a833a.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a4/a411a7994e039b944c03e176056b1b50.png\" /></p><p>&nbsp;</p><p>2007年，基调听云成立并发布了核心产品听云Network，填补了国内应用性能管理领域的空白。2013年，基调听云推出基调听云App、Web、小程序监测与APM产品，产品市场占有率高达70%，如今已经成为中国APM领导者。2017年，基调听云开始积极探索AIOps。此次推出观云、安云两款新品，致力于帮助企业落地智能运维场景，为数字化运维赋能，正是基调听云2024年收购洞态IAST后，进军应用安全领域的第一步，也是基调听云成为可观测性与应用安全态势管理领导者的第一步。</p><p>&nbsp;</p><p>2024年，基调听云将重点关注可观测性与应用安全这两个关键方向，大力推动在原有 APM 深度行业客户以及全新行业客户中广泛推广和落地。未来，基调听云将持续耕耘可观测性及应用安全领域，坚持以客户需求为导向，进行技术创新与迭代。基调听云会用自己的落地实践，为更多的企业在数字化转型过程中保驾护航，提升系统稳定性、安全性和运维效率，创造更大的商业价值。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/b6/b626887031409bdbcf2e22c147e7ab75.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/7b/7b8b31d6eae35b284e4cd75068ef1e8e.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/08/0803f914575038031d39a9e3d9ae9926.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/02/020109abc049768e708e51c83ed3fd37.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c6/c6b3cf2fc8a41cddb6d1721a1305bd43.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e7/e7d318b6085e0bd5c8e94ce63013b579.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/96/9621068adef157337e0a8a91f87c015b.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/68/68855428e99b9a4938cdcda4aa54743e.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c0/c08364cd97f0f9ad51ea33d27595ed50.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/af/af96e6887f3e3d72b7c638c98e60da1a.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a8/a8955f94549e85797e9c531b56f45d20.png\" /></p><p></p>",
    "publish_time": "2024-01-18 14:40:19",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "估值超300亿元量子计算独角兽诞生！这家初创企业宣布完成18亿元融资",
    "url": "https://www.infoq.cn/article/DFZgB3YzvMhSAujyVRD1",
    "summary": "<p>近日，据外媒报道，霍尼韦尔（纳斯达克股票代码：HON）宣布完成对集成量子计算公司 Quantinuum 的 3 亿美元股权融资，投前估值为 50 亿美元。此轮融资由 Quantinuum 的战略合作伙伴摩根大通牵头，三井物产、安进和霍尼韦尔也参与其中，霍尼韦尔仍然是该公司的大股东。这项投资使 Quantinuum 自成立以来筹集的总资金达到约 6.25 亿美元。</p><p>&nbsp;</p><p>此次融资是 Quantinuum 自剑桥量子计算和霍尼韦尔量子解决方案于 2021 年 11 月合并以来的第一轮股权融资。这些资金将用于加速实现世界上第一台通用容错量子计算机，同时还将 Quantinuum 的软件产品扩展到增强商业适用性。</p><p>&nbsp;</p><p>摩根大通全球首席信息官 Lori Beer 表示：“金融服务已被确定为首批受益于量子技术的行业之一。因此，我们一直在投资量子研究，由 Marco Pistoia 博士领导的专家团队与 Quantinuum 等量子计算领导者合作，取得了突破性的发现。我们期待继续合作，为我们的业务、客户和整个行业带来积极影响。”</p><p>&nbsp;</p><p>三井物产株式会社首席数字信息官 Toru Matsui 表示：“我们很高兴能够出资支持 Quantinuum 在容错量子计算和量子软件开发方面的新业务，这些业务正在迎来量子时代。致力于合作推动 Quantinuum 解决方案在日本和亚太市场的推出。”</p><p>&nbsp;</p><p>霍尼韦尔执行董事长兼 Quantinuum 董事会主席 Darius Adamczyk 总结道：“本轮投资的成功完成证明了 Quantinuum 在量子领域的发展和成熟。我们期待着欢迎这些合作伙伴成为 Quantinuum 的投资者，因为我们都期待着未来几年的巨大机遇。”</p><p>&nbsp;</p><p>如今，空客、宝马集团、霍尼韦尔、汇丰银行、摩根大通、三井物产和泰雷兹等国际巨头公司都在使用 Quantinuum 的技术。</p><p>&nbsp;</p><p>参考链接：</p><p></p><p>https://www.honeywell.com/us/en/press/2024/01/honeywell-announces-the-closing-of-300-million-equity-investment-round-for-quantinuum-at-5-billion-pre-money-valuation</p><p></p><p></p>",
    "publish_time": "2024-01-18 16:38:15",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "发现Rust：从项目化角度谈效率之变（一）",
    "url": "https://www.infoq.cn/article/azPrGf6BilmpD9RzeHpo",
    "summary": "<p></p><h2>1、前言</h2><p></p><p></p><p>Rust作为一种安全的系统语言，将语言层面的语义约束与编译器自动化推导深度结合，实现了更加严谨的编程风格和更加安全的编程方式。从Linux 6.1内核正式合入Rust支持开始，它与Linux内核的深度融合就再也不是悬念，未来的发展充满想象。</p><p></p><p>这种技术趋势的影响毫无疑问将传递到开发者、项目管理者。对于开发者来说，编写一个Hello world程序就足以开启Rust编程体验之旅。但对于项目管理者来说，是否启动基于Rust的项目？什么时候启动？则是比较复杂的问题。</p><p></p><p>更加深入的问题还有，我们为什么要采用Rust来开发项目？毫无疑问，安全性是主要因素。但它真的能给我们带来更好的安全性吗？近期出现的流行语言都是在做减法，但是Rust增加了很多陌生的语言要素，会不会门槛太高导致项目推进困难？诸如此类问题，会层出不穷困扰着决策者。</p><p></p><p>很多事实告诉我们，没有实践作为依据，没有审慎的分析评判，要做出一个明智的决策是非常困难的，在风险与竞争优势之间，决策者陷入两难。</p><p></p><p>本文试图通过一次完整真实的项目实践，来为上述问题的解答提供一些依据。为了使问题更加聚焦，我们选择从一个全新的项目入手。至于对现有的项目进行迁移，我们后续也将尝试探索和分享。</p><p></p><h2>2、实践</h2><p></p><p></p><p>Rust与Linux的结合还在发展中，对于新手来说，选择从应用程序入手，再到内核模块，再到内核，是一个循序渐进的过程。</p><p>&nbsp;</p><p>我们的项目是一个FUSE文件系统的性能优化项目，涉及到FUSE用户态文件系统和eBPF动态编程技术（后文称BPFuse项目）。我们需要使用eBPF动态程序技术优化FUSE文件系统的处理流程，以便达成保证文件系统操作正确性，同时稳定、兼容的情况下，提升文件访问性能的目的。</p><p></p><p>我们还需要跨越多个内核版本，提供一致的功能、性能特性。而在这个版本跨度中，eBPF自身从指令到基础设施的发展变化很大，因此我们还需要解决eBPF指令兼容性等问题。</p><p></p><p>我们还希望形成长期可持续的技术成果，为垂直虚拟文件系统的开发提供更强的能力支撑和效率提升。我们希望将eBPF的开发和业务逻辑的开发融合在一起。我们也希望利用数据与指令同态的特性，使之成为融合开发模式的媒介。</p><p></p><p>所以，这就形成了我们这个项目的基本技术形态，在内核部分我们对FUSE进行了扩展，使之具备eBPF动态扩展能力。同时在用户态，实现了一个文件领域的Unilang前端解释器（后文称解释器子项目，或解释器项目，或本项目。是本文的主要叙述对象）。向用户提供初步的将业务逻辑开发与eBPF开发融合的开发模式。以面向文件系统领域的Unilang衍生语言（子语言）作为eBPF的前端表达，下层是Rust实现的一个Unilang解释器，用于生成eBPF程序。最后是执行器，将eBPF程序加载到内核中，与内核部分进行交互并提供服务。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/08/087f88a1cafea37be7130c8549792295.png\" /></p><p></p><p>考虑到这是一个与内核紧密关联的项目，为了尽力提升项目的安全性，解释器部分我们采用了Rust语言进行开发。事实证明，这个选择为我们省却了很多麻烦，并且使我们对这个项目充满了信心。</p><p></p><h3>2.1.快速迭代</h3><p></p><p></p><p>在解释器项目中，前端是一个Unilang的词法、语法分析器，后端是一个通用的语义模块和具体的语义实现，目前实现VFS语义，后续可能增加其他语义。因此这是一个具有一定通用性但更多的是面向文件系统这个专用领域的Unilang前端解释器。为了快速迭代，本项目并没有引入过于复杂的东西，在设计上满足主要需求同时考虑一定的扩展性即可。因此整体结构并不复杂，是一个树形的模块结构，需要将大致三层的模块集成在一起，同时允许后续模块的扩展。</p><p></p><p>我们希望能够通过紧密的逻辑关系来划分和组织模块，同时又希望能够在需要拆分、扩展模块时能够灵活、简洁地调整模块组织。我们希望能够让模块间的耦合关系清晰、明确、最小化，同时又希望模块间能够简单方便地引用。我们首先接触到的是Rust的模块化开发机制。</p><p></p><p>Rust提供了现代的模块化开发的机制，目录结构+说明文件/关键词形成模块的树形结构，程序中通过use及层次路径进行引用。</p><p></p><p>Rust的模块化机制使用方便，可以方便地定义软件的整体结构，同时也最大化地降低在开发过程中重构代码和改进软件结构带来的额外工作量，非常有利于快速迭代的开发方式。</p><p></p><p>我们的项目采用的就是快速迭代的开发方式，开发过程中，进行过三两次代码重构和模块拆分。最开始，我们实现的是一个Unliang的词、语法解析器，输出的是符号流，是一个简单的Solo的转换程序。</p><p></p><p>待解析功能稳定后，我们进行了第一次模块拆分，同时对代码进行了重构。整个软件分成了最上层的壳和下面的前、后端两个模块。之后我们专注于后端模块部分的开发，生成eBPF指令。我们主要参考V5的eBPF指令集，对指令生成规则进行了封装，将前后端衔接在一起，成功生成第一个由Unilang编写的eBPF程序。</p><p></p><p>之后，我们又进行了几次重构，将后端模块进行更精细的拆分，把语义部分拆分出来，以便支持VFS之外的语义，为扩展功能做准备。对指令生成部分进行模块拆分，以便同时支持V4/V5的eBPF指令集。</p><p></p><p>最后，我们对上层的壳也做了拆分，增加了一层FFI封装，对外提供C语言风格的动态链接库，方便C/C++语言程序调用我们的解释器库。</p><p></p><p>整个过程中，功能的不断添加、模块拆分、代码重构等都进行地非常流畅，开发体验非常不错。这主要得益于Rust的完善、灵活的模块化机制，在语言层面设计了Crates和Modules两级组织机制。在外围，又通过工具扩展了Packages和Workspaces两级组织机制。对于不同规模的项目都提供了恰到好处的支持。</p><p></p><p>既提供了适用于局部模块的声明的灵活性，以目录结构为基础，结合链式路径表达，比较符合开发人员的直觉习惯。同时通过Toml语言引入外部模块，通过cargo方便地进行外部模块的添加、调整。统一的全局资源crates.io也提供了全局的库，强大的搜索功能、发布功能，可以方便地找到需要的库，引用也非常简单。</p><p>&nbsp;</p><p>Rust的模块化系统包含了三个层面的机制：文件管理机制、路径管理机制、命名空间机制。文件管理机制，以文件系统为基础，比较符合用户使用习惯；路径管理机制，在文件系统的基础上，通过节点描述文件，将各层级文件串联起来，形成层次化的组织结构。命名空间管理通过use、pub等关键词，管理命名空间的合并、元素的剔除等等。</p><p>&nbsp;</p><p>Rust的私有性控制，可以细化到任意结构体元素，说明Rust在这方面的表达能力是非常强的，其次Rust提供了很多语法糖，在灵活的表达能力基础上，以后可能也会提供更加简洁的复合表达方式，来提升描述复杂结构化私有性布局的效率。</p><p>&nbsp;</p><p>Rust的命名空间管理非常灵活，可以通过use、pub关键词实现命名空间最精微的控制，可以实现库实现者与库使用者两个完全不同的视角分别适用不同的命名空间，使库的实现者在内部实现中最大化发挥自己的个性，自由地设计模块的细节，同时在库向外暴露的视图中，可以最大限度地按照使用者的理解方式组织名字空间中的各个要素。通过这种强大的表达能力，充分减少了对于开发者的约束，使开发者更容易上手，更自由地发挥。</p><p></p><h3>2.2.轻量建模</h3><p></p><p></p><p>面向对象是一个很好的建模工具，包括Linux内核中的代码，也充分应用了面向对象的编程方法，这使得内核代码更易读、更易维护。但是面向对象编程经过数十年发展，已经走向了一个极端，变得非常重。多层抽象、类的嵌套，增加了设计难度，失去了过程编程的直接，并不适合轻量级、快速迭代的开发方式。</p><p>&nbsp;</p><p>Rust语言的抽象工具，主要是trait，这相当于一个“特性”的集合。提供了一种更加轻量化的语言特性，特别适合快速迭代的开发方式。所谓“特性”（traits），这种抽象方式介于过程式编程和面向对象编程两种模式之间。当一个数据类型具备某一个trait的时候，意味着我们可以对这个数据类型的实例使用trait中定义的“方法”进行操作。</p><p></p><p>显然，Rust摈弃了常见面向对象语言中最关键的类与对象的概念，类与对象是比较重的抽象工具，编译会插入很多相关的代码来维护类与对象，在应用开发领域，这可能是优点，是很多高级特性的基础，但在系统编程领域这些就是累赘。这种基础设计理念的差异，是Rust有别于一般面向对象语言的关键特征，也是其成为系统级语言的基础之一，也是它相对于其他面向对象的系统语言、准系统语言的优势之一。</p><p></p><p>Rust不是面向对象的，但它也提供了不弱于面向对象编程的抽象能力，它是面向“特性”编程的。从语言层面，面向特性和面向对象，具有同等的抽象能力，却消除了面向对象的运行时开销，从设计层面再到运行层面都更加轻量级和灵活。同时这种设计将Rust语言的内涵和优势集中在了编译阶段，通过语言的特性结合编译器的能力，在编译阶段解决设计语言的解读、理解和代码生成。强化语言表达并且在编译阶段解决所有编程问题，这是Rust的鲜明特色。</p><p></p><p>本项目目前的技术构型并不复杂，并不需要建立复杂的类系统，我们希望只在几个关键的层级应用抽象，使大模块之间的关系更加清晰，而内部我们希望使用更加简单直接的实现方式。在面向对象的语言中，由于一切都是对象，很容易导致软件设计时过度抽象，反而使开发效率降低，代码难以阅读。</p><p></p><p>在本项目中，Rust为我们提供了恰到好处的抽象工具，我们只在大对象之间建立抽象，实现Analyser、、InstComposite、Execute三个抽象trait，用来描述语言分析、代码生成、加载执行的特性，简化了编程的复杂度。</p><p></p><h3>2.3.生态衔接</h3><p></p><p></p><p>Rust提供了全局化的开发模式，其核心是crates.io这个URI资源。通过将Rust发展过程中，众多参与者协作开发出来的大量crates映射到URI命名空间中，实现了全球开发者分布式开发，资源集中共享。</p><p>&nbsp;</p><p>在这种开发模式下，任何一个Rust项目都不是孤立，它从创建开始就被全球的Rust资源所支持，同时这个项目的成果也可以通过crates.io被全球开发者所共享。</p><p>&nbsp;</p><p>一个Rust项目的开始，首先就是在crates.io上进行搜索，查找相关的项目，然后进行继承和组合。随着项目进展，新需求不断导入，也可以方便地把crates.io上更多的项目组合进来，以实现更加复杂的功能。在这种全局开发模式下，关联项目之间的更新同步也变得非常简单，大大简化了软件项目的维护过程。</p><p>&nbsp;</p><p>除了Rust自身生态的迭代能力之外，Rust也能够很好地引入C语言的生态资源，对于建立一个新兴的有张力的多元化生态系统来说这一点尤其重要。Rust将对于成长性生态的支持和语言的核心特质结合在了一起，Rust强大的元编程能力，使的它很容易实现对C语言库的封装和继承。</p><p>&nbsp;</p><p>Rust还在发展完善的过程中，尤其是原生库的发展更需要时间来积累。目前暂时的情况是，在很多有用的公共算法或者底层功能方面Rust原生库还并不完善。因此，在实现实际项目的时候，我们往往需要调用现有的C风格的库来凑手，满足上层功能实现的需要。</p><p>&nbsp;</p><p>而访问这类C实现的库的时候，避免不了要理解库中使用的数据结构，而这些数据结构都是用C语言头文件进行定义的。Rust不能直接引用C语言头文件，那么如何理解其中定义的数据结构格式，并实现准确的数据操作呢？</p><p>&nbsp;</p><p>如果参照C语言头文件，完全用Rust重写一份等价的数据结构定义，无异于愚公移山，是非常枯燥乏味且低收益的。而且依赖完全重写来实现两种不同的语言的互操作，这为上下两个相关的项目引入了很重的依赖，这不是很好的继承方式，不利于后期维护。</p><p>&nbsp;</p><p>这个时候，元编程可以很好地解决这个问题。C语言和Rust在词法层面基本一致，这使得我们甚至可以通过元编程实现一个略做简化的C语言编译器。当然这会非常复杂和难于理解，但是对于更加简单的任务，通过元编程却是可以轻松且优雅地胜任的。比如，只需要少量的修改，就可以理解C语言头文件中定义的数据结构，并且不影响两个关联项目后续的独立发展。</p><p>&nbsp;</p><p>在crates.io上，可以找到很多这样的对C语言库进行封装的非原生库，极大地补足了Rust未完善的生态领域。如果遇到未封装的C语言库，通过Rust强大的封装能力，也可以快速地实现封装。这是Rust强大语言设计所赋予的能力。</p><p>&nbsp;</p><p>本项目不单纯是一个Unilang的解释器，同时也是执行器，执行的目的就是将生成的eBPF程序加载到Linux内核中。因此，执行器中需要调用Linux的系统调用bpf()来完成功能。但是，目前Rust还没有对bpf系统调用的封装，因此没法像使用Rust原生std库那样实现对bpf系统函数的调用。</p><p>&nbsp;</p><p>因此在本项目中，我们需要自己封装相关的数据结构等定义，来完成bpf系统调用。bpf的系统调用，已经非常清晰地定义在C语言头文件中，但是我们无法直接引用C头文件，同时又不想用Rust重写一遍这些定义，所以我们就利用了Rust的强大的封装能力，通过宏将C定义转换为Rust定义。这样就是实现了对C数据定义封装的复用，以后相关的C定义变更时，Rust的定义也会自动更新。</p><p>&nbsp;</p><p>至于系统调用方面，则可以使用crates.io上已经存在的项目linux-syscall来实现，使用方式是完全Rust化的，可见Rust强大的融合能力。</p><p></p><h2>3、结语</h2><p></p><p></p><p>对于有疑虑是否使用Rust开发项目的经理等管理角色，需要明确的一个概念是，Rust是安全的语言，开发人员的编码水平和对语言的熟悉程度，并不会影响项目的质量，这一点和C语言项目完全不同，经验丰富的C开发人员对于软件质量有至关重要的影响。</p><p>&nbsp;</p><p>同时，Rust的语言、工具和开发方式的设计也融合了现代的开发理念，对于不同规模的软件项目，从模型设计、模块组织、迭代更新、全局开发等方方面面都提供了丰富的支持。而且，Rust正在快速变得强大和完善。</p><p></p><p>Rust是安全的编程语言，使用Rust会推动整个开发过程的重心发生偏移，软件调试、测试和后期维护的开销大大降低，软件质量显著提升。因此与一般的观念相反，Rust特别适合快速迭代式的开发方式，因为Rust的安全特性会导致整个研发过程更加紧凑高效、甚至缩短，无疑减小了开发迭代的周期。</p><p></p><h4>作者介绍</h4><p></p><p></p><p>钟俊，统信软件研发技术专家，专注于内核与编译器技术，长期在通信、云计算、安全、信创等多个行业从事底层软件技术研发及相关工作。</p>",
    "publish_time": "2024-01-18 16:43:45",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]