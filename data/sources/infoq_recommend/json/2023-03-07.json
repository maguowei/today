[
  {
    "title": "淘宝 APP 网络架构演进与弱网破障实践",
    "url": "https://www.infoq.cn/article/fc274eea51d2b6995e619e9d6",
    "summary": "<p>作者：沈良炜  阿里大淘宝终端体验平台团队</p><p></p><p></p><blockquote>面对移动互联网络下复杂多变的网络环境，如何提供更稳定可靠的请求性能，保障用户的加载浏览体验？本文将为大家分享淘宝APP统一网络库的演进。</blockquote><p></p><p></p><p></p><h1>一、引言</h1><p></p><p></p><p>自2013年ALLIN无线到今天，已经走过10个年头，手淘终端统一网络库AWCN（Ali Wireless Connection Network）从淘内孵化，一路过来伴随着手淘业务的发展，经历集团IPv6战役、协议升级演进等，逐步沉淀为阿里集团终端网络通用解决方案，是兼具高性能、多协议、可容灾、可观测的终端网络基础统一设施。面对移动互联网络下复杂多变的网络环境，如何提供更稳定可靠的请求性能，保障用户的加载浏览体验、更好的支撑业务发展，是我们始终探索的命题。</p><p></p><p>本文将介绍淘宝APP统一网络库演进的过程，讲述如何围绕体验持续构建南北向从监测到加速一体化的终端网络架构，通过构建NPM弱网诊断感知能力，落地原生多通道技术/多协议择优调度手段，贴合厂商附能网络请求加速，实现去SPDY及规模化IPv6/H3协议簇的平滑过渡，为用户提供弱网更好、好网更优的APP加载浏览体验，支撑业务创造更多的可能性。</p><p></p><p></p><h1>二、终端架构介绍</h1><p></p><p></p><p></p><h2>2.1 MobileSDN理念</h2><p></p><p></p><p>在介绍AWCN之前，笔者想先这里普及下SDN架构的概念。</p><p></p><p>SDN（Software Defined Network，软件定义网络）是一种将网络资源抽象到虚拟化系统中的IT基础架构，SDN将网络转发功能与网络控制功能分开，其目标是创建可集中管理和可编程的网络，核心理念是希望应用软件可以参与对网络的控制管理，满足上层业务需求，简化使用和运维成本。有一个较为形象的类比，如果说现在的网络系统是功能机，系统和硬件出厂时就被捆绑在一起，那么SDN就是Android系统，可以在很多手机设备上安装&amp;升级，同时还能安装更多更强大的手机App（SDN 应用层部署）。</p><p></p><p>回到移动应用领域，我们的目标是搭建统一的终端网络解决方案，上层业务不需要关心内部的协议如何转发、请求超时降级等复杂逻辑，做到好用、易用、可观测、体验好。显然，这与传统SDN架构理念不谋而合。</p><p></p><p></p><h2>2.2 AWCN终端网络架构</h2><p></p><p></p><p>因此，围绕以上理念和目标，我们进一步构建起南北向从监测到加速一体化的 MobileSDN架构，以减少业务的接入/运维成本，提升用户的浏览体验。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1f/1fbdfebbc7340d0cb658c5a775e89b3e.png\" /></p><p>图：AWCN Mobile-SDN架构</p><p></p><p>从MobileSDN架构展开来，接下来简要介绍下各分层模块承担的角色与其中作用。</p><p></p><p>1）网络应用：面向多种应用场景衍生出的网络组件，如统一RPC网关（MTOP）、消息 PUSH 通道（ACCS）、上传（AUS）、下载（TBDownloader）、图片加载（Phenix）、远程配置（Orange）等能力；</p><p>2）网络北向接口：上层调用和内部实现的桥梁，提供统一同步/异步对外API接口和无痕Hook方式，用于上层网络应用/业务场景接入调用网络基础能力；</p><p>3）网络控制器：请求策略管控中心，架构大脑，负责请求端到端链路的调度和优化决策，有着举足轻重的作用，控制器提供完备的网络加速能力，从节点调度/连接选择/请求管理多个环节进行网络请求加速；</p><p>4）网络南向接口：控制面与基础协议转发的桥梁，对协议及数据进行了通用抽象，以应对不同系统框架/不同协议的统一处理；</p><p>5）网络协议转发：多个基础协议和网络框架的统一适配实现，兼容各类请求场景下的最优选择调度，支持标准HTTP/1.1、HTTP/2、HTTP/3，以及集团自研的HTTP/2+SSSL和H3-XQUIC协议；</p><p>6）网络性能管理：网络数据及性能观测中心，NPM（Network Performance Management），负责设备网络状态/质量/信号强度的感知、业务请求数据的统计上报、PING/TRACE/NSLookup等网络时延探测诊断、用户网络诊断/请求抓包等工具建设。</p><p></p><p></p><h2>2.3 行业分析</h2><p></p><p></p><p>纵观行业内一些与之对标的移动网络框架，如腾讯维纳斯WNS、微信Mars、Chromium cronet、Square Okhttp等，AWCN和它们在一些思路上可以说是殊途同归，通过提供更优的IP策略调度、多协议连接管理策略及请求超时等控制加速请求，建设网络诊断、网络质量监控等手段加强网络可观测能力。</p><p></p><p>微信Mars：STN负责请求任务管理/IP排序/网络策略等能力优化请求体验，SDT 为网络诊断模块，一定程度上与AWCN中网络控制器、网络性能管理两块部分承担角色相近。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ba/ba7f44bc606b9864baab742dd6696cd5.png\" /></p><p>图：微信Mars基础架构</p><p></p><p></p><h2>2.4 规模总览</h2><p></p><p></p><p>淘宝统一网络库作为基础组件在集团内被广泛应用，集团内涵盖千级以上规模应用支撑，包含且不限于手淘、闲鱼、优酷、天猫、Lazada、高德、UC浏览器、饿了么等 APP，同时通过阿里云EMAS、友盟对三方应用开放接入，如海底捞/杭州银行等企业应用。</p><p></p><p>作为移动网络解决方案，网络请求的体验是重中之重，因此，笔者将重点讲述网络控制器如何围绕请求构建完整链路上的加速技术，介绍如何从节点调度/连接选择/请求管理/系统调度进行业务网络体验优化，确保请求在各类复杂网络状况下高可用。</p><p></p><p></p><h1>三、网络加速体系详解</h1><p></p><p></p><p>前面提到，网络控制器是作为整体架构上的大脑，承担着请求端到端链路的调度和优化决策，相当于掌舵手和发动机的角色。一次完整的请求网络传输大致可以分为以下链路，即DNS-&gt;建连-&gt;发送数据-&gt;等待首包响应-&gt;接收数据，过程中IP策略调度、连接管理、请求管理及厂商全局调度加速子模块各承担着不同的作用，笔者将逐一介绍阐述。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f7/f7da3b8d58bb93ba3c64690df440403b.png\" /></p><p>图：各模块在一次调用过程的作用域</p><p></p><p>IP策略调度：负责IP/节点的选择和调度，职责是选择最优的IP策略，减少DNS带来的耗时，同时具备切流容灾的能力；连接及协议管理：负责连接池生命周期的管理和各类协议的选择，职责是连接择优且高可用；请求管理：负责请求的调度，涵盖超时、降级、重试恢复等流程控制，职责是让请求更快的被执行；厂商加速：负责对接各大厂商系统侧的网络能力，结合系统赋予的网络加速能力（如更精准的网络质量状态/双频WiFi聚合加速/流加速等），进一步优化复杂网络下请求调度的策略决策，是自研与厂商原生网络能力之间的沟通枢纽。</p><p></p><p></p><h2>3.1 IP策略调度：减少DNS耗时，选择更优IP</h2><p></p><p></p><p>众所周知，传统的LocalDNS方式存在各类隐患问题，如：解析慢/失败率高、更新不及时、域名劫持、缺少精准流量调度及容灾能力，AMDC（Ali Mobile Dispatch Center）是阿里自建的无线域名解析调度服务，在手淘和集团绝大多数应用中广泛应用。</p><p></p><p>依托HTTPDNS实现无线调度功能就够了吗？远没有那么理想化，如何在端侧处理好IP策略的选取/容灾/安全性/服务QPS压力等环节，都至关重要。</p><p></p><p></p><h3>3.1.1&nbsp;IP 选取及缓存汰换策略</h3><p></p><p></p><p>IP选择机制上，基于服务下发+端侧动态排序的机制运行</p><p></p><p>服务端下发：根据单元化/运营商/就近接入/网络协议栈等维度，下发一组可用的 IP列表。同时具备通过端侧跑马算法，生成最优的策略IP。端侧动态排序：根据端侧IP策略使用记录（成功&amp;失败&amp;耗时等维度）进行优先级排序，建连错误次数多的策略在排序优先级上进行降权操作，与之相对应的，建连成功率高性能好的策略优先级提高。</p><p></p><p>缓存和汰换机制上，考虑到频繁AMDC调度带来服务压力、异步请求AMDC带来的生效率问题，端侧对策略进行了缓存，根据用户网络粒度进行独立存储，应用启动和网络事件切换情况下加载所需的策略记录；根据前面所提及的建连记录动态排序能力，自然也产生了对应的淘汰替换机制。</p><p></p><p>淘汰机制：同一IP在5min中连续失败xx次，进入禁用淘汰的情况。更新机制：域名粒度携带TTL（Time To Live）下发，超过TTL的域名进行异步更新，同时更新机制按照域名的优先级也拥有不同的模式。</p><p></p><p></p><h3>3.1.2&nbsp;新态势下的挑战及升级</h3><p></p><p></p><p></p><h4>⍟ CASE 1：高版本设备对于WiFi网络唯一标识的获取限制</h4><p></p><p></p><p>前面提及的端侧缓存策略基于用户网络粒度做独立存储，对于WiFi网络环境BSSID 是端侧的标识主键，但随着系统升级带来的一系列用户权限收敛：</p><p></p><p>1）Android 8及以上版本开始，需要用户授权定位等权限，才可以拿到Wi-Fi SSID/BSSID等相关信息，否则返回02:00:00:00:00:00默认值；</p><p>2）iOS 14起，必须接入network extension，否则无论通过任何手段都无法获取到WiFi 相关信息，对接NE成本太高。</p><p></p><p>这意味着现有网络存储结构不再具备唯一标识用户网络的能力，无法正常获取BSSID 信息的这些设备上存在着策略混用，甚至跨运营商的问题，从而导致请求性能变慢/出现异常，线上约有20%+的用户受潜在影响。因此，对于端侧无法直接获取BSSID的设备，引入新的存储主key，即用户无线接入点AccessPoint信息，流程涉及AMDC端到端协同升级，大致流程如图所示。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e4/e4d7465ec51f11839baf82a3965cc813.png\" /></p><p>图：WIFI存储升级改造流程</p><p></p><p>数据上，图片等CDN类请求平均耗时优化4.439%，耗时分位P90优化1.932%，P99 优化2.230%，P999化2.668%&nbsp;。</p><p></p><p></p><h4>⍟ CASE 2：应对更复杂协议/更精细化调度诉求下的协议演进</h4><p></p><p></p><p>当现有协议结构无法满足日益复杂和精细的调度诉求，且无法在现有模型上持续长期迭代时，就需要对协议进行重构升级。我们在移动网络虚拟化项目中切实遇到如上的问题，协议重构对于端上来说，是对整个存储数据模型的改变，这意味着升级新协议的用户可能无法继续使用旧版本存储策略，直接丢弃老协议存储是最简单有效的手段，但这会导致升级后一段时间内用户出现降级LocalDNS的问题，这对我们不能容忍。</p><p></p><p>重新实现一个协议不难，难的是如何确保新老协议平稳升级过渡，避免请求出现 LocalDNS降级。因此，方案的关键在于如何对新老协议做数据迁移，其中涉及升级链路和降级链路(如稳定性问题功能回退场景)。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/19/199f322144fa6f449d167ddc18a8944b.png\" /></p><p>图：AMDC存储数据迁移</p><p></p><p></p><h2>3.2 连接管理：更快建连，保障连接高可用</h2><p></p><p></p><p></p><h3>3.2.1&nbsp;连接建立</h3><p></p><p></p><p>除了常规的串行建连和并发建连方式，我们提供了热域名预建和复合连接的方式，应对各种复杂的场景。</p><p></p><p>热域名预建机制：启动场景下的关键请求加速</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/26/266eaac72e1be2d51b7fdd978f22ec19.png\" /></p><p>图：热域名预建</p><p></p><p>复合连接机制：IPv6规模化背景下的体验保障</p><p></p><p>当手淘作为IPv6示范性应用跑在最前面时，我们发现国内存在部分双栈网络IPv6质量差甚至不通的情况，Android的舆情反馈尤为突出，原因在于iOS系统侧实现了Happy Eyeballs机制确保快速rollback回IPv4链路，而Android设备没有。</p><p></p><p>复合连接思路也因此来源于IPv6 Happy Eyeballs算法实现，详见RFC 6555&nbsp;[1]。</p><p></p><p></p><blockquote>When a server's IPv4 path and protocol are working, but the server's IPv6 path and protocol are not working, a dual-stack client application experiences significant connection delay compared to an IPv4-only client. This is undesirable because it causes the dual-stack client to have a worse user experience. This document specifies requirements for algorithms that reduce this user-visible delay and provides an algorithm.</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0d/0d47599dc97e70e5c4635d89b2afa207.png\" /></p><p>图：双栈复合连接</p><p></p><p>复合连接的两个核心目标：</p><p></p><p>双栈环境体验：从IPv6和IPv4中为用户选择一个最快的链接，且保证优先使用 IPv6；减少后端压力：避免同时对两地址发起请求，造成网络破坏。</p><p></p><p>数据上，针对MTOP和图片请求，双栈情况下其建连性能平均耗时降低22.12%，99分位性能降低60.19%，请求数据平均耗时降低了1.23%，P99分位耗时降低&nbsp;6.077%。</p><p></p><p></p><h3>3.2.2&nbsp;连接调度</h3><p></p><p></p><p>按照不同的通道应用场景，连接可以区分为两种形态，保活连接与常规连接。</p><p></p><p>保活连接：需要时刻保证连接存活，随时可用，适用于上下行推拉结合的场景，如消息；常规连接：不需要时刻保活，空闲及时回收减少资源占用，适用于仅主动上行调用的场景，如RPC。</p><p></p><p>针对建立好的连接，不同形态的维护管理方式也不同。</p><p></p><p>面向保活可用：假连检测，动态心跳</p><p></p><p>通过对连接的多场景可用性检测，增强连接质量的感知，当出现连接异常时能够快速的恢复重建。</p><p></p><p>检测的手段基本为心跳PING包方式，分位定时心跳（前后台间隔不同）、分场景心跳（切换前台、业务上行超时等）。</p><p></p><p>面向空闲回收：闲时状态检查，及时关闭</p><p></p><p>对于不需要主动下行推送的场景，建连时刻保持对于用户带宽和功耗存在一定影响，因此针对此类连接增加了空闲状态的检查，当发现建连超过一定时间没有数据包传输时会进行连接的关闭回收，以减少资源占用，释放有限带宽。</p><p></p><p></p><h2>3.3 请求管理：弹性超时控制，请求补偿恢复</h2><p></p><p></p><p></p><h3>3.3.1&nbsp;动态超时</h3><p></p><p></p><p>精细控制：在请求各个链路上，具有独立超时控制，每个阶段精细化控制，快速感知超时情况；动态调配：针对不同域名请求/网络类型/不同质量的环境下动态超时时长处理。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2f/2f94bf152debc3b012f95e383fed989e.png\" /></p><p>图：请求各阶段超时控制</p><p></p><p></p><h3>3.3.2 多路竞争&amp;择优选用</h3><p></p><p></p><p>对于请求超时或慢的场景，AWCN会通过多种方式进行择优选用和请求补偿，确保链路最优，保障体验：</p><p></p><p>1）传输协议：运营商对于HTTP/3（UDP）的网络质量保证远不及TCP，常常遇到各类UDP穿透性、请求超时等问题，因此必要时需快速决策，切回HTTP/2、HTTP/1.1的TCP传输链路；</p><p>2）底层框架：自研传输库(TNET)带来的好处是协议的自建和调优，但也因此导致协议非标(如HTTP/2+SSSL私有加密协议)，运营商拦截丢包、端到端链路稳定性等问题，必要时决策回退至系统原生库；</p><p>3）网络通道：以往对于用户网络不通导致的问题，优化的手段有限，但随着系统开放多通道选择的能力之后，上层也拥有了切换网络通道的能力，当检测WiFi不通环境下，会将请求切换至蜂窝网络通道恢复。</p><p></p><p>以传输协议择优选用为例，对于H3协议在手淘的规模化过程用户体验不受损，AWCN网络库建立起完善的择优选用和补偿兜底机制。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/39/39ac95a38d9de02a6fc0e17385f8553b.png\" /></p><p>图：H3规模化过程中的体验保障</p><p></p><p></p><h2>3.4 厂商加速：拥抱原生，系统级调度加速</h2><p></p><p></p><p>近年来，国内几家厂商前后对上层应用开放了系统级的网络优化能力，包括网络带宽调度、数据流加速、QoE状态反馈、弱网预测、双WiFi聚合能力等，从系统侧调度提升请求性能。</p><p></p><p></p><h3>3.4.1&nbsp;厂商能力融合的思考与决策</h3><p></p><p></p><p>作为淘宝终端网络基础设施，一直以来我们都专精于应用策略及协议上，致力如何更好的调度、管理连接/协议让请求更快。随着国内厂商的发展，我们发现，脱离厂商的自研之路并不顺畅：</p><p></p><p>1）一方面，不同厂商的限制和表现异同常让我们对各厂商做一些 hack 和兼容性的事情；</p><p>2）另一方面，用户的网络资源有限，手淘作为单一应用，能调配和控制的资源有限。如何扩大我们的调度域得以让我们的应用内请求更好，是我们常在思考的事情。</p><p></p><p>因此我们选择拥抱厂商，通过系统赋予的调度加速能力，深度合作，为应用提供更好的网络体验。</p><p></p><p>为了屏蔽不同厂商之间的能力差异和接入方式不同，AWCN提供厂商加速模块的通用能力抽象，通过运行期对不同设备和厂商能力的解决，动态组织支持的系统能力列表。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/9d/9ded6953cc64c24fd4b395bf92dce0c5.png\" /></p><p>图：厂商加速接入架构</p><p></p><p>目前，我们已经和OPPO完成接入和上线工作，协同厂商侧紧锣密鼓的放量验证中。</p><p></p><p></p><h1>四、手淘弱网破障实践</h1><p></p><p></p><p></p><h2>4.1 指标定义：明确弱网/卡顿请求</h2><p></p><p></p><p>过往我们基于网络请求1s法则作为优化的指标衡量，目前业务请求秒出率超过 95%，当网络体验进入深水区，弱网/长尾等卡顿负向请求成为我们关注和突破重点。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1e/1ecbe30ed8a52d1c3559882934dd5503.png\" /></p><p>图：网络请求1s法则</p><p></p><p>弱网作为广义的概念，有多方面的原因，一般来说我们把用户网络波动、信号强度弱、时延RT大称之为弱网环境。对于用户来说，最大的体感就是各类页面打开慢、加载久、图片空窗等问题，请求耗时久/异常是直接原因。我们从请求端到端全链路进行逐一分析，除了网络传输、后端服务处理耗时，也存在一些业务本地处理/回调等执行的耗时。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/75/750f1dbc35a21922179157854e681ea5.png\" /></p><p>图：请求全链路阶段</p><p></p><p>通过梳理完整请求的调用链路，我们在思考如何通过指标化的方式衡量出这部分对业务/用户体验有损的请求，在明确目前线上相关负向卡顿请求的规模的前提下，再进行进一步的优化及效果观测。</p><p></p><p>因此，基于用户/业务视角，将请求全链路阶段内出现异常报错、耗时长尾定义为卡顿请求：</p><p></p><p>异常报错：失败的请求，无论何种原因失败，网络超时、服务端未返回等；耗时长尾：响应超过xx秒未返回、没有结束的请求。</p><p></p><p></p><h2>4.2 诊断体系：更快识别、定位各类复杂网络问题</h2><p></p><p></p><p>经常有一些线上用户反馈网络类的舆情：</p><p></p><p>为什么WIFI下访问慢，切换到4G网络就恢复了？我的网络没问题，为什么手淘等淘系应用加载慢，其他APP正常？为什么xx页面加载很慢，其他页面没问题？……</p><p></p><p>其中导致的原因很多，如用户路由器的配置、淘系域名被营商IP封禁、业务调用链路超时等，为了更好的定位/分析各类网络类问题， 我们针对移动互联网下用户网络类体验问题的复杂性，进一步建设 NPM 诊断技术体系，加强相关技术和数据的应用。</p><p></p><p>领域模型：用户体验问题的技术面穷举拆解、沉淀；能力构建：诊断原子能力及工具链，运维提效；规模应用：多维用户网络数据，IPv6/MTU/UDP大盘。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/7d/7dd2e9fc807997cf497d3ee42da1d870.png\" /></p><p>图：多场景网络体验类问题诊断体系</p><p></p><p></p><h2>4.3 弱网技术：复杂网络下的网络体验</h2><p></p><p></p><p>针对移动复杂网络环境，除了前面网络加速体系所提到的相关能力之外，这里笔者将重点对典型弱网靶向性优化技术展开。</p><p></p><p></p><h3>4.3.1 网络多通道：手淘规模化应用</h3><p></p><p></p><p>当请求没有响应/接收慢的情况下，一般会触发超时机制进行请求重放。但在用户 WIFI 信号差&amp;弱网环境下，我们反而要谨慎重试，一方面重试会加重系统上的负载，另一方面重试会导致请求重新开始，对弱网传输慢的情况不友好，反而加剧卡慢的情况。</p><p></p><p>因此，在寻求更友好的方式上，我们发现系统提供了一种多通道传输的能力，即允许设备在WIFI环境下将请求切换蜂窝网卡的能力，网络应用层可以利用该技术，减少请求的超时等一类错误，提升请求的成功率。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5a/5afbd8fdb22a03597bfa904faed1120b.png\" /></p><p>图：系统官方文档</p><p></p><p></p><h4>⍟ 规模化方案</h4><p></p><p></p><p>除了常规的技术应用，因为涉及到用户在WIFI网络下的流量损耗，我们遵从用户隐私等合规前提下，提供多通道能力生效的用户提示和功能授权。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/10/1016014a595dcc1134173a2960ce10d2.png\" /></p><p>图：多通道整体规模化方案</p><p></p><p></p><h4>⍟ 优化数据</h4><p></p><p></p><p>目前多通道技术在手淘核心浏览链路上已规模化应用，严格按照AB实验得出数据，双十一期间双端日对请求超时率减少30%以上。</p><p></p><p></p><h3>4.3.2 原生HTTP/2：突破系统限制，实现H2协议支持</h3><p></p><p></p><p>相对于 HTTP/1.1 协议，HTTP/2、HTTP/3 的协议性能优势不言而喻，HTTP/2 协议在手淘和集团内早已支持多年，HTTP/3 协议同样在持续规模扩量中，但目前手淘内仍然存有10%左右HTTP1.1流量。</p><p></p><p>通过分析，主要有以下原因导致：</p><p></p><p>1）HTTP/2 协议非标准化实现，加密方式为私有slight-ssl，域名支持需服务端部署，未明确知晓是否支持的域名只能走HTTP/1.1协议；</p><p>2）鉴于非标的影响，请求链路上需要强依赖AMDC，必须通过AMDC配置明确支持h2+sssl方式的域名下发后才能支持；</p><p>3）非标协议的兼容性存在小概率问题，个别运营商针对非标协议会进行劫持处理导致请求失败降级到短连。</p><p></p><p>过往很多业务反馈，为什么域名在Chrome浏览器上访问支持HTTP/2，而手淘里是仍然是HTTP/1.1的原因就在于此。那么，如何在不需要服务端部署、不强依赖AMDC的前提下，让请求实现长连加速？标准HTTP2的实现是必经之路。</p><p></p><p></p><h4>⍟ 如何支持标准HTTP/2？</h4><p></p><p></p><p>iOS 通过升级 URLSession 系统调用方式，可低成本的迁移到 H2/H3 协议上，但对于 Android 来说，系统侧提供的 HttpUrlconnection 仅支持到 HTTP/1.1 协议。因此，灵魂三问：</p><p></p><p>1）标准协议的完整实现，必然要加入人力投入开发，稳定性验证和上线是一个较长的周期，如何减少支持的成本？考虑引入稳定的能力实现，如Okhttp。</p><p>2）稳定库引入必定会增加包大小，这对目前严控包大小的现状有较大冲突，如何解决？需尽可能不增加包大小的情况下支持。</p><p>3）既要考虑成本和稳定性验证等规模化问题，又要避免给手淘包大小过大的增幅。既要马儿跑，又要马儿不吃草。如何实现？</p><p></p><p></p><h4>⍟ 源码突破</h4><p></p><p></p><p>通过对系统源码的分析，我们发现Android系统5.0之后，系统API HttpUrlconnection底层已经通过okhttp进行托管实现，也就是说Android系统本身支持通过okhttp访问不需要额外引入三方库进行，只要找到可以hook的点。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f8/f87dbfd3395a2260541f9338c0125ef1.png\" /></p><p>图：Android网络托管Okhttp代理</p><p></p><p>进一步分析源代码，我们找到了okhttp在android系统侧的位置和包名，即com.android.okhttp下。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1c/1c10cc93815696e6431bcefde4440775.png\" /></p><p>图：Android Okhttp源码实现</p><p></p><p>虽然是隐藏API，仍可以通过反射的方式进行，为了更友好的编码实现，在编译期通过空实现依赖的方式进行显式的调用，同时确保在使用前对设备okhttp的环境及兼容性做好检查。</p><p></p><p></p><h4>⍟ 遭遇系统bug</h4><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/48/4858cfeeae4ae8f3414720044672dbe3.png\" /></p><p>图：Android Okhttp crash</p><p></p><p>灰度过程我们发现一些因为Okhttp导致的IndexOutOfBoundsException稳定性问题，bug来源于特定场景下没有拿到证书列表且未对容器判空导致，详细记录在：https://github.com/square/okhttp/issues/4208。</p><p></p><p>官方在版本3.12.2+上修复，但android源码仍使用2.x版本导致无法修复。</p><p></p><p>为了规避系统侧问题，我们摒弃okhttp提供异步调用的api，改为同步调用+异常捕获+上层转异步的方式进行处理。</p><p></p><p>此外，针对不同应用，若存在三方okhttp依赖，会自动桥接到三方实现上，体验高版本okhttp的稳定性；对于手淘这种不依赖三方okhttp的应用，再桥接到系统版本实现。</p><p></p><p></p><h4>⍟ 优化数据</h4><p></p><p></p><p>标准H2升级率先在Feeds接口域名覆盖，农场整体舆情月环比下降23%，请求耗时优化21.4%，成功率提升0.3pt。</p><p></p><p></p><h1>五、后续方向与展望</h1><p></p><p></p><p>对于移动网络体验的探索是无止境的，今年我们围绕弱网和体验加速做了一些工作，有些内容因为篇幅和侧重点考虑所以没有进一步展开讲述，后期再通过另外专题文章进行侧重讲解。</p><p></p><p>但即便如此，面对亿万用户各类复杂多变的环境，仍存在着加载慢、卡顿、空白的声音，作为淘宝和集团统一的终端基础网络设施，如何让用户浏览体验再更上一层楼，我们要做的还很多。</p><p></p><p></p><h2>5.1 更精准的网络状态感知</h2><p></p><p></p><p>准确掌握用户的网络状态是一切手段的前提，以往我们围绕NPM搭建诊断体系，对端到端链路的连通性和质量进行检测，在实时性、准确度和可用性仍有提升空间。</p><p></p><p>1）结合厂商系统侧更精准可靠的网络质量反馈：依托提供QoE网络质量能力，提供更实时的WiFi/蜂窝网络信号质量和强度反馈；</p><p>2）提供用户更友好的网络感知手段：当用户出现“潜在”的网络问题，我们希望大部分情况用户可以自行知道哪里出问题、怎么解决。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b9/b903aaece7b1af17567ec4a2a30f84ef.png\" /></p><p>图：用户网络诊断感知</p><p></p><p></p><h2>5.2 更动态智能的调度加速能力</h2><p></p><p></p><p>针对不同网络类型和质量的环境，我们希望建设更适应性更动态智能的调度能力，基于不同场景做更适合有效的加速能力应用，一成不变，固化的优化策略无法在所有的环境下发挥更优的效果。前面提到，当我们能够更精准感知，甚至预测用户网络的变化，我们能够做的事情就更多。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/48/483221dc3a3e84532f86df99b818f5b4.png\" /></p><p>图：预测弱网环境的动态调优</p><p></p><p></p><h2>5.3 更一致的弱网交互体验</h2><p></p><p></p><p>我们发现手淘多业务在弱网交互下表现不一，存在着无法刷新重试、空白无提示、阻塞无法操作等问题，因此除了技术侧的能力强化，会进一步联合多方沉淀弱网体验规范，协同业务优化弱网场景下的表现与体验、提升交互性和可恢复性，并改善用户在弱网下的预期和感受。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a2/a206a57e5a03e8ef2ef518db52896d62.png\" /></p><p>图：手淘弱网交互表现不一</p><p></p><p></p><h2>参考资料</h2><p></p><p></p><p>[01]&nbsp;RFC 6555</p><p>https://www.rfc-editor.org/rfc/rfc6555</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/33/33aebeb66f92b54f3a4713d861e05ba7.png\" /></p><p></p>",
    "publish_time": "2023-03-07 10:09:58",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "无服务器WebSocket：开启实时数据传递新时代",
    "url": "https://www.infoq.cn/article/9C7u99NSGaKvx9jeA4lw",
    "summary": "<p></p><h2>实时数据传递的兴起</h2><p></p><p>&nbsp;</p><p>我们的日常数字体验正在经历一场变革：实时数据。</p><p>&nbsp;</p><p>现在，用户希望应用程序或浏览器中的页面无需刷新就能更新状态——例如，显示实时体育比分的应用程序或在地图上跟踪快递进度的网页。</p><p>&nbsp;</p><p>我们都已经习惯了即时的数字体验，我们理所当然地认为应用程序和网页可以提供流畅的交互式服务，没有延迟。提供无缝实时更新体验来吸引用户的组织可以获得更高的用户参与度和更多的页面停留时间，还有潜在的再次访问和业务上的好处。如果没有无缝的实时更新，用户体验就会显得过时，并有失去市场份额的风险。</p><p>&nbsp;</p><p>本文通过示例对一些最常见的实时用户体验进行了比较，讨论了支持实时更新的事件驱动架构，并介绍了常见的技术选项。</p><p>&nbsp;</p><p>据估计，到2025年，<a href=\"https://www.zdnet.com/article/by-2025-nearly-30-percent-of-data-generated-will-be-real-time-idc-says/\">全球30%的消费数据</a>\"将来自实时信息交换，因为预计将有1500亿台设备连接并创建实时数据。随着企业寻求相对于竞争对手的运营优势，它们开始关注实时体验。在最近的一项<a href=\"https://www.idc.com/getdoc.jsp?containerId=US49287522&amp;pageType=PRINTFRIENDLY\">调查</a>\"中，一些IT行业的领先者告诉IDC，在有助于实现实时决策的技术上投入是当务之急。</p><p></p><h4>实时的定义</h4><p></p><p>&nbsp;</p><p>人类平均眨眼时间为100毫秒，平均反应时间约为250毫秒。因此，在250毫秒以内发生的任何事情都被认为是“实时”的。</p><p>&nbsp;</p><p>操作系统对硬件有不同的要求，“硬实时”的内核承诺延迟小于5毫秒。另一个要求低延迟的领域是多人游戏，它要求延迟低于50毫秒。在本文中，我们要讨论的实时是一种符合人类对“瞬时”理解的实时。</p><p></p><h2>常见的实时用户体验</h2><p></p><p></p><h4>实时体验</h4><p></p><p>&nbsp;</p><p>许多人都熟悉这种实时体验——根据内容或数据的变化，实时数据从源向用户单向传递。</p><p>&nbsp;</p><p>这类例子包括：</p><p>&nbsp;</p><p>在线购物网站，显示商品库存数量或商品存放在其他用户购物篮中的数量；作为对银行帐户活动的反映，即时更新银行应用程序；将体育和新闻更新发送到应用程序或网页上。</p><p></p><h2>实时体验的例子：Reddit</h2><p></p><p>&nbsp;</p><p>Reddit是全球访问量最大的20个网站之一，它<a href=\"https://www.reddit.com/r/RedditEng/comments/pfgz4r/reddits_new_realtime_service/\">最近推出的实时更新</a>\"功能表明，在与Facebook等其他在线社区的竞争中，实时体验具有重要的战略意义。Reddit App用户现在可以看到其他Reddit用户的活动，比如当其他Reddit用户在阅读同一篇文章或输入回复时会显示动画和提示。除此之外，还有其他的一些实时功能。</p><p></p><h4>共享的实时体验</h4><p></p><p>&nbsp;</p><p>当实时数据双向流动时，就形成了共享的实时体验。打字聊天消息的传递就是一个典型的例子。其他的例子还包括民意调查、测验和问答，例如在Twitch流媒体直播中，参与者可以与主持人互动。</p><p></p><h2>共享的实时体验示例：Mentimeter</h2><p></p><p>&nbsp;</p><p><a href=\"https://www.mentimeter.com/\">Mentimeter</a>\"可以作为直播的一个补充环节，可用于进行民意调查或测验。例如，主持人可以问观众：“你们最喜欢的曼达洛人角色是哪一个？”参与者可以打开一个短URL，并进行在线投票，他们的回答会被实时可视化，并在直播中显示。</p><p></p><h4>协作体验</h4><p></p><p>&nbsp;</p><p>协作体验类似于共享的实时体验，但通常使用<a href=\"https://ably.com/blog/collaborative-and-multiplayer-architecture-with-edge-messaging\">点对点通信</a>\"，用户可以实时编辑共享的状态和数据。一个典型的例子是我们在远程工作中使用的协作生产力工具，如Figma、Google Docs或Miro。</p><p></p><h2>协作体验示例：Figma</h2><p></p><p>&nbsp;</p><p><a href=\"https://www.figma.com/\">Figma</a>\"是一个协作设计工具，允许多个用户同时处理一个文件。它被称为“<a href=\"https://michaelmcwatters.com/2020-the-year-design-changed-forever-b80062edfb65\">设计协作的分水岭</a>\"”和<a href=\"https://sacra.com/research/matthew-moore-figma-expert-interview/\">设计软件的变革者</a>\"。</p><p>&nbsp;</p><p>用户可以直接共享Figma文件的链接，不需要下载或发送文件，也不需要离线编辑和合并修改。对于文档、电子表格和演示文稿的协作来说，这些已经相对标准化了，但对于复杂的设计软件来说，这是一种新的工作方式。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/bc/bc75ed32b29b31b5cd2dec1107b3eeda.png\" /></p><p></p><p>对于许多组织（无论是现有的头部公司还是挑战者）来说，<a href=\"https://ably.com/blog/buy-vs-build-adobe-acquires-figma\">被Adobe以破纪录的200亿美元收购</a>\"的Figma是一个有趣的案例。共享的实时和协作体验是未来趋势，没有实时功能的产品需要找到一种方法来引入这些功能。</p><p>&nbsp;</p><p>通常，当我们讲到实时体验时，我们想到的是速度和延迟，但实时交互的根本在于架构。</p><p></p><h2>基于事件驱动的实时架构</h2><p></p><p>&nbsp;</p><p>对于一个成功的实时解决方案，你需要考虑采用<a href=\"https://ably.com/blog/introduction-event-driven-architecture\">事件驱动模型</a>\"。在事件驱动模型中，事件表示可能触发客户端（或事件消费者）执行某些操作的变更，例如更新UI。事件将作为消息通过事件通道传递给消费者。事件生成器负责传递反映数据或状态实时变化的事件。</p><p>&nbsp;</p><p>事件驱动系统的典型模式是“<a href=\"https://ably.com/topic/pub-sub\">发布和订阅</a>\"”。当状态发生变化时，事件生产者（发布者）发送事件消息，事件订阅者可以消费这些消息，并做出响应时执行业务逻辑。</p><p></p><h2>用于实时解决方案的协议</h2><p></p><p>&nbsp;</p><p>在事件驱动架构中，事件消费者需要能够异步地接收更新。可供选择的协议包括：</p><p>&nbsp;</p><p><a href=\"https://ably.com/topic/long-polling\">HTTP长轮询</a>\"——服务器保持客户端连接处于打开状态，在新数据可用或连接超时时发送响应。<a href=\"https://www.ably.io/concepts/websockets\">WebSocket</a>\"——通过持久TCP连接提供双向、全双工通信通道，开销要比半双工替代方案（如HTTP长轮询）<a href=\"https://ably.com/blog/websockets-vs-long-polling\">低得多</a>\"。<a href=\"https://www.ably.io/concepts/mqtt\">MQTT</a>\"——用于在CPU功率或电池寿命有限的设备（如物联网设备）之间传输数据的首选协议。<a href=\"https://www.ably.io/concepts/server-sent-events\">SSE</a>\"——用于事件驱动数据流的轻量级开放协议（仅订阅）。</p><p>&nbsp;</p><p>WebSocket可以说是使用最为广泛的支持实时用户体验的协议。WebSocket于2011年实现标准化（<a href=\"https://tools.ietf.org/html/rfc6455\">RFC 6455</a>\"），它是建立在<a href=\"https://en.wikipedia.org/wiki/Transmission_Control_Protocol\">TCP/IP</a>\"协议栈之上的一个薄传输层。</p><p>&nbsp;</p><p>WebSocket的出现标志着Web开发的一个转折点。WebSocket连接是为事件驱动架构而设计的，并针对最小化开销和延迟进行了优化，它通过持久的单套接字连接实现了客户端和服务器之间的双向全双工通信，并尽可能接近原始的TCP通信层。</p><p>&nbsp;</p><p><a href=\"https://ably.com/topic/websockets-vs-http\">与HTTP相比</a>\"，WebSocket连接提高了效率，可伸缩性更好。WebSocket协议是基于推送的，因此一旦有事件发生，连接的客户端就会收到更新。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/93/935656757c522bf4c2f534ed527432b6.png\" /></p><p></p><p></p><h2>用于事件驱动系统的WebSocket</h2><p></p><p>&nbsp;</p><p>我们有几种方法可以将WebSocket集成到我们的技术栈中。</p><p>&nbsp;</p><p>第一种方法是从头开始构建一个基于WebSocket的消息传递解决方案，并根据需要对其进行定制。例如，DAZN使用WebSocket协议设计了一个<a href=\"https://medium.com/dazn-tech/introducing-pubby-our-custom-websockets-solution-c5764e3a7dcb\">自定义解决方案</a>\"，用于向数百万用户广播消息。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6b/6b869c15fca484df633f1e3914cad2c6.png\" /></p><p></p><p>另一种方法是使用WebSocket开源项目作为消息传递层的主干。<a href=\"https://ably.com/topic/scaling-socketio\">Socket.IO</a>\"是一个基于原始WebSocket构建的框架，提供了额外的功能，比如支持回退、自动重连和发布/订阅消息（房间）。一种常见的方法是结合使用Socket.IO和<a href=\"https://redis.io/docs/manual/pubsub/\">Redis Pub/Sub</a>\"，在不同的进程或服务器上运行多个Socket.IO实例，并在节点之间传递事件。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/dd/dd7aa9d38388f150b6143ee53e42a765.png\" /></p><p></p><p>然而，这种方法仍然存在一些限制，例如缺乏消息排序、有限的原生安全性和单区域可用性设计。因此，要<a href=\"https://ably.com/topic/scaling-socketio\">在生产环境中大规模使用Socket.IO</a>\"仍然存在很大的挑战。</p><p></p><h2>为实时数据构建WebSocket解决方案所面临的挑战</h2><p></p><p>&nbsp;</p><p>上面描述的两种WebSockets集成方式都存在工程方面的挑战，可能会<a href=\"https://ably.com/resources/reports/state-of-serverless-websocket-infrastructure\">影响项目成本和交付期限</a>\"。从表面上看，构建WebSocket解决方案就是从添加接收实时更新的功能开始。然而，随着功能的演进，基本的实时体验会延伸出共享实时体验和协作功能等额外需求。</p><p>&nbsp;</p><p>为这些实时体验构建和维护一个专有的WebSocket解决方案可能极具挑战性。支撑解决方案的基础设施必须稳定可靠，需要有经验的工程师来构建和维护。开发团队可能会更关注实时需求方面的东西，而不是增强核心产品的特性，并面临可伸缩性和弹性、延迟、容错以及数据完整性和连接管理等工程挑战。</p><p></p><h4>可伸缩性和弹性</h4><p></p><p>&nbsp;</p><p>为了能够可靠地处理数百万个并发WebSocket连接，解决方案需要具备可伸缩性，这是一项复杂且耗时的工作，需要专门的工程资源、大量的基础设施成本和时间。</p><p>&nbsp;</p><p>水平伸缩带来了更复杂的架构、负载均衡、路由以及基础设施和维护成本的增加，这些还只是其中的一部分挑战。</p><p>&nbsp;</p><p>为了能够成功地处理规模不可预测的WebSocket连接，解决方案还需要具备弹性，让系统能够自动添加更多的服务器，有足够的容量来处理潜在的流量高峰。</p><p></p><h4>延迟</h4><p></p><p>&nbsp;</p><p>网络延迟是大规模分布式系统中的一个关键因素。延迟随着距离的增加而增加，因此为了保持较低的网络延迟，建议借助托管数据中心和边缘加速点让数据尽可能地靠近用户。良好的用户体验还需要尽量减少延迟抖动。</p><p></p><h4>容错</h4><p></p><p>&nbsp;</p><p>要让系统具备容错能力，必须要有服务实例甚至数据中心冗余。这意味着至少要将基础设施分布到同一地区的多个可用性区域，甚至分布到多个地区。这涉及大量的工程和DevOps工作以及与基础设施相关的成本。</p><p></p><h4>数据完整性和连接管理</h4><p></p><p>&nbsp;</p><p>事件驱动架构依赖了事件消息序列，要求没有消息丢失或没有的无序消息。</p><p>&nbsp;</p><p>如果用户设备断电或网络出了问题，则可能导致连接中断。当用户重新连接时，需要从断开连接的点继续处理事件。系统需要在不重复已处理消息的情况下传递遗漏的消息。整个过程必须是完全无缝的。</p><p>&nbsp;</p><p>所以还需要解决一些复杂的工程问题，以保证消息排序和精确一次语义所需的数据完整性。</p><p></p><h4>DIY的困境</h4><p></p><p>&nbsp;</p><p>一些组织试图尽早发布产品，将这些困难的问题留到以后解决。但是，如果产品无法满足它创造出来的需求，那么迅速进入市场并获得早期成功可能会弄巧成拙。</p><p>&nbsp;</p><p>另一种选择是尽早进行伸缩性设计，并为未来的增长建立可持续的架构。但这种方法可能会导致延迟进入市场，成为竞争对手的可乘之机。另一个常见的问题是，最初的设计会在产品获得足够的市场反馈以了解其发展方向之前就已经在产品中加入了重大的限制。</p><p></p><h2>无服务器WebSocket的优势</h2><p></p><p>&nbsp;</p><p>一个可行的解决方案是将构建业务关键型实时平台的复杂性转移到专门的云服务上。全托管的无服务器WebSocket解决方案为基于事件驱动的消息传递提供了基础设施，它将底层基础设施变成了商品。用户使用提供者服务发送/接收低延迟消息，并专注于构建业务逻辑来处理实时更新。</p><p>&nbsp;</p><p>将WebSocket技术与无服务器模型结合起来有几个好处：</p><p>&nbsp;</p><p>无需维护基础设施——构建专有的WebSocket基础设施既耗时又耗费资源。无服务器WebSocket提供商减轻了管理实时基础设施的负担。降低运营成本——大多数无服务器WebSocket提供商都提供按使用付费的定价模型。这比预先租用或购买固定数量的服务器容量更具成本效益，后者通常会存在大量未充分使用或空闲的时间。可伸缩性和可用性——无服务器WebSocket架构在设计上是可伸缩的。使用无服务器基础设施构建的应用程序可能会遇到很大其波动的流量，需要基础设施能够自动伸缩以处理不可预测且快速变化的并发WebSocket连接。降低延迟——在无服务器模型中，应用程序并不是托管在原始的服务器上。这意味着，根据无服务器WebSocket基础设施提供商的设置，无服务器应用程序可能会在全球多个地区和边缘位置的用户附近运行，从而提高了性能并降低了延迟。</p><p></p><h2>无服务器WebSocket解决方案</h2><p></p><p>&nbsp;</p><p>一些云供应商提供了无服务器WebSocket解决方案，如<a href=\"https://aws.amazon.com/appsync/\">AWS AppSync</a>\"和<a href=\"https://aws.amazon.com/api-gateway/\">AWS API Gateway</a>\"、<a href=\"https://developers.cloudflare.com/workers/learning/using-websockets/\">Cloudflare Workers</a>\"、<a href=\"https://cloud.google.com/run/docs/triggering/websockets\">Google Cloud Run</a>\"和<a href=\"https://azure.microsoft.com/en-gb/services/web-pubsub/\">Azure Web PubSub</a>\"。然而，这些解决方案并没有提供一个完整的端到端解决方案来处理最常见的场景，具体例子见<a href=\"https://medium.com/dazn-tech/aws-serverless-websockets-at-scale-8a79cd5a9f3b\">DAZN对AWS AppSync和AWS API Gateway的评测</a>\"。</p><p>&nbsp;</p><p>一些平台，如<a href=\"https://www.ably.com/\">Ably</a>\"和<a href=\"https://pusher.com/\">Pusher</a>\"，致力于帮助组织应对在采用无服务器WebSocket事件驱动架构时面临的挑战，并添加了额外的功能来解决常见的痛点。</p><p>&nbsp;</p><p>例如，它们很少只使用一个通用的协议，因为不同的协议可以更好地实现某些目的。Ably提供了多种协议，如WebSocket、MQTT、SSE和HTTP，并且还扩展了原始协议之外的功能，如设备状态、流历史、通道回流和处理连接突然断开。</p><p>&nbsp;</p><p>采用供应商提供的端到端无服务器WebSocket平台有很多好处，因为它们可以应对处理大规模实时数据时所面临的挑战，让工程团队可以专注于核心产品创新，不需要操心与实时基础设施相关的问题。</p><p></p><h2>总结</h2><p></p><p>&nbsp;</p><p>实时体验由实时、事件驱动的API提供支撑，可以满足现代终端用户的需求。</p><p>&nbsp;</p><p>稳定的低延迟、数据完整性（顺序和传递保证)、容错、可用性和可伸缩性是实时系统的基础，并不是每个组织都有能力处理好构建可靠和不间断体验的复杂性。</p><p>&nbsp;</p><p>新一代提供无服务器WebSocket的PaaS可以促进架构、构建、交付和维护解决方案的过程，让用户更加满意，并使产品更具竞争力，无需花费高成本自行开发解决方案。</p><p>&nbsp;</p><p>作者简介：</p><p>Matthew O'Riordan是Ably（无服务器WebSocket提供商）的首席执行官和联合创始人。他已经做了20多年的软件工程师，其中有很多时间在担任CTO。他从在20世纪90年代中期开始从事商业互联网方面的工作，当时IE 3和网景还在你争我抢。他喜欢写代码，同时，作为初创企业家，扩大业务所面临的挑战是他前进的动力。Matthew之前曾创办过两家科技公司，并成功退出。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/serverless-websockets-realtime-messaging/\">https://www.infoq.com/articles/serverless-websockets-realtime-messaging/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/UJwIp4VYf3XjkPHiMTJc\">WebSocket 原理浅析与实现简单聊天</a>\"</p><p><a href=\"https://www.infoq.cn/article/3WpGbP2NEvgjzoWZbLHx\">构建通用WebSocket推送网关的设计与实践</a>\"</p><p><a href=\"https://www.infoq.cn/article/lCrrI9I41t6hcBaHwVTx\">Serverless实战：利用云函数 + API网关实现Websocket聊天工具</a>\"</p>",
    "publish_time": "2023-03-07 11:03:15",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "新生代车主成消费主力，保时捷如何用数字化保持“年轻态”",
    "url": "https://www.infoq.cn/article/FHLt7r5zU7lvYP8U5ODm",
    "summary": "<p>汽车消费市场正在悄然发生变化。消费群体的年龄层下移，购买力水平上移，汽车从过去的代步工具变成品质消费，消费决策从重“性价比”变成重“体验”......这一切都指向了一个结果——消费者的影响力在提升，对汽车产品本身的差异化，以及汽车企业的服务能力，都提出了更高的要求。</p><p></p><p>对于<a href=\"https://www.infoq.cn/article/OuAe5PBxryakC5IliQru\">汽车</a>\"行业而言，这意味着过去流水线式的生产和销售模式将慢慢失效。为了跑出同质化的“内卷圈”，定制化的生产能力几乎是标配，并且，汽车企业还必须通过更精准的定位、更个性化的营销和品牌运营，重塑自身的竞争力。</p><p></p><p>在70多年的发展史中，保时捷经历了多次这样的时代变迁。持续不断地创新，是这样的传统豪华汽车品牌在时间长河中得以传承和延续的秘诀。那么，站在当下这个新的时代节点，保时捷又会交出什么样的“答卷”？日前，InfoQ采访了保时捷（上海）数字科技有限公司（以下简称“保时捷数字科技）董事总经理张骏峰，他给出的关键答案之一是——数字化。</p><p></p><h2>新生代车主成消费主力，中国汽车市场很不一样</h2><p></p><p>&nbsp;</p><p>保时捷数字科技的前身是2019年成立的保时捷中国数字化部门，从最初几个人的团队扩张到上百人的集体，2021年初，保时捷数字科技开始独立运营。张骏峰表示，保时捷数字科技的成长与保时捷在中国的业务发展息息相关。</p><p></p><p>自2015年以来，中国已经连续8年稳居保时捷全球最大单一市场。即便是在近几年全球汽车市场频频受创的大环境下，保时捷也仍然有着稳定的业绩表现。</p><p></p><p>而在服务海内外车主的过程中，保时捷发现，中国市场与海外市场截然不同，比如在平均年龄上，中国客户就要比欧美市场客户年轻十几岁左右。因此，为了更好地与国内年轻消费者“对话”，必须让自己始终保持“年轻态”。</p><p></p><p>国内这批消费者伴随互联网长大，是实实在在的数字原住民，从主观上对<a href=\"https://xie.infoq.cn/article/d99a83d82b831725267d815dc\">数字化体验</a>\"的需求更加强烈。与此同时，从客观角度来看，国内的数字化生态发展和国外也完全不同。“在国内，大家更愿意去接受一些新兴的事物，包括智能化的功能等等，但在海外尤其是欧洲国家，他们却相对保守。”张骏峰表示。</p><p></p><p>举例来说，海外消费者的使用习惯大多还是在网页，而国内消费者则在微信生态、App上的活跃度更高。这种差异对汽车产品的数字化、智能化研发和体验设计提出了新要求。</p><p></p><p>但对保时捷这样一个进口汽车品牌而言，这些需求在海外市场并没有现成的经验可以复用，如果由海外团队来完成也可能存在文化理解上的鸿沟，很难做到快速和精准的响应。</p><p></p><p>“这便是保时捷数字科技成立的初衷，目前，我们的团队成员主要来自两个领域，一部分来自车企，一部分来自互联网公司。他们对国内的数字化发展现状和趋势都有很深的了解，目的很明确，就是为中国用户和市场提供符合他们需求的数字化体验。”张骏峰强调，“换句话说，用户在哪里，我们就会选择与之匹配的方式去为他们提供服务，从产品的角度，就是根据中国用户的习惯去做研发和设计。”</p><p></p><h2>汽车产品进阶，网联化和智能化是“终极形态”</h2><p></p><p>&nbsp;</p><p>在过去4年间，保时捷数字科技团队已经帮助保时捷中国实现了众多场景的数字化。其中首当其冲的，就是车辆本身的数字化。</p><p></p><p>“我们希望能够把过去在物理世界的所有独特体验都带到数字世界。比如引入大数据、机器学习、云技术和增强现实等数字化技术，提升车辆的智能水平；再比如通过<a href=\"https://xie.infoq.cn/article/427b9ad99015112a69e9b33aa\">车联网</a>\"、车载APP提供车辆与外部世界的交互体验等等。”</p><p></p><p>在张骏峰看来，汽车产品本身的数字化将经历三个阶段：</p><p></p><p>第一，车内数字体验与车外实现一致。在这个阶段，手机与车机的信息和体验还相对比较割裂，手机归手机、车机归车机，二者之间的交互通常是比较简单的投屏共享；</p><p></p><p>第二，车机与手机的协同。在这个阶段，手机与车机之间更像是一个无缝连接的整体，车主可以把手机上的功能体验带到车上，同时，车上的功能体验也可以在离开车后同步到手机；</p><p></p><p>第三，汽车产品的网联化和智能化。在这个阶段，手机与车机的体验将无差别化，各种功能将嵌入到人们的日常生活中，变得无所不在。</p><p></p><p>从目前来看，绝大部分的车企的产品研发都已经进入第一阶段和第二阶段。最直观的体验是，远程操作已经成了很多新款车型的基本功能。</p><p></p><p>比如，在保时捷App中，车主已经可以使用诸多互联功能，包括完成车机、手机与车外环境的交互，包括查找车辆位置、开启空调、解锁/锁定车辆、依据剩余电量规划沿途充电桩、提前预订充电位地锁智能解锁等等。</p><p></p><p>但要进入到第三阶段，只靠汽车产品本身的数字化发展和创新仍然远远不够，还需要涉及大量基础设施的建设，比如智能城市的发展等等。甚至，不同国家之间的政策和标准差异也会影响汽车产品网联化方向的研发和落地进度。</p><p></p><h2>一个“小入口”，满足更快提车需求</h2><p></p><p>&nbsp;</p><p>除此之外，经销商端的数字化是保时捷在中国的另一大投入重点。</p><p></p><p>如我们所知，一辆普通轿车至少有 1万多个独立零部件，如果是一辆赛车，这个数量至少还要再乘以2，达到2万、甚至3万之多。要对这样一个复杂构造的产品进行个性化定制，其中的工艺难度、流程复杂度以及巨大的成本投入可以想象。但源于赛车文化的保时捷，数十年如一日始终遵循着先选配后排产的模式。</p><p></p><p>据张骏峰介绍，保时捷的产品中大概涉及数百万种定制方案。也就是说，面向车主，每辆车几乎都是独一无二的。不过，高度定制化也意味着较长的定制周期，目前保时捷车主的提车周期约为6-12个月。</p><p></p><p>所以，为了更快提车，有的车主会放弃选配，转而购买经销商提供的少量现车或者官方认证的易手车（二手车或展车）。但过去，没有统一的平台整合经销商信息，哪个门店有现车，现车的具体配置和价格等等信息，消费者往往需要亲自到线下门店一个一个地咨询。</p><p></p><p>保时捷数字科技用一个“小入口”搞定了这个问题——通过保时捷微信<a href=\"https://xie.infoq.cn/article/a783cd437caacf8fa93ff25b3\">小程序</a>\"，用户可以即时查看附近的线下经销商门店，以及在售车辆的完整信息，包括图片、价格、技术参数、选装配置、金融方案等等，并且可以直接在线下单。有销售数据显示，2021 年底，保时捷认可易手车业务全年订单量达 7501 台，其中由线上转化的订单占总量30%左右。</p><p></p><p>此外，手机App也是一个非常重要的服务交互场景。比如，保时捷中国在手机App提供了代驾维修服务，用户只需在手机App中约好时间地点，将车辆交给平台安排的代驾员，就可以自动完成维修服务，可以大大节省交通和等待的时间。</p><p></p><p>一端连接消费者，另一端还要赋能经销商。作为直接面向消费者的关键角色，保时捷认为，经销商也需要通过更智能、灵活、高效的方式去触达用户。为此，保时捷数字科技与保时捷中国业务部门共同上线了“睿达零售系统”和“睿享服务系统”。</p><p></p><p>其中，“睿达零售系统”由16个系统集成，主要包含了客户管理、个性化车辆配置，以及库存管理、合同生成、审批、一站式交车和文档存档等功能，核心是通过提升门店运营效率，让消费者的购车体验更高效和便捷；“睿享服务系统”则主要聚焦售后服务环节，通过把数字化工具应用在、客户接待、车间维修管理、保险等场景中，提升门店的售后管理效率和整体的售后服务满意度。</p><p></p><p>在此基础上，经销商还可以通过客户行为数据，更敏锐地洞察市场需求，从而解决用户痛点，持续优化和提升用户体验，让业务发展走向正循环。</p><p></p><h2>敏捷组织转型，解决跨部门协作问题</h2><p></p><p>&nbsp;</p><p>在加入保时捷数字科技之前，张骏峰曾在微软、小蚁科技等知名科技公司就职，拥有超过20年的数字化经验。在他看来，数字化本质上不只是一个技术问题。“技术发展其实已经比较成熟，关键在于如何落地。在这个过程中，组织转型、流程梳理、人才培养也是非常重要的课题。”</p><p></p><p>举例来说，企业数字化的真谛在于“闭环”，而张骏峰强调，所谓闭环的关键其实是数据的流通，单从业务场景来看，每个点之间都是断开的，这时候就需要通过数据把它们串联起来。而要形成数据的串联流通，就必须打通各个业务流程节点。</p><p></p><p>以保时捷中国的数字化服务为例：用户在购车环节可以通过微信小程序查看所有车辆的详细信息，如果有感兴趣的车辆，就可以在线联系经销商或者直接在线下单。反过来对于经销商而言，也可以快速做出响应，主动联系客户推进下一步的看车和买车流程。</p><p></p><p>这个过程中，在用户授权的前提下，每一步决策都会被记录到后台系统，如果成单，那么该客户的相关信息就会流转到保时捷App，便于在这基础上为车主提供更有针对性的服务。并且，基于车联网，保时捷App还可以把所有的产品体验都串联起来，满足客户的各种个性化需求。</p><p></p><p>“也就是说，数字化不是单点落地，而是要在各个业务环节完成覆盖。”张骏峰指出。</p><p></p><p>然而，这种从点到面的数字化能力扩展，在保时捷中国也并不是一步到位的。技术与业务之间有着天然的隔阂，彼此间的信任需要经过磨合才能慢慢建立。</p><p></p><p>“为了形成正向的循环，我们采用的是敏捷组织和流程的思路。”“敏捷”的理念最早来源于软件开发领域，张骏峰认为，它可以很好地解决跨部门协作的问题。</p><p></p><p>具体来说，保时捷采用了<a href=\"https://xie.infoq.cn/article/e0cb48b5fa5df3564bc42592f\">SAFe</a>\"（Scaled Agile Framework，大规模敏捷框架）的方法架构，其核心价值观是协调一致、内建质量、透明、项目群执行。在这一框架下，硬件工程师、软件工程师与销售经理能够为一个细微的优化而协同配合，最大化激发团队的主动性与创造力。</p><p></p><p>比如，在产品开发启动阶段，保时捷数字科技团队会应用敏捷方法论搭建全功能产品团队，基于对消费者心理、品牌价值与产品需求等多方面调研，迅速与相关业务部门达成统一的目标，协作构建业务架构、产品原型和设计方案；</p><p></p><p>在交付阶段，高效地管理与集成保时捷现有系统，开发 MVP（最简化可行产品），基于用户和市场的反馈，不断进行迭代和优化；</p><p></p><p>最后，在业务增长阶段，对产品增长指标的数据体系进行完善，陆续上线赋能销售运营团队的监控与决策的辅助功能，从而提高整个数字化销售流程的管理效率，促进业务的发展。&nbsp;</p><p></p><p>通过这种高效协作，大大提高了保时捷的组织响应力。在面对变化越来越快的市场环境时，这种响应力则成了一个重要“筹码”。</p><p></p><p>放在过去，在汽车行业，一款新车型的研发通常需要数百人花费至少3年左右的时间才能完成，即便只是改款车型，开发周期需要2年左右。而据了解，通过敏捷组织转型，保时捷研发体系的迭代周期已经达到每三个月一次，其中保时捷数字科技内部的小迭代每两周就会有一次。</p><p></p><h2>企业数字化最稀缺的品质——耐心</h2><p></p><p>&nbsp;</p><p>不过话说回来，数字化转型并没有一个放之四海皆准的通用标准或者成功经验，每个企业的基因文化、组织流程、经营情况和运作方式都不一样，某个框架是否适用于某个公司，需要根据企业具体的情况进行评估。</p><p></p><p>于保时捷而言，独特的品牌文化和基因，为敏捷框架在其组织内部的成功落地提供了丰沃的土壤。张骏峰表示，在保时捷的价值观中，他最为推崇的是——传统与创新。虽然两个词看似矛盾，但在保时捷的发展过程中它们始终和谐并行。</p><p></p><p>以保时捷最重要的车型911为例，历经60年的革新，如今我们仍然能在它的身上看到很多经典元素，比如即便是全新一代的车型，外观依旧沿用了标志性的“蛙”式外观；此外，后置发动机的传统也一直延续至今。</p><p></p><p>但是，我们同样也可以看到，每一代产品也会有属于那个时代的印记。比如，为了符合全球范围内的废气排放标准，第五代911（996）开始使用水冷发动机；如今的第八代911（992）则对后置发动机做了小幅前移，以便保持完美的车重配比和操控效果，另外，车门把手还采用了可电动伸缩的嵌入式设计，让车身更显一体化，满足当下的审美需求。</p><p></p><p>所以，回看保时捷的数字化历程，张骏峰表示，“我们一直认为自己在做一件正确的事情，过程中即便很难，也一直坚定地在推进和实践，这是企业在转型过程中非常关键的一点——即先认定一个方向，然后一步一个脚印扎扎实实地走下去，而不是先试一试，不行再换策略。”</p><p></p><p>事实上，这是是如今很多企业在<a href=\"https://www.infoq.cn/article/dXYjsLxYiFhOzSyfNwxu\">数字化转型</a>\"中缺少的一部分——耐心。“比如，有的企业做了一年两年，发现没有效果，就立马放弃，换另外一条路。但事实是，转型本身是一个特别复杂，需要长期投入，不断优化和迭代的过程。”</p><p></p><p>不过，保时捷也并非纯粹的理想主义者，张骏峰向InfoQ强调，“在具体的工作推进中，我们会先设定一些小目标，也会关注结果，然后根据具体的结果再不断对路径做优化。”</p><p></p><p>这就是“传统与创新”的精神内核在保时捷数字化转型过程中的体现，换句话说，就是既始终坚持认准的事情，但在面对各种变化时也不会固步自封，而是与时俱进，不断进行能力的迭代和策略优化。</p><p></p><p>“作为一个老牌车企，我们会坚持一定要把基础的产品能力和服务做好；其次，在这之上再不断寻找符合品牌价值的创新点。这是我们进行数字化转型的底层逻辑。”张骏峰表示。</p>",
    "publish_time": "2023-03-07 11:30:49",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]