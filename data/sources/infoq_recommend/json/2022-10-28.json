[
  {
    "title": "YMatrix CEO & 创始人姚延栋：万物智联时代，超融合数据库是最佳数据库形态",
    "url": "https://www.infoq.cn/article/cI3hJsUtojbDorNs5eh0",
    "summary": "<p>近一段时间内，有一个稍显陌生的技术概念不断被提及，那就是“超融合数据库”。对于大部分开发者而言，如果你是初次听闻这个技术概念，或许会感到疑惑：超融合数据库到底能解决什么问题？它与专用数据库相比，核心优势在哪里？</p><p></p><p>为了深入探究超融合数据库的概念、应用情况以及未来发展，本期《InfoQ极客有约》，InfoQ主编赵钰莹就与YMatrix CEO &amp; 创始人<a href=\"https://www.infoq.cn/article/NpFtpt7gOm4OJNtkUF4v\">姚延栋</a>\"进行了一次对谈。本期栏目的对话内容整理如下，供读者参考回顾。</p><p></p><p></p><p></p><p>InfoQ：到底怎么理解超融合数据库这个概念？</p><p></p><p>姚延栋：为了讲清这个东西，我们先考虑一下数据库到底为什么这么丰富多样。实际上，数据库就做三件事情：第一是接数据；第二是存数据；第三是用数据。</p><p></p><p>由于两个“多样性”，也导致整个数据库行业百花齐放：第一是底层数据类型的多样性（有时也称为多模），有关系数据、时序数据、图数据等等，这种多样性会让很多数据库专门解决一个数据类型的问题；第二个是数据处理的多样性，因为数据有多种多样用法，它有不同的视角、不同的模式，比如TP是小查询，但要去为高吞吐做优化，AP是大查询，我们优化的目的是低延迟，时序场景则经常查询最新值、明细和持续滑动窗口内的聚合值。</p><p></p><p>数据库产品多样性本质上是由以上两层引起来的，但这种多样性也会造成一个门槛问题。Gartner曾经出过一个报告，提到Hadoop的大多数项目没有达到预期，其中有一个很重要的原因就是复杂度太高。我们看到未来是一个万物智联的新时代，如果产品形态的复杂度还是这么高，可能也很难达到预期。我们就在想数据库最本质的东西是什么？未来最合理的形态应该是什么样的？</p><p></p><p>因此，我们就提出了超融合数据库，让用户可以非常简单地使用，有数据的时候可以往里面写，想用的时候就可以随时用。</p><p></p><p>InfoQ：大部分企业的技术栈可能是不同的数据库、不同的架构混杂在一起的，如果他们想用超融合数据库应该怎么做？</p><p></p><p>姚延栋：如果是一个新场景就比较简单，我们直接引入一个选型，使用我们的产品就好了；第二种是用户已经用了很多的数据库，如果他没有遇到痛点，让他去替换是很难的。不过随着数据量越来越大，问题也就慢慢地显现出来了，不管是硬件投入、系统复杂度、性能还是稳定性，都会出现一些问题，这个时候是我们最佳的切入时机，先通过单点切入，建立好信任感。</p><p></p><p>InfoQ：YMatrix 的应用场景主要有哪些？</p><p></p><p>姚延栋：我们现在分为三大类，智能制造、智能装备以及实时数仓。</p><p></p><p>首先说智能制造，工厂会涉及订单信息、工单信息、仓储、质检、设备运行数据、图片数据等等，这些数据随着时间推移会不断积累下来，形成数据资产，企业都希望能够挖掘这些历史数据产生价值。但是传统的方案可能选型四五种数据库，最终组装在一起。有的人可能也会选数据中台，但其实揭开中台的外衣之后，内部也就是四五个数据库组合一起，这种方式的复杂度非常高。在智能制造场景之下很难成功，因为整个链条太长了，出了问题之后也不容易诊断，而超融合数据库就可以解决这个场景下的问题。不管什么样的数据类型，还是对数据进行什么样的操作，都可以在一个数据库里面完成，极大地降低了复杂度。像比亚迪、小米等企业，他们就在智能制造工厂里来部署我们的产品，承接了它的时序数据和关系数据，还实现了对历史数据的查询、分析以及机器学习。</p><p></p><p>第二个场景是智能装备或者是泛物联网，比如智能网联汽车、智慧能源、智慧医疗、智慧地球等等，这个场景的特点就是时序数据量非常大，这个时候就需要强大的时序处理能力。当然了，任何一个场景很难只有一种数据，这种场景也有其他的数据类型，只是量多少而已，比如关系数据、文本数据等等，超融合也非常匹配这种场景。</p><p></p><p>理想汽车就是在这个场景下的案例，理想汽车的特点是车虽然不多，但是它的采集频率指标数蛮多的；北理新源是国家新能源汽车的大数据平台，我们刚接触的时候也就600多万辆车，现在已经超过1100万辆了，它的特点是车数虽然多，但它的采集频率比较低，指标数也比较少，叠加起来之后的总规模和理想汽车差不多。在这样的场景之下，就特别考验整个数据库的性能，从 <a href=\"https://www.infoq.cn/article/V09XNRs5lxfZtkmmsNUm\">YMatrix 4.0 </a>\"发布以来，我们做了很多工作去提升时序场景下的性能。</p><p></p><p>第三个场景就是经典数仓或者实时数仓，前面两个场景比较新，而数仓这个场景最早可以追溯到上世纪80年代，随着这个场景的发展，用户对实时性的要求越来越高。我们最近也开始接触一类用户，他们希望直接把 ETL 去掉，因为他觉得增加了复杂度，运维以及交付出了问题还得去解决，投入也很大，能不能用一个数据库搞定，彻底避免导出的过程。在这个场景之下，YMatrix 数据库产品有幸站在了Greenplum的肩膀上，改进了性能、高可用等等，使我们在实时数仓的场景上也有比较好的优势。</p><p></p><p>InfoQ：<a href=\"https://www.ymatrix.cn/article/98\">YMatrix5.0</a>\" 版本会有哪些新特性？</p><p></p><p>姚延栋：我们主要在两方面做了一些工作：性能和高可用。</p><p></p><p>超融合数据库一开始被提出来时，好多人会质疑它的实际价值，第一，到底能不能做出来？第二，即使做出来了，性能怎么样？通常意义上讲，大家觉得做的东西越多，可能很容易造成什么都做不好，这是一个非常直观的认识。在 YMatrix 4.0 版本相当于回答了第一个问题，就是我们把超融合数据库做出来了，YMatrix 5.0 相当于回答了第二个问题。</p><p></p><p>在高可用这一点，我们集成了Greenplum，但Greenplum有一个明显需要改进的地方，当Master结点故障之后，需要人工介入进行激活。这在经典的数仓场景下虽然没有特别大的问题。但在工厂生产等之类的关键场景中，如果Master挂了，这个时候还需要打电话让运维人员激活，这中间怎么也得过去一个多小时了，而一个小时可能会让工厂的生产损失上百万。在这样的考虑之下，我们对YMatrix4.0 的故障检测机制、高可用处理机制进行了全部重构，实现了故障自动检测和自动切换，这样就完全不需要人工参与了，让运维人员也可以放心睡个好觉。</p><p></p><p>InfoQ：<a href=\"https://ymatrix.cn/about\">YMatrix</a>\" 跟市面上其他数据库之间的差异性有哪些？</p><p></p><p>姚延栋：大多数的时序数据库还是类似当年NoSQL这种技术路线，当然有的时序数据库可能外面也包了一个SQL的接口，但本质上还是做了一个专用的数据库，解决专用的细分场景，我认为未来的大趋势这可能不是主流。</p><p></p><p>说到时序数据库的三种数据模型，或者三种建模方式分为：窄表模式、宽表模式以及树型模式。这三种建模方式各有优缺点，这里我简单地说下结论。</p><p></p><p>窄表模式写入最灵活，当你需要添加一个新指标的时候，不需要创建新的字段，只要往里面写就好了，但它的查询性能不好，只能支持一些比较简单的查询，比如查最新值、短时间的明细；而宽表模式会避免很多冗余的数据，所以性能很好，几乎支持所有类型的查询，但会遇到灵活性的问题，比如要添加一个新的指标，就需要在宽表模式里加个字段；树型模型其实是在以上两者之间进行了折中。</p><p></p><p>YMatrix 数据库则是窄表模式和宽表模式都支持，用户可以根据场景去选择。同时，为了解决宽表模式不灵活的问题，我们提供了一个专门的数据类型——MXKV，让你可以在里面加各种各样的新指标。</p><p></p><p>InfoQ：最近一两年，国内基础软件的发展是比较迅猛的，但坦白来讲，我们整体还是与国外有些差距的，您认为当前我们遇到的困境主要集中在哪些方面？如果我们想要去打破这样的困境，我们可以做什么样的事情？</p><p></p><p>姚延栋：基础软件本质是一个商业的范畴，既然是供需，就要看需求方需要什么样的产品，供应方又能供应什么样的产品。国外的产品确实好，而且价格也合理，我想不到任何理由客户不用，就像咱们的服装鞋帽在海外非常受欢迎是一样的道理。只是基础软件需要长期的积累和沉淀，耗资比较大，耗时也比较久，一旦落后就很难追赶上来。</p><p></p><p>打破困境还是要需要创新，只是跟着国外，我觉得只能是捡漏，做不大做不强。通过创新做出真正卓越的产品满足我们的场景，这样不仅可以同国内外的产品竞争，还可以去海外参与全球竞争，能参与全球的竞争并胜出的企业才是真正伟大的企业。</p><p></p><p>InfoQ：数据库行业面临的挑战主要有哪些？</p><p></p><p>姚延栋：最主要的挑战是商业化，就是别人为什么要买你的产品？要解决这个问题，第一要靠创新，第二要有一定的差异化。另外，国内很多初创数据库公司规模相对都比较小，很难形成生态，所以我们坚定地拥抱PostgreSQL 和Greenplum这两大生态，与其保持兼容。另一方面，我们也要为自己构建合作伙伴生态，在时序和实时数据分析方面，我们也在和很多的合作伙伴共同打造下一代的实时数据分析解决方案。最后就是营销了，酒香也怕巷子深，好东西要让所有人都知道，但是营销是一个非常专业的领域，在这里就不展开探讨了。</p><p></p><p>InfoQ：基础软件创业是个长跑，前期投入会比较大，姚总以及您的团队会因此感到焦虑吗？</p><p></p><p>姚延栋：至少在产品大方向上，我们没有什么焦虑的。因为当时出来创业的时候，最容易的就是继续做数仓，因为我们在Greenplum做了十几年，不管是产品形态、技术还是客户资源都是最容易的，但为什么我们没有做数仓，而选择了超融合数据库，并且从时序切入，其实是我们对未来的一个判断。</p><p></p><p>做数据库至少要看5年以上，判断5年以后会是什么样，我们认为5年以后万物智联的时代会来临，最重要的新变量就是时序数据，我们对这个方向还是比较认可的。当然一点不焦虑也不可能，特别是早期我们还没有和客户做验证的时候。现在我们确实经过了很多头部企业的验证，也基于很多数据看到了智能网联汽车等领域的蓬勃发展，我们的心态也会就更平静了。</p><p></p><p>InfoQ：YMatrix 对于开发者的学习门槛如何？</p><p></p><p>姚延栋：对于开发者门槛还是比较低的，以前如果用过 MySQL、Oracle、PostgreSQL这种关系型数据库，学习YMatrix 基本上可以平移过来，特别是用过PostgreSQL的开发者，语法几乎都是一样的，体验也都是一样的。</p><p></p><p>对于运维人员可能还是有一点门槛，但是这个门槛也会比较低。比如，基于PostgreSQL体系的数据库需要定期做analyze，收集一些统计信息。如果不收集统计信息，可能会导致性能变差，之前我们确实也碰到过几次这样的客户场景，客户突然说当时测的时候很好，但现在为什么突然变慢了。我们派技术人员一看，就是没做 analyze，赶紧给他配置定期的analyze等任务，为此我们也总结了一些最佳实践。通过这套最佳实践，我们把它产品化、智能化，再做到数据库里面去，通过数据库能够自动的甄别这种情况，后续我们也希望把这个门槛进一步地去降低。</p><p></p><p>InfoQ：作为一种新型的技术架构，虽然超融合数据库理念很美好，但是大家对于这种事情多少都会想，你是不是牺牲了某些垂直的特性，或者用了以后是不是会付出其他的一些代价，这些代价是否是符合整个行业发展趋势？</p><p></p><p>姚延栋：好多人都有类似的顾虑，认为这个东西会不会牺牲其他的东西。最终肯定是有权衡，举个例子，比如ACID可以确保数据正确性，能够确保数据不重、不错、不丢，还可以释放这个开发人员的精力。很多时序数据库、分析性数据库是不支持ACID的，很多人认为ACID会损失性能，但实际上是微乎其微的，和其他的技术优化点相比，ACID的开销其实是可以忽略的。</p><p></p><p>我们做超融合数据库到底会付出哪些代价？根据复杂度守恒定律来看，复杂度是不会凭空消失的，它只能是转移，我们降低了用户的复杂度，实际上增加了数据库内部的复杂度。这样一来，我们对数据库人才的要求会更高，相当于我们自己承担了更多的工作，也投入了大量的精力去招聘人才、培养人才，努力去降低复杂度。不过幸运的就是我们做到了这一点，也是一个重要的行业突破，它会慢慢地改变数据库的未来形态以及发展格局。</p>",
    "publish_time": "2022-10-28 09:14:36",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "用现代Java调整经典设计模式",
    "url": "https://www.infoq.cn/article/LlrBgvdmYPGNsVDOZuCZ",
    "summary": "<p>1998年出版的《<a href=\"https://martinfowler.com/bliki/GangOfFour.html\">设计模式——可复用面向对象软件的基础</a>\"》有资格成为计算机科学的经典著作，大学仍然将它作为教材，并被奉为业界的最佳实践。在Devoxx的一场深度<a href=\"https://devoxx.be/talk/?id=48051\">讨论</a>\"中，<a href=\"https://www.linkedin.com/in/vsubramaniam/\">Venkat Subramaniam</a>\"使用现代Java实现了<a href=\"https://en.wikipedia.org/wiki/Iterator_pattern\">迭代器</a>\"、<a href=\"https://en.wikipedia.org/wiki/Strategy_pattern\">策略</a>\"、<a href=\"https://en.wikipedia.org/wiki/Decorator_pattern\">装饰器</a>\"或<a href=\"https://en.wikipedia.org/wiki/Factory_method_pattern\">工厂方法</a>\"模式，对原有的设计模式进行了一番调整。</p><p></p><p>在<a href=\"https://devoxx.be/talk/?id=48051\">讨论</a>\"的引言部分，Subramaniam表示这本书的作者是软件开发的祖父，他们的设计模式是祖母的食谱——但即使你有了这些食谱，也不一定能做出这些菜。因此，他认为将设计模式作为一种沟通工具是有意义的，但将其作为一种软件设计工具却是一场灾难。</p><p></p><p>以下是我们在日常编程中可能遇到的常见模式，Subramaniam通过充满活力和快乐的方式让这些模式变得更加流式。</p><p></p><p>由于Java加入了函数式编程，迭代器模式发生了很大的变化。最大的一个变化是从外部迭代器到内部迭代器的转变，这是Java函数式API带来的。这个变化可以让你从使用冗长的命令式迭代</p><p></p><p><code lang=\"java\">int count = 0;\nfor(var name: names) {\n   if(name.length() == 4) {\n     System.out.println(name.toUpperCase());\n   count++;\n\n     if(count == 2) {\n        break;\n     }\n   }\n  }\n}\n</code></p><p></p><p>演变成使用流式的函数式迭代</p><p></p><p><code lang=\"java\">names.stream()\n     .filter(name -&gt; name.length() == 4)\n     .map(String::toUpperCase)\n     .limit(2)\n     .forEach(System.out::println);\n</code></p><p></p><p><a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#limit(long)\">limit(long)</a>\"和<a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/function/Predicate.html\">takeWhile(Predicate<!--? super T-->)</a>\"（在Java 9中添加的）是<a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.16\">continue</a>\"和<a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.15\">break</a>\"语句的等效函数，第一个只接受数值限制参数，而第二个可以接受表达式。</p><p></p><p>尽管Java的函数式API作为JDK的一部分已经有近十年的时间了，但在代码库中仍然存在一些常见的错误。当函数管道“不”纯粹（修改或依赖外部可见的状态）时，可能会导致迭代操作的结果不可预测（特别是在进行并行执行时）。</p><p></p><p>策略模式——我们希望改变算法的一小部分，同时保持算法的其余部分不变。从历史上看，这个模式是通过一个方法来实现的，这个方法采用一个方法接口作为参数，作为参数的方法接口可以有多个策略实现，一个策略通常就是一个方法或函数。因此，函数式接口和lambda表达式在这里很适用。</p><p></p><p>虽然匿名类可以作为一种实现机制，但函数接口（<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html\">Predicate<!--? super T--></a>\"是一个很好的选择）或lambda表达式让代码变得更加流式，更容易理解。在现代Java中，策略模式更多的是一种特性，而不是需要付出大量努力才能实现的模式。</p><p></p><p><code lang=\"java\">public class Sample {\n  public static int totalValues(List numbers) {\n    int total = 0;\n\n    for(var number: numbers) {\n      total += number;\n    }\n\n    return  total;\n  }\n\n  public static int totalEvenValues(List numbers) {\n    int total = 0;\n\n    for(var number: numbers) {\n      if(number % 2 == 0) { total += number; }\n    }\n\n    return  total;\n  }\n\n  public static int totalOddValues(List numbers) {\n    int total = 0;\n\n    for(var number: numbers) {\n      if(number % 2 != 0) { total += number; }\n    }\n\n    return  total;\n  }\n\n  public static void main(String[] args) {\n    var numbers = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\n    System.out.println(totalValues(numbers));\n    System.out.println(totalEvenValues(numbers));\n    System.out.println(totalOddValues(numbers));\n  }\n}\n</code></p><p></p><p>现代的做法是使用lambda表达式来表示策略。</p><p></p><p><code lang=\"java\">import java.util.function.Predicate;\n\npublic class Sample {\n  public static int totalValues(List numbers,\n    Predicate selector) {\n    int total = 0;\n\n    for(var number: numbers) {\n      if(selector.test(number)) {\n        total += number;\n      }\n    }\n\n    return  total;\n  }\n\n  public static boolean isOdd(int number) {\n    return number % 2 != 0;\n  }\n\n  public static void main(String[] args) {\n    var numbers = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\n    System.out.println(totalValues(numbers, ignore -&gt; true));\n    System.out.println(totalValues(numbers, \n      number -&gt; number % 2 == 0));\n\n    System.out.println(totalValues(numbers, Sample::isOdd));\n  }\n}\n</code></p><p></p><p>在介绍工厂方法实现时，Venkat陈述了以下内容。</p><p></p><p></p><blockquote>从多态的角度来看，Java中最糟糕的关键字是什么？尽管final、instanceof和static都可能算是最糟糕的关键字，但它们都只是小兵，<a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.5\">new</a>\"才是它们当中的黑手党。多模式（<a href=\"https://en.wikipedia.org/wiki/Creational_pattern\">创建模式</a>\"）、框架（<a href=\"https://spring.io/\">Spring</a>\"、<a href=\"https://github.com/google/guice\">Guice</a>\"）是为了解决new的“弊端”——缺乏多态性支持和紧密耦合。受<a href=\"https://www.ruby-lang.org/\">Ruby</a>\"基于上下文创建不同对象的多态能力的启发，Venkat使用Java的<a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#d5e19889\">default</a>\"关键字实现工厂方法模式。这种方法使用了接口和非常小的实现类，让代码变得更容易理解。</blockquote><p></p><p></p><p><code lang=\"java\">import java.util.*;\n\ninterface Pet {}\nclass Dog implements Pet {}\nclass Cat implements Pet {}\n\ninterface Person {\n  Pet getPet();\n\n  default void play() {\n    System.out.println(\"playing with \" + getPet());\n  }\n}\n\nclass DogPerson implements Person {\n  private Dog dog = new Dog();\n\n  public Pet getPet() { return dog; }\n}\n\nclass CatLover implements Person {\n  private Cat cat = new Cat();\n  public Pet getPet() { return cat; }\n}\n\npublic class Sample {\n  public static void call(Person person) {\n    person.play();\n  }\n\n  public static void main(String[] args) {\n    call(new DogPerson());\n    call(new CatLover());\n  }\n}\n</code></p><p></p><p>即使装饰器模式在理论上为许多程序员所熟知，但实际上很少有人使用它。它的实现最臭名昭著的例子可能是io包。Venkat基于函数的可组合性提出了一种不同的方法——使用<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html#identity--\">identity</a>\"函数和<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html#andThen-java.util.function.Function-\">andThen(Function<!--? super R,? extends V-->)</a>\"构建简单、流式的机制来增强对象的能力。</p><p></p><p><code lang=\"java\">class Camera {\n  private Function filter;\n\n  public Camera(Function... filters) {\n    filter = Stream.of(filters)\n      .reduce(Function.identity(), Function::andThen);\n  }\n\n  public Color snap(Color input) {\n    return filter.apply(input);\n  }\n}\n\npublic class Sample {\n  public static void print(Camera camera) {\n    System.out.println(camera.snap(new Color(125, 125, 125)));\n  }\n\n  public static void main(String[] args) {\n    print(new Camera());\n\n    print(new Camera(Color::brighter));\n    print(new Camera(Color::darker));\n\n    print(new Camera(Color::brighter, Color::darker));\n  }\n}\n</code></p><p></p><p>即使模式看起来会一直存在，就像Subramaniam<a href=\"https://www.youtube.com/watch?v=yTuwi--LFsM&amp;t=28s\">在讨论中提到的</a>\"：“设计模式经常被用来填补编程语言的空白。一门语言越强大，我们就越少谈论设计模式，因为设计模式自然会成为语言的特性。”</p><p></p><p>随着编程语言的演进和我们经验的积累，模式也会随着时间的推移而演变。其中一些模式被吸收为语言的特性，另一些则被认为已过时，而另一些变得更加容易实现。不管你最喜欢的是哪一类，Venkat建议把它们作为交流的手段，并让代码朝着这些模式的方向演变。此外，他建议尝试使用多种编程语言，让代码变得更加流式。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/10/modern-java-design-patterns/\">https://www.infoq.com/news/2022/10/modern-java-design-patterns/</a>\"</p>",
    "publish_time": "2022-10-28 09:55:11",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "文娱场景高音质降噪方案设计与落地",
    "url": "https://www.infoq.cn/article/OJ9wJPtHU2WJyhDNKEfM",
    "summary": "<p><strong>直播简介</strong></p>\n<p>随着近年深度学习的广泛应用，使用神经网络的降噪算法喷涌而出，而且这类算法不管是在降噪力度上，还是鲁棒性上，都要优于传统降噪，是当前处理各种不同场景噪音的首选方案。但是，在实时互动环境下，对于音频实时处理和性能要求比较高，这对于 AI 模型的设计和效果的平衡带来了的巨大的挑战。基于上述挑战，荔枝集团音频团队提出了一种轻量的降噪方案，该方案不仅能处理日常生活中常见的平稳和非平稳噪声，而且能很好的保留语音的音质，同时该 AI 降噪模型在运行时占用的内存和 CPU 消耗都极低，满足了全量 iPhone 机型以及大部分 Android 中低端机型。</p>\n<p><strong>听众受益</strong></p>\n<ul>\n<li>了解深度学习和机器学习</li>\n<li>了解音频相关算法</li>\n<li>AI 模型设计和落地</li>\n<li>高性能计算</li>\n</ul>",
    "publish_time": "2022-10-28 10:15:54",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "文娱场景高音质降噪方案设计与落地 | InfoQ《公开课》",
    "url": "https://www.infoq.cn/article/OJ9wJPtHU2WJyhDNKEfM",
    "summary": "<p><strong>直播简介</strong></p>\n<p>随着近年深度学习的广泛应用，使用神经网络的降噪算法喷涌而出，而且这类算法不管是在降噪力度上，还是鲁棒性上，都要优于传统降噪，是当前处理各种不同场景噪音的首选方案。但是，在实时互动环境下，对于音频实时处理和性能要求比较高，这对于 AI 模型的设计和效果的平衡带来了的巨大的挑战。基于上述挑战，荔枝集团音频团队提出了一种轻量的降噪方案，该方案不仅能处理日常生活中常见的平稳和非平稳噪声，而且能很好的保留语音的音质，同时该 AI 降噪模型在运行时占用的内存和 CPU 消耗都极低，满足了全量 iPhone 机型以及大部分 Android 中低端机型。</p>\n<p><strong>听众受益</strong></p>\n<ul>\n<li>了解深度学习和机器学习</li>\n<li>了解音频相关算法</li>\n<li>AI 模型设计和落地</li>\n<li>高性能计算</li>\n</ul>",
    "publish_time": "2022-10-28 10:15:54",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "马斯克成功收购推特，开除CEO等多名高管，还派特斯拉工程师进驻总部审查代码",
    "url": "https://www.infoq.cn/article/6NcqULAMegQoj9GApW5X",
    "summary": "<p></p><p></p><blockquote>这场马斯克收购推特的连环反转“大戏”，终于落幕。</blockquote><p></p><p></p><h3>靴子终于落地</h3><p></p><p></p><p>10月28日，据<a href=\"https://www.nytimes.com/2022/10/27/technology/musk-said-to-begin-firing-twitters-top-executives.html\">《纽约时报》</a>\"、<a href=\"https://www.cnbc.com/2022/10/27/elon-musk-now-in-charge-of-twitter-ceo-and-cfo-have-left-sources-say.html?__source=sharebar%7Ctwitter&amp;par=sharebar\">CNBC&nbsp;</a>\"、<a href=\"https://www.wsj.com/articles/elon-musk-completes-twitter-takeover-11666918031?mod=hp_lead_pos1\">《</a>\"&nbsp;<a href=\"https://www.wsj.com/articles/elon-musk-completes-twitter-takeover-11666918031?mod=hp_lead_pos1\">华尔街日报》</a>\"、<a href=\"https://www.washingtonpost.com/technology/2022/10/27/twitter-elon-musk/?scrolltoken=-Q8WUWfJibbKSSZiPw628q1blLAQ7Ar2jbZEGU9w3R5n02rpWWip68tFYURstYMdwSOBya5l_87TVPxuRaG4Too-JVCM46Tu7iHXIjM4mEfjg1Bs1qDqUkB3cD9lE7gX0JUDZDjkO6ZEyAt9OVPZzKm-WE5PgxZHd6bGB9WPh2pauRpMKOBfs3vNJevX19xtKeHOfwfwbwVh8rQZGFu5ISKqLpDX0IrRBkrHG9cy.eyJraWQiOiIyIn0\">《华盛顿邮报》</a>\"等多家外媒报道，马斯克收购推特的交易已经完成。这笔440亿美元的收购案终于迎来大结局。</p><p></p><p>在法院规定的完成交易的最后期限前，马斯克完成了交易。如果在10月28日前，不收购推特，他将面临诉讼。</p><p></p><p>此前，主持双方诉讼案的特拉华州法官裁定， 马斯克收购推特的交易期限截止到10月28日。特拉华州衡平法院院长Kathaleen McCormick写道：“这一行动将一直持续到 2022 年 10 月 28 日下午 5 点，以允许双方完成交易。”&nbsp;Kathaleen McCormick说，如果交易在那个日期和时间之前没有完成，新的审判日期将定在 11 月。</p><p></p><p>随着截止日期的临近，越来越多的迹象表明该交易朝着按时成功完成的方向发展。</p><p></p><p>据报道，马斯克在周二晚间向为该交易提供债务融资的贷方发送了借款通知，这些银行随即开始签署文件并进行资金转移。</p><p></p><p>10月27日，马斯克做了一个令人大跌眼镜的行为。根据马斯克在推特上发布的一段视频，他双手抱着一个水槽走进了推特总部，并配文“走进推特总部，好好琢磨这件事”。有人认为，此举暗示，他对推特的收购已成定局。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/ed/3b/edba2c6c24ef6be79ce6e9e6af35833b.jpeg\" /></p><p></p><p>此前，有广告商对即将为马斯克领导的Twitter 提出了担忧。《华尔街日报》报道说，许多广告商担心他提出的缩减内容审核和与潜在利益冲突的计划。10月28日，在收购前夕，马斯克向广告商保证他打算购买 Twitter。</p><p></p><p><a href=\"https://www.nyse.com/corporate-actions\">据纽约证券交易所网站称</a>\"，该社交媒体平台的股票将于周五停牌。</p><p></p><p>不过，许多分析师认为，鉴于今年美国许多科技股的价值下跌以及 Twitter 现在已难以吸引用户和发展壮大趋势放缓，马斯克现在为该公司支付的价格太高了。在最近的一次财报电话会议上，马斯克也承认，Twitter 是“一种长期萎靡不振的资产，但具有令人难以置信的潜力，尽管显然我自己和其他投资者现在为 Twitter 付出了过高的代价”。</p><p></p><h3>解雇原班人马，或将推进大裁员</h3><p></p><p></p><p>作为他上任这家社交媒体平台官方所有者后的“第一把火”。马斯克解雇了Twitter的主要高管。</p><p></p><p>据外媒报道，马斯克解雇了原推特首席执行官Parag Agrawal、首席财务官 Ned Segal、总法律顾问Sean Edgett以及法律政策、信任和安全负责人Vijaya Gadde。</p><p></p><p>消息人士称，Twitter 首席执行官 Parag Agrawal 和财务主管 Ned Segal 已离开公司旧金山总部，不会返回。</p><p></p><p>马斯克与推特的高管们早有纠葛。此前，马斯克曾在社交平台上批评过 Gadde。在马斯克与推特的法律斗争中，他还曾与Parag Agrawal发生过争吵。</p><p></p><p>现在，马斯克将他的推特个人简介更新为了“Chief Twit”。</p><p></p><p>近期，还有媒体报道称，马斯克计划对推特展开大规模的裁员计划。10 月 21 日，《华盛顿邮报》援引采访和内部文件报道称，马斯克在收购 Twitter 公司的交易中告诉潜在投资者，在收购完成后，他计划裁掉这家社交媒体公司 7500 名员工中的近 75%，将该公司员工数量从7500人减少到仅2000人。</p><p></p><p>对此，推特员工在信中表示了强烈反对。推特员工要求马斯克承诺，如果他的收购成功，将保持推特目前的员工人数。推特员工称，作为员工，他们理应得到具体的承诺，这样才能继续维护推特平台的完整性。他们在信中最后强调：“我们要求得到有尊严的对待，而不是被当作亿万富翁游戏中的棋子。”</p><p></p><p>但据彭博社27日的报道，马斯克告诉推特员工，他不打算裁员75%。</p><p></p><p>事实上，此前，马斯克曾多次提及想在收购 Twitter 后进行大幅裁员。</p><p></p><p>在 6 月与 Twitter 员工的问答中，马斯克表示需要“合理化员工人数”，并表示：“任何对 Twitter 有重要贡献的雇员都应该没有什么可担心的。”马斯克的这些言论明显会让 Twitter 员工惴惴不安。对此，Twitter 告知员工，没有全公司范围内的裁员计划。</p><p></p><p>早在今年4月底，据知情人士透露，马斯克在进行推特收购案交易谈判时告诉银行，他将关注这家社交媒体公司的利润，并提出了同时削减成本和裁员的想法。他没有详细说明哪些部门或职位可能受到影响。另外，据知情人士透露，马斯克已为推特物色一位新 CEO，身份暂未透露。马斯克告诉为其收购推特提供支持的银行，他将控制该社交媒体平台员工的薪酬水平。</p><p></p><p>不过，还没开始裁员，推特现在已经有很多员工主动离开了。</p><p></p><p>8 月 25 日，推特表示，由于公司正面临一系列挑战，包括与特斯拉 CEO 埃隆·马斯克的诉讼官司，以及“吹哨人”Peiter Zatko 的爆料，越来越多的员工开始离职。推特高管在一次公司全员会议上告诉员工，Twitter 目前的员工流失率为 18.3%。相比之下，在马斯克提出以 440 亿美元收购推特之前，推特的员工流失率徘徊在 14%至 16%之间，这与竞争对手的员工流失率基本一致。</p><p></p><h3>马斯克让特斯拉工程师审查推特代码</h3><p></p><p></p><p>据彭博社报道，马斯克昨天邀请特斯拉的工程师在 Twitter 总部与产品负责人会面，以深入研究 Twitter 代码。</p><p></p><p>据一位知情人士透露，周四，在 Twitter 的旧金山总部，推特的产品负责人向特斯拉工程师展示了公司的代码，以便他们评估并向马斯克解释公司需要什么。</p><p></p><p>知情人士说，截至当天中午，Twitter 的工程师无法再更改代码。知情人士说，这是为了确保在交易完成前产品不会发生任何变化。这些人拒绝透露姓名，因为该过程不公开。Twitter 在 4 月首次宣布该交易时也实施了类似的冻结措施。</p><p></p><p>马斯克在推特上表示，他对推特的的兴趣与赚钱无关。马斯克说，他买下推特是“为了帮助我所爱的人类”，并希望“文明拥有一个共同的数字城镇广场”。</p><p></p><p>今年4月，马斯克曾在温哥华举行的 TED2022 会议上表示，Twitter 算法应该是开源的，以避免任何类型的“幕后操纵”。马斯克认为推特应该将其源代码开源以接受公众审查。他说：“代码应该在 GitHub 上，以便对其进行检查，我只是认为这对美国和其他国家的民主属性很重要。如果我们能够增加对 Twitter 作为公共平台的信任，文明风险就会降低。”</p><p></p><p>马斯克还发布了他对 Twitter 的计划包括“X，适用于一切的应用程序”。一些人认为，这类超级应用可能类似于中国的社交应用微信。</p><p></p><p>马斯克曾表示，他计划重新考虑 Twitter 的内容审核政策，以服务于更极端的“言论自由”方法。他不同意 Twitter 对那些一再违反其规则的人进行永久禁令的做法，这增加了一些以前被禁止的用户重新出现在该平台上的可能性。</p><p></p><h3>漫长的收购之路</h3><p></p><p></p><p>这笔收购案持续已久，期间转折不断，一有什么风吹草动很快便能占据各大新闻头条。</p><p></p><p>马斯克购买推特的想法最早始于今年1月，他开始定期购买推特的股票，到 3 月中旬，他已经积累了该公司 5% 的股份。</p><p></p><p>今年 4 月，马斯克成为推特的最大股东，他提议以440亿美元的价格私有化收购推特。4月14日，马斯克更新了提交给美国证券交易委员会（SEC）的13D文件，文件显示，马斯克提出以现金方式、以每股54.20美元的价格收购推特已发行普通股。文件称，马斯克已于4月13日发送信件给推特提出了提议，表示将以每股54.20美元的价格收购“非马斯克所持有的全部推特已发行普通股”。</p><p></p><p>当时推特方面在一份新闻稿中证实，其已收到马斯克主动提出的上述提议。推特方面称，董事会将仔细审查该提案，以做出符合公司和所有股东最佳利益的行动方案。</p><p></p><p>然而到了5月的时候，马斯克开始反悔了。他不想买了，理由是推特未能充分披露平台上垃圾邮件和虚假账户的数量。</p><p></p><p>随后推特将其告上法庭，要求推特兑现交易承诺，认为他即便改变主意仍有义务完成交易。这起案件预计将于10月开庭。</p><p></p><p>接下来就是双方的法律斗争，推特和马斯克通过他们的律师展开了多轮互斥。</p><p></p><p>7月8日，马斯克向美国证券交易委员会（SEC）和推特法务部门发了一封信，明确表示将终止440亿美元并购推特的协议。</p><p></p><p>8月30日晚间，据彭博社等外媒报道，马斯克提交了一份终止推特收购的通知。美国证券交易委员会的一份文件称，马斯克已经致函推特，强调了终止收购协议的其他原因。</p><p></p><p>9月13日，推特公司的股东投票同意特斯拉首席执行官马斯克以440亿美元收购该公司并将其私有化的提议。</p><p></p><p>而到了10 月初，马斯克又改变了主意，表示如果推特放弃诉讼，他希望以每股 54.20 美元的原价收购 Twitter。由于不信任马斯克的动机，Twitter 的律师表示，特斯拉 CEO 的“提议是进一步恶作剧和拖延的邀请。”</p><p></p><p>特拉华州衡平法院法官最终裁定，马斯克必须在 10 月 28 日之前完成与 Twitter 的交易或接受审判。</p><p></p><p>参考文章：</p><p></p><p><a href=\"https://www.bbc.com/news/technology-63402338\">https://www.bbc.com/news/technology-63402338</a>\"</p><p></p><p><a href=\"https://www.nytimes.com/2022/10/27/technology/elon-musk-twitter-deal-complete.html\">https://www.nytimes.com/2022/10/27/technology/elon-musk-twitter-deal-complete.html</a>\"</p><p></p><p></p>",
    "publish_time": "2022-10-28 13:19:21",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "全面审查Twitter代码、当场炒掉CEO等众多高管：马斯克正式入主Twitter",
    "url": "https://www.infoq.cn/article/1jdi4LDTycjblozS8QwV",
    "summary": "<p>根据<a href=\"https://www.nytimes.com/2022/10/27/technology/elon-musk-twitter-deal-complete.html\">外媒报</a>\"道，马斯克现已完成440亿美元的Twitter 收购交易，并将自己的 Twitter 简历更改为“Chief Twit”。当地时间10月27日，马斯克<a href=\"https://twitter.com/elonmusk/status/1585341984679469056\">抱着“水槽”</a>\"进入Twitter 总部。这场持续半年的收购大戏终于迎来了落幕的时刻，但对于Twitter 员工以及公司自身发展来说，一切才刚刚开始。</p><p></p><h2>原高管被“请走”，裁员仍会进行</h2><p></p><p>&nbsp;</p><p>对于外界最为关心的“裁员75%”传闻，马斯克一行也给出了答案。根据<a href=\"https://www.bloomberg.com/news/articles/2022-10-27/musk-tells-twitter-employees-he-doesn-t-plan-to-cut-75-of-jobs#xj4y7vzkg?leadSource=uverify%20wall\">彭博社</a>\"消息，马斯克已经告知员工不会进行如此大规模精简，但还是会计划裁员，马斯克此前曾明确表示不理解为何表现不佳的员工还会被继续留用。即便没有该收购事件，Twitter 本身似乎也在计划25% 的裁员。</p><p>&nbsp;</p><p>不过，马斯克上任的第一把火烧到了原Twitter 高管层。据报道，马斯克先是罢免了首席执行官 Parag Agrawal，首席财务官 Ned Segal、公司政策主管Vijaya Gadde、总法律顾问肖Sean Edgett、首席客户官 Sarah Personette 等人都相继离开了Twitter 位于旧金山的总部大楼。<a href=\"https://www.nytimes.com/2022/10/27/technology/musk-twitter.html\">据《纽约时报》报道</a>\"，这些高管中至少有一名是被安保人员带走的。</p><p>&nbsp;</p><p>不过这些高管们也获得了可观的报酬。据报道，Agrawal 获得了 3870 万美元，Segal 获得了 2540 万美元，Gadde 获得了 1250 万美元，Personette 昨天在<a href=\"https://twitter.com/SEP/status/1585624570052202497\">推特</a>\"上表达了她对马斯克的收购感到兴奋，并获得了 1120 万美元。据<a href=\"https://www.bloomberg.com/news/articles/2022-10-28/musk-is-said-to-take-twitter-ceo-role-reverse-life-bans#xj4y7vzkg\">彭博社报道</a>\"，马斯克计划亲自担任推特 CEO。</p><p>&nbsp;</p><p>另外，马斯克也在 Twitter 上对此次收购进行了进一步<a href=\"https://twitter.com/elonmusk/status/1585619322239561728\">解释</a>\"：</p><p>&nbsp;</p><p></p><blockquote>我收购Twitter的原因在于，对未来文明来说，有一个共同的数字城市广场很重要，在那里，人们可以以一种健康的方式讨论各种各样的信仰，而不是诉诸暴力。</blockquote><p></p><p>&nbsp;</p><p>这意味着，马斯克未来或将放松Twitter 的内容审核机制，甚至前总统特朗普永久禁止进入该平台的政策或许也将被取消。据报道，对于推特用户的永久性禁令，马斯克计划取消。</p><p>&nbsp;</p><p>尽管马斯克曾表示，他收购Twitter “不是一种赚钱的方式”，但据报道，他提出了削减成本和增加收入的想法，政府和企业使用 Twitter 可能需要缴纳“少量费用”。</p><p>&nbsp;</p><p></p><h2>让汽车工程师审查Twitter代码</h2><p></p><p>&nbsp;</p><p><a href=\"https://www.bloomberg.com/news/articles/2022-10-27/tesla-engineers-visit-twitter-office-to-review-code-for-musk?leadSource=uverify%20wall\">据报道</a>\"，马斯克要求特斯拉的工程师与Twitter产品经理沟通，并对Twitter代码进行分析，这些工程师将向马斯克汇报witter的业务需求。</p><p>&nbsp;</p><p>另外收购完成前，Twitter的工程师不能修改代码。知情人士表示，这是为了确保在交易完成前产品不会发生任何变化。据悉审查过程不会公开。Twitter 在 4 月首次宣布该交易时也实施了类似的冻结措施。</p><p>&nbsp;</p><p>但目前，并不清楚汽车工程师审核社交媒体代码的匹配度。</p><p>&nbsp;</p><p>Twitter 的算法都是关于个性化的，使用机器学习来指导许多决策。例如，Twitter 训练了许多机器学习模型，帮助决定哪些因素要优先考虑。这些模型不能像常规代码一样被检查，而是需要在尽可能接近真实世界的环境中进行测试，而且为响应不断涌现的新数据、用户行为等，这些模型在真实系统中也会迅速变化。</p><p>&nbsp;</p><p>根据 Twitter 技术团队人士透露，Twitter 没有“主算法”，即Twitter 决策是不同算法基于大量数据和行为计算的结果，没有单一的算法可以指导 Twitter 决定增加或隐藏内容。</p><p>&nbsp;</p><p>而特斯拉FSD的算法和模型，重点也在感知、规划、矢量地图、自动标注、仿真等方面。</p><p>&nbsp;</p><p>此前，马斯克曾抱怨Twitter的算法，表示其存在“事实上的偏见”，并公开表示应该将Twitter 代码开源。为此，他还在Twitter上发起了<a href=\"https://twitter.com/elonmusk/status/1507041396242407424\">投票。</a>\"目前，已有110万多人参与投票，近83%的支持将其开源。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/53/530e16f47212a89395e0fefce0c85ba9.png\" /></p><p></p><p>&nbsp;马斯克接管Twitter后是否真的会将其开源现在还不得而知，但随着其调整内容审核机制想法的落实，Twitter内部算法势必会有所调整。</p><p>&nbsp;</p><p>“在机器学习时代，重要的不是算法，而是数据，”麻省理工学院教授兼计算机科学家<a href=\"https://people.csail.mit.edu/karger/\">David Karger曾表示</a>\"，马斯克可以通过使平台更加开放来改进 Twitter，以便其他人可以在此基础上构建新的方式。</p><p>&nbsp;</p><p>不过，纽约大学研究大型复杂系统的安全隐私的副教授 Damon McCoy表示，公开一些 Twitter 代码将提供更大的透明度，但即使是那些构建 Twitter 的人可能也无法完全理解它的工作原理。</p><p>&nbsp;</p><p>Twitter 的工程团队担心在所有这些复杂性中，一些代码可能会被断章取义并突出显示为偏见的标志，过多透露 Twitter 推荐系统的运作方式也可能导致安全问题。</p><p></p><h2>“X”的加速器</h2><p></p><p>&nbsp;</p><p>在软件应用领域，马斯克的雄心是做一款万能应用“X”。10月5日，马斯克<a href=\"https://twitter.com/elonmusk/status/1577428272056389633\">发推表示</a>\"，收购 Twitter 是创建万能应用“X”的加速器。他估计 Twitter 可能会将 X 加速 3 到 5 年。</p><p>&nbsp;</p><p>万能应用的概念起源于微信。马斯克认为，微信提供了一站式服务，用户可以发信息、支付、网上购物或叫出租车等。</p><p>&nbsp;</p><p>“在中国，你基本上生活在微信上，”马斯克在 6 月份告诉 Twitter 员工。他认为，为了鼓励人们使用和留在平台上，Twitter 应该像微信一样包罗万象。“如果我们能用 Twitter 重现这一点，我们将取得巨大成功。”</p><p>&nbsp;</p><p>X 也是马斯克在特拉华州注册收购 Twitter 的三个控股公司的名称。监管文件显示，如果收购发生，X Holdings I 将作为 Twitter 的母公司，X Holdings II 将收购 Twitter，X Holdings III 将为此次交易提供资金。</p><p>&nbsp;</p><p>有知情人士称，马斯克已告诉投资者他的计划：通过出售付费订阅服务减少对广告的依赖，允许内容创作者赚钱，并支持支付。</p><p></p><h2>不太专业的“程序员”</h2><p></p><p>&nbsp;</p><p>马斯克现在被人熟知的身份是企业家，但他同时也是一名程序员，不过并非专业出身。</p><p>&nbsp;</p><p>马斯克的编程生涯始于 10 岁时。当时的他对一台名为 Commodore VIC 的 5KB 内存计算机很感兴趣，在向他父亲索要之后，便拥有了这台电脑。</p><p>&nbsp;</p><p>不久后，马斯克使用计算机手册学习了 BASIC 计算机编程语言。据悉，培训手册的学习大约需要 6 个月，而马斯克能够<a href=\"https://amzn.to/3y8PqxJ\">在大约 3 天内完成</a>\"。</p><p>&nbsp;</p><p>马斯克第一次走进公众视野是在1984年。南非一本名为“个人计算机和办公技术”的刊物发布了马斯克设计的一款游戏源代码。这款游戏名为 Blastar，灵感来源于科幻小说的太空场景，需要运行167行代码。这是在计算机没有像今天这样适当的 GUI 时编写的，一切都需要在终端风格的界面上完成。</p><p>&nbsp;</p><p>当时的马斯克12岁，这家电脑杂志公司<a href=\"https://amzn.to/3y8PqxJ\">以 500 美元的</a>\"价格买下了这款游戏。这也成为马斯克科技生涯的起点。</p><p>&nbsp;</p><p>尽管马斯克作为程序员从来没有过朝九晚五的工作经历，但他确实在编写他初创公司 Zip2 的过程中发挥了重要作用。这是一款可以在地图上搜索企业目录的软件，据悉马斯克用C语言独立完成了这个软件后端的所有原始代码。</p><p>&nbsp;</p><p>不过根据<a href=\"https://amzn.to/3RuWb3H\">Ashlee Vance</a>\"编写的马斯克传记，该软件最终几乎完全由新员工重写。接管该项目的计算机科学专业学生能够用几行代码替换掉马斯克编写的大量代码。代码库最初也不是很灵活。这意味着如果将来需要进行更改，那将非常困难。</p><p>&nbsp;</p><p>Zip2 取得成功后，马斯克将赚到的钱投资到了他新的创业公司 X.com，几年后X.com与其竞争对手 Confinity 合并，成为 PayPal。合并过程中，X.com的大部分代码库都由更有才华的工程师重写。</p><p>&nbsp;</p><p>自此后，马斯克相继创建了特斯拉和 SpaceX。他在这些产品的开发中并没有发挥重要作用，这也意味着他从兼职程序员转变为全职创业者和企业家。</p><p>&nbsp;</p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://www.businessinsider.com/elon-musk-twitter-reach-agreement-to-close-acquisition-deal-2022-10\">https://www.businessinsider.com/elon-musk-twitter-reach-agreement-to-close-acquisition-deal-2022-10</a>\"</p><p><a href=\"https://thecodebytes.com/can-elon-musk-code-yes-but-hes-not-the-greatest-coder-alive/\">https://thecodebytes.com/can-elon-musk-code-yes-but-hes-not-the-greatest-coder-alive/</a>\"</p><p><a href=\"https://www.wired.com/story/twitter-open-algorithm-problem/\">https://www.wired.com/story/twitter-open-algorithm-problem/</a>\"</p><p><a href=\"https://www.bloomberg.com/news/articles/2022-10-27/musk-tells-twitter-employees-he-doesn-t-plan-to-cut-75-of-jobs\">https://www.bloomberg.com/news/articles/2022-10-27/musk-tells-twitter-employees-he-doesn-t-plan-to-cut-75-of-jobs</a>\"</p>",
    "publish_time": "2022-10-28 14:53:09",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]