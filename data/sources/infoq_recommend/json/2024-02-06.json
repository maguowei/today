[
  {
    "title": "关于业务架构基础知识的二三事儿：业务架构与业务流程",
    "url": "https://www.infoq.cn/article/wDEN5rh77RjDX3P5pZXg",
    "summary": "<p>我自己出来讲业务架构到现在也算三年多了，我经常说自己是个烧冷炕的，那时候几乎没多少人在公开讲这个领域，因为虽然有大名鼎鼎的Zachman框架、TOGAF等方法论可供大家学习，但是国内企业实打实且从头到尾完整实施的案例极少。华为早在2008年就成立了企业架构部，但是出来讲企业架构也不过是这几年的事情，尤其是2022年《华为数字化转型之道》这本书出来之后，毕竟企业架构同道少，所以，2021年和2022年我也都去华为交流学习过，其实所有落地的方法论都有些区别，这是需要注意灵活的地方。</p><p></p><p>由于充分的实践很少，所以大家谈论企业架构时更多是在对着方法论基于自己以往的工程经验进行理论“猜测”式的探讨，这么说没有批评的意思，毕竟很多讨论这方面的文章都没有关于上述方法论的实施体感，而只有理论层面的解释、比对，这么讨论虽然有助于大家加深理解，但是对于如何落地实施，并没有更深一步的指导作用，在一些基础知识方面也是众说纷纭，如同Zachman老先生在上个世纪80年代末写文章说的那样，他认为当时对“架构”一词的使用过于宽泛，内涵差异太大，以致于“架构”一词已经失去了意义。</p><p></p><p>其实我自己做实战型业务架构工作坊的时候也经常犯这方面的问题，因为自己接触的时间久了，就会不自觉地认为有些东西不用解释，当然，这个行当很多名词没有权威定义也是事实，所以，习惯了“自觉”去做，但是这样对听课的人来讲有些“不公平”，所以，有些概念，就算不能精确定义，也该从我自己的视角讨论下，跟大家共同切磋。我自己写了企业级业务架构领域的第一本中文书，当时还不得不为业务架构下个定义；又推动了第一个工信部教考中心通过的业务架构技术能力证书，录制了体系化的视频课；我也还致力于推动更大的业务架构师联盟类组织的建设，所以，在基础知识方面也不能过于“实用主义”，有些“形而上”的东西该聊还是得聊。</p><p></p><p>不过聊之前还是要强调下，我对业务架构的态度是非常纯粹的，这就是一个业务和技术之间快速沟通的“统一语言”，因此，我不追求任何精妙的方法，就像你正常沟通时不会把普通话讲成文采飞扬的诗歌散文一样，务求双方都懂、都会、都能讲，所以我也才会把业务架构初级课程定位在让业务人员也可以学，也应该学的位置上，就是希望能在企业建立起结构化思维的“语言环境”，使结构化思维能够进一步普及，这是所有从业者的数字化转型，也只有这样，真正要去做解决方案的业务架构师们才能顺利开展工作，而不是去做个“夹心饼干”。</p><p></p><p>好，那要讨论哪些基础概念呢？我想到哪说到哪，一篇文章写不全，咱就再写第二篇，上不封顶，但至少一篇保底。</p><p></p><p>第一个基础知识，我想，还是先说说业务架构，或者说我心目中的业务架构与之前的方法论说的不同之处。我常讲的业务架构不仅是从业务视角描述企业，像TOGAF说的，战略、组织、关键流程等等，按照我们的工程经验，这是一个面向业务能力布局的结构化分析方法，可以参考我在《企业级业务架构设计：方法论与实践》和《聚合架构：面向数字生态的构件化企业架构》中的定义，这个所谓的面向业务能力的布局与我们常讲的应用功能布局有什么区别呢？这个确实在课堂实践中有学员困惑过，因为当时技术同学自己先试着画了个业务架构图，然后发现跟自己画的应用功能结构图高度相似，其实原因很简单，就是画图时潜意识里都是功能视角。</p><p></p><p>那业务架构的视角到底是什么？是对业务能力的定义，也就是说，这时还没走到功能划分，设计者脑子里要想的是，如果你是一个业务部门的领导，你的业务分工要如何设计最合理，而不是直接跳到有什么功能上。但是这与一般意义上的业务领导给下属派活儿又有些差别，传统意义上的派活儿是从“事情”入手的，什么事情分给谁干，而业务架构的业务能力定义是从数据入手，或者用业务更好懂点儿的词——信息——入手的，把哪一类信息交给什么人处理，这就是关于业务能力的一个即可以被业务稍微绕个弯理解，也能符合技术视角的定义。数字化时代，对企业而言，组织结构设计也可以看成是为了处理某类信息而聚类了一群人，这群人再用一个特定的过程处理这些信息，这就是部门和团队的设计基础，处理人事信息的、处理财务信息的、处理产品设计信息的、处理售后服务信息的、处理客户关系信息的，这样理解组织结构可以更好地适应康威定律，见下图：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4c/4cfe2690e140e9bff53a5f00a41edab4.png\" /></p><p></p><p>以信息聚类行为和角色，这是数字组织的设计基础，也是业务能力定义的基础，在这个基础上再分析才是功能、用例、服务的定义。以往的业务分析有些是纯流程的，有些是纯数据的，有些是二者有点儿关联的，但一直还没有这样深度关联的，比如原有的CBM也只是从流程角度看业务组件，但是我们之前设计时，业务组件里是希望只有离散的任务而没有连续的活动，这个不在这里展开讨论了。也就是说，直到我们在工程实践中深度地试了一次，才真的理解了或者自己解释了这些概念的区别，当然，不要误会，我们不是用这个方式重新设计了企业的组织结构，而只是用这个方式进行了业务能力定义。解释清楚了吗？不清楚也不要紧，业务架构好就好在不做你是很难真有实感的，以后我们还可以慢慢聊，尤其是你接触到相关实践的时候。</p><p></p><p>第二个基础知识，我想，再说说业务流程。梳理业务架构一定少不了梳理业务流程，而且，也有读者问有没有流程架构？流程架构跟业务架构是什么关系？我不敢说没有流程架构，毕竟我从来不觉得自己在业务架构方面有什么资格肯定这个、否定那个，而且我对方法论的态度非常务实，我从来不赞成在方法论方面花太多时间在PK上，还是借鉴好的经验吸收到自己身上才是“聪明”的，讨论架构要开放，不要搞什么卫道士的思想，更不要上纲上线去讨论什么莫须有的东西。架构这个词的核心内容就是结构、关系、原则，这个倒是有国际定义的。这么套的话，有个流程架构也不稀奇，流程的结构、流程的关系、流程的设计和演进原则，这么说起来也不违和。</p><p></p><p>那么如果可以有，它跟业务架构什么关系呢？这个我可以放开点儿胆子论论了，首先，它是业务架构的一部分，毕竟都得梳理流程，如果一个企业即搞流程治理又搞业务架构，那你心里一定不希望由此出现两套流程结构，那基本上是在浪费时间、浪费金钱、浪费生命，所以，我们建议“同源框架”，哪怕你再搞风险管理、合规管理、体验管理，也不要一处一套流程，那会折腾死人的。既然流程架构可以和业务架构共用一套流程描述，那就有个“主数据”和“主方法”的问题，以谁为主，我是搞业务架构的，当然会说以业务架构为主，但实际上也是该这样做，因为业务架构是可以关联IT实现的，如果不以它为主，那反倒在其他用途上产生IT需求时会引起麻烦了。</p><p></p><p>如果以它为主，方法上有什么要求呢？梳理流程的方法很多，我无意搞方法上的PK，首先要做的是企业内部统一流程梳理方法，不要一个部门一个样儿，此外，如果考虑到与IT对接的视角来讲，在各种流程梳理方法中我还是建议采用BPMN的方式，因为这个流程建模语法在控制任务颗粒度、控制流程图展示复杂性方面还是有优势的。做业务架构虽然不以做IT架构为首要目标，但是必然会关联到IT实现上，所以这方面要有所顾忌，如果真的希望业务架构设计可以更好地驱动技术设计，那必须在流程结构颗粒度及与数据实体的关联上下功夫，这一点大多数流程梳理方法是没太考虑过的，因为对单纯的流程管理来讲也不需要特殊强调这种视角，尤其是与数据实体的联接上，这是多少有些偏向设计了，也正是因为这样，采用业务架构方式梳理的流程必须要与技术有良好的对接，而这一点，多数的流程模型方法面向的是流程管理而非系统规划，所以只能供系统分析人员做“参考”，而无法“驱动”，随着传统开发模式受到越来越多的来自新技术、新思维的冲击，业务已经不能再只是解释需求了，需要更多地结构化自己，更深入、更多样地参与到开发中，而这么做的起点其实正是对业务架构的梳理。</p><p></p><p>延伸阅读：</p><p><a href=\"https://www.infoq.cn/article/71WPsPNa9gF7R9zIRuD9\">老司机跟你聊聊学习企业架构和业务架构的那些事儿</a>\"</p>",
    "publish_time": "2024-02-06 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Meta 爆款应用 Threads 背后的技术秘诀：选用 ZippyDB 和 Async 是关键",
    "url": "https://www.infoq.cn/article/9UbSOztzQBuRyK2XFhB3",
    "summary": "<p>2023 年 7 月 5 日，Meta 推出了该公司应用产品线中的最新应用 Threads，并取得了前所未有的成功，在推出的前五天内就获得了超过 1 亿的注册量。</p><p></p><p>一个小规模、灵活的工程师团队仅用了五个月的技术工作就构建出了 Threads。虽然这款应用的生产环境发布计划已经考虑了一段时间，但等到 Meta 最终做出发布决定并通知基础设施团队做好发布准备时只提前了两天而已。之所以时间这么紧凑，是因为 Meta 基础设施团队过去的业绩记录优秀，基础设施也非常成熟，因此公司非常有信心。尽管如此短的交付时间带来了艰巨的挑战，基础设施团队还是为该应用的快速增长提供了出色的支持。</p><p></p><p>数百万用户注册 Threads 时，该应用的规模扩展平滑无缝，而这是过去十多年来 Meta 基础设施建设和产品开发的成果。这不是专门为 Threads 构建的基础设施，而是在 Meta 长期发展中为许多产品构建的。它生来就注重规模、增长、性能和可靠性，并且成功地超越了 Meta 的预期，支持 Threads 达到了无人能预料到的增长速度。</p><p></p><p>为 Threads 提供服务的基础设施非常多，但由于篇幅限制，本文只会挑两个发挥重要作用的现有组件来举例：ZippyDB（Meta 的分布式键 / 值数据存储）和 Async（正如其名，是 Meta 的异步无服务器函数平台）。</p><p></p><p></p><h2>ZippyDB：扩展 Threads 的键空间</h2><p></p><p></p><p>先来看 Threads 存储层的一个切面，其中用到了 ZippyDB，一个分布式键 / 值数据库，运行形式是一个完全托管的服务，供工程师进行构建。它是从零起步构建而成的，旨在充分利用 Meta 的基础设施，且其上托管的密钥空间可以相对轻松地缩放，并可以灵活地部署在任意数量的数据中心中。由 MySQL 支持的 TAO 则用于 Meta 的社交图存储——这样就可以直接在这个堆栈中找到 Threads 的帖子和回复。ZippyDB 是 MySQL 的键 / 值对应产品，是 Meta 在线数据栈的关系数据库组件，用于计数器、推送排名 / 状态和搜索功能。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/14/1412690492ecd7fce6ea95e3b0f0f2af.jpg\" /></p><p></p><p>Meta 得以高速扩展键空间容量的能力取决于两个关键特性：首先，该服务运行在一个公共硬件池上，并插入 Meta 的整体容量管理框架中。一旦有新容量分配给这个服务，服务池中就会自动添加机器，负载均衡器也会开始将数据移动到新机器。将数千台新机器添加到服务中后，系统只需几个小时内就能完成迁移。虽然这样的表现已经很好了，但还不够，因为批准容量的端到端时间（可能会从其他服务中挤出容量并添加到 ZippyDB）还有可能长达数天。由于给出的发布通知提前时间很短，基础设施团队还需要在很短时间内就完成大量机器的迁移。</p><p></p><p>实现高速迁移的秘诀是这个服务架构的多租户及强大的隔离特性，从而支持不同的键空间，还可能有共享底层主机的空闲负载需求，而不必担心当其他负载变重时自己的服务水平会受到影响。由于各个键空间以及用于处理灾难恢复事件的缓冲区都有未使用容量，主机池中也存在闲置资源。团队可以翻转腾挪，在键空间之间转移未使用的资源，从而充分利用现有的闲置空间，让主机运行在更高的利用率水平上，这样键空间就能几乎瞬时扩展并在短时间内（几天）维持这个容量水平。所有这些都只需要在围绕它们构建的各种工具和自动化操作中做简单配置更改即可，因为它们是相当常规的日常操作。</p><p></p><p>强大的多租户和吸收新硬件的能力相结合，使得 Threads 服务能基本上实现无缝扩展，即使面对突然出现的大量新需求也是如此。</p><p></p><p>为产品发布优化 ZippyDB</p><p></p><p>ZippyDB 的重新分片协议使团队能够快速、透明地增加 ZippyDB 用例的分片因子（即水平缩放因子），同时保证客户端有零停机时间，并提供完全的一致性和正确性保障。这样基础设施团队就能够在新产品发布的关键路径上快速扩展用例，即使负载增加了 100 倍，发布过程也能实现零中断。</p><p></p><p>团队实现这一点的诀窍是让客户端将其键值散列到逻辑分片，然后将其映射到一组物理分片。当用例增长并需要重新分片时，团队会配置一组新的物理分片，并通过实时配置更改在客户端中安装新的逻辑到物理分片映射，过程无需停机。使用服务器自己的隐藏访问密钥以及重分片 Worker 中的智能数据迁移逻辑，团队就能够自动地将逻辑分片从原始映射移动到新映射。一旦所有逻辑分片都已迁移完毕，重新分片工作就完成了，工程师这时会删除原始映射。</p><p></p><p>由于扩展用例是新产品发布的关键操作，因此团队在重分片技术栈上投入了大量资源，以确保 ZippyDB 扩展过程不会成为产品发布的瓶颈。具体来说，团队基于协调器 -Worker 模型设计了重分片栈，因此它是水平可扩展的，使团队能够在需要时（例如在 Threads 发布期间）提高重分片速度。此外，团队还开发了一套紧急操作工具，可以轻松应对用例的突然增长。</p><p></p><p>这些方法结合起来，使 ZippyDB 团队能够有效应对 Threads 的快速增长势头。通常，当在 ZippyDB 中创建新用例时，团队首先从小规模开始，然后根据增长需求重新分片。这种方法可以防止过度配置并提高容量使用效率。随着 Threads 开始病毒式增长，很明显团队需要通过主动执行重分片来为该应用上百倍的增长做好准备。在过去开发的自动化工具的帮助下，当 Threads 团队在英国时间午夜打开流量闸门时，基础设施团队及时完成了重分片。这样即便 Threads 的用户数量激增，用户体验依旧令人满意。</p><p></p><p>Async：扩展 Threads 的负载执行</p><p></p><p>Async（也称为 XFaaS）是一个无服务器函数平台，能够将计算推迟到非高峰时间，从而使 Meta 的工程师能够缩短从解决方案构思到生产部署的时间。现在 Async 每天在超过 100,000 台服务器上处理数万亿次函数调用，并且可以支持多种编程语言，包括 HackLang、Python、Haskell 和 Erlang。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/7c/7c5cf09f06851acd30175dc820a1add2.jpg\" /></p><p></p><p>该平台抽象了部署、排队、调度、扩展以及灾难恢复和准备的细节，这样开发人员就可以专注于他们的核心业务逻辑，并将其余繁重的工作卸载到 Async 上。开发人员的代码加入到这个平台后会自动获得大规模扩展能力。可扩展性并不是 Async 的唯一关键特性。上传到平台的代码还继承了可配置重试、交付时间、速率限制和容量责任的执行保证。</p><p></p><p>在 Async 上执行的负载一般是那种不会干扰活跃用户使用产品的体验，并且可以在用户操作后几秒钟到几个小时内随意执行的类型。在为用户提供快速建立社区的能力方面，Async 发挥了关键作用，在它的支持下用户可以把 Instagram 上关注的用户列表转移到 Threads 里面来。具体来说，当新用户加入 Threads 并选择关注他们在 Instagram 上关注的用户列表时，执行用户请求，关注 Threads 中同一社交图谱的高计算量操作是通过 Async 以可扩展的方式进行的，这样就不会打断，或者对用户的入门体验产生负面影响。</p><p></p><p>在五天内为 1 亿用户完成这样的操作需要强大的处理能力。此外，许多名人都加入了 Threads，意味着可能有数百万人排队关注他们。这种操作和对应的通知操作也都在 Async 中处理，从而能够在面对大量用户时实现强大的可扩展性。</p><p></p><p>虽然快速增长的 Threads 用户新加入时生成的 Async 作业量比团队最初的预期高出几个数量级，但 Async 优雅地吸收了增加的负载，把负载排好队列，让操作执行井然有序。具体来说，执行过程是在速率限制内管理的，这样系统就能正常发送通知，并让用户及时建立连接，而不会导致从这些 Async 作业接收流量的下游服务过载。Async 会自动调整执行流程以匹配其容量以及依赖服务（例如社交图数据库）的容量，所有这些都无需 Threads 工程师或基础设施工程师的手动干预。</p><p></p><p>基础设施中反映的工程文化</p><p></p><p>Threads 在短短五个月的技术工作中迅速发展，凸显了 Meta 基础设施和工程文化的优势。Meta 的产品充分利用了经受时间考验的共享基础设施，使产品团队能够快速行动并快速扩展广受欢迎的产品。Meta 的基础设施高度自动化，这样除了在短时间内确保容量水平的工作外，重新分配、负载平衡和负载扩展都能自动化顺利、透明地完成工作。Meta 在追求快速行动的工程文化氛围中蓬勃发展，在这种文化中，工程师有着充足的所有权，并能无缝协作，共同实现同一个大目标，相应的流程也非常高效，传统组织往往需要几个月时间才能完成这种协调工作。举例来说，Meta 的 SEV 事件管理文化一直是在 Meta 团队都需要协调和快速行动的时候获得正确的可见性、焦点和行动力的关键。总的来说，这些因素结合起来确保了 Threads 的成功发布。</p><p></p><p>原文链接：</p><p><a href=\"https://engineering.fb.com/2023/12/19/core-infra/how-meta-built-the-infrastructure-for-threads/\">https://engineering.fb.com/2023/12/19/core-infra/how-meta-built-the-infrastructure-for-threads/</a>\"</p><p></p><p></p><p></p><p></p><p></p><p></p>",
    "publish_time": "2024-02-06 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]