[
  {
    "title": "如何引发一场消费级用户体验大变革",
    "url": "https://www.infoq.cn/article/pmfUPqNxTvPAQWBY4JzN",
    "summary": "<p>发展的2022年，现代企业应用如果想一直蓬勃发展下去就需要关心终端用户的感受。现在，许多企业级应用程序公司都在使用曾经为消费者保留的UX（消费级用户体验）概念，这是有原因的。实现这一概念的公司，在终端用户采用率、终端用户支持、工作流效率、市场份额和收入方面，<a href=\"https://www.mckinsey.com/business-functions/mckinsey-design/our-insights/the-business-value-of-design\">一直优于</a>\"那些乏味的竞争对手。</p><p></p><h2>为什么</h2><p></p><p>在很早的时候（即2000年代早期），人们并不认为企业应用UX是重要的销售驱动力。经理们查看功能表，比较不同服务的成本，仔细权衡利弊，最后看哪个销售员动作快就买谁的。用户会接受，因为这是他们老板的决定，过程基本就是这样。</p><p>&nbsp;</p><p>但2010年前后事情发生了变化。Slack推出后，很快就在2014了超过了当时占据颇大市场份额的Atlassian的Hipchat（这伙人还做了Jira）。许多其他公司（Dropbox、Asana和谷歌等）也开始学Slack：将为消费者提供更好用户体验的原则运用到企业应用开发中。</p><p>&nbsp;</p><p><a href=\"https://uxmag.com/articles/the-future-of-enterprise-design-is-consumer-grade-ux\">用户成为决策制定者</a>\"。公司用加油站般的用户体验换取人们的依赖，其高明之处体现在两个方面。首先，用户在使用设计良好的系统时效率更高；其次，终端用户成为拥护者，会在其公司内部推荐采用他们喜欢的解决方案，尤其是当他们以前用过这些解决方案时。这些因素结合在一起，使这些品牌成为家喻户晓的专业品牌。以Slack为例，他们的产品名变成了<a href=\"https://www.theatlantic.com/magazine/archive/2021/11/slack-office-trouble/620173/\">动词</a>\"。</p><p>&nbsp;</p><p>通常，在以下两种情况下需要开展UX改造项目。首先是那些希望更好地服务客户的老牌企业，要么是新晋领导层带来了新理念，要么是更现代、更灵活的替代方案正在蚕食他们的市场份额。其次是那些快速增长的初创公司，他们一开始优化了实现速度，以证明他们的产品符合市场需求，随着他们越过早期采用阶段，设计债务越来越多，用户越来越不宽容。</p><p></p><h2>如何</h2><p></p><p>在现有产品中实现消费级用户体验是一项资源密集型的、非常耗时的工作，并且存在相当大的风险（“为什么要改变一支冠军队伍？”）。决策者可能认为这样的投资纯属浪费，因为它们占用了开发新特性、提高软件质量和修复Bug的时间。</p><p>&nbsp;</p><p>借助广泛的重新设计及多团队的长期规划，是有可能自上而下对用户体验进行改造的。然而，这需要强烈的组织意愿、高管层支持、前期投资及其他非必须的东西。我们的关注点不在这里。</p><p>&nbsp;</p><p>我们关注的是任何团队今天就可以开始的事情：启动一场UX变革，一次一个迭代。实现这一目标主要有四个阶段：</p><p>了解现状。设计一个可行的解决方案，并获得认可。进行小规模试验。迭代并乘势而上。</p><p></p><h3>学习&amp;了解</h3><p></p><p>第一步是在开始之前了解业务、应用程序、当前的局限性和最终用户。你需要回答，客户是谁，你的最终用户，你卖给他们什么，他们的主要目标和关键任务，他们付给你多少钱，以及什么有助于降低成本。</p><p>&nbsp;</p><p>许多优秀的消费级UX改造项目未能越过最初的概念阶段。尽管这可能是个悲剧，但决策者不一定是错的。我曾见过许多工程师、产品经理和设计师提出了理想的方案，但很快就加入了“可能”的行列，然后被遗忘了。这些提案主要有两个问题，它们要么不能解决实际问题，要么没有说商业语言。</p><p>&nbsp;</p><p>合格的决策者总是想着更好地服务于客户，并在这个过程中从客户那里获得更多的价值。如果你想要吸引他们的注意并获得认可，就需要了解现状，并就OKR、KPI、ROI、路线图等方面的变化展开讨论。</p><p>&nbsp;</p><p>从了解业务、产品、客户、最终用户以及他们的痛点入手。一种方法是与产品经理、高级工程师、客户支持经理以及初创公司的创始人交流。问他们这样一些问题：你卖的是什么？谁会买？他们为什么要买？价格结构是什么样的？你提供这些服务的成本是多少？用户是谁？他们需要完成的主要任务是什么？</p><p>&nbsp;</p><p>另一个有价值的信息源是数据。你需要分析两类关键绩效指标（KPI）：落后或输出KPI以及领先或输入KPI。第一类指标告诉你用户是否得到了他们需要的东西，第二类指标告诉你他们在这个过程中是否遇到了困难。</p><p>&nbsp;</p><p>输出KPI的例子有净推荐值（NPS）、系统可用性评分（SUS）、给定时间内完成的关键任务数，以及每个关键任务的成本。领先KPI的一个例子是用户完成关键任务所需的时间（以及错误/拒绝率）。这两种类型的KPI你都需要。如果少了其中的一部分（或全部），那就从与团队合作入手开始跟踪。</p><p>&nbsp;</p><p></p><blockquote>建议：多花心思去获取与用户多么喜欢使用应用程序相关的KPI。不要低估快乐的力量。Slack早期与Hipchat的一个核心区别在于，用户找到并发送动画GIF的难易程度。</blockquote><p></p><p>&nbsp;</p><p>举一个真实的例子：我曾在美国一家快速发展的AdTech公司领导工程团队。该公司运营着一个DSP（需求端平台）。客户是营销机构和拥有内部广告团队的大品牌。最终用户是他们的广告运营商和活动经理，他们使用我们的产品来创建数字化营销活动，跟踪活动进展，适时做出调整，并生成结果报告。主要的KPI包括创建活动的时间、分析新鲜度、生成报告的时间以及目标交付率。</p><p>&nbsp;</p><p>推动项目前端工作的员工做得非常出色，并且特别注重提供卓越的用户体验，使我们赢得了<a href=\"https://infillion.com/the-mobile-majority-wins-ux-award-for-peoples-choice/\">2015年度用户体验人民选择奖</a>\"。</p><p></p><h3>设计&amp;销售</h3><p></p><p>下一步是设计一个可行的解决方案，并获得必要的决策者支持。首先，利用你的业务知识来确定最有可能产生巨大作用的最大挑战。通常，这些都跟滞后和领先KPI有关，并与最终用户必须执行的主要任务相一致。</p><p>&nbsp;</p><p>选择你准备克服的最高ROI挑战并持续关注。成果定义了投资回报率（ROI），实现成本定义了投资。选择一个有意义的问题以便解决，选择一些可处理的问题以便交付，这至关重要。如果第一次迭代失败，整个过程就会失败。选择一个具体的问题，从现在开始，而不是经过漫长的计划和评审过程之后再开始。最后，确保这是一个<a href=\"https://www.inc.com/jeff-haden/amazon-founder-jeff-bezos-this-is-how-successful-people-make-such-smart-decisions.html\">双向决定</a>\"——也就是说，如果事情出错，可以在不影响业务的情况下逆转。</p><p>&nbsp;</p><p>选择了一项挑战后，便需要明确其最终用户，他们的痛点，以及需要改进的KPI，并在此基础上<a href=\"https://www.inc.com/justin-bariso/amazon-uses-a-secret-process-for-launching-new-ideas-and-it-can-transform-way-you-work.html\">设计</a>\"一个<a href=\"https://www.forbes.com/sites/forbesbusinesscouncil/2020/09/04/minimum-lovable-product-the-evolution-of-minimum-viable-product\">讨人喜欢的最小解决方案</a>\"。快速前进并适时调整的关键是构建-度量-学习迭代周期——构建一些东西，看看它在现实世界中的效果，汲取经验教训，重复以上过程。与此同时，因为你目的很明确，是要处理用户体验问题，所以方案不仅要可行还要讨人喜欢。</p><p>&nbsp;</p><p>此时，应该基于对底层业务逻辑和最终用户需求出具可行设计。还应该针对有意义的KPI制定一个可衡量的目标。最后一步是获得涉众的认可。</p><p>&nbsp;</p><p>为了将项目推销给需要他们提供支持的人（产品经理、工程经理、队友等）就需要讲<a href=\"https://hbr.org/2014/07/how-to-tell-a-great-story\">一个好听的故事</a>\"。从为什么开始：展示你正在解决的问题，以及为什么它们对于业务和当前目标来说很重要。然后跟进预期成果，解决方案将是什么样子，以及最终需要多少时间/金钱/人员来实现它。许多<a href=\"https://hbr.org/2020/05/what-makes-a-great-pitch\">推销新业务的规则</a>\"在这里同样适用。</p><p>&nbsp;</p><p></p><blockquote>建议：考虑变革的时机。在错误的时间提出以UX为中心的变革（例如，当团队正在处理一个重大的技术问题或正在进行安全审计时）可能会给人留下“低情商”的印象，并且可能无法引起所需人员的充分注意。充分发挥你的判断力，不过，最好的时机是在产品成功发布后，在季度计划期间，或在与产品经理一起喝咖啡时（永远不要低估1杯咖啡的力量），仅举几例。</blockquote><p></p><p>&nbsp;</p><p>在之前的例子中，我们发现，通过运营商投放广告的方法非常繁琐、单调且容易出错。运营商必须在短时间内投放几十个、或数百个广告，在此期间，即使一个小错误也会浪费大量的时间和金钱。我很确定，洛杉矶的餐厅不会想在澳大利亚做广告。</p><p>&nbsp;</p><p>我们改进了表单的用户体验，增加了许多自动化操作，彻底改变了这个过程。我们将一些部分做成可选项，实现了多步骤过程，并添加了一些功能，如根据选中的国家限制搜索的城市，以及支持直接从客户那里批量导入广告配置。这些修改大幅缩短了广告及广告活动的投放时间，减少了投放错误和营销预算浪费，减轻了广告运营商的压力，提升了他们的幸福感。</p><p></p><h3>小规模试验</h3><p></p><p>至此，你已经了解了业务，设计了一个令人惊叹的解决方案，并获得了所需的支持。下一步就是执行了。</p><p>&nbsp;</p><p>将第一次消费级UX修改看成一个试点项目。确保自己已经准备好跟踪所有必要的信息，尤其是试图改进的核心指标。使用类似<a href=\"https://analytics.google.com/\">Google Analytics</a>\"、<a href=\"https://www.hotjar.com/\">Hotjar</a>\"、<a href=\"https://www.kissmetrics.io/\">Kissmetrics</a>\"、<a href=\"https://www.datadoghq.com/\">Data Dog</a>\"等工具，尽可能自动化追踪过程。如果无法实现自动化，也不要让这个成为你前进的阻碍——找到手动跟踪所需数值的方法即可，重拾Excel也没关系，谨防瞎忙。</p><p>&nbsp;</p><p></p><blockquote>建议：定期从乐于相助的终端用户那里获取反馈，了解他们的定性观点。数值只能让你了解故事的一部分。你需要同时掌握定量和定性信息，才能了解正在发生的事。</blockquote><p></p><p>&nbsp;</p><p>推荐以旧版本为基准运行<a href=\"https://blog.hubspot.com/marketing/how-to-do-a-b-testing\">A/B测试</a>\"。这样就可以与新旧版本进行比较，确保新设计有改进，或者是发现新设计的问题。</p><p>&nbsp;</p><p>随着数据和终端用户的反馈开始进入，做好快速迭代的准备，不要让偏见影响自己的分析。理解数据的含义，并相应计划新一轮的修改。这些修改可大可小，视结果而定。或者，可以根据时间预算来计划，保证利益相关者了解情况，快速行动，维护变更日志，写明你正在做的事情以及那样做的原因。</p><p>&nbsp;</p><p>在我举的例子中，我们一开始并没有这么早就引入批量广告导入功能的计划。在改造项目开展过程中，我们从运营商的反馈中了解到，改进输入流程非常好，但还不够，所以我们不得不将这一功能的进度提前。运营商在一些重要时刻（如第一次发起大型活动），之后他们就有了用于描述广告的半标准化格式。</p><p></p><h3>迭代并继续前进！</h3><p></p><p>试点完成后要总结经验教训。与客户和最终用户面谈，了解对你所实现的东西的总体看法。整理变更日志的信息，了解什么有效（什么无效），为什么有效以及为什么失败。掌握全貌才能确定这次变革是否成功，前进方向是否正确。</p><p>&nbsp;</p><p>不管试点是否成功，也不管你是否达到了目标，都要向团队以及利益相关者介绍成果、经验，并做个总结。这可以帮助你积累信誉，为后续工作打下坚实的知识共享基础。</p><p>&nbsp;</p><p>放眼全局，考虑更为系统性的变革。你从试点项目获得的知识，不只是如何在下一次迭代中做得更好，还包括可以扩展到整个应用程序的模式。着手创建一个总体愿景和工具集，将所有东西联系在一起，保证后续迭代的一致性。这可以包括通用的设计语言、一致的表单元素、快捷方式的使用、何时同步等待或运行后台作业，等等。</p><p>&nbsp;</p><p>试点项目不是终点——它是变革的第一步。借助第一次迭代的势头，综合考虑本次迭代的经验教训，选择一个或多个高ROI挑战作为下一步的工作。这次推销起来会简单些，因为未知的东西少了。不要就此停住！</p><p></p><h2>小结</h2><p></p><p>今天就可以启动一场公司范围的消费级UX变革。不要小题大做，也不要让“分析瘫痪症“束缚你的团队。从了解业务入手，针对一个影响大但可交付的场景设计一个解决方案，推销解决方案并获得所需的支持，开展一个数据驱动的试点项目，最后，借势创建一个愿景，解决下一个挑战。</p><p>&nbsp;</p><p>当开始第一次UX改造迭代时，我们需求端平台（DSP）正处于一个非常关注技术的时期。每秒需要处理100K以上的事务，在几毫秒内运行复杂的规划和ML算法，创建每天可以处理数TB数据的分析管道——所有这些都要在启动预算范围内，而且是由一个小而勇敢的团队完成的。UX不是我们的关注点，在这方面，跟上竞争对手的步伐就很满足了。我们的第一次试点测试改变了工程师和高管们的看法。</p><p>&nbsp;</p><p>毫不夸张地说，这是点燃一场变革的火花。</p><p>&nbsp;</p><p>作者简介：</p><p>Marcelo Wiermann由一名软件开发人员转型为管理人员。他在该领域有超过10年的经验。他曾服务于拉丁美洲、欧洲和美国的公司，并帮助早期创业公司和上市公司建立组织、培养人才及开发软件。他帮助AdTech创建了每天处理数TB数据的高可用性API和数据管道，屡获大奖的区块链解决方案，以及每天服务于数百万用户的电子商务平台。在业余时间（几乎没有），Marcelo热衷于在The Mentoring Club上为工程师、工程经理和企业家提供指导。目前，他担任Delivery Hero（德国最大的科技公司之一）的高级工程经理，领导全球建议部门。</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/spark-ux-revolution/\">How to Spark a Consumer-Grade UX Revolution</a>\"</p>",
    "publish_time": "2022-08-20 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "不要称之为卷土重来，Java 仍独领风骚",
    "url": "https://www.infoq.cn/article/C3cVlejV6HBBccflYfyC",
    "summary": "<p></p><p>无论你看的是哪家排名，比如TIOBE指数、编程语言流行指数、RedMonk的双年度语言排名，或者是GitHub的<a href=\"https://octoverse.github.com/#top-languages-over-the-years\">年度Octoverse状态</a>\"，Java自1995年发布以来都是一直跻身前三名。然而，如果听一听开发人员们近段时间以来的流言蜚语，你可能会认为Java实际上正处于一个大的衰退期，甚至到了垂死挣扎的边缘。仔细看看这些人气数据，你可能会认为Java已经慢慢地将市场份额拱手让给了它的竞争对手，这是它即将灭亡的另一个明显迹象。一些支持者可能会反驳说，只是因为有越来越多的语言在不断出现，因此大家能分到的蛋糕也越来越小。</p><p></p><p>虽然在早期Java遇到过一些小问题，但如今这门语言及其更大的生态系统已经加快发展步伐，以各种方式来满足未来的需求。事实上，它一直都没有离开过：亚马逊、谷歌、Netflix、Pinterest、Spotify、Square和Zoom等公司都在其庞大的代码库中使用了Java。更不用说在过去的十年中，许多大型数据基础设施都是由Java来提供支持的，该语言是Apache Hadoop、Kafka和Spark等公司的支柱。随你怎么<a href=\"https://xie.infoq.cn/article/15f1fe601ed2282e4f4a77fda\">说它已经死了</a>\"，但我们现在看到的是Java的复兴；是为那些最近认为它无法满足的未来用例而进行的语言复兴。</p><p></p><p>也就是说，Java可以用LL Cool J不朽的名言来描述：“别叫它卷土重来，我已经在这里呆了很多年了//我让同龄人感到震撼，让那些傻瓜们感到恐惧。”</p><p></p><h3>那些年对Java的不满</h3><p></p><p>Java于1995年首次亮相，并承诺能够“一次编写，随处运行”（WORA），这一特性使它在当时占主导地位且依赖平台的语言（如C和C++）中脱颖而出。在推出后不久，它就通过Java小程序（applet）进入了Web浏览器，开发者们就突然有了一种可以跨越苹果与PC战线的语言，并进入到蓬勃发展的万维网。虽然在1995年还诞生了PHP、Ruby和Javascript，但它们都没有像Java那样迅速流行起来。</p><p></p><p>接下来短短两年时间，Java的受欢迎程度就排到了第三名，仅次于C和C++。到1998年，它超过了C++，并于2001年超过C，攀升至第一宝座。在六年的时间里，Java主导了软件开发世界。虽然这一地位持续了十多年，但在Java世界中，并非所有人都对它感到满意。</p><p></p><p>EPI-USE Labs的首席解决方案架构师Andrich van Wyk回忆起Java语言发展停滞不前的时期，那时候尽管它处于主导地位，但也受到了质疑。低谷出现在2009年左右，当时Java 6已经推出将近三年，而Java 7还差两年才能问世。当Java 7最终问世时，van Wyk回忆说，它“虽然经过了5年的开发，但它还是一个相对平庸的版本”。</p><p></p><p>他将当时描述为“开发人员渴望更现代的语言功能、更少的冗长代码、以及新的编程范式”的时代。Ruby的Rails框架可能正处于其最初的操作周期的顶峰，而Node.js才刚刚出现，两者都体现了代码简洁、快速原型化、以及可用于快速构建现代Web应用程序的库等特性。换句话说，它们有许多Java所没有的东西，至少在当时来看是这样的。</p><p></p><p>“所有这些东西后来都可以通过现代版本和Spring Boot等框架在Java中使用，但我们不得不等到2014年Java 8的发布来启动这种复兴。”van Wyk回忆说，Java 6和8之间间隔了近十年是问题的关键之处。</p><p></p><p>所以如果说有可以让Java几乎宣告死亡的时刻，大概就是那时候。对Java来说，幸运的是，公司和开发人员已经在全力以赴地开发Java，并且它在许多组织中已经是根深蒂固。所以即使有许多用户越来越不满意，以及语言的创新停滞不前，但Java仍然在提供大量库和工具的同时也提供了性能。也许它从未真正实现“一次编写，随处运行”的承诺，但它具备高性能、内存安全等特点，是互联网基础设施和大规模应用的理想选择。</p><p></p><p>不管怎么说，2014年Java 8和Spring Boot的推出还是给Java生态系统带来了一股新鲜空气，开启了一段复兴期。Spring Boot是十年前推出的流行的Spring框架的继任者，它帮助开发人员消除Java的冗长，而Java 8引入了开发人员一直在破解期待的许多功能，如日期和时间API以及Lambda表达式。</p><p></p><h3>转折点</h3><p></p><p>虽然van Wyk指出2014年是Java的一个重要转折点，但Eclipse基金会执行董事Mike Milinkovich指出了另外的两个关键时刻。首先是2018年，随着Java SE 10的发布，Java的发布节奏就发生了变化，确保每六个月发布一个新版本而不是像之前那样长达数年的时间。</p><p></p><p>“Java现在正与许多快速发展的平台竞争，”甲骨文的产品经理Dalibor Topić说。“因此，它还必须得开始更快地前进，最大限度地减少Java用户和开发人员等待新版本的痛苦，同时以惯有的高质量水平交付每个新的Java版本。”</p><p></p><p>通过致力于定期发布的节奏，Java加入到了许多现代语言的行列。Ruby、.NET、Python和Javascript都采用一年一次的发布节奏，而Go每六个月发布一个新版本，Rust每六周发布一个新的稳定版本。有了6个月的节奏，Java的功能可以更早地被推出，并且在没有准备好时可以更容易地推迟发布，因为等待不再是不确定事件了。</p><p></p><p>“在2018年前后，随着Java 9和发布周期的增加，Java真正迎来了它的高潮，”他说。“更小但更频繁的版本发布确实效果不错。”</p><p></p><p>与此同时，Milinkovich指出，Oracle Java开发工具包（JDK）的变化，对Java开发人员和在生产或商业用途中运行Java应用的公司带来了巨大的影响。</p><p></p><p>甲骨文在2017年首次宣布，要求这些用户购买年度订阅服务（2019年4月生效），以继续获得Oracle Java平台标准版（Java SE）产品、Oracle JDK 8和11的安全补丁。</p><p></p><p>“过去多年来，对Java的长期支持实际上是免费的。作为一家企业，你可以在Java上运行你的应用程序，而不必频繁地升级版本。这种现状被变化了，迫使Java用户要么每六个月迁移一次，要么从甲骨文或其他公司那里寻求商业支持许可证，”Milinkovich解释道。</p><p></p><p>这不仅没有阻碍创新，反而使Java生态系统更加繁荣。这一变化刺激了许多云计算供应商，如亚马逊、微软、IBM、阿里巴巴云和华为，提供他们的技术兼容性套件（Technology Compatibility Kit，TCK）以测试和支持OpenJDK版本作为回应。首个回应来自伦敦Java用户组（Java User Group）发布的AdoptOpenJDK。</p><p></p><p>伦敦Java用户组的负责人Martijn Verburg表示，该组首先发布了AdoptOpenJDK是因为他们不确定在甲骨文围绕OpenJDK的变化下，开发者的使用权是什么。Verburg说：“他们想确保有一个永久免费的OpenJDK二进制文件供开发者永久使用。”Verburg解释道。</p><p></p><p>AdoptOpenJDK是一个“多方利益相关者项目”，最终“转移给了Eclipse基金会（作为Adoptium），以便在软件基金会中实现对自由二进制文件（Temurin）的访问。”</p><p></p><p>Milinkovich说，OpenJDK的变化“鼓励了多家公司加入成为自己的Java平台供应商的游戏。生态系统中供应商数量的增长对Java的多样性和可持续性是有帮助的，因为许多相关方都被迫投资于生产高质量的Java运行时，而不是像以前那样。”</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/3e/3ef23313f882407dc1dc5ff7afb14050.png\" /></p><p></p><h3>来自JVM生态系统的推动</h3><p></p><p></p><p>继续回首过去，我们还可以看到，在Java虚拟机（JVM）上运行的两种语言Kotlin和Scala是Java所谓复兴的参与者。JVM可以运行任何Java字节码，这是Java“一次编写，随处运行”承诺的关键部分。Scala和Kotlin都是专门为编译成Java字节码并在JVM上运行而设计的。Scala首次出现于2004年，就在Java在创新上陷入困境之前，Kotlin则是在2011年出现，正好处于同一时期的中期。</p><p></p><p>Kotlin和Scala可以利用JVM的稳定性和普遍性，同时也享有做Java根本无法承担的事情的自由。与此同时，对于任何一种语言来说，产生的风险都可以作为一个积极的证据，证明该特性可以在JVM上按预期运行，且不会导致系统崩溃。对于Java开发人员来说，JVM上的其他语言在提供Java兼容性的同时，也许还能解决他们对Java缺陷的担忧。像Kotlin和Scala这样的语言不仅是独立的语言，有其自身的优势和用例，而且它们为开发人员提供了一种方式来熟悉Java之外的概念，这些概念最终可能会被引入到JPL中。</p><p></p><p>“在JVM上使用其他语言是一种非常好的方法，可以看出哪些新颖的想法可以在各自的社区中得到关注，而不必立即尝试将它们嵌入到Java中。”Topić说。“相反，我们可以挑选获胜的想法，并与学术界、工业界和其他开源项目的合作者公开合作，逐步调整和完善这些想法，使它们真正适用于Java本身，将其作为语言和库的功能浮出水面，最终让人觉得它们是‘原生’于Java的。”</p><p></p><p>“我们经常谈论Kotlin是一个生产游乐场。”Pinterest的团队负责人兼软件工程师Christina Lee说。“Kotlin不像很多JVM用例那样有很多遗留问题，所以他们的语言可以发展得非常快。这不是你在Java中可以做到的。这些分支语言让我们有能力快速尝试所有这些功能，然后将其中最好的特性功能补充到Java编程语言。”</p><p></p><p>Lee指出了Java的一些新特性，如Record类和Field类，而Kotlin已经拥有这些特性好些时间了。Van Wyk同样指出，模式匹配他是从Kotlin开始熟悉的一种语言特性，现在也已经进入到了Java中。“这是后发优势。”van Wyk说。“正是因为Java是最后一个实现这些特性的，所以它可以挑选自己想要的，从而为开发人员带来他们所需要的东西，而不会搬起石头砸自己的脚。”</p><p></p><p>Van Wyk指出Scala是最初帮助他学习函数式编程并让他站稳脚跟的语言。“Java 8出现了，它也有函数式编程，我当时就想‘嘿，我已经知道如何使用它了！’”他说。类似地，Kotlin帮助他了解了协程（Coroutine）支持，这是一个由Go编程语言普及的功能特性。“如果没有Kotlin，一些即将推出的Java特性就会更加令人费解，”van Wyk说。</p><p></p><p>2017年，谷歌宣布它将<a href=\"https://www.infoq.cn/article/2017/05/Android-weekly-google-i-o-open\">在安卓系统上正式支持Kotlin</a>\"，与Java并列，自那时起，Kotlin语言便开始流行起来了。Lee表示，自那以后，Kotlin一直是她的首选语言，而且她不打算回头，尤其是当谷歌自己宣布，从2019年开始所有的Android开发都将是“首选Kotlin”。</p><p></p><p>对于Lee来说，Kotlin提供了一种面向Android开发的方式，可以避免Java的一些陷阱，在面向移动平台开发时，这些陷阱尤其危险。例如，在编写Java时，NullPointerException是一种常见错误，它可能会使应用程序崩溃，但直到运行时才能发现。Lee说，这对于移动开发来说是个问题，因为与Web应用不同，Web应用一旦部署，客户就可以立即获得缺陷修复，而应用商店可能需要几天或几周才能批准新版本。“比起在另一个生态系统中工作，我会更加重视语言的安全性。”Lee说。“Java是一门伟大的语言，但它没有像Kotlin那样为我们提供在JVM之上的这些层相同的工具来编写正确的代码。”</p><p></p><p>Lee说，她没有把Kotlin和Java看成一场零和游戏，即一种语言的普及意味着另一种语言的衰落，她认为这两种语言是共生共存的。毕竟，它们实际上可以在同一个应用程序中并肩存在。事实上，对于有兴趣学习Kotlin的Java开发人员来说，他们可以简单地用Java编写一些东西，将其粘贴到Kotlin文件中，然后通过IDE将其自动转换为Kotlin。“在我看来，这就是Kotlin如此成功的部分原因，”Lee说。“这就是可转移性。”</p><p></p><p>Lee给出了苹果选择从Objective C迁移到Swift的比较，在这一过程中，两种语言之间的通信需要额外的步骤。“他们没有互操作性的故事。要把iOS应用程序迁移到Swift上就困难多了。在Pinterest，当我们第一次引入Kotlin时，你只需添加一个Kotlin文件，一切都能正常工作。你可以轻松地在文件之间调用，这为采用这些语言开辟了一条巨大的通道，否则就不会这么容易了。我认为这些语言能够很好地结合在一起的事实使它们非常、非常有凝聚力。”Lee说。</p><p></p><p>她说，Kotlin提供了一个完美的中间地带。“你可以保留所有现有的基础设施，并解决一些用户体验上的痛点，而不用将婴儿与洗澡水一起倒掉。完全脱离JVM的理由变得越来越少了。”</p><p></p><h4>Java使自己稳定且不那么缓慢地步入未来</h4><p></p><p>在Java使用了近30年之后，你可能会认为该语言已经出现了一些“磨损”的迹象，但事实并非如此。2022年的Java并不是一门衰落中的语言，而是一门为软件开发的蓬勃发展而准备的语言。当Java终于在2010年代中期再次开始创新时，云原生开发的阴影已经笼罩在头顶，现在它越来越成为默认配置，特别是对于大规模运行的企业和软件而言。VMware软件工程副总裁Ryan Morgan说，虽然诸如Go之类的其他语言被视为是为云而设计的，但Java通常被认为是笨重的。</p><p></p><p>“Java一直被笼罩在阴影中，人们认为‘它臃肿、笨重，不是云原生的，也不是为云而创建的，它不允许你在公共云中实现你可能想要的密度。”Morgan说。“为了真正消除这些误解，我们做了很多工作。”</p><p></p><p>就其本身而言，VMware正在努力通过即将发布的Spring Framework 6和Spring Boot 3（Morgan称之为Spring的“第三幕”）来提高Java的云原生性”，使用<a href=\"https://www.graalvm.org/\">GraalVM</a>\"构建的Spring将会提供“Spring中完全的原生支持，这意味着你将能够把任何Spring应用程序编译成本地二进制文件，并减少占用空间和启动时间。这对你可能在边缘地区看到的各种其他工作负载都非常有益。”</p><p></p><p>Spring并不是唯一一个这样努力的。红帽的<a href=\"https://github.com/quarkusio/quarkus\">Quarkus</a>\"和<a href=\"https://github.com/micronaut-projects/micronaut-core\">Micronaut</a>\"项目都在帮助推动Java进入一些以前被认为是不可能的领域：走向边缘计算，进入微服务架构，在这些领域，小规模和快速的启动时间是关键。类似地，<a href=\"https://wiki.openjdk.org/display/loom/Main\">Project Loom</a>\"旨在通过在JVM中而不是在操作系统内核中实现线程，将轻量级线程引入Java平台。“这代表了Java支持并发能力的显著提高，使该平台与当今许多云级应用程序更加相关。”Milinkovich说。“有了Loom项目，用Java编写高并发应用程序对开发人员来说将会变得更加简单，可扩展性也更强。”</p><p></p><p>在Milinkovich看来，正是Quarkus、Micronaut、Loom和Adoptium等项目将Java带到了下一代开发人员中。</p><p></p><p>“Java已经活了25年了，我相信它还会再活25年。我认为它正在经历一次复兴，无论是从技术角度，还是从生态系统角度来看，都是如此。”Milinkovich说。“开发人员需要记住的一件事情是，Java技能的需求量很大。这将真正有助于开发人员的持续支持，我想你会看到，在可预见的未来，Java将继续保持在最受欢迎的语言/平台的前三名。”</p><p></p><p>原文链接：</p><p></p><p><a href=\"https://github.com/readme/featured/java-programming-language\">https://github.com/readme/featured/java-programming-language</a>\"</p>",
    "publish_time": "2022-08-20 14:13:49",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]