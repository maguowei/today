[
  {
    "title": "Node-RED 3发布，改进了节点编辑器、运行时特性和调试功能",
    "url": "https://www.infoq.cn/article/58oNsBAobWvIudHwhF46",
    "summary": "<p><a href=\"https://nodered.org/\">Node-RED</a>\"是一种基于流的可视化编程环境，最初由IBM开发，主要针对物联网应用，现在已经发布了<a href=\"https://nodered.org/blog/2022/07/14/version-3-0-released\">3.0版本</a>\"。在这一版本中，节点编辑器带来了许多改进，控制流增加了新特性，等等。</p><p>&nbsp;</p><p>Node-RED 3.0中的新节点编辑器包含了一种新的特殊节点类型，叫作连接（Junction），其目的是让连线变得更容易些。开发者可以通过这个新的节点类型减少节点之间的连接造成的混乱，并使整体的流在视觉上看起来更简洁。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5a/5ab6b876c27e5d5e0997702b886d7dee.png\" /></p><p>&nbsp;</p><p>此外，节点编辑器提供了一个新的上下文菜单，可以轻松访问常用功能，比如创建一个新节点，对节点进行剪切、复制和粘贴，删除节点，导出，等等。</p><p>&nbsp;</p><p>在Node-RED 3中调试子流变得更加容易，这要归功于调试侧边栏，现在只要将鼠标悬停在节点上，它就可以显示节点的完整位置。例如，如果一个节点输出了一些东西，无论是警告还是错误，你只要将鼠标悬停在它的名称上，就可以确切地知道该节点的位置。</p><p>&nbsp;</p><p>新的节点编辑器采用monaco作为默认文本编辑器，与ace相比，提供了更丰富的用户体验，不过ace仍然可用。微软Visual Studio Code也使用了monaco编辑器引擎，它将成为Node-RED 4中唯一受支持的编辑器。</p><p>&nbsp;</p><p>如前所述，Node-RED 3带来了控制如何运行流的新特性。用户现在可以在编辑器中停止和启动流。当流停止时，你就不能向它注入消息或调试它，但可以编辑它并部署变更。做好准备之后可以再次启动。这个特性是可选的，如果需要启用这个特性，你需要在settings.js中设置runtimeState选项。</p><p><code lang=\"javascript\">runtimeState: {\n   enabled: true,\n   ui: true\n}</code></p><p>&nbsp;</p><p>最后需要注意的是，Template节点现在可以使用语法{{env.VAR_NAME}}来访问环境变量。</p><p>&nbsp;</p><p>Node-RED 3涉及的东西比这里介绍的要多得多，所以不要错过官方发布的完整细节。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/07/node-red-3-released/\">Node-RED 3 Improves Its Node Editor, Runtime Features, and Debugging</a>\"</p><p>&nbsp;</p>",
    "publish_time": "2022-07-31 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Uber的服务网格架构设计",
    "url": "https://www.infoq.cn/article/dKqPvxpbcOtIJRDA1gvd",
    "summary": "<p></p><blockquote>在大规模分布式系统的负载均衡中，子集是一种常用的技术。本文，我们将简要介绍 Uber 目前的服务网格架构，2016 年以来，这一架构已经为 Uber 数以千计的关键微服务提供了支持。接下来，我们将会探讨尝试在网格架构中扩大任务的数目所面临的挑战，并会探讨最初的子集方法的问题。本文最后给出了如何提出实时动态子集的解决方案，以及在生产中的结果。</blockquote><p></p><p></p><h2>Uber 服务网格</h2><p></p><p></p><h3>什么是服务网格？</h3><p></p><p></p><p>服务网格有很多种不同的定义，但我们的定义是：一种基础设施层，它使微服务可以在远程过程调用（RPC）之间相互通信，而不用为基础设施的细节担忧。</p><p></p><p>如果一个微服务需要和另一个微服务进行通信，那么它所需要的就是目标服务名称、程序和请求。其他工作由服务网格架构来完成，例如：</p><p></p><p>发现：找到服务的最新后端任务</p><p>     需要，因为集群管理可以在主机之间移动后端任务</p><p>     排除不健康的后端任务</p><p>负载均衡：确保负载被正确地分配给可用的任务认证：在服务之间安全地进行通信流量整形：避免将请求转发到某些区域/群集</p><p>     当故障发生时，请求将继续被转发到可用的区域/群集</p><p>可观察性：提供对延迟、流量模式等的洞察力。可靠性：如节流、速率限制、自动故障转移等功能。</p><p></p><p></p><h3>Uber 服务网格架构</h3><p></p><p></p><p>Uber 从 2014 年开始使用微服务架构。从那时起，服务网格就进行了多次迭代，目前的版本自 2016 年以来就为成千上万的关键微服务（在数百万的容器中）之间的 RPC 支持。</p><p></p><h4>总体概述</h4><p></p><p></p><p>Uber 的服务网格架构主要通过自管理来运营。在网格架构中，每一项服务都由一个产品团队完全拥有，而且网络层对其设置几乎没有什么限制。</p><p></p><p>网络层对服务连接没有任何限制，只要建立了正确的认证，一项服务就可以与任何服务进行通信。服务趋向于有组织的发展，我们不会将任何容量预先分配给网络层中的特定服务。我们每周都会看到一些服务被退役或者被创造出来，但是我们没有强制要求服务生命周期，其中的一些服务是在 2014 年就已经投入使用的。</p><p></p><p>这一切都有其耐人寻味的意义：</p><p></p><p>一项服务可能每分钟从 100 到 100000 QPS（有些服务作为批处理的一部分经常这样做）。一项服务可能在任何时候开始连接到一个新的服务一项服务可能公开一个或数百个程序有些服务有几十个任务，而有些服务有几万个任务服务有数百个调用者或数百个被调用者的情况并不少见有些请求的延迟小于 10 毫秒，有些请求需要花费数分钟不同服务的任务可以处理并生成完全不同的吞吐量——有些任务接收/生成 1~2 QPS，而有些任务超过 1000 QPS。可以随时部署任意数目的服务（有些服务在持续部署中运行），从而造成位置上的不断改变。因为调用方式的改变或者部署不当，某一特定的服务突然开始拒绝所有的请求或健康检查，这种情况并不少见。因此，由于调用链中某个地方的调用者配置错误，我们看到 10~100 倍的重试风暴也是很常见的。</p><p></p><p></p><h4>技术概述</h4><p></p><p></p><p>Uber 基础设施在多个地区的多个区域运营，跨越内部数据中心和公共云供应商。大多数控制平面组件都是分区的，并且每个组件通常由几个子组件组成。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/31/31372a80a00bf8f6cff93ce2028c2d16.jpeg\" /></p><p>服务 A 通过主机代理向服务 B 发出 RPC 请求</p><p></p><p>在一个非常高的级别上，Uber 的服务网状体系结构以主机上的 L7 反向代理为中心：</p><p></p><p>下图展示了服务进行 RPC 调用时的基本流程：</p><p></p><p>调用者服务将本地端口发送 RPC，该端口由主机代理监听主机代理会将 RPC 直接转发到被调用服务的后端任务中</p><p></p><p>在这个简单的模型背后，有很多的细节（这些细节本身就值得另写一篇文章）。</p><p></p><p>在图的另一边，代理连接到控制平面组件，以便确定在一个非常高的级别上，怎样再次发送一次通信量：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2c/2c2b228e182515793efe40411ccde6fe.png\" /></p><p></p><h4>主机代理</h4><p></p><p></p><p>在每个主机中，我们都有一个专用的主机代理，负责监听一些固定的端口。它的工作就是接收传入的 RPC 请求，然后将其转发给目标服务的任务。</p><p></p><p>要做到这一点，代理将连接到控制平面服务，以便：</p><p></p><p>接收来自流量控制服务的流量分配，以便理解如何在一项服务的不同区域/群组之间分割流量使用来自流量分配的后端任务池的 URI，从发现服务获得最新的任务安排在可用的后端任务之间执行负载均衡</p><p></p><p>代理是在同一主机上运行的所有后端任务的共享资源。换句话说，我们把每个主机视为一个孤立的域。</p><p></p><p></p><h4>发现系统</h4><p></p><p></p><p>该系统与集群管理接口，以保持服务后端任务的最新信息。然后，这些信息被提供给主机代理，这样代理就可以对最新的实例进行负载均衡。</p><p></p><p></p><h4>流量控制系统</h4><p></p><p></p><p>该服务是整个系统的指挥者；它会生成流量分配，其中包括每个后端任务池应该接受的流量分割。该分配由代理所使用。</p><p></p><p>它为服务所有者输出许多配置选项，以确定任何给定的后端任务池应该接受多少流量。它还允许服务所有者创建引流，以避免某些后端任务池，或跨数据中心进行流量故障转移。</p><p></p><p>现在我们已经对 Uber 服务网格架构有所了解，我们将在本文中重点讨论高效负载均衡技术，所以让我们深入探讨一下。</p><p></p><h2>负载均衡</h2><p></p><p></p><h3>负载均衡目标</h3><p></p><p></p><p>服务网格的职责之一就是保证服务的每个后端任务消耗相似比例的可用资源，在我们的情况下，这通常是 CPU 时间。有两个理由：</p><p></p><p>可靠性：过载的任务的表现会比预期的更糟糕效率：糟糕的负载均衡会导致资源过度分配（也就是说，我们会增加更多的容量来分散负载，以避免“热门”任务过载）</p><p></p><p>我们通过 CPU 负载不均衡来衡量负载均衡的有效性。我们打算就负载均衡单独撰写一篇文章，但是简单地说，我们将 CPU 负载不均衡定义为特定服务的任务的 p99/CPU 平均利用率的比率。</p><p></p><h3>负载均衡概念</h3><p></p><p></p><h4>什么是子集？</h4><p></p><p></p><p>负载均衡中的子集就是指将潜在的后端任务集划分为重叠的“子集”，这样，虽然所有的后端都会收到流量，但每个代理都要在有限的任务集上进行负载均衡。</p><p></p><p>为了避免为每个请求建立和断开 TCP 连接的成本，代理通常会与后端任务保持长期连接。每个连接都会在两端消耗一些资源（CPU、内存等），即便它是空闲的，因为需要一些最低限度的簿记。</p><p></p><p>从理论上说，维护成本是非常低的，但是当后端任务越来越多时，维护成本会迅速上升，因为新的微服务或者是横向扩展已有的微服务来处理更多的请求。举例来说，一项拥有 10000 个任务的服务尝试调用另一项拥有 10000 个任务的服务，那么我们就需要 10 万个 TCP 连接。</p><p></p><p>子集可以缓解这样的情况：一个后端任务从代理处收到大量的连接，或者一个代理必须连接到大量的后端任务。</p><p></p><p>这个问题以前在网上也有过描述：</p><p></p><p>Google SRE 书 中对此有深入解释Twitter 也有相似的问题Netflix 的 Ribbon 支持子集Envoy 支持“负载均衡器子集”</p><p></p><p>我们想用一种完全不同的方式来解决这个同样的问题。</p><p></p><p>一个有趣的观察是，子集并不必然意味着更差的负载均衡。根据所选择的负载均衡算法，一个完全连接的网格可能比一个精心挑选的子集表现得更糟糕（例如，一个最小等待请求的负载均衡可能会退化为一个过大的子集的轮回）。不幸的是，选择正确的子集是需要技巧的，所以，最好是超调，因为过小的子集大小可能会比过大的子集导致更大的退化。</p><p></p><h2>遗留子集</h2><p></p><p></p><p>由于服务网格的大小，所以主机代理需要使用子集。</p><p></p><p>当我们开始时，使用了一个静态的默认子集大小。每个微服务所有者都可以在必要时决定是否要使用覆盖。这在开始时效果不错，但随着时间的推移，出现了一些挑战。</p><p></p><h3>遗留子集的问题</h3><p></p><p></p><h4>随机任务选择导致的不均衡</h4><p></p><p></p><p>正如上面提到的，流量整形从流量分配开始，它定义了应该发送到每个池的流量的分割。然后，主机代理可以在不依赖于控制平面的情况下，从可用的池中随机挑选后端任务，并对这些任务进行负载均衡。</p><p></p><p>下图展示了一个实例，其中服务 A 调用了服务 B，合并了 120QPS。当服务 B 有 5 个后端任务时，静态子集大小为 3；因此，服务 B 的一个实例就会收到更高的流量。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d6/d6e14c357a1fb0b7bd71ff8c49920b95.jpeg\" /></p><p></p><p>这个示例说明了子集的潜在问题：如果调用者任务的数量很低，则有可能会造成某些被调用者任务的负载和利用率不足。在有些情况下，有可能有些后端任务根本就不会被选择。期望调用者/被调用者都能拥有适当的任务数比例，以均衡负载，再加上一点运气。</p><p></p><p>理论上，当服务网格越来越大时，这种情况就会越来越好，因为当一个后端服务被数以百计的服务或者数以千计的任务调用时，我们可以假定“随机性”在一定程度上会变得均衡。这并不是我们在实践中观察到的：由于不均衡的任务数比例和请求的异质性，尤其是在最大的服务方面，这种不均衡性依然很高。</p><p></p><p>请注意，上图和下图都是一种简化。代理并不只是向所有连接的后端发送平均数量的流量。在进行这项工作的时候，代理利用了“最少等待请求”的负载均衡，这将略微均衡由于子集的选择而引起的不均衡。然而，在实践中，“最少等待”并没有发挥足够的作用。这是因为每个代理都独立地跟踪它向每个后端发送的请求，而唯一隐含交换的信息就是每个后端的响应延迟。这对负载均衡略有帮助，因为过载的后端对所有代理的响应会更慢，但我们的容器利用率并不高，这对负载均衡的影响是很有意义的。另外，我们还希望负载均衡在过载现象出现之前就能起作用，因为那样的话，也会对终端用户造成影响。</p><p></p><h4>主机托管导致的不均衡</h4><p></p><p></p><p>在同一主机中，所有后端任务之间共享主机代理。因此，如果同一主机中的多个服务试图对同一被调用者服务进行 RPC 调用，随机挑选的后端任务子集将比其他任务收到更多请求。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/67/673c937fd977630c3002a2e4c1e373ca.jpeg\" /></p><p>示例显示，服务 A 和服务 D 都调用 B，而服务 A 和服务 D 服务都托管在同一主机上</p><p></p><p>在一些案例中，当今有一项服务在生成流量时，也会发生这种情况。我们的计算平台可能会在同一台主机上安排同一服务的多个任务，从而造成同样的不均衡情况。</p><p></p><h4>运营成本</h4><p></p><p></p><p>由于服务网格的不断扩大，不均衡问题也日益增多。</p><p></p><p>每当出现问题，我们的团队就需要和服务所有者合作，以确定和更新子集的大小。由于每个微服务都具有各自的容量分配和不同的调用者服务组合，所以很难找到合适的值。而且，无法确保选定的子集的大小在一星期或一个月之内是正确的。这使得我们的团队和服务所有者陷入了一种运营噩梦之中。</p><p></p><h3>实时动态子集的改进</h3><p></p><p></p><p>我们提出了一种动态的子集解决方案，它充分利用了目前的控制平面，尤其是流量控制服务。</p><p></p><p>其基本思想是：当主机代理得知被调用者服务接收到的 QPS 数量时，就可以计算出其对整个流量的负载比例。有了这些信息，主机代理可以根据比例动态地决定其子集的大小（即，如果它开始向一个目标服务发出更多的请求，它就应该扩大其子集的大小）。</p><p></p><h3>架构</h3><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2f/2f3a08e33cbce806ed06c7d833e59de4.jpeg\" /></p><p></p><p></p><h3>聚合控制平面</h3><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/fe/fe660a7418d509afbb83677e3fdecd95.jpeg\" /></p><p></p><p>在 Uber 服务网格中，主机代理定期向流量控制服务上传流量负载报告。为了进行横向扩展，我们采用了两层聚合：第一层由聚合器组成，随着主机数量的增长，它可以横向扩展；第二层只由少数几个控制器组成，这些控制器对流量分布有一个全局观点。我们利用了流量分布的全局视图来实现一些功能，如更好的跨数据中心的负载分配。</p><p></p><p>对于动态子集，我们利用了现有的架构，开始将汇总的流量负载报告下发到主机代理上。这就为每个主机上的代理提供了总负载的全局视图，以便它知道它所贡献的流量百分比。</p><p></p><p>这一过程几乎是实时的，负载报告在全球范围内汇总，并在几秒钟内推回给每个主机代理。全局负载报告在整个集群中并不严格一致，但在实践中已经很接近了。</p><p></p><h3>主机代理</h3><p></p><p></p><p>在这一点上，主机代理有 3 个相关信息：</p><p></p><p>流量分配：发送至每个池的流量百分比</p><p>     这是从控制平面传递下来的</p><p>负载：发送至目标服务的流量数量</p><p>     这是由每个代理独立跟踪的，并进行一些后期处理，以稳定随时间变化的尖锐流量</p><p>聚合负载（新）：目标服务接收的总体流量</p><p>     这是从控制平面传给代理的。</p><p></p><p>新的信息使我们能够动态地调整每个代理的子集大小。我们以接近实时的方式来做这件事，所需的每个池的子集大小被重新计算，比如：</p><p></p><p>desiredSubsetSize = numberOfTaskInPool  load/(aggregateLoadassignment) * constant</p><p></p><p>这就意味着，产生更多流量的代理会连接到更多的后端，并且会将其负载分散到比更闲置的代理更大的任务子集中。这使我们能够更好地均衡负载，同时仍然实现子集的目标（为网状架构中的连接总数设置上限）。通过调整常数 (constant)，我们控制了出站连接的数量，从而控制了负载均衡。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f4/f4cbca8db8adc9599f0468beec1d2abc.jpeg\" /></p><p></p><p>虽然数学本身很简单，但一些细致的性能工作还是必要的。正如我们前面所讨论的，代理既不知道什么会在主机上被安排，也不知道目标服务会是什么。代理需要能够在任何时候处理任何请求，因此它必须不断监测数以万计的池的子集大小。幸运的是，大多数池并不会经常变化——典型的代理每次只与几百个池对话。</p><p></p><p>任务选择仍然是随机的，而且代理之间仍然没有协调。负载的不均衡性得到了明显的改善，但这还并不完美。此外，由于负载报告在代理机构、控制平面和代理机构之间传播，子集大小调整通常会延迟几秒钟。</p><p></p><h2>发布与成就</h2><p></p><p></p><h3>发布</h3><p></p><p></p><p>整个推广工作的过程用了大约 6 个月。在进行了内部测试后，我们从一些早期采用者开始，转为批量 Onboarding，然后跟进之前手动定制设置的赋能服务的长尾效应。最后一组花了大量的时间，而且所有的服务往往更关键、更不典型、更谨慎。为了防止降级，我们与服务所有者单独合作。</p><p></p><h4>问题</h4><p></p><p></p><p>作为发布的一部分，我们做的第一个改变是调整“最小子集”的大小：不管当前负载如何，我们都会配置代理连接到至少几个后端。这减轻了异质调用者（RPS 非常低的调用者，其 CPU 负担不成比例）和“缓慢启动”的问题，当新的工作负载被放在主机上或 RPS 是尖锐的。</p><p></p><p>有几个服务在 Onboarding 时很谨慎，所以我们允许这些服务自定义其常数。目前，只有非常少的服务在运行自定义配置，从技术角度看，我们可能会进一步减少这个数字。然而，我们发现，一些服务所有者更喜欢用他们自己的自定义、手动管理的设置来运行，特别是在最初的初始 Onboarding 期间。</p><p></p><p>我们面临的最后一个问题是，在一个代理中维持 TCP 连接的成本——这并不是最少的。在一个主机上，多个高 RPS 实例调用多个大型后端池（数以万计的任务）的组合，会导致成千上万的开放式的连接。只有少数的主机子集上（&lt;0.01%），但是会导致代理的大量内存使用，因为 Go HTTP2 的问题。我们通过减少后端的最大连接数来解决这一问题，并在整个集群中小心地推出这种改变。</p><p></p><p>请注意，最后一个问题是在迁移完成几个月后发生的，这个问题是在独立的 tchannel-to-HTTP2 迁移时才开始显现的。由于更多的服务被独立地迁移，因此在代理中存在更大的内存压力。</p><p></p><h3>成就</h3><p></p><p></p><p>我们希望强调的重要成就就是降低了维护成本：自从发布以来（大约 18~12 个月前），我们已经收到了 0 起服务所有者抱怨子集的案例。但是这一点，就足以证明该项目是合理的，因为它大大减少了我们和服务所有者的辛劳。</p><p></p><h4>效率提升</h4><p></p><p></p><p>该项目大大改善了负载均衡，从而带来了可观的效率提升。</p><p></p><p>我们没有确切的数据来宣布这些数字。首先，我们一开始在大型 Onboarding 中没有记录充分的数据（回顾过去，我们为没有设置跨区域的 A/B 测试而感到遗憾）。因为网格本身就存在噪音，所以以后很难将这些数据进行关联。更具影响力的是，Onboarding 时恰逢新冠肺炎大流行。因为疫情对我们的统计造成了巨大的冲击，所以我们很难将这些历史数据和所推出的数据联系起来。</p><p></p><p>我们确实有早期的统计数据，这些数据是由交付组织中的合作伙伴生产工程师手动调整子集的大小。通过手动调整 8 个较大的服务，结果发现 p99 CPU 使用率下降了 15%~30%；随后，这些服务又被添加到了动态的子集，没有出现倒退，而这些服务中的统计数字也得到了改进。</p><p></p><p>我们保留了最后加入的“赋能服务”的精确数据。在 36 项服务中，有 17 项显示出 10% 以上的 p99 CPU 利用率降低，有些服务甚至显示出高达 40% 的利用率，由于这些服务的子集大小之前也是手动调整的，因此，我们非常满意，自动系统并没有显示出任何退化，甚至在 50% 的情况下超过了人类。</p><p></p><p>下面是 Onboarding 时记录的一些数据：</p><p><img src=\"https://static001.infoq.cn/resource/image/45/77/4573401d6e5d696da053174160d9cc77.jpg\" /></p><p></p><p>我们根据生产指标定义了一个不均衡指标（越高，就越不均衡），上图展示了对一个关键服务应用动态子集后的变化。</p><p></p><p></p><h3>后续行动</h3><p></p><p></p><p>在子集扇出场数的选取上，具有很大的随意性。在该项目完成后一年左右，我们构建了一条更为完成的评估管道，使得我们能够调节（增加）扇形常数。测试也验证了之前的预期，如果将子集扩展到更多（也就是完全连接的网格），那么对于提高负载均衡的作用就会变得越来越小。</p><p></p><p></p><h3>潜在的改进措施</h3><p></p><p></p><p>我们讨论了几个潜在的改进，但是由于这个系统已经很好地运行了，所以并没有实施。</p><p></p><p>由于子集的改变对代理来说是相对昂贵的，我们可以通过改善系统的滞后性来减少振荡连接的流失。特别是，我们可以急切地增加子集，但是却懒惰地减少它。这也将有助于解决尖锐的流量模式。</p><p></p><p>我们意识到一种理论上的病态情况，即一个低 RPS 的调用者与一个非常大的后端任务池交互，并且还有其他几个大的调用者，最终可能不会调用服务的所有后端。这是因为流量是全局聚集的，而不是每个调用者。我们讨论了使用池子大小的比例作为子集选择的一个额外因素。</p><p></p><p>当开始设计这个解决方案时，我们讨论了用确定性的子集来取代随机的对等选择。这将类似于先前在 Twitter 和 Google 链接中描述的解决方案。这可能会通过更好的子集选择来改善负载不均衡，但也会引入更多的复杂性，因为需要跨代理的协调。</p><p></p><p>最后，我们目前的实现是不加区分地聚集负载。由于不同的调用者和程序在后端可能有不同的资源成本，我们可以通过跟踪调用者和/或程序的负载来实现更高的精度。这将引入显著的额外复杂性。此外，如果不进行深入的请求检查，我们将无法解释请求的异质性，而这很可能是太昂贵了。</p><p></p><p>大约 12 个月后，作为一个单独项目的一部分，我们对代理进行了改进（辅助负载均衡），作为一个副作用，减少了随机对等选择的影响。它还允许我们减少子集扇出常数。这将在另一篇文章中介绍。</p><p></p><p></p><h2>总结</h2><p></p><p></p><p>这篇博客介绍了对 Uber 服务网的迭代改进：一个动态子集系统，其中网格的孔径参数随着流量的变化而自动动态调整。该系统已经在生产中运行了近 2 年，涉及数百万个集装箱。我们取得的结果是，不仅减少了劳务工作，而且还取得了惊人的效率。这对 Uber 来说是一个巨大的胜利，因为我们能够重用现有的服务网格栈，并改进预先存在的负载报告，为栈带来了重大改进。我们发现，新颖的无协调者方法对系统的弹性和可扩展性都有帮助。</p><p></p><p>作者介绍</p><p></p><p>Chien-Chih Liao 是 Uber 软件网络团队的一名软件工程师。他的贡献包括流量控制、流量负载均衡、数据中心故障转移，以及 Uber 服务网格的弹性功能。</p><p></p><p>Pawel Krolikowski 是软件网络团队的软件工程师。最近，他一直专注于负载均衡的研究。</p><p></p><p>Sangeeta Kundu 是一名高级工程经理，在 Uber 的软件网络团队工作。在过去的 3 年中，她为 Uber 的高速增长阶段作出了贡献。在过去的两年里，她带领软件网络控制平面团队（流量路由、发现等）和 Uber 的多区域战略，以实现全球规模的高弹性。</p><p></p><p>原文链接</p><p></p><p>https://eng.uber.com/better-load-balancing-real-time-dynamic-subsetting/</p>",
    "publish_time": "2022-07-31 20:42:36",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Airbnb的统一支付数据读取流程",
    "url": "https://www.infoq.cn/article/X16w5IIdYwYPO38vF58o",
    "summary": "<p></p><blockquote>Airbnb通过重新设计支付数据读取流程来优化客户端集成，并实现高达150倍的性能提升。</blockquote><p></p><p></p><p></p><h1>介绍</h1><p></p><p></p><p>近年来，Airbnb将大部分后端服务从单体应用重构成面向服务的架构（SOA）。这种行业标准架构为Airbnb这样规模的公司带来了无数好处，但也不是没有遇到挑战。由于数据分散在众多的服务中，很难以一种简单而有效的方式为客户提供他们所需的信息，特别是对于支付等复杂领域来说。随着Airbnb的发展，这个问题开始出现在许多新场景中，比如房东收入、生成税单和支付通知，所有这些都需要从支付系统读取数据。</p><p></p><p>在这篇博文中，我们将介绍Airbnb的统一支付数据读取层。这个自定义的读取层用于减少客户端集成的难度和复杂性，同时大幅提升了查询性能和可靠性。通过这种重构，我们能够为我们的房东和客户以及负责信任度、合规性和客户支持的内部团队提供极大优化的体验。</p><p></p><p></p><h1>Airbnb支付平台的演变</h1><p></p><p></p><p>支付是Airbnb App最早推出的一项功能。自联合创始人Nate第一次提交代码以来，支付平台经历了快递的成长和演变，并且随着Airbnb不断扩大全球影响力，继续以更快的速度发展。</p><p></p><p>与其他公司类似，Airbnb也是从单体应用程序架构开始的。由于最初的功能很有限，支付数据的读写流程都“相对”简单。</p><p></p><p><img src=\"https://uploader.shimo.im/f/v6qnVSpcdn5b1GIV.png!thumbnail?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NTkyNzE4MTksImZpbGVHVUlEIjoibnBNRzZnT1pYd1ladTdrZSIsImlhdCI6MTY1OTI3MTUxOSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjoxNjQ2Njk0M30.9Zkzk0zH_72Isu-7us1NyXWWwbc7RyenQubsVJv8cPM\" /></p><p>简化的Airbnb单体架构图。支付模式不是很复杂，功能也很有限</p><p></p><p>可以预见的是，随着Airbnb的快速增长和扩张，这种架构无法很好地扩展。支付和技术栈的其他部分开始迁移到SOA架构，对现有的架构进行了重大改革，并带来了许多优势，包括：</p><p></p><p>不同的服务之间有了清晰的边界，为更好的领域所有权和更快的迭代带来了可能性。</p><p>数据被规范地划分为多个领域，从而获得了更好的正确性和一致性。</p><p></p><p>要了解更多信息，请阅读我们关于支付SOA迁移的<a href=\"https://medium.com/airbnb-engineering/rebuilding-payment-orchestration-at-airbnb-341d194a781b\">博文</a>\"。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b7/b7a7c6d5ced0e581d5ba3458217723b7.png\" /></p><p></p><p>在迁移到SOA架构之后，每个支付子领域都有自己的服务和数据表，但更多的特性意味着更复杂和规范化的数据。</p><p></p><p></p><h1>新架构带来新挑战</h1><p></p><p></p><p>SOA架构为我们带来了一个更有弹性、可伸缩和可维护的支付系统。在这个漫长而复杂的迁移过程中，保证系统的正确性是我们的首要任务。数据被标准化，并分散在许多支付领域中，由不同的团队负责。这种分工存在一种副作用：为了获取所有所需的数据，呈现层需要与多个支付服务集成。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0b/0bcf05c0745ee2744de4662def322056.png\" /></p><p>迁移到SOA架构后支付数据的读取流程。呈现服务调用一个或多个支付服务，并在应用层聚合数据</p><p></p><p>我们相信，Airbnb对房东和客人社区来说是透明的。与支付和收益相关的表面呈现了很多细节，包括费用、交易日期、货币、金额和总收益。在迁移到SOA架构之后，我们需要与多个服务打交道，并从更多的表中读取数据，以获得所需的信息。自然，当我们想要添加带有支付数据的新表面，或者当我们想要扩展现有的表面以提供额外的细节时，这个架构就给我们带来了挑战。我们需要解决三个主要的问题。</p><p></p><p>首先，客户端需要充分了解支付领域才能调用正确的服务和API。对于其他团队的客户端工程师来说，这需要投入大量的时间，并拖慢了上线的整体速度。在支付服务端，工程师需要提供持续的指导，这也占据了他们工作的很大一部分时间。</p><p></p><p>其次，在很多情况下，为了满足客户端的需求，我们必须同时修改多个支付API。当出现了太多的接触点，就很难对请求进行优先排序，因为必须有多个团队参与其中。这个问题也对上线时间造成了显著的负面影响。如果协调进行得不顺利，就不得不放慢或推迟上线。类似地，当支付团队更新API时，他们必须确保所有的呈现服务都应用了这些变更，这将减缓支付系统的开发进度。</p><p></p><p>第三，复杂的读取流程在技术质量方面并没有达到我们想要的水平。应用程序级别的聚合可以应对一般的应用场景，但是对于大房东来说，他们可能在我们的平台上每年有数千个预订，所以我们还有改进的空间。为了获得长期的系统可靠性，我们需要找到一个能够提供更好的性能、可靠性和可伸缩性的解决方案。</p><p></p><p></p><h1>支付统一数据读取层</h1><p></p><p></p><p>为了实现目标，我们需要重新思考客户端如何与支付平台集成。</p><p></p><p></p><h1>统一的入口点</h1><p></p><p></p><p>我们的第一个任务是统一支付数据读取入口点。为此，我们利用了Airbnb的面向数据服务网格<a href=\"https://medium.com/airbnb-engineering/taming-service-oriented-architecture-using-a-data-oriented-service-mesh-da771a841344\">Viaduct</a>\"，客户端直接查询“实体”，而不需要调用几十个服务和API。在这种新的架构中，客户端只需要处理必需的数据实体，而不必与个体支付服务通信。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/68/6802ea03c400d83db25c3e13e6b23e29.png\" /></p><p>呈现服务只与读取层打交道，不与个体支付服务通信</p><p></p><p>在这些入口点中，我们提供了尽可能多的过滤选项，让每个API都能够过滤和聚合客户端的复杂性。这也大大减少了需要公开的API的数量。</p><p></p><p></p><h1>统一的高级数据实体</h1><p></p><p></p><p>统一的入口点是一个很好的开始，但它并不能降低所有的复杂性。在支付领域，我们有100多个数据模型，要理清楚它们的职责，需要大量的领域知识。如果我们只是在统一入口点上公开这些模型，对于客户端工程师来说仍然需要掌握很多的上下文信息。</p><p></p><p>我们没有让客户端处理这种复杂性，而是选择通过更高级别的领域实体尽可能隐藏支付的内部细节。我们因此将核心支付数据减少到不到十个高级别实体，大大减少了公开的支付内部细节的数量。有了这些新实体，客户端就不受支付平台变化的影响。当内部的业务逻辑发生变化时，我们会保持实体Schema不变，客户端不需要进行任何迁移。新架构的原则如下：</p><p></p><p>简单：为非支付团队的工程师而设计，并使用了常见的术语。可扩展：保持与存储Schema松散耦合，并对概念进行封装，以防支付服务内部发生变化，同时支持快速迭代。丰富：隐藏复杂性而不是数据。如果客户端需要获取数据，应该可以在实体中找到它们。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/45/456b8f29ee3b20e4227328a45da0f476.png\" /></p><p>公开更清晰的高级领域实体，隐藏支付内部细节，同时保护客户端免受频繁的API变更的影响</p><p></p><p></p><h1>物化非规范化的数据</h1><p></p><p></p><p>统一的入口点和实体大大降低了客户端接入的复杂性。但“如何”获取数据和昂贵的应用层聚合仍然是一个巨大的挑战。客户端能够顺利地与支付系统集成固然重要，但我们也应该让社区能够享受我们平台提供的良好体验。</p><p></p><p>我们发现的核心问题是客户端在查询时依赖了很多表和服务。一个可行的解决方案是去规范化——本质上就是将这些昂贵的操作从查询时转移到摄取时。我们调研了不同的方式来预先对支付数据进行去规范化，并将复制延迟控制在10秒以内。幸运的是，家园基金会团队的朋友正在尝试一个读优化的存储框架，它采用事件驱动的Lambda来实现二级索引。有了这个框架，团队可以通过数据变更捕获机制获得近实时的数据，也可以利用存储在Hive中的每日数据库转储来获得历史数据。此外，与其他现有的内部解决方案相比，这个框架的维护需求（例如在线和离线摄入数据使用的是同一套用Java编写的代码）要少得多。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/43/436dd5ca76b9caf892ab89abc596ffc0.png\" /></p><p>支付服务如何使用读优化的存储框架。它为离线和近实时的数据提供摄取流程，并在二者之间共享业务逻辑</p><p></p><p>在结合上述的所有改进后，新的支付读取流程如下所示：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/83/83c80cc2e7d7698257606174c568421c.png\" /></p><p>最终的支付数据读取架构。客户端不需要知道任何与支付服务或其内部相关的信息</p><p></p><p>我们通过非规范化的读优化存储索引来提供数据，具备很高的可靠性和性能。</p><p></p><p></p><h1>迁移和提升：交易历史</h1><p></p><p></p><p>针对新的统一数据读取架构的第一个测试场景是交易历史。房东通过<a href=\"https://www.airbnb.com/users/transaction_history\">交易历史页面</a>\"来查看他们过去和未来的支付记录和顶级盈利指标（例如支付总额）。</p><p></p><p>从技术方面来看，这是我们最为复杂的支付流程之一。其中涉及了许多不同的细节，数据来自10多张支付表。这在过去已经导致了一些问题，包括超时、缓慢的加载时间、由于硬依赖导致的宕机，以及由于复杂的实现导致的迭代速度缓慢。在从单体迁移到SOA架构时，我们就决定对交易历史进行深度重构，而不是给它贴一副创可贴。这有助于确保长期的成功，并为我们的房东提供最好的用户经验。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/3c/3c5eb4dc462125196b6c66563e508141.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/74/74437c14681669952e63352cbde2c806.png\" /></p><p>交易历史页面和简化的高级架构视图。Airbnb的单体App就像是一个呈现服务，从多个支付服务和遗留数据库获取数据</p><p></p><p>我们的统一读取层非常适用于这个场景。我们以交易历史的数据为起点，推出新的API和高级实体，为类似领域的所有数据读取用例提供服务。</p><p></p><p>在确定了实体及其Schema之后，我们开始对数据进行去规范化。我们借助读优化存储框架将10多张表的数据反规范化成几个Elasticsearch索引。我们不仅大大减少了查询的接触点，而且利用存储层进行更高效的分页和聚合操作。经过近两年的努力，我们迁移了100%的流量，并实现了高达150倍的延迟改进，同时将可靠性从96%提高到99.9%以上。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0f/0f1640f017abd9024be086f7d499e27b.png\" /></p><p>在重构之后，交易历史所需的支付数据由支付服务的读优化存储提供，客户端在统一数据读取层上使用定义良好且可扩展的Schema来访问数据</p><p></p><p></p><h1>解锁新体验：客户支付历史</h1><p></p><p></p><p>我们的下一个应用场景是“客户支付历史”，源自Airbnb公司年度黑客马拉松。这个黑客马拉松项目旨在为我们的客户提供一个详细而简单的方式来跟踪他们的付款和退款。与交易历史类似，这个场景也需要来自多个支付服务和数据库（包括许多遗留数据库）的信息。</p><p></p><p>客户支付历史也从统一读取层获得许多好处：一个新的统一实体和未来类似的应用场景，以及一个支持多种不同过滤器的可扩展API。我们借助读优化存储框架将遗留和SOA支付表中的数据非规范化并存储到Elasticsearch索引中，这大大降低了查询的复杂性和成本。</p><p></p><p>我们在2021年冬季版本上线时发布了这个新页面，大幅减少了与客户付款相关问题的客服工单，这为2021年节省了近150万美元的成本。这也说明了我们正在向一个更强大的具有高可靠性和低延迟的技术基础迈进。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8f/8fdad99b55c62f9a425578fcacedb9a8.png\" /></p><p>客户可以通过客户付款记录来跟踪他们的付款和退款情况</p><p></p><p>这个架构与交易历史非常相似，数据通过统一的API和Schema提供给客户端，并由二级存储提供支持。</p><p></p><p>在通过交易历史和客户支付历史公开这些新实体后，我们开始在许多其他关键的场景中使用相同的数据流，提供高效支付数据服务。</p><p></p><p></p><h1>总结</h1><p></p><p></p><p>微服务和SOA架构帮助后端开发团队独立扩展和开发各个领域服务，将彼此之间的影响降到最小。同样重要的是，我们要确保这些服务的客户端及其数据在新的行业标准架构下不会受到额外的挑战。</p><p></p><p>在这篇文章中，我们介绍了一些潜在的解决方案，通过提供统一API和高级实体对调用者隐藏内部服务和架构的复杂性。我们还建议在摄入数据时利用非规范化二级数据存储来执行昂贵的连接和转换操作，确保客户端查询能够保持简单和高性能。正如我们所演示的那样，支付等复杂领域可以从这些方法中获得显著的好处。</p><p></p><p>原文链接：<a href=\"https://medium.com/airbnb-engineering/unified-payments-data-read-at-airbnb-e613e7af1a39\">https://medium.com/airbnb-engineering/unified-payments-data-read-at-airbnb-e613e7af1a39</a>\"</p>",
    "publish_time": "2022-07-31 20:51:15",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "不到4年时间，我们是如何将开源SaaS服务做到年入百万美元？",
    "url": "https://www.infoq.cn/article/Bqid7p2shmis404sA6mL",
    "summary": "<p></p><p></p><blockquote>Plausible Analytics是<a href=\"https://www.infoq.cn/article/RrWruVSrUOiNtOR8KYm7\">一款轻量级且开源的网站分析工具</a>\"，对标Google Analytics。近期，团队分享了公司从第一行代码发展到年入百万美元的发展历程。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/27/27477d2d2fef49359c4aee2b934d1381.png\" /></p><p></p><p>我们是一个由4人组成的团队，完全独立，自筹资金。我们有意保持小规模，具备盈利和可持续发展的能力。超过7000个付费用户信任我们，我们正在为5万多个网站提供数据统计，这些网站每月的页面浏览量超过10亿次。</p><p></p><p>我们从来没有花钱为Plausible做广告，我们的增长主要源于好口碑。</p><p></p><p>现在，是时候总结一下我们是如何走到今天这一步的。这篇文章总结了我们是如何构建一个年入100万美元的开源SaaS解决方案的。</p><p></p><h2>我们是如何实现年入100万美元的</h2><p></p><p>我们经历了疯狂的过山车之旅。我们于2019年5月推出付费的SaaS订阅业务，之后，我们花了324天才首次实现了每月400美元的经常性收入。</p><p></p><p>然后，由于几篇博文获得了大量的流量，我们得到了一些关注。我们花了9个月时间将收入从400美元提高到10000美元，然后又花了10个月时间才达到50万美元年经常性收入。8个月后，我们的收入达到了100万美元年经常性收入。</p><p></p><p>我们已经将代码开源出来，但其实我们的网站流量从一开始就对外保持透明，所以从我们公开的数据就可以了解我们是如何走到目前这一步的。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/35/35afa06716dfa8e660127e57402bdee3.png\" /></p><p></p><h4>2018年：第一行代码</h4><p></p><p></p><p>12月</p><p></p><p>Plausible的第一行代码是由联合创始人Uku贡献的。</p><p></p><p>Uku是一名开发者，之前公司的营销主管要他将Google Analytics集成到网站首面上。Uku首先想到的是：“我们能不能使用Google Analytics以外的东西？”</p><p></p><p>这个问题变成了关于Google Analytics（GA）优缺点的讨论。毫无疑问，GA是一个强大的工具，十多年来为无数的Web开发者和营销人员提供服务，但也存在以下这些不足：</p><p></p><p>复杂性：GA的学习曲线比较陡峭。它的用户体验可以做得更好，特别是对于新用户。隐私：你有没有想过为什么GA可以免费使用？因为谷歌会把分析数据卖给广告商。准确性：你必须忽略掉GA的一些报告，因为大家都知道它们不准确，两个最突出的例子是会话长度和直接流量来源。体积：谷歌标签管理器加上GA总共73KB，代码片段中包含了一些很少有人使用的特性。</p><p></p><p>这是一个构建GA替代工具的机会，因为肯定还有其他人也会有兴趣放弃GA，去寻找更好、更道德的替代方案。那么对于这个新平台有哪些想法呢？</p><p></p><p>自动跟踪标准内容：页面浏览量、独立访问者、跳出率、会话长度、页面访问时间、顶层反向链接、屏幕大小、顶层页面、设备类型、OS版本、浏览器版本等。它应该看起来很优雅，并且易于使用。永远不要保存IP地址或任何PII信息。永远不要出售数据。优化信噪比。用户应该只看到准确、有用和可操作的数据。最终用户下载的JavaScript代码片段必须是轻量级的。</p><p></p><p>这基本上符合帕累托原则：用20%的复杂性和繁琐的方法实现GA 80%的功能。</p><p></p><h4>2019年</h4><p></p><p></p><p>1月：公开测试</p><p></p><p>我们的公开测试从Indie Hackers开始。我们早期的市场营销主要面向公共场所。最新的更新和里程碑发布在我们的博客、Indie Hackers和Uku的Twitter账户上。所有早期的用户都来自这些更新。</p><p></p><p>Indie Hackers是一个很棒的社区，阅读我们在<a href=\"https://www.indiehackers.com/product/plausible-insights?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiJhY2Nlc3NfcmVzb3VyY2UiLCJleHAiOjE2NTY2NTc5ODYsImZpbGVHVUlEIjoibURYcHlLOXA3aDhzRTkwMyIsImlhdCI6MTY1NjY1NzY4NiwidXNlcklkIjoyNzc5OTMxNX0.8NMTi8ZcbSnJ-cGulhjpNcfEZyO3Al3EIPxZv-iGVNA\">Indie Hackers</a>\"的资料和过去的文章可以更好地了解我们自公开测试以来获得的进展。</p><p></p><p>直到今天，我们仍然尽可能地保持透明。我们定期分享我们的里程碑、经验教训、网站流量等。</p><p></p><p>5月：推出付费订阅服务（月收入64美元）</p><p></p><p>我们推出了付费订阅计划。永远要多收费，这是一条被广为流传的创业建议。但我们面临的问题是，GA是免费的，人们不习惯为网页分析付费。</p><p></p><p>市场上的付费替代产品一般收费都很高，但我们希望提供人们能够承担得起的价格，以激励更多的网站抛弃GA。于是，我们将合理的价格作为切入点，帮助小型网站去谷歌化。</p><p></p><p>此时我们有60名活跃的测试用户，有一些决定继续使用我们的产品并愿意付费。到了月末，我们的第一批付费用户为我们带来了64美元的收入。</p><p></p><p>7月：第一次流量高峰（月收入118美元）</p><p></p><p>我们迎来了第一个流量高峰，一天内来了2500多名访客。这要感谢“<a href=\"https://plausible.io/blog/you-probably-dont-need-a-single-page-app?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiJhY2Nlc3NfcmVzb3VyY2UiLCJleHAiOjE2NTY2NTc5ODYsImZpbGVHVUlEIjoibURYcHlLOXA3aDhzRTkwMyIsImlhdCI6MTY1NjY1NzY4NiwidXNlcklkIjoyNzc5OTMxNX0.8NMTi8ZcbSnJ-cGulhjpNcfEZyO3Al3EIPxZv-iGVNA\">你可能不需要单页应用程序</a>\"”这篇博文，它登上了Hacker News的头条。</p><p></p><p>这篇文章与我们的产品和细分市场并没有严格的联系，所以并没有为我们带来直接利益，但它确实让我们获得了流量高峰。这是我们第一次尝试内容营销并进行“病毒式”传播。</p><p></p><p>我们没有广告预算，所以试着通过撰写博文来让别人知道我们。我们通过内容营销让更多的人了解我们的产品，提高品牌知名度，获得链接和社交媒体热度，最终在搜索结果中获得更高的排名。</p><p></p><p>内容营销和Hacker News对我们的发展至关重要，甚至在今天也是如此。大多数听说过Plausible的人都是因为阅读了我们的博文，或者通过社交媒体以及小众社区的个人推荐才知道我们的。</p><p></p><p>9月：拥抱开源（月收入178美元）</p><p></p><p>Plausible采用了MIT开源许可，所有的代码都在<a href=\"https://github.com/plausible/analytics/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiJhY2Nlc3NfcmVzb3VyY2UiLCJleHAiOjE2NTY2NTc5ODYsImZpbGVHVUlEIjoibURYcHlLOXA3aDhzRTkwMyIsImlhdCI6MTY1NjY1NzY4NiwidXNlcklkIjoyNzc5OTMxNX0.8NMTi8ZcbSnJ-cGulhjpNcfEZyO3Al3EIPxZv-iGVNA\">GitHub</a>\"上公开。代码库中包括所有支持SaaS的代码，没有任何隐藏。</p><p></p><p>我们这样做是为了尽可能保持透明，让人们对自己的数据有更多的控制权。开源是一种在隐私为先的市场中建立信任的好办法。</p><p></p><p>Plausible将继续开源，并让个人也可以在他们的服务器上自行托管分析服务。</p><p></p><h4>2020年</h4><p></p><p></p><p>2月：寻找营销联合创始人（月收入403美元）</p><p></p><p>在经历了几个月的停滞后，Uku说他“从Plausible项目一开始就在寻找合作伙伴。我非常高兴找到了一个价值观和我的目标非常一致的人。”</p><p></p><p>那个人就是我。我是一名营销人员，在阅读了我发表的一篇关于<a href=\"https://markosaric.com/degoogleify/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiJhY2Nlc3NfcmVzb3VyY2UiLCJleHAiOjE2NTY2NTc5ODYsImZpbGVHVUlEIjoibURYcHlLOXA3aDhzRTkwMyIsImlhdCI6MTY1NjY1NzY4NiwidXNlcklkIjoyNzc5OTMxNX0.8NMTi8ZcbSnJ-cGulhjpNcfEZyO3Al3EIPxZv-iGVNA\">如何去谷歌化</a>\"的博文后，Uku给我发了一封邮件。我认为他我熟悉的市场打造了一款具有巨大潜力的伟大产品，所以我准备迎接挑战。</p><p></p><p>在Web分析等竞争激烈的市场中运营和发展壮大一家初创公司是一项很复杂的任务。Uku现在可以完全专注于产品的设计和开发，我负责营销、社区管理和客户支持。</p><p></p><p>我们两个人分别专注于不同但同样重要的任务（开发和营销），可以取得比单干多得多的进展。</p><p></p><p>3月：Plausible现在是两个人的团队（月收入433美元）</p><p></p><p>我于2020年3月16日开始与Uku合作。我们看着Plausible仪表盘上的数据，在我加入的前一天总共有49个访客，从谷歌搜索过来的访客数为0。我非常喜欢设定接地气的小目标，所以我的第一个小目标是每天通过谷歌搜索持续获得10个访客。</p><p></p><p>我们是GA的竞争者，但谷歌搜索仍然是大多数人用来搜索网页的工具，所以我们需要出现在相关的搜索结果页中，以便获得有机增长。这是我的首要任务，为了实现这一目标，我们在最初几周致力于：</p><p></p><p>重新发布产品（早期版本的Plausible使用了第一方Cookie）；进行新的品牌定位（简单、轻量级、开源、隐私优先的Google Analytics替代方案）；简化沟通方式，在所有地方使用一致的消息（例如，之前我们在一些地方使用Plausible Insights，而在其他地方使用Plausible Analytics）；改进网站结构（我们以前有两个不同的内容部分，一个叫“日志”，另一个叫“博客”，所以我们把日志重定向到博客）；增加了大量与产品相关的内容（每一个重点领域都有一篇文章，还发布了与Google Analytics的比较结果等）。</p><p></p><p>4月：一炮打响（月收入 607美元）</p><p></p><p>4月8日，我发表了第一篇为Plausible而写的博文。我们最新的定位是以我们与Google Analytics的不同之处为基础，所以我们决定挑起一场战斗。</p><p></p><p>这篇文章登上了Hacker News的首页，帮我们把Plausible的故事传播给了更多的人。我自己提交了这篇文章，并没有玩弄什么手段，可能我们很幸运，很多人都觉得它很有趣。</p><p></p><p>在我们发布这篇文章的当天，超过25000人访问了我们的网站。我们在4月份打破了所有记录：流量、试用注册和最大幅度的月收入增长。</p><p></p><p>5月：第一次被著名网站推荐（月收入1055美元）</p><p></p><p>5月初，我们被OpenSource.com推荐为Google Analytics之外的一个透明的开源替代方案。5月2日收到了94个试用注册，这仍然是新试用注册数量最多的一天。</p><p></p><p>这是我们向各个有影响力的网站拓展市场的一部分。大多数网站都忽略了我们的消息，发了这么多邮件却没有任何回复，也着实不容易，但这个网站的精彩推荐打破了这种沉默。</p><p></p><p>我们还在5月18日发布了第一条推文：“是朋友就不要让朋友使用Google Analytics”。</p><p></p><p>我们有一个30天的免费试用期，所以过了一段时间才看到5月份的月收入增长。这个月我们的月收入翻了一番，到5月底是1055美元。</p><p></p><p>6月：将数据库迁移到ClickHouse（月收入1767美元）</p><p></p><p>随着新用户的加入，以及使用我们服务的大型网站不断增加，Plausible的响应速度变慢了很多。为了能够继续增长，我们需要对我们的底层技术进行改造。</p><p></p><p>为了让应用程序更快，并处理更大的网站流量，我们从PostgreSQL迁移到了ClickHouse。迁移到ClickHouse是我们做过的最好的技术决策，现在我们每月可以统计超过10亿的页面浏览量，同时还提供了一个加载非常快速的仪表盘。</p><p></p><p>7月：再次登上Hacker News头条（月收入2844美元）</p><p></p><p>我们的文章“<a href=\"https://plausible.io/blog/open-source-funding?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiJhY2Nlc3NfcmVzb3VyY2UiLCJleHAiOjE2NTY2NTc5ODYsImZpbGVHVUlEIjoibURYcHlLOXA3aDhzRTkwMyIsImlhdCI6MTY1NjY1NzY4NiwidXNlcklkIjoyNzc5OTMxNX0.8NMTi8ZcbSnJ-cGulhjpNcfEZyO3Al3EIPxZv-iGVNA\">如何通过开源项目来支付租金</a>\"”再次登上Hacker News头条，在一天内为我们带来了超过35000个访客。</p><p></p><p>8月：在Product Hunt上发布（月收入4062美元）</p><p></p><p>我们在Product Hunt上发布了我们的产品。这对创业公司来说通常是一件大事。在Product Hunt上发布是值得的，但这不是我们的核心增长策略，我们没有把所有的鸡蛋都放在一个篮子里。</p><p></p><p>发布在社区网站上可以让你的产品获得一两天的关注，但从长远来看，这并不是一个可持续的获取用户的渠道。这会带来希望的尖峰，但之后会进入平原。</p><p></p><p>在发布当天，我们从Product Hunt获得了超过1000名访客和15个试用注册，但仅仅几天后，访客降到不到20人。据我们所知，这样的结果还算是不错的，但这对你们的持续发展没有太大意义，我们需要更多的用户。</p><p></p><p>9月：支付第一笔工资（月收入5035美元）</p><p></p><p>9月10日，我们俩拿到了第一笔工资。尽管我们领到的工资不如市场行情，但我们还是很高兴看到银行账户上有一笔通过开源项目获得的收入。通过开源项目赚取租金的感觉真好。</p><p></p><p>10月：更换开源许可（月收入6378美元）</p><p></p><p>随着我们的发展，我们开始意识到与开源许可相关的风险。</p><p></p><p>我们需要研究不同的开源许可，并找到最适合我们的。我对开源许可不是很了解，所以在正式更换许可的前几天我了解了AGPL。自从更换许可之后，我们没有遇到任何问题。</p><p></p><p>12月：开源需要更好的融资模式（月收入8999美元）</p><p></p><p>我们分享了运营开源SaaS方面的经验教训。其中一个教训是，捐赠并不是一种可行的盈利方式。我们接受捐赠6个月，有6次捐赠，每次5美元，而我们云产品的月收入从400美元增长超过8500美元。</p><p></p><p>我们希望看到有更多有竞争力的开源产品能够取代由资本催生的产品。一种更好的盈利方法意味着更多的人能够专注于他们真正相信的项目，这将使开源软件生态系统变得更加健康。</p><p></p><p>在云端运行高级托管服务，同时保持代码开放，对于像我们这样的开源项目来说，这似乎是一个更好的模式。</p><p></p><h4>2021年</h4><p></p><p>1月：终于变得可持续了（月收入11303美元）</p><p></p><p>10000美元的月收入是一个重要的里程碑。在此之前，从我们推出Plausible以来，我们的个人存款减少了5万多美元。当我们的月收入达到10000美元时，终于可以覆盖成本了，并慢慢开始补足储蓄上的损失。</p><p></p><p>我们很高兴能走到这一步，并仍然保持开源。免费和开源是可持续的，而且可以让你赚到租金。开源并不意味着一定要牺牲经济利益。许多优秀的团队和项目正在为开放Web而战，我们希望他们也能取得成功。</p><p></p><p>2月：捐出5%的总收入（月收入13576美元）</p><p></p><p>我们决定将总收入的5%捐给环保和开源事业。</p><p></p><p>我们在2021年总共筹集了2万美元。在2022年初，我们将其中的一半捐赠给了红十字会，剩下的捐赠给了Erlang生态系统基金会、海洋守护者协会和海洋清理组织。</p><p></p><p>3月：扩大支持规模（月收入17550美元）</p><p></p><p>随着感兴趣的用户不断增加，我们收到的电子邮件和问题也越来越多。在Plausible的最初几个月，我把大部分时间花在与人接触上，而最近，我把大部分时间花在回应那些试图联系我们的人上。</p><p></p><p>我们考虑了很多东西，希望能够在不组建客户支持团队的情况下提供更好的用户体验。我们努力解决、自动化和消除人们经常遇到的问题，减少了客户请求的数量。</p><p></p><p>我们在文档方面投入了大量精力，花了大量时间，让它们保持最新，回答我们收到的任何新问题。文档帮助我们扩大支持规模，在没有专门支持团队的情况下处理数千个客户的问题。</p><p></p><p>4月：在文章中加入个人观点（月收入22290美元）</p><p></p><p>谷歌宣布了他们的FLoC倡议，对于话题，我们有很多想法。于是，我们发表了一篇关于“<a href=\"https://plausible.io/blog/google-floc?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiJhY2Nlc3NfcmVzb3VyY2UiLCJleHAiOjE2NTY2NTc5ODYsImZpbGVHVUlEIjoibURYcHlLOXA3aDhzRTkwMyIsImlhdCI6MTY1NjY1NzY4NiwidXNlcklkIjoyNzc5OTMxNX0.8NMTi8ZcbSnJ-cGulhjpNcfEZyO3Al3EIPxZv-iGVNA\">如何反击谷歌FLoC</a>\"”的博文。</p><p></p><p>在这个月里，超过16000人阅读了这篇文章，我们得到了很多关注。这是内容营销的另一种方式。</p><p></p><p>如果发生了一些你和你的潜在受众关心的新闻和事件，就为它们写一篇文章。不要只是重复别人报道的信息，要加入你的个人观点，添加一些独特有趣且有信息量的东西，人们对这类内容很感兴趣。</p><p></p><p>5月：更多来自谷歌的“助攻”（月收入26422美元）</p><p></p><p>谷歌宣布AMP（移动加速网页）在谷歌的搜索结果中将不再得到优待。这对于保持Web的开放性来说是一个重要的事件。网站所有者将不再需要被迫使用AMP。</p><p></p><p>我们在“谷歌AMP已死”一文中表达了我们的观点，并获得了成功。在这篇文章发布后的几天内，超过3.5万人阅读了它。</p><p></p><p>就用户试用注册和转化率而言，这些帖子可能不如与我们的产品直接相关的帖子（如“为什么你应该停止使用Google Analytics”）来得有效，但它们对我们仍然非常有价值。</p><p></p><p>它们可以带来流量，提高品牌知名度，提供链接和社交媒体热度，那些在寻找Google Analytics替代方案的人可能会记起Plausible Analytics这个品牌。</p><p></p><p>6月：第3位团队成员加入（月收入29285美元）</p><p></p><p>Robert在完成他的计算机学位后以兼职的身份加入我们，成为第3名团队成员。Robert一边帮我们提供技术客户支持，一边也在熟悉Plausible的代码库。</p><p></p><p>那么我们招聘新员工的策略是什么？我们怎么知道什么时候该招人？我们如何定义候选人的技能？我们参考Basecamp的招聘策略，等到情况不妙时才招人。</p><p></p><p>我们努力及时解决所有的客户支持问题，尤其是技术性问题。Robert一直在帮助我们改进这方面的东西，我们才得以更好、更快地响应技术性问题，并且不会减慢我们的开发速度。</p><p></p><p>谷歌因为没有提供客户支持而臭名昭著，所以我们尽最大努力给那些联系我们的人一个友好、及时和有用的回应。在Plausible，每个人都参与支持工作，我们不打算招聘专门的支持人员。</p><p></p><p>8月：发表关于广告拦截器使用情况的研究报告（月收入35713美元）</p><p></p><p>广告拦截器是网站所有者比较关心的一个话题，他们会很好奇那些屏蔽了脚本的访问者会导致多少数据遗漏。</p><p></p><p>我们有一些比较Google Analytics和Plausible拦截程度的数据，于是我们发布了一项报告“<a href=\"https://plausible.io/blog/google-analytics-adblockers-missing-data?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiJhY2Nlc3NfcmVzb3VyY2UiLCJleHAiOjE2NTY2NTc5ODYsImZpbGVHVUlEIjoibURYcHlLOXA3aDhzRTkwMyIsImlhdCI6MTY1NjY1NzY4NiwidXNlcklkIjoyNzc5OTMxNX0.8NMTi8ZcbSnJ-cGulhjpNcfEZyO3Al3EIPxZv-iGVNA\">58%的Hacker News、Reddit和精通技术的用户屏蔽了Google Analytics</a>\"”。</p><p></p><p>这篇文章与我们的潜在用户所关心的一个问题有关。我们向他们展示了如何通过使用不同的分析工具来发现更多的见解。在发表后的24小时内，超过3万人阅读了这篇文章。在发表后的5天内，我们的试用注册人数比前一段时间增加了一倍以上。</p><p></p><p>这是通过内容营销来提升产品知名度的另一个例子。把注意力放在那些只有你才能接触到的机会上，比如我们收集的网站流量数据。做调查，发表原创的研究成果，让别人听到你的声音。</p><p></p><p>10月：年收入50万美元（月收入42624美元）</p><p></p><p>我们的月收入已经达到了41600美元（年收入50万美元）。在这个阶段，我们已经适应了一种新的工作方式。我们的日常生活更加平静，没有太多的戏剧性变化或重大亮点。</p><p></p><p>到了某个时候，你会发现产品与市场的契合度，这种稳定的状态让路线图都变得更加清晰，但要维护它还有很多工作要做。凡事都要按照节奏来，我们稳中有进。但为了让一切顺利进行，背后还是有很多艰苦的工作。</p><p></p><p>我们修复Bug，与社区互动，构建新的功能，回应那些主动联系我们的人。我们构建基础设施，以应对日益增长的需求。我们着眼于未来，优化需要优化的东西，让一切保持稳定。</p><p></p><h4>2022年</h4><p></p><p></p><p>1月：“Google Analytics违反GDPR”（月收入55411美元）</p><p></p><p>我们会尽最大的努力，但有时候也需要足够的运气，在正确的时间出现在正确的地方，这就是我对2022年上半年的总结。</p><p></p><p>2022年的开局对我们来说非常强劲，这要得益于外部环境发生的一些变化。奥地利数据保护局（DPA）认为使用Google Analytics违反了GDPR。</p><p></p><p>Plausible在这个市场处于有利地位，在这个消息公布后，市场对我们的产品和服务的兴趣程度也随之增加。我们很高兴能够成为欧洲的一个隐私优先的分析平台。Plausible使用的是欧盟的云基础设施，对于那些不允许再使用Google Analytics来满足合法需求的组织来说，我们的产品成了最好的选择。</p><p></p><p>2月：第4名团队成员Cenk加入（月收入62769美元）</p><p></p><p>Cenk加入我们，组成了一个4人团队，以帮助我们扩大基础设施、应对日益增长的需求。我们现在花了很多精力来扩大我们能够处理的流量，提升Plausible的稳定性、安全性、速度和正常运行时间。</p><p></p><p>2月份为我们带来了更多的好消息。与奥地利DPA一样，法国DPA也认为Google Analytics是不合法的。因此，市场对我们的产品的兴趣又出现了激增。</p><p></p><p>3月：谷歌关闭Google Analytics（月收入71311美元）</p><p></p><p>除了GDPR方面的好消息，谷歌试图推出Google Analytics的替代解决方案。</p><p></p><p>他们宣布关闭Universal Analytics，而且不能将历史数据导入到他们新版的GA4中。这条新闻之后，市场对Plausible的兴趣又立刻增加了。3月份是我们业绩最好的月份，月收入净增长8247美元。</p><p></p><p>4月：从Google Analytics导入数据（月收入76312美元）</p><p></p><p>我们已经尽了最大努力去抓住摆在我们面前的机会。我们努力成为Google Analytics之外的选择方案。</p><p></p><p>我们推出了一个导入工具，用户可以将他们的Google Analytics统计旧数据导入到Google Analytics。谷歌可能不希望你将旧数据导入到他们的新产品中，但我们很高兴能够帮助用户实现这一功能。</p><p></p><p>我们还有一个实时仪表盘和登陆页报告，用户体验要比Google Analytics好得多。对于越来越多不满意谷歌方案的网站来说，Plausible成了一个很好的选择。</p><p></p><h4>2022年6月2日：年收入100万美元（月收入83637美元）</h4><p></p><p></p><p>今年的前5个月对我们来说是不可思议的。6月2日，我们的月收入达到了83637美元（年收入100万美元），这要感谢我们的7000多名付费用户！我们已经爬上了山，我们知道我们处在一个特权的位置，但我们不会把已经取得的成就视为理所当然。</p><p></p><p>人们总是对市场营销和增长感到好奇。在所有的里程碑阶段，我们的营销策略都非常相似。我们没有大声叫卖、打断别人或欺骗别人。我们采用的是一种平平无奇的策略，没有任何令人兴奋的增长技巧。</p><p></p><p>我们只是专注于少数几件事，但我们会尽我们所能做到最好：</p><p></p><p>做人们喜欢用并会想要推荐给他人的好产品。这是最关键的，因为如果没有出色的产品，其他任何事情都不会奏效。我们在博客和社交媒体上发布内容，传递我们的信仰和主张。我们有自己的立场，并希望它能与尽可能多的人产生共鸣。我们在2021年10月达到50万美元年收入，当时我写下了如何达到100万美元年收入的计划：</p><p></p><p></p><blockquote>我们不打算做任何改变。我们不需要强行追求增长，因为我们不需要对任何投资人负责，我们不需要想方设法达到投资人的目标。我们将继续关注我们已经做得不错的事情，并看看它会如何发展。这并不能保证事情会继续发展下去，但我们会尽最大努力。关于如何以及何时达到100万美元年收入，我能给出的最好答案就是给点时间并耐心等待。一天一个网站“去谷歌化”，那我们自然会达到我们的目标。我们希望成为一家安静的公司，不执着于全球领先的增长目标，而是专注开发一款帮助人们解决Google Analytics问题的优秀产品。</blockquote><p></p><p></p><p>这也是我们今后的计划。对我们来说，在营销和宣传中尽可能保持道德是至关重要的，我希望我们能够在不使用任何“最佳营销实践”的情况下继续发展：</p><p></p><p>我们不使用付费广告；我们不使用间谍像素和重定向；我们不使用会话录制；我们不使用弹出窗口或其他干扰性的命令；我们不花钱请人为我们做推销或推荐；我们不使用聊天机器人来吸引你或改变你；我们不参与任何以SEO为目的的链接购买。</p><p></p><p>除此之外，用户还可以随时取消订阅，无需联系我们，我们也不会问他们任何问题。</p><p></p><p>我们还会在用户年度订阅到期前几天通知他们，他们可以继续订阅，或者如果他们觉得Plausible不再有用，可以取消订阅。我们也从不向任何人收取意外的费用。</p><p></p><p>我们对风险资本不感兴趣，对追逐无尽的高速增长不感兴趣，对打造独角兽公司不感兴趣，我们没有要统治世界的野心。</p><p></p><p>我们的目标是继续建立一个可持续的业务，继续忠于我们的使命，让更多网站可以“去谷歌化”，并将以隐私优先的开源软件带给更多的人。</p><p></p><p>原文链接：<a href=\"https://plausible.io/blog/open-source-saas?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiJhY2Nlc3NfcmVzb3VyY2UiLCJleHAiOjE2NTY2NTc5ODYsImZpbGVHVUlEIjoibURYcHlLOXA3aDhzRTkwMyIsImlhdCI6MTY1NjY1NzY4NiwidXNlcklkIjoyNzc5OTMxNX0.8NMTi8ZcbSnJ-cGulhjpNcfEZyO3Al3EIPxZv-iGVNA\">https://plausible.io/blog/open-source-saas</a>\"</p>",
    "publish_time": "2022-07-31 20:53:37",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]