[
  {
    "title": "专访蚂蚁：这群技术排头兵，如何做好底层开发这件事？| 卓越技术团队访谈录",
    "url": "https://www.infoq.cn/article/qzAIAe2d1mXeTWdAvyt1",
    "summary": "<p>这是一支云原生基础设施的研发团队，他们想要研发出一整套云原生架构组件，让企业没有顾虑地专注在业务开发上，PaaS、Service Mesh、定制硬件等离业务较远的工作是他们的。这就是蚂蚁集团的可信原生团队。</p><p></p><p>“我们工作做得越好，上层应用就可以拓展更多，非基础设施开发和基础设施开发人员的数量比例可能就越高。”蚂蚁资深技术专家、Kata Containers 共同发起人的王旭说道。基础设施的研发有什么难点？跟业务研发比有什么特点？这次我们采访了可信原生团队中分别负责中间件、容器云和可信技术的资深专家，为我们介绍他们在做的事情和一些思考。</p><p></p><p></p><h3>中间件 Mesh 化打磨</h3><p></p><p></p><p>蚂蚁的中间件是随着业务架构一起演进的。</p><p></p><p>蚂蚁的架构大概经历了如下的变化：2003-2005 年的单体式架构、2006-2009 年的微服务架构、2010-2013 年的单元化架构、2014-2017 年的云金融架构和 2018 年至今的云原生架构。</p><p></p><p>架构演进的背后是越来越多、越来越复杂的业务。而中间件可以追溯到 2009 年支付宝的架构。彼时，蚂蚁还没有从淘宝分拆出来，支付宝的第一代架构因此受淘宝影响很大。2014 年，蚂蚁集团正式成立，同时开始筹备网商银行，想要成为云上的第一家银行。这意味着整个支付宝的架构场景从单纯的交易转向了更广阔的金融业。</p><p></p><p>SOFA 是蚂蚁集团自主研发的金融级分布式中间件，包含了构建金融级云原生架构所需的各个组件，如服务网格、Service Mesh、消息中间件等。经历了模块化、服务化和单元化后，SOFA 团队为第四代 SOFA 新取的名字叫 SOFAStack。</p><p></p><p>蚂蚁集团高级技术专家宋顺就在这只负责 SOFA 中间件的研发团队里。在宋顺看来，金融级中间件需要具备安全、稳定、可靠、高效等特征，具体包括：</p><p></p><p>服务需要具备高可用的能力，至少同城双活、异地冷备。蚂蚁通过注册中心的机制实现同城里不同机房的服务互通。服务需要具备较高的扩展性来应对流量剧增。蚂蚁选择单元化方式实现，比如将流量打散，按照用户 ID 做划分，不同地区的用户选择特定地区的机房来维护等。数据具有可靠性和强一致性。对此，蚂蚁引入了分布式事务等技术，确保不同机房的交易同时成功或失败。需要实现秒级监控能力，可以很快应对流量突增的情况。</p><p></p><p>如今，SOFAStack 已经进入第五代的研发阶段。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/b0/b000e6b759bfc25b623c59b14301be24.png\" /></p><p></p><p>SOFAStack 产品布局</p><p></p><p>根据设想，蚂蚁的下代技术架构或将以 Mesh 化为核心，因此可信原生团队希望将原来所有的中间件能力都重新打磨。SOFAStack 也早已开始积极拥抱和布局 Mesh。比如，由于 Service Mesh 由控制面和数据面组成，因此蚂蚁分别进行了两个开源项目 SOFAMesh 与 SOFAMosn 的研发。</p><p></p><p>SOFAMesh 是 Service Mesh 的控制平面，由 Istio 分叉而来，并根据内部需要做了功能补充、优化和改进。不过，在回溯贡献给 Istio 后，宋顺表示该项目会回归社区，未来不再单独维护。</p><p></p><p>MOSN 则是一个用 Golang 写的数据平面。根据计划，MOSN 担负起承载所有网络中间件能力的责任，这是一个需多部门参与、时间跨度很长的大项目。但由于已有的 Istio 是 C++ 写的，蚂蚁内部需要花费更多的人力物力去做研发，最终决定基于 Golang 做了 MOSN。</p><p></p><p>“技术越底层，面对的事情就越复杂，我们做任何事情也会越难。”宋顺说，“比如，如果要进行整体的 Mesh 升级，蚂蚁面对的是数十万核机器的改造，这对团队来说并没有多少经验可以借鉴。当没有可参考的东西时，只能用新的方式解决。”但宋顺也表示，创新需要周期，落地过程也会相对缓慢，尤其是对于应用规模较大的企业。</p><p></p><p>在蚂蚁内部，技术概念并不决定着其是否会被采用。这体现在了蚂蚁对引入 Serverless 的谨慎态度上。</p><p></p><p>“Serverless 概念很大、也很好，但怎么能让它在这个体系下发挥作用、产生真正的价值，是需要探索的，而不只是说有了一个新技术、新概念就要直接用了。”</p><p></p><p>在宋顺看来，Service Mesh 解决的更多是基础设施和业务研发解耦问题，这比较容易普及。而 Serverless 不只是一种技术。“团队希望 Serverless 能带来整个研发流程、研发模式的改变，以此提高研发效率，但这个耗时是非常长的。”</p><p></p><p>目前，经过两年多时间的打磨，蚂蚁的 Serverless 产品已经完成了第一阶段的落地和推广。SOFAServerless 在内部接入了 700 多个 Java、nodejs 应用，基本涵盖了蚂蚁所有业务线，支撑了 1 万多次完整的生产研发迭代。</p><p></p><p>随着业务更加多样，不同业务可能分布在不同的云上。但不同业务的合规要求不同，相互之间还需要既独立、又互通。这种形势下，如何做好架构支持，是摆在蚂蚁面前的重要挑战。</p><p></p><p>为此，宋顺表示，目前团队在研发一套名为“云间件”的产品，旨在屏蔽业务和云之间的细节，用户只需要做好开发，而无需关注是否在不同的云上。</p><p></p><p></p><h3>安全容器的进化</h3><p></p><p></p><p>云原生体系里，容器为软件系统提供了基础的运行时环境，目前已经成为实际上的应用交付标准。</p><p></p><p>2014 年左右是容器技术的鼎盛时期，但由于隔离性差等原因，安全一直是悬在开发者头上的一把达摩克利斯之剑。StackRox 今年初的报告显示，55% 的受访者出于安全考虑，推迟了将 K8s 应用程序部署到生产环境中。</p><p></p><p>2015 年时，音速神童抓住了容器和云的风口，开源了基于虚拟化技术的容器引擎 runV。2017 年 12 月，在与英特尔的 Clear Containers 合并后，意在统一虚拟机（VM）安全优势与容器速度和可管理性的 Kata Containers 诞生。</p><p></p><p>2019 年，音速神童的创始人赵鹏、王旭加入蚂蚁，扩充了其在基础设施领域里的人才版图。至今，Kata 已经做了两次重大演进，现在到了 Kata 3.0 版本的紧张研发时刻。根据王旭的介绍，Kata 3.0 主要有以下三个方面的改进：</p><p></p><p>更多 Rust 的实现。Kata 之前用 GoLang，在改用 Rust 实现 agent 后，占用内存从 11 MB 下降到约 1 MB。Kata 希望未来所有组件都可以统一用 Rust 来编写，届时 Kata 的运行时环境会从原来的两个进程会统一成 Rust Kata Runtime，运维、内存开销等得到极大精简。引入镜像加速功能。容器里的分层存储在删除文件时会造成文件冗余，另外容器重启时也会造成很多浪费。所以，Kata 3.0 引入了容器镜像加速项目 Nydus。机密计算等的支持。实际工作中，许多用户也会不信任容器提供商，不希望自己容器里的内容被容器提供商窥探到。因此，Kata 3.0 引入了机密计算。</p><p></p><p>“3.0 版本里有些东西是确定可以加进去的，有些东西只是有可能，也可能会等到 3.1 版本来完全实现。”王旭说。据悉，Kata 3.0 将在今年底发布。</p><p></p><p>在王旭看来，一个相对中立的开源社区会对正确性方面有一些小洁癖，不能为了赶快上线而在质量上妥协。</p><p></p><p>“我印象里，当年 8 月初做的第一个版本，一直到 10 月末才最终合并进去。当时的架构委员会给开发人员做了很多工作，希望先保证核心功能的正确性，不足的地方可以放到后面版本修补，尽量不要将时间线拉长，影响其他开发。尽管如此，大家还是在核心质量方面没有松口。”</p><p></p><p>Kata 的技术演进路线主要由开源社区、上游社区反馈和其他参与方共同完成，所有开发也会在开源社区同步。</p><p></p><p></p><h3>开源这件事儿</h3><p></p><p></p><p>无论 SOFAStack 还是 Kata ，都选择了开源，实际上，蚂蚁的项目越来越多地在相对成熟后选择开源。</p><p></p><p>开源产品更容易获得开发者的信任，且借助开源社区的力量，激发创新，产品可以获得原来设计方向之外的新场景，丰富产品功能。另外，社区化的运作方式会给产品更好的协作和管理机制，不容易被单一场景、单一用户和单一贡献方所影响。</p><p></p><p>“很大程度上，开源软件比很多互联网公司内部的产品，有更好的规范性和更好的运作流程，因为社区化的开源软件对整个产品的正确性有更高的要求。”王旭表示。</p><p></p><p>而在宋顺看来，技术要变成产品，就需要跟整个开源体系做好融合。宋顺团队一直提倡技术产品化、产品商业化，闭门造车既无法融入生态，也无法享受到生态红利。“通过开源跟开发者沟通、与其他社区协作，可以使整个产品体系融入开源生态，保证路不会走偏。”宋顺说道。</p><p></p><p>商业化角度考虑的另一点是，企业使用产品时总是希望自己的研发能更快上手，而产品开源能够帮助行业新人、甚至在校生更好地学习技术，也是人才储备的另一种方式。软件开源，对安全也提出了更高的要求。目前最受关注的就是软件自身的安全问题和供应链安全问题。</p><p></p><p>在王旭看来，很多开源代码带来的漏洞，实际上是不完善的流程导致的。因此，运作良好的开源社区要有完善的安全响应机制或团队，来处理安全事件。</p><p></p><p>“质量再好的软件也难免有漏洞，但是出现漏洞之后怎么处理、有没有相关流程，这是不同项目间的一个本质区别。Log4j 事件之后，我们在做关于开源软件的探讨时，都会特别提到安全问题，这是不可忽视、且必须严肃处理的。”</p><p></p><p>实际上，开源软件的安全需要社区协作处理。发现问题后，开发者可以联系上游厂商或开源社区，触发相应的安全响应流程。</p><p></p><p>另一种更复杂的问题就是开源供应链安全。</p><p></p><p>无论开源还是闭源，大公司都会考虑供应链安全。不同的是，很多开源软件的版权持有方不是一个公司或者一个法律实体，而是个人作者，这对开源软件的重新再分发会造成很多限制。这也使得企业经常面临某个开源软件的部分版权不是自己的，不能随意关掉或改变许可、使用的某个开源软件一旦更改许可证，那之后的版本也将无法使用等问题。</p><p></p><p>因此，企业开发者都希望能得到源码，不过度依赖厂商。王旭认为，安全的开源供应链体现在开源项目对社区有较强的管理能力、可以做到自主可控，并对版权有较强的维护能力等。</p><p></p><p></p><h3>隐私安全怎么做？</h3><p></p><p></p><p>尽管越来越多的企业选择了上云，但由于担心数据被看见或丢失，企业对于重要、敏感的应用还是选择本地运行。另外，多个数据方（通常为竞争关系）越来越多地将数据汇集到云上进行人工智能训练等，但都不想自己的数据被其中一方拿去。因此，隐私增强技术越来越被重视。</p><p></p><p>在众多的隐私增强技术中，蚂蚁在基础设施侧选择了兼顾通用和高效、能单独使用也能跟其他技术有机结合的可信执行环境 (TEE) 技术。</p><p></p><p>TEE 提供了一个由硬件支持的、可以被远程证明真实性和完整性的“黑盒子”。这种软硬结合的方式可以对上层应用进行安全加固、对数据流通业务性能进行加速，同时将上层应用软件、业务和硬件结合，形成软硬件产品。</p><p></p><p>但由于 TEE 中缺乏像 Linux 这样的“操作系统”，一些流行的 AI 训练框架、数据处理框架等很难在“黑盒子”里跑。所以，可信执行环境在生产中并不好用。如果使用 TEE，企业需要做大量的改造，甚至很多应用连改造也无法完成，这导致 TEE 无法大规模使用。</p><p></p><p>蚂蚁要想更好地构建自己的隐私保护能力，就需要攻克这一难题。2016 年，闫守孟就开始思考如何提高 TEE 软件的开发效率。2019 年，闫守孟加入蚂蚁后创立了机密计算团队，并发起了 Occlum TEE OS 项目，致力于大幅提高 TEE 的易用性和安全性。2020 年，机密计算团队发表了被机密计算业界和学术界广泛认可的论文《Occlum: Secure and Efficient Multitasking Inside a Single Enclave of Intel SGX》。</p><p></p><p>“最开始没有投入太多的资源，后面逐渐有了一些东西后，大家觉得还可以后才加大投入。”这篇论文就是重要的阶段性成果。</p><p></p><p>Occlum 使用了安全性较高的 Rust 编写，支持多种文件系统，并提供了类 Linux 的开发体验和类 Docker 使用体验。2020 年，蚂蚁将 Occlum 开源，Occlum 同年即成为 CCC 机密计算联盟中第一个由中国公司发起的开源项目。目前它已在蚂蚁大规模部署，并为微软 Azure Cloud、阿里云、众多开源项目、隐私计算公司采用。</p><p></p><p></p><h4>进入产品化阶段</h4><p></p><p></p><p>“对 Occlum 来说，论文发表之前可以称为探索阶段。论文的发布意味着探索有了初步的成果，之后我们便开始结合业务做产品化了，到今天跟云原生研发流程有了很好的结合”闫守孟说。</p><p></p><p>当时，复杂多样的 Enclave 硬件平台带来很大的学习和使用负担，蚂蚁希望有统一的 Enclave 抽象，并支持更加自主的远程证明控制。这就是蚂蚁结合虚拟化技术和 TPM 技术的自主 TEE 平台 HyperEnclave 的由来。</p><p></p><p>不过，HyperEnclave 项目的风险要比 Occlum 更大。“Occlum 所基于的 SGX 技术，我之前在英特尔是有多年的积累的。但这个项目是全新的，而且用到的虚拟化和 TPM 技术并不是我原来最擅长的部分。关键是我们国家在底层技术上的人才储备是不足的，市场上相关人才非常少，不好招 ”，闫守孟回忆道，“幸好，对底层有兴趣，比如有志做中国的操作系统的人还是有的，我们就招非科班出身、但有情怀的工程师，然后边做边学、边学边做。”</p><p></p><p>基础技术的投入比较大，但生效周期又很长，有人等不到就会离开。“三年来，遇到不少技术和非技术的挑战和波折，不少人没能坚持下来，选择了退出项目甚至离开公司。HyperEnclave 项目多数时间只有 3 个人，从开始到现在竟然有 4 个人中途退出。” 闫守孟感叹道。</p><p></p><p>19 年下半年，闫守孟判断自主可控将变得越来越重要。实际上到了 20 年左右，企业们都在加紧投入做自主可控，HyperEnclave 的价值突然变得很大，也是这个预判让 HyperEnclave 项目的主要人员坚持了下来。他们将 HyperEnclave 的信任根托管到像中国金融认证中心（CFCA）这样的国家信息安全基础设施，更进一步增加了权威性和自主性。</p><p></p><p>目前，HyperEnclave 作为可适配国产 CPU 且兼容 SGX 生态的自主通用 TEE 系统，已经在蚂蚁内部和外部客户的关键场景实际部署。三年技术成果凝聚成的学术论文也于近日收到了系统领域顶会 USENIX ATC’22 的录用通知。“今天，坚持下来的同学们，都成为了虚拟化技术、可信计算技术、机密计算技术领域的顶级专家。他们耐住了无人区独行的寂寞，顶住了短期利益的诱惑，终于守得云开见月明！” 闫守孟非常感慨。</p><p></p><p>Occlum 和 HyperEnclave 针对的是单个计算节点，但是云原生领域有很多基于 Kubernetes 的大规模集群，并且这些环境也不适用于机密计算。闫守孟团队开始了将 Kubernetes 和 TEE 结合起来的 KubeTEE 项目。KubeTEE 可以让用户进行大规模集群远程证明服务而无需关心 TEE 细节，集群密钥分发和同步服务让 TEE 也支持分布式计算。</p><p></p><p>Occlum 让单节点 TEE 更容易使用，KubeTEE 则从单节点扩展到多节点和集群，HyperEnclave 则提供了自主通用 TEE 平台，三个项目结合在一起形成了蚂蚁开源的 SOFAEnclaves 技术栈，解决了机密计算目前实际应用中的三大难题。</p><p></p><p>目前，蚂蚁将上层应用软件与业务结合，还形成了一系列的软硬件一体化产品。“将软硬件产品通过系统层面深度性能调优，并经过最优的兼容性对接匹配测试，形成一套可以直接部署的完整解决方案。这样我们交付给客户的是基本上上电即用，无需额外的部署 、调优 、兼容性测试等的一套完整产品，使得客户部署和运维均非常容易，让客户可以更加专注到业务本身上面来。”蚂蚁集团高级技术专家孔金灿介绍道。</p><p></p><p>“我们非常希望能够打造一个默认可信、安全的基础设施。但是可信安全体系的根基一定是硬件。所以我们在几年前就开始面向数据中心、边缘计算与 IoT 的软硬件产品研发。包括芯片、板卡、服务器、一体机等诸多产品。为可信原生夯实根基。”</p><p></p><p>孔金灿表示，在可信原生的技术体系里面，软硬件结合主要解决三个方面问题。</p><p></p><p>一是安全加固，比如我们做了 Blade 可信根芯片与密码芯片，将可信启动、可信度量、密钥保护等进行了硬件封装，并取得了足够的密评资质。</p><p></p><p>二是性能加速，比如我们的密码卡与隐私计算加速卡，对频繁使用的密码算法进行硬件加速，能够有效提升应用的性能，并且进而降低大规模实施可信原生技术体系所需要付出的成本。我们通过软硬件结合的方法，利用 FPGA、ASIC 芯片，加速了国密算法、同态加密、隐私求交等非常耗时的计算。</p><p></p><p>三是能够形成很好的软硬结合的产品，帮助到业务在用户侧的落地。我们采用软硬件结合的手段，研发了可信原生软硬件底座，内置了可信原生团队自研的硬件与软件产品，可以将我们的可信原生技术整体输出。基于此，我们再结合蚂蚁业务应用，先后推出了摩斯隐私计算一体机、区块链一体机、OceanBase 数据库一体机等产品，取得了很好的市场反馈。</p><p></p><p>目前蚂蚁已经形成了包括底层可信软件栈和可信硬件部件等一套完善的可信安全软硬件底座，具体内容可以参考见下图：</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/6f/6fb8179a99fb3789729eb270b45dbd8c.png\" /></p><p></p><p></p><h3>“开放，担当和高标准”</h3><p></p><p></p><p>SOFABoot、SOFARPC、SOFARegistry 、Seata 等用来构建稳定、可靠、高效的分布式系统；MOSN、Realtor 等侧重云原生场景，用于实现业务应用和基础设施解耦；而 Occlum、HyperEnclave、Kata 等更侧重安全，为云原生场景提供更安全的运行环境。可信原生团队负责很多项目，各个项目分工不同，但组合起来又是一个有机整体。团队的设计上始终保持开放性，确保每个组件都有其他开源组件做集成和替换。</p><p></p><p>可信原生团队的文化可以概括为三个词：开放，担当和高标准，这是由技术设施研发的性质决定的。</p><p></p><p>首先，基础设施研发需要探究技术的本质，很多技术需要经过很多的讨论后才会更好地长期地发展。其次，底层组件支撑了全栈的业务，写错一行代码都会造成极其严重的后果，而一旦出现问题，也要能够站出来扛着压力解决。因此，基础设施研发要有挑战的勇气和能力。最后，基础设施不仅服务自己，对整个行业发展都会产生一些推动，这背后的支撑就是极致卓越的技术。</p><p></p><p>“每个应用单独优化的代价很高，会耗费大量人力和物力。而基础设施研发团队把核心的东西抽象出来，就只需要维护和优化少数几个软件，大部分情况下比让每个应用团队自己优化效果要好。”王旭说。</p><p></p><p>企业研发离不开业务，但基础设施的研发更多时候是自己去制定研发计划，这个计划可能跟具体业务没有关系。所以，基础设施研发的成果有时候衡量起来很难。</p><p></p><p>但就像闫守孟说的，“有些东西不是业务提出来后就能很快做出来的，所以我们必须有自己的洞察，能够比业务提前做一些，而不是跟着他们的节奏走。”这支承担着探索先进技术任务的团队，作为先锋，仍将继续前进。</p><p></p><p>嘉宾介绍：</p><p></p><p>王旭：蚂蚁集团可信原生技术部的资深技术专家、木兰开源社区 TOC 成员，也是开放基础设施基金会顶级项目 Kata Containers 的联合发起人。在加入蚂蚁集团之前，他是安全容器领域的开源创业者，他们在 2015 年开源了基于虚拟化技术的容器引擎 runV，在 2017 年 12 月，他们和 Intel 一起宣布 runV 与 Clear Containers 项目合并，成为 Kata Containers 项目。</p><p></p><p>宋顺：蚂蚁集团高级技术专家，Apollo Config PMC。在微服务架构、分布式计算等领域有着丰富的经验，2019 年加入蚂蚁集团，目前专注于云原生和微服务方向，如 Service Mesh、Serverless、Application Runtime 等。</p><p></p><p>孔金灿：蚂蚁集团软硬件高级技术专家，在数据中心包括计算存储产品，网络产品，以及软硬件一体机化系统架构有着丰富经验。加入蚂蚁后负责软硬件基础设施产品架构和产品，包括如金融云 / 数据库 / 隐私计算等一体化产品和系统。</p><p></p><p>闫守孟：蚂蚁集团研究员，蚂蚁隐私计算基础设施负责人。他领导了蚂蚁集团 SOFAEnclave（Occlum、HyperEnclave、KubeTEE 等）机密计算软件栈的研发，发起并主导了国内外多项 TEE 标准的制定。加入蚂蚁之前，他在 Intel 中国研究院从事基础技术研究，多项研究成果应用在 Intel 软硬件产品中。他在 PLDI、ASPLOS、ATC、ASE 等发表了多篇顶会论文，并拥有 30 余件专利。他在西北工业大学获得计算机应用技术专业的博士学位。</p><p></p><p>本文选自<a href=\"https://www.infoq.cn/minibook/TwGuGOHY5HDv3RLaeFLC\">《中国卓越技术团队访谈录》（2022 年第二季）</a>\"，本期精选了微软 Edge、蚂蚁可信原生、明源云、文因互联、Babylon.js 等技术团队在技术落地、团队建设方面的实践经验及心得体会。</p><p></p><p>《中国卓越技术团队访谈录》是 InfoQ 打造的重磅内容产品，以各个国内优秀企业的 IT 技术团队为线索策划系列采访，希望向外界传递杰出技术团队的做事方法 / 技术实践，让开发者了解他们的知识积累、技术演进、产品锤炼与团队文化等，并从中获得有价值的见解。</p><p></p><p>访谈录现开放长期报名通道，如果你身处传统企业经历了数字化转型变革，或者正在互联网公司进行创新技术的研发，并希望 InfoQ 可以关注和采访你所在的技术团队，可以添加微信：caifangfang842852，请注明来意及公司名称。</p><p></p><p>好文推荐</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651126372&amp;idx=1&amp;sn=c2e6b636aefc2417793ddeae4341fa5b&amp;chksm=bdb902378ace8b213f3b1e6748a6bf0e4d9209ccc122cf9cdc59e862c5dc025f032926e7e41a&amp;scene=21#wechat_redirect\">微软开始封禁商业开源：从 App Store 入手，7 月 16 日生效？！</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651126149&amp;idx=1&amp;sn=2c20674f463e1e95a2d0767d9a30df69&amp;chksm=bdb901d68ace88c0c69252ec43555483d9394f3550bc1f37141ebf7e52ceb26558f031bb73cb&amp;scene=21#wechat_redirect\">迁移进行时，告别 GitHub 的时候到了？</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651126148&amp;idx=1&amp;sn=de0e39242698a2fc423a3a0bd9e71fd7&amp;chksm=bdb901d78ace88c141372e98c78dc2efc30e882ffa3a53f3f683605d7d1990ce61b03d8d69a9&amp;scene=21#wechat_redirect\">腾讯安全回应数据产品线裁撤；马斯克称终止收购推特；拼多多“砍一刀”涉嫌欺诈案一审宣判 ｜Q 资讯</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651125963&amp;idx=1&amp;sn=fa35e036178e0816a1b23b5516a87d79&amp;chksm=bdb900988ace898e3e60f8f3a1f47756e5c2cf51127740033b3e5af67148679c0000b64035c3&amp;scene=21#wechat_redirect\">GitLab 技术选型为何如此不同：坚持用过气 Web 框架十多年、坚决不用微服务</a>\"</p><p></p><p></p><p></p>",
    "publish_time": "2022-07-14 09:27:36",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "资深技术面试官吐槽：我“骄傲”地招了一群“谷歌”程序员",
    "url": "https://www.infoq.cn/article/EbkfiGMPQHPrJbcylEBW",
    "summary": "<p></p><p>很久以前，我是一名技术面试官，在一家公司负责招聘程序员。我有一套简单、清晰、聪明的招聘计划（虽然这不是我原创的）。首先，候选人需要先回答一大堆问题，然后再做一些编程任务。他们在一张纸上写代码，就像我们在大学里做的那样。</p><p></p><p>现在回想起来，我发现这个招聘流程真的很有效。我们招的候选人都成为了当地IT界有名的专家。他们中超过一半的人很早以前就在各个领域建立了自己的IT业务。</p><p></p><p>但也正是这种辉煌的经历让我开始膨胀了。我决定对招聘计划做出一些改变，我认为这一切都是我个人的成就。我是一个很棒的技术面试官！</p><p></p><p></p><h1>改变</h1><p></p><p></p><p>我做了一个非常简单的改变——让候选人在电脑上写代码，而不是在纸上。我想：“为什么他们要坐在那里在纸上涂鸦，就好像在古老的修道院里写手稿一样？”我自己已经忘记了在没有IDE、上下文提示、调试工具的情况下写代码是什么感觉。</p><p></p><p>于是，我给了候选人一台电脑，并交给他们一个编码任务，让他们在半小时到一小时内完成。等我回来时，就看到了已经完成的解决方案，而且非常棒——代码写得很漂亮，优化得很好。这让我大吃一惊——现在的程序员如此崇拜技术，以至于对他们来说写代码就像呼吸一样！</p><p></p><p>我录用了这些人。</p><p></p><p></p><h1>最初的表现</h1><p></p><p></p><p>一开始，一切都很顺利。我对他们的工作生产力进行跟踪，他们掌握新技能的速度连连另我感到吃惊。在过去，新工作的前几个月对新员工来说都是一个挑战——他们能够为学习任务写一些代码，但几乎无法应对真实的工作任务。但对于我招进来的这些人，我没有看到他们有这样的问题。</p><p></p><p>他们轻松地完成了简单的任务，然后我给他们安排了更复杂的任务——那些需要一年经验的人才能完成的任务。你猜怎么样？他们在没有帮助的情况下完成了这些任务！我既震惊又兴奋。新一代程序员正在成长！</p><p></p><p>我以为会一直这样。我的意思是，我希望他们的生产力能保持目前的增长速度。但事实是，我想多了！</p><p></p><p></p><h1>平台期</h1><p></p><p></p><p>3到6个月后，他们的工作生产力进入了平台期。不幸的是，由于新冠疫情的影响，他们都开始远程工作。我也待在家里，仿佛被吓坏了。</p><p></p><p>时间流逝得飞快，一个月又一个月，但他们的生产力始终没有提升，就好像他们永远无法突破实习生的水平。他们有时会出现生产力极值，但这很容易解释：大量简单、单调、相似的任务。我在跟他们沟通的时候一直抓狂，大喊大叫。</p><p></p><p>我认为这跟远程工作有关，因为我很难对他们施展我的个人魅力。他们可能是因为缺乏动力，缺乏现场交流，甚至是因为没有人偶尔把他们胖揍一顿。此外，高管们也似乎跟我有同样的看法，问了我诸如此类的问题：“生产力增长停滞是因为远程工作吗？”当然，我回答是的。等我们回到办公室，生产力就会直线上升！</p><p></p><p></p><h1>回到办公室</h1><p></p><p></p><p>我们在8月份回到了办公室。我们有很多事情要做，唯一缺的是时间（在我们远程工作时，很多任务都没有完成）。我看了看绩效——没有增长……该死！我不得不撸起袖子，亲自着手解决这些问题。</p><p></p><p>我开始为他们提供帮助。解决不了问题？让我来。我会走过来坐在你的椅子上帮你完成任务。你就坐在我旁边看着我怎么做。</p><p></p><p>然而，他们有很多人，而我只有一个。我意识到这行不通，我必须解决问题的根源。我决定回到源头——技术面试。</p><p></p><p></p><h1>重新面试</h1><p></p><p></p><p>我不再要求他们在纸上写代码——我只是坐在他们旁边，给他们一个任务，让他们试着去实现。我曾计划进行一系列测试，从最基础的开始，然后逐步提高难度等级，但最后只停留在基本的任务上。</p><p></p><p>事实证明，只有十分之一的人知道如何使用基本的实体、类型，并知道它们的属性和方法。更糟糕的是，只有2到3人在使用了内置的辅助工具的情况下才完成了任务。他们就是找不到属性和方法，更不用说使用它们了，他们甚至连最基本的任务都完成不了。</p><p></p><p>只有一个人敢问我：“可以用谷歌吗？”就在那时，我——这个白痴——终于醒悟了。</p><p></p><p></p><h1>“谷歌”程序员</h1><p></p><p></p><p>就像有人用一袋面粉砸了我的头，我花了两天时间来消化这种疼痛感。这怎么可能呢？他们在第一次面试时给我看的那些漂亮、优化良好的代码来自网上。最初几个月生产力的爆发式增长是因为他们在网上搜索解决方案。这些家伙给出的神奇答案是在网上找到的。</p><p></p><p>他们写代码不求甚解，连最基本的结构都不去了解一下。不，他们没有写代码，只是下载了。不，他们甚至连下载都没有，下载代码起码要运行“npm i”之类的命令。他们只是复制粘贴了代码，却不知道为什么要那么写。</p><p></p><p>这就是让我感到恼怒的地方。我理解你们到网上去弄清楚新技术的工作原理，或者当你们需要使用一些奇特的特性时不希望让不必要的信息造成认知负担。但是，你怎么能无脑地从网上复制粘贴最基本的代码呢？</p><p></p><p>你想知道他们说了什么吗？他们说：“这有什么大不了的？”这让我感到痛苦万分，或许修道院才是我的归宿。我消停了一下，不再和他们说话。我蜷缩进了自己的世界里，并开始反思。当然，我知道这与他们无关，我自己才是问题所在。</p><p></p><p>他们只是在遵循他们自己世界里的法则。是我傻，我没有看到这些法则——我不了解它们，没有意识到它们的严重性。这就是肤浅要付出的代价！</p><p></p><p></p><h1>肤浅的代价</h1><p></p><p></p><p>在我上大学的第一天，我们聚集在学院的大堂里。一位兼任副院长的老副教授告诉我们：“大学不教你们知识，而是教你们如何自己获得知识。”</p><p></p><p>我很幸运，我是在2000年左右上的大学。我从图片上了解互联网。如果你想了解C++，那就坐下来，这里有学习C++的材料。如果你想写一篇关于表面粗糙度测量的论文，就去图书馆看书，然后开始写你的论文。如果你想做一场关于历史的演讲，那就去读期刊吧。是的，你需要一本接一本地读，直到找到需要的文章。</p><p></p><p>不幸的是，“谷歌”程序员没有那么幸运。他们随时随地都能获得任何信息。他们已经学会了如何快速找到这些信息——无论是卖饼干的商店地址、打折的裤子还是生成查询代码。</p><p></p><p>书上说：大脑会形成并强化人们经常使用的神经元连接。如果你一直写代码，就会做得越来越好。如果你经常在网上查找信息，就会掌握这项特殊技能。如果你一直从网上复制代码，就会成为这方面的大师。</p><p></p><p>然而，并不是所有的代码都会被开源出来，所以就会出现平台期。“谷歌”程序员的生产力并不是对编码技能的衡量，而是对从网上复制代码技能的衡量。就像下载速度一样。大约15年前，你要看电影必须先下载，而如今，只有老一代人会这么做。</p><p></p><p>有时候，“谷歌”程序员可能会超过普通的程序员，至少在解决普通标准的任务时是这样。但与此同时，我们也会形成使用基本对象、类型和编程语言构造块的神经元连接。</p><p></p><p>这对我来说是一件很糟糕的事，可耻的人是我。</p><p></p><p>另外，请重新面试你的程序员吧！</p><p></p><p>原文链接：<a href=\"https://pvs-studio.com/en/blog/posts/0952/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiJhY2Nlc3NfcmVzb3VyY2UiLCJleHAiOjE2NTc1OTI3MjMsImZpbGVHVUlEIjoiaDdydlJveFRVSTBhZEJsdiIsImlhdCI6MTY1NzU5MjQyMywidXNlcklkIjoyNDM2MDc5MH0.7KBACpCEVJrFOUq-bYjuBK7Zr0xOazRi5cC5tTkQuIA\">https://pvs-studio.com/en/blog/posts/0952/</a>\"</p>",
    "publish_time": "2022-07-14 11:47:20",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "创原会携手50+云原生企业 共探跨越数字化鸿沟新模式",
    "url": "https://www.infoq.cn/article/BPMSwzeGaDCVRvYs7bPt",
    "summary": "<p>7月8日，<a href=\"https://www.huaweicloud.com/about/cloudnative2_0/cloudnative-eliteclub.html\">创原会</a>\"·云原生技术精英沙龙云原生企业专场在广州成功举办。InfoQ主编王一鹏受邀参与主持活动，与来自中国信通院、华为云以及金融、汽车、制造、地产、能源等行业的技术精英齐聚一堂，围绕“构建新生产力，跨越企业数字化鸿沟”的主题展开了分享和深入研讨，会议认为云原生2.0已成为企业构建新生产模式、加速跨越数字化鸿沟的最佳选择。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/a2/72/a234b100ff6e569be7960bbf83716972.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6d/6de60ab0b256c5bc45291b372a8bed81.png\" /></p><p></p><p></p><h1>云原生2.0：新范式、新技术催生新生产力</h1><p></p><p></p><p>如今，企业对云原生已经从早期的概念认知，进入到全面践行云原生推动企业数字化转型的阶段，但是随着数字化转型进入深水区，业务创新以及新技术的引入与整合的瓶颈逐步显现，如应用的快速迭代交付、海量数据高效治理、AI实现工业化生产、全球业务极致体验等。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/22/2268f8b0b58e493388af65d003f2dafd.png\" /></p><p></p><p>企业如何突破瓶颈，跨越数字化鸿沟，华为云CTO张宇昕表示：“没有新模式就不会有新跨越，企业要突破瓶颈、跨越鸿沟，就需要引入新的生产模式，云原生2.0帮助企业快速实现基础设施容器化、应用现代化、数据服务化、AI工程化、体验极致化，进而加速企业全面数字化进程。”去年，华为云正式提出“一切皆服务”战略，今年华为云围绕该战略对云原生2.0进行全面升级，将云原生技术新范式与基础设施即服务、技术即服务、经验即服务有机结合，为企业提供更好用的云原生2.0全栈技术、产品与解决方案，助力企业构建新的生产方式，为企业跨越数字化鸿沟加速。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/68/6888c43b1b91c4f114ae42ca8119c039.png\" /></p><p></p><p>中国信通院云大所副所长栗蔚认为，云原生解决了企业高效协同模式创新最最本质的问题，让企业的软件架构可以去模块化，标准化部署，极大的提高了企业软件生产力。云原生的发展已经从面向应用开发迈入了注重应用交互体验的阶段，为企业带来了生产方式的极大变革。用好云原生是我们企业竞争力可以持续发展的关键要素，也是全球化竞争，以及我国未来5-10年提升核心竞争力的关键。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b3/b3b08e99e68f8d6989549103f49842df.png\" /></p><p></p><p>安永科技变革咨询服务合伙人洪小舟认为，华为云云原生2.0全景图是多种数字技术融合的行业沉淀，可以很好的去助力一个传统的企业实现更好更快的构建自己数字能力的体系，因为其包含了行业所需的通用性技术，企业则可以把时间聚焦在有关客户的洞察、客户的分析以及新场景的建设，大幅度降低企业构建数字化核心能力的周期和成本。</p><p></p><h1>基础设施容器化，开启算力供给新模式</h1><p></p><p></p><p>分布式云原生是政企全面云化和全栈智能的最佳架构，华为云容器服务产品经理左少夫认为，企业在实现云原生化的过程中单纯依靠传统公有云中心Region模式已经不能满足企业全面云化的业务诉求，华为云分布式云原生解决方案通过将一致架构的云基础设施和服务，从中心Region延伸到业务所需的各类位置，让云的能力无处不在，让企业可以从全局的视角重新思考各类型业务的部署策略，加快企业全面云化的进程。</p><p></p><p>目前分布式云原生的理念和技术已经在各行业得到了认可和落地，美的楼宇科技研究院CTO程俊在演讲中提到，通常在智慧楼宇或者园区里，子系统多达数十个，这些子系统及设备的高效管理面临巨大挑战，美的采用云边端协同技术，可以自动化完成设备发现、纠错、排错、环境扫描，从而实现设备快速安装、调试、上线，实现管理成本最低、管理效率最优。玄武科技副总裁朱渊认为云原生基础设施是企业数字化建设的新基建，玄武科技基于华为云CCE和CCI等产品构建的基础设施平台，并在些之上构建了aPaaS、cPaaS、AI平台，可以根据业务需求自动调节计算资源，不仅能够满足突发的、临时的、大流量业务浪涌，还能大规模的节省资源建设成本。</p><p></p><h1>应用现代化，打造软件开发运维新模式</h1><p></p><p></p><p>Forrester 报告曾指出，67% 的企业认为当务之急是要对传统应用进行现代化改造，如今应用现代化成为业界焦点和应用发展趋势。华为云软件开发服务CTO谈宗玮结合华为自身的应用架构升级实践进行了分享：“上云前，华为的传统应用无法很好的解决开发效率、扩容的效率、故障快速恢复等难题，采用云原生进行应用现代化架构升级后，基础设施利用率、开发运维效率、架构的灵性性都有了显著提升。”华为云基于以上经验积累打造了软件开发生产线DevCloud，相对传统的研发工具，代码仓性能提升5倍，构建性能提升10倍，测试管理容量提升10倍以及多种类型仓库制品等，为全球开发者提供开箱即用的服务。</p><p></p><p>结合业务快速发展过程中应用架构所带来的羁绊及解决方案，明源云合伙人、高级副总裁童继龙在分享中提到：“随着业务扩张、服务剧增，为了更好的面向客户提供本个性化的服务，我们重构和优化了产研的DevOps平台，持续集成、持续交付能力，基于服务化的SPI扩展模式、aPaaS低代码平台，很好的解决了标准化与个性化的冲突问题，既能保证SaaS的持续迭代更新，又能很好的满足客户的个性化与创新需求。”捷顺科技副总许昭林也介绍说，“2017年前，我们的业务系统采用单体应用架构，每个项目要单独安装服务器，资源利用率极低、水平扩展能力较弱，无法满足业务高峰期用户的高效出行需求。目前我们的业务架构全面采用微服务架构，运维自动部署、预警监控等能力也采用被广泛认可的云原生技术进行升级，保障平台7*24小时高可用运行，现已支撑8000万车主更好的享受出行与车位服务。”&nbsp;</p><p></p><h1>数据服务化，构建数智融合治理新模式</h1><p></p><p></p><p>数据治理的复杂度随着企业数字化程度加深而增加，据报告显示，非结构化数据占企业内数据总量的80%，而使用率却不到30%，大量数据长期无法得到充分使用，价值无法发挥。华为云数据智能创新Lab主任LU HONG认为，企业要数据驱动决策，必须构建新的企业操作系统，通过开放的架构让企业内各种数据、模型、行业经验、第三方应用等的互联互通，为上层数据智慧应用提供便利，华为云数据治理生产线DataArts具备自动、自愈、 自优、自治的特点，加速数据驱动业务、成就业务的过程。</p><p></p><p>货拉拉大数据总监李炳国结合其在人车货路数字化建设中的经验，向大家介绍：“大数据技术是货拉拉建设智慧物流的基石，让车货匹配更智能化、精准化，最终实现业务的智能化运营与决策。货拉拉将自身的数据服务平台与华为云方案进行结合,&nbsp;一起协同构建了稳定、高效、安全、智能的大数据平台。”南网电动一直通过智慧化运营和数字化创新来保证能源使用的安全与高效，如何才能实现精细化、智能化运营？南网电动CTO李勋在演讲中介绍，“我们通过与华为云合作，构建了云边一体化平台，将分布在各地的设备进行统一接入、统一服务、统一运营，对充电桩数据进行详细建模、精准画像，极大提升了设备管理时效性，进而实现对整个充电网的智能化态势感知，”</p><p></p><h1>体验极致化，开辟内容生产交互新模式</h1><p></p><p></p><p>“元宇宙”已经成为数字经济时代的一个热词，未来各个行业中会产生一系列的数字人+实时互动的虚拟空间，用于人们的社交、工作、娱乐等。微赞和保利威作为国内知名的数字内容提供商，也在产品中运用大量的云原生技术，让客户在数字世界中享受更优质的服务体验。微赞CPO何祖恒表示：“微赞深耕3D创新应用，拥有行业领先且成熟的3D直播解决方案，通过3D虚拟的方式让直播更有价值，帮助企业大幅度提升直播营销效果，降低运营成本，也让消费者体验升级。但这需要很庞大的渲染算力、漫长的研发、建模、渲染周期，华为云提供的云渲染、AI建模等能力，顺利解决了这些难题，不仅模型更细腻、颜色更自然，而且制作周期大幅缩短,也为企业节省巨额成本”。保利威技术副总裁梁瑛玮也在分享中提到，面临后疫情时代视频流量的爆炸式增长，上云不仅能更灵活地应对业务弹性，还能直接使用云原生能力，华为云容器平台能秒级提供编码运算所需资源，让系统的建设与运行变得敏捷、高效，大大降低了端到端的业务时长，提升了最终用户的业务体验。”</p><p>&nbsp;</p><p>创原会除了为业界精英提供优质的线上线下交流平台，还联合会员单位在云原生开源与标准建设上积极努力，华为云联合CNCF（云原生计算基金会）陆续打造了KubeEdge、Volcano、Karmada等一系列优秀的云原生开源项目，并与中国信通院一起致力云原生标准的推进，发布了覆盖云原生2.0理念、云原生基础设施、应用、数据、智能的一系列白皮书，并还将参与到云原生数字化成熟模型的建设，帮助企业快速达成数字化转型目标。</p>",
    "publish_time": "2022-07-14 13:47:21",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "字节跳动也要自研芯片？大量招聘芯片工程师，被曝曾重金从华为海思、Arm挖人",
    "url": "https://www.infoq.cn/article/Llud4j6Yp22ix3dWFxdM",
    "summary": "<p></p><blockquote>有消息称，未来 5-10 年，芯片赛道将涌现出数家市值过万亿的公司，N 家市值过千亿的公司。但高收益常与高风险并存，这条赛道注定道阻且长。</blockquote><p></p><p></p><h2>字节正大量招聘芯片工程师</h2><p></p><p></p><p>据《科创板日报》7 月 13 日报道，字节跳动正在大量招聘芯片相关的工程师，如 SoC 和 Core 的前端设计，模型性能分析，验证，底层软件和驱动开发，低功耗设计、芯片安全等。知情人士称，这或是字节跳动准备自研芯片。</p><p></p><p>InfoQ 查询字节跳动招聘网站搜索发现，芯片相关在招岗位超百个。其中，带有“芯片”字样的招聘岗位共 31 个，包括芯片定制 IP 设计、芯片 IT/CAD 工程师、芯片 IP 研发流程专家等；带有“SoC”字样的招聘岗位共 82 个，包括 SoC 系统软件工程师、SoC 架构设计、SoC 验证工程师等。</p><p></p><p>有脉脉用户表示，目前字节芯片人数不多，但项目比较多，2022 年会启动很多项目，着重做多个模块。“（字节做芯片）自产自用风险低，不用担心像其他公司一样要先盈利，未来要不要商用还待定，但你要小心遇到一些不靠谱的 HR，脉脉上吐槽的好多，总体来说薪资开的中等吧，HC 量三位数还是挺缺人的。”某用户在脉脉社区评论道。</p><p></p><p>据悉，字节芯片研发团队已组建 1 年多，目前主攻三个芯片方向：服务器芯片、AI 芯片以及视频云芯片。</p><p></p><p>其中，服务器芯片团队的负责人为北美高通的资深芯片人士卢山。另有消息称，字节也从华为海思、Arm 公司吸纳了不少人员。有知情人士表示，这或是为服务器 Arm 芯片、AI 芯片的流片做准备。</p><p></p><h2>字节自研芯片早有苗头</h2><p></p><p></p><p>事实上，字节走上自研芯片道路早有苗头。</p><p></p><p>早在 2018 年 4 月，字节跳动副总裁杨震原就曾表示，字节跳动拥有全球数量最大的用户上传视频需要分析理解处理，平台推荐引擎也需要强大的机器学习算力，芯片采购和应用需求非常大，正在芯片相关领域积极寻求突破。</p><p></p><p>2021 年 3 月，有媒体报道称，字节跳动正在自研云端 AI 芯片和 Arm 服务器芯片。字节跳动相关负责人回应称：是在组建相关团队，在 AI 芯片领域做一些探索。有脉脉网友表示，字节芯片团队大概在 2020 年年底组建。</p><p></p><p>在互联网大厂中，自研芯片并不罕见，此前 BAT 均已开始自研芯片，小米、OPPO 也纷纷开启<a href=\"https://www.infoq.cn/article/kBGBvfwe4l0Dcyi85YB3\">自研芯片</a>\"时代。</p><p></p><p>字节为何走上自研芯片道路？有接近字节跳动的人士表示，一方面是为了降低芯片采购成本，另一方面，自研芯片可根据自身业务来自定义，能够自主优化性能。互联网巨头 BAT 三家基本都在造芯，而字节跳动的加入，势必会带来国内芯片研发的又一波浪潮。</p><p></p><h2>自研芯片有多难？</h2><p></p><p></p><p>芯片是一个市场容量大、天花板很高的赛道。有数据表示，未来 5-10 年，芯片赛道将涌现出数家市值过万亿的公司，N 家市值过千亿的公司。</p><p></p><p>不过，造芯难、赚钱速度慢也是不得不承认的现实，毕竟芯片产业周期长、投资高、回本速度慢。</p><p></p><p>此前，拥有 3000 亿资产的芯片巨头紫光集团爆发严重债务危机，于 2021 年 7 月申请进入破产重整程序。</p><p></p><p>2022 年 7 月 13 日，在完成股权交割后，紫光集团董事长李滨谈及集团走向破产重整问题时表示，除了资金方面的错配以外，还缺少两个东西：一是产业协同，集团内的企业都是各自为战，没有资源共享、协同管理，没有发挥出合力；二是产业链建设，集团下属企业众多、体系庞大，却没有进行完整的产业链布局，部分关键环节存在明显的短板。</p><p></p><p>另一方面，芯片制造工艺极其复杂。据芯论语此前报道，<a href=\"https://www.eet-china.com/mp/a67907.html\">芯片的复杂性</a>\"是由精密至极和规模巨大两个特点决定的，主要包电路结构、EDA 工具、制造设备、制造程序、条件保障等方面的复杂性。</p><p></p><p>电路结构复杂：芯片应用五花八门，芯片内部的结构也千变万化。</p><p></p><p>EDA工具复杂：EDA 工具软件就是电子设计自动化软件（Electronic Design Automation）。这样的软件要能把数十亿（甚至更多）晶体管摆放在面积不到 1cm²（甚至更小）的硅片上，并且连接成想要的电路功能。同时，还要具有仿真和验证功能，保障送去芯片制造厂（晶圆厂）的设计数据万无一失。随着制造技术的更新和换代，EDA 工具还要随之更新和升级。EDA 工具软件是最难设计的软件。</p><p></p><p>制造设备复杂：芯片制造用到的设备很多，主要包括单晶炉、气相外延炉、氧化炉、磁控溅射台、化学机械抛光机、光刻机、刻蚀机、离子注入机、晶圆减薄机、晶圆划片机、引线键合机等等。</p><p></p><p>制造程序复杂：芯片制造过程一般包括芯片设计、晶圆片制造、晶圆上电路制作、封装和测试等几个过程，其中晶圆上电路制作过程尤为的复杂。</p><p></p><p>条件保障复杂：芯片制造除了设备重要外，水、电、气的条件保障也很重要。水是纯水；芯片制造厂要有双变电站、双线路的备份供电保障，防止电站和回路出现故障时停电；气体是指生产中要用到十多种化学气体，主要包括氧、氢、氮、氩、氦、氢化物、卤化物等。</p>",
    "publish_time": "2022-07-14 14:02:46",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "因果学习将开启下一代AI浪潮？九章云极DataCanvas正式发布YLearn因果学习开源项目",
    "url": "https://www.infoq.cn/article/kBaLvmoeW2ZrTHJ6hdwF",
    "summary": "<p></p><blockquote>采访嘉宾 | 杨健、吕博晨作者 | 凌敏</blockquote><p></p><p>&nbsp;</p><p>7 月 12 日，九章云极 DataCanvas 正式发布 YLearn 因果学习开源项目（以下简称“YLearn”）。据悉，这是全球首款一站式处理因果学习完整流程的开源算法工具包。YLearn 率先同时解决了因果学习中包括因果发现、因果量识别、因果效应估计、反事实推断和策略学习等关键问题，有效提升了政府和企业自动化“决策”能力。</p><p>&nbsp;</p><p>GitHub 地址：<a href=\"https://github.com/DataCanvasIO/YLearn\">https://github.com/DataCanvasIO/YLearn</a>\"</p><p>&nbsp;</p><p>近年来，因果学习在人工智能领域引起了广泛的关注。有观点认为，因果学习将开启下一代 AI 浪潮。图灵奖得主 Judea Pearl 也曾表示，“如果没有对因果关系的推理能力，AI 的发展将从根本上受到限制”。</p><p>&nbsp;</p><p>那么，究竟什么是因果学习？它能解决什么问题？是否会取代机器学习？作为全球首个一站式处理因果学习完整流程的开源算法工具包，YLearn 有哪些技术实践和应用？针对这些问题，InfoQ 近日采访到了九章云极 DataCanvas 主任架构师、YLearn 团队主要负责人杨健和九章云极 DataCanvas 机器学习研究员吕博晨。</p><p></p><h2>从预测到决策，AI 走向可信与可理解</h2><p></p><p>&nbsp;</p><p>从二十世纪五十年代正式研究机器学习以来，机器学习历经多个发展阶段，并在近十年取得快速发展。</p><p>&nbsp;</p><p>2016 年，“AlphaGo 击败李世石”事件将以机器学习为代表的人工智能浪潮推至巅峰，并在全球范围内得到了广泛关注。与此同时，全球信息化建设快速发展带来了数据量的飞跃，以及算力的大幅度提升，这也为机器学习注入了新的能量。</p><p>&nbsp;</p><p>不过，近两年，机器学习无论是在学术界的基础理论，还是在工业界的应用上，突破明显开始放缓。这个现象背后的本质是，当前的机器学习技术和通用人工智能中间还存在着巨大的鸿沟。具体而言，机器学习技术还存在诸多局限性，如泛化能力差、缺乏解释性等。</p><p>&nbsp;</p><p>泛化能力方面，机器学习模型经常在训练集上效果不错，但在测试集上效果很差，模型本身缺少足够的鲁棒性。</p><p>&nbsp;</p><p>从机器学习的本质来看，机器学习拟合的是从历史数据上观测到的相关关系，但基于相关关系的拟合是不可靠的，甚至很多时候是伪相关。图灵奖得主 Judea Pearl 也曾表示，现有的机器学习模型不过是对数据的精确曲线拟合，只是在上⼀代的基础上提升了性能，在基本的思想⽅⾯没有任何进步。这也就导致模型在线上容易出现表现不稳定、数据漂移等问题。</p><p>&nbsp;</p><p>一个典型的例子是，某个数据集展示了尼古拉斯·凯奇拍摄的电影数量和当年在泳池中溺水的人数，两个数据的曲线高度重合，这样的数据可以训练出来一个精准度相当高的模型。但在真实世界中，这两个数据的相关性随时可能失效，这就是伪相关。</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/f3/e7/f3a54dyy0f98c490a0a3c8d4972c51e7.png\" /></p><p></p><p>“我们目前使用的机器学习算法是没有办法发现伪相关的。因此我们需要利用因果学习去补机器学习的短板，在特征工程的过程中利用因果关系指导我们发现更加鲁棒的特征，让模型可以有更好的泛化能力。”杨健对 InfoQ 说道。此外，机器学习缺乏解释性，而因果关系的发现本身就是解释性的一部分，通过因果效应评估，可以进一步量化解释干预变量和结果变量之间定量的影响。</p><p>&nbsp;</p><p>所谓因果学习，指的是让机器具备因果思维，通过输入数据，算法可以推断某件事的前因后果，进行反事实推理。相较传统的人工智能，基于因果的人工智能更加接近通用人工智能。</p><p>&nbsp;</p><p>在杨健看来，机器学习技术本身存在一定的局限性，因果学习除了能够补机器学习的短板，也能解决企业对智能决策的需求。</p><p>&nbsp;</p><p>在数字化时代，企业的目标是尽量在决策链条中减少人的参与，实现数据驱动的自动决策，从而提高决策的准确性和整体系统的运转效率。</p><p>&nbsp;</p><p>简单来说，企业更需要的是自动化的“决策”，而不仅仅是对未来的“预测”。而当前的机器学习以相关性为基础，更多解决的是预测性分析，对未来结果做出预测。在面对需要因果关系为前提的决策性问题时显得力不从心，还很难满足自动化决策的需求，无法提供有效的行动策略选项。因此，要做出数据驱动的决策，理解因果关系是关键。</p><p>&nbsp;</p><p>图灵奖得主 Judea Pearl 也曾表示：“目前有太多深度学习项目都单纯关注缺少因果关系的粗糙关联性，这常常导致深度学习系统在真实条件下进行测试时，往往拿不出良好的实际表现。”Judea Pearl 还在他的新书《The Book of Why: The New Science of Cause and Effect》中提到，“如果没有对因果关系的推理能力，AI 的发展将从根本上受到限制。”</p><p>&nbsp;</p><p>目前，在学术研究方面，因果学习已经在计算机视觉(CV)、自然语言处理(NLP)等方向取得多个研究成果，计算机视觉顶级会议 CVPR 中的一些研究也是围绕着深度学习如何利用因果关系来改进它的表征学习，如何有效地去除伪相关性等方面进行研究。</p><p>&nbsp;</p><p>此外，因果学习和强化学习也有一些相关的研究进展。传统的强化学习基本原理就是在一个模拟环境模型中不断的试错和学习，大家普遍认为这是一个非常暴力的训练方式，这也是强化学习饱受诟病之处。</p><p>&nbsp;</p><p>“我们把因果关系引入到强化学习里，可以有效地收缩它的试错空间，大幅提高学习效率，降低算力成本。”杨健表示，“总的来说，因果学习和机器学习二者并不是替代关系，而是互补关系。实际上，因果学习在近几年之所以能够高速发展，也是得益于机器学习提供的一些支撑，甚至很多因果学习新的研究成果也是需要借助于机器学习算法来实现的。”</p><p>&nbsp;</p><p>除深度学习和强化学习之外，因果学习在其他领域，如对抗学习、元学习、多任务学习（推荐场景）等方向的研究也比较有前景。</p><p></p><h2>YLearn 因果学习开源项目技术实践</h2><p></p><p>&nbsp;</p><p>正是观察到因果学习从 2019 年开始在学术研究上陆续取得成果，涉及到因果关系的论文数量每年都在翻倍增长，同时结合工业界在落地人工智能时遇到的问题，九章云极 DataCanvas 决定把因果学习作为 AutoML 之后的一个主要突破方向，并于 2021 年 6 月开始规划 YLearn 开源项目。2022 年 7 月 12 日，YLearn 正式发布。</p><p>&nbsp;</p><p>YLearn 是“learn why”的双关语，又称因果学习算法工具包，是一个完整实现因果推断流程的开源Python 包，目的是通过数据发现 why 和 what if 问题，力求解决因果推断最核心的五个问题：因果发现、因果量识别、因果效应估计、反事实推断和策略学习。同时，YLearn 还提供了重要模块的可视化输出，如因果图、因果效应解释、决策树等，帮助用户更直观地理解数据、调整策略，最终实现预期。</p><p>&nbsp;</p><p>“因果学习没有被广泛使用的一个主要原因就是门槛太高，这个领域的人才比机器学习、深度学习更稀缺，又缺乏比较完整的易用的工具包，那么我们就从这个痛点出发。有了 YLearn 最初的构想。”杨健表示，从因果学习的开源社区来看，目前的开源工具都只能解决因果学习几个主要任务中的部分问题，还没有一个端到端的全 pipeline 的完整工具包，“我们目前主要的精力投入是在开源项目的开发上，我们的愿景是希望 YLearn 能成为像 scikit-learn 在机器学习领域这样的一个因果学习的必选工具”。</p><p></p><h4>YLearn 的研发历程</h4><p></p><p>&nbsp;</p><p>据吕博晨介绍，YLearn 的整个研发历程一共经历了三个阶段：</p><p>&nbsp;</p><p>第一阶段，对现有工具进行调研，对前沿进展展开研究。</p><p>&nbsp;</p><p>在这个时期，团队成员主要对现有的因果推断工具进行调查和研究，从而形成产品的大致思路。“我们在调查的过程中发现，当前多数因果推断工具只能做因果推断中的一类或两类步骤，用户想实现一个完整的因果推断流程，需要切换到不同的工具，再拼接成一个完整的流程，十分麻烦。”吕博晨表示，YLearn 最初的设计思路就是希望能提供一个更完整的因果学习算法工具包，并且支持学术界和工业界最新的各类算法，保持实时更新。</p><p>&nbsp;</p><p>第二阶段，设计原型验证机，实现最基础算法。</p><p>&nbsp;</p><p>有了设计思路后，团队开始设计原型验证机，做了一个全流程的粗糙版本，并实现一些基础算法，比如最基本的后门调整算法，以及一些很粗糙的 Meta-Learner 算法等等。“原型验证机的主要任务就是验证想法的可行性，并将因果校验识别、因果校验估计流程串起来，这一阶段进一步确认了最初的‘实现一个完整因果学习工具包’的想法。”</p><p>&nbsp;</p><p>第三阶段，丰富各类算法，统一 API 和增加实用功能支持。</p><p>&nbsp;</p><p>原型验证机设计实现后，需要进一步丰富和完善产品功能，增加易用性，调整和统一 API 接口，并且增加各类测试用例和使用样例，增加各类实用功能，比如&nbsp;policy 模型和一个完整的 API Why。“在 Why 这个 API 里，用户可以完整地使用因果推断的各个相关功能，而不需要去预先了解 YLearn 甚至是因果推断的各类细化概念，比如什么是 adjustment set, 在最简单的情况下，用户只需要输入一个数据集给&nbsp;Why 就可以使用了。”</p><p>&nbsp;</p><p>当前，团队的短期目标就是提高 YLearn 的成熟度，实现可用、好用、易用，在特性的完整性、算法效率、稳定性等方面，YLearn 还需要迭代几个版本。</p><p>&nbsp;</p><p>至于长期目标，团队也规划了几个方向。一方面，Causal Machine Learning 利用 YLearn 去补机器学习的短板，另一方面，Automated Causal Learning 让 YLearn 也具备自动化的能力，进一步降低使用门槛。此外还有决策图谱，这是一个能够把企业的关键运营指标和可干预变量构建出一个基于因果关系的图谱，通过可视化的交互式方式来推演各种决策动作对运营指标带来的影响。</p><p></p><h4>YLearn 的算法模块设计、特性与应用</h4><p></p><p>&nbsp;</p><p>算法模块设计方面，YLearn 主要包含 5 个模块：因果发现(Causal Discovery)、因果模型（CausalModel）、估计模型（EstimatorModel）、政策模型（Policy ）、解释器（Interpreter）。</p><p>&nbsp;&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/f4/f45fbde181451412602244b3dcee4b01.png\" /></p><p></p><p>从训练数据开始，首先使用因果发现揭示数据中的因果结构，通常会输出一个因果图，然后将因果图传递到因果模型，在其中识别感兴趣的因果效应并将其转换为统计估计值。并用训练数据训练估计模型以模拟因果效应和其他变量之间的关系，即估计训练数据中的因果效应。然后可以使用经过训练的估计模型来预测一些新测试数据集中的因果效应，并评估分配给每个人的策略或解释估计的因果效应。</p><p>&nbsp;</p><p>目前业界主要有两套因果模型：Judea Pearl 的结构因果模型（因果图）和 Donald Rubin 的潜在结果模型。在因果表示与因果效应识别阶段，YLearn 主要采用因果图模型 (Causal Graphical Model)这一表示，能方便地支持因果图的各类操作，达成因果效应识别。此外，由于一般的因果效应识别也是基于因果图模型，YLearn 在这一阶段选择因果图模型也能支持这一方法。</p><p>&nbsp;</p><p>而在因果效应估计阶段，YLearn 主要采用依赖于结构公式模型，因为因果图与结构公式模型为对应关系，而结构公式模型在估计方面表述更为方便。</p><p>&nbsp;</p><p>“目前来说，最大的问题是无混淆假设的检验性问题，对于这个问题，一方面，可以通过学界的进一步研究解决，另一方面，YLearn 提供一种近似估计的手段，可以一定程度上确定一个因果效应的范围，帮助理解。”吕博晨说道。此外，YLearn 还提供了重要模块的可视化输出，如因果图、因果效应解释、决策树等，帮助用户更直观地理解数据、调整策略，最终实现预期。</p><p>&nbsp;</p><p>特性方面，YLearn 主要具备以下三个特性：</p><p>&nbsp;</p><p>一站式。通常的因果学习流程包括从数据中发现因果结构，对因果结构建立因果模型，使用因果模型进行因果效应识别和对从数据中对因果效应进行估计。YLearn一站式地支持这些功能，使用户以最低的学习成本使用与部署因果学习。新而全。YLearn 实现了多个近年来在因果学习领域中发展出的各类算法，例如Meta-Learner、Double Machine Learning 等。也将一直致力于紧跟前沿进展，保持因果识别与估计模型的先进和全面。用途广。YLearn 支持对估计得到的因果效应进行解释、根据因果效应在各种方案中选取收益最大的方案并可视化决策过程等功能。除此之外，YLearn 也支持将因果结构中识别出的因果效应的概率分布表达式以 LaTex 的形式输出等小功能，帮助用户将因果学习与其他方向交叉。</p><p>&nbsp;</p><p>应用方面，杨健认为，从普遍意义上讲，只要是需要决策支持的这类任务都可以使用 YLearn 来完成，如弹性定价、客户挽留、产品推荐、广告等等，使用的前提条件和机器学习一样，准备好符合要求的数据就可以。</p><p>&nbsp;</p><p>“因果学习中有一个重要的应用就是 Uplift 建模，直接字面理解就是提升建模，非常适合用在精准营销上面，可以提升 ROI（投入产出比）。”</p><p>&nbsp;</p><p>杨健表示，提升建模的核心是把目标用户分到 4 个象限里，举个例子：某个产品有四类用户，第一类是无论是否收到产品推荐信息，都确定会购买的用户；第二类是无论是否收到产品推荐信息，都确定不会购买的用户；第三类是收到产品推荐信息，会产生购买行为的用户；第四类是收到产品推荐信息，会取消产品订阅的用户。对于第一、二、四类用户，商家可以节约营销成本，不触达他们，因为对这三类用户投入成本的收益几乎是0。而对于第三类用户，则需要重点触达，促进购买行为。</p><p>&nbsp;</p><p>“机器学习模型是没办法完成这个任务的。我们需要通过因果学习里面的异质化因果效应评估，也就是 CATE 来完成，而且还可以更进一步，对于这类用户用哪种营销手段收益更高，也是可以学习出来的，甚至不同的用户可以有不同的策略，最后我们可以综合性的提高总体投入产出比了。这是一个很典型的 YLearn 的应用场景。”杨健介绍道。</p><p></p><h2>写在最后</h2><p></p><p>&nbsp;</p><p>虽然因果学习已经证明了其存在的价值，但在当前，因果学习还并未被业界广泛采用。正如前文所言，因果学习没有被广泛使用的主要原因就是门槛太高，这个领域的人才比机器学习、深度学习更稀缺。</p><p>&nbsp;</p><p>“我们看到有很多讨论说现在的算法工程师不香了，其实这句话的背后就是机器学习在现实落地过程中遇到了一些问题，无法解决实际的问题，这也是我们要研究因果学习的原因。我觉得对个人来讲，如果在机器学习、深度学习领域遇到困惑了，不妨投入到因果学习方向上，这是一个非常有前途的方向。”杨健说道。</p><p>&nbsp;</p><p>那么，技术人要想往因果学习领域发展，需要具备哪些专业素质？</p><p>&nbsp;</p><p>吕博晨表示，因果学习需要技术人具备广泛的知识面，并且要对经典的机器学习算法和理论有一定的认识。“如果想在因果学习领域做出一些成绩的话，需要具备的基本素质包括深度和广度两方面。既要掌握机器学习、深度学习本身的基本概念，也要具备统计学基础，这样更容易进入因果学习这个领域。另外重要的一点是，要有足够的兴趣和热情，全身心地投入在这一领域，扎扎实实地在这一领域深耕。”</p>",
    "publish_time": "2022-07-14 14:42:27",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Rust for Linux要来了，这对我们意味着什么",
    "url": "https://www.infoq.cn/article/hRUNuCGVgGwda9jpwajc",
    "summary": "<p>众所周知，Linux 是 C 语言的代言人。但是，时代变了，Rust 正在兴起并赢得越来越多人的支持，它开始逐渐扮演 Linux 系统语言的角色。</p><p>&nbsp;</p><p>在今年的 Linux 基金会开源峰会上，Linus Torvalds提到他希望看到在 Linux Kernel 5.20 中融入Rust。内核发布周期一般是 9 到 10 周，这意味着我们可能会在 8 月初看到 5.19。然后，如果一切顺利的话，我们将在 10 月下旬或 2022 年 11 月上旬在 5.20 中看到 Rust。而仅在去年，Linus Torvalds才刚对Rust发表过评论，表示自己绝不会推动 Linux 中的 Rust 运动，“Rust 优势的背后肯定存在复杂性，所以我会采取观望的态度，看看这些优势是否真的奏效。”</p><p>&nbsp;</p><p>那么为什么Rust会如此快进入到Linux内核之中？这对社区、对使用Linux和Rust的公司来说意味着什么？对解答这些疑问，我们采访了跨云存储厂商达坦科技（DatenLord）的联合创始人施继成。</p><p>&nbsp;</p><p>采访嘉宾：</p><p>施继成，达坦科技（DatenLord）联合创始人兼CTO，曾供职于Google、Alibaba等国际知名科技公司。擅长操作系统内核开发、分布式系统、嵌入式系统，对分布式数据一致性有深入的研究。发表多篇操作系统内核相关论文，累计数百次引用。</p><p>&nbsp;</p><p>InfoQ：几年前，有一些声音表示“是时候用 Rust 重写操作系统了”。以您的观察来看，这能够实现吗？为什么？</p><p>&nbsp;</p><p>施继成：如果我们将“用 Rust 重写操作系统”定义为从零开始搭建一个基于 Rust 语言的操作系统且希望其能够商业化是不太现实的。原因就在于商业化的操作系统是需要应用场景的，某一个应用场景在相当长的时间内都会主流流行一个或几个操作系统，不轻易改变，比如桌面操作系统中的 Windows 和 MacOS，手机操作系统中的 Android 和 iOS，以及服务器操作系统 Linux，BSD 和 Windows Server 等。我们可以发现这些主流的操作系统是陪伴着该领域的发展成长起来的，往往都有长达几十年的历史，一旦形成主导地位不易撼动。</p><p>&nbsp;</p><p>用户不愿意更换操作系统的原因主要是“生态依赖”—— 许许多多基于这些操作系统开发的应用程序和开发框架。如果说从零开始写一个操作系统还有可能由一家商业公司完成，那么完整迁移操作系统上层生态则是一个需要全人类参与的浩瀚工程。因此我认为用 Rust 语言从头写一个全新的基于现有成熟场景的操作系统是不现实的。</p><p>&nbsp;</p><p>那么 Rust for Linux （以下简称 R4L）是另外一条可行的方案，该方法之所以可行，主要原因就是不改变 Linux 操作系统的接口，完全兼容现有 Linux 上的所有应用程序。R4L 仅仅是替换掉 Linux 内部的某些内核模块，这些用 Rust 完成的内核模块可以与其他内核组件完美结合，通过慢慢“蚕食”的方法，使得 Linux 中越来越多的组件使用 Rust 语言实现，最终达到提高 Linux 安全性的目的。当然现阶段 R4L 还在初级阶段，后续还有许多不确定性，需要社区和大家共同完善。</p><p>&nbsp;</p><p>InfoQ：编写安全的 C 代码是可能的，那为什么还会很多人认为将 Rust 添加到 Linux 内核很重要？另外，将Rust添加到内核中，对社区、对贵司来说分别意味着什么？</p><p>&nbsp;</p><p>施继成：“编写安全的 C 代码是可能的”这句话本身没有错，使用任何语言都有可能写出安全的代码，但程序员们为什么还要选择一种安全的语言呢？因为程序员也是人，是人就会犯错，程序员在代码中犯下的错就是众所周知的 Bug。优秀的程序员会使用各种方法避免或减少自己犯错，选择一种安全的语言，例如 Rust，就是这些努力中的一种。Rust 语言提供了一些特性，保证了程序员不犯内存错误和线程并发访问错误，而这些错误在内核开发中往往占据了大多数。以 Windows 操作系统为例，在微软&nbsp;<a href=\"https://www.infoq.cn/article/mqz2zrqt9pyu0ojoavra\">2019 年的一次演讲</a>\"&nbsp;中有提到，Windows 的安全漏洞有 70% 是内存安全问题，我相信 Linux 中的现象应该类似。基于此，将 Rust 添加到 Linux 内核中对提高其安全性至关重要。</p><p>&nbsp;</p><p>R4L 项目对于 Rust 语言社区而言是重大利好，因为任何主流的语言都需要一个或几个应用场景来发展壮大，Rust 已经被证明可以用以构建浏览器—— Firefox，R4L 项目则证明了 Rust 可以被用来构建操作系统。随着这些主流应用场景的不断拓展，Rust 会被越来越多人使用，相应的 Rust 语言的生态也会越来越好，最终降低 Rust 语言的使用难度，吸引更多人来使用 Rust，这是一个正向循环。</p><p>&nbsp;</p><p>对于我司（ 北京达坦科技 ）而言，R4L 项目也帮助我们更容易构建安全的存储系统。由于我司主打软硬件结合的存储系统，所以和 Linux 内核打交道是不可避免的，也需要写系统内核模块来完成硬件适配工作，R4L 让我们的安全相关工作变得更加简单了，也提高了系统层的安全性。由于 R4L 还处在初级阶段，我们在使用过程中也会向 Linux 社区提交 Patch，帮助R4L系统不断完善。</p><p>&nbsp;</p><p>InfoQ：Rust for Linux 发展至今已经实现了哪些功能，还有哪些功能有待完善？</p><p>&nbsp;</p><p>施继成：Rust for Linux 项目主要分为两个部分，第一个部分是将 Kernel 中原来的 C 语言接口用 unsafe 的 Rust 代码分装出来，我们俗称 binding，这一部分工作大部分由代码自动生成，相对比较简单。另外一部分是如何将 unsafe 的 Rust 代码封装成为 safe 的 Rust 代码，即如果通过 Rust 语言的特性来保证 Linux 中方法的安全性，这一部分的工作则完成度较低。</p><p>&nbsp;</p><p>由于kernel 模块实在过于繁杂，这里只能列举其中的一些来说明情况，已经部分完成功能的模块包括内存分配管理模块和链表等基础数据结构模块等，而未完成的模块包括内核线程抽象和异步任务执行器等。</p><p>&nbsp;</p><p>InfoQ：这个发展历史当中，存在哪些权衡？</p><p>&nbsp;</p><p>施继成：据我所知，在 R4L 项目中现在的主要权衡点仍然在安全性上。因为 Linux C 语言模块的安全性大多由良好的编程规范和调用范式来达到，所以很多安全性的保证都是隐含在代码逻辑中的；例如，内存被正确释放需要内存调用者自己来保证，大家往往采用的范式是在所有可能退出的地方都加上内存释放代码，或者将退出出口控制在一个地方。内核很多安全点比上述例子要复杂许多，如何将这些隐含的逻辑封装在 Rust 代码中有非常大的挑战，在安全的同时提供和 C 语言一样的性能则对功能实现者提出了更大的挑战。不过我坚信随着时间的推移和贡献者的增多，这些问题最终都能够得到完美的解决。</p><p>&nbsp;</p><p>InfoQ：Linus对Rust有一些态度上的转变，比如从最开始的“观望”，到承认Rust将出现在Linux中。主要原因，您认为是什么？</p><p>&nbsp;</p><p>施继成：我个人觉得有以下几个原因：</p><p>Linus 早年间尝试用 C++ 写内核代码的体验不好，只尝试了两周时间，最终放弃使用 C++写内核。这一段经历会让 Linus 在接受新的语言上更加谨慎。R4L 的尝试在最开始让大家觉得风险很高，质疑声音也很多，不过随着这几年社区的不断努力，大家看到更多的希望，包括 Linus 在内的内核开发和维护者对R4L的信心也更充足。</p><p>&nbsp;</p><p>InfoQ：您认为如果在5.20版本中出现Rust，这其中还存在什么挑战？</p><p>&nbsp;</p><p>施继成：当 R4L 进入主分支后，真正的故事才刚刚开始。就像之前我们介绍的一样，R4L 项目更多的是给内核开发搭建脚手架，真正的内核模块还需要一个一个替换和重写，例如文件系统和网络通信模块等等。这些模块有的历史悠久，代码结构的复杂性导致了任何语言级别的切换都不会是一个简单的任务。如何对这些大型模块进行平稳的迁移将会是整个社区面临的巨大挑战。</p><p>&nbsp;</p><p>InfoQ：Rust对开发者来说，难度还比较大，并且熟悉Rust的人目前还不多，如果下一个版本中出现了Rust，对于维护者来说是否构成一些问题？</p><p>&nbsp;</p><p>施继成：这个问题可以从两方面回答。首先，Rust 语言的使用者已经从 2020 年初的 60 万增长到 2022年初的 220 万，语言使用者的增多意味着有更多人能够投入到内核开发和维护工作中，能为维护工作提供不少的帮助。另外一个方面，Linus 也从语言难度的角度讨论过 Rust，他认为比起 Rust 语言，系统内核的复杂度更大，因此 Rust 语言不应该成为内核开发中最困难的问题。同时 Linus 还以 Perl 语言举例，认为这是一门极难阅读的语言，不过这并不妨碍 Perl 语言在 Linux 项目中的使用。</p><p>&nbsp;</p><p>InfoQ：说到 Rust 的现在和未来，您认为该语言现在处于什么位置？</p><p>&nbsp;</p><p>施继成：Rust 语言已经连续 7 年蝉联 StackOverflow 网站（全球最大的编程问答网站）最受欢迎语言，Rust 语言的受欢迎程度是不言而喻的。现在随着 Rust 马上（Linus 原话是：“It's getting to the point where real soon now”）将成为 Linux 的官方第二语言，再一次验证了 Rust 语言的实用价值，必然会吸引更多的程序员来学习和尝试 Rust。我们看到了 Rust 非常好的增长势头，相信随着 Rust 社区的不断发展，其将会成为最主流的几门编程语言之一，就像现在的 C 和 C++ 一样。</p>",
    "publish_time": "2022-07-14 17:02:42",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "特斯拉AI和自动驾驶团队负责人离职，外界猜测：离职原因或与FSD一再延迟交付有关",
    "url": "https://www.infoq.cn/article/pm1V05d2ATH9014fOoYC",
    "summary": "<p></p><blockquote>当地时间7月13日，特斯拉人工智能负责人、公司自动驾驶团队负责人Andrej Karpathy在推特上宣布了离职消息。</blockquote><p></p><p></p><h2>特斯拉5年元老宣布离职</h2><p></p><p>&nbsp;</p><p>Karpathy在Twitter上发文称：“过去 5 年，在<a href=\"https://www.infoq.cn/article/b9taERMMXDKLKZxcEdl9\">特斯拉</a>\"朝着自己的目标努力奋进的途中，有幸与之一路同行，略尽绵力，就此道别是个艰难的决定。一路走来，Autopilot 系统已经从最初的车道保持辅助功能发展到了城市街道辅助驾驶，我希望未来有更多优秀人才加入Autopilot团队，延续这一势头。</p><p>&nbsp;</p><p>Karpathy补充说，他目前还没有下一步的计划，希望花更多时间“重新审视我对人工智能、开源和教育技术工作的长期热情”。</p><p>&nbsp;</p><p>特斯拉首席执行官埃隆·马斯克在推特上回复，感谢Karpathy在公司的工作。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/39/3912121cc80a5ecdbda56f77da10c396.png\" /></p><p></p><p>在2017年进入特斯拉之前，Karpathy曾是OpenAI的AI科学家，在人工智能相关领域拥有广泛的背景，并且是斯坦福大学最受尊敬的深度学习课程之一的创建者。&nbsp;在马斯克收购OpenAI后，Karpathy顺理成章地进入了特斯拉。</p><p>&nbsp;</p><p>加入特斯拉后，Karpathy管理着一个由资深机器学习科学家和工程师组成的团队，他的工作重点是为支持 <a href=\"https://mp.weixin.qq.com/s?__biz=MzU1NDA4NjU2MA==&amp;mid=2247535557&amp;idx=3&amp;sn=a37fa0856e9f850450653b4a4109eceb&amp;chksm=fbeaf20acc9d7b1cc05e532947fa959c07be45f76ee1d85e8eb72375fdc0596b2cea3ae564a9&amp;scene=27#wechat_redirect\">Autopilot </a>\"高级驾驶员辅助系统而构建计算机视觉系统，这与他之前的论文以及在OpenAI的工作重合度很高。</p><p>&nbsp;</p><p>Karpathy在特斯拉的这5年，同时也是特斯拉将”人工智能“四个字从汽车向通用领域普及的“基石时代”。</p><p>&nbsp;</p><p>其实Karpathy的离开并不出乎人们意料。在漫长的（4个月）的休假期间，外界关于他是否会回来的猜测一直不断，直到如今，传闻终成现实。</p><p></p><h2>外界猜测离职原因或许是FSD一拖再拖、无法交付</h2><p></p><p>&nbsp;</p><p>不久前，特斯拉裁员的消息就引发了众多关注。</p><p>&nbsp;</p><p>特斯拉在一份加州监管文件中表示，将解雇 229 名数据注释员工，并关闭了他们工作的加州圣马特奥办事处。</p><p>&nbsp;</p><p>据一位消息人士称，这些被解雇的大多数工人都从事中等技能、低工资的工作，例如<a href=\"https://www.infoq.cn/article/AgFr2VewLo7C0ouj9amg\">自动驾驶</a>\"数据标记，这涉及确定特斯拉的算法识别物体的好坏。</p><p>&nbsp;</p><p>而Karpathy宣布离职，也踩在了这个节骨眼上。</p><p>&nbsp;</p><p>外界猜测，Karpathy的离职或许是因为多年来特斯拉承诺的全自动驾驶（FSD）功能集一拖再拖，迟迟未能交付，并且Autopilot相关的交通事故频出。</p><p>&nbsp;</p><p>根据上个月公布的联邦数据，自 2021 年 6 月以来，特斯拉汽车在涉及先进辅助驾驶系统的报告车祸中占了近 70%。</p><p>&nbsp;</p><p>自 2017 年以来，Karpathy 一直负责监督 Autopilot 软件，至少在公开场合，他一直是特斯拉放弃 LiDAR 和其他传感器，将其自动驾驶技术专注于摄像头的想法的坚定支持者。这与其他公司（如<a href=\"https://waymo.com/\">Waymo</a>\"和<a href=\"https://www.repairerdrivennews.com/2021/10/13/gms-new-ultra-cruise-technology-to-make-use-of-behind-the-windshield-lidar/\">GM</a>\"）的自动驾驶汽车依赖 LiDAR 形成鲜明对比。</p><p>&nbsp;</p><p>2020 年 10 月，特斯拉开始提供基于 Autopilot 功能集的近乎完全自动驾驶的 FSD系统，作为有限的测试版，并于 2021 年 12 月将其扩展到更广泛的用户群。</p><p>&nbsp;</p><p>从那时起，<a href=\"https://www.infoq.cn/article/LxFCa6vY353SjMTw8qpL\">马斯克</a>\"一直承诺更广泛的推出，但它一直在延迟，并且在使用 Autopilot 时，特斯拉自动辅助驾驶的幻影制动问题和汽车碰撞等问题迟迟未得不到解决。</p><p>&nbsp;</p><p>&nbsp;</p><p>参考链接：</p><p>&nbsp;</p><p><a href=\"https://techcrunch.com/2022/07/12/tesla-laying-off-229-autopilot-workers-shuttering-san-mateo-office-filing-confirms/\">https://techcrunch.com/2022/07/12/tesla-laying-off-229-autopilot-workers-shuttering-san-mateo-office-filing-confirms/</a>\"</p><p>&nbsp;</p><p><a href=\"https://mashable.com/article/tesla-head-ai-autopilot-leaves\">https://mashable.com/article/tesla-head-ai-autopilot-leaves</a>\"</p>",
    "publish_time": "2022-07-14 18:05:36",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]