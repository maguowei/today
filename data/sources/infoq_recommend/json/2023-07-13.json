[
  {
    "title": "领域驱动探索：开启架构现代化转型之路",
    "url": "https://www.infoq.cn/article/ZmNiV7F2973R19QVTYkO",
    "summary": "<p>项目的成功始于强有力的探索能力。对于构建新数字产品和服务的团队来说，这通常包括在编写代码行之前进行的用户研究、需求收集和待办事项的创建。但是，如果你的项目是对错综复杂的旧遗留系统进行现代化改造或是将所有工作负载迁移到云上，该怎么办呢？在发布一款新产品时，你如何才能满怀信心地启动项目呢？</p><p></p><p>本文提供了一种指导方法，通过领域驱动探索（Domain-Driven Discovery，DDD）启动下一个架构现代化项目。为了说明这一点，我们将使用我的一个客户为例，这是一家医疗用品供应公司，它正在将其所有核心系统迁移到云上，并且需要创建一个未来状态架构和实现这一目标的计划。</p><p></p><p>我们分解了关键步骤和常见的视觉效果，可以让你的团队有信心使用<a href=\"https://martinfowler.com/bliki/DomainDrivenDesign.html\">领域驱动设计（Domain-Driven Design）</a>\"来创建未来状态架构。你可以将本文作为参考来对单个系统或组合系统的架构进行现代化改造。</p><p></p><h2>从探索开始</h2><p></p><p></p><p>曾经有一段时间，我们以周期为两周的Sprint 0开始新的敏捷项目，然后直接开始编写解决方案。不幸的是，团队后来经常发现他们把时间和金钱浪费在了“把错误的事情改对”上。受设计思维（Design Thinking）和<a href=\"https://www.svpg.com/dual-track-agile/\">双轨敏捷（Dual-Track Agile）</a>\"以及像<a href=\"https://www.mobiusloop.com/\">Mobius</a>\"这样框架的影响，我们集体开阔了视野，认识到了简短探索对产品运营的重要性。</p><p></p><p>但在过去的五年里，对于各种规模的客户，从初创企业到财富100强，我们都已将领域驱动设计应用于它们的架构现代化项目中了。这些经验，再加上对团队培训的投资，帮助我们学会了如何运作有时间限制的DDD项目，从而增加了我们架构现代化项目的成功机会。</p><p></p><p>本文通过四个集成步骤来为你的团队提供架构现代化项目的蓝图：</p><p>框定问题——明确你要解决的问题、受影响的人、期望的结果和解决方案的约束。分析当前状态——探索现有的业务流程和系统架构，以建立改进基线。探索未来状态——基于有界上下文设计现代化架构，设定战略优先级，评估选项并为未来状态创建解决方案设计。创建路线图——创建一个计划，随着时间的推移对架构进行现代化改造，并使其与期望的工作流或结果保持一致。</p><p></p><p><img src=\"https://imgopt.infoq.com/articles/architecture-modernization-domain-driven-discovery/en/resources/1figure1-large-1683727412214.jpg\" /></p><p></p><p>图1——域驱动探索概述</p><p></p><h2>步骤0：战略或战术DDD</h2><p></p><p></p><p>在开始之前，确定你的工作等级：</p><p>战略DDD——示例：使用DDD对组合系统进行现代化改造。将应用程序迁移到云上，并为复杂的遗留系统创建现代架构。战术DDD——示例：使用DDD对单个系统进行现代化改造，例如重新构建Web应用程序或构建新产品。</p><p></p><p>根据我们的经验，一个小团队可以在4-6周内完成战术DDD的探索。战略DDD的探索通常需要同一团队8-12周的时间才能完成。</p><p></p><h3>探索团队</h3><p></p><p></p><p></p><p></p><h3>探索时间表</h3><p></p><p></p><p></p><p></p><p>我们发现，具有时间限制的探索创造了一种专注的紧迫感，可以帮助团队规避分析瘫痪。因为DDD使用两周的增量，所以它非常适合现有敏捷团队的日程安排。在开始之前，组建合适的团队，制定时间表，然后开始吧！</p><p></p><h2>步骤1：框定问题</h2><p></p><p></p><p>在架构现代化项目中，经常有很多口头上提到要使用的现代技术，如微服务、无服务器（serverless）、Kubernetes或服务网格等。人们往往会掩盖他们试图要解决的问题和他们希望实现的结果。但这就是我们应该开始的地方。</p><p></p><p>以两到三个小时的研讨会开始，围绕一个共享的Miro板和一系列练习，要求团队作为一个集体来澄清：</p><p>问题——我们要解决什么问题？人——谁是受影响的人？成果——成功后会是什么样的？约束——我们需要考虑哪些约束条件？</p><p></p><p>对齐这些问题，找到答案至关重要。</p><p></p><p>对于我们的医疗用品供应客户来说，问题的框定对于定义其核心系统提高弹性和可维护性的成功结果特别有帮助。只需迁移到云上并在多个区域中运行即可解决弹性问题。但是在这一步中，团队开始明白他们还需要提高长期的可维护性，因为他们复杂的架构已经有机地发展了15年。</p><p></p><p><img src=\"https://imgopt.infoq.com/articles/architecture-modernization-domain-driven-discovery/en/resources/1figure2-large-1683727412214.jpg\" /></p><p></p><p>图2——问题描述、涉众、成果和约束</p><p></p><p>将你的架构现代化与成果相结合，可以为所有相关人员阐明项目背后的“原因”。 它还建立了改进基线，并鼓励设定目标，这样你就可以随着时间的推移来衡量进展了。</p><p></p><h2>步骤2：分析现状</h2><p></p><p></p><p>框定问题后，你就可以进入第2步了。在这一步中，你需要同时关注两件事：业务流程和系统架构。</p><p>我们建议使用<a href=\"https://github.com/ddd-crew/eventstorming-glossary-cheat-sheet\">事件风暴</a>\"研讨会来阐明与作用系统相关的业务流程。首先选择要关注的主要流程或体验，例如新客户注册。接下来，协同识别该端到端流程中的每个事件。重要的是关注它当前的运作方式，而不是它将来应如何运作。然后确定对流程至关重要的事件子集，并标记这些关键事件。根据经验，仅使用关键事件，你应该就能向外行描述端到端的流程了。</p><p></p><p>对于战术DDD项目，一个单独的研讨会和一些后续的讨论通常就足够了。对于战略DDD项目，你可能需要举办多个专注于不同用户和流程的研讨会。我建议在第一周时，从一个研讨会开始，然后根据需要再安排其他研讨会。对于战略DDD，你不需要详尽地列出整个组织中的每个事件，只需列出足以让你自信地划分与作用系统组合相关的有限上下文即可。</p><p></p><p>在这些研讨会中，你应该将一种共同的语言与视觉效果配对使用，以使每个人对现今事物的运作方式有一个共同的看法。</p><p></p><p>例如，这是我们医疗用品客户的事件风暴。图3显示了围绕初始客户注册的事件。</p><p></p><p><img src=\"https://imgopt.infoq.com/articles/architecture-modernization-domain-driven-discovery/en/resources/1figure3-large-1683727412214.jpg\" /></p><p></p><p>图3——初始客户注册的详细信息</p><p></p><p>图4缩小显示了整个新的客户旅程，其中一些细节被模糊掉了。</p><p></p><p><img src=\"https://imgopt.infoq.com/articles/architecture-modernization-domain-driven-discovery/en/resources/1figure4-large-1683727412210.jpg\" /></p><p></p><p>图4——新客户旅程的事件风暴</p><p></p><p>同时，你应该深入研究当前状态的架构。我们<a href=\"https://c4model.com/\">喜欢C4模型</a>\"，因为它们很简单，建议从<a href=\"https://c4model.com/#SystemContextDiagram\">某个上下文（C1）关系图</a>\"开始，将作用系统放在中间，这样你就可以看到包括集成在内的整个生态系统了。</p><p></p><p><img src=\"https://imgopt.infoq.com/articles/architecture-modernization-domain-driven-discovery/en/resources/1figure5-large-1683727412214.jpg\" /></p><p></p><p>图5——当前状态的上下文关系图（C1）</p><p></p><p>接下来，我们将深入到创建容器（C2）关系图，并阐明不同的组件，例如Web应用程序、后端服务、数据库和消息传递。与事件风暴一样，这通常是在前两周的研讨会中完成，并根据需要进行后续的调整。尽可能准确地做到这一点至关重要，这样未来的状态建议才能以现实为基础。</p><p></p><p>对于我们的医疗用品供应客户来说，C2关系图说明了他们核心系统的复杂性，我们必须要在他们的迁移计划和长期架构现代化中考虑到这一点。图6显示了不同角色是如何与连接到订单管理系统的门户进行交互的。</p><p></p><p><img src=\"https://imgopt.infoq.com/articles/architecture-modernization-domain-driven-discovery/en/resources/1figure6-large-1683727412214.jpg\" /></p><p></p><p>图6——客户与连接到订单系统的门户进行交互</p><p></p><p>图7缩小显示了生态系统中的所有组件以及它们之间的连接方式。</p><p></p><p><img src=\"https://imgopt.infoq.com/articles/architecture-modernization-domain-driven-discovery/en/resources/1figure7-large-1683727412214.jpg\" /></p><p></p><p>图7——当前状态的容器关系图（C2）显示了当前系统的复杂性</p><p></p><p>至少，我们为每个项目创建了事件风暴、上下文关系图（C1）和容器关系图（C2）。根据项目类型的不同，我们可能需要用额外的视觉效果来对这些进行补充。</p><p></p><h2>步骤3：探索未来状态</h2><p></p><p></p><p>现在你已经对当前状态有了深入的了解，你可以继续执行第3步，根据与业务模型一致的<a href=\"https://martinfowler.com/bliki/BoundedContext.html\">有界上下文</a>\"来创建未来状态。这些有界上下文将指导团队进行架构现代化，并确保技术架构以业务的运作方式为基础。在探索有界上下文时，在业务流程和系统的作用域内寻找<a href=\"https://medium.com/clarityhub/low-coupling-high-cohesion-3610e35ac4a6\">高内聚和低耦合</a>\"的区域。</p><p></p><p>为此，我们可以克隆事件风暴，然后使用红色标记来识别潜在的有界上下文。图8显示了医疗用品供应公司的情况。</p><p></p><p><img src=\"https://imgopt.infoq.com/articles/architecture-modernization-domain-driven-discovery/en/resources/1figure8-large-1683727412214.jpg\" /></p><p></p><p>图8——带有草稿上下文的事件风暴</p><p></p><p>在决定要在哪里划定界限时，关键事件通常会提供线索，但这并不是标准公式。如有疑问，请从较少的上下文开始，然后根据反馈进行调整。在战术DDD项目中，我们通常会发现10个或更少的面向业务的上下文。对于战略DDD项目，我们发现的业务上下文可能是这个数字的两倍或三倍。记住要使用领域专家同意的术语来命名面向业务的上下文，并添加支持性的技术上下文，例如共享服务和分析。</p><p></p><h3>使用消息流细化有界上下文</h3><p></p><p></p><p>接下来，我们将创建一个带有消息流的有界上下文关系图，该关系图阐明了如何在上下文之间发送消息。图9显示了客户和订单上下文的详细视图:</p><p></p><p><img src=\"https://imgopt.infoq.com/articles/architecture-modernization-domain-driven-discovery/en/resources/1figure9-large-1683727412214.jpg\" /></p><p></p><p>图9——客户和订单上下文的详细信息</p><p></p><p>图10缩小显示了组织中所有上下文的鸟瞰图，并用带有编号的消息来说明新客户旅程的步骤。</p><p></p><p><img src=\"https://imgopt.infoq.com/articles/architecture-modernization-domain-driven-discovery/en/resources/1figure10-large-1683727412214.jpg\" /></p><p></p><p>图10——带有消息流的有界上下文关系图</p><p></p><p>DDD的核心是一个为期一天的研讨会，用于验证步骤2和步骤3的结果。将这个研讨会安排在项目的中途，并确保邀请领域专家、技术专家和主要利益相关者参与。</p><p></p><p>在此研讨会中，会发现团队带领参与者了解有界上下文和消息流，一步一个脚印地工作，并与领域专家实时澄清术语。团队将会添加并删除一些箭头。我们应该期待有关命名和事物是如何运作的激烈辩论。在领域专家努力保持一致的同时，技术人员应该将各个点连接起来，确认整个系统是组合在一起的。</p><p></p><p>在我们的医疗用品供应客户的研讨会上，他们的领域专家建议将收入周期管理（Revenue Cycle Management）拆分到自己的上下文中，而不是将其与付款人（Payer）合并。随后的讨论帮助大家理解了这两种情况之间的差异。我们实时地重新调整消息，最重要的是，整个团队在共享语言和对消息如何在上下文之间流动方面的理解保持了一致。</p><p></p><h3>在解决方案之前先探索选择</h3><p></p><p></p><p>架构现代化项目通常从基于企业愿景或战略的总体思路开始的，但从A到B的方法不止一种，因此有很多选择可供探索。在确定解决方案之前，请先花点时间探索下选择。我们选择的审查广度和分析深度取决于项目的类型和范围以及客户文化，但我们应该为这项工作安排时间。</p><p></p><p>例如，我们可能会评估是Amazon Web Services（AWS）还是Microsoft Azure更适合我们，或者评估使用云管理的数据库是否比使用在虚拟服务器上运行的数据库更具优势。我们还可以考虑用多种方法来重新构建当前系统和数据库，以便更好地使它们，并与未来状态的有界上下文保持一致。</p><p></p><p>我总是坚持先有选择再有解决方案，因为这会迫使团队通过多种方式的思考来解决问题。结果通常是每种方法的最佳方面的某种组合，这通常会产生更好的结果。</p><p></p><h3>从战略上对有界上下文进行分类</h3><p></p><p></p><p>在DDD中，我们喜欢使用<a href=\"https://github.com/ddd-crew/core-domain-charts\">核心领域图表</a>\"来清楚地确定哪些上下文是最重要的战略差异化因素，从而使我们能够相应地调整投资。在这个过程中，我们经常让执行领导参与，以揭示战略洞察力，例如：</p><p>我们应该在什么时候构建自定义软件，而不是从市场供应商那里购买？未来我们应该在哪些方面增加或减少投资？根据我们的业务战略。我们的上下文将如何随着时间的推移而演进？我们是否期望基于我们的商业模式或战略出现新的上下文？我们目前对人员和系统的投资如何与我们的有界上下文相适应？</p><p></p><p><img src=\"https://imgopt.infoq.com/articles/architecture-modernization-domain-driven-discovery/en/resources/1figure11-large-1683727412215.jpg\" /></p><p></p><p>图11——上下文的战略性分类</p><p></p><p>要回答这些问题，请先从模型复杂性和业务差异化的尺度建立今天的基线。在研讨会上，获取新的有界上下文并将它们依次拉入到关系图中，同时调整它们在x轴和y轴上的相对位置。首先要询问领导者，“你认为你的竞争优势在哪些？”并将这些上下文拉入到<a href=\"https://medium.com/nick-tune-tech-strategy-blog/core-domain-patterns-941f89446af5\">关系图的核心（Core）部分</a>\"上。接下来，问下：“哪些上下文对我们来说不是唯一的？”并将它们拉入到关系图的通用（Generic）部分中。其余上下文属于关系图的支持（Supporting）部分。它们是业务必需品，但提供的投资回报（ROI）有限。添加新上下文时继续调整关系图。最后，引入实验（Experimental）部分来作为一个可能颠覆公司商业模式或行业的大赌注。</p><p></p><p>如图11所示，我们客户的付款人（Payer）上下文是他们的“秘密武器”，也是最大的市场差异化，其次是他们的客户（Customer）上下文。另一方面，收入周期管理（Revenue Cycle Management）很复杂，但并不是他们所独有的。这种洞察力揭示了用供应商的解决方案替换他们自定义的解决方案来提高其核心系统可维护性的机会。</p><p></p><p>这个研讨会应该是一个民主的过程，其中有很多关于每个上下文在这张关系图上的位置的反复讨论。完成后，我们就有了一个独特的视觉效果，可以战略性地对架构的构建块进行分类：我们的有界上下文。根据我的经验，这通常是主管们“理解”并开始欣赏DDD带来清晰度的时候。团队也能从中受益，因为他们了解了构建自定义解决方案的意义所在（核心领域），以及商用现成（COTS）解决方案的意义所在（支持和通用领域）。该研讨会可以帮助我们避免将错误的东西构建成正确的！</p><p></p><h3>使未来状态架构与有界上下文保持一致</h3><p></p><p></p><p>确定了上下文并对其进行了战略性分类后，我们就拥有了与业务模型保持一致的未来状态架构构建块。从这里，我们就可以开始将选择转化为解决方案设计了。</p><p></p><p>在探索过程中，此时所涉及的设计主题高度依赖于我们正在处理的现代化项目的类型。对于像云迁移这样的战略DDD项目，我们将关注云基础功能、网络和安全边界以及工作负载的部署。对于战术DDD项目，比如创建一个新的Web应用程序，我们需要关注微服务、API和数据模型。</p><p></p><p>对于我们的医疗用品供应客户，设计的重点是：1）将应用程序迁移到云上；2）将其应用程序重构为与上下文保持一致的微服务，包括数据库、事件消息传递、API网关和可部署组件等。我们使用容器（C2）关系图来可视化未来状态的样子以及它与当前状态的不同之处。图12突出展示了客户和订单上下文相关的组件。</p><p></p><p><img src=\"https://imgopt.infoq.com/articles/architecture-modernization-domain-driven-discovery/en/resources/1figure12-large-1683727412214.jpg\" /></p><p></p><p>图12——客户和订单上下文相关的组件</p><p></p><p>图13缩小展示了未来状态架构的所有组件，这些组件与有界上下文保持一致，其中包括跨多个上下文的共享组件，如联邦API网关、消息总线和数据仓库。</p><p></p><p><img src=\"https://imgopt.infoq.com/articles/architecture-modernization-domain-driven-discovery/en/resources/1figure13-large-1683727412214.jpg\" /></p><p></p><p>图13——未来状态架构的容器图（C2）</p><p></p><p>本身没有用于创建和改进这些设计的研讨会。我们经常在多个小组会议中研究它们。技术负责人通常通过与提供输入和反馈的客户和专家密切合作来创建这些关系图。我们建议将所有的关系图保存在一个虚拟板上，这样每个人都可以异步地查看它们，并随着设计的演变对其进行评论。我们的团队还应该研究未来设计所考虑的技术能力和限制。</p><p></p><p>到目前为止，我们一直关注支持业务领域的有界上下文。但是支持组织基础运营的技术服务呢？如何将它们建模为有界上下文的呢？随着时间的推移，我们已经确定了几个应该添加用以支持面向业务的上下文：</p><p>共享服务上下文——面向业务上下文使用的通用DevOps工具、网络、日志记录、消息传递、监视和其他服务。安全服务上下文——身份、身份验证和其他安全工具。分析上下文——数据仓库、分析、数据转换、机器学习、报告和其他数据工具审计上下文——审计日志记录和合规性工具</p><p></p><p>有时将网络分离到单独的上下文中是有意义的，有时我们可以简单地将其包含在共享服务中，这取决于我们的基础架构。</p><p></p><p>设计活动可以很容易地耗完我们分配给它时间，所以一定要将这一步限制在几周内。这段时间足够用于创建未来状态的参考架构，它可以作为起点。我们可以在实施过程中处理剩余的设计决策。目标是到达一个“足够好”的位置，然后继续创建路线图。</p><p></p><h2>步骤4：制定路线图</h2><p></p><p></p><p>实施前的最后一步可以帮助我们定义创建未来状态架构所需的工作、顺序和时间表。我们建议使用一个简单的列表来表示灵活的时间范围（现在-Now、下一个-Next和以后-Later），而工作流或结果行则表示对工作进行分组的方式，如图14所示。</p><p></p><p><img src=\"https://imgopt.infoq.com/articles/architecture-modernization-domain-driven-discovery/en/resources/1figure14-large-1683727412214.jpg\" /></p><p></p><p>图14——带有建议的未来状态路线图</p><p></p><p>对于我们的医疗用品供应客户，我们首先确定了一个重要的里程碑，需要在“现在”阶段结束时完成：他们的所有应用程序都需要“准备好迁移”，他们的云基础必须准备好安全地承载工作负载。就此含义达成一致，并迅速制定路线图的初。锚定这一里程碑有助于帮他们确定在“现在”阶段必须完成的事情，以及可以等到“下一个”和“以后”再做的事情。图15显示了路线图上的一些初始项目。</p><p></p><p><img src=\"https://imgopt.infoq.com/articles/architecture-modernization-domain-driven-discovery/en/resources/1figure15-large-1683727412214.jpg\" /></p><p></p><p>图15——路线图中“现在”阶段的详细信息</p><p></p><p>有了路线图草案之后，将其社交化以在审查会议和工作会议期间从利益相关者那里获得反馈。 我们通常在探索阶段结束前两到三周开始制定路线图，这样在向执行涉众展示路线图之前，我们有足够的时间来收集和迭代工作团队的反馈。</p><p></p><h2>阐明架构的演进步骤</h2><p></p><p></p><p>DDD的最后一个阶段是创建架构从当前状态到未来状态演进的清晰视图。我们应该在制定路线图时并行地进行这项工作，因为技术负责人将创建代表架构在“现在”和“下一个”里程碑上的临时状态视觉效果图。团队应该讨论每个可视化效果图，以澄清每个演化步骤中所需的更改，并在工作时修改路线图。</p><p>当人们转向领域驱动设计时，我们经常看到<a href=\"https://learn.microsoft.com/en-us/azure/architecture/patterns/anti-corruption-layer\">反腐模式</a>\"。这是一个软件层，它将新的基于上下文的有界架构与现有架构隔离开，在我们发展到未来状态时充当有用的桥梁。虽然这一软件生命周期是短暂的，但在我们完成过渡之前，它都可以存在。设计、编码、测试和部署该软件的额外工作为我们提供了从当前状态过渡到未来状态的时间，并减少了一次与重写所有系统相关的风险。</p><p></p><h2>从探索到交付</h2><p></p><p></p><p>在短期内，我们的团队可以使用DDD来：</p><p>明确我们需要解决的问题，受影响的人，期望的结果和解决方案的约束。分析我们当前的业务流程和系统架构。确定有界上下文和消息流。从战略上对上下文进行分类，使投资和决策保持一致。设计一个与有界上下文保持一致的新的未来状态架构。创建一个路线图，使当前到未来的状态与业务价值保持一致。可视化架构的演进步骤。</p><p></p><p>探索后，我们应该将结果提炼成一个可操作的计划，其中包括（但不限于）：</p><p>基于路线图构建史诗产品的待办事项。为“现在“阶段制定发布计划。设置具有访问权限的开发环境。对齐团队规范和会议节奏。进行额外的研究和设计工作，以完善架构。</p><p></p><p>使用共享的数字白板来完成这项工作可以提供清晰度和透明度，并为以后加入该项目的任何人提供了更简单的入职培训。我目前正在为DDD中的所有步骤制作一个Miro模板，并将在发布后更新本文的链接。</p><p></p><h2>开始使用DDD</h2><p></p><p></p><p>项目的成功始于强有力的探索能力。在开始另一个架构现代化项目之前，请考虑使用我们的四步DDD。这种协作方法专为跨职能团队而设计，能以透明的方式将战略与架构结合起来，同时为领导者和技术人员构建了一种共享语言。在短期内，你即可获得清晰的洞察力来指导你的项目，这将有助于节省时间、精力和金钱。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/architecture-modernization-domain-driven-discovery/\">https://www.infoq.com/articles/architecture-modernization-domain-driven-discovery/</a>\"</p>",
    "publish_time": "2023-07-13 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "不到一年，Istio项目正式从 CNCF 毕业",
    "url": "https://www.infoq.cn/article/akP8x4df0wUtPZeGKaPh",
    "summary": "<p>7 月12日，Istio项目正式从 CNCF 毕业。Tetrate 创始人Varun Talwar在<a href=\"https://tetrate.io/blog/istio-service-mesh-graduates-cncf/\">博客</a>\"中写道，Istio 现在是最快毕业的 CNCF 项目。Tetrate 由 Istio 创始团队成员发起，旨在促进和扩大服务网格的采用，自成立以来一直是 Istio 的主要贡献者。</p><p>&nbsp;</p><p>Varun Talwar表示，“这一具有里程碑意义的时刻代表了 Istio 作为云原生领域重要组成部分的成长和成熟，为部署最广泛的服务网格开启了激动人心的新篇章。Kubernetes 是第一个在 2018 年获得毕业资格的项目。如今，距离 Istio 作为孵化项目进入 CNCF 还不到一年，Istio 就毕业了，这是 CNCF 历史上最快的项目。”</p><p></p><h2>Istio 的发展历程</h2><p></p><p>&nbsp;</p><p>Istio 项目始于 2016 年，最初由 Google、IBM 以及构建 Envoy 代理的 Lyft 团队共同开发。2018 年 6 月，Istio 发布了 1.0 版本，2019 年，Istio 成为整个 GitHub 中增长速度第四快的开源项目。目前，已经有 190 多家公司承诺使用 Istio，其中 20 多家供应商为其 Kubernetes 平台提供托管的 Istio 产品或插件。</p><p>&nbsp;</p><p>2022年4月，谷歌提议将 Istio <a href=\"https://www.infoq.cn/article/tfJtw1pWmbEIFNSxDK8q\">捐赠给 CNCF</a>\"，该想法得到了社区众多开发者的关注和支持。经过近半年的尽职调查，9 月 28 日，CNCF正式宣布技术监督委员会(TOC) 已投票用过将Istio作为 CNCF 孵化项目。</p><p>&nbsp;</p><p>根据此前介绍，当前 Istio 社区重要的贡献来自：</p><p>&nbsp;</p><p>技术公司和云计算厂商，包括红帽、思科、VMware、英特尔、华为、腾讯、阿里巴巴和 DaoCloud为将 Istio 解决方案推向市场而成立的公司，包括 Tetrate、Aspen Mesh 和 Solo.ioIstio 的终端用户，包括 Auto Trader UK、Salesforce、SAP 和 Yahoo!</p><p></p><h2>Istio 毕业对用户意味着什么？</h2><p></p><p>&nbsp;</p><p>对于那些已经将 Istio 用作支持数千次部署的基础设施核心部分的人来说，CNCF 毕业是对他们将 Istio 视为现代应用程序网络的关键组件的愿景的验证。对于那些希望实现基础设施现代化的人来说，Istio 的毕业地位是一个强烈的信号，表明它是在生产中扩展关键应用程序的经过验证的强大选择。&nbsp;</p><p>&nbsp;</p><p>​​对于用户来说，Istio 的毕业状态具有以下几个含义和优势：</p><p>&nbsp;</p><p>稳定、成熟。潜在用户可以对该项目的稳定性充满信心，因为知道它已经满足 CNCF 严格的毕业标准。安全。Istio在及时发布安全公告以及业界最重要的安全思想领导者的战略指导方面拥有悠久而稳健的记录。生产准备就绪。毕业状态向用户保证 Istio 具有在生产环境中使用所需的功能、可扩展性和稳健性。采用和生态系统。 毕业项目在云原生生态系统中获得了广泛采用。它们被各种规模和行业的组织广泛认可和使用。Istio 的用户受益于其他采用者的经验。分级项目的广泛采用还培育了一个充满活力的工具、扩展和集成生态系统，可以进一步增强其功能。CNCF 支持和治理。毕业项目也受益于 CNCF 的支持和治理。CNCF 为协作和社区参与提供资源、指导和框架。用户可以对该项目的长期可持续性和发展路线图充满信心，因为它是由致力于推进云原生技术的可信组织支持的。社区和企业支持。社区提供的集体知识、经验和支持提供了广泛的用户群、对文档、论坛和用户组等资源的访问以及在故障排除和解决问题方面的潜在帮助的好处。Istio 生态系统还享有许多供应商（包括 Tetrate）提供的企业支持，为那些需要保证在需要时获得专家支持的组织提供支持。</p><p>&nbsp;</p>",
    "publish_time": "2023-07-13 11:12:18",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]