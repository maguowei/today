[
  {
    "title": "技术栈变化时的基础原则与潜在陷阱",
    "url": "https://www.infoq.cn/article/Q8DFMFKY4bTMwEBvcl7j",
    "summary": "<p>无论哪种公司都需要管理资金、技术，以及风险。其中，初创公司所要面临的巨大风险使其不得不转变传统理念，将风险转化为前进的动力，以更快地获取经验。初创公司的起始可以选择<a href=\"https://en.wikipedia.org/wiki/Wizard_of_Oz_experiment\">绿野仙踪</a>\"<a href=\"https://en.wikipedia.org/wiki/Wizard_of_Oz_experiment\">测试</a>\"<a href=\"https://en.wikipedia.org/wiki/Wizard_of_Oz_experiment\">法</a>\"，或者是从一个不被大公司看好的 MVP <a href=\"https://hackernoon.com/in-2-hours-how-to-build-and-validate-startup-idea-with-a-landing-page-mvp-xm153312\">落地页</a>\"开始。</p><p>&nbsp;</p><p>我在创业之初时，对自己无法更快地做出技术栈相关决策非常不满。如今，我已经在 TeamViewer 工作了好几年，在给五百强公司做过几个项目后，学到了不少技巧，并愿意在此分享出来。</p><p>&nbsp;</p><p>这篇文章将引用<a href=\"https://itrevolution.com/the-unicorn-project/#oe8a3468152c8\">《独角兽项目》</a>\"这本书中的虚构角色 Erik，以采访的形式进行分享。Erik 是创建了“<a href=\"https://itrevolution.com/the-three-ways-principles-underpinning-devops/\">DevOps 的三种方法的</a>\"”的传奇人物，希望在这次采访中他能够帮到我们。</p><p>&nbsp;</p><p>Stefan Miteski：Erik，让我们开门见山直切入主题吧。团队在构建MVP时，什么时候可以从“尽可能快”的理念转换为构建可延展性更强、更适于维护、可持续性更高的模式呢？</p><p>&nbsp;</p><p>Erik：首先，不是所有的构想都需要代码来实现，用最便宜、最快的就行。我更倾向于选择能够最快完成任务的技术，哪怕这意味着我要用的某个低代码平台需要我在后续重写全部的代码，也都不是问题。所以这其实是一个基于团队技术背景的决定。如果团队中有人懂 NodeJS，那就选择 NodeJS，如果有人会 Python 那就用 Python。在这个阶段你不需要考虑最佳的质量过程、CI/CD，或者最佳敏捷方法。这些多余的累赘是初创公司在起始阶段不应思考的问题。在 MVP 阶段，你只需要做在黑客马拉松里会做的事。</p><p>&nbsp;</p><p>简单来说，只有在拥有可能的收入资金后，可扩展性和流程才会变得重要。</p><p>&nbsp;</p><p>Miteski：假设钱不是问题，那么在大公司中开发新项目这种情况呢？</p><p>&nbsp;</p><p>Erik：这种情况也类似。在确保生存能力后再考虑可延展性。如果项目还在试水阶段，那就按照 MVP 的规划运行。如果项目已经稳定了，那这时候再考虑可延展性。</p><p>&nbsp;</p><p>Miteski：确实，这么说就很明确。我常在指导初期创业者时，遇到很多的失败案例都是因为过早地在可延展性上消耗了太多的精力。由于构建的产品没人需要而导致的失败率（<a href=\"https://www.cbinsights.com/research/startup-failure-reasons-top/\">35%</a>\"）要远高于错误的技术决策所导致的创业失败（8%）。</p><p>&nbsp;</p><p>那么在扩容阶段呢？我们现在已经有了稳定的收入，终于可以抛弃初期乱糟糟的代码垃圾场了，这时我们应该选择什么技术呢？</p><p>&nbsp;</p><p>Erik：根据<a href=\"https://en.wikipedia.org/wiki/Conway%27s_law\">康威定律</a>\"，“设计系统的组织被限制生产设计，这些设计是这些组织的通信结构的副本。”所以在这个阶段，我们应考虑的是组织整体的结构设计，而不仅仅是技术栈或软件架构。组织需要的团队数量、团队间的合作模式是什么？如何保持团队间的统一性？测试的流程是什么？<a href=\"https://www.atlassian.com/continuous-delivery/principles/continuous-integration-vs-delivery-vs-deployment\">CI/CD</a>\"、发现策略怎么制定？如何实现营销和开发工作的一致性？如何确保企业文化的健康发展？如何获取并<a href=\"https://adevait.com/blog/workplace/first-week-new-product-owner?utm_source=linkedin&amp;utm_medium=feed&amp;utm_campaign=content\">整合</a>\"人才？</p><p>&nbsp;</p><p>所有的技术都是建立在问题解决的基础上，当然项目也是如此。然而，网页应用的后端该用 Java 还是 C# 开发？数据库该用 SQL 还是 MySQL？这类问题的答案可能就不是那么的明显了。最直接的答案是在“<a href=\"https://www.infoq.com/emergent_architecture/\">应急架构原则</a>\"”和“<a href=\"https://books.google.mk/books?id=MIHsDwAAQBAJ&amp;pg=PA74&amp;dq=A+strategy+of+not+making+a+premature+decision+but+instead+delaying+commitment+and+keeping+important+and+irreversible+decisions+open+until+the+cost+of+not+making+a+decision+becomes+greater+than+the+cost+of+making+a+decision.&amp;hl=en&amp;sa=X&amp;ved=2ahUKEwiVzOHO6_D3AhWNSfEDHa0ICEMQ6AF6BAgJEAI#v=onepage&amp;q=A%20strategy%20of%20not%20making%20a%20premature%20decision%20but%20instead%20delaying%20commitment%20and%20keeping%20important%20and%20irreversible%20decisions%20open%20until%20the%20cost%20of%20not%20making%20a%20decision%20becomes%20greater%20than%20the%20cost%20of%20making%20a%20decision.&amp;f=false\">最后责任时刻</a>\"”规则的前提下，将决定权交给团队，并从功能性和非功能性两方面深入研究。</p><p>&nbsp;</p><p>其中，非功能性要求有：</p><p>线上社区的规模。如果你选择了 C# 而不是什么新奇的编程语言，那么除了完善的文档之外，你还将拥有来自 Jon Skeet 等人的支持，他在 StackOverflow 上已经有超过<a href=\"https://stackoverflow.blog/2018/01/15/thanks-million-jon-skeet/\">一百万</a>\"的声望点数。也就是说，你能在互联网上找到 C# 语言相关问题答案的几率要远高于其他小众语言。除此之外你还要考虑这种语言可用的库有多少，支持是否成熟等问题。用工市场的规模。附近大学的学生学的都是什么语言？当然，你也可以针对需要的技术对员工进行培训，但这又要搭进去大量项目开发时间。再加上如果你想要使用的语言并不常用或者是过时很久了，那么你还需要更高的预算以支付更高的薪酬。系统的寿命。人类的寿命大概70年左右，而且还需要9个月才能从胚胎发育成人。如果我们想让系统持久存活，也需要类似的方法。这应该是长期的技术策略，而不是取决于我们所做的第一个决策。</p><p>&nbsp;</p><p>在上线之后再做出系统重大改动有时感觉像在飞行时修理飞机。因此，将对系统而言至关重要的决策推迟到“最后责任时刻”是很明智的。</p><p>&nbsp;</p><p>Miteski：那么什么是“最后责任时刻”呢？</p><p>&nbsp;</p><p>Erik：这个概念来源于<a href=\"https://www.infoq.cn/topic/lean\">精益</a>\"开发。返工的代价要远高于延迟的成本。而敏捷开发提倡经验主义——在实践中学习。如果你过早地做出不可逆转的决定，那么要承担的风险也会加倍。因此，我们需要谨慎决策，将其中可以学习的部分挑出来，以在做出重大决策前降低风险。</p><p>&nbsp;</p><p>Miteski：\"延迟\"听起来像是与精益初创的原则相悖？毕竟速度是我们的主要竞争优势。</p><p>&nbsp;</p><p>Erik：延迟决定不代表原地不动地思考问题。我们要围绕这个决策对架构进行探索，了解业务情况、用户需求，这样才能在最后责任时刻做出最佳选择。我们还可以做个模拟系统，并围绕其构建各种 API。</p><p>&nbsp;</p><p>Miteski：那么，业务情况又是怎么影响技术栈选择的决策呢？</p><p>&nbsp;</p><p>Erik：可以有很多方面：</p><p>确定你的竞争优势，以及可以为这种优势提供最好支持的技术。将与组织竞争优势无关的各种技术解决方案交由第三方处理，掌控并构建属于自己的技术栈，后者才是竞争优势的一部分。这种理念适用于所有技术及非必要服务。但要注意，不要让你的供应商发展成自己的竞争对手。当年微软和英特尔可都曾是 IBM 的供应商。</p><p>&nbsp;</p><p>如果不是必须采用裸机的话，那么云供应商是个不错的选择。但该选哪个供应商呢？还是那句话，这要取决于业务的本质。如果你的客户非常在意云服务在事故期间的反应速度，那么就仔细研究它们的 SLA 以及可以建立的合作伙伴关系类型。如果不是，那就以它们能提供的服务为标准参考。从基础的 <a href=\"https://aws.amazon.com/cloudwatch/\">CloudWatch</a>\" 到内容丰富的 <a href=\"https://en.wikipedia.org/wiki/Kubernetes\">Kubernetes</a>\"之类，哪一种可以持续加快你的部署速度？最后，不要忘了价格因素。选择云合作伙伴就像选择你初创公司的合伙人，不要着急，不要急于求成，这样也方便将来深度集成他们的服务。</p><p>&nbsp;</p><p>Miteski：那么，随着组织的成熟发展，我们可能会面临什么陷阱吗？</p><p>&nbsp;</p><p>Erik：首先是电车陷阱。这种陷阱通常会出现在不健康的组织环境中。我听说过的一个例子是，曾经有位工程师负责了某个科技巨头项目中绝大部分的主要功能，并借此要挟公司涨薪。在没有得到想要的结果后他离开了公司。最终公司迫于无人能维护而只能重做整个项目。</p><p>&nbsp;</p><p>导致竖井的原因之一是管理层对快速交付的施压。因为在高压环境下，拥有特定技术背景的开发者会效率更高，所以在处理技术负债时，我们还需要将反竖井纳入考虑范围内。</p><p>&nbsp;</p><p>但无论竖井为什么会出现，我们都需要意识到它们的存在是非常危险的。甚至很多大公司都会犯下把多位专业领域的工程师放在同一个篮子里的错误，万一这个篮子出了什么事，可能会影响到公司的存亡。如果这是你的公司正在做的事，那么是时候考虑换种方法做事了。将技术知识传播开，应用代理策略，让不在这个篮子里的其他工程师也开始做这部分的工作，只在“代理工程师”们被问题卡住时再咨询篮子里的专家。这种方法会短暂降低效率，但它确保了长期的鲁棒性，而且后续我们的工作效率会更高，你看是不是这个道理？</p><p>&nbsp;</p><p>Miteski: 确实。</p><p>&nbsp;</p><p>Erik：另一个要注意的是奶狗陷阱。有时候天真烂漫的想法会让我们沉浸其中无法自拔。就像是看着可爱的小奶狗，我们会因为它们当时可爱的外表和一瞬间的心动而决定收养它们，但却忽略了它们在未来十多年中的成长，并且在这期间需要不断地照料。在很多情况下，技术解决方案也会持续存在超过十年，我们在做技术决策时也需要将这点纳入考量范畴。我们不能为了某个工程师酒后天马行空的想法或产品经理在飞机上看杂志而脑洞大开的灵感，就把未来全部贡献进去。Visual FoxPro 在上世纪九十年代听起来像是个绝赞的新技术，但它并没有经受住时间的考验。类似的例子在科技坟地里并不少见，而随着现在前沿新科技发展的步伐，在未来这片坟地大概是不会寂寞了。</p><p>&nbsp;</p><p>但反过来说，将所有新想法和实验性项目全部拒之门外也是很危险的。用微服务或低耦合系统，把系统中独立的一部分作为新技术的试验场，这种方法很适合实验性创新。如此一来，我们就可以在生产环境中实验新技术，而由于试验场并不与主要功能挂钩，且位置也不是很关键，后续如果需要关闭这部分功能也不会影响到客户使用。仍处于开发阶段的技术很危险，但我们可以用这个试验场来获得技术实操的经验，测试技术栈在现实场景中的表现并完善对它的认知。</p><p>&nbsp;</p><p>Miteski：如果遵照“最后责任时刻”规则，并让组织中的所有团队选择自己想要的技术栈，我们就会遇到一个困境，该如何平衡团队选择的自主性和公司技术栈的统一性呢？</p><p>&nbsp;</p><p>Erik：组织的管理层应当设定一个技术方向，并设立一套宽泛的原则以做决策。公司所有团队都使用类似的技术栈所带来的优势很明显：在购买软件使用权时能够有更好的议价；在新需求出现时，团队能够迅速重组，提高组织的适应性；技术挑战一经解决，技术知识点传递给公司上下全体成员。</p><p>&nbsp;</p><p>这么做也有缺点。随着市场需求和公司所提供的解决方案复杂化，对团队技术栈的多样性要求也就越高。也就是说，基础原则是确立一个技术栈方向，但同时也要给予团队做出偏离指示的自治能力。不过团队也要阐述清楚不遵循公司技术大方向的原因所在。</p><p>&nbsp;</p><p>Miteski：微服务之类的<a href=\"https://en.wikipedia.org/wiki/Loose_coupling\">低耦合</a>\"方法可以让不同团队使用不同的编程语言搭建服务或系统部件，这种层级的灵活性的确可以带来一定的优势，那么我们应该在何时利用这种优势呢？这种情况下是否也有基础准则？通常情况下工程师都会知道该怎么做，但在创建新的技术栈时他们的目的可能并不单纯。我见过有的工程师想用<a href=\"https://go.dev/\">Go</a>\"来编写服务，仅仅因为他们觉得Go这个新语言看起来很酷，想要学习Go。</p><p>&nbsp;</p><p>Erik：低耦合基本不会出错，而多种编程语言也会促进公司发展。最关键的是变化，从一个微小的变化开始，如果效果好，那我们就从中学习，鼓励其他团队在其基础上发展。根据公司及代码的规模不同，公司整体的技术栈向一个新方向转变所需时间也各不相同。持续的演变与渐进的转化总比一刀斩从头开始的痛苦要小。这种情况下我们的基本原则是，限制并规划这些新语言或新技术的探索，在系统或服务的非关键部分进行测试。随时切断这些实验服务而不影响主要功能。让发展与技术变革从服务末梢开始，从最微不足道的影响逐步向服务中心靠拢，让全部系统和代码基础缓慢发生变化。在已经开始了向内推动且尚未到达系统核心的变更浪潮后，我们很少会再开创全新的发展潮流。</p><p>&nbsp;</p><p>聚焦于让我们能够以可持续的方式高速发展的东西，同时也不要忽视运维的作用，这样才能<a href=\"https://soonersaferhappier.com/book/\">更快、更安全，也更快乐地</a>\"交付更高价值的产品。</p><p>&nbsp;</p><p>Miteski: 多谢！我很享受这次的对话。我相信任何的公司都应该不时来读一读这篇文章。</p><p>&nbsp;</p><p>Erik: 谢谢，记得在你重温<a href=\"https://www.amazon.com/The-Unicorn-Project-Gene-Kim-audiobook/dp/B0812C82T9/ref=sr_1_1?keywords=the+unicorn+project&amp;qid=1653145659&amp;s=books&amp;sprefix=the+unico%2Cstripbooks-intl-ship%2C259&amp;sr=1-1\">《独角兽项目》</a>\"时再来看看我。</p><p>&nbsp;</p><p>---</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/articles/tech-stack-decisions/\">Rules of Thumb &amp; Traps When Approaching Tech Stack Decisions</a>\"</p>",
    "publish_time": "2022-08-24 08:54:15",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "亚马逊云科技宣布Lambda分级定价",
    "url": "https://www.infoq.cn/article/0tVa0oXspxw2F7jJR1eC",
    "summary": "<p>最近，<a href=\"https://www.infoq.cn/topic/AWS\">亚马逊云科技</a>\"宣布了Lambda分级定价。Lambda是一种无服务器、事件驱动的计算服务，开发者可以在无需配置或管理服务器的情况下运行任意应用程序或后端服务代码。分级定价可以减少在Lambda上运行大型工作负载的月成本。</p><p>&nbsp;</p><p>在2020年早些时候，亚马逊云科技宣布将Lambda加入到<a href=\"https://www.infoq.com/news/2019/11/aws-pricing-savings-plans/\">俭省计划</a>\"中，随后，在re:Invent大会上也将账单粒度降低到1毫秒。此外，在2021年9月，亚马逊云科技发布Graviton2，支持在ARM上运行函数，并对计算资源的价格做了改进。</p><p>&nbsp;</p><p>新的月度Lambda函数（使用量单位为GB-秒）<a href=\"https://aws.amazon.com/about-aws/whats-new/2022/08/aws-lambda-tiered-pricing/\">分级定价</a>\"为客户提供了两个额外的定价级别，针对阅读按需函数使用总和进行折扣。在x86和Arm（由AWS Graviton提供支持）上运行的函数可以获得20%的折扣。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/f8/f8216f8878198db971009aedb89c565f.png\" /></p><p></p><p>来源：&nbsp;<a href=\"https://aws.amazon.com/blogs/compute/introducing-tiered-pricing-for-aws-lambda/\">https://aws.amazon.com/blogs/compute/introducing-tiered-pricing-for-aws-lambda/</a>\"</p><p>&nbsp;</p><p>亚马逊云科技Serverless Hero Yan Cui在推特上写道：</p><p>&nbsp;</p><p></p><blockquote>Lambda领域的新举措：分级定价。已经等了很久了。如果你大规模运行Lambda，这就非常有用。例如，6B GB-秒 = 对256MB函数进行120B调用（平均持续时间为200毫秒）。但是，大多数人都达不到折扣标准。</blockquote><p></p><p>&nbsp;</p><p>在亚马逊云科技的一篇关于AWS Lambda定价分级的文章中，首席无服务器解决方案架构师Heeki Park提供了一个例子：</p><p>&nbsp;</p><p></p><blockquote>在进行分级定价时，计算持续时间部分低于6B GB-秒就没有任何额外的价格折扣。</blockquote><p></p><p>&nbsp;</p><p>其他公共云供应商（如微软和谷歌）提供基于消费（无服务器）的函数。客户可以获得Azure函数40000 GB-秒的免费使用权，而谷歌云函数提供了一个免费层，除了200万次调用之外，还提供了400000 GB-秒、200000 GHz-秒的计算时间和每月5GB的互联网出口流量。在节省成本方面，Azure函数和谷歌云函数不像AWS Lambda那样提供分级定价。</p><p>&nbsp;</p><p>Contrast Security首席产品官Steve Wilson告诉InfoQ：</p><p>&nbsp;</p><p></p><blockquote>我相信，亚马逊云科技的这一定价变化表明，客户比以往任何时候都更喜欢使用Lambda——随着定价策略的改进，这一趋势将更加明显。在Contrast Security，我们看到开始关注如何保护基于Lambda的工作负载，这说明Lambda已经成为关键任务应用的主流。</blockquote><p></p><p>&nbsp;</p><p>此外，用户rmbyrro在Hacker News关于AWS Lambda分级定价的帖子中表示：</p><p>&nbsp;</p><p></p><blockquote>这将有助于Lambda的采用。无服务器（财务方面）的要点是用可变成本交换固定成本。</blockquote><p></p><p>&nbsp;</p><p>然而，另一位用户arinlen反驳说：</p><p>&nbsp;</p><p></p><blockquote>我不确定AWS Lambda是不是这样。它的主要用途是作为AWS服务之间的粘合代码，因此它的免费层有很大的空间。我确信供应商锁定比传统的云计算卖点在其中扮演了更重要的角色。</blockquote><p></p><p>&nbsp;</p><p>最后，Lambda<a href=\"https://aws.amazon.com/lambda/pricing/\">定价页面</a>\"列出了所有区域和架构的定价。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/08/aws-lambda-tiered-pricing/\">AWS Announced Tiered Pricing for Its Serverless Offering Lambda</a>\"</p><p>&nbsp;</p>",
    "publish_time": "2022-08-24 08:58:52",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "腾讯云大数据峰会暨 Techo TVP 开发者峰会",
    "url": "https://www.infoq.cn/article/kOFzB4BaYfgC3VwVTRFE",
    "summary": "<p>本次峰会上，腾讯云大数据首次对外宣布“智理无数，心中有数”的品牌理念。同时，为推动云原生大数据技术发展，共建云原生大数据生态，腾讯云联合英伟达、Elastic、StarRocks、Apache Alluxio、SelectDB 等多家软硬件技术厂商与开源社区，共同发起成立云原生大数据技术生态联盟。</p>",
    "publish_time": "2022-08-24 10:26:46",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "任正非内部讲话：活下去是主要纲领，在市场上的收缩要坚决",
    "url": "https://www.infoq.cn/article/fQVLE801cGBixRGqsflu",
    "summary": "<p></p><h3>以利润为中心，不仅以收入为目标</h3><p></p><p></p><p>我们‍‍要看到公司面临的困难以及未来的困难，未来十年应该是一个非常痛苦的历史时期，全球经济会持续衰退。</p><p></p><p>现在由于战争的影响以及美国继续封锁打压的原因，全世界的经济在未来3到5年内都不可能转好，‍‍加上疫情影响，全球应该没有一个地区是亮点。那么消费能力会有很大幅度下降，‍‍对我们产生不仅是供应的压力，而且还有市场的压力。‍</p><p></p><p>在这样的情况下，<a href=\"https://www.infoq.cn/topic/huawei\">华为</a>\"对未来过于乐观的预期情绪要降下来，2023年甚至到2025年，一定要把活下来作为最主要的纲领‍‍活下来，有质量的活下来，这个口号很好，每个业务都要去认真执行。</p><p></p><p>‍‍如果按计划在2025年我们会有一点点希望，那么我们要先想办法度过这三年艰难时期，‍‍生存基点要调整到以现金流和真实利润为中心，不能再仅以销售收入为目标。‍‍</p><p></p><p>我们的生命喘息期就是2023年和2024年，这两年我们能不能突围，现在还不敢肯定，‍‍所以每个口都不要再讲故事，一定要讲实现，‍‍尤其在进行业务预判时，不要再抱幻想，讲故事骗公司，损失要从你们的粮食包中扣除，‍‍首先要活下来，活下来就有未来。‍</p><p></p><h3>市场收缩要坚决：理想从“全球化”转为“活下去”</h3><p></p><p></p><p>2023年预算要保持合理节奏，盲目扩张，盲目投资的业务要收缩或关闭。</p><p></p><p>‍‍全公司都要有效的使用预算，不能盲目一切将项目关闭，节约出来的人力压到前线去，‍‍继续优化机关业务，合理编制人员<a href=\"https://xie.infoq.cn/article/c1be33a2bc83d6b776dbb6186\">ICT基础设施</a>\"，还是我们的黑土地粮仓，‍‍一定要收缩到一个有竞争力的复杂硬件平台与复杂软件平台，‍‍挂在上面搭车的项目都要摘出来。</p><p></p><p>军团是建基础信息平台，‍‍更好的卖ICT，基础设施卖底座不是做生态，终端是未来我们崛起突破的基础，但不能盲目。‍‍现在要缩小战线，集中兵力打歼灭战，提升盈利。‍</p><p></p><p><a href=\"https://www.infoq.cn/topic/huaweicloud\">华为云</a>\"计算要踏踏实实以支撑华为业务发展为主，走支持产业互联网的道路。‍‍数字能源在战略机会窗上加大投入，创造更大价值，收缩机关，加强作战队伍。</p><p></p><p><a href=\"https://www.huawei.com/cn/giv/intelligent-automotive-solution-2030\">智能汽车解决方案</a>\"不能铺开一个完整战线，要减少科研预算，‍‍加强商业闭环，研发要走模块化的道路，‍‍聚焦在几个关键部件作出竞争力，剩余部分可以与别人连接。</p><p></p><p>除了为生存下来的连续性投资以及能够盈利的主要目标，‍‍未来几年内不能产生价值和利润的业务应该缩减或关闭，把人力物力集中到主航道来。</p><p></p><p>我们要面对现实，不要有太遥远太伟大的理想，快刀斩乱麻，富余人员调整到战略预备队，‍‍再把他们组合到合理岗位上去抢粮食。‍</p><p></p><p>一定要把边缘业务从战略核心里抽出来。边缘业务抽出来以后，我们先评价一下能不能做好，‍‍还需要多少资源才能做好，做不好资源消耗巨大的业务不如关闭以后开放让别人去做，我们不要包打天下，‍‍如果确实是在战略管道里的，我们必须做，又做得不够好的就改组作战队伍换干部。</p><p></p><p>‍‍如果出现了一些机会窗，我们扩大了战略预备队和干部专家战略资源池，‍‍组成突击队去机会窗突击。</p><p></p><p>坚持实事求是，在市场上的收缩要坚决。我们以前怀抱全球化理想，立志为全人类服务，‍‍现在我们的理想是什么？活下来，哪里有钱就在哪里赚一点。从这个角度出发，我们要在市场结构上调整，‍‍研究一下哪些地方可以做，哪些地方应该放弃。‍</p><p></p><p>‍第一，聚焦价值市场价值客户，‍‍把主要力量用于正态分布曲线中间的一段，一部分国家‍‍我们在市场上就彻底放弃了。我们也有肥肉市场，把原来啃骨头的人员调去啃肥肉。‍</p><p></p><p>第二，对于艰苦国家和地区，作为将来要提拔的新生干部的考核锻炼基地，‍‍有些国家产量少，我们虽然还要做，但是否不再派士兵守在雪山顶，因为下来后他还是士兵，‍‍雪山顶是考验人的，有潜力的新生干部下来就有机会升军长，因为小国容易综合化，‍‍他从概算预算、合同、投标交付、工时定额计算，解决方案一起干都做完了。‍‍</p><p></p><p>回来在干部履历表上一天升将军11道门槛就过了5道6道。当然有些员工守边疆已经很长时间，‍‍回国收入减少，还涉及孩子上学问题，他自愿留在这些国家继续干，也不要强行调回国。‍</p><p></p><p>第三，海外回国的员工要优先获得技能培训和上岗机会。从海外归来的员工要有一个保护期，保护他在上岗，‍‍保证他获得一定的培训。</p><p></p><p>艰苦国家的人员技能可能比国内差，因为他没有现实作战环境，怎么进步呢？‍‍就如高原上的士兵，虽然他站得很高，但并没有吸收什么宇宙能量，他们付出了代价，‍‍不能一回国就考试，然后就淘汰了，这样艰苦地区就没人愿意去，‍‍所以我们要保证回国员工有岗位安排，有宽松的学习时间，至于这段时间他的能力没有追赶上来就另当别论。‍</p><p></p><p>财务要做好现金流的规划，危难时期主要是要造血，‍‍我们虽说2025年会好转，但万一到时没有炮弹怎么办？所以那是美好的计划，我们要有安全的粮食措施。</p><p></p><p>公司有两大支出给员工分红，包括工资稳定，这是增强内部的信心和凝聚力，‍‍给银行还贷，这是增强社会对我们的信任度。‍‍‍‍</p><p></p><p>已经存在较为明显的潜在风险的项目，不要再抱有幻想，要尽快浮出来，让审计做结论，将风险量化。</p><p></p><p>与此同时依然可以继续管理这些已经被消除的资产，‍‍通过管理让风险变为适当的收益，我们心里不要带有一种泡沫幻想，一看报表挺好，决心就挺大，‍‍但到时实际赚不到钱。</p><p></p><h3>如果挣不到粮食，敢于不发奖金</h3><p></p><p></p><p>夯实责任，‍‍奖金升职升级与经营结果挂钩，让寒气传递到每个人。‍‍</p><p></p><p>第一，在今年和明年的考核中要提升现金流和利润的权重，宁可销售收入下滑一些，但利润和现金流要增长，‍‍经营性利润增长的奖金要多一点，激励大家去争抢利润。‍</p><p></p><p>‍第二，各责任中心签署考核责任书，‍‍公司要针对基于KPI的对等奖赏机制，明年正常升职升级不变，‍‍但要加强与责任对等的挂钩，一年一年让人感觉到天冷，但我们的转换要有耐心热情。</p><p></p><p>我曾给常务董事会讲过，基本工资框架不要变，这是一个刚性指标，‍‍但员工优秀了，可以升职升级，奖金可以有很大弹性。为什么有弹性？鼓励大家上战场抢粮食去，‍‍前线和机关不一样。‍</p><p></p><p>‍第三，今年各个业务的奖金一定要拉开差距，‍‍绝不允许平均逼迫大家实现抢粮食的短期目标。过去公司的政策是基本摆平，‍‍大家没有感觉到冬天的寒冷，每个人都盖被子，只是厚一点薄一点而已。‍‍</p><p></p><p>今年年底利润和现金流多的业务，‍‍奖金就多发一些，不能创造价值的业务就是很低的奖金，甚至没有逼这个业务自杀，把寒气传递下去。</p><p></p><p>目前我们要活下来，不是为了理想而奋斗，‍‍军团比赛就是年底比奖金，因为奖金不是公司给的，是军团自己挣来的利润，而且还交给公司一部分，‍‍如果挣不到粮食，我们要敢于不发奖金，因为员工的基本收入可以开支生活必需品。‍‍</p><p></p><p>当然有些战略业务短期内创造不出价值，我们可以通过评定的方式来确定，‍‍但很多业绩差的边缘业务一定要砍掉，这就是调整巩固充实提高。</p><p></p><h3>战略机会点、生存危机点，不惜代价投入</h3><p></p><p></p><p>质量是第一生产力，我们要坚持这样的路线，研发要对产品的质量和性能负责，并承诺‍‍服务专家要具有综合性能力，质量不好的产品是研发人员的耻辱，这句话应该贴到‍‍研发办公室的研发办公区的墙上。</p><p></p><p>现在全世界‍‍网络故障率越来越高，一个事故就可能摧毁整个市场的信任体系。‍100-1=0，对我们研发来说，‍‍单板的研发，单个器件的研发，系统的研发，一定要把质量放在首要，‍‍质量是研发制造人员对市场服务人员的最优支持保障。‍‍</p><p></p><p>如果产品质量不好，就相当于让弟兄们冒着枪林弹雨，冰天雪地，炎热酷暑，新冠病毒在前线冲锋。‍‍所以我们要建立反向考核机制，一线反向考核不仅要考核机关服务组织，‍‍也要延伸到产品线，坐在办公室还做不好质量，那就要收缩战线，提高竞争力。‍</p><p></p><p>我们要提高服务体系的地位，服务专家对事故对网络体验要有综合判断能力。‍‍过去我们重研发轻服务，现在我们也要重视服务体系，要重视我们的网络不出问题，体验要好。‍</p><p></p><p>‍合理科学合理的控制库存，我们要从过去恐慌性的自救改为有质量的自救，要注意合理的压库存，不要因为过大库存而造成公司的利润不足和现金流紧张，‍‍从而构成我们新的危机。</p><p></p><p>在战略关键机会点上，生存危机点上，我们可以不惜代价投入，‍‍但在非战略机会点上不能乱花钱。</p>",
    "publish_time": "2022-08-24 11:11:47",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "GitHub 删除被制裁开源项目源代码，密码学教授不满并发布分支",
    "url": "https://www.infoq.cn/article/msqr0mRXqK1WCQNWLlTF",
    "summary": "<p>近期，由于越来越多黑客将盗来的虚拟货币转入Tornado Cash，<a href=\"https://home.treasury.gov/policy-issues/financial-sanctions/recent-actions/20220808\">OFAC（美国财政部海外资产控制办公室）</a>\"8月8日宣布对其进行制裁，具体如下：</p><p>&nbsp;</p><p></p><blockquote>GitHub 上的 Tornado Cash 组织、tornado.cash 网站、由以太坊基础设施提供商 Alchemy 和 Infura 运行的 RPC 节点、比特币应用程序 CirclePay 中 Tornado Cash 合约上的 $USDC，以及Tornado Cash 智能合约应用程序中提供虚拟货币混合的大约 40 个以太坊区块链地址。</blockquote><p></p><p>&nbsp;</p><p>根据对这些制裁的解释，<a href=\"https://www.infoq.cn/article/6rgiJ3Wzi2FDcrdR3NNA\">GitHub</a>\"关闭了为该项目贡献代码的三个开发者帐户：Roman Semenov、Roman Storm和Alexey Pertsev，并删除了<a href=\"https://github.com/tornadocash/\">Tornado Cash 帐户</a>\"以及存储库中的源代码。</p><p>&nbsp;</p><p>这之后，本周一，约翰霍普金斯大学密码学教授 Matthew Green 在电子前沿基金会 (EFF) 的支持下发布了该软件的<a href=\"https://github.com/tornado-repositories\">另一个分支</a>\"。</p><p>&nbsp;</p><p>Green 表示自己发布的分叉是为了测试代码删除是否是对制裁的适当回应。如果 GitHub 将代码撤下，EFF 将在法庭上对这一决定提出质疑。</p><p>&nbsp;</p><p>Green 和 EFF 的副执行董事兼总法律顾问 Kurt Opsahl 此前对 GitHub 删除源代码表示担忧。他们认为代码就是言论，GitHub 通过禁用 Tornado Cash 存储库来压制言论。</p><p>&nbsp;</p><p>“在我作为约翰霍普金斯大学的研究员和讲师的工作中，我广泛使用 Tornado Cash 和 Tornado Nova 源代码来教授与加密货币隐私和零知识技术相关的概念，”Green在 Tornado 回购协议的解释笔记中写到。</p><p>&nbsp;</p><p>“我的学生从代码中构建了令人惊叹的项目。此源代码的丢失或可用性降低将对科学和技术社区造成伤害。”他将 GitHub作出这一决定的原因归于降低OFAC命令带来的风险，但他认为这件事的问题在于OFAC的命令并不明确。</p><p>&nbsp;</p><p>此外，8月12日，荷兰财政信息和调查服务局（FIOD）在阿姆斯特丹逮捕了一名涉嫌参与 Tornado Cash 软件开发的人员。FIOD表示，这名29岁的男子隐瞒犯罪资金流动，并为洗钱提供便利。</p><p>&nbsp;</p><p>对此，Cardano创始人Charles Hoskinson表示，开发人员可以使用开源代码来编写代码，但却无法控制人们在代码发布后如何使用代码。在大多数情况下，代码就只是文字，并不是由编写者告诉人们去做某件事。</p><p>&nbsp;</p><p>CharlesHoskinson补充道，作为开发人员，当我们编写代码时，它只是一种表达方式。只要我们不参与代码的运行和使用，我们就只是在编写它；这就像是写一本书。TornadoCash开发者只是编写了在技术上可以以某种方式使用的代码。</p><p>&nbsp;</p><p>参考链接：</p><p>&nbsp;</p><p><a href=\"https://www.theregister.com/2022/08/24/github_eff_tornado_cash/\">https://www.theregister.com/2022/08/24/github_eff_tornado_cash/</a>\"</p><p><a href=\"https://www.theregister.com/2022/08/15/tornado_cash_suspect_arrested/\">https://www.theregister.com/2022/08/15/tornado_cash_suspect_arrested/</a>\"</p>",
    "publish_time": "2022-08-24 12:07:58",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "云原生发展近10年 ，SUSE 观察到了什么？",
    "url": "https://www.infoq.cn/article/2fHFRAFOYTE5QZaXbU43",
    "summary": "<p>如今数字化转型成为企业发展刚需，越来越多的企业选择应用云原生技术作为数字化转型方案。据 Gartner 预测，到 2025 年，云原生平台将在超过 95% 的新数字计划中作为基础，而 2021 年只有不到 40%。</p><p></p><p>2013 年，Pivotal 公司的技术经理 Matt Stine 首次提出了云原生概念，如今已经过去近 10 年。十年间，云原生技术迅猛发展，云计算的能力从中心向边缘延伸。然而在这个过程中，企业日益发展的业务需求也为底层操作系统调优、系统架构、容器技术演进、云原生安全等提出了新要求。</p><p></p><p>面对“席卷而来”的云原生技术潮流与新挑战，像 SUSE 这样的老牌技术厂商也提出了自己的应对之策，而我们也在近日举办的“SUSECON 北京 2022 暨 SUSE 30 周年庆典”中了解到了 SUSE 这么多年来为云原生技术发展做出的努力。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/51/8f/5185366f465dcabb348b2ac68996678f.png\" /></p><p></p><p></p><h2>一、云原生技术创新离不开 Linux</h2><p></p><p></p><p>近些年来，随着企业数字化转型的推进，云计算受到广泛重视。除了互联网等新兴产业，金融、制造业、电力 / 风能基础建设、汽车等传统行业也都纷纷迁移上云。究其原因，是云原生的敏捷、可靠、高弹性、易扩展以及持续更新的特性让开发更便捷，正如 CNCF 中国区总监、Linux Foundation 亚太区战略总监陈泽辉在 SUSECON 北京 2022 中提到的那样：</p><p>云原生可以提高资源效率，用更少的服务器运行同样数量的服务，同样的服务器运行更多的服务；云原生基础设施建设可以提高整个开发速度，同时还能降低风险；Kubernetes 打通了所有云厂家的资源，使用户可以利用不同云厂商的基础建设无缝地运行应用；云原生架构使“更快部署”成为可能，几个月的部署时间可以减少到几分钟。</p><p></p><p>然而，在云原生技术趋势的影响下，企业对于开源、开放的迫切期望及对“敏捷”的需要，使其无论是构建应用基础架构还是实施多云战略，都处在一个非常复杂多变的底层环境中。面对复杂环境的要求，开源、具有开放性、多用户、多任务、提供丰富网络功能、拥有良好用户界面及可靠的安全系统、具备设备独立性和良好可移植性的 Linux 生态，成为众多企业的优先选择。据相关数据表示，目前国内有超过 95% 的企业使用 Linux 作为底层操作系统。同时，全球 500 强超级计算机几乎都使用 Linux 操作系统。</p><p></p><p>正如一位技术专家在 SUSECON 北京 2022 Linux 分论坛中所说的：“如今许多企业采用多种底层操作系统及虚拟机、容器并存的混合算力，不管结构多复杂，技术的演进都是围绕着 Linux 生态进行的，无论结构如何变化，Linux 作为技术底座，一直在默默地支撑着上层的各项技术。”</p><p></p><p>为此，在全球企业级 Linux 领域有着深厚的技术积淀和实践经验的 SUSE 推出了不少解决方案，比如 SUSE Linux Enterprise 产品系列提供了稳定、安全且良好支持的 Linux 操作系统，专为 SAP S/4HANA 等关键型业务应用和其他各种业务应用而设计。其中 SUSE Linux Enterprise for SAP Applications 是在物理、虚拟、私有或公共云环境中运行 SAP 的首选 Linux 平台，可以降低服务中断的风险，通过维护自动化促进创新，并可在本地和云中更快地部署新服务。</p><p></p><p>SUSE 与 SAP 在过去二十余年的合作中，正是以该产品作为利器持续联合创新，共同帮助客户更快速、更高效地部署 SAP 解决方案，SUSE 将 SAP HANA 数据库系统的可用性提升至 99.995%，70% 部署在 Linux 上的 SAP 应用使用 SUSE Linux。不仅如此，SUSE 还帮助 SAP 夺得了发展先机，目前有 30,000+ SAP 客户正在使用 SUSE，SUSE 占有 SAP HANA 90% 的市场份额，创造了无限商业价值。</p><p></p><p>除此之外，SUSE 一直是亚马逊云科技 Linux 解决方案创新的推动者，是亚马逊合作伙伴网络（APN）的高级技术合作伙伴。SUSE 和亚马逊云科技共同见证了，包括 Phillips 66、Pacific Drilling 在内的成千上万的共同客户及 Wipro 和 Lemongrass 等联合合作伙伴的成功。他们在使用各种亚马逊云科技服务的同时，还在应用 SUSE 开源技术以节省成本，更高效地实现业务发展。</p><p></p><p>值得关注的是，2020 年 12 月，SUSE 完成了对开源企业级 Kubernetes 管理平台供应商 Rancher Labs 的收购，通过混合云 IT 基础架构、云原生转型和 IT 运维解决方案加速企业数字化转型，以此实现了云原生领域布局。</p><p></p><p></p><h2>二、容器是云原生架构创新的基石</h2><p></p><p></p><p>沙利文最近新出炉的《中国云原生市场研究报告—容器》显示，容器技术与云原生的发展是相辅相成的，两者的发展历程呈现出互相促进的双螺旋结构，容器与新兴技术架构融合升级并拓宽下游应用场景。容器降低了部署架构各环节的耦合程度，使应用不受环境限制地在不同计算环境间快速、可靠地运行，具有底层资源占用少、可移植性高、敏捷度高、弹性高的优势，是释放云原生价值的关键基础。</p><p></p><p>容器凭借业务价值和技术价值满足了不同行业企业的多层面需求, 容器市场迎来了高速创新与增长。据 IDC 最新发布的《软件定义计算软件市场半年跟踪报告》预测，在数据中心现代化、企业基础架构云化以及云原生应用普及化的趋势下，2023 年容器市场规模将达到 20.3 亿美元。</p><p></p><p>然而，随着企业的容器、Kubernetes 应用大规模使用和落地，如何持续提升 Kubernetes 集群的整体稳定性、解决容器安全问题成为了目前领域内的核心挑战。具有高复杂性的 Kubernetes 集群，在应用、基础设施、部署中的任何一个环节出现 bug 都有可能导致业务系统出现故障。</p><p></p><p>当这样的市场需求迸发后，Kubernetes 企业容器管理市场进入了高速增长阶段，这也为 SUSE 提供了重要的增长机会。针对 Kubernetes 企业容器管理，SUSE 拥有 SUSE Rancher 产品系列，使客户能够跨所有设备和任何环境运行标准化云原生应用。通过提供业界知名的 Kubernetes 管理平台，SUSE Rancher 有能力持续成为市场上应用最广泛的容器管理产品，并以两位数的速度持续增长。</p><p></p><p>去年 10 月，SUSE 又完成了对 NeuVector 的收购。今年 1 月，NeuVector 开源，成为了业界首个端到端的开源容器安全平台、唯一为容器化工作负载提供企业级零信任安全的解决方案，可以为企业提供实时深入的容器网络可视化、东西向容器网络监控、主动隔离和保护、容器主机安全以及容器内部安全，能够与容器管理平台无缝集成并且实现应用级容器安全的自动化，适用于各种云环境、跨云或者本地部署等容器生产环境。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/52/84/5293c6161b2fd105ff90cf50fa88ef84.png\" /></p><p></p><p>目前 NeuVector 已成为 SUSE Rancher v2.6.5 的一部分，用户可通过 SUSE Rancher 控制台来管理 NeuVector，从而简化了其对遍布全球的大规模 Kubernetes 环境的安全管理，尽享完全零信任堆栈的优势。</p><p></p><p>NeuVector 的开源，也标志着 SUSE 顺利完成了安全领域布局。今年 6 月，SUSE 还发布了面向基础设施安全的全方位解决方案。</p><p></p><p>值得一提的是，去年 SUSE 通过 Kubernetes 构建的超融合基础架构（HCI）开源软件 Harvester 正式 GA。该产品是 SUSE 强大容器管理背景的自然延伸，Harvester 建立在包括 Kubernetes、Longhorn 和 Kubevirt 在内的云原生解决方案基础上，它被设计为企业级开箱即用的解决方案，像传统虚拟化软件一样易于安装、理解和操作。而且 Harvester 是一个 100% 免费的开源超融合基础设施解决方案，它采用开放、可互操作的方式来处理超融合基础设施，解决了企业多集群管理、团队和租户隔离、由虚拟化和容器化工作负载构成的现代环境的资源管理等难题。</p><p></p><p>Harvester 供客户和开源社区使用，这也意味着 SUSE 的产品阵容已扩展到了超融合基础设施领域。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/0c/9d/0c1983e3f4347a09c393184528b3809d.jpg\" /></p><p></p><h2>三、从中心走到边缘，开启云原生新篇章</h2><p></p><p></p><p>今年 5 月，CNCF 开展的 Kubernetes Edge Day 的研报也给出了预测，到 2025 年边缘计算的规模会比如今的云计算大 4 倍，全球 75% 的数据将来自于边缘计算。基于此预测，SUSE 认为“边缘计算是计算业务的新形态”。</p><p></p><p>“计算”这件事经历了传统的大型计算机时代、C/S 架构的小型计算机时代，紧接着到了包括公有云、私有云、混合云的云计算时代。云计算高速发展了 20 年，中心云成为了普适性基础设施。然而随着 IOT、AI 等技术的不断发展，中心云计算开始“相形见绌”，分散式边缘计算被推向舞台，我们正式进入了边缘计算时代。</p><p></p><p>边缘计算正迅速成为企业以客户为中心的数字化转型战略的关键支柱。根据 MarketsandMarkets 和 Gartner 等知名机构的数据预计，2022 年全球边缘云市场高达 428 亿美元。根据艾瑞咨询的《中国边缘云计算行业展望报告（2021 年）》的数据预计，到 2025 年，中国整体边缘云规模将以 44.0% 的年复合增长率增长至 550 亿元，到 2030 年，中国边缘云计算市场规模将达到接近 2500 亿元。</p><p></p><p>面对高速增长的边缘市场需求，SUSE 在产品打磨和解决方案方面做出了许多努力。SUSE 使 IT 运维在边缘端成为可能。根据边缘计算的属性、位置和承载计算的方式，SUSE 将其分为了三类：</p><p>NEAR Edge，靠近数据中心或者在数据中心；FAR Edge，主要是商超、银行分支机构或医院分支机构等应用场景；TINY Edge，主要是摄像头、感应设备、温度计等应用场景。</p><p></p><p>针对以上场景，SUSE 提供了任务关键边缘计算解决方案，使用简单、可靠，具备高安全性和合规性。基于 Linux 和 Kubernetes 容器构建的边缘解决方案 SUSE Edge，可以助力客户业务应用尽可能靠近其所在的位置运行，从而实现真正的大规模创新。</p><p></p><p>SUSE Edge 解决方案正在帮助企业扩大创新的边界，包括医疗设备、5G 设备、汽车、飞机、工厂、游轮、零售店，甚至卫星。通过 SUSE Edge，企业可以使用 SUSE 的 Linux 操作系统和 Kubernetes 解决方案大规模构建、部署和管理云本地应用程序。</p><p></p><h2>四、开源让云原生技术历久弥新</h2><p></p><p></p><p>所有技术的演进及创新都离不开开源，云原生技术当然也不例外。曾任 Github India 的总经理 Maneesh Sharma 明确表示，“开源是创新的推动者，使组织能够快速获得全球人才库和开发安全、可靠和可扩展的软件的工具。”</p><p></p><p>从 IT 发展的进程来看，开源为全球数字经济带来的影响不言而喻。我国开源虽然起步较晚，却正在形成燎原之势。尤其是在 2021 年，“开源”首次被写入到国家《十四五规划》之中，中国已成为全球开源生态的重要贡献力量，参与国际开源社区协作的开发者数量排名全球第二。</p><p></p><p>中国信息通信研究院云计算与大数据研究所所长何宝宏在 SUSECON 北京 2022 上表示，“开源是数字时代重要的发展方向，我国拥有全球最大的开发者群体和制造业体系，数字技术应用场景非常丰富，开源所连接的创新链、产业链、价值链范围之广、规模之大是无可比拟的。我们能预见到的是，在未来，开源生态的发展将在推动技术创新、促进产业协作、加快各行业数字化进程方面日益明显。”</p><p></p><p>“开源”也是 SUSE 30 年发展的关键词。作为全球最大的独立开源企业，SUSE 始终致力于为用户提供具备“开放的互操作性”的数字化解决方案。在全球，SUSE 服务 100000+ 客户；在中国，SUSE 为 1000+ 企业的关键应用奠定了坚实基础。</p><p></p><p>2021 年 7 月，SUSE 加入欧拉开源社区，成为首家支持欧拉开源社区的国外企业。SUSE 秉承着“Go China, Go Global”的理念，对内参与 Linux 操作系统国内大循环，发布基于 openEuler 的商业发行版 SUSE Euler Linux，加大本土研发和技术支持；对外推动 Linux 操作系统国内国际双循环，凭借 SUSE 在全球企业级 Linux 领域的领导地位，推动 openEuler 的软硬件国际厂家生态建设，携手欧拉操作系统走向世界。</p><p></p><p>可以说，无论是从国际视角还是国内视角，SUSE 在推动开源发展方面做了很多努力。</p><p></p><p>从 1994 年发布第一个 Linux 发行版，到向大型主机成功导入 Linux，到后来成为 X86 服务器上的主流操作系统，再到如今的 Kubernetes、Cloud Foundry、开源容器、软件定义存储等，SUSE 的产品边界不断拓展，这些技术成果大多受益于开源。</p><p></p><p>正如 SUSE 大中华区董事长江永清在 SUSECON 北京 2022 上发表的主题演讲《开源创新 开放生态 开创未来》中提到的，“在蓬勃发展的 30 年里，'开源'一直是 SUSE 的精神内核，在公司发展的众多历史性时刻，SUSE 始终专注于开源并持续投入。\"SUSE 的开源发展史给了我们许多启发，值得我们所有云厂商和正在数字化转型的企业去思考。</p>",
    "publish_time": "2022-08-24 13:46:26",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "阿里发布芯片平台“无剑600”：首次兼容龙蜥OS，RISC-V迈向高性能软硬件全栈",
    "url": "https://www.infoq.cn/article/0gsHOaDExDwuWgwxYfpm",
    "summary": "<p>8月24日，在<a href=\"https://riscv-summit-china.com/\">2022 RISC-V中国峰会</a>\"上，阿里平头哥发布首个高性能RISC-V芯片平台“无剑600”及SoC原型“曳影1520”，首次兼容龙蜥Linux操作系统并成功运行LibreOffice，刷新全球RISC-V一系列纪录。基于无剑600软硬件全栈平台，开发者和厂商可快速开发RISC-V芯片，推动迈向2GHz高性能RISC-V边、云应用新时代。</p><p></p><p><a href=\"https://www.infoq.cn/article/x4JNvgz3R55boVWr3ujy\">RISC-V架构</a>\"简洁、灵活、开放，已成为业界主流架构之一。尽管RISC-V发展潜力巨大，但相关软硬件技术和生态未完全成熟，应用主要集中在中低端的IoT领域，尚未实现高性能芯片的商用突破。</p><p></p><p>“为了更快、更好地孵化出更多高性能的RISC-V芯片，满足更多不同行业的需求，丰富RISC-V上层应用，平头哥以‘平台+SoC原型’的创新方式推出无剑600，推动RISC-V硬件及软件的齐头并进。”2022 RISC-V中国峰会主席、平头哥半导体副总裁孟建熠说道。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/2b/aa/2b1ba9ed048533c81ca7621e41642caa.png\" /></p><p></p><p>无剑600平台是全球RISC-V性能最高的可量产SoC芯片设计平台：它支持4核高性能RISC-V处理器，最高主频可达2.5GHz，实现了CPU+XPU异构架构的全面优化；支持64位LPDDR4X，最高吞吐率4266MT；整合4TOPs的Int8 AI算力；全流程满足GP TEE国际安全标准。无剑600平台有望帮助芯片公司显著降低芯片开发成本和风险，并大幅缩短研发周期。</p><p></p><p>基于无剑600平台，平头哥“打样”了曳影1520，性能足以覆盖边缘计算、人工智能、图像识别、多媒体等多种场景。目前，曳影已在阿里展开应用，未来也可提供给尚未收到定制化芯片的开发者，提前在曳影上开发系统和软件，进一步缩短产品量产的时间。</p><p></p><p>在无剑600平台上，平头哥与龙蜥社区、中科院软件所PLCT实验室进行了软硬件全栈的联合优化，完成了RISC-V与龙蜥操作系统的3000多个基础包适配，并在曳影1520上首次运行FireFox浏览器、LibreOffice等大型桌面级软件，以及Hexo和Open Rocket等基于NodeJS和JAVA的应用，极大拓展了RISC-V的想象力。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/58/ae/58731b4395a17779559776d897a913ae.png\" /></p><p></p><p>“无剑600平台支持Linux和Android，进一步丰富和加强了RISC-V 软件生态系统，也印证了RISC-V社区技术融合与蓬勃发展的巨大潜力。”RISC-V国际基金会CEO Calista Redmond评价称。</p><p></p><p>目前，在RISC-V国际基金会中，平头哥参与了29个技术方向的标准制定，主导负责了10个技术小组，是公认投入力量最大的中国机构。</p>",
    "publish_time": "2022-08-24 14:24:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "TypeScript 遭库开发者嫌弃：类型简直是万恶之源",
    "url": "https://www.infoq.cn/article/QGcjq72F3H8zVjJYwjGq",
    "summary": "<p>在今年《2022前端开发者现状报告》中显示， 84% 受访者表示使用过 <a href=\"https://www.infoq.cn/article/ds994KySqo868U3e8s4N\">TypeScript</a>\"，可见这门语言已被越来越多的前端开发者所接受。他们表示，TypeScript 让 Web 开发变得轻松——不用在 IDE 和浏览器之间来回多次切换，来猜测为什么“undefined is not a function”。</p><p>&nbsp;</p><p>然而，本周 <a href=\"https://xie.infoq.cn/article/92405bb94c8d1ca8ac52cc88c\">redux-saga</a>\" 的工程师 Eric Bower 却在一篇博客中提出了不同意见，他站在库开发者的角度，直言“我很讨厌 TypeScript”，并列举了五点理由。这篇博客发布后，随即引发了赞同者和反对者的激烈讨论，其中，反对者主要认为文中的几点理由只能作为开发人员的意见，而且并没有提供证明实质性问题的具体例子。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/e7/2d/e79b2710ac9dd8960041b4870f754d2d.png\" /></p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/7b/66/7b61aa759dbd5ccd69a92be34bdd8966.png\" /></p><p></p><p>redux-saga 是一个&nbsp;库（Library），具体来说，大部分情况下，它是以&nbsp;<a href=\"https://xie.infoq.cn/article/ae821772d34c85c097a46cf72\">Redux</a>\" 中间件的形式而存在，主要是为了更优雅地管理&nbsp;Redux 应用程序中的副作用（Side Effects）。</p><p>&nbsp;</p><p>以下为 Eric 原文译文：</p><p>&nbsp;</p><p>作为端开发者，其实我挺喜欢TypeScript，它大大削减了手动编写自动化测试的需求，把劳动力解放出来投入到更能创造价值的地方。总之，任何能弱化自动化测试工作量的技术，都是对生产力的巨大提升。</p><p>&nbsp;</p><p>但从库开发的角度来看，我又很讨厌TypeScript。它烦人的地方很多，但归根结底，TypeScript的原罪就是降低库开发者的工作效率。从本质上讲，TypeScript就是把复杂性从端开发者那转移给了库开发者，最终显著增加了库开发流程侧的工作负担。</p><p>&nbsp;</p><p></p><h2>说明文档</h2><p></p><p>&nbsp;</p><p>端开发者可太幸福了，TypeScript给他们准备了完备的说明文档和博文资料。但在库开发者这边，可用的素材却很少。我能找到的最接近库开发需求的内容，主要集中在类型操作上面。</p><p>&nbsp;</p><p>这就让人有种强烈的感觉，TypeScript团队觉得库开发者和端开发者并没什么区别。当然有区别，而且很大！</p><p>&nbsp;</p><p>为什么TypeScript的网站上没有写给库开发者的指南？怎么就不能给库开发者准备一份推荐工具清单？</p><p>&nbsp;</p><p>很多朋友可能想象不到，为了在Web应用和库中找到“恰如其分”的类型，我们得经历怎样的前列。对端开发者来说，Web应用开发基本不涉及条件类型、类型运算符和重载之类的构造。</p><p>&nbsp;</p><p>但库开发者却经常跟这些东西打交道，因为这些构造高度动态，会把逻辑嵌入到类型当中。这就让TypeScript调度起来令人头痛万分。</p><p>&nbsp;</p><p></p><h2>调试难题</h2><p></p><p>&nbsp;</p><p>库开发者是怎么对高度动态、大量使用的条件类型和重载做调试的？基本就是硬着头皮蛮干，祈祷能顺利跑通。唯一指望得上的，就是TypeScript编辑器和开发者自己的知识储备。换个类型，再看看最终结果，如此循环往复。据我所知，大家似乎都是在跟着感觉走，并没有任何稳定可靠的科学方法。</p><p>&nbsp;</p><p>对了，库开发者经常会用到TypeScript playground，用来隔离掉类型逻辑中那些离散的部分，借此找出TypeScript解析为某种类型的原因。Playground还能帮助我们轻松切换TypeScript的版本和配置。</p><p>&nbsp;</p><p>但这还不够，远远不够。我们需要更称手的生产工具。</p><p></p><h2>太过复杂</h2><p></p><p></p><p>我跟redux打过不少交道，redux-toolkit确实是个很棒的库，开发者可以用它查看实际代码库中的类型是如何正确完成的。而问题在于，虽然它能把类型搞得很清楚，但复杂度也同样惊人。</p><p>&nbsp;</p><p><a href=\"https://github.com/reduxjs/redux-toolkit/blob/4ab8c42cb20ae1e6f7b84a8ac0070eee54775b79/packages/toolkit/src/createAction.ts\">createAction #1</a>\"<a href=\"https://github.com/reduxjs/redux-toolkit/blob/4ab8c42cb20ae1e6f7b84a8ac0070eee54775b79/packages/toolkit/src/createAction.ts\">createAction #2</a>\"</p><p>&nbsp;</p><p>这还只是一例，代码库中充斥着更多复杂的类型。此外，大家还要考虑到类型和实际代码数量。纯从演示出发、忽略掉导入的代码，该文件中只有约10%的代码（在全部330行中只占35行）能被转译成JavaScript。</p><p>&nbsp;</p><p>编码指南经常建议开发者不要使用嵌套三元组。但在TypeScript中，嵌套三元组成了根据其他类型缩减类型范围的唯一方法。是不是闹呢……</p><p>&nbsp;</p><p></p><h2>测试</h2><p></p><p>&nbsp;</p><p>因为可以从其他类型生成类型，而且各类型都有很高的动态特性，所以任何生产级别的TypeScript项目都得经历专门的一类测试：类型测试。而且单纯对最新版本的TypeScript编译器进行类型测试还不够，必须针对以往的各个版本全部测试。</p><p>&nbsp;</p><p>这种新的测试形式才刚刚起步，可用工具少得可怜，而且相当一部分要么被放弃了、要么只保持着最基本的维护。我之前用过的库有：</p><p>&nbsp;</p><p><a href=\"https://github.com/microsoft/DefinitelyTyped-tools\">DefinitelyTyped-tools</a>\"<a href=\"https://github.com/SamVerschueren/tsd\">tsd</a>\"<a href=\"https://github.com/microsoft/dtslint\">dtslint (moved)</a>\"<a href=\"https://github.com/danvk/typings-checker\">typings-checker (deprecated)</a>\"</p><p>&nbsp;</p><p>看得出来，类型测试工具的流失率很高。而且因为难以迁移，我有些项目直到现在还在使用早就被弃用的库。</p><p>&nbsp;</p><p>当然，其中的dtslint和tsd算是相对靠谱，但它们互为补充、而非择一即可。为什么我们需要两款工具才能完成同一类工作？这个问题很难回答，实际使用体验也是相当难受。</p><p>&nbsp;</p><p></p><h2>维护</h2><p></p><p></p><p>类型会给库添加大量代码。在初次为某个项目做贡献时，首先需要了解应用程序逻辑和类型逻辑，这直接就让很多打算参与的朋友望而却步了。我就帮忙维护过redux-saga，项目近期发布的PR和issue主要就集中在类型身上。</p><p>&nbsp;</p><p>我发现相较于编写库代码，我花在类型调整上的时间要多得多。</p><p>&nbsp;</p><p>我精通TypeScript，但还没到专家那个水平。在经历了几年的TypeScript编程之后，作为一名库开发者，我还是觉得自己用不明白TypeScript。所以，精通好像成了TypeScript的准入门槛。这里的万恶之源就是类型，它让js库维护变得困难重重，断绝了后续开发者的贡献参与通道。</p><p>&nbsp;</p><p></p><h2>总结</h2><p></p><p>&nbsp;</p><p>我认可TypeScript的成绩，也钦佩它背后的开发团队。TypeScript的出现彻底改变了前端开发的格局，任何人都不能忽视这份贡献。</p><p>&nbsp;</p><p>但作为库开发者，我们需要：</p><p>&nbsp;</p><p>更好的说明文档。更好的工具。更易用的tsc。</p><p>&nbsp;</p><p>不管怎么说，靠研究TypeScript编译器源代码才能搞清楚一段代码为什么会被解析成特定类型，也实在是太离谱了。</p><p>&nbsp;</p><p>原文链接：</p><p>&nbsp;</p><p><a href=\"https://erock.prose.sh/typescript-terrible-for-library-developers\">https://erock.prose.sh/typescript-terrible-for-library-developers</a>\"</p>",
    "publish_time": "2022-08-24 15:03:13",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]