[
  {
    "title": "经历了千锤百炼，火山引擎RTC如今怎么样了？",
    "url": "https://www.infoq.cn/article/Ue0E2ZXpr2BwaYxlQ0fL",
    "summary": "<p>Qcon 上海站 2022 年大会在上海降温前的最后一个周末落下了帷幕。</p><p></p><p>近两年，随着音视频行业的快速发展，RTC 相关的话题在 QCon 的比重也逐步上升。本次 QCon 除了腾讯云音视频、网易智企两家熟悉的身影，火山引擎 RTC 也首次以专场的形式亮相，并为观众带来了 RTC 与业务增长、用户体验优化、特效协同、全球化架构四个主题的技术分享，现场一度座无虚席，甚至连门口和过道都挤满了观众。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/60/60e2f4d896a1af0ffa298d3cb4a683d4.png\" /></p><p>火山引擎 RTC 专场以<a href=\"https://www.infoq.cn/album/88\">《实时音视频技术在抖音上的深度磨砺》</a>\"为主题</p><p></p><h2>火山引擎 RTC 的破圈之道</h2><p></p><p></p><p>2021 年，字节跳动正式推出云服务——火山引擎，并发布面向体验的视频云服务，覆盖视频直播、点播、实时音视频、云游戏和云渲染等多个场景所需的核心中台、产品及解决方案。2022 年下半年，快手正式推出“ StreamLake ”视频云品牌，主要聚焦“音视频 + AI ”。两家互联网大厂的接连入局，让原本就已经硝烟弥漫的视频云江湖厮杀得越发激烈，特别是在 RTC 领域，前有声网 Agora、网易云信等垂直 PaaS 玩家，后有阿里云、腾讯云、华为云等老牌云计算平台，字节、快手以自家产品技术中台 ToB 的方式入局，让这条视频云新赛道“卷”上了一个新台阶。</p><p></p><p><a href=\"https://www.infoq.cn/article/yaV5V1R0iuUvpbrBIJYq\">火山引擎 RTC </a>\"凭什么卷？在本次专场分享中，火山引擎 RTC 传达了它的破圈门道：从业务视角出发，持续在对业务有增长的技术上进行打磨和沉淀。</p><p></p><p>作为偏底层的音视频服务，RTC 和应用的业务表现似乎没有什么关系，然而，火山引擎 RTC 通过大量的 A/B test 发现，RTC 的表现会对业务的增长有着不小的影响。在连麦场景，当建联越快、建联成功率越高、主播画面越清晰、卡顿越低，人均的连麦时长、看播人数、打赏金额就会越多。换句话说，这几个指标是连麦场景的核心关注指标，RTC 需要更关注这几个指标的迭代优化。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/13/13f08e230d9e10b669b771c160383c44.png\" /></p><p>目前，火山引擎 RTC 为抖音连麦提供的建联信令 200ms 达到率为 98.6%，端到端延时平均 51ms，首帧延时控制在 100-200ms 之间</p><p></p><p>新玩法为业务带来了增长，也为 RTC 带来了挑战，当功能越来越复杂，性能消耗越来越大，如何在保证用户体验的同时降低性能消耗，以覆盖更多中低端机型，降低用户互动的准入门槛？在边聊边看、边聊边玩、在线唱 K 等场景中，当人声、媒体声、噪声混在一起，用户音频体验如何保证？在和业务方打磨的过程中，火山引擎 RTC 在全链路路径上不放过每一个可优化的细节，并通过与美颜、播放器、深度学习算法等技术的协同优化，以及与线上机型、声卡设备的全量适配，为所有用户带去一致的、高质量的音视频互动体验。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a2/a20687cfa322f31e2417a4c355111943.png\" /></p><p></p><p>火山引擎 RTC 支持抖音世界杯<a href=\"https://www.infoq.cn/article/VhJrF0rKTF1fDRGlTcdo\">“边聊边看”</a>\"功能，利用“音频托管”，避免了直播解说音频和用户聊天音频的回声效果，同时，当有用户说话时，解说的音量会自动“闪避”压低，确保用户聊天内容被清楚听到</p><p></p><h2>至今无统一标准，用户体验该如何衡量</h2><p></p><p></p><p>一直以来，字节跳动都以“数据驱动增长”和“全链路的数据体系构建”作为和其他互联网厂商的能力区别之一，火山引擎 RTC 把这套方法论也用到了“衡量用户体验”上。</p><p></p><p>衡量用户体验不是一件容易的事，至今业内也未形成统一的标准。专场的第二部分是关于数据驱动的 RTC 体验优化，第一件事就是介绍如何把 QoS 指标定义准确，让它能够真实地反映用户体验。火山引擎在定义 QoS 指标时做了三个“对齐”——对齐最小用户行为粒度、对齐最小用户感受的阈值、以及在计算时对齐用户行为和反馈，前两个对齐让 QoS 指标更严苛、灵敏，后者则可以消除幸存者偏差，让 QoS 指标尽可能的客观、透明，可验证性更强。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0b/0b1a4e9ed0e86cfea7ebc18c2bf2a54a.png\" /></p><p>以“首帧发送成功率”为例，火山引擎 RTC 不仅关注用户进房瞬间的首帧成功率，也关注每次关闭 / 打开摄像头、关闭 / 打开麦克风的首帧成功率</p><p></p><p>通过优化 QoS 指标可以优化 QoE，进而影响业务指标。然而，总有一些用户体验不好的问题落在 QoS 指标之外，比如无声、回声、模糊等异常问题，它们很难通过标准的 QoS 指标来监控，排查起来很困难——这可能是业务最大的痛了，又要解决用户体验，又不知从何处下手。</p><p></p><p>火山引擎 RTC 基于抖音集团产品、每天 3 万 + 的用户的真实评价，提炼出这些反馈背后的数据特征，并通过一系列校准和验证，建立了一个超大的“异常特征库”——以后一旦用户埋点数据命中异常特征库的规则，就可以认为这个用户很可能遇到了历史用户反馈过的异常问题，因此可以非常快地定位问题根因并及时处理，这对于处理那些无法用 QoS 监控的 QoE 问题有非常大的价值。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/58/58e501e76bdeeaabb462081855c1c0cc.png\" /></p><p>以“无声”为例，火山引擎 RTC 将“无声”问了拆解成“听不到对方声音”（上行无声）和“对方听不到我声音”（下行无声）两类，总结了 mic 被占用、声道选择错误、播放帧率异常等 30+ 归因</p><p></p><p>一方面，通过 QoE 来去验证和打磨 QoS 指标，让 RTC 的 QoS 指标能够更真实地反映用户的体验，同时找到技术优化的最佳路径；一方面，建立业内最大的“异常特征库”来处理 QoS 无法覆盖的 QoE 问题，这是火山引擎 RTC 独一无二的数据分析方法论和实践经验。</p><p></p><h2>端云协同，1+1 如何大于 2</h2><p></p><p></p><p>除了 RTC，专场还邀请到音视频特效负责人来分享抖音集团在做“极致”美颜特效过程中的沉淀和思考。</p><p>音视频场景离不开美颜、滤镜、贴纸等特效的使用，AI 特效技术在视频云业务中是不可或缺的重要能力。今年 7 月，火山引擎在 2022 火山引擎 FORCE 原动力大会上发布的音视频云端一体 veVOS 便是整合了视频直播、实时音视频、智能视频创作、视频点播、智能美化特效、智能音频美化等音视频能力的一站式解决方案。</p><p></p><p>抖音画质，特别是美颜，名声在外，如何让 RTC 和美颜特效算法做到真正协同，发挥最强效果，同时尽可能优化这两个“性能消耗大户”叠加后的能耗，让高质量的互动特效可以在更多手机，特别是中低端手机上跑起来，是视频云和特效一起在努力做的事。</p><p></p><p>“有一些客户会认为画质是美颜引起的，我用的美颜和抖音一样，就可以有和抖音一样的完整流程体验了”。实际上，画质并不仅仅依赖美颜一个环节，音视频采集、编解码、算法、视频云架构、播放，这些过程中的组件都对画质的整体链路负责，正如讲师所说，“我们非常认真的去对待、优化画质的每一方面，希望用户在最后使用时能对这个产品有更好的认同度”。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/55/55d30a6eca6f1097e2cedeeda7623108.png\" /></p><p>通过一份”剪映与同类产品的画质评测报告”，讲师和观众介绍画质优化的价值</p><p></p><h2>出海或将成为 RTC 的必选项？</h2><p></p><p></p><p>这几年，国内视频云市场增长稍显乏力，而各类优秀出海应用层出不穷，“出海”也因此成为了视频云厂商寻找增量市场的重要方向，声网、腾讯云音视频等都在不断加快海外布局的脚步。专场的最后一个分享主题是关于 RTC 全球化架构设计，火山引擎通过多中心网络架构、边缘下沉、媒体 - 信令统一接入等关键架构设计，来保证媒体与信令的实时性和同步性。不难想象，有着全球实时传输网络架构的基础和诸多产品的打磨沉淀，火山引擎 RTC 在应对海外参差的网络基建、复杂的运营商、繁杂海量的机型等问题时，也能表现得一如既往的出色。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/45/4503773d052ec31a3c42dd51f4646092.png\" /></p><p>讲师在介绍 RTC 媒体全球化架构设计要点</p><p></p><p>IDC 在《超视频时代视频云演进趋势》白皮书提出，超视频时代用户的三大核心需求是：更加高清、更加交互、更加沉浸。当我们在抖音上看着 4K 超高清的画面，为梅西的贴地斩和朋友一起欢呼时，谁能想到，几年前，我们不得不牺牲清晰度来观看一场流畅的赛事直播，同时还要忍受“对面已然进球欢呼，而我还在屏气流汗”的尴尬。RTC 赛道“众人拾柴火焰高”的局面将推动迎来音视频玩法和体验的新时代，至于谁能笑到最后，就看谁真正掌握了业务需求和破解密码。</p>",
    "publish_time": "2022-12-14 10:13:15",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "谷歌发布安卓应用模块化指南，重点关注代码库增长出现的问题",
    "url": "https://www.infoq.cn/article/XX3FLiGmtb9phU80VyRH",
    "summary": "<p>最近，谷歌发布了一份关于安卓应用模块化的指南。该指南旨在为开发人员提供构建多模块安卓应用的最佳实践和模式，重点关注在代码库增长时出现的问题，如可伸缩性、可读性、稳定性和可测试性。</p><p>&nbsp;</p><p>在一项关于开发者模块化经验的调查中，54%的参与者表示很难找到关于模块化的学习资料，95%的人表示developer.android.com网站上的资料不足够，于是谷歌决定发布一份<a href=\"https://developer.android.com/topic/modularization\">安卓应用模块化指南</a>\"。需要注意的是，该指南针对的是中级和高级开发人员，他们通常对<a href=\"https://developer.android.com/topic/architecture\">推荐的应用架构</a>\"更为熟悉。</p><p>&nbsp;</p><p>据谷歌称，他们的一些应用已经在使用模块化，如Play Store、Google News和YouTube。</p><p>&nbsp;</p><p>模块化就是将代码库组织成松散耦合的多个部分，这些部分通常叫作模块。每个模块必须是独立的，且有明确的职责。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/fa/faed052d65fbada17991380c6ee14a07.png\" /></p><p></p><p>（图片来自<a href=\"https://developer.android.com/topic/modularization\">https://developer.android.com/topic/modularization</a>\"）</p><p>&nbsp;</p><p>模块化带来了许多好处，降低了设计复杂性，让大型系统的维护和演化变得更容易。让我们来看看这些好处：</p><p>&nbsp;</p><p>可重用性——提供了共享代码和使用相同模块构建多个应用的可能性。一个应用由许多模块组成，其中每个模块负责特定的功能。严格的可见性控制——开发人员可以很容易控制应该向代码库和模块的其他部分公开哪些东西。自定义交付——<a href=\"https://developer.android.com/guide/playcore/feature-delivery\">Play Feature Delivery</a>\"允许开发者有条件地或按需交付应用的特定功能。</p><p>&nbsp;</p><p>模块化还有其他好处，例如：</p><p>&nbsp;</p><p>可伸缩性——如果项目进行了适当的模块化，通常会有<a href=\"https://en.wikipedia.org/wiki/Separation_of_concerns\">关注点分离</a>\"和松散耦合的代码库，从而更容易维护和演变。所有权——模块可用于加强问责，有专门的所有者负责维护代码、修复bug、添加测试和评审变更。封装性——一个模块对其他部分的了解应该尽可能少。独立的代码更容易阅读、理解和演化。可测试性——测试代码的能力，测试模块比测试大型紧密耦合的系统更容易、更快。构建时间——与增量构建、构建缓存或并行构建相关，<a href=\"https://gradle.org/\">Gradle</a>\"的一些功能可以利用模块化来提高构建性能。</p><p>&nbsp;</p><p>谷歌在<a href=\"https://github.com/android/nowinandroid\">GitHub代码库</a>\"中提供了多模块应用Now in Android的代码，还提供了一个<a href=\"https://github.com/android/nowinandroid/blob/main/docs/ModularizationLearningJourney.md#types-of-modules-in-now-in-android\">模块化之旅</a>\"指南，介绍了模块的功能以及它们之间的交互方式。</p><p>&nbsp;</p><p>该指南还有一部分是关于<a href=\"https://developer.android.com/topic/modularization/patterns\">常见模块化模式</a>\"的，你可以在这部分看到低耦合高内聚、<a href=\"https://developer.android.com/topic/modularization/patterns#data-modules\">数据模块</a>\"、<a href=\"https://developer.android.com/topic/modularization/patterns#feature-modules\">特性模块</a>\"、<a href=\"https://developer.android.com/topic/modularization/patterns#app-modules\">应用模块</a>\"、<a href=\"https://developer.android.com/topic/modularization/patterns#common-modules\">公共模块</a>\"等等。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/11/android-modularization-guide/\">https://www.infoq.com/news/2022/11/android-modularization-guide/</a>\"</p><p></p><p>相关链接：</p><p><a href=\"https://www.infoq.cn/article/4u0MQ4321CGS7uEAygpY\">你的 Flutter 应用该考虑迁移代码了：Dart 3 将在 2023 年成为 100% 健全的空安全语言</a>\"</p><p><a href=\"https://www.infoq.cn/article/F1F3Q7Ptb1jM2ptmGbOG\">Vue 3 不是最佳选择? 耗时两周从 Vue 2 迁移到 Svelte 后：代码执行更快、体验更佳</a>\"</p>",
    "publish_time": "2022-12-14 10:31:12",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Dubbo 正式支持 Spring 6 & Spring Boot 3",
    "url": "https://www.infoq.cn/article/LAvbFBiTzeXeqQ2CzAsi",
    "summary": "<p></p><h2>背景</h2><p></p><p>Spring Framework 6.0 于11月16日正式发布 GA 版本，Spring Boot 3.0 也于11月25日正式发布 GA 版本，并且Spring 6 &amp; SpringBoot 3最低支持JDK17，意味着如果升级使用Spring 6 &amp; Spring Boot 3时就必须需要升级使用JDK17。</p><p></p><p>然而Java 8 目前是国内主流生产环境 Java 版本之一。虽然近几年陆续发布了 Java 11、Java 17 官方 LTS 版本，但是大部分开发者依然本着 “你发任你发，我用Java8” 的看法看待JDK的升级。不过 Java 17 版本在性能上确实做了大量的优化特别是 ZGC 的发布，促进了国内不少企业升级到 Java 17。</p><p></p><p>而Spring 框架在 Java 生态中的重要程度不言而喻，我们相信在Spring 这波“最低支持JDK17” 推动下，Spring Framework 6.0 &amp; Spring Boot 3.0 一定会在不久的将来被大家接受，并成为主流技术栈。</p><p></p><p>Dubbo 社区非常重视 Spring 社区的更新迭代，总会积极支持适配，这点在最近Spring 6.0 和 Spring Boot 3.0 发布中同样得到了验证。Dubbo 社区早在Spring 6.0.0-RC4 和 Spring Boot 3.0.0-RC2 时已经做好了大致的兼容适配，但是为了保证Dubbo 能够完全适配 Spring 6 和 Spring Boot 3.0 的正式版，我们一直等到Spring Boot 3.0 GA 后，才选择宣布这个令人高兴的事情。</p><p></p><h2>为什么要升级到 Spring 6.0 &amp; Spring Boot 3.0</h2><p></p><p>首先是，升级到 Spring 6.0 &amp; Spring Boot 3.0 将获得未来很长年限的由官方提供的免费技术支撑。Spring 6 和 Spring Boot 3 是 Spring 下一代技术框架基石，尽管官方当前同时维护了 Spring 5.3 和 Spring Boot 2.6.x 和 Spring Boot 2.7.x，但它们最终都会在 2025 年和 2026 年结束其 OSS support（Open Source Software Support）。</p><p></p><p>其次是，您将在新一代框架中获得大量新特新，这些新特性都可以在 <a href=\"https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Release-Notes\">Spring Boot 3.0 Release Notes</a>\"（https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Release-Notes） 和 <a href=\"https://github.com/spring-projects/spring-framework/wiki/What's-New-in-Spring-Framework-6.x\">What's New in Spring Framework 6.x</a>\"（https://github.com/spring-projects/spring-framework/wiki/What's-New-in-Spring-Framework-6.x） 中获得。</p><p></p><p>最后是，Spring 6.x 和 Spring Boot 3.x 将会最广泛的支持 JDK 17-29，需要额外说明的是 JDK17 作为当前最新的LTS 版本，它提供了一组累积的最新语言、API 和 JVM 增强功能，使其成为更具吸引力的编译版本的升级，这也是为什么最低支持 JDK17 的原因。</p><p></p><h2>Dubbo 支持 Spring 6 &amp; Spring Boot 3</h2><p></p><p>现在很高兴向大家宣布，Dubbo 已经开始兼容Spring 6 &amp; Spring Boot 3，所以当前Dubbo 3.2.0-beta.2 版本可以同时兼容支持Spring Boot 1.x、2.x、3.x。您现在可以使用dubbo-3.2.0-beta.2版本体验其兼容性。</p><p></p><p><code lang=\"java\">\n  org.apache.dubbo\n  dubbo-spring-boot-starter\n  3.2.0-beta.2\n\n</code></p><p></p><p>更多关于Spring Boot 3.0 集成 Dubbo 使用示例可参见apache/dubbo-sample：<a href=\"https://github.com/apache/dubbo-samples/tree/master/1-basic\">https://github.com/apache/dubbo-samples/tree/master/1-basic</a>\"</p><p></p><h2>升级总结</h2><p></p><p>我们根据Dubbo 兼容适配Spring 6 &amp; Spring Boot 3 过程中总结的经验整理如下，其他组件维护者也可以参考以下经验进行适配或者升级，更早适配升级到最新版本：</p><p></p><h3>Jakarta EE</h3><p></p><p>Jakarta EE 9 将所有API包名从javax.*命名空间变更到了jakarta.*。而造成这一变化的原因是Oracle拒绝交出相关权益，详情可以查看：https://www.oschina.net/news/106465/oracle-killed-java-ee。</p><p></p><p>因为Jakarta EE 的迁移，对于Web Apps，确保升级使用Tomcat 10, Jetty 11, or Undertow 2.2.19。</p><p></p><p>以下列出了一系列工具可以帮助你完成这部分的迁移：</p><p></p><p><a href=\"https://docs.openrewrite.org/reference/recipes/java/migrate/javaxmigrationtojakarta\">OpenRewrite recipes</a>\".<a href=\"https://github.com/spring-projects-experimental/spring-boot-migrator\">The Spring Boot Migrator project</a>\".<a href=\"https://blog.jetbrains.com/idea/2021/06/intellij-idea-eap-6/\">Migration support in IntelliJ IDEA</a>\".</p><p></p><h3>移除META-INF/spring.factories文件对Auto-configuration的支持</h3><p></p><p>Spring Boot 3.0移除了META-INF/spring.factories文件对Auto-configuration的支持，为了兼容性，SpringBoot 2.7.x 是最后一个支持的版本。</p><p></p><p>适配支持按照下面两个步骤即可完成。</p><p></p><p>Step1: [可选] 使用 <a href=\"https://www.infoq.cn/AutoConfiguration\">@AutoConfiguration </a>\" 注解代替 [@Configuration(proxyBeanMethods ](/Configuration(proxyBeanMethods ) = false)</p><p></p><p><a href=\"https://www.infoq.cn/AutoConfiguration\">@AutoConfiguration </a>\" 注解是SpringBoot 2.7中的新引入的注解，旨在专门标识Auto-configuraton class name。</p><p></p><p>依然使用@Configuration注解标识自动适配类也是可以的，Dubbo 正是基于这个便利点完美支持了Spring Boot 1.x、2.x、3.x所有版本。</p><p></p><p>Step2: 使用 AutoConfiguration.imports 文件代替 META-INF/spring.factories 文件</p><p></p><p>Spring Boot 2.7是最后一个依然兼容使用spring.factories 的版本，SpringBoot 3 以后不再兼容，此时您应该使用META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports文件替换。</p><p></p><p>在该文件列举你所有的configuration classes，每行一个class name，例如：</p><p></p><p><code lang=\"java\">com.mycorp.libx.autoconfigure.LibXAutoConfiguration\ncom.mycorp.libx.autoconfigure.LibXWebAutoConfiguration\n</code></p><p></p><h3>为了对齐ISO-8601，使用yyyy-MM-dd'T'HH:mm:ss.SSSXXX作为默认日志日期格式</h3><p></p><p></p><p>原来默认日志日期格式：yyyy-MM-dd HH:mm:ss.SSS当前默认日志日期格式：yyyy-MM-dd'T'HH:mm:ss.SSSXXX。</p><p></p><p>原来的默认日志日期格式不具有timezone / offset 信息。</p><p></p><p><code lang=\"java\">yyyy-MM-dd'T'HH:mm:ss.SSSXXX &gt;&gt;&gt; e.g.: 2014-12-03T10:06:04.646+08:00\n</code></p><p></p><h3>移除YamlJsonParser</h3><p></p><p>Spring Boot 官方测试发现YamlJsonParser并不能很好的解析JSON，Spring Boot 3决定不再支持使用它来作为解析JSON的备选。</p><p></p><p></p><blockquote>YamlJsonParser 封装的是 snakeyaml。</blockquote><p></p><p></p><p>Spring Boot 3 解析JSON 的解析器使用优先级如下：</p><p></p><p>1）JacksonJsonParser2）GsonJsonParser3）BasicJsonParser</p><p></p><h3>移除spring.session.store-type 配置键</h3><p></p><p>移除了spring.session.store-type配置项，当存在多个可用存储库，将会按照Redis，JDBC，Hazelcast，Mongo 顺序使用。</p><p></p><h3>更新spring data 配置键使其清楚地反应该配置键是否依赖Spring Data</h3><p></p><p>如果存储库（redis、mongo等）相关的配置键不依赖Spring Data存在，则只需要 spring 前缀，否则需要使用 spring.data 前缀。</p><p></p><p>举例说明：</p><p></p><p><code lang=\"java\">spring.redis.host &gt;&gt; spring.data.redis.host\n\nspring.redis.port &gt;&gt; spring.data.redis.port\n\nspring.data.cassandra.port &gt;&gt; spring.cassandra.port\n</code></p><p></p><h3>重构HttpMethod 枚举为类</h3><p></p><p>根据最新的<a href=\"https://datatracker.ietf.org/doc/html/rfc2616#section-5.1.1\">rfc2616</a>\"，HTTP Method已经属于不可枚举属性，所以重构HttpMethod enum类为class类。</p><p></p><p>除了我们熟知的GET, HEAD, PUT, POST等方法，现在还存在了可扩展方法，当前可扩展方法包含了LOCK, COPY, 和 MOVE。这些扩展方法定义在WebDAV。</p><p></p><h3>不允许URI尾部斜杠匹配</h3><p></p><p>Spring 6之前，访问 “/resources” 和 “/resources/” 都可以进入resources()方法。</p><p></p><p><code lang=\"java\">@GetMapping(\"/resources\")\nString resources() {\n    return \"Hello from /resources\";\n}\n</code></p><p></p><p>Spring 6之后，您只能通过看到的path “/resources” 进入mapping 方法。</p><p></p><p>如果您依然想让“/resources/” 和 “/resources” 进入相同的mapping方法，可以通过其他手段，诸如“反向代理”、“Servlet/Web 过滤器”或“在控制器配置显式重定向”。</p><p></p><h3>提供基于 <a href=\"https://www.infoq.cn/HttpExchange\">@HttpExchange </a>\" 服务接口的 HTTP 客户端</h3><p></p><p>Spring 6 介绍了<a href=\"https://www.infoq.cn/HttpExchange\">@HttpExchange </a>\" 注解，基于@HttpExchange注解可以简化HTTP远程调用。</p><p></p><h3>增强Spring SPI 加载器 SpringFactoriesLoader 允许加载多自定义文件</h3><p></p><p>Spring 6 之前，SpringFactoriesLoader 只允许加载\"META-INF/spring.factories\"文件内容。</p><p></p><p>Spring 6 之后，SpringFactoriesLoader 可以加载自定义文件或文件名文件，并且可以通过链式编程加载多个文件。</p><p></p><h3>早期兼容JDK19预览版的虚拟线程（virtual threads）</h3><p></p><p>可以在Spring 6 和Spring Boot 3 中使用虚拟线程处理请求来提前体验。</p><p></p><p>这部分详细说明参见：<a href=\"https://spring.io/blog/2022/10/11/embracing-virtual-threads\">https://spring.io/blog/2022/10/11/embracing-virtual-threads</a>\"</p><p></p><h3>支持RFC 7807 Problem Details</h3><p></p><p>Spring 6 以后，Spring MVC 可以使用 application/problem+json media 类型自定义 错误信息响应体，像下面这样：</p><p></p><p><code lang=\"java\">{\n  \"type\": \"https://example.org/problems/unknown-project\",\n  \"title\": \"Unknown project\",\n  \"status\": 404,\n  \"detail\": \"No project found for id 'spring-unknown'\",\n  \"instance\": \"/projects/spring-unknown\"\n}\n</code></p><p></p><h2>展望</h2><p></p><p>在云原生时代，Java 的跨平台特性，已经不算是其亮眼特性了，而其 Jar 包体积大、启动慢、占用内存多、需要另装 JVM 是 Java 应用的痛点问题。</p><p></p><p>而通过使用 GraalVM 可以很好的解决这些问题。并且通过 GraalVM 的 AOT（Ahead-Of-Time）可以将应用编译成单独可执行文件并直接运行。</p><p></p><p>未来 Dubbo 将会积极地在 Native 方面做一些工作以此能够使应用程序达到下面的目标</p><p></p><p>支持 Spring &amp; Spring Boot native-image较小的本地应用程序和容器镜像占用空间快速启动，快速启动（几十毫秒）低内存消耗，减少 RSS（驻留集大小），低内存有助于优化需要多个容器的微服务架构部署中的容器密度快速的第一请求响应，避免 Hotspot 的预热问题</p><p></p><p>相关阅读</p><p><a href=\"https://www.infoq.cn/article/F3I9jfBsZ4cyE2aD7K8U\">Spring Modulith使用模块和事件组织Spring Boot 3应用</a>\"</p><p><a href=\"https://www.infoq.cn/article/GGdb3Y7cO9Pw2Bf8NfIW\">Java新闻汇总：Spring发布，Resilience4j，Open Liberty，GlassFish，Kotlin 1.8-Beta</a>\"</p>",
    "publish_time": "2022-12-14 11:44:33",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]