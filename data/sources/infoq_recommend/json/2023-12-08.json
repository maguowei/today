[
  {
    "title": "架构师（2023 年 12 月）",
    "url": "https://www.infoq.cn/article/Pu0szgrG5sJuOl8AV2tr",
    "summary": "<h2>卷首语：俭约架构师的七大黄金法则</h2>\n<p>亚马逊 CTO Werner Vogels 向企业传达了一条信息：在管理云成本方面，是时候成为节俭的架构师了。</p>\n<p>他拥有近 20 年的平台构建经验，在今天的 re:Invent 2023 大会主题演讲中，给大家上了一节关于成本优化的课：“作为技术专家，我们生活在一个瞬息万变的世界，我们需要保持学习，坐下来，拿出你的记事本，现在开始做笔记。”</p>\n<p><strong>法则一：将成本视为一种非功能性需求。</strong><br />\n架构师需要尽可能早的、以更加可持续的方式考虑成本影响，才能在系统设计过程中在功能、上市时间和效率之间寻求平衡。</p>\n<p><strong>法则二：确保系统的最终成本与业务保持一致。</strong><br />\n系统能否长治久安，取决于其成本是否与业务模式高度匹配。在设计和构建系统时，架构师必须考虑收入来源和利润杠杆。更重要的是，必须找到能够产生利润的维度，确保架构规划始终围绕收益展开。</p>\n<p><strong>法则三：架构设计是一系列权衡的集合。</strong><br />\n在架构当中，每项决定都涉及相应的权衡。在技术与业务需求间找到适当的平衡将至关重要。请记住，节俭是为了最大限度提升价值，而不只是尽可能控制支出。因此，在必须得花的钱上别吝啬。</p>\n<p><strong>法则四：无法观察的系统将带来无法估量的成本。</strong><br />\n尽管实现可观察性需要投入，但这笔钱绝对会物有所值。有句格言说“如果无法量化，也就无法管理。持续检查能帮我们发现非必要支出，并调整运营以减少浪费。总之，可观察性带来的回报往往远超过前期投入。</p>\n<p><strong>法则五：依托成本感知架构实现成本控制。</strong><br />\n节俭架构的本质，在于强大监控与成本优化能力的结合。明确定义各层，即可在成本及其他要求之间求得平衡。对组件的精细控制则能优化成本和体验。</p>\n<p><strong>法则六：成本优化是个渐进的过程。</strong><br />\n追求成本效率是个持续的过程。即使在部署之后，我们也必须随时审视系统以逐步寻求优化。看似微小的优化，累积起来足以产生超出想象的成本优势。</p>\n<p><strong>法则七：顺风局打多了会让人盲目自信。</strong><br />\n软件团队经常陷入这样的陷阱：仅凭以往的工作经验，他们就认为当前的技术、架构或语言永远是最佳选择。这可能会产生一种错误的安全感，阻碍对现状的质疑，更会打击对可能更加高效、更具成本效益或可扩展性更强的新选项的探索。</p>\n<h2>目录</h2>\n<p><strong>热点 | Hot</strong></p>\n<p>全球首款经安全认证的开源实时操作系统！开发了 20 多年、部署在超 120 亿台设备上的 ThreadX 正式开源</p>\n<p>省钱在于“架构师”！亚马逊 CTO 20 年架构经验之道：俭约架构师的七大黄金法则</p>\n<p>联手 OpenAI 最强竞对展开生成式 AI 反击战：亚马逊云科技将 S3 写入速度提升 10 倍、推出全新三层技术栈</p>\n<p>疯狂马斯克的“极限”计划居然成功了？！“下云”后成本降低 60%，部分功能代码精简 90%，30 天急速迁移服务器</p>\n<p>微软发布开源平台 Radius：高效构建、运行云原生应用程序</p>\n<p><strong>访谈文章 | Interview</strong></p>\n<p>主力开发已经 68 岁了！“老龄化”严重的 Postgres 开源社区呼唤“年轻一代”</p>\n<p>美图的这 100 天：三月三版本，大模型博弈中谁能笑到最后？</p>\n<p>是时候基于云重新设计 Kafka 了！AutoMQ 如何实现 Kafka 十倍的降本增效</p>\n<p><strong>案例研究 | Case Study</strong></p>\n<p>一个失败的 AI 女友产品，以及我的教训：来自一位中国开发者的总结</p>\n<p>从 ES 到 Clickhouse：信息技术发展的新浪潮</p>\n<p>GitHub 基于大语言模型构建 Copilot 的经验和教训</p>\n<p><strong>推荐文章 | Article</strong></p>\n<p>从谷歌 20 年站点可靠性工程（SRE）中学到的 11 个经验教训</p>\n<p>无服务计算，厂商究竟在打什么算盘</p>\n<p>我，技术不过硬，但是团队里的重要“胶水”</p>\n<p>是时候彻底放弃“高分低能”的 Leetcode 了：AI 时代的面试需要大变革！</p>\n<p>Docker 的诅咒：曾以为它是终极解法，最后却是“罪大恶极”？</p>\n<p><strong>特别专题｜我们需要纯向量数据库吗</strong></p>\n<p>数据库内核杂谈：向量数据库（一）</p>\n<p>数据库内核杂谈： 向量数据库（二）</p>\n<p>数据库内核杂谈：向量数据库（三）</p>\n<p>数据库内核杂谈： 向量数据库（四）</p>\n<p>向量数据库？不要投资！不要投资！不要投资！</p>\n<p>AutoGPT 放弃向量数据库！向量数据库是小题大作的方案？</p>\n<p>向量数据库失宠了？OpenAI 力捧检索增强生成（RAG）技术，对行业来说意味着什么？</p>\n<p><strong>特别专栏 | 视频推荐</strong></p>\n<p>欢迎阅读 InfoQ 架构师电子刊！每个月，我们都会为你带来行业同行关于新兴技术和模式的重要新闻及经验。</p>\n<p>本月，我们聚焦“AI Agent”这一话题。</p>",
    "publish_time": "2023-12-08 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Web ML 库 Transformers.js 提供文本转语音功能",
    "url": "https://www.infoq.cn/article/N1vpady26bKq23GOZNqQ",
    "summary": "<p>JavaScript 库 Transformers.js 提供了类似 Python Transformers 库的功能，设计用于在 Web 浏览器中直接运行 Transformer 模型，而不再需要外部服务器参与处理。在最新的 2.7 版本中，Transformers.js 引入了增强功能，其中包括文本转语音（TTS）支持。这次升级响应了用户的诸多需求，扩展了库的应用场景。</p><p></p><p>文本转语音（TTS）包括从文本创建听起来比较自然的语音，并提供了多种口语语言和 speaker。目前，Transformers.js 只通过 Xenova/speecht5_tts 提供 TTS 支持，而 Xenova/speecht5_tts 基于微软提供的带有 ONNX 权重的 SpeechT5。未来更新计划中包括增加对 bark 和 MMS 的支持。</p><p></p><p>开发人员可以通过 @xenova/transformers 中的管道函数来使用文本转语音功能，包括指定“文本转语音”任务和要使用的模型（'Xenova/ speecht5_ts '），并使用选项{quantized: false}。此外，其中还包含提供 speaker embeddings 的文件链接。</p><p></p><p>将 TTS 模型应用于给定的文本后，它就会输出音频数组和采样率。该数组表示合成语音，可以进一步处理或直接在浏览器中播放。</p><p></p><p>Transformers.js 适用于各种用例，包括风格转换、图像绘制、图像着色和超分辨率。它的多功能性和定期更新使其成为开发人员探索机器学习和 Web 开发结合点的宝贵资产，并使其成为 Web 机器学习领域的可靠工具。</p><p></p><p>按照设计，Transformers.js 在功能上等同于 Hugging Face 的 Python 库 transformers，也就是说，你可以使用非常近似的 API 运行相同的预训练模型。</p><p></p><p>Transformers.js 支持许多任务和模型，涉及自然语言处理、视觉、音频、表格数据、多模态应用和强化学习。该库涵盖了从文本分类和摘要到图像分割和对象检测的各种任务，这使其成为各种机器学习应用程序的通用工具。</p><p></p><p>Transformers.js 提供了广泛的模型支持，包括 BERT、GPT-2、T5 和 Vision Transformer（ViT）等架构，确保用户可以针对特定的任务选择正确的模型。</p><p></p><p>对于 Transformers.js 的发布，社区持积极态度。在今年早些时候发起的 <a href=\"https://www.reddit.com/r/LocalLLaMA/comments/14w0p1p/transformersjs_thoughts/\">Reddit 帖子</a>\"中，用户 Intrepid-Air6525 表示：我决定用它来代替 openai 的嵌入模型。速度非常快。我实际使用的 LLM 是 webLLM ，因为我不想消耗太多的 CPU 处理。</p><p></p><p>用户 1EvilSexyGenius 对 Hugging Face 的市场定位以及关于实际应用的讨论发表了看法：</p><p></p><p></p><blockquote>[…] 借助 Transformers.js 及他们提供的其他优秀的库，很显然， [Hugging Face] 正在努力实现语言模型的民主化，并将它们带给大众。与每天发布的所有模型相比，这样的帖子会让这个社区受益匪浅。</blockquote><p></p><p></p><p>感兴趣的读者可以从 <a href=\"https://huggingface.co/docs/transformers.js/index\">Hugging Face Transformers.js</a>\" 官方网站及其 GitHub 库中获得更多信息。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/11/transformersjs-ml-for-web/\">https://www.infoq.com/news/2023/11/transformersjs-ml-for-web/</a>\"</p><p></p><p></p><p></p><p></p><p></p><p></p>",
    "publish_time": "2023-12-08 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Timescale 推出无服务器数据库的替代方案Dynamic PostgreSQL",
    "url": "https://www.infoq.cn/article/BX5Ee69dLu5UpMBfAPzx",
    "summary": "<p>Timescale 最近推出了 <a href=\"https://www.timescale.com/blog/introducing-dynamic-postgresql/\">Dynamic PostgreSQL</a>\"，这是一种新的云托管选项，可在预定义的 vCPU 范围内扩展数据库容量。这个新选项的宣传亮点是“购买基础容量，峰值需求靠租用解决”，它可以根据负载变化来扩展容量，试图以这种方式解决无服务器产品的不可预测性和可变性问题。</p><p>&nbsp;</p><p>Dynamic PostgreSQL 基于 <a href=\"https://github.com/timescale/timescaledb\">TimescaleDB</a>\"（扩展 PostgreSQL 的一款开源时间序列数据库），希望在预置数据库和无服务器数据库之外提供第三种方案。Timescale 首席技术官兼联合创始人 Mike Freedman 和 Timescale 高级产品经理 Grant Godeke 解释道：</p><p>&nbsp;</p><p></p><blockquote>它基于动态计算技术，这是一项 Timescale 开发的创新，可根据你的负载情况在预定义的最小/最大范围内实时扩展你的可用计算资源。你现在可以选择一个计算范围，不用再针对峰值需求配置资源（并一直为这些资源付费）：你的数据库启动时会使用基础的容量，并且仅在需求上涨时实时扩展到峰值容量。买基础，租峰值。</blockquote><p></p><p>&nbsp;</p><p>当客户选择一个范围时，动态最大值的上限为基本容量的两倍。 Timescale 认为，数据库与 Lambda 函数有很大不同，如今的无服务器数据库对于大多数生产负载来说效率是很差的，因为它们只盯着缩放的极端情况，并且为了服务不断变化的需求而保留的那些资源还使用了费用高昂且难以理解的定价机制。 Ampt 首席执行官兼创始人 Jeremy Daly 写道：</p><p>&nbsp;</p><p></p><blockquote>这里的区别（我认为）是他们将其定位为“买基础，租峰值”。我很久以前就开始这么呼吁了，云服务商的无服务器服务定价机制一直缺这么一块，他们应该跟上脚步。</blockquote><p></p><p>&nbsp;</p><p>数据库顾问 Tobias Petry 评论说：</p><p>&nbsp;</p><p></p><blockquote>它就像是支持突发机制的 EC2 机器一样，这是一个完美的解决方案：基础定价的成本低廉，你只需在极少数情况下为临时增加的需求支付更多费用。有了它，团队就用不着像往常那样买过大的实例了。</blockquote><p></p><p>&nbsp;</p><p>无服务器数据库的好处之一是能够将容量缩到零，只需为所使用的计算时间付费。Freedman 和 Godeke 认为：</p><p>&nbsp;</p><p></p><blockquote>在某些用例中，“缩放到零”是有意义的，比如说概念验证演示或更偏业余爱好者的应用程序（……）但如果跑的是你的生产数据库和更接近运营层面的东西？你肯定不想要缩到零。缩放到零意味着重新启动时要“冷启动”：数据库共享缓冲区清空了、操作系统缓存清空了、目录缓存也清空了。</blockquote><p></p><p>&nbsp;</p><p>Dynamic PostgreSQL 主要针对在 AWS 上运行的部署，声称客户从 RDS for PostgreSQL 迁移过来时会节省 10-20% 的成本，从 Aurora Serverless 迁移过来时可节省 50-70%，但他们尚未发布基准测试。</p><p>&nbsp;</p><p>Dynamic PostgreSQL 并不是 Dynamic Infra 发布周期间的唯一亮点：<a href=\"https://www.timescale.com/blog/create-timescale-services-with-terraform-provider/\">Terraform provider</a>\" 已全面可用，<a href=\"https://www.timescale.com/blog/timescale-x-cloudflare-time-series-from-the-edge/\">Cloudflare Hyperdrive</a>\" 增加了超级表支持，Timescale 云现已在澳大利亚、欧洲、美国和亚洲的 7 个 AWS 区域推出。</p><p>&nbsp;</p><p>1-2 个 CPU 范围的每月定价为 87.60 美元起，如果使用量高于承诺的基础容量，则每个 CPU 每小时额外收取 0.12 美元。 Timescale 为新帐户提供 30 天免费试用。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/11/timescale-dynamic-postgresql/\">https://www.infoq.com/news/2023/11/timescale-dynamic-postgresql/</a>\"</p>",
    "publish_time": "2023-12-08 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]