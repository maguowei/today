[
  {
    "title": "eBay如何提高通知平台的可靠性",
    "url": "https://www.infoq.cn/article/S1h2hqgFvbQphKV1ODG1",
    "summary": "<p>eBay工程师一直在使用<a href=\"https://tech.ebayinc.com/engineering/how-ebays-notification-platform-used-fault-injection-in-new-ways/\">故障注入技术</a>\"来提高通知平台的可靠性，并探索其弱点。虽然故障注入是一种常见的行业实践，但eBay尝试了一种利用插装将故障注入引入到应用程序层的新方法。</p><p>&nbsp;</p><p></p><blockquote>该平台负责向第三方应用程序推送平台通知，以提供商品价格、商品库存状态、支付状态等方面的最新变化。它是一个高度分布式和大规模的系统，有许多外部依赖，包括分布式存储、消息队列、推送通知端点等。</blockquote><p></p><p>&nbsp;</p><p>eBay工程师Wei Chen表示，通常情况下，故障注入是在基础设施层进行的，例如，通过服务器断开连接或超时，或使给定资源暂时不可用，引入HTTP错误，从而导致网络故障。这种方法代价高昂，并且对系统的其他部分有许多影响，因此很难单独探索故障的影响。</p><p>&nbsp;</p><p>但这并不是唯一可行的方法。相反，可以在应用程序层创建故障，例如，在HTTP客户端库中添加特定的延迟以模拟超时。</p><p>&nbsp;</p><p></p><blockquote>我们对依赖服务的客户端库的类文件进行了插装，以引入我们定义的不同类型的故障。当我们的服务通过插装API与底层资源通信时，将会引发引入故障。由于更改了代码，这些故障并没有真正发生在我们的依赖服务中，其效果是模拟的，使我们能够在没有风险的情况下进行实验。</blockquote><p></p><p>&nbsp;</p><p>三是eBay实现的强制调用方法显示错误行为的基本工具：阻塞或中断方法逻辑，例如抛出异常；更改方法的状态，例如更改 response.getStatusCode() 的返回值；以及替换方法参数的值，包括修改发送给方法的参数值。</p><p>&nbsp;</p><p></p><blockquote>为了实现上述三种类型的插装，我们创建了一个Java代理。在代理中，我们实现了一个 classloader ，它将插装应用程序代码中使用方法的代码。我们还创建了一个注解来指示将插装哪个方法，并将插装逻辑放在注解的方法中。</blockquote><p></p><p>&nbsp;</p><p>此外，eBay工程师还实现了一个配置管理系统，以动态更改故障注入在运行时的行为。特别是，对于eBay应用程序支持的每个端点，工程师可以更改一些参数来测试特定的行为。</p><p>&nbsp;</p><p>据Chen介绍，eBay是业界首个使用代码插装在应用程序层实施故障注入的组织。如果你对这种方法感兴趣，请不要错过原文中提供的完整说明。</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/12/eBay-fault-injection-instrument/\">https://www.infoq.com/news/2022/12/eBay-fault-injection-instrument/</a>\"</p>",
    "publish_time": "2023-01-17 09:41:50",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "每年数千次演练背后，华为云确定性运维还有哪些真功夫？",
    "url": "https://www.infoq.cn/article/C0xO7wq9zMKGZyqhk3yM",
    "summary": "<p>凌晨 0：14，位于南京的运维监控中心值班专家收到了业务告警，近 5000 台服务器发生故障。1 分钟内，业务系统通过双活容灾架构，实现即时自动切换。半小时左右，云服务器完成全部故障恢复，业务始终未受影响。</p><p></p><p>这场在云上生产环境的“故障突袭”，是华为云与华为终端云联合策划进行的一次技术演练。演练规模空前地下架了整个 AZ（可用区）近 5000 台服务器，以极端严苛的技术考验，验证了华为云和华为终端云的服务稳定性、健壮性。</p><p></p><p></p><p></p><p>这只是华为云日常实战演练的一个缩影。过去一年内，华为云在内部累计开展超过 2000 次“混沌工程”演练，联合外部客户完成超过 20 次交易类、游戏类等应用高可用演练。通过高覆盖度、高随机性的混沌工程，让华为云的业务不断处于高可用性的实时检测中，确保一旦遭遇真实故障，也能始终保持真正的安全、稳定、高质量。</p><p></p><p>为了深入探究华为云的运维技术实践，InfoQ 日前采访了华为云 SRE 团队（站点可用性工程师）多位专家，一起聊了聊关于云时代确定性运维的理解与认知。</p><p></p><h2>云上高可用运维，焦虑从未如此迫切</h2><p></p><p></p><p>属于云的时代正在来临。如今再提起这句话，已经不再是云厂商的美好愿景，更是产业界数字化转型的确定变革方向。</p><p></p><p>据 Gartner 预计，至 2025 年或将有 90% 的企业关闭传统数据中心，企业的行业应用开发将全面走向云化。然而，上云虽然降低了企业的技术开发成本，带来了更大的灵活性。但随着越来越多的设备、终端和传感器联网，越来越多的应用加快云化和 SaaS 化，稳定性和可靠性，已经成为每一家上云企业亟需面对的挑战。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e6/e62f2a897137d53a8f2161f76d1db703.png\" /></p><p></p><p>在传统运维时代，运维工程师需要手把手处理服务器、网络等硬件设备，而在云时代，运维工程师已经无法见到物理的任何设备，不再需要直接操作实体资源，负载均衡、动态伸缩、数据迁移等服务全部可以交由云平台厂商来提供。既然云计算释放了运维工程师的精力，那是什么原因使得云时代的运维焦虑变得如此迫切呢？</p><p></p><p>华为云将云时代运维面临的挑战用“MATE”进行了概括:</p><p>M（Messy Complex）解耦的网络：系统服务化之后，耦合会使调用关系变得复杂，如何能快速做好可靠性、可用性观测、问题排查以及问题诊断，成为了云上运维的重大挑战。A（Active Iteration）快速迭代：传统 IPD 版本周期长达半年，但在 DevOps 模式下，每 1～4 周便会发布一个版本，云上每天可能都有服务更新，敏捷快速的交付方式给运维和交付带来了巨大的挑战。T（Trustworthy Operation）安全生产：在云计算环境中，有很多比较容易忽略的安全隐患可能被恶意利用。而且云计算环境是一个高度动态的环境，一两次的检查工作并不能保证整个 IT 环境的持续合规，云上运维对动态安全可审计的要求更高。E（Evolution FullStack）全栈运维：在传统模式下交付产品，只需要对可靠性负责，不需考虑周边可用性制约因素，但是作为服务运营商，需要对服务全栈可用性负责。</p><p></p><p>回归到运维工作的本质，无论是传统运维还是云业务运维，其根本都是为了保障企业业务的连续性，提供安全、稳定、高质量的 IT 运维服务。</p><p></p><p>而随着云时代的到来，运维团队必须面临新业务的高度不确定，包括技术迭代的不确定性、人员技能的不确定性以及产品更新的不确定性。在层层不确定加码下，企业都迫切希望找到一个确定性的路径，将安全风险的敞口纳入技术体系保障，让系统持续高质量运行。</p><p></p><h2>“确定性运维”：从不确定中寻找确定&nbsp;&nbsp;</h2><p></p><p></p><p>可以预见的是，随着数字化浪潮席卷千行百业，无论是软硬件故障、机房故障，还是人为操作导致故障，现网都存在着大量不确定因素。如何应对这种高度的不确定性，便是 SRE 要解决的问题。为此，华为云 SRE 提出了<a href=\"https://xie.infoq.cn/article/b5f48564e395370e715b09cc9\">“确定性运维”</a>\"的技术理念。</p><p></p><p>自 2017 年起，华为云开始积极探索 SRE 的技术创新模式，目前已发展了国内最大的 SRE 团队之一。基于华为长期的研发实践和企业数字化转型经验，华为云进一步将确定性运维能力演进为涵盖“高可用架构”“动态风险治理体系”“高度智能运维框架”的有机体系，覆盖了应用从产品设计、开发到部署上线，再到日常运行的生命周期全过程。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4a/4ad8c6039668c566fe323a4cbea3f862.png\" /></p><p>（在新华社智库《中国云计算创新活力报告》中，华为云斩获安全可靠能力排名第一。）</p><p></p><p>首先，在确定性的高可用架构中，华为云 SRE 提出了确定下的三个维度定义：第一是传统的可靠性概念，让软件有确定性的失效率，并且该失效率在控制范围内；第二是确定性的恢复时长，软件失效后能在一个确定性的时间内恢复；第三就是确定性影响面，不能因为一个单点的故障就扩散到全网，需要通过一个确定性的爆炸半径，让每次故障的影响只在很小的范围。</p><p></p><p>“高可用架构，能让我们的云服务软件在前端就具备高可靠、高可用的能力。”华为云 SRE 架构师李宁泊介绍说。以开篇所描写的近 5000 台服务器突袭演练为例，之所以能够实现秒级切换、迅速恢复、业务不受影响，背后便是高可用架构在进行支撑。</p><p></p><p>据了解，为了尽量避免故障风险，很多云厂商都采用了多 AZ 部署方案。而华为云的特点在于，多 AZ 部署之后，消息日常并不跨 AZ 流动的，让业务实现单一的消息请求，确保故障不跨 AZ 扩散。因此，AZ 内发生的任何故障都不需大费周章地单点定位、恢复，只需要自动进行 AZ 间的整体业务切换，就可以即刻消除故障影响。</p><p></p><p>动态风险治理体系将 AI 能力引入运维，以技术驱动实现风险提前冒泡，并及时主动清除；持续提升监控、定界与快速恢复能力，构建混沌工程等主动运维能力；用数据智能支撑运维工作的持续改进。</p><p>同时，还需要有高度智能的运维框架支持，托数据中台，结合先进的算法，实现智能告警、智能故障定界、自动恢复等功能。</p><p></p><p>此外，为了帮助处在不同场景的企业，有效地规划和制定运维策略，华为云还推出了确定性运维成熟度模型，帮助业内同行基于运维模式，对组织、文化、体系、能力、工具进行评估，共同探讨优化策略。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e6/e61c820fde8d978d74f0695a026cc3ff.png\" /></p><p></p><h2>不止于稳定性保障，SRE变革背后的千行百业数字创新</h2><p></p><p></p><p>谈及华为云 SRE 团队的工作重心，受访的专家们给了两个关键词——“向前走”和“向下走”。</p><p></p><p>第一个关键词是“向前走”，它主要有两层含义：一层是解决问题，另一层是定位问题源头，杜绝类似问题重复产生。在早些年云业务刚起步时，SRE 工作还是聚焦于被动式运维，但随着业务规模、服务器规模呈指数级增长以后，SRE 团队发现，修复是远远满足不了业务发展诉求的。</p><p></p><p>在近年来的探索中，华为云 SRE 发生了一个关键变化——基于全生命周期的质量管理，运维开始从后端走向前端，建立了一个“质量的大循环”，不断提升整个华为云的架构健康度、开发健康度、交付健康度以及运维健康度。在 SRE 运转体系愈发成熟的情况下，SRE 要扮演一个“先知”的角色，来发现未知的风险或者故障，同时也需要站在更高的视角，提前预知重大风险和隐患，并且通过主动运维的方式把削减风险。</p><p></p><p>另一个关键词是“向下走”，即把专家的经验和能力沉淀到系统，变成组织资产，支撑业务往前快速发展。以华为云的现网举例，如果硬件发生故障，已经基本不需要人为干预了，SRE 团队已早早将这种能力编排进引擎，故障自愈系统将会自动识别该硬件属于哪个服务，继而调用这个服务的隔离接口或者业务迁移接口，并针对这个服务做恢复预案，让其立刻恢复。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8c/8c8d982626969bde1a2da9ecb2209111.png\" /></p><p>（华为云贵安数据中心）</p><p></p><p>面对国内公有云市场竞争加剧的发展态势，专家认为，随着公有云厂商的发展成熟，各家在对外的基础服务功能上会慢慢趋同。在这种情况下，云厂商实现突围的关键要素是什么呢？毫无疑问，安全稳定高质量的服务是必选项，也是决定性的基础。</p><p></p><p>当企业选定了一家云厂商后，它能不能持续地、确定地来保证现网的质量，决定了合作的未来。因此，在李宁泊看来，云厂商之间的竞争力最终是质量竞争，谁的质量更可靠，功能更稳定，谁就更容易得到客户信赖。</p><p></p><p>在数字时代浪潮中，没有任何一个技术架构可以永远不变，没有任何一个解决方案是完美的。专家们也认识到，运维理念和技术的演进升级永远在路上。例如，在强调现网质量的同时，也需要在易运维上做更多工作，持续降低企业用云成本，保障全球企业和开发者的业务敏捷和商业成功。这也是华为云 SRE 团队安全稳定高质量业务承诺的目标所在。</p><p></p><h2>写在最后</h2><p></p><p></p><p>现网的安全、稳定、高质量一直是华为云的关键词，尽管这三个词听上去很简单，但从外部视角来说，我们能看到的只是冰山上的一部分，在冰山之下还有大量的工作要去做。</p><p></p><p>如何把不确定的要素封闭在云厂商之内，而不外溢到客户侧，是华为云 SRE 持续追求的业务目标。“质量是我们所有研发团队的自尊心。”这是华为云 SRE 团队经常提到的一句话，而从这句话的背后，也体现了华为云对产品质量的决心和信心。</p>",
    "publish_time": "2023-01-17 14:14:23",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "标准升级 |《企业数字化成熟度模型IOMM标准》（企业整体视角）发布",
    "url": "https://www.infoq.cn/article/d485ccf9cd64cbb1410b0991c",
    "summary": "<p>2023年1月6日至10日，由中国信息通信研究院（以下简称“中国信通院”）主办的“2023中国信通院ICT深度观察报告会”线上召开。在1月9日上午进行的政企数字化转型分论坛上，中国信通院云计算与大数据研究所副所长栗蔚做开场致辞并发布了《企业数字化成熟度模型IOMM标准》（企业整体视角），随后中国信通院云计算与大数据研究所政企数字化转型部副主任徐恩庆（主持工作）对该标准进行了解读。本文将对该标准做简要介绍。</p><p></p><h3>一、企业数字化成熟度模型IOMM 诞生及应用情况</h3><p></p><p><img src=\"https://static001.geekbang.org/infoq/d5/d5be7ac9db549a2d33cf4e4d8a81797d.png\" /></p><p>2020年中国信通院牵头行业各单位，发布了企业数字化成熟度模型IOMM标准体系。标准发出后，陆续在二十余家企业内进行了贯标落地，其中不乏中国联通、中国移动、中国建设银行、招商局集团、阿里云等大型企业。标准在帮助企业规划指导转型路径，定位转型所处阶段上发挥了积极作用。</p><p></p><h3>二、企业数字化成熟度模型IOMM标准（企业整体视角）</h3><p></p><p></p><h4>2.1 整体概述</h4><p></p><p><img src=\"https://static001.geekbang.org/infoq/e6/e651b1d6a049cb9a247e199d51df2bdb.png\" /></p><p>为应对愈加复杂的企业内外部环境和转型挑战，中国信通院在前期工作基础上，经过2年迭代发展，形成了企业数字化成熟度模型IOMM 2.0体系，本次发布的是《企业数字化成熟度模型IOMM标准》（企业整体视角），涵盖数字化转型6大能力建设，6大价值评估和5级成熟度模型。</p><p></p><p>6大能力包含战略全域化、管理精益化、业技融合化、数据价值化、平台云智化和生态聚合化；6大价值包括管理模式优化、业务运营提升、市场价值增强、生态链接拓展、发展动能强韧和商业内核升级；5个等级分别是积极探索级、单元实践级、领域创新级、全面转型级和鼎新引领级。</p><p>&nbsp;</p><p>企业通过数字化能力建设支撑其数字化转型过程，通过价值评估来衡量转型成效，最终通过转型等级来确认其转型所处阶段。</p><p></p><h4>2.2 数字化六大能力</h4><p></p><p><img src=\"https://static001.geekbang.org/infoq/aa/aad53cfbf01538051d5debf2e0f72236.png\" /></p><p>企业通过数字化能力建设支撑其数字化转型过程，在能力构建过程中，将经历顶层设计，贯彻执行，到能力沉淀的步骤，其中数据作为生产要素将在整个过程中不断积累并为各环节改善提升和发掘价值提供依据。伴随数字化能力的持续构建，该过程也将不断重复和迭代。</p><p>&nbsp;</p><p>内部能力建设主要聚焦于内部核心能力的持续构建，包含战略、管理、业技融合、平台及数据等方面，通过内部能力建设，企业的核心竞争力将不断增强；企业外部的生态聚合化能力主要聚焦于企业内外部的协同以及内外部的价值互动，如与供应商、合作伙伴、生态上下游企业在信息、物流、平台、资源等方面的深度互通与合作。</p><p></p><h4>2.3 数字化六大价值</h4><p></p><p><img src=\"https://static001.geekbang.org/infoq/99/99b035f608bd8c9f63bf9dc89bd4271d.png\" /></p><p>随着企业数字化转型工作的不断推进和深化，数字化转型为企业带来的价值也将会逐步显现并释放出来。从短期、中期和长期价值来看，企业将会逐步实现自体优化、外化扩展以及战略升维的价值演进，为最终的商业成功提供持续的动能。&nbsp;</p><p>&nbsp;</p><p>短期价值将主要体现为管理模式和管理效率的优化，以及业务运营效果的提升；中期价值将主要体现在市场对于企业价值的认可度上升，以及产业上下游、合作伙伴等商业生态的扩大及链接强度的提升；长期价值将主要体现为企业拥有更强的生命力，能有效应对内外部环境的不确定因素，以及企业整体商业竞争力的增强和升级。</p><p></p><h4>2.4 数字化成熟度5级标准</h4><p></p><p><img src=\"https://static001.geekbang.org/infoq/7e/7ebf8968ef34e790248e1109c6b0dd17.png\" /></p><p>企业的数字化转型从整体发展阶段来看，将主要经历“起、点、线、面、体”的发展历程，从早期的积极探索，单元实践，到中期的领域创新与全面转型，再到最后实现鼎新引领，不同阶段对应着不同的发展思路和发展特点。随着转型进程的不断深入，数字化涉及企业内部的管理、运营及外部生态的覆盖范围也将逐步扩大，同时，数字化转型为企业带来的价值提升与核心竞争力增强效果也会不断显现。</p><p>&nbsp;</p><p>在早期的积极探索和单元实践阶段中，企业已具备对于数字化转型重要性的认知，并开始相关探索，评估自身业务条件、技术能力、基础资源等，之后制定转型战略，从单个业务单元、管理单元或IT技术单元入手，利用数字化技术改造和规范相应的活动，同时在组织、人员、资金等方面予以支撑和保障，实现单点效率提升。</p><p>&nbsp;</p><p>在中期的领域创新和全面转型阶段中，企业开始向多领域纵深转型发展，打通了不同业务领域的业务流程和数据，构建起各类数字化平台，形成完善的业务流程及数据治理体系。随着转型深入，将不断践行“数字原生”理念，构建起覆盖业务、管理、经营等在内的全流程、多领域数字化体系，实现技术、业务、数据平台深度融合，领域各环节高度自治，并以数据及技术驱动企业治理体系和业务体系不断创新优化，形成竞争优势。</p><p>&nbsp;</p><p>在最后的鼎新引领阶段，这已经是企业数字化转型的最高阶形态，企业已将内外部数字化平台有效互联，实现了自身业务与外部产业链及行业生态的高效协同，通过不断提升的产业运行效率，来优化生态结构，并基于此生态衍生新的商业模式，打造极致的用户体验。与此同时，企业可将自身数字化服务能力对外输出，为产业生态赋能，实现高质量发展。</p><p></p><h3>三、后续进展</h3><p></p><p>《企业数字化成熟度模型IOMM标准》（企业整体视角）发布后，将会陆续邀请相关企事业单位参与标准的试评估，以进一步验证本方法论体系对实际工作的指导作用，同时，随着评估工作的开展，也将同步对本标准的细节进行调整与完善，以不断提升标准的引领作用。期待业界同仁的共同参与。</p><p></p><p>说明：</p><p>为进一步探讨交流数字化转型相关话题，我们建立了微信群，您可添加董老师微信号，注明身份后，申请加入。</p><p>联系人：董老师&nbsp; 13810413143（微信同号）</p>",
    "publish_time": "2023-01-17 16:47:31",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "仿照电影情节写代码，程序员偷盗自家公司30万美元后入狱",
    "url": "https://www.infoq.cn/article/7ODT3qj3F4rGT2ezz2O5",
    "summary": "<p></p><blockquote>这确实是部好片子，但被拿来指导违法活动着实有点离谱。</blockquote><p></p><p>&nbsp;</p><p>一项针对华盛顿州某软件工程师的盗窃指控称，此人从邪典电影《上班一条虫》（Office Space）中汲取灵感，从前雇主手中骗取超30万美元。值得注意的是，30万美元这个数字，恰好跟这部歌颂受压迫上班族的影片中虚构软件公司Initech被盗的金额相同。</p><p>&nbsp;</p><p></p><h2>电影情节：植入“偷钱”代码，实现财富自由</h2><p></p><p>&nbsp;</p><p>《上班一条虫》（Office Space）是一部&nbsp;1999 年上映的美国黑色喜剧电影，男主角彼得·吉本斯 (Peter Gibbons) 是一位<a href=\"https://baike.baidu.com/reference/8841098/5a3fGbKRSwr5PxBpj221jwR1xPnzINcPGqX2CeoUSUuQS3AkAT0m9U1tF7jzaZh2wgcpGAQCVUDAnWEo6du88gVT\">28岁处于“中年危机”时期</a>\"的程序员（此处“中年危机”定义来自当年的影片介绍），在名为“Initech”的软件企业上班，工作朝九晚五，还有着随时被裁掉的焦虑。每当沮丧至极，他都会自动切入幻想状态：要是有一百万该怎么过？</p><p>&nbsp;</p><p>电影中，彼得终于因企业管理不当和裁员政策而身心俱疲，决定伙同其他同事一起铤而走险。他们计划了一件大事，如果成功了他们将可以带着大笔钱早早退休：他们在Initech的会计系统中植入了一种病毒，该病毒本该从每笔交易中偷窃被舍入略去的几分钱，再把这笔小小收益转入主角们的账户内，两年后他们就能神不知鬼不觉的变成百万富翁。</p><p>&nbsp;</p><p>不过，他们算错了小数点，导致他们第一天就拿到了30多万美金。主角们第二天醒来发现收益远远超出了预期，他们非常害怕事情败露，但另一名对公司怨念极深的老员工已经抢先一步放火烧楼。这场大火销毁了男主角的犯罪证据。全剧终。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e8/e80e2e737751afbe5afd04969ced68f3.jpeg\" /></p><p></p><p>真正上班摸鱼的人，来自该片剧照</p><p>&nbsp;</p><p>这部影片原本定位为“天马行空的职场喜剧片”，但结果太过写实，甚至在上映24年后的今天，各种片中情境放到职场上，仍能特别引人共鸣。很多人评论本片为“上班族必看电影！” ，比如片中所叙述的职场生态：</p><p>&nbsp;</p><p>公司使用大量意义不明的名词缩写，并且人人都用得琅琅上口。总是花费时间创造符合格式的日报、周报内容。被多个Leader监督，个个对你都有实质影响力。常常有要全公司放下手边工作的会议。组织架构常常变动，外加各种裁员。时常加班，明明事情做完想要准时下班也跑不了，甚至假日也要去公司。......</p><p>&nbsp;</p><p>剧中原本超现实的剧情设置，是导演给职场打工人放飞幻想的机会，就像我们经常也幻想着：如果我中了500万，那我就不上班了。虽然我们大部分人过的生活就像彼得，但我们不会像彼得那样为了财富自由策划商业犯罪。现实中，大家都明白我们不能像彼得那样幸运，在犯罪后恰巧碰到公司火灾而不用坐牢。但和电影男主角同样处于28岁年纪的程序员Ermenildo Valdez Castro，就不知道怎么脑袋抽抽了，真的就仿照电影主题和情节实施了犯罪行为。</p><p>&nbsp;</p><p></p><h2>现实情节：成功效法电影，但最终事情败露</h2><p></p><p>&nbsp;</p><p>Castro自2018年12月开始在总部位于西雅图的Zulily工作，成为“购物体验”团队的一员，并“直接参与”了客户结账流程的编程工作。</p><p>&nbsp;</p><p>根据指控文件显示，Castro办公笔记本电脑上的策划文件，证实了他是在仿照电影主题进行犯罪，其中他将这个计划称为“Office Space项目”。Castro被控两项一级盗窃罪和一项一级身份盗窃罪，受害方则是他工作所在的电商公司Zulily。</p><p>&nbsp;</p><p>西雅图警方指控称，Castro于2022年春季开始恶意编辑Zulily代码，并通过以下上三种方式攫取非法所得。</p><p>&nbsp;</p><p>华盛顿州在文件中称：</p><p>&nbsp;</p><p>自2022年春季起，Castro开始对Zulily.com的结账页面实施一系列恶意软件编辑，共造成30万2278.52美元损失。具体实施流程为：</p><p>&nbsp;</p><p>（1）他编写一段软件代码，将一小部分Zulily客户交易账目中的运费转移到了由Castro控制的Stripe.com账户——涉及的盗窃金额共11万240.71美元；</p><p>（2）在Zulily着手调查运费问题后，他又编写了替换代码，向部分客户收取双重运费，并将“全额”运费发送至Zulily和Castro的Stripe账户——涉及的盗窃金额共15万1545.50美元；</p><p>（3）与前两种行为无关，通过操纵Zulily.com上的商品价格，Castro以几美分的价格购买这些商品——涉及的盗窃金额共4万842.31美元。合计盗窃总额为30万2278.52美元。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/63/63d8dcbdf04e93a5d2f0bb1c144a4ad3.jpeg\" /></p><p></p><p>美法院文件截图</p><p>&nbsp;</p><p>2022年5月下旬，该公司的反欺诈团队发现了Castro操纵商品价格并将订购货物发送至塔科马家中的行为。他于6月3日被勒令行政休假，6月9日即遭解雇。Castro在辩护中表示，他的行为只是在以软件工程师的身份测试大额订单的完整性，只是在事后“忘记”撤销这些项目。</p><p>&nbsp;</p><p>在遭解雇之后，他归还了自己的办公笔记本电脑，Zulily则着手检测其中的内容。母公司Quarate Retail Group网络安全主管Steve Carney向西雅图警方证实，他们在其中发现了一份OneNote文件，内容“概述了他窃取运费的计划”，Castro还将行动称为“Office Space项目”。</p><p>&nbsp;</p><p>警方声称，“除其他事项外，此OneNote文件确定了操控策略，以消除一切来自Zulily公司内部IP地址的交易痕迹；另一项操控策略则确保向Stripe打款的支付卡与客户在Zulily存档的购物支付卡相一致；提到有客户被多次扣费，因此须进行故障排查；还指出需要更新某些审计日志和「禁用警报日志记录」以「清除证据」。”</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ad/ad8d9cb44dd347b4ebb9d2a5bdab23c7.jpeg\" /></p><p></p><p>&nbsp;</p><p>警方在审讯中曾问及，Castro为什么在被解雇后仍未归还订购的1000多件商品，但此人对Zulily的回应只有“他们活该”。</p><p>&nbsp;</p><p>警方还从审讯中得知，这笔非法所得已经“没了”——Castro拿去投资了GameStop等公司的股票期权。</p><p>&nbsp;</p><p>在搜查Castro的家时，官员们发现了大量欺诈订购的货物，“有些还没有拆封，静静躺在贴有运输标签的配送箱里。”据称，其中一件商品是价值565.99美元的沙发床，Castro只花了1美元就将其买下。</p><p>&nbsp;</p><p>“Office Space”是部喜剧片，所以主角们从头赢到了尾。现实中却没那么幸运：Zulily办公室并没有因其他员工的报复而付之一炬。</p><p>&nbsp;</p><p>Castro将于1月26日在西雅图市金县高等法院出庭受审。</p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://regmedia.co.uk/2023/01/13/617139119-ex-zulily-engineer-charged-for-alleged-theft-scheme-inspired-by-office-space.pdf\">https://regmedia.co.uk/2023/01/13/617139119-ex-zulily-engineer-charged-for-alleged-theft-scheme-inspired-by-office-space.pdf</a>\"</p><p><a href=\"https://www.theregister.com/2023/01/13/office_space_zulily_theft/?td=rt-3a\">https://www.theregister.com/2023/01/13/office_space_zulily_theft/?td=rt-3a</a>\"</p><p><a href=\"http://commagazine.twmedia.org/?p=932\">http://commagazine.twmedia.org/?p=932</a>\"</p><p><a href=\"https://zhuanlan.zhihu.com/p/62869215\">https://zhuanlan.zhihu.com/p/62869215</a>\"</p><p><a href=\"https://baike.baidu.com/reference/8841098/5a3fGbKRSwr5PxBpj221jwR1xPnzINcPGqX2CeoUSUuQS3AkAT0m9U1tF7jzaZh2wgcpGAQCVUDAnWEo6du88gVT\">https://baike.baidu.com/reference/8841098/5a3fGbKRSwr5PxBpj221jwR1xPnzINcPGqX2CeoUSUuQS3AkAT0m9U1tF7jzaZh2wgcpGAQCVUDAnWEo6du88gVT</a>\"</p>",
    "publish_time": "2023-01-17 17:58:59",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "《2022 龙蜥社区全景白皮书》",
    "url": "https://www.infoq.cn/article/hTBopHUVZqf4qzL2X1w4",
    "summary": "<p>操作系统作为连接用户应用与硬件资源间的桥梁，是充分利用基础设施算力的纽带，也为新的应用场景提供运行环境，是龙蜥社区技术投入的重点方向。为 此社区打造了以龙蜥操作系统 Anolis OS 为核心的操作系统发行版及软硬件生态，希望将 Anolis OS 建设成为数字基础设施互联互通的基石，让用户搭上云计算时代的快车。<br />\n用户在建设云计算时代数字基础设施时，需要克服诸多技术挑战。Anolis OS 在过去两年中也着重在此方面进行能力建设，全面支持了各类芯片架构;完成了 一批软硬件协同技术的标准化和规模化;发布了一系列在通用场景、云原生场景与安全可信场景下经过大规模使用的技术;为用户业务的平滑迁移与稳定运 行构建了经过实践检验的迁移与运维工具。以期帮助用户更好的实现云计算时代数字基础设施的建设。</p>",
    "publish_time": "2023-01-17 18:18:29",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "华为云发布冷启动加速解决方案：助力Serverless计算速度提升90%+",
    "url": "https://www.infoq.cn/article/bdczHWk9LxuOC9GrVToL",
    "summary": "<p></p><p></p><p>子游：华为元戎高级工程师</p><p>平山：华为云中间件 Serverless 负责人</p><p>琪君：华为元戎负责人</p><p></p><p>Key Takeaways</p><p></p><p>冷启动 (Cold Start) 一直是 Serverless 领域面临的优化难题之一，华为云创新提出了基于进程级快照的冷启动加速解决方案，致力于在用户几乎无感知的前提下，有效提升应用的冷启动性能；特别的，Java 应用冷启动速度慢的问题尤为突出。本文以 Java 场景为例，介绍华为云在冷启动性能优化方面的探索历程，并揭秘 90%+ 性能提升背后的技术实现原理。文末我们也提供了 Quick Start，帮助用户更快地上手该新特性。</p><p></p><p></p><h2>问题引言：Java 应用冷启动速度面临巨大挑战</h2><p></p><p></p><p>Serverless 应用启动时，都需要先进行初始化。其初始化时长一般取决于应用本身的属性，如业务逻辑、编程语言等，其中 Java 应用的初始化过程通常是最慢的。以下基于一个典型的 Java 应用，对其启动时延进行拆解，各阶段耗时分布如图 1 所示：</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/25/25a8234550814222f5588a7f059d8130.png\" /></p><p></p><p>图 1：Java 应用启动耗时分解</p><p></p><p>其中，端到端冷启动耗时可分为 2 大部分：</p><p></p><p>平台侧时间：</p><p></p><p>主要包含执行环境创建（如容器启动）、执行环境初始化（如代码包下载、部署）等准备工作，此阶段最多是秒级响应，在冷启动整体耗时中占比很低，通常不到 5%，平台侧也支持一些优化方式，将耗时进一步压缩至毫秒级；</p><p></p><p>服务侧时间：</p><p></p><p>主要包含应用框架启动（如构建 Spring ApplicationContext）、业务初始化（如业务数据初始化）等动作，此阶段耗时一般较长。在本例中，应用框架启动耗时占比约 30%，业务初始化占比约 65%。由此推断，该阶段执行的动作是 Java 应用启动慢的核心所在。</p><p></p><p>Java 应用启动慢的根因其实也不难理解，主要有：</p><p></p><p>框架复杂：Spring 作为一个企业级的框架，为了支持广泛的应用需求，存在大量的可配置和初始化逻辑，并通过复杂的设计模式来支撑这种灵活性。例如，一个 spring-boot-web 的 hello world，依赖的 class 文件就多达 7404 个，见图 2；JVM 的一次编译，到处运行：类加载时，查找类、校验类的开销会随着应用复杂度而增长；同时，在应用刚启动时，方法还没有完全被 JIT 编译完成，因此大部分情况停留在解释执行，影响了应用启动的速度。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/72/72e761ecaeb26db38207d06224e51159.png\" /></p><p></p><p>图 2：hello world 依赖的 class 个数</p><p></p><p>因此，对于时延敏感型的 Java 应用程序，在突发流量下发生冷启动时，可能会导致用户体验下降。为了应对这一挑战，用户可以提前预留资源来减少冷启动发生的频率，或者对自己的应用进行性能调优，但是第一类方案无形中增加了用户的 keep-alive 成本，第二类方案也有着较高的技术门槛且往往效果比较有限。</p><p></p><p></p><h2>基于快照技术的冷启动加速：华为云的优化探索之路</h2><p></p><p></p><p></p><h3>Part I：站在巨人的肩膀上</h3><p></p><p></p><p>业界针对 Java 应用的启动速度优化已有一些优秀的实践，可分为以下几类：</p><p></p><p></p><h4>AOT：</h4><p></p><p></p><p>主要有 GraalVM&nbsp;[1]&nbsp;、EJET 等，AOT 方案是通过在程序运行前，直接将 Java 源码编译成本地机器码，因为提前编译并不占用运行时间，以此来显著提升应用的启动速度，同时本地机器码可以持久化于磁盘中，不占用内存且可重复使用。但是该类方案在特定场景也存在一定的局限性，如 GraalVM 对反射的支持并不友好，在涉及反射的地方都需要新增配置；EJET 虽然解决了反射的问题，但是其编译时间较长且不稳定，在复杂应用场景下也存在性能劣化问题。</p><p></p><p></p><h4>AppCDS&nbsp;[2]&nbsp;：</h4><p></p><p></p><p>AppCDS 方案是通过在 JVM 启动时从 JSA 文件读取共享数据，省略了共享类的加载过程，提升 JVM 启动速度；同时，多个 JVM 共享同一个归档文件，减少动态内存占用，可以提升内存使用率。该类方案主要适用于类加载比较多的场景，在一般场景下提升有限，且其对共享类的支持有一定限制，如运行时动态生成类不支持共享等。</p><p></p><p></p><h4>其他针对性（Spring 框架）方案：</h4><p></p><p></p><p>如 Lazy Initialization&nbsp;[3]&nbsp;、Scanning-index&nbsp;[4] 等，前者通过懒加载的方式来减少启动时加载类的数量，一定程度上提升启动速度；后者通过在编译阶段创建索引，避免启动时扫描所有路径来进行加速。但是该类方案在 Serverless 场景缺乏一定的普适性。</p><p></p><p>华为云 FunctionGraph 创新提出的基于进程级快照的冷启动加速解决方案，致力于在用户无感知（无需 / 少量进行代码适配）的前提下，帮助用户突破冷启动的性能瓶颈。本优化方案直接从应用初始化后的快照进行运行环境恢复，跳过复杂的框架、业务初始化阶段，从而显著降低 Java 应用的启动时延，实测性能提升达 90%+。</p><p></p><p></p><h3>Part II：快照方案如何优化 Java 应用启动速度</h3><p></p><p></p><p>当用户 Java 函数打开冷启动加速的配置开关后，华为云 FunctionGraph 会预先执行函数对应的初始化代码，获取其初始化执行上下文环境的快照，并进行加密缓存。后续调用该函数并触发冷启动扩容时，会直接从提前初始化后的应用快照来恢复执行环境，而非重新走一遍初始化流程，以此达到极大提升启动性能的效果。</p><p></p><p>先结合图 3 直观对比一下优化前、后的冷启动流程差异：</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/b3/b30d754797f3a3c9623787b3e9de4823.png\" /></p><p></p><p>图 3：基于快照加速的冷启动流程</p><p></p><p>基于快照的冷启动流程，主要包含以下几个关键步骤：</p><p></p><p>Step 1：平台侧提前准备执行环境，并预执行初始化代码、保存应用快照，此动作后续统称为 Checkpoint</p><p></p><p>与图 1 对应，此阶段一般占总耗时的 90% 左右。</p><p></p><p>Step 2：在请求到达，触发函数新实例扩容时，直接从应用快照来恢复新的执行环境，此动作后续统称为 Restore</p><p></p><p>Restore 耗时是秒级，相当于将数十秒完整的初始化时间（在图 1 的示例中）缩短至秒级 Restore 耗时，启动性能提升了一个数量级</p><p></p><p>Step 3：（可选）应用进程从快照恢复后，执行 Restore Hook 完成业务状态的刷新</p><p></p><p>由于 Image File 是进程运行时的快照，在重建进程之后，会涉及到进程持有状态的有效性更新。例如已建立的外部链接、加载到进程里的缓存信息等。故我们引入了 Restore Hook 的概念，提供手段让业务对这些状态进行刷新，详见 Part IV。</p><p></p><p>Step 4：应用 Ready，具备接着往下执行业务逻辑的能力</p><p></p><p>特别的，容器本身也是主机上的进程，故本优化方案也支持容器粒度的 Checkpoint，即对容器内指定进程进行 CR，与传统的轻量化虚机快照相比，其精细化程度更高、也更灵活。其原理详见图 4：</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/50/50cc16a49524305039149da52c92c927.png\" /></p><p></p><p>图 4：基于容器的 CR 流程</p><p></p><p>在 Source 机器上启动微服务，通过健康检查和初始化调用后，进行 Checkpoint，停止服务，生成进程快照信息；在 Source 机器上将进程快照信息和微服务所有相关依赖，进行压缩，加密生成内存快照包，并上传至云端存储。在 Target 机器上从持久化存储中下载对应微服务的内存快照包，进行解压恢复。在 Target 机器上 Restore 微服务进程；</p><p></p><p></p><h3>Part III：快照技术揭秘</h3><p></p><p></p><p>华为云提出的基于进程级快照的冷启动加速方案，其核心技术依托于 CRIU&nbsp;[5]&nbsp;，它支持对用户空间指定的进程进行“冻结”（即停止进程，并将该进程运行的所有上下文持久化为镜像文件），并在必要时对其进行“解冻”（即通过保存的镜像文件来正确恢复进程运行的上下文），其核心工作流程如图 5-6 所示&nbsp;[6]&nbsp;：</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/d6/d63b33dceededc72990bf9d880a7be86.png\" /></p><p></p><p>图 5：CRIU 如何工作——Checkpoint</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/a6/a6f32c38f5dbdab91811a5ef43f6161e.png\" /></p><p></p><p>图 6：CRIU 如何工作——Restore</p><p></p><p></p><h4>Checkpoint</h4><p></p><p></p><p>CRIU 首先通过操作系统的 /proc 目录获取指定进程和该进程下所有子进程的信息，包含文件描述符 (/proc/pid/maps) 等；CRIU 接着通过 Linux 的 ptrace syscall 接口把一段特殊代码动态注入到该进程的地址空间，通过执行该动态代码，CRIU 以 UNIX 守护进程的方式收集 dumpee 进程存放在寄存器里的内存数据；CRIU 将所有进程信息都收集完毕后，再次调用 ptrace 接口，去掉动态注入的代码，恢复该进程的原有代码；CRIU 根据收集的进程内存信息，生成多个以功能分类的镜像文件，并默认杀死进程，完成 Checkpoint；</p><p></p><p></p><h4>Restore</h4><p></p><p></p><p>CRIU 解析 Checkpoint 阶段生成的镜像文件，并分析多进程的共享资源；CRIU 通过 Linux 的 fork 接口重新构建、恢复进程和其共享资源；CRIU 恢复所有任务的资源，但不包含内存映射地址，定时器，线程等；CRIU 根据镜像文件重新映射内存空间，切换进程上下文，恢复进程的继续执行，完成 Restore；</p><p></p><p></p><h3>Part IV：Restore Hook</h3><p></p><p></p><p>如 Part II 所述，虽然本优化方案能极大提升 Java 应用的冷启动速度，但是快照技术在某些场景也存在一定的局限性，较难做到对现有应用的全透明化。通过快照恢复后，应用的网络连接状态会受到影响，涉及到 TCP Socket 重连等场景，如服务注册、DB 连接，分布式通信，消息队列等。</p><p></p><p>这部分场景依赖应用本身的网络重连机制来更新正确，因此，本优化方案中也引入了 Restore Hook 的概念，提供手段让业务对这些状态进行刷新。Restore Hook 当前已支持大部分主流第三方组件的重连，详见图 7：</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/e0/e01b9b26fa93d2ba47cc5a01e32984ef.png\" /></p><p></p><p>图 7：Restore Hook 支持的第三方组件</p><p></p><p>不难发现，Restore Hook 需要应用本身进行少量的代码适配。为了进一步简化应用的改造负担，我们也进行了一种新的技术尝试，可以理解其充当了用户应用与 BaaS 之间的纽带，通过状态卸载等手段，对开发者透明，帮助应用完成状态的自动化刷新。这部分探索会在后续的技术博文中跟大家分享，敬请期待。</p><p></p><p></p><h2>效果实测：Java 冷启动时延降低 90%+</h2><p></p><p></p><p>我们选取了公司内部典型的 Java 应用，对其原始初始化流程、Restore 流程进行了对比测试，如图 8 所示。测试结果表明，本优化方案将应用的启动速度平均提升了 95%+，即使快照包的增大一定程度上增加了包下载、解压的耗时，但最终端到端的冷启动时延也降低了 90%+。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/43/43e8ef969b5818580f98b985951cb896.png\" /></p><p></p><p>图 8：冷启加速前后的数据对比</p><p></p><p></p><h2>快速上手：基于华为云 FunctionGraph 的简单实战</h2><p></p><p></p><p>华为云发布的基于进程级快照的冷启动加速方案，是一种性能优化服务，用户无需额外付费，只需进行简单的配置、少量的代码修改，即可享受到该创新方案带来的冷启动性能提升。</p><p></p><p>下文基于华为云 FunctionGraph，为大家带来特性 Quick Start：</p><p></p><p>1. 登录 FunctionGraph 控制台，创建 Java 函数，并打开“快照式冷启动”开关</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/48/48b9368f7a8df88018918b7dbcee940f.png\" /></p><p></p><p>2. 可选）配置 Restore Hook，并在函数代码中实现对应的 Hook 逻辑</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/11/11bb64a5f04dcfa7afd4662de389d24b.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/5d/5d32089311d0b0f0eb376ef79099632c.png\" /></p><p></p><p>3. 函数发布新版本后，触发快照的自动化制作</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/dc/dcc9c9464db68610602568a13ec908f3.png\" /></p><p></p><p>4. 请耐心等待快照制作完成（5min 超时时间）</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/ae/aeb85b1dccc358363f3f4f2d0511294b.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/80/80c6e129e1b662a8b923d21932cabcf6.png\" /></p><p></p><p>5. 调用 Java 函数，体验快照优化后的性能提升</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/4b/4bd96f8287e6f7346f19469a0a769f46.png\" /></p><p></p><p></p><h2>总结与展望</h2><p></p><p></p><p>本文介绍了华为云对冷启动优化这一业界难题的探索之路，创新提出了基于进程级快照的优化方案。当然，本方案也并非十全十美，它依然面临着一系列挑战，如文中提到的应用状态刷新、进程级 CR 的精细化控制、多平台的兼容性等，我们也在持续探索、优化中。</p><p></p><p>同时，FunctionGraph 作为华为元戎内核加持的下一代 Serverless 函数计算与编排服务，致力于持续为用户提供方便、迅捷的 Serverless 服务体验。您可以登录华为云 FunctionGraph 控制台来深入体验，更多信息请参阅 FunctionGraph 官方文档 [7]&nbsp;。后续我们将分享更多围绕通用全场景 Serverless 的前沿理论及其案例实践，回馈社区。</p><p></p><p>参考资料：</p><p></p><p>[1]https://www.graalvm.org/22.3/reference-manual/java/compiler/</p><p>[2]https://wiki.openjdk.org/display/HotSpot/Application+Class+Data+Sharing+-+AppCDS</p><p>[3]https://spring.io/blog/2019/03/14/lazy-initialization-in-spring-boot-2-2</p><p>[4]https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-scanning-index</p><p>[5]https://github.com/checkpoint-restore/criu</p><p>[6]https://speakerdeck.com/udzura/introduction-to-criu?slide=32</p><p>[7]https://support.huaweicloud.com/functiongraph/index.html</p><p></p><p>今日好文推荐</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651154622&amp;idx=1&amp;sn=6a8ba636398c326973bdf4ced2d696fb&amp;chksm=bdb890ed8acf19fb519739045a19a2fdfd84a46f7a0c667a977ec62f3f0f165e0f72b8cb5722&amp;scene=21#wechat_redirect\">VS Code 有多么不安全：一个扩展就可能导致公司 GitHub 中的所有代码被擦除？</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651154621&amp;idx=1&amp;sn=84d0e70c9614d0bf1b4e5ddae06a9b20&amp;chksm=bdb890ee8acf19f8b563f48bae53a2775ff2a8c0e517209e8ea89b54fdb2439395e778a2b954&amp;scene=21#wechat_redirect\">清华应届硕士炮轰字节：恶意低薪，硕士白读还倒贴；马云不再实际控制蚂蚁；开源 ROM 魔趣创始人宣布删库跑路｜Q 资讯</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651154584&amp;idx=1&amp;sn=515358fe86d56fed27994c222778e295&amp;chksm=bdb890cb8acf19dd002919c8ce86fc42421f16303244c84a6e7821570eaa2ea0908ae3087b64&amp;scene=21#wechat_redirect\">百万用户逃离Twitter转向这个小众社交平台，互联网中心化终将走向大溃败？</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651154381&amp;idx=1&amp;sn=d0df16f1734a196802b2b4663769144a&amp;chksm=bdb89f9e8acf16887b88649fb857b5b2d5d2f3b54cfeeb9e4ce4bc0da97a08dc77c7b5131028&amp;scene=21#wechat_redirect\">芯片的后半场，“提速”依旧是第一要务，那除此之外呢？</a>\"</p><p></p><p></p><p></p>",
    "publish_time": "2023-01-17 18:33:23",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]