[
  {
    "title": "Grafana Labs发布跟踪查询语言TraceQL",
    "url": "https://www.infoq.cn/article/4rQRdft9ps5mfbXu2gRs",
    "summary": "<p>作为即将发布的<a href=\"https://www.infoq.com/news/2022/10/grafana-92-metrics-tracing/\">Grafana Tempo 2.0</a>\"的一部分，<a href=\"https://grafana.com/blog/2022/11/30/traceql-a-first-of-its-kind-query-language-to-accelerate-trace-analysis-in-tempo-2.0/\">TraceQL</a>\"是一种旨在简化交互式搜索和提取跟踪信息的查询语言。根据Grafana官方的说法，这将有助于加快诊断故障根源的过程。</p><p>&nbsp;</p><p></p><blockquote>分布式跟踪包含了丰富的信息，可以帮助开发者跟踪错误、确定故障根源、分析性能，等等。虽然一些自动增强检测工具也可以用于捕获这些数据，但从这些数据中提取有价值的信息却要困难得多。</blockquote><p></p><p>&nbsp;</p><p>根据Grafana官方的说法，如果你不知道你需要哪些跟踪信息，或者如果你想重建事件链的上下文，那么现有的跟踪解决方案在搜索跟踪信息时就没有那么灵活。这也就是为什么要从头设计TraceQL来处理跟踪信息。下面的示例展示了如何查找与耗时超过一秒的数据库插入操作相对应的跟踪信息：</p><p><code lang=\"null\">{ .db.statement =~ \"INSERT.*\"} | avg(duration) &gt; 1s</code></p><p>&nbsp;</p><p>TraceQL支持<a href=\"https://github.com/grafana/tempo/blob/main/docs/design-proposals/2022-04%20TraceQL%20Concepts.md\">使用span</a>\"、时间点和时间段来选择跟踪信息，它可以聚合同一个跟踪信息中的多个span的数据，并利用span之间的结构关系。查询由一组被选中或被丢弃的span集合的链式表达式组成，例如：</p><p><code lang=\"null\">{ .http.status = 200 } | by(.namespace) | count() &gt; 3</code></p><p>&nbsp;</p><p>它支持属性字段、包含字段的表达式、组合并聚合span集合、分组、管道，等等。下面的示例展示了如何过滤所有按照特定的顺序经过两个区域的跟踪信息：</p><p><code lang=\"null\">{ .region = \"eu-west-0\" } &gt;&gt; { .region = \"eu-west-1\" }</code></p><p>&nbsp;</p><p>TraceQL可感知数据类型，这意味着你可以使用文本、整数和其他数据类型来表示查询。此外，TraceQL兼容Tempo 2.0中的<a href=\"https://parquet.apache.org/\">Apache Parquet</a>\"存储格式。Parquet是一种列式数据文件格式，许多数据库和分析工具都支持这种格式。</p><p>&nbsp;</p><p>如上所述，TraceQL将成为Tempo 2.0的一部分，后者将在未来几周内发布，<a href=\"https://grafana.com/grafana/download/9.3.1?edition=oss&amp;mdm=rss&amp;platform=docker&amp;src=grafana\">Grafana 9.3.1</a>\"中已经内置了其预览版本。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/12/grafana-traceql/\">https://www.infoq.com/news/2022/12/grafana-traceql/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://xie.infoq.cn/article/2723176da5693f6085c6b1e78\">一文带你了解&nbsp;Grafana&nbsp;最新开源项目 Mimir 的前世今生</a>\"</p><p><a href=\"https://www.infoq.cn/article/e2B77jUHkWSRmgN9G7uV\">Grafana、Loki 和 Tempo 更改开源协议，由 Apache License 2.0 转为 AGPL v3</a>\"</p><p><a href=\"https://www.infoq.cn/article/k2tWvtKrSIpKIxloqfdN\">Grafana&nbsp;9 在警报和用户体验方面带来巨大改进</a>\"</p>",
    "publish_time": "2023-01-05 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "消息称微软将投资自动驾驶初创公司Gatik，后者估值超7亿美元",
    "url": "https://www.infoq.cn/article/yQW1dCHFQemYLSuHx0Tf",
    "summary": "<p>当地时间1月4日，据路透社报道，据两名知情人士透露，微软公司正在就投资<a href=\"https://gatik.ai/\">自动驾驶初创公司 Gatik </a>\"进行高级谈判，这也是双方进行云计算合作的一部分。</p><p>&nbsp;</p><p>据悉，Gatik公司总部位于加州，由行业资深人士 Gautam Narang 和 Arjun Narang 于 2017 年创立，专注于零售业的中等距离B2B物流。</p><p>&nbsp;</p><p>自从 2021 年以来，该公司已经与沃尔玛和 Loblaw Companies 合作推出了全无人驾驶商业配送服务，Gatik 负责在美国阿肯色州和加拿大安大略省提供厢式货车的短途配送服务。</p><p>&nbsp;</p><p>迄今为止，Gatik公司已经融资超过 1.2 亿美元，投资者包括 Koch Disruptive Technologies、Innovation Endeavors、Goodyear Ventures 和 RyderVentures。</p><p>&nbsp;</p><p>今年第一季度，Gatik 计划将该公司的自动驾驶箱式货车整合到 Pitney Bowes 位于美国得州达拉斯市的电子商务物流网络中，以期改善配送效率和降低物流成本。</p><p>&nbsp;</p><p>消息人士补充说，此次<a href=\"https://www.infoq.cn/article/kAa4265g8zfsKVXm1MG3\">微软</a>\"计划为Gatik投资超过1000万美元，对 Gatik的估值也超过7亿美元。作为该交易的一部分，Gatik 将使用微软的云和边缘计算平台 Azure 来开发卡车无人驾驶交付技术。</p><p>&nbsp;</p><p>知情人士称，该交易的具体条款仍有可能发生变化。</p><p>&nbsp;</p><p>截至发稿前，<a href=\"https://www.infoq.cn/article/FJhulyO6mpox7bqqZIg4\">微软</a>\"和Gatik均拒绝对此置评。</p><p>&nbsp;</p><p>与其他大型科技公司一样，微软最近一直在向<a href=\"https://www.infoq.cn/article/JElWUoZJokAshqchaiBw\">自动驾驶</a>\"技术投入资金。2021年1月，微软投资了通用汽车旗下的机器人出租车公司 Gruise，这笔交易对该公司的估值为300亿美元。Cruise 计划使用微软 Azure 来加快无人驾驶汽车解决方案的商用步伐，并与 Alphabet 旗下的 Waymo 和亚马逊旗下的 Zoox 展开竞争。</p><p>&nbsp;</p><p>自动驾驶技术被视为运输和物流行业的革命性技术，但由于监管机构担心安全问题，加之市场增长放缓导致资金匮乏，使得整个行业面临挫折。</p><p>&nbsp;</p><p>2022年11月，福特和大众关闭了他们的自动驾驶技术部门 <a href=\"https://www.infoq.cn/article/bucqgwcQO7KSPctEc3oV\">Argo AI</a>\"，称开发无人驾驶机器人出租车“比把人类送上月球还难”。</p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://www.reuters.com/business/autos-transportation/microsoft-invest-autonomous-trucking-startup-gatik-sources-2023-01-04/\">https://www.reuters.com/business/autos-transportation/microsoft-invest-autonomous-trucking-startup-gatik-sources-2023-01-04/</a>\"</p>",
    "publish_time": "2023-01-05 10:08:57",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Apache Doris 在小米亿级用户行为分析平台的实践",
    "url": "https://www.infoq.cn/article/iT7purpsKqaPwr8Touco",
    "summary": "<p></p><blockquote>作者｜小米数据智能部开发工程师 汤佳树编辑｜SelectDB</blockquote><p></p><p></p><p>小米用户行为分析统一平台是基于海量数据的一站式、全场景、多模型、多维度、自助式大数据智能洞察分析服务平台，对接各类数据源，进行加工处理、分析挖掘和可视化展现，满足各类用户在用户洞察场景下的数据分析应用需求，提供高效极致的分析体验。</p><p></p><h1>业务需求</h1><p></p><p></p><p>平台可以基于数据进行时间分析，留存分析，分布分析，漏斗分析等，业务方主要基于事件进行分析，事件是追踪或记录的用户行为或业务过程，可以是单个事件也可以是多个事件组合的虚拟事件。</p><p></p><p>数据来源于各业务的打点数据，且基于事件模型进行建模，用户在产品中的各种操作都可以抽象成 Event 实体，并且里面都会包含五要素：</p><p></p><p>Who：即参与这个事件的用户是谁，例如用户的唯一 IDWhen：即这个事件发生的实际时间，例如time字段，记录精确到毫秒的事件发生时间Where：即事件发生的地点，例如根据 IP 解析出的省份和城市How：即用户从事这个事件的方式，例如用户的设备，使用的浏览器，使用的 App 版本等等What：描述用户所做的这件事件的具体内容，例如点击类型的事件，需要记录的字段有点击 URL，点击 Title，点击位置等</p><p></p><p>数据基于 OLAP 引擎 Doris 进行存储，随着接入业务不断增多，且接入的业务量不断膨胀，Top 级应用可以达到 100 亿条/天，查询压力和时间相继增大，用户对查询时延的吐槽愈来愈多，我们急切的需要提升查询性能来提升用户的体验。</p><p></p><h1>痛点问题</h1><p></p><p></p><p>针对于业务需求，我们总结了以下痛点问题：</p><p></p><p>为了实现复杂的业务需求，OLAP 分析引擎需要留存、漏斗等分析函数支撑。增量数据 100亿/天，导入压力大，部分业务要求数据导入不丢不重。业务接入不断增多，数据量膨胀，需要 PB 级的数据下的交互式分析查询达到秒级响应。</p><p></p><p>为了解决以上的痛点问题，我们对比了多款 OLAP 分析引擎，最终选择了 Apache Doris。Doris 提供了留存、漏斗分析等函数，极大程度的简化了开发的成本。在数据导入的过程中，我们尝试 Doris 刚推出的 <a href=\"http://mp.weixin.qq.com/s?__biz=Mzg3Njc2NDAwOA==&amp;mid=2247512201&amp;idx=1&amp;sn=13e743781165eb3b28cef0a98aa09902&amp;chksm=cf2fbe8ef858379879dcb3769285759c74515b6a7d069cea8e445c5200e053e4da44e8ff4b17&amp;scene=21#wechat_redirect\">Merge On Write Unique Key</a>\" 导入模型，可以抗住 100 亿/天的增量数据压力。针对于向量化查询引擎的改造也是的性能较之前的版本有 3-5 倍的提升。</p><p></p><h1>架构演进</h1><p></p><p></p><p>一个优秀的系统离不开持续迭代与演进。为了更好的满足业务需求，我们在存储架构与查询引擎两个层面上不断进行尝试，小米用户行为分析系统在上线后，目前已完成 3 次改造，以下将为大家介绍改造历程。</p><p></p><h2>数据存储结构：数据架构的演进</h2><p></p><p><img src=\"https://static001.geekbang.org/infoq/79/79026c1e0c92aab3c4444ef499032e00.png\" /></p><p></p><p>在小米的用户行为分析平台中，原始数据通过小米自研的消息队列 Talos，在 Flink 中清洗与建模后，被下游的 Doris 与 Hive 消费。全量的数据会存储在 Hive 中，进行批量 ETL 或历史数据召回的查询。实时增量数据被存储在 Doris 中，用来做热数据的查询操作。基于冷热数据分离的架构，我们进行了 3 次架构的演进。</p><p></p><h3>第一阶段：基于明细宽表的查询</h3><p></p><p></p><p>在最初的阶段我们使用了基于明细的宽表查询模式。为了处理灵活多样的分析请求，在系统中，我们配合统一埋点平台处理数据，接入的 OLAP 的数据是直接埋点的全字段展平。在入库之前，我们在 Flink 中将数据打平，以宽表的模式存储在 Doris 明细表中。根据查询的需求，我们将经常使用的列作为建表的维度列，利用前缀索引的特性进行查询加速。但某些头部大数据量业务容易查询多天数据，一个大查询可能就会将集群资源占满甚至导致集群不可用，且查询耗时相当之久。</p><p></p><h3>第二阶段：基于聚合模型的查询加速</h3><p></p><p></p><p>在改造的第二阶段，我们使用了聚合模型对业务查询进行加速。 我们对接入行为分析的应用进行统计分析，绝大多数接入行为分析的应用数据量在 1 亿/天数据量以内。对于部分使用频率较高的表，我们采用聚合表完成查询加速，对单天数据量超 10 亿且高频的头部应用做聚合表加速。具体流程为根据数据量挑选出头部应用，对其进行字段解析，并挑选出常用指标及维度，由 Hive 表数据进行聚合 T-1 产出数据，最后写入到 Doris 中，进行查询加速。该阶段的改造解决了集群头部业务大查询的问题，此时虽然独立集群存储没问题，但由于其他业务接入后还会持续增加数据量和埋点字段 ，这样会导致元数据最先进入瓶颈。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/99/994259848095bea0234db963d87decc6.png\" /></p><p></p><h3>第三阶段（当前阶段）：业务适配的建表改造</h3><p></p><p></p><p>当前阶段，我们对业务需求进行深度解析后重新规划了建表结构。我们对某些应用的埋点字段进行分析，发现有些用户埋点字段多达 500+，但在行为分析里实际用到的可能只有 100+，这显然有所浪费。所以我们与用户沟通调研需求，配合行为分析平台侧的能力，用户可在平台对有用事件和属性进行筛选，同时设置字段映射和过滤逻辑，然后再进行建表。</p><p></p><h2>查询服务架构：查询引擎的改造与演进</h2><p></p><p></p><p>我们基于业务深度改造了查询的服务架构，构建了新的查询引擎架构，实现 SQL 的权重、路由、缓存和资源调度操作。根据查询条件，路由引擎会将 SQL 拆分成多条子查询，在 Doris 或 Hive 中执行后，将子查询的结果汇总，得到最终的结果。针对查询引擎，我们也进行了 3 次技术架构的改造。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/42/42d78a8d362bf4feb222dcd707f1d40a.png\" /></p><p></p><h3>第一阶段：基于集群粒度的查询资源管理</h3><p></p><p></p><p>我们对集群粒度进行查询资源管理，在资源调度中，我们会给每一个 Doris 集群设置一个总的资源池大小（根据集群能力和测试进行量化），根据数据量大小和查询天数对每个 SQL 进行加权，并对资源池的最大最小并行 SQL 数进行限制，如果计算的 SQL 超过限制则进行排队。其次，还会利用 Redis 对数据进行 SQL 级别缓存。</p><p></p><h3>第二阶段：基于 SQL 路由的改造</h3><p></p><p></p><p>为适配聚合表加速做了路由层，提升缓存命中率和利用率，此阶段拆分原始提交 SQL，基于指标进行缓存，粒度更细，服务端可根据指标进行适当计算更易于缓存命中。值得一提的是排队时间往往会比较长，有些场景下可能会进行重复提交或拆分成同样的 SQL，为了提高效率会在 SQL 排队前和排队后各进行一次缓存校验。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ac/acbc39babd523f934b0f89f265ebe54a.png\" /></p><p></p><h3>第三阶段（当前阶段）：基于 SQL 权重的改造</h3><p></p><p></p><p>整体架构方面，由于采取了筛选埋点字段而非全量字段导入 Doris，针对头部问题用户，我们会基于查询历史统计指标及维度，根据指定的某些规则进行默认初始化操作，并以此沟通用户并进行引导升级。此外为了更精细的控制资源调度，本阶段对对 SQL 内容进行加权，如含有DISTINCT，LIKE，VARIANCE_SAMP等字样再加权。对于资源消耗较大的操作，如 DISTINCT，会给予更高的权重，调度引擎在执行时会分配更多的资源。</p><p></p><h1>实践应用</h1><p></p><p></p><p>数据建模</p><p></p><p>对业务来讲，分析查询需要较高的灵活度，且是对用户粒度进行分析，所以需要保留较多的维度和指标，我们选用 Doris 作为存储查询引擎，且采用明细表建模，这样可以保证用户能够根据分析需求查出数据。另一方面，由于查询分析是一个延时要求较高的产品，对于数据量大、查询天数多、语句复杂的情况，查询延时会很高，所以对于头部应用，我们根据高频指标维度进行了聚合表模型建模。</p><p></p><p><code lang=\"sql\"> CREATE TABLE `doris_XXX_event` (\n  `olap_date` bigint(20) NOT NULL COMMENT \"\",\n  `event_name` varchar(256) NOT NULL COMMENT \"\",\n  `uniq_id` varchar(256) NOT NULL COMMENT \"\",\n  `dim1` varchar(256) REPLACE NULL COMMENT \"\",\n  `dim2` varchar(256) REPLACE NULL COMMENT \"\",\n  ...\n  `cnt` bigint(20) REPLACE NULL COMMENT \"\",\n  `index1` double REPLACE NULL COMMENT \"\",\n  `index2` double REPLACE NULL COMMENT \"\",\n  ...\n) ENGINE=OLAP\nAGGREGATE KEY(`olap_date`, `event_name`, `uniq_id`)\nCOMMENT \"OLAP\"\nPARTITION BY RANGE(`olap_date`)</code></p><p></p><p>数据导入</p><p></p><p>明细表部分，我们接入 Json 格式 TalosTopic，动态获取 Doris 表的 Schema 信息，通过双缓冲区循环攒批的方式，利用 StreamLoad 向 Doris 中写数据，如果在导入 Doris 时有出现失败的批次，重试 10 次仍然失败，会将数据按照应用粒度存入 HDFS，并在凌晨定时调度任务重新写入 T-1 未写入的数据。聚合表部分，我们由 Talos 落盘的 Iceberg 表，每日进行 T-1 数据的聚合，根据服务端选取的维度和指标，以及聚合类型（count ,count distinct , sum ,max ,min ），进行聚合存入中间 Hive 表，再由统一导入 Doris 程序进行导入。</p><p></p><p>数据管理</p><p></p><p>明细数据和应用聚合表分库存储，TTL 均为 33 天。数据表会有数据质量监控，如果总行数或者设置指标环比波动太大，会进行告警人工介入确认数据是否有误，视紧急程度进行回补处理。</p><p></p><p>数据查询及应用</p><p></p><p>绝大多数用户会锚定事件，进行含指标聚合，去重用户数（几乎占总查询的 50%）的事件行为分析，同时还会有留存分析，漏斗分析，分布分析等分析类型。</p><p></p><p>建表模型的维护</p><p></p><p>为了适配业务的变更，上游的埋点信息会周期性的更新。原有的表结构需要进行变更以适配埋点的增加。在过去的 Doris 版本中，Schema Change 是一项相对消耗较大的工作，需要对文件进行修改。在<a href=\"http://mp.weixin.qq.com/s?__biz=Mzg3Njc2NDAwOA==&amp;mid=2247509133&amp;idx=1&amp;sn=a1c5a66404c0ceb0cd3015a4f2e13b9a&amp;chksm=cf2faa8af858239c761a46e4f729191cce45cd8cd0e5e1dfd78e8a7263f32661814c590306af&amp;scene=21#wechat_redirect\">新版本中开启 Light Schema Change 功能后</a>\" ， 对于增减列的操作不需要修改文件，只需要修改 FE 中的元数据，从而实现毫秒级的 Schame Change 操作。</p><p></p><h1>应用现状</h1><p></p><p></p><p>小米目前在 300 多个业务线上线了 Doris 集群，超过 1.5PB 的业务数据。在初期我们选择了两个使用较为频繁的集群进行向量化升级。</p><p></p><p>现迁移 Doris 向量化集群的行为分析业务有 2 个，7 天增量数据的平均值在百亿左右，存储空间占用 7T/天左右。在升级到向量化的版本后，存储资源有较大的节省，只需要原有集群约 2/3 的存储空间。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/21/2113287a96fb92fae409ad675e128a50.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1b/1b3827026c93b1cd0a6286f569f723ff.png\" /></p><p></p><h1>性能提升</h1><p></p><p></p><h2>请求粒度</h2><p></p><p></p><p>升级 Doris 向量化版本后，行为分析平台以请求粒度统计查询耗时 P80 和均值，P80 耗时下降 43% ，平均耗时下降 27% ；统计口径：汇总 12.07-12.11 期间，行为分析请求粒度查询执行时间。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/31/3162d30d6d313bfa349b3cf3f2b1a24e.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/60/6013a31e2d7e4ff187dbbd15d7e2410e.png\" /></p><p></p><h2>SQL 粒度</h2><p></p><p></p><p>升级 Doris 向量化版本后，行为分析平台以 SQL 粒度来统计查询耗时 P80 和均值，耗时 P80 下降 70% ，平均耗时下降 54% 。统计口径：汇总 12.04-12.11 期间，行为分析 SQL 粒度查询执行时间（未含排队）</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/c1/c1dcb20e203d5576f90fac0224ccf60b.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/96/9636245b7d709c8324a7369d23651c7d.png\" /></p><p></p><p>升级 Doris 向量化版本后，行为分析平台以 SQL 粒度统计查询耗时 P80 和均值，耗时 P80 下降 56% ，平均耗时下降 44% ；</p><p></p><p>统计口径：汇总 12.02-12.11，行为分析 SQL 粒度查询总时间 （含排队）</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/40/405af931262151e61f28b8108dda4351.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/79/79aa7f0734f5982ed85dc1f85978cfb4.png\" /></p><p></p><h2>去重优化</h2><p></p><p></p><p>在 ID-Mapping 的时候，通常需要针对 ID 进行去重操作。在最初我们使用了COUNT DISTINCT来完成去重。</p><p></p><p><code lang=\"sql\">SELECT      a.`olap_date` AS `time`, \n            count(distinct a.`distinct_id`) AS distinct_id \nFROM        analysis.doris_XXX_event a \nWHERE       `a`.`olap_date` BETWEEN 20221218 AND 20221220 AND \n            a.`event_name` IN(XXXX, XXX, XXX, XXX) AND \n            ... ... \nGROUP BY    1 \nORDER BY    2 DESC \nLIMIT       10000</code></p><p></p><p>在经过优化后，我们使用子查询+ GROUP BY来替代COUNT DISTINCT的功能</p><p></p><p><code lang=\"sql\">SELECT      z.`time`, \n            count(distinct_id) var1 \nFROM        (SELECT     a.`olap_date` AS `time`, \n                        a.`distinct_id` AS distinct_id \n            FROM        analysis.doris_XXX_event a \n            WHERE       `a`.`olap_date` BETWEEN 20221218 AND 20221220 AND \n                        a.`event_name` (XXXX, XXX, XXX, XXX) AND \n                        ... ...\n            GROUP BY 1, 2) z \nGROUP BY    1 \nORDER BY    2 DESC \nLIMIT       10000</code></p><p></p><p>相较于原有的COUNT DISTINCT，使用子查询+ GROUP BY 的模式性能有 1/3 的提升。</p><p></p><h1>未来规划</h1><p></p><p></p><p>在过去的三年时间里，Apache Doris 已经在小米内部得到了广泛的应用，支持了集团数据看板、广告投放/广告 BI、新零售、用户行为分析、A/B 实验平台、天星数科、小米有品、用户画像、小米造车等小米内部数十个业务，并且在小米内部形成了一套以 Apache Doris 为核心的数据生态 。随着业务的持续增长，未来我们会进一步推动小米的其他业务上线向量化版本。</p><p></p><p>非常感谢 Apache Doris 社区与 SelectDB 公司的鼎力支持，小米集团作为 Apache Doris 最早期的用户之一，一直深度参与社区建设，参与 Apache Doris 的稳定性打磨，未来我们也会密切联系社区，为社区贡献更多的力量。</p>",
    "publish_time": "2023-01-05 10:27:51",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "从编译到可执行，eBPF 加速容器网络原理分析",
    "url": "https://www.infoq.cn/article/xpBcjM5O7PeRlteVXWQE",
    "summary": "<p></p><blockquote><a href=\"https://xie.infoq.cn/article/4740fad28050c331ea9d329df\">eBPF</a>\"(extended Berkeley Packet Filter) 是一种可以在 Linux 内核中运行用户编写的程序，而不需要修改内核代码或加载内核模块的技术。简单说，eBPF 让 <a href=\"https://www.infoq.cn/article/4lDxHRoqXbSw6zl29AEo\">Linux</a>\" 内核变得可编程化了。本文整理自龙蜥大讲堂第 57 期，浪潮信息 SE 王传国从原理上分析了 eBPF 的加载工作过程，解释了它如何保证系统运行稳定以及它能加速网络的原因。</blockquote><p></p><p></p><h2>1. eBPF 加载过程</h2><p></p><p></p><p>我们知道，一般 eBPF 的加载过程，首先是写&nbsp;C 代码，然后用 llvm lang 编译成&nbsp; ELF 文件，接着用 libelf 对&nbsp;ELF&nbsp;文件进行解析，解析之后按照 libbpf 所需要的格式进行数据的整理、组织，再通过 BPF 的系统调用，可以将这些数据都加载到内核里面，包括程序翻译出来的 eBPF 指令集。</p><p></p><p>在内核里面有校验器负责对程序进行校验，有 JIT 对程序进行翻译解析。</p><p></p><h4>1.1 重定位</h4><p></p><p></p><p>BPF 基础设施提供了一组有限的“稳定接口”， 使用 convert_ctx_access 对各种 CTX 进行转换，在内核版本升级时保证稳定。</p><p></p><p>CO-RE 核心思想就是采用(BTF)非硬编码的形式对成员在结构中的偏移位置进行描述，解决不同版本之间的差异。</p><p></p><p>需要重定位的元素：Map、函数调用、Helper函数调用、字段、Extern 内核符号和kconfig。</p><p></p><h4>1.2 安全性检查：数据、指令、循环</h4><p></p><p></p><p>数学计算除数不能为 0，指令调用范围[0, prog-&gt;len)深度优先遍历排除环。</p><p></p><h4>1.3 eBPF 指令集</h4><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/69/69d44b84bf70de0cf3650c18c2aef55d.png\" /></p><p></p><h4>1.4 指针安全性检查</h4><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/dd/ddd2c0f2de215b96b804e3cda0f3a23a.png\" /></p><p></p><p>确定指针类型、范围纠正，识别不了的指针类型不允许引用。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/14/14bc918c8f8cbe676585133fcb738e36.png\" /></p><p></p><p>范围检查，不同的指针类型有不同的检查方法和范围。</p><p></p><h2>2. eBPF&nbsp;加速容器网络</h2><p></p><p></p><p>主要涉及的 eBPF 程序类型：XDP、tc、sock_ops。</p><p></p><p>它们加速网络性能的基本原理都是把数据直接从一端（网口/socket）的发送队列传递到另一端的接收或发送队列，绕过不需要的网络协议栈。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ce/ce278ff54bbe200e08db28af012d010b.png\" /></p><p></p><p>XDP 位于整个 Linux 内核网络软件栈的底部，还未生成 skb，能够非常早地识别并丢弃攻击报文，具有很高的性能；但是在虚拟机中有时候可能无法支持 XDP 程序的加载，例如虚拟机网卡的接收队列太少。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/55/55016b4f999908d23edf234cc9414ddd.png\" /></p><p></p><p>在 tc 功能的 sch_handle_ingress、sch_handle_egress 添加 hook 点，分别是 tc ingress 和 tc egress，没有 XDP 那么多要求，基本上所有的 OS 中都能使用，绕过 netfilter 等非必要的内核网络协议栈路径，能极大地提升网络性能，降低延迟。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/15/15084f0089e2b8b54ea77c4b0561f2e6.png\" /></p><p></p><p>技术概述：把数据从一端 socket 发送队列直接发送到对端 socket 的接收队列或发送队列。</p><p>sockops：挂载到cgroup，监控整个 cgroup 中所有 socket 的握手和挥手（主动|被动），记录 tcp 连接。</p><p>sockmap：存储数据特征与 socket 句柄的关系。写数据时执行 bpf_map_update，修改对应 socket 的 sendmsg 函数指针。</p><p>sk_msg：使用 sockmap 对数据进行 redirect 判定。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/1b/1bfbf86749340e9360ae5a58bdab060d.png\" /></p><p></p><p>经过我们的测试，如果用 <a href=\"https://xie.infoq.cn/article/69592432882ccce6cc3fbd177\">Cilium</a>\" 替换 calico，用 TCP Throughput 模式测，那么&nbsp;pod 间的通讯性能&nbsp;tcp 吞吐量提升 58%、sockops 提升 153%、跨节点也能提升 24%。</p><p></p><p>如果用 TCP-RR 模式来测，那么相比 calico 同节点能提升 28%、sockops 提升200.82%、跨节点提升 43%。</p><p></p><p>如果用&nbsp;TCP_CRR&nbsp;模式去测的话，&nbsp;calico&nbsp;同节点能提升40%、sockops 提升 35% 、跨节点提升 55%。&nbsp;</p><p></p><p>Cilium&nbsp;在提升性能的时候，它对于 CPU 的占用降低了&nbsp;10% 以上，因此我们测试的结果是&nbsp;Cilium&nbsp;的性能要明显优于使用 iptables 的&nbsp;calico。所以说目前我们打算使用&nbsp;Cilium&nbsp;优化我们的容器网络。</p>",
    "publish_time": "2023-01-05 10:58:18",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "谷歌推出文本到图像模型Muse：生成图片质量更高、推理时间更短",
    "url": "https://www.infoq.cn/article/zIcEM3fpYm9zfvvcYUSu",
    "summary": "<p>自 2021 年初以来，随着大量深度学习支持的文本到图像模型（例如<a href=\"https://analyticsindiamag.com/choose-your-player-dall-e-2-or-midjourney/\">DALL-E-2</a>\"、<a href=\"https://analyticsindiamag.com/stability-ai-releases-stable-diffusion-2-0/\">Stable Diffusion</a>\"和<a href=\"https://analyticsindiamag.com/this-scariest-horror-movie-was-made-using-midjourney/\">Midjourney</a>\"等）的诞生，人工智能研究的进展发生了革命性的变化。</p><p>&nbsp;</p><p>近日，<a href=\"https://www.infoq.cn/article/76gYqPA2YU0YXCDHFvIE\">谷歌</a>\"Muse AI系统正式亮相。据谷歌Muse AI团队称，Muse是一种文本到图像的 Transformer 模型，该模型可以实现先进的图像生成性能。&nbsp;</p><p>&nbsp;</p><p></p><blockquote>我们提出Muse，一种文本到图像的 Transformer 模型，可实现先进的图像生成性能，同时比扩散或自回归模型更有效。——谷歌Muse AI团队</blockquote><p></p><p>&nbsp;</p><p>据开发团队介绍，与<a href=\"https://www.infoq.cn/article/BKPTWSyeidEDNaoBvEKv\"> Imagen </a>\"和 <a href=\"https://www.infoq.cn/article/SwDArsl8afPV6baZRyE0\">DALL-E 2</a>\" 等像素空间扩散模型相比，Muse 由于使用离散标记并且需要更少的采样迭代，因此效率显着提高；与 <a href=\"https://github.com/google-research/parti\">Parti </a>\"和其他自回归模型不同，<a href=\"https://muse-model.github.io/\">Muse </a>\"利用了并行解码。 为了生成高质量的图像并识别物体、它们的空间关系、姿态、基数等视觉概念，使用预训练的 LLM 可以实现细粒度的语言理解。Muse 还可以直接启用许多图像编辑应用程序，而无需微调或反转模型：修复、修复和无蒙版编辑。</p><p>&nbsp;</p><p>Muse的900M 参数模型在 CC3M 上实现了新的 SOTA，FID 得分为 6.06。Muse 3B 参数模型在零样本 COCO 评估中实现了 7.88 的 FID，以及 0.32 的 CLIP 分数。Muse 还可以直接启用许多图像编辑应用程序，而无需微调或反转模型：修复、修复和无蒙版编辑。</p><p>&nbsp;</p><p>Muse模型能够根据文本提示快速生成高质量图像：在 TPUv4 上，512x512 分辨率为 1.3 秒，256x256 分辨率为 0.5 秒。</p><p>&nbsp;</p><p>根据 MUSE 的基准测试可以看出，Muse 的推理时间明显低于竞争模型。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/f5/f58f561c185e85afe800916a2b119952.png\" /></p><p></p><p>参考链接：</p><p>&nbsp;</p><p><a href=\"https://muse-model.github.io/\">https://muse-model.github.io/</a>\"</p><p><a href=\"https://dataconomy.com/2023/01/google-muse-ai-explained-how-does-it-work/\">https://dataconomy.com/2023/01/google-muse-ai-explained-how-does-it-work/</a>\"</p>",
    "publish_time": "2023-01-05 11:43:08",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "乐视实行4天半工作制：不降薪无996，研发可准点下班，网友：推行到全国可行吗？",
    "url": "https://www.infoq.cn/article/8boGZvjPt7I5qpa7f62C",
    "summary": "<p></p><p></p><blockquote>4 天工作制要不要推行？</blockquote><p></p><p></p><h2>乐视实行 4 天半工作制</h2><p></p><p></p><p>1 月 3 日，乐视 CEO 张巍发布了 2023 年致全体员工的一封信，名为《乐视，从来与众不同》。</p><p></p><p>全员信中，乐视宣布自 2023 年 1 月 1 日起，公司将执行每周四天半工作制，每周三实行弹性的半天工作制，考勤时间调整为连续 5 小时，如上午 10 点至下午 15 点、上午 11 点至下午 16 点都符合规定。</p><p>据潇湘晨报报道，乐视市场部的一名员工称，自去年7月起，乐视就已经提出这个制度了，这项决策并不是管理层的一时兴起，而是作为一项长期执行的制度。</p><p></p><p>而且最重要的是，实行 4 天半工作制并不会降薪。</p><p></p><p>乐视在公开信中表示，这项工作制有四点好处：</p><p></p><p></p><blockquote>1、有利于员工和家人及时就医。疫情让我们认识到健康的重要性，周三休息半天，员工不用请假可以更灵活安排自己和家人就诊，对自己负责，更是对家庭、对社会负责。2、有利于缓解“周一工作焦虑症”。大城市工作压力大，上下班路远时间长，很多人周末休息后因周一至周五要连续工作五天，一到周一便感到焦虑。周三休息半天，员工可以去跑跑步、健健身或进行其他娱乐活动，能有效缓解这种焦虑。3、有利于员工学习和提高专业技能。活到老学到老，工作不只是输出，更需要充电。对于想要提升自己的员工尤其是刚毕业的年轻员工，周三弹性工作能增加周二晚和周三晚学习时长，规避周未突击学习的弊端，有利于提高学历和备考各类专业证书。4、有利于提升家庭幸福感。对于已经组建家庭的员工，可以更好的平衡工作与家庭。如果家里有孩子，周三不需要请假就可以接送孩子上下学 ; 如果还没有孩子，那么也有利于提高员工生育率，拥护国家政策。</blockquote><p></p><p></p><p>一位半年前加入乐视的员工阿乐在接受燃次元采访时表示，他就是因为乐视没有 996 而选择加入的。他此前曾在杭州度过大半年的 996 高强度生活，在入职乐视后，他觉得找到了自己的生活，“做研发也可以准时下班，每周公司考虑到早高峰，还有 5 次补卡机会”。在实行 4 天半工作制的第一天，他下午 3 点就离开了公司。</p><p></p><p>这两年日益加剧的内卷文化也让身处其中的互联网人感到压力山大。2019 年从乐视离开的小白向燃次元表示“在乐视，内卷的人会被鄙视”，“没人卷工作时长，都是做本职工作。”</p><p></p><p>乐视这封公开信一出，便引起了极大的关注度。“4 天工作制要不要推行”， “全国推行 4 天半工作制可行吗”，“如果上 4 天班你会搞副业吗”等相关话题很快登上热搜，引发广泛讨论。在国内，“四天工作制”的呼声也很高涨，但要想短时间内并不容易实现。</p><p></p><p>乐视一直是网友眼里的神仙公司——“从不 996，下班即挂机”。去年 7 月，有微博网友发博称，乐视“还剩下 400 多人”，“没有内卷和 996，没拖欠过留下来的员工工资”。随后又有人爆料，靠着《甄嬛传》等影视版权收入和大楼出租租金，乐视的 400 名员工过着没有老板的神仙日子。</p><p></p><p>有网友调侃“房租和《甄嬛传》保住了公司的荣华富贵”。事实上，靠房租过活消息不实。去年 9 月乐视已搬离乐视大厦，原乐视大厦将由新业主接手。去年 4 月，乐视视频通过官方微博自我调侃，如果 2018 年《甄嬛传》版权没有被分销，乐视视频可以安心养老。</p><p></p><p></p><h3>全球规模最大的不降薪「四天工作制」试验</h3><p></p><p></p><p>类似的“四天工作制”制度，最初由美国开创。上世纪 70 年代，因为汽油价格猛涨，受困于石油危机，美国伯明翰市被迫考虑并推行每周 4 天工作制。最初的“四天工作制”并不是一周只工作四天，而是每周都有一天可以让员工做自己岗位职责之外的事情。</p><p></p><p>现在，世界上有一些国家，比如冰岛、新西兰、日本、西班牙等国家的部分企业已经推行一周 4 天工作制。</p><p></p><p>去年 6 月，全球规模最大的不降薪「四天工作制」试验在英国、美国、新西兰等地开展，为期 6 个月，有 70 多家公司和 3300 多名员工参加。</p><p></p><p>这项实验由非营利性组织 4 Day Week Global、剑桥大学、波士顿学院和都柏林大学的研究人员合作开展。参与公司在为期六个月的实验过程中采用 100-80-100 模式：员工在 80% 的时间里领取 100% 的工资，并保持 100% 的生产力。研究人员将衡量新工作模式对<a href=\"https://edition.cnn.com/2022/05/05/economy/us-productivity-first-quarter-2022/index.html\">生产力水平</a>\"、性别平等、环境以及工人薪资福利的影响。</p><p></p><p>在实验进入到半程之际。去年 9 月，组织者“全球四天工作制”(4 Day Week Global) 公布了调查结果：实施的试点计划——“四天工作制”是可行的。</p><p></p><p>4 Day Week Global 发布的一份调查显示，有 78% 的领导者表示目前已顺利实现了从五天到四天工作制的过渡，只有 2% 的公司认为它具有挑战性。还有 88% 的人认为，四天工作制是有效的。同时，也有大约五分之一的公司选择了退出。</p><p></p><p>试点公司的高管们表示，他们面临着双重挑战：一方面，要克服员工和行业内部的五天工作规范；另一方面，要积极改进工作流程，以便在四天内完成与五天一样多的产出。</p><p></p><p>一些参与实验的员工<a href=\"https://edition.cnn.com/2022/08/01/business/4-day-work-week-uk-trial/index.html\">表示</a>\"，他们感觉更快乐、更健康，并且在工作中做得更好。英格兰西南部一家慈善银行的贷款服务经理丽 Lisa Gilbert 将她的新日常工作描述为“惊人的”。“我现在真的可以享受我的周末了，因为我可以在周五做家务和处理其他琐碎的事情”。</p><p></p><p>不过，这种转变并非是一帆风顺的。伦敦公共关系机构 Unity 的常务董事 Samantha Losey 表示，第一周“真的很混乱”，她的团队没有为更短的工作交接做好准备。但她的团队很快找到了解决方法。现在，公司已禁止所有超过 5 分钟的内部会议，并将所有客户会议限制在 30 分钟以内。Losey 说，到第四周时，她的团队已经取得了进展。但她坦陈，如果在六个月的试验过程中 ，团队的生产力水平下降了， 她“绝对”有可能恢复五天的工作时间表。</p><p></p><p>新冠大流行 3 年以来，许多员工已经达到了<a href=\"https://edition.cnn.com/2022/03/30/economy/great-resignation-uk-australia-europe/index.html\">极限</a>\"。麦肯锡去年对全球 5,000 名员工进行的一项调查发现，近一半的人表示至少感到有些精疲力竭。Losey 说，她决定让 Unity 参与试点的一个主要原因是为了弥补员工在大流行最严重时期面临的“异常程度的倦怠”。</p><p></p><p>额外的一天为许多员工腾出了空间，让他们可以培养新的爱好，实现长期的抱负，或者可以在人际关系上投入更多时间。一些企业老板表示，参加试验的员工参加了烹饪班、钢琴班、志愿服务、钓鱼和轮滑等活动。</p><p></p><p>大多数员工都喜欢多给自己留出一天时间：他们将这种体验评为 9.1（满分 10 分），97% 的人表示他们希望继续紧凑的日程安排。他们自我报告的表现水平上升，而倦怠和疲劳下降。他们可以更好地控制自己的日程安排，每周还可以节省一个小时的通勤时间，尽管在整个实验期间，面对面的工作有所增加。</p><p></p><p>有网友观点认为，“五天工作周是 20 世纪的概念，不再适合 21 世纪。”</p><p></p><p>到去年 11 月底，项目进入尾声之时，参与企业决定是否坚持新的工作时间表。一些企业领导者表示他们愿意继续，因为业务没有受到影响。平均而言，企业将员工的日程安排减少了 6 个小时，从每位员工每周约 41 小时减少到 35 小时。在提供数据的企业中，企业报告整个实验期间的收入增长了 8%，比去年同期增长了 38%。</p><p></p><p>在试验结束时提供反馈的 27 家公司中，有 18 家表示他们肯定会继续每周工作 4 天的制度，7 家计划继续但尚未做出最终决定，1 家倾向于继续，1 家仍在考虑。</p><p></p><p>参考链接：</p><p>https://baijiahao.baidu.com/s?id=1754104286312243575&amp;wfr=spider&amp;for=pc</p><p>https://finance.sina.com.cn/tech/csj/2023-01-05/doc-imxzayir5711977.shtml</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5NzM2MzI4MQ==&amp;mid=2652612313&amp;idx=4&amp;sn=9feae21385f411bfe1dd83507be8c12f&amp;chksm=bd342de78a43a4f17b0de3bc81e433f1695684b685faf63ee77cd44e5107768c78d37a32749c&amp;scene=21#wechat_redirect\">https://mp.weixin.qq.com/s?__biz=MjM5NzM2MzI4MQ==&amp;mid=2652612313&amp;idx=4&amp;sn=9</a>\"</p><p>https://www.cnbc.com/2022/12/09/us-4-day-workweek-trial-results-no-one-is-going-back-to-normal.html</p>",
    "publish_time": "2023-01-05 14:51:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "打造学习型企业，致胜数字化时代｜2022企业数字人才发展领航榜揭晓！",
    "url": "https://www.infoq.cn/article/lddQUeZBH9JyjZ6kELQK",
    "summary": "<p>回顾 2022，疫情带来的经济寒冬进入第三年，随着国家数字化蓝图的展开，越来越多的企业开始从数字化转型中谋求实现降本增效，提升盈利能力的机会。行业数字化变革蓬勃发展，数字人才的重要性也愈发凸显，人才数字化思维和能力缺乏，是数字化转型落地的首要困难，“数字化转型人才先行”已成为众多企业的数字化纲领。</p><p>&nbsp;</p><p>​随着数字化转型走深向实，数转企业全面开展数字化人才梯队建设，行业中涌现出大量数字人才培养优秀实践案例。在培训杂志的指导下，极客邦科技双数研究院与中国企业数字人才发展研究中心（培训杂志与极客邦科技共建），共同开展数字人才培养优秀案例的选拔，基于对 2022 年度极客时间合作企业的数字人才培养创新项目和运营效果的综合评议，最终从 3000 家企业中决出涵盖“数字人才培养先锋组织”、“自驱学习力典范”、“持续学习型组织”三个不同维度的标杆企业，由极客时间与 InfoQ 极客传媒联合发布“2022 年企业数字人才发展领航榜”。希望通过榜样的力量激发行业数字人才培养体系和标准搭建，筑牢数字人才基石，助力数字中国建设。</p><p><img src=\"https://static001.infoq.cn/resource/image/b0/2e/b083deea3a0004efb1060ffea4747d2e.jpg\" /></p><p></p>",
    "publish_time": "2023-01-05 15:09:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "汽车芯片成Arm增长发力点，分析师：汽车市场至关重要，目前还未分出胜负",
    "url": "https://www.infoq.cn/article/VFO6mFhtBuWIpkDNl3M4",
    "summary": "<p>据《金融时报》报道，自 2020 年以来，芯片设计公司 Arm 的汽车业务收入增长了一倍多，汽车业务也成了Arm 新的增长途径。</p><p>&nbsp;</p><p>Arm汽车市场副总裁Dennis Laudick表示，该细分市场的增长速度一直快于智能手机和数据中心等其他部门。该部门主要为从电气化到先进的驾驶员辅助系统（ADAS）和车载“信息娱乐”的一切提供动力。</p><p>&nbsp;</p><p>这是因为，现代汽车需要更多的芯片，这些芯片也比以往任何时候都更加昂贵。由于需求旺盛，汽车芯片是整个芯片行业中为数不多的、预计将在今年全年严重短缺的芯片之一。</p><p>&nbsp;</p><p>事实上，在 2022 年，<a href=\"https://www.infoq.cn/article/IIrxAaTj0zL0vmWeDqMl\">汽车芯片</a>\"就已出现短缺。</p><p>&nbsp;</p><p>半导体行业人士陈启在接受 InfoQ 采访时曾表示，2022 年需求旺盛的芯片产品主要集中在汽车电子类和新能源功率类，像高端的汽车所用到的各种车规级芯片，以及功率半导体方面的 IGBT、MOS 类产品一直有很好的需求。研究背后的本质原因可以发现，汽车电子类芯片壁垒较高，玩家较少，因此价格一直坚挺。特别是 IGBT 这种产品，由于汽车和新能源上都要用，呈现出“双轮驱动，量价齐升”的局面。</p><p>&nbsp;</p><p>此外，由于疫情催生出大量汽车消费需求，而随着需求从传统燃油车转向新能源汽车，车规芯片需求量大增。与消费级芯片相比，车规芯片安全性、可靠性要求更高，认证周期较长，并且短期内消费级芯片无法平移到车上。也因此，车规芯片在长时间内处于缺芯、高价阶段。</p><p>&nbsp;</p><p><a href=\"https://www.infoq.cn/article/ErbwGSrFJ4cFauGv5ys0\">Arm</a>\"发力汽车芯片后，营收迈上了新的台阶。数据显示，Arm 的总收入在 2022 年增长了 35%，达到 27 亿英镑。虽然Arm并未透露具体数字，但表示其汽车业务的收入在过去四年中增长了五倍。</p><p>&nbsp;</p><p>带来高收入的同时，汽车<a href=\"https://www.infoq.cn/article/uMkRA2sFBBmtzSLKO0TF\">芯片</a>\"业务也为Arm带来新的挑战。</p><p>&nbsp;</p><p>Dennis Laudick表示，“一款高端汽车所配备的软件系统，可以说是目前世界上最复杂的软件系统之一。它基本上就是轮子上的数据中心。”</p><p>&nbsp;</p><p>此外，Arm还面临来自英特尔、MIPS 和 Synopsys 等竞争对手的激烈竞争。D2D Advisory 分析师 Jay Goldberg 表示：“半导体行业在高速增长中一直表现良好，现在所有芯片公司都在追逐下一个高点。”“汽车市场至关重要，目前还没有人赢得这个市场。”</p>",
    "publish_time": "2023-01-05 15:56:20",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "音视频技术持续进击，直播互动场景会如何“进化”？",
    "url": "https://www.infoq.cn/article/QlsziKdTXqzhwruZhSW3",
    "summary": "<p>最近几年，音视频是一个非常热的技术话题。远程办公、线上娱乐的需求持续增加，元宇宙的概念也在被广泛讨论，在通信技术不断演进迭代的同时，带来了很多直播互动的新玩法、新形式。</p>\n<p>本次直播，InfoQ 与 ZEGO 即构科技 视频处理工程师李凯围绕音视频技术的突破、应用场景，以及实时互动 RTI 进行探讨。</p>",
    "publish_time": "2023-01-05 16:19:46",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "请查收你的新年礼物，InfoQ 内容中心 2022 私享书单",
    "url": "https://www.infoq.cn/article/Wg8tTqCMY1zDOabZQlpf",
    "summary": "<p>新年好，关注&nbsp;InfoQ&nbsp;的你，首先祝你新的一年诸事顺遂，遇见更好的自己。</p><p></p><p>2022&nbsp;年我们遇见了太多的混沌与不确定性，但还好有一件事毫无疑问：书籍始终是我们最忠实的朋友。无论通货膨胀的多厉害，读书这件事总是一本万利的。</p><p></p><p>所以在新年到来之际，InfoQ&nbsp;内容中心的每一个同学，都会将自己的私人爱书推荐给你，希望能帮你节省挑书选书的时间，也希望以书会友，交流我们之间的新发现、新思考、新感悟，所以如果在你的心中，也有一本&nbsp;2022&nbsp;最爱的书，欢迎在评论区分享给我们。</p><p></p><h1>书单推荐</h1><p></p><p></p><p>书名：《纳博科夫文学讲稿三种》</p><p></p><p>作者：弗拉基米尔·纳博科夫</p><p></p><p>出版社：上海译文出版社</p><p></p><p>推荐人：<a href=\"https://www.infoq.cn/u/knight/publish\">王一鹏</a>\"</p><p></p><p>推荐语：</p><p></p><p></p><blockquote>焦虑、躺平、松弛感，人们关注这些热词，与过分关注物质收益分配、沉溺理工思维主导的信息化时代，有着千丝万缕的联系。如果人们眼里只有数字，没有感性的文学、艺术之美，没有哲学的思辨，那么社会就一定会出现问题。恰好，文学、艺术向来又是高傲的，对美的欣赏是有门槛的，没有经过一位大师的训练，难以自学成才。而这或许就是《纳博科夫文学讲稿三种》存在于当今社会的现实意义。纳博科夫是少有的文学大师，他既是《洛丽塔》的作者，也是哈佛、康奈尔、斯坦福的客座教授，他对重要文学作品的讲解和分析，或许能帮你跨过认知鸿沟，重新认识并沉浸在一种古老的艺术形式里。千万别以为该系列图书是读起来令人昏昏欲睡的大学课件，恰好相反，讲稿行文虽有卖弄的嫌疑，但也称得上是旁征博引、慷慨陈词，自身就是文学之美的彰显。如果有一天，你既不是为了在主流价值评判体系下显得更上进，也不是为了升职加薪，而是单纯的像打开一部综艺一样打开一本书，那么我想，你已经收到了纳博科夫献给文坛的礼物。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/46/46269f76d8abe23becbbc03be74cbc43.jpeg\" /></p><p></p><p>书名：《思考，快与慢》</p><p></p><p>作者：丹尼尔·卡尼曼</p><p></p><p>出版社：中信出版社</p><p></p><p>推荐人：<a href=\"https://www.infoq.cn/profile/16655B089D4524/publish\">凌敏</a>\"</p><p></p><p>推荐语：</p><p></p><p></p><blockquote>这本书的作者丹尼尔·卡尼曼是诺贝尔经济学奖得主，他认为人的思考模式分为快思考和慢思考两个系统，快思考是指依赖直觉的、无意识的思考，慢思考则是指需要主动控制的、有意识进行的思考。人们以为能驾驭自己的思想，但实际上我们的每一个思考都会被看不见的因素影响着，很多时候，我们还会陷入思维陷阱里。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/8b/8bfb7d8695fc374c16016fd1307d2dd2.png\" /></p><p></p><p>书名：《外婆的道歉信》</p><p></p><p>作者：弗雷德里克·巴克</p><p></p><p>出版社：天津人民出版社</p><p></p><p>推荐人：<a href=\"https://www.infoq.cn/profile/F13709F72C8E46/publish\">褚杏娟</a>\"</p><p></p><p>推荐语：</p><p></p><p></p><blockquote>这本书里有个“活泼过头”的外婆：她带着七岁的外孙女爱莎夜闯动物园看猴子；用屎球打警察；开车时一边抽烟一边吃烤肉，用膝盖控制方向盘；给雪人穿衣服，让邻居误以为有人从阳台上跌下去；甚至在宜家偷黄色购物袋。关于外婆的每件事都让人既好气又好笑。或许你会觉得这个没正经的外婆简直太疯癫了，但她却是爱莎心中的超级英雄，因为为了外孙女她不惜与世界为敌。然而有一天，外婆因为癌症不幸去世了，留给了爱莎一项艰巨的任务——送道歉信。跟着爱莎的脚步，关于外婆以及更多古怪的邻居们的故事会逐渐展开，你会爱上这些平凡、有缺点、被命运伤害，但依然可爱的人。他们让你想起生活本身。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/7e/7e5adef2f95fcf64f1de65db1d22f16b.jpeg\" /></p><p></p><p>书名：《也许你该找个人聊聊》</p><p></p><p>作者：洛莉·戈特利布</p><p></p><p>出版社：果麦文化/上海文化出版社</p><p></p><p>推荐人：<a href=\"https://www.infoq.cn/u/caifangfang/publish\">蔡芳芳</a>\"</p><p></p><p>推荐语：</p><p></p><p></p><blockquote>本书以一位心理治疗师的视角，讲述了发生在心理治疗诊室中的一些故事。作者采用双线讲述的方式，其中一条线是她作为心理咨询师如何治疗病人的过程，另一条线则是她自己作为病人如何被疗愈的过程。书里没有任何高高在上的说教或艰深晦涩的理论，只有一个个直戳人心的故事，特别扎心，但也很动人，你可能会在其中获得情感共鸣。阅读这本书的旅程就像做了一场心灵SPA，让我放松了一点执念，学会把重心放回自己身上，专心做对自己有意义的事情。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f6/f6187b0a80135d7bb65193145ef66ca8.png\" /></p><p></p><p>书名：《破绽：风口上的独角兽》</p><p></p><p>作者：陈歆磊、史颖波</p><p></p><p>出版社：中信出版社</p><p></p><p>推荐人：<a href=\"https://www.infoq.cn/profile/E5368BDB0F3A58/publish\">Tina</a>\"</p><p></p><p>推荐语：</p><p></p><p></p><blockquote>本书写于2018年下半年，于2019年3月出版，当时寒潮未至，正值互联网企业风头正盛时期。作者以敏锐的视角和新颖的思路，分析了小米、乐视、共享单车、新零售、网红等独角兽公司和新兴业态中的“破绽”。放到现在来看，作者的不少观点得到了印证，可谓是“互联网时代的盛世危言”。也正如图书简介中所言：光鲜的泡沫往往也是危险的泡沫。激情澎湃过后，风口上的泡沫终会露出破绽，如何在成功和热闹背后去发现破绽，这需要冷静的思考和分析。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/16/166e390b407daab7f51aff48c19b5040.png\" /></p><p></p><p>书名：《大地孤独闪光》</p><p></p><p>作者：李海鹏</p><p></p><p>出版社：南方日报出版社</p><p></p><p>推荐人：<a href=\"https://www.infoq.cn/profile/E8113DAB95C4DE/publish\">刘燕</a>\"</p><p></p><p>推荐语：</p><p></p><p></p><blockquote>本书汇聚了原南方周末高级记者李海鹏的精选特稿作品。作家慕容雪村说，李海鹏的文字在中国当代无出其右。李海鹏的作品，把文字之美发挥的淋漓尽致，你可以感受到优美的文字是如何在作者的指尖自然流淌。同时，这些作品的内涵又十分深刻，反映社会重大问题，富有现实意义，凸显了作者对人和事的深邃理解。李海鹏的特稿，为“光怪陆离纷纭复杂的今日中国留下了无双的写照”。透过这些文字，相信你可以更加读懂中国。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/f4/f4a29634d93ee2960d6dd567cb37a6aa.png\" /></p><p></p><p>书名：《纳瓦尔宝典》</p><p></p><p>作者：埃里克·乔根森</p><p></p><p>出版社：中信出版社</p><p></p><p>推荐人：金玉秀</p><p></p><p>推荐语：</p><p></p><p></p><blockquote>对于很多忙碌的职场人来说，这是一本非常适合随手翻看的书，它收集整理了硅谷知名天使投资人纳瓦尔的智慧箴言，随便从哪一页都可以读下去，都会有收获。这是一本关于财富、关于幸福的书，财富和幸福是人生的重要课题，却也是我们平时鲜少花时间思考的，虽然这本书只有200多页，但它的思考很厚重，值得我们在人生的不同时期反复翻看，每次都会有不同的体会，也值得分享给你身边的朋友，相信他们也会受益良多。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0d/0dd7de2a2c69fd5ab404ca8840fca59b.png\" /></p><p></p><p>书名：《马克洛尔的奇遇与厄运》</p><p></p><p>作者：阿尔瓦罗·穆蒂斯</p><p></p><p>出版社：中信出版社</p><p></p><p>推荐人：刘德胜</p><p></p><p>推荐语：</p><p></p><p></p><blockquote>这本书是塞万提斯奖得主、哥伦比亚作家阿尔瓦罗·穆蒂斯最重要的作品，六年成书，中文世界首次系统引进。诗意的语言+“詹姆斯·邦德”式的讲故事的方式，讲述“瞭望员马克洛尔”的史诗人生，七部曲组成的英雄传奇，这七个故事彼此独立又相互关联，小说里的时间与人生像海浪一样奔涌往复，最后激荡成为壮观的个人史诗。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a3/a332293393233a528f5937396ee99da6.png\" /></p><p></p><p>书名：《人间烟火：&nbsp;掩埋在历史里的日常与人生》</p><p></p><p>作者：赵冬梅</p><p></p><p>出版社：中信出版集团</p><p></p><p>推荐人：<a href=\"https://www.infoq.cn/profile/4DF22B36EA245A/publish\">Alice</a>\"</p><p></p><p>推荐语：</p><p></p><p></p><blockquote>汪曾祺曾说：“四方食事，不过一碗人间烟火。”人间烟火味，最抚世人心。这本书围绕衣食住行，以及衣食住行的主体——女人和男人。食部分比较有印象的是，生鱼片我们日常以为是日本菜，但其实在我国唐代就很盛行了。衣服部分的汉服，也不是我们印象中的宽袍大袖，华夏的衣冠一直是变化的，比如赵武灵王引进的“胡服”，宋人的衣物特别像鲜卑人。出行也不只是古装剧里的“策马扬鞭”，更多是驿站、关山、宦游人的辛酸泪。在对男子和女子的描述中，介绍了很多习俗，还原了当时的日常生活。食一碗《人间烟火》，饮几杯人生起落。历史中的个体虽然渺小，也都曾熠熠生辉。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2c/2cbea7ee4b76e9ebd9ba75e4e4c10038.png\" /></p><p></p><p>书名：《午夜降临前抵达》</p><p></p><p>作者：刘子超</p><p></p><p>出版社：文汇出版社</p><p></p><p>推荐人：<a href=\"https://www.infoq.cn/profile/5380C3E21515FE/publish\">张雅文</a>\"</p><p></p><p>推荐语：</p><p></p><p></p><blockquote>如果你厌倦了打卡式旅行，那么这本书将提供给你一种全新的旅行方式——沿着历史与文明的印记前行。《午夜降临前抵达》记录了作者两次中欧旅行的经历，一次夏季，一次冬季。买书的时候会附送一张小地图，详细标注了作者的旅行路线。在阅读的时候，每读到一座城市，打开地图看看他的地理位置，有一种自己真的在旅行的感觉，很奇妙。中欧的地理位置非常特殊，他生存在历史的夹缝中。在帝国的斗争中，这片土地不断被撕扯、被重塑。然而，跟随作者的脚步，你会发现。哪怕饱经战争的摧残，哪怕城市被夷为平地，哪怕三分之一的人口因为战争失去生命或者流亡，重建的城市依旧抹不掉曾经历史的印记。没有人能拒绝一位会旅行、懂历史、有故事的朋友吧～在安静的午后或者是睡前，不妨翻开这本书。</blockquote><p></p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/87/f7/87d059ca65cbc8c91bb6f2c847fe11f7.png\" /></p><p></p><p></p><p>书名：《额尔古纳河右岸》</p><p></p><p>作者：迟子建</p><p></p><p>出版社：人民文学出版社</p><p></p><p>推荐人：<a href=\"https://www.infoq.cn/profile/A1FD048785A6CC/publish\">任传英</a>\"</p><p></p><p>推荐语：</p><p></p><p></p><blockquote>这是一部描写鄂温克人生存现状及百年沧桑的长篇小说，展示了弱小民族在严酷的自然环境和现代文明的挤压下的顽强生命力和不屈不挠的民族精神，以及丰富多彩的民族性格和风情。作者以一位年届九旬的鄂温克族最后一位酋长女人的自述口吻讲述一个弱小民族顽强的百年命运抗争和平凡的生活。作者文笔细腻，语言通俗易懂，她没有用冗杂的道理去陈述“人和自然的和谐相处”、“大爱和宽容”的主题，也没有用晦涩的暗喻明讽来突出困难。对自然景色的描述中，运用大量的比喻和拟人的修辞，让人声临其境，浮想联翩。文中大量故事重复着喜悦与悲伤、失望与希望的转换，在生活挫折之时阅读尤能增加面对困难的勇气。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/21/2187783a00641e08e27ca20a36c40126.png\" /></p><p></p><p>书名：《我本芬芳》</p><p></p><p>作者：杨本芬</p><p></p><p>出版社：北京联合出版公司</p><p></p><p>推荐人：<a href=\"https://www.infoq.cn/profile/7592FCF81288CF/publish\">郑思宇</a>\"</p><p></p><p>推荐语：</p><p></p><p></p><blockquote>这是一本看完之后让人压抑的书。看到这本书觉得封面和书名有股悲凉感，果不其然，这本书一点都不“芬芳”，主人公把自己60年来的孤独、失落和委屈，浓缩到了这本巴掌大的小书里，从女性视角讲述了那个时代背景下的婚姻。封皮最后写的是：献给每一个不被看见的你我她，希望读到这本书的你，不用在落寞中绽放，拥有不必隐忍的权利。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/b7/b765a1d95f1a6951a56d9c0f0cbbf81e.png\" /></p><p></p><p>书名：《皮囊》</p><p></p><p>作者：蔡崇达</p><p></p><p>出版社：天津人民出版社</p><p></p><p>推荐人：<a href=\"https://www.infoq.cn/u/ludongxue/publish\">鲁冬雪</a>\"</p><p></p><p>推荐语：</p><p></p><p></p><blockquote>该书讲述一个名叫东石的福建渔业小镇的风土人情和时代变迁，记录了作者与故乡、家人、好友之间温情而又残酷的故事。作者虽以苦难为题材，但却是以超越困难、寻找与苦难和解、救赎心灵的方式来立意，整体基调虽忧伤但不颓废，文本中散发出一种明朗向上的精神力量。emo的时候，妄自菲薄的时候，读一读，找一下自己，很管用。（ps：这应该算是个散文集，有艺术加工，不爱看散文的可以忽略，但我觉得可读性挺高的。）</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2b/2ba79766c42ca47faa536146f301409b.png\" /></p><p></p><p>书名：《被讨厌的勇气》</p><p></p><p>作者：岸见一郎、古贺史健</p><p></p><p>出版社：机械工业出版社</p><p></p><p>推荐人：<a href=\"https://www.infoq.cn/u/junbao/publish\">张俊宝</a>\"</p><p></p><p>推荐语：</p><p></p><p></p><blockquote>可能有很多人看过，但还是值得推荐一下。人是所有社会关系的总和。决定我们自身的不是过去的经历，而是我们自己赋予经历的意义。希望你从这本书里能够得到一些正向的情感激励。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5a/5a49d2acf641e0c7f639fab48f3852fb.jpeg\" /></p><p></p><p>书名：《悉达多》</p><p></p><p>作者：赫尔曼·黑塞</p><p></p><p>出版社：天津人民出版社</p><p></p><p>推荐人：<a href=\"https://www.infoq.cn/profile/3CF61DFD223E0E/publish\">付秋伟</a>\"</p><p></p><p>推荐语：</p><p></p><p></p><blockquote>这本书讲述的是佛陀的故事，但是同时它更是一本心灵救赎之书，2022&nbsp;是不确定的一年，我们可能遇到了各种各样的新问题、新麻烦，甚至给我们带来超乎过往的痛苦、迷茫、无奈、失落，就像书里的悉达多一样，从在婆罗门时的意气风发，到沙门的跌跌撞撞，乃至于后面坠入凡尘、迷失自我，期间也经历友情、品尝爱情、追逐名利，庆幸的是内心的阿特曼（信仰）一直都没有彻底消散，最终幡然醒悟，求得生命意义的圆融统一，看似宏大，却是每个人无法回避的问题。《悉达多》的副标题为一首印度的诗，风格上充满着诗歌的洒脱，同样也饱含着哲学和心理学的智慧，读《悉达多》能够让我们从凡尘俗世中暂时抽离出来，去体验一场属于佛陀的人生，酣畅淋漓之外同样发人深省。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/90/906725fcd4581f778350ba66ba2fdecf.png\" /></p><p></p><p>书名：《日瓦戈医生》</p><p></p><p>作者：鲍·帕斯捷尔纳克</p><p></p><p>出版社：天津人民出版社</p><p></p><p>推荐人：<a href=\"https://www.infoq.cn/u/kimmy/publish\">罗燕珊</a>\"</p><p></p><p>推荐语：</p><p></p><p></p><blockquote>《日瓦戈医生》是前苏联作家帕斯捷尔纳克于上世纪五十年代出版的一本长篇小说，通过主人公日瓦戈一生的经历反映俄罗斯社会从沙俄、苏俄、再到苏联时代的社会变迁。小说描写了前苏联十月革命前后多个重大历史与社会事件，包括1905年革命、一战、十月革命、苏俄内战、新经济政策等，以及不断变化的社会经济环境对人们传统价值观念和思维方式的冲击。推荐这部小说，是因为我们当下正生活在一个充满剧变的时代，无数的“黑天鹅”、“灰犀牛”、“疯狗浪”事件不断颠覆着我们对这个世界的认知，甚至颠覆着我们的价值体系。在这个充满不确定性的时代，也许我们可以以史为鉴，看一看作家帕斯捷尔纳克，以及他笔下的日瓦戈医生，是如何在兵荒马乱，山河破碎的大时代中坚守着自己的善良、良知、对美与自由的热爱。正如本书作家在其诗作中所写的那样：但行将就木的我，相信那样一个时辰：善的精神必将战胜，强大的卑鄙和怨恨。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/fc/fc94f4d70080a0c1efee5801826fc142.png\" /></p><p></p><p>书名：《生死疲劳》</p><p></p><p>作者：莫言</p><p></p><p>出版社：浙江文艺出版社</p><p></p><p>推荐人：<a href=\"https://www.infoq.cn/profile/07B1FEA2B7C7C4/publish\">高玉娴</a>\"</p><p></p><p>推荐语：</p><p></p><p></p><blockquote>莫言自称诺奖评委主要是因为看了这本书才把诺奖给了他。《生死疲劳》讲的是一个被冤杀的地主西门闹的六道轮回，一世为驴、二世为牛、三世为猪、四世为狗、五世为猴，看尽人性百态，一切恩怨消弭，最后终于再次转生为人。全书近50万字，看到根本停不下来，莫言用他幽默的笔触，荒诞又有趣的想象，直击灵魂深处。都说人生除了生死无大事，看过《生死疲劳》之后发现，原来生死也是小事。再多的苦大仇深、爱恨情仇，都可以交给时间。与自己和解、与他人和解、与万事和解，很多时候我们确实需要这样一场救赎。在那些痛苦瞬间、至暗时刻，不妨翻开一看。相信你也一定会笑出声来，获得内心深处的解脱。btw.新版附的人物关系图简直不要太友好。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/91/914de7adcf2537eb9b689826b751995f.jpeg\" /></p><p></p><p>书名：《山茶文具店》</p><p></p><p>作者：小川系</p><p></p><p>出版社：湖南文艺出版社</p><p></p><p>推荐人：姜昕蔚</p><p></p><p>推荐语：</p><p></p><p></p><blockquote>精神紧绷的日子久了，&nbsp;就希望能有一个安静的角落，能静静地待一会儿，看一本小书，疗愈一段惊涛骇浪的过往。如果你也在寻找一本治愈的小书，山茶文具店一定是这个元旦非常好的选择。这本书讲了一个日本古老的职业（代笔人）和她的客人的小故事。书很短，&nbsp;读起来完全不费力，但是却会给你很多平静的力量。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/89/894234ba4d01ba6117a4e53cb5c35a94.png\" /></p><p></p><p>书名：《最高职责》</p><p></p><p>作者：切斯利·萨伦伯格、杰夫·扎斯洛</p><p></p><p>出版社：北京联合出版公司</p><p></p><p>推荐人：崔白洁</p><p></p><p>推荐语：</p><p></p><p></p><blockquote>第一次知道萨利机长，是空中浩劫纪录片中简短的“Unable”、“Brace&nbsp;for&nbsp;Impace”。他面临重大危机也临危不乱，最终使双引擎熄火的飞机顺利迫降在哈德逊河，且机上155人全部幸免于难。在这本书中，你会看见一位经验丰富机长的成长史，以及整个事件机长视角的描述，本书同纪录片、萨利机长影片、采访与ATC的录音同时食用最佳。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/49/49c1b80e9690933f28c3b9d883f42f2b.png\" /></p><p></p><p>书名：《袭击面包店》</p><p></p><p>作者：村上春树</p><p></p><p>出版社：南海出版公司</p><p></p><p>推荐人：吴倩妮</p><p></p><p>推荐语：</p><p></p><p></p><blockquote>《袭击面包店》分为《袭击面包店》和《再袭面包店》两篇。在一种没由来的饥饿感的驱使下，主人公袭击了面包店。时隔十年后主人公已经成家，但又一次被这种饥饿感困扰，于是袭击麦当劳。用荒诞的情节描述了不同思想潮流的冲击与时代洪流中”人“的处境。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4e/4e0516583f56a97b4d9c6077d822561f.png\" /></p><p></p><p>书名：《爱生活，不爱也行：日常哲学提案》</p><p></p><p>作者：热拉尔迪娜·莫斯纳-萨瓦</p><p></p><p>出版社：北京日报出版社</p><p></p><p>推荐人：李佳</p><p></p><p>推荐语：</p><p></p><p></p><blockquote>这几年我们深刻体验了所谓的无常是有偿，肯定有那么一些瞬间，你心中有这样那样的问题，或者憋屈，或者愤怒，或者激动，或者失望……零零总总的情绪难以处理，这个时候，哲学或许是一把钥匙。但是哲学啊，会不会太难，太虚，太难以理解。咦，这本小书来得恰到好处。打开目录，找到感兴趣的题目，随便翻过去看几眼，居然总能看到不一样的视角，获得一种开朗的能量。</blockquote><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/66/667e70fd76dd4da766d6a1f805aca08f.png\" /></p><p>相关阅读：</p><p><a href=\"https://xie.infoq.cn/article/53a62477b6b0976d3903e3c8e\">这里有一份 Java 程序员的珍藏书单，请您注意查收</a>\"</p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5ODQ2MDIyMA==&amp;mid=200313619&amp;idx=1&amp;sn=d662b5fa6646fd6201a0d58eb70cf544&amp;chksm=28ce45401fb9cc56971a968ac14bb7ac6fd88123393247bd627158d902cba98269d75fabdb7c&amp;scene=27#wechat_redirect\">推荐书单第一季</a>\"</p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5ODQ2MDIyMA==&amp;mid=200329578&amp;idx=1&amp;sn=80ed0ebd3aedfc118a1e5a79709ba413&amp;chksm=28ce07391fb98e2f038c86a890296c609c699409266488039853725d37a2bfb2faf60765856e&amp;scene=27#wechat_redirect\">推荐书单第二季</a>\"</p>",
    "publish_time": "2023-01-05 16:21:30",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "数据库内核杂谈（二十五）- 数据湖前世今生",
    "url": "https://www.infoq.cn/article/zgcYo1o62QXeWDdUhE8Q",
    "summary": "<p>欢迎阅读新一期的<a href=\"https://www.infoq.cn/theme/46\">数据库内核杂谈</a>\"。再次和大家道歉，拖更太久了，工作忙，然后出差，然后就阳了，恢复花了好久时间。一言难尽的2022年结束了，希望2023年能够善待我们（虽然，2022年初的时候，我也这么说）。数据湖(data lake)这个概念提出已经有了一段时间，各个大数据公司，或者技术厂商都有推出过自家的数据湖产品，比如DataBricks的Delta Lake，Uber开源的Apache Hudi以及Netflix开源的Apache Iceberg。一直想写一篇关于数据湖的文章。但，总觉得自己的理解和思考不深，可以学习和阅读的材料也不多。前阵子，读了不少博客，也阅读了Databricks关于数据湖的技术论文：Delta Lake：High-Performance ACID Table Storage over Cloud Object Stores。这一期，我们尝试着来聊一下数据湖。</p><p></p><h2>为什么需要数据湖？</h2><p></p><p></p><p>第一个问题依然是Why。为什么需要数据湖？数据湖要真正解决的问题是什么？我自己的理解就是，一套数据系统解决在线和离线数据统一查询的问题。</p><p>&nbsp;</p><p>我们都知道， hdfs, hadoop系统，让处理海量数据成为可能。但数据主要是以离线的形式呈现：批量导入数据，且历史数据不会被改动，新数据会周期性地新增（比如，按天级）。而这种形式带来的问题也显而易见，就是，不支持对及时更新的数据的查询。当然，我们也需要辩证地去思考这个问题。业务逻辑是否需要最新的数据。对于一些离线的报表，统计业务，T+1的延时已经完全能满足要求（在很多情况下，我也会和团队的同学去讨论，我们的业务是否需要小时级别的数据同步，往往答案是否定的）。</p><p>&nbsp;</p><p>在数据湖之前，其他系统是如何解决这个问题的。答案就是Lambda架构和Kappa架构。</p><p></p><h2>Lambda 架构介绍</h2><p></p><p></p><p>Lambda架构最早被提出是Nathan Mars发表于2013年的一篇博客，名为\"How to beat the CAP theorem\"，在文中Lambda架构被指为\"离线（batch）和在线（realtime）架构的结合：Lambda架构是一个数据处理和服务架构，通过协同并利用好离线和实时处理子系统来处理海量数据。Lambda架构通过使用离线子系统来计算出完整正确的离线数据，使用实时子系统来处理在线数据，并结合两者的结果，以此来平衡返回延时，吞吐量，以及容错率。Lambda架构的出现旨在通过实时数据处理解决大数据系统中MapReduce的延迟较高的问题。</p><p></p><h3>离线计算引擎（Batch Layer）</h3><p></p><p></p><p>离线计算引擎通常使用大规模计算引擎，离线处理并计算好结果（precompute）。离线计算引擎的好处在于，对于结果不追求时效性，比如T+1事件计算好即可。但同时由于计算的时候，离线计算引擎可以读取某个时间点（snapshot）内的所有数据，因此数据的准确性有保障（理论上是100%正确）。计算的结果通常会写到一个只读（read-only）的数据库里面。如果需要更新，也是完全覆盖旧的结果。</p><p>&nbsp;</p><p>2014年，开源的Hadoop（hdfs/mapreduce）被认为是一个具有代表性且应用广泛的离线计算引擎。这之后，一些其他的数据库系统比如Snowflake，Redshift，或者Big Query也被广泛使用。</p><p>&nbsp;</p><p></p><h3>实时处理引擎（Speed Layer）</h3><p></p><p></p><p>实时处理引擎，通常使用流式计算来处理数据，并不强求数据的完整性和正确性。它通过流式引擎来处理最实时的数据，以牺牲整体数据吞吐量的方式来进一步减少实时数据查询的延时。实时处理引擎是用来弥补离线引擎对于新数据的缺失。从数据正确性上来看，实时引擎不可能比肩离线引擎，但从时效性上来看，实时引擎几乎可以在读取到最新数据的同时（秒甚至毫秒级别）给出查询结果。</p><p>&nbsp;</p><p>常见的实时处理引擎有Amazon Kinesis，Apache Storm，Apache Samza，Apache Spark Streaming等。</p><p></p><h3>服务层（Serving Layer）</h3><p></p><p></p><p>服务层通常存储了离线和实时处理引擎处理后的数据结果，然后根据查询请求来决定是否直接返回离线结果，或者直接返回在线结果还是需要结合离线和实时数据，行程一个joint view，然后再返回。</p><p>&nbsp;</p><p>下图给出了Lambda架构示例：</p><p><img src=\"https://static001.geekbang.org/infoq/1f/1f956243e59480d2b74b33e16faa399a.png\" /></p><p></p><p></p><h2>Kappa 架构</h2><p></p><p></p><p>介绍完了Lambda架构，不知道大家是否发现了Lambda架构不好，或者说不优雅的地方。我引用一下Jay Kreps在2014年的一篇博客\"<a href=\"https://www.oreilly.com/radar/questioning-the-lambda-architecture/\">Questioning the Lambda Architecture</a>\"\"中的一句话\"The problem with the Lambda Architecture is that maintaining code that needs to produce the same result in two complex distributed systemsis painful and easily get wrong. \"。翻译过来就是指，离线引擎和在线引擎对于数据处理的逻辑是一致的，但Lambda架构需要维护两套代码在不同的引擎上（由于技术栈的不同）。</p><p>&nbsp;</p><p>也因此，Jay在博客中提出了Kappa架构。Kappa架构的主旨就是，既然在线处理引擎已经要做一次数据处理，是否可以提升在线引擎的吞吐量，把离线的任务也都交给它。下图给出了Kaapa架构的示意图：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a5/a55e02d265b2c7d9c49bd65fe776d5c3.png\" /></p><p></p><p>只用在线引擎来做数据处理，对于离线request，可以做好预处理存储起来，直接返回结果（可以利用hdfs来存储预处理的结果，但只作为serving layer），也可以重新feed原始的数据流来到在线引擎来支持新的计算。</p><p>&nbsp;</p><p>说一些我个人的理解，Kappa主打一套系统rule them all。但在线处理引擎，或者流式处理系统相对于离线系统还是有局限性的，比如功能不完善，特别是做一些需要复杂join的情形。第二，重新feed原始数据流来做计算并不是一个高效的实现方式。现实系统的演进也说明了问题，如果Kappa真的fit所有的用例，那也不会持续有新的NewSql，或者数据湖这类技术的持续改进。</p><p>&nbsp;</p><p>稍微总结一下， Lambda架构，是用两套系统来解决这个问题；Kappa架构是希望用流式系统解决，但并没有很好地解决这个问题。那数据湖又是如何去解决数据统一的问题呢？咱们围绕Delta lake这篇论文来讨论。</p><p></p><h2>使用对象存储作为存储介质</h2><p></p><p></p><p>Delta lake文中讨论的第一个观点就是，使用对象存储（比如S3，Ceph）作为存储介质。Hadoop或者Spark的存储系统一般都是HDFS。通常情况下，HDFS和Hadoop或者Spark是部署在相同的计算节点上的。因为HDFS重存储，而MapReduce或者Spark重计算（memory, CPU）。部署在一起的好处是，可以最大化地利用data locality来做移动计算。</p><p>&nbsp;</p><p>而数据湖架构，推荐使用对象存储作为存储介质。 原因如下：1）更贴近云原生。云厂商通常提供了超大规模，稳定，且性价比很高的对象存储服务。2）统一了结构化和非结构化的存储，非结构化的数据本来就会使用对象存储。3）更好地支持存算分离。 数据存储完全交给对象存储，计算就可以通过弹性资源来更好地scale，同时，也更符合云原生的概念。</p><p>&nbsp;</p><p>当然对象存储也面临一些问题。文中也梳理了一下：1）对象存储通常提供了key-value形式的access pattern，但不具备文件系统的很多功能。虽然key的命名可以去匹配directory的命名法则，且大部分的对象存储也支持list操作，但这些文件并不是物理存储在一个文件夹下，导致list操作并不是很高效（通常需要十几到几百毫秒），甚至有return数的限制（S3的list操作限制return 1000个key）。2）并不是强一致性：这也是对象存储性质决定的。当有新文件被创建时，list操作并不能保证会返回这个新文件。</p><p>&nbsp;</p><p>文章在介绍Delta lake技术方案之前，讨论了现有数据系统是如何基于对象存储做数据存储。</p><p></p><h3>directories of files</h3><p></p><p></p><p>这个方法和使用hdfs存储数据完全一致，数据以文件和文件夹的形式存在，只是将介质换到了对象存储。文件夹的构造通过通过命名规则来实现。比如</p><p>&nbsp;</p><p>namespace1/table1/partition1/<a href=\"http://1.data/\">1.data</a>\"</p><p>namespace1/table1/partition1/<a href=\"http://2.data/\">2.data</a>\"</p><p>namespace1/table1/partition2/<a href=\"http://1.data/\">1.data</a>\"</p><p>...</p><p>&nbsp;</p><p>这种方法的优势在于，实现非常简单，所有的信息都存储在对象存储上。数据引擎可以以很小的代价从支持hdfs读取到支持对象存储读取。并且，其他数据工具，在不需要额外工作的情况下（只要知道存储命名规则），也可以读写数据。劣势依然逃不开性能和一致性的问题。</p><p>&nbsp;</p><p></p><h3>custom storage engines（自研元数据管理中心）</h3><p></p><p></p><p>另一种方法（文中介绍了Snowflake），就是使用对象存储来存储数据文件，但通过自研的元数据管理中心来管理数据文件到表，namespace的映射。我个人其实是比较倾向这种设计的，用正确的技术做正确的事嘛。文中也提到了这类方法的挑战。1）需要额外的研发资源来建造这个元数据管理中心，2）所有对数据的读写都需要和这个元数据中心做交互，使得这个元数据中心要做到高性能，强一致，且始终在线。这是一个不小的挑战。3）source of truth都存储在这个元数据中心里，使得这个数据系统相对而言更闭源，其他数据系统接入的成本也会更高。</p><p></p><h2>Delta lake存储格式介绍</h2><p></p><p></p><p>比较了上述两种管理方式，来看Delta lake是如何实现对数据的管理。原理也挺容易想到的，就是对现有两种方法的结合：除了存储数据文件，也将数据的变更操作（log）存储在对象存储中。下图给出了示意：</p><p><img src=\"https://static001.geekbang.org/infoq/b4/b457f21d695eb0faa2151c1d2651333d.png\" /></p><p></p><p>除了数据文件，每个表会有一个单独的_delta_log的子目录，里面会记录数据变更的操作（虽然Apache Iceberg不在本文的介绍中，但我读过相关的blog以及Apache Iceberg的spec，方法是类似的）。</p><p>&nbsp;</p><p>log文件夹下存储着序列号递增的log文件，顺序记录着数据管理的操作。在某些情况下，也会有checkpoint的log文件存在（这些checkpoint log文件以parquet format存储，相当于snapshot，用来合并前面log的操作来提升读取性能）。每个log文件，记录着从上一个版本的数据，到这个版本的数据要做哪些操作。常见的操作有：</p><p>元数据改变(change metadata)： 比如schema 改变，或者partition column改变。数据文件改变（Add or Remove files）：记录着对于一个表数据，有新的数据文件生成，或者旧的数据文件删除。协议改变（protocol evolution）：主要用于明示系统目前使用的是哪个版本的Delta table protocol。</p><p>&nbsp;</p><p>文中也介绍了一些关于log读取的优化操作，除了已经介绍过的checkpoint文件，在log里也会存储一个_last_checkpoint的文件用来告诉系统最新的checkpoint的version是哪一个，方便快速读取而不用list所有的log文件后再做判断。</p><p>&nbsp;</p><p>介绍了log的存储格式，再来看如何支持数据读写操作。这边以读取最新版本的数据为例。</p><p>读取_last_checkpoint（如果存在的话），找到最新的checkpoint的版本号。以这个版本号为start-key（如果没有，就是0），读取大于这个版本号的json-log或者checkpoint parquet文件（这边为什么还需要读取checkpoint，主要原因也是因为系统没有强一致保障，不能保证_last_checkpoint里存储的就是最新的checkpoint）。用最新的checkpoint文件加上后续的log文件来获得当前数据表的最新元数据，包括schema信息，数据文件信息，statistics等等。根据上面获得的信息，结合query，读取相应的数据文件。</p><p>&nbsp;</p><p>写操作则如下：</p><p>获取数据表最新的元数据信息，这个操作和读操作里面的1，2，3步一致。如果是数据更新操作，将新的数据文件写到data folder里面。假如目前版本是n，尝试创建n+1.json，并将元数据改变的操作写入这个文件。判断是否需要创建一个新的checkpoint log（目前的判断逻辑是每10个版本创建一个checkpoint），如果需要，将最新的元数据信息写入checkpoint，并更新_last_checkpoint文件。</p><p>&nbsp;</p><p>细心的读者会发现写操作的第三步，创建n+1.json需要原子操作，但并不是所有的对象存储都支持原子操作。文中介绍了，Google Cloud Storage和Azure Blob Store都支持原子的put-if-abscent操作，因此可以直接使用，但如果是AWS S3，需要配合DataBricks的轻量级的coordination service来保证原子操作。</p><p>&nbsp;</p><p>介绍完了实现，文中也梳理了一些Delta lake的属性：</p><p>TPS支持：考虑到对象存储的写入性能，可以预料其实transaction per second （TPS）不会特别高，可能也就是每秒个位数的transaction级别。文中也写到了可以通过batch操作来减少TPS，并表示，目前的TPS可以满足绝大部分usecase的需求。支持time travel query 和 rollbacks: 由于保留了全部的log记录，Delta lake的表可以很好地支持time travel查询和rollback操作。支持update, delete, merge等数据操作：理由同上。Schema evolution and enforcement支持：理由同上。</p><p></p><h2>总结</h2><p></p><p></p><p>本期内容，结合DataBricks发表的介绍他们数据湖产品Delta Lake的论文，我们讨论了为什么需要数据湖架构，并学习了Delta Lake的数据湖的一些细节。说一些我自己不成熟的想法：数据湖相比原先的Lambda架构，通过log手段加入了对数据更新的支持，希望通过一套数据管理系统支持所有业务。但从目前的实现来看，实现上还是有很多限制，对于实时性非常高的应用场景，数据湖并不能满足。感谢阅读！</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/mtyRVkfZ9dQNcqlslfJe\">数据库内核杂谈 (二十二) 自动驾驶数据库 - Behavior Modeling</a>\"</p><p><a href=\"https://www.infoq.cn/article/clOUD2iRFTk7NUaPcb3J\">数据库内核杂谈（二十三）- Hologres，支持 Hybrid serving/analytical Processing 的数据引擎</a>\"</p><p><a href=\"https://www.infoq.cn/article/65zC4wl1zoDko1GRvQFS\">数据库内核杂谈（二十四）- Hologres，支持 Hybrid serving/analytical Processing 的数据引擎</a>\"</p><p></p>",
    "publish_time": "2023-01-05 17:52:30",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "为什么谷歌和苹果都要杀死移动Web？资深工程师揭秘大厂从吹捧到扼杀“内幕”",
    "url": "https://www.infoq.cn/article/VUqNUlYvuv6fgpjbjCk0",
    "summary": "<p>&nbsp;</p><p></p><blockquote>有一种普遍性认知：只要可以，大型平台厂商一定希望每个人都只为他们自己的平台编写专有应用程序。但现在的厂商们还做不到这一点，所以Web就天然获得了市场优势。可人们心里的天秤总在摇来晃去，在Web和本机之间游移不定。&nbsp;回顾历史，苹果、谷歌等都为Web的发展努力过，但为什么他们后来都放弃了Web 应用，转而走向本机应用了呢？</blockquote><p></p><p>&nbsp;</p><p>近日，&nbsp;CodePen联合创始人、网页开发者Chris Coyier写了一篇关于不同平台的“本机应用程序”和“Web”之间总是剑拔弩张、相互竞争的<a href=\"https://chriscoyier.net/2023/01/04/what-does-it-look-like-for-the-web-to-lose/\">文章</a>\"。</p><p>&nbsp;</p><p>他在文章中指出了如果在这场竞争中Web最终败下阵来，可能出现的结果：</p><p>&nbsp;</p><p>设计师和开发者们要么重新专注于单一特定平台，要么被迫分散注意力，做出愈发平庸的软件成果。一座座“围墙花园”将拔地而起，各有自家优势。于是用户们深感无力，不管怎么选择都会错过种种精彩。我们都将生活在这些封闭、私有系统的统治之下。如果厂商不喜欢你或者你的应用程序，你就没活路了。虽然他们现在也在这么干，但Web消失将意味着毫无退路。URL属于Web，而非本机应用。URL让搜索引擎成长为一股影响世界的力量。所以当Web消失，那么实用性的全局搜索也将就此消失。</p><p>&nbsp;</p><p>……</p><p>&nbsp;</p><p>但是，Chris 表示不理解为什么苹果和谷歌这样的公司总在强调本机应用要优于Web应用，更不理解为什么就连谷歌/Android也走本机应用路线：</p><p>&nbsp;</p><p></p><blockquote>谷歌其实有理由把Web推向高峰，而且实际表现也算不错。现在Google Play Store已经接纳渐进式Web应用（PWA）了，但却明显将其当成了\"二等公民\"，真的奇怪。</blockquote><p></p><p>&nbsp;</p><p>虽然 Chris 表示理解企业为什么更愿意选择本机、而非Web应用。可反例同样很多，基本一切最大、最好的应用都拥抱了Web——Figma、Slack、Discord、GitHub、Spotify、Netflix等。“这又跟我的认知有所抵触了。”</p><p>&nbsp;</p><p>对此，曾任谷歌 Chrome 工程师、现任微软 Edge 项目经理、<a href=\"https://www.chromium.org/blink/guidelines/api-owners\">Blink API</a>\"创建者<a href=\"https://infrequently.org/about-me/\">Alex Russell</a>\"发布系列帖子对Chris的疑问进行解答，也透露出了一些行业内幕。</p><p>&nbsp;</p><p></p><h2>各家的本机与Web之争，究竟是在争什么？</h2><p></p><p>&nbsp;</p><p></p><h4>苹果</h4><p></p><p>&nbsp;</p><p>根据Alex 的说法，苹果最早是支持 Web的。苹果还是一家小众PC制造商时，它需要用Web技术来打消客户们购买这款价格接近奢侈品的高端电脑的顾虑。虽然文化影响力巨大，但苹果Mac一直没有足够的份额来建立起一个独立于Web之外的、足够庞大的软件生态系统。</p><p>&nbsp;</p><p>从1998年到2012年，Web技术成为一道弥足珍贵的桥梁，帮助开发者跨过技术巨头靠自家专有堆栈建立的护城河。Web跨越了PC和Mac，虽然苹果也在努力推广自己的本机应用构建器，但苹果也很聪明，知道想在市场上卖得好，Mac必须能提供出色的Web应用体验。</p><p>&nbsp;</p><p>之后，iOS出现了。</p><p>&nbsp;</p><p>不少年长的Web开发者都听过这个故事：iOS实际并不是要反Web，乔布斯当初就将其定位为Web优先的操作系统。iOS初亮相时人们的印象也确实如此。直到一年后iOS 2.0的发布，这种印象才逐渐消失。</p><p>&nbsp;</p><p>乔布斯从未明说过（虽然在后来的法庭文件中得到了证实），2007年初代iPhone的iOS 1.0主屏和第一方应用之所以不基于Web，是因为他们没做出来。</p><p>&nbsp;</p><p>苹果内部曾经有过Web版和本机版两套操作系统原型，只是Web版未能最终落地。就在乔布斯在莫斯康展览中心宣布Web是一款“伟大的应用平台”时，Cocoa（苹果为Mac OS X创建的原生面向对象的API）已经成了优先选项。</p><p>&nbsp;</p><p>当时，外部应用程序似乎可以帮助提高该设备的受欢迎程度，乔布斯希望开发人员使用标准 <a href=\"https://www.infoq.cn/article/2007/06/spring-web-flow-terracotta\">Web</a>\"技术来构建应用程序。（<a href=\"https://xie.infoq.cn/article/952804e61fff66c889c7f02fe\">PWA</a>\"，即Progressive Web App 的想法也是乔布斯在 2007 年 iPhone 推出期间首次向世界展示的。）</p><p>&nbsp;</p><p>所以这里对Web的强调同样是“桥梁理论”的延伸。别看现在智能手机无处不在，但在iOS刚发布时没人敢确定这一点。所以，为了降低初代iPhone面临的巨大市场风险，必须通过Web强调其访问丰富内容和应用的能力。</p><p>&nbsp;</p><p>而随着App Store、iOS 2.0乃至2009年iOS 3.0的发布，苹果开始在首选专有平台和开放Web间划分出了功能鸿沟。这道鸿沟至今仍未消失，所以尽管苹果确实拥有强大的浏览器开发能力，但很多人仍然把Safari的优势地位视为一份历史性遗产。</p><p>&nbsp;</p><p>那么，苹果为什么不继续拥抱Web？因为他们从Web平台上挣不着钱。</p><p>&nbsp;</p><p>App Store的巨大成功甚至超出了苹果自己的预期。（App Store 刚推出不久就大获成功，开发者在一个月内就从 App Store获得超过3.6 亿美元的收入。这让乔布斯都大吃一惊，“移动行业从未见过这样的事情”，乔布斯当时在采访中说道。）</p><p>&nbsp;</p><p>而在其站稳脚跟之后，苹果开始全面调整自己的Web战略：市场领导者才不需要什么桥梁，拆了桥挖条更宽更深的护城河才是正事。出于这个理由，苹果在过去十年间对WebKit的投入一直显得犹犹豫豫、畏畏缩缩。</p><p>&nbsp;</p><p>而在刚刚到来的2023年，苹果之所以又对Web旧事重提，是因为看到了Web对于Windows的冲击。同样的事绝不能发生在iOS身上。这样一套开放、可互操作的元平台肯定会削弱苹果赚钱的能力，过去它不受苹果待见，现在就更不可能。</p><p>&nbsp;</p><p></p><h4>谷歌</h4><p></p><p>&nbsp;</p><p>为什么谷歌也在削弱Web在移动设备上的存在感？</p><p>&nbsp;</p><p>要回答这个问题，我们先要了解谷歌是个什么状态。其实跟苹果等其他大型企业一样，谷歌本质上也是一群小公司的集合体，各部门只是碰巧把收入都汇总在“谷歌”这面大旗之下。不同团队间不但没有爱，反而可能充满抵触和仇恨。</p><p>&nbsp;</p><p>就连Android也来自对Sidekick手机开发商Danger的收购。（Danger公司由三名前苹果工程师于2000年创立，其开发的Sidekick手机凭借出色的网络功能和高速即时消息能力赢得了众多美国青少年的喜爱。）</p><p>&nbsp;</p><p>遥想2008年，当时苹果已经推出了iPhone，而谷歌手中的Android系统还在挣扎求存。</p><p>&nbsp;</p><p>那是个奇迹频发的年代：AT&amp;T拿下了在美国独家销售iPhone的渠道，把其他电信企业和手机厂商都吓坏了。如果大家还记得2009年那会大众媒体上的舆论导向，肯定还记得Verizon（美国电信运营商）怎么努力宣传摩托罗拉Droid。那是种绝望、但又无可奈何的最后挣扎。</p><p>&nbsp;</p><p>基于同样的绝望情绪，各方决定放弃自家底层软件堆栈，转而为单一厂商的硬件发布开展联合营销。电信企业不想这么做，但他们不敢不跟进。</p><p>&nbsp;</p><p>把握住这个难得的机会窗口，Android团队开始大展身手。他们开始用笨拙但有效的方式争取单独的办公环境、单独的配套设施，也确实拿到了。你可以讨厌Andy Rubin（被业内称为“安卓之父”，据报道因与女性下属发生不正当关系被举报后离开谷歌），但他确实为Android争取到了独属于自己的生存空间和项目文化。他就像严控自己小国的暴君，他成功了。至此，Android实质上已经脱离了谷歌的掌控。</p><p>&nbsp;</p><p>当然，这种不满是双向的。</p><p>&nbsp;</p><p>Android对谷歌也颇有微词，因为谷歌那边总强调Web会是个理想的解决方案。（谷歌在 2015 年对 PWA 做了定义。当时还在谷歌工作的 Alex 写了一篇文章<a href=\"https://infrequently.org/2015/06/progressive-apps-escaping-tabs-without-losing-our-soul/\">“Progressive Web Apps: Escaping Tabs Without Losing Our Soul”</a>\"对PWA进行详细阐述。）</p><p>&nbsp;</p><p>但Web真的靠谱吗？Web应用可怕的内存用量和极高的无响应频率，经常会把Linux+Java的系统组合拖向崩溃的边缘。所以Android团队产生了一种本能的感觉，虽然把Java开发者团结起来确实困难，但Web开发才是那个陷进去就爬不出来的大坑。从表面上看，他们的判断没错，而且他们也不喜欢这套不归自己完全把控的平台。</p><p>&nbsp;</p><p>在战略层面，Android这边拉起的连横阵营主要依靠“搜索布局加市场份额”。Android非常重视市场份额，而谷歌的短期管理文化意味着只要Android系统能及时把谷歌搜索栏呈现在用户面前，别的生态系统问题都可以往后稍稍。所以，Play应用商店的头顶始终笼罩一层阴云，Android的反Web主张一直在发挥作用。</p><p>&nbsp;</p><p>当然，随着时间推移，Android和Play Store团队的反Web态度开始跟苹果合流，最终奠定了Java/本机才是王道的基本理念。</p><p>&nbsp;</p><p>既然原本的方针没出啥问题，手机出货量和搜索份额都有增长，那谷歌何必还要费劲支持什么Web呢。</p><p>&nbsp;</p><p>经验和贪婪结合起来，成为横亘在移动Web面前的一座大山。</p><p>&nbsp;</p><p>直到2013年，Chrome才正式登陆Android，并在2014年成为默认浏览器选项。同时，Android照搬自 iOS 的“本机至上”原则正继续制造着本机与Web之间的巨大功能/特性差距。</p><p>&nbsp;</p><p>我们可能很难想象在谷歌内部开发PWA、WebAPk、TWA乃至Web Push等项目是有多痛苦，外部世界的Web偏见在Android之内不仅没有减弱，反而愈演愈烈。但PWA和Push等成果还是顺利落地，与Fugu的合作大门也被打开并维持至今。</p><p></p><h4>微软</h4><p></p><p>&nbsp;</p><p>Chris在文章里说到，巨头里对Web应用态度最友善的似乎就是微软了。微软最开始并不像谷歌那样大力支持，但跟进得跟快。为此，我们补充了微软的一些措施（并非 Alex 回答内容）。</p><p>&nbsp;</p><p>2018年，微软<a href=\"https://www.windowscentral.com/microsoft-teams-and-progressive-web-apps-coming-soon-windows-store\">宣布</a>\"，Microsoft Edge 网络浏览器支持PWA，Windows 商店的应用程序，如 Slack 和<a href=\"https://www.windowscentral.com/trello-launches-official-desktop-app-windows-store\">Trello</a>\"，将 PWA、Electron 和通用 Windows 平台 (UWP) 混合使用。2020年，微软和谷歌合作，将PWA推上Play Store，加速其在Android平台上的普及。</p><p>&nbsp;</p><p>谷歌开发出名为Bubblewrap的指令行应用程式，让开发人员只要安装Node.js，无需完整Android SDK，即可将PWA网站打包成Play Store上的Android App。微软则提供并开源PWA开发及发布工具PWABuilder.com。两家合作后，让PWABuilder使用Bubblewrap为底层，并推出新功能。</p><p>&nbsp;</p><p>今年9月，为了弥合 Web 应用程序和本机桌面应用程序之间的差距，微软宣布了 Window Controls Overlay 功能，允许开发人员创建自己的标题栏，而不是强迫他们使用默认标题栏。看得出来，微软现在仍在努力让Web应用跟本机应用平等。</p><p>&nbsp;</p><p>Alex 最后在文章里总结道，Web正在移动设备上节节败退，这也敲响了其作为技术平台的消亡丧钟。</p><p>&nbsp;</p><p></p><blockquote>在这样的背景之下，前端领域的动向甚至已经无关紧要，因为其最终只会陷入僵化。Web平台不会突然消失，它只是在逐渐失去人们的关注和投入。&nbsp;而Web开发者们也未做反应——没有还击、没有斗争，人们选择屈服于这股大势。&nbsp;如今，全球大部分新增用户终端计算设备是智能手机，其中80%以上是配置较低的Android机。当然，即使Android是完美的，也不足了扭转时局、挽救Web。为什么？因为掏得起高价的用户都买iPhone，技术行业必然会跟着钱走。&nbsp;只要苹果还能继续在富裕地区（美国、英国、日本等市场）依靠垄断地位扭曲立法决策、阻止真正的浏览器竞争，Web就永远无法恢复活力。&nbsp;所以，我们才应该支持 Open Web Advocacy，这将是决定Web命运的一战。</blockquote><p></p><p>&nbsp;</p><p></p><h2>结束语</h2><p></p><p>&nbsp;</p><p>在Hacker News上，有人对Alex 的帖子表示质疑，尤其是乔布斯对Web态度上，也有人认真讨论了PWA。</p><p>&nbsp;</p><p>开发者“ryanyl”提出，有没有真正出色的移动 PWA 示例？“我发现，公司的移动网站体验总是比应用程序（例如 YouTube 或 Spotify）差很多，我不确定是我缺乏关注，他们有意将用户推向应用程序，还是一直如此。”然后有开发者为其提供了星巴克的案例。</p><p>&nbsp;</p><p>一定程度上，只喊口号并不能挽救Web应用，找到真正可以利用Web优势的场景、并有效形成商业闭环才能让其更好发展。</p><p>&nbsp;</p><p>&nbsp;</p><p>参考链接：</p><p>&nbsp;</p><p><a href=\"https://chriscoyier.net/2023/01/04/what-does-it-look-like-for-the-web-to-lose/\">https://chriscoyier.net/2023/01/04/what-does-it-look-like-for-the-web-to-lose/</a>\"</p><p><a href=\"https://toot.cafe/@slightlyoff/109632248664696707\">https://toot.cafe/@slightlyoff/109632248664696707</a>\"</p><p><a href=\"https://www.macrumors.com/2018/07/25/steve-jobs-app-store-interview/\">https://www.macrumors.com/2018/07/25/steve-jobs-app-store-interview/</a>\"</p><p><a href=\"https://www.windowscentral.com/what-are-progressive-web-apps-video\">https://www.windowscentral.com/what-are-progressive-web-apps-video</a>\"</p><p><a href=\"https://www.ithome.com.tw/news/138814\">https://www.ithome.com.tw/news/138814</a>\"</p><p><a href=\"https://news.ycombinator.com/item?id=34252196\">https://news.ycombinator.com/item?id=34252196</a>\"</p>",
    "publish_time": "2023-01-05 18:10:48",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "见过技术圈过去一整年的热闹和纷争，2023年我们该如何选择发展路线？",
    "url": "https://www.infoq.cn/article/OZrxSjxiFWakJekQyl8g",
    "summary": "<p></p><h2>2023 年，我们是否要学习一门新的编程语言？</h2><p></p><p></p><p>2022 年，Rust 成了当之无愧的“网红”编程语言，有好几个项目因为选择使用 Rust 因而备受关注。</p><p></p><p>去年 6 月份，GitHub 官宣“报废”Atom 编辑器，但 Atom 创始成员团队表示已经选择用 Rust 语言重新编写一个编辑器，他们的目标是从提供最基本的功能开始，并能与Atom编辑器的特性相媲美。10 月份，Webpack 创始人推出了新的打包工具 Turbopack，选择了用 Rust 编写，比 Webpack 的速度快了 700 倍。去年，还有一家数据库初创公司，甚至选择了完全删除已经完成的 27 万行 C++ 代码库，并用 Rust 语言从头开始重写了一遍系统…</p><p></p><p>Rust 1.0 于 2015 年发布，从那时起，我们就一起见证了 Rust 从一种用于少数几个著名项目的小型语言发展为几乎所有大型科技公司的主流语言。在亚马逊，Rust 已经成为大规模构建基础设施的关键。夸 Rust 语言的方式至少有 3000 种，但是去年 2 月份亚马逊采用了一个另类的角度，他们表示 Rust 在云计算的环保和可持续发展方面，能源效率比 Java 高 50% ， 比 Python 高 98%！</p><p></p><p>Rust 具有这么多好处，也应用到了前端、数据库、云服务等各种场景中，并成功地在 2022 年进入到了 Linux 操作系统的主版本中（Linux6.1）。那新的一年中，我们是否应该跟随潮流趋势，投入精力学习一门新的编程语言？另外，很多技术都会有自然的生命周期，Rust 是否会和 C++、Java 一样生命长青，不必让我们担忧几年之后就过时了呢？</p><p></p><p></p><h2>2023 年，微服务的命运会改变吗？</h2><p></p><p></p><p>2022 年，人人都在讨论微服务。</p><p></p><p>过去几年，无数的中小团队在微服务上陷入了挣扎，很多公司在放弃微服务，其中包括一些大型企业，比如 2020 年，Uber 的一支团队放弃了微服务，转而使用宏服务。去年，马斯克接手 Twitter 后也开始批判微服务被滥用了，GitHub 的前 CTO 甚至表示全面微服务是“最大的技术错误”…</p><p></p><p>现在的架构越来越复杂，我们无法回避其中的复杂因素，但这些是微服务造成的吗？你还看好微服务吗？在未来发展中，微服务的命运会改变吗？我们需要随之做好准备吗？</p><p></p><p></p><h2>2023，更多的技术选择</h2><p></p><p></p><p>在过去的这一年里，Serverless 关键技术得到了重大发展，冷启动时间已经可以降低 90%；在过去的这一年里，如果你不懂 GraphQL，就算你是马斯克那样的亿万富翁，照样会被人嘲笑；在这一年里，“降本增效”成了年度大主题，Ruby on Rails 之父都开始倡导大家“下云”以节省成本；在过去这一年里，就算是企业中层管理人员，他们日子也不好过，我们看到了很多老板对中层发火、裁员、降薪的新闻…</p><p></p><p>2022 的故事太多了，在故事背后，是“新兴技术”与“成熟技术”的争执，也是各技术领域趋势变化的具现。那在未来的 2023 年，我们该聚焦于什么技术方向、如何补充自己的技能？在这样的经济周期中，我们又该如何审视自己的职业发展和定位呢？</p><p></p><p>2022 年底，InfoQ 编辑部联结了众多技术专家，解读了操作系统、数据库、AI、大数据、云原生、架构、大前端、编程语言、开源安全、数字化十大方向，为你呈现一个完整的关键技术动态知识网络，捕捉技术世界的脉搏。</p><p></p><p>同时，InfoQ 年度直播周于 2023 年 1 月 3 日开始，我们一起展望测试开发工程师、后端研发工程师、架构师、技术管理、数据工程师、前端研发工程师的未来发展，InfoQ 将持续输出精彩内容！</p><p></p><p>你可以在 InfoQ 视频号预约直播，并在 InfoQ 官网阅读后续的直播整理。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/30/3021acdabd42b8dff37df04728b539fc.png\" /></p><p></p><p></p><h2>欢迎参与直播讨论</h2><p></p><p></p><p>为了更好服务读者，更深入地探讨大家感兴趣的话题，现面向全体 InfoQ 粉丝征集问题，想问什么你自己选！就前端、后端、测试、数据开发工程师、架构师、技术管理者等方面，直播时嘉宾将会与大家进行深入交流。</p><p></p><h4>参加方式</h4><p></p><p></p><p>在本文下带技术标签回复问题到对应楼层</p><p></p><p></p><blockquote>#后端&nbsp;明年&nbsp;Rust&nbsp;语言的开发岗位会不会大幅增加？#架构&nbsp;Serverless&nbsp;将克服无状态函数的使用问题，成为基础设施架构的标配？</blockquote><p></p><p></p><p></p><h4>征集时间</h4><p></p><p>即日起至 1 月 11 日。</p>",
    "publish_time": "2023-01-05 18:53:20",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "摆脱“不确定”带来的焦虑，2023年巅峰相见｜InfoQ合作伙伴年度盛典",
    "url": "https://www.infoq.cn/article/TNacyGqJgLZZgIj5MDAl",
    "summary": "<p>2023年1月5日，InfoQ合作伙伴年度盛典正式召开。本届盛典以“微光成炬·破晓而出”为主题，共分为“Memory / 回溯”、“Manner / 瞻望”、“Moment / 灵感”三个环节，与生态伙伴们一起探讨了科技、营销以及个人未来一年可能的前进方向，让大家在新的一年摆脱“不确定”带来的焦虑，携手巅峰相见。</p><p></p><h2>Memory / 回溯：科技热词背后的未来世界</h2><p></p><p>2022年，我们被太多的技术热词所围绕，也让很多企业和开发者对未来的科技世界越来越迷茫。PingCAP联合创始人、CTO黄东旭在分享中提到了三个关键词“云原生”、“AIGC”、“全球化”，既是回溯，也是展望。</p><p><img src=\"https://static001.geekbang.org/infoq/e8/e8f64f3910daad3817e7268afb8f28db.jpeg\" /></p><p>PingCAP联合创始人、CTO黄东旭</p><p>&nbsp;</p><p>第一个关键词是云原生。黄东旭表示云原生已经开始进入下一个阶段。今年在美国看到的情况是几乎所有公司都在做云/云原生方向的转型，这并不是需要讨论的事情，而是已经完备的状态。</p><p>&nbsp;</p><p>展望云原生的下一个阶段，其本身会越来越自洽，并会逐渐形成全栈的云原生，这种全栈的云原生将会催生Serverless的发展。Serverless的本质很简单，依旧是帮助开发者更进一步地隐藏基础设施的复杂性。总结来看，未来几乎所有在云上的软件都会形成一个自洽的Serverless生态。</p><p>&nbsp;</p><p>第二个关键词是AIGC。黄东旭表示：“在ChatGPT出来之前，我一直认为AI存在过度炒作的成分，但ChatGPT是真的让我感到惊喜，让我体会到AI的价值，这不是直接取代工程师，而是提升工程师的生产效率。而这类工具与企业内部现有业务的结合将会是接下来非常值得关注的趋势。”</p><p>&nbsp;</p><p>第三个关键词是全球化。过去一年，我们已经看到中国的很多技术、项目、开发者在全球产生了一定影响力，我也看到了广阔的全球市场在向中国企业招手。未来，越来越多来自中国的技术会逐渐走向全球，构建属于自己的全球影响力。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/51/5147d959d1cf0c2c8e2e652a0b47ebd4.jpeg\" /></p><p>极客邦科技创始人&amp;CEO霍太稳（Kevin）</p><p>&nbsp;</p><p>极客邦科技创始人&amp;CEO霍太稳（Kevin）发表了新年致辞，表示：</p><p>&nbsp;</p><p></p><blockquote>过去三年，大家过得都不容易。2020 年是第一年，把大家直接打蒙了，没有任何的准备，疫情就来到我们面前。我现在很清晰地记得，在2020 年初，我告诉 InfoQ 极客传媒的小伙伴，说咱们必须减员，很痛苦的一个决定，最后很多相熟的小伙伴离开极客邦科技。挺过 2020 年，2021 年算是有了转机，还算比较正常地就走过来了，长舒了一口气。然后在2022 年初，摩拳擦掌，要大干一番，该招人的招人，该投资源的投资源，结果 4 月份的上海封城，这么一个黑天鹅事件，又把很多企业打回原型。&nbsp;今天是 2023 年 1 月 5 日，疫情好像已经过去，一个崭新的未来好像已经展现在我们面前。但我想说的是，我们依然不能过于乐观，在前进的路上，我们依然需要小心甚微，战战兢兢，如履薄冰。任何事情都有一个过程，过去的三年我们习惯了疫情的生活，那么从这个习惯再回到从前，也需要一个过程。就像比尔盖茨说的那句话一样，人们总是高估了未来一到两年的变化，而低估了未来十年的变革。&nbsp;我希望我们每一个合作伙伴，在坚信事情正在好转的同时，也一定要小心不要倒在黎明前的黑暗中。设定 23 年的目标还是要务实，手里的预算还是要看紧。虽然您的预算看紧，对我们 InfoQ 极客传媒来说不一定是个好事情，但是我们团队也深切理解“唇亡齿寒”的道理。只有我们每个合作伙伴都活着，我们才有可能联手创造一个更好的未来。&nbsp;在此，我也和大家分享下我和极客邦科技 23 年工作重点，也算是我对自己过往三年的一个总结，和您共勉。OKR 第一条是回到经营的本质，给业务要利润。一路狂奔要增长的时代已经过去，我们回到健康的持续的增长上来，这也是保证极客邦科技自己能够活下去的关键。OKR 第二条是将2023 年定位为内容产品年，目的是持续夯实基础，坚持以客户为中心，基于客户的实际场景优化迭代我们的内容产品。OKR 第三条是数据基础设施建设，我们自己是做数字人才发展的，为有数字化转型需求的企业提供服务的，我们自己先要走在数字化转型的路上，重视数据，并给数据要价值，要产值，才能更好地为客户服务好。&nbsp;最后，我以 InfoQ 极客传媒从成立第一天起，就对客户的一个承诺作为结尾：请大家放心和 InfoQ 极客传媒合作，在合同规定的范围内，我们服务到您满意为止，如果没有达到要求，则继续免费服务。这儿有一个我的微信号，如有对我们服务不满意的地方，随时联系我，我来帮您解决。</blockquote><p></p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/21/213cd6e88bc2074c61cb15652f1e08de.png\" /></p><p></p><p>在盛典现场，霍太稳颁发了2022 年度数字化技术领军企业以及2022年度科技产业化推动者奖项。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/74/7484d6ecf91b8664600c97316d0b883e.jpeg\" /></p><p></p><p>&nbsp;</p><p>2022 年度数字化技术领军企业获奖代表顺丰科技市场生态负责人冯杨表示，作为国内最大的物流公司，顺丰科技的数字化转型历程共分为三个阶段：全要素数字化、全链路数字化以及全场景数字化。在这个过程中，顺丰科技不仅满足内部的业务诉求，还需要满足客户侧的业务诉求，帮助物流领域的众多客户逐步实现数字化转型。未来，顺丰科技将继续夯实技术实力，并继续更好地服务客户。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/09/09067bd948e1f2462c46bc595a971d50.jpeg\" /></p><p></p><p>&nbsp;2022年度科技产业化推动者的获奖代表——允度软件CEO、TGO 鲲鹏会上海负责人陈冲表示，自2018年加入TGO鲲鹏会，在这里收获了很多，非常感谢这个组织，同时也非常荣幸可以获得这个奖项。</p><p></p><h2>Manner / 瞻望：未来一年的大方向</h2><p></p><p>2023年，我们再次开启频繁的面对面交流，我们有了更多机会走到线下，面对面去发现，去摸索。过去三年，这不可能；未来三年，这将成为常态。浙江商人包机去欧洲，就是一个明确的信号。企业的探索方向，决定了“打工人”的工作方向，我们相信，这一切都将酝酿出疫情三年来最大的行业变革 —— 数字经济高速发展，虚实融合初步完成。我们相信，这可能是未来几年的创新源泉。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/6c/6ce708e1502406c4e1ddf6ab1d9ff6c2.jpeg\" /></p><p>极客邦科技事业合伙人、InfoQ 极客传媒总经理汪丹</p><p>&nbsp;</p><p>极客邦科技事业合伙人、InfoQ 极客传媒总经理汪丹表示，在2023年，我们不仅关注早期技术的创新，也将关注成熟技术在千行百业的落地应用。未来一年，我们将继续按照数字人才发展粮仓模型从多个视角为用户带来真正有价值的内容，这将通过InfoQ的内容产品、QCon、ArchSummit、GMTC、GTLC等形式向大家呈现。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/67/67aa5a571f0fe0dc45165f03d89cbcd7.jpeg\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/e1/e15b088aed8c44b912000038bdf33dcb.jpeg\" /></p><p></p><p>面向2023年，我们将为客户提供六大解决方案，解决企业品牌建设、传统企业数字化品牌升级、产品影响力提升、开发者生态建设、技术雇主品牌建设以及年度整合营销方面的问题，同时感谢所有合作伙伴在2022年对InfoQ极客传媒的支持。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/b4/b4217d900b8a74294d6980458c75f6ab.jpeg\" /></p><p>InfoQ总编王一鹏</p><p>&nbsp;</p><p>InfoQ总编王一鹏在展望中表示，2023年，我们将继续通过大量的媒体文章和大家分享我们所关注的内容方向，但这是远远不够的，我们还将通过更多样的形式和渠道与大家见面，比如专注SaaS类型产品评测的《InfoQ测评室》、致力于将新的产品和技术发布第一时间解读给用户的《InfoQ技术解读视频》栏目以及前段时间刚刚结束的中国技术力量榜单评选。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/02/02eef61b5a6722e3b6d605981cb23d52.jpeg\" /></p><p></p><p>此外，我们也将通过报告的形式为大家描绘数字化、金融、制造等领域的发展进程，云计算、大数据等热门技术的发展，架构、人工智能等领域的生态图谱。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/47/478183da3bcb97913a79b2371fd44fba.jpeg\" /></p><p>在该环节，InfoQ极客传媒颁布了2022 年度最具影响力技术领航人、2022 年度科技向善先锋奖以及2022 年度最佳生态建设奖。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/91/91b5c40a25b7f408276b1c4597ec3f7a.jpeg\" /></p><p></p><p>2022 年度科技向善先锋奖的获奖代表金蝶中国苍穹平台市场营销负责人宗慧娟表示，金蝶在取得长足发展的同时以感恩的心回馈社会，与福州市相关机构合作开发了农民工工资监管平台，累计发放工资8亿元人民币。金蝶让技术更有温度，保障了农民工群体的老有所得。未来一年，金蝶将继续为提升企业的数字化能力而努力，助力更多企业吹响数字化转型的号角，新的一年希望和InfoQ携手与共，推进科技向善。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/3e/3ef23661e027f9fb88c747761f2fdb74.jpeg\" /></p><p>&nbsp;</p><p>亚马逊云科技资深开发者运营专家郭悦表示在感言中提到，科技向善应该是每一个公司的行为准则，也是亚马逊云科技长期践行的准则。亚马逊云科技为此投入了大量资金和人力，比如开发了与碳足迹排放管理相关的工具，通过云计算、Serverless等技术等问题解决企业在可持续发展过程中存在的问题，并让技术回归社会价值，为社会带来了老年人远程医疗诊疗、登山人员的安全、遗失宠物的查找等解决方案，真正将科技应用到实际场景中。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/22/22e1690d4fbfa3d9d460bba999d76b67.jpeg\" /></p><p></p><p>2022 年度最佳生态建设奖的获奖代表人瑞人才华北大区负责人陈娟（Meggie ）表示过去一年选择与InfoQ合作是非常正确的决定，并希望在接下来一年继续与InfoQ携手走向更美好的未来。</p><p></p><h2>Moment / 灵感：跨界让灵感迸发</h2><p></p><p>困，则变！2022年，很多品牌热衷于放飞思绪、大开脑洞，与不同的文化、体系、产品相互碰撞。中国邮政跨界开卖咖啡、喜茶 x 藤原浩跨界联名、瑞幸咖啡×椰树椰汁跨界联名、茅台上线冰淇淋… 谁又说得好科技企业的下一个跨界对象会是谁呢？科技企业为什么不能从运动项目、传统文化中汲取灵感呢？</p><p><img src=\"https://static001.infoq.cn/resource/image/c6/fc/c64127e998ba45209f7d04656ab106fc.jpg\" /></p><p>极客邦科技董秘王智鹏</p><p></p><p>极客邦科技董秘王智鹏在《培养一个运动爱好：如何入门滑雪？》的分享中提到了滑雪中的三大心流要素，分别是掌控感，明确的目标，即时的反馈、多变的奖励，而尽快进入到滑雪的心流状态就需要集齐上述提到的三大心流要素，这反推到我们的很多工作中亦可复用。</p><p>&nbsp;</p><p>读史明智，知古鉴今。最近几年，我们越来越倾向于从中国传统文化中汲取营养，茶文化便是其中之一。其历史最早可追溯到公元前2700年之前，当时茶叶被当作一种草药使用，而茶叶被正式当作饮品大约在公元前59年。鲲鹏会32组的组长卢东明在《从茶道看商道》的分享中提到在创业的过程中体会到了茶带来的商业文化，在品茶中形成交流，形成礼节，形成了解，形成信任，形成共赢，这其中个体与个体之间的“化学反应”便是商道的体现之一。从茶道中慢慢了解一个人，从一杯杯茶中交换彼此的世界观和人生观，从茶的文化中寻找启发点，这或许就是传统文化的魅力之一。</p><p>&nbsp;</p><p>盛典临近尾声，InfoQ 主编赵钰莹、InfoQ企业服务运营总监Jessie以及InfoQ销售总监Summer分别了颁发了2022 年度杰出开源运营团队、2022 年度最佳合作伙伴奖、2022 年度新锐技术品牌奖以及2022 年度最具锋芒营销团队。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/5c/5c6de8b0a2e29aa6f20ba4df485006bc.jpeg\" /></p><p></p><p>2022 年度杰出开源运营团队获奖代表PingCAP 开发者关系负责人刘辰也分享了过去一年与社区生态伙伴一起将TiDB落地到更多业务场景的故事。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ca/cab0171b16cffb19082fd719edaaac93.jpeg\" /></p><p></p><p>2022 年度最佳合作伙伴奖的获奖代表艾比森刑剑也对过去一年与InfoQ的合作过程进行了简单回顾并表达了自己的认可。</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/fe/fea1df932c0c901ad5cf1658d9a702d5.jpeg\" /></p><p></p><p>2022 年度新锐技术品牌奖的获奖代表天谋科技运营负责人秦楚晴表示可用、好用、管用的软件让其可以发挥更大的社会价值。未来一年，天谋科技将继续收集客户的实际诉求，并将其推进到产品研发中，同时坚持生态建设，与合作伙伴共赢。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/0a/0a2cf2312cb90a0b8036894d2cfe1070.jpeg\" /></p><p></p><p>在颁奖典礼最后，嘉宾们共同完成了由智源研究院旗下AIGC创作平台FlagStudio生成的拼图，AI已经给我们带来了太多惊喜，由此开启的未来会充满更多惊喜，InfoQ将携手生态伙伴共同奔赴2023年的战场！</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/e5/e5563869cf46a6c9a31f3dd76d82001a.png\" /></p><p></p><p>守得云开见月明，我们相信并祝愿所有伙伴 2022 年的沉淀就像一束束微光，终将在 2023 年汇聚成光芒！</p><p>&nbsp;</p><p>最后，特别感谢&nbsp;InfoQ的老朋友、本届盛典的品牌挚友——火山引擎开发者社区以及金山云对本次活动的大力支持。</p><p>&nbsp;</p><p>火山引擎开发者社区是火山引擎的 toD 社区，致力于链接火山引擎和广大开发者，为大家提供前沿技术内容和丰富的技术活动，打造更好的开发者文化和氛围。</p><p>&nbsp;</p><p>金山云创立于2012年，于2020年5月在美国纳斯达克上市，并在2022年12月以介绍形式于香港完成双重主要上市（股票代码：KC.NASDAQ；3896.HK），业务范围遍及全球多个国家和地区。依托金山集团30多年的企业级服务经验，金山云坚持技术立业，逐步构建了完备的云计算基础架构和运营体系。通过与云计算、大数据、边缘计算、AR/VR等前沿技术有机结合，在所深耕的行业提供超过150种解决方案，已广泛用于互联网、金融、医疗、公共服务等领域，为515+头部客户提供高品质的云服务。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/70/700d9bda9f74403bbddef6566d41e3e9.jpeg\" /></p><p></p><p>&nbsp;</p>",
    "publish_time": "2023-01-05 18:59:07",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "传奇程序员用“考古”方式剖析微服务利弊：我们都被骗了？",
    "url": "https://www.infoq.cn/article/NL1BeEg60rX4tpvd3hmt",
    "summary": "<p></p><p></p><p></p><blockquote>忘记历史之人，注定将重蹈覆辙。</blockquote><p></p><p></p><p>最近，关于微服务的讨论又多了起来，包括马斯克、<a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651147301&amp;idx=1&amp;sn=0edfc4d02a6006d7718a075fe2eac280&amp;scene=21#wechat_redirect\">GitHub 前 CTO</a>\" 都加入了批判微服务的阵营。昨天，传奇程序员 Ted Neward 也在他博客上发了一篇文章，作为一位 IT 行业的“老年人”，他用溯源的方式，挑选文献进行了“考古”，以此分析微服务想解决的问题，以及由此带来的利弊。</p><p></p><p>Ted Neward 在 IT 行业工作了 30 多年，在这期间他多数时间都在担任初创企业的架构师或 CTO。同时他还在各种技术会议上发表主题演讲，撰写了很多书籍（下图为他撰写的部分书籍）和文章。多年来，他积累了至少 10 种编程语言相关的应用知识。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/56/56c9a615316f27c78200f500a4eab179.png\" /></p><p></p><p>由于成就斐然，他从 2015 年开始就接受华盛顿大学信息学院的邀请，任职客座教授。但他更为传奇的地方是没有计算机学位，“事实上，我认为我的文科学位（国际关系）比我见过的任何计算机科学学位都更适合我从事开发和编程的职业。”</p><p></p><p>Ted Neward 在这篇文章中认为，微服务旨在解决两个技术问题：模块化（关注点分离、隐藏实现、文档接口等）和可扩展性（能够为特定模块增加计算、内存和 IO 的数量）。</p><p></p><p>第一个问题，模块化，可以在语言层面解决。通过“考古”计算机科学里开创性的论文，他认为使用“模块（Modules）”可以达到微服务想要的效果，这就是这篇博文的重点。第二个问题，即可伸缩性，解决可伸缩性的同时，也带来了一些“分布式”上的难题，然而这几十年来，我们得到的经验教训是“分布式系统很难被「做对」”。这听起来像是在制造新问题，然后再花时间和金钱来修复它。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/44/44f5cd0a405054a4fa2f49ea8c50e3a1.png\" /></p><p></p><p>Ted Neward 分析角度与众不同，也因此在一天之内给 Hacker News 带来了 500 多条评论。有网友回忆说，“拿 Twitter 举例来说，他们似乎是在 2014 年采用了微服务。2013 年的时候，他们应该是使用单体架构，当时的 MAU 达到了 2 亿的水平。而如今大多数公司永远也达不到 2013 年 Twitter 的规模。”</p><p></p><p>这让人感慨如果在 IT 行业拥有足够长的工作经历、了解一些历史知识，也会带来一些意想不到的收获，网友纷纷评论：</p><p></p><p>“现在的团队很‘年轻’，他们渴望尝试和学习使用微服务。”</p><p></p><p>“这是我不喜欢在缺乏‘老人’的团队中工作的原因之一。年轻的开发者仍然会犯很多老开发者已经犯过或见过的错误。年轻人认为‘老人’们行动缓慢，但他们也创造了稳定性和控制力。在初创企业中，由年轻人组成的团队能够快速行动和交付。不过，企业通常得到的是一座由意大利面条建造的高塔，他们就用这样的代码为实际用户提供服务。”</p><p></p><p>“我作为团队中的老家伙（也比经理年长）的经历是，年轻人只想尝试新技术，喜欢推动企业采用新技术，无论老人的观点如何，而年轻的经理也对老人的疑心很大。”</p><p></p><p>…</p><p></p><h3>“当你谈论微服务时，你谈论的可能是模块”原文翻译：</h3><p></p><p></p><p>人人都在讨论微服务，有这个必要吗？</p><p></p><p>架构变迁就如同一股流行之风，总有人提出新想法，迫切希望改进现有架构的行业，在没搞清背景和细微差别的情况下迅速把它们推向主流。然后一夜之间，这东西就火起来了。微服务无疑就是目前最火的议题，所以咱们就好好说道说道这背后的根源。</p><p></p><p></p><h4>据说用上微服务之后，我们就能…</h4><p></p><p></p><p>…获得一大堆收益！</p><p></p><p>“可扩展性”：“可以把代码拆分成更小的部分，独立加以开发、测试、部署和更新。”“更专注”：“……让开发者专注于解决业务问题和业务逻辑。”“可用性”：“后端数据必须始终可用于多种设备……”“简单性”：“简化了大型企业级应用程序的开发流程。”“响应性”：“……让分布式应用程序通过扩展，应对不断变化的事务负载……”“可靠性”：“复制的服务器组能在发生故障时继续运行，避免引发单点故障。即使发生故障，所运行的应用程序也能恢复至良好状态。”</p><p></p><p>但我想提醒大家，这六条好处其实各有来历：两条来自微服务文献 （博文、论文之类）、两条来自 20 年前的 EJB 文献，还有两条来自四十多年前的老技术 Oracle Tuxedo。怎么样，各位能分得清楚吗？</p><p></p><p>总之，技术行业其实是在一遍又一遍地重复那些炒作说辞。</p><p></p><p></p><blockquote>“忘记历史之人，注定将重蹈覆辙。”George Santanyana，《理性生活》（1905 年）</blockquote><p></p><p></p><p>说起微服务的炒作宣传，咱们看看某篇企业博文给出的十条总结：</p><p></p><p>有助于推广大数据最佳实践。微服务天然适应数据管道架构，符合大数据的收集、摄取、处理和交付方式。数据管道中的各个步骤，都会以微服务的形式处理一项小任务。相对更易构建和维护。由于用途单一，所以微服务可由较小团队进行构建和维护。各团队可以跨职能组建，同时专注于解决方案中的特定微服务子集。有助于提高代码质量。将整体解决方案模块化成一个个离散组件，有助于应用开发团队每次只关注一小部分工作，从而简化编码和测试流程。简化跨团队协调过程。与以往涉及重量级进程间通信协议的传统面向服务架构（SOA）不同，微服务通过事件流方法降低了集成难度。可支持实时处理。微服务架构的核心是发布 - 订阅框架，可支持实时数据处理以提供即时输出与洞察。能适应快速增长。微服务让代码和数据能够复用模块化架构，降低多数据驱动型用例和解决方案的部署难度，从而快速增加业务价值。能提升产出规模。数据集往往以不同方式呈现给不同受众，微服务则简化了为不同最终用户提取数据的方式。易于评估应用程序生命周期中的更新。各种高级分析环境，包括用于机器学习的分析环境，需要一些方法来根据新创建的模型评估现有计算模型。微服务架构中的 A-B 及多变量测试，让用户能够轻松验证更新后的模型。可实现规模伸缩。这种可伸缩性不仅能提供更高容量，也能轻松发现扩展瓶颈，立足微服务层级解决这些瓶颈。有大量流行工具可供选****择。大数据及开源社区的各种技术，都能在微服务架构中运行良好。Apache Hadoop、Apache Spark、NoSQL 数据库和各种流分析工具都跟微服务很搭调。</p><p></p><p>话说得倒是漂亮，但事实真是如此吗？下面咱们就一条条来分析：</p><p></p><p>有助于推广大数据最佳实践。从 70 年代以来，管道加过滤器架构就一直在软件领域发挥作用，当时的各类 Unix 系统提出了以下原则：每个程序只做好一件事。如果需要完成新任务，别添加新“功能”来提高旧程序的复杂度，而应重新构建新程序。将每个程序的输出，都看作另一程序的输入。不要用无关信息混淆输出。严格避免使用列式或二进制输入格式。不要总想着使用交互式输入。相对更易构建和维护。人家 Unix 早就实现过了。有助于提高代码质量。如果说每次只关注一小部分有助于提高代码质量，那 Unix 之前也实现过了。简化跨团队协调过程。这话说得就很可笑，什么“面向服务架构（SOA）……往往涉及重量级进程间通信协议”——这说的是 JSON over HTTP 呗？或者说，这是指一切 SOA 都需要 SOAP、WSDL、XML Schema 和 WS-* 的完整规范集？可微服务并没有用任何方式阻止使用这些“重量级”协议，某些微服务甚至建议使用 gRPC——这是一种跟 IIOP 很相似的二进制协议，而后者来自 CORBA，正是各种“重量级”协议的前身。可支持实时处理。实时处理哪里是什么新鲜事物了。之前就有很多系统在使用发布 - 订阅或者“事件总线”模型来实现，根本就不需要劳微服务的大驾。能适应快速增长。“复用模块化架构”……大家还记得有多少东西在以可复用为卖点吗？编程语言是一种（OOP、函数式语言、过程语言等），库和框架也是。总有一天，大家会看透这种宣传伎俩，不再理会什么“可复用性”。能提升产出规模。“数据集往往以不同方式呈现给不同受众”，SAP Crystal Reports 的主页上就写着差不多的话，这哪是微服务的原创？易于评估应用程序生命周期中的更新。机器学习和高级分析环境需要“根据新创建的模型评估现有计算模型”……净是空话，一点实际的都没有。可实现规模伸缩。那么问题来了——EJB、事务性中间件（比如 Tuxedo）和大型机，谁又不能实现规模伸缩了？有大量流行工具可供选择。每次技术炒作进入“没活可整”的尴尬期后，都喜欢拿工具选项说事。当初的 CASE 是如此，后来的 UML 也是如此，没什么新鲜的。</p><p></p><p>而且敏锐的读者朋友可能已经注意到，以上这些观点有差不多一半都可以总结成：创建并维护更小、相互独立的代码和数据“块”，通过彼此版本化，让它们使用共通的输入和输出以实现进一步系统集成。</p><p></p><p></p><h4>微服务的实质，原来是……</h4><p></p><p></p><p>模块。</p><p></p><p>没错，这里说的就是低级“模块”。模块的概念从 1970 年代起就是大部分编程语言的核心，只是早期语言还不这么说。CLR（C#、F#、Visual Basic 等）中将其称为“程序集”，JVM（Java、Kotlin、Clojure、Scala、Groovy 等）称其为“JAR”或“包”，各种操作系统的动态链接库里也有模块的身影（Windows 上叫 DLL，Unix 中叫 so 或者 a，MacOS 则是 /Library 目录下的 Frameworks）。它们的内部格式有异，但基本目标相同：实现一个独立构建、管理、版本控制和部署的代码单元，以供重复使用。</p><p></p><p>咱们来看看计算机科学论文中是怎么给模块下定义的：</p><p></p><p></p><blockquote>“项目工作的明确定义与细分，保障了系统的模块化。每个任务都将形成一个独立的、不同于其他的程序模块。在实现时，每个模块及其输入 / 输出都经过明确定义，与其他系统的预期接口不会混淆。在检查开始前，先对各个任务进行同步以避免调度问题。最终，系统会以模块化形式进行维护；系统错误和缺陷可被追溯至特定的系统模块，从而限制错误搜索的具体范围。”</blockquote><p></p><p></p><p>上述论断来自 David Parnas 的开创性论文《On the Criteria To Be Used in Decomposing Systems into Modules》（<a href=\"https://www.win.tue.nl/~wstomv/edu/2ip30/references/criteria_for_modularization.pdf%EF%BC%89%EF%BC%8C%E8%BF%99%E5%8F%AF%E6%98%AF%E7%AF%87\">https://www.win.tue.nl/~wstomv/edu/2ip30/references/criteria_for_modularization.pdf），这可是篇</a>\" 50 多年前的 1971 年写成的文章。其中提出的明确定义出“独立的、不同于其他的程序模块”已经涵盖了半数所谓微服务优势，并证明咱们 50 年前就在这么做了。</p><p></p><p>所以，何必为了微服务而过分激动？毕竟我们想要的微服务优势，其实跟微服务、服务甚至是分布式系统都没啥关系。</p><p></p><p></p><h4>探究微服务的核心，我们该关注的是……</h4><p></p><p></p><p>组织清晰度。</p><p></p><p>亚马逊一早就在公开讨论微服务概念，但却没法像独立开发团队那样真正把这套架构用起来。理由很简单，大厂面对的阻力更多——DBA 团队得做相应的架构变更，QA 需要构建新的 bug 测试，基础设施要额外采购服务器，UX 团队则得为演示创建新原型。</p><p></p><p>这些元素相加，导致架构变更难以推进。而这其实是一个个普通 IT 团队中各类职能的缩影（涵盖分析、开发、设计、测试、数据管理、部署、管控等）。换言之，要想拥抱微服务架构，那现有团队要么想办法集中起各种不同的技能组合，要么是要求每位成员都具备完整的技能集（也就是所谓「全栈开发者」），这明显会大大增加招聘难度。另外，大家还得为生产中断负责，成员们得承担起随叫随到的责任，这些新要求肯定会在薪酬和法律条款上有所体现。只有解决掉所有这些问题，各个团队才能独立构建工件，让打字速度成为开发效率的唯一瓶颈……</p><p></p><p>但这可能吗？当然不可能。</p><p></p><p></p><h4>在追求微服务的过程中，我们常常陷入……</h4><p></p><p></p><p>分布式计算谬误。</p><p></p><p>分布式计算谬误最早由 Peter Deutsch 在 80 年代的 Sun 公司内部演讲中提出，随后又出现在 1994 年由 Ann Wolrath 和 Jim Waldo 撰写的开创性论文《A Note on Distributed Computing》（<a href=\"https://scholar.harvard.edu/files/waldo/files/waldo-94.pdf%EF%BC%89%E5%BD%93%E4%B8%AD%E3%80%82\">https://scholar.harvard.edu/files/waldo/files/waldo-94.pdf）当中。</a>\"</p><p></p><p></p><blockquote>“概括来讲，分布式系统很难被「做对」——无论这个「做对」是指性能、可靠性还是可扩展性。”</blockquote><p></p><p></p><p>即使是在五十年前，在把系统拆分成运行在单个操作系统节点上的内存模块时，由跨进程或库边界数据传递带来的成本都可以忽略不计。然而，当跨网络线路进行数据传递时，如今的大部分微服务会把通信延迟提升五到七个数量级。而且这个问题没法通过向网络添加更多节点来“扩展”解决——反而是节点越多，情况越糟。</p><p></p><p>确实，把微服务托管在同一台机器上、加载到运行独立微服务容器镜像的虚拟机集群内，确实能降低一些相互影响（例如使用 Docker Compose 或 Kubernetes 托管一组 Docker 容器）。但这样会增加虚拟机进程边界间的延迟（根据七层模型，即使其中某些层可以完全模拟，也必然拉高延迟），而且单一节点还会带来运行可靠性问题。</p><p></p><p>而且还没等解决掉分布式计算谬误，另一个相关问题又跳了出来：企业计算谬误。</p><p></p><p></p><h4>当我们谈论微服务时，我们应当……</h4><p></p><p></p><p>认真考虑自己在谈论什么。</p><p></p><p>有必要把问题拆分成一个个独立实体吗？如果需要，其实用托管在 Docker 容器中的独立进程就够了，或者可以在遵循标准化 API 约定或其他选项的应用程序服务器中引入独立模块。总之，这是个非常成熟的应用需求，过去 20 年来的任何技术都能解决，包括 servlet、ASP.NET、Ruby、Python、C++，甚至是最不好用的 Perl。关键是在动手之前，先为集成和通信约定建立一套易于理解的通用架构底板。</p><p></p><p>是不是想减少团队面对的依赖项？那最靠谱的办法应该是整理各依赖项，再跟合作伙伴一同确认可以消解掉其中哪些。如果想要继续坚持“以技能为中心”的组织结构设计（也就是把数据库、基础设施、QA 和开发等职能按小组进行明确划分），那就跟公司高层合作，尝试将每位成员以“矩阵元素”的形式填充进团队报告体系。总之，最重要的是确保团队对自己所构建的内容拥有清晰认知，而且可以明确向他人解释自己的服务 / 微服务 / 模块到底有什么用。关键是给团队以方向和目标、达成目标的自主权，同时辅以必要的鼓励和引导。</p><p></p><p>也许这两大需求才是我们追求微服务的真实意义。谁能解决问题，就选择谁——真的没必要一定是微服务。</p><p></p><p>参考链接：</p><p>http://blogs.newardassociates.com/blog/2023/you-want-modules-not-microservices.html</p><p>https://news.ycombinator.com/item?id=34230641</p>",
    "publish_time": "2023-01-05 19:11:35",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Serverless时代的微服务开发指南：华为云提出七大实践新标准",
    "url": "https://www.infoq.cn/article/e4ly6UcN93KApvKGzUCK",
    "summary": "<p></p><p>历川：华为云 Serverless 研发专家</p><p>丙真：华为云中间件 Serverless 产品经理</p><p>冯嘉：华为云中间件首席专家</p><p></p><p></p><h2>背景</h2><p></p><p></p><p>分散治理、数据去中心化、基础设施自动化等优秀设计原则，使得微服务架构在过去几年中逐渐发展为企业应用架构的首选。然而，随着应用规模的持续增长和微服务生态的成熟，新的挑战也在不断涌现出来。相比于传统 SOA 等架构， 微服务架构给予开发者更多设计和开发 “自由度”，同一应用的各微服务模块，可以采用不同的技术栈来实现独立自治的业务逻辑。但自由也相应增加了开发运维的复杂度，提高了软件开发者的认知成本；同时，微服务架构在业务资源开销、交付速度、扩展性能和基础设施弹性等方面，也面临一系列新的挑战。</p><p></p><p>Serverless 编程范式的兴起，允许开发者聚焦业务逻辑本身，无需再感知底层运行时细节和后端资源的维护伸缩等问题，给微服务应用开发提供了效率更高的选择。本文结合华为云函数工作流 FunctionGraph、事件网格 EventGrid 以及云应用引擎 CAE 等在 Serverless Microservice 方面的实践，总结提炼出包括基础设施无感知、全生命周期可观测、 状态管理自动化等在内的七大 Serverless Microservice 开发 “实践标准”，为加速全域 Serverless 产业升级、推动企业应用开发框架从微服务向 Serverless 演进提供一些思考。</p><p></p><p></p><h2>微服务架构新挑战</h2><p></p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/ff/ffedac945fbdd2ed6c5228ea459f1d8f.png\" /></p><p></p><p>图 1. 微服务应用开发的生命周期示意</p><p></p><p>如图 1 所示，在微服务架构中，应用程序由一组功能自治的小型化服务围绕业务能力构建，服务之间采用轻量级通信，可以独立开发、构建、测试、发布和监控。微服务的目的是有效拆分应用，实现敏捷开发和部署 [1]。Martin Fowler 和 James Lewis 在《Microservices: A Definition of This New Architectural Term》中，列举了微服务架构的九大特征，如表 1 所示 (参见 [2])，这些特征使得微服务相比于传统软件开发架构，具有更加灵活的设计开发模式，服务之间支持独立部署和扩展，有效提升了企业应用的开发、迭代和运维效率。</p><p></p><p>表 1：微服务架构的九大特征</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/dc/dc1590ad3bfe1ecf2ee9854e01018987.png\" /></p><p></p><p>尽管微服务架构秉承众多优秀设计原则，随着应用规模增长、技术生态的成熟和工具链的多元化发展，一系列新的挑战逐渐呈现在企业应用开发者面前。</p><p></p><p></p><h4>挑战一：开发运维的复杂性高</h4><p></p><p></p><p>相比于单体（Monolithic）或 SOA（Service-Oriented Architecture）等传统架构下的 “规范标准”，微服务更提倡基于 “实践标准” 解决分布式问题 [2]；因此，对于服务注册发现、负载均衡、配置和安全、事务处理等，在微服务场景中不再有统一的解决方案。例如，服务间通信方案就有数十种，包括 REST、gRPC、Thrift、Dubbo 等，服务发现也包含 CoreDNS、Eureka、ZooKeeper、ETCD 等多种技术选型 ; 应用开发人员从这些各有千秋的技术中，选择最适合自己业务场景的系统性方案，无疑是一件门槛很高的任务 ; 尽管有 Spring Cloud 等一站式的全家桶工具集，对应用设计和运维人员来说，一揽子工具集所提供的技术组合复杂多样，导致问题定位、定界效率低。</p><p></p><p>除 Spring Cloud，Kubernetes 也逐渐成为一种主流的微服务解决方案。与 Spring Cloud 相比，Kubernetes 的配置管理和服务注册功能更加友好，且“边车代理模式”、服务网格 (e.g., Istio) 等技术的提出，显著提高了服务治理的效率；但要实现这类解决方案的高效利用，开发者的认知成本和所面对的复杂性并不低；从 Spring Cloud 到 Kubernetes，复杂性没有被减弱，更多地是被转移。微服务架构也需要开发者掌握并发编程框架和分布式事务一致性等技术，这些技术本身具备不低的复杂性，以事务一致性为例，常见机制就包括 TCC (Try-Confirm-Cancel)、2/3PC (2/3 Phase Commit)、SAGA 等模式。</p><p></p><p></p><h4>挑战二：服务扩展效率与应用规模难平衡</h4><p></p><p></p><p>尽管微服务提倡对应用进行拆分，但微服务的粒度仍然比较大。同一个微服务单元中，不同子功能之间的使用频率（e.g., QPS、RPS et al.）、变更频率等往往也不相同，因而对扩展性的诉求也不一样。图 2 展示了一个 Web 应用中“用户管理”微服务的例子 [3]，该微服务包含账号注册 API、登录 API 和登出 API 三项子功能，在实际使用中，注册 API 和登录 API 的调用频率通常远高于登出 API，因此对扩展性的要求也高于后者；此时虽然可以对微服务进一步进行拆分，但整个应用的服务数量也可能会随之翻倍，从而加重应用基础设施的管理负担。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/71/71412073659570e644aaf96094c592d6.png\" /></p><p></p><p>图 2. 一个 Web 应用中“用户管理”微服务的示例</p><p></p><p>微服务粒度较大的问题也使得单个服务的扩容速度十分受限，在高并发场景下要实现微服务的快速弹性是一件十分困难的事；对于时延敏感型应用，并发请求的扩容诉求通常在秒级以内，甚至毫秒级，但在微服务架构下，服务弹性扩容则通常需要秒级以上甚至分钟级的时延。</p><p></p><p></p><h4>挑战三：高可用与弹性保障成本高</h4><p></p><p></p><p>与服务扩展效率和应用规模平衡相关的另一个难题是成本问题。受限于单个服务的弹性能力，微服务架构通常采用“多实例主备”或“多实例多活”的方案，来保障应用的高可用性，实现容错、容灾、负载均衡等目标。但与前文中讨论的相似，同一个微服务应用的不同子服务之间，其承载的流量大小、调用频率等的差距也可能很大，因此对资源的横向、纵向扩缩容诉求也不一致，这种差距往往给企业带来无畏的成本浪费。图 3 展示了一个由 6 个功能不可或缺的子服务构建而成的微服务应用, 每个服务运行在虚机或容器中，图中实线表示在给定的一段时间内企业为每个服务所占据的虚机或容器所支付的资源成本，虚线表示服务在业务运行中所实际消耗的资源成本。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/2f/2faae0d685d0c1deba790731b97b9b4f.png\" /></p><p></p><p>图 3. 一个微服务应用的资源成本示意</p><p></p><p>在图 3 的示例中，微服务 F 由于被调用的频率很高，其所占据的资源利用率也较高，而微服务 A 则相反，其所占据的资源成本和 F 相差不大（e.g., 2u2G 的容器），但 A 被调用的频率则相对低很多，资源利用率也相应更低。在实际应用开发运维中，为保障高可用性和资源弹性，图中实线与虚线之间通常存在较大的差距，这部分成本是企业为应用所占据但未使用的资源付出的成本，属于一种成本浪费；同时，由于微服务架构通常不支持（一般也不建议）单个服务 “Scale-to-Zero”，且微服务应用逐渐变得越来越 “重”，上述 “资源占而不用” 导致的浪费现象也更加严重。</p><p></p><p></p><h2>事件驱动式 Serverless 函数架构</h2><p></p><p></p><p>云原生基础设施的发展，有力促进了事件驱动的 Serverless 架构的广泛应用。相比于微服务，Serverless 提供了一种更加细粒度的应用开发模型，以及更加便捷、轻量的应用运维框架。以 FaaS（Function-as-a-Service）为例，应用开发支持以单个函数作为最小部署单元，开发者只需提供函数代码（包括源码文件、镜像等）和一些配置信息，即可实现应用的快速发布和上线；同时，后端资源的维护及其随流量的自适应伸缩等复杂任务，则全部被下移到 Serverless 平台侧，显著降低了开发者的认知成本和开发、运维门槛，如图 4 所示；开发者只需为应用函数所实际使用的资源时长进行付费，付费粒度精确到毫秒级；同时，在应用流量负载为零的所有时间区间中，函数实例通过“Scale-to-zero”可以有效消除成本浪费，实现应用开发经济化。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/7a/7a2bb2e83745c0748130808f5a3fc098.png\" /></p><p></p><p>图 4. Serverless 应用开发架构的资源边界示意</p><p></p><p>与在微服务场景下相似，事件驱动式（Event-driven）也是 Serverless 函数架构的核心特征。Serverless 函数一般由函数代码包和事件处理程序（event handler）构成，函数通过事件进行触发，并对接收到的事件进行响应、处理。例如，FunctionGraph 支持多种类型的事件触发器，满足应用在不同业务场景下的诉求；同时，通过原生集成事件网格服务 EventGrid，FunctionGraph 为各类云服务、自定义应用、SaaS 应用提供了标准化、中心化的接入方式，事件可以在不同应用和服务之间灵活路由，帮助开发者快速构建松耦合、分布式的事件驱动式 Serverless 应用，如图 5 所示。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/f9/f913ba2edac74b94618be72e99183bb8.png\" /></p><p></p><p>图 5. EFG：基于 EventGrid 和 FunctionGraph 的事件驱动式 Serverless 应用模型</p><p></p><p></p><h2>基于函数快速实现 Serverless Microservice 应用</h2><p></p><p></p><p>图 6 给出了基于 FunctionGraph 和 APIG（API Gateway）的 Serverless Microservice 简易应用模型，整个应用采用云上托管服务（managed services）构建，每个微服务由函数实现，并通过 APIG 对外暴露，函数之间采用 Workflow 进行功能编排。在该模型基础上，我们用函数快速实现一个 Serverless Microservice 示例。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/93/931e95d97db4b0df131936529f5c4b69.png\" /></p><p></p><p>图 6. 基于 FunctionGraph 和 APIG 的 Serverless Microservice 模型</p><p></p><p>以经典的电商应用为例，首先用 FunctionGraph 创建三个函数，分别实现 Product, Basket, Order 微服务，其中，Product 实现商品清单及详情浏览，Basket 负责加购，Order 完成下单。交易相关的状态采用分布式缓存服务 DCS（Distributed Cache Service）进行存储，DCS 实例通过绑定独立 VPC 来实现网络私有和隔离，最后，我们为每个函数分别绑定一个 APIG 触发器，对外暴露服务；如图 7(1) - 7(5) 所示。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/83/83c6950f52e56eccbac80c80135308b3.png\" /></p><p></p><p>图 7-(1). 分别创建三个函数，实现微服务功能</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/4c/4c0114ae93d8a469eff9b0ed3e0e0b33.png\" /></p><p></p><p>图 7-(2). 授权 FunctionGraph 访问 VPC 内服务 (i.e., DCS 实例)</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/ce/ce023cfbb03c74c1f6046b350d086034.png\" /></p><p></p><p>图 7-(3). 开启函数访问 VPC</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/ca/ca53b7d9ca9e6ae17719408cd8bf98ed.png\" /></p><p></p><p>图 7-(4). 在函数中获取对应环境变量</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/c8/c8944feb42da7d5e09a4a6e9e49c9532.png\" /></p><p></p><p>图 7-(5). 最后为每个函数绑定 APIG 触发器</p><p></p><p>我们用 APIPost 进行简单测试并返回函数界面查看监控信息，如图 8(1) – (3) 所示：</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/c8/c87b45a31677d306fddbb62d8c3f846b.png\" /></p><p></p><p>图 8-(1). 用 APIPost 测试函数微服务</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/9a/9a4a9f5e2c93e49e8de12082196bdb44.png\" /></p><p></p><p>图 8-(2). 查看日志监控</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/36/365f90348e803812c7e957ef5fa1d781.png\" /></p><p></p><p>图 8-(3). 查看并发数等监控信息</p><p></p><p>最后，我们通过 EventGrid 进行异步事件解耦，并采用分布式消息服务 DMS（Distributed Message Service）实现基于 Fan Out/Fan In 的批处理，如图 9 所示：</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/7b/7b5b41de29ec5e32da316060fe985b96.png\" /></p><p></p><p>图 9. 一个基于事件驱动的 Serverless 函数架构的电商应用示例</p><p></p><p>其中，EventGrid 创建事件订阅时，事件源选择 DCS 实例，事件目标选择 FunctionGraph 函数，如图 10 所示：</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/c3/c3fde700d5ff0993e59217ba47b8b810.png\" /></p><p></p><p>图 10. 创建 EventGrid 事件订阅</p><p></p><p></p><h2>云上 Serverless Microservice 实践标准探索</h2><p></p><p></p><p>在基于事件驱动式 Serverless 函数架构开发应用的过程中，遵循一定的设计 / 开发原则或“实践标准”，有利于开发者构建更加高效、经济和稳健的企业应用。本文结合华为云 FunctionGraph、EventGrid 以及 CAE 等云服务在 Serverless 领域的最佳实践，总结并提炼出 Serverless microservice 应用开发的七类实践标准，为开发者的架构决策提供参考；如表 2 所示。</p><p></p><p>表 2. 云上 Serverless Microservice 应用开发的实践标准探索</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/be/beca25ef80f042e4539b37db099878af.png\" /></p><p></p><p>基础设施无感知（Infra-less）：基础设施无感知帮助开发者更快、更高效地构建应用程序，并显著降低应用运维的成本和复杂性。除服务器无感知外，基础设施无感知具有更广泛的含义。包括开发者对平台底层操作系统、分布式运行时以及硬件的有限制访问，开发者无需感知 FunctionGraph 平台是如何架构的，其它云服务与 FunctionGraph 的集成由华为云统一管理，只公开少量配置选项给开发者，开发者也无需感知函数在任何时间点被调用时实例资源位于哪个可用区（Available Zone, AZ），等等；这种抽象允许开发者专注于应用程序本身的功能开发、数据流设计和业务逻辑优化，从而更聚焦地为应用的终端用户提供价值。</p><p></p><p>全生命周期可观测（Deep Observability）：基础设施无感知在提供便捷性的同时，也在开发者的“心智模型”方面降低了透明性，因此，全生命周期、深度、实例级的可观测性，对于开发者实现对应用的自主掌控具有关键作用。Serverless 可观测性包含链路追踪，日志，和指标三类，主要服务于异常监控、性能调测、故障定位、问题定界等。例如，FunctionGraph 通过内置对接云日志服务 LTS，为应用函数提供日志监控能力，包括高级日志分析能力（e.g., loginsight）等；通过对接应用性能管理服务 APM，提供指标丰富的函数实例级监控；同时，支持全链路调用链管理等。开发者无需复杂的配置，即可享受应用函数全生命周期的深度可观测性能力。</p><p></p><p>流式编排（Flow Orchestration）：编排是 Serverless 的核心概念之一，狭义的编排主要指工作流编排，如 FunctionGraph Workflow，在 Serverless microservice 应用开发中，开发者应尽量避免在单个函数中定制化地开发应用的各类分支逻辑及其异常处理程序，应尽可能采用函数工作流编排来实现，工作流编排提供了一种更加便捷的分支路由、错误捕获以及异常处理方法，能够增强应用逻辑的稳健性并提高全链路可观测性 [4]。广义的编排还包括服务流编排（Service Flow），应用架构所依赖的三方功能，如网关、消息、缓存等，也应尽可能采用云上托管服务，通过配置驱动、服务流编排的方式进行组装式构建，从而尽可能减少定制化代码的开发和维护，降低应用运维的负担。FunctionGraph 原生支持开发者集成云上其它服务，表 3 列出了在 Serverless microservice 开发中最常用的几类云服务。</p><p></p><p>表 3：Serverless microservice 应用程序开发中常用的几类云服务</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/74/744f92e19858728bae8fdf6e4ae11686.png\" /></p><p></p><p>事件驱动（Event-driven）：事件，表示状态的变化。采用事件驱动的方式构建应用的优点在于松耦合、独立扩缩容、良好的扩展性等。在状态查询、数据存取、函数调用等场景中，优先采用事件来代替传统应用开发中常用的轮询、Webhook 等机制，可以有效降低应用的复杂性、提高系统性能、或降低应用成本 [5]。以轮询为例，由于系统状态的更新在时间维度上不一定是规律且连续的，使得轮询类策略往往是低效或非经济的；Webhook 机制则在被集成的服务之间不一定能够得到广泛的支持。同时，轮询和 webhook 机制在支持应用按需扩缩容方面也存在较大挑战。采用事件驱动模式，开发者既可以很方便地构建实时系统，实现数据按需流动并避免过量的批处理任务；也可以通过将事件发布到 DMS 等消息服务，利用弹性缓冲区实现异步解耦，然后利用 EventGrid 对事件进行过滤和路由，从而增强应用在流量激变情形下的可伸缩性。</p><p></p><p>交互式控制（Interactive Autopilot）：交互式控制主要解决如何通过广义的自动驾驶技术（autopilot）[7] 实现应用迭代和生产的高性能、低成本；对于 Serverless 函数而言，自动驾驶主要包括函数代码包瘦身、源码优化、资源规格选择、并发度调优等问题。以函数资源规格选择为例，过去主要依赖于开发者的工程经验和其对自身业务场景的理解进行设定，但经验性配置往往具有误差大、静态性、黑盒化等缺点；因此，FunctionGraph 提出在线式资源消耗感知与规格动态推荐等 autopilot 技术，配合离线式最佳规格调优（power tuning），最大限度帮助用户实现应用函数 FinOps 效果，让开发者能够真正享受到 Economical Serverless 的福利 [8]；开发者无需感知应用自动驾驶技术的实现细节，但整个过程 “处处可观察、 实时可干预”。</p><p></p><p>状态管理自动化（Automatic State Management）：尽管 Serverless 提倡无状态优先，但在多数分布式应用中，状态管理是无法回避且复杂度很高的任务。随着数据密集型应用逐渐成为云上应用的主流，如大规模机器学习、大数据与流处理、实时交互型应用、多人协作类应用等，Serverless 编程框架对支持有状态的诉求越来越强烈。FunctionGraph 作为业界首个支持有状态的 Serverless 平台，为开发者提供多种状态一致性模型和自动化的并发处理机制，开发者通常只需要对函数中的简单结构体进行操作，即可实现状态数据的快速存取，整个状态管理过程由平台内置提供，无需与外部存储服务之间进行频繁交互，显著减少了涉及大量状态数据操作的网络访问次数，具有自动化、高性能、高可用等特点。</p><p></p><p>伸缩原子轻量化（Lightweight Scaling Unit）：伸缩原子，指最小可伸缩的运行单元，如单个函数。在 Serverless microservice 应用开发中，函数应尽可能小型化，功能上保持逻辑内聚，以响应外部事件为主，对应用全局逻辑弱感知；伸缩原子的轻量化，不仅能够支持快速的独立扩缩容以及高并发下的快速弹性能力，也能够最大限度地保证应用的各个微服务函数能够“按需扩缩容”，从而在保障应用负载 QoS 的前提下，实现极致成本。</p><p></p><p></p><h2>总结和展望</h2><p></p><p></p><p>以事件驱动式函数架构为代表的 Serverless 编程模型，正在成为微服务应用开发的新一代标准框架。本文结合华为云 FunctionGraph 和 EventGrid 等在 Serverless 微服务方面的最佳实践，总结并提炼出七大 Serverless Microservice 实践标准, 为推动全域 Serverless 产业升级提供一些思考。</p><p></p><p>更进一步地，华为云事件网格服务 EventGrid 将于近期正式转商用，并联合 FunctionGraph 推出事件驱动式函数应用开发模型 EFG（EventGrid-FunctionGraph）; 同时，基于七大实践标准并结合丰富的客户实践，EFG 将推出 Serverless Microservice 参考架构，为开发者构建事件驱动式 Serverless 解决方案提供可视化的架构抽象和优秀的业务建模支持。</p><p></p><p>[1] Introduction to Microservices. <a href=\"https://www.nginx.com/blog/introduction-to-microservices/\">https://www.nginx.com/blog/introduction-to-microservices/</a>\"</p><p></p><p>[2] 周志明,《凤凰架构：构筑可靠的大型分布式系统》</p><p></p><p>[3] 刘方明, 李林峰, 王磊, 《华为 Serverless 核心技术与实践》.</p><p></p><p>[4] Understanding event-driven architecture – Part 1https://aws.amazon.com/blogs/compute/operating-lambda-design-principles-in-event-driven-architectures-part-2/[5] Design principles in event-driven architectures – Part 2https://aws.amazon.com/cn/blogs/compute/operating-lambda-design-principles-in-event-driven-architectures-part-2/[6] Anti-patterns in event-driven architectureshttps://aws.amazon.com/cn/blogs/compute/operating-lambda-anti-patterns-in-event-driven-architectures-part-3/[7] Rzadca, K., Findeisen, P., Swiderski, J., Zych, P., Broniek, P., Kusmierek, J., … &amp; Wilkes, J. (2020, April). Autopilot: workload autoscaling at google. In Proceedings of the Fifteenth European Conference on Computer Systems (pp. 1-16).</p><p></p><p>[8] 历川, 平山, 冯嘉, Serverless 遇到 FinOps: Economical Serverless,<a href=\"https://www.infoq.cn/article/ckibtiofxn4whycfjt8b\">https://www.infoq.cn/article/ckibtiofxn4whycfjt8b</a>\"</p><p></p>",
    "publish_time": "2023-01-05 19:27:47",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]