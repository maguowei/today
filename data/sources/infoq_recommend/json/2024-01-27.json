[
  {
    "title": "Zendesk从DynamoDB迁移到MySQL和S3，节省了80%多的成本",
    "url": "https://www.infoq.cn/article/LaeUZ9ZIe7xep5Chjv57",
    "summary": "<p>Zendesk通过将DynamoDB迁移到使用MySQL和S3的分层存储解决方案，<a href=\"https://zendesk.engineering/moving-from-dynamodb-to-tiered-storage-with-mysql-s3-cb3dc9bf813a\">将数据存储成本降低了80%以上</a>\"。该公司考虑了不同的存储技术，并决定将关系型数据库和对象存储结合起来，在降低成本的同时，取得可查询性和可伸缩性之间的平衡。</p><p>&nbsp;</p><p>Zendesk使用<a href=\"https://aws.amazon.com/dynamodb/\">DynamoDB</a>\"存储为事件流数据创建了持久性解决方案。最初的设计很有效，但运营成本越来越高。团队切换到了一个预置的计费模型，将成本降低了50%，但是随着客户群的增长，以及需要使用<a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.html\">Global Secondary Indexes（GSI）</a>\"来支持新的查询模式，该架构运转所需的成本变得不可持续。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/08/087360cb3e6b30d541f41a6db7a6f124.jpeg\" /></p><p></p><p>原来使用DynamoDB的架构（图片来源：<a href=\"https://zendesk.engineering/moving-from-dynamodb-to-tiered-storage-with-mysql-s3-cb3dc9bf813a\">Zendesk工程博客</a>\"）</p><p>&nbsp;</p><p>由于Zendesk在AWS上运行其平台，该团队一直在寻找能够满足其功能和技术要求，同时又能降低成本的替代存储解决方案。他们考虑了<a href=\"https://aws.amazon.com/s3/\">S3</a>\"、<a href=\"https://hudi.apache.org/\">Hudi</a>\"（Zendesk使用的数据湖）、<a href=\"https://www.elastic.co/elasticsearch\">ElasticSearch</a>\"和<a href=\"https://aws.amazon.com/rds/mysql/\">MySQL</a>\"，但因为复杂性和24小时延迟而放弃了Hudi，而ElasticSearch的成本与使用DynamoDB相似。最后，团队决定使用MySQL来缓冲来自<a href=\"https://kafka.apache.org/\">Apache Kafka</a>\"的日志及存储元数据，并使用S3来存储原始数据，每个文件10000条记录。</p><p>&nbsp;</p><p>摄取流（ingestion flow）将Kafka消费的日志数据存储到MySQL的缓冲表中。每隔一小时，后台作业就会以每个文件10000条日志为单位，将缓冲表中的新记录批量上传到S3中，并为每个S3文件插入一条元数据记录。另有一个作业每隔一小时会从缓冲表中删除超过4小时的日志。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/86/86a8a7ec05355a257d5e02a72287fe15.jpeg\" /></p><p></p><p>使用MySQL（AuroraDB)）和S3的新架构（图片来源：<a href=\"https://zendesk.engineering/moving-from-dynamodb-to-tiered-storage-with-mysql-s3-cb3dc9bf813a\">Zendesk工程博客</a>\"）</p><p>&nbsp;</p><p>为了处理查询，新解决方案需要在MySQL元数据表中进行查找，然后对查找返回的文件并行执行一组<a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/selecting-content-from-objects.html\">S3-Select</a>\"查询。由于数据布局针对时间顺序检索进行了优化，所以团队在执行更复杂的查询时遇到了问题。</p><p>&nbsp;</p><p>Zendesk集团技术主管<a href=\"https://www.linkedin.com/in/shanehender/\">Shane Hender</a>\"解释了在新架构中进行灵活查询所面临的挑战：</p><p></p><blockquote>在完成了上述所有工作后，当客户端希望通过时间戳以外的任何字段筛选结果时，我们遇到了性能问题。例如，如果客户端需要特定user-id的日志，那么在最坏的情况下，为了查找相关日志，我们必须扫描给定时间范围内的所有S3数据，这使得我们很难确定哪些查询可以并行执行。</blockquote><p></p><p>&nbsp;</p><p>工程师们曾考虑通过在S3中复制数据来处理筛选多个字段的情况，但考虑到字段组合的数量比较大，这种方法并不可行。最终，他们找到了<a href=\"https://en.wikipedia.org/wiki/Bloom_filter\">Bloom Filters</a>\"，并进一步将其与<a href=\"https://en.wikipedia.org/wiki/Count%E2%80%93min_sketch\">Count-Min Sketch</a>\"数据结构相结合，提供了一种支持多字段筛选查询的有效方法。改进后的解决方案需要一个额外的表来存储序列化数据结构，用于确定所要查询的S3文件。</p><p>&nbsp;</p><p>迁移完成后，Zendesk将存储成本降低到不到DynamoDB配置成本的20%，其中MySQL （AuroraDB）占90%以上，S3和S3-Select占不到10%。新的解决方案提供了大约200到500毫秒的查询延迟，不过峰值有时会达到几秒，团队正设法进一步优化。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/12/zendesk-dynamodb-mysql-s3-cost/\">https://www.infoq.com/news/2023/12/zendesk-dynamodb-mysql-s3-cost/</a>\"</p>",
    "publish_time": "2024-01-27 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]