[
  {
    "title": "Netflix基于Redis、Kafka和Elasticsearch构建高吞吐优先队列Timesone",
    "url": "https://www.infoq.cn/article/JC8GL4g4OHL1WFISs4g1",
    "summary": "<p>最近，Netflix公布了它是<a href=\"https://netflixtechblog.com/timestone-netflixs-high-throughput-low-latency-priority-queueing-system-with-built-in-support-1abf249ba95f?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjYwNTcxNzksImZpbGVHVUlEIjoiem5hSTQwQ3QzcVVtUlhDdiIsImlhdCI6MTY2NjA1Njg3OSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NTA5NTIwOX0.ZCmK0IQLsF3M-6uDdePoMyHU7WRbsNA8kcqarqfIFnY\">如何构建Timestone</a>\"的——一个高吞吐、低延迟的优先队列系统。Netflix使用Redis、Apache Kafka、Apache Flink和Elasticsearch等开源组件来构建这个队列系统。Netflix的工程师们表示，他们之所以要构建Timestone，是因为他们无法找到满足其所有要求的现成解决方案。</p><p></p><p>其中一个需求是不需要在消费者端进行任何锁定或协调的情况下将某些工作项标记为不可并行。这一需求意味着在属于同一工作集的前一个项目完成之前，Timestone不应该发送消息。Timestone引入了“独占队列（Exclusive Queue）”的概念来实现这一目的。</p><p></p><p>Netflix的软件工程师Kostas Christidis解释了独占队列的工作原理。</p><p></p><p></p><blockquote>独占队列被创建后将与用户定义的独占键相关联——例如，“project”。所有发布到该队列的消息都必须在其元数据中携带此键。例如，带有\"project=foo\"的消息将被接收到独占队列中，不包含该键的消息将不会进入独占队列。在这个例子中，与独占键对应的值是“foo”，也就是消息的独占值。独占队列的约定是，在任何时间点，每个独占值最多只能有一个消费者。因此，如果我们示例中以“project-”为前缀的独占队列中有两个消息的键值对为“project=foo”，并且其中一个消息已经分配给了一个消费者，那么另一个消息就不能退出队列。</blockquote><p></p><p></p><p>下图描绘了这个示例。</p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/news/2022/10/netflix-timestone-priority-queue/en/resources/1Netflix-Timestone-Exclusive-Queues-1664933775499.png\" /></p><p></p><p>当worker_2发出出队列调用时，会收到msg_2而不是msg_1，即使msg_1具有更高的优先级</p><p></p><p>来源：https://netflixtechblog.com/timestone-netflixs-high-throughput-low-latency-priority-queueing-system-with-built-in-support-1abf249ba95f</p><p></p><p>另一个需求是，在任何给定的时间，一条消息只能分配给一个消费者。这很重要，因为Cosmos种的工作负载往往是资源密集型的，并且可能扇出数千个动作，这个需求的目标之一便是减少资源浪费。这个需求排除了最终一致性解决方案，这意味着Netflix的工程师想要的是队列级别的<a href=\"https://jepsen.io/consistency/models/linearizable?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjYwNTcxNzksImZpbGVHVUlEIjoiem5hSTQwQ3QzcVVtUlhDdiIsImlhdCI6MTY2NjA1Njg3OSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NTA5NTIwOX0.ZCmK0IQLsF3M-6uDdePoMyHU7WRbsNA8kcqarqfIFnY\">线性一致性</a>\"。</p><p></p><p>Netflix工程师通过为每条消息维护一个消息状态来实现这一需求。当生产者将消息入队时，消息将被设置为“Pending”或“Invisible”状态，这取决于消息的超时设置（可选）。当消费者将挂起的消息从队列中取出时，它将获得该消息的独占租约，Timestone将该消息设置为“Running”状态。在这个阶段，生产者可以将消息标记为“Completed”或“Cancelled”。每条消息最多可以尝试有限的取出次数，然后Timestone将其标记为“Errored”状态。下图说明了所有可能的状态转换。</p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/news/2022/10/netflix-timestone-priority-queue/en/resources/1Netflix-Timestone-Message-States-1664933775499.png\" /></p><p></p><p>来源：https://netflixtechblog.com/timestone-netflixs-high-throughput-low-latency-priority-queueing-system-with-built-in-support-1abf249ba95f</p><p></p><p>Timestone服务器提供了一个基于gRPC的接口。所有API操作都在队列作用域内。所有修改状态的API操作都是幂等的。记录系统是一个Redis集群。在将响应发送回服务器之前，Redis会将每个写请求持久化到事务日志中。在Redis内部使用了一个按优先级排序的排序集代表每个队列。消息和队列配置以散列值的方式存储。</p><p></p><p>Christidis提到了Netflix工程师如何用Redis实现原子性：</p><p></p><p></p><blockquote>几乎所有Timestone和Redis之间的交互都写在Lua脚本中。在大多数Lua脚本中，我们倾向于更新大量的数据结构。由于Redis保证每个脚本都是原子执行的，所以成功执行脚本意味着可以保证系统处于一致的（在ACID意义上）状态。</blockquote><p></p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/news/2022/10/netflix-timestone-priority-queue/en/resources/1Netflix-Timestone-System-Architecture-1664933775498.png\" /></p><p></p><p></p><p>来源：https://netflixtechblog.com/timestone-netflixs-high-throughput-low-latency-priority-queueing-system-with-built-in-support-1abf249ba95f</p><p></p><p>为了实现可观察性，Timestone捕获关于传入消息及其状态间转换的信息，并将其保存在Elasticsearch的两个二级索引中。当Timtstone服务器从Redis获得写入响应时，它将其转换为发送到Kafka集群的事件。有两个分别对应Timestone两个索引的Flink作业，消费来自相应Kafka主题的事件，并更新Elasticsearch中的索引。</p><p></p><p>Netflix创建Timestone是为了满足其媒体编码平台Cosmos的需求。Timestone还支持<a href=\"https://conductor.netflix.com/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjYwNTcxNzksImZpbGVHVUlEIjoiem5hSTQwQ3QzcVVtUlhDdiIsImlhdCI6MTY2NjA1Njg3OSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NTA5NTIwOX0.ZCmK0IQLsF3M-6uDdePoMyHU7WRbsNA8kcqarqfIFnY\">Conductor</a>\"——Netflix的通用工作流编排引擎，作为大规模数据管道的调度器。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/10/netflix-timestone-priority-queue/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjYwNTcxNzksImZpbGVHVUlEIjoiem5hSTQwQ3QzcVVtUlhDdiIsImlhdCI6MTY2NjA1Njg3OSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo4NTA5NTIwOX0.ZCmK0IQLsF3M-6uDdePoMyHU7WRbsNA8kcqarqfIFnY\">Netflix Builds a Custom High-Throughput Priority Queue Backed by Redis, Kafka and Elasticsearch</a>\"</p>",
    "publish_time": "2022-10-20 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "从 “B 站 713 事故”看高可用系统的治理",
    "url": "https://www.infoq.cn/article/DDyq0CVQMTlTq8wPBNFl",
    "summary": "<p>随着数字化经济的不断发展，云计算成为了各行各业进行数字化转型的重要基础设施，越来越多的企业选择上云。然而，随着云上业务的规模与复杂度日趋増长，对云上的运维、安全和管理也提出了新的挑战。</p><p>&nbsp;</p><p>为了让企业以及相关IT和业务团队更好地紧跟技术变革，利用好云技术、释放云能力使能业务发展，据悉，此前在华为上海研究所举办的华为云联创营 • 云上综合治理班携手 bilibili，并邀请到诸多业内技术专家，围绕着智能运维中的算法落地、bilibili＂713 事故”后优化改进实践、叮咚买菜基础技术应对疫情保障的经验、华为云 SRE 运维体系和企业云上容灾备份实践等内容，共同探讨安全可靠确定性的云上治理之路。</p><p>&nbsp;</p><p>之前受开发者广泛关注的 bilibili 713 事故 bilibili 在线 SRE 负责人武安闯在华为云联创营 • 云上综合治理班中做了详细的事故解析和技术优化实践分享，为企业制定高可用业务系统的治理方案提供了许多启发。</p><p></p><h2>一、bilibili 713 事故：耗时近 3H 才全面解决问题</h2><p></p><p>&nbsp;</p><p>2022 年 7 月 23 日，一篇名为《2021.07.13 我们是这样崩的》文章在 bilibili 社媒发布之后，迅速引起业界广泛关注，这篇文章发布之后，在技术圈掀起了一段讨论热潮，很多读者觉得意犹未尽，期待 bilibili 继续剖析＂713 事故”之后如何执行优化落地。在本次华为云联创营 • 云上综合治理班中武安闯就给大家了一个回复：</p><p>&nbsp;</p><p>bilibili 713 事故的时间线是这样的，2021 年 7 月 13 日 22:52，B 站无法使用，大量客户反馈内部大量服务、域名接入层不可用报警，在 22:57，bilibili Oncall SRE 便发现是 SLB 故障，但因为 SRE 团队核心成员在 VPN 公司内网时也受影响，23:17 才陆续进入内网系统正式解决问题。23:23 bilibili APP 推荐、APP 播放、评论&amp;弹幕拉取、动态、追番、影视等多活业务读取恢复，当晚多活机房 SLB 容量过载，后流量下降，重启后恢复，但直播移动端首页接口因为没配置多机房调度，导致当晚没有及时恢复。</p><p>&nbsp;</p><p>紧接着，bilibili SRE 团队开始进行三次 Lua 层面的变更回滚，但直到 23:55 依旧没有恢复。于是团队在 01:00 开始新建 SLB 集群、配置初始化，进行四层 LB 配置与公网线路配置，CDN 开始切换回源流量，直到 01:40，核心业务切换到了 SLB 新集群，业务全部恢复。</p><p>&nbsp;</p><p>为了彻底消除了风险，第二天上午，bilibili SRE 团队开始复现问题，定位到 3 个主要原因：</p><p>多活基架能力不足；切量强依赖 CDN 运维；业务多活元信息缺乏平台管理。</p><p>&nbsp;</p><p>之后 bilibili 针对这些问题在多活基架能力建设和多活管控能力提升两方面进行了优化。</p><p>&nbsp;</p><p>从多活基架能力建设方面，bilibili 优化了多活基础组件的支持能力，如数据层同步组件优化、接入层支持基于用户分片，让业务的多活接入成本更低；重新梳理各机房在多活架构下的定位，梳理 Czone、Gzone、Rzone 业务域；推动不支持多活的核心业务和已实现多活但架构不规范的业务改造优化。</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/a6/0f/a6dce232620aacbbf966fed58278520f.png\" /></p><p></p><p>从多活管控能力提升方面，统一管控所有多活业务的元信息、路由规则，联动其他平台，成为多活的元数据中心；支持多活接入层规则编排、数据层编排、预案编排、流量编排等，接入流程实现自动化和可视化；对接 CDN、存储等组件，实现了一键全链路切量，提升效率和准确率。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/72/f9/72352e1199860071126344a282f0bcf9.png\" /></p><p></p><p>值得一提的是，目前 bilibili 支持在多活切量时的前置能力预检，比如容量预检、延迟预检、限流预检、隔离预检等，而且还实现了切量中风险巡检和多活流量、业务/应用 SLO、Trace 链路等核心指标的可观测。</p><p><img src=\"https://static001.infoq.cn/resource/image/96/9c/96d52073dee006b4664e4843ca03ce9c.png\" /></p><p>图：风险预检</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/dc/c2/dc87cc39c8cf27306d3e99522a4c37c2.png\" /></p><p>图：多活切量可观测</p><p></p><p>在经历了以上一系列优化后，多活相关故障解决效率大大提升。比如“713 事故”时，如果业务 A 故障，那就要首先切量到多活机房，SRE 跟研发沟通后确认需要切域名 A+URL A，然后要告知 CDN 运维进行切量，全程至少需要半小时。而在优化后，SRE 与研发确认切量的业务、组件、流量比例后便可以实施动作，执行全程仅需 3-5 分钟。目前 bilibili 多活业务全部接入、生产已演练 80 多次，整体运行都非常稳定。</p><p></p><h2>二、稳健的多活架构的本质是“高可用架构”</h2><p></p><p>&nbsp;</p><p>事实上，类似于“bilibili 713 事故”的类似事故并不少见，这也是为什么上个月复盘文章发出就引发众多开发者关注的原因。构建稳定的多活架构说到底就是高可用架构构建问题，高可用正如华为云多活高可用解决方案架构师郑学强在本次华为云联创营 • 云上综合治理班中所说的那样，“当前环境下，企业对业务连续性 (BCM) 的追求，促使应用向高可用架构演进。”</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/a1/24/a1b160ba469418d026a8a62743c5ce24.png\" /></p><p></p><p>在企业需求和行业发展要求的推动下，华为云一直在努力完善多活高可用解决方案。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/8d/7d/8d2197fc5cc48aabf253285eb789c57d.png\" /></p><p></p><p>这个方案能够实现异地多活、单元化，并且支持流量自治，非常适用于对容灾可靠性要求极高、业务对时延敏感且要求数据分区化的企业：</p><p>用户访问流量：通过 DNS 的 GSLB 特性实现业务访问流量控制，并在网关层进行流量分区管理和纠错；网关层：进行流量路由标记，流量染色，并通过染色结果精准调度；数据层：数据禁写保护，避免脏数据，数据双向同步，单元化数据要通过网关判断纠错，数据层 SDK 进行多层数据禁写；容灾恢复切换：通过多活切流，并按照单元化的流量分配，切流过程汇总数据禁写保护，保证数据一致性；容灾演练：客户自行通过人工/脚本方式进行演练或基于第三方软件进行容灾演练。</p><p>&nbsp;</p><p><img src=\"https://static001.infoq.cn/resource/image/0b/11/0bd1344aa43537b8d7773508619f3b11.png\" /></p><p></p><p>该方案有两个核心技术亮点，首先，华为独有的探活仲裁管理面 DCG，以及配合切换的 SDK，多层配合实现业务双活。在公网接入层中，DNS 中配置双 AZ IP 的两条 A 记录，DNS 域名解析返回 IP1&amp;IP2，P1、IP2 顺序随机，50% 用户 IP1/IP2，50% 用户 IP2/IP1。在端侧使用 URLConnection 或 OKHttp 调用 Http 接口，并设置超时为 8-10 秒；端侧域名解析获得两个 IP，缓存在本地，在 TTL（通常 300 秒）时间内使用缓存；端侧默认使用第一个 IP 访问；如果第一个 IP 访问超时，底层会自动尝试第二个 IP（RFC3484)。在负载均衡层中，支持 ELB 双 AZ 转发、SLB 双 AZ 转发。如果 SLB 节点故障，ELB 通过健康检查会自动摘除故障 SLB 节点；如果 App 节点故障，SLB 通过健康检查会自动摘除故障 APP 节点。而在业务层，实例无状态，可横向扩容；多个实例负荷分担方式工作，任何一个故障，不影响业务，同时业务读写 AZ1 的数据层。如果 AZ1 中数据层发生故障，则可由 DBMonitor 自动切换到 AZ2 中的数据。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/77/37/77591db3197a548cc2ecf1e5f78eea37.png\" /></p><p></p><p>其次，两地三中心——应用跨 AZ 双活、跨 Region 容灾。从系统架构方面来看，容灾区域可双活或者单 AZ 部署，根据业务进行评估。MAS 容灾管控负责管理端到端同步任务，数据同步关系建立、展现、切换，同时负责监控主备 Region 状态，还提供主备 Region 容灾切换能力，用户在切换时可根据告警手动切换。 在容灾切换停止主 Region 业务（入口流量、定时任务等）后，MAS 则停止主-备数据同步任务，并启动备-主数据同步任务，用户修改 DNS 配置完成容灾切换。</p><p>&nbsp;</p><p>在跨 Region 容灾切换方面，华为云提供了切换编排能力，常见的切换动作流：主 Region 数据库设置只读（可选）、停止跨 Region 数据库容灾同步任务、容灾 Region 的数据源升主、容灾 Region 应用启动/扩容、DNS 切换到容灾 Regin、启动容灾 Region 的应用侧定时任务。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/19/f9/195b8fab77d87c4200f8b63e97db21f9.png\" /></p><p></p><p>当生产站点因为不可抗力因素或因设备故障导致应用在短时间内无法恢复时，这样的容灾方案可以很好的解决运维事故，以满足 SRE 需求。</p><p>&nbsp;</p><p>除此之外，典型的双活架构日常非故障时可以将流量负载分担到不同的分区，减少并发压力，像 bilibili 这种自媒体视频平台很容易因为突如其来的热点而产生突发性高并发流量，华为云提供的这种多活高可用解决方案还可以很好地应对这种难题。</p><p>&nbsp;</p><p>从华为云多活高可用的实践方案中我们可以看出，华为云在高可用方面的表现非常优秀。像“华为终端云服务迁云+双活”，其业务增长年复合率已经超过了 30%。从 2013 年至今，该架构可靠性已实现 4 个 9，运维成本降低了 30%，服务类型已经超过 30 种，弹性伸缩效率达到 1k/min,安全能力以达到 T 级。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/d6/24/d6bb2dyy0a2af0e091e4edb295028924.png\" /></p><p></p><p>在消费者中国区云化双活项目中，截至 2018 年 Q2，其所有业务流量就已由公有云环境承载。目前系统运行正常，华为精选、协议服务、A/B 测试平台等新业务也已在公有云高可用部署上线，另外借助此方案已经完成了中国区公有云双 AZ 故障的应急演练，涉及已云化的 12 个业务，演练结果均符合预期，有效地确保了公有云双 AZ 的可靠性。</p><p></p><h2>三、写在最后</h2><p></p><p>&nbsp;</p><p>系统可用性是通过可用性指标来进行衡量的，我们说的“高可用”则是指这个系统 99.99% 的时间都是可用的，这也就意味着一年中的不可用时间只占 53 分钟，在这个飞速发展的数字化时代，高并发流量突发、设备突发故障或其他不可预知的情况为企业提出了挑战，“4 个 9”真的不是轻易可以做到的。</p><p>&nbsp;</p><p>面对企业上云之后带来业务规模与复杂度的日趋增长，华为云基于和伙伴的协同实践构建了一套完整的面向云上应用的立体化治理系统，通过融合 AOM、APM，提供云应用基础设施层、应用层、业务层的运维能力，并对各类资源可实现多维度实时监控，通过应用与资源关联分析技术，实现问题快速诊断和修复，保障云上应用持续稳定运行。</p><p>&nbsp;</p><p>如今上云已经成为企业战略部署的一部分，上云这件事对于企业来说已经是个既定命题，而如何构建高可用系统架构成为企业业务上云后新的关注点之一，通过一系列的自动化手段实现业务的高可用是目前所有企业常用的解决方案，华为云一直在持续加强技术研发和创新，为智能世界构筑云底座而不断展开技术探索，全面助力千行百业的数字化转型。</p><p></p><p>关于华为云与 bilibili 的更多技术，请关注↓</p><p><img src=\"https://static001.infoq.cn/resource/image/97/d9/97yy2f5643604dc1c70c6be9eab868d9.jpeg\" /></p><p></p>",
    "publish_time": "2022-10-20 12:43:04",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "分析了1000万个开发岗位后，我发现了今年收入最高的十大编程语言",
    "url": "https://www.infoq.cn/article/Bz4RgtSyra8c94CY2HCg",
    "summary": "<p></p><p></p><blockquote>200 多种编程语言里，哪些最“吃香”？</blockquote><p></p><p></p><p>目前，市面上有 200 多种编程语言可供我们选择，但其中哪些薪酬最为丰厚？</p><p></p><p>为了回答这个问题，国外网站 DevJobsScanner 分析了自 2021 年 10 月 1 日至 2022 年 10 月 1 日期间全球超 1000 万个开发岗位，得出了关于编程语言人才需求及薪酬水平的最新统计数字。</p><p></p><p>Let's deep on the top list 👇</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/34/34a1a03704eb57c3dcdefb31202d3cb4.png\" /></p><p></p><p></p><h2>Top 10 编程语言榜单</h2><p></p><p></p><p></p><h3>Top 1 - Solidity</h3><p></p><p></p><p>作为以太坊创始团队发明的语言，Solidity 近期确实受到了高度关注。由于掌握这门语言的人才数量有限，对应的薪酬也相当夸张。Solidity 是一种面向对象的高级编程语言，目前大部分区块链上运行的智能合约都是由它编写而成。</p><p></p><p>尽管平均年薪为 15.1 万美元，但也有少数报价达到了百万美元峰值。所以如果大家希望进军 Web3/ 区块链技术，那么 Solidity 将是必须掌握的语言选项。</p><p></p><p>平均年薪：约 15.1 万美元对应岗位（含年薪）: 417 个关键词：Solidity、区块链、Web3。</p><p></p><p></p><h3>Top2 - Rust</h3><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/4e/4e107d7ca8af926f3940d6745b124b23.jpeg\" /></p><p></p><p>Rust 对应的薪酬和市场人气都在不断提升。它与 C++ 类似，但拥有内存安全和安全并发等更高级的属性，这也使得 Rust 成为高性能大型应用程序的完美语言选项。</p><p></p><p>此外，Rust 近期在 Web3/ 区块链中也有应用。例如，Solana 合约就不是由 Solidity 编写，而是用 Rust 开发而成。</p><p></p><p>虽然 Rust 开发者的平均年薪为 14.4 万美元，但最高报价也能达到每年 50 万美元。</p><p></p><p>平均年薪：约 14.4 万美元对应岗位（含年薪）: 523 个关键词：Rust。</p><p></p><h3>Top3 - Scala</h3><p></p><p></p><p>Scala 同样跻身本次榜单的前三强。Scala 是一种结合了面向对象与函数式编程的高级语言，能够编译为 Java 字节码并在 Java 虚拟机（JVM）上运行。</p><p></p><p>Scala 的诞生初衷是为了解决 Java 中某些“缺陷”招来的批评。Scala 拥有强大的爱好者社区，完备的相关库也使其成为一门易于上手的语言。</p><p></p><p>虽然 Scala 开发者的平均年薪为 13 万美元，但少数报价仍达到了每年 40 万美元左右的峰值。</p><p></p><p>平均年薪：约 13 万美元对应岗位（含年薪）: 616 个关键词：Scala。</p><p></p><p></p><h3>Top4 - Ruby</h3><p></p><p></p><p>Ruby 语言已经流行多年，当下仍然热度可观。市场对 Ruby 的需求量很大，而且多数职位薪酬不菲。Ruby 主要用于 Web 开发，而且多与大名鼎鼎的 Ruby on Rails 框架配合使用。</p><p></p><p>与之配套的实用程序也不少，从脚本编写、原型设计到游戏开发（DragonRuby）都有涉猎。适用度如此之高的语言，学一学绝对不亏。另外，Ruby 也是一门高级语言，能够快速搞定应用开发需求（类似于 Python）。</p><p></p><p>平均年薪：约 12.4 万美元对应岗位（含年薪）: 5600 个关键词：Ruby、Ruby on Rails。</p><p></p><p></p><h3>Top5 - Go</h3><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/ca/ca3c45d201a0656bacf9bb123f74c57b.jpeg\" /></p><p></p><p>自 2007 年出自谷歌之手以来，Go 语言在这十余年间可谓叱咤风云。</p><p></p><p>它简单、易用而且能够快速完成任务。Go 设计深受 C 语言的影响，同时具备内存安全、垃圾回收和结构类型等增强要素。</p><p></p><p>平均年薪：约 11.6 万美元对应岗位（含年薪）: 2300 个关键词：Go。</p><p></p><h3>Top6 - Python</h3><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/72/7217119ff828dc0a306661fe32db0105.jpeg\" /></p><p></p><p>Python 是当前最流行的编程语言之一，在本次薪酬排名中位列第六。Python 是一种无类型的高级语言，也拥有全面完备的配套实用程序，从脚本设计到工具开发、再到用于编写完整 Web 应用程序的 Django 框架等等。另外，Python 在数据科学领域也有广泛应用。</p><p></p><p>虽然 Python 开发者的平均年薪为 11.4 万美元，但部分岗位的最高报价可以达到每年 50 万美元。</p><p></p><p>平均年薪：约 11.4 万美元对应岗位（含年薪）: 19000 个关键词：Python、Django、Flask。</p><p></p><p></p><h4>Top7 - Swift</h4><p></p><p></p><p>Swift 是由苹果开发的现代通用语言。虽然用途颇多，但最主要的应用还是开发 iOS 和 Mac 应用程序。</p><p>Swift 开发者的平均年薪为 11.4 万美元，但上限报价也能达到每年 23 万美元水平。</p><p></p><p>平均年薪：约 11.4 万美元对应岗位（含年薪）: 207 个关键词：Swift、iOS。</p><p></p><p></p><h4>Top8 - C/C++</h4><p></p><p></p><p>老牌语言 C/C++ 继续稳居第八，平均年薪约为 10.9 万美元。作为行业中的长青树，C++ 在电子游戏、服务器、数据库、太空探测器等各个领域均有应用，甚至在区块链生态系统中也有不俗表现——比特币和 Solidity 智能合约语言就是完全由 C++ 编写而成。</p><p></p><p>平均年薪：约 10.9 万美元对应岗位（含年薪）: 3400 个关键词：C、C++。</p><p></p><h3>Top9 - Java</h3><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/d8/d8a02322ae154497119bb894d3f8f1cc.jpeg\" /></p><p></p><p>Java 在本次榜单中位列第九。Java 对应的工作岗位大多要求具备极高的经验水平，而且 Spring 等 Java 框架也能开出颇具吸引力的薪酬数字。</p><p></p><p>目前，Java 开发者的平均年薪为 10.7 万美元。</p><p></p><p>平均年薪：约 10.7 万美元对应岗位（含年薪）: 22000 个关键词：Java</p><p></p><p></p><h3>Top10 - Javascript</h3><p></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/71/71f8e861c3fafe14ce17bbb2e12ac827.jpeg\" /></p><p></p><p>JavaScript 是一种高级编程语言，其最初应用就是大大降低了网站开发工作的上手难度。但如今，JavaScript 也被广泛用于编写 Node.js 或 Deno 上运行的完整后端。</p><p></p><p>JavaScript 开发者的平均年薪约为 10.5 万美元，但部分高薪岗位也能开出约 35 万美元的价码。</p><p></p><p>平均年薪：约 10.5 万美元对应岗位（含年薪）: 36000 个关键词：JavaScript、React、Vue、Angular、Nodejs。完整高薪语言榜单</p><p></p><p>下图所示，为各编程语言的平均年薪完整榜单。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/2b/2beabcfc57a7b8db8fe2c76e17ec64dc.jpeg\" /></p><p></p><p>备注：图中包含对应岗位不足 100 个（含年薪）的编程语言，但文章中并未计入。</p><p></p><p>岗位分布</p><p></p><p>下图所示的是经分析得出的编程岗位分布情况。大部分工作岗位集中在美国，但中国和欧洲的编程事业也颇具规模。&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/99/99513cf7a9435f2fd09dd3a3a9b9e9d8.jpeg\" /></p><p></p><p>另外，各国间的工资水平存在很大差异。在后续专题中，我们将重点关注特定国家 / 地区的工资水平。本次研究并未计入印度的数据。</p><p></p><p>原文链接：</p><p></p><p>https://www.devjobsscanner.com/blog/top-10-highest-paid-programming-languages-in-2022/</p>",
    "publish_time": "2022-10-20 13:49:18",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "上云“被坑”十年终放弃，寒冬里第一轮“下云潮”要来了？",
    "url": "https://www.infoq.cn/article/qoQ3V6JfENwWzmPG4fRe",
    "summary": "<p>Basecamp 是 37signals 旗下一款流行的基于云服务的项目管理软件，其用户囊括了来自五大洲的 166 个国家的超 75,000 个组织。Basecamp 的上云历程已经超过十年，而且其前两年发布的产品HEY也一直在云端运行。不过近日，Basecamp &amp; HEY 联合创始人 David Heinemeier Hansson 发文表示将要“下云”。</p><p>&nbsp;</p><p>“我们用过亚马逊云科技、也用过谷歌云，试过裸虚拟机、也体验了Kubernetes容器编排。我们知道云能提供哪些功能，其中大部分都有实际应用。现在我们终于得出结论：对于像我们这样一家增长稳定的中型企业来说，租赁基础设施资源总体上看是笔糟糕的买卖。云服务商做出的降低复杂性、控制运营成本等承诺从来就没能实现，所以我们正在筹划脱离云端、重归本地。”</p><p></p><h2>“从未适用于Basecamp”&nbsp;</h2><p></p><p></p><h4>高昂的云成本</h4><p></p><p>&nbsp;</p><p>“云计算在两种极端情况下确实大有裨益，但只有其中一种跟我们有关。”Hansson 解释道，首先是应用程序极其简单且流量很低的情况，这时选择完全托管服务确实能摆脱大部分复杂性要素。</p><p>&nbsp;</p><p>Heroku就是这样起步的，同是PaaS提供商的Render则证明这条路完全行得通。从零客户到少部分客户，云基础设施既是个良好的起点，也能在一段时期内帮助企业稳稳前行。但随着使用量的增加，账单也会水涨船高，并最终来到某个必须做出改变的时间节点。</p><p>&nbsp;</p><p>另一种就是负载波动几乎毫无规律可言。具体来讲，负载运行期间经常出现剧烈震荡或者高耸的峰值，但基准资源需求却只相当于峰值的一小部分。面对这种情况，大家确实不知道该部署10台服务器、还是100台服务器。于是乎，上云就是最好的选择。</p><p>&nbsp;</p><p>“我们在发布HEY的时候也属于这种情况。当时，突然有30万用户挤在三周之内注册试用我们的服务，这一规模远远大于我们预测的6个月3万用户。”Hansson 说道。</p><p>&nbsp;</p><p>但Hansson 表示，“这两种情况都不再适用于今天的我们，也从未适用于Basecamp。所以如果继续坚持在云端运行，我们相当于既用不上云服务的亮点，又要承担几乎荒谬的夸张溢价。这就像明明住得离地震带很远，却要花四分之一的房屋总价买保险一样。如果真能遇上大灾害，那这钱花得确实有道理。可问题是并没有，这完全是在浪费资源。”</p><p>&nbsp;</p><p>Hansson 以 HEY 为例解释道，公司每年需要为亚马逊的数据库（RDS）和搜索（ES）服务支付超50万美元。“确实，在为成千上万客户处理电子邮件时，肯定得分析和存储大量数据。但结合价格来看，这样的状态还是让我觉得很荒谬。大家知道每年50万美元预算能买到多少台功能强大的服务器吗？”</p><p>&nbsp;</p><p></p><h4>“按需计算“并没有更先进</h4><p></p><p>&nbsp;</p><p>“那样你就得自己管理服务器了。云服务多简单，省下的可都是劳动力成本！”面对可能到来的质疑，Hansson 先发制人：这么说的人肯定没尝试过在云端运行HEY或者Basecamp这类大规模服务。有些环节确实更简单，但有些环节反而更复杂。而且总体来讲，我还没听说过像我们这种体量的组织能单靠上云，就大幅削减自己的运营团队和日常开销。</p><p>&nbsp;</p><p>作为经营者，Hansson 表示“云厂商的营销手段确实高明”。讨论的另一方总有话说，比如“你至少不用自己打理那么多基础设施设备”或者“基础设施服务构成你的核心竞争力”之类。面对这些直击灵魂的发问，云似乎再次闪耀起夺目的光芒，让每个考虑运行自有服务器的决策者都像是活在上个时代的老顽固。</p><p>&nbsp;</p><p>但 Hansson 也指出，与此同时，亚马逊凭借租赁服务器赚取着惊人的利润。尽管一直在做容量和服务升级，但AWS的利润率仍然接近30%（总营收62.2亿美元，利润为18.5亿美元）。而且随着该公司表示“计划在未来将服务器的使用寿命由四年延长至五年，并将网络设备的使用寿命由五年延长至六年”，利润比例势必还会进一步上升。</p><p>&nbsp;</p><p>“我对亚马逊靠云业务赚钱没有意见，毕竟租计算设备本来就不便宜。只是云服务总喜欢搞一大堆专业术语，比如‘按需计算’，听起来很酷，感觉比‘租计算机’整整领先了一个世纪。但二者好像并没什么本质区别。”</p><p>&nbsp;</p><p>Hansson 进一步指出，“而且这不只是成本问题，更关乎我们未来要如何运营整个互联网。令人震惊的是，云计算这一堪称人类社会奇观的产物，居然只能运行在少数几家巨头厂商的基础设施当中。如果AWS的某个主区域出现故障，似乎会有近半数网站随之离线。DARPA当初规划互联网的时候，恐怕也想不到会有这样的结果。”</p><p>&nbsp;</p><p>基于以上原因，37signals 觉得有必要带来点不一样的声音。Hansson 表示，Basecamp 多年的商业模式跟自有硬件都能良好协同，业务的增长轨迹也有很好的可预测性。而且即使是用了亚马逊或者谷歌云，也还是得设置专业员工才能操作服务商那边的设备。“相信不只我们，还有很多企业都面临着类似的情况。”</p><p>&nbsp;</p><p>“而要想让互联网回归那片成本更低、去中心化度更高的净土之前，我们先得学会从云服务商的那套营销话术中脱离出来。在云计算普及之前，大家都在运行自有服务器，其实连不少号称云优势的功能也完全可以用在本地设施当中。所以千万别被云宣传蒙蔽了双眼，运行自有设施其实没那么可怕。当初我们就是这样一步步走了，才有了如今繁荣兴盛的互联网时代。”Hansson 说道。</p><p>&nbsp;</p><p>Hansson 的决定也引发了开发者们的讨论。其中“降低复杂性、控制运营成本等承诺从来就没实现”这一点也戳中了开发者们敏感的神经。</p><p>&nbsp;</p><p>“仪表板是一个迷宫，许多非常常见的用例都要求您协调部署多个名称奇怪的产品。当云计算在 10 多年前刚出现时，复杂性是可以被原谅的，但从那时起，确实并没有变得更容易使用。”Reddit 账户名为“<a href=\"https://www.reddit.com/r/programming/comments/y7zz2u/dhh_why_we_are_leaving_the_cloud/\">50653</a>\"”的开发者道对某云产品吐槽道，“我不会推荐裸机服务器，但我认为中小型公司应该考虑这个云产品的替代品，其中大多数都更容易使用。”</p><p>&nbsp;</p><p>开发者“mwassler”对此表示赞同。“我认为我对这个产品相当了解，有时我用它帮助我所在地区的小公司，我无法告诉你我经常进入某人的仪表盘，他们每个月花费数千美元来托管一些每天收到几千个请求的服务……拥有开发公司的人将他们的登录信息提供给没有经验的开发者，让他们去做任何想做的事情，然后他们进入那里就变得疯狂。我见过有人多年来运行默认大小的实例，但这些实例没有提供流量，某些开发人员只是在某天准备了一些。”</p><p>&nbsp;</p><p>还有开发者评论道，“IT 一直存在集中化（入站）和分发（出站）的循环。服务提供商怎么会每 5～10 年卖给你同样的东西呢。”</p><p>&nbsp;</p><p></p><h2>没有“下云”成功的GitLab</h2><p></p><p>&nbsp;</p><p>实际上，Basecamp 并非第一家想要“下云”的企业。GitLab&nbsp;在<a href=\"https://about.gitlab.com/blog/2016/11/10/why-choose-bare-metal/?\">2016年底</a>\"时候就表示计划要“下云”，不过团队“在收到数百条充满建议和警告的评论和邮件后，<a href=\"https://gitlab.com/gitlab-com/infrastructure/issues/727#note_20044060\">最后还是决定</a>\"将 GitLab.com 保留在云端。</p><p>&nbsp;</p><p>GitLab对存储需求较高，因此当时建了一个 CephFS 集群来解决 NFS 的容量和性能问题。但在将大量项目、用户和 CI 工件加载到 CephFS 上运行一段时间后，GitLab发现，CephFS 为了正常运行需要非常快速地读写很多东西，因此其对底层基础设施的性能有非常高的要求。如果其中一台主机延迟写入日志，则队列的其余部分将单独等待该操作，整个文件系统将被阻塞。</p><p>&nbsp;</p><p>另一方面，CephFS 还遵从CAP定理，因此会放弃可用性以换取一致性。如果对系统施加很大压力，那么它会产生热点。例如高负载时，在托管 GitLab CE 存储库的机器集群中，所有读取和写入最终会间出现在同一个位置。GitLab认为，由于GitLab 将系统托管在没有 IO 延迟最低 SLA 的云上，这个问题被放大了。</p><p>&nbsp;</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/bf/bf6c4446c4f45547f79f1500b9f0280b.png\" /></p><p></p><p>GitLab 当时的 OSD 日志延迟</p><p>&nbsp;</p><p>GitLab这一计划发出来后也引发了社区的热烈讨论，大家纷纷就GitLab面临的问题进行了探讨，GitLab 首席执行官 Sid Sijbrandij 也认真听取了社区的意见。</p><p>&nbsp;</p><p>Sid 还与一位将多家公司从云端带到裸机领域的人士进行了长谈，他得到的<a href=\"https://gitlab.com/gitlab-com/gl-infra/reliability/-/issues/727#note_20044060\">建议</a>\"是：除非绝对需要，否则不要这么做，即使是将自定义为提供托管服务的公司也不应该这样做。正确处理硬件需要的专业知识庞大、昂贵且难以获得，这意味着要雇佣服务器、网络、备份、安全、电力等方面的专家。</p><p>&nbsp;</p><p>“这与我们董事会成员看到的其他公司情况相似，上述工作花费了他们70%的工程量。对我们来说，首要任务是制作一个大多数人自己托管的出色工具。我们不能让托管主导我们的组织。”Sid 表示。</p><p>&nbsp;</p><p>最后，GitLab 决定将所有存储分散到多个NFS分片（NFS shard），并删除了堆栈中的CephFS，同时创建了<a href=\"https://gitlab.com/gitlab-org/gitaly\">Gitaly</a>\"，这样就不必依赖NFS实现横向扩展，并可以通过缓存来加速Git访问。</p><p></p><h2>结束语</h2><p></p><p>&nbsp;</p><p>在过去的五年中，云计算行业蓬勃发展，加上很多企业在疫情之初开始进行数字化转型，云计算更是“风生水起”。但由于市场动荡、对潜在经济衰退的担忧，企业承担着越来越大的财务和运营压力。据悉，苹果公司每月花在亚马逊云计算上的费用就超过了 3000 万美元。</p><p>&nbsp;</p><p>因此，在人人都讲降本增效的今天，高昂的云计算成本能否带来同样高的回报也成为企业重要的考量。但现实可能是，云计算可能并未给大多数企业带来想象中的收益。</p><p>&nbsp;</p><p>Wanclouds 研究显示，81% 的 IT 管理者表示，随着成本飙升和市场下行，他们的最高管理层已经指示他们要减少或不承担额外的云支出。根据调研结果，39% 的人已经决定将大量的云消耗和高性能工作负载迁移或留在本地，还有 29% 的人表示在 2022 年上半年由于价格贵而更换了公有云厂商。</p><p>&nbsp;</p><p>未来，各种各样的压力是否会逼迫企业开始纷纷“下云”？我们对此也将持续关注。</p><p>&nbsp;</p><p>&nbsp;</p><p>参考链接：</p><p><a href=\"https://world.hey.com/dhh/why-we-re-leaving-the-cloud-654b47e0\">https://world.hey.com/dhh/why-we-re-leaving-the-cloud-654b47e0</a>\"</p><p><a href=\"https://about.gitlab.com/blog/2016/11/10/why-choose-bare-metal/?\">https://about.gitlab.com/blog/2016/11/10/why-choose-bare-metal/?</a>\"</p><p><a href=\"https://www.infoq.cn/news/mMtEqAXuvF7Weml1GROL\">https://www.infoq.cn/news/mMtEqAXuvF7Weml1GROL</a>\"</p><p>&nbsp;</p><p>&nbsp;</p>",
    "publish_time": "2022-10-20 15:00:03",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Apache Doris 极致性能背后的黑科技与技术实现",
    "url": "https://www.infoq.cn/article/45SWKZgG1z7Xh0bHFRvK",
    "summary": "<h1>直播简介</h1>\n<p>Apache Doris 是一个基于 MPP 架构的高性能分析型数据库，近些年以来凭借其极致性能和极简易用的特性备受业内瞩目，在全球范围内俘获了近千家企业用户的认可，被广泛应用于 OLAP 分析、实时数仓、统一湖仓等场景中。与此同时，基于 Apache Doris 打造的新一代云原生实时数仓 SelectDB ，也于近期登顶了由 Clickhouse 发起的分析型数据库性能排行榜 ClickBench，性能超越一种国内外竞品、多项指标位列全球第一。</p>\n<p>是什么样的技术支撑了 Apache Doris 达到如此极致的性能？背后还有哪些不为人知的黑科技？本次分享将为大家揭秘，Apache Doris 极致性能背后的关键技术实现。</p>\n<h1>听众受益</h1>\n<p>了解 Apache Doris 的存储引擎以及查询执行模型；<br />\n了解 Apache Doris 在内存管理、并发控制、编译执行方面的优化；<br />\n即将到来的 Apache Doris 1.2 的功能特性。</p>\n<h1>适合人群</h1>\n<p>数据分析、大数据、数据库方向的研发工程师、产品经理、数据分析师、技术管理者以及相关从业人员。</p>",
    "publish_time": "2022-10-20 15:31:38",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "星汉未来云原生IT成本优化白皮书",
    "url": "https://www.infoq.cn/article/L5PCQs31cSDQCuMaylDH",
    "summary": "<p>在互联网早期迅速发展时，相关领域企业更多注重于扩展业务，为了迅速占领市场，往往会投入较高的成本。然而，随着互联网人口红利逐渐消退，以及近几年的疫情影响，越来越多企业开始重视成本管理，从“粗放式经营”转变为“精细化运营”模式，成本优化成为企业重点关注事项。<br />\n本文将从一位中型企业运维总监的视角来展现一个较完整的成本优化实战案例，希望为读者提供可参考借鉴的成本优化思路。<br />\n降本实战案例背景<br />\n本文的主人公小王（化名）在某电商公司担任运维总监，他所在公司自建 IDC 机房，其中总共 1000 台业务服务器（在线 + 离线），由 3 名运维人员管理。机器规格大部分为 8 核 32G，整体 CPU 利用率仅 10% 左右，每年花销在 1000 万以上。<br />\nCTO 希望在现有业务市场条件不变的情况下，以业务稳定性为基本前提，将 IT 成本降低至少 30%，且将此定为小王今年的 KPI。<br />\n第一阶段<br />\n上云 + 公有云厂商 / 算力品牌对比选择<br />\n收到任务后，小王先将 IT 成本拆解为算力成本和人力成本两个部分。<br />\n目前 IT 成本主要由自建 IDC 机房承载，存在如下问题：<br />\n1.自建 IDC 机房机器数量缺乏弹性机制，不便于后期对算力做灵活伸缩；<br />\n2.自建 IDC 机房机器进入摊销末期，机型老旧且故障频繁，运维人力成本高。<br />\n基于以上分析，考虑到公有云机型更新便捷、基本免维护、可弹性的特点，小王计划先将业务迁移上云。<br />\n目前云厂商主要提供了预留实例（包年包月）、按需实例（弹性）、竞价实例三种方式：<br />\n1、包年包月：主要针对中长期稳定需求，优点是价格整体比较低，缺点是资源必须长期持有，灵活性差；<br />\n2、按需实例：针对短期弹性需求，按秒计费，灵活精准，避免浪费，但价格比较高；<br />\n3、竞价实例：以一定幅度的折扣购买，但可能会随时被系统自动回收的实例。价格最低可达到按需实例价格的 10%。由于此类实例随时可能被抢占，所以需要部署的服务应当尽量为无状态服务且有完备的保活和流量调配机制。<br />\n为确保系统稳定且尽量减少研发感知，小王先后采取了以下几项措施：<br />\n1.将大部分无状态在线服务和一部分离线服务所在的大概 800 台机器，以包年包月的形式迁移到同等配置的公有云机器上；<br />\n2.腾退相应私有机房机器，并将公有云与私有机房通过专线打通。这样既能保证在线服务上云之后的快速伸缩，又能兼顾数据传输成本及安全方面的考量；<br />\n3.接入公有云相应的部署发布、监控告警、限流自愈等附属功能，从而节省出一个运维的人力。<br />\n在上云过程中，小王一方面根据公司需求对比多家公有云厂商后选择最匹配的云资源，另一方面将 CPU 品牌从 Intel 换成 AMD，两者叠加后，降低了 7% 左右的成本。</p>",
    "publish_time": "2022-10-20 15:45:07",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "谷歌旗下开源Go 应用程序容器项目 ko 申请成为 CNCF 沙盒项目",
    "url": "https://www.infoq.cn/article/F9z3g4r3MzWgl6AkQFUv",
    "summary": "<p>当地时间10月18日，谷歌开源博客 <a href=\"https://opensource.googleblog.com/2022/10/ko-applies-to-become-a-cncf-sandbox-project.html\">发文</a>\"称，ko 申请成为 CNCF 沙盒项目。</p><p>&nbsp;</p><p>ko 是一个 Go 应用程序容器镜像构建器，适用于镜像包含单个 Go 应用程序、而对 OS 基础镜像没有很多依赖项（如没有 cgo 或 OS 包依赖项）的用例。ko 通过在本地机器上有效地执行 go build 来构建图像，因此不需要 docker。ko 也适合轻量级 CI/CD 用例，因为它具有多平台支持和自动 SBOM 生成功能。</p><p>&nbsp;</p><p>据悉，早在 2018 年，谷歌的 Knative 团队就需要一种更快的方法来迭代 Kubernetes 控制器。他们创建了一个新工具，专门用于将 Go 应用程序部署到 Kubernetes，而无需担心容器镜像。该工具在被证明是 Knative 社区不可或缺的工具后，谷歌在 2019 年 3 月将其作为一个名为 ko 的独立开源项目发布。</p><p>&nbsp;</p><p>GitHub地址：</p><p><a href=\"https://github.com/ko-build/ko\">https://github.com/ko-build/ko</a>\"</p><p>&nbsp;</p><p>为了支持下一阶段的社区驱动创新、启用全新的采用模式，并进一步提高容器工具行业的标准，ko 需要一个供应商中立的基础。”ko项目社区代表 Mark Chmarny表示，“我们相信 CNCF 是 ko 能够满足社区不断变化需求的正确基础。成为 CNCF 的一部分，将使 ko 社区更接近生态系统中的其他云原生项目，包括许多已经依赖于 ko 的项目。在同一个基金会将使ko能够更好地合作，并有可能随着时间的推移提高反馈和创新的速度。”</p><p>&nbsp;</p><p>有趣的是，根据外媒<a href=\"https://www.theregister.com/2022/10/19/google_go_container_cncf/\">theRegister</a>\"报道，谷歌开源博客上此前有篇文章的表述是“谷歌将 ko 工具捐赠给CNCF，该工具用于简单、快速和安全的容器映像构建。”随后，这篇文章被删掉，并重新发布了标题更谨慎文章：ko 申请成为CNCF沙盒项目。外媒根据GitHub上的一个讨论猜测，这可能只是由于对CNCF沙盒提交过程的误解造成的。</p><p>&nbsp;</p><p>不过，该文章作者也提出疑问：这是否可能意味着谷歌内部对 Go 的热情减弱。</p><p>&nbsp;</p><p>事实上，今年 7 月，谷歌 Go 语言项目负责人 <a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651128799&amp;idx=1&amp;sn=000b87e6361cc73d3aaff1403958a1ab&amp;chksm=bdb8fb8c8acf729a2d08c68931d415a2c229fea65ebb372aec3cb760bb0e99b4c8d267c5ca1b&amp;scene=27#wechat_redirect\">Steve Francia 就宣布辞去职务</a>\"。Steve Francia 在圈内名气很高，他既曾是知名开源项目 Docker 和 MongoDB 的核心负责人，另外还是 spf13-vim、Hugo、Cobra、Viper 等开源项目的作者。</p><p>&nbsp;</p><p>Steve Francia 在 2016 年 9 月宣布加入 Go 团队至今已有 6 年，这次决定离职是因为感到自己在 Go 项目上“停滞不前”。“在当初刚刚加入时，我疯狂消化着谷歌和 Go 带来的知识盛宴。但如今，我很久没有学习新东西了。虽然我仍然喜欢团队和当前手上的工作，可这种停滞不前的感觉实在让人难以接受。随着具有里程碑意义的 Go 1.18 版本的发布，我感到自己在 Go 团队的使命已经完成。”Steve表示。</p><p>&nbsp;</p><p>另一方面，Rust 得到了谷歌更多的关注和社区的支持。谷歌的新 <a href=\"https://www.infoq.cn/article/bsUPti0p4VODQ19JdPeU\">KataOS</a>\" 几乎完全用 Rust 编写。</p>",
    "publish_time": "2022-10-20 16:17:17",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "程序员的演讲技巧：如何防止听众睡着｜InfoQ大会早班车第24期",
    "url": "https://www.infoq.cn/article/EEHhcF4Bed57JHpUwLIh",
    "summary": "<p>外部分享和内部分享有什么区别，如何防止把外部分享做成晋升答辩？程序员演讲容易犯哪些错误？本次大会早班车邀请到InfoQ技术大会明星讲师，一起来听一听他的故事。</p>",
    "publish_time": "2022-10-20 16:23:55",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "联想全球IT团队借助RPA，提高了人效和工作准确性",
    "url": "https://www.infoq.cn/article/8Fj3YKLJ3LOeXCj8cIPt",
    "summary": "<p>据悉，最近联想全球IT团队通过在全球实施企业自动化软件公司&nbsp;UiPath&nbsp;提供的自动化技术，显着提高了生产力和效率。</p><p>&nbsp;</p><p>其实，联想在实施其制定的&nbsp;3S&nbsp;<a href=\"https://www.infoq.cn/article/JNfLGU0VKzUVbz3emqsj\">战略</a>\"（智能物联网、智能基础设施和智能垂直领域）的过程中，一直在进行企业范围的<a href=\"https://www.infoq.cn/topic/1160\">数字化转型</a>\"。联想集团IT<a href=\"https://www.infoq.cn/article/Jriip7o7YTtNy57fzJkQ\">数字化</a>\"转型的成功，得益于企业自动化、<a href=\"https://www.infoq.cn/topic/AI\">人工智能</a>\"、机器学习等集成技术的强强融合与应用。</p><p>&nbsp;</p><p>随着组织的发展，员工需求的不断变化，联想的全球&nbsp;IT&nbsp;团队意识到企业自动化在简化工作流程、提高准确性和让员工专注于更多增值任务方面具有很大的潜力。</p><p>&nbsp;</p><p>在人力资源领域，管理庞大的员工队伍导致全球人力资源团队的工作量很大，人力日常工作经常涉及跨系统操作、重复人工录入、人工核对等“人工密集型”工作，常见任务的示例包括个人所得税申报、考勤数据验证、招聘流程等。这些任务是重复的、乏味的、耗时的并且还容易出错。</p><p>&nbsp;</p><p>出于这些原因，联想全球&nbsp;IT&nbsp;一直在寻找解决方案，以实现更高水平的数字化转型，以简化人力资源部门的工作流程。其中，应用<a href=\"https://xie.infoq.cn/article/382873b96366bbc86379e0526\">RPA</a>\"（Robotic&nbsp;Process&nbsp;Automation)&nbsp;是企业的主要选择之一，而筛选适当的流程则是&nbsp;RPA取得成功的第一步。因此，联想优先考虑的是，可优化的流程有哪些，然后根据投资回报（ROI）对这些流程进行“量化”。</p><p>&nbsp;</p><p>根据HR团队定义的“痛点”，联想目前选择了个人所得税申报、业务费用报销、工资核算这三个关键领域部署RPA。</p><p>&nbsp;</p><p>首先，个人所得税申报一直是HR团队的一项重要而繁琐的工作。整理数百份文件，完成重复的涉税操作，需要耗费大量的时间和工时，整个过程琐碎而复杂。</p><p>&nbsp;</p><p>联想打造了一款报税RPA，可以自动下载数据，生成个人所得税档案，将个税档案上传到个税系统，然后进行申报和验证，一旦出现异常自动重新运行。HR&nbsp;利用IT&nbsp;技术，简化了个人所得税申报流程，降低了此流程所需的成本和时间。</p><p>&nbsp;</p><p>其次，在联想传统的报销流程中，员工需要先填写表格，在系统中提交报销申请，下载并打印批准的文件，再发送给财务部门。这种手动过程效率低下，质量也低于标准。</p><p>&nbsp;</p><p>而如今，RPA可以通过光学字符识别（OCR）软件识别发票并自动生成、上传和提交文件，实现节省90%以上的时间，识别准确率提升近99%，整个报销的验证质量和流程时效性均得到大幅提升。</p><p>&nbsp;</p><p>最后，在工资核算方面，联想人力资源团队每个月都需要为近&nbsp;100&nbsp;个国家/地区的数百个法人实体的员工计算和验证员工考勤和工资单。这项任务涉及大量重复的人工计算、验证以及跨系统和平台的多次操作，非常耗费人力和时间。</p><p>&nbsp;</p><p>而RPA则以实现高度可视化、结构化和数字化的工资计算流程，有助于以高效便捷的方式跟踪员工出勤情况。</p><p>&nbsp;</p><p>综上来看，企业自动化技术帮助联想显著提高了<a href=\"https://www.infoq.cn/article/mfcsP6wws312tLTcrPCl\">数据</a>\"的准确性，降低了错误数据输入的倾向。自从实施RPA以来，联想在这些领域没有遇到任何业务失误，不仅效率提升了五到八倍，而且确保了纳税申报和工资支付的及时性。这说明HR&nbsp;团队每年至少可以节省&nbsp;6,000&nbsp;小时，让他们腾出时间去做更多增值工作。</p><p>&nbsp;</p><p>“RPA&nbsp;将我们的资源从重复的手动操作中解放出来。不仅是在工作量方面，对我们员工来说，同时也是一种精神释放。”联想中国人力资源总监分享道。</p><p>&nbsp;</p><p>未来，联想也希望进一步深化RPA的应用。联想人力资源战略运营副总裁也公开表示，“未来RPA需求会有更多，我们期待&nbsp;HR&nbsp;Ops&nbsp;任务能够更加自动化和智能化。”</p><p>&nbsp;</p><p>参考资料：</p><p><a href=\"https://www.businesswire.com/news/home/20221017005856/en/Lenovo-Global-IT-Ramps-Up-HR-Digital-Transformation-with-UiPath-Automation-Technologies-Globally\">https://www.businesswire.com/news/home/20221017005856/en/Lenovo-Global-IT-Ramps-Up-HR-Digital-Transformation-with-UiPath-Automation-Technologies-Globally</a>\"</p><p><a href=\"https://www.uipath.com/resources/automation-case-studies/lenovo-rpa-release-hyperautomation-value\">https://www.uipath.com/resources/automation-case-studies/lenovo-rpa-release-hyperautomation-value</a>\"</p><p>&nbsp;</p>",
    "publish_time": "2022-10-20 16:39:26",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]