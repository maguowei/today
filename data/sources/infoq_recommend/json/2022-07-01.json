[
  {
    "title": "Java近期新闻：Classfile API草案、Spring Boot、GlassFish、Reactor项目、Micronaut",
    "url": "https://www.infoq.cn/article/6I2dgNKIQSr3eA9ge0fU",
    "summary": "<p>Java近期新闻综述，内容主要涉及OpenJDK、JDK 19、JDK 20、Spring点版本、GlassFish 7.0.0-M6、GraalVM Native Build Tools 0.9.12、Micronaut 3.5.2、Quarkus 2.10.0、Reactor 2022.0.0-M3、Apache Camel Quarkus 2.10.0及Apache Tika 2.4.1版本和1.28.4版本。</p><p></p><h3>OpenJDK</h3><p></p><p>最近，甲骨文公司Java语言架构师<a href=\"https://www.linkedin.com/in/briangoetz/\">Brian Goetz</a>\"<a href=\"https://mail.openjdk.org/pipermail/discuss/2022-June/006131.html\">更新</a>\"了JEP草案828039，即<a href=\"https://openjdk.org/jeps/8280389\">Classfile API</a>\"，提供了一些背景信息，关于该草案将如何发展并最终取代Java字节码操作和分析框架<a href=\"https://asm.ow2.io/\">ASM</a>\"，Goetz将其描述为“一个有大量遗留问题的旧代码库”。该JEP提议提供一个API，用于解析、生成和转换Java类文件。它最初将在JDK中作为ASM的内部替代品，并计划作为一个公共API开放。</p><p></p><h3>JDK 19</h3><p></p><p>JDK 19<a href=\"https://jdk.java.net/19\">早期访问构建</a>\"的<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-19%2B28\">Build 28</a>\"在上周发布，它是Build 27的<a href=\"https://github.com/openjdk/jdk/compare/jdk-19%2B27...jdk-19%2B28\">升级</a>\"，修复了各种<a href=\"https://bugs.openjdk.java.net/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2019%20and%20%22resolved%20in%20build%22%20%3D%20b28%20order%20by%20component%2C%20subcomponent\">问题</a>\"。要了解更多细节信息，请查看<a href=\"https://jdk.java.net/19/release-notes\">发布说明</a>\"。</p><p></p><h3>JDK 20</h3><p></p><p>JDK 20<a href=\"https://jdk.java.net/20/\">早期访问构建</a>\"的<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-20%2B3\">Build 3</a>\"在上周发布，它是Build 2的<a href=\"https://github.com/openjdk/jdk/compare/jdk-20%2B2...jdk-20%2B3\">升级</a>\"，修复了各种<a href=\"https://bugs.openjdk.java.net/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2020%20and%20%22resolved%20in%20build%22%20%3D%20b03%20order%20by%20component%2C%20subcomponent\">问题</a>\"。发布说明尚未提供。</p><p>&nbsp;</p><p>对于<a href=\"https://openjdk.java.net/projects/jdk/19\">JDK 19</a>\"和<a href=\"https://openjdk.java.net/projects/jdk/20/\">JDK 20</a>\"，我们鼓励开发者通过<a href=\"https://bugreport.java.com/bugreport/\">Java Bug数据库</a>\"报告缺陷。</p><p></p><h3>Spring Framework</h3><p></p><p>Spring Boot 2.7.1<a href=\"https://spring.io/blog/2022/06/23/spring-boot-2-7-1-available-now\">发布</a>\"，其中包括66项Bug修复、文档改进和依赖升级，比如：Spring Framework 5.3.21、Spring Data 2021.2.1、Spring Security 5.7.2、Reactive Streams 1.0.4、Groovy 3.0.11、Hazelcast 5.1.2和Kotlin Coroutines 1.6.3。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.7.1\">发布说明</a>\"。</p><p>&nbsp;</p><p>Spring Boot 2.6.9发布，其中包括44项Bug修复、文档改进以及与Spring Boot 2.7.1类似的依赖升级。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.9\">发布说明</a>\"。</p><p>&nbsp;</p><p>VMware<a href=\"https://spring.io/blog/2022/06/20/spring-data-mongodb-spel-expression-injection-vulnerability-cve-2022-22980\">发布</a>\"了CVE-2022-22980：<a href=\"https://tanzu.vmware.com/security/cve-2022-22980\">Spring Data MongoDB SpEL表达式注入漏洞</a>\"。由于这个漏洞的存在，“Spring Data MongoDB应用程序在使用@Query或@Aggregation标注的查询方法时，如果没有对输入做无害化处理，那么含有查询参数占位符的SpEL表达式就容易发生SpEL注入”。Spring Data MongoDB 3.4.1和3.3.5版本已经修复了这个漏洞。</p><p>&nbsp;</p><p>Spring Data 2021.2.1和2021.1.5版本<a href=\"https://spring.io/blog/2022/06/20/spring-data-2021-2-1-and-2021-1-5-released\">发布</a>\"，对所有Spring Data子项目进行了升级，如Spring Data MongoDB、Spring Data Cassandra、Spring Data JDBC和Spring Data Commons。Spring Boot 2.7.1和2.6.9将使用相应的版本，并解决上述漏洞CVE-2022-22980。</p><p>&nbsp;</p><p>Spring Authorization Server 0.3.1<a href=\"https://spring.io/blog/2022/06/20/spring-authorization-server-0-3-1-available-now\">发布</a>\"，提供了一些功能增强和Bug修复。然而，团队决定从JDK 11降级到JDK 8，以保持与Spring Framework、Spring Security 5.x和Spring Boot 2.x的兼容性和一致性。因此，<a href=\"https://hsqldb.org/\">HyperSQL</a>\"（HSQLDB）依赖也被降级到2.5.2版本，因为HSQLDB 2.6.0及以上版本需要JDK 11。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/spring-projects/spring-authorization-server/releases/tag/0.3.1\">发布说明</a>\"。</p><p>&nbsp;</p><p>Spring Security 5.7.2和5.6.6版本<a href=\"https://spring.io/blog/2022/06/20/spring-security-5-7-2-and-5-6-6-available-now\">发布</a>\"，提供了Bug修复和依赖升级。这两个版本有一个共同的新特性，即测试示例已经更新为使用JUnit Jupiter（它是<a href=\"https://junit.org/junit5/docs/current/user-guide/\">JUnit 5</a>\"的一部分）。要了解关于这两个版本的更多细节，请查看<a href=\"https://github.com/spring-projects/spring-security/releases/tag/5.7.2\">5.7.2</a>\"和<a href=\"https://github.com/spring-projects/spring-security/releases/tag/5.6.6\">5.6.6</a>\"版本的发布说明。</p><p></p><h3>Eclipse GlassFish</h3><p></p><p>在通往GlassFish 7.0.0的道路上，Eclipse基金会发布了<a href=\"https://twitter.com/OmniFishEE/status/1538934362326061058\">第六个里程碑版本</a>\"，它提供了一些变更，为的是通过<a href=\"https://jakarta.ee/specifications/cdi/4.0/\">Jakarta Contexts Dependency Injection 4.0</a>\"以及<a href=\"https://jakarta.ee/specifications/concurrency/3.0/\">Jakarta Concurrency 3.0</a>\"规范的技术兼容工具包（TCK）测试。不过，这个里程碑版本还没有完全通过Jakarta EE 10 TCK。GlassFish 7.0.0-M6还是一个Beta测试版本，可在JDK 11至JDK 18上编译和运行。要了解关于这个版本的更多细节，可以查看<a href=\"https://github.com/eclipse-ee4j/glassfish/releases/tag/7.0.0-M6\">发布说明</a>\"。</p><p></p><h3>GraalVM Native Build Tools</h3><p></p><p>在通往1.0版本的道路上，<a href=\"https://labs.oracle.com/\">Oracle实验室</a>\"发布了<a href=\"https://github.com/graalvm/native-build-tools/blob/master/README.md\">Native Build Tools</a>\"的<a href=\"https://github.com/graalvm/native-build-tools/releases/tag/0.9.12\">0.9.12版本</a>\"。这是一个GralVM项目，提供可以与GralVM Native Image互操作的插件。这个最新版本提供了：Mockito和Byte Buddy的支持文档；防止在没有提供测试列表的情况下构建失败；在Gradle插件native-image中支持不同的代理模式，这是一个破坏性的变化；支持Maven中的JVM Reachability Metadata。要了解关于这个版本的更多细节，请查看<a href=\"https://graalvm.github.io/native-build-tools/latest/index.html#changelog\">发布说明</a>\"。</p><p></p><h3>Micronaut</h3><p></p><p>Micronaut基金会<a href=\"https://micronaut.io/2022/06/21/micronaut-framework-3-5-2-released/\">发布</a>\"了Micronaut 3.5.2，带来了Bug修复以及<a href=\"https://github.com/micronaut-projects/micronaut-oracle-cloud/releases/tag/v2.1.4\">Micronaut Oracle Cloud 2.1.4</a>\"、<a href=\"https://github.com/micronaut-projects/micronaut-email/releases/tag/v1.2.3\">Micronaut Email 1.2.3</a>\"和<a href=\"https://github.com/micronaut-projects/micronaut-spring/releases/tag/v4.1.1\">Micronaut Spring 4.1.1</a>\"项目的点版本。ApplicationContextConfigurer接口的文档也进行了更新，提供了如何定义<a href=\"https://docs.micronaut.io/latest/guide/#_default_environment\">默认Micronaut环境</a>\"的建议。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/micronaut-projects/micronaut-core/releases/tag/v3.5.2\">发布说明</a>\"。</p><p></p><h3>Quarkus</h3><p></p><p>红帽公司<a href=\"https://quarkus.io/blog/quarkus-2-10-0-final-released/\">发布</a>\"了Quarkus 2.10.0.Final，新特性包括：来自Loom项目的有关虚拟线程（<a href=\"https://openjdk.org/jeps/425\">JEP 425</a>\"）的初步工作；在GraphQL扩展中支持非阻塞工作负载；依赖升级到SmallRye Reactive Messaging 3.16.0；增加Reactive SQL Clients扩展Kubernetes服务绑定支持；新契约CacheKeyGenerator，允许自定义从方法参数生成的缓存密钥。</p><p></p><h3>Reactor项目</h3><p></p><p>在Reactor项目通往2022.0.0版本的道路上，<a href=\"https://github.com/reactor/reactor/releases/tag/2022.0.0-M3\">第三个里程碑版本</a>\"发布。它主要是将依赖项升级到reactor-core 3.5.0-M3、reactor-pool 1.0.0-M3、reactor-netty 1.1.0-M3、reactor-addons 3.5.0-M3和reactor-kotlin-extensions 1.2.0-M3。</p><p></p><h3>Apache Camel Quarkus</h3><p></p><p>为了与Quarkus保持一致，Apache软件基金会<a href=\"https://camel.apache.org/blog/2022/06/camel-quarkus-release-2.10.0/\">发布</a>\"了Camel Quarkus 2.10.0，其中包含Camel 3.17.0和Quarkus 2.10.0.Final。新特性包括：新增扩展<a href=\"https://camel.apache.org/camel-quarkus/2.10.x/reference/extensions/azure-key-vault.html\">Azure Key Vault</a>\"和<a href=\"https://camel.apache.org/camel-quarkus/2.10.x/reference/extensions/datasonnet.html\">DataSonnet</a>\"；删除Camel 3.17.0中被废弃的扩展。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/apache/camel-quarkus/milestone/28?closed=1\">问题列表</a>\"。</p><p></p><h3>Apache Tika</h3><p></p><p><a href=\"https://tika.apache.org/\">Apache Tika</a>\"团队<a href=\"https://www.mail-archive.com/announce@apache.org/msg07401.html\">发布</a>\"了其元数据提取工具包的2.4.1版本。它以前是<a href=\"https://lucene.apache.org/\">Apache Lucene</a>\"的一个子项目，这个最新版本提升了定制和配置能力，例如：给TikaServerCli类增加一个stop()方法，这样它就可以和Apache Commons Daemon一起执行；允许在TikaResource类中把Content-Length头传递给元数据；支持用户把系统属性从分叉进程扩展到分叉的tika-server进程。</p><p>&nbsp;</p><p>Apache Tika 1.28.4也已<a href=\"https://www.mail-archive.com/announce@apache.org/msg07402.html\">发布</a>\"，提供了安全修复和依赖升级。要了解关于这个版本的更多细节，请查看<a href=\"https://www.apache.org/dist/tika/1.28.4/CHANGES-1.28.4.txt\">更新日志</a>\"。1.x版本序列将在2022年9月30日到达生命周期的终点。</p><p>&nbsp;</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/06/java-news-roundup-jun20-2022/\">Java News Roundup: Classfile API Draft, Spring Boot, GlassFish, Project Reactor, Micronaut</a>\"</p>",
    "publish_time": "2022-07-01 09:09:56",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "自研开源 Blazor 组件库路上，我们解决了这些重要挑战",
    "url": "https://www.infoq.cn/article/e9JUlCpL2DTRslaXvpvZ",
    "summary": "<p>采访嘉宾 | 谷首道、曹尤先</p><p>编辑 | 闫园园</p><p>&nbsp;</p><p>随着 Web 开发的日趋复杂，框架和组件库的应用可谓是越来越多。然而，当开发者打开搜索引擎搜索相关概念时，会发现如今的框架和组件库已是“满天飞”，它们各有优势，但也各有不足。因此，到底应该再造轮子还是选择已有工具，选择已有工具时又该如何根据自己的项目需求进行抉择，这其中种种问题对很多团队来说渐渐成为主要挑战。</p><p>&nbsp;</p><p>MASA 技术团队，成立于 2021 年，其自主研发的 MASA&nbsp;Blazor 是一个基于 Blazor Component 和 Material Design 的 UI 组件库，目前已经打标发版 0.4.0。对于 MASA 技术团队来说，为什么会选择自己研发 UI 组件库，其中趟过了什么坑，获得了怎样的经验？MASA&nbsp;Blazor 又适用于怎样的项目或者场景下？带着这些问题，InfoQ 特别采访了温州数闪科技 CTO、微软 MVP 谷首道以及温州数闪科技后端开发、MASA Blazor 核心开发者曹尤先。</p><p>&nbsp;</p><p></p><h4>如何选择 Web UI 框架？</h4><p></p><p>&nbsp;</p><p>InfoQ：首先，请您聊聊对于团队来说如何决定是选择适合自己的 Web UI 框架还是选择造轮子呢？</p><p>&nbsp;</p><p>MASA 技术团队：我觉得这个问题，团队或者公司需要反问自己项目对于 UI 的要求是否很高。如果现有的一些设计语言可以满足需求，从中选择一个适合项目属性的就可以了。</p><p>&nbsp;</p><p>就我们自己的实际情况来说，因为我们在做的 MASA Stack 本身存在许多复杂的用户交互体验，而且采用了一个比较新的技术栈，在这个技术栈下并没有符合我们自身要求的一个组件库，在这种情况下，为了更好地把控前端的能力和保证 UI 设计的统一性，我们最终选择了造轮子。当然，造轮子本身不是盲目的，它满足了我们对于技术和审美的双重要求。&nbsp;</p><p>&nbsp;</p><p>InfoQ：目前 Web UI 框架众多，您认为对于开发者来说，做框架选型时应该遵循哪些原则或者需要考虑哪些方面呢？</p><p>&nbsp;</p><p>MASA 技术团队：我认为团队做框架选型需要考虑三个方面：</p><p>&nbsp;</p><p>首先，要看这个框架本身是否与时俱进。毕竟，一个好的框架不仅自己可以做的很好，还可以潜移默化地引导开发者向更好的方向前进。当然，这也将是我们团队努力的目标；</p><p>&nbsp;</p><p>其次，观察各个组件的成熟度。不得不说，目前有的框架只是完成了最基础的功能，但面对相对复杂的业务场景时，既没有良好的扩展性，又需要很多额外的劳动；</p><p>&nbsp;</p><p>最后，要看服务响应时效。这主要需要考虑，当你发现问题时，官方是否能积极、快速、正面的响应你的问题。</p><p>&nbsp;</p><p></p><h4>认识 Blazor</h4><p></p><p>&nbsp;</p><p>InfoQ：Blazor 与我们熟知的三大框架以及组件库比如 Bootstrap 等有何联系又有何区别？</p><p>&nbsp;</p><p>MASA 技术团队：Blazor 与三大框架一样都是基于现有的 Web 技术之上的一种构建用户界面的技术，只不过 Blazor 使用 Razor 和 C# 代替了 HTML 和 JavaScript，而且用户仍然可以使用自定义 JavaScript 模块和第三方 JavaScript 库。</p><p>&nbsp;</p><p>MASA&nbsp;Blazor 基于 Material&nbsp;Design 有着严格的设计规范。Bootstrap 是 UI 框架，但相对来说 Material&nbsp;Design 对设计更友好，Bootstrap 对技术友好。而我们的样式表是从 Vuetify 移植过来的，它解决了很多从设计到实现的细节，让我们可以更轻松的完成 Material&nbsp;Deisgn 迁移到 Blazor 的工作。</p><p>&nbsp;</p><p>InfoQ：Blazor 给了 .Neter 完全以 C# 作为主要语言实现全栈开发的机会，但也有开发者认为这与前后端分离相矛盾，对此您怎么看？</p><p>&nbsp;</p><p>MASA 技术团队：首先我们需要意识到前后端分离并不是 Web 应用开发的“银弹”。 自从前后分离的开发模式推出以来，关于是否要前后端分离的争论就没有停止过，但在我看来其实也各有优势。</p><p>&nbsp;</p><p>我们看到 Blazor 有 Server 和 Wasm 两种托管模型。其中 Wasm 是纯前后分离的，虽然技术栈依然是 .Net，但 Server 可以选择是前后分离或不分离。用户可以直接将 BFF 放在 Server 上，或者可以独立出来，这个根据项目特性自行选择即可。</p><p>&nbsp;</p><p>除此之外 Blazor 还提供了 BlazorWebView 以运行在 MAUI 等项目中，它提供了更多的想象而不是让大家从中选一。</p><p>&nbsp;</p><p>InfoQ：您认为目前在实践中应用 Blazor 对比其他技术栈有哪些问题或者局限性？</p><p>&nbsp;</p><p>MASA 技术团队：目前来说 Blazor 还是一个比较新的技术，它可以使用 .Net 绝大多数功能，但最终还是要和浏览器交互，相比 Javascript，Blazor 的生态圈还有很长的路要走。因此，对于现阶段的我们来说，也是通过移植一些 Javascript 的成熟类库或转译为 .Net 后集成到 MASA&nbsp;Blazor 中。</p><p>&nbsp;</p><p>另外在 Server 模式下，每个有状态的操作都需要通知到服务器，操作的响应会因为网络延迟而延迟，所以我们需要额外注意如何合并多次请求降低网络延迟带来的性能影响。在 Client（WebAssembly）模式下，应用打包的体积非常大，会导致首次加载的耗时很长，也需要通过PWA 和其他手段去优化这个过程。</p><p>&nbsp;</p><p>InfoQ：目前看来，您认为 Blazor 的前景如何？</p><p>&nbsp;</p><p>MASA 技术团队：在我看来，Blazor 提供了让 .NET 团队在使用一个技术栈的情况下构建前端和后端的能力，提高了团队的研发效率和资源利用率。</p><p>&nbsp;</p><p>Blazor 的推出让 C# 和 .Net 技术栈焕发新的生机，通过 Wasm 可以让 .Net 应用运行在任何浏览器上，并且通过 .NET MAUI Blazor 可以开发共享代码，在 Android、iOS、macOS 和Windows 上运行的应用，由此我们也相信 Blazor 的应用场景将越来越多。</p><p>&nbsp;</p><p></p><h4>MASA Blazor 实践之路</h4><p></p><p>&nbsp;</p><p>InfoQ：能否跟大家介绍一下 MASA Blazor 诞生的原因、发展过程以及现状。</p><p>&nbsp;</p><p>MASA 技术团队：2021 年初我们做 MASA Stack 的预研阶段找了一些当时全球范围比较流行的后台管理端主题，内部投票后大家都倾向于 Material Design，于是很快就锁定了 Vuetify。但当时没有一个很好的 Blazor 组件库可以达到我们的要求，并且团队对于 Blazor 的熟悉程度也不是很高，所以我们做了个大胆的决定，自己开发组件库。</p><p>&nbsp;</p><p>经过一年多的全职开发，我们对 Vuetify 的绝大多数组件进行了 1：1 还原，但由于我们 1.0 定的标准比较高，所以目前为止也还是保守的发版了 0.4，预计年底可以发布 1.0。未来我们会尽量保证按月发版，Hotfix 快速响应，社区支持也尽量在一个工作日内有响应。</p><p>&nbsp;</p><p>从 0.3 发版到现在，我们一直积极响应社区反馈，也根据大家的建议在 B 站上传了 MASA Blazor 学习手册的系列视频。在大家一起的共同努力下，MASA Blazor 会稳扎稳打的走好未来的每一步。</p><p>&nbsp;</p><p>InfoQ：团队在 MASA Blazor 发展过程中有没有遇见技术难题，是怎样解决的？</p><p>&nbsp;</p><p>MASA 技术团队：主要有两个方面：</p><p>&nbsp;</p><p>第一，性能问题。早期团队为了追求极致的还原 Vuetify 相关功能，无论是 Server 或 Wasm，都忽略了 Blazor 在频繁交互上的性能问题，导致动效还原上出现了很大的性能问题，这也是 0.4 版本的重大改进，我们推翻了之前动效部分的代码，通过合并 API 和转移部分动效逻辑到 Javascript 等方式将性能问题抹平，不得不说，这个改造的代价是巨大的。</p><p>&nbsp;</p><p>第二，延迟带来的蝴蝶效应。在 Server 下，其实我们开启了 CDN 后延迟只有不到 16ms，这是肉眼几乎感知不到的。但对于某些特定的快速操作场景会导致前端事件不保序，我们通过把一些传统写法转化为现代的 Web API 和引入状态机等方式重构了容易引发事件乱序的地方，这也是 0.4 版本里重点解决的部分。</p><p>&nbsp;</p><p>InfoQ：请您聊聊 MASA Blazor 适用于怎样的项目或者场景下？</p><p>&nbsp;</p><p>MASA 技术团队：目前来看，MASA Blazor 可以用于以下场景：</p><p>&nbsp;</p><p>第一，后台管理项目。我们提供了 MASA Blazor Pro 项目模板，可以快速的搭建纯前端的后台管理项目。</p><p>&nbsp;</p><p>第二，移动端。除了 MASA Blazor 文档站点适配了移动端外，我们还对MAUI&nbsp;Blazor 进行了测试并在 MASA Blazor 学习手册系列视频中进行了简单的使用教学。</p><p>&nbsp;</p><p>第三，门户网站。目前 MASA Template 提供了文档站点的模板，未来我们的官网也将使用 MASA&nbsp;Blazor，届时也会提供门户网站的模板。</p><p>&nbsp;</p><p>InfoQ：MASA Blazor 为什么选择开源？目前开源社区是怎样治理的？</p><p>&nbsp;</p><p>MASA 技术团队：首先，我们认为在开源社区下可以获得更多的反馈，并且赠人玫瑰手留余香的事情我们也是不吝啬去做的。</p><p>&nbsp;</p><p>其次，对于开源社区的治理我们也处在学习阶段，而且目前主要由团队带动，虽然社区例会已经启动，但后续仍然有很多方面需要继续完善。我们希望可以纯粹的做好开源这件事，也欢迎感兴趣的小伙伴可以参与进来，慢慢的从团队主导转变为社区驱动。</p><p>&nbsp;</p><p>InfoQ：据了解，MASA Blazor 是 MASA Framework 中的常用工具，能否跟大家介绍下 MASA Framework 的概念。其中，MASA Blazor 扮演了怎样的角色？</p><p>&nbsp;</p><p>MASA 技术团队：MASA Framework 致力于给 .Net 全栈在企业级云原生项目提供基础的技术支撑。它分为四个部分：</p><p>&nbsp;</p><p>第一，Building Blocks：提供接口标准，并为了达到某个基础能力的串接不同组件（也通过接口），松耦合但不脱钩。</p><p>第二，Contrib（组件）：基于接口标准的实现，比如服务间通讯提供 HttpClient 和 Dapr Service Invocation 等不同组件的实现。</p><p>第三，Utils：提供更抽象的底层能力，供业务和组件完成自身功能，如缓存/配置/数据操作/安全等。</p><p>第四，组件库（MASA&nbsp;Blazor）：Blazor 组件库，让 .Net 开发者在熟悉的 .Net 环境下进行交互式 Web 开发。</p><p>&nbsp;</p><p>InfoQ：从近期或者长期来看，团队有何规划？</p><p>&nbsp;</p><p>MASA 技术团队：未来 MASA Blazor&nbsp;1.0 会着重于稳定性和组件基础能力覆盖率，根据MASA Stack 的发展补充更多实用的组件，如果精力允许的话我们会尝试为 MASA Blazor 提供现代前端框架的一些中大型解决方案。</p><p>&nbsp;</p><p>同时 MASA Framework 将会持续补充云原生相关领域的能力，并且会提供与 MASA Stack 深度集成的基于约定优于配置的最佳实践，它将不仅局限于只是一个简单的类库集合。</p><p>&nbsp;</p><p>而 MASA&nbsp;Stack，旨在提供开源的&nbsp;.Net&nbsp;全栈企业级云原生数字中台，未来也将是我们的主战场，MASA&nbsp;Blazor 是为了完成&nbsp;.Net&nbsp;全栈的第一步。MASA&nbsp;Stack 包含开发框架（MASA&nbsp;Framework），IT 和微服务基础能力，运维能力和数据工厂。整合技术中台和数据中台，未来与 MASA&nbsp;Cloud 的业务中台一起形成新的版图。最终这一切都会回归到我们公司的口号：让变化更简单。</p><p>&nbsp;</p><p>嘉宾介绍：</p><p>&nbsp;</p><p>谷首道</p><p>温州数闪科技 CTO。</p><p>微软 MVP，参与并主导了 MASA Stack 项目。</p><p>&nbsp;</p><p>曹尤先</p><p>温州数闪科技后端开发。</p><p>MASA Blazor 核心开发者之一。</p>",
    "publish_time": "2022-07-01 10:17:44",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "一起聊聊产品创新与职业成长｜InfoQ大会早班车第5期",
    "url": "https://www.infoq.cn/article/XpXmvOGrlHBlCpR1NoFJ",
    "summary": "<p>在 PCon 全球产品创新大会上，我们邀请《人人都是产品经理》作者苏杰担任【产品创新】专题出品人。本次直播，我们将连线作者苏杰和任意门科技（Soul）效率产品负责人张深深，和你一起聊聊产品创新以及职业成长。</p>\n<p>首届PCon全球产品创新大会即将落地北京，<a href=\"http://pcon.infoq.cn/2022/beijing/schedule?utm_source=infoq&amp;utm_medium=zaobanche\">点击查看最新日程</a>。</p>",
    "publish_time": "2022-07-01 10:58:32",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]