[
  {
    "title": "Java近期新闻：Classfile API草案、Spring Boot、GlassFish、Reactor项目、Micronaut",
    "url": "https://www.infoq.cn/article/6I2dgNKIQSr3eA9ge0fU",
    "summary": "<p>Java近期新闻综述，内容主要涉及OpenJDK、JDK 19、JDK 20、Spring点版本、GlassFish 7.0.0-M6、GraalVM Native Build Tools 0.9.12、Micronaut 3.5.2、Quarkus 2.10.0、Reactor 2022.0.0-M3、Apache Camel Quarkus 2.10.0及Apache Tika 2.4.1版本和1.28.4版本。</p><p></p><h3>OpenJDK</h3><p></p><p>最近，甲骨文公司Java语言架构师<a href=\"https://www.linkedin.com/in/briangoetz/\">Brian Goetz</a>\"<a href=\"https://mail.openjdk.org/pipermail/discuss/2022-June/006131.html\">更新</a>\"了JEP草案828039，即<a href=\"https://openjdk.org/jeps/8280389\">Classfile API</a>\"，提供了一些背景信息，关于该草案将如何发展并最终取代Java字节码操作和分析框架<a href=\"https://asm.ow2.io/\">ASM</a>\"，Goetz将其描述为“一个有大量遗留问题的旧代码库”。该JEP提议提供一个API，用于解析、生成和转换Java类文件。它最初将在JDK中作为ASM的内部替代品，并计划作为一个公共API开放。</p><p></p><h3>JDK 19</h3><p></p><p>JDK 19<a href=\"https://jdk.java.net/19\">早期访问构建</a>\"的<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-19%2B28\">Build 28</a>\"在上周发布，它是Build 27的<a href=\"https://github.com/openjdk/jdk/compare/jdk-19%2B27...jdk-19%2B28\">升级</a>\"，修复了各种<a href=\"https://bugs.openjdk.java.net/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2019%20and%20%22resolved%20in%20build%22%20%3D%20b28%20order%20by%20component%2C%20subcomponent\">问题</a>\"。要了解更多细节信息，请查看<a href=\"https://jdk.java.net/19/release-notes\">发布说明</a>\"。</p><p></p><h3>JDK 20</h3><p></p><p>JDK 20<a href=\"https://jdk.java.net/20/\">早期访问构建</a>\"的<a href=\"https://github.com/openjdk/jdk/releases/tag/jdk-20%2B3\">Build 3</a>\"在上周发布，它是Build 2的<a href=\"https://github.com/openjdk/jdk/compare/jdk-20%2B2...jdk-20%2B3\">升级</a>\"，修复了各种<a href=\"https://bugs.openjdk.java.net/issues/?jql=project%20%3D%20JDK%20AND%20fixversion%20%3D%2020%20and%20%22resolved%20in%20build%22%20%3D%20b03%20order%20by%20component%2C%20subcomponent\">问题</a>\"。发布说明尚未提供。</p><p>&nbsp;</p><p>对于<a href=\"https://openjdk.java.net/projects/jdk/19\">JDK 19</a>\"和<a href=\"https://openjdk.java.net/projects/jdk/20/\">JDK 20</a>\"，我们鼓励开发者通过<a href=\"https://bugreport.java.com/bugreport/\">Java Bug数据库</a>\"报告缺陷。</p><p></p><h3>Spring Framework</h3><p></p><p>Spring Boot 2.7.1<a href=\"https://spring.io/blog/2022/06/23/spring-boot-2-7-1-available-now\">发布</a>\"，其中包括66项Bug修复、文档改进和依赖升级，比如：Spring Framework 5.3.21、Spring Data 2021.2.1、Spring Security 5.7.2、Reactive Streams 1.0.4、Groovy 3.0.11、Hazelcast 5.1.2和Kotlin Coroutines 1.6.3。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.7.1\">发布说明</a>\"。</p><p>&nbsp;</p><p>Spring Boot 2.6.9发布，其中包括44项Bug修复、文档改进以及与Spring Boot 2.7.1类似的依赖升级。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.9\">发布说明</a>\"。</p><p>&nbsp;</p><p>VMware<a href=\"https://spring.io/blog/2022/06/20/spring-data-mongodb-spel-expression-injection-vulnerability-cve-2022-22980\">发布</a>\"了CVE-2022-22980：<a href=\"https://tanzu.vmware.com/security/cve-2022-22980\">Spring Data MongoDB SpEL表达式注入漏洞</a>\"。由于这个漏洞的存在，“Spring Data MongoDB应用程序在使用@Query或@Aggregation标注的查询方法时，如果没有对输入做无害化处理，那么含有查询参数占位符的SpEL表达式就容易发生SpEL注入”。Spring Data MongoDB 3.4.1和3.3.5版本已经修复了这个漏洞。</p><p>&nbsp;</p><p>Spring Data 2021.2.1和2021.1.5版本<a href=\"https://spring.io/blog/2022/06/20/spring-data-2021-2-1-and-2021-1-5-released\">发布</a>\"，对所有Spring Data子项目进行了升级，如Spring Data MongoDB、Spring Data Cassandra、Spring Data JDBC和Spring Data Commons。Spring Boot 2.7.1和2.6.9将使用相应的版本，并解决上述漏洞CVE-2022-22980。</p><p>&nbsp;</p><p>Spring Authorization Server 0.3.1<a href=\"https://spring.io/blog/2022/06/20/spring-authorization-server-0-3-1-available-now\">发布</a>\"，提供了一些功能增强和Bug修复。然而，团队决定从JDK 11降级到JDK 8，以保持与Spring Framework、Spring Security 5.x和Spring Boot 2.x的兼容性和一致性。因此，<a href=\"https://hsqldb.org/\">HyperSQL</a>\"（HSQLDB）依赖也被降级到2.5.2版本，因为HSQLDB 2.6.0及以上版本需要JDK 11。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/spring-projects/spring-authorization-server/releases/tag/0.3.1\">发布说明</a>\"。</p><p>&nbsp;</p><p>Spring Security 5.7.2和5.6.6版本<a href=\"https://spring.io/blog/2022/06/20/spring-security-5-7-2-and-5-6-6-available-now\">发布</a>\"，提供了Bug修复和依赖升级。这两个版本有一个共同的新特性，即测试示例已经更新为使用JUnit Jupiter（它是<a href=\"https://junit.org/junit5/docs/current/user-guide/\">JUnit 5</a>\"的一部分）。要了解关于这两个版本的更多细节，请查看<a href=\"https://github.com/spring-projects/spring-security/releases/tag/5.7.2\">5.7.2</a>\"和<a href=\"https://github.com/spring-projects/spring-security/releases/tag/5.6.6\">5.6.6</a>\"版本的发布说明。</p><p></p><h3>Eclipse GlassFish</h3><p></p><p>在通往GlassFish 7.0.0的道路上，Eclipse基金会发布了<a href=\"https://twitter.com/OmniFishEE/status/1538934362326061058\">第六个里程碑版本</a>\"，它提供了一些变更，为的是通过<a href=\"https://jakarta.ee/specifications/cdi/4.0/\">Jakarta Contexts Dependency Injection 4.0</a>\"以及<a href=\"https://jakarta.ee/specifications/concurrency/3.0/\">Jakarta Concurrency 3.0</a>\"规范的技术兼容工具包（TCK）测试。不过，这个里程碑版本还没有完全通过Jakarta EE 10 TCK。GlassFish 7.0.0-M6还是一个Beta测试版本，可在JDK 11至JDK 18上编译和运行。要了解关于这个版本的更多细节，可以查看<a href=\"https://github.com/eclipse-ee4j/glassfish/releases/tag/7.0.0-M6\">发布说明</a>\"。</p><p></p><h3>GraalVM Native Build Tools</h3><p></p><p>在通往1.0版本的道路上，<a href=\"https://labs.oracle.com/\">Oracle实验室</a>\"发布了<a href=\"https://github.com/graalvm/native-build-tools/blob/master/README.md\">Native Build Tools</a>\"的<a href=\"https://github.com/graalvm/native-build-tools/releases/tag/0.9.12\">0.9.12版本</a>\"。这是一个GralVM项目，提供可以与GralVM Native Image互操作的插件。这个最新版本提供了：Mockito和Byte Buddy的支持文档；防止在没有提供测试列表的情况下构建失败；在Gradle插件native-image中支持不同的代理模式，这是一个破坏性的变化；支持Maven中的JVM Reachability Metadata。要了解关于这个版本的更多细节，请查看<a href=\"https://graalvm.github.io/native-build-tools/latest/index.html#changelog\">发布说明</a>\"。</p><p></p><h3>Micronaut</h3><p></p><p>Micronaut基金会<a href=\"https://micronaut.io/2022/06/21/micronaut-framework-3-5-2-released/\">发布</a>\"了Micronaut 3.5.2，带来了Bug修复以及<a href=\"https://github.com/micronaut-projects/micronaut-oracle-cloud/releases/tag/v2.1.4\">Micronaut Oracle Cloud 2.1.4</a>\"、<a href=\"https://github.com/micronaut-projects/micronaut-email/releases/tag/v1.2.3\">Micronaut Email 1.2.3</a>\"和<a href=\"https://github.com/micronaut-projects/micronaut-spring/releases/tag/v4.1.1\">Micronaut Spring 4.1.1</a>\"项目的点版本。ApplicationContextConfigurer接口的文档也进行了更新，提供了如何定义<a href=\"https://docs.micronaut.io/latest/guide/#_default_environment\">默认Micronaut环境</a>\"的建议。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/micronaut-projects/micronaut-core/releases/tag/v3.5.2\">发布说明</a>\"。</p><p></p><h3>Quarkus</h3><p></p><p>红帽公司<a href=\"https://quarkus.io/blog/quarkus-2-10-0-final-released/\">发布</a>\"了Quarkus 2.10.0.Final，新特性包括：来自Loom项目的有关虚拟线程（<a href=\"https://openjdk.org/jeps/425\">JEP 425</a>\"）的初步工作；在GraphQL扩展中支持非阻塞工作负载；依赖升级到SmallRye Reactive Messaging 3.16.0；增加Reactive SQL Clients扩展Kubernetes服务绑定支持；新契约CacheKeyGenerator，允许自定义从方法参数生成的缓存密钥。</p><p></p><h3>Reactor项目</h3><p></p><p>在Reactor项目通往2022.0.0版本的道路上，<a href=\"https://github.com/reactor/reactor/releases/tag/2022.0.0-M3\">第三个里程碑版本</a>\"发布。它主要是将依赖项升级到reactor-core 3.5.0-M3、reactor-pool 1.0.0-M3、reactor-netty 1.1.0-M3、reactor-addons 3.5.0-M3和reactor-kotlin-extensions 1.2.0-M3。</p><p></p><h3>Apache Camel Quarkus</h3><p></p><p>为了与Quarkus保持一致，Apache软件基金会<a href=\"https://camel.apache.org/blog/2022/06/camel-quarkus-release-2.10.0/\">发布</a>\"了Camel Quarkus 2.10.0，其中包含Camel 3.17.0和Quarkus 2.10.0.Final。新特性包括：新增扩展<a href=\"https://camel.apache.org/camel-quarkus/2.10.x/reference/extensions/azure-key-vault.html\">Azure Key Vault</a>\"和<a href=\"https://camel.apache.org/camel-quarkus/2.10.x/reference/extensions/datasonnet.html\">DataSonnet</a>\"；删除Camel 3.17.0中被废弃的扩展。要了解关于这个版本的更多细节，请查看<a href=\"https://github.com/apache/camel-quarkus/milestone/28?closed=1\">问题列表</a>\"。</p><p></p><h3>Apache Tika</h3><p></p><p><a href=\"https://tika.apache.org/\">Apache Tika</a>\"团队<a href=\"https://www.mail-archive.com/announce@apache.org/msg07401.html\">发布</a>\"了其元数据提取工具包的2.4.1版本。它以前是<a href=\"https://lucene.apache.org/\">Apache Lucene</a>\"的一个子项目，这个最新版本提升了定制和配置能力，例如：给TikaServerCli类增加一个stop()方法，这样它就可以和Apache Commons Daemon一起执行；允许在TikaResource类中把Content-Length头传递给元数据；支持用户把系统属性从分叉进程扩展到分叉的tika-server进程。</p><p>&nbsp;</p><p>Apache Tika 1.28.4也已<a href=\"https://www.mail-archive.com/announce@apache.org/msg07402.html\">发布</a>\"，提供了安全修复和依赖升级。要了解关于这个版本的更多细节，请查看<a href=\"https://www.apache.org/dist/tika/1.28.4/CHANGES-1.28.4.txt\">更新日志</a>\"。1.x版本序列将在2022年9月30日到达生命周期的终点。</p><p>&nbsp;</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/06/java-news-roundup-jun20-2022/\">Java News Roundup: Classfile API Draft, Spring Boot, GlassFish, Project Reactor, Micronaut</a>\"</p>",
    "publish_time": "2022-07-01 09:09:56",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "自研开源 Blazor 组件库路上，我们解决了这些重要挑战",
    "url": "https://www.infoq.cn/article/e9JUlCpL2DTRslaXvpvZ",
    "summary": "<p>采访嘉宾 | 谷首道、曹尤先</p><p>编辑 | 闫园园</p><p>&nbsp;</p><p>随着 Web 开发的日趋复杂，框架和组件库的应用可谓是越来越多。然而，当开发者打开搜索引擎搜索相关概念时，会发现如今的框架和组件库已是“满天飞”，它们各有优势，但也各有不足。因此，到底应该再造轮子还是选择已有工具，选择已有工具时又该如何根据自己的项目需求进行抉择，这其中种种问题对很多团队来说渐渐成为主要挑战。</p><p>&nbsp;</p><p>MASA 技术团队，成立于 2021 年，其自主研发的 MASA&nbsp;Blazor 是一个基于 Blazor Component 和 Material Design 的 UI 组件库，目前已经打标发版 0.4.0。对于 MASA 技术团队来说，为什么会选择自己研发 UI 组件库，其中趟过了什么坑，获得了怎样的经验？MASA&nbsp;Blazor 又适用于怎样的项目或者场景下？带着这些问题，InfoQ 特别采访了温州数闪科技 CTO、微软 MVP 谷首道以及温州数闪科技后端开发、MASA Blazor 核心开发者曹尤先。</p><p>&nbsp;</p><p></p><h4>如何选择 Web UI 框架？</h4><p></p><p>&nbsp;</p><p>InfoQ：首先，请您聊聊对于团队来说如何决定是选择适合自己的 Web UI 框架还是选择造轮子呢？</p><p>&nbsp;</p><p>MASA 技术团队：我觉得这个问题，团队或者公司需要反问自己项目对于 UI 的要求是否很高。如果现有的一些设计语言可以满足需求，从中选择一个适合项目属性的就可以了。</p><p>&nbsp;</p><p>就我们自己的实际情况来说，因为我们在做的 MASA Stack 本身存在许多复杂的用户交互体验，而且采用了一个比较新的技术栈，在这个技术栈下并没有符合我们自身要求的一个组件库，在这种情况下，为了更好地把控前端的能力和保证 UI 设计的统一性，我们最终选择了造轮子。当然，造轮子本身不是盲目的，它满足了我们对于技术和审美的双重要求。&nbsp;</p><p>&nbsp;</p><p>InfoQ：目前 Web UI 框架众多，您认为对于开发者来说，做框架选型时应该遵循哪些原则或者需要考虑哪些方面呢？</p><p>&nbsp;</p><p>MASA 技术团队：我认为团队做框架选型需要考虑三个方面：</p><p>&nbsp;</p><p>首先，要看这个框架本身是否与时俱进。毕竟，一个好的框架不仅自己可以做的很好，还可以潜移默化地引导开发者向更好的方向前进。当然，这也将是我们团队努力的目标；</p><p>&nbsp;</p><p>其次，观察各个组件的成熟度。不得不说，目前有的框架只是完成了最基础的功能，但面对相对复杂的业务场景时，既没有良好的扩展性，又需要很多额外的劳动；</p><p>&nbsp;</p><p>最后，要看服务响应时效。这主要需要考虑，当你发现问题时，官方是否能积极、快速、正面的响应你的问题。</p><p>&nbsp;</p><p></p><h4>认识 Blazor</h4><p></p><p>&nbsp;</p><p>InfoQ：Blazor 与我们熟知的三大框架以及组件库比如 Bootstrap 等有何联系又有何区别？</p><p>&nbsp;</p><p>MASA 技术团队：Blazor 与三大框架一样都是基于现有的 Web 技术之上的一种构建用户界面的技术，只不过 Blazor 使用 Razor 和 C# 代替了 HTML 和 JavaScript，而且用户仍然可以使用自定义 JavaScript 模块和第三方 JavaScript 库。</p><p>&nbsp;</p><p>MASA&nbsp;Blazor 基于 Material&nbsp;Design 有着严格的设计规范。Bootstrap 是 UI 框架，但相对来说 Material&nbsp;Design 对设计更友好，Bootstrap 对技术友好。而我们的样式表是从 Vuetify 移植过来的，它解决了很多从设计到实现的细节，让我们可以更轻松的完成 Material&nbsp;Deisgn 迁移到 Blazor 的工作。</p><p>&nbsp;</p><p>InfoQ：Blazor 给了 .Neter 完全以 C# 作为主要语言实现全栈开发的机会，但也有开发者认为这与前后端分离相矛盾，对此您怎么看？</p><p>&nbsp;</p><p>MASA 技术团队：首先我们需要意识到前后端分离并不是 Web 应用开发的“银弹”。 自从前后分离的开发模式推出以来，关于是否要前后端分离的争论就没有停止过，但在我看来其实也各有优势。</p><p>&nbsp;</p><p>我们看到 Blazor 有 Server 和 Wasm 两种托管模型。其中 Wasm 是纯前后分离的，虽然技术栈依然是 .Net，但 Server 可以选择是前后分离或不分离。用户可以直接将 BFF 放在 Server 上，或者可以独立出来，这个根据项目特性自行选择即可。</p><p>&nbsp;</p><p>除此之外 Blazor 还提供了 BlazorWebView 以运行在 MAUI 等项目中，它提供了更多的想象而不是让大家从中选一。</p><p>&nbsp;</p><p>InfoQ：您认为目前在实践中应用 Blazor 对比其他技术栈有哪些问题或者局限性？</p><p>&nbsp;</p><p>MASA 技术团队：目前来说 Blazor 还是一个比较新的技术，它可以使用 .Net 绝大多数功能，但最终还是要和浏览器交互，相比 Javascript，Blazor 的生态圈还有很长的路要走。因此，对于现阶段的我们来说，也是通过移植一些 Javascript 的成熟类库或转译为 .Net 后集成到 MASA&nbsp;Blazor 中。</p><p>&nbsp;</p><p>另外在 Server 模式下，每个有状态的操作都需要通知到服务器，操作的响应会因为网络延迟而延迟，所以我们需要额外注意如何合并多次请求降低网络延迟带来的性能影响。在 Client（WebAssembly）模式下，应用打包的体积非常大，会导致首次加载的耗时很长，也需要通过PWA 和其他手段去优化这个过程。</p><p>&nbsp;</p><p>InfoQ：目前看来，您认为 Blazor 的前景如何？</p><p>&nbsp;</p><p>MASA 技术团队：在我看来，Blazor 提供了让 .NET 团队在使用一个技术栈的情况下构建前端和后端的能力，提高了团队的研发效率和资源利用率。</p><p>&nbsp;</p><p>Blazor 的推出让 C# 和 .Net 技术栈焕发新的生机，通过 Wasm 可以让 .Net 应用运行在任何浏览器上，并且通过 .NET MAUI Blazor 可以开发共享代码，在 Android、iOS、macOS 和Windows 上运行的应用，由此我们也相信 Blazor 的应用场景将越来越多。</p><p>&nbsp;</p><p></p><h4>MASA Blazor 实践之路</h4><p></p><p>&nbsp;</p><p>InfoQ：能否跟大家介绍一下 MASA Blazor 诞生的原因、发展过程以及现状。</p><p>&nbsp;</p><p>MASA 技术团队：2021 年初我们做 MASA Stack 的预研阶段找了一些当时全球范围比较流行的后台管理端主题，内部投票后大家都倾向于 Material Design，于是很快就锁定了 Vuetify。但当时没有一个很好的 Blazor 组件库可以达到我们的要求，并且团队对于 Blazor 的熟悉程度也不是很高，所以我们做了个大胆的决定，自己开发组件库。</p><p>&nbsp;</p><p>经过一年多的全职开发，我们对 Vuetify 的绝大多数组件进行了 1：1 还原，但由于我们 1.0 定的标准比较高，所以目前为止也还是保守的发版了 0.4，预计年底可以发布 1.0。未来我们会尽量保证按月发版，Hotfix 快速响应，社区支持也尽量在一个工作日内有响应。</p><p>&nbsp;</p><p>从 0.3 发版到现在，我们一直积极响应社区反馈，也根据大家的建议在 B 站上传了 MASA Blazor 学习手册的系列视频。在大家一起的共同努力下，MASA Blazor 会稳扎稳打的走好未来的每一步。</p><p>&nbsp;</p><p>InfoQ：团队在 MASA Blazor 发展过程中有没有遇见技术难题，是怎样解决的？</p><p>&nbsp;</p><p>MASA 技术团队：主要有两个方面：</p><p>&nbsp;</p><p>第一，性能问题。早期团队为了追求极致的还原 Vuetify 相关功能，无论是 Server 或 Wasm，都忽略了 Blazor 在频繁交互上的性能问题，导致动效还原上出现了很大的性能问题，这也是 0.4 版本的重大改进，我们推翻了之前动效部分的代码，通过合并 API 和转移部分动效逻辑到 Javascript 等方式将性能问题抹平，不得不说，这个改造的代价是巨大的。</p><p>&nbsp;</p><p>第二，延迟带来的蝴蝶效应。在 Server 下，其实我们开启了 CDN 后延迟只有不到 16ms，这是肉眼几乎感知不到的。但对于某些特定的快速操作场景会导致前端事件不保序，我们通过把一些传统写法转化为现代的 Web API 和引入状态机等方式重构了容易引发事件乱序的地方，这也是 0.4 版本里重点解决的部分。</p><p>&nbsp;</p><p>InfoQ：请您聊聊 MASA Blazor 适用于怎样的项目或者场景下？</p><p>&nbsp;</p><p>MASA 技术团队：目前来看，MASA Blazor 可以用于以下场景：</p><p>&nbsp;</p><p>第一，后台管理项目。我们提供了 MASA Blazor Pro 项目模板，可以快速的搭建纯前端的后台管理项目。</p><p>&nbsp;</p><p>第二，移动端。除了 MASA Blazor 文档站点适配了移动端外，我们还对MAUI&nbsp;Blazor 进行了测试并在 MASA Blazor 学习手册系列视频中进行了简单的使用教学。</p><p>&nbsp;</p><p>第三，门户网站。目前 MASA Template 提供了文档站点的模板，未来我们的官网也将使用 MASA&nbsp;Blazor，届时也会提供门户网站的模板。</p><p>&nbsp;</p><p>InfoQ：MASA Blazor 为什么选择开源？目前开源社区是怎样治理的？</p><p>&nbsp;</p><p>MASA 技术团队：首先，我们认为在开源社区下可以获得更多的反馈，并且赠人玫瑰手留余香的事情我们也是不吝啬去做的。</p><p>&nbsp;</p><p>其次，对于开源社区的治理我们也处在学习阶段，而且目前主要由团队带动，虽然社区例会已经启动，但后续仍然有很多方面需要继续完善。我们希望可以纯粹的做好开源这件事，也欢迎感兴趣的小伙伴可以参与进来，慢慢的从团队主导转变为社区驱动。</p><p>&nbsp;</p><p>InfoQ：据了解，MASA Blazor 是 MASA Framework 中的常用工具，能否跟大家介绍下 MASA Framework 的概念。其中，MASA Blazor 扮演了怎样的角色？</p><p>&nbsp;</p><p>MASA 技术团队：MASA Framework 致力于给 .Net 全栈在企业级云原生项目提供基础的技术支撑。它分为四个部分：</p><p>&nbsp;</p><p>第一，Building Blocks：提供接口标准，并为了达到某个基础能力的串接不同组件（也通过接口），松耦合但不脱钩。</p><p>第二，Contrib（组件）：基于接口标准的实现，比如服务间通讯提供 HttpClient 和 Dapr Service Invocation 等不同组件的实现。</p><p>第三，Utils：提供更抽象的底层能力，供业务和组件完成自身功能，如缓存/配置/数据操作/安全等。</p><p>第四，组件库（MASA&nbsp;Blazor）：Blazor 组件库，让 .Net 开发者在熟悉的 .Net 环境下进行交互式 Web 开发。</p><p>&nbsp;</p><p>InfoQ：从近期或者长期来看，团队有何规划？</p><p>&nbsp;</p><p>MASA 技术团队：未来 MASA Blazor&nbsp;1.0 会着重于稳定性和组件基础能力覆盖率，根据MASA Stack 的发展补充更多实用的组件，如果精力允许的话我们会尝试为 MASA Blazor 提供现代前端框架的一些中大型解决方案。</p><p>&nbsp;</p><p>同时 MASA Framework 将会持续补充云原生相关领域的能力，并且会提供与 MASA Stack 深度集成的基于约定优于配置的最佳实践，它将不仅局限于只是一个简单的类库集合。</p><p>&nbsp;</p><p>而 MASA&nbsp;Stack，旨在提供开源的&nbsp;.Net&nbsp;全栈企业级云原生数字中台，未来也将是我们的主战场，MASA&nbsp;Blazor 是为了完成&nbsp;.Net&nbsp;全栈的第一步。MASA&nbsp;Stack 包含开发框架（MASA&nbsp;Framework），IT 和微服务基础能力，运维能力和数据工厂。整合技术中台和数据中台，未来与 MASA&nbsp;Cloud 的业务中台一起形成新的版图。最终这一切都会回归到我们公司的口号：让变化更简单。</p><p>&nbsp;</p><p>嘉宾介绍：</p><p>&nbsp;</p><p>谷首道</p><p>温州数闪科技 CTO。</p><p>微软 MVP，参与并主导了 MASA Stack 项目。</p><p>&nbsp;</p><p>曹尤先</p><p>温州数闪科技后端开发。</p><p>MASA Blazor 核心开发者之一。</p>",
    "publish_time": "2022-07-01 10:17:44",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "一起聊聊产品创新与职业成长｜InfoQ大会早班车第5期",
    "url": "https://www.infoq.cn/article/XpXmvOGrlHBlCpR1NoFJ",
    "summary": "<p>在 PCon 全球产品创新大会上，我们邀请《人人都是产品经理》作者苏杰担任【产品创新】专题出品人。本次直播，我们将连线作者苏杰和任意门科技（Soul）效率产品负责人张深深，和你一起聊聊产品创新以及职业成长。</p>\n<p>首届PCon全球产品创新大会即将落地北京，<a href=\"http://pcon.infoq.cn/2022/beijing/schedule?utm_source=infoq&amp;utm_medium=zaobanche\">点击查看最新日程</a>。</p>",
    "publish_time": "2022-07-01 10:58:32",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "为什么一定要从 DevOps 走向 BizDevOps？",
    "url": "https://www.infoq.cn/article/4bSFcQxV7hhzHJUgQTiP",
    "summary": "<p>数字经济时代，数字化转型成为社会的普遍共识和行动。越来越多的业务运行在数字化基座之上，软件系统正成为业务创新的价值核心和创新引擎。在这一趋势下，软件产业面临着许多新挑战和新机遇：一方面，万物互联下软件系统规模和复杂度持续增长；而另一方面，业务的快速变化对软件交付效能的要求却不断提升；软件构建和交付方式亟待变革。</p><p></p><p>要解决问题，先直面问题。为更好地厘清波涛汹涌的数字化转型浪潮下软件产业所面对的机遇与挑战，6 月 29 日，阿里云云效与阿里云开发者评测局栏目，联合特邀了 InfoQ 极客帮副总裁付晓岩、南京大学软件工程学院教授张贺、Thoughtworks 全球数字化转型负责人肖然、国内精益产品开发最早实践者何勉（阿里云云效解决方案负责人），阿里云资深技术专家陈鑫（云效平台负责人）以及阿里云高级产品专家张裕（云效平台产品架构师）共 6 位领军人物，一起围绕数字化转型浪潮下的技术变局进行了深度的研讨。</p><p></p><p></p><h3>数字环境下，各界如何看待科技发展与业技融合？</h3><p></p><p></p><p>当前，央行侧重提升产业的整体数字化，同时还提出了更高的要求：希望业务系统或者业务创新能够实现跨角色、跨流程的自由编排和组合。这个要求即便对互联网企业来说都非常高，银行业等传统企业如果想通过企业级的工程，来整体提升业务和技术能力、实现业务和技术的融合，更是一件困难的事情。所以，需要一些新的方法论或工具来支撑。</p><p></p><p>今年年初，中国银保监会与人民银行发布的《关于银行业保险业数字化转型的指导意见》已经明确指出，在数字化时代要做到“业技融合”，同时 BizDevOps 这个词也已经被写入央行《金融科技发展规划（2022-2025 年）》中。这两份文件已经为银行的数字化转型提出了具体的要求和方法，变成了行业转型的参照。</p><p></p><p>金融行业天然走在数字化的前沿，已经享受到了数字化的红利。但是，还有很多产业和行业仍面临挑战。比如，生产线的出现可以让企业既得到质量又得到了效率，但一定程度上牺牲了体验，而数字化天然可以解决这个问题。如果用户需求的获取、还原、设计、生产、交付和服务等环节有数字化的支撑，就有可能在整个环节里满足用户的个性化体验。</p><p></p><p>我们已经看到，很多企业通过数字化技术打造独特的体验，创造差异化价值。实体经济正在逐渐向信息化的世界迁移。未来，所有的实体经济都要做数字化，甚至未来所有的企业都会成为软件企业。未来任何业务想要有竞争力，都必须运行在数字化基座之上。</p><p></p><p>那么，数字化的引擎是什么？是软件。软件的燃料是什么？是数据。</p><p></p><p>因此，整个数字化转型浪潮对软件开发提出了非常高的要求。如何端到端、全链路地去看而不是只看单个阶段或者单个产品？如何建立最本质的模型，从物理世界过度到数字世界，并反过来影响物理世界？如何构建顺畅高效精准的交付模式？这些问题都变得非常重要。</p><p></p><p>作为一个大的数字经济体，阿里巴巴在业务与技术融合的发展过程中也经历了三个阶段。</p><p></p><p>第一阶段，向技术要效能。那时候，企业面对的是如何将技术自动化，实现技术本身的提效；第二阶段，不仅向技术要效能，还要考虑技术如何更加高效地去支撑业务。于是，中台的概念被提了出来；第三阶段，也就是这两年，阿里希望顶层战略可以顺利传达到业务和技术团队，特别在意业务和技术的协同，开始讨论如何通过方法和工具，将技术和业务的协同形成标准化的实践。</p><p></p><p>开发工具本身是为了帮助一线同学提升幸福感和效率。作为开发者，关心的是如何能够专注而高效地工作、高效开发和测试，但更重要的是，保证自己做的是正确的事。</p><p></p><p>现在有一个趋势：做底层研发的越来越少，软件研发的方式和习惯在发生变化。</p><p></p><p>现在，开发做的不再是一个通用工具，而是要随着业务不断演化。</p><p></p><p></p><h3>为什么一定要从 DevOps 走向 BizDevOps？</h3><p></p><p></p><p>如上文所述，作为加快金融服务智慧再造的重要组成部分，BizDevOps 成为重塑智能高效的服务流程的核心能力组成。但 BizDevOps 也不是另起炉灶，而是 DevOps 的自然扩展，从打破 IT 内部的墙，到打破 IT 与业务的墙。</p><p></p><p>DevOps 于 2009 年被提出，主要是为了打破 Dev 与 Ops 的墙。当时的墙还是比较明显的。Dev 关注的是快，对象是代码，Ops 关注的是稳，对象是机器。两者目标天然有矛盾，部门墙由此建立起来，这当然不利于 IT 价值的最大化。</p><p></p><p>2009 年，在美国举行的第二届 Velocity 大会上，来自 Flickr 公司的 John Allspaw 和 Pauk Hammond 发表了一个演讲《10+ Deploys Per Day: Dev and Ops Cooperation at Flickr》。在这个演讲中，Allspaw 和 Hammond 以角色扮演的方式，生动地表现了开发与运维之间的各种冲突。演讲中出现很多金句，如“It's not my code, it's your machines!”，这深刻反映了 Dev 和 Ops 关系的现状。接着，他们又展示了开发团队（Dev 和运维团队（Ops 如何通力合作，借助工具消除双方间的壁垒。</p><p></p><p>这次演讲是 DevOps 发展历程中的标志性事件。它提出了正确的问题：为了更快交付和实现价值，必须弥合开发和运维之间的鸿沟，并给出了解决方案：为了弥合开发和运维之间的鸿沟，需要在文化、工具和实践方面的系列变革。</p><p></p><p>而在今天的大环境下，我们面临着一个新的问题：如何打通业务（Biz）与开发运维（DevOps）之间的墙，以更好地应对数字经济下的挑战。</p><p></p><p>仍以阿里为例，今天阿里的中台也面临两个问题。第一个是协同问题，阿里中台本身是一个大部门，大的业务线和小的业务线从前台传递到中台有优先级，但大家都觉得自己很重要，这就是一个典型的大型企业协同问题。第二个问题就是如何不让技术、中台本身成为瓶颈。阿里希望业务可以自己去做技术，这样有价值的想法和创新可以得到最快的响应。</p><p></p><p>“你们团队是业务主导还是产品主导？”技术人都不希望被当作资源去做事，而是希望可以和业务合作以达到业务成功。其实，业务和技术应该是共生合作的关系。</p><p></p><p>在零售和金融行业，这种关系比较明显。比如银行的业务占绝大多数，大概有 90%，如果有业务研发一体化的系统，技术可以满足更多的业务诉求，那么业务就能更快地完成工作。</p><p></p><p></p><h3>如何落地 BizDevOps？</h3><p></p><p></p><p>DevOps 运动还没结束，仍在继续发展。DevOps 运动有很多可以给 BizDevOps 借鉴的地方。</p><p></p><p>首先，是在目标上进行统一。DevOps 为了统一目标，借鉴了精益管理、敏捷管理、看板等工作方法，打通了整个 DevOps 流程，产生了非常好的对于管理方法的驱动。其次，DevOps 在开发和运维之间找到了共同点。大家关注的是应用，以应用为中心去做开发，演变成了阿里和微软的 OAM 模型。因此，既要有理念和方法上的改变，还要用技术手段来解决问题，这是我们需要从 DevOps 运动中学习和借鉴的。</p><p></p><p>那么，业务和技术的共同目标是什么？在流程中有什么共同关注的东西？共同的目标、共同的关注点，有效的技术或者工程实践，是 BizDevOps 落地的关键。</p><p></p><p>首先，要把业务、DevOps 统一起来，统一语言非常重要。业务和技术有墙是正常的，因为业务间本身可能就有割裂。以银行为例，每个部门画图的标准不一，统一业务的语言就有难度。业务之间先统一语言，然后和 IT 用统一的语言沟通，然后统一数据和业务。从基础语法到长期熟练地使用语法，制定业务标准、数据标准，行业上下游企业定义好标准，这个过程的整合需要时间。</p><p></p><p>对于软件行业来说，DevOps 代表第一生产力，数据代表软件下的生产资料。DevOps 发展多年，相对来说已经很成熟，因此成为快速迭代、试错的实验系统。在已经有这套系统的情况下，Biz 就更应该好好利用这个系统。</p><p></p><p>现在，可以把 Biz 放在 DevOps 前面，后续也可以把 Biz 放在 DevOps 后面。这意味着业务不是拍脑袋做的，而是有数据验证的。Biz、Dev、Ops 这三个单词不应该是在一条线上，而应该是一个环，加入数据这个生产要素之后，我们可以用实验精神来创造一些商业机会。</p><p></p><p>当前能做的是，借鉴 DevOps 的经验，有一定的工具来承载最佳实践和方法，固化到流水线上帮助落地。</p><p></p><p>有的企业搭了一下就觉得自己在做 DevOps 实践了，其实我们还是要有更高的追求。从文化上解决和改变工作方式，短期内是无法做到的，更加合理的方式是去培养复合型人才。DevOps 让开发要懂测试，DevSecOps 让开发要懂安全，Biz 加进来以后，开发人员也要懂业务。事情没办法一步到位，也许在过渡期中，一个比较好的方式就是产学研联合去培养复合型的人才。</p><p></p><p>最后仍然要强调一下，BizDevOps 最大的机会点还是在需求本身，在构建数字化的生态本身。</p><p></p><p></p><h3>BizDevOps 的产品应该如何打造？</h3><p></p><p></p><p>特斯拉的 Elon Musk 曾说 ，“比起造汽车来说，设计这条流水线的难度是它的 100 倍。”那么，如何做才能把 BizDevOps 的流水线做出来？</p><p></p><p>阿里云云效平台负责人陈鑫提到，在服务众多云效客户的过程中发现，科技部门对于 DevOps 比较有共识，同时也欣然接受。例如大家都会理解一体化研发运维平台、走向云原生这样的一些概念和说法，DevOps 的标准和方法实践都在逐步收敛以适配开发者需求。</p><p></p><p>但是，业务部门还完全没有达成这种共识。现状是只解决技术部门的效率问题，很难改变业务的创新效率问题。如果有一个工具可以让业务看到工程活动和业务之间的关系，那么业务部门就可以作出判断和行动。很多企业有非常多的工具可以用，但没有可以实现数字化目标的工具。</p><p></p><p>打造 BizDevOps 工具有很多难点。比如目前市面上有很多 DevOps 工具，但企业还是会再造一个工具，为什么？因为各个工具的数据模型并不一致。因此要想打造一个 BizDevOps 平台，首先要保证数据一致。大家对一些最基础概念的认知要拉齐。当前不同的人对于“应用”的定义和理解都是不一样的，如何能形成通用规范？</p><p></p><p>另外，DevOps 需要不同的人协作，BizDevOps 作为一个工具或者平台，如何让多个角色有统一的视角，避免互相传递各自视角的信息导致低效，也是非常关键的。此外，工具不是为了改变而改变，工具是用来解决问题的，工具本身不能对用户的状态进行假设，必须适配用户在各种条件下的状态。而研发自身也需要做数字化转型。研发过程中也会产生数据，产品研发本身实现数字化转型，才能更好地支撑更大的数字化转型。</p><p></p><p>整体来说，BizDevOps 在概念、流程、方法上如何标准化，需要业内一起努力，共同推动在产品上的落地。</p><p></p><p></p><h3>如果 BizDevOps 真得发生，未来会如何？</h3><p></p><p></p><p>BizDevOps 对业务的创新速度和有效性会产生很大的作用，数据会变成基本常识，业务和开发之间的分别也会模糊起来。一定会有部分业务人员愿意往开发上靠近。开发人员抽象分析问题的优势也会给业务人员带来很多的价值。</p><p></p><p>将来的业务更多是从用户的视角去打通链路，建立本质的认知和数字化模型。一切业务数据化，一切数据业务化。业务能够以更自然的方式向研发过渡。一个人的职业发展方向也可以有比较大的选择，人才培养上也会有一些变化和创新。</p><p></p><p>如果 BizDevOps 真的发生了，可能业务之外的组织上的各个 function 会成为最大瓶颈，其他 BU 的决策过程可能都要做相应的调整。未来，企业肯定要跟着 BizDevOps 做转型。</p><p></p><p></p><h3>下一步，我们怎么做？</h3><p></p><p></p><p>经过深度研讨，产学研 6 位专家在时代挑战与机遇、BizDevOps 重要性与必要性、落地方法与方式上达成了共识。他们希望围绕 BizDevOps 的探讨不仅仅停留在这个层面，而是可以继续从产学研界的共同努力着手，推动 BizDevOps 真正发生，为软件产业的变革贡献力量。</p><p></p><p>因此圆桌会后，6 位老师共同起草了一份《BizDevOps 行动倡议书》并联名签署，这意味着接下来，产业、学术、研究等各方将进行长期的协作和努力，共同推动软件构建与交付方式的变革。</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/fc/fcab575891611a4e3cbfb110df56c0f5.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/52/52631d87f5f6d838e79d75eef38648b5.png\" /></p><p>《BizDevOps行动倡议书》扫描件尾页</p><p></p><p></p><p>如果这篇文章对您或者团队有启发，欢迎转发给更多人，<a href=\"https://xie.infoq.cn/link?target=https%3A%2F%2Fdeveloper.aliyun.com%2Flive%2F249329\">点击链接观看《BizDevOps：数字化转型浪潮下技术破局之路》直播回放</a>\"，也欢迎加入 BizDevOps 交流钉钉群，群号：44686237。</p><p></p>",
    "publish_time": "2022-07-01 14:02:09",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "雨林开源行：畅聊开源，走近Gitee！",
    "url": "https://www.infoq.cn/article/wh1djGEQX3FIrDCg5eB6",
    "summary": "<p>日前，Gitee 突然推出新规，开源仓库须先审核再上线，未审核仓库也仅限登录用户访问，针对访问者和资源库所有者均加强了审核要求。此事在各社交媒体引发热议。</p><p></p><p>“内容监管的话题在国内并不鲜见，只要是公开的，就有可能会受到限制。不可避免的，也会有跟事件无关却受到影响的人。”开源中国创始人 &amp;CTO 红薯在雨林开源行访谈中说道。</p><p></p><p>很多人经常把开源软件和自由软件混为一谈，也常常会有人把开源软件和免费软件这两个概念混淆在一起。开源软件指公开源代码的软件，在发行时会附上软件的源代码，并授权允许用户更改、传播或者二次开发。在使用开源软件时，需考虑所使用开源软件的 License 限制。</p><p></p><p>“我们可以把开源项目当成库来引用，但如果涉及到代码引用，不管是否要分发，都要尊重版权声明、版权规定。这也是为什么我们要大力推开源雨林的原因，就是要让真正用开源项目的用户理解版权背后的权、责、利，提前规避未来可能会出现的高风险。”开放原子开源基金会 TOC 主席、LF AI &amp; Data 基金会主席堵俊平表示。</p><p></p><p>许可证是开源领域最大的规则。近几年，互联网飞速发展，开源规则、许可证却一直没有太大变化，并没有跟上当前局势所需要的进步或调整。红薯在雨林开源行中说道，“不仅仅是 License，开源整套的玩法、开源定义等会不会因此而发生变化，我觉得这是整个开源界的标准需要一个适应的过程。”</p><p></p><p>在 AI 技术快速发展的今天，开源的规则、开源内容形态的敏感性，以及开源数据集的保护等方面都受到了考验。如何秉持开源的初衷和出发点，发挥好基金会的推动作用，推动开源领域不断向着纵深发展，在开始中变化，在变化中成长，建立健康繁荣的开源生态，让更多的优质开源项目在中国生长繁茂，并走向世界。</p><p></p><p>雨林开源行（第一期）邀请到了 OpenChain Board、CHAOSS Maintainer 高琨作为主持人，开源中国创始人 &amp;CTO 红薯、开放原子开源基金会 TOC 主席、LF AI &amp; Data 基金会主席堵俊平两位嘉宾，在一个半小时的访谈中，对开源的内容监管、知识产权&amp;版权意识、开源标准，以及标准、生态、基金会之间的关系、AI领域全新挑战等问题，给出了清晰和明确的回复，以下是部分访谈内容节选，略有删减：</p><p></p><p></p><p></p><p>*以上视频所表达想法及意见仅代表发言嘉宾个人观点</p><p></p><p></p><p>Q 高琨：5 月 18 日，Gitee 仓库开源需审核，已开源部分仓库暂时关闭，审核通过后再次公开，在业界引起了巨大的舆论。作为此次事件的中心人物，为大家做一个澄清。</p><p></p><p>红薯：首先，内容监管的话题在国内并不鲜见。开源是自由、开放、全球协同的。当我们对它施加约束、限制时，反弹的心理是会很强烈的。不只是代码，包括现在互联网出现的各种各样的内容形态，例如文字、视频、音频等。只要是公开的，就有可能会受到限制，也会有跟事件无关却受到影响的人。而现在的检测技术是简单的，导致受影响的、误杀的情况会特别明显。像开源许可证这样的文本，误杀率是非常高的，我觉得这个是大家对这件事情反应比较大的重要原因之一。</p><p></p><p>其次，喊声最强的，有拿 Gitee 当图床，利用带宽存图片，然后在别的地方引用的；还有一些把境外视频源或海外频道源的配置文件放在平台上，众多播放器直接调用的。这种做法对平台来说百害而无一利，以前 GitHub 也封过类似的情况，我们这次这么做，直接导致了他们没法用。</p><p></p><p>另外，这件事情做得比较着急，这也是我们做的欠缺的地方。对于正常的开源项目，需要大家提交公开申请，已经加大了审核的技术投入和人力投入，加快审核进度，尽量确保每一名开发者的使用体验，尽早回归到正常状态。</p><p></p><p>Q 高琨：如何看待国内外的知识产权、版权意识？</p><p></p><p>堵俊平：现在的形势，相较于 10 年、20 年前是在慢慢变好的。前段时间闹得沸沸扬扬的“小满”事件，其实就是个人创作者的版权维护意识在增强的表现。即使公开发布在网络上，也仍然有版权，需要尊重创作者的版权原创声明。</p><p></p><p>在开源领域，大家会非常关注 License，为什么呢？很多开源软件是免费可获得或公开可获得的，但并不意味着可以不讲规则的随意使用。在使用开源软件时，需考虑所使用开源软件的 License 限制，License 的选择直接决定了使用时需要遵从的义务。</p><p></p><p>之前有看到一些项目，直接 Copy 别人的项目代码，去掉 License，做了一些修改就重新发布了。从其新发布版本的版权声明中，看不到原来项目的任何痕迹。这种情况很多，但不建议大家这么做，一定要合规。我们可以把这个开源项目当成库来引用，但如果涉及到代码引用，不管是否要分发，都要尊重版权声明、版权规定。这也是为什么我们要大力推开源雨林的原因，就是要让真正用开源项目的用户理解版权背后的权、责、利，提前规避未来可能会出现的高风险。</p><p></p><p>Q 高琨：开源需要标准吗？如何看待标准、生态、基金会之间的关系？</p><p></p><p>红薯：在开源里面，许可证就是最大的规则。我和大多数人的观点不太一样，现在的开源规则、许可证在过去的二三十年里面好像没有太大变化，很稳定，但确实发展较为滞后了。近几年，社会的发展非常快，如果还是用二三十年前的标准看待今天的局势，那我可能会打一个问号，这些标准是否适合或者说需要做什么样的调整。</p><p></p><p>虽然我现在也没有答案，但从这两年云计算跟开源许可证打架，大家应该也看出了一些端倪。不仅仅是 License，包括整套的玩法、对开源的定义等等会不会因此而发生变化，我觉得这是整个开源界的标准需要一个适应的过程。</p><p></p><p>现在各个不同的角色里，基金会应该发挥其推动作用，基于现状有些新的现实、新的调整，推动标准与时俱进。个人对开放原子开源基金会还是抱有很大期望的。之前也看到国内开始有像木兰的许可证，尽管做的变化不是特别大，但我觉得这是一个很好的开始。北大周明辉老师他们一直也在做这个事情，我觉得咱们可以更大胆开放一点。</p><p></p><p>Q 高琨：如何看待 AI 技术广泛应用后，合规领域带来的全新挑战？</p><p></p><p>堵俊平：像 Commons Clause、SSPL 这类许可证，按照 OSI 的定义，歧视了某种用途未被认可，但在本质上是为了保护自己的商业利益。最早，开源不叫 Opensource Software，叫 Free Software，也就是我们说的自由软件。自由运动发起人 Richard Stallman 是开源届比较崇拜的一个英雄，我认为开源就是靠这些个人英雄主义推动发展的，打破一些垄断还是很好的。现在，我们不断地增加一些原则和约束，使其更加公平。</p><p></p><p>如何在新时代探讨利益和责任之间的再平衡，我认为这是个很好的话题。前段时间 GitHub 推出的 AI 自动写代码神器 GitHub Copilot，写出来的代码的 Copyright 属于谁？该用什么样的 License ？都是迫切需要去思考的问题。技术在发展，我们一定不能固步自封，一定要用发展创新的眼光去审视这些问题。</p><p></p><p>开源走到今天不单是软件，还有硬件、数据，开源的内涵跟外延都在不断扩大，所以跟我们最早设想的开源世界和开源规则会有些变化。不仅像 License，代码可能也是人写的，很多的逻辑也是刻画的，但数据的产生有很多种方式，由机器产生的、人产生的、人和机器一起共同产生的，这里面多多少少会涉及到一些敏感信息。虽然我们一般都要求做脱敏处理，但是像人脸怎么脱敏？脱完敏之后却发现识别不了了。在国外，有些开放的数据，例如图像领域不能用于商业，但你会发现它跟开源的定义又有冲突。开源更定义要求对所有的使用场景、所有使用的人 / 公司 / 国家都是一视同仁的。这种情况我认为在开放的数据领域一定会有一些新的不一样的调整。</p><p></p><p>而且，数据还有一个大的隐患是要防篡改。如果是自然收集来的，它可能比较有价值。但如果人为地做了修改，可能这个数据集就只能起到一个误导的作用。所以这里面除了分发、修改的权利，还有很多限制的权利，以保证来源正当。但不管如何约束，从开源的角度看：合法合规、通过数据集的共享创造更多价值，才是开源数据集最大的初衷和出发点。</p><p></p><p><img src=\"https://static001.infoq.cn/resource/image/66/c0/66bc96188e90319c36d1a044085050c0.png\" /></p><p>点击图片查看详情</p><p></p><p>什么是开源雨林？</p><p></p><p>开源雨林围绕开源通识、开源使用、开源贡献三大方面构建知识体系，愿把长期积累的经验系统化分享给企业，在团队、机制、项目三方面提供合作，推动各企业更高效地使用开源、贡献开源，提升全行业开源技术与应用水平。</p><p></p><p>开源雨林的内容已开源，并托管在<a href=\"https://github.com/opensource-rainforest\">https://github.com/opensource-rainforest</a>\"，欢迎通过 Pull Request 的形式贡献内容，通过 Issue 的形式展开讨论，共同维护开源雨林的内容。</p>",
    "publish_time": "2022-07-01 14:36:16",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "放弃 GitHub，现在正是时候？",
    "url": "https://www.infoq.cn/article/ewgLo1XFw52E0BjwFHei",
    "summary": "<p>6 月 30 日，<a href=\"https://zh.m.wikipedia.org/zh-hans/%E8%BD%AF%E4%BB%B6%E8%87%AA%E7%94%B1%E4%BF%9D%E6%8A%A4%E7%BB%84%E7%BB%87\">SFC</a>\"（软件自由保护协会）在自己的官方博客发布了一篇名为“Give Up GitHub: The Time Has Come!”的文章，随即在 <a href=\"https://news.ycombinator.com/item?id=31932250\">Hacker News </a>\"上引发了网友的激烈讨论。</p><p>&nbsp;</p><p>SFC 在文章中对 <a href=\"https://github.com/\">GitHub</a>\" 的许多行为进行了控诉，列举了 GitHub 的多条罪状。同时呼吁大家停止使用 GitHub，摆脱 GitHub 的长期控制。</p><p></p><h3>Copilot 商业化 - 压倒骆驼的最后一根稻草</h3><p></p><p>&nbsp;</p><p>长期以来，SFC 一直都在考虑放弃 GitHub，上个礼拜，GitHub 宣布 <a href=\"https://github.com/features/copilot\">Copilot</a>\" 成为商业盈利产品，坚定了 SFC 放弃 GitHub 的决心。</p><p>&nbsp;</p><p>具体来说，自从微软收购 GitHub，并在一年前首次推出 Copilot，SFC 就一直在就此事件与微软和 GitHub 进行沟通，SFC 提出了几个问题，都没有得到明确的答复。半年之后，SFC 将问题公开，并成立专家委员会，希望大家重点考虑 AI 辅助软件的道德影响问题。同时，SFC 还组织了公开讨论活动，但邀请微软与 GitHub 代表参与讨论时被无视。近期，GitHub 做出答复，称不会参与关于此问题的任何公开或内部讨论，理由是“（关于 AI 辅助软件的道德）的广泛对话似乎不太可能改变贵方（软件自由保护协会）的立场，因此我们（GitHub）没有回应贵方的具体问题。”SFC 认为即便是如此敷衍的回答也要等待一年之久是非常不尊重人的事情。</p><p>&nbsp;</p><p>而 Copilot 的收费则是直接惹怒了 SFC，“以 Copilot 的方式推出不尊重 FOSS 社区意见的营利性产品，是不道德的。”SFC 表示。</p><p>&nbsp;</p><p>以下是 SFC 向微软/GitHub 提出的三个问题。</p><p>&nbsp;</p><p>1、在微软和 GitHub 的公开声明中，贵方依托的是什么判例法？GitHub 当时的 CEO 曾表示：“1）在公共数据上训练机器学习系统属于合理行为；2）输出结果属于操作者，其性质类似于编译器”。</p><p>&nbsp;</p><p>2、Copilot 能够在任意代码上训练模型（并允许用户基于该模型生成代码）且不受任何许可条款的约束，那么为什么只使用开源软件来训练 Copilot 模型？比如为什么不把微软 Windows 和 Office 代码纳入训练代码集？</p><p>&nbsp;</p><p>3、能否提供一份用于 Copilot 训练集的许可证清单，包括版权所有者或 Git repo 名称？如果无法提供，为什么要向社区隐瞒这些信息？</p><p>&nbsp;</p><p>微软/GitHub 仅对第一个问题进行了回答。SFC 认为，GitHub 的沉默其实侧面反映出他们也不知道自己侵犯了谁的版权、什么时候侵犯的、怎么侵犯的。鉴于此，SFC 呼吁所有 FOSS 开发者脱离 GitHub，虽然放弃 GitHub 需要付出很多，牺牲很多，但只有这样才能向 GitHub 和微软的不良行为表达抗议。</p><p>&nbsp;</p><p>“放弃专有软件、支持 FOSS 解决方案之所以如此困难，背后的逻辑就是由专有厂商设计出来的。”SFC 表示，“是 GitHub 需要 FOSS 项目使用他们的专有基础设施，而不是我们只能选择 GitHub。”</p><p></p><h3>SourceForge 的前车之鉴</h3><p></p><p>&nbsp;</p><p>年长一点的开发者可能还会记得 <a href=\"https://sourceforge.net/\">SourceForge</a>\"，这是 20 多年前最流行的代码托管站点。后来，以完全自由与开源（FOSS）标榜自己的 SourceForge 突然宣布将所有代码私有化，于是各大 FOSS 项目纷纷离开，告别这个平台，SourceForge 也逐渐走向没落。虽然现在 SourceForge 仍在托管代码，但它为了盈利已经变成了“页面强塞大量广告”、“引诱用户在不经意间点击跳转”的平台。</p><p>&nbsp;</p><p>SourceForge 的惨痛教训告诉我们由营利性专有软件企业来主导 FOSS 协作开发网站是个错误，但是这样的事情正随着时间推移渐渐淡出人们的脑海。</p><p>&nbsp;</p><p>过去十年，GitHub 已成为 FOSS 开发的主导力量，他们构建了友好的用户界面，将社交交互功能引入 Git 技术，但 Git 的设计初衷，只是希望在没有集中站点的情况下实现分布式软件开发。凭借 Git 与 SourceForge 的经验，GitHub 迅速吸引了全球的开发者在其平台上构建 FOSS。GitHub 希望从这些专有产品身上，尤其是想要使用 GitHub 工具开发内部专有软件的用户身上获利，不过 GitHub 也为这些项目提供了优秀的服务。</p><p>&nbsp;</p><p>但纵观各大科技巨头在免费产品中精心设计的“套路”，你会意识到，“如果你不是他们的客户，就会成为他们的产品”。 FOSS 的开发方法已经成为 GitHub 的产品，并且在广大开发者或主动、或被动的支持下完成了专有化与重新打包。于是乎，FOSS 开发者们陷入了温水煮青蛙的糟糕境地，随着 GitHub 的行为越来越出格，大家从气愤到原谅，再到忽略甚至变得逆来顺受。</p><p></p><h3>抛弃 GitHub 势在必行</h3><p></p><p>&nbsp;</p><p>SFC 提到目前市场上已经出现了替代方案，也许完成度还不是特别高，但大家可以参与其中帮忙改进。放弃 GitHub 意味着要付出巨大的牺牲和时间成本，却势在必行。</p><p>&nbsp;</p><p>SFC 说自己会努力为那些难以迁移的项目提供替代方案，未来几周内，将公布更多托管实例选项，同时修改 GitHub 服务指南。</p><p>&nbsp;</p><p>同时，SFC 委员会也将认真研究 AI 辅助软件类开发工具的一般性问题。最近，SFC 初步发现 AI 辅助软件类开发工具在构建阶段，也可以匹配 FOSS 许可证，他们将继续支持委员会进一步探索这个想法，寻找新的应用可能。虽然微软 GitHub 确实是这一领域的先行者，但也有早期报告表明，亚马逊的 CodeWhisperer 系统（上周推出）能够为代码建议功能提供适当的归属与许可支持。</p><p>&nbsp;</p><p>通过 Copilot 及核心托管服务，GitHub 的行为已经在业内造成恶劣影响。SFC 表示也不会寄希望于亚马逊、Atlassian、GitLab 或者任何其他营利性托管商是什么脱离世俗的圣贤，只是单从行动角度来比较，GitHub 无疑要恶劣得多。GitHub 之前就曾多次无视、驳回及/或贬低社区提交的多项投诉，因此 SFC 敦促所有 FOSS 开发者尽快脱离 GitHub，共同夺回本应属于 FOSS 的开发世界。</p><p></p><h3>放弃 GitHub 的其他理由</h3><p></p><p>&nbsp;</p><p>除了 Copilot，SFC 还列举了一下 GitHub 不合理的其他行为：</p><p>&nbsp;</p><p>2020 年，GitHub 与 ICE（美国移民与海关执法局）签订营利性软件服务合同，此事引起许多开发人员的抗议。近两年内，包括 GitHub 的员工在内一直有人呼吁 GitHub 取消该合同。但 GitHub 的答复是，他们的母公司微软多年来一直将 Microsoft Word 出售给 ICE，并没有什么公众投诉。</p><p>&nbsp;</p><p>GitHub 由微软全资拥有，该公司高管历年来多次攻击 Copyleft 许可。GitHub 长期以来一直在试图诋毁 Copyleft，包括在演讲中攻击 Copyleft 和 GCP，其员工也在许多场合争论以说服项目避免使用 Copyleft。</p><p>&nbsp;</p><p>GitHub与 FOSS 项目托管行业中的大多数同行不同，GitHub 甚至不提供任何自我托管 FOSS 项目的选项，他们的整个代码库是秘密的。尽管 SFC 对 GitLab的 \"社区 \"和 \"企业 \"版并行的商业模式有不满，但至少 GitLab 的社区版提供了自我托管的基本功能，而且是 100% 的 FOSS。同时，还有一些非营利性的 FOSS 托管网站，如 CodeBerg，他们将自己的平台公开开发为 FOSS。</p><p>&nbsp;</p><p>参考链接：</p><p>&nbsp;</p><p><a href=\"https://sfconservancy.org/blog/2022/jun/30/give-up-github-launch/\">https://sfconservancy.org/blog/2022/jun/30/give-up-github-launch/</a>\"</p><p>&nbsp;</p><p><a href=\"https://giveupgithub.org/\">https://giveupgithub.org/</a>\"</p>",
    "publish_time": "2022-07-01 14:36:52",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "从 IE 到 Edge：我们跟微软浏览器团队聊了聊Web的过去和未来 | 中国卓越技术团队访谈录",
    "url": "https://www.infoq.cn/article/4fpdRPuriCoBwyNMbhhl",
    "summary": "<p></p><p></p><p>对资深 Web 开发者来说， <!--–[if IE 6]-->这行代码并不陌生。Internet Explorer 曾是 Web 2.0 的源泉，是 Internet 创新驱动力，历经了兴起和衰落，而后成为了 Web 开发者的痛点。2022 年 6 月 15 日，微软 IE 正式退役，在过去的 27 年里，IE 所经历的整个的生命周期其实也是互联网从萌芽到繁盛的历史。</p><p></p><p>接替 IE 的是 2015 年诞生的 Microsoft Edge，这是一款带有复兴使命的浏览器产品。微软将精力放在了将 Edge 打造为现代网络浏览器上。</p><p></p><p>在告别 IE 的特殊时期，InfoQ 有幸和 Edge 团队聚在一起聊了聊浏览器的发展历史，Edge 开发过程和产品理念，以及 Web 开发的过去以及未来。</p><p></p><p>采访嘉宾：</p><p></p><p>邢璟夏：微软（亚洲）互联网工程院浏览器与移动端应用部总经理，全球合伙人。</p><p></p><p>陈志宁：微软（亚洲）互联网工程院浏览器首席技术研发经理。</p><p></p><p></p><h2>从 IE 到 Edge：尊重 Web 的过去，向往 Web 的未来</h2><p></p><p></p><p>构建现代浏览器是一件相当复杂的工作。</p><p></p><p>浏览器本质上是一个操作系统，底层包含渲染引擎和执行引擎两大部分。在将要进入 Web3.0 的时代，网站上的元素以及互动已经非常多、非常丰富，为了支持这么丰富的展现形式，同样还要兼顾效率，渲染引擎已经变得非常复杂。除了渲染引擎之外，还要去搭建整个浏览器的生态和众多功能。</p><p></p><p>无论是 Edge 还是其他浏览器，很多功能还都有跨屏幕跨设备同步的能力。我们每天在浏览器里做着各种操作，比如在电脑端将网页放到收藏夹里，在手机端也能看到同样的网页。这些操作看似点点手指头这么简单，背后其实能分解出很多工作，要用很多前端的能力去跟用户做交互，那么这就导致前端执行引擎逻辑同样不会简单。因此作为一个网络上供上亿人使用的交互应用，开发一个浏览器所涉及的代码量已达数千万行，跟桌面操作系统同属计算机领域最为复杂的工程之一。</p><p></p><p>经过了二三十年的发展，这个行业仍然处于竞争激烈创新不断的时期，我们常见的包括微软的 IE/Edge、苹果的 Safari、谷歌的 Chrome 等。其中 IE 曾是全球市场份额第一的浏览器，并在 2003 年迎来历史巅峰时刻，全球份额高达 95%，远超现在领先的 Chrome、Safari 等浏览器的份额。</p><p></p><p>IE 引入了如 ActiveX 控件独有框架，在 IE 处于主导地位的时代，大量网站和其他传统应用程序选择只与 IE 浏览器完全兼容，其结果就是其中很多缺少更新的网站至今只支持 IE 浏览，如果换一个浏览器访问的话，网站的主要功能会无法运行。</p><p></p><p>曾经成为 Web 开发者的痛点，不兼容 macOS 系统，经历过被竞争，微软勇于从过程中学习，2022 年 6 月 15 日，IE 正式退役，微软 Edge 浏览器为它的替代者。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/23/23ec9bff42e4b1d3992a2f3874ef7515.png\" /></p><p></p><p>新一代的浏览器放弃了 IE 专有功能，但其双引擎形式能支持 IE 模式，且能兼容其它平台，拥抱全平台，将可用性扩展到了 macOS、Linux、Android 和 iOS 系统。</p><p></p><p>作为微软最新的浏览器平台，Edge 有两大发展阶段。首先是于 2015 年发布的第一版本，当时使用的是微软自己的引擎 EdgeHTML，旨在与 Safari、Chrome 和其他浏览器使用的 WebKit 引擎完全兼容。基于自研引擎，微软还迭代了数次，于 2017 年发布了安卓跟 iOS 的版本。</p><p></p><p>其次是在 2018 年，微软做出了迁移到 Chromium 的大胆决定，将 Edge 的底层渲染引擎和 JavaScript 执行引擎迁移到了 Blink 和 V8，这相当于将整个代码做了一次脱胎换骨的全新升级。2019 年，微软发布了基于新的 Chromium 浏览器的预览版本，同时在同年 5 月 20 号推出了 Mac 版本。</p><p></p><p>2020 年 10 月份微软再次发布了 Edge for Linux，从此覆盖了大部分的主流操作系统，全面拥抱全平台，这也是跟 IE 之前一个很大的不一样。</p><p></p><p></p><h3>亲历者的独到见解</h3><p></p><p></p><p>浏览器发展至今，拥抱标准、提升体验已经是一种公认的趋势。</p><p></p><p>微软浏览器的发展有过无人能及的巅峰但也曾受到过质疑，尤其是在过去几年谷歌 Chrome 浏览器接管成为市场主导者之后。但无论是目睹浏览器逐渐稳定的开发者，还是参与浏览器产品的设计者，作为历史的见证者，都一定会有自己的体会以及对技术的独到见解，了解这些背后的故事才能够明白技术为何这样演变。</p><p></p><p></p><blockquote>专有框架是 Web 开发史上最大的噩梦？！</blockquote><p></p><p></p><p>多年来，HTML 前端经历过很多阶段，IE 经历了多次重新设计。IE 的第一个版产生于 Web 1.0 时期。前端主要是完成渲染，用户能够被动接收并阅读页面内容，是一种单向的体验。</p><p></p><p>到了 Web 2.0 时代，用户开始有了更多交互诉求，实现在页面上登录、购买、点赞、投票… 网页不再是静态实体。作为这样所有页面的载体，浏览器也要保持与时俱进。在这个时期，IE 引入了支持异步的 AJAX、后来必不可少的 CSS 功能，以及现在广受诟病的 ActiveX 控件支持。</p><p></p><p>对于 IE 的技术，邢璟夏认为：“如果我们站在这个时间点，从上帝视角往回看的话，你现在可能会觉得 ActiveX 技术已经过时了，但回到那个时间点的话，ActiveX 是微软提出的在当时能够切实有效的解决问题的一种手段。只不过到了今天，有更好的实现方式了，它就不那么 fashion 了。”</p><p></p><p></p><blockquote>为什么 IE 不兼容 macOS？</blockquote><p></p><p></p><p>在苹果系统占据半壁江山的时候，IE 不支持 macOS 确实有些令人费解。但如果了解 2000 年左右的一些历史背景，我们就会知道微软浏览器在当时是支持 macOS 的。在 1997 年到 2003 年，MacOS 10 时期，IE 是苹果默认绑定的浏览器。</p><p></p><p>据 Wired《Apple Rescued – by Microsoft》一文记载，在这个时间段，微软向苹果投资了 1.5 亿美元，作为与苹果签订的五年协议的一部分，微软一直在为 Mac 维护 IE。有老用户评价说，“那时，Mac 上的 IE 是当时该系统上最好的浏览器。相比其它浏览器，IE 快速、稳定，看起来很原生…”</p><p></p><p>五年过去后，苹果开发了自己的浏览器，于 2003 年推出基于 WebKit 的 Safari 浏览器。微软随之停止了对于 macOS 的支持，专注于 Windows，并建议用户迁移到苹果自带的 Safari。更重要的是，苹果于 2005 年将 WebKit 开源，当谷歌开始开发自己的浏览器时，它转向了 WebKit，Chrome 的故事就开始了…</p><p></p><p>“这也是当时的一个技术氛围，当时业界的状态是各大科技公司有各自的系统，各占一方鳌头，不是像今天这样的业界，着重于共创共生跨平台的协作。”陈志宁讲到，“如今，微软的 Edge 浏览器也能够覆盖各种平台，不只是 Windows、macOS 以及 Linux，还有移动端的 iOS 跟安卓，还有各种类型的用户装置，包括桌面、移动、电视、微软的 Xbox 游戏平台，还有最新、最智能的混合现实的 Hololens，都能够支持使用 Edge 浏览器。”</p><p></p><p></p><blockquote>为什么会采用开源内核？</blockquote><p></p><p></p><p>谷歌于 2008 年发布了 Chrome 浏览器，并开源了 Chromium 内核源代码，最开始基于 WebKit 和 JavaScript 执行引擎 V8。后来，Chrome 开始研发自己的渲染引擎，形成了 Blink+V8 的引擎架构。</p><p></p><p>Chromium 完全由开源社区进行维护，生态开放且繁荣。微软浏览器于 2018 年转向开源内核后，Edge 团队就逐渐成为了全球第二大 Chromium 开发团队。Edge 基于 Chromium 底层做了很多性能优化，还引入了很多人工智能、Machine Learning 的技术。</p><p></p><p>微软将 Chromium 作为 Edge 引擎收到了业界褒贬不一的评价，有些人认为此举减少了整个 Web 浏览器市场的多样性。</p><p></p><p>邢璟夏认为，利用开源回馈开源是一方面原因，最重要的是“我们希望用户访问一个网站的时候，不管用什么浏览器，他都能得到一个高度一致的体验。而开发者在做这个网站时，不需要在 Edge 上适配一次，在 Chrome 上适配一次，在 Safari 上再适配一次。适配多次对开发者非常不友好。”</p><p></p><p></p><h3>构建现代浏览器：兼顾性能、功能和安全</h3><p></p><p></p><p>互联网已经发生了翻天覆地的变化，重新构建的 Edge 浏览器也放弃了 IE 上的一些过时技术，但最重要的是得到了性能上的明显提升，启用速度快，也不怎么占内存。</p><p></p><p>Edge 团队在日常中不断地去对底层的渲染引擎和 JavaScript 执行引擎做深度技术优化，比如像 PGO 算法、渲染引擎的 hot code paths 功能，让渲染速度跟 IE 相比有比较大的提升，其中 CPU 使用率优化了 33%，内存使用率优化了 32%。</p><p></p><p>构建浏览器非常重要的一个点是页面的使用反应，不管是在滚动还是按键，在页面上做交互的时候，渲染速度和用户体验都是非常重要的。以前很多重度用户习惯打开几十个 Tab 页面，在页面元素比较复杂的情况下，打开多个页面的行为会导致浏览器明显卡顿，反馈很慢， 为此 Edge 的团队做了很多的深度的技术优化，放到现在，这样的使用方式对用户来说几乎没有什么影响。Edge 团队不断“一步一步地”做了很多小而美的优化来提升页面渲染速度，还通过 Smart Sleep 人工智能节能功能，判断不常用的页面并将内存先回收，直到再次点击的时候重新快速渲染，保证在打开很多页面的时候，整个系统的内存占用率不会是一个线性的提升。</p><p></p><p>此外，虽然 Edge 跟 Chrome 都基于开源的 Chromium，但微软在此之上还做了很多差异化的能力。比如从 Edge 诞生就具备的沉浸式的阅读模式，收藏集锦功能，垂直标签栏功能，以及智能翻译和 Read Aloud（大声朗读）无障碍功能等等。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/7c/7c47fe004f043cce5c360af0514b02b3.png\" /></p><p></p><p>背靠微软的综合研发能力，Edge 还引入了一些其它 AI 功能。像智能填充功能，使用浏览器时我们会在很多地方反复地输入一些高度重合的信息，比如购物时可能在京东输入完地址信息后，在天猫可能还要输入，Edge 提供了一个智能填充的功能，用机器学习训练一个模型，在保证用户隐私的情况下抽取字节段，填写时自动判断自动填充。另外 Edge 还能在打字的时候提供智能纠错，通过人工智能判断上下文的语境，对用词不对的地方给予提醒。除此之外，在购物体验上也有专门的创新功能，可以跨网站或 App 端比对多家的商品价格，做信息匹配和推荐，保障购物体验的同时还能帮用户省钱。</p><p></p><p>对于 Edge 来说安全也是一个非常重要的领域。微软团队做了很多增强安全保护的功能，保障 Edge 浏览器成为最安全的浏览器。比如 Smart Screen 的功能，为用户提供过滤机制，用机器学习智能过滤钓鱼网站、潜在有危险的网站。在企业侧 Edge 跟 Microsoft 365 整体的产品也有很强的联动机制，还能够基于 Azure Active Directory（AAD）、Access 设定来保障企业的机密数据。在企业版中提供远程浏览器访问，在服务端去渲染，再将 Picture、Video 形式的数据传到客户端，彻底的保护客户端的安全。</p><p></p><p></p><h2>Edge 背后的中国团队</h2><p></p><p></p><p>这个影响上亿万人的产品的背后，有一支中国开发团队参与产品的全球的创新。他们肩负了重振微软浏览器的品牌重任，让 Edge 跟上行业竞争的步伐，不断赢取更多的用户。中国团队负责了 Edge 浏览器移动端、部分桌面端，以及企业端功能开发。Edge 在中国的整个产业链非常大，而且涵盖了浏览器的方方面面。</p><p></p><p>为赢取用户的喜爱，Edge 非常用心在关注浏览器的用户体验和包容性。浏览器必须是可互操作的并符合一套全面的标准，所以 Edge 在带领 Web 业界技术方向的同时，也会参与 W3C 和 EcmaScript JavaScript 标准的制定。</p><p></p><p>此外，微软在中国也设有用户体验团队，为不同用户群体提供个性化服务，并针对不同场景测试和验证用户对 Edge 的各种功能的接受度和喜爱度。</p><p></p><p></p><h3>企业文化</h3><p></p><p></p><p>中国团队面向全球开发，跟印度团队和美国团队也有紧密合作，同时还会整合 AI 团队和安全团队的力量，比如 AI 能力的应用和安全上的补丁升级。大家跨团队跨国家协作，让这些前沿技术落地到不同的合适的场景中。</p><p></p><p>微软在很多年前开始就是一个跨国开发公司，堪称是全球化企业的范例。在协作中，他们遇到过的问题也是现在中国出海全球化企业遇到的问题，比如虽然开会有时差。这种情况下，微软的经验是首先团队之间一定会做足沟通，相互协调，“开会会找一个大家都能接受的黄金时间”。另一个是在有文化差异的背景下，鼓励成长型思维，各国团队之间强调“相互欣赏，相互学习”，保障彼此之间的良好沟通，践行 OneMicrosoft 的价值观，让大家在相互尊重的情形下进行协同开发。</p><p></p><p>在成熟的企业文化下，Edge 团队虽然是一支全球化的分布式团队，在不同地方跨地区协作，但无论是国内还是国外，远程在家还是在公司，“跟在一个地方没有区别。”邢璟夏说，“大家并不会考虑多地区而去单独设计我们的产品研发流程。但是我们会为了考虑到当地有文化的差异，大家作息时间时差的差异，会定向的做一些协同和沟通机制，通过流程及工具让人和地点相互解耦。”</p><p></p><p></p><h3>工程文化</h3><p></p><p></p><p>据网络上的最新数据显示，Edge 受欢迎程度不断攀升，今年 4 月占有率突破了 10% 的大关（约 1.56 亿用户），首次超过苹果 Safari，成为世界第二大浏览器。</p><p></p><p>上世纪八九十年代，市场需求较为稳定，瀑布式开发流程是首选。瀑布模型相当于半年开发、半年测试：前半年就是疯狂的写代码，后半年疯狂的解 Bug，然后上线。在现在的发展趋势下，很难预见到一年之后用户需要什么，所以瀑布模式肯定是不可取的。研发团队需要加快整体的开发速度，现在很多移动互联网产品都会采用小步快跑、快速迭代的方式。但到底是采用小步快跑，还是一次性做到位？这很难有一个确切的标准。在有激烈行业竞争的情况下，Edge 的产品会采用什么开发速度？微软也一直在前进，在进化，在“快”跟“好”之间去找一个平衡点。</p><p></p><p>由于整个业务非常复杂，微软会把权力下放到各个团队，让大家去选择自己合适的开发的步调、开发的方式去做事情。在 Edge 团队中，新浏览器的发布周期选择了跟 Chromium 保持一致。Chromium 开发者社区是一个全球顶尖的开源社区，开发者们在不停地贡献自己的代码和力量。跟社区周期保持一致的好处是能第一时间更新，杜绝安全隐患，并及时将最新版本送到用户手上。</p><p></p><p>在定好时间周期的基础上，Edge 追求的是技术稳定性、技术健康度，和功能开发之间的平衡。上线一个算法，不会是要求时间优先，比如下个月就要看到，这种方式就算能上线了，也会导致优化指标达不到最初的效果。所以，在做项目管理和排期时，Edge 团队会先保证更好的工程体验，持续在基础的性能、内存优化、启动速度上投入，保证有非常大的数量的技术人力在做整体的稳定性、健康度优化的工作。</p><p></p><p>在互联网模式的冲击下，减少测试步骤、快速进行试错已成为部分企业的常见打法，这一切不断冲击着传统软件测试中赖以生存的“流程”“规范”等优势，但在微软，还是有非常严格的产品交付流程。</p><p></p><p>由于 Edge 的用户体量已经过亿，交付到用户和开发者手上的必须是一个高质量产品。因为在用户体量非常大的情况下，小问题很容易被放大，假设比例是万分之一的话，10 万人产品只影响 10 个用户，如果产品用户的体量不大，那么可以走快速发布、快速迭代路线。但微软 Edge 已经有了上亿用户，如果产品中存在一个 Bug，发布之后影响的可能起码是 10 万名用户。“在问题产生之前先把它找出来、解决掉，而不是事后再去防范。”</p><p></p><p>在一个完整的研发流程上，微软在测试上的投入非常大，会给开发留足够的时间去做自动化测试。相对手工测试用例，自动化测试是一种更高效的做法，相当节省时间的方式。并设有专门的测试团队去保障每一个 feature 的质量，负责测试产品的功能、性能、体验，保障给到用户的时候是最好的状态。因为微软所有的产品都是 for global 的，所以每个产品都是多语言的，这给测试带来的挑战也是非常大的，所以在 Edge 开发流程中，从产品经理到开发，到测试团队，都要对“测试”的事情负责。</p><p></p><p></p><h2>Web 技术的发展：幸福的繁荣</h2><p></p><p></p><p>如果说 IE 曾是开发者的痛点，但 Web 开发社区显然表现出对 Microsoft Edge 的喜爱。</p><p></p><p>开发人员和 QA 测试人员都知道为 Web 构建的功能可以在一个浏览器中运行，并不意味着它可以在每个浏览器中运行。但 Web 的兼容性又是极其重要的，是开发一个好的 Web App 的必备关键，迁移到 Chromium 意味着 Edge 的框架功能更加一致。Microsoft Edge 中的内置开发者工具也具备了 Chrome 中提供的工具，包含 Extension、DevTools，以及 F12。另外，Edge 还提供了 WebView2 和 PWA（渐进式网络应用程序）平台。</p><p></p><p>WebView2 能够让开发者在他们的原生应用里嵌入 WebView，来渲染已有的 Web 内容和 Web 前端模块。WebView2 本身基于 Microsoft Edge 渲染引擎，是一个基于 Chromium 的 Hybrid App 开发平台，但又独立于 Edge 浏览器，不需要用户安装 Edge 浏览器来运行。Web 开发团队可以利用它做到一套 Web 代码，跨不同平台使用。</p><p></p><p>而 PWA 则能帮助前端开发工程师适配原生应用，用户能够将已有的 Web 应用直接安装成 native Apps，并支持离线访问、service worker。与 WebView2 相比，各有不同的适用场景，PWA 使用场景更为广泛。</p><p></p><p>“微软的 Teams 会议应用，在 Windows 平台上面已经开始用 WebView2 来代替 Electron，主要原因是平台性能的支持和内存使用优化。WebView2 能让 native object 和 Web 结合来使用例如 Video 直播流等原生高性能 C++ 模块，适合 Teams 这种需要处理大量音频与视频内容的并对时延要求很高的场景。Outlook、Office、Visual Studio 等都已经逐渐使用 WebView2 场景来渲染它的 Web 模块。”陈志宁介绍。</p><p></p><p>现如今，在 Web 跟 native 交互的应用场景下，Web 跟 App 的边界越来越模糊，移动端、桌面端也慢慢有了整合的趋势。对于 Hybrid App 开发来说，WebView2 平台已经成为 Windows 操作系统上面，已经大量在使用渲染的模块。跨平台开发是一个非常显著的趋势，WebView2 和 PWA 是很好的支持跨平台快速创新和迭代的方式。Edge 浏览器作为一个底层技术支撑平台，在开发层面上抹平了各平台之间的差异。</p><p></p><p></p><h3>主流框架开始走向趋同，未来能否 Web 打天下？</h3><p></p><p></p><p>可以看出，Web 开发发展到现在，不仅仅是开发一个“网站”那么简单，涉及的技术框架层出不穷，无论是 WebView2、Electron、PWA 还是 React，常常让开发者在选择时陷入困境。</p><p></p><p>设计框架如此繁荣的背后，也跟 Web 的发展有很大关系。</p><p></p><p>最开始的时候，Web1.0 时期，主要是提供单向的阅读功能，对前端 JavaScript 语言本身不会有太高的要求。后来 AJAX 出现了，网站可以异步跟服务端去交互了，这也对 JavaScript 提出了更高的要求。然而 JavaScript 最初是只花了 14 天设计出来的语言，在设计的时候做了局部的优化，但是整体的优化考虑不够。于是语言本身也需要并且在不停的迭代，从 JavaScript 5 进化到 JavaScript 6，ES6 到 ES7，再到微软推的 TypeScript。</p><p></p><p>语言进化也给框架的性能提出了越来越高的要求。最早的时候做任何的页面可能就是几百个元素，可能一两屏，这时用 JQuery 就够了。到后来页面越来越复杂，有若干屏，还有各种跑马灯、反转等各种动画效果，同时有了更多需要跟用户交互的地方，开发者就会发现自己的代码越写越慢，新的框架就应运而生了。像 React 刚开始推出的时候，最具有吸引力的就是虚拟 DOM 树，用 diffing 的方式去修改 DOM，从而节省了非常多的渲染时间。这也就是说随着 Web 的发展，开发者不断地需要更得心应手的框架语言来让开发如虎添翼。</p><p></p><p>现在前端框架百花齐放、百家争鸣，因为大家都可以进来贡献，这也就是 Web 生态繁荣的原因。“所以我更愿意称这个为幸福的繁荣。”邢璟夏表示。</p><p></p><p>但另一方面，不同的设计框架之间也开始越来越趋同了。很多主流框架之间已经开始相互借鉴，相互学习。这也是一种必然趋势。</p><p></p><p>过去一二十年，Web 的发展像过山车一样，有着像陡、平缓、陡、平缓这样的轨迹曲线，中间不断的有新的场景爆发，倒推着框架去做升级。比如在 AJAX 出来之前很长一段时间，前端的发展都是比较平缓的。AJAX 技术出现后，大家发现 Web 有了很多新的玩法。为了配合新的场景，这些框架势必是要去做一个大的升级。但最近几年，用户场景本质上没有什么变化，更多的是在优化框架的编程效率、开发效率、运行效率。</p><p></p><p>因为没有新的用户场景，大家会发现不同框架之间的优化方法最后基本上都是类似的，目的都是在维护以及提供更好的用户体验。这种情况下，很多新性能会相互之间借鉴。但用户可见的性能还有很大的提升空间，所以在可见的未来，Web 开发还是会非常有生命力的。假设再加上 Web3.0 创造的可能性，未来五到十年的 Web 开发是非常值得看好的。“再过十年回头看，很有可能你的开发框架就换了，这一点都不让人觉得意外”。</p><p></p><p>“再以后，前端开发是不是可以一个 Web 打天下，其实这也是一个很有意思的话题。”</p><p></p><p>在 Web 开发中，主要使用的 JavaScript 语言，它的缺陷是作为一种类执行语言是有性能天花板的。现在，我们有了 WebAssembly，它解决的就是最根本的性能问题，并且目前 WebAssembly 也取得了一定的发展，打破了 JavaScript 语言的天花板。</p><p></p><p>另外 WebAssembly 也不局限于使用 JavaScript，开发者可以用 C++、Go、Rust 各种语言来编写代码，最后能转变成 WebAssembly 在端上运行即可。一旦 WebAssembly 能够普及起来的话，很多之前在浏览器里不能做的事情，会通过这种技术在浏览器里实现得更加的丝滑，从而创造出更多的可能的业务形态。</p><p></p><p></p><h2>写在最后</h2><p></p><p></p><p>从 1992 年在北京开设第一间办公室起，微软作为一家全球化技术企业开始扎根中国，今年刚好是其落户中国的第三十个年头。</p><p></p><p>在全程见证并参与了中国信息产业发展壮大的同时，微软在中国的团队规模也不断扩大，给中国带来了不少科技人才。当代年轻人面临职业选择时，微软作为一家老牌技术企业，有哪些值得称道的地方？</p><p></p><p>对于这个问题，邢璟夏是这么回复 InfoQ 的：“可以从两个方面来看。第一个方面可以看商业模式，微软的股价在过去 8、9 年里应该是翻了有 10 倍，这一点的话其实在科技公司里头，而且是已经有了这么多年生命的科技公司来说其实是非常非常少的。微软其实一直是在持续的创新、持续的改进，每一步可能让人觉得步调不是很大，但每一步走得都非常结实，而且时至今日，微软在创新上还是有非常强大的生命力的，这点的话不管是通过云或别的技术，其实是能够看得见的。</p><p></p><p>第二个方面，微软整个的文化非常强调新鲜东西的输入，微软里有很多同事非常的谦虚，他有可能在微软工作了非常多年，但他的求知欲一直很强，很愿意去学习。因为本质上还是因为微软的成长型思维文化，已经从下到上贯穿到公司当中，在言谈举止之间将成长型思维融入到我们的工作当中了。这种学习的方法、这种态度，对大家来说也都是能够受益匪浅的。”</p><p></p><p>电子书推荐</p><p></p><p>本文选自<a href=\"https://www.infoq.cn/minibook/TwGuGOHY5HDv3RLaeFLC\">《中国卓越技术团队访谈录》（2022 年第二季）</a>\"，本期精选了微软 Edge、蚂蚁可信原生、明源云、文因互联、Babylon.js 等技术团队在技术落地、团队建设方面的实践经验及心得体会。本期电子书已经在 InfoQ 网站上线，大家可以扫描下图二维码下载，查看更多精彩内容。</p><p></p><p>《中国卓越技术团队访谈录》是 InfoQ 打造的重磅内容产品，以各个国内优秀企业的 IT 技术团队为线索策划系列采访，希望向外界传递杰出技术团队的做事方法 / 技术实践，让开发者了解他们的知识积累、技术演进、产品锤炼与团队文化等，并从中获得有价值的见解。</p><p></p><p>访谈录现开放长期报名通道，如果你身处传统企业经历了数字化转型变革，或者正在互联网公司进行创新技术的研发，并希望 InfoQ 可以关注和采访你所在的技术团队，可以添加微信：caifangfang842852，请注明来意及公司名称。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/56/563da3f84d923258d994fde4864cdc1f.png\" /></p><p></p><p></p><p></p>",
    "publish_time": "2022-07-01 14:44:55",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "谷歌卷自己，继Imagen之后继续放大招：靠200亿参数由文本生成的图像惊呆网友！",
    "url": "https://www.infoq.cn/article/LZUlXDl0YDL9q2k4apg8",
    "summary": "<p></p><h2>谷歌亮出最新文本到图像生成模型Parti</h2><p></p><p></p><p>如今，文本到图像生成模式风靡一时，但谷歌公司最近密集的一系列新发布，却让大众有些出乎意料。而在Google Research之前的图像到文本生成模型Imagen发布之后，他们决定展示另一个模型构建来完成同样的任务。</p><p></p><p>据介绍，备受关注的这一最新模型被命名为<a href=\"https://github.com/google-research/parti\">Parti</a>\"（Pathways Autoregressive Text-to-Image）。虽然<a href=\"https://github.com/lucidrains/imagen-pytorch\">Imagen</a>\"和DALL· E2是一种扩散模型，但Parti遵循DALL· E的足迹作为自回归模型。无论其架构和培训方法如何，最终用途都是一样的：这些模型（包括Parti）将根据用户的文本输入生成细致的图像。</p><p>&nbsp;</p><p>Imagen 的图像生成具有与 Open AI 的<a href=\"https://github.com/lucidrains/DALLE2-pytorch\">DALL-E 2&nbsp;</a>\"相似的架构，但输入依据的是大型 AI 语言模型——由于具有更高的语言理解能力，因此可以从文本描述获得更好的图像生成结果。新的 AI 模型 Parti 尝试使用一种更接近大型语言模型功能的替代架构（自回归），这些语言模型能根据之前的单词和句子或段落的上下文预测合适的新词。Parti 将这一原则应用于图像，并取得了成功。</p><p>&nbsp;</p><p>Parti 表明，与大型语言模型一样，图像 AI 通过更全面的训练和更多的参数获得了明显更好的结果。它还可以将长而复杂的文本输入准确地翻译成图像，这表明它可以更好地理解语言和主题之间的关系。</p><p></p><p>伴随着Parti的发布，还有一篇博客文章描述了使用Google的文本到图像模型创建图像的过程，可以在此处访问：<a href=\"https://blog.google/technology/research/how-ai-creates-photorealistic-images-from-text/\">https://blog.google/technology/research/how-ai-creates-photorealistic-images-from-text/</a>\"</p><p></p><h2>Parti详细参数</h2><p></p><p></p><p>研究人员创建了四种不同规模的Parti模型，其中包括3.5亿、7.5亿、30亿和200亿的参数计数。这些模型是使用Google Cloud TPU进行训练的，这些TPU能够轻松支持创建这些巨大的模型。网站上提供一些不同模型规模间的比较，但在这里仅分享一些从论文中摘取的比较（从左到右从小到大）：</p><p>&nbsp;</p><p><img src=\"https://static001.geekbang.org/infoq/b1/b1ac25039b2e617d45f51326fbff9501.png\" /></p><p></p><p>&nbsp;像所有其他文本到图像生成器一样，Parti以各种类似的方式处理存在的各种问题，例如不正确的对象计数、混合特征、不正确的关系定位或大小、不正确处理否定，列表可能会继续等。以下是Parti进行处理的一些例子：</p><p></p><p><img src=\"https://static001.geekbang.org/infoq/7d/7d89cb203e32346dc721e34bd1c20110.png\" /></p><p></p><p>Parti 生成的图像分辨率为 256 x 256 像素，然后可以放大到 1024 x 1024 像素。下图显示了四种经过不同级别训练的 Parti 模型在相同命令提示下生成图像的质量差异。具有 200 亿参数的最大模型生成了与长文本输入匹配的无错误图像。最大版本的 Parti 模型甚至可以拼写单词，而 DALL-E 2 只能生成图像。</p><p><img src=\"https://static001.geekbang.org/infoq/76/76aec738b8f8f7503463089d899d4a5d.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/67/67bb50c62b9d1de97b916b86b8fc292b.png\" /></p><p></p><p><img src=\"https://static001.geekbang.org/infoq/a3/a32c68461a238e0ce6fc4e6e2efda681.png\" /></p><p></p><p>“20B 模型特别适合于需要世界知识、特定视角或符号书写和表示的抽象任务。”<a href=\"https://www.infoq.cn/article/6rjRXol3jt56LjTIsMRp\">谷歌的研究团队</a>\"写道。</p><p>&nbsp;</p><p>另外，Parti 还可以生成超越培训材料及其主题的出色的图像。研究人员认为，这意味着图像 AI 能够准确地再现世界知识，以精细的细节和交互组合产生许多主角和对象，并遵循特定的图像格式和风格。</p><p></p><h2>文本生成的图像过于逼真，背后风险令人担忧</h2><p></p><p>&nbsp;</p><p>尽管Parti已经有能力生成“以假乱真”的超逼真图片，但其实该系统存在的一些问题也不容忽视。</p><p>&nbsp;</p><p>谷歌研究团队对模型生成的图像可能包含对人的刻板印象也感到担忧，这也是Imagen 和DALL-E 2&nbsp;正在努力解决的问题。此外，由于可能会产生逼真的人物图像，因此存在额外的深度伪造风险。出于训练数据存在的偏见、对产生有害图像的担心，以及公众不可避免地滥用等原因，研究团队目前没有公布模型、代码和其他数据。</p><p>&nbsp;</p><p>值得注意的是，Parti 这个AI模型的名字或许有着另外的深意：Parti 中的 P 代表 Pathways，这是谷歌的下一代 AI 架构，由谷歌人工智能主管Jeff Dean在2021年底首次引入。Pathways 的目标是一个智能的、多用途的 AI 系统，有朝一日能够泛化“跨越数百万个任务”。Parti 在其名称中包含 Pathway 的事实可能表明它正在接管这个未来架构中的图像部分。另外，Parti 和 Imagen 架构的组合也是可以想象的。</p><p>研究团队在网站上展示了Parti 图像的许多其他交互式正面和负面示例，并详细解释了系统的结构。</p><p>&nbsp;</p><p>所以，人们可能想知道这次是否可以使用这个最新推出的大型文本到图像生成器？如大家所料，答案是否定的。如Imagen一样，Parti也只是让大家看看，不能使用。</p><p></p><p>参考链接：</p><p>&nbsp;</p><p><a href=\"https://blog.google/technology/research/how-ai-creates-photorealistic-images-from-text/\">https://blog.google/technology/research/how-ai-creates-photorealistic-images-from-text/</a>\"</p><p>&nbsp;</p><p><a href=\"https://wandb.ai/telidavies/ml-news/reports/Google-s-Parti-The-Newest-Text-To-Image-Generation-Model--VmlldzoyMjExNjA2?galleryTag=ml-news\">https://wandb.ai/telidavies/ml-news/reports/Google-s-Parti-The-Newest-Text-To-Image-Generation-Model--VmlldzoyMjExNjA2?galleryTag=ml-news</a>\"&nbsp;</p><p>&nbsp;</p>",
    "publish_time": "2022-07-01 15:20:16",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "我不想 MySQL 分片",
    "url": "https://www.infoq.cn/article/EZP1J0JWdQrrtbwXg9zH",
    "summary": "<p>&nbsp;</p><p></p><blockquote>Daniel Nichter 是《高效 MySQL 性能》（<a href=\"https://oreil.ly/efficient-mysql-performance\">Efficient MySQL Performance</a>\"）一书的作者，该由 O’Reilly 出版，目前尚无中译版本。Nichter在本文中又对书中第五章中关于分片的问题进行了讨论。</blockquote><p></p><p>&nbsp;</p><p>《高效 MySQL 性能》（<a href=\"https://oreil.ly/efficient-mysql-performance\">Efficient MySQL Performance</a>\"）第五章论述了分片问题，这个问题很难写，但并不是因为技术原因。关于这一问题，让我多说几句。</p><p>&nbsp;</p><p></p><h2>我的误解</h2><p></p><p>&nbsp;</p><p>这是我从第五章中删除的一段话和脚注：</p><p>&nbsp;</p><p></p><blockquote>然而，横向扩展并不是关系型数据存储的固有特性。这是历史原因导致的：关系型数据模型创建于 20 世纪 70 年代，当时由于硬件体积庞大且价格昂贵，所以横向扩展是不可能的。简单地说，关系型数据库不是为横向扩展而设计的。_{[1]}因此，横向扩展关系型数据存储需要一个外部过程：分片。&nbsp;_{[1]}尽管关系型数据库不是为了横向扩展而设计的，但这既不是对其的批评，也不是它的缺陷，关系型模型在过去 40 多年里的流行程度不仅令人难以置信，并且毫无疑问，它已经成为技术和互联网不可或缺的一部分。</blockquote><p></p><p>&nbsp;</p><p>我删除了这一段（以及脚注），原因是其中有误导或错误，正如 Fernando Ipar（我的技术审稿人之一）指出的那样：</p><p>&nbsp;</p><p></p><blockquote>最好能找出一种方式（在这里或在现有的脚注上）来表达。严格来说，关系模型是一种逻辑模型，与物理层没有任何关系。这么说可能让人有点恼火，但以本人愚见，如果说关系模型不能扩展，那是因为我们已经达到了特定关系（或者更准确地说是受关系启发的）产品的极限。那就像是在说，由于你的尝试操作在特定型号的计算器造成了计算溢出，就断言算术无法扩展。区别就是为什么其他数据库有可能在支持分片的情况下，同时支持一些关系特性，并且对用户的透明程度要超过 MySQL（比如 ockroachDB、TiDB，甚至 MySQL Cluster）。我认为澄清这个问题的一个很好的建议就是《深度探索关系数据库》（<a href=\"https://www.oreilly.com/library/view/database-in-depth/0596100124/\">Database in Depth</a>\"，C.J. Date 著，由 O'Reilly 于 2005 年出版） 一书中第一章《模型与实施》（Model Versus Implementation）的内容。</blockquote><p></p><p>&nbsp;</p><p>事实上，这是 Data 在这本书第一章中的相关陈述（强调是我的观点）：</p><p>&nbsp;</p><p></p><blockquote>首先要知道，性能，归根结底是实现的问题，而非模型问题——尽管存在着极其普遍的、与之相反的误解。比如，我们经常被告知“连接很慢”，但这样的说法毫无任何意义！连接（JOIN）是模型的一部分，而模型自身也不能称之为“快”或“慢”；只有“实现”可以说具有这样的特性。因此，我们可以这样说，某些特定产品 X 的连接实现比另一些特定产品 Y 更快或更慢，但也仅此而已。</blockquote><p></p><p>&nbsp;</p><p>&nbsp;</p><p>我经常有 Date 和 iPar 所说的误解，如果不是 iPar 纠正我的话，我差点也会把同样的想法付诸印刷。更糟糕的是，我实际上还陈述了两个有些矛盾的理由：</p><p>&nbsp;</p><p>关系型数据模型创建于 20 世纪 70 年代，当时由于硬件体积庞大且价格和昂贵，所以横向扩展是不可能的。关系型数据库不是为了横向扩展而设计的。</p><p>&nbsp;</p><p>从表面上来看，这不是一个明显的逻辑错误，但它是错误的：1 是真的，但 2 并不是由 1 得出的。</p><p>&nbsp;</p><p>诚然，从 20 世纪 70 年代一直到 21 世纪初，硬件体积都很庞大且价格昂贵（与今天的情况相比）。因此，企业不可能随心所欲地提供 100 个新数据库。（作为参考，亚马逊 EC2 于 2006 年发布。）采购任何服务器就如同购买一辆汽车：一项谨慎而又代价高昂的决策，打算拥有并持续运营数年之久。需要更多的容量？扩大现有服务器的规模：更多的内存，更大的硬盘，诸如此类。还需要更多的容量？那就购买“更大”的服务器：支持更快的 CPU，更多的 RAM 芯片，更多的硬盘托架，诸如此类。</p><p>&nbsp;</p><p>但是，“关系型数据库不是为了横向扩展而设计的”这一说法并不正确。我不应该加上这句话，因为这正是 Date 在他书里第一章抨击的误解，这有充分的理由。引用 Date 的话：性能从根本上说是一个实现问题，而不是一个模型问题。规模是性能的一部分。</p><p>&nbsp;</p><p></p><h2>我们能避免分片吗？</h2><p></p><p>&nbsp;</p><p>现在是 2022 年 5 月，1 TB 的内存是存在的，但远非常态。最大的亚马逊云科技 RDS 实例类型是 db.x1e.32xlarge，具有 3904 GB 内存，几乎 4 TB。这令人印象深刻，但是我不想这样：我希望它是 2022 年的规范。</p><p>&nbsp;</p><p>如果 TB 级的内存是常态，那么单个 MySQL 实例就有望能够处理几十 TB 的数据。我之所以强调“可能”，是因为尽管内存在避免分片时起着至关重要的作用，但它并不是唯一的因素。有时候，为了扩展写操作，需要进行分片。在这种情况下，存储 I/O 和延迟就成了更关键的因素。一些插到 PCIe 插槽的 NVMe 系统具有令人难以置信的性能，但就像 TB 级的内存一样，它们远非常态。即使内存和存储 I/O 解决了问题，那么网络传输速度呢？以 10Gbps 的速度传输 10TB 需要大约 2 小时。有更快的网速，但它们现在也还不是常态。</p><p>&nbsp;</p><p>不要忘记模式迁移（OSC）和其他数据操作。目前，MySQL 只有两个 OSC 工具：pt-online-schema-change 和 gh-ost。这两者都可以处理 TB 级的数据，但都没有真正地优化速度或并行性，所以 TB 级的数据需要花上很多小时才能改变。</p><p>&nbsp;</p><p>我认为，目前使用 MySQL（或其他类似的关系型数据库）是不可能避免分片的，原因是数据的增长速度已经远远超过了 MySQL 的硬件和工具。在过去的 20 年里，MySQL 做了很好的工作，但我认为，由于普遍可用的（和可负担得起的）硬件和工具，它已经接近了一个软极限。现在，我想这个软极限是 10TB 的数据——具有有利的（即轻量级）访问模式，较小的工作集大小，以及相对稳定的模式（或一个真正有耐心的团队/公司）。</p><p>&nbsp;</p><p></p><h2>数据增长与云计算</h2><p></p><p>&nbsp;</p><p>数据量不断增加。即使不在技术领域内，人们也知道数年前的设备能够存储 5GB 的数据，而现在可以存储 256GB。iPod 就是一个例子：人们意识到“我可以存储更多的数据”。（这个例子很及时，因为苹果公司的 iPod 在 20 年才停产）。让我们姑且假定这种长期存在的趋势是合理的，而不是由于数据膨胀或浪费。（我个人觉得，我们对数据的浪费是非常严重的，这就是为什么我在《<a href=\"https://oreil.ly/efficient-mysql-performance\">高效 MySQL 性能</a>\"》的第三章和第四章中详细阐述了这个问题）。</p><p>&nbsp;</p><p>自从计算机出现以来，硬件的容量就在迅速增加（而成本在下降），这在技术领域也是广为人知的。因此，它跟上了数据增长的步伐，以至于不需要改变范式：只要继续购买更大的硬件（因为它变得更低廉），问题就解决了。这就是旧的范式：扩展你已经拥有的硬件规模。我只是泛泛而谈，总是有一些例外。</p><p>&nbsp;</p><p>但近年来，有四件事发生了变化：</p><p>&nbsp;</p><p>硬件容量的增长略微滞后。数据的增长显著增加。云变得普遍。发明了编排。</p><p>&nbsp;</p><p>第 1 点说得很谨慎，因为硬件容量肯定一直在增加；第 2 点才是掩盖了第 1 点的主要变化，并使之复杂化。数据增长很容易爆炸，因为产生数据很容易。在市场上开发和推广硬件要困难得多（而且缓慢），因为大的变化需要其他新的硬件（例如从 SATA 到 PCIe）、新的内核和驱动程序，以及能够充分利用前面提到的新应用。</p><p>&nbsp;</p><p>数据飞速增长，硬件也在努力追赶，云（第 3 点）在 2006 年亚马逊 EC2 推出时悄无声息地出现。但是，云实际上不过是另一个你租用而不是拥有的服务器。这意味着，亚马逊云科技（和其他云厂商）在幕后所使用的硬件和你可能原本计划购买的一样。（这不再是实际情况了，有些云厂商定制了他们自己的硬件）。</p><p>&nbsp;</p><p>但云还是很有用的，因为它提供了一个抽象层，隐藏了采购和管理硬件的复杂性。人们经常使用“弹性”这个词：云中的计算资源具有弹性。这意味着你能够持续地将更多的数据存储到云端中，而无需过多关注其运行方式。</p><p>&nbsp;</p><p>从这个角度来说，云是一个重大的演变，因为在云之外，真正的挑战不在于“我可以买一个足够大的硬盘吗？”（你可以），而在于“我可以以多快的速度采购和配置硬件，以及它可以持续多久？”公司不可能（也不会）每年不顾一切地购置新硬件。</p><p>&nbsp;</p><p>相反，他们会计划、预算、购买、等待、接收、“上架”，最后（有时是几个月后）让新硬件上线。鉴于这种努力，公司要求硬件工作多年以彻底收回投资。这就是公司难以与爆炸性增长的数据保持同步的原因。但是，云改变了这一点。它抽象化了采购和管理硬件的复杂性：你只要按需租用你所需的任何东西就可以了。</p><p>&nbsp;</p><p>云对于改变这种范式来说是必要条件，但还并不够。你可以提供所有你想要的资源，但是如果你这么做了，你又会遇到另外一个问题：如何放养这些传说中的猫？这句话的意思是：你可以提供一个资源集群，但你如何控制并管理它？</p><p>&nbsp;</p><p>在 2013 年和 2014 年，Docker 和 Kubernetes 相继问世。这些都是容器化的技术（以及延伸到微服务），但它们都是使编排大规模的云资源集群变得可行的最终必需。所以，我们现在能够用编程方式（而且有点容易）来提供并编排几乎无限的云资源，并以“弹性”方式（通常是创建和销毁并重新创建资源）。</p><p>&nbsp;</p><p>现在范式已经改变了，因为在云中，实际上没有任何限制；这只是一个你能负担得起的问题。笼统地说，新的范式是：“只要在云中扩展规模”。（其中“只要”一词意味着，考虑到编排工具，这应该是很容易的，但“容易”这个词显然是高度相对的。)</p><p>&nbsp;</p><p></p><h2>新范式中的 MySQL</h2><p></p><p>&nbsp;</p><p>回到 MySQL，围绕它的范式已经发生了改变。</p><p>&nbsp;</p><p>一方面，我们有像 MySQL 这样的关系型数据库，这些数据库是在范式改变之前很久就创建了——当时的范式仍然是“扩大规模”：购买更大、更快的硬件。我认为对于 2000 年以后出生的工程师来说，了解这段历史很重要。</p><p>&nbsp;</p><p>MySQL、Postgres 和类似的产品是在云或 Kubernetes 之前很久就问世了。在那时，无论你想要多少资源，“启动”的想法根本不可能。标准是扩大你已经拥有的资源，因为公司不愿意也不喜欢购买新硬件。这就是为什么 MySQL 在扩展方面非常出色，但却不能原生横向扩展的部分原因（为什么需要分片）。</p><p>&nbsp;</p><p>另一方面，现代软件开发正在转向新范式，在新范式几乎没有资源限制：只要为你想要的大小/规模配置 Kubernetes（或任何编排工具），它（通常）就会提供任何需要的东西。（说“通常”是因为，如果你不知道，云有时确实会暂时耗尽资源）。</p><p>&nbsp;</p><p>不足为奇的是，开发人员希望他们的数据库也可以做到这一点，但发现他们无法使用 MySQL、Postgres 和其他类似的数据库。这可如何是好？</p><p>&nbsp;</p><p></p><h2>NewSQL 与创新者的困境</h2><p></p><p>&nbsp;</p><p>我们越来越多地看到 NewSQL 数据存储，它将数据库的计算层和存储层分开，这样就可以通过编排在云中进行横向扩展。考虑到范式的变化，这样做是有意义的；考虑到硬件和工具没有保持在数据增长曲线的前面，这也是有意义的。</p><p>&nbsp;</p><p>例如，如果有硬件和工具可以轻松处理单个 100TB 的 MySQL 实例，那么 NewSQL 很可能就不会有市场。但目前情况并非如此。因此，为了使 MySQL 达到一定规模，开发人员必须实施和维护应用级分片，或者转向 NewSQL。</p><p>&nbsp;</p><p>虽然分片已经被证明是行之有效的（关于 MySQL 分片已经有了很多知识和成功案例），但这仍然是一项非开发任务，开发人员经常告诉我他们不想做。</p><p>&nbsp;</p><p>我不能责怪他们：他们被雇来开发应用程序的功能——而我被雇来为他们扩展数据库。（当然，我希望他们不要再这么浪费数据了，不过我要这么说就是跑题了。)</p><p>&nbsp;</p><p>我认为我们正在见证“<a href=\"https://www.christenseninstitute.org/books/the-innovators-dilemma/\">创新者的困境</a>\"”。单一实例上的 SQL 是现任者：一个巨大的价值网络，它扎根于四十年的成功经验。NewSQL 是一家颠覆性的小微初创企业，目前正致力于解决一个利基问题，而且它似乎没有占据主要的市场份额（小的价值网络）。NewSQL 有可能取代现任者，包括 MySQL，特别是当 <a href=\"https://en.pingcap.com/\">TiDB</a>\" 等产品明确地与 MySQL 兼容，以进入现任者的价值网络时。</p><p>&nbsp;</p><p>而毫不奇怪的是，NewSQL 的一个障碍是成本。NewSQL 数据库更为复杂，这需要更多的云资源，而且成本也更高。但我们也看到了这种情况：随着颠覆者市场份额的增加，成本也会下降。</p><p>&nbsp;</p><p>题外话：Vitess 和类似产品并不是颠覆者：它们是现有价值网络到新价值网络的桥梁。如果真正的颠覆者获胜，这些桥梁就将慢慢消失。</p><p>&nbsp;</p><p></p><h2>那么，重点是什么？</h2><p></p><p>&nbsp;</p><p>对 MySQL 进行分片仍然是必要的，因为我们还处于一个不确定的时期，还不知道怎么可以避免分片：要么是负担得起的硬件容量大爆发（这实际上只是提供了更多的跑道，将问题进一步推向未来），要么是 NewSQL 成功颠覆了传统 SQL，成为主流。</p><p>&nbsp;</p><p>似乎符合逻辑的是，在未来，软件工程师将不必处理应用级别的分片，因为那并不是他们真正的工作，而且 NewSQL 已经证明它不需要存在。这就是为什么我个人认为 NewSQL 会获胜，但是至少需要 5 年时间，更现实的是 10 年。</p><p>&nbsp;</p><p>不过不用担心，MySQL 和其他单实例关系型数据库将在更长时间内继续发挥重要作用，以至于今天学习 MySQL 几乎是必需的，因为它无处不在。</p><p>&nbsp;</p><p>&nbsp;</p><p>原文链接：</p><p>https://hackmysql.com/post/book-5/</p>",
    "publish_time": "2022-07-01 17:04:14",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "全球手机银行架构分享",
    "url": "https://www.infoq.cn/article/SgCc0yw3H56YG2gwXeNu",
    "summary": "<p>你是否想要了解全球银行在面临既要为超过 30 个国家与地区提供全球的银行服务，又要满足各个地区的业务和监管需求，还要平衡开发和运营成本的问题下，是如何应对的？本次演讲主要针对这个挑战，从前后端的角度，阐述汇丰通过优化 App 架构，采用 InnerSouce 的内源策略，实施 DevOps 的过程和工具，搭建能适应多种云的，各种监管要求的，高复用的，基于域来设计的全球手机银行的技术实践，为企业出海的应用架构设计提供参考经验。</p>\n<p>另外，美的、微众银行、福特汽车等企业都来大会演讲啦，快来<a href=\"http://gk.link/a/11siC\">ArchSummit深圳站一睹为快～</a></p>",
    "publish_time": "2022-07-01 17:52:36",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "「长安链最佳实践分享」“一键上链”技术大牛教你快速构建链上应用",
    "url": "https://www.infoq.cn/article/T56tSZSbZAASMe2UlYVl",
    "summary": "<p><img alt=\"\" src=\"https://static001.infoq.cn/resource/image/46/ee/46a145bdb090ef1972331ff49f1b79ee.jpg\" /></p>",
    "publish_time": "2022-07-01 18:04:20",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]