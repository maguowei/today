[
  {
    "title": "云原生Wasm的开发者工具正在成为主流",
    "url": "https://www.infoq.cn/article/cz1kW8e4pLHThzlcPSLe",
    "summary": "<p><a href=\"https://cloudnativewasmdayna22.sched.com/\">KubeCon的云原生Wasm日+CloudNativeCon</a>\"已经成为了Wasm（WebAssembly的缩写）爱好者们聚集并为生态系统谋划未来的圣地。2022年于底特律举办的KubeCon云原生Wasm日中，重点关注了服务器端WebAssembly的开发者工具。</p><p></p><p>Wasm最初是以浏览器安全沙盒为目的开发的。近年来，Wasm作为一款轻量级、安全快速且可移植的虚拟机和Linux容器（LXC）的替代品，拥有了许多在服务器端的应用。</p><p></p><p>这次活动不仅有Docker、微软、VMWare、Fastly、红帽、思科等知名公司参与，还有如Fermyon、Second State、SingleStore、Cosmonic及Suborbital等初创企业。</p><p></p><h2>Docker+Wasm</h2><p></p><p>在这次活动中，Docker宣布了与CNCF基金会的Wasm运行时，<a href=\"https://github.com/WasmEdge/WasmEdge\">WasmEdge</a>\"合作的<a href=\"https://docs.docker.com/desktop/wasm/\">Docker+Wasm技术预览</a>\"。Docker的CTO，Justin Cormack分享了将<a href=\"https://youtu.be/uf0Rboi0mYg\">Wasm融入Docker</a>\"后，支持多类容器的愿景。随后，Docker公司的Chris Crone和Second State公司的Michael Yuan共同介绍了如何<a href=\"https://youtu.be/3j915xoDovs\">使用Docker工具链构建、运行和共享Wasm应用程序</a>\"。</p><p></p><p><a href=\"https://www.infoq.com/news/2022/11/cloud-native-wasm-day/\">Docker+Wasm的演示应用程序</a>\"是由Second State提供的一份用Rust编写且基于<a href=\"https://github.com/WasmEdge/WasmEdge22/11/cloud-native-wasm-day/\">WasmEdge</a>\"的数据库驱动Web应用程序，可编译为Wasm并在WasmEdge中运行。全部应用都可以在预配置Rust开发环境的容器中构建，并通过一行“docker compose up”命令与带有如MySql数据库的容器并列部署。</p><p></p><h2>组件模型</h2><p></p><p>社区中有很多对Wasm的优化尝试，以方便Docker等公司为其搭建工具，其中一项合作优化的结果是Wasm的组件模型。Fastly公司的Luke Wagner关于<a href=\"https://youtu.be/phodPLY8zNE\">组件模型的设计和进展</a>\"演讲非常优秀，这项成果将极大地改善Wasm模块的可复用性和可组合性，为Wasm模块访问其他模块，系统，以及包括网络在内的操作系统API提供更好的访问模式。包括WasmEdge及Wasmtime在内的主流Wasm运行时均已承诺支持并实现该组件模型的提议。</p><p></p><p>虽然Wasm的组件模型尚未完工，但社区已经在应用其部分规范。Cosmonic公司的Brooks Townsend在一次演讲中展示了Wasm组件是如何借助wasmCloud跨云和设备的<a href=\"https://www.youtube.com/watch?v=1KbMYnJXEm4&amp;list=PLj6h78yzYM2PzLhPvZIihwPShNuXP01C5&amp;index=10\">实际使用示例</a>\"。Taylor Thomas随后也讨论了<a href=\"https://youtu.be/JotItWTHD5s\">组件模型应用在实际使用时的情景</a>\"。</p><p></p><p>Wasm组件模型定义了Wasm模块的管理和交互的全新方式，Cosmonic公司的Bailey联合SingleStore公司的Kyle Brown，共同介绍了一款可加密验证的透明Wasm组件注册表，<a href=\"https://youtu.be/niCLN2NMZQs\">warg</a>\"。该注册表可使Wasm组件模块达到当前软件供应链的安全水平。</p><p></p><h2>编程语言</h2><p></p><p>编程语言支持是开发者工具的重要一环。Wasm日的多个会议中均讨论了Wasm对新编程语言的支持。VMWare办公CTO，Daniel Lopez Ridruejo及Wasm实验室的Rafael Fernandez Lopez演示了<a href=\"https://youtu.be/jXe8kulUscQ\">mod_wasm项目</a>\"，该项目是在Wasm中运行PHP应用程序的Apache模块，并已经足够完善，可以运行如WordPress等复杂的PHP应用程序。</p><p></p><p>Fermyon公司的Joel Dice的分享了如何<a href=\"https://youtu.be/MFruf7aqcbE\">在Wasm中运行Java应用程序</a>\"，由于Wasm中没有对GC的支持，该项目仍处于早期阶段，但生命周期较短的Java程序已经可以在没有GC的情况下运行。</p><p></p><p>红帽公司的Christian Heimes探讨了<a href=\"https://www.youtube.com/watch?v=B52cSnNOrFM&amp;list=PLj6h78yzYM2PzLhPvZIihwPShNuXP01C5&amp;index=5\">目前Wasm运行时对Python的支持</a>\"。CPython项目已经可以被编译至Wasm，从而允许各类Python应用程序不仅可以在Wasm的浏览器上运行，还可以在服务器端运行。</p><p></p><p>Fermyon公司的Ivan Towlson探讨了<a href=\"https://youtu.be/nPvRpV7kp7o\">.NET运行时针对Wasm的新功能</a>\"，为C#程序与C程序带来了更好的互操作体验。</p><p></p><h2>嵌入式函数</h2><p></p><p>Wasm的一个常见用例是开发者为现有软件产品或平台创建扩展。</p><p></p><p>来自SingleStore公司Carl Sverre的演讲中展示了<a href=\"https://www.youtube.com/watch?v=YgTyS6ccK2o&amp;list=PLj6h78yzYM2PzLhPvZIihwPShNuXP01C5&amp;index=8\">开发者可如何使用嵌入SingleStore云数据库的Wasm运行时，自定义UDF数据处理</a>\"。利用SingleStore所提供的内置人工智能功能，开发者甚至可以在该数据库平台上创建复杂的电子游戏。</p><p></p><p>思科的Guba Sandor及Dubas Adam演示了一款基于Wasm，专为自定义Envoy代理日志数据管道设计的<a href=\"https://www.youtube.com/watch?v=yfWaY6lyRtY&amp;list=PLj6h78yzYM2PzLhPvZIihwPShNuXP01C5&amp;index=14\">插件系统</a>\"。</p><p></p><h2>云服务</h2><p></p><p>最后，对开发者而言，部署Wasm功能最简单的方式就是找人管理用户的基础设施。在云原生Wasm日上，初创公司为这一领域贡献了不少选择。</p><p></p><p>Fermyon所推出的<a href=\"https://www.fermyon.com/cloud\">云服务</a>\"让开发者可以轻松将GitHub的repo转换为无服务的微服务。Fermyon云将GitHub中拉取到的源码构建为Wasm的字节码，按需运行后再连入HTTP的输入和输出。</p><p></p><p><a href=\"https://cosmonic.com/\">Cosmonic所推出的PaaS</a>\"允许开发者跨云创建、编写、运行，以及扩展Wasm模块以完成复杂的工作流程。</p><p></p><p>Suborbital展示了一款<a href=\"https://suborbital.dev/\">基于云的SaaS扩展引擎</a>\"，允许Wasm功能以相较于web API而言更安全、快速且强大的方式，嵌入至SaaS产品中。</p><p></p><p><a href=\"https://www.secondstate.io/\">Second State</a>\"带来了无服务的函数平台，<a href=\"https://flows.network/\">flows.network</a>\"的预览版本。Flow函数可被SaaS的webhook事件触发，并将输出传送到另外的SaaS API中。该平台可以实现基于Wasm的SaaS连接器（类似有代码的Zapier）和自动化机器人（如GitHub机器人或聊天机器人）。</p><p></p><p>原文链接：</p><p><a href=\"https://github.com/WasmEdge/WasmEdge22/11/cloud-native-wasm-day/\">Developer Tooling for Cloud-Native Wasm Is Going Mainstream</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/xYczhQN4hYdBE0Z7d2wC\">后Kubernetes时代的未来？Wasmer 3.0 发布，可在浏览器外运行 WebAssembly</a>\"</p><p><a href=\"https://www.infoq.cn/article/lx1NyUdpRJ03XTuU8x4J\">这群WebAssembly大佬创业失败了：有时从 JS 迁移到 Wasm 并不值当？</a>\"</p>",
    "publish_time": "2022-12-07 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]