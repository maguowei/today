[
  {
    "title": "组装式专家洞察|中国移动初瑞：基于智慧中台的“组装式”探索实践",
    "url": "https://www.infoq.cn/article/c52f4adacf2e19cb093c15869",
    "summary": "<p></p><h4>引言</h4><p></p><p></p><blockquote>近期，企业数字化发展共建共享平台、云计算标准和开源推进委员会（CCSA TC608）成功举办了首次“技术前沿|“组装式”发展趋势观察沙龙”，与会专家分享了对“组装式”的探索与实践，中国移动信息技术中心智慧中台运营中心副总经理初瑞带来了《基于智慧中台的“组装式”探索实践》的主题分享。初瑞表示，中国移动作为建设网络强国、数字中国、智慧社会的主力军，紧跟组装式前沿技术发展趋势，依托智慧中台进行探索实践，在赋能企业高质量发展和数智化转型方面取得积极成效。</blockquote><p></p><p></p><h4>一、“组装式”带来技术架构和业务模式的变革</h4><p></p><p>“组装式”是近两年新出现的热门技术词汇，作为“塑造变化”的关键技术之一，将成为数字业务和创新力量的加速器。“组装式”带来的不仅仅是思维方式的变化，更是技术架构和业务模式的变革。通过封装成具有可复用、可扩展、可组装、可自治等特征的组件，充分实现资源利用率提升、业务弹性扩充。</p><p></p><h4>二、运营商在传统应用开发运维中的3个痛点</h4><p></p><p>当前数智化转型已成为各企业的必答题，数字经济和实体经济融合发展加速，不断推动制造业、服务业、农业等产业数字化，利用互联网新技术对传统产业进行全方位、全链条的改造，提高全要素生产率，发挥数字技术对经济发展的放大、叠加、倍增作用。</p><p><img src=\"https://static001.geekbang.org/infoq/04/049dea6ddc691b3ce33bf0e88fadb228.jpeg\" /></p><p>传统运营商在开发运维中存在三大痛点：第一，开发复杂度高，业务上线慢；第二，系统稳定性差，运维难度高；第三，能力复用度低，成本投入大。受“组装式”所带来的一系列新方式的启发：如组装式企业、组装式应用、组装式平台、组装式构架等，中国移动积极开展组装式的研究和推进工作。</p><p></p><h4>三、中国移动从智慧中台实践到组装式发展探索</h4><p></p><p>面对数字经济新蓝海和数智化转型新要求，中国移动将全力打造业界标杆级智慧中台，聚焦“积淀能力、支撑发展、注智赋能”总体目标，边建设、边运营、边完善，目前智慧中台已迈入“规模化发展、精细化运营”快车道。</p><p></p><p>在智慧中台的建设运营过程中，中国移动积极开展“组装式”探索实践，一是遵循“业务闭环”、“可扩展”、“互联互通”、“能力标准化”等原则，构建组装式框架和体系，从中台能力打造到中台能力应用，实现对业务创新和数智化转型过程的充分赋能；二是打造“中央厨房式”一体化开发交付环境，实现组件的集中汇聚、分级管控和灵活编排，关键业务需求的支撑响应速度提升了20%以上。</p><p></p><p>初瑞强调，在组装式研究中，无论是对组装式组件的探索，还是对组装式平台的标准化，这些组装式模块，不仅要能够被灵活组装，同时其运行时框架以及框架所依赖的技术底座也需要进行规范化。如果“组装式”能够在更大面积、更大程度上成为一种统一标准的话，可能对整个社会的发展和运行所带来的成本节省以及业务创新是我们今天所不能想象的，组装式应用的前景是不可估量的。</p><p></p><h4>四、产业生态合作未来展望</h4><p></p><p><img src=\"https://static001.geekbang.org/infoq/87/870a07e0b9bdb029731ec88b6de2cbbb.jpeg\" /></p><p>初瑞强调，为应对不断变化的业务环境和发展挑战，倡导构建“组装式”技术实践联盟，通过战略合作和技术联合，实现产业级能力整合、组件共享和价值共创。</p><p></p><p>组装式能力更有意义的地方在于，面向全部行业，甚至是整个国家，它能够实现汇集，将各领域擅长的方面进行组合，形成联合的解决方案，快速的支撑各方需求；同时，组装式还能降低门槛，一定程度上可以降低承接大项目所要的资源、人力、资本投入等方面的门槛。</p><p></p><p>组装式应用联盟未来的发展应该极大降低ToB甚至ToC这些企业进入到不同行业的门槛，所以在这个过程里面，中国移动认为外严内疏，对于整个行业来说，组装式非常值得去推进，非常有前景的发展方向。</p><p><img src=\"https://static001.geekbang.org/infoq/e9/e912fe630a336a18761cfb394003e04c.png\" /></p><p></p><p></p><p>说明：</p><p>为进一步探讨交流数字化转型相关话题，我们建立了微信群，您可添加董老师微信号，注明身份后，申请加入。</p><p>联系人：董老师&nbsp; 13810413143（微信同号）</p><p></p>",
    "publish_time": "2023-02-17 10:51:49",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "谷歌宣布支持使用Rust开发Chromium",
    "url": "https://www.infoq.cn/article/UpEHUe43yhWZaictYG0u",
    "summary": "<p></p><p>谷歌计划在其开源浏览器项目 Chromium 中支持使用第三方 Rust 库，这是对 Rust 编程语言及其安全特性的一次重大认可。</p><p></p><p>在 1 月份发布的一篇博文中，来自 Chrome 安全团队的 Dana Jansens 表示，谷歌的软件工程师已经开始致力于将 Rust 工具链应用于其构建系统。希望在年底之前将<a href=\"https://www.infoq.cn/article/z4MCCu8W62Je7d2fED7p\"> Rust 代码</a>\"包含到 Chrome 二进制文件中。</p><p></p><p>“我们将 Rust 引入 Chromium 的目标是提供一种更简单（无 IPC）且更安全（总体上包含更少的复杂 C++ 代码，同时在沙盒中也没有内存安全漏洞）的方法来满足二个原则，从而加快开发速度（需要写的代码更少、设计文档更少、安全审查更少）并且提升 Chrome 的安全性（增加了没有内存安全漏洞的代码的行数，降低了代码的错误密度）”，Jansens 解释道。</p><p></p><p>Rust 在不写成不安全的情况下，可以避免内存安全缺陷，而内存安全缺陷占 Chromium 中发现的严重安全漏洞的 70%。Rust 语言不能保证代码没有漏洞，但它可以保证潜在的缺陷要少得多。</p><p></p><p>值得一提的是，谷歌也一直致力于一种语言来提升 C++ 中的内存安全，创建者 Bjarne Stroustrup 坚称当符合 ISO C++ 标准并遵守静态分析器所强制执行的特定标准时，这种语言是内存安全的。</p><p></p><p>Jansens 感谢 Mozilla 一直支持 Rust 的开发直到它成熟并吸引了足够的外部支持来建立其自己的基础。Mozilla 长期以来一直得到谷歌的资金支持，作为回报，谷歌成为 Mozilla 的火狐浏览器的默认搜索引擎。但由于谷歌浏览器侵蚀了火狐浏览器的使用率，因此 Mozilla 正寻求其它资金来源。</p><p></p><p>Jansens 解释道，Rust 和 C++ 是 Chromium 的基础，可以通过 cxx、autocxx bindgen、cbindgen、diplomat 和 crubit 等工具进行交互。这些工具提供了一种安全的方法来从 C++ 代码调用 Rust 代码，反过来也一样。但是由于这两种语言各自的设计不同，它们之间的互操作性也存在限制。</p><p></p><p>Jansens 解释道，“例如，Rust 通过静态分析来保证临时内存安全。这个静态分析依赖两个输入：生存周期（推断或显式写入）和互斥可变性。后者与 Chromium 的大部分 C++ 的编写方式不兼容。”</p><p></p><p>Jansens 观察到，由于 Rust 和 C++ 遵循不同的规则，因此两者之间的互操作很容易出错。这就是为什么谷歌采取了一种谨慎方案的原因。</p><p></p><p>最初，谷歌想支持 C++ 到 Rust 的单项互操作性来控制依赖图的形状。Jansens 解释道，“Rust 不能依赖于 C++，因此它无法理解 C++ 类型和函数，除非通过依赖注入。这样的话，Rust 就不能在任意 C++ 代码中调用，只能在从 C++ 通过 API 传递的函数中调用。”</p><p></p><p>目前，Chromium 只能通过第三方库来暴露给 Rust。</p><p></p><p>尽管如此，随着谷歌对 crubit 等工具的开发和维护来提高 C++ 和 Rust 之间的双向互操作性，其对 Rust 的不断深化投入有望大大丰富 Rust 包生态系统。</p><p></p><p>谷歌已经将 Rust 引入安卓生态系统。微软 Azure CTO Mark Russinovich 呼吁在新项目中使用 Rust 而不是 C++。Linux 内核已经增加了 Rust 支持。甚至是不愿意使用其不能控制的技术的苹果公司都已经一直在用 Rust。®</p><p></p><p>作者介绍：</p><p></p><p>Thomas Claburn 位于旧金山湾区，为 The Register 提供软件开发、DevOps、计算机安全等服务。</p><p></p><p>原文链接：</p><p></p><p>Google polishes Chromium code with a layer of Rust（<a href=\"https://www.theregister.com/2023/01/12/google_chromium_rust%EF%BC%89\">https://www.theregister.com/2023/01/12/google_chromium_rust）</a>\"</p><p></p><p>声明：本文为 InfoQ 翻译，未经许可禁止转载。</p><p></p><p>今日好文推荐</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651156431&amp;idx=1&amp;sn=07b8156d7794c0e3d4895fb4c0991c7b&amp;chksm=bdb8979c8acf1e8aad370f504e2d64a6efcf766651c7702c786e13a8a86fc42ffb8ed2f1c75e&amp;scene=21#wechat_redirect\">18.3 万美元offer到手！ChatGPT 通过谷歌 L3 面试：留给谷歌的时间不多了</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651156320&amp;idx=1&amp;sn=8de49e53191865d9d4ed7801cfb6642f&amp;chksm=bdb897338acf1e25a4874f147dae16c1ad31851865ccf8be190998cfe925c77359b63cbb1b92&amp;scene=21#wechat_redirect\">我被微服务坑掉了CTO职位</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651156319&amp;idx=1&amp;sn=c3d54a533ea4bd913145f08097492181&amp;chksm=bdb8970c8acf1e1a9dfd72d843a59d2eae113547f48cedbcaad4c76e8faf4561311fe1f8df65&amp;scene=21#wechat_redirect\">微信全面支持“小号”；员工购买公司福利房，被裁员后遭巨额索赔；16岁少年孤身前往深圳腾讯总部解封QQ账号｜Q资讯</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651156129&amp;idx=1&amp;sn=c41a83236635ded0db3a9d45048da15f&amp;chksm=bdb896f28acf1fe4b2f98c5d0ef4b18293debf7d7907dbc5fa13869f457b21f9cf9f010ca284&amp;scene=21#wechat_redirect\">现代软件越来越大、越来越慢、越来越烂！还有救吗？</a>\"</p><p></p><p></p><p></p>",
    "publish_time": "2023-02-17 11:02:43",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "掀起云基础设施管理革命的IfC",
    "url": "https://www.infoq.cn/article/pxj6qAcsVXkGZ9zHIV4j",
    "summary": "<p><a href=\"https://klo.dev/state-of-infrastructure-from-code-2023/\">基于代码基础设施（Infrastructure-from-Code，IfC）</a>\"是一种创建、配置和管理云资源的方法，它理解软件应用程序的源代码，而无需明确的描述。Infra-from-Code有四种主要的方法：基于SDK的、基于代码注解的、基于两者组合的，以及一种明确定义基础设施的新编程语言。</p><p>&nbsp;</p><p>基于SDK的方法允许开发人员使用他们的代码，并且在部署时，这些工具会分析服务代码如何使用SDK并生成基础设施。基于SDK的方法使得根据代码推断使用情况更加可预测，但在利用新的云特性方面，SDK总是落后一步。基于SDK工具的示例有<a href=\"https://getampt.com/\">Ampt</a>\"和<a href=\"https://nitric.io/\">Nitric</a>\"。</p><p>&nbsp;</p><p><code lang=\"null\">import { api } from '@nitric/sdk';\n\n\nconst helloApi = api('main');\n\n\nhelloApi.get('hello/:name', async(ctx) =&gt; {\n    const {name} = ctx.req.params;\n    ctx.res.body = 'Hello ${name}';\n})</code></p><p>向互联网公开端点的Nitric示例</p><p>&nbsp;</p><p>纯注解方法是仅基于代码内注解的。这种方法侧重于理解开发人员对框架和工具的使用。这种方法的主要工具是<a href=\"https://klo.dev/\">Klotho</a>\"，它更像是一种基于代码架构（Architecture-from-code）的工具。Klotho引入了诸如 expose 、 persistent 和 static_unit 等功能（关键注解），这些功能可以使现有编程语言成为云原生语言。</p><p>&nbsp;</p><p><code lang=\"null\">const redis = require(\"redis\");\n/**\n* @klotho:persist{\n*   id = \"UserDB\" \n*}\n*/\n\n\nconst client = redis.createClient();</code></p><p>Redis客户端持久化数据的Klotho示例</p><p>&nbsp;</p><p>使用注解和SDK方法，开发人员可以对代码进行注解，工具可以将这些注解和SDK结合到框架中。该类别的主要工具是<a href=\"https://encore.dev/\">Encore</a>\"和<a href=\"https://www.shuttle.rs/\">Shuttle</a>\"。这些工具可以托管在IfC供应商的平台上，也可以与GCP、AWS或Azure等第三方云提供商集成。另一个有趣的工具是AWS <a href=\"https://github.com/aws/chalice\">Chalice</a>\"，它允许创建和部署在Python中使用AWS Lambda的应用程序。</p><p>&nbsp;</p><p><code lang=\"null\">// encore:api public method=POST path=/url\nfunc Shorten(ctx context.Context, p *ShortenParams)(*URL, error){\n    id, err := generateID()\n    if err != nil {\n       return nil, err\n    }\n    return &amp;URL(ID: id, URL: p.URL), nil\n}</code></p><p>API请求/响应的Encore示例。注释指定了URL路径</p><p>&nbsp;</p><p>基于语言的方法引入了旨在以云为中心的新编程语言。<a href=\"https://www.winglang.io/\">Wing</a>\"和<a href=\"https://darklang.com/\">DarkLang</a>\"是最常用的两种编程语言。这种方法允许在现有编程语言中引入难以实现的概念。每种新的编程语言都有一些权衡：软件开发人员需要首先学习它，然后将其集成到现有的工具和服务中。此外，寻找和雇用具有新编程语言专业知识的开发人员可能也需要时间和精力。</p><p>&nbsp;</p><p><code lang=\"null\">bring cloud;\n\n\nlet bucket = new cloud.Bucket();\n\n\nnew cloud.Function(inflight (_: str): str =&gt; {\n    bucket.put(\"hello.txt\",\"world\");\n}</code></p><p>云函数定义的Wing示例</p><p>&nbsp;</p><p><a href=\"https://www.chef.io/products/chef-infra\">Chef</a>\"、<a href=\"https://www.ansible.com/\">Ansible</a>\"、<a href=\"https://www.puppet.com/\">Puppet</a>\"和<a href=\"https://www.terraform.io/\">Terraform</a>\"是<a href=\"https://en.wikipedia.org/wiki/Infrastructure_as_code\">基础设施即代码</a>\"（&nbsp;Infrastructure-as-Code，IaC）的首批工具，并开始支持云基础设施的创建和管理。第二批IaC使用现有的编程语言（Python、Go、TypeScript）来表达与第一批工具相同的想法。<a href=\"https://www.pulumi.com/\">Pulumi</a>\"和<a href=\"https://github.com/aws/aws-cdk\">CDK</a>\"是第二代工具。</p><p>&nbsp;</p><p>有关基于代码基础设施现状的更多详细信息，请阅读Klotho的2023<a href=\"https://klo.dev/state-of-infrastructure-from-code-2023/\">基于代码基础设施状况</a>\"报告。</p><p>&nbsp;</p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2023/01/google-gitops-observability/\">https://www.infoq.com/news/2023/01/google-gitops-observability/</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://xie.infoq.cn/article/b3068ba053dfd72cc36743d3b\">面向分布式云原生 构筑无处不在的云原生基础设施</a>\"</p><p><a href=\"https://www.infoq.cn/article/oi5qfvo5NUCHeZScpaib\">揭秘 Meta 的云游戏基础设施</a>\"</p><p><a href=\"https://www.infoq.cn/article/HXgMpZwrxmhGU2DyWE9M\">SaaS 初创公司如何选择合适的云基础设施</a>\"</p>",
    "publish_time": "2023-02-17 11:19:18",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "经历亿级话单处理优化打磨检验，江苏移动云流一体化到底如何玩转",
    "url": "https://www.infoq.cn/article/dNr1QRTdsDeawLLHIIeA",
    "summary": "<p></p><p>作者 ｜王娟</p><p></p><p>中国移动通信集团江苏有限公司（后文统一简称为江苏移动）是省内规模最大的通信运营商，公司计费用户数近 2 亿，日均话单量超 200 亿。其业务支撑系统包含话单计费、账务处理、服务开通等多个业务场景。</p><p></p><p>近期，江苏移动引入 Apache Pulsar 等流原生新技术，结合云原生技术体系，完成了基于流云一体化架构的新一代业务支撑系统全面升级，实现了支撑系统在云原生时代新的演进。面对 5G+ 时代的新挑战，新一代业务支撑系统打造了全新支撑架构，通过跨系统间的资源融合、能力融智、数据融通，实现规模化、敏捷化、智能化、弹性化、自主可控的支撑目标，有效助力公司业务支撑效能提升。本文将介绍江苏移动核心支撑系统面临的挑战与应对挑战的系统演进措施，以及如何结合 Apache Pulsar、Ignite 和 SkyWalking 等分布式云原生系统提高开发效率并实现智能运维与运营。</p><p></p><p></p><h2>面临三大挑战</h2><p></p><p></p><p>随着市场竞争加剧，业务需求越来越个性化，江苏移动的核心支撑系统面临诸多挑战。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/f2/f28b7aa9c2a93aa3f33863cbc1729bcf.png\" /></p><p></p><p>系统性能面临瓶颈</p><p></p><p>近几年流量业务呈爆发性增长。江苏省用户日均流量从数百 TB 增长到数万 TB，话单量、消息量增长，计费系统压力大幅增加。每天近百亿的话单、数十亿的消息对共享文件存储的依赖极高，NAS 逐渐出现 I/O 瓶颈，计费系统无法线性扩展。同时终端用户对提醒的及时性要求越来越高，提醒不及时极易引起用户投诉。</p><p></p><p>需求开发面对挑战</p><p></p><p>随着市场竞争的加剧，业务部门对需求交付的时间要求越来越短。现有 BOSS 系统架构越来越复杂，很多功能模块变得十分庞大，业务研发难以做到同时跟进，交付速度跟不上业务要求。</p><p></p><p>系统运维愈加复杂</p><p></p><p>随着 BOSS 系统的演进，多地多中心、多云混合的环境已经变成标配，增加了系统的复杂性，大大提高了运维的难度。</p><p></p><p></p><h2>演进措施</h2><p></p><p></p><p>面对上述挑战，江苏移动采取多项措施，进行针对性解决。通过引入微服务架构、Pulsar 消息平台、分布式内存库 Ignite、云原生架构，提升系统性能、提高开发效率、减轻运维压力。同时通过 PaaS 平台对资源进行的统一管理、调度，BOSS 系统的应用全部运行在 PaaS 平台上，部署、更新使用平台提供的运维工具，有效提升了整体的资源利用率。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/3f/3f724f11132bccc394eb131961147fcb.png\" /></p><p></p><p></p><h3>设计目标</h3><p></p><p></p><p>应对业务需求，计费系统技术架构需要具备四大特性：强一致、高性能、高可用、高可靠。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/a5/a59052caf9440c6de1cfb8aeba5ce6b0.png\" /></p><p></p><p>强一致</p><p></p><p>计费系统承载用户数近 2 亿，语音、短信、流量等业务日均话单量超 200 亿条，在海量的话单批价规模下，如何确保费用计算零差错，实现强一致性，是计费的最核心问题。</p><p></p><p>高性能</p><p></p><p>计费流程在忙时话单数量以数十倍突发，瞬间峰值超百万 TPS，因此计费系统需要具备很高的处理性能。</p><p></p><p>高可用</p><p></p><p>计费系统必须具备很强的业务容灾和数据容灾能力，有充分的弹性和容错设计，来保证 7*24 高可用。高可靠在数据存储层，只要话单处理成功就表示数据一定完成落盘，发生如操作系统崩溃、网络异常、磁盘异常等意外宕机时必须能够确保数据不丢；同时，针对分布式任何节点的故障，引发的主机数据损坏等问题，要求系统数据严格不错不丢。</p><p></p><p></p><h3>架构概述</h3><p></p><p></p><p></p><h4>提高开发效率</h4><p></p><p></p><p>为了支持以上技术要求，江苏移动在系统演进中做了针对性的架构设计与开发。</p><p></p><p>Serverless 构架</p><p></p><p>在新一代计费系统中引入 Serverless 架构，函数计算与 PaaS 平台为计费系统 Serverless 化提供应用引擎。在 BaaS 服务层，存储服务、应用监控、日志、数据库、内存库、消息等产品不断向 Serverless 化演进。基于 Serverless 架构计费系统可以根据语音、短信、GPRS 业务的话单流量波动，自动进行资源的分配和销毁，并最大程度化地平衡稳定性、高性能、提升资源利用率。计费系统开发追求完全自动的自适应分配的核心目标：更快地实现业务逻辑，减少在环境搭建和系统连接上的开发时间，将更多的时间聚焦在业务开发上。</p><p></p><p>微服务化</p><p></p><p>为实现系统高可用与业务功能快速扩展，新一代计费系统对应用进行了全面的微服务化改造，即微服务化设计。按照不同业务域的功能需求，通过合理的功能拆分，精细化的服务治理，如：服务的注册、发现、熔断、自愈、负载均衡、链路跟踪等实现功能的快速扩展和流量的高效调度，以此达成整体系统的高可伸缩。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/9a/9a14a1b3ffeeffee4e40819381570fa5.png\" /></p><p></p><p>流程编排</p><p></p><p>计费批价模块采用 Dubbo 作为微服务框架，在自主研发的 SNF 消息处理框架中集成 Pulsar 消费者中读取话单消息，通过 Dubbo 消费者调用 Dubbo 服务提供者的业务处理能力，完成话单批价的业务流程。在批价模块中支持流程编排能力，可按照业务需求动态调整流程的处理逻辑。批价完成后，批价成功的话单消息通过 Pulsar 生产者发送至下游模块并提交偏移量，批价失败的话单消息写入重试和死信队列，等待后续处理。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/e4/e4debbf4153e2527ff45bf71cf4eb8ab.png\" /></p><p></p><p>流程编排通过可视化界面提供节点拖拽的效果，批价模块根据定义的流程模型执行不同的业务处理逻辑</p><p></p><p>分布式配置中心</p><p></p><p>通过引入 Disconf 配置中心，实现业务应用配置发布、更新统一化，配置更新自动化，并提供操作简易的控制台，方便管理配置版本及配置文件。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/f9/f9aeb7469959f8c0fef6ac9ac1993723.png\" /></p><p></p><p>幂等性</p><p></p><p>Pulsar 作为一个可靠的消息中间件，只要消息成功投递到了 Pulsar 中就不会丢失，至少保证消息能被消费者成功消费一次，即“At Least Once”至少一次语义。然而这种可靠的特性在异常的场景下会导致消息可能被多次投递，造成消息重复处理。如：</p><p></p><p>在消息消费的场景下，消息已投递到消费者并完成业务处理，当消费者给 Pulsar Broker 端反馈应答的时候网络闪断。为了保证消息至少被消费一次，Pulsar 将在网络恢复后再次尝试投递之前已被处理过的消息或将消息投递给同一消费组内的其他消费者来处理，同一条消息在同一个消费组内会被处理两次。Pulsar Broker 负载均衡时消息重复，包括但不限于网络抖动、Broker 重启以及消费者应用重启，当 Pulsar Broker 或客户端重启、扩容或缩容时，会触发 Rebalance，此时消费者可能会收到重复消息。</p><p></p><p>但是，计费系统要求话单处理达到 100% 的正确性。因此，计费系统在消费逻辑上需要自我实现幂等性，探索出一个通用的消息幂等的方法，从而抽象出一个通用的框架用以适用各个业务的场景，达到“Exactly Once”有且仅有一次语义的目标。</p><p></p><p>计费消息幂等性引入了 Ignite 内存库作为存储介质，基于 Ingite EP 天然的事务原子性操作实现幂等。核心就是在 Pulsar 消费者接收到消息之后，根据话单构建的唯一标识在 Ignite 中查重，如果已经消费过，则直接提交偏移量；如果没有，则进行业务操作，并在业务处理成功之后将话单唯一标识写入 Ignite，防止重复消费。同时，存储在 Ingite 中的缓存数据，可以直接利用 Ignite 的 TTL 特性实现数据的自动清理，释放内存库资源。</p><p></p><p>顺序消息</p><p></p><p>服务开通系统要求消息按照严格的顺序消费，如服务开通接收到 CRM 的先停机后复机的工单指令，在业务处理时必须严格按照先停机后复机的顺序执行。如果先复机后停机，必然会造成用户的投诉。目前大部分 MQ 支持两种顺序模式，一种是全局有序，要求 Topic 只能有一个 Partition，对生产和消费的并行度有较大的限制；另一种是局部有序，保证 Message 中 Key 的有序生产和消费，例如用户 ID，这也是业务场景使用最多的一种方式。Kafka 和 RocketMQ 采用的是第二种种形式，通过将相同的消息 Key 路由到相同的 Partition 中，单个 Partition 的消息只能被同一个消费者消费。但是在消息量非常大的情况下，系统会出现性能瓶颈，因为相同消费组的消费者个数受限于 Partition 的个数。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/81/819e253b6c0b0121ce085d359bd61e62.png\" /></p><p></p><p>Pulsar 的 Key_Shared 模式可以很好地解决这个问题，消费者的消息按照 Key 分配，因此 Key 的分散度越高，消费者的并发度越高，系统的吞吐量也就越高。新一代服务开通系统基于 Pulsar Key_Shared 特性实现消息顺序消费，使相同 Key 的消息被路由到同一消费者上处理，同 Key 的消息经过业务处理后批量更新至目标存储上，在保证消息的顺序性消费的同时提升系统的性能。</p><p></p><p></p><h4>追踪与监控：Pulsar+Log4j2+Skywalking 等</h4><p></p><p></p><p>随着业务规模的增长，计费系统应用的实例数规模不断增长，核心业务的依赖也变得愈加复杂，开发效率提升的同时故障定位成本也居高不下，特别是当业务出现问题的时候，如何快速完成故障定位成为新的挑战。</p><p></p><p>计费系统的可观测性按照指标、日志、链路追踪进行分类，围绕 Prometheus 服务、Grafana 服务和链路追踪服务，形成指标存储分析、链路存储分析、异构数据源集成的可观测数据层，通过标准的 PromQL 和 SQL 提供数据大盘展示、告警和数据探索能力，达成全面覆盖业务观测 / 应用层观测 / 中间件观测 / 系统层观测的目标。</p><p></p><p>指标</p><p></p><p>Pulsar 原生的指标包含集群总览、消息、Topic、组件 JVM、Bookie 等多项指标。基于 Pulsar 原生的监控能力，江苏移动自主研发 Pulsar Exporter 组件，基于 Spring-boot 框架调用 Pulsar Rest API 和 JMX 指标服务接口，提供扩展 Pulsar 自定义指标的能力，如集群健康状态、磁盘使用率、追单性能、延迟消费等指标，满足计费系统复杂的业务场景和个性化的监控需求。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/f1/f115b94c079bab6fb229028033000bde.jpeg\" /></p><p></p><p>集群总览</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/80/80b676d8de57ed7ab5120128cdcab472.jpeg\" /></p><p></p><p>批价追单性能</p><p></p><p>日志</p><p></p><p>Pulsar 集群的多个组件 ZooKeeper、Bookie、Broker、Functions Worker 和 Proxy 以分布式的方式部署在多台主机上，因此每个组件的日志文件也分散在多台主机上。当组件出现问题时，由于日志比较分散，我们希望通过对日志进行聚合、监控，能够快速地找到 Pulsar 各个服务的报错信息并排查，使得运维更加具有目的性、针对性和直接性。为了解决日志检索的问题，计费系统采用集中式日志收集系统，对 Pulsar 所有节点上的日志统一收集、管理和访问。</p><p></p><p>传统的日志采集必须以文件的方式落一次磁盘，缺点是占用了主机磁盘的 IO。为此，在计费系统中 Pulsar 集群基于 Log4j2+Kafka+ELK 实现日志的快速检索。Log4j2 默认支持将日志发送到 Kafka，使用 Kafka 自带的 Log4j2Appender 在 Log4j2 配置文件中进行相应的配置，即可完成将 Log4j2 产生的日志实时发送至 Kafka 中。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/06/06ff8536075400b1f81befbdd32116d2.png\" /></p><p></p><p>Elasticsearch 根据检索字段进行分词，并创建索引。Pulsar 的日志建立了 8 个检索字段，分别是：集群名、主机名、主机 IP、组件名、日志内容、系统时间、日志级别、集群实例。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/63/63be1bc6b8519db132c1ce38a4a89322.png\" /></p><p></p><p>在 Kibana 页面，根据分词的字段指定查询条件进行检索。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/37/375981d2d74e31c36fc4b0390e16aa47.jpeg\" /></p><p></p><p>借助 Pulsar SQL，计费系统使用 Pulsar 作为消息总线的同时，支持追踪回溯话单消息，能够动态查询存储在 Pulsar 内部的实时消息，并支持从外部系统提取数据，与 Pulsar 中的话单消息多维聚合分析，以图表的方式输出统计结果。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/49/4904276702d73a05587a639164728b3a.jpeg\" /></p><p></p><p>Pulsar SQL 支持以 JDBC 的方式访问持久化在 Topic 中的话单消息，运维智能分析系统基于 Java SQL 语言结合查询条件、时间范围等进行查询，并实时输出分析结果。</p><p></p><p>消息链路追踪</p><p></p><p>计费系统使用 Skywalking 分布式系统性能监视工具对话单消息进行链路追踪和性能监控。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/43/43ac28599603eee0e5557ce94b3dfb5f.png\" /></p><p></p><p>在计费系统的所有环节中集成 Pulsar 的生产者和消费者，在启动模块的应用程序时，使用 Skywalking 的 JavaAgent 探针埋入 Java 程序中，用于收集应用程序和 Topic 中话单消息的指标数据。</p><p></p><p>通过 Trace 机制，追踪话单消息在 Pulsar 集群中一次全链路调用的完整记录，实现话单消息处理的可观测性。Trace 由所有环节的 Span 组成，每个 Span 使用 APM 插件在 Pulsar 生产者的拦截器上设置 Pulsar 的 Brokers URL 列表、Topic 名称、消息 ID 等 Tag，在 Pulsar 消费者的拦截器上设置 Pulsar 的 Brokers URL 列表、Topic 名称、消息 ID、订阅者名称等 Tag，用于记录应用节点中的关键信息。</p><p></p><p>话单消息在同一个消费者模块中，业务处理异常重新消费时需要使用 Pulsar 消息系统的重试和死信队列的特性，并使用 Skywalking 监控每条话单在同一个 Topic 和同一个订阅中的重试消费的次数和详情，用于观测话单处理的原因和执行链路的流转。</p><p></p><p>Skywalking 在追踪话单消息在 Pulsar 集群中的链路执行情况的同时，会采集话单消息在计费系统的每个模块中的性能指标，通过 Skywalking Analysis Core 分析聚合之后，在 Skywalking UI 上查看话单链路和指标数据。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/3e/3e005977c322a2df3d827b2d54a95df7.jpeg\" /></p><p></p><p>以上一套完整的可观测解决方案可以为计费系统提供高效运维、业务连续性保障的能力。</p><p></p><p></p><h4>精细化管控与应用云化</h4><p></p><p></p><p>计费系统按照多层次业务隔离来完善系统精细化管理控制。通过 Pulsar 多租户、Namespace、Topic 分层特性来实现物理架构部署的分系统、分业务、分地市多级别隔离，实现硬件资源复用、逻辑数据隔离、业务互不影响，使得系统控制力度从地市级升级到业务级，组件、应用集群全高可用部署：</p><p></p><p>通过多租户区分系统：计费、账务、服务、信控等；通过 Namespace 区分业务：高清语音、物联网、行业网关、流量等；通过 Topic 区分地市：苏州、南京、泰州等。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/1b/1bec2e478769045401327f0b1462964d.png\" /></p><p></p><p>计费系统的所有应用全面云化，计算资源通过 PaaS 动态调度、弹性伸缩，按需控制系统处理能力，实现整体开发成本和硬件投入的节约。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/ba/ba593d7b8e9af52383b403ab72170f2e.jpeg\" /></p><p></p><p></p><h2>未来展望</h2><p></p><p></p><p>未来江苏移动将在现有架构的基础上，进一步结合算力网络构建云边一体化的计费系统。通过计费策略的智能决策、系统资源的精细控制、业务服务的高效执行以及运营状态的全景洞察，满足未来差异化用户服务需求，有效提升系统的处理能力、开放能力和运营能力。</p><p></p><p></p><blockquote>注：文档中的全部内容属中国移动通信集团江苏有限公司所有。未经允许，不可全部或部分发表、复制、使用于任何目的。</blockquote><p></p><p></p><p>作者简介：</p><p></p><p>王娟，江苏移动计费专家，负责 BOSS 计费系统的架构演进和维护。面对 5G+ 时代的新挑战，她将 Apache Pulsar 引入公司 IT 业务支撑系统，致力于打造新一代高效智能的计费架构，助力公司 IT 支撑效能提升。</p><p></p><p>今日好文推荐</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651156830&amp;idx=1&amp;sn=1388ad34d6acaa55714d6476ff055de4&amp;chksm=bdb8890d8acf001bc24a5c7b80893e6dc8a85250e0ac289ca12cfc5f67dc8dc32f515b026533&amp;scene=21#wechat_redirect\"></a>\"<a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651156919&amp;idx=1&amp;sn=3ed2dd72d55e4c978f189f770cf1022a&amp;chksm=bdb889e48acf00f23c2c148912b1b60a45b534e181abb376afc72c055572b177c4492cefdd6d&amp;scene=21#wechat_redirect\">GitHub裁员10%，办公室全关，全体远程办公；微软必应集成ChatGPT下载量猛增10倍；谷歌出师不利市值蒸发超万亿｜Q资讯</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651156830&amp;idx=1&amp;sn=1388ad34d6acaa55714d6476ff055de4&amp;chksm=bdb8890d8acf001bc24a5c7b80893e6dc8a85250e0ac289ca12cfc5f67dc8dc32f515b026533&amp;scene=21#wechat_redirect\">马斯克开会当场解雇Twitter首席工程师：我有1亿多粉丝，他却说公众对我失去兴趣</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651156705&amp;idx=1&amp;sn=f7e6e01de4763afc61a83a35dd3901ae&amp;chksm=bdb888b28acf01a4b4443c5e09eac7a54f591ac6b96937ec6c45008203598a721b8c1f73d4f3&amp;scene=21#wechat_redirect\">15年做不好的代码搜索，用Rust重写搞定：GitHub声称能从此“改变游戏规则”</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651156618&amp;idx=1&amp;sn=a8e0585cbb0f4d580957ab598129625b&amp;chksm=bdb888d98acf01cf69cd221c048833497157edfc13ed2de5e55cd0f28acf1234e732b38a8fcf&amp;scene=21#wechat_redirect\">搜索引擎技术大战，始于今日</a>\"</p><p></p><p></p><p></p>",
    "publish_time": "2023-02-17 11:33:20",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Shopify为系统编程提供Rust",
    "url": "https://www.infoq.cn/article/hLu8pCjMkwFz4HYyLAWT",
    "summary": "<p></p><p>Shopify 为商业构建互联网基础设施，以满足数百万商家的需求。为了做到这一点，需要构建灵活的业务逻辑和健壮的高性能系统。除了我们对 Ruby 的灵活性和表现力的承诺之外，我们最近还<a href=\"https://www.infoq.cn/article/hioW21XT8opvbip3hs5F\">采用了 Rust </a>\"作为我们官方的系统编程语言。作为这项工作的一部分，我们加入了 Rust 基金会，并且我们很高兴能加入 Rust 社区。</p><p></p><p>系统编程是软件工程中的一个要求很高的领域，为其选择的语言将会对系统软件的成功和有效性产生巨大的影响。用于解决这些问题的语言需要快速、高效且安全。此外，如果可能，Shopify 更喜欢社区驱动的开源项目。</p><p></p><p>Rust 不断增长的行业势头和 Shopify 不断扩大的系统编程项目基础，使我们在 Rust 上进行标准化并加入 Rust 基金会正当其时。</p><p></p><p></p><h2>Shopify 的系统编程</h2><p></p><p></p><p>自成立以来，Shopify 的主要服务端应用程序编程语言一直是 Ruby。Ruby 的灵活性和表现力使 Shopify 能够开发出强大的商务系统，满足数百万商家以及数亿买家的需求。Ruby 过去是，现在是，将来依然是我们构建现代商务服务端组件时的首选工具。</p><p></p><p>对于系统编程，例如高性能网络服务器或使用“原生”代码扩展 Ruby，而不是定义业务逻辑，Shopify 开发人员过去一直使用 C 和 Go 等语言。最近，我们决定将 Rust 标准化为我们的系统编程语言。因此，我们正致力于在开发和部署流程中更好地支持 Rust，并帮助 Shopify 工程师开发 Rust 编程方面的专业知识。</p><p></p><p></p><h2>为什么选择 Rust？</h2><p></p><p></p><p>Rust 的许多方面使它成为我们系统编程语言的一个有吸引力的选择。这些因素结合起来使我们相信 Rust 将会成为我们软件堆栈中一个强大且受欢迎的组件。其他公司可能会对语言的不同属性进行不同的权衡，做出不同的选择；我们的评估最终使我们选择了 Rust。</p><p></p><p></p><h3>一致性</h3><p></p><p></p><p>Shopify 的系统编程需要涵盖多个领域，而且随着时间的推移，这个数字可能会增加。它们包括高性能服务器、用于提高性能或桥接到其他库的 Ruby 扩展，以及编译为 WebAssembly。我们非常希望将对单一语言的投资运用到众多领域，这意味着要确定一种可以非常灵活使用的语言。相关类型的系统编程将对组织的语言选择产生重大影响；我们需要对此有更宽泛的视角。</p><p></p><p></p><h3>性能</h3><p></p><p></p><p>Shopify 需要能够高效且可持续地扩缩，以支持全球商业。Rust 为我们提供了可预测的原生代码性能，包括对内存使用的精细控制，这使其适用于我们堆栈的最低级别。当然，Rust 并不是唯一能够提供或接近这种性能的语言。在此基础上，还可以考虑使用现代 C++，或者如果可以接受垃圾收集器的分配行为和性能的话，则可以考虑 Go。</p><p></p><p>当然，虽然 Rust 具有很高的性能上限，但它本质上并没有提高性能下限。一个应用程序或组件并不会因为它是用 Rust 编写的就神奇地快；程序员仍然需要设计和衡量性能，我们需要确保 Shopify 的 Rust 开发人员拥有必要的工具来轻松完成这项工作。随着我们与 Rust 及其社区的合作，这种支持将成为 Shopify 感兴趣的一个重要领域。</p><p></p><p></p><h3>社区</h3><p></p><p></p><p>Rust 语言和生态系统是由一个健康的社区驱动的，我们打算像参与 Ruby、 Rails、 React Native 和其他开源项目一样参与这个社区。Rust 的 RFC 流程和治理架构为包容且深思熟虑的讨论提供了坚实的基础，从而推动了语言和工具的未来发展。希望我们的贡献不仅能使 Rust 在 Shopify 的使用中变得更加高效，而且还能为所有 Rust 开发人员带来改进。</p><p></p><p>这就是 Shopify 加入 Rust 基金会的原因。我们希望支持 Rust 优秀的治理模式和“Rust 公地”的维护，并将我们的知识和观点带入到更大的 Rust 对话中。Rust 基金会为确保 Rust 社区和生态系统的健康所做的工作至关重要，我们非常自豪能够参与他们的使命。</p><p></p><p></p><h3>生产力</h3><p></p><p></p><p>在某些圈子里，Rust 以难以学习和使用而闻名，但 Shopify 内部和外部的开发人员发现，在通过了最初的学习阶段之后，他们可以非常高效且轻松地使用 Rust 进行构建。Rust 还有一个强大的库生态系统（“板条箱”）和良好的 IDE 集成工具，当然还有非常好的编译器错误消息。类型和宏系统的强大功能允许非常有表现力的 API 和语法，将开发人员的精力集中在表达他们的思想上，而不是在头脑中摆弄大量的状态和不变量。Go 在这方面也享有盛誉，C 和 C++ 就没那么好了。</p><p></p><p></p><h3>安全性</h3><p></p><p></p><p>Rust 提供了许多让编译器来帮助确保程序正确的工具，包括它们可以安全地管理内存，并且可以“无所畏惧地并行”。随着我们越来越熟练地使用 Rust，我们将会找到更多的方法来使用 Rust 的类型系统和安全规则来保持系统中的不变量。从我们最初的项目中，我们发现与我们评估的其他语言相比，Rust 会在编译时而不是运行时暴露出更多的错误。这促成了 Rust 开发人员经常表达的“有信心部署”情绪。</p><p></p><p>在我们所考虑的所有语言中，Rust 在安全因素方面遥遥领先：不仅是在生命周期管理方面的内存安全上，它还消除了并行程序中的大多数数据竞争。当然，即使是 Rust，它也有改进的空间，例如静态死锁预防，但所有生产语言都是如此。我们相信 Rust 对静态安全性的承诺会使其最有可能在未来几年中实现这一目标。在这个领域已经有了一些有趣的工作，例如 Ferrocene。</p><p></p><p></p><h3>互操作性</h3><p></p><p></p><p>系统编程通常涉及到与现有的“原生”库（比如用 C 编写的库）的接口。与 Go 不同的是，Rust 没有垃圾收集器，这使得它可以更容易地插入到可以使用 C 的任何地方。更具体地说，Rust 很好地支持了使用 bindgen 等工具与现有的 C 代码的集成，而像 rb-sys 和 magnus 这样的板条箱允许 Rust 安全地与 Ruby 互操作。C++ 的集成仍然有些笨拙，但像 cxx 这样的板条箱可以帮助弥合语言障碍。除了 RubyVM 本身之外，我们没有大型的 C 或 C++ 代码库，但这种互操作对我们来说仍然是一个重要的考虑因素。</p><p></p><p></p><h2>接下来做什么?</h2><p></p><p></p><p>在 Shopify，我们的 Rust 之旅才刚刚开始。我们需要开发教育资源和内部工具，并学习如何最好地参与 Rust 社区和生态系统。我们很高兴能成为 Rust 使命的一部分，让每个人都能构建可持续的、内存安全的、高效的软件，并感谢 Rust 基金会的欢迎加入。</p><p></p><p></p><blockquote>Mike Shaver 是 Shopify 核心工程的杰出工程师。</blockquote><p></p><p></p><p>如果你对从头开始构建系统来解决现实世界中的问题感兴趣，我们的工程博客中有关于我们遇到的其他挑战故事。访问我们的工程职业位页面，了解我们的空缺职位。加入我们的远程团队，可以（几乎）在任何地方工作。了解我们是如何通过招聘来共同设计未来的——一个通过设计实现数字化的未来。</p><p></p><p>原文链接：</p><p></p><p><a href=\"https://shopify.engineering/shopify-rust-systems-programming\">https://shopify.engineering/shopify-rust-systems-programming</a>\"</p><p></p><p>声明：本文为 InfoQ 翻译，未经许可禁止转载。</p><p></p><p>今日好文推荐</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651156431&amp;idx=1&amp;sn=07b8156d7794c0e3d4895fb4c0991c7b&amp;chksm=bdb8979c8acf1e8aad370f504e2d64a6efcf766651c7702c786e13a8a86fc42ffb8ed2f1c75e&amp;scene=21#wechat_redirect\">18.3 万美元offer到手！ChatGPT 通过谷歌 L3 面试：留给谷歌的时间不多了</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651156320&amp;idx=1&amp;sn=8de49e53191865d9d4ed7801cfb6642f&amp;chksm=bdb897338acf1e25a4874f147dae16c1ad31851865ccf8be190998cfe925c77359b63cbb1b92&amp;scene=21#wechat_redirect\">我被微服务坑掉了CTO职位</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651156319&amp;idx=1&amp;sn=c3d54a533ea4bd913145f08097492181&amp;chksm=bdb8970c8acf1e1a9dfd72d843a59d2eae113547f48cedbcaad4c76e8faf4561311fe1f8df65&amp;scene=21#wechat_redirect\">微信全面支持“小号”；员工购买公司福利房，被裁员后遭巨额索赔；16岁少年孤身前往深圳腾讯总部解封QQ账号｜Q资讯</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651156129&amp;idx=1&amp;sn=c41a83236635ded0db3a9d45048da15f&amp;chksm=bdb896f28acf1fe4b2f98c5d0ef4b18293debf7d7907dbc5fa13869f457b21f9cf9f010ca284&amp;scene=21#wechat_redirect\">现代软件越来越大、越来越慢、越来越烂！还有救吗？</a>\"</p><p></p><p></p><p></p>",
    "publish_time": "2023-02-17 11:51:33",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "Serverless Streaming：毫秒级流式大文件处理探秘",
    "url": "https://www.infoq.cn/article/25z7Wv4OPKI6dJv0ALZB",
    "summary": "<p>点击查看Serverless系列文章：</p><p><a href=\"https://www.infoq.cn/article/e4ly6UcN93KApvKGzUCK\">Serverless 时代的微服务开发指南：华为云提出七大实践新标准</a>\"</p><p><a href=\"https://www.infoq.cn/article/bdczHWk9LxuOC9GrVToL\">华为云发布冷启动加速解决方案：助力 Serverless 计算速度提升 90%+</a>\"</p><p></p><p>旧浪 | 华为云 Serverless 研发专家</p><p>平山 | 华为云中间件 Serverless 负责人</p><p></p><h2>背景</h2><p></p><p></p><p>企业应用从微服务架构向 Serverless（无服务器）架构演进，开启了无服务器时代，面向无服务器计算领域的 Serverless 工作流也应运而生。许多 Serverless 应用程序不是由单个事件触发的简单函数，而是由一系列函数多个步骤组成的，而函数在不同步骤中由不同事件触发。Serverless 工作流用于将函数编排为协调的微服务应用程序。</p><p></p><p>Serverless 工作流由于自身可编排、有状态、持久化、可视化监控、异常处理、云服务集成等特性，适用于很多应用场景，比如：</p><p></p><p>复杂度高需要抽象的业务（订单管理，CRM 等）业务需要自动中断 / 恢复能力，如多个任务之间需要人工干预的场景（人工审批，部署流水线等）业务需要手动中断 / 恢复（数据备份 / 恢复等）需要详细监控任务执行状态的场景流式处理（日志分析，图片 / 视频处理等）</p><p></p><p>当前大部分 Serverless Workflow 平台更多关注控制流程的编排，忽视了工作流中数据流的编排和高效传输，上述场景 1-4 中，由于数据流相对简单，所以各大平台支持都比较好，但是对于文件转码等存在超大数据流的场景，当前各大平台没有给出很好的解决方案。华为云 FunctionGraph 函数工作流针对该场景，提出了 Serverless Streaming 的流式处理方案，支持毫秒级响应文件处理。本文将以图片处理的场景作为例子详细描述当前的问题以及华为云 FunctionGraph 函数工作流在面对该问题时采取的一系列实践。</p><p></p><p></p><h2>问题描述</h2><p></p><p></p><p>先以一个图片处理的场景举例，用户想要执行一个图片压缩并且加水印的任务，这个场景在典型的工作流系统中，可以用如图一所示的方式进行处理。</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/e5/e5e75e4ca42eee961b896dcba24040c6.png\" /></p><p></p><p>图 1：一个典型的图片处理工作流</p><p></p><p>如上图所示，图片压缩和图片加水印的结果都是二进制文件格式，但是当前主流的 Serverless Workflow 平台在多个步骤之间传输上下文都只能支持文本格式传输，所以图片压缩和加水印的结果都需要经过 BASE64 或者其他转码方式转成文本进行数据流传输。</p><p></p><p>但是这种方案的限制和使用成本都比较高：</p><p></p><p>函数的 Response Body 通常有大小限制，所以这种方式无法处理超大文件。执行结果转换为文本，需要消耗大量内存，内存成本比较高。</p><p></p><p>如何简单高效的进行文件处理，业界也给出了其他解决方案，如通过云存储进行中间结果转储、AWS 的 Lambda Object 文件转换方案。下面给出了这两个方案的优缺点分析。</p><p></p><p></p><h3>方案一：中间结果通过云存储进行转储</h3><p></p><p></p><p>该方案如图 2 所示：</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/5f/5fb4056eaf790ca73ae6b36af364dfe3.png\" /></p><p></p><p>图 2：云存储转储运行方式示意图</p><p></p><p>两个步骤之间的文件流通过云存储去传递，这种方案支持大文件流的传输，但是由于中间多了一次到云存储的网络传输，如果业务对时延要求不高，该方案问题不大，但是对于时延敏感类业务，这种多出的时延是无法接受的。另外云存储转储需要额外的成本，如果调用量比较大，使用成本较高。</p><p></p><p></p><h3>方案二：AWS Lambda Object</h3><p></p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/2a/2a17adef96f9b7f62f6e4b43c1bf7694.png\" /></p><p></p><p>图 3：AWS 解决方案示意图 [1]</p><p></p><p>AWS 对于这种文件处理场景，提出了基于 S3 和 Lambda 的 Lambda Object 的方案，参考 [1]，简单来说，是支持为 S3 文件桶的 getObject API 提供 Access Point，AccessPoint 可以指向某一个 Lambda 函数，在函数中可以对原来的桶数据文件进行修改，比如可以将原始视频转码，得到转码后的结果返回到客户端。虽然解决了时延和大文件处理的问题，但是这个方案强依赖 S3 的 API，用户无法进行流程编排，也无法通过事件触发，不是一个真正通用的方案。</p><p></p><p></p><h3>业界方案总结</h3><p></p><p></p><p>简单总结如表 1 所示，当前业界提供的各个方案或多或少存在一些局限性，没有办法在同时满足低时延的情况下支持可编排的文件处理。然而低时延和可编排都是大量客户所追求的关键能力，如何解决这些关键痛点，提升客户体验，成为了当前我们重点想要攻克的难题。</p><p></p><p>表 1：业界文件处理方案对比</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/46/46513f19000023bc8aa85ced448b4a57.png\" /></p><p></p><p></p><h2>华为云 FunctionGraph 的 Serverless Streaming 流式处理方案</h2><p></p><p></p><p>针对当前业界缺少高效，可编排的文件处理方案的痛点，华为云 FunctionGraph 函数工作流提出 Serverless Streaming 的流式可编排的文件处理解决方案，步骤与步骤之间通过数据流驱动，更易于用户理解。本章通过图片处理的例子解释该方案的实现机制。</p><p></p><p>如果需要驱动一个工作流执行，工作流系统需要处理两个部分：</p><p></p><p>控制流：控制工作流的步骤间流转，以及步骤对应的 Serverless 函数的执行。确保步骤与步骤之间有序执行。数据流：控制整个工作流的数据流转，通常来说上一个步骤的输出是下一个步骤的输入，比如上述图片处理工作流中，图片压缩的结果是打水印步骤的输入数据。</p><p></p><p>在普通的服务编排中，由于需要精准控制各个服务的执行顺序，所以控制流是工作流的核心部分。然而在文件处理等流式处理场景中，对控制流的要求并不高，以上述图片处理场景举例，可以对大图片进行分块处理，图片压缩和加水印的任务不需要严格的先后顺序，图片压缩处理完一个分块可以直接流转到下一个步骤，而不需要等待图片压缩把所有分块处理完再开始加水印的任务。</p><p></p><p>基于上述理解，华为云 FunctionGraph 工作流的 Serverless Streaming 方案架构设计如图四所示：</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/f6/f60f146191dd4c11186626b7419924d6.png\" /></p><p></p><p>图 4：Serverless Streaming 流式处理架构图</p><p></p><p>在 Serverless Streaming 的流程中，弱化控制流中步骤之间的先后执行顺序，允许异步同时执行，步骤与步骤之间的交互通过数据流驱动。其中数据流的控制通过 Stream Bridge 组件来实现。</p><p></p><p>同时函数 SDK 增加流式数据返回接口，用户不需要将整个文件内容返回，而是通过 gRPC Stream 的方式将数据写入到 Stream Bridge，Stream Bridge 用来分发数据流到下一个步骤的函数 Pod 中。</p><p></p><p>这种方式存在如下优点：</p><p></p><p>由于控制流的弱化，完全通过数据流来驱动流程执行，不需要再强限制步骤之间完成的先后顺序，如图片处理场景中，压缩和加水印的步骤可以做到完全并行执行，这样可以加速整个流程的执行速度。每次请求都开辟独立缓冲区，缓冲区限制大小，数据流仅在内网传输，保证整体数据传输的可靠性和安全性。不依赖其他外部服务，使用成本低。对于开发人员来讲，只需要关注数据流的处理，而不需要关心数据流如何转发，如何存储，降低开发难度。底层流式传输通过 gRPC 进行，整体数据传输效率高</p><p></p><p></p><h3>在 FunctionGraph 中开发文件处理工作流</h3><p></p><p></p><p>当前 FunctionGraph 已经基于上述方案支持了在函数工作流中进行数据流处理，并且将结果通过流数据的方式返回到客户端，以构建一个图片处理工作流举例：</p><p></p><p>1. 首先创建一个图片压缩的函数，其中代码在处理返回数据通过 ctx.Write() 函数将结果以流式数据的形式返回：</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/18/181b246c23cd758a6c193a8bce83ad5a.png\" /></p><p></p><p>FunctionGraph 通过 ctx.Write() 函数提供了流式返回的能力，对开发者来说，只需要将最终结果通过流的方式返回，而不需要关注网络传输的细节。</p><p></p><p>2. 在函数控制台中启用该函数的流式返回能力</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/e9/e9753a53cb9f2bfa400801122a47b947.png\" /></p><p></p><p>3. 用上面的方式完成其他函数的编写，最后在 FunctionGraph 的函数流控制台完成工作流编排，举例如下：</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/0a/0abbd1c0611083e4a0dcda841a62a859.png\" /></p><p></p><p>4. 调用工作流的同步执行接口，获取最终结果的文件流，数据将以 chunked 流式返回的方式返回到客户端</p><p></p><p></p><h3>使用效果</h3><p></p><p></p><p>针对图片处理的具体场景，我们测试对比了不同大小图片（333k、1m、4m、7m、10m、12m）进行图片切割和图片压缩的场景，由于 BASE64 转码方案无法支持大文件，AWS Lambda Object 方案无法支持编排，所以这里只对比使用 OBS 转储方案和基于流式返回的 Servlerss Streaming 方案的时延数据。具体对比数据图表如下：</p><p></p><p><img src=\"https://static001.geekbang.org/wechat/images/66/6633c9733adb935d9e5694cd6b273bae.png\" /></p><p></p><p>图 5：测试数据对比</p><p></p><p>响应时延：指客户端发出请求到收到第一个字节消耗的时延（单位：秒）</p><p></p><p>端到端时延：指客户端发出请求到收到最后一个字节消耗的时延（单位：秒）</p><p></p><p>从测试数据可以看出，响应时延和端到端时延使用流式返回方案后都得到了不同程度的降低。其中响应时延降低幅度较大，OBS 转储方案响应时延随着图片大小增大，响应时延呈线性上升，超过 4M 的图片响应时延就达到秒级，使用流式返回方案后，响应时延持续稳定在毫秒级的水平。从中可以发现，基于 Serverless Streaming 的流式返回方案不仅具备流式处理和可编排的能力，并且在文件处理场景中可以显著降低时延，从多个方面提升了用户使用体验。</p><p></p><p></p><h2>总结与展望</h2><p></p><p></p><p>本文主要讨论了 Serverless Workflow 在大文件处理时碰到的问题，FunctionGraph 通过简化数据传输链路，提升文件流处理效率, 给出了一种稳定高效、极低时延的大文件处理方法 Serverless Streaming，支持毫秒级的文件流式处理, 显著改善函数编排在文件处理等场景中的用户体验。</p><p></p><p>FunctionGraph 作为华为元戎加持的下一代 Serverless 函数计算与编排服务，将围绕通用全场景 Serverless 的前沿理论及案例实践，持续分享，回馈社区。</p><p></p><p>参考资料：</p><p></p><p>[1]Introducing Amazon S3 Object Lambda (<a href=\"https://aws.amazon.com/cn/blogs/aws/introducing-amazon-s3-object-lambda-use-your-code-to-process-data-as-it-is-being-retrieved-from-s3/\">https://aws.amazon.com/cn/blogs/aws/introducing-amazon-s3-object-lambda-use-your-code-to-process-data-as-it-is-being-retrieved-from-s3/</a>\")</p><p></p><p>今日好文推荐</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651157194&amp;idx=1&amp;sn=8c547e61981f9d0c52358d5a4ff7b6b4&amp;chksm=bdb88a998acf038f25b03331ee5f17221ee6661408c4bcf0f48c60800b35aaac0e3a98d0a7fe&amp;scene=21#wechat_redirect\">告别SVN，Git成“独苗”：GitHub 在 13 年后宣布淘汰Subversion支持</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651156926&amp;idx=1&amp;sn=2839c68c1455a13e0567826460a69e88&amp;chksm=bdb889ed8acf00fb0e0dba04e9e25d8b77fca3cf1168b2c3f512bccdf25a0c31c4cd3840d70f&amp;scene=21#wechat_redirect\">被逼出来的自主可控，从华为自研看国产IDE的未来和商业模式</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651156919&amp;idx=1&amp;sn=3ed2dd72d55e4c978f189f770cf1022a&amp;chksm=bdb889e48acf00f23c2c148912b1b60a45b534e181abb376afc72c055572b177c4492cefdd6d&amp;scene=21#wechat_redirect\">GitHub裁员10%，办公室全关，全体远程办公；微软必应集成ChatGPT下载量猛增10倍；谷歌出师不利市值蒸发超万亿｜Q资讯</a>\"</p><p></p><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2651156830&amp;idx=1&amp;sn=1388ad34d6acaa55714d6476ff055de4&amp;chksm=bdb8890d8acf001bc24a5c7b80893e6dc8a85250e0ac289ca12cfc5f67dc8dc32f515b026533&amp;scene=21#wechat_redirect\">马斯克开会当场解雇Twitter首席工程师：我有1亿多粉丝，他却说公众对我失去兴趣</a>\"</p><p></p><p></p><p></p>",
    "publish_time": "2023-02-17 12:20:07",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]