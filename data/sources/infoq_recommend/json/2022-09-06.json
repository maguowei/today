[
  {
    "title": "黄剑龙：汽车行业趋势下的人才挑战 ｜ DTDS 8 月",
    "url": "https://www.infoq.cn/article/TWoXV48fu73etZKLyuiP",
    "summary": "<p>在工业和信息化部人才交流中心和中国移动通信联合会教育与考试中心的大力支持与指导下，由极客时间企业版、培训杂志共同举办，甫瀚咨询联合举办的 DTDS 全球数字人才发展线上峰会于 8 月 9 日拉开帷幕。</p>\n<p>经过多年在企业数字人才发展领域的耕耘，极客时间于 2022 年发布了数字人才粮仓模型，深入定义了五层数字人才，收获了来自各行各业的企业客户的认可。我们也看到许多企业都在加大对数字人才的培养，并且希望向行业标杆学习，完善自己的数字人才培养体系，融入数字人才标准和生态。</p>\n<p>为此，DTDS 峰会汇聚了来自政府和产业的权威，以及金融、汽车、制造、ICT、零售、互联网、风控审计企业的数字化先锋人物，旨在建立数字人才培养“朋友圈”，让大家从多维视角了解企业数字化转型，人才发展，和组织变革的先进经验。</p>",
    "publish_time": "2022-09-06 00:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "微软发布Dev Box公开预览版：面向开发人员的云端工作站",
    "url": "https://www.infoq.cn/article/osfct6YzPXLPxKgX1Bc5",
    "summary": "<p><a href=\"https://www.infoq.cn/topic/Azure\">Azure</a>\"最近发布了<a href=\"https://azure.microsoft.com/en-us/blog/announcing-microsoft-dev-box-preview/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjI0MjU1NzQsImZpbGVHVUlEIjoiVnozZkhSeG1rZ1kwcHN0UyIsImlhdCI6MTY2MjQyNTI3NCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ryWH_EdDsnhQV3HxSaqcGPbgJgHGAh0LxXl2NrziETs\">Microsoft Dev Box公开预览版</a>\"，这是一款面向开发人员的云端工作站。这项新服务与Windows 365集成，支持任意的开发者IDE、SDK或运行在Windows上的工具，并简化了新开发者的上手过程。</p><p></p><p>Microsoft Dev Box在5月份的<a href=\"https://www.infoq.cn/topic/Microsoft\">微软</a>\"开发者大会上发布了<a href=\"https://www.infoq.com/news/2022/05/introducing-microsoft-dev-box/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjI0MjU1NzQsImZpbGVHVUlEIjoiVnozZkhSeG1rZ1kwcHN0UyIsImlhdCI6MTY2MjQyNTI3NCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ryWH_EdDsnhQV3HxSaqcGPbgJgHGAh0LxXl2NrziETs\">私有预览版</a>\"，是一项Azure服务，可为任意规模的团队提供安全的按需使用工作站。Visual Studio Core首席团队PM Anthony Cangialosi解释说：</p><p></p><p></p><blockquote>在使用Microsoft Dev Box时，开发人员可以专注于编写他们能够编写的代码，而不是花时间搭建一个可以构建和运行代码的工作环境。Dev Box为编码做好了准备，并为开发人员预先配置了他们要完成项目和任务所需的所有工具。</blockquote><p></p><p></p><p><img src=\"https://imgopt.infoq.com/fit-in/1200x2400/filters:quality(80)/filters:no_upscale()/news/2022/08/microsoft-dev-box/en/resources/170146287-bcf2-4161-a82b-080798e18fce-1660972566419.png\" /></p><p></p><p>图片来源：<a href=\"https://azure.microsoft.com/en-us/blog/announcing-microsoft-dev-box-preview/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjI0MjU1NzQsImZpbGVHVUlEIjoiVnozZkhSeG1rZ1kwcHN0UyIsImlhdCI6MTY2MjQyNTI3NCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ryWH_EdDsnhQV3HxSaqcGPbgJgHGAh0LxXl2NrziETs\">https://azure.microsoft.com/en-us/blog/announcing-microsoft-dev-box-preview/</a>\"</p><p></p><p>Sopra Steria云技术布道师Marius Sandbu写了一篇关于如何使用Microsoft Dev Box的文章。他解释说：</p><p></p><p></p><blockquote>从操作的角度来看，它结合了Windows 365前端门户（开发人员可以访问虚拟机的自助前端）和Azure虚拟桌面的RDS组件，这意味着它在底层运行着很多相同的核心组件。</blockquote><p></p><p></p><p>微软高级程序经理、Babylon.js的联合作者David Rousset在推特上写道：</p><p></p><p></p><blockquote>Microsoft Dev Box对团队新加入者的上手真的有很大帮助。</blockquote><p></p><p></p><p>新服务与Windows 365和Azure虚拟桌面共享许多特性，旨在为开发者在Azure中提供VDI桌面。根据微软的说法，新服务支持任何IDE、SDK或运行在Windows上的工具，开发者可以用它来构建桌面、移动、物联网和Web应用程序。它支持使用Windows子系统（Linux）和Windows子系统（Android）构建跨平台应用程序。Sandbu总结道：</p><p></p><p></p><blockquote>到目前为止，作为预览版，它似乎已经相当可靠。我喜欢他们设计产品的方式，然而我想自己定义计算SKU，而不是被微软已定义的资源绑定，所以这意味着我被绑定到微软在Dev Box中定义的特性。GitHub CodeSpaces也应该是其中的一部分，或者至少作为一个替代特性。</blockquote><p></p><p></p><p>工作站的休眠功能目前还不能使用，但应该会在未来几周的预览版中添加。Microsoft Dev Box预览版在Azure Portal中可用，提供了一个基于消耗的计算和存储定价模型。在公开预览期间，Dev Box 8vCPU和32 GB内存SKU每个月的前15个小时是免费的。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/08/microsoft-dev-box/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjI0MjU1NzQsImZpbGVHVUlEIjoiVnozZkhSeG1rZ1kwcHN0UyIsImlhdCI6MTY2MjQyNTI3NCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.ryWH_EdDsnhQV3HxSaqcGPbgJgHGAh0LxXl2NrziETs\">Microsoft Dev Box Now in Public Preview</a>\"</p>",
    "publish_time": "2022-09-06 08:56:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "删掉编程中的 Switch 语句",
    "url": "https://www.infoq.cn/article/59sGhvVrEr70MYiAsdQO",
    "summary": "<p>多重方法是一种有趣的方式，可以帮你摆脱令人讨厌的switch。而且，这也有助于提升代码的可读性。所以，在决定继续坚持使用switch之前，一定要先试一试。</p><p>&nbsp;</p><p>本文最初发布于Bits and Pieces。</p><p></p><p>很多开发者都讨厌switch语句，包括我。并不是因为这个语句没用，也不是因为它太难了。</p><p>&nbsp;</p><p>理解switch语句的工作原理非常简单，问题是当你真的遇到它时，就必须停下手头的一切工作，集中精力阅读它，以确保不会遗漏任何东西，比如，缺少break语句可能会导致一些意想不到的行为，或者一个case中大约有20行代码。</p><p>&nbsp;</p><p>关键是，原谅我使用一个花哨的术语：理解switch语句（在现实世界中）所需要的认知负荷相当重。我相信，作为开发人员，我们的目标是编写方便人类阅读的代码。在这方面，这个语句提供不了什么帮助。</p><p>&nbsp;</p><p>但是，我写这篇文章不是为了对它进行抨击，我是要向你（<a href=\"https://betterprogramming.pub/stop-using-switch-in-typescript-3-alternatives-to-use-instead-aef014c9b31d\">之前也包括我</a>\"）展示三个关于如何避免使用switch语句的示例，让我们来看一种函数式编程技术：多重方法。</p><p>&nbsp;</p><p></p><h1>什么是多重方法？</h1><p></p><p>&nbsp;</p><p>我第一次听到这个词，还是在播客“<a href=\"https://podcast.20minjs.com/\">20 MinJS</a>\"”中采访Yehonathan Sharvit时。当时的采访是关于他即将由Manning出版的著作《<a href=\"https://www.manning.com/books/data-oriented-programming\">面向数据的编程</a>\"》。</p><p>&nbsp;</p><p>他提出这一概念是为了从功能上取代继承，这无疑是可行的。在这个过程中，他展示了switch语句是如何被取代的。因此，让我们暂时把OOP放在一边，只关注第二部分：消除代码中丑陋的switch。</p><p></p><p>什么是多重方法？它只是一个能够根据接收到的参数选择最佳实现的函数。换句话说，想象一下，如果你把丑陋的switch语句放在函数中，然后对所有人隐藏实现。</p><p>&nbsp;</p><p>唯一的区别是，你的解决方案只适用于一个函数。今天我们将讨论如何在运行中生成多个多重方法。</p><p>&nbsp;</p><p></p><h2>多重方法是什么样子？</h2><p></p><p>&nbsp;</p><p>当然，每种语言都有自己的变体，但我今天主要讲JavaScript。</p><p>&nbsp;</p><p>在这种语言中，多重方法的使用方法如下：</p><p></p><p><code lang=\"text\">//我们将使用的数据\nconst myDog = {\n    type: \"dog\",\n    name:\"Robert\"\n}\nconst myCat = {\n    type: \"cat\",\n    name: \"Steffan\"\n}\n//自定义函数实现\nfunction greetDogs (dog) {\n    console.log(\"Hello dear Dog, how are you today\", dog.name, \"?\")\n}\nfunction greetCats(cat) {\n    console.log(\"What's up\", cat.name, \"?\")\n}\n//定义我们的多重方法\nlet greeter = null\ngreeter = multi(\n    animal =&gt; animal.type,\n    method(\"dog\", greetDogs),\n    method(\"cat\", greetCats)\n)(greeter)\n// 调用多重方法\ngreeter(myDog)\ngreeter(myCat)</code></p><p></p><p>这个例子做了很多事，让我来说明下：</p><p></p><p>我定义了2个对象myCat和myDog，我将把它们作为参数，多重方法将根据它们确定自己的行为。我定义了2个自定义函数greetDogs和greetCats，它们的实现稍有不同。它们将代表switch中每个case语句里的代码。然后我调用一些函数，尤其是multi和method，来定义多重方法greeter。multi函数接收3个属性：一个分配器（dispatcher），我们将用它返回的值来确定要执行的逻辑片段；还有两个方法，分别代表switch的一个case语句。请注意，每次调用method时，要首先指定触发第二个参数的值（这是实际的逻辑所在）。最后，我使用同一个函数（我的多重方法）来执行两个不同的逻辑片段，而不需要在任何地方使用switch或if语句。</p><p></p><p></p><h2>多重方法有什么好处？</h2><p></p><p></p><p>当然，我们在这里没有施展任何类型的魔法，我们只是重写了决策逻辑的表达方式，类似下面这样的switch语句：</p><p></p><p><code lang=\"text\">switch(animal.type) {\n  \n  case \"dog\":\n    greetDogs(animal);\n  break;\n  case \"cat\":\n    greetCats(animal);\n break;\n}</code></p><p></p><p>那么，如果我们可以直接这样做，为什么还要大费周章地使用多重方法呢？问题的关键是可读性。</p><p>&nbsp;</p><p>switch语句非常开放，显示了我们的决策逻辑的实现。换句话说，这个语句是命令式的。它向你展示了决策树的内部运作情况，这意味着阅读代码的人将不得不在头脑中解析代码。因此，我们又回到了认知负荷的概念。这使得开发者要阅读并在头脑中解析代码。</p><p>&nbsp;</p><p>你要知道，大多数开发人员在遇到像上面这样的switch时，不会有什么反应。但是，这也不是一个实际的例子。通常情况下，case语句包含的代码更多，也更难阅读。</p><p>&nbsp;</p><p>而多重方法隐藏了决策逻辑的内部结构，你所知道的只是你对它做了设置，它将以某种方式工作。你更关心的是功能而不是实际的实现。这被称为“声明式编程”，有助于提高代码的可读性，同时降低开发人员的认知负担。这是因为它在逻辑上增加了一层抽象，为我们提供了更接近人类语言的表达工具。</p><p>&nbsp;</p><p>如果这还不能说服你，还有一个优点：可扩展性。</p><p>&nbsp;</p><p>如果你需要在switch中添加另一个选项，就必须回到代码中修改同一个switch，如果你，比如说，碰巧忘记添加break语句，就有可能造成问题，就像下面这样：</p><p></p><p><code lang=\"text\">switch(animal.type) {\n  case \"rabbit\":\n    greetRabbits(animal);\n  case \"dog\":\n    greetDogs(animal);\n  break;\n  case \"cat\":\n    greetCats(animal);\n break;\n}</code></p><p></p><p>还是个非常简单的例子，但如果是真实世界中一段更长的代码，那么这种情况出现的几率就更大了。</p><p>&nbsp;</p><p>以防你对这种行为不熟悉，请让我做个说明。第一个case中缺失break，会导致在动物类型为“rabbit”时也执行第二个case下的逻辑。</p><p>&nbsp;</p><p>然而，有了多重方法，我们就可以不断地根据需要对它进行扩展：</p><p></p><p><code lang=\"text\">let extendedGreeter = multi(\n    animal =&gt; animal.type,\n    method(\"parrot\", sayHiParrot)\n)(greeter)</code></p><p></p><p>现在，这个新方法extendedGreeter对“dog”、“cat“、”parrot“就都有效了，而我们不必再回去修改已有的代码。</p><p>&nbsp;</p><p>这是一个很大的好处，因为我们都知道，每次我们触碰可以正常工作的代码时，都有一点可能引入Bug。在这里，我们把可能性降低到0。</p><p>&nbsp;</p><p></p><h1>实现一个多重方法库</h1><p></p><p>&nbsp;</p><p>首先，你要知道，已经有一些库在处理这个问题了，其中一个例子是<a href=\"https://github.com/caderek/arrows/tree/master/packages/multimethod\">@arrows/multimethod</a>\"。</p><p>&nbsp;</p><p>尽管如此，对这些实现进行逆向工程总是很有趣，所以让我们看一看如何实现一个基本的多重方法库，以适应到目前为止所展示的例子。</p><p>&nbsp;</p><p>理解这个问题的关键是，我们需要一个分配器函数来给提供一个实际的值，我们将用它作为判断执行哪个方法的键。而且，我们不能对switch语句进行硬编码，因为选项的数量是不固定的。</p><p>&nbsp;</p><p>不能光说不练，下面是实现：</p><p></p><p><code lang=\"text\">\nfunction method(value, fn) {\n    return {value, fn}\n}\nfunction multi(dispatcher, ...methods) {\n    return (originalFn) =&gt; {\n        return (elem) =&gt; {\n            let key = dispatcher(elem)\n            let method = methods.find( m =&gt; m.value === key)\n            if(!method) {\n                if(originalFn) {\n                    return originalFn(elem)\n                } else {\n                    throw new Error(\"No sure what to do with this option!\")\n                }\n            }\n            return method.fn(elem)\n        }\n    }\n}</code></p><p></p><p>method函数只是把键和实际的逻辑耦合在一起，没有别的。multi函数中的代码才有趣，它返回一个匿名函数，以原始函数为参数并返回一个新函数，后者根据分配器代码（我们的第一个参数）返回的值执行不同的东西。</p><p>&nbsp;</p><p>让我们逐行看下：</p><p></p><p>首先，调用第8行的函数时提供一个属性（比方说myDog）。第9行的分配器逻辑会获取myDog并返回其类型，即“dog”。然后在第10行，我们找到第一个与该类型匹配的方法。如果没有方法匹配，但我们有一个有效的“originalFn”（也就是说，我们正在扩展一个原始的多重方法），我们会让它来处理这种情况。否则，我们将抛出一个异常，因为我们对此无能为力。然而，如果找到了匹配的方法，就在第18行执行它，并将原始属性“myDog”传递给它。</p><p>&nbsp;</p><p>就是这样。没那么复杂，对吗？当然，如果你想提供“默认”情况处理而不是抛出一个异常，或者你想处理多属性决策（比如根据属性type和name决定逻辑，而不是只根据第一个属性），就得编写更多的代码了。</p><p>&nbsp;</p><p>不过，还是那句话，如果你打算使用多重方法，建议你使用一个现有的库，而不是自己去实现。</p><p>&nbsp;</p><p>多重方法是一种有趣的方式，可以帮你摆脱令人讨厌的switch。而且，这也有助于提升代码的可读性。所以，既然你已经了解了多重方法，那么在决定继续坚持使用switch之前，一定要先试一试。</p><p>&nbsp;</p><p>你过去尝试过重多方法吗？你有什么看法？欢迎留言交流！</p><p>&nbsp;</p><p>查看英文原文：<a href=\"https://blog.bitsrc.io/drop-the-switch-statement-for-this-functional-programming-technique-faa193d903ae?gi=5a06fcb9545c\">Drop the Switch Statement for this Functional Programming Technique</a>\"</p>",
    "publish_time": "2022-09-06 10:46:33",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  },
  {
    "title": "青岛冷箱CIO耿峰：推数字化，背后离不开精益管理体系",
    "url": "https://www.infoq.cn/article/8eOkku2uTuU3qVFvwqhA",
    "summary": "<p>美国领导理论大师Warren Bennis曾对“无人工厂”做过这样的描述，他说未来的工厂只会有一条狗和一个人，人负责喂狗，狗负责让人不要靠近机器。这个关于“一人一狗一工厂”的美好畅想，<a href=\"http://www.qdcimc.com/\">青岛中集冷藏箱</a>\"（以下简称“青岛冷箱”）CIO耿峰也有一个，用他的话说，“未来的制造就是一个保安带着一只狗开着一个工厂”。</p><p></p><p>但是，在构画这个美好蓝图时，第一笔要画什么？是最先进的生产装备？最前沿的软硬件技术？还是最智能的应用系统？或许都不是。</p><p></p><p>在此前接受笔者采访时，耿峰讲了这样一个故事——2012年，青岛冷箱准备筹建新厂，当时定的目标是建一个“十五年不落后”的工厂。那么如何才能不落后？他们的答案是——这一定不是装备的不落后而是管理的不落后，因为在传统制造业，装备大概只有2-3年的领先期。</p><p></p><p>“所以，最后我们定的目标是打造一种新型的生产组织方式，而不是去买一个工具。”耿峰表示，“就像以前大家上ERP，有的企业效果好，有的效果就不好。其中很重要的原因就是，前者是重塑流程去推动变革，通过变革去激发活力，而后者是为了上系统而上系统。”</p><p></p><p>所以，沿着这个思路，青岛冷箱进一步提出要打造一个“<a href=\"https://www.infoq.cn/video/NOSquHeda2IsBK8Sv447?utm_source=home_video&amp;utm_medium=article\">数字化</a>\"+自动化+<a href=\"https://xie.infoq.cn/article/27d787c3f60ea6cb091e4295f\">精益化</a>\"”的工厂。其中，数字化与信息软件升级相关，自动化与设备升级相关，而精益化则与管理模式升级相关。</p><p></p><p>很多人把数字化转型视为一次技术变革，整个过程是技术驱动，只要把业务简单从线下搬到线上，建一些线上渠道，搭一个大数据平台，就声称是做了数字化——这些做法都并不全面。大量报告在谈及数字化转型失败率之高的原因时，常常会提到一点，即“缺少领导层的支持”。那么，为什么数字化转型离不开领导层支持，归根结底，正因为它是实实在在的<a href=\"https://www.infoq.cn/article/JoLrt2Zklg6D016so3hO\">管理变革</a>\"，而技术只是其中的实现手段。</p><p></p><p>反观青岛冷箱，他们在数字化初期就把数字化转型识别为管理问题而不仅仅是技术问题，并且，在这个过程中，青岛冷箱还把“数字化精益制造”这一先进管理理念作为管理变革主基调。耿峰表示，这让青岛冷箱的数字化工厂建设少走了很多的弯路。</p><p></p><h1>数字化和精益化有什么关系</h1><p></p><p></p><p>精益思想最早出现的背景，是1950年代日本汽车行业进入了小批量多品种时代。但是，汽车组装作业工序非常复杂，当时工厂还缺少基础的信息化工具，要做到产品多样化，物料和产品如何个性化匹配是一个难题。而日本工程师丰田英二在参观了福特的鲁奇工厂后，创立了看板管理的独特模式——这便是精益化</p><p>最早的表现形态。</p><p></p><p>通过把每一道工序的生产计划、生产进度等信息展示在看板上，据此向前后各道工序和仓库、采购等部门下达相应指令，实现产线的物流、信息流的传递，可以在很大程度上避免管理漏洞——比如，生产计划部门没有掌握物料信息就自行进行排产，如果出现物料异常或缺失，就可能造成产线空转，带来非必要的设备损耗和人工成本。</p><p></p><p>从这个角度来看，看板管理本质上就是<a href=\"https://mp.weixin.qq.com/s?__biz=MzI1MjEyODQxNg==&amp;mid=2650064017&amp;idx=1&amp;sn=d2fb9606a398dd583dd4d9413ef9c005&amp;chksm=f1e8195ec69f904844d74457e053237384498684eb56cc7246512a1d5db6cc6940a90655c090&amp;scene=27#wechat_redirect\">数据驱动</a>\"，这与数字化转型的核心如出一辙。只不过，过去的看板，现在变成了电脑、大屏；过去的单点数据，现在变成了信息流；其中呈现的数据量、数据维度，现在变得更大、更丰富。举例来说，当下非常流行的MRP（物料需求计划）系统，事实上也是用电脑替代了传统看板，通过对每道工序进行联网，实现指令的上传下达。</p><p></p><p>另一方面，精益思想追求的是极致的“七零”目标，即——零转产工时浪费、零库存、零浪费、零不良、零故障、零停滞、零灾害，其精髓是杜绝浪费、加速流程、提高品质——这些内容，同样与数字化转型“降本、增效、提质”的目标一致。因此，数字化与精益化的结合事实上是相互使能的过程。</p><p></p><p>具体来说，在推行数字化的过程中，精益思想的注入，可以帮助企业基于精益的价值流分析法，梳理全价值链的流程和痛点，以此为依据进行各点击破，持续优化和改善；反之，在落实精益制造的过程中，数字化技术的引入也可以帮助企业提高精益化的效率，实现效果的可视化。</p><p></p><p>而据耿峰介绍，从最开始，青岛冷箱的数字化就是跟精益制造融合在一起的。“青岛冷箱的数字化精益制造体系中有两个关键点，一是数据基础，二是文化改善。我们在落实精益的过程中，遵循的是先僵化、再规划、再优化，核心路径就是用数据去驱动完善，用数据去融合流程和业务，进而创造价值。”</p><p></p><h1>如何结合精益思想打造数字化工厂</h1><p></p><p></p><p>把数据基础做扎实，让数据无限接近真实</p><p></p><p>其中的数据基础，包括了计划、物料、物流、设备、质量等等，分别来自于MES、SAP、PLM以及IoT等系统。所以，打造这样一个<a href=\"https://www.infoq.cn/article/MDuweEQy7Qr1FNHFXzfN\">数字化工厂</a>\"，必不可少的基础工作，是把这些系统融合在一起。</p><p></p><p>青岛冷箱在这件事上，足足花了5年时间，对他们来说，这是一个按部就班、小步快跑的过程。</p><p></p><p>具体而言，青岛冷箱在2014年开始部署基于数字化精益制造的MES系统，聚焦标箱制造过程的透明化，先让生产计划、生产执行、物料、库存、设备、质量等信息实现了扁平化传递，让调度、班长、工人等可以从系统直接获取所需要的信息；</p><p></p><p>随后，在2018年，青岛冷箱又聚焦能源、设备互联、HSE（Health、Safety、Environmental）、关键工艺大数据建模等方向，把物联网与MES进行了融合，开启了IoT加工业大数据的探索之路；</p><p></p><p>2019年，青岛冷箱对MES、IoT、ERP进行了全线集成，实现了以ERP为核心的业财一体化的数字化运营体系，把业务、流程、数据完全融合在一起——至此，为数字化和精益化运营构建了平台级的基础。</p><p></p><p>如今，青岛冷箱数字化工厂已经实现了工艺流、物流和信息流的无障碍流通。一方面，是从产品、资源调拨到生产执行、物流仓储等各个环节全部实现数字化信息传递；另一方面，是把产品生产全周期中产生的数据进行采集和分析，反馈到管理流程中，实现质量监测、设备预警等，从而为价值流改善、质量改善、精益物流、效率改善和设备改善提供详细的参考和建议。</p><p></p><p>对照精益思想的“七零”目标，举几个具体的成果转化例子：在生产效率方面，目前青岛冷箱一个标箱的制造周期从缩短了1.5天；工序转产时间缩短到了不足一小时；从库存周转天数来看，相比同行的十几天到一个月，青岛冷箱则控制在了平均5天左右，库存资金占有率明显下降；物料的异常“发起”到“结算完毕”的时间，从此前的2天缩短到1小时左右。</p><p></p><p>“在制造业，人效是永恒的改善方向，说的直白一些就是用最少的人做最多的产品。”耿峰表示，据此，去年青岛冷箱上线了劳动力管理平台，从用工需求、招聘到入职后的技能培训、上岗排版、考勤、异常调配，以及后续的效能分析、用工成本统计、用工分析优化，形成了完整的<a href=\"https://www.infoq.cn/article/qGkEUAob4w36gz1YqxxS\">劳动力生命周期管理</a>\"。</p><p></p><p>当然，这些价值的呈现，还有一个前提条件——即确保各个流程中的数据足够可靠。对此，青岛冷箱的办法是在工厂范围内全范围覆盖移动端应用。“包括物料的收发退补、质检、设备点检、PM卡、设备故障安灯、设备故障处理等在内的各个环节，我们都做在APP上。我们叫做‘一机在手，现场业务全都有’。”耿峰解释，“目的是把集中的数据分布出来，以前的数据处理可能主要由一两个人负责，现在是全员在做数据，这么做的价值可以极大杜绝伪数据，得到的<a href=\"https://www.infoq.cn/article/f4o2j2asxq4XwVFBRL8c\">数据</a>\"才能无限地接近真实。”</p><p></p><p>循序渐进改善文化，让听到炮火的人指挥战斗</p><p></p><p>除了数据基础之外，根据耿峰的介绍，青岛冷箱数字化精益管理体系的另一个关键点是<a href=\"https://www.infoq.cn/article/HRBowLeJ4jByhV1MISz4\">文化改善</a>\"。但是和新技术的引进、系统的集成、数据平台的构建这些具体的工作不同，文化的改善是一个更长周期的事情，很难在一朝一夕就有立竿见影的效果，所以必须循序渐进。</p><p></p><p>在耿峰看来，这个过程必须有一把手的支持，才能逐步改善企业的氛围和体制。“无论是推数字化还是精益化，一定要把它作为一把手工程，各个业务线的一把手一定要重视并且参与进来。比如我们还在今年成立了专门的数字化工厂办公室，主要职能是对各个项目进行评估、资源调配，以及向上定期做数字化进度和方法等方面的汇报等等。”他强调，“在改善文化的过程中，这样一个组织是非常重要的。当然，数字化早期推动的时候可以没有，但是等数字化进行到一定规模和程度的时候必须要有。”</p><p></p><p>而在企业数字化转型的过程中，这种管理变革的思路也有很重要的参考意义。比如，很多传统企业都有一个比较普遍的现象，就是业务部门经常会“谈技术色变”。这是因为他们往往把自己和技术对立起来，认为后者是颠覆者——这实际上也是文化滞后在人员思想层面的映射。</p><p></p><p>所以，要打破这种偏见，就必须让全员、尤其是业务人员感受到数字化实实在在的价值，让他们成为其中的主人。“技术肯定不如业务部门懂业务，但我们比业务更能看全局，能更快洞察到先进技术。所以，技术应该作为一个平台的搭建者，在上面唱戏的主角是质量、物料、制造、设备等部门。”</p><p></p><p>在青岛冷箱，耿峰把这个过程称为“拉盟友上船”的过程，“<a href=\"https://www.infoq.cn/article/RuOHmW9rMy9oBC7EIu9Y\">管理变革</a>\"的路上，一开始大家肯定不都是在一条船上的，但是当你能借助技术的平台先帮一部分人解决他们的痛点，他肯定愿意跟你一起走。”</p><p></p><p>耿峰举例，比如青岛冷箱制造部门长以前巡视产线，基本都要亲自下现场，生产调度时基本都要靠对讲机吼，对于一个管理者来说，这是巨大的资源浪费，而且效率也不高。所以，他们的办法是通过车间监控+系统数据采集实现车间管理的可视化，管理者只需要远程关注异常数据节点，不用每天把几百亩的车间走上几遍。“不管是谁，只要发现通过数字化可以事半功倍，就会愿意去尝试。”</p><p></p><p>但即便是这样，青岛冷箱的信息化和数字化工作也并非一气呵成。“比如，我们在最初的时候拼命在做加法，业务部门提出各种各样的需求，我们就去开发各种各样的功能模块，但可能运行一段时间后，他们会发现有些功能并不是刚需，这时候我们又要做减法。”</p><p></p><p>耿峰把这样的验证磨合比喻成雕刻。“你不能先上色再雕刻，也不能边雕刻边上色，而是先雕完了再上色。企业数字化需要一个大的规划，但要阶段性去实现，而不是一上来就要求完美。我们看的应该是局部，比如系统上线固化下来后再去做优化。”</p><p></p><p>值得强调的是，在这个打磨的过程中，无论是做加法还是做减法，耿峰和技术团队都是以业务需求为依据的。“一定要让听到炮火的人去指挥战斗，而技术部门的职责就是让他们的‘指挥系统’更灵活、高效、简洁。”换个角度来说，这也是一个不断追求真因的过程，耿峰强调，只有技术人员能够准确识别业务的真痛点、真需求，才能保证双方的顺利沟通，才能从思想上打破偏见。</p><p></p><h1>总结</h1><p></p><p></p><p>回到青岛冷箱最初打造数字化工厂的初衷——建一个十五年管理年不落后的工厂。如今，距离这个目标的设定时间，已经过去了近十年。在这个过程中，外部环境发生了千般变化，但用耿峰的话说，数字化不是一个技术的五年规划，所以，青岛冷箱的管理重点和数字化目标也在随之不停地优化和调整。</p><p></p><p>而经过这十年如一日对数字化实践和方法论的持续探索，耿峰自己还总结出了十个“度”——顶层设计有高度、端端打通有广度、业绩主导有深度、试点推广有密度、多年征途有长度、敏捷组织有速度、推进机制有力度、以人为本有温度、物联架构有稳度、生态盟主有气度。</p><p></p><p>“基于这十个‘度’，我相信，未来的制造就是一个保安带着一只狗开着一个工厂。”</p>",
    "publish_time": "2022-09-06 11:41:19",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]