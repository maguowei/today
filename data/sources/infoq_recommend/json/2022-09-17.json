[
  {
    "title": "JDK 19最新动态和JDK 20 新特性预测",
    "url": "https://www.infoq.cn/article/0AXykmqvf5lHZsEQtjBp",
    "summary": "<p>甲骨文Java平台组首席架构师Mark Reinhold宣布JDK 19（JDK 17之后的第二个非LTS版本）已经进入初始发布候选阶段。主线源代码库（2022年6月初分叉到JDK稳定代码库）定义了JDK 19的特性集。关键的Bug（如回归或严重的功能问题）得到了解决，但必须通过Fix-Request流程批准。根据发布计划，JDK 19将在2022年9月20日正式发布。</p><p></p><p>最后一组（7个）新特性（以JEP的形式）可以分为三类——核心Java库、Java规范和Hotspot编译器。</p><p></p><p>被归类为核心Java库的4个新特性是：</p><p></p><p>JEP 424：<a href=\"https://openjdk.java.net/jeps/424?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">外部函数和内存API（预览）</a>\"；JEP 425：<a href=\"https://openjdk.java.net/jeps/425?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">虚拟线程（预览）</a>\"；JEP 426：<a href=\"https://openjdk.java.net/jeps/426?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">Vector API（第四轮孵化器）</a>\"；JEP 428：<a href=\"https://openjdk.java.net/jeps/428?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">结构化并发（孵化器）</a>\"。</p><p></p><p>被归类为Java规范的2个新特性是：</p><p></p><p>JEP 405：<a href=\"https://openjdk.java.net/jeps/405?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">记录模式（预览）</a>\"；JEP 427：<a href=\"https://openjdk.java.net/jeps/427?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">switch的模式匹配（第三次预览）</a>\"。</p><p></p><p>最后，被归类到Hotspot编译器的一个新特性是：</p><p></p><p>JEP 422：<a href=\"https://openjdk.java.net/jeps/422?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">Linux/RISC-V移植</a>\"</p><p></p><p>我们将介绍这些新特性，以及涵盖了这些新特性的四个主要Java项目——<a href=\"https://openjdk.java.net/projects/amber/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">Amber</a>\"、<a href=\"https://wiki.openjdk.java.net/display/loom?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">Loom</a>\"、<a href=\"https://openjdk.java.net/projects/panama/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">Panama</a>\"和<a href=\"https://openjdk.java.net/projects/valhalla/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">Valhalla</a>\"。这些项目旨在孵化出一系列组件，并最终经过合并包含在JDK中。</p><p></p><h2>Amber</h2><p></p><p></p><p>JEP 405，即记录模式（预览），提议用记录模式来解构记录值。记录模式可以与类型模式一起使用，“支持强大的、声明式的和可组合的数据浏览和处理形式”。类型模式最近已通过JEP 406（即switch的模式匹配（预览），在JDK 17中交付）和JEP 420（即switch的模式匹配（第二次预览），在JDK 18中交付）被用在switch的case子句中。更多关于JEP 405的细节可以在InfoQ的<a href=\"https://www.infoq.com/news/2022/05/java-record-pattern/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">报道</a>\"中看到。</p><p></p><p>JEP 427，即switch的模式匹配（第三次预览），针对前两轮预览反馈进行了增强——JEP 406（即switch的模式匹配（预览），在JDK 17中交付）和JEP 420（即switch的模式匹配（第二次预览），在JDK 18中交付）。JEP 420以来的变更包括——保护模式被替换为switch块中的when子句；当选择器表达式的值为空时，模式switch的运行时语义与遗留switch的语义更为接近。</p><p></p><h2>Loom</h2><p></p><p></p><p>JEP 425，即虚拟线程（预览），向Java平台引入了虚拟线程。这是一种轻量级线程，极大地减少了编写、维护和观察高吞吐量并发应用程序的工作量。更多关于JEP 425的细节可以在InfoQ的报道和甲骨文Java平台组开发者布道师José Paumard的JEP Café屏播中找到。</p><p></p><p>JEP 428，即结构化并发（孵化器），提议通过引入一个新的库来简化多线程编程，这个库将运行在不同线程中的多个任务视为单个工作单元。这可以简化错误处理和取消操作，提高可靠性，并增强可观察性。更多关于JEP 428的细节可以在InfoQ的<a href=\"https://www.infoq.com/news/2022/06/java-structured-concurrency/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">报道</a>\"中看到。</p><p></p><h2>Panama</h2><p></p><p></p><p>JEP 424，即外部函数和内存API（预览），为Java应用程序引入一个API，通过高效调用外部函数和安全访问不受JVM管理的外部内存来实现与Java运行时之外的代码和数据的互操作。这个JEP演化自JEP 419（即外部函数和内存API（第二轮孵化器），在JDK 18中交付）和JEP 412（即外部函数和内存API（孵化器），在JDK 17中交付），并针对Java社区的反馈进行了增强。</p><p></p><p>JEP 426，即Vector API（第四轮孵化器），根据前三轮孵化的反馈进行了改进——JEP 417（即Vector API（第三轮孵化器），在JDK 18中交付）、JEP 414（即Vector API（第二轮孵化器），在JDK 17中交付），以及JEP 338（即Vector API（孵化器），在JDK 16中作为孵化器模块交付）。JEP 426提议对Vector API进行增强，从MemorySegment（JEP 424，即外部函数和内存API（预览））加载或存储Vector。</p><p></p><h2>Hotspot编译器</h2><p></p><p></p><p>JEP 422，即Linux/RISC-V移植，提议将JDK移植到Linux/RISC-V（一种免费、开源的RISC指令集架构）上。移植版本将支持模板解释器、C1和C2 JIT编译器以及所有当前的主要垃圾回收器，包括ZGC和Shenandoah。这个JEP的主要重点是将移植的内容集成到JDK主线代码库中。</p><p></p><h2>JDK 20</h2><p></p><p></p><p>JDK 20预计于2023年3月发布GA版本，目前还没有相关的JEP。但是，根据最近提交的JEP草案和后续JEP，我们可以推测哪些JEP有可能被包含在JDK 20中。</p><p></p><p>JEP 429，即<a href=\"https://openjdk.org/jeps/429?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">扩展本地变量（孵化器）</a>\"，提议在线程内部和线程之间共享不可变数据。这要优于线程局部变量，特别是在使用大量虚拟线程时。更多关于JEP 429的细节可以在InfoQ的<a href=\"https://www.infoq.com/news/2022/09/extent-local-variables-java/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">报道</a>\"中看到。</p><p></p><p>JEP草案8277163，即<a href=\"https://openjdk.java.net/jeps/8277163?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">值对象（预览）</a>\"，提议创建值对象——指定实例行为的无标识值类。这个草案与JEP 401（原语类（预览），仍处于候选状态）相关。</p><p></p><p>JEP 401，即<a href=\"https://openjdk.org/jeps/401?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">原语类（预览）</a>\"，引入了由开发者声明的原语类——在前面提到的值对象（预览）JEP草案中定义的特殊类型的值类——定义了新的原语类型。</p><p></p><p>JEP草案8273943，即<a href=\"https://openjdk.org/jeps/8273943?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">字符串模板（预览）</a>\"，提议使用字符串模板来增强Java语言。字符串模板类似于字符串字面量，但包含了嵌入表达式，在运行时将合并到字符串模板中。</p><p></p><p>JEP草案8280836，即<a href=\"https://openjdk.org/jeps/8280836?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">有序集合</a>\"，提议引入“一组新的接口来表示集合概念，这些集合中的元素按照定义良好的顺序进行排列，作为集合的结构属性。”这是由于Java的Collections Framework缺乏定义良好的顺序和统一操作。</p><p></p><p>JEP草案8284289，即<a href=\"https://openjdk.org/jeps/8284289?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">改进的异步获取调用跟踪的方法</a>\"，提议定义一个有效的API，用于从信号处理器中获取用于分析的异步调用跟踪信息。</p><p></p><p>JEP草案8283227，即<a href=\"https://openjdk.org/jeps/8283227?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">JDK源结构</a>\"，用于描述JDK源代码和JDK代码库中相关文件的总体布局和结构。这个JEP建议帮助开发者适应JEP 201（在JDK 9中交付的模块化源代码）所描述的源代码结构。</p><p></p><p>JEP草案8280389，即<a href=\"https://openjdk.org/jeps/8280389?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">ClassFile API</a>\"，提议提供一个用于解析、生成和转换Java类文件的API。这个JEP在一开始将作为JDK内部的ASM（Java字节码操作和分析框架）替代品，并计划将其作为公共API开放出来。甲骨文Java语言架构师Brian Goetz将ASM描述为“一个带有大量遗留包袱的旧代码库”，并讲解了这个草案将如何演变并最终取代ASM。</p><p></p><p>JEP草案8278252，即<a href=\"https://openjdk.org/jeps/8278252?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">JDK打包和安装指南</a>\"，提议为macOS、Linux和Windows平台提供创建JDK安装程序的指南，以降低不同JDK提供程序安装JDK时发生冲突的风险。其目的是通过规范化安装目录名称、包名和其他可能导致冲突的安装程序元素，在安装JDK更新版本时提供更好的用户体验。</p><p></p><p>我们预计甲骨文将很快开始将这些JEP中的一些或其他JEP包含在JDK 20中。</p><p></p><p>原文链接：</p><p><a href=\"https://www.infoq.com/news/2022/09/java-19-so-far/?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2NjMyOTkwNjAsImZpbGVHVUlEIjoiQ1pBYVhUYWZxUFlwWXpZcSIsImlhdCI6MTY2MzI5ODc2MCwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo2MjMyOH0.P70chYf8kq5aaY1VqbJ-c26BjR29KeJXEA-UkR-O69s\">JDK 19 and JDK 20: What We Know So Far</a>\"</p><p></p><p>相关阅读：</p><p><a href=\"https://www.infoq.cn/article/y3oVWpHpiUUTwyQav7Vz\">Java 近期新闻：JDK 19 进入 RDP2、Oracle 关键补丁更新、TornadoVM on M1、Grails CVE</a>\"</p><p></p><p></p><p></p>",
    "publish_time": "2022-09-17 08:00:00",
    "source": {
      "name": "infoq_recommend",
      "desc": "InfoQ推荐",
      "icon": "https://raw.githubusercontent.com/maguowei/today/master/imgs/icon/infoq.png"
    }
  }
]